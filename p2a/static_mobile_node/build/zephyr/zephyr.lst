
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	40 80 00 20 4d ae 00 00 89 82 02 00 21 ae 00 00     @.. M.......!...
    1010:	21 ae 00 00 21 ae 00 00 21 ae 00 00 00 00 00 00     !...!...!.......
	...
    102c:	8d a6 00 00 21 ae 00 00 00 00 00 00 35 a6 00 00     ....!.......5...
    103c:	21 ae 00 00                                         !...

00001040 <_irq_vector_table>:
    1040:	41 a7 00 00 81 c5 01 00 41 a7 00 00 41 a7 00 00     A.......A...A...
    1050:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    1060:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    1070:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    1080:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    1090:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    10a0:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    10b0:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    10c0:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    10d0:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    10e0:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...
    10f0:	41 a7 00 00 41 a7 00 00 41 a7 00 00 41 a7 00 00     A...A...A...A...

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1138:	4607      	mov	r7, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    1140:	4615      	mov	r5, r2
    1142:	463c      	mov	r4, r7
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c6 	bne.w	12d8 <__udivmoddi4+0x1a4>
    114c:	4282      	cmp	r2, r0
    114e:	fab2 f782 	clz	r7, r2
    1152:	d946      	bls.n	11e2 <__udivmoddi4+0xae>
    1154:	b14f      	cbz	r7, 116a <__udivmoddi4+0x36>
    1156:	f1c7 0e20 	rsb	lr, r7, #32
    115a:	fa24 fe0e 	lsr.w	lr, r4, lr
    115e:	fa00 f307 	lsl.w	r3, r0, r7
    1162:	40bd      	lsls	r5, r7
    1164:	ea4e 0c03 	orr.w	ip, lr, r3
    1168:	40bc      	lsls	r4, r7
    116a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    116e:	fa1f fe85 	uxth.w	lr, r5
    1172:	fbbc f9f8 	udiv	r9, ip, r8
    1176:	0c22      	lsrs	r2, r4, #16
    1178:	fb08 c319 	mls	r3, r8, r9, ip
    117c:	fb09 fa0e 	mul.w	sl, r9, lr
    1180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1184:	459a      	cmp	sl, r3
    1186:	d928      	bls.n	11da <__udivmoddi4+0xa6>
    1188:	18eb      	adds	r3, r5, r3
    118a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    118e:	d204      	bcs.n	119a <__udivmoddi4+0x66>
    1190:	459a      	cmp	sl, r3
    1192:	d902      	bls.n	119a <__udivmoddi4+0x66>
    1194:	f1a9 0002 	sub.w	r0, r9, #2
    1198:	442b      	add	r3, r5
    119a:	eba3 030a 	sub.w	r3, r3, sl
    119e:	b2a4      	uxth	r4, r4
    11a0:	fbb3 f2f8 	udiv	r2, r3, r8
    11a4:	fb08 3312 	mls	r3, r8, r2, r3
    11a8:	fb02 fe0e 	mul.w	lr, r2, lr
    11ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11b0:	45a6      	cmp	lr, r4
    11b2:	d914      	bls.n	11de <__udivmoddi4+0xaa>
    11b4:	192c      	adds	r4, r5, r4
    11b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    11ba:	d203      	bcs.n	11c4 <__udivmoddi4+0x90>
    11bc:	45a6      	cmp	lr, r4
    11be:	d901      	bls.n	11c4 <__udivmoddi4+0x90>
    11c0:	1e93      	subs	r3, r2, #2
    11c2:	442c      	add	r4, r5
    11c4:	eba4 040e 	sub.w	r4, r4, lr
    11c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    11cc:	b11e      	cbz	r6, 11d6 <__udivmoddi4+0xa2>
    11ce:	40fc      	lsrs	r4, r7
    11d0:	2300      	movs	r3, #0
    11d2:	6034      	str	r4, [r6, #0]
    11d4:	6073      	str	r3, [r6, #4]
    11d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11da:	4648      	mov	r0, r9
    11dc:	e7dd      	b.n	119a <__udivmoddi4+0x66>
    11de:	4613      	mov	r3, r2
    11e0:	e7f0      	b.n	11c4 <__udivmoddi4+0x90>
    11e2:	b902      	cbnz	r2, 11e6 <__udivmoddi4+0xb2>
    11e4:	deff      	udf	#255	; 0xff
    11e6:	bb87      	cbnz	r7, 124a <__udivmoddi4+0x116>
    11e8:	1a83      	subs	r3, r0, r2
    11ea:	2101      	movs	r1, #1
    11ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11f0:	b2aa      	uxth	r2, r5
    11f2:	fbb3 fcfe 	udiv	ip, r3, lr
    11f6:	0c20      	lsrs	r0, r4, #16
    11f8:	fb0e 331c 	mls	r3, lr, ip, r3
    11fc:	fb0c f802 	mul.w	r8, ip, r2
    1200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    1204:	4598      	cmp	r8, r3
    1206:	d963      	bls.n	12d0 <__udivmoddi4+0x19c>
    1208:	18eb      	adds	r3, r5, r3
    120a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    120e:	d204      	bcs.n	121a <__udivmoddi4+0xe6>
    1210:	4598      	cmp	r8, r3
    1212:	d902      	bls.n	121a <__udivmoddi4+0xe6>
    1214:	f1ac 0002 	sub.w	r0, ip, #2
    1218:	442b      	add	r3, r5
    121a:	eba3 0308 	sub.w	r3, r3, r8
    121e:	b2a4      	uxth	r4, r4
    1220:	fbb3 fcfe 	udiv	ip, r3, lr
    1224:	fb0e 331c 	mls	r3, lr, ip, r3
    1228:	fb0c f202 	mul.w	r2, ip, r2
    122c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1230:	42a2      	cmp	r2, r4
    1232:	d94f      	bls.n	12d4 <__udivmoddi4+0x1a0>
    1234:	192c      	adds	r4, r5, r4
    1236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    123a:	d204      	bcs.n	1246 <__udivmoddi4+0x112>
    123c:	42a2      	cmp	r2, r4
    123e:	d902      	bls.n	1246 <__udivmoddi4+0x112>
    1240:	f1ac 0302 	sub.w	r3, ip, #2
    1244:	442c      	add	r4, r5
    1246:	1aa4      	subs	r4, r4, r2
    1248:	e7be      	b.n	11c8 <__udivmoddi4+0x94>
    124a:	f1c7 0c20 	rsb	ip, r7, #32
    124e:	fa20 f80c 	lsr.w	r8, r0, ip
    1252:	fa00 f307 	lsl.w	r3, r0, r7
    1256:	fa24 fc0c 	lsr.w	ip, r4, ip
    125a:	40bd      	lsls	r5, r7
    125c:	ea4c 0203 	orr.w	r2, ip, r3
    1260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1264:	b2ab      	uxth	r3, r5
    1266:	fbb8 fcfe 	udiv	ip, r8, lr
    126a:	0c11      	lsrs	r1, r2, #16
    126c:	fb0e 801c 	mls	r0, lr, ip, r8
    1270:	fb0c f903 	mul.w	r9, ip, r3
    1274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    1278:	4581      	cmp	r9, r0
    127a:	fa04 f407 	lsl.w	r4, r4, r7
    127e:	d923      	bls.n	12c8 <__udivmoddi4+0x194>
    1280:	1828      	adds	r0, r5, r0
    1282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    1286:	d204      	bcs.n	1292 <__udivmoddi4+0x15e>
    1288:	4581      	cmp	r9, r0
    128a:	d902      	bls.n	1292 <__udivmoddi4+0x15e>
    128c:	f1ac 0102 	sub.w	r1, ip, #2
    1290:	4428      	add	r0, r5
    1292:	eba0 0009 	sub.w	r0, r0, r9
    1296:	b292      	uxth	r2, r2
    1298:	fbb0 fcfe 	udiv	ip, r0, lr
    129c:	fb0e 001c 	mls	r0, lr, ip, r0
    12a0:	fb0c f803 	mul.w	r8, ip, r3
    12a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    12a8:	4598      	cmp	r8, r3
    12aa:	d90f      	bls.n	12cc <__udivmoddi4+0x198>
    12ac:	18eb      	adds	r3, r5, r3
    12ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    12b2:	d204      	bcs.n	12be <__udivmoddi4+0x18a>
    12b4:	4598      	cmp	r8, r3
    12b6:	d902      	bls.n	12be <__udivmoddi4+0x18a>
    12b8:	f1ac 0202 	sub.w	r2, ip, #2
    12bc:	442b      	add	r3, r5
    12be:	eba3 0308 	sub.w	r3, r3, r8
    12c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    12c6:	e791      	b.n	11ec <__udivmoddi4+0xb8>
    12c8:	4661      	mov	r1, ip
    12ca:	e7e2      	b.n	1292 <__udivmoddi4+0x15e>
    12cc:	4662      	mov	r2, ip
    12ce:	e7f6      	b.n	12be <__udivmoddi4+0x18a>
    12d0:	4660      	mov	r0, ip
    12d2:	e7a2      	b.n	121a <__udivmoddi4+0xe6>
    12d4:	4663      	mov	r3, ip
    12d6:	e7b6      	b.n	1246 <__udivmoddi4+0x112>
    12d8:	4283      	cmp	r3, r0
    12da:	d905      	bls.n	12e8 <__udivmoddi4+0x1b4>
    12dc:	b10e      	cbz	r6, 12e2 <__udivmoddi4+0x1ae>
    12de:	e9c6 7000 	strd	r7, r0, [r6]
    12e2:	2100      	movs	r1, #0
    12e4:	4608      	mov	r0, r1
    12e6:	e776      	b.n	11d6 <__udivmoddi4+0xa2>
    12e8:	fab3 f183 	clz	r1, r3
    12ec:	b981      	cbnz	r1, 1310 <__udivmoddi4+0x1dc>
    12ee:	4283      	cmp	r3, r0
    12f0:	d301      	bcc.n	12f6 <__udivmoddi4+0x1c2>
    12f2:	42ba      	cmp	r2, r7
    12f4:	d80a      	bhi.n	130c <__udivmoddi4+0x1d8>
    12f6:	1abc      	subs	r4, r7, r2
    12f8:	eb60 0303 	sbc.w	r3, r0, r3
    12fc:	2001      	movs	r0, #1
    12fe:	469c      	mov	ip, r3
    1300:	2e00      	cmp	r6, #0
    1302:	d068      	beq.n	13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
    1304:	e9c6 4c00 	strd	r4, ip, [r6]
    1308:	2100      	movs	r1, #0
    130a:	e764      	b.n	11d6 <__udivmoddi4+0xa2>
    130c:	4608      	mov	r0, r1
    130e:	e7f7      	b.n	1300 <__udivmoddi4+0x1cc>
    1310:	f1c1 0c20 	rsb	ip, r1, #32
    1314:	408b      	lsls	r3, r1
    1316:	fa22 f40c 	lsr.w	r4, r2, ip
    131a:	431c      	orrs	r4, r3
    131c:	fa02 f501 	lsl.w	r5, r2, r1
    1320:	fa00 f301 	lsl.w	r3, r0, r1
    1324:	fa27 f20c 	lsr.w	r2, r7, ip
    1328:	fa20 fb0c 	lsr.w	fp, r0, ip
    132c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1330:	4313      	orrs	r3, r2
    1332:	fbbb f8f9 	udiv	r8, fp, r9
    1336:	fa1f fe84 	uxth.w	lr, r4
    133a:	fb09 bb18 	mls	fp, r9, r8, fp
    133e:	0c1a      	lsrs	r2, r3, #16
    1340:	fb08 fa0e 	mul.w	sl, r8, lr
    1344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    1348:	4592      	cmp	sl, r2
    134a:	fa07 f701 	lsl.w	r7, r7, r1
    134e:	d93e      	bls.n	13ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46>
    1350:	18a2      	adds	r2, r4, r2
    1352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1356:	d204      	bcs.n	1362 <__udivmoddi4+0x22e>
    1358:	4592      	cmp	sl, r2
    135a:	d902      	bls.n	1362 <__udivmoddi4+0x22e>
    135c:	f1a8 0002 	sub.w	r0, r8, #2
    1360:	4422      	add	r2, r4
    1362:	eba2 020a 	sub.w	r2, r2, sl
    1366:	b29b      	uxth	r3, r3
    1368:	fbb2 f8f9 	udiv	r8, r2, r9
    136c:	fb09 2218 	mls	r2, r9, r8, r2
    1370:	fb08 fe0e 	mul.w	lr, r8, lr
    1374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    1378:	4596      	cmp	lr, r2
    137a:	d92a      	bls.n	13d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a>
    137c:	18a2      	adds	r2, r4, r2
    137e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1382:	d204      	bcs.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    1384:	4596      	cmp	lr, r2
    1386:	d902      	bls.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    1388:	f1a8 0302 	sub.w	r3, r8, #2
    138c:	4422      	add	r2, r4
    138e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1392:	fba0 9305 	umull	r9, r3, r0, r5
    1396:	eba2 020e 	sub.w	r2, r2, lr
    139a:	429a      	cmp	r2, r3
    139c:	46ce      	mov	lr, r9
    139e:	4698      	mov	r8, r3
    13a0:	d302      	bcc.n	13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    13a2:	d106      	bne.n	13b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a>
    13a4:	454f      	cmp	r7, r9
    13a6:	d204      	bcs.n	13b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a>
    13a8:	ebb9 0e05 	subs.w	lr, r9, r5
    13ac:	eb63 0804 	sbc.w	r8, r3, r4
    13b0:	3801      	subs	r0, #1
    13b2:	b186      	cbz	r6, 13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
    13b4:	ebb7 030e 	subs.w	r3, r7, lr
    13b8:	eb62 0708 	sbc.w	r7, r2, r8
    13bc:	fa07 fc0c 	lsl.w	ip, r7, ip
    13c0:	40cb      	lsrs	r3, r1
    13c2:	ea4c 0303 	orr.w	r3, ip, r3
    13c6:	40cf      	lsrs	r7, r1
    13c8:	e9c6 3700 	strd	r3, r7, [r6]
    13cc:	e79c      	b.n	1308 <__udivmoddi4+0x1d4>
    13ce:	4640      	mov	r0, r8
    13d0:	e7c7      	b.n	1362 <__udivmoddi4+0x22e>
    13d2:	4643      	mov	r3, r8
    13d4:	e7db      	b.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13d6:	4631      	mov	r1, r6
    13d8:	e6fd      	b.n	11d6 <__udivmoddi4+0xa2>
    13da:	0000      	movs	r0, r0
    13dc:	0000      	movs	r0, r0
	...

000013e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    13e0:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    13e2:	4d48      	ldr	r5, [pc, #288]	; (1504 <bt_init+0x124>)
    13e4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    13e8:	6899      	ldr	r1, [r3, #8]
    13ea:	f011 0101 	ands.w	r1, r1, #1
{
    13ee:	b090      	sub	sp, #64	; 0x40
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    13f0:	d123      	bne.n	143a <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    13f2:	aa0a      	add	r2, sp, #40	; 0x28
    13f4:	f640 4003 	movw	r0, #3075	; 0xc03
    13f8:	f00a ff08 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    13fc:	4604      	mov	r4, r0
    13fe:	2800      	cmp	r0, #0
    1400:	d172      	bne.n	14e8 <bt_init+0x108>
	uint8_t status = buf->data[0];
    1402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1404:	689b      	ldr	r3, [r3, #8]
	if (status) {
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	b9a3      	cbnz	r3, 1434 <bt_init+0x54>
		bt_scan_reset();
    140a:	f00c fb7f 	bl	db0c <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    140e:	f3bf 8f5b 	dmb	ish
    1412:	462b      	mov	r3, r5
    1414:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    1418:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    141c:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1420:	f3bf 8f5b 	dmb	ish
    1424:	e853 1f00 	ldrex	r1, [r3]
    1428:	e843 2000 	strex	r0, r2, [r3]
    142c:	2800      	cmp	r0, #0
    142e:	d1f9      	bne.n	1424 <bt_init+0x44>
    1430:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    1434:	980a      	ldr	r0, [sp, #40]	; 0x28
    1436:	f01d ff19 	bl	1f26c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    143a:	aa0a      	add	r2, sp, #40	; 0x28
    143c:	2100      	movs	r1, #0
    143e:	f241 0003 	movw	r0, #4099	; 0x1003
    1442:	f00a fee3 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    1446:	4604      	mov	r4, r0
    1448:	2800      	cmp	r0, #0
    144a:	d14d      	bne.n	14e8 <bt_init+0x108>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    144c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    144e:	482e      	ldr	r0, [pc, #184]	; (1508 <bt_init+0x128>)
    1450:	6899      	ldr	r1, [r3, #8]
    1452:	2208      	movs	r2, #8
    1454:	3101      	adds	r1, #1
    1456:	f027 f8ae 	bl	285b6 <memcpy>
	net_buf_unref(rsp);
    145a:	980a      	ldr	r0, [sp, #40]	; 0x28
    145c:	f01d ff06 	bl	1f26c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1460:	4621      	mov	r1, r4
    1462:	aa0a      	add	r2, sp, #40	; 0x28
    1464:	f241 0001 	movw	r0, #4097	; 0x1001
    1468:	f00a fed0 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    146c:	4604      	mov	r4, r0
    146e:	2800      	cmp	r0, #0
    1470:	d13a      	bne.n	14e8 <bt_init+0x108>
	read_local_ver_complete(rsp);
    1472:	980a      	ldr	r0, [sp, #40]	; 0x28
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    1474:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    1476:	785a      	ldrb	r2, [r3, #1]
    1478:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    147c:	78d9      	ldrb	r1, [r3, #3]
    147e:	789a      	ldrb	r2, [r3, #2]
    1480:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1484:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    1488:	791a      	ldrb	r2, [r3, #4]
    148a:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    148e:	7a19      	ldrb	r1, [r3, #8]
    1490:	79da      	ldrb	r2, [r3, #7]
    1492:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1496:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    149a:	795a      	ldrb	r2, [r3, #5]
    149c:	799b      	ldrb	r3, [r3, #6]
    149e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    14a2:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    14a6:	f01d fee1 	bl	1f26c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    14aa:	4621      	mov	r1, r4
    14ac:	aa0a      	add	r2, sp, #40	; 0x28
    14ae:	f241 0002 	movw	r0, #4098	; 0x1002
    14b2:	f00a feab 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    14b6:	4604      	mov	r4, r0
    14b8:	b9b0      	cbnz	r0, 14e8 <bt_init+0x108>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    14ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	memcpy(bt_dev.supported_commands, rp->commands,
    14bc:	4813      	ldr	r0, [pc, #76]	; (150c <bt_init+0x12c>)
    14be:	6899      	ldr	r1, [r3, #8]
    14c0:	2240      	movs	r2, #64	; 0x40
    14c2:	3101      	adds	r1, #1
    14c4:	f027 f877 	bl	285b6 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    14c8:	4810      	ldr	r0, [pc, #64]	; (150c <bt_init+0x12c>)
    14ca:	f027 f928 	bl	2871e <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    14ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    14d0:	f01d fecc 	bl	1f26c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    14d4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    14d8:	0659      	lsls	r1, r3, #25
    14da:	d41d      	bmi.n	1518 <bt_init+0x138>
		BT_ERR("Non-LE capable controller detected!");
    14dc:	480c      	ldr	r0, [pc, #48]	; (1510 <bt_init+0x130>)
    14de:	6803      	ldr	r3, [r0, #0]
    14e0:	075a      	lsls	r2, r3, #29
    14e2:	d104      	bne.n	14ee <bt_init+0x10e>
		return -ENODEV;
    14e4:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    14e8:	4620      	mov	r0, r4
    14ea:	b010      	add	sp, #64	; 0x40
    14ec:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Non-LE capable controller detected!");
    14ee:	4b09      	ldr	r3, [pc, #36]	; (1514 <bt_init+0x134>)
    14f0:	930e      	str	r3, [sp, #56]	; 0x38
    14f2:	aa0d      	add	r2, sp, #52	; 0x34
    14f4:	2302      	movs	r3, #2
    14f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    14fa:	9309      	str	r3, [sp, #36]	; 0x24
    14fc:	930d      	str	r3, [sp, #52]	; 0x34
    14fe:	f027 f9b5 	bl	2886c <z_log_msg2_static_create.constprop.0>
    1502:	e7ef      	b.n	14e4 <bt_init+0x104>
    1504:	20000000 	.word	0x20000000
    1508:	20000070 	.word	0x20000070
    150c:	20000078 	.word	0x20000078
    1510:	200009fc 	.word	0x200009fc
    1514:	000306e7 	.word	0x000306e7
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1518:	4621      	mov	r1, r4
    151a:	aa0a      	add	r2, sp, #40	; 0x28
    151c:	f242 0003 	movw	r0, #8195	; 0x2003
    1520:	f00a fe74 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    1524:	4604      	mov	r4, r0
    1526:	2800      	cmp	r0, #0
    1528:	d1de      	bne.n	14e8 <bt_init+0x108>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    152a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    152c:	48bc      	ldr	r0, [pc, #752]	; (1820 <bt_init+0x440>)
    152e:	6899      	ldr	r1, [r3, #8]
    1530:	2208      	movs	r2, #8
    1532:	3101      	adds	r1, #1
    1534:	f027 f83f 	bl	285b6 <memcpy>
	net_buf_unref(rsp);
    1538:	980a      	ldr	r0, [sp, #40]	; 0x28
    153a:	f01d fe97 	bl	1f26c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    153e:	4621      	mov	r1, r4
    1540:	aa0a      	add	r2, sp, #40	; 0x28
    1542:	f242 0002 	movw	r0, #8194	; 0x2002
    1546:	f00a fe61 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    154a:	4604      	mov	r4, r0
    154c:	2800      	cmp	r0, #0
    154e:	d1cb      	bne.n	14e8 <bt_init+0x108>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    1550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1552:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    1554:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    1558:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    155c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    155e:	b121      	cbz	r1, 156a <bt_init+0x18a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1560:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1562:	48b0      	ldr	r0, [pc, #704]	; (1824 <bt_init+0x444>)
    1564:	4611      	mov	r1, r2
    1566:	f02a f8b6 	bl	2b6d6 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    156a:	980a      	ldr	r0, [sp, #40]	; 0x28
    156c:	f01d fe7e 	bl	1f26c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1570:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    1574:	f016 0620 	ands.w	r6, r6, #32
    1578:	f000 811a 	beq.w	17b0 <bt_init+0x3d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    157c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    1580:	071b      	lsls	r3, r3, #28
    1582:	d512      	bpl.n	15aa <bt_init+0x1ca>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1584:	aa0a      	add	r2, sp, #40	; 0x28
    1586:	2100      	movs	r1, #0
    1588:	f242 001c 	movw	r0, #8220	; 0x201c
    158c:	f00a fe3e 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    1590:	4604      	mov	r4, r0
    1592:	2800      	cmp	r0, #0
    1594:	d1a8      	bne.n	14e8 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
    1596:	980a      	ldr	r0, [sp, #40]	; 0x28
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1598:	6883      	ldr	r3, [r0, #8]
    159a:	f8d3 2001 	ldr.w	r2, [r3, #1]
    159e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    15a2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    15a6:	f01d fe61 	bl	1f26c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    15aa:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    15ae:	069e      	lsls	r6, r3, #26
    15b0:	d523      	bpl.n	15fa <bt_init+0x21a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    15b2:	a909      	add	r1, sp, #36	; 0x24
    15b4:	a808      	add	r0, sp, #32
    15b6:	f00a fead 	bl	c314 <hci_le_read_max_data_len>
		if (err) {
    15ba:	4604      	mov	r4, r0
    15bc:	2800      	cmp	r0, #0
    15be:	d193      	bne.n	14e8 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    15c0:	2104      	movs	r1, #4
    15c2:	f242 0024 	movw	r0, #8228	; 0x2024
    15c6:	f00a fcb1 	bl	bf2c <bt_hci_cmd_create>
		if (!buf) {
    15ca:	4606      	mov	r6, r0
    15cc:	2800      	cmp	r0, #0
    15ce:	f000 80f6 	beq.w	17be <bt_init+0x3de>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    15d2:	2104      	movs	r1, #4
    15d4:	3008      	adds	r0, #8
    15d6:	f029 fa08 	bl	2a9ea <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    15da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    15de:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    15e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    15e4:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    15e6:	4622      	mov	r2, r4
    15e8:	4631      	mov	r1, r6
    15ea:	f242 0024 	movw	r0, #8228	; 0x2024
    15ee:	f00a fe0d 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    15f2:	4604      	mov	r4, r0
    15f4:	2800      	cmp	r0, #0
    15f6:	f47f af77 	bne.w	14e8 <bt_init+0x108>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    15fa:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    15fe:	065c      	lsls	r4, r3, #25
    1600:	d52c      	bpl.n	165c <bt_init+0x27c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
    1602:	2102      	movs	r1, #2
    1604:	f242 002e 	movw	r0, #8238	; 0x202e
    1608:	f00a fc90 	bl	bf2c <bt_hci_cmd_create>
		if (!buf) {
    160c:	4604      	mov	r4, r0
    160e:	2800      	cmp	r0, #0
    1610:	f000 80d5 	beq.w	17be <bt_init+0x3de>
    1614:	2102      	movs	r1, #2
    1616:	3008      	adds	r0, #8
    1618:	f029 f9e7 	bl	2a9ea <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
    161c:	f06f 037b 	mvn.w	r3, #123	; 0x7b
    1620:	7003      	strb	r3, [r0, #0]
    1622:	2303      	movs	r3, #3
    1624:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
    1626:	4621      	mov	r1, r4
    1628:	2200      	movs	r2, #0
    162a:	f242 002e 	movw	r0, #8238	; 0x202e
    162e:	f00a fded 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    1632:	4604      	mov	r4, r0
    1634:	2800      	cmp	r0, #0
    1636:	f47f af57 	bne.w	14e8 <bt_init+0x108>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    163a:	4601      	mov	r1, r0
    163c:	aa0a      	add	r2, sp, #40	; 0x28
    163e:	f242 002a 	movw	r0, #8234	; 0x202a
    1642:	f00a fde3 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    1646:	4604      	mov	r4, r0
    1648:	2800      	cmp	r0, #0
    164a:	f47f af4d 	bne.w	14e8 <bt_init+0x108>
		le_read_resolving_list_size_complete(rsp);
    164e:	980a      	ldr	r0, [sp, #40]	; 0x28
	bt_dev.le.rl_size = rp->rl_size;
    1650:	6883      	ldr	r3, [r0, #8]
    1652:	785b      	ldrb	r3, [r3, #1]
    1654:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    1658:	f01d fe08 	bl	1f26c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    165c:	2108      	movs	r1, #8
    165e:	f242 0001 	movw	r0, #8193	; 0x2001
    1662:	f00a fc63 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    1666:	4604      	mov	r4, r0
    1668:	2800      	cmp	r0, #0
    166a:	f000 80a8 	beq.w	17be <bt_init+0x3de>
    166e:	2108      	movs	r1, #8
    1670:	4408      	add	r0, r1
    1672:	f029 f9ba 	bl	2a9ea <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    1676:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    167a:	f011 0f40 	tst.w	r1, #64	; 0x40
    167e:	4602      	mov	r2, r0
    1680:	f240 2302 	movw	r3, #514	; 0x202
    1684:	bf08      	it	eq
    1686:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    1688:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    168a:	bf4c      	ite	mi
    168c:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    1690:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1694:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    1698:	068e      	lsls	r6, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    169a:	bf48      	it	mi
    169c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    16a0:	f013 0f09 	tst.w	r3, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    16a4:	bf18      	it	ne
    16a6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    16aa:	07cb      	lsls	r3, r1, #31
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    16ac:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
    16b0:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    16b4:	bf48      	it	mi
    16b6:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    16ba:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    16bc:	bf08      	it	eq
    16be:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    16c2:	2100      	movs	r1, #0
    16c4:	f027 f8e3 	bl	2888e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    16c8:	4621      	mov	r1, r4
    16ca:	2200      	movs	r2, #0
    16cc:	f242 0001 	movw	r0, #8193	; 0x2001
    16d0:	f00a fd9c 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    16d4:	4604      	mov	r4, r0
    16d6:	2800      	cmp	r0, #0
    16d8:	f47f af06 	bne.w	14e8 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    16dc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    16e0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    16e4:	069e      	lsls	r6, r3, #26
    16e6:	d47f      	bmi.n	17e8 <bt_init+0x408>
	if (bt_dev.le.acl_mtu) {
    16e8:	b9d9      	cbnz	r1, 1722 <bt_init+0x342>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    16ea:	aa0a      	add	r2, sp, #40	; 0x28
    16ec:	f241 0005 	movw	r0, #4101	; 0x1005
    16f0:	f00a fd8c 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    16f4:	4604      	mov	r4, r0
    16f6:	2800      	cmp	r0, #0
    16f8:	f47f aef6 	bne.w	14e8 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
    16fc:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    1700:	b963      	cbnz	r3, 171c <bt_init+0x33c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    1702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1704:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    1706:	785a      	ldrb	r2, [r3, #1]
    1708:	7899      	ldrb	r1, [r3, #2]
    170a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    170e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1712:	889a      	ldrh	r2, [r3, #4]
    1714:	4843      	ldr	r0, [pc, #268]	; (1824 <bt_init+0x444>)
    1716:	4611      	mov	r1, r2
    1718:	f029 ffdd 	bl	2b6d6 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    171c:	980a      	ldr	r0, [sp, #40]	; 0x28
    171e:	f01d fda5 	bl	1f26c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1722:	2108      	movs	r1, #8
    1724:	f640 4001 	movw	r0, #3073	; 0xc01
    1728:	f00a fc00 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    172c:	4604      	mov	r4, r0
    172e:	2800      	cmp	r0, #0
    1730:	d045      	beq.n	17be <bt_init+0x3de>
    1732:	2108      	movs	r1, #8
    1734:	4408      	add	r0, r1
    1736:	f029 f958 	bl	2a9ea <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    173a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    173e:	07d9      	lsls	r1, r3, #31
    1740:	4602      	mov	r2, r0
    1742:	d564      	bpl.n	180e <bt_init+0x42e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    1744:	a134      	add	r1, pc, #208	; (adr r1, 1818 <bt_init+0x438>)
    1746:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    174a:	f027 f8a0 	bl	2888e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    174e:	4621      	mov	r1, r4
    1750:	2200      	movs	r2, #0
    1752:	f640 4001 	movw	r0, #3073	; 0xc01
    1756:	f00a fd59 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    175a:	4604      	mov	r4, r0
    175c:	2800      	cmp	r0, #0
    175e:	f47f aec3 	bne.w	14e8 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1762:	4601      	mov	r1, r0
    1764:	aa08      	add	r2, sp, #32
    1766:	f64f 4001 	movw	r0, #64513	; 0xfc01
    176a:	f00a fd4f 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    176e:	4c2e      	ldr	r4, [pc, #184]	; (1828 <bt_init+0x448>)
		BT_WARN("Vendor HCI extensions not available");
    1770:	6823      	ldr	r3, [r4, #0]
	if (err) {
    1772:	2800      	cmp	r0, #0
    1774:	d060      	beq.n	1838 <bt_init+0x458>
		BT_WARN("Vendor HCI extensions not available");
    1776:	f013 0f06 	tst.w	r3, #6
    177a:	d00a      	beq.n	1792 <bt_init+0x3b2>
    177c:	4b2b      	ldr	r3, [pc, #172]	; (182c <bt_init+0x44c>)
    177e:	930e      	str	r3, [sp, #56]	; 0x38
    1780:	2302      	movs	r3, #2
    1782:	9309      	str	r3, [sp, #36]	; 0x24
    1784:	930d      	str	r3, [sp, #52]	; 0x34
    1786:	aa0d      	add	r2, sp, #52	; 0x34
    1788:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    178c:	4620      	mov	r0, r4
			BT_WARN("Failed to read supported vendor features");
    178e:	f027 f86d 	bl	2886c <z_log_msg2_static_create.constprop.0>
	err = bt_id_init();
    1792:	f00c f8f7 	bl	d984 <bt_id_init>
	if (err) {
    1796:	4604      	mov	r4, r0
    1798:	2800      	cmp	r0, #0
    179a:	f47f aea5 	bne.w	14e8 <bt_init+0x108>
		err = bt_conn_init();
    179e:	f00d fb89 	bl	eeb4 <bt_conn_init>
		if (err) {
    17a2:	4604      	mov	r4, r0
    17a4:	2800      	cmp	r0, #0
    17a6:	f47f ae9f 	bne.w	14e8 <bt_init+0x108>
	bt_finalize_init();
    17aa:	f00b faa9 	bl	cd00 <bt_finalize_init>
	return 0;
    17ae:	e69b      	b.n	14e8 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    17b0:	2102      	movs	r1, #2
    17b2:	f640 406d 	movw	r0, #3181	; 0xc6d
    17b6:	f00a fbb9 	bl	bf2c <bt_hci_cmd_create>
		if (!buf) {
    17ba:	4604      	mov	r4, r0
    17bc:	b910      	cbnz	r0, 17c4 <bt_init+0x3e4>
		return -ENOBUFS;
    17be:	f06f 0468 	mvn.w	r4, #104	; 0x68
    17c2:	e691      	b.n	14e8 <bt_init+0x108>
    17c4:	2102      	movs	r1, #2
    17c6:	3008      	adds	r0, #8
    17c8:	f029 f90f 	bl	2a9ea <net_buf_simple_add>
		cp_le->le = 0x01;
    17cc:	2301      	movs	r3, #1
    17ce:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    17d0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    17d2:	4621      	mov	r1, r4
    17d4:	4632      	mov	r2, r6
    17d6:	f640 406d 	movw	r0, #3181	; 0xc6d
    17da:	f00a fd17 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    17de:	4604      	mov	r4, r0
    17e0:	2800      	cmp	r0, #0
    17e2:	f43f aecb 	beq.w	157c <bt_init+0x19c>
    17e6:	e67f      	b.n	14e8 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
    17e8:	2900      	cmp	r1, #0
    17ea:	d19a      	bne.n	1722 <bt_init+0x342>
		BT_ERR("ACL BR/EDR buffers not initialized");
    17ec:	480e      	ldr	r0, [pc, #56]	; (1828 <bt_init+0x448>)
    17ee:	6803      	ldr	r3, [r0, #0]
    17f0:	075c      	lsls	r4, r3, #29
    17f2:	d009      	beq.n	1808 <bt_init+0x428>
    17f4:	4b0e      	ldr	r3, [pc, #56]	; (1830 <bt_init+0x450>)
    17f6:	930e      	str	r3, [sp, #56]	; 0x38
    17f8:	aa0d      	add	r2, sp, #52	; 0x34
    17fa:	2302      	movs	r3, #2
    17fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    1800:	9309      	str	r3, [sp, #36]	; 0x24
    1802:	930d      	str	r3, [sp, #52]	; 0x34
    1804:	f027 f832 	bl	2886c <z_log_msg2_static_create.constprop.0>
		return -EIO;
    1808:	f06f 0404 	mvn.w	r4, #4
    180c:	e66c      	b.n	14e8 <bt_init+0x108>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    180e:	4809      	ldr	r0, [pc, #36]	; (1834 <bt_init+0x454>)
    1810:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1814:	e799      	b.n	174a <bt_init+0x36a>
    1816:	bf00      	nop
    1818:	02008890 	.word	0x02008890
    181c:	20008000 	.word	0x20008000
    1820:	200000d0 	.word	0x200000d0
    1824:	20000100 	.word	0x20000100
    1828:	200009fc 	.word	0x200009fc
    182c:	0003072e 	.word	0x0003072e
    1830:	0003070b 	.word	0x0003070b
    1834:	02008810 	.word	0x02008810
	BT_INFO("HW Platform: %s (0x%04x)",
    1838:	f003 0307 	and.w	r3, r3, #7
    183c:	2b02      	cmp	r3, #2
    183e:	d94e      	bls.n	18de <bt_init+0x4fe>
	rp.info = (void *)rsp->data;
    1840:	9b08      	ldr	r3, [sp, #32]
	BT_INFO("HW Platform: %s (0x%04x)",
    1842:	4949      	ldr	r1, [pc, #292]	; (1968 <bt_init+0x588>)
	rp.info = (void *)rsp->data;
    1844:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    1846:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    184a:	2b03      	cmp	r3, #3
		return plat_str[platform];
    184c:	bf96      	itet	ls
    184e:	4a47      	ldrls	r2, [pc, #284]	; (196c <bt_init+0x58c>)
	return "unknown";
    1850:	4a47      	ldrhi	r2, [pc, #284]	; (1970 <bt_init+0x590>)
		return plat_str[platform];
    1852:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    1856:	e9cd 2302 	strd	r2, r3, [sp, #8]
    185a:	4b46      	ldr	r3, [pc, #280]	; (1974 <bt_init+0x594>)
    185c:	9301      	str	r3, [sp, #4]
    185e:	2300      	movs	r3, #0
    1860:	9300      	str	r3, [sp, #0]
    1862:	4618      	mov	r0, r3
    1864:	2203      	movs	r2, #3
    1866:	f027 f804 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
	BT_INFO("HW Variant: %s (0x%04x)",
    186a:	6823      	ldr	r3, [r4, #0]
    186c:	f003 0307 	and.w	r3, r3, #7
    1870:	2b02      	cmp	r3, #2
    1872:	d934      	bls.n	18de <bt_init+0x4fe>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1874:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    1878:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    187c:	2b02      	cmp	r3, #2
    187e:	d148      	bne.n	1912 <bt_init+0x532>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1880:	2a03      	cmp	r2, #3
    1882:	d846      	bhi.n	1912 <bt_init+0x532>
		return nordic_str[variant];
    1884:	4b3c      	ldr	r3, [pc, #240]	; (1978 <bt_init+0x598>)
    1886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    188a:	4937      	ldr	r1, [pc, #220]	; (1968 <bt_init+0x588>)
    188c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1890:	4b3a      	ldr	r3, [pc, #232]	; (197c <bt_init+0x59c>)
    1892:	9301      	str	r3, [sp, #4]
    1894:	2300      	movs	r3, #0
    1896:	9300      	str	r3, [sp, #0]
    1898:	4618      	mov	r0, r3
    189a:	2203      	movs	r2, #3
    189c:	f026 ffe9 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    18a0:	6823      	ldr	r3, [r4, #0]
    18a2:	f003 0307 	and.w	r3, r3, #7
    18a6:	2b02      	cmp	r3, #2
    18a8:	d919      	bls.n	18de <bt_init+0x4fe>
    18aa:	f8d6 1009 	ldr.w	r1, [r6, #9]
    18ae:	7973      	ldrb	r3, [r6, #5]
    18b0:	9106      	str	r1, [sp, #24]
    18b2:	f8b6 1007 	ldrh.w	r1, [r6, #7]
    18b6:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    18b8:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    18ba:	79b1      	ldrb	r1, [r6, #6]
		return var_str[variant];
    18bc:	bf96      	itet	ls
    18be:	4a30      	ldrls	r2, [pc, #192]	; (1980 <bt_init+0x5a0>)
	return "unknown";
    18c0:	4a2b      	ldrhi	r2, [pc, #172]	; (1970 <bt_init+0x590>)
		return var_str[variant];
    18c2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    18c6:	9202      	str	r2, [sp, #8]
    18c8:	e9cd 3103 	strd	r3, r1, [sp, #12]
    18cc:	4b2d      	ldr	r3, [pc, #180]	; (1984 <bt_init+0x5a4>)
    18ce:	9301      	str	r3, [sp, #4]
    18d0:	2300      	movs	r3, #0
    18d2:	4925      	ldr	r1, [pc, #148]	; (1968 <bt_init+0x588>)
    18d4:	9300      	str	r3, [sp, #0]
    18d6:	2203      	movs	r2, #3
    18d8:	4618      	mov	r0, r3
    18da:	f026 ffca 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
	net_buf_unref(rsp);
    18de:	9808      	ldr	r0, [sp, #32]
    18e0:	f01d fcc4 	bl	1f26c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    18e4:	aa08      	add	r2, sp, #32
    18e6:	2100      	movs	r1, #0
    18e8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    18ec:	f00a fc8e 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    18f0:	4606      	mov	r6, r0
    18f2:	b180      	cbz	r0, 1916 <bt_init+0x536>
		BT_WARN("Failed to read supported vendor commands");
    18f4:	6823      	ldr	r3, [r4, #0]
    18f6:	f013 0f06 	tst.w	r3, #6
    18fa:	f43f af4a 	beq.w	1792 <bt_init+0x3b2>
    18fe:	4b22      	ldr	r3, [pc, #136]	; (1988 <bt_init+0x5a8>)
			BT_WARN("Failed to read supported vendor features");
    1900:	930e      	str	r3, [sp, #56]	; 0x38
    1902:	2302      	movs	r3, #2
    1904:	4818      	ldr	r0, [pc, #96]	; (1968 <bt_init+0x588>)
    1906:	9309      	str	r3, [sp, #36]	; 0x24
    1908:	930d      	str	r3, [sp, #52]	; 0x34
    190a:	aa0d      	add	r2, sp, #52	; 0x34
    190c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    1910:	e73d      	b.n	178e <bt_init+0x3ae>
		return "unknown";
    1912:	4b17      	ldr	r3, [pc, #92]	; (1970 <bt_init+0x590>)
    1914:	e7b9      	b.n	188a <bt_init+0x4aa>
	rp.cmds = (void *)rsp->data;
    1916:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    1918:	481c      	ldr	r0, [pc, #112]	; (198c <bt_init+0x5ac>)
    191a:	6899      	ldr	r1, [r3, #8]
    191c:	2202      	movs	r2, #2
    191e:	3101      	adds	r1, #1
    1920:	f026 fe49 	bl	285b6 <memcpy>
	net_buf_unref(rsp);
    1924:	9808      	ldr	r0, [sp, #32]
    1926:	f01d fca1 	bl	1f26c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    192a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    192e:	075b      	lsls	r3, r3, #29
    1930:	f57f af2f 	bpl.w	1792 <bt_init+0x3b2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    1934:	aa08      	add	r2, sp, #32
    1936:	4631      	mov	r1, r6
    1938:	f64f 4003 	movw	r0, #64515	; 0xfc03
    193c:	f00a fc66 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    1940:	b130      	cbz	r0, 1950 <bt_init+0x570>
			BT_WARN("Failed to read supported vendor features");
    1942:	6823      	ldr	r3, [r4, #0]
    1944:	f013 0f06 	tst.w	r3, #6
    1948:	f43f af23 	beq.w	1792 <bt_init+0x3b2>
    194c:	4b10      	ldr	r3, [pc, #64]	; (1990 <bt_init+0x5b0>)
    194e:	e7d7      	b.n	1900 <bt_init+0x520>
		rp.feat = (void *)rsp->data;
    1950:	9b08      	ldr	r3, [sp, #32]
		memcpy(bt_dev.vs_features, rp.feat->features,
    1952:	4810      	ldr	r0, [pc, #64]	; (1994 <bt_init+0x5b4>)
    1954:	6899      	ldr	r1, [r3, #8]
    1956:	2201      	movs	r2, #1
    1958:	4411      	add	r1, r2
    195a:	f026 fe2c 	bl	285b6 <memcpy>
		net_buf_unref(rsp);
    195e:	9808      	ldr	r0, [sp, #32]
    1960:	f01d fc84 	bl	1f26c <net_buf_unref>
    1964:	e715      	b.n	1792 <bt_init+0x3b2>
    1966:	bf00      	nop
    1968:	200009fc 	.word	0x200009fc
    196c:	0002cec8 	.word	0x0002cec8
    1970:	000301ee 	.word	0x000301ee
    1974:	00030752 	.word	0x00030752
    1978:	0002ce88 	.word	0x0002ce88
    197c:	0003076b 	.word	0x0003076b
    1980:	0002cf00 	.word	0x0002cf00
    1984:	00030783 	.word	0x00030783
    1988:	000307b0 	.word	0x000307b0
    198c:	200000b9 	.word	0x200000b9
    1990:	000307d9 	.word	0x000307d9
    1994:	200000b8 	.word	0x200000b8

00001998 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1998:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    199a:	4c19      	ldr	r4, [pc, #100]	; (1a00 <ll_scan_params_set+0x68>)
{
    199c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    19a0:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    19a4:	f01c 0501 	ands.w	r5, ip, #1
    19a8:	d122      	bne.n	19f0 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    19aa:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    19ae:	0140      	lsls	r0, r0, #5
    19b0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    19b4:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    19b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    19ba:	f00e 0e18 	and.w	lr, lr, #24
    19be:	f000 0020 	and.w	r0, r0, #32
    19c2:	ea40 000e 	orr.w	r0, r0, lr
    19c6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    19ca:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    19cc:	480d      	ldr	r0, [pc, #52]	; (1a04 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    19ce:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    19d2:	fba2 0100 	umull	r0, r1, r2, r0
    19d6:	2391      	movs	r3, #145	; 0x91
    19d8:	fb03 1102 	mla	r1, r3, r2, r1
    19dc:	a306      	add	r3, pc, #24	; (adr r3, 19f8 <ll_scan_params_set+0x60>)
    19de:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    19e2:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    19e6:	f7ff fb8b 	bl	1100 <__aeabi_uldivmod>
    19ea:	6420      	str	r0, [r4, #64]	; 0x40
}
    19ec:	4628      	mov	r0, r5
    19ee:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    19f0:	250c      	movs	r5, #12
}
    19f2:	4628      	mov	r0, r5
    19f4:	bd38      	pop	{r3, r4, r5, pc}
    19f6:	bf00      	nop
    19f8:	1afd498d 	.word	0x1afd498d
    19fc:	00000007 	.word	0x00000007
    1a00:	200034a0 	.word	0x200034a0
    1a04:	84e72a00 	.word	0x84e72a00

00001a08 <ull_scan_params_set>:
{
    1a08:	b510      	push	{r4, lr}
    1a0a:	f89d c008 	ldrb.w	ip, [sp, #8]
    1a0e:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    1a10:	0149      	lsls	r1, r1, #5
    1a12:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    1a16:	f000 0018 	and.w	r0, r0, #24
    1a1a:	f001 0c20 	and.w	ip, r1, #32
    1a1e:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    1a20:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    1a22:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a26:	480c      	ldr	r0, [pc, #48]	; (1a58 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    1a28:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    1a2c:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a30:	2291      	movs	r2, #145	; 0x91
    1a32:	fba3 0100 	umull	r0, r1, r3, r0
    1a36:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    1a3a:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a3e:	a304      	add	r3, pc, #16	; (adr r3, 1a50 <ull_scan_params_set+0x48>)
    1a40:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a44:	f7ff fb5c 	bl	1100 <__aeabi_uldivmod>
    1a48:	6260      	str	r0, [r4, #36]	; 0x24
}
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	f3af 8000 	nop.w
    1a50:	1afd498d 	.word	0x1afd498d
    1a54:	00000007 	.word	0x00000007
    1a58:	84e72a00 	.word	0x84e72a00
    1a5c:	00000000 	.word	0x00000000

00001a60 <ull_scan_enable>:
{
    1a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a64:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1a66:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1a6a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    1a6e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    1a72:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1a76:	f360 1386 	bfi	r3, r0, #6, #1
{
    1a7a:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1a7c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1a80:	f013 f8a2 	bl	14bc8 <ll_addr_read>
	lll->chan = 0U;
    1a84:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1a88:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    1a8a:	4849      	ldr	r0, [pc, #292]	; (1bb0 <ull_scan_enable+0x150>)

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1a8c:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    1a8e:	f002 0279 	and.w	r2, r2, #121	; 0x79
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
    1a92:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1a94:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    1a98:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1a9c:	2291      	movs	r2, #145	; 0x91
    1a9e:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1aa2:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1aa6:	a340      	add	r3, pc, #256	; (adr r3, 1ba8 <ull_scan_enable+0x148>)
    1aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    1aac:	7025      	strb	r5, [r4, #0]
    1aae:	f7ff fb27 	bl	1100 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    1ab2:	2331      	movs	r3, #49	; 0x31
    1ab4:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    1ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    1aba:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    1abc:	3309      	adds	r3, #9
	    (ticks_interval -
    1abe:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    1ac2:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    1ac4:	bf32      	itee	cc
    1ac6:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    1ac8:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    1aca:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1acc:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    1ace:	f013 f847 	bl	14b60 <ticker_ticks_now_get>
	if (!lll->conn) {
    1ad2:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    1ad4:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1ad6:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    1ada:	2b00      	cmp	r3, #0
    1adc:	d04b      	beq.n	1b76 <ull_scan_enable+0x116>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1ade:	4d35      	ldr	r5, [pc, #212]	; (1bb4 <ull_scan_enable+0x154>)
    1ae0:	4b35      	ldr	r3, [pc, #212]	; (1bb8 <ull_scan_enable+0x158>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ae2:	f8cd 8020 	str.w	r8, [sp, #32]
    1ae6:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1ae8:	1b65      	subs	r5, r4, r5
    1aea:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1aee:	4830      	ldr	r0, [pc, #192]	; (1bb0 <ull_scan_enable+0x150>)
    1af0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1af2:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1af6:	fba3 0100 	umull	r0, r1, r3, r0
    1afa:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1afc:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1b00:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b04:	6923      	ldr	r3, [r4, #16]
    1b06:	9304      	str	r3, [sp, #16]
    1b08:	4b2c      	ldr	r3, [pc, #176]	; (1bbc <ull_scan_enable+0x15c>)
    1b0a:	9307      	str	r3, [sp, #28]
    1b0c:	4b2c      	ldr	r3, [pc, #176]	; (1bc0 <ull_scan_enable+0x160>)
    1b0e:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    1b10:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1b14:	a324      	add	r3, pc, #144	; (adr r3, 1ba8 <ull_scan_enable+0x148>)
    1b16:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    1b1a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1b1e:	f7ff faef 	bl	1100 <__aeabi_uldivmod>
    1b22:	4610      	mov	r0, r2
    1b24:	4619      	mov	r1, r3
    1b26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1b2a:	2300      	movs	r3, #0
    1b2c:	f7ff fae8 	bl	1100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1b30:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b32:	444d      	add	r5, r9
    1b34:	b2ed      	uxtb	r5, r5
    1b36:	462a      	mov	r2, r5
    1b38:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1b3c:	463b      	mov	r3, r7
    1b3e:	2103      	movs	r1, #3
    1b40:	f8cd a000 	str.w	sl, [sp]
    1b44:	4650      	mov	r0, sl
    1b46:	f012 fee1 	bl	1490c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1b4a:	4641      	mov	r1, r8
    1b4c:	f015 fb9c 	bl	17288 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1b50:	4605      	mov	r5, r0
    1b52:	b960      	cbnz	r0, 1b6e <ull_scan_enable+0x10e>
	scan->is_enabled = 1U;
    1b54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1b58:	f043 0301 	orr.w	r3, r3, #1
		ull_filter_adv_scan_state_cb(BIT(1));
    1b5c:	4648      	mov	r0, r9
	scan->is_enabled = 1U;
    1b5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(BIT(1));
    1b62:	f01a f92d 	bl	1bdc0 <ull_filter_adv_scan_state_cb>
	return 0;
    1b66:	4628      	mov	r0, r5
}
    1b68:	b00c      	add	sp, #48	; 0x30
    1b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1b6e:	200c      	movs	r0, #12
}
    1b70:	b00c      	add	sp, #48	; 0x30
    1b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    1b76:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1b7a:	6921      	ldr	r1, [r4, #16]
    1b7c:	4643      	mov	r3, r8
    1b7e:	aa0a      	add	r2, sp, #40	; 0x28
    1b80:	2003      	movs	r0, #3
    1b82:	f002 f90d 	bl	3da0 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1b86:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b88:	2900      	cmp	r1, #0
    1b8a:	d0a8      	beq.n	1ade <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1b8c:	480d      	ldr	r0, [pc, #52]	; (1bc4 <ull_scan_enable+0x164>)
    1b8e:	a306      	add	r3, pc, #24	; (adr r3, 1ba8 <ull_scan_enable+0x148>)
    1b90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b94:	fba1 0100 	umull	r0, r1, r1, r0
    1b98:	f7ff fab2 	bl	1100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1b9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1ba2:	4407      	add	r7, r0
    1ba4:	e79b      	b.n	1ade <ull_scan_enable+0x7e>
    1ba6:	bf00      	nop
    1ba8:	1afd498d 	.word	0x1afd498d
    1bac:	00000007 	.word	0x00000007
    1bb0:	84e72a00 	.word	0x84e72a00
    1bb4:	200034a0 	.word	0x200034a0
    1bb8:	38e38e39 	.word	0x38e38e39
    1bbc:	000168a5 	.word	0x000168a5
    1bc0:	00017a81 	.word	0x00017a81
    1bc4:	3b9aca00 	.word	0x3b9aca00

00001bc8 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1bcc:	f890 e0bc 	ldrb.w	lr, [r0, #188]	; 0xbc
    1bd0:	f890 c0bb 	ldrb.w	ip, [r0, #187]	; 0xbb
    1bd4:	45e6      	cmp	lr, ip
{
    1bd6:	b08b      	sub	sp, #44	; 0x2c
    1bd8:	4604      	mov	r4, r0
    1bda:	460e      	mov	r6, r1
    1bdc:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    1bde:	d02e      	beq.n	1c3e <ull_conn_llcp+0x76>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1be0:	ebac 0c0e 	sub.w	ip, ip, lr
    1be4:	f00c 0c03 	and.w	ip, ip, #3
    1be8:	f1bc 0f02 	cmp.w	ip, #2
    1bec:	d00c      	beq.n	1c08 <ull_conn_llcp+0x40>
		}
	}
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */

	/* Terminate Procedure Request */
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    1bee:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1bf2:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1bf6:	1a9b      	subs	r3, r3, r2
    1bf8:	b2db      	uxtb	r3, r3
    1bfa:	2b01      	cmp	r3, #1
    1bfc:	f000 817b 	beq.w	1ef6 <ull_conn_llcp+0x32e>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1c00:	2000      	movs	r0, #0
	}

	/* Continue prepare */
	return 0;
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */
}
    1c02:	b00b      	add	sp, #44	; 0x2c
    1c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1c08:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    1c0c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1c10:	429a      	cmp	r2, r3
    1c12:	d006      	beq.n	1c22 <ull_conn_llcp+0x5a>
			     LLCP_LENGTH_STATE_RESIZE) ||
    1c14:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			if ((conn->llcp_length.state ==
    1c18:	f003 0306 	and.w	r3, r3, #6
    1c1c:	2b04      	cmp	r3, #4
    1c1e:	f000 83a9 	beq.w	2374 <ull_conn_llcp+0x7ac>
		switch (conn->llcp_type) {
    1c22:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
    1c26:	1e7b      	subs	r3, r7, #1
    1c28:	2b05      	cmp	r3, #5
    1c2a:	f200 8352 	bhi.w	22d2 <ull_conn_llcp+0x70a>
    1c2e:	e8df f013 	tbh	[pc, r3, lsl #1]
    1c32:	001f      	.short	0x001f
    1c34:	029c0326 	.word	0x029c0326
    1c38:	02610350 	.word	0x02610350
    1c3c:	01cb      	.short	0x01cb
	    !conn->llcp_enc.pause_rx) {
    1c3e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
	if ((conn->llcp_ack == conn->llcp_req) &&
    1c42:	f013 0801 	ands.w	r8, r3, #1
    1c46:	d1d2      	bne.n	1bee <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1c48:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
    1c4c:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    1c50:	428a      	cmp	r2, r1
    1c52:	f000 834c 	beq.w	22ee <ull_conn_llcp+0x726>
			conn->llcp_type = LLCP_CONN_UPD;
    1c56:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1c58:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
			conn->llcp_type = LLCP_CONN_UPD;
    1c5c:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1c60:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
			conn->llcp_ack -= 2U;
    1c64:	f1ae 0c02 	sub.w	ip, lr, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1c68:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
    1c6a:	f880 c0bc 	strb.w	ip, [r0, #188]	; 0xbc
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1c6e:	d1d1      	bne.n	1c14 <ull_conn_llcp+0x4c>
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1c70:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1c72:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    1c74:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1c76:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1c7a:	b2bf      	uxth	r7, r7
    1c7c:	19ea      	adds	r2, r5, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1c7e:	f013 0107 	ands.w	r1, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1c82:	b292      	uxth	r2, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1c84:	f040 83bc 	bne.w	2400 <ull_conn_llcp+0x838>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1c88:	f8b4 50c0 	ldrh.w	r5, [r4, #192]	; 0xc0
    1c8c:	1b52      	subs	r2, r2, r5
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1c8e:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1c90:	fa1f f982 	uxth.w	r9, r2
	} else if (instant_latency <= 0x7FFF) {
    1c94:	d4ab      	bmi.n	1bee <ull_conn_llcp+0x26>

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1c96:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    1c9a:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			conn->llcp_ack = conn->llcp_req;
    1c9e:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    1ca2:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1ca6:	4293      	cmp	r3, r2
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1ca8:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    1cac:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1cb0:	d009      	beq.n	1cc6 <ull_conn_llcp+0xfe>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1cb2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1cb6:	f003 030f 	and.w	r3, r3, #15
    1cba:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1cbc:	bf04      	itt	eq
    1cbe:	f884 215d 	strbeq.w	r2, [r4, #349]	; 0x15d

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1cc2:	f8a4 10ac 	strheq.w	r1, [r4, #172]	; 0xac
	if (conn == conn_upd_curr) {
    1cc6:	4bb4      	ldr	r3, [pc, #720]	; (1f98 <ull_conn_llcp+0x3d0>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1cc8:	f8d4 80e0 	ldr.w	r8, [r4, #224]	; 0xe0
	if (conn == conn_upd_curr) {
    1ccc:	681a      	ldr	r2, [r3, #0]
    1cce:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1cd0:	bf04      	itt	eq
    1cd2:	2200      	moveq	r2, #0
    1cd4:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1cd6:	f1b8 0f00 	cmp.w	r8, #0
    1cda:	f000 8722 	beq.w	2b22 <ull_conn_llcp+0xf5a>
    1cde:	f8d8 0000 	ldr.w	r0, [r8]
    1ce2:	2800      	cmp	r0, #0
    1ce4:	f000 871d 	beq.w	2b22 <ull_conn_llcp+0xf5a>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1ce8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    1cec:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1cf0:	6842      	ldr	r2, [r0, #4]
    1cf2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((conn->llcp_cu.interval != lll->interval) ||
    1cf6:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1cf8:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1cfc:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
		if ((conn->llcp_cu.interval != lll->interval) ||
    1d00:	f000 872a 	beq.w	2b58 <ull_conn_llcp+0xf90>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1d04:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1d08:	f8a8 301e 	strh.w	r3, [r8, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1d0c:	2318      	movs	r3, #24
    1d0e:	f888 3004 	strb.w	r3, [r8, #4]
			cu->status = 0x00;
    1d12:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1d14:	f8a8 c006 	strh.w	ip, [r8, #6]
			cu->latency = conn->llcp_cu.latency;
    1d18:	f8a8 2020 	strh.w	r2, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1d1c:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			cu->status = 0x00;
    1d20:	f888 301c 	strb.w	r3, [r8, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1d24:	4641      	mov	r1, r8
    1d26:	f015 fa37 	bl	17198 <ll_rx_put>
		ll_rx_sched();
    1d2a:	f015 fa3f 	bl	171ac <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1d2e:	68a3      	ldr	r3, [r4, #8]
    1d30:	2b00      	cmp	r3, #0
    1d32:	da09      	bge.n	1d48 <ull_conn_llcp+0x180>
			uint32_t ticks_prepare_to_start =
    1d34:	68e0      	ldr	r0, [r4, #12]
    1d36:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1d3c:	4290      	cmp	r0, r2
    1d3e:	bf2c      	ite	cs
    1d40:	1831      	addcs	r1, r6, r0
    1d42:	18b1      	addcc	r1, r6, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1d44:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1d46:	1ace      	subs	r6, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1d48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1d4a:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
		conn_interval_old = instant_latency * lll->interval;
    1d4e:	fb13 f309 	smulbb	r3, r3, r9
    1d52:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1d54:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
    1d58:	fb18 f201 	smulbb	r2, r8, r1
    1d5c:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1d5e:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1d60:	fa1f f981 	uxth.w	r9, r1
		if (conn_interval_new > conn_interval_old) {
    1d64:	f080 86cb 	bcs.w	2afe <ull_conn_llcp+0xf36>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1d68:	1ad3      	subs	r3, r2, r3
    1d6a:	498c      	ldr	r1, [pc, #560]	; (1f9c <ull_conn_llcp+0x3d4>)
    1d6c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1d70:	fb02 f303 	mul.w	r3, r2, r3
    1d74:	fba3 0101 	umull	r0, r1, r3, r1
    1d78:	a385      	add	r3, pc, #532	; (adr r3, 1f90 <ull_conn_llcp+0x3c8>)
    1d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d7e:	f7ff f9bf 	bl	1100 <__aeabi_uldivmod>
    1d82:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1d86:	441e      	add	r6, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    1d88:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1d8a:	441d      	add	r5, r3
				CONN_INT_UNIT_US) * CONN_INT_UNIT_US);
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
    1d8c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    1d90:	1bef      	subs	r7, r5, r7
    1d92:	444f      	add	r7, r9
		conn_interval_us = conn->llcp_cu.interval *
    1d94:	f240 45e2 	movw	r5, #1250	; 0x4e2
		} else if (!lll->role) {
    1d98:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1d9a:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1d9c:	fb05 f508 	mul.w	r5, r5, r8
		} else if (!lll->role) {
    1da0:	f2c0 87b9 	blt.w	2d16 <ull_conn_llcp+0x114e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1da4:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    1da8:	487c      	ldr	r0, [pc, #496]	; (1f9c <ull_conn_llcp+0x3d4>)
    1daa:	a379      	add	r3, pc, #484	; (adr r3, 1f90 <ull_conn_llcp+0x3c8>)
    1dac:	e9d3 2300 	ldrd	r2, r3, [r3]
    1db0:	fba1 0100 	umull	r0, r1, r1, r0
    1db4:	f7ff f9a4 	bl	1100 <__aeabi_uldivmod>
    1db8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    1dbc:	3701      	adds	r7, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1dbe:	4978      	ldr	r1, [pc, #480]	; (1fa0 <ull_conn_llcp+0x3d8>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1dc0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
		lll->latency = conn->llcp_cu.latency;
    1dc4:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1dc8:	4b76      	ldr	r3, [pc, #472]	; (1fa4 <ull_conn_llcp+0x3dc>)
		lll->interval = conn->llcp_cu.interval;
    1dca:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1dce:	4429      	add	r1, r5
    1dd0:	fbb1 f1f5 	udiv	r1, r1, r5
    1dd4:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1dd8:	f242 7110 	movw	r1, #10000	; 0x2710
    1ddc:	fb01 5202 	mla	r2, r1, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1de0:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1de2:	3a01      	subs	r2, #1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1de4:	1d81      	adds	r1, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1de6:	fbb2 f2f5 	udiv	r2, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1dea:	fbb3 f3f5 	udiv	r3, r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1dee:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1df2:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1df4:	428a      	cmp	r2, r1
		lll->latency = conn->llcp_cu.latency;
    1df6:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1df8:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1dfc:	dd04      	ble.n	1e08 <ull_conn_llcp+0x240>
    1dfe:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1e02:	30fa      	adds	r0, #250	; 0xfa
    1e04:	4402      	add	r2, r0
    1e06:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1e08:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1e0c:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
		if (conn->llcp_cu.cmd) {
    1e10:	071a      	lsls	r2, r3, #28
			conn->supervision_expire = 0U;
    1e12:	bf44      	itt	mi
    1e14:	2300      	movmi	r3, #0
    1e16:	f8a4 30a8 	strhmi.w	r3, [r4, #168]	; 0xa8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1e1a:	2102      	movs	r1, #2
    1e1c:	2001      	movs	r0, #1
    1e1e:	f01c ff69 	bl	1ecf4 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1e22:	2200      	movs	r2, #0
    1e24:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1e26:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1e28:	2001      	movs	r0, #1
    1e2a:	f011 fb71 	bl	13510 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1e2e:	495e      	ldr	r1, [pc, #376]	; (1fa8 <ull_conn_llcp+0x3e0>)
    1e30:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    1e34:	4620      	mov	r0, r4
    1e36:	f011 fafb 	bl	13430 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1e3a:	f100 0803 	add.w	r8, r0, #3
    1e3e:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1e42:	4b5a      	ldr	r3, [pc, #360]	; (1fac <ull_conn_llcp+0x3e4>)
    1e44:	9400      	str	r4, [sp, #0]
    1e46:	4642      	mov	r2, r8
    1e48:	2101      	movs	r1, #1
    1e4a:	2000      	movs	r0, #0
    1e4c:	f012 fde8 	bl	14a20 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1e50:	f030 0302 	bics.w	r3, r0, #2
    1e54:	d00c      	beq.n	1e70 <ull_conn_llcp+0x2a8>
    1e56:	4a56      	ldr	r2, [pc, #344]	; (1fb0 <ull_conn_llcp+0x3e8>)
    1e58:	4956      	ldr	r1, [pc, #344]	; (1fb4 <ull_conn_llcp+0x3ec>)
    1e5a:	4857      	ldr	r0, [pc, #348]	; (1fb8 <ull_conn_llcp+0x3f0>)
    1e5c:	f640 43cb 	movw	r3, #3275	; 0xccb
    1e60:	f022 fecc 	bl	24bfc <printk>
    1e64:	4040      	eors	r0, r0
    1e66:	f380 8811 	msr	BASEPRI, r0
    1e6a:	f04f 0003 	mov.w	r0, #3
    1e6e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e70:	9408      	str	r4, [sp, #32]
    1e72:	9406      	str	r4, [sp, #24]
    1e74:	6923      	ldr	r3, [r4, #16]
    1e76:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1e78:	4c48      	ldr	r4, [pc, #288]	; (1f9c <ull_conn_llcp+0x3d4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e7a:	4b50      	ldr	r3, [pc, #320]	; (1fbc <ull_conn_llcp+0x3f4>)
    1e7c:	9307      	str	r3, [sp, #28]
    1e7e:	4b50      	ldr	r3, [pc, #320]	; (1fc0 <ull_conn_llcp+0x3f8>)
    1e80:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1e82:	fba5 5404 	umull	r5, r4, r5, r4
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e86:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    1e8a:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1e8c:	4628      	mov	r0, r5
    1e8e:	a340      	add	r3, pc, #256	; (adr r3, 1f90 <ull_conn_llcp+0x3c8>)
    1e90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e94:	4621      	mov	r1, r4
    1e96:	f7ff f933 	bl	1100 <__aeabi_uldivmod>
    1e9a:	4610      	mov	r0, r2
    1e9c:	4619      	mov	r1, r3
    1e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1ea2:	2300      	movs	r3, #0
    1ea4:	f7ff f92c 	bl	1100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1ea8:	a339      	add	r3, pc, #228	; (adr r3, 1f90 <ull_conn_llcp+0x3c8>)
    1eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1eae:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1eb0:	4621      	mov	r1, r4
    1eb2:	4628      	mov	r0, r5
    1eb4:	f7ff f924 	bl	1100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1eb8:	4633      	mov	r3, r6
    1eba:	e9cd 7000 	strd	r7, r0, [sp]
    1ebe:	4642      	mov	r2, r8
    1ec0:	2101      	movs	r1, #1
    1ec2:	2000      	movs	r0, #0
    1ec4:	f012 fd22 	bl	1490c <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1ec8:	f030 0302 	bics.w	r3, r0, #2
    1ecc:	d00c      	beq.n	1ee8 <ull_conn_llcp+0x320>
    1ece:	4a38      	ldr	r2, [pc, #224]	; (1fb0 <ull_conn_llcp+0x3e8>)
    1ed0:	4938      	ldr	r1, [pc, #224]	; (1fb4 <ull_conn_llcp+0x3ec>)
    1ed2:	4839      	ldr	r0, [pc, #228]	; (1fb8 <ull_conn_llcp+0x3f0>)
    1ed4:	f640 43e5 	movw	r3, #3301	; 0xce5
    1ed8:	f022 fe90 	bl	24bfc <printk>
    1edc:	4040      	eors	r0, r0
    1ede:	f380 8811 	msr	BASEPRI, r0
    1ee2:	f04f 0003 	mov.w	r0, #3
    1ee6:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1ee8:	f1b9 0f00 	cmp.w	r9, #0
    1eec:	f040 86f4 	bne.w	2cd8 <ull_conn_llcp+0x1110>
				return -ECANCELED;
    1ef0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1ef4:	e685      	b.n	1c02 <ull_conn_llcp+0x3a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ef6:	4833      	ldr	r0, [pc, #204]	; (1fc4 <ull_conn_llcp+0x3fc>)
    1ef8:	f011 fa64 	bl	133c4 <mem_acquire>
		if (tx) {
    1efc:	2800      	cmp	r0, #0
    1efe:	d038      	beq.n	1f72 <ull_conn_llcp+0x3aa>
			conn->llcp_terminate.ack--;
    1f00:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    1f04:	3b01      	subs	r3, #1
    1f06:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f0a:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1f0c:	2202      	movs	r2, #2
    1f0e:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f10:	f043 0303 	orr.w	r3, r3, #3
    1f14:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    1f16:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    1f18:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_tx->llctrl.terminate_ind.error_code =
    1f1c:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		if (!conn->tx_ctrl) {
    1f20:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			pdu_tx->llctrl.terminate_ind.error_code =
    1f24:	7202      	strb	r2, [r0, #8]
	if (
    1f26:	b1b3      	cbz	r3, 1f56 <ull_conn_llcp+0x38e>
	    !conn->llcp_enc.pause_tx &&
    1f28:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1f2c:	0795      	lsls	r5, r2, #30
    1f2e:	d412      	bmi.n	1f56 <ull_conn_llcp+0x38e>
	    !conn->llcp_phy.pause_tx &&
    1f30:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1f34:	07d2      	lsls	r2, r2, #31
    1f36:	d40e      	bmi.n	1f56 <ull_conn_llcp+0x38e>
		if (conn->tx_head == conn->tx_data) {
    1f38:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1f3c:	4293      	cmp	r3, r2
    1f3e:	f000 8700 	beq.w	2d42 <ull_conn_llcp+0x117a>
		} else if (!conn->tx_ctrl) {
    1f42:	b959      	cbnz	r1, 1f5c <ull_conn_llcp+0x394>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1f44:	791a      	ldrb	r2, [r3, #4]
    1f46:	f002 0203 	and.w	r2, r2, #3
    1f4a:	2a03      	cmp	r2, #3
    1f4c:	f001 809c 	beq.w	3088 <ull_conn_llcp+0x14c0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1f50:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    1f54:	e004      	b.n	1f60 <ull_conn_llcp+0x398>
		if (!conn->tx_ctrl) {
    1f56:	2900      	cmp	r1, #0
    1f58:	f000 847f 	beq.w	285a <ull_conn_llcp+0xc92>
	tx->next = conn->tx_ctrl_last->next;
    1f5c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1f60:	681a      	ldr	r2, [r3, #0]
    1f62:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1f64:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    1f66:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    1f68:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	f000 8205 	beq.w	237c <ull_conn_llcp+0x7b4>
		if (!conn->procedure_expire) {
    1f72:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    1f76:	2800      	cmp	r0, #0
    1f78:	f47f ae42 	bne.w	1c00 <ull_conn_llcp+0x38>
			conn->procedure_expire = conn->supervision_reload;
    1f7c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			if (conn->procedure_expire <= 1U) {
    1f80:	2b01      	cmp	r3, #1
    1f82:	f240 8465 	bls.w	2850 <ull_conn_llcp+0xc88>
			conn->procedure_expire = conn->supervision_reload;
    1f86:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    1f8a:	e639      	b.n	1c00 <ull_conn_llcp+0x38>
    1f8c:	f3af 8000 	nop.w
    1f90:	1afd498d 	.word	0x1afd498d
    1f94:	00000007 	.word	0x00000007
    1f98:	200034fc 	.word	0x200034fc
    1f9c:	3b9aca00 	.word	0x3b9aca00
    1fa0:	026259ff 	.word	0x026259ff
    1fa4:	01c9c37f 	.word	0x01c9c37f
    1fa8:	20001eb0 	.word	0x20001eb0
    1fac:	00018189 	.word	0x00018189
    1fb0:	0002d7e8 	.word	0x0002d7e8
    1fb4:	0002d904 	.word	0x0002d904
    1fb8:	0002d27c 	.word	0x0002d27c
    1fbc:	00018131 	.word	0x00018131
    1fc0:	0001ac81 	.word	0x0001ac81
    1fc4:	20003590 	.word	0x20003590
			event_counter = lll->event_counter +
    1fc8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    1fca:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    1fcc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    1fd0:	440a      	add	r2, r1
    1fd2:	442a      	add	r2, r5
    1fd4:	b295      	uxth	r5, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    1fd6:	07da      	lsls	r2, r3, #31
    1fd8:	4619      	mov	r1, r3
    1fda:	f100 8277 	bmi.w	24cc <ull_conn_llcp+0x904>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1fde:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    1fe2:	1aad      	subs	r5, r5, r2
    1fe4:	0428      	lsls	r0, r5, #16
    1fe6:	f53f ae02 	bmi.w	1bee <ull_conn_llcp+0x26>
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
		}

		/* apply new phy */
		old_tx = lll->phy_tx;
    1fea:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		old_rx = lll->phy_rx;
    1fee:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
			conn->llcp_ack = conn->llcp_req;
    1ff2:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    1ff6:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			conn->llcp_ack = conn->llcp_req;
    1ffa:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1ffe:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
    2002:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
    2006:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
    200a:	f040 859b 	bne.w	2b44 <ull_conn_llcp+0xf7c>
		uint16_t eff_tx_time = lll->max_tx_time;
    200e:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    2012:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    2016:	d008      	beq.n	202a <ull_conn_llcp+0x462>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    2018:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    201c:	095b      	lsrs	r3, r3, #5
    201e:	f363 0202 	bfi	r2, r3, #0, #3
    2022:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    2026:	f44f 77a4 	mov.w	r7, #328	; 0x148

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    202a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    202e:	2d00      	cmp	r5, #0
    2030:	f000 85af 	beq.w	2b92 <ull_conn_llcp+0xfca>
    2034:	6828      	ldr	r0, [r5, #0]
    2036:	2800      	cmp	r0, #0
    2038:	f000 85ab 	beq.w	2b92 <ull_conn_llcp+0xfca>
		conn->llcp_rx = rx->hdr.link->mem;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    203c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		    (lll->phy_rx == old_rx)) {
    2040:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		conn->llcp_rx = rx->hdr.link->mem;
    2044:	f8d0 c004 	ldr.w	ip, [r0, #4]
    2048:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    204c:	0789      	lsls	r1, r1, #30
    204e:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
    2052:	f3c2 0e02 	ubfx	lr, r2, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2056:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    205a:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    205e:	d402      	bmi.n	2066 <ull_conn_llcp+0x49e>
    2060:	4599      	cmp	r9, r3
    2062:	f000 868a 	beq.w	2d7a <ull_conn_llcp+0x11b2>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    2066:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2068:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    206a:	231c      	movs	r3, #28
    206c:	712b      	strb	r3, [r5, #4]

		upd = (void *)rx->pdu;
		upd->status = 0U;
    206e:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    2070:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
    2074:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
    2078:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    207a:	4629      	mov	r1, r5
    207c:	f015 f88c 	bl	17198 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    2080:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    2084:	2d00      	cmp	r5, #0
    2086:	f000 8613 	beq.w	2cb0 <ull_conn_llcp+0x10e8>
    208a:	6828      	ldr	r0, [r5, #0]
    208c:	2800      	cmp	r0, #0
    208e:	f000 860f 	beq.w	2cb0 <ull_conn_llcp+0x10e8>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    2092:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		conn->llcp_rx = rx->hdr.link->mem;
    2096:	6842      	ldr	r2, [r0, #4]
    2098:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((eff_tx_time <= lll->max_tx_time) &&
    209c:	42b3      	cmp	r3, r6
    209e:	d30a      	bcc.n	20b6 <ull_conn_llcp+0x4ee>
    20a0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    20a4:	d807      	bhi.n	20b6 <ull_conn_llcp+0x4ee>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    20a6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		    (lll->max_tx_time <= max_tx_time) &&
    20aa:	42bb      	cmp	r3, r7
    20ac:	d303      	bcc.n	20b6 <ull_conn_llcp+0x4ee>
		    (eff_rx_time <= lll->max_rx_time) &&
    20ae:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    20b2:	f240 87f1 	bls.w	3098 <ull_conn_llcp+0x14d0>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    20b6:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
		lll->max_rx_time = eff_rx_time;
    20ba:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    20be:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    20c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    20c2:	80ea      	strh	r2, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    20c4:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    20c8:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    20cc:	2109      	movs	r1, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    20ce:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    20d2:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    20d4:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    20d6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    20da:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    20dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    20de:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    20e0:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    20e2:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    20e4:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    20e6:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    20e8:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    20ea:	f015 f855 	bl	17198 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    20ee:	f015 f85d 	bl	171ac <ll_rx_sched>
    20f2:	e57c      	b.n	1bee <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20f4:	48cb      	ldr	r0, [pc, #812]	; (2424 <ull_conn_llcp+0x85c>)
    20f6:	f011 f965 	bl	133c4 <mem_acquire>
	if (tx) {
    20fa:	2800      	cmp	r0, #0
    20fc:	f43f ad77 	beq.w	1bee <ull_conn_llcp+0x26>
		conn->llcp_ack = conn->llcp_req;
    2100:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    2104:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    2108:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    210a:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    210c:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    210e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2112:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    2116:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2118:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    211a:	71c1      	strb	r1, [r0, #7]
		if (!conn->tx_ctrl) {
    211c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	if (
    2120:	2b00      	cmp	r3, #0
    2122:	f000 83a3 	beq.w	286c <ull_conn_llcp+0xca4>
	    !conn->llcp_enc.pause_tx &&
    2126:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    212a:	078d      	lsls	r5, r1, #30
    212c:	f100 839e 	bmi.w	286c <ull_conn_llcp+0xca4>
	    !conn->llcp_phy.pause_tx &&
    2130:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    2134:	07c9      	lsls	r1, r1, #31
    2136:	f100 8399 	bmi.w	286c <ull_conn_llcp+0xca4>
		if (conn->tx_head == conn->tx_data) {
    213a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    213e:	428b      	cmp	r3, r1
    2140:	f000 8767 	beq.w	3012 <ull_conn_llcp+0x144a>
		} else if (!conn->tx_ctrl) {
    2144:	2a00      	cmp	r2, #0
    2146:	f000 87e0 	beq.w	310a <ull_conn_llcp+0x1542>
	tx->next = conn->tx_ctrl_last->next;
    214a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    214e:	681a      	ldr	r2, [r3, #0]
    2150:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2152:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2154:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2156:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    215a:	2b00      	cmp	r3, #0
    215c:	f000 85b8 	beq.w	2cd0 <ull_conn_llcp+0x1108>
		conn->procedure_expire = conn->procedure_reload;
    2160:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    2164:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    2168:	e541      	b.n	1bee <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
    216a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    216e:	f013 0503 	ands.w	r5, r3, #3
    2172:	f47f ad3c 	bne.w	1bee <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2176:	48ab      	ldr	r0, [pc, #684]	; (2424 <ull_conn_llcp+0x85c>)
    2178:	f011 f924 	bl	133c4 <mem_acquire>
	if (!tx) {
    217c:	4606      	mov	r6, r0
    217e:	2800      	cmp	r0, #0
    2180:	f43f ad35 	beq.w	1bee <ull_conn_llcp+0x26>
	if (!lll->role) {
    2184:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2188:	2b00      	cmp	r3, #0
    218a:	f280 82fd 	bge.w	2788 <ull_conn_llcp+0xbc0>
	else if (!lll->enc_rx) {
    218e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    2192:	0719      	lsls	r1, r3, #28
    2194:	f100 860e 	bmi.w	2db4 <ull_conn_llcp+0x11ec>
		if (conn->llcp.encryption.error_code) {
    2198:	f894 50cd 	ldrb.w	r5, [r4, #205]	; 0xcd
    219c:	2d00      	cmp	r5, #0
    219e:	f040 86c5 	bne.w	2f2c <ull_conn_llcp+0x1364>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    21a2:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    21a6:	463b      	mov	r3, r7
    21a8:	462a      	mov	r2, r5
    21aa:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    21ae:	f204 1049 	addw	r0, r4, #329	; 0x149
    21b2:	f01c f8d5 	bl	1e360 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    21b6:	2210      	movs	r2, #16
    21b8:	4639      	mov	r1, r7
    21ba:	f104 0080 	add.w	r0, r4, #128	; 0x80
    21be:	f026 f9fa 	bl	285b6 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    21c2:	2208      	movs	r2, #8
    21c4:	f104 0178 	add.w	r1, r4, #120	; 0x78
    21c8:	f104 0099 	add.w	r0, r4, #153	; 0x99
    21cc:	f026 f9f3 	bl	285b6 <memcpy>
			lll->ccm_rx.direction = 1U;
    21d0:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
    21d4:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
			lll->ccm_rx.counter = 0U;
    21d8:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
			lll->ccm_rx.direction = 1U;
    21dc:	f043 0301 	orr.w	r3, r3, #1
    21e0:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
			lll->enc_rx = 1U;
    21e4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
    21e8:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
			lll->ccm_tx.direction = 0U;
    21ec:	f365 0200 	bfi	r2, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    21f0:	2101      	movs	r1, #1
			lll->enc_rx = 1U;
    21f2:	f043 0308 	orr.w	r3, r3, #8
			lll->ccm_tx.direction = 0U;
    21f6:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
    21fa:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_tx.counter = 0U;
    21fe:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
			lll->ccm_rx.counter = 0U;
    2202:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    2206:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    220a:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    220e:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    2212:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    2216:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    221a:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    221c:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    221e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2222:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    2226:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2228:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    222a:	71f1      	strb	r1, [r6, #7]
	if (
    222c:	2b00      	cmp	r3, #0
    222e:	f000 8326 	beq.w	287e <ull_conn_llcp+0xcb6>
	    !conn->llcp_enc.pause_tx &&
    2232:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2236:	0790      	lsls	r0, r2, #30
    2238:	f100 8321 	bmi.w	287e <ull_conn_llcp+0xcb6>
	    !conn->llcp_phy.pause_tx &&
    223c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2240:	07d1      	lsls	r1, r2, #31
    2242:	f100 831c 	bmi.w	287e <ull_conn_llcp+0xcb6>
		if (conn->tx_head == conn->tx_data) {
    2246:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    224a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    224e:	428b      	cmp	r3, r1
    2250:	f000 82f1 	beq.w	2836 <ull_conn_llcp+0xc6e>
		} else if (!conn->tx_ctrl) {
    2254:	2a00      	cmp	r2, #0
    2256:	f000 8770 	beq.w	313a <ull_conn_llcp+0x1572>
	tx->next = conn->tx_ctrl_last->next;
    225a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    225e:	681a      	ldr	r2, [r3, #0]
    2260:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2262:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2264:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    2266:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    226a:	2b00      	cmp	r3, #0
    226c:	f000 8565 	beq.w	2d3a <ull_conn_llcp+0x1172>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    2270:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    2274:	f043 0303 	orr.w	r3, r3, #3
    2278:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    227c:	e4b7      	b.n	1bee <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    227e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    2280:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    2282:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    2286:	440a      	add	r2, r1
    2288:	442a      	add	r2, r5
	if (conn->llcp.chan_map.initiate) {
    228a:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    228c:	b295      	uxth	r5, r2
	if (conn->llcp.chan_map.initiate) {
    228e:	f100 80d1 	bmi.w	2434 <ull_conn_llcp+0x86c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    2292:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    2296:	1aad      	subs	r5, r5, r2
    2298:	0428      	lsls	r0, r5, #16
    229a:	f53f aca8 	bmi.w	1bee <ull_conn_llcp+0x26>
			conn->llcp_ack = conn->llcp_req;
    229e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    22a2:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		memcpy(&lll->data_chan_map[0],
    22a6:	f104 0534 	add.w	r5, r4, #52	; 0x34
    22aa:	2205      	movs	r2, #5
    22ac:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    22b0:	4628      	mov	r0, r5
    22b2:	f026 f980 	bl	285b6 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    22b6:	2105      	movs	r1, #5
    22b8:	4628      	mov	r0, r5
    22ba:	f011 fa59 	bl	13770 <util_ones_count_get>
		lll->data_chan_count =
    22be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    22c2:	2201      	movs	r2, #1
		lll->data_chan_count =
    22c4:	f360 0305 	bfi	r3, r0, #0, #6
    22c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    22cc:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
    22d0:	e48d      	b.n	1bee <ull_conn_llcp+0x26>
			LL_ASSERT(0);
    22d2:	4a55      	ldr	r2, [pc, #340]	; (2428 <ull_conn_llcp+0x860>)
    22d4:	4955      	ldr	r1, [pc, #340]	; (242c <ull_conn_llcp+0x864>)
    22d6:	4856      	ldr	r0, [pc, #344]	; (2430 <ull_conn_llcp+0x868>)
    22d8:	f240 43e1 	movw	r3, #1249	; 0x4e1
    22dc:	f022 fc8e 	bl	24bfc <printk>
    22e0:	4040      	eors	r0, r0
    22e2:	f380 8811 	msr	BASEPRI, r0
    22e6:	f04f 0003 	mov.w	r0, #3
    22ea:	df02      	svc	2
			break;
    22ec:	e47f      	b.n	1bee <ull_conn_llcp+0x26>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    22ee:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    22f2:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
    22f6:	42ba      	cmp	r2, r7
    22f8:	d143      	bne.n	2382 <ull_conn_llcp+0x7ba>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    22fa:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    22fe:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
    2302:	42ba      	cmp	r2, r7
    2304:	f000 82c6 	beq.w	2894 <ull_conn_llcp+0xccc>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    2308:	1bd2      	subs	r2, r2, r7
    230a:	07d0      	lsls	r0, r2, #31
    230c:	f57f ac6f 	bpl.w	1bee <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    2310:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    2314:	07d9      	lsls	r1, r3, #31
    2316:	f140 85b5 	bpl.w	2e84 <ull_conn_llcp+0x12bc>
	} else if (conn->llcp_version.rx) {
    231a:	0798      	lsls	r0, r3, #30
    231c:	f140 85ad 	bpl.w	2e7a <ull_conn_llcp+0x12b2>
		rx = ll_pdu_rx_alloc();
    2320:	f014 ff68 	bl	171f4 <ll_pdu_rx_alloc>
		if (!rx) {
    2324:	4601      	mov	r1, r0
    2326:	b300      	cbz	r0, 236a <ull_conn_llcp+0x7a2>
		conn->llcp_version.ack = conn->llcp_version.req;
    2328:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    232c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		rx->hdr.handle = conn->lll.handle;
    2330:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2332:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2334:	2303      	movs	r3, #3
    2336:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2338:	7f03      	ldrb	r3, [r0, #28]
    233a:	f043 0303 	orr.w	r3, r3, #3
    233e:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    2340:	2306      	movs	r3, #6
    2342:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    2344:	230c      	movs	r3, #12
    2346:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    2348:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
    234c:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    2350:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    2354:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    2358:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    235c:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
    2360:	6808      	ldr	r0, [r1, #0]
    2362:	f014 ff19 	bl	17198 <ll_rx_put>
	ll_rx_sched();
    2366:	f014 ff21 	bl	171ac <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    236a:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    236e:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
    2372:	e435      	b.n	1be0 <ull_conn_llcp+0x18>
				event_len_prep(conn);
    2374:	4620      	mov	r0, r4
    2376:	f015 fff5 	bl	18364 <event_len_prep>
    237a:	e452      	b.n	1c22 <ull_conn_llcp+0x5a>
		conn->tx_data_last = tx;
    237c:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2380:	e5f7      	b.n	1f72 <ull_conn_llcp+0x3aa>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    2382:	1bd2      	subs	r2, r2, r7
    2384:	07d1      	lsls	r1, r2, #31
    2386:	f57f ac32 	bpl.w	1bee <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    238a:	f890 10ba 	ldrb.w	r1, [r0, #186]	; 0xba
    238e:	f011 0701 	ands.w	r7, r1, #1
    2392:	f000 8425 	beq.w	2be0 <ull_conn_llcp+0x1018>
		rx = ll_pdu_rx_alloc();
    2396:	f014 ff2d 	bl	171f4 <ll_pdu_rx_alloc>
		if (!rx) {
    239a:	4607      	mov	r7, r0
    239c:	2800      	cmp	r0, #0
    239e:	d0e4      	beq.n	236a <ull_conn_llcp+0x7a2>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    23a0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    23a4:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23a8:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    23aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    23ac:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23ae:	f043 0303 	orr.w	r3, r3, #3
    23b2:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    23b4:	2309      	movs	r3, #9
    23b6:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    23b8:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    23ba:	2303      	movs	r3, #3
    23bc:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    23be:	4641      	mov	r1, r8
    23c0:	2208      	movs	r2, #8
    23c2:	3020      	adds	r0, #32
    23c4:	f026 f902 	bl	285cc <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    23c8:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
	sys_put_le16(val >> 16, &dst[2]);
    23cc:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    23ce:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    23d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    23d6:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    23da:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    23dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    23e0:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    23e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    23e8:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    23ea:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    23ee:	0a12      	lsrs	r2, r2, #8
    23f0:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    23f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    23f8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    23fc:	4639      	mov	r1, r7
    23fe:	e7af      	b.n	2360 <ull_conn_llcp+0x798>
		switch (conn->llcp_cu.state) {
    2400:	1e4b      	subs	r3, r1, #1
    2402:	2b04      	cmp	r3, #4
    2404:	f201 8126 	bhi.w	3654 <ull_conn_llcp+0x1a8c>
    2408:	a101      	add	r1, pc, #4	; (adr r1, 2410 <ull_conn_llcp+0x848>)
    240a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    240e:	bf00      	nop
    2410:	00002675 	.word	0x00002675
    2414:	00002595 	.word	0x00002595
    2418:	00001bef 	.word	0x00001bef
    241c:	0000267b 	.word	0x0000267b
    2420:	000026eb 	.word	0x000026eb
    2424:	20003590 	.word	0x20003590
    2428:	0002d7e8 	.word	0x0002d7e8
    242c:	0002d314 	.word	0x0002d314
    2430:	0002d27c 	.word	0x0002d27c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2434:	48cb      	ldr	r0, [pc, #812]	; (2764 <ull_conn_llcp+0xb9c>)
    2436:	f010 ffc5 	bl	133c4 <mem_acquire>
		if (tx) {
    243a:	4606      	mov	r6, r0
    243c:	2800      	cmp	r0, #0
    243e:	f43f abd6 	beq.w	1bee <ull_conn_llcp+0x26>
						      conn->lll.latency + 6;
    2442:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    2444:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2448:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    244a:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
    244c:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    2450:	442a      	add	r2, r5
			conn->llcp.chan_map.initiate = 0U;
    2452:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			conn->llcp.chan_map.instant = event_counter +
    2456:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    245a:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    245e:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
    2460:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2462:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2464:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    2466:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    2468:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    246c:	2205      	movs	r2, #5
    246e:	3008      	adds	r0, #8
    2470:	f026 f8a1 	bl	285b6 <memcpy>
	    conn->tx_head &&
    2474:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    2478:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    247c:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    2480:	2b00      	cmp	r3, #0
    2482:	f000 8432 	beq.w	2cea <ull_conn_llcp+0x1122>
	    !conn->llcp_enc.pause_tx &&
    2486:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    248a:	0797      	lsls	r7, r2, #30
    248c:	f100 842d 	bmi.w	2cea <ull_conn_llcp+0x1122>
	    !conn->llcp_phy.pause_tx &&
    2490:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2494:	07d5      	lsls	r5, r2, #31
    2496:	f100 8428 	bmi.w	2cea <ull_conn_llcp+0x1122>
		if (conn->tx_head == conn->tx_data) {
    249a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    249e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    24a2:	428b      	cmp	r3, r1
    24a4:	f000 863b 	beq.w	311e <ull_conn_llcp+0x1556>
		} else if (!conn->tx_ctrl) {
    24a8:	2a00      	cmp	r2, #0
    24aa:	f000 8727 	beq.w	32fc <ull_conn_llcp+0x1734>
	tx->next = conn->tx_ctrl_last->next;
    24ae:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    24b2:	681a      	ldr	r2, [r3, #0]
    24b4:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    24b6:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    24b8:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    24ba:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    24be:	2b00      	cmp	r3, #0
    24c0:	f47f ab95 	bne.w	1bee <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    24c4:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    24c8:	f7ff bb91 	b.w	1bee <ull_conn_llcp+0x26>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    24cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    24d0:	2200      	movs	r2, #0
    24d2:	f010 ffe5 	bl	134a0 <memq_peek>
    24d6:	4606      	mov	r6, r0
    24d8:	2800      	cmp	r0, #0
    24da:	f47f ab88 	bne.w	1bee <ull_conn_llcp+0x26>
		rx = ll_pdu_rx_alloc_peek(2);
    24de:	2002      	movs	r0, #2
    24e0:	f014 fe6a 	bl	171b8 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    24e4:	4680      	mov	r8, r0
    24e6:	2800      	cmp	r0, #0
    24e8:	f43f ab81 	beq.w	1bee <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24ec:	489d      	ldr	r0, [pc, #628]	; (2764 <ull_conn_llcp+0xb9c>)
    24ee:	f010 ff69 	bl	133c4 <mem_acquire>
		if (!tx) {
    24f2:	4607      	mov	r7, r0
    24f4:	2800      	cmp	r0, #0
    24f6:	f43f ab7a 	beq.w	1bee <ull_conn_llcp+0x26>
		conn->llcp.phy_upd_ind.initiate = 0U;
    24fa:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    24fe:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    2502:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    2506:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    250a:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    250e:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		if (!((conn->llcp.phy_upd_ind.tx |
    2512:	b2db      	uxtb	r3, r3
    2514:	f040 8596 	bne.w	3044 <ull_conn_llcp+0x147c>
			conn->llcp_ack = conn->llcp_req;
    2518:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			conn->llcp.phy_upd_ind.instant = 0U;
    251c:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
			if (conn->llcp.phy_upd_ind.cmd) {
    2520:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    2522:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			if (conn->llcp.phy_upd_ind.cmd) {
    2526:	f100 85c0 	bmi.w	30aa <ull_conn_llcp+0x14e2>
    252a:	4633      	mov	r3, r6
    252c:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    252e:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    2530:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2532:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
    2534:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2536:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
    2538:	2218      	movs	r2, #24
	    conn->tx_head &&
    253a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		if (!conn->tx_ctrl) {
    253e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		pdu_ctrl_tx->llctrl.opcode =
    2542:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2544:	793a      	ldrb	r2, [r7, #4]
    2546:	f042 0203 	orr.w	r2, r2, #3
    254a:	713a      	strb	r2, [r7, #4]
	if (
    254c:	2b00      	cmp	r3, #0
    254e:	f000 8527 	beq.w	2fa0 <ull_conn_llcp+0x13d8>
	    !conn->llcp_enc.pause_tx &&
    2552:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2556:	0796      	lsls	r6, r2, #30
    2558:	f100 8522 	bmi.w	2fa0 <ull_conn_llcp+0x13d8>
	    !conn->llcp_phy.pause_tx &&
    255c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2560:	07d5      	lsls	r5, r2, #31
    2562:	f100 851d 	bmi.w	2fa0 <ull_conn_llcp+0x13d8>
		if (conn->tx_head == conn->tx_data) {
    2566:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    256a:	4293      	cmp	r3, r2
    256c:	f000 86a2 	beq.w	32b4 <ull_conn_llcp+0x16ec>
		} else if (!conn->tx_ctrl) {
    2570:	2900      	cmp	r1, #0
    2572:	f000 86dd 	beq.w	3330 <ull_conn_llcp+0x1768>
	tx->next = conn->tx_ctrl_last->next;
    2576:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    257a:	681a      	ldr	r2, [r3, #0]
    257c:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    257e:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    2580:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2584:	683b      	ldr	r3, [r7, #0]
    2586:	2b00      	cmp	r3, #0
    2588:	f47f ab31 	bne.w	1bee <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    258c:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
    2590:	f7ff bb2d 	b.w	1bee <ull_conn_llcp+0x26>
		switch (conn->llcp_cu.state) {
    2594:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 2768 <ull_conn_llcp+0xba0>
		rx = ll_pdu_rx_alloc_peek(1);
    2598:	2001      	movs	r0, #1
    259a:	f014 fe0d 	bl	171b8 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    259e:	4607      	mov	r7, r0
    25a0:	2800      	cmp	r0, #0
    25a2:	f43f ab24 	beq.w	1bee <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    25a6:	486f      	ldr	r0, [pc, #444]	; (2764 <ull_conn_llcp+0xb9c>)
    25a8:	f010 ff0c 	bl	133c4 <mem_acquire>
		if (!tx) {
    25ac:	4605      	mov	r5, r0
    25ae:	2800      	cmp	r0, #0
    25b0:	f43f ab1d 	beq.w	1bee <ull_conn_llcp+0x26>
	if (!conn_upd_curr) {
    25b4:	4b6d      	ldr	r3, [pc, #436]	; (276c <ull_conn_llcp+0xba4>)
    25b6:	681a      	ldr	r2, [r3, #0]
    25b8:	2a00      	cmp	r2, #0
    25ba:	f000 845b 	beq.w	2e74 <ull_conn_llcp+0x12ac>
		(void)ll_pdu_rx_alloc();
    25be:	f014 fe19 	bl	171f4 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    25c8:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25ca:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    25cc:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25d0:	f043 0303 	orr.w	r3, r3, #3
    25d4:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    25d6:	230c      	movs	r3, #12
    25d8:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    25da:	2300      	movs	r3, #0
    25dc:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    25de:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    25e2:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    25e4:	4a62      	ldr	r2, [pc, #392]	; (2770 <ull_conn_llcp+0xba8>)
    25e6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    25ea:	fba2 2303 	umull	r2, r3, r2, r3
    25ee:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    25f0:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    25f4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    25f8:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    25fc:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
    2600:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2604:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    2608:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    260c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    2610:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    2614:	2203      	movs	r2, #3
    2616:	f362 0302 	bfi	r3, r2, #0, #3
    261a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    261e:	68a3      	ldr	r3, [r4, #8]
    2620:	2b00      	cmp	r3, #0
    2622:	da0a      	bge.n	263a <ull_conn_llcp+0xa72>
			uint32_t ticks_prepare_to_start =
    2624:	68e0      	ldr	r0, [r4, #12]
    2626:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    2628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    262c:	4290      	cmp	r0, r2
    262e:	bf2c      	ite	cs
    2630:	1831      	addcs	r1, r6, r0
    2632:	18b1      	addcc	r1, r6, r2
    2634:	1acb      	subs	r3, r1, r3
    2636:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    263a:	4b4e      	ldr	r3, [pc, #312]	; (2774 <ull_conn_llcp+0xbac>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    263c:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    263e:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    2640:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2644:	2102      	movs	r1, #2
    2646:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    2648:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    264c:	f010 ff92 	bl	13574 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2650:	2800      	cmp	r0, #0
    2652:	f43f aacc 	beq.w	1bee <ull_conn_llcp+0x26>
    2656:	4a48      	ldr	r2, [pc, #288]	; (2778 <ull_conn_llcp+0xbb0>)
    2658:	4948      	ldr	r1, [pc, #288]	; (277c <ull_conn_llcp+0xbb4>)
    265a:	4849      	ldr	r0, [pc, #292]	; (2780 <ull_conn_llcp+0xbb8>)
    265c:	f640 3373 	movw	r3, #2931	; 0xb73
    2660:	f022 facc 	bl	24bfc <printk>
    2664:	4040      	eors	r0, r0
    2666:	f380 8811 	msr	BASEPRI, r0
    266a:	f04f 0003 	mov.w	r0, #3
    266e:	df02      	svc	2
    2670:	f7ff babd 	b.w	1bee <ull_conn_llcp+0x26>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    2674:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2784 <ull_conn_llcp+0xbbc>
    2678:	e78e      	b.n	2598 <ull_conn_llcp+0x9d0>
						      conn->lll.latency + 6;
    267a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    267c:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2680:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
	    conn->tx_head &&
    2684:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
						      conn->lll.latency + 6;
    2688:	3306      	adds	r3, #6
    268a:	441a      	add	r2, r3
    268c:	b293      	uxth	r3, r2
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    268e:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    2692:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    2696:	f1a5 0209 	sub.w	r2, r5, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    269a:	812b      	strh	r3, [r5, #8]
		if (!conn->tx_ctrl) {
    269c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    26a0:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (
    26a4:	2900      	cmp	r1, #0
    26a6:	f000 83ce 	beq.w	2e46 <ull_conn_llcp+0x127e>
	    !conn->llcp_enc.pause_tx &&
    26aa:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    26ae:	0787      	lsls	r7, r0, #30
    26b0:	f100 83c9 	bmi.w	2e46 <ull_conn_llcp+0x127e>
	    !conn->llcp_phy.pause_tx &&
    26b4:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    26b8:	07c6      	lsls	r6, r0, #31
    26ba:	f100 83c4 	bmi.w	2e46 <ull_conn_llcp+0x127e>
		if (conn->tx_head == conn->tx_data) {
    26be:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    26c2:	4281      	cmp	r1, r0
    26c4:	f000 859e 	beq.w	3204 <ull_conn_llcp+0x163c>
		} else if (!conn->tx_ctrl) {
    26c8:	2b00      	cmp	r3, #0
    26ca:	f000 866e 	beq.w	33aa <ull_conn_llcp+0x17e2>
	tx->next = conn->tx_ctrl_last->next;
    26ce:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    26d2:	6819      	ldr	r1, [r3, #0]
    26d4:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    26d8:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    26da:	f855 1c09 	ldr.w	r1, [r5, #-9]
	conn->tx_ctrl_last = tx;
    26de:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    26e2:	2900      	cmp	r1, #0
    26e4:	f47f aa83 	bne.w	1bee <ull_conn_llcp+0x26>
    26e8:	e038      	b.n	275c <ull_conn_llcp+0xb94>
			conn->llcp_ack = conn->llcp_req;
    26ea:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
    26ee:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
			conn->llcp_cu.ack = conn->llcp_cu.req;
    26f2:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
	conn_upd_curr = NULL;
    26f6:	4a1d      	ldr	r2, [pc, #116]	; (276c <ull_conn_llcp+0xba4>)
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    26f8:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
			conn->llcp_cu.ack = conn->llcp_cu.req;
    26fc:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	    conn->tx_head &&
    2700:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2704:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    2708:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    270c:	2100      	movs	r1, #0
    270e:	6011      	str	r1, [r2, #0]
		if (!conn->tx_ctrl) {
    2710:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    2714:	f1a5 0209 	sub.w	r2, r5, #9
	if (
    2718:	2b00      	cmp	r3, #0
    271a:	f000 83a1 	beq.w	2e60 <ull_conn_llcp+0x1298>
	    !conn->llcp_enc.pause_tx &&
    271e:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2722:	0786      	lsls	r6, r0, #30
    2724:	f100 839c 	bmi.w	2e60 <ull_conn_llcp+0x1298>
	    !conn->llcp_phy.pause_tx &&
    2728:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    272c:	07c0      	lsls	r0, r0, #31
    272e:	f100 8397 	bmi.w	2e60 <ull_conn_llcp+0x1298>
		if (conn->tx_head == conn->tx_data) {
    2732:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    2736:	4283      	cmp	r3, r0
    2738:	f000 85ea 	beq.w	3310 <ull_conn_llcp+0x1748>
		} else if (!conn->tx_ctrl) {
    273c:	2900      	cmp	r1, #0
    273e:	f000 862a 	beq.w	3396 <ull_conn_llcp+0x17ce>
	tx->next = conn->tx_ctrl_last->next;
    2742:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2746:	6819      	ldr	r1, [r3, #0]
    2748:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    274c:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    274e:	f855 3c09 	ldr.w	r3, [r5, #-9]
	conn->tx_ctrl_last = tx;
    2752:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2756:	2b00      	cmp	r3, #0
    2758:	f47f aa49 	bne.w	1bee <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    275c:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    2760:	f7ff ba45 	b.w	1bee <ull_conn_llcp+0x26>
    2764:	20003590 	.word	0x20003590
    2768:	00003f69 	.word	0x00003f69
    276c:	200034fc 	.word	0x200034fc
    2770:	d1b71759 	.word	0xd1b71759
    2774:	20000700 	.word	0x20000700
    2778:	0002d7e8 	.word	0x0002d7e8
    277c:	0002d6f8 	.word	0x0002d6f8
    2780:	0002d27c 	.word	0x0002d27c
    2784:	0001b2cd 	.word	0x0001b2cd
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    2788:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    278c:	463b      	mov	r3, r7
    278e:	462a      	mov	r2, r5
    2790:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    2794:	f204 1049 	addw	r0, r4, #329	; 0x149
    2798:	f01b fde2 	bl	1e360 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    279c:	2210      	movs	r2, #16
    279e:	4639      	mov	r1, r7
    27a0:	f104 0080 	add.w	r0, r4, #128	; 0x80
    27a4:	f025 ff07 	bl	285b6 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    27a8:	2208      	movs	r2, #8
    27aa:	f104 0178 	add.w	r1, r4, #120	; 0x78
    27ae:	f104 0099 	add.w	r0, r4, #153	; 0x99
    27b2:	f025 ff00 	bl	285b6 <memcpy>
		lll->ccm_rx.direction = 0;
    27b6:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    27ba:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
		lll->enc_rx = 1;
    27be:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    27c2:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
		lll->ccm_tx.counter = 0;
    27c6:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
		lll->enc_rx = 1;
    27ca:	f023 0318 	bic.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    27ce:	f365 0100 	bfi	r1, r5, #0, #1
		lll->ccm_tx.direction = 1;
    27d2:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.counter = 0;
    27d6:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    27da:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    27de:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    27e2:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    27e6:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    27ea:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    27ee:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		lll->enc_rx = 1;
    27f2:	f043 0318 	orr.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    27f6:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    27fa:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conn->lll.enc_tx = 1;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    27fe:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    2800:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2804:	7932      	ldrb	r2, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2806:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    2808:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    280c:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    2810:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2812:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    2814:	71f1      	strb	r1, [r6, #7]
	if (
    2816:	b393      	cbz	r3, 287e <ull_conn_llcp+0xcb6>
	    !conn->llcp_enc.pause_tx &&
    2818:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    281c:	0792      	lsls	r2, r2, #30
    281e:	d42e      	bmi.n	287e <ull_conn_llcp+0xcb6>
	    !conn->llcp_phy.pause_tx &&
    2820:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2824:	07d7      	lsls	r7, r2, #31
    2826:	d42a      	bmi.n	287e <ull_conn_llcp+0xcb6>
		if (conn->tx_head == conn->tx_data) {
    2828:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    282c:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    282e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2832:	f47f ad0f 	bne.w	2254 <ull_conn_llcp+0x68c>
			conn->tx_data = conn->tx_data->next;
    2836:	6819      	ldr	r1, [r3, #0]
    2838:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    283c:	2a00      	cmp	r2, #0
    283e:	f47f ad0c 	bne.w	225a <ull_conn_llcp+0x692>
			tx->next = conn->tx_head->next;
    2842:	681a      	ldr	r2, [r3, #0]
    2844:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2846:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2848:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    284a:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    284e:	e50c      	b.n	226a <ull_conn_llcp+0x6a2>
				conn->procedure_expire++;
    2850:	3301      	adds	r3, #1
    2852:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    2856:	f7ff b9d4 	b.w	1c02 <ull_conn_llcp+0x3a>
			tx->next = conn->tx_head;
    285a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    285c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2860:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2864:	2b00      	cmp	r3, #0
    2866:	f47f ab84 	bne.w	1f72 <ull_conn_llcp+0x3aa>
    286a:	e587      	b.n	237c <ull_conn_llcp+0x7b4>
		if (!conn->tx_ctrl) {
    286c:	2a00      	cmp	r2, #0
    286e:	f47f ac6c 	bne.w	214a <ull_conn_llcp+0x582>
			tx->next = conn->tx_head;
    2872:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2874:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2878:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    287c:	e46d      	b.n	215a <ull_conn_llcp+0x592>
		if (!conn->tx_ctrl) {
    287e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2882:	2a00      	cmp	r2, #0
    2884:	f47f ace9 	bne.w	225a <ull_conn_llcp+0x692>
			tx->next = conn->tx_head;
    2888:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    288a:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    288e:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2892:	e4ea      	b.n	226a <ull_conn_llcp+0x6a2>
		} else if (conn->llcp_conn_param.ack !=
    2894:	f890 715d 	ldrb.w	r7, [r0, #349]	; 0x15d
    2898:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    289c:	4297      	cmp	r7, r2
    289e:	f000 8230 	beq.w	2d02 <ull_conn_llcp+0x113a>
	return conn_upd_curr && (conn_upd_curr != conn);
    28a2:	4fc7      	ldr	r7, [pc, #796]	; (2bc0 <ull_conn_llcp+0xff8>)
    28a4:	683a      	ldr	r2, [r7, #0]
    28a6:	2a00      	cmp	r2, #0
    28a8:	f000 8393 	beq.w	2fd2 <ull_conn_llcp+0x140a>
    28ac:	4290      	cmp	r0, r2
    28ae:	f47f a99e 	bne.w	1bee <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    28b2:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    28b6:	f002 020f 	and.w	r2, r2, #15
    28ba:	2a08      	cmp	r2, #8
    28bc:	f200 86db 	bhi.w	3676 <ull_conn_llcp+0x1aae>
    28c0:	a001      	add	r0, pc, #4	; (adr r0, 28c8 <ull_conn_llcp+0xd00>)
    28c2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    28c6:	bf00      	nop
    28c8:	00002a31 	.word	0x00002a31
    28cc:	000029a9 	.word	0x000029a9
    28d0:	00002959 	.word	0x00002959
    28d4:	00001be1 	.word	0x00001be1
    28d8:	00001be1 	.word	0x00001be1
    28dc:	00001be1 	.word	0x00001be1
    28e0:	00001be1 	.word	0x00001be1
    28e4:	00001be1 	.word	0x00001be1
    28e8:	000028ed 	.word	0x000028ed
			event_counter = lll->event_counter +
    28ec:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    28ee:	8e62      	ldrh	r2, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
    28f0:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
			event_counter = lll->event_counter +
    28f4:	440a      	add	r2, r1
    28f6:	442a      	add	r2, r5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    28f8:	f894 515e 	ldrb.w	r5, [r4, #350]	; 0x15e
	    conn->tx_head &&
    28fc:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    2900:	f820 2c02 	strh.w	r2, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    2904:	2204      	movs	r2, #4
    2906:	f362 0503 	bfi	r5, r2, #0, #4
    290a:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    290e:	f1a0 0213 	sub.w	r2, r0, #19
		if (!conn->tx_ctrl) {
    2912:	f8d4 51a0 	ldr.w	r5, [r4, #416]	; 0x1a0
	if (
    2916:	2900      	cmp	r1, #0
    2918:	f000 83ed 	beq.w	30f6 <ull_conn_llcp+0x152e>
	    conn->tx_head &&
    291c:	079e      	lsls	r6, r3, #30
    291e:	f100 83ea 	bmi.w	30f6 <ull_conn_llcp+0x152e>
	    !conn->llcp_phy.pause_tx &&
    2922:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    2926:	07db      	lsls	r3, r3, #31
    2928:	f100 83e5 	bmi.w	30f6 <ull_conn_llcp+0x152e>
		if (conn->tx_head == conn->tx_data) {
    292c:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    2930:	4299      	cmp	r1, r3
    2932:	f000 85f9 	beq.w	3528 <ull_conn_llcp+0x1960>
		} else if (!conn->tx_ctrl) {
    2936:	2d00      	cmp	r5, #0
    2938:	f000 864a 	beq.w	35d0 <ull_conn_llcp+0x1a08>
	tx->next = conn->tx_ctrl_last->next;
    293c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2940:	6819      	ldr	r1, [r3, #0]
    2942:	f840 1c13 	str.w	r1, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
    2946:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    2948:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    294c:	f850 3c13 	ldr.w	r3, [r0, #-19]
    2950:	2b00      	cmp	r3, #0
    2952:	f47f a94c 	bne.w	1bee <ull_conn_llcp+0x26>
    2956:	e701      	b.n	275c <ull_conn_llcp+0xb94>
	if (conn->llcp_enc.pause_tx) {
    2958:	079f      	lsls	r7, r3, #30
    295a:	f53f a948 	bmi.w	1bee <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    295e:	f014 fc49 	bl	171f4 <ll_pdu_rx_alloc>
	if (!rx) {
    2962:	4601      	mov	r1, r0
    2964:	2800      	cmp	r0, #0
    2966:	f43f ad00 	beq.w	236a <ull_conn_llcp+0x7a2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    296a:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    296e:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2970:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2972:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2976:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    297a:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    297c:	f884 015e 	strb.w	r0, [r4, #350]	; 0x15e
	rx->hdr.handle = conn->lll.handle;
    2980:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2982:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2984:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2986:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2988:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    298c:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    298e:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2992:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2994:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2998:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    299a:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    299e:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    29a0:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    29a2:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    29a4:	77cb      	strb	r3, [r1, #31]
    29a6:	e4db      	b.n	2360 <ull_conn_llcp+0x798>
	if (conn->llcp_conn_param.status) {
    29a8:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    29ac:	2b00      	cmp	r3, #0
    29ae:	f040 83de 	bne.w	316e <ull_conn_llcp+0x15a6>
	if (!conn->lll.role) {
    29b2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    29b6:	2a00      	cmp	r2, #0
    29b8:	f2c0 8516 	blt.w	33e8 <ull_conn_llcp+0x1820>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    29bc:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_offset_us = 0U;
    29c0:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    29c4:	2006      	movs	r0, #6
    29c6:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    29ca:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    29ce:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_size = 1U;
    29d2:	2501      	movs	r5, #1
		interval_max = conn->llcp_conn_param.interval_max;
    29d4:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
		conn->llcp_cu.win_size = 1U;
    29d8:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		if (preferred_periodicity) {
    29dc:	2800      	cmp	r0, #0
    29de:	f000 84f7 	beq.w	33d0 <ull_conn_llcp+0x1808>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    29e2:	fbb2 f3f0 	udiv	r3, r2, r0
    29e6:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    29ea:	f8b4 0160 	ldrh.w	r0, [r4, #352]	; 0x160
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    29ee:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    29f0:	4298      	cmp	r0, r3
    29f2:	bf98      	it	ls
    29f4:	461a      	movls	r2, r3
    29f6:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    29fa:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    29fe:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    2a02:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    2a06:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2a0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2a0e:	00db      	lsls	r3, r3, #3
    2a10:	f022 020f 	bic.w	r2, r2, #15
    2a14:	f043 0302 	orr.w	r3, r3, #2
    2a18:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    2a1a:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2a1c:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    2a20:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2a24:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.ack--;
    2a28:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		return;
    2a2c:	f7ff b8df 	b.w	1bee <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2a30:	4864      	ldr	r0, [pc, #400]	; (2bc4 <ull_conn_llcp+0xffc>)
    2a32:	f010 fcc7 	bl	133c4 <mem_acquire>
	if (!tx) {
    2a36:	4602      	mov	r2, r0
    2a38:	2800      	cmp	r0, #0
    2a3a:	f43f ac96 	beq.w	236a <ull_conn_llcp+0x7a2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2a3e:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    2a40:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2a42:	f043 0303 	orr.w	r3, r3, #3
    2a46:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2a48:	2318      	movs	r3, #24
    2a4a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a4c:	230f      	movs	r3, #15
    2a4e:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2a50:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    2a54:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2a56:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2a5a:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2a5c:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2a60:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2a62:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    2a66:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    2a68:	2300      	movs	r3, #0
    2a6a:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2a6c:	74c3      	strb	r3, [r0, #19]
    2a6e:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a74:	7543      	strb	r3, [r0, #21]
    2a76:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    2a78:	75c3      	strb	r3, [r0, #23]
    2a7a:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2a7c:	7643      	strb	r3, [r0, #25]
    2a7e:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2a80:	76c3      	strb	r3, [r0, #27]
    2a82:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    2a84:	7743      	strb	r3, [r0, #29]
    2a86:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
    2a88:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    2a8c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2a90:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    2a94:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2a98:	2107      	movs	r1, #7
    2a9a:	f361 0303 	bfi	r3, r1, #0, #4
    2a9e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    2aa2:	68a3      	ldr	r3, [r4, #8]
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	da0a      	bge.n	2abe <ull_conn_llcp+0xef6>
			uint32_t ticks_prepare_to_start =
    2aa8:	68e7      	ldr	r7, [r4, #12]
    2aaa:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    2aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    2ab0:	4287      	cmp	r7, r0
    2ab2:	bf2c      	ite	cs
    2ab4:	19f1      	addcs	r1, r6, r7
    2ab6:	1831      	addcc	r1, r6, r0
    2ab8:	1acb      	subs	r3, r1, r3
    2aba:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		win_offs = &p->offset0;
    2abe:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
    2ac0:	4b41      	ldr	r3, [pc, #260]	; (2bc8 <ull_conn_llcp+0x1000>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
    2ac2:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2ac6:	2201      	movs	r2, #1
    2ac8:	2102      	movs	r1, #2
    2aca:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    2acc:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2ace:	f010 fd51 	bl	13574 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2ad2:	2800      	cmp	r0, #0
    2ad4:	f43f ac49 	beq.w	236a <ull_conn_llcp+0x7a2>
    2ad8:	4a3c      	ldr	r2, [pc, #240]	; (2bcc <ull_conn_llcp+0x1004>)
    2ada:	493d      	ldr	r1, [pc, #244]	; (2bd0 <ull_conn_llcp+0x1008>)
    2adc:	f640 63f6 	movw	r3, #3830	; 0xef6
		LL_ASSERT(0);
    2ae0:	483c      	ldr	r0, [pc, #240]	; (2bd4 <ull_conn_llcp+0x100c>)
    2ae2:	f022 f88b 	bl	24bfc <printk>
    2ae6:	4040      	eors	r0, r0
    2ae8:	f380 8811 	msr	BASEPRI, r0
    2aec:	f04f 0003 	mov.w	r0, #3
    2af0:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2af2:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2af6:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		break;
    2afa:	f7ff b871 	b.w	1be0 <ull_conn_llcp+0x18>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2afe:	fb08 3311 	mls	r3, r8, r1, r3
    2b02:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2b06:	4934      	ldr	r1, [pc, #208]	; (2bd8 <ull_conn_llcp+0x1010>)
    2b08:	b29b      	uxth	r3, r3
    2b0a:	fb02 f303 	mul.w	r3, r2, r3
    2b0e:	fba3 0101 	umull	r0, r1, r3, r1
    2b12:	a329      	add	r3, pc, #164	; (adr r3, 2bb8 <ull_conn_llcp+0xff0>)
    2b14:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b18:	f7fe faf2 	bl	1100 <__aeabi_uldivmod>
    2b1c:	1a36      	subs	r6, r6, r0
    2b1e:	f7ff b933 	b.w	1d88 <ull_conn_llcp+0x1c0>
		LL_ASSERT(rx && rx->hdr.link);
    2b22:	4a2a      	ldr	r2, [pc, #168]	; (2bcc <ull_conn_llcp+0x1004>)
    2b24:	492d      	ldr	r1, [pc, #180]	; (2bdc <ull_conn_llcp+0x1014>)
    2b26:	482b      	ldr	r0, [pc, #172]	; (2bd4 <ull_conn_llcp+0x100c>)
    2b28:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    2b2c:	f022 f866 	bl	24bfc <printk>
    2b30:	4040      	eors	r0, r0
    2b32:	f380 8811 	msr	BASEPRI, r0
    2b36:	f04f 0003 	mov.w	r0, #3
    2b3a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2b3c:	f8d8 0000 	ldr.w	r0, [r8]
    2b40:	f7ff b8d2 	b.w	1ce8 <ull_conn_llcp+0x120>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2b44:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2b48:	f360 0202 	bfi	r2, r0, #0, #3
    2b4c:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2b50:	f44f 76a4 	mov.w	r6, #328	; 0x148
    2b54:	f7ff ba5d 	b.w	2012 <ull_conn_llcp+0x44a>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2b58:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    2b5c:	4594      	cmp	ip, r2
    2b5e:	f47f a8d1 	bne.w	1d04 <ull_conn_llcp+0x13c>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2b62:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    2b66:	fb0c fe03 	mul.w	lr, ip, r3
    2b6a:	f242 7c10 	movw	ip, #10000	; 0x2710
    2b6e:	fb0c ec01 	mla	ip, ip, r1, lr
    2b72:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    2b76:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2b7a:	f8b4 e0a6 	ldrh.w	lr, [r4, #166]	; 0xa6
    2b7e:	fa1f fc8c 	uxth.w	ip, ip
    2b82:	45e6      	cmp	lr, ip
    2b84:	f47f a8be 	bne.w	1d04 <ull_conn_llcp+0x13c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2b88:	2301      	movs	r3, #1
    2b8a:	f888 3004 	strb.w	r3, [r8, #4]
    2b8e:	f7ff b8c9 	b.w	1d24 <ull_conn_llcp+0x15c>
		LL_ASSERT(rx && rx->hdr.link);
    2b92:	4a0e      	ldr	r2, [pc, #56]	; (2bcc <ull_conn_llcp+0x1004>)
    2b94:	4911      	ldr	r1, [pc, #68]	; (2bdc <ull_conn_llcp+0x1014>)
    2b96:	480f      	ldr	r0, [pc, #60]	; (2bd4 <ull_conn_llcp+0x100c>)
    2b98:	f241 231a 	movw	r3, #4634	; 0x121a
    2b9c:	f022 f82e 	bl	24bfc <printk>
    2ba0:	4040      	eors	r0, r0
    2ba2:	f380 8811 	msr	BASEPRI, r0
    2ba6:	f04f 0003 	mov.w	r0, #3
    2baa:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2bac:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2bae:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    2bb2:	f7ff ba43 	b.w	203c <ull_conn_llcp+0x474>
    2bb6:	bf00      	nop
    2bb8:	1afd498d 	.word	0x1afd498d
    2bbc:	00000007 	.word	0x00000007
    2bc0:	200034fc 	.word	0x200034fc
    2bc4:	20003590 	.word	0x20003590
    2bc8:	20000710 	.word	0x20000710
    2bcc:	0002d7e8 	.word	0x0002d7e8
    2bd0:	0002d6f8 	.word	0x0002d6f8
    2bd4:	0002d27c 	.word	0x0002d27c
    2bd8:	3b9aca00 	.word	0x3b9aca00
    2bdc:	0002d8c8 	.word	0x0002d8c8
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2be0:	48cd      	ldr	r0, [pc, #820]	; (2f18 <ull_conn_llcp+0x1350>)
    2be2:	f010 fbef 	bl	133c4 <mem_acquire>
	if (tx) {
    2be6:	4680      	mov	r8, r0
    2be8:	2800      	cmp	r0, #0
    2bea:	f43f abbe 	beq.w	236a <ull_conn_llcp+0x7a2>
		conn->llcp_feature.ack--;
    2bee:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
    2bf2:	3b01      	subs	r3, #1
    2bf4:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2bf8:	2309      	movs	r3, #9
    2bfa:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    2bfc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2c00:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2c02:	7903      	ldrb	r3, [r0, #4]
    2c04:	f043 0303 	orr.w	r3, r3, #3
    2c08:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2c0a:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    2c0e:	bfac      	ite	ge
    2c10:	2308      	movge	r3, #8
    2c12:	230e      	movlt	r3, #14
    2c14:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2c16:	4639      	mov	r1, r7
    2c18:	4410      	add	r0, r2
    2c1a:	f025 fcd7 	bl	285cc <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    2c1e:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
	sys_put_le16(val >> 16, &dst[2]);
    2c22:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    2c24:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    2c28:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2c2c:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    2c30:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    2c32:	f888 300c 	strb.w	r3, [r8, #12]
    2c36:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    2c3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    2c3e:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    2c42:	0a09      	lsrs	r1, r1, #8
    2c44:	0a12      	lsrs	r2, r2, #8
    2c46:	f888 100b 	strb.w	r1, [r8, #11]
    2c4a:	f888 300d 	strb.w	r3, [r8, #13]
    2c4e:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    2c52:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2c56:	2b00      	cmp	r3, #0
    2c58:	f000 8084 	beq.w	2d64 <ull_conn_llcp+0x119c>
	    !conn->llcp_enc.pause_tx &&
    2c5c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2c60:	0792      	lsls	r2, r2, #30
    2c62:	d47f      	bmi.n	2d64 <ull_conn_llcp+0x119c>
	    !conn->llcp_phy.pause_tx &&
    2c64:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2c68:	07d7      	lsls	r7, r2, #31
    2c6a:	d47b      	bmi.n	2d64 <ull_conn_llcp+0x119c>
		if (conn->tx_head == conn->tx_data) {
    2c6c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2c70:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2c74:	428b      	cmp	r3, r1
    2c76:	f000 826a 	beq.w	314e <ull_conn_llcp+0x1586>
		} else if (!conn->tx_ctrl) {
    2c7a:	2a00      	cmp	r2, #0
    2c7c:	f000 836e 	beq.w	335c <ull_conn_llcp+0x1794>
	tx->next = conn->tx_ctrl_last->next;
    2c80:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2c84:	681a      	ldr	r2, [r3, #0]
    2c86:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    2c8a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    2c8e:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    2c92:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2c96:	2b00      	cmp	r3, #0
    2c98:	f000 81b8 	beq.w	300c <ull_conn_llcp+0x1444>
		conn->procedure_expire = conn->procedure_reload;
    2c9c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2ca0:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2ca4:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		conn->procedure_expire = conn->procedure_reload;
    2ca8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	break;
    2cac:	f7fe bf98 	b.w	1be0 <ull_conn_llcp+0x18>
		LL_ASSERT(rx && rx->hdr.link);
    2cb0:	4a9a      	ldr	r2, [pc, #616]	; (2f1c <ull_conn_llcp+0x1354>)
    2cb2:	499b      	ldr	r1, [pc, #620]	; (2f20 <ull_conn_llcp+0x1358>)
    2cb4:	489b      	ldr	r0, [pc, #620]	; (2f24 <ull_conn_llcp+0x135c>)
    2cb6:	f241 2349 	movw	r3, #4681	; 0x1249
    2cba:	f021 ff9f 	bl	24bfc <printk>
    2cbe:	4040      	eors	r0, r0
    2cc0:	f380 8811 	msr	BASEPRI, r0
    2cc4:	f04f 0003 	mov.w	r0, #3
    2cc8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2cca:	6828      	ldr	r0, [r5, #0]
    2ccc:	f7ff b9e1 	b.w	2092 <ull_conn_llcp+0x4ca>
		conn->tx_data_last = tx;
    2cd0:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2cd4:	f7ff ba44 	b.w	2160 <ull_conn_llcp+0x598>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2cd8:	2201      	movs	r2, #1
    2cda:	4610      	mov	r0, r2
    2cdc:	2102      	movs	r1, #2
    2cde:	f010 fc17 	bl	13510 <mayfly_enable>
				return -ECANCELED;
    2ce2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2ce6:	f7fe bf8c 	b.w	1c02 <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    2cea:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2cee:	2a00      	cmp	r2, #0
    2cf0:	f47f abdd 	bne.w	24ae <ull_conn_llcp+0x8e6>
			tx->next = conn->tx_head;
    2cf4:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2cf6:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2cfa:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2cfe:	f7ff bbde 	b.w	24be <ull_conn_llcp+0x8f6>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2d02:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    2d06:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
    2d0a:	429a      	cmp	r2, r3
    2d0c:	d055      	beq.n	2dba <ull_conn_llcp+0x11f2>
			event_len_prep(conn);
    2d0e:	f015 fb29 	bl	18364 <event_len_prep>
    2d12:	f7ff bb2a 	b.w	236a <ull_conn_llcp+0x7a2>
			LL_ASSERT(0);
    2d16:	4a81      	ldr	r2, [pc, #516]	; (2f1c <ull_conn_llcp+0x1354>)
    2d18:	4983      	ldr	r1, [pc, #524]	; (2f28 <ull_conn_llcp+0x1360>)
    2d1a:	4882      	ldr	r0, [pc, #520]	; (2f24 <ull_conn_llcp+0x135c>)
    2d1c:	f640 439c 	movw	r3, #3228	; 0xc9c
    2d20:	f021 ff6c 	bl	24bfc <printk>
    2d24:	4040      	eors	r0, r0
    2d26:	f380 8811 	msr	BASEPRI, r0
    2d2a:	f04f 0003 	mov.w	r0, #3
    2d2e:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2d30:	2700      	movs	r7, #0
		lll->interval = conn->llcp_cu.interval;
    2d32:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    2d36:	f7ff b842 	b.w	1dbe <ull_conn_llcp+0x1f6>
		conn->tx_data_last = tx;
    2d3a:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2d3e:	f7ff ba97 	b.w	2270 <ull_conn_llcp+0x6a8>
			conn->tx_data = conn->tx_data->next;
    2d42:	681a      	ldr	r2, [r3, #0]
    2d44:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2d48:	2900      	cmp	r1, #0
    2d4a:	f47f a907 	bne.w	1f5c <ull_conn_llcp+0x394>
			tx->next = conn->tx_head->next;
    2d4e:	681a      	ldr	r2, [r3, #0]
    2d50:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2d52:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2d54:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2d56:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	f47f a909 	bne.w	1f72 <ull_conn_llcp+0x3aa>
    2d60:	f7ff bb0c 	b.w	237c <ull_conn_llcp+0x7b4>
		if (!conn->tx_ctrl) {
    2d64:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2d68:	2a00      	cmp	r2, #0
    2d6a:	d189      	bne.n	2c80 <ull_conn_llcp+0x10b8>
			tx->next = conn->tx_head;
    2d6c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2d70:	e9c4 8867 	strd	r8, r8, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2d74:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
    2d78:	e78d      	b.n	2c96 <ull_conn_llcp+0x10ce>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2d7a:	4590      	cmp	r8, r2
    2d7c:	f47f a973 	bne.w	2066 <ull_conn_llcp+0x49e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2d80:	2301      	movs	r3, #1
    2d82:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2d84:	4629      	mov	r1, r5
    2d86:	f014 fa07 	bl	17198 <ll_rx_put>
				rx = conn->llcp_rx;
    2d8a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
				LL_ASSERT(rx && rx->hdr.link);
    2d8e:	2d00      	cmp	r5, #0
    2d90:	f000 829d 	beq.w	32ce <ull_conn_llcp+0x1706>
    2d94:	6828      	ldr	r0, [r5, #0]
    2d96:	2800      	cmp	r0, #0
    2d98:	f000 8299 	beq.w	32ce <ull_conn_llcp+0x1706>
				conn->llcp_rx = rx->hdr.link->mem;
    2d9c:	6842      	ldr	r2, [r0, #4]
    2d9e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2da2:	2301      	movs	r3, #1
    2da4:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2da6:	4629      	mov	r1, r5
    2da8:	f014 f9f6 	bl	17198 <ll_rx_put>
			ll_rx_sched();
    2dac:	f014 f9fe 	bl	171ac <ll_rx_sched>
			return;
    2db0:	f7fe bf1d 	b.w	1bee <ull_conn_llcp+0x26>
	conn->lll.enc_tx = 1;
    2db4:	f043 0310 	orr.w	r3, r3, #16
    2db8:	e521      	b.n	27fe <ull_conn_llcp+0xc36>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2dba:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    2dbe:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
    2dc2:	429a      	cmp	r2, r3
    2dc4:	f43e af13 	beq.w	1bee <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    2dc8:	f890 2196 	ldrb.w	r2, [r0, #406]	; 0x196
    2dcc:	f002 0103 	and.w	r1, r2, #3
    2dd0:	2903      	cmp	r1, #3
    2dd2:	f000 822a 	beq.w	322a <ull_conn_llcp+0x1662>
    2dd6:	2900      	cmp	r1, #0
    2dd8:	f47e af09 	bne.w	1bee <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2ddc:	484e      	ldr	r0, [pc, #312]	; (2f18 <ull_conn_llcp+0x1350>)
    2dde:	f010 faf1 	bl	133c4 <mem_acquire>
		if (!tx) {
    2de2:	4601      	mov	r1, r0
    2de4:	2800      	cmp	r0, #0
    2de6:	f43f aac0 	beq.w	236a <ull_conn_llcp+0x7a2>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2dea:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2dee:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2df2:	2201      	movs	r2, #1
    2df4:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2df8:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2dfc:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2e00:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2e04:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2e08:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
    2e0c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e10:	f360 07c3 	bfi	r7, r0, #3, #1
    2e14:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2e18:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2e1c:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2e1e:	f367 02c5 	bfi	r2, r7, #3, #3
    2e22:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2e26:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    2e2a:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2e2c:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    2e30:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2e32:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2e34:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    2e36:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2e38:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2e3a:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2e3c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2e3e:	4620      	mov	r0, r4
    2e40:	f014 ff9a 	bl	17d78 <ctrl_tx_pause_enqueue>
    2e44:	e72a      	b.n	2c9c <ull_conn_llcp+0x10d4>
		if (!conn->tx_ctrl) {
    2e46:	2b00      	cmp	r3, #0
    2e48:	f47f ac41 	bne.w	26ce <ull_conn_llcp+0xb06>
			tx->next = conn->tx_head;
    2e4c:	f845 1c09 	str.w	r1, [r5, #-9]
				conn->tx_ctrl = tx;
    2e50:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2e54:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2e58:	2900      	cmp	r1, #0
    2e5a:	f47e aec8 	bne.w	1bee <ull_conn_llcp+0x26>
    2e5e:	e47d      	b.n	275c <ull_conn_llcp+0xb94>
		if (!conn->tx_ctrl) {
    2e60:	2900      	cmp	r1, #0
    2e62:	f47f ac6e 	bne.w	2742 <ull_conn_llcp+0xb7a>
			tx->next = conn->tx_head;
    2e66:	f845 3c09 	str.w	r3, [r5, #-9]
				conn->tx_ctrl = tx;
    2e6a:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2e6e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    2e72:	e470      	b.n	2756 <ull_conn_llcp+0xb8e>
		conn_upd_curr = conn;
    2e74:	601c      	str	r4, [r3, #0]
    2e76:	f7ff bba2 	b.w	25be <ull_conn_llcp+0x9f6>
		LL_ASSERT(0);
    2e7a:	4a28      	ldr	r2, [pc, #160]	; (2f1c <ull_conn_llcp+0x1354>)
    2e7c:	492a      	ldr	r1, [pc, #168]	; (2f28 <ull_conn_llcp+0x1360>)
    2e7e:	f640 63a1 	movw	r3, #3745	; 0xea1
    2e82:	e62d      	b.n	2ae0 <ull_conn_llcp+0xf18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2e84:	4824      	ldr	r0, [pc, #144]	; (2f18 <ull_conn_llcp+0x1350>)
    2e86:	f010 fa9d 	bl	133c4 <mem_acquire>
		if (tx) {
    2e8a:	2800      	cmp	r0, #0
    2e8c:	f43f aa6d 	beq.w	236a <ull_conn_llcp+0x7a2>
			conn->llcp_version.ack--;
    2e90:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
    2e94:	3b01      	subs	r3, #1
    2e96:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->llcp_version.tx = 1U;
    2e9a:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    2e9e:	f043 0301 	orr.w	r3, r3, #1
    2ea2:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2ea6:	7903      	ldrb	r3, [r0, #4]
    2ea8:	f043 0303 	orr.w	r3, r3, #3
    2eac:	7103      	strb	r3, [r0, #4]
			pdu->len =
    2eae:	2306      	movs	r3, #6
    2eb0:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    2eb2:	230c      	movs	r3, #12
    2eb4:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    2eb6:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2eb8:	f06f 030e 	mvn.w	r3, #14
    2ebc:	7243      	strb	r3, [r0, #9]
    2ebe:	2305      	movs	r3, #5
    2ec0:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ec6:	72c3      	strb	r3, [r0, #11]
    2ec8:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    2eca:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2ece:	2b00      	cmp	r3, #0
    2ed0:	f000 80ad 	beq.w	302e <ull_conn_llcp+0x1466>
	    !conn->llcp_enc.pause_tx &&
    2ed4:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2ed8:	0792      	lsls	r2, r2, #30
    2eda:	f100 80a8 	bmi.w	302e <ull_conn_llcp+0x1466>
	    !conn->llcp_phy.pause_tx &&
    2ede:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2ee2:	07d7      	lsls	r7, r2, #31
    2ee4:	f100 80a3 	bmi.w	302e <ull_conn_llcp+0x1466>
		if (conn->tx_head == conn->tx_data) {
    2ee8:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2eec:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2eee:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2ef2:	f000 8227 	beq.w	3344 <ull_conn_llcp+0x177c>
		} else if (!conn->tx_ctrl) {
    2ef6:	2a00      	cmp	r2, #0
    2ef8:	f000 8334 	beq.w	3564 <ull_conn_llcp+0x199c>
	tx->next = conn->tx_ctrl_last->next;
    2efc:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2f00:	681a      	ldr	r2, [r3, #0]
    2f02:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2f04:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2f06:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2f0a:	6803      	ldr	r3, [r0, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	f47f aec5 	bne.w	2c9c <ull_conn_llcp+0x10d4>
		conn->tx_data_last = tx;
    2f12:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
			conn->procedure_expire = conn->procedure_reload;
    2f16:	e6c1      	b.n	2c9c <ull_conn_llcp+0x10d4>
    2f18:	20003590 	.word	0x20003590
    2f1c:	0002d7e8 	.word	0x0002d7e8
    2f20:	0002d8c8 	.word	0x0002d8c8
    2f24:	0002d27c 	.word	0x0002d27c
    2f28:	0002d314 	.word	0x0002d314
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f2c:	7903      	ldrb	r3, [r0, #4]
    2f2e:	f043 0303 	orr.w	r3, r3, #3
    2f32:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2f34:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    2f38:	07da      	lsls	r2, r3, #31
    2f3a:	d545      	bpl.n	2fc8 <ull_conn_llcp+0x1400>
	    (conn->llcp_feature.features_conn &
    2f3c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	if (conn->common.fex_valid &&
    2f40:	075b      	lsls	r3, r3, #29
    2f42:	d541      	bpl.n	2fc8 <ull_conn_llcp+0x1400>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2f44:	2311      	movs	r3, #17
    2f46:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2f48:	2303      	movs	r3, #3
    2f4a:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    2f4c:	7245      	strb	r5, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    2f4e:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    2f50:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	conn->llcp.encryption.error_code = 0U;
    2f54:	2200      	movs	r2, #0
    2f56:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
	if (
    2f5a:	b35b      	cbz	r3, 2fb4 <ull_conn_llcp+0x13ec>
	    !conn->llcp_enc.pause_tx &&
    2f5c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2f60:	0797      	lsls	r7, r2, #30
    2f62:	d427      	bmi.n	2fb4 <ull_conn_llcp+0x13ec>
	    !conn->llcp_phy.pause_tx &&
    2f64:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2f68:	07d5      	lsls	r5, r2, #31
    2f6a:	d423      	bmi.n	2fb4 <ull_conn_llcp+0x13ec>
		if (conn->tx_head == conn->tx_data) {
    2f6c:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2f70:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2f72:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2f76:	f000 8139 	beq.w	31ec <ull_conn_llcp+0x1624>
		} else if (!conn->tx_ctrl) {
    2f7a:	2a00      	cmp	r2, #0
    2f7c:	f000 821f 	beq.w	33be <ull_conn_llcp+0x17f6>
	tx->next = conn->tx_ctrl_last->next;
    2f80:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2f84:	681a      	ldr	r2, [r3, #0]
    2f86:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2f88:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2f8a:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2f8e:	6833      	ldr	r3, [r6, #0]
    2f90:	2b00      	cmp	r3, #0
    2f92:	d076      	beq.n	3082 <ull_conn_llcp+0x14ba>
			conn->llcp_ack = conn->llcp_req;
    2f94:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    2f98:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			return;
    2f9c:	f7fe be27 	b.w	1bee <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
    2fa0:	2900      	cmp	r1, #0
    2fa2:	f47f aae8 	bne.w	2576 <ull_conn_llcp+0x9ae>
			tx->next = conn->tx_head;
    2fa6:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    2fa8:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2fac:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
    2fb0:	f7ff bae8 	b.w	2584 <ull_conn_llcp+0x9bc>
		if (!conn->tx_ctrl) {
    2fb4:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2fb8:	2a00      	cmp	r2, #0
    2fba:	d1e1      	bne.n	2f80 <ull_conn_llcp+0x13b8>
			tx->next = conn->tx_head;
    2fbc:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2fbe:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2fc2:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2fc6:	e7e2      	b.n	2f8e <ull_conn_llcp+0x13c6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2fc8:	230d      	movs	r3, #13
    2fca:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2fcc:	7235      	strb	r5, [r6, #8]
    2fce:	2702      	movs	r7, #2
    2fd0:	e7bd      	b.n	2f4e <ull_conn_llcp+0x1386>
	switch (conn->llcp_conn_param.state) {
    2fd2:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    2fd6:	f002 020f 	and.w	r2, r2, #15
    2fda:	2a08      	cmp	r2, #8
    2fdc:	f200 834b 	bhi.w	3676 <ull_conn_llcp+0x1aae>
    2fe0:	a001      	add	r0, pc, #4	; (adr r0, 2fe8 <ull_conn_llcp+0x1420>)
    2fe2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2fe6:	bf00      	nop
    2fe8:	00002a31 	.word	0x00002a31
    2fec:	000029a9 	.word	0x000029a9
    2ff0:	00002959 	.word	0x00002959
    2ff4:	00001bef 	.word	0x00001bef
    2ff8:	00001bef 	.word	0x00001bef
    2ffc:	00001bef 	.word	0x00001bef
    3000:	00001bef 	.word	0x00001bef
    3004:	00001bef 	.word	0x00001bef
    3008:	000028ed 	.word	0x000028ed
		conn->tx_data_last = tx;
    300c:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
		conn->procedure_expire = conn->procedure_reload;
    3010:	e644      	b.n	2c9c <ull_conn_llcp+0x10d4>
			conn->tx_data = conn->tx_data->next;
    3012:	6819      	ldr	r1, [r3, #0]
    3014:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3018:	2a00      	cmp	r2, #0
    301a:	f47f a896 	bne.w	214a <ull_conn_llcp+0x582>
			tx->next = conn->tx_head->next;
    301e:	681a      	ldr	r2, [r3, #0]
    3020:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    3022:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    3024:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    3026:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    302a:	f7ff b896 	b.w	215a <ull_conn_llcp+0x592>
		if (!conn->tx_ctrl) {
    302e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    3032:	2a00      	cmp	r2, #0
    3034:	f47f af62 	bne.w	2efc <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head;
    3038:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    303a:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    303e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    3042:	e762      	b.n	2f0a <ull_conn_llcp+0x1342>
							 lll->latency +
    3044:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    3046:	3206      	adds	r2, #6
    3048:	442a      	add	r2, r5
			conn->llcp.phy_upd_ind.instant = event_counter +
    304a:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
			(void)ll_pdu_rx_alloc();
    304e:	f014 f8d1 	bl	171f4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    3052:	f8d8 3000 	ldr.w	r3, [r8]
    3056:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    305a:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    305c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
				rx = ll_pdu_rx_alloc();
    3060:	f014 f8c8 	bl	171f4 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    3064:	6803      	ldr	r3, [r0, #0]
    3066:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    306a:	6059      	str	r1, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    306c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    3070:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
				conn->llcp_rx = rx;
    3074:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    3078:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    307c:	095b      	lsrs	r3, r3, #5
    307e:	f7ff ba56 	b.w	252e <ull_conn_llcp+0x966>
		conn->tx_data_last = tx;
    3082:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    3086:	e785      	b.n	2f94 <ull_conn_llcp+0x13cc>
	    ((pdu_data_tx->llctrl.opcode !=
    3088:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    308a:	2a03      	cmp	r2, #3
    308c:	f43f ae5f 	beq.w	2d4e <ull_conn_llcp+0x1186>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3090:	2a0a      	cmp	r2, #10
    3092:	f47e af5d 	bne.w	1f50 <ull_conn_llcp+0x388>
    3096:	e65a      	b.n	2d4e <ull_conn_llcp+0x1186>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    3098:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
    309a:	4629      	mov	r1, r5
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    309c:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    309e:	f014 f87b 	bl	17198 <ll_rx_put>
			ll_rx_sched();
    30a2:	f014 f883 	bl	171ac <ll_rx_sched>
			return;
    30a6:	f7fe bda2 	b.w	1bee <ull_conn_llcp+0x26>
				(void)ll_pdu_rx_alloc();
    30aa:	f014 f8a3 	bl	171f4 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    30ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    30b0:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    30b4:	231c      	movs	r3, #28
				upd->status = 0U;
    30b6:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    30ba:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    30be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
				ll_rx_put(rx->hdr.link, rx);
    30c2:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    30c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    30ca:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    30ce:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    30d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    30d6:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    30da:	4641      	mov	r1, r8
    30dc:	f014 f85c 	bl	17198 <ll_rx_put>
				ll_rx_sched();
    30e0:	f014 f864 	bl	171ac <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    30e4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    30e8:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    30ec:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    30f0:	095b      	lsrs	r3, r3, #5
    30f2:	f7ff ba1c 	b.w	252e <ull_conn_llcp+0x966>
		if (!conn->tx_ctrl) {
    30f6:	2d00      	cmp	r5, #0
    30f8:	f47f ac20 	bne.w	293c <ull_conn_llcp+0xd74>
			tx->next = conn->tx_head;
    30fc:	f840 1c13 	str.w	r1, [r0, #-19]
				conn->tx_ctrl = tx;
    3100:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3104:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    3108:	e420      	b.n	294c <ull_conn_llcp+0xd84>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    310a:	791a      	ldrb	r2, [r3, #4]
    310c:	f002 0203 	and.w	r2, r2, #3
    3110:	2a03      	cmp	r2, #3
    3112:	f000 80eb 	beq.w	32ec <ull_conn_llcp+0x1724>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3116:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    311a:	f7ff b816 	b.w	214a <ull_conn_llcp+0x582>
			conn->tx_data = conn->tx_data->next;
    311e:	6819      	ldr	r1, [r3, #0]
    3120:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3124:	2a00      	cmp	r2, #0
    3126:	f47f a9c2 	bne.w	24ae <ull_conn_llcp+0x8e6>
			tx->next = conn->tx_head->next;
    312a:	681a      	ldr	r2, [r3, #0]
    312c:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    312e:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    3130:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    3132:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    3136:	f7ff b9c2 	b.w	24be <ull_conn_llcp+0x8f6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    313a:	791a      	ldrb	r2, [r3, #4]
    313c:	f002 0203 	and.w	r2, r2, #3
    3140:	2a03      	cmp	r2, #3
    3142:	f000 8114 	beq.w	336e <ull_conn_llcp+0x17a6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3146:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    314a:	f7ff b886 	b.w	225a <ull_conn_llcp+0x692>
			conn->tx_data = conn->tx_data->next;
    314e:	6819      	ldr	r1, [r3, #0]
    3150:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3154:	2a00      	cmp	r2, #0
    3156:	f47f ad93 	bne.w	2c80 <ull_conn_llcp+0x10b8>
			tx->next = conn->tx_head->next;
    315a:	681a      	ldr	r2, [r3, #0]
    315c:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    3160:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    3164:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    3168:	e9c4 8868 	strd	r8, r8, [r4, #416]	; 0x1a0
    316c:	e593      	b.n	2c96 <ull_conn_llcp+0x10ce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    316e:	489a      	ldr	r0, [pc, #616]	; (33d8 <ull_conn_llcp+0x1810>)
    3170:	f010 f928 	bl	133c4 <mem_acquire>
		if (!tx) {
    3174:	2800      	cmp	r0, #0
    3176:	f43f a8f8 	beq.w	236a <ull_conn_llcp+0x7a2>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    317a:	7902      	ldrb	r2, [r0, #4]
    317c:	f042 0203 	orr.w	r2, r2, #3
    3180:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    3182:	2211      	movs	r2, #17
    3184:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    3186:	2203      	movs	r2, #3
    3188:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    318a:	220f      	movs	r2, #15
    318c:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    318e:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
    3192:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    3194:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    3198:	2a00      	cmp	r2, #0
    319a:	f000 80f1 	beq.w	3380 <ull_conn_llcp+0x17b8>
	    !conn->llcp_enc.pause_tx &&
    319e:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    31a2:	0789      	lsls	r1, r1, #30
    31a4:	f100 80ec 	bmi.w	3380 <ull_conn_llcp+0x17b8>
	    !conn->llcp_phy.pause_tx &&
    31a8:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    31ac:	07cb      	lsls	r3, r1, #31
    31ae:	f100 80e7 	bmi.w	3380 <ull_conn_llcp+0x17b8>
		if (conn->tx_head == conn->tx_data) {
    31b2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    31b6:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    31b8:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    31bc:	f000 81f1 	beq.w	35a2 <ull_conn_llcp+0x19da>
		} else if (!conn->tx_ctrl) {
    31c0:	2900      	cmp	r1, #0
    31c2:	f000 81fd 	beq.w	35c0 <ull_conn_llcp+0x19f8>
	tx->next = conn->tx_ctrl_last->next;
    31c6:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    31ca:	6811      	ldr	r1, [r2, #0]
    31cc:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    31ce:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    31d0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    31d4:	6802      	ldr	r2, [r0, #0]
    31d6:	2a00      	cmp	r2, #0
    31d8:	f000 81ef 	beq.w	35ba <ull_conn_llcp+0x19f2>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    31dc:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    31e0:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    31e4:	2300      	movs	r3, #0
    31e6:	603b      	str	r3, [r7, #0]
		return;
    31e8:	f7ff b8bf 	b.w	236a <ull_conn_llcp+0x7a2>
			conn->tx_data = conn->tx_data->next;
    31ec:	6819      	ldr	r1, [r3, #0]
    31ee:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    31f2:	2a00      	cmp	r2, #0
    31f4:	f47f aec4 	bne.w	2f80 <ull_conn_llcp+0x13b8>
			tx->next = conn->tx_head->next;
    31f8:	681a      	ldr	r2, [r3, #0]
    31fa:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    31fc:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    31fe:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    3202:	e6c4      	b.n	2f8e <ull_conn_llcp+0x13c6>
			conn->tx_data = conn->tx_data->next;
    3204:	6808      	ldr	r0, [r1, #0]
    3206:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    320a:	2b00      	cmp	r3, #0
    320c:	f47f aa5f 	bne.w	26ce <ull_conn_llcp+0xb06>
			tx->next = conn->tx_head->next;
    3210:	680b      	ldr	r3, [r1, #0]
    3212:	f845 3c09 	str.w	r3, [r5, #-9]
			conn->tx_head->next = tx;
    3216:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
    3218:	f855 1c09 	ldr.w	r1, [r5, #-9]
				conn->tx_ctrl_last = tx;
    321c:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
	if (!tx->next) {
    3220:	2900      	cmp	r1, #0
    3222:	f47e ace4 	bne.w	1bee <ull_conn_llcp+0x26>
    3226:	f7ff ba99 	b.w	275c <ull_conn_llcp+0xb94>
		if (conn->llcp_phy.tx & PHY_2M) {
    322a:	0717      	lsls	r7, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    322c:	f880 3195 	strb.w	r3, [r0, #405]	; 0x195
		if (conn->llcp_phy.tx & PHY_2M) {
    3230:	f3c2 0382 	ubfx	r3, r2, #2, #3
    3234:	f140 814f 	bpl.w	34d6 <ull_conn_llcp+0x190e>
			conn->llcp_phy.tx = PHY_2M;
    3238:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    323c:	2202      	movs	r2, #2
    323e:	f362 0384 	bfi	r3, r2, #2, #3
    3242:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		if (conn->llcp_phy.rx & PHY_2M) {
    3246:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    324a:	0659      	lsls	r1, r3, #25
    324c:	ea4f 1253 	mov.w	r2, r3, lsr #5
    3250:	f140 8139 	bpl.w	34c6 <ull_conn_llcp+0x18fe>
			conn->llcp_phy.rx = PHY_2M;
    3254:	2202      	movs	r2, #2
    3256:	f362 1347 	bfi	r3, r2, #5, #3
    325a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    325e:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    3262:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3266:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    326a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    326e:	f3c2 0182 	ubfx	r1, r2, #2, #3
    3272:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3276:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    327a:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    327e:	428f      	cmp	r7, r1
    3280:	bf08      	it	eq
    3282:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3284:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    3286:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    328a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    328e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    3292:	bf08      	it	eq
    3294:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3296:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    329a:	f1ae 0c02 	sub.w	ip, lr, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    329e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    32a2:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    32a4:	f884 c0bc 	strb.w	ip, [r4, #188]	; 0xbc
		conn->llcp.phy_upd_ind.initiate = 1U;
    32a8:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
    32ac:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    32b0:	f7fe bcb7 	b.w	1c22 <ull_conn_llcp+0x5a>
			conn->tx_data = conn->tx_data->next;
    32b4:	681a      	ldr	r2, [r3, #0]
    32b6:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    32ba:	2900      	cmp	r1, #0
    32bc:	f47f a95b 	bne.w	2576 <ull_conn_llcp+0x9ae>
			tx->next = conn->tx_head->next;
    32c0:	681a      	ldr	r2, [r3, #0]
    32c2:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    32c4:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    32c6:	e9c4 7768 	strd	r7, r7, [r4, #416]	; 0x1a0
    32ca:	f7ff b95b 	b.w	2584 <ull_conn_llcp+0x9bc>
				LL_ASSERT(rx && rx->hdr.link);
    32ce:	4a43      	ldr	r2, [pc, #268]	; (33dc <ull_conn_llcp+0x1814>)
    32d0:	4943      	ldr	r1, [pc, #268]	; (33e0 <ull_conn_llcp+0x1818>)
    32d2:	4844      	ldr	r0, [pc, #272]	; (33e4 <ull_conn_llcp+0x181c>)
    32d4:	f241 232c 	movw	r3, #4652	; 0x122c
    32d8:	f021 fc90 	bl	24bfc <printk>
    32dc:	4040      	eors	r0, r0
    32de:	f380 8811 	msr	BASEPRI, r0
    32e2:	f04f 0003 	mov.w	r0, #3
    32e6:	df02      	svc	2
    32e8:	6828      	ldr	r0, [r5, #0]
    32ea:	e557      	b.n	2d9c <ull_conn_llcp+0x11d4>
	    ((pdu_data_tx->llctrl.opcode !=
    32ec:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    32ee:	2a03      	cmp	r2, #3
    32f0:	f43f ae95 	beq.w	301e <ull_conn_llcp+0x1456>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    32f4:	2a0a      	cmp	r2, #10
    32f6:	f47f af0e 	bne.w	3116 <ull_conn_llcp+0x154e>
    32fa:	e690      	b.n	301e <ull_conn_llcp+0x1456>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    32fc:	791a      	ldrb	r2, [r3, #4]
    32fe:	f002 0203 	and.w	r2, r2, #3
    3302:	2a03      	cmp	r2, #3
    3304:	f000 80d7 	beq.w	34b6 <ull_conn_llcp+0x18ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3308:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    330c:	f7ff b8cf 	b.w	24ae <ull_conn_llcp+0x8e6>
			conn->tx_data = conn->tx_data->next;
    3310:	6818      	ldr	r0, [r3, #0]
    3312:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3316:	2900      	cmp	r1, #0
    3318:	f47f aa13 	bne.w	2742 <ull_conn_llcp+0xb7a>
			tx->next = conn->tx_head->next;
    331c:	6819      	ldr	r1, [r3, #0]
    331e:	f845 1c09 	str.w	r1, [r5, #-9]
			conn->tx_head->next = tx;
    3322:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    3324:	f855 3c09 	ldr.w	r3, [r5, #-9]
				conn->tx_ctrl_last = tx;
    3328:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    332c:	f7ff ba13 	b.w	2756 <ull_conn_llcp+0xb8e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3330:	791a      	ldrb	r2, [r3, #4]
    3332:	f002 0203 	and.w	r2, r2, #3
    3336:	2a03      	cmp	r2, #3
    3338:	f000 811c 	beq.w	3574 <ull_conn_llcp+0x19ac>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    333c:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3340:	f7ff b919 	b.w	2576 <ull_conn_llcp+0x9ae>
			conn->tx_data = conn->tx_data->next;
    3344:	6819      	ldr	r1, [r3, #0]
    3346:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    334a:	2a00      	cmp	r2, #0
    334c:	f47f add6 	bne.w	2efc <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head->next;
    3350:	681a      	ldr	r2, [r3, #0]
    3352:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    3354:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    3356:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    335a:	e5d6      	b.n	2f0a <ull_conn_llcp+0x1342>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    335c:	791a      	ldrb	r2, [r3, #4]
    335e:	f002 0203 	and.w	r2, r2, #3
    3362:	2a03      	cmp	r2, #3
    3364:	f000 8115 	beq.w	3592 <ull_conn_llcp+0x19ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3368:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    336c:	e488      	b.n	2c80 <ull_conn_llcp+0x10b8>
	    ((pdu_data_tx->llctrl.opcode !=
    336e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3370:	2a03      	cmp	r2, #3
    3372:	f43f aa66 	beq.w	2842 <ull_conn_llcp+0xc7a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3376:	2a0a      	cmp	r2, #10
    3378:	f47f aee5 	bne.w	3146 <ull_conn_llcp+0x157e>
    337c:	f7ff ba61 	b.w	2842 <ull_conn_llcp+0xc7a>
		if (!conn->tx_ctrl) {
    3380:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    3384:	2900      	cmp	r1, #0
    3386:	f47f af1e 	bne.w	31c6 <ull_conn_llcp+0x15fe>
			tx->next = conn->tx_head;
    338a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    338c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3390:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    3394:	e71e      	b.n	31d4 <ull_conn_llcp+0x160c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3396:	7919      	ldrb	r1, [r3, #4]
    3398:	f001 0103 	and.w	r1, r1, #3
    339c:	2903      	cmp	r1, #3
    339e:	f000 80d1 	beq.w	3544 <ull_conn_llcp+0x197c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    33a2:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    33a6:	f7ff b9cc 	b.w	2742 <ull_conn_llcp+0xb7a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33aa:	790b      	ldrb	r3, [r1, #4]
    33ac:	f003 0303 	and.w	r3, r3, #3
    33b0:	2b03      	cmp	r3, #3
    33b2:	f000 80cf 	beq.w	3554 <ull_conn_llcp+0x198c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    33b6:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    33ba:	f7ff b988 	b.w	26ce <ull_conn_llcp+0xb06>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33be:	791a      	ldrb	r2, [r3, #4]
    33c0:	f002 0203 	and.w	r2, r2, #3
    33c4:	2a03      	cmp	r2, #3
    33c6:	f000 810f 	beq.w	35e8 <ull_conn_llcp+0x1a20>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    33ca:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    33ce:	e5d7      	b.n	2f80 <ull_conn_llcp+0x13b8>
			conn->llcp_cu.interval = interval_max;
    33d0:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
    33d4:	f7ff bb11 	b.w	29fa <ull_conn_llcp+0xe32>
    33d8:	20003590 	.word	0x20003590
    33dc:	0002d7e8 	.word	0x0002d7e8
    33e0:	0002d8c8 	.word	0x0002d8c8
    33e4:	0002d27c 	.word	0x0002d27c
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    33e8:	48a6      	ldr	r0, [pc, #664]	; (3684 <ull_conn_llcp+0x1abc>)
    33ea:	f00f ffeb 	bl	133c4 <mem_acquire>
	if (!tx) {
    33ee:	2800      	cmp	r0, #0
    33f0:	f43e afbb 	beq.w	236a <ull_conn_llcp+0x7a2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    33f4:	7902      	ldrb	r2, [r0, #4]
    33f6:	f042 0203 	orr.w	r2, r2, #3
    33fa:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    33fc:	2218      	movs	r2, #24
    33fe:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    3400:	2210      	movs	r2, #16
    3402:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    3404:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
    3408:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    340a:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
    340e:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    3410:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    3414:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    3416:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    341a:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    341c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
    3420:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    3422:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
    3426:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    342a:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
    342e:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    3432:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
    3436:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    343a:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
    343e:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    3442:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
    3446:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    344a:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
    344e:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    3452:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
    3456:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    345a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    345e:	2a00      	cmp	r2, #0
    3460:	d043      	beq.n	34ea <ull_conn_llcp+0x1922>
	    !conn->llcp_enc.pause_tx &&
    3462:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3466:	0789      	lsls	r1, r1, #30
    3468:	d43f      	bmi.n	34ea <ull_conn_llcp+0x1922>
	    !conn->llcp_phy.pause_tx &&
    346a:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    346e:	07cb      	lsls	r3, r1, #31
    3470:	d43b      	bmi.n	34ea <ull_conn_llcp+0x1922>
		if (conn->tx_head == conn->tx_data) {
    3472:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    3476:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    3478:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    347c:	f000 80c2 	beq.w	3604 <ull_conn_llcp+0x1a3c>
		} else if (!conn->tx_ctrl) {
    3480:	2900      	cmp	r1, #0
    3482:	f000 80d2 	beq.w	362a <ull_conn_llcp+0x1a62>
	tx->next = conn->tx_ctrl_last->next;
    3486:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    348a:	6811      	ldr	r1, [r2, #0]
    348c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    348e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    3490:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    3494:	6802      	ldr	r2, [r0, #0]
    3496:	2a00      	cmp	r2, #0
    3498:	f000 80a3 	beq.w	35e2 <ull_conn_llcp+0x1a1a>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    349c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    34a0:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    34a4:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    34a8:	2205      	movs	r2, #5
    34aa:	f362 0303 	bfi	r3, r2, #0, #4
    34ae:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    34b2:	f7fe bb95 	b.w	1be0 <ull_conn_llcp+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
    34b6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    34b8:	2a03      	cmp	r2, #3
    34ba:	f43f ae36 	beq.w	312a <ull_conn_llcp+0x1562>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    34be:	2a0a      	cmp	r2, #10
    34c0:	f47f af22 	bne.w	3308 <ull_conn_llcp+0x1740>
    34c4:	e631      	b.n	312a <ull_conn_llcp+0x1562>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    34c6:	07d7      	lsls	r7, r2, #31
    34c8:	d519      	bpl.n	34fe <ull_conn_llcp+0x1936>
			conn->llcp_phy.rx = PHY_1M;
    34ca:	2201      	movs	r2, #1
    34cc:	f362 1347 	bfi	r3, r2, #5, #3
    34d0:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    34d4:	e6c3      	b.n	325e <ull_conn_llcp+0x1696>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    34d6:	07d8      	lsls	r0, r3, #31
    34d8:	d51a      	bpl.n	3510 <ull_conn_llcp+0x1948>
			conn->llcp_phy.tx = PHY_1M;
    34da:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    34de:	2201      	movs	r2, #1
    34e0:	f362 0384 	bfi	r3, r2, #2, #3
    34e4:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    34e8:	e6ad      	b.n	3246 <ull_conn_llcp+0x167e>
		if (!conn->tx_ctrl) {
    34ea:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    34ee:	2900      	cmp	r1, #0
    34f0:	d1c9      	bne.n	3486 <ull_conn_llcp+0x18be>
			tx->next = conn->tx_head;
    34f2:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    34f4:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    34f8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    34fc:	e7ca      	b.n	3494 <ull_conn_llcp+0x18cc>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    34fe:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    3502:	bf18      	it	ne
    3504:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    3506:	f362 1347 	bfi	r3, r2, #5, #3
    350a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    350e:	e6a6      	b.n	325e <ull_conn_llcp+0x1696>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    3510:	f013 0304 	ands.w	r3, r3, #4
    3514:	f000 8082 	beq.w	361c <ull_conn_llcp+0x1a54>
			conn->llcp_phy.tx = PHY_CODED;
    3518:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    351c:	2204      	movs	r2, #4
    351e:	f362 0384 	bfi	r3, r2, #2, #3
    3522:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    3526:	e68e      	b.n	3246 <ull_conn_llcp+0x167e>
			conn->tx_data = conn->tx_data->next;
    3528:	680b      	ldr	r3, [r1, #0]
    352a:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    352e:	2d00      	cmp	r5, #0
    3530:	f47f aa04 	bne.w	293c <ull_conn_llcp+0xd74>
			tx->next = conn->tx_head->next;
    3534:	680b      	ldr	r3, [r1, #0]
    3536:	f840 3c13 	str.w	r3, [r0, #-19]
			conn->tx_head->next = tx;
    353a:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
    353c:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    3540:	f7ff ba04 	b.w	294c <ull_conn_llcp+0xd84>
	    ((pdu_data_tx->llctrl.opcode !=
    3544:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3546:	2903      	cmp	r1, #3
    3548:	f43f aee8 	beq.w	331c <ull_conn_llcp+0x1754>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    354c:	290a      	cmp	r1, #10
    354e:	f47f af28 	bne.w	33a2 <ull_conn_llcp+0x17da>
    3552:	e6e3      	b.n	331c <ull_conn_llcp+0x1754>
	    ((pdu_data_tx->llctrl.opcode !=
    3554:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3556:	2b03      	cmp	r3, #3
    3558:	f43f ae5a 	beq.w	3210 <ull_conn_llcp+0x1648>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    355c:	2b0a      	cmp	r3, #10
    355e:	f47f af2a 	bne.w	33b6 <ull_conn_llcp+0x17ee>
    3562:	e655      	b.n	3210 <ull_conn_llcp+0x1648>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3564:	791a      	ldrb	r2, [r3, #4]
    3566:	f002 0203 	and.w	r2, r2, #3
    356a:	2a03      	cmp	r2, #3
    356c:	d00a      	beq.n	3584 <ull_conn_llcp+0x19bc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    356e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3572:	e4c3      	b.n	2efc <ull_conn_llcp+0x1334>
	    ((pdu_data_tx->llctrl.opcode !=
    3574:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3576:	2a03      	cmp	r2, #3
    3578:	f43f aea2 	beq.w	32c0 <ull_conn_llcp+0x16f8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    357c:	2a0a      	cmp	r2, #10
    357e:	f47f aedd 	bne.w	333c <ull_conn_llcp+0x1774>
    3582:	e69d      	b.n	32c0 <ull_conn_llcp+0x16f8>
	    ((pdu_data_tx->llctrl.opcode !=
    3584:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3586:	2a03      	cmp	r2, #3
    3588:	f43f aee2 	beq.w	3350 <ull_conn_llcp+0x1788>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    358c:	2a0a      	cmp	r2, #10
    358e:	d1ee      	bne.n	356e <ull_conn_llcp+0x19a6>
    3590:	e6de      	b.n	3350 <ull_conn_llcp+0x1788>
	    ((pdu_data_tx->llctrl.opcode !=
    3592:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3594:	2a03      	cmp	r2, #3
    3596:	f43f ade0 	beq.w	315a <ull_conn_llcp+0x1592>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    359a:	2a0a      	cmp	r2, #10
    359c:	f47f aee4 	bne.w	3368 <ull_conn_llcp+0x17a0>
    35a0:	e5db      	b.n	315a <ull_conn_llcp+0x1592>
			conn->tx_data = conn->tx_data->next;
    35a2:	6813      	ldr	r3, [r2, #0]
    35a4:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    35a8:	2900      	cmp	r1, #0
    35aa:	f47f ae0c 	bne.w	31c6 <ull_conn_llcp+0x15fe>
			tx->next = conn->tx_head->next;
    35ae:	6811      	ldr	r1, [r2, #0]
    35b0:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    35b2:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    35b4:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    35b8:	e60c      	b.n	31d4 <ull_conn_llcp+0x160c>
		conn->tx_data_last = tx;
    35ba:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    35be:	e60d      	b.n	31dc <ull_conn_llcp+0x1614>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    35c0:	7911      	ldrb	r1, [r2, #4]
    35c2:	f001 0103 	and.w	r1, r1, #3
    35c6:	2903      	cmp	r1, #3
    35c8:	d016      	beq.n	35f8 <ull_conn_llcp+0x1a30>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    35ca:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    35ce:	e5fa      	b.n	31c6 <ull_conn_llcp+0x15fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    35d0:	790b      	ldrb	r3, [r1, #4]
    35d2:	f003 0303 	and.w	r3, r3, #3
    35d6:	2b03      	cmp	r3, #3
    35d8:	d02f      	beq.n	363a <ull_conn_llcp+0x1a72>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    35da:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    35de:	f7ff b9ad 	b.w	293c <ull_conn_llcp+0xd74>
		conn->tx_data_last = tx;
    35e2:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    35e6:	e759      	b.n	349c <ull_conn_llcp+0x18d4>
	    ((pdu_data_tx->llctrl.opcode !=
    35e8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    35ea:	2a03      	cmp	r2, #3
    35ec:	f43f ae04 	beq.w	31f8 <ull_conn_llcp+0x1630>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    35f0:	2a0a      	cmp	r2, #10
    35f2:	f47f aeea 	bne.w	33ca <ull_conn_llcp+0x1802>
    35f6:	e5ff      	b.n	31f8 <ull_conn_llcp+0x1630>
	    ((pdu_data_tx->llctrl.opcode !=
    35f8:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    35fa:	2903      	cmp	r1, #3
    35fc:	d0d7      	beq.n	35ae <ull_conn_llcp+0x19e6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    35fe:	290a      	cmp	r1, #10
    3600:	d1e3      	bne.n	35ca <ull_conn_llcp+0x1a02>
    3602:	e7d4      	b.n	35ae <ull_conn_llcp+0x19e6>
			conn->tx_data = conn->tx_data->next;
    3604:	6813      	ldr	r3, [r2, #0]
    3606:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    360a:	2900      	cmp	r1, #0
    360c:	f47f af3b 	bne.w	3486 <ull_conn_llcp+0x18be>
			tx->next = conn->tx_head->next;
    3610:	6811      	ldr	r1, [r2, #0]
    3612:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    3614:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    3616:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    361a:	e73b      	b.n	3494 <ull_conn_llcp+0x18cc>
			conn->llcp_phy.tx = 0U;
    361c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    3620:	f363 0284 	bfi	r2, r3, #2, #3
    3624:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    3628:	e60d      	b.n	3246 <ull_conn_llcp+0x167e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    362a:	7911      	ldrb	r1, [r2, #4]
    362c:	f001 0103 	and.w	r1, r1, #3
    3630:	2903      	cmp	r1, #3
    3632:	d009      	beq.n	3648 <ull_conn_llcp+0x1a80>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3634:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    3638:	e725      	b.n	3486 <ull_conn_llcp+0x18be>
	    ((pdu_data_tx->llctrl.opcode !=
    363a:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    363c:	2b03      	cmp	r3, #3
    363e:	f43f af79 	beq.w	3534 <ull_conn_llcp+0x196c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3642:	2b0a      	cmp	r3, #10
    3644:	d1c9      	bne.n	35da <ull_conn_llcp+0x1a12>
    3646:	e775      	b.n	3534 <ull_conn_llcp+0x196c>
	    ((pdu_data_tx->llctrl.opcode !=
    3648:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    364a:	2903      	cmp	r1, #3
    364c:	d0e0      	beq.n	3610 <ull_conn_llcp+0x1a48>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    364e:	290a      	cmp	r1, #10
    3650:	d1f0      	bne.n	3634 <ull_conn_llcp+0x1a6c>
    3652:	e7dd      	b.n	3610 <ull_conn_llcp+0x1a48>
			LL_ASSERT(0);
    3654:	4a0c      	ldr	r2, [pc, #48]	; (3688 <ull_conn_llcp+0x1ac0>)
    3656:	490d      	ldr	r1, [pc, #52]	; (368c <ull_conn_llcp+0x1ac4>)
    3658:	480d      	ldr	r0, [pc, #52]	; (3690 <ull_conn_llcp+0x1ac8>)
    365a:	f640 33c7 	movw	r3, #3015	; 0xbc7
    365e:	f021 facd 	bl	24bfc <printk>
    3662:	4040      	eors	r0, r0
    3664:	f380 8811 	msr	BASEPRI, r0
    3668:	f04f 0003 	mov.w	r0, #3
    366c:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    366e:	f04f 0800 	mov.w	r8, #0
			break;
    3672:	f7fe bf91 	b.w	2598 <ull_conn_llcp+0x9d0>
		LL_ASSERT(0);
    3676:	4a04      	ldr	r2, [pc, #16]	; (3688 <ull_conn_llcp+0x1ac0>)
    3678:	4904      	ldr	r1, [pc, #16]	; (368c <ull_conn_llcp+0x1ac4>)
    367a:	f640 73e1 	movw	r3, #4065	; 0xfe1
    367e:	f7ff ba2f 	b.w	2ae0 <ull_conn_llcp+0xf18>
    3682:	bf00      	nop
    3684:	20003590 	.word	0x20003590
    3688:	0002d7e8 	.word	0x0002d7e8
    368c:	0002d314 	.word	0x0002d314
    3690:	0002d27c 	.word	0x0002d27c
    3694:	00000000 	.word	0x00000000

00003698 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    3698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    369c:	b08b      	sub	sp, #44	; 0x2c
    369e:	460f      	mov	r7, r1
    36a0:	9304      	str	r3, [sp, #16]
    36a2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    36a6:	9005      	str	r0, [sp, #20]
    36a8:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    36aa:	2000      	movs	r0, #0
{
    36ac:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    36b0:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    36b4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    36b8:	9303      	str	r3, [sp, #12]
    36ba:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    36bc:	f014 faea 	bl	17c94 <ull_scan_is_disabled_get>
	if (!scan) {
    36c0:	2800      	cmp	r0, #0
    36c2:	f000 8194 	beq.w	39ee <ll_create_connection+0x356>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    36c6:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    36ca:	4605      	mov	r5, r0
    36cc:	4650      	mov	r0, sl
    36ce:	f011 fa6b 	bl	14ba8 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    36d2:	f1ba 0f00 	cmp.w	sl, #0
    36d6:	d16a      	bne.n	37ae <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    36d8:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    36da:	f105 021c 	add.w	r2, r5, #28
    36de:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    36e0:	2b00      	cmp	r3, #0
    36e2:	d06b      	beq.n	37bc <ll_create_connection+0x124>
		conn_lll = lll->conn;
    36e4:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    36e8:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    36ec:	f898 002a 	ldrb.w	r0, [r8, #42]	; 0x2a
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    36f0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    36f4:	f000 0007 	and.w	r0, r0, #7
    36f8:	f019 faec 	bl	1ccd4 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    36fc:	f8b8 1026 	ldrh.w	r1, [r8, #38]	; 0x26
    3700:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    3704:	4401      	add	r1, r0
    3706:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
    370a:	4401      	add	r1, r0
    370c:	48c2      	ldr	r0, [pc, #776]	; (3a18 <ll_create_connection+0x380>)
    370e:	a3c0      	add	r3, pc, #768	; (adr r3, 3a10 <ll_create_connection+0x378>)
    3710:	e9d3 2300 	ldrd	r2, r3, [r3]
    3714:	fba1 0100 	umull	r0, r1, r1, r0
    3718:	f7fd fcf2 	bl	1100 <__aeabi_uldivmod>
    371c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    3720:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    3722:	4630      	mov	r0, r6
    3724:	f018 fb6a 	bl	1bdfc <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    3728:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    372c:	f36f 0341 	bfc	r3, #1, #1
    3730:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    3734:	23ff      	movs	r3, #255	; 0xff
    3736:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    373a:	b366      	cbz	r6, 3796 <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    373c:	f1a9 0302 	sub.w	r3, r9, #2
    3740:	2b01      	cmp	r3, #1
    3742:	f240 8158 	bls.w	39f6 <ll_create_connection+0x35e>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    3746:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    374a:	9a04      	ldr	r2, [sp, #16]
	scan->own_addr_type = own_addr_type;
    374c:	f369 0342 	bfi	r3, r9, #1, #2
    3750:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    3754:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3758:	f362 0300 	bfi	r3, r2, #0, #1
    375c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    3760:	9914      	ldr	r1, [sp, #80]	; 0x50
    3762:	2206      	movs	r2, #6
    3764:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3768:	f024 ff25 	bl	285b6 <memcpy>
	lll->conn_timeout = timeout;
    376c:	9b03      	ldr	r3, [sp, #12]
    376e:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    3770:	9a05      	ldr	r2, [sp, #20]
    3772:	9600      	str	r6, [sp, #0]
    3774:	463b      	mov	r3, r7
    3776:	f105 001c 	add.w	r0, r5, #28
    377a:	2100      	movs	r1, #0
    377c:	f7fe f944 	bl	1a08 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    3780:	f019 fc46 	bl	1d010 <lll_clock_wait>
	if (err) {
    3784:	2800      	cmp	r0, #0
    3786:	f040 8157 	bne.w	3a38 <ll_create_connection+0x3a0>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    378a:	4628      	mov	r0, r5
    378c:	f7fe f968 	bl	1a60 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    3790:	b00b      	add	sp, #44	; 0x2c
    3792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    3796:	f018 feeb 	bl	1c570 <ull_filter_lll_rl_enabled>
    379a:	2800      	cmp	r0, #0
    379c:	d0ce      	beq.n	373c <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    379e:	9914      	ldr	r1, [sp, #80]	; 0x50
    37a0:	9804      	ldr	r0, [sp, #16]
    37a2:	4632      	mov	r2, r6
    37a4:	f018 fc26 	bl	1bff4 <ull_filter_rl_find>
    37a8:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    37ac:	e7c6      	b.n	373c <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    37ae:	2106      	movs	r1, #6
    37b0:	f00f fe52 	bl	13458 <mem_nz>
    37b4:	2800      	cmp	r0, #0
    37b6:	d18f      	bne.n	36d8 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    37b8:	2012      	movs	r0, #18
    37ba:	e7e9      	b.n	3790 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    37bc:	f013 fce0 	bl	17180 <ll_rx_link_alloc>
	if (!link) {
    37c0:	9007      	str	r0, [sp, #28]
    37c2:	2800      	cmp	r0, #0
    37c4:	f000 816f 	beq.w	3aa6 <ll_create_connection+0x40e>
	conn = ll_conn_acquire();
    37c8:	f014 fec2 	bl	18550 <ll_conn_acquire>
	if (!conn) {
    37cc:	4604      	mov	r4, r0
    37ce:	2800      	cmp	r0, #0
    37d0:	f000 818b 	beq.w	3aea <ll_create_connection+0x452>
	err = util_aa_le32(conn_lll->access_addr);
    37d4:	3020      	adds	r0, #32
    37d6:	f00f ffdf 	bl	13798 <util_aa_le32>
	conn_lll = &conn->lll;
    37da:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    37de:	2800      	cmp	r0, #0
    37e0:	f040 8154 	bne.w	3a8c <ll_create_connection+0x3f4>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    37e4:	2103      	movs	r1, #3
    37e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    37ea:	f019 f935 	bl	1ca58 <lll_csrand_get>
	conn_lll->interval = interval;
    37ee:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    37f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
	conn_lll->interval = interval;
    37f2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    37f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    37f8:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    37fc:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    37fe:	2800      	cmp	r0, #0
    3800:	f000 8153 	beq.w	3aaa <ll_create_connection+0x412>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    3804:	f104 0148 	add.w	r1, r4, #72	; 0x48
    3808:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    380c:	f00f fe30 	bl	13470 <memq_init>
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    3810:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3812:	4a82      	ldr	r2, [pc, #520]	; (3a1c <ll_create_connection+0x384>)
    3814:	401a      	ands	r2, r3
	conn_lll->sn = 0;
    3816:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    381a:	f023 0307 	bic.w	r3, r3, #7
    381e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    3822:	4b7f      	ldr	r3, [pc, #508]	; (3a20 <ll_create_connection+0x388>)
    3824:	4313      	orrs	r3, r2
    3826:	6463      	str	r3, [r4, #68]	; 0x44
	conn_lll->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    3828:	4b7e      	ldr	r3, [pc, #504]	; (3a24 <ll_create_connection+0x38c>)
    382a:	6423      	str	r3, [r4, #64]	; 0x40
	conn_lll->link_tx_free = NULL;
    382c:	f04f 0b00 	mov.w	fp, #0
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    3830:	231b      	movs	r3, #27
    3832:	87e3      	strh	r3, [r4, #62]	; 0x3e
	conn_lll->link_tx_free = NULL;
    3834:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	conn_lll->packet_tx_head_len = 0;
    3838:	f8a4 b05c 	strh.w	fp, [r4, #92]	; 0x5c
	conn_lll->latency_prepare = 0;
    383c:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    3840:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    3844:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3848:	f017 fd94 	bl	1b374 <ull_chan_map_get>
    384c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    3850:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    3854:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    3856:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    385a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    385e:	f019 f8fb 	bl	1ca58 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3862:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3866:	4b70      	ldr	r3, [pc, #448]	; (3a28 <ll_create_connection+0x390>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    3868:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    386c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    386e:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3872:	fba3 1302 	umull	r1, r3, r3, r2
    3876:	08db      	lsrs	r3, r3, #3
    3878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    387c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    3880:	3305      	adds	r3, #5
    3882:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    3886:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    388a:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    388c:	f8a4 b0a8 	strh.w	fp, [r4, #168]	; 0xa8
	conn_lll->data_chan_sel = 0;
    3890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3894:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    3898:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    389c:	f8a4 b0ac 	strh.w	fp, [r4, #172]	; 0xac
	conn_lll->central.initiated = 0;
    38a0:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    38a4:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    38a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    38ac:	4b5f      	ldr	r3, [pc, #380]	; (3a2c <ll_create_connection+0x394>)
	conn->apto_expire = 0U;
    38ae:	f8a4 b0b4 	strh.w	fp, [r4, #180]	; 0xb4
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    38b2:	fb02 f101 	mul.w	r1, r2, r1
    38b6:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    38b8:	440b      	add	r3, r1
    38ba:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    38be:	495c      	ldr	r1, [pc, #368]	; (3a30 <ll_create_connection+0x398>)
	conn->appto_expire = 0U;
    38c0:	f8a4 b0b0 	strh.w	fp, [r4, #176]	; 0xb0
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    38c4:	4411      	add	r1, r2
    38c6:	fbb1 f1f2 	udiv	r1, r1, r2
    38ca:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    38ce:	f242 7110 	movw	r1, #10000	; 0x2710
    38d2:	fb01 210c 	mla	r1, r1, ip, r2
    38d6:	3901      	subs	r1, #1
    38d8:	fbb1 f2f2 	udiv	r2, r1, r2
    38dc:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    38e0:	2206      	movs	r2, #6
    38e2:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    38e6:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    38e8:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    38ea:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    38ec:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    38f0:	dd02      	ble.n	38f8 <ll_create_connection+0x260>
    38f2:	3a06      	subs	r2, #6
    38f4:	1a12      	subs	r2, r2, r0
    38f6:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    38f8:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    38fc:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    3900:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    3904:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3908:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    390c:	f8a4 b0bc 	strh.w	fp, [r4, #188]	; 0xbc
	conn->llcp_rx = NULL;
    3910:	f8c4 b0e0 	str.w	fp, [r4, #224]	; 0xe0
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    3914:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    3918:	f8a4 b0f8 	strh.w	fp, [r4, #248]	; 0xf8
	conn->llcp_feature.features_conn = ll_feat_get();
    391c:	f012 ff72 	bl	16804 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    3920:	9b07      	ldr	r3, [sp, #28]
    3922:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    3926:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    392a:	f8a4 b110 	strh.w	fp, [r4, #272]	; 0x110
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    392e:	f023 0303 	bic.w	r3, r3, #3
    3932:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    3936:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    393a:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    393e:	f023 0318 	bic.w	r3, r3, #24
    3942:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    3946:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_terminate.reason_final = 0U;
    394a:	f884 b11b 	strb.w	fp, [r4, #283]	; 0x11b
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    394e:	f023 0307 	bic.w	r3, r3, #7
    3952:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_conn_param.disabled = 0U;
    3956:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    395a:	f8a4 b13c 	strh.w	fp, [r4, #316]	; 0x13c
	conn->llcp_conn_param.disabled = 0U;
    395e:	f36b 1345 	bfi	r3, fp, #5, #1
    3962:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_length.disabled = 0U;
    3966:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_conn_param.req = 0U;
    396a:	f8a4 b15c 	strh.w	fp, [r4, #348]	; 0x15c
	conn->llcp_length.disabled = 0U;
    396e:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    3972:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    3974:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_feature.features_peer = 0;
    3978:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    397a:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
	conn->llcp_feature.features_peer = 0;
    397e:	e9c4 2342 	strd	r2, r3, [r4, #264]	; 0x108
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    3982:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.cache.tx_octets = 0U;
    3986:	f8a4 b190 	strh.w	fp, [r4, #400]	; 0x190
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    398a:	f015 f8e5 	bl	18b58 <ull_conn_default_tx_octets_get>
    398e:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    3992:	f015 f8e7 	bl	18b64 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    3996:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    399a:	4b26      	ldr	r3, [pc, #152]	; (3a34 <ll_create_connection+0x39c>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    399c:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    39a0:	4013      	ands	r3, r2
    39a2:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    39a6:	f015 f8e3 	bl	18b70 <ull_conn_default_phy_tx_get>
    39aa:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    39ae:	f360 0302 	bfi	r3, r0, #0, #3
    39b2:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    39b6:	f015 f8e1 	bl	18b7c <ull_conn_default_phy_rx_get>
    39ba:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    39be:	f8c4 b19c 	str.w	fp, [r4, #412]	; 0x19c
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    39c2:	f360 03c5 	bfi	r3, r0, #3, #3
    39c6:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->ull.ticks_prepare_to_start =
    39ca:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    39cc:	e9c4 bb6a 	strd	fp, fp, [r4, #424]	; 0x1a8
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    39d0:	e9c4 bb68 	strd	fp, fp, [r4, #416]	; 0x1a0
	conn->ull.ticks_active_to_start = 0U;
    39d4:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    39d8:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    39dc:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    39de:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    39e2:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    39e6:	f884 b000 	strb.w	fp, [r4]
    39ea:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    39ec:	e67e      	b.n	36ec <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    39ee:	200c      	movs	r0, #12
}
    39f0:	b00b      	add	sp, #44	; 0x2c
    39f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    39f6:	2000      	movs	r0, #0
    39f8:	f018 fa1a 	bl	1be30 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    39fc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3a00:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    3a04:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    3a06:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    3a0a:	e69c      	b.n	3746 <ll_create_connection+0xae>
    3a0c:	f3af 8000 	nop.w
    3a10:	1afd498d 	.word	0x1afd498d
    3a14:	00000007 	.word	0x00000007
    3a18:	3b9aca00 	.word	0x3b9aca00
    3a1c:	f8800000 	.word	0xf8800000
    3a20:	01110148 	.word	0x01110148
    3a24:	0148001b 	.word	0x0148001b
    3a28:	aaaaaaab 	.word	0xaaaaaaab
    3a2c:	01c9c37f 	.word	0x01c9c37f
    3a30:	026259ff 	.word	0x026259ff
    3a34:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    3a38:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    3a3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3a3c:	b163      	cbz	r3, 3a58 <ll_create_connection+0x3c0>
    3a3e:	4a2d      	ldr	r2, [pc, #180]	; (3af4 <ll_create_connection+0x45c>)
    3a40:	492d      	ldr	r1, [pc, #180]	; (3af8 <ll_create_connection+0x460>)
    3a42:	482e      	ldr	r0, [pc, #184]	; (3afc <ll_create_connection+0x464>)
    3a44:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    3a48:	f021 f8d8 	bl	24bfc <printk>
    3a4c:	4040      	eors	r0, r0
    3a4e:	f380 8811 	msr	BASEPRI, r0
    3a52:	f04f 0003 	mov.w	r0, #3
    3a56:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    3a58:	f104 0130 	add.w	r1, r4, #48	; 0x30
    3a5c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3a60:	f00f fd0a 	bl	13478 <memq_deinit>
	LL_ASSERT(link);
    3a64:	4606      	mov	r6, r0
    3a66:	2800      	cmp	r0, #0
    3a68:	d031      	beq.n	3ace <ll_create_connection+0x436>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    3a6a:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    3a6c:	63e6      	str	r6, [r4, #60]	; 0x3c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    3a6e:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	LL_ASSERT(link);
    3a72:	b1f4      	cbz	r4, 3ab2 <ll_create_connection+0x41a>

	ll_rx_link_release(link);
    3a74:	4620      	mov	r0, r4
    3a76:	f013 fb89 	bl	1718c <ll_rx_link_release>

	ll_conn_release(conn);
    3a7a:	4638      	mov	r0, r7
    3a7c:	f014 fd6e 	bl	1855c <ll_conn_release>
	scan->lll.conn = NULL;
    3a80:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    3a82:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    3a84:	622b      	str	r3, [r5, #32]
}
    3a86:	b00b      	add	sp, #44	; 0x2c
    3a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    3a8c:	4a19      	ldr	r2, [pc, #100]	; (3af4 <ll_create_connection+0x45c>)
    3a8e:	491c      	ldr	r1, [pc, #112]	; (3b00 <ll_create_connection+0x468>)
    3a90:	481a      	ldr	r0, [pc, #104]	; (3afc <ll_create_connection+0x464>)
    3a92:	23bf      	movs	r3, #191	; 0xbf
    3a94:	f021 f8b2 	bl	24bfc <printk>
    3a98:	4040      	eors	r0, r0
    3a9a:	f380 8811 	msr	BASEPRI, r0
    3a9e:	f04f 0003 	mov.w	r0, #3
    3aa2:	df02      	svc	2
    3aa4:	e69e      	b.n	37e4 <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3aa6:	2007      	movs	r0, #7
    3aa8:	e672      	b.n	3790 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    3aaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3aae:	65a0      	str	r0, [r4, #88]	; 0x58
    3ab0:	e6a8      	b.n	3804 <ll_create_connection+0x16c>
	LL_ASSERT(link);
    3ab2:	4a10      	ldr	r2, [pc, #64]	; (3af4 <ll_create_connection+0x45c>)
    3ab4:	4913      	ldr	r1, [pc, #76]	; (3b04 <ll_create_connection+0x46c>)
    3ab6:	4811      	ldr	r0, [pc, #68]	; (3afc <ll_create_connection+0x464>)
    3ab8:	f240 43c1 	movw	r3, #1217	; 0x4c1
    3abc:	f021 f89e 	bl	24bfc <printk>
    3ac0:	4040      	eors	r0, r0
    3ac2:	f380 8811 	msr	BASEPRI, r0
    3ac6:	f04f 0003 	mov.w	r0, #3
    3aca:	df02      	svc	2
    3acc:	e7d2      	b.n	3a74 <ll_create_connection+0x3dc>
	LL_ASSERT(link);
    3ace:	4a09      	ldr	r2, [pc, #36]	; (3af4 <ll_create_connection+0x45c>)
    3ad0:	490c      	ldr	r1, [pc, #48]	; (3b04 <ll_create_connection+0x46c>)
    3ad2:	480a      	ldr	r0, [pc, #40]	; (3afc <ll_create_connection+0x464>)
    3ad4:	f240 43ba 	movw	r3, #1210	; 0x4ba
    3ad8:	f021 f890 	bl	24bfc <printk>
    3adc:	4040      	eors	r0, r0
    3ade:	f380 8811 	msr	BASEPRI, r0
    3ae2:	f04f 0003 	mov.w	r0, #3
    3ae6:	df02      	svc	2
    3ae8:	e7bf      	b.n	3a6a <ll_create_connection+0x3d2>
		ll_rx_link_release(link);
    3aea:	9807      	ldr	r0, [sp, #28]
    3aec:	f013 fb4e 	bl	1718c <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3af0:	2007      	movs	r0, #7
    3af2:	e64d      	b.n	3790 <ll_create_connection+0xf8>
    3af4:	0002d9c8 	.word	0x0002d9c8
    3af8:	0002da0c 	.word	0x0002da0c
    3afc:	0002d27c 	.word	0x0002d27c
    3b00:	0002d5f4 	.word	0x0002d5f4
    3b04:	0002d840 	.word	0x0002d840

00003b08 <ull_central_setup>:
{
    3b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
    3b0c:	4680      	mov	r8, r0
{
    3b0e:	b08f      	sub	sp, #60	; 0x3c
    3b10:	4604      	mov	r4, r0
    3b12:	460f      	mov	r7, r1
    3b14:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3b16:	f100 0124 	add.w	r1, r0, #36	; 0x24
    3b1a:	2206      	movs	r2, #6
    3b1c:	a80c      	add	r0, sp, #48	; 0x30
	peer_addr_type = pdu_tx->rx_addr;
    3b1e:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3b22:	f024 fd48 	bl	285b6 <memcpy>
	chan_sel = pdu_tx->chan_sel;
    3b26:	f894 901c 	ldrb.w	r9, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3b2a:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
    3b2e:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
    3b32:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    3b36:	46d9      	mov	r9, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3b38:	f040 8104 	bne.w	3d44 <ull_central_setup+0x23c>
	cc->status = 0U;
    3b3c:	2300      	movs	r3, #0
    3b3e:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    3b40:	7cb9      	ldrb	r1, [r7, #18]
	uint8_t rl_idx = ftr->rl_idx;
    3b42:	f897 8011 	ldrb.w	r8, [r7, #17]
	if (ftr->lrpa_used) {
    3b46:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3b4a:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    3b4e:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    3b52:	f000 80e1 	beq.w	3d18 <ull_central_setup+0x210>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3b56:	f104 011e 	add.w	r1, r4, #30
    3b5a:	f024 fd2c 	bl	285b6 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    3b5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3b62:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3b66:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3b6a:	f000 80df 	beq.w	3d2c <ull_central_setup+0x224>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3b6e:	4652      	mov	r2, sl
    3b70:	4640      	mov	r0, r8
    3b72:	f104 011e 	add.w	r1, r4, #30
    3b76:	930b      	str	r3, [sp, #44]	; 0x2c
    3b78:	f017 fe46 	bl	1b808 <ll_rl_id_addr_get>
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3b7e:	4618      	mov	r0, r3
		cc->peer_addr_type += 2;
    3b80:	7fa3      	ldrb	r3, [r4, #30]
    3b82:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3b84:	a90c      	add	r1, sp, #48	; 0x30
		cc->peer_addr_type += 2;
    3b86:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3b88:	2206      	movs	r2, #6
    3b8a:	f024 fd14 	bl	285b6 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    3b8e:	683b      	ldr	r3, [r7, #0]
    3b90:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    3b94:	89eb      	ldrh	r3, [r5, #14]
    3b96:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    3b98:	8a2b      	ldrh	r3, [r5, #16]
    3b9a:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    3b9c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    3ba0:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    3ba2:	f019 fa87 	bl	1d0b4 <lll_clock_sca_local_get>
    3ba6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    3baa:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    3bae:	4640      	mov	r0, r8
    3bb0:	f014 fcda 	bl	18568 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    3bb4:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
    3bb6:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    3bb8:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    3bba:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    3bbc:	6820      	ldr	r0, [r4, #0]
    3bbe:	f013 faeb 	bl	17198 <ll_rx_put>
		rx->handle = lll->handle;
    3bc2:	89ab      	ldrh	r3, [r5, #12]
    3bc4:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3bc6:	231b      	movs	r3, #27
		link = rx->link;
    3bc8:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3bca:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    3bcc:	f1b9 0f00 	cmp.w	r9, #0
    3bd0:	f040 80c6 	bne.w	3d60 <ull_central_setup+0x258>
			cs->csa = 0x00;
    3bd4:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
    3bd8:	4631      	mov	r1, r6
    3bda:	4620      	mov	r0, r4
    3bdc:	f013 fadc 	bl	17198 <ll_rx_put>
	ll_rx_sched();
    3be0:	f013 fae4 	bl	171ac <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3be4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3be8:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    3bec:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3bf0:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    3bf4:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3bf6:	429e      	cmp	r6, r3
    3bf8:	bf38      	it	cc
    3bfa:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3bfc:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3c00:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3c04:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3c08:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3c0c:	f019 f862 	bl	1ccd4 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    3c10:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3c12:	2200      	movs	r2, #0
    3c14:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3c16:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3c18:	2001      	movs	r0, #1
    3c1a:	f00f fc79 	bl	13510 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    3c1e:	4650      	mov	r0, sl
    3c20:	f014 f810 	bl	17c44 <ull_scan_handle_get>
    3c24:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3c26:	4b56      	ldr	r3, [pc, #344]	; (3d80 <ull_central_setup+0x278>)
    3c28:	f8cd a000 	str.w	sl, [sp]
    3c2c:	b2d2      	uxtb	r2, r2
    3c2e:	2101      	movs	r1, #1
    3c30:	2000      	movs	r0, #0
    3c32:	f010 fef5 	bl	14a20 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3c36:	f030 0302 	bics.w	r3, r0, #2
    3c3a:	d00c      	beq.n	3c56 <ull_central_setup+0x14e>
    3c3c:	4a51      	ldr	r2, [pc, #324]	; (3d84 <ull_central_setup+0x27c>)
    3c3e:	4952      	ldr	r1, [pc, #328]	; (3d88 <ull_central_setup+0x280>)
    3c40:	4852      	ldr	r0, [pc, #328]	; (3d8c <ull_central_setup+0x284>)
    3c42:	f240 33c9 	movw	r3, #969	; 0x3c9
    3c46:	f020 ffd9 	bl	24bfc <printk>
    3c4a:	4040      	eors	r0, r0
    3c4c:	f380 8811 	msr	BASEPRI, r0
    3c50:	f04f 0003 	mov.w	r0, #3
    3c54:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3c56:	f04f 0a00 	mov.w	sl, #0
    3c5a:	2201      	movs	r2, #1
    3c5c:	4611      	mov	r1, r2
    3c5e:	4653      	mov	r3, sl
    3c60:	f8cd a000 	str.w	sl, [sp]
    3c64:	4650      	mov	r0, sl
    3c66:	f010 fedb 	bl	14a20 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3c6a:	4640      	mov	r0, r8
    3c6c:	f014 fc7c 	bl	18568 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3c70:	68bb      	ldr	r3, [r7, #8]
    3c72:	f8cd 8018 	str.w	r8, [sp, #24]
    3c76:	3b09      	subs	r3, #9
    3c78:	1b9e      	subs	r6, r3, r6
    3c7a:	4b45      	ldr	r3, [pc, #276]	; (3d90 <ull_central_setup+0x288>)
    3c7c:	9307      	str	r3, [sp, #28]
    3c7e:	4b45      	ldr	r3, [pc, #276]	; (3d94 <ull_central_setup+0x28c>)
    3c80:	9305      	str	r3, [sp, #20]
    3c82:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3c86:	4f44      	ldr	r7, [pc, #272]	; (3d98 <ull_central_setup+0x290>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3c88:	9308      	str	r3, [sp, #32]
    3c8a:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3c8e:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3c92:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3c96:	1cc5      	adds	r5, r0, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3c98:	a337      	add	r3, pc, #220	; (adr r3, 3d78 <ull_central_setup+0x270>)
    3c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c9e:	4648      	mov	r0, r9
    3ca0:	4641      	mov	r1, r8
    3ca2:	f7fd fa2d 	bl	1100 <__aeabi_uldivmod>
    3ca6:	4610      	mov	r0, r2
    3ca8:	4619      	mov	r1, r3
    3caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3cae:	2300      	movs	r3, #0
    3cb0:	f7fd fa26 	bl	1100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3cb4:	a330      	add	r3, pc, #192	; (adr r3, 3d78 <ull_central_setup+0x270>)
    3cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3cba:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3cbc:	4641      	mov	r1, r8
    3cbe:	4648      	mov	r0, r9
    3cc0:	f7fd fa1e 	bl	1100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3cc4:	a32c      	add	r3, pc, #176	; (adr r3, 3d78 <ull_central_setup+0x270>)
    3cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3cca:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3ccc:	fba4 0107 	umull	r0, r1, r4, r7
    3cd0:	f7fd fa16 	bl	1100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3cd4:	b2ed      	uxtb	r5, r5
    3cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3cda:	9000      	str	r0, [sp, #0]
    3cdc:	4633      	mov	r3, r6
    3cde:	462a      	mov	r2, r5
    3ce0:	2101      	movs	r1, #1
    3ce2:	4650      	mov	r0, sl
    3ce4:	f010 fe12 	bl	1490c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3ce8:	f030 0302 	bics.w	r3, r0, #2
    3cec:	d00c      	beq.n	3d08 <ull_central_setup+0x200>
    3cee:	4a25      	ldr	r2, [pc, #148]	; (3d84 <ull_central_setup+0x27c>)
    3cf0:	4925      	ldr	r1, [pc, #148]	; (3d88 <ull_central_setup+0x280>)
    3cf2:	4826      	ldr	r0, [pc, #152]	; (3d8c <ull_central_setup+0x284>)
    3cf4:	f240 33fa 	movw	r3, #1018	; 0x3fa
    3cf8:	f020 ff80 	bl	24bfc <printk>
    3cfc:	4040      	eors	r0, r0
    3cfe:	f380 8811 	msr	BASEPRI, r0
    3d02:	f04f 0003 	mov.w	r0, #3
    3d06:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3d08:	2201      	movs	r2, #1
    3d0a:	2102      	movs	r1, #2
    3d0c:	4610      	mov	r0, r2
    3d0e:	f00f fbff 	bl	13510 <mayfly_enable>
}
    3d12:	b00f      	add	sp, #60	; 0x3c
    3d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    3d18:	f024 fc58 	bl	285cc <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    3d1c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3d20:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3d24:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3d28:	f47f af21 	bne.w	3b6e <ull_central_setup+0x66>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    3d2c:	4618      	mov	r0, r3
    3d2e:	2206      	movs	r2, #6
    3d30:	2100      	movs	r1, #0
    3d32:	f024 fc4b 	bl	285cc <memset>
		cc->peer_addr_type = peer_addr_type;
    3d36:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    3d38:	a90c      	add	r1, sp, #48	; 0x30
    3d3a:	4650      	mov	r0, sl
    3d3c:	2206      	movs	r2, #6
    3d3e:	f024 fc3a 	bl	285b6 <memcpy>
    3d42:	e724      	b.n	3b8e <ull_central_setup+0x86>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3d44:	4a0f      	ldr	r2, [pc, #60]	; (3d84 <ull_central_setup+0x27c>)
    3d46:	4915      	ldr	r1, [pc, #84]	; (3d9c <ull_central_setup+0x294>)
    3d48:	4810      	ldr	r0, [pc, #64]	; (3d8c <ull_central_setup+0x284>)
    3d4a:	f44f 7352 	mov.w	r3, #840	; 0x348
    3d4e:	f020 ff55 	bl	24bfc <printk>
    3d52:	4040      	eors	r0, r0
    3d54:	f380 8811 	msr	BASEPRI, r0
    3d58:	f04f 0003 	mov.w	r0, #3
    3d5c:	df02      	svc	2
    3d5e:	e6ed      	b.n	3b3c <ull_central_setup+0x34>
			lll->data_chan_sel = 1;
    3d60:	7f6b      	ldrb	r3, [r5, #29]
    3d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3d66:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3d68:	1d28      	adds	r0, r5, #4
    3d6a:	f017 fb4f 	bl	1b40c <lll_chan_id>
			cs->csa = 0x01;
    3d6e:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3d70:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    3d72:	7733      	strb	r3, [r6, #28]
    3d74:	e730      	b.n	3bd8 <ull_central_setup+0xd0>
    3d76:	bf00      	nop
    3d78:	1afd498d 	.word	0x1afd498d
    3d7c:	00000007 	.word	0x00000007
    3d80:	0001ac4d 	.word	0x0001ac4d
    3d84:	0002d9c8 	.word	0x0002d9c8
    3d88:	0002d904 	.word	0x0002d904
    3d8c:	0002d27c 	.word	0x0002d27c
    3d90:	0001ac51 	.word	0x0001ac51
    3d94:	0001ac81 	.word	0x0001ac81
    3d98:	3b9aca00 	.word	0x3b9aca00
    3d9c:	0002d4a8 	.word	0x0002d4a8

00003da0 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    3da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3da4:	b08f      	sub	sp, #60	; 0x3c
    3da6:	461e      	mov	r6, r3
    3da8:	9309      	str	r3, [sp, #36]	; 0x24
    3daa:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    3dac:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3dae:	1d0a      	adds	r2, r1, #4
    3db0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3eb8 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    3db4:	f8df b104 	ldr.w	fp, [pc, #260]	; 3ebc <ull_sched_after_mstr_slot_get+0x11c>
    3db8:	f8df a104 	ldr.w	sl, [pc, #260]	; 3ec0 <ull_sched_after_mstr_slot_get+0x120>
    3dbc:	f8df 9104 	ldr.w	r9, [pc, #260]	; 3ec4 <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3dc0:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3dc2:	2100      	movs	r1, #0
    3dc4:	6031      	str	r1, [r6, #0]
{
    3dc6:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    3dc8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    3dcc:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3dce:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    3dd0:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3dd2:	9106      	str	r1, [sp, #24]
    3dd4:	af0d      	add	r7, sp, #52	; 0x34
    3dd6:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    3dd8:	2302      	movs	r3, #2
    3dda:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3ddc:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3de0:	9600      	str	r6, [sp, #0]
    3de2:	462b      	mov	r3, r5
    3de4:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3de8:	4621      	mov	r1, r4
    3dea:	2000      	movs	r0, #0
    3dec:	f010 fe5a 	bl	14aa4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3df0:	2802      	cmp	r0, #2
    3df2:	d02d      	beq.n	3e50 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3df6:	2b00      	cmp	r3, #0
    3df8:	d130      	bne.n	3e5c <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    3dfa:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3dfe:	2bff      	cmp	r3, #255	; 0xff
    3e00:	d03c      	beq.n	3e7c <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    3e02:	2b03      	cmp	r3, #3
    3e04:	d1e8      	bne.n	3dd8 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3e06:	2000      	movs	r0, #0
    3e08:	f014 fbb6 	bl	18578 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d0e3      	beq.n	3dd8 <ull_sched_after_mstr_slot_get+0x38>
    3e10:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    3e14:	2b00      	cmp	r3, #0
    3e16:	dbdf      	blt.n	3dd8 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    3e18:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    3e1a:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3e1e:	29ff      	cmp	r1, #255	; 0xff
    3e20:	d00c      	beq.n	3e3c <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    3e22:	9906      	ldr	r1, [sp, #24]
    3e24:	9207      	str	r2, [sp, #28]
    3e26:	4618      	mov	r0, r3
    3e28:	9304      	str	r3, [sp, #16]
    3e2a:	f010 fe9b 	bl	14b64 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3e2e:	9b05      	ldr	r3, [sp, #20]
    3e30:	9a08      	ldr	r2, [sp, #32]
    3e32:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    3e34:	4288      	cmp	r0, r1
    3e36:	9b04      	ldr	r3, [sp, #16]
    3e38:	9a07      	ldr	r2, [sp, #28]
    3e3a:	d822      	bhi.n	3e82 <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    3e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    3e40:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3e44:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3e46:	e7c7      	b.n	3dd8 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3e48:	4621      	mov	r1, r4
    3e4a:	2000      	movs	r0, #0
    3e4c:	f010 fe70 	bl	14b30 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e52:	2b02      	cmp	r3, #2
    3e54:	d0f8      	beq.n	3e48 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d0ce      	beq.n	3dfa <ull_sched_after_mstr_slot_get+0x5a>
    3e5c:	2373      	movs	r3, #115	; 0x73
    3e5e:	465a      	mov	r2, fp
    3e60:	4651      	mov	r1, sl
    3e62:	4648      	mov	r0, r9
    3e64:	f020 feca 	bl	24bfc <printk>
    3e68:	4040      	eors	r0, r0
    3e6a:	f380 8811 	msr	BASEPRI, r0
    3e6e:	f04f 0003 	mov.w	r0, #3
    3e72:	df02      	svc	2
		if (ticker_id == 0xff) {
    3e74:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3e78:	2bff      	cmp	r3, #255	; 0xff
    3e7a:	d1c2      	bne.n	3e02 <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    3e7c:	9b04      	ldr	r3, [sp, #16]
    3e7e:	2bff      	cmp	r3, #255	; 0xff
    3e80:	d010      	beq.n	3ea4 <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3e82:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3e86:	4810      	ldr	r0, [pc, #64]	; (3ec8 <ull_sched_after_mstr_slot_get+0x128>)
    3e88:	4413      	add	r3, r2
    3e8a:	fba3 0100 	umull	r0, r1, r3, r0
    3e8e:	2207      	movs	r2, #7
    3e90:	fb02 1103 	mla	r1, r2, r3, r1
    3e94:	a306      	add	r3, pc, #24	; (adr r3, 3eb0 <ull_sched_after_mstr_slot_get+0x110>)
    3e96:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e9a:	f7fd f931 	bl	1100 <__aeabi_uldivmod>
    3e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    3ea0:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3ea2:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    3ea4:	b00f      	add	sp, #60	; 0x3c
    3ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eaa:	bf00      	nop
    3eac:	f3af 8000 	nop.w
    3eb0:	3b9aca00 	.word	0x3b9aca00
    3eb4:	00000000 	.word	0x00000000
    3eb8:	0001b01d 	.word	0x0001b01d
    3ebc:	0002da58 	.word	0x0002da58
    3ec0:	0002da9c 	.word	0x0002da9c
    3ec4:	0002d27c 	.word	0x0002d27c
    3ec8:	1afd498d 	.word	0x1afd498d
    3ecc:	00000000 	.word	0x00000000

00003ed0 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    3ed0:	b570      	push	{r4, r5, r6, lr}
    3ed2:	b082      	sub	sp, #8
    3ed4:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    3ed6:	9201      	str	r2, [sp, #4]
{
    3ed8:	4615      	mov	r5, r2
    3eda:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3edc:	aa01      	add	r2, sp, #4
    3ede:	2002      	movs	r0, #2
    3ee0:	f7ff ff5e 	bl	3da0 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    3ee4:	6823      	ldr	r3, [r4, #0]
    3ee6:	b30b      	cbz	r3, 3f2c <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3ee8:	9801      	ldr	r0, [sp, #4]
    3eea:	1b43      	subs	r3, r0, r5
    3eec:	021b      	lsls	r3, r3, #8
    3eee:	d41f      	bmi.n	3f30 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3ef0:	4629      	mov	r1, r5
    3ef2:	f010 fe37 	bl	14b64 <ticker_ticks_diff_get>
    3ef6:	4a1a      	ldr	r2, [pc, #104]	; (3f60 <after_mstr_offset_get+0x90>)
    3ef8:	4603      	mov	r3, r0
    3efa:	2107      	movs	r1, #7
    3efc:	fba0 0202 	umull	r0, r2, r0, r2
    3f00:	fb01 2103 	mla	r1, r1, r3, r2
    3f04:	a314      	add	r3, pc, #80	; (adr r3, 3f58 <after_mstr_offset_get+0x88>)
    3f06:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f0a:	f7fd f8f9 	bl	1100 <__aeabi_uldivmod>
    3f0e:	6822      	ldr	r2, [r4, #0]
    3f10:	4402      	add	r2, r0
    3f12:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    3f14:	2a00      	cmp	r2, #0
    3f16:	db09      	blt.n	3f2c <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    3f18:	f240 40e2 	movw	r0, #1250	; 0x4e2
    3f1c:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    3f20:	4290      	cmp	r0, r2
    3f22:	d203      	bcs.n	3f2c <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    3f24:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    3f26:	4282      	cmp	r2, r0
    3f28:	d8fc      	bhi.n	3f24 <after_mstr_offset_get+0x54>
    3f2a:	6022      	str	r2, [r4, #0]
		}
	}
}
    3f2c:	b002      	add	sp, #8
    3f2e:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3f30:	4601      	mov	r1, r0
    3f32:	4628      	mov	r0, r5
    3f34:	f010 fe16 	bl	14b64 <ticker_ticks_diff_get>
    3f38:	4a09      	ldr	r2, [pc, #36]	; (3f60 <after_mstr_offset_get+0x90>)
    3f3a:	4603      	mov	r3, r0
    3f3c:	2107      	movs	r1, #7
    3f3e:	fba0 0202 	umull	r0, r2, r0, r2
    3f42:	fb01 2103 	mla	r1, r1, r3, r2
    3f46:	a304      	add	r3, pc, #16	; (adr r3, 3f58 <after_mstr_offset_get+0x88>)
    3f48:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f4c:	f7fd f8d8 	bl	1100 <__aeabi_uldivmod>
    3f50:	6822      	ldr	r2, [r4, #0]
    3f52:	1a12      	subs	r2, r2, r0
    3f54:	6022      	str	r2, [r4, #0]
    3f56:	e7dd      	b.n	3f14 <after_mstr_offset_get+0x44>
    3f58:	3b9aca00 	.word	0x3b9aca00
    3f5c:	00000000 	.word	0x00000000
    3f60:	1afd498d 	.word	0x1afd498d
    3f64:	00000000 	.word	0x00000000

00003f68 <ull_sched_mfy_win_offset_select>:
{
    3f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3f6c:	f8b0 116c 	ldrh.w	r1, [r0, #364]	; 0x16c
{
    3f70:	b088      	sub	sp, #32
    3f72:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3f74:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3f78:	4847      	ldr	r0, [pc, #284]	; (4098 <CONFIG_USB_DEVICE_PID+0x87>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3f7a:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3f7c:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3f80:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    3f82:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3f84:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    3f88:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3f8c:	fba1 0100 	umull	r0, r1, r1, r0
    3f90:	a33f      	add	r3, pc, #252	; (adr r3, 4090 <CONFIG_USB_DEVICE_PID+0x7f>)
    3f92:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3f96:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3f98:	f7fd f8b2 	bl	1100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    3f9c:	f10d 030f 	add.w	r3, sp, #15
    3fa0:	9501      	str	r5, [sp, #4]
    3fa2:	9300      	str	r3, [sp, #0]
    3fa4:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3fa8:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    3faa:	aa04      	add	r2, sp, #16
    3fac:	4620      	mov	r0, r4
    3fae:	2101      	movs	r1, #1
    3fb0:	f017 f836 	bl	1b020 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    3fb4:	f89d 800f 	ldrb.w	r8, [sp, #15]
    3fb8:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    3fbc:	fa5f fc8c 	uxtb.w	ip, ip
    3fc0:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    3fc4:	4630      	mov	r0, r6
    3fc6:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
    3fca:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    3fce:	f504 76bc 	add.w	r6, r4, #376	; 0x178
			if (win_offset_s != 0xffff) {
    3fd2:	f64f 7eff 	movw	lr, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    3fd6:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    3fd8:	f1b8 0f00 	cmp.w	r8, #0
    3fdc:	d00a      	beq.n	3ff4 <ull_sched_mfy_win_offset_select+0x8c>
    3fde:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    3fe0:	4572      	cmp	r2, lr
    3fe2:	d004      	beq.n	3fee <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    3fe4:	8819      	ldrh	r1, [r3, #0]
    3fe6:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    3fe8:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    3fec:	d01d      	beq.n	402a <CONFIG_USB_DEVICE_PID+0x19>
		while (offset_index_m < offset_m_max) {
    3fee:	3302      	adds	r3, #2
    3ff0:	459c      	cmp	ip, r3
    3ff2:	d1f5      	bne.n	3fe0 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    3ff4:	3702      	adds	r7, #2
    3ff6:	42be      	cmp	r6, r7
    3ff8:	d1ed      	bne.n	3fd6 <ull_sched_mfy_win_offset_select+0x6e>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3ffa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	} else if (!has_offset_s) {
    3ffe:	bb48      	cbnz	r0, 4054 <CONFIG_USB_DEVICE_PID+0x43>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    4000:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    4004:	f240 41e2 	movw	r1, #1250	; 0x4e2
    4008:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
    400c:	0a10      	lsrs	r0, r2, #8
    400e:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
	dst[0] = val;
    4012:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    4014:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    4016:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    401a:	2204      	movs	r2, #4
    401c:	f362 0302 	bfi	r3, r2, #0, #3
    4020:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    4024:	b008      	add	sp, #32
    4026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    402a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    402e:	f240 43e2 	movw	r3, #1250	; 0x4e2
    4032:	fb02 f303 	mul.w	r3, r2, r3
    4036:	0a10      	lsrs	r0, r2, #8
    4038:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	dst[0] = val;
    403c:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    403e:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    4040:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    4044:	2204      	movs	r2, #4
    4046:	f362 0302 	bfi	r3, r2, #0, #3
    404a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    404e:	b008      	add	sp, #32
    4050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    4054:	2203      	movs	r2, #3
    4056:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    405a:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    405e:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    4062:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4064:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    4068:	2011      	movs	r0, #17
    406a:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    406e:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    4072:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    4076:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    4078:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    407a:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    407e:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    4080:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
}
    4084:	b008      	add	sp, #32
    4086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    408a:	bf00      	nop
    408c:	f3af 8000 	nop.w
    4090:	1afd498d 	.word	0x1afd498d
    4094:	00000007 	.word	0x00000007
    4098:	3b9aca00 	.word	0x3b9aca00
    409c:	00000000 	.word	0x00000000

000040a0 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    40a0:	b538      	push	{r3, r4, r5, lr}
    40a2:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    40a4:	f019 f94a 	bl	1d33c <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    40a8:	7da2      	ldrb	r2, [r4, #22]
    40aa:	f3c2 0341 	ubfx	r3, r2, #1, #2
    40ae:	3301      	adds	r3, #1
    40b0:	f003 0303 	and.w	r3, r3, #3
    40b4:	2b03      	cmp	r3, #3
    40b6:	d034      	beq.n	4122 <isr_window+0x82>
    40b8:	f363 0242 	bfi	r2, r3, #1, #2
    40bc:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    40be:	f103 0025 	add.w	r0, r3, #37	; 0x25
    40c2:	f018 fdc5 	bl	1cc50 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    40c6:	6863      	ldr	r3, [r4, #4]
    40c8:	b30b      	cbz	r3, 410e <isr_window+0x6e>
    40ca:	6923      	ldr	r3, [r4, #16]
    40cc:	b1fb      	cbz	r3, 410e <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    40ce:	f01a fcb5 	bl	1ea3c <radio_tmr_start_get>
    40d2:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    40d4:	f010 fd44 	bl	14b60 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    40d8:	1cc1      	adds	r1, r0, #3
    40da:	2000      	movs	r0, #0
    40dc:	f01a fc7c 	bl	1e9d8 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    40e0:	f01a fcde 	bl	1eaa0 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    40e4:	f01a fcaa 	bl	1ea3c <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    40e8:	4629      	mov	r1, r5
    40ea:	f010 fd3b 	bl	14b64 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    40ee:	4912      	ldr	r1, [pc, #72]	; (4138 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    40f0:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    40f2:	2207      	movs	r2, #7
    40f4:	fba0 0101 	umull	r0, r1, r0, r1
    40f8:	fb02 1103 	mla	r1, r2, r3, r1
    40fc:	a30c      	add	r3, pc, #48	; (adr r3, 4130 <isr_window+0x90>)
    40fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    4102:	f7fc fffd 	bl	1100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    4106:	6923      	ldr	r3, [r4, #16]
    4108:	1a1b      	subs	r3, r3, r0
    410a:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    410c:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    410e:	f010 fd27 	bl	14b60 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    4112:	1cc1      	adds	r1, r0, #3
    4114:	2000      	movs	r0, #0
    4116:	f01a fc5f 	bl	1e9d8 <radio_tmr_start_tick>
}
    411a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    411e:	f01a bcbf 	b.w	1eaa0 <radio_tmr_end_capture>
		lll->chan = 0U;
    4122:	f36f 0242 	bfc	r2, #1, #2
    4126:	75a2      	strb	r2, [r4, #22]
    4128:	2025      	movs	r0, #37	; 0x25
    412a:	e7ca      	b.n	40c2 <isr_window+0x22>
    412c:	f3af 8000 	nop.w
    4130:	3b9aca00 	.word	0x3b9aca00
    4134:	00000000 	.word	0x00000000
    4138:	1afd498d 	.word	0x1afd498d
    413c:	00000000 	.word	0x00000000

00004140 <isr_rx>:
{
    4140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4144:	b087      	sub	sp, #28
    4146:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    4148:	f01a fa5a 	bl	1e600 <radio_is_done>
	if (trx_done) {
    414c:	b2c0      	uxtb	r0, r0
    414e:	b950      	cbnz	r0, 4166 <isr_rx+0x26>
	lll_isr_status_reset();
    4150:	f018 fdd4 	bl	1ccfc <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    4154:	48b4      	ldr	r0, [pc, #720]	; (4428 <isr_rx+0x2e8>)
    4156:	4621      	mov	r1, r4
    4158:	f01a f934 	bl	1e3c4 <radio_isr_set>
}
    415c:	b007      	add	sp, #28
    415e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    4162:	f01a ba23 	b.w	1e5ac <radio_disable>
		crc_ok = radio_crc_is_valid();
    4166:	f01a fa6b 	bl	1e640 <radio_crc_is_valid>
    416a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    416c:	f01a fb86 	bl	1e87c <radio_filter_has_match>
    4170:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    4172:	f01a fb8d 	bl	1e890 <radio_filter_match_get>
    4176:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    4178:	f01a fd88 	bl	1ec8c <radio_ar_has_match>
    417c:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    417e:	f01a fd69 	bl	1ec54 <radio_ar_match_get>
    4182:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    4184:	f01a fb3e 	bl	1e804 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    4188:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    418a:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    418c:	f01a fb20 	bl	1e7d0 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    4190:	f018 fdb4 	bl	1ccfc <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    4194:	2d00      	cmp	r5, #0
    4196:	d0dd      	beq.n	4154 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    4198:	2001      	movs	r0, #1
    419a:	f013 f943 	bl	17424 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    419e:	4605      	mov	r5, r0
    41a0:	2800      	cmp	r0, #0
    41a2:	f000 817d 	beq.w	44a0 <isr_rx+0x360>
	rl_idx = devmatch_ok ?
    41a6:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    41aa:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    41ac:	f040 816f 	bne.w	448e <isr_rx+0x34e>
    41b0:	2e00      	cmp	r6, #0
    41b2:	f040 80cc 	bne.w	434e <isr_rx+0x20e>
    41b6:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    41b8:	465a      	mov	r2, fp
    41ba:	463b      	mov	r3, r7
    41bc:	4631      	mov	r1, r6
    41be:	4620      	mov	r0, r4
    41c0:	f019 faea 	bl	1d798 <lll_scan_isr_rx_check>
	if (has_adva &&
    41c4:	2800      	cmp	r0, #0
    41c6:	d0c5      	beq.n	4154 <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    41c8:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    41ca:	6862      	ldr	r2, [r4, #4]
	bool dir_report = false;
    41cc:	2100      	movs	r1, #0
    41ce:	f88d 1013 	strb.w	r1, [sp, #19]
		rssi_ready = radio_rssi_is_ready();
    41d2:	fa5f f888 	uxtb.w	r8, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    41d6:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    41da:	2a00      	cmp	r2, #0
    41dc:	f000 80d3 	beq.w	4386 <isr_rx+0x246>
    41e0:	6862      	ldr	r2, [r4, #4]
    41e2:	f892 2020 	ldrb.w	r2, [r2, #32]
    41e6:	0790      	lsls	r0, r2, #30
    41e8:	f100 80cd 	bmi.w	4386 <isr_rx+0x246>
    41ec:	2907      	cmp	r1, #7
    41ee:	d0b1      	beq.n	4154 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    41f0:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    41f2:	0712      	lsls	r2, r2, #28
    41f4:	f140 8162 	bpl.w	44bc <isr_rx+0x37c>
    41f8:	2900      	cmp	r1, #0
    41fa:	f040 80ae 	bne.w	435a <isr_rx+0x21a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    41fe:	7f6b      	ldrb	r3, [r5, #29]
    4200:	2b25      	cmp	r3, #37	; 0x25
    4202:	f200 8122 	bhi.w	444a <isr_rx+0x30a>
			rx = ull_pdu_rx_alloc_peek(4);
    4206:	2004      	movs	r0, #4
    4208:	f013 f90c 	bl	17424 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    420c:	2800      	cmp	r0, #0
    420e:	d0a1      	beq.n	4154 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    4210:	f01a fc4e 	bl	1eab0 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    4214:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    4216:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    4218:	b943      	cbnz	r3, 422c <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    421a:	8c23      	ldrh	r3, [r4, #32]
    421c:	f240 2271 	movw	r2, #625	; 0x271
    4220:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    4224:	fbb0 f2f3 	udiv	r2, r0, r3
    4228:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    422c:	6823      	ldr	r3, [r4, #0]
    422e:	691a      	ldr	r2, [r3, #16]
    4230:	4b7e      	ldr	r3, [pc, #504]	; (442c <isr_rx+0x2ec>)
    4232:	2107      	movs	r1, #7
    4234:	fba2 0303 	umull	r0, r3, r2, r3
    4238:	fb01 3102 	mla	r1, r1, r2, r3
    423c:	a378      	add	r3, pc, #480	; (adr r3, 4420 <isr_rx+0x2e0>)
    423e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4242:	f7fc ff5d 	bl	1100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    4246:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    424a:	4543      	cmp	r3, r8
    424c:	d382      	bcc.n	4154 <isr_rx+0x14>
		radio_switch_complete_and_disable();
    424e:	f01a fab1 	bl	1e7b4 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4252:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    4254:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4256:	f017 ffeb 	bl	1c230 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    425a:	7de3      	ldrb	r3, [r4, #23]
    425c:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    425e:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    4260:	f140 81cf 	bpl.w	4602 <isr_rx+0x4c2>
    4264:	2800      	cmp	r0, #0
    4266:	f000 81cc 	beq.w	4602 <isr_rx+0x4c2>
			init_addr = lrpa->val;
    426a:	4683      	mov	fp, r0
			init_tx_addr = 1;
    426c:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    4270:	f01a f9f4 	bl	1e65c <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    4274:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    4276:	aa05      	add	r2, sp, #20
    4278:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    427a:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    427e:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    4280:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    4282:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4286:	9200      	str	r2, [sp, #0]
    4288:	4620      	mov	r0, r4
    428a:	2200      	movs	r2, #0
    428c:	e9cd 8b01 	strd	r8, fp, [sp, #4]
    4290:	f019 fa9c 	bl	1d7cc <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    4294:	4650      	mov	r0, sl
    4296:	f01a f96f 	bl	1e578 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    429a:	f01a f9a7 	bl	1e5ec <radio_is_ready>
    429e:	2800      	cmp	r0, #0
    42a0:	f040 81c5 	bne.w	462e <isr_rx+0x4ee>
		radio_isr_set(isr_done_cleanup, lll);
    42a4:	4862      	ldr	r0, [pc, #392]	; (4430 <isr_rx+0x2f0>)
    42a6:	4621      	mov	r1, r4
    42a8:	f01a f88c 	bl	1e3c4 <radio_isr_set>
		lll->conn->central.initiated = 1U;
    42ac:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    42ae:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    42b0:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    42b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    42b8:	f042 0201 	orr.w	r2, r2, #1
    42bc:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    42c0:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    42c2:	f013 f8cd 	bl	17460 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    42c6:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
    42c8:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    42ca:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    42cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    42d0:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    42d2:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    42d4:	4651      	mov	r1, sl
    42d6:	2224      	movs	r2, #36	; 0x24
    42d8:	301c      	adds	r0, #28
    42da:	f024 f96c 	bl	285b6 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    42de:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
    42e2:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    42e6:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    42ea:	f365 1345 	bfi	r3, r5, #5, #1
    42ee:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    42f2:	f01a fba3 	bl	1ea3c <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    42f6:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    42f8:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    42fc:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    42fe:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    4300:	f01a f948 	bl	1e594 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    4304:	2e00      	cmp	r6, #0
    4306:	bf08      	it	eq
    4308:	27ff      	moveq	r7, #255	; 0xff
    430a:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    430e:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    4310:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    4312:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    4316:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    431a:	d003      	beq.n	4324 <isr_rx+0x1e4>
    431c:	f1b9 0300 	subs.w	r3, r9, #0
    4320:	bf18      	it	ne
    4322:	2301      	movne	r3, #1
    4324:	f898 201a 	ldrb.w	r2, [r8, #26]
    4328:	f363 0200 	bfi	r2, r3, #0, #1
    432c:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
    4330:	f013 f896 	bl	17460 <ull_pdu_rx_alloc>
    4334:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    4336:	4641      	mov	r1, r8
    4338:	f8d8 0000 	ldr.w	r0, [r8]
			ftr->extra = ull_pdu_rx_alloc();
    433c:	f8c8 300c 	str.w	r3, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
    4340:	f013 f8a4 	bl	1748c <ull_rx_put>
		ull_rx_sched();
    4344:	f013 f8b2 	bl	174ac <ull_rx_sched>
}
    4348:	b007      	add	sp, #28
    434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    434e:	fa5f f08a 	uxtb.w	r0, sl
    4352:	f017 fffb 	bl	1c34c <ull_filter_lll_rl_irk_idx>
    4356:	4607      	mov	r7, r0
    4358:	e72e      	b.n	41b8 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    435a:	2901      	cmp	r1, #1
    435c:	d115      	bne.n	438a <isr_rx+0x24a>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    435e:	7f6b      	ldrb	r3, [r5, #29]
    4360:	2b0c      	cmp	r3, #12
    4362:	f47f aef7 	bne.w	4154 <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    4366:	7f2a      	ldrb	r2, [r5, #28]
    4368:	9700      	str	r7, [sp, #0]
    436a:	2300      	movs	r3, #0
    436c:	9301      	str	r3, [sp, #4]
    436e:	09d2      	lsrs	r2, r2, #7
    4370:	f105 0324 	add.w	r3, r5, #36	; 0x24
    4374:	4620      	mov	r0, r4
    4376:	f019 f961 	bl	1d63c <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    437a:	2800      	cmp	r0, #0
    437c:	f47f af43 	bne.w	4206 <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4380:	7f29      	ldrb	r1, [r5, #28]
    4382:	f001 010f 	and.w	r1, r1, #15
    4386:	2900      	cmp	r1, #0
    4388:	d054      	beq.n	4434 <isr_rx+0x2f4>
    438a:	2906      	cmp	r1, #6
    438c:	d052      	beq.n	4434 <isr_rx+0x2f4>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    438e:	2902      	cmp	r1, #2
    4390:	f000 80a7 	beq.w	44e2 <isr_rx+0x3a2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4394:	2901      	cmp	r1, #1
    4396:	d158      	bne.n	444a <isr_rx+0x30a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4398:	7f6b      	ldrb	r3, [r5, #29]
    439a:	2b0c      	cmp	r3, #12
    439c:	f47f aeda 	bne.w	4154 <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    43a0:	7f2a      	ldrb	r2, [r5, #28]
    43a2:	9700      	str	r7, [sp, #0]
    43a4:	f10d 0313 	add.w	r3, sp, #19
    43a8:	9301      	str	r3, [sp, #4]
    43aa:	09d2      	lsrs	r2, r2, #7
    43ac:	f105 0324 	add.w	r3, r5, #36	; 0x24
    43b0:	2100      	movs	r1, #0
    43b2:	4620      	mov	r0, r4
    43b4:	f019 f942 	bl	1d63c <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    43b8:	2800      	cmp	r0, #0
    43ba:	d046      	beq.n	444a <isr_rx+0x30a>
		 (pdu_adv_rx->len != 0) &&
    43bc:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    43be:	2b00      	cmp	r3, #0
    43c0:	f43f aec8 	beq.w	4154 <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    43c4:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    43c6:	b12b      	cbz	r3, 43d4 <isr_rx+0x294>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    43c8:	7f2b      	ldrb	r3, [r5, #28]
    43ca:	f003 030f 	and.w	r3, r3, #15
    43ce:	2b07      	cmp	r3, #7
    43d0:	f47f aec0 	bne.w	4154 <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    43d4:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    43d6:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    43da:	f013 f823 	bl	17424 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    43de:	4605      	mov	r5, r0
    43e0:	2800      	cmp	r0, #0
    43e2:	f43f aeb7 	beq.w	4154 <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    43e6:	f013 f83b 	bl	17460 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    43ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    43ee:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    43f0:	2305      	movs	r3, #5
    43f2:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    43f4:	f1b8 0f00 	cmp.w	r8, #0
    43f8:	d16f      	bne.n	44da <isr_rx+0x39a>
    43fa:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    43fc:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    43fe:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    4400:	2e00      	cmp	r6, #0
    4402:	bf08      	it	eq
    4404:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    4406:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    440a:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    440c:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    440e:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    4410:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    4412:	f013 f83b 	bl	1748c <ull_rx_put>
	ull_rx_sched();
    4416:	f013 f849 	bl	174ac <ull_rx_sched>
	if (!err) {
    441a:	e69b      	b.n	4154 <isr_rx+0x14>
    441c:	f3af 8000 	nop.w
    4420:	3b9aca00 	.word	0x3b9aca00
    4424:	00000000 	.word	0x00000000
    4428:	0001d3f5 	.word	0x0001d3f5
    442c:	1afd498d 	.word	0x1afd498d
    4430:	0001d5ed 	.word	0x0001d5ed
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    4434:	7f6b      	ldrb	r3, [r5, #29]
    4436:	2b25      	cmp	r3, #37	; 0x25
    4438:	d807      	bhi.n	444a <isr_rx+0x30a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    443a:	7da2      	ldrb	r2, [r4, #22]
    443c:	0692      	lsls	r2, r2, #26
    443e:	d502      	bpl.n	4446 <isr_rx+0x306>
		   !lll->conn) {
    4440:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    4442:	2a00      	cmp	r2, #0
    4444:	d04f      	beq.n	44e6 <isr_rx+0x3a6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    4446:	2b25      	cmp	r3, #37	; 0x25
    4448:	d9b9      	bls.n	43be <isr_rx+0x27e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    444a:	7f2b      	ldrb	r3, [r5, #28]
    444c:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    4450:	2b04      	cmp	r3, #4
    4452:	f47f ae7f 	bne.w	4154 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    4456:	7f6b      	ldrb	r3, [r5, #29]
    4458:	2b25      	cmp	r3, #37	; 0x25
    445a:	f63f ae7b 	bhi.w	4154 <isr_rx+0x14>
		   (lll->state != 0U) &&
    445e:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    4460:	07d9      	lsls	r1, r3, #31
    4462:	f57f ae77 	bpl.w	4154 <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    4466:	f01a f8f9 	bl	1e65c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    446a:	7f2b      	ldrb	r3, [r5, #28]
    446c:	7802      	ldrb	r2, [r0, #0]
    446e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4472:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4476:	f47f ae6d 	bne.w	4154 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    447a:	3008      	adds	r0, #8
    447c:	2206      	movs	r2, #6
    447e:	f105 011e 	add.w	r1, r5, #30
    4482:	f024 f86f 	bl	28564 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    4486:	2800      	cmp	r0, #0
    4488:	f47f ae64 	bne.w	4154 <isr_rx+0x14>
    448c:	e796      	b.n	43bc <isr_rx+0x27c>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    448e:	7da0      	ldrb	r0, [r4, #22]
    4490:	fa5f f189 	uxtb.w	r1, r9
    4494:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4498:	f017 feee 	bl	1c278 <ull_filter_lll_rl_idx>
    449c:	4607      	mov	r7, r0
    449e:	e68b      	b.n	41b8 <isr_rx+0x78>
	LL_ASSERT(node_rx);
    44a0:	4a71      	ldr	r2, [pc, #452]	; (4668 <isr_rx+0x528>)
    44a2:	4972      	ldr	r1, [pc, #456]	; (466c <isr_rx+0x52c>)
    44a4:	4872      	ldr	r0, [pc, #456]	; (4670 <isr_rx+0x530>)
    44a6:	f240 23c3 	movw	r3, #707	; 0x2c3
    44aa:	f020 fba7 	bl	24bfc <printk>
    44ae:	4040      	eors	r0, r0
    44b0:	f380 8811 	msr	BASEPRI, r0
    44b4:	f04f 0003 	mov.w	r0, #3
    44b8:	df02      	svc	2
    44ba:	e674      	b.n	41a6 <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
    44bc:	2fff      	cmp	r7, #255	; 0xff
    44be:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    44c2:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    44c6:	d078      	beq.n	45ba <isr_rx+0x47a>
		return (rl_idx == lll->rl_idx);
    44c8:	7e23      	ldrb	r3, [r4, #24]
    44ca:	1bdb      	subs	r3, r3, r7
    44cc:	fab3 f383 	clz	r3, r3
    44d0:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    44d2:	2b00      	cmp	r3, #0
    44d4:	f47f ae90 	bne.w	41f8 <isr_rx+0xb8>
    44d8:	e755      	b.n	4386 <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    44da:	f01a f985 	bl	1e7e8 <radio_rssi_get>
    44de:	b2c0      	uxtb	r0, r0
    44e0:	e78c      	b.n	43fc <isr_rx+0x2bc>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    44e2:	7f6b      	ldrb	r3, [r5, #29]
    44e4:	e7af      	b.n	4446 <isr_rx+0x306>
		radio_tmr_tifs_set(EVENT_IFS_US);
    44e6:	2096      	movs	r0, #150	; 0x96
    44e8:	f01a f9e8 	bl	1e8bc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    44ec:	2000      	movs	r0, #0
    44ee:	f01a f8b9 	bl	1e664 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    44f2:	2003      	movs	r0, #3
    44f4:	f012 ff96 	bl	17424 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    44f8:	4681      	mov	r9, r0
    44fa:	2800      	cmp	r0, #0
    44fc:	f43f ae2a 	beq.w	4154 <isr_rx+0x14>
	ull_pdu_rx_alloc();
    4500:	f012 ffae 	bl	17460 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    4504:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4508:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    450c:	2305      	movs	r3, #5
    450e:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    4512:	f1b8 0f00 	cmp.w	r8, #0
    4516:	d170      	bne.n	45fa <isr_rx+0x4ba>
    4518:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    451a:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    451c:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    4520:	bf14      	ite	ne
    4522:	463b      	movne	r3, r7
    4524:	23ff      	moveq	r3, #255	; 0xff
    4526:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    452a:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    452e:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    4532:	f36f 0341 	bfc	r3, #1, #1
    4536:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    453a:	4649      	mov	r1, r9
    453c:	f012 ffa6 	bl	1748c <ull_rx_put>
	ull_rx_sched();
    4540:	f012 ffb4 	bl	174ac <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    4544:	f01a f88a 	bl	1e65c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    4548:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    454a:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    454c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4550:	7832      	ldrb	r2, [r6, #0]
    4552:	01db      	lsls	r3, r3, #7
    4554:	f002 0270 	and.w	r2, r2, #112	; 0x70
    4558:	f043 0303 	orr.w	r3, r3, #3
    455c:	4313      	orrs	r3, r2
    455e:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4560:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4562:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4564:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4566:	f017 fe63 	bl	1c230 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    456a:	7de3      	ldrb	r3, [r4, #23]
    456c:	079f      	lsls	r7, r3, #30
    456e:	d54f      	bpl.n	4610 <isr_rx+0x4d0>
    4570:	2800      	cmp	r0, #0
    4572:	d04d      	beq.n	4610 <isr_rx+0x4d0>
			pdu_tx->tx_addr = 1;
    4574:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4576:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
    4578:	4630      	mov	r0, r6
    457a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    457e:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4582:	2206      	movs	r2, #6
    4584:	f024 f817 	bl	285b6 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    4588:	2206      	movs	r2, #6
    458a:	f105 011e 	add.w	r1, r5, #30
    458e:	f106 0008 	add.w	r0, r6, #8
    4592:	f024 f810 	bl	285b6 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    4596:	4630      	mov	r0, r6
    4598:	f019 ffee 	bl	1e578 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    459c:	f01a f826 	bl	1e5ec <radio_is_ready>
    45a0:	2800      	cmp	r0, #0
    45a2:	d152      	bne.n	464a <isr_rx+0x50a>
		radio_tmr_end_capture();
    45a4:	f01a fa7c 	bl	1eaa0 <radio_tmr_end_capture>
		lll->state = 1U;
    45a8:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    45aa:	4832      	ldr	r0, [pc, #200]	; (4674 <isr_rx+0x534>)
		lll->state = 1U;
    45ac:	f043 0301 	orr.w	r3, r3, #1
    45b0:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    45b2:	4621      	mov	r1, r4
    45b4:	f019 ff06 	bl	1e3c4 <radio_isr_set>
	if (!err) {
    45b8:	e6c6      	b.n	4348 <isr_rx+0x208>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    45ba:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    45be:	aa05      	add	r2, sp, #20
    45c0:	4651      	mov	r1, sl
    45c2:	4648      	mov	r0, r9
    45c4:	f017 ff78 	bl	1c4b8 <ull_filter_lll_rl_addr_allowed>
    45c8:	2800      	cmp	r0, #0
    45ca:	f43f aed9 	beq.w	4380 <isr_rx+0x240>
	return ((lll->adv_addr_type == addr_type) &&
    45ce:	7de3      	ldrb	r3, [r4, #23]
    45d0:	f003 0301 	and.w	r3, r3, #1
    45d4:	454b      	cmp	r3, r9
    45d6:	f47f aed3 	bne.w	4380 <isr_rx+0x240>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    45da:	4651      	mov	r1, sl
    45dc:	2206      	movs	r2, #6
    45de:	f104 0008 	add.w	r0, r4, #8
    45e2:	f023 ffbf 	bl	28564 <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    45e6:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    45e8:	fab0 f380 	clz	r3, r0
    45ec:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    45ee:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    45f2:	2b00      	cmp	r3, #0
    45f4:	f47f ae00 	bne.w	41f8 <isr_rx+0xb8>
    45f8:	e6c5      	b.n	4386 <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    45fa:	f01a f8f5 	bl	1e7e8 <radio_rssi_get>
    45fe:	b2c3      	uxtb	r3, r0
    4600:	e78b      	b.n	451a <isr_rx+0x3da>
			init_tx_addr = lll->init_addr_type;
    4602:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
    4606:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    460a:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
    460e:	e62f      	b.n	4270 <isr_rx+0x130>
			pdu_tx->tx_addr = lll->init_addr_type;
    4610:	7da3      	ldrb	r3, [r4, #22]
    4612:	7832      	ldrb	r2, [r6, #0]
    4614:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4618:	4630      	mov	r0, r6
    461a:	f363 1286 	bfi	r2, r3, #6, #1
    461e:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    4622:	f104 0119 	add.w	r1, r4, #25
    4626:	2206      	movs	r2, #6
    4628:	f023 ffc5 	bl	285b6 <memcpy>
    462c:	e7ac      	b.n	4588 <isr_rx+0x448>
		LL_ASSERT(!radio_is_ready());
    462e:	4a0e      	ldr	r2, [pc, #56]	; (4668 <isr_rx+0x528>)
    4630:	4911      	ldr	r1, [pc, #68]	; (4678 <isr_rx+0x538>)
    4632:	480f      	ldr	r0, [pc, #60]	; (4670 <isr_rx+0x530>)
    4634:	f240 4391 	movw	r3, #1169	; 0x491
    4638:	f020 fae0 	bl	24bfc <printk>
    463c:	4040      	eors	r0, r0
    463e:	f380 8811 	msr	BASEPRI, r0
    4642:	f04f 0003 	mov.w	r0, #3
    4646:	df02      	svc	2
    4648:	e62c      	b.n	42a4 <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
    464a:	4a07      	ldr	r2, [pc, #28]	; (4668 <isr_rx+0x528>)
    464c:	490a      	ldr	r1, [pc, #40]	; (4678 <isr_rx+0x538>)
    464e:	4808      	ldr	r0, [pc, #32]	; (4670 <isr_rx+0x530>)
    4650:	f240 5316 	movw	r3, #1302	; 0x516
    4654:	f020 fad2 	bl	24bfc <printk>
    4658:	4040      	eors	r0, r0
    465a:	f380 8811 	msr	BASEPRI, r0
    465e:	f04f 0003 	mov.w	r0, #3
    4662:	df02      	svc	2
    4664:	e79e      	b.n	45a4 <isr_rx+0x464>
    4666:	bf00      	nop
    4668:	0002de74 	.word	0x0002de74
    466c:	0002dec0 	.word	0x0002dec0
    4670:	0002d27c 	.word	0x0002d27c
    4674:	0001d409 	.word	0x0001d409
    4678:	0002dec8 	.word	0x0002dec8

0000467c <device_found>:
 * @param type Device Type
 * @param ad Adv Data
 */
static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
                         struct net_buf_simple *ad)
{
    467c:	b410      	push	{r4}
    467e:	4604      	mov	r4, r0
    4680:	4618      	mov	r0, r3

  currentDevice.rssi = rssi;
    4682:	4b07      	ldr	r3, [pc, #28]	; (46a0 <device_found+0x24>)
    4684:	7019      	strb	r1, [r3, #0]

  if (default_conn)
    4686:	4b07      	ldr	r3, [pc, #28]	; (46a4 <device_found+0x28>)
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	b933      	cbnz	r3, 469a <device_found+0x1e>
  {
    return;
  }

  /* We're only interested in connectable events */
  if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    468c:	2a01      	cmp	r2, #1
    468e:	d804      	bhi.n	469a <device_found+0x1e>
      type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND)
  {
    bt_data_parse(ad, parse_device, (void *)addr);
    4690:	4622      	mov	r2, r4
    4692:	4905      	ldr	r1, [pc, #20]	; (46a8 <device_found+0x2c>)
  }
}
    4694:	bc10      	pop	{r4}
    bt_data_parse(ad, parse_device, (void *)addr);
    4696:	f008 bc3f 	b.w	cf18 <bt_data_parse>
}
    469a:	bc10      	pop	{r4}
    469c:	4770      	bx	lr
    469e:	bf00      	nop
    46a0:	2000481c 	.word	0x2000481c
    46a4:	200023f8 	.word	0x200023f8
    46a8:	0000471d 	.word	0x0000471d

000046ac <start_scan>:
/**
 * @brief Starts passive BLE scanning for nearby
 *          devices.
 */
static void start_scan(void)
{
    46ac:	b530      	push	{r4, r5, lr}
  int err;

  err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    46ae:	4d16      	ldr	r5, [pc, #88]	; (4708 <start_scan+0x5c>)
    46b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    46b2:	b08d      	sub	sp, #52	; 0x34
  err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    46b4:	ac01      	add	r4, sp, #4
    46b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46b8:	682b      	ldr	r3, [r5, #0]
    46ba:	4914      	ldr	r1, [pc, #80]	; (470c <start_scan+0x60>)
    46bc:	6023      	str	r3, [r4, #0]
    46be:	a801      	add	r0, sp, #4
    46c0:	f009 fb6e 	bl	dda0 <bt_le_scan_start>
  if (err)
    46c4:	4603      	mov	r3, r0
    46c6:	4812      	ldr	r0, [pc, #72]	; (4710 <start_scan+0x64>)
  {
    LOG_ERR("Scanning failed to start (err %d)\n", err);
    46c8:	6802      	ldr	r2, [r0, #0]
  if (err)
    46ca:	b17b      	cbz	r3, 46ec <start_scan+0x40>
    LOG_ERR("Scanning failed to start (err %d)\n", err);
    46cc:	0752      	lsls	r2, r2, #29
    46ce:	d00b      	beq.n	46e8 <start_scan+0x3c>
    46d0:	4a10      	ldr	r2, [pc, #64]	; (4714 <start_scan+0x68>)
    46d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    46d6:	2303      	movs	r3, #3
    46d8:	9300      	str	r3, [sp, #0]
    46da:	9309      	str	r3, [sp, #36]	; 0x24
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    46dc:	2300      	movs	r3, #0
    46de:	aa09      	add	r2, sp, #36	; 0x24
    46e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    46e4:	f021 fa7c 	bl	25be0 <z_impl_z_log_msg2_static_create>
    return;
  }

  LOG_INF("Scanning for next device...\n");
}
    46e8:	b00d      	add	sp, #52	; 0x34
    46ea:	bd30      	pop	{r4, r5, pc}
  LOG_INF("Scanning for next device...\n");
    46ec:	f002 0207 	and.w	r2, r2, #7
    46f0:	2a02      	cmp	r2, #2
    46f2:	d9f9      	bls.n	46e8 <start_scan+0x3c>
    46f4:	4a08      	ldr	r2, [pc, #32]	; (4718 <start_scan+0x6c>)
    46f6:	920a      	str	r2, [sp, #40]	; 0x28
    46f8:	2202      	movs	r2, #2
    46fa:	9200      	str	r2, [sp, #0]
    46fc:	9209      	str	r2, [sp, #36]	; 0x24
    46fe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4702:	aa09      	add	r2, sp, #36	; 0x24
    4704:	e7ee      	b.n	46e4 <start_scan+0x38>
    4706:	bf00      	nop
    4708:	0002c470 	.word	0x0002c470
    470c:	0000467d 	.word	0x0000467d
    4710:	20000980 	.word	0x20000980
    4714:	0002e428 	.word	0x0002e428
    4718:	0002e44b 	.word	0x0002e44b

0000471c <parse_device>:
{
    471c:	b570      	push	{r4, r5, r6, lr}
  if (data->type == BT_DATA_UUID128_ALL)
    471e:	7803      	ldrb	r3, [r0, #0]
    4720:	2b07      	cmp	r3, #7
{
    4722:	b088      	sub	sp, #32
  if (data->type == BT_DATA_UUID128_ALL)
    4724:	d002      	beq.n	472c <parse_device+0x10>
            return true;
    4726:	2001      	movs	r0, #1
}
    4728:	b008      	add	sp, #32
    472a:	bd70      	pop	{r4, r5, r6, pc}
  int matchedCount = 0;
    472c:	2300      	movs	r3, #0
    for (i = 0; i < data->data_len; i++)
    472e:	7844      	ldrb	r4, [r0, #1]
    4730:	4920      	ldr	r1, [pc, #128]	; (47b4 <parse_device+0x98>)
    4732:	461a      	mov	r2, r3
    4734:	4294      	cmp	r4, r2
    4736:	dc30      	bgt.n	479a <parse_device+0x7e>
    if (matchedCount == UUID_BUFFER_SIZE)
    4738:	2b10      	cmp	r3, #16
    473a:	d1f4      	bne.n	4726 <parse_device+0xa>
        LOG_INF("RSSI of Node is: %d", currentDevice.rssi);
    473c:	4d1e      	ldr	r5, [pc, #120]	; (47b8 <parse_device+0x9c>)
    473e:	682b      	ldr	r3, [r5, #0]
    4740:	f003 0307 	and.w	r3, r3, #7
    4744:	2b02      	cmp	r3, #2
    4746:	d90e      	bls.n	4766 <parse_device+0x4a>
    4748:	4b1c      	ldr	r3, [pc, #112]	; (47bc <parse_device+0xa0>)
    474a:	4a1d      	ldr	r2, [pc, #116]	; (47c0 <parse_device+0xa4>)
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4752:	2303      	movs	r3, #3
    4754:	9301      	str	r3, [sp, #4]
    4756:	9305      	str	r3, [sp, #20]
    4758:	2300      	movs	r3, #0
    475a:	aa05      	add	r2, sp, #20
    475c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4760:	4628      	mov	r0, r5
    4762:	f021 fa3d 	bl	25be0 <z_impl_z_log_msg2_static_create>
        int err = bt_le_scan_stop();
    4766:	f009 fb9b 	bl	dea0 <bt_le_scan_stop>
    476a:	4604      	mov	r4, r0
	return z_impl_k_sleep(timeout);
    476c:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    4770:	2100      	movs	r1, #0
    4772:	f01f fe87 	bl	24484 <z_impl_k_sleep>
        if (err)
    4776:	b1cc      	cbz	r4, 47ac <parse_device+0x90>
            LOG_ERR("Stop LE scan failed (err %d)", err);
    4778:	682b      	ldr	r3, [r5, #0]
    477a:	075b      	lsls	r3, r3, #29
    477c:	d0d3      	beq.n	4726 <parse_device+0xa>
    477e:	4b11      	ldr	r3, [pc, #68]	; (47c4 <parse_device+0xa8>)
    4780:	e9cd 3406 	strd	r3, r4, [sp, #24]
    4784:	2303      	movs	r3, #3
    4786:	9301      	str	r3, [sp, #4]
    4788:	9305      	str	r3, [sp, #20]
    478a:	480b      	ldr	r0, [pc, #44]	; (47b8 <parse_device+0x9c>)
    478c:	2300      	movs	r3, #0
    478e:	aa05      	add	r2, sp, #20
    4790:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4794:	f021 fa24 	bl	25be0 <z_impl_z_log_msg2_static_create>
    4798:	e7c5      	b.n	4726 <parse_device+0xa>
      temp = data->data[i];
    479a:	6846      	ldr	r6, [r0, #4]
      if (temp == corner_uuid[i])
    479c:	f831 5b02 	ldrh.w	r5, [r1], #2
    47a0:	5cb6      	ldrb	r6, [r6, r2]
    47a2:	42ae      	cmp	r6, r5
        matchedCount++;
    47a4:	bf08      	it	eq
    47a6:	3301      	addeq	r3, #1
    for (i = 0; i < data->data_len; i++)
    47a8:	3201      	adds	r2, #1
    47aa:	e7c3      	b.n	4734 <parse_device+0x18>
        start_scan();
    47ac:	f7ff ff7e 	bl	46ac <start_scan>
        return false;
    47b0:	4620      	mov	r0, r4
    47b2:	e7b9      	b.n	4728 <parse_device+0xc>
    47b4:	20000888 	.word	0x20000888
    47b8:	20000980 	.word	0x20000980
    47bc:	2000481c 	.word	0x2000481c
    47c0:	0002e468 	.word	0x0002e468
    47c4:	0002e47c 	.word	0x0002e47c

000047c8 <thread_ble_mobile_scan>:


void thread_ble_mobile_scan(void)
{
    47c8:	b500      	push	{lr}
  int err;

  err = bt_enable(NULL);
    47ca:	2000      	movs	r0, #0
{
    47cc:	b089      	sub	sp, #36	; 0x24
  err = bt_enable(NULL);
    47ce:	f008 fb2d 	bl	ce2c <bt_enable>
  default_conn = NULL;
    47d2:	4b16      	ldr	r3, [pc, #88]	; (482c <thread_ble_mobile_scan+0x64>)
    47d4:	2200      	movs	r2, #0
    47d6:	601a      	str	r2, [r3, #0]

  if (err)
    47d8:	4603      	mov	r3, r0
    47da:	4815      	ldr	r0, [pc, #84]	; (4830 <thread_ble_mobile_scan+0x68>)
    47dc:	b18b      	cbz	r3, 4802 <thread_ble_mobile_scan+0x3a>
  {
    LOG_ERR("Bluetooth init failed (err %d)\n", err);
    47de:	6801      	ldr	r1, [r0, #0]
    47e0:	0749      	lsls	r1, r1, #29
    47e2:	d00b      	beq.n	47fc <thread_ble_mobile_scan+0x34>
    47e4:	4913      	ldr	r1, [pc, #76]	; (4834 <thread_ble_mobile_scan+0x6c>)
    47e6:	e9cd 1306 	strd	r1, r3, [sp, #24]
    47ea:	2303      	movs	r3, #3
    47ec:	9301      	str	r3, [sp, #4]
    47ee:	9305      	str	r3, [sp, #20]
    47f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    47f4:	4613      	mov	r3, r2
    47f6:	aa05      	add	r2, sp, #20
    47f8:	f021 f9f2 	bl	25be0 <z_impl_z_log_msg2_static_create>
  }

  LOG_INF("Bluetooth rssi scanning initialized\n");

  start_scan();
    47fc:	b009      	add	sp, #36	; 0x24
    47fe:	f85d fb04 	ldr.w	pc, [sp], #4
  LOG_INF("Bluetooth rssi scanning initialized\n");
    4802:	6802      	ldr	r2, [r0, #0]
    4804:	f002 0207 	and.w	r2, r2, #7
    4808:	2a02      	cmp	r2, #2
    480a:	d909      	bls.n	4820 <thread_ble_mobile_scan+0x58>
    480c:	4a0a      	ldr	r2, [pc, #40]	; (4838 <thread_ble_mobile_scan+0x70>)
    480e:	9206      	str	r2, [sp, #24]
    4810:	2202      	movs	r2, #2
    4812:	9201      	str	r2, [sp, #4]
    4814:	9205      	str	r2, [sp, #20]
    4816:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    481a:	aa05      	add	r2, sp, #20
    481c:	f021 f9e0 	bl	25be0 <z_impl_z_log_msg2_static_create>
    4820:	b009      	add	sp, #36	; 0x24
    4822:	f85d eb04 	ldr.w	lr, [sp], #4
  start_scan();
    4826:	f7ff bf41 	b.w	46ac <start_scan>
    482a:	bf00      	nop
    482c:	200023f8 	.word	0x200023f8
    4830:	20000980 	.word	0x20000980
    4834:	0002e499 	.word	0x0002e499
    4838:	0002e4b9 	.word	0x0002e4b9

0000483c <write_rx>:
 * attribute.
 */
static ssize_t write_rx(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                        const void *buf, uint16_t len, uint16_t offset,
                        uint8_t flags)
{
    483c:	b538      	push	{r3, r4, r5, lr}
    483e:	460c      	mov	r4, r1
    4840:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  uint8_t *value = attr->user_data;
    4844:	68e5      	ldr	r5, [r4, #12]

  if (offset + len > sizeof(rx_buff))
    4846:	461c      	mov	r4, r3
    4848:	18c3      	adds	r3, r0, r3
    484a:	2b0c      	cmp	r3, #12
{
    484c:	4611      	mov	r1, r2
  if (offset + len > sizeof(rx_buff))
    484e:	dc08      	bgt.n	4862 <write_rx+0x26>
  {
    return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
  }

  memcpy(value + offset, buf, len);
    4850:	4622      	mov	r2, r4
    4852:	4428      	add	r0, r5
    4854:	f023 feaf 	bl	285b6 <memcpy>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4858:	4803      	ldr	r0, [pc, #12]	; (4868 <write_rx+0x2c>)
    485a:	f01f f92f 	bl	23abc <z_impl_k_sem_give>
  k_sem_give(&sem_data_arrived);

  return len;
}
    485e:	4620      	mov	r0, r4
    4860:	bd38      	pop	{r3, r4, r5, pc}
    return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    4862:	f06f 0406 	mvn.w	r4, #6
    4866:	e7fa      	b.n	485e <write_rx+0x22>
    4868:	20000b88 	.word	0x20000b88

0000486c <begin_shell>:
LOG_MODULE_REGISTER(SHELL_BASE, INITIAL_SHELL_BASE_LOG_LEVEL);

#define NO_USB -1

int begin_shell(void)
{
    486c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const struct device *shell_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_shell_uart));
    uint32_t dtr = 0;
    486e:	2000      	movs	r0, #0
    4870:	9001      	str	r0, [sp, #4]

    /* Enable the USB Driver */
    if (usb_enable(NULL))
    4872:	f004 fbf1 	bl	9058 <usb_enable>
    4876:	4604      	mov	r4, r0
    4878:	b9f0      	cbnz	r0, 48b8 <begin_shell+0x4c>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    487a:	4d11      	ldr	r5, [pc, #68]	; (48c0 <begin_shell+0x54>)

    /* Wait on DTR - 'Data Terminal Ready'
     * Will wait here until a terminal has been attached to the device
     * This is not necessary, however, can be useful for printing boot info etc..
     */
    while (!dtr)
    487c:	9b01      	ldr	r3, [sp, #4]
    487e:	b173      	cbz	r3, 489e <begin_shell+0x32>
    {
        uart_line_ctrl_get(shell_dev, UART_LINE_CTRL_DTR, &dtr);
        k_sleep(K_MSEC(100));
    }

    printk("\n=======================================\n");
    4880:	4810      	ldr	r0, [pc, #64]	; (48c4 <begin_shell+0x58>)
    4882:	f020 f9bb 	bl	24bfc <printk>
    printk("Welcome to the Weather Station Terminal\n");
    4886:	4810      	ldr	r0, [pc, #64]	; (48c8 <begin_shell+0x5c>)
    4888:	f020 f9b8 	bl	24bfc <printk>
    printk("=======================================\n");
    488c:	480f      	ldr	r0, [pc, #60]	; (48cc <begin_shell+0x60>)
    488e:	f020 f9b5 	bl	24bfc <printk>
    printk("\n--Press TAB to see available commands--\n\n");
    4892:	480f      	ldr	r0, [pc, #60]	; (48d0 <begin_shell+0x64>)
    4894:	f020 f9b2 	bl	24bfc <printk>
    return 0;
}
    4898:	4620      	mov	r0, r4
    489a:	b003      	add	sp, #12
    489c:	bd30      	pop	{r4, r5, pc}
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    489e:	68ab      	ldr	r3, [r5, #8]
    48a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    48a2:	b11b      	cbz	r3, 48ac <begin_shell+0x40>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    48a4:	aa01      	add	r2, sp, #4
    48a6:	2104      	movs	r1, #4
    48a8:	4628      	mov	r0, r5
    48aa:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
    48ac:	2100      	movs	r1, #0
    48ae:	f640 40cd 	movw	r0, #3277	; 0xccd
    48b2:	f01f fde7 	bl	24484 <z_impl_k_sleep>
    48b6:	e7e1      	b.n	487c <begin_shell+0x10>
        return NO_USB;
    48b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    48bc:	e7ec      	b.n	4898 <begin_shell+0x2c>
    48be:	bf00      	nop
    48c0:	0002bff8 	.word	0x0002bff8
    48c4:	0002e4eb 	.word	0x0002e4eb
    48c8:	0002e515 	.word	0x0002e515
    48cc:	0002e4ec 	.word	0x0002e4ec
    48d0:	0002e53e 	.word	0x0002e53e

000048d4 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    48d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48d8:	4605      	mov	r5, r0
    48da:	b08b      	sub	sp, #44	; 0x2c
    48dc:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    48de:	f015 0303 	ands.w	r3, r5, #3
    48e2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
    48e6:	9203      	str	r2, [sp, #12]
    48e8:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    48ea:	9301      	str	r3, [sp, #4]
    48ec:	f040 81f5 	bne.w	4cda <cbvprintf_package+0x406>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    48f0:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    48f2:	2d00      	cmp	r5, #0
    48f4:	f040 81f4 	bne.w	4ce0 <cbvprintf_package+0x40c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    48f8:	f001 0607 	and.w	r6, r1, #7
    48fc:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    48fe:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    4902:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    4906:	2704      	movs	r7, #4
	s = fmt--;
    4908:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    490a:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    490e:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
    4912:	4652      	mov	r2, sl
	size = sizeof(char *);
    4914:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    4916:	b105      	cbz	r5, 491a <cbvprintf_package+0x46>
				*(const char **)buf = s;
    4918:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
    491a:	9b03      	ldr	r3, [sp, #12]
    491c:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
    4920:	4bce      	ldr	r3, [pc, #824]	; (4c5c <cbvprintf_package+0x388>)
    4922:	4298      	cmp	r0, r3
    4924:	f0c0 812a 	bcc.w	4b7c <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
    4928:	4bcd      	ldr	r3, [pc, #820]	; (4c60 <cbvprintf_package+0x38c>)
    492a:	4298      	cmp	r0, r3
    492c:	f080 8126 	bcs.w	4b7c <cbvprintf_package+0x2a8>
    4930:	f1be 0f00 	cmp.w	lr, #0
    4934:	f000 813c 	beq.w	4bb0 <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
    4938:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    493c:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
    4940:	f1be 0f00 	cmp.w	lr, #0
    4944:	f000 811d 	beq.w	4b82 <cbvprintf_package+0x2ae>
    4948:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    494c:	f0c0 8119 	bcc.w	4b82 <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
    4950:	f06f 0015 	mvn.w	r0, #21
    4954:	e0f5      	b.n	4b42 <cbvprintf_package+0x26e>
		if (!parsing) {
    4956:	b932      	cbnz	r2, 4966 <cbvprintf_package+0x92>
			if (*fmt == '%') {
    4958:	2b25      	cmp	r3, #37	; 0x25
    495a:	f040 812c 	bne.w	4bb6 <cbvprintf_package+0x2e2>
				parsing = true;
    495e:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    4960:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
    4962:	46b9      	mov	r9, r7
    4964:	e127      	b.n	4bb6 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    4966:	2b2b      	cmp	r3, #43	; 0x2b
    4968:	d824      	bhi.n	49b4 <cbvprintf_package+0xe0>
    496a:	2b1f      	cmp	r3, #31
    496c:	d801      	bhi.n	4972 <cbvprintf_package+0x9e>
			parsing = false;
    496e:	2200      	movs	r2, #0
    4970:	e121      	b.n	4bb6 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    4972:	f1a3 0020 	sub.w	r0, r3, #32
    4976:	280b      	cmp	r0, #11
    4978:	d8f9      	bhi.n	496e <cbvprintf_package+0x9a>
    497a:	f20f 0c08 	addw	ip, pc, #8
    497e:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    4982:	bf00      	nop
    4984:	00004bb7 	.word	0x00004bb7
    4988:	0000496f 	.word	0x0000496f
    498c:	0000496f 	.word	0x0000496f
    4990:	00004bb7 	.word	0x00004bb7
    4994:	0000496f 	.word	0x0000496f
    4998:	0000496f 	.word	0x0000496f
    499c:	0000496f 	.word	0x0000496f
    49a0:	0000496f 	.word	0x0000496f
    49a4:	0000496f 	.word	0x0000496f
    49a8:	0000496f 	.word	0x0000496f
    49ac:	00004b5b 	.word	0x00004b5b
    49b0:	00004bb7 	.word	0x00004bb7
    49b4:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
    49b8:	fa5f fc80 	uxtb.w	ip, r0
    49bc:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    49c0:	d8d5      	bhi.n	496e <cbvprintf_package+0x9a>
    49c2:	284d      	cmp	r0, #77	; 0x4d
    49c4:	d8d3      	bhi.n	496e <cbvprintf_package+0x9a>
    49c6:	f20f 0c08 	addw	ip, pc, #8
    49ca:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    49ce:	bf00      	nop
    49d0:	00004bb7 	.word	0x00004bb7
    49d4:	00004bb7 	.word	0x00004bb7
    49d8:	0000496f 	.word	0x0000496f
    49dc:	00004bb7 	.word	0x00004bb7
    49e0:	00004bb7 	.word	0x00004bb7
    49e4:	00004bb7 	.word	0x00004bb7
    49e8:	00004bb7 	.word	0x00004bb7
    49ec:	00004bb7 	.word	0x00004bb7
    49f0:	00004bb7 	.word	0x00004bb7
    49f4:	00004bb7 	.word	0x00004bb7
    49f8:	00004bb7 	.word	0x00004bb7
    49fc:	00004bb7 	.word	0x00004bb7
    4a00:	00004bb7 	.word	0x00004bb7
    4a04:	0000496f 	.word	0x0000496f
    4a08:	0000496f 	.word	0x0000496f
    4a0c:	0000496f 	.word	0x0000496f
    4a10:	0000496f 	.word	0x0000496f
    4a14:	0000496f 	.word	0x0000496f
    4a18:	0000496f 	.word	0x0000496f
    4a1c:	0000496f 	.word	0x0000496f
    4a20:	00004b23 	.word	0x00004b23
    4a24:	0000496f 	.word	0x0000496f
    4a28:	0000496f 	.word	0x0000496f
    4a2c:	0000496f 	.word	0x0000496f
    4a30:	00004b23 	.word	0x00004b23
    4a34:	00004b23 	.word	0x00004b23
    4a38:	00004b23 	.word	0x00004b23
    4a3c:	0000496f 	.word	0x0000496f
    4a40:	0000496f 	.word	0x0000496f
    4a44:	0000496f 	.word	0x0000496f
    4a48:	0000496f 	.word	0x0000496f
    4a4c:	00004bb7 	.word	0x00004bb7
    4a50:	0000496f 	.word	0x0000496f
    4a54:	0000496f 	.word	0x0000496f
    4a58:	0000496f 	.word	0x0000496f
    4a5c:	0000496f 	.word	0x0000496f
    4a60:	0000496f 	.word	0x0000496f
    4a64:	0000496f 	.word	0x0000496f
    4a68:	0000496f 	.word	0x0000496f
    4a6c:	0000496f 	.word	0x0000496f
    4a70:	0000496f 	.word	0x0000496f
    4a74:	0000496f 	.word	0x0000496f
    4a78:	0000496f 	.word	0x0000496f
    4a7c:	00004b09 	.word	0x00004b09
    4a80:	0000496f 	.word	0x0000496f
    4a84:	0000496f 	.word	0x0000496f
    4a88:	0000496f 	.word	0x0000496f
    4a8c:	0000496f 	.word	0x0000496f
    4a90:	0000496f 	.word	0x0000496f
    4a94:	0000496f 	.word	0x0000496f
    4a98:	0000496f 	.word	0x0000496f
    4a9c:	0000496f 	.word	0x0000496f
    4aa0:	00004b23 	.word	0x00004b23
    4aa4:	0000496f 	.word	0x0000496f
    4aa8:	00004b09 	.word	0x00004b09
    4aac:	00004b09 	.word	0x00004b09
    4ab0:	00004b23 	.word	0x00004b23
    4ab4:	00004b23 	.word	0x00004b23
    4ab8:	00004b23 	.word	0x00004b23
    4abc:	00004bb7 	.word	0x00004bb7
    4ac0:	00004b09 	.word	0x00004b09
    4ac4:	00004b51 	.word	0x00004b51
    4ac8:	0000496f 	.word	0x0000496f
    4acc:	00004bb7 	.word	0x00004bb7
    4ad0:	0000496f 	.word	0x0000496f
    4ad4:	00004b55 	.word	0x00004b55
    4ad8:	00004b09 	.word	0x00004b09
    4adc:	00004b55 	.word	0x00004b55
    4ae0:	0000496f 	.word	0x0000496f
    4ae4:	0000496f 	.word	0x0000496f
    4ae8:	00004b55 	.word	0x00004b55
    4aec:	00004961 	.word	0x00004961
    4af0:	00004b09 	.word	0x00004b09
    4af4:	0000496f 	.word	0x0000496f
    4af8:	0000496f 	.word	0x0000496f
    4afc:	00004b09 	.word	0x00004b09
    4b00:	0000496f 	.word	0x0000496f
    4b04:	00004961 	.word	0x00004961
			if (fmt[-1] == 'l') {
    4b08:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    4b0c:	2a6c      	cmp	r2, #108	; 0x6c
    4b0e:	d123      	bne.n	4b58 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
    4b10:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    4b14:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
    4b16:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
    4b1a:	d02d      	beq.n	4b78 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
    4b1c:	2704      	movs	r7, #4
					size = sizeof(long long);
    4b1e:	46b9      	mov	r9, r7
    4b20:	e01b      	b.n	4b5a <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
    4b22:	f108 0807 	add.w	r8, r8, #7
    4b26:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    4b2a:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    4b2c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    4b30:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    4b34:	b155      	cbz	r5, 4b4c <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
    4b36:	eb0e 0004 	add.w	r0, lr, r4
    4b3a:	42b0      	cmp	r0, r6
    4b3c:	d904      	bls.n	4b48 <cbvprintf_package+0x274>
					return -ENOSPC;
    4b3e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    4b42:	b00b      	add	sp, #44	; 0x2c
    4b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    4b48:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
    4b4c:	3408      	adds	r4, #8
			parsing = false;
    4b4e:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
    4b50:	2708      	movs	r7, #8
    4b52:	e706      	b.n	4962 <cbvprintf_package+0x8e>
			parsing = false;
    4b54:	2200      	movs	r2, #0
    4b56:	e7e1      	b.n	4b1c <cbvprintf_package+0x248>
			parsing = false;
    4b58:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
    4b5a:	3c01      	subs	r4, #1
    4b5c:	443c      	add	r4, r7
    4b5e:	4278      	negs	r0, r7
    4b60:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    4b62:	b125      	cbz	r5, 4b6e <cbvprintf_package+0x29a>
    4b64:	eba9 0005 	sub.w	r0, r9, r5
    4b68:	4420      	add	r0, r4
    4b6a:	42b0      	cmp	r0, r6
    4b6c:	d8e7      	bhi.n	4b3e <cbvprintf_package+0x26a>
		if (*fmt == 's') {
    4b6e:	2b73      	cmp	r3, #115	; 0x73
    4b70:	d143      	bne.n	4bfa <cbvprintf_package+0x326>
			s = va_arg(ap, char *);
    4b72:	f858 0b04 	ldr.w	r0, [r8], #4
    4b76:	e6ce      	b.n	4916 <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
    4b78:	2708      	movs	r7, #8
    4b7a:	e7d0      	b.n	4b1e <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
    4b7c:	f04f 0c00 	mov.w	ip, #0
    4b80:	e6dc      	b.n	493c <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    4b82:	9b00      	ldr	r3, [sp, #0]
    4b84:	2b0f      	cmp	r3, #15
    4b86:	f63f aee3 	bhi.w	4950 <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
    4b8a:	b345      	cbz	r5, 4bde <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    4b8c:	f8dd e000 	ldr.w	lr, [sp]
    4b90:	a80a      	add	r0, sp, #40	; 0x28
    4b92:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
    4b96:	4470      	add	r0, lr
    4b98:	f1bc 0f00 	cmp.w	ip, #0
    4b9c:	d019      	beq.n	4bd2 <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    4b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ba2:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
    4ba6:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    4baa:	9b00      	ldr	r3, [sp, #0]
    4bac:	3301      	adds	r3, #1
    4bae:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
    4bb0:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    4bb2:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
    4bb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4bba:	2b00      	cmp	r3, #0
    4bbc:	f47f aecb 	bne.w	4956 <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
    4bc0:	1b60      	subs	r0, r4, r5
    4bc2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4bc6:	f4bf aec3 	bcs.w	4950 <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
    4bca:	bb9d      	cbnz	r5, 4c34 <cbvprintf_package+0x360>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    4bcc:	3e08      	subs	r6, #8
    4bce:	4430      	add	r0, r6
    4bd0:	e7b7      	b.n	4b42 <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    4bd2:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
    4bd6:	9b02      	ldr	r3, [sp, #8]
    4bd8:	3301      	adds	r3, #1
    4bda:	9302      	str	r3, [sp, #8]
    4bdc:	e7e5      	b.n	4baa <cbvprintf_package+0x2d6>
				} else if (is_ro) {
    4bde:	f1bc 0f00 	cmp.w	ip, #0
    4be2:	d001      	beq.n	4be8 <cbvprintf_package+0x314>
					len += 1;
    4be4:	3601      	adds	r6, #1
    4be6:	e7e0      	b.n	4baa <cbvprintf_package+0x2d6>
    4be8:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
    4bec:	f023 fc8d 	bl	2850a <strlen>
    4bf0:	3602      	adds	r6, #2
    4bf2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4bf6:	4406      	add	r6, r0
    4bf8:	e7d7      	b.n	4baa <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
    4bfa:	f1b9 0f04 	cmp.w	r9, #4
    4bfe:	d108      	bne.n	4c12 <cbvprintf_package+0x33e>
			int v = va_arg(ap, int);
    4c00:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
    4c04:	b115      	cbz	r5, 4c0c <cbvprintf_package+0x338>
			int v = va_arg(ap, int);
    4c06:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
    4c0a:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    4c0c:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    4c0e:	4680      	mov	r8, r0
    4c10:	e7d1      	b.n	4bb6 <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
    4c12:	f1b9 0f08 	cmp.w	r9, #8
    4c16:	f47f ae9b 	bne.w	4950 <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
    4c1a:	f108 0307 	add.w	r3, r8, #7
    4c1e:	f023 0307 	bic.w	r3, r3, #7
    4c22:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
    4c26:	b11d      	cbz	r5, 4c30 <cbvprintf_package+0x35c>
			long long v = va_arg(ap, long long);
    4c28:	e9d3 bc00 	ldrd	fp, ip, [r3]
    4c2c:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    4c30:	3408      	adds	r4, #8
    4c32:	e7c0      	b.n	4bb6 <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
    4c34:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    4c36:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    4c38:	0880      	lsrs	r0, r0, #2
    4c3a:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
    4c3c:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
    4c3e:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    4c42:	f1ba 0f00 	cmp.w	sl, #0
    4c46:	d005      	beq.n	4c54 <cbvprintf_package+0x380>
    4c48:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
    4c4a:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
    4c4e:	9a00      	ldr	r2, [sp, #0]
    4c50:	429a      	cmp	r2, r3
    4c52:	d107      	bne.n	4c64 <cbvprintf_package+0x390>
		if (BUF_OFFSET + 1 + size > len) {
    4c54:	f1c5 0901 	rsb	r9, r5, #1
    4c58:	e039      	b.n	4cce <cbvprintf_package+0x3fa>
    4c5a:	bf00      	nop
    4c5c:	0002bf08 	.word	0x0002bf08
    4c60:	00031e04 	.word	0x00031e04
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    4c64:	f811 2b01 	ldrb.w	r2, [r1], #1
    4c68:	0617      	lsls	r7, r2, #24
    4c6a:	d507      	bpl.n	4c7c <cbvprintf_package+0x3a8>
			if (BUF_OFFSET + 1 > len) {
    4c6c:	1827      	adds	r7, r4, r0
    4c6e:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    4c70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    4c74:	f63f af63 	bhi.w	4b3e <cbvprintf_package+0x26a>
			*buf++ = pos;
    4c78:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
    4c7c:	3301      	adds	r3, #1
    4c7e:	e7e6      	b.n	4c4e <cbvprintf_package+0x37a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    4c80:	9b01      	ldr	r3, [sp, #4]
    4c82:	aa06      	add	r2, sp, #24
    4c84:	f812 8003 	ldrb.w	r8, [r2, r3]
    4c88:	f1ba 0f00 	cmp.w	sl, #0
    4c8c:	d002      	beq.n	4c94 <cbvprintf_package+0x3c0>
    4c8e:	f018 0f80 	tst.w	r8, #128	; 0x80
    4c92:	d119      	bne.n	4cc8 <cbvprintf_package+0x3f4>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    4c94:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    4c98:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    4c9a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    4c9e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
    4ca2:	4608      	mov	r0, r1
    4ca4:	9102      	str	r1, [sp, #8]
    4ca6:	f023 fc30 	bl	2850a <strlen>
		if (BUF_OFFSET + 1 + size > len) {
    4caa:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
    4cae:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    4cb0:	443a      	add	r2, r7
    4cb2:	42b2      	cmp	r2, r6
    4cb4:	f63f af43 	bhi.w	4b3e <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
    4cb8:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
    4cbc:	9902      	ldr	r1, [sp, #8]
    4cbe:	4620      	mov	r0, r4
    4cc0:	463a      	mov	r2, r7
    4cc2:	f023 fc78 	bl	285b6 <memcpy>
		buf += size;
    4cc6:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
    4cc8:	9b01      	ldr	r3, [sp, #4]
    4cca:	3301      	adds	r3, #1
    4ccc:	9301      	str	r3, [sp, #4]
    4cce:	e9dd 2300 	ldrd	r2, r3, [sp]
    4cd2:	429a      	cmp	r2, r3
    4cd4:	d1d4      	bne.n	4c80 <cbvprintf_package+0x3ac>
	return BUF_OFFSET;
    4cd6:	1b60      	subs	r0, r4, r5
    4cd8:	e733      	b.n	4b42 <cbvprintf_package+0x26e>
		return -EFAULT;
    4cda:	f06f 000d 	mvn.w	r0, #13
    4cde:	e730      	b.n	4b42 <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    4ce0:	2907      	cmp	r1, #7
    4ce2:	f63f ae0e 	bhi.w	4902 <cbvprintf_package+0x2e>
    4ce6:	e72a      	b.n	4b3e <cbvprintf_package+0x26a>

00004ce8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4ce8:	b530      	push	{r4, r5, lr}
    4cea:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4cec:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4cf0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4cf2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4cf4:	a901      	add	r1, sp, #4
    4cf6:	4805      	ldr	r0, [pc, #20]	; (4d0c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4cf8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4cfa:	f000 f8e9 	bl	4ed0 <cbvprintf>

	if (ctx.count < ctx.max) {
    4cfe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4d02:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4d04:	bfb8      	it	lt
    4d06:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4d08:	b005      	add	sp, #20
    4d0a:	bd30      	pop	{r4, r5, pc}
    4d0c:	00024bd7 	.word	0x00024bd7

00004d10 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d14:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4d18:	f019 0808 	ands.w	r8, r9, #8
{
    4d1c:	4604      	mov	r4, r0
    4d1e:	4693      	mov	fp, r2
	if (processing) {
    4d20:	d00d      	beq.n	4d3e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4d22:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4d24:	bf0c      	ite	eq
    4d26:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4d2a:	f049 0920 	orrne.w	r9, r9, #32
    4d2e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4d32:	f38b 8811 	msr	BASEPRI, fp
    4d36:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4d3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d3e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4d42:	2902      	cmp	r1, #2
    4d44:	d107      	bne.n	4d56 <process_event+0x46>
			evt = process_recheck(mgr);
    4d46:	4620      	mov	r0, r4
    4d48:	f01f ff8c 	bl	24c64 <process_recheck>
		if (evt == EVT_NOP) {
    4d4c:	2800      	cmp	r0, #0
    4d4e:	d0f0      	beq.n	4d32 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4d50:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d52:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    4d54:	d14e      	bne.n	4df4 <process_event+0xe4>
			res = mgr->last_res;
    4d56:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d58:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4d5a:	2f00      	cmp	r7, #0
    4d5c:	da15      	bge.n	4d8a <process_event+0x7a>
		*clients = mgr->clients;
    4d5e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d60:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4d64:	e9c4 8800 	strd	r8, r8, [r4]
    4d68:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4d6c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4d6e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4d70:	8b21      	ldrh	r1, [r4, #24]
    4d72:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4d76:	45ca      	cmp	sl, r9
    4d78:	d002      	beq.n	4d80 <process_event+0x70>
		if (do_monitors
    4d7a:	68a3      	ldr	r3, [r4, #8]
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d15a      	bne.n	4e36 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    4d80:	b90d      	cbnz	r5, 4d86 <process_event+0x76>
		    || (transit != NULL)) {
    4d82:	2e00      	cmp	r6, #0
    4d84:	d071      	beq.n	4e6a <process_event+0x15a>
    4d86:	2300      	movs	r3, #0
    4d88:	e056      	b.n	4e38 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d8a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4d8e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4d90:	2a01      	cmp	r2, #1
    4d92:	d81e      	bhi.n	4dd2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d94:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4d98:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4d9a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d9c:	b289      	uxth	r1, r1
    4d9e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4da2:	d10a      	bne.n	4dba <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4da4:	b13d      	cbz	r5, 4db6 <process_event+0xa6>
    4da6:	8b63      	ldrh	r3, [r4, #26]
    4da8:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    4daa:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    4dac:	3301      	adds	r3, #1
    4dae:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4db0:	2a00      	cmp	r2, #0
    4db2:	d1fa      	bne.n	4daa <process_event+0x9a>
    4db4:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4db6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4dba:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4dbc:	4620      	mov	r0, r4
    4dbe:	f01f ff51 	bl	24c64 <process_recheck>
    4dc2:	4606      	mov	r6, r0
    4dc4:	2800      	cmp	r0, #0
    4dc6:	d0d3      	beq.n	4d70 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4dc8:	8b23      	ldrh	r3, [r4, #24]
    4dca:	f043 0320 	orr.w	r3, r3, #32
    4dce:	8323      	strh	r3, [r4, #24]
    4dd0:	e7cd      	b.n	4d6e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4dd2:	2b04      	cmp	r3, #4
    4dd4:	d10c      	bne.n	4df0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dd6:	f021 0107 	bic.w	r1, r1, #7
    4dda:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4ddc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4dde:	4620      	mov	r0, r4
    4de0:	f01f ff40 	bl	24c64 <process_recheck>
    4de4:	4605      	mov	r5, r0
    4de6:	2800      	cmp	r0, #0
    4de8:	d0c1      	beq.n	4d6e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4dea:	f041 0120 	orr.w	r1, r1, #32
    4dee:	8321      	strh	r1, [r4, #24]
    4df0:	2500      	movs	r5, #0
    4df2:	e7bc      	b.n	4d6e <process_event+0x5e>
		} else if (evt == EVT_START) {
    4df4:	2803      	cmp	r0, #3
    4df6:	d109      	bne.n	4e0c <process_event+0xfc>
			transit = mgr->transitions->start;
    4df8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dfa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4dfe:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e00:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4e04:	8323      	strh	r3, [r4, #24]
}
    4e06:	2500      	movs	r5, #0
		res = 0;
    4e08:	462f      	mov	r7, r5
    4e0a:	e7b1      	b.n	4d70 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4e0c:	2804      	cmp	r0, #4
    4e0e:	d106      	bne.n	4e1e <process_event+0x10e>
			transit = mgr->transitions->stop;
    4e10:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e12:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4e16:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e18:	f043 0304 	orr.w	r3, r3, #4
    4e1c:	e7f2      	b.n	4e04 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    4e1e:	2805      	cmp	r0, #5
    4e20:	d106      	bne.n	4e30 <process_event+0x120>
			transit = mgr->transitions->reset;
    4e22:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e24:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4e28:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e2a:	f043 0305 	orr.w	r3, r3, #5
    4e2e:	e7e9      	b.n	4e04 <process_event+0xf4>
    4e30:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4e32:	462e      	mov	r6, r5
    4e34:	e7e8      	b.n	4e08 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    4e36:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4e38:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4e3c:	8321      	strh	r1, [r4, #24]
    4e3e:	f38b 8811 	msr	BASEPRI, fp
    4e42:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4e46:	b9fb      	cbnz	r3, 4e88 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    4e48:	bb85      	cbnz	r5, 4eac <process_event+0x19c>
			if (transit != NULL) {
    4e4a:	b116      	cbz	r6, 4e52 <process_event+0x142>
				transit(mgr, transition_complete);
    4e4c:	491f      	ldr	r1, [pc, #124]	; (4ecc <process_event+0x1bc>)
    4e4e:	4620      	mov	r0, r4
    4e50:	47b0      	blx	r6
	__asm__ volatile(
    4e52:	f04f 0320 	mov.w	r3, #32
    4e56:	f3ef 8b11 	mrs	fp, BASEPRI
    4e5a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e5e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4e62:	8b23      	ldrh	r3, [r4, #24]
    4e64:	f023 0308 	bic.w	r3, r3, #8
    4e68:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4e6a:	8b23      	ldrh	r3, [r4, #24]
    4e6c:	06da      	lsls	r2, r3, #27
    4e6e:	d525      	bpl.n	4ebc <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4e70:	f023 0310 	bic.w	r3, r3, #16
    4e74:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    4e76:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4e78:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4e7c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4e80:	2900      	cmp	r1, #0
    4e82:	f47f af5e 	bne.w	4d42 <process_event+0x32>
out:
    4e86:	e754      	b.n	4d32 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    4e88:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e8a:	2900      	cmp	r1, #0
    4e8c:	d0dc      	beq.n	4e48 <process_event+0x138>
	return node->next;
    4e8e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    4e92:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4e96:	463b      	mov	r3, r7
    4e98:	4652      	mov	r2, sl
    4e9a:	4620      	mov	r0, r4
    4e9c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e9e:	f1b9 0f00 	cmp.w	r9, #0
    4ea2:	d0d1      	beq.n	4e48 <process_event+0x138>
    4ea4:	4649      	mov	r1, r9
    4ea6:	f8d9 9000 	ldr.w	r9, [r9]
    4eaa:	e7f2      	b.n	4e92 <process_event+0x182>
    4eac:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4eae:	463b      	mov	r3, r7
    4eb0:	4652      	mov	r2, sl
    4eb2:	4620      	mov	r0, r4
    4eb4:	682d      	ldr	r5, [r5, #0]
    4eb6:	f01f fef1 	bl	24c9c <notify_one>
    4eba:	e7c5      	b.n	4e48 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4ebc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4ec0:	bf1e      	ittt	ne
    4ec2:	f023 0320 	bicne.w	r3, r3, #32
    4ec6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4ec8:	2102      	movne	r1, #2
    4eca:	e7d5      	b.n	4e78 <process_event+0x168>
    4ecc:	00024cc9 	.word	0x00024cc9

00004ed0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ed4:	4681      	mov	r9, r0
    4ed6:	b09b      	sub	sp, #108	; 0x6c
    4ed8:	468a      	mov	sl, r1
    4eda:	4615      	mov	r5, r2
    4edc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4ede:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4ee0:	7828      	ldrb	r0, [r5, #0]
    4ee2:	b910      	cbnz	r0, 4eea <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4ee4:	4630      	mov	r0, r6
    4ee6:	f000 bdee 	b.w	5ac6 <cbvprintf+0xbf6>
			OUTC(*fp++);
    4eea:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    4eec:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    4eee:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    4ef0:	d006      	beq.n	4f00 <cbvprintf+0x30>
			OUTC(*fp++);
    4ef2:	4651      	mov	r1, sl
			OUTC('%');
    4ef4:	47c8      	blx	r9
    4ef6:	2800      	cmp	r0, #0
    4ef8:	f2c0 85e5 	blt.w	5ac6 <cbvprintf+0xbf6>
    4efc:	3601      	adds	r6, #1
		if (bps == NULL) {
    4efe:	e24c      	b.n	539a <cbvprintf+0x4ca>
		} state = {
    4f00:	2218      	movs	r2, #24
    4f02:	2100      	movs	r1, #0
    4f04:	a80c      	add	r0, sp, #48	; 0x30
    4f06:	f023 fb61 	bl	285cc <memset>
	if (*sp == '%') {
    4f0a:	786b      	ldrb	r3, [r5, #1]
    4f0c:	2b25      	cmp	r3, #37	; 0x25
    4f0e:	d07c      	beq.n	500a <cbvprintf+0x13a>
    4f10:	2200      	movs	r2, #0
    4f12:	1c68      	adds	r0, r5, #1
    4f14:	4696      	mov	lr, r2
    4f16:	4690      	mov	r8, r2
    4f18:	4694      	mov	ip, r2
    4f1a:	4617      	mov	r7, r2
    4f1c:	4601      	mov	r1, r0
		switch (*sp) {
    4f1e:	f810 3b01 	ldrb.w	r3, [r0], #1
    4f22:	2b2b      	cmp	r3, #43	; 0x2b
    4f24:	f000 80a0 	beq.w	5068 <cbvprintf+0x198>
    4f28:	f200 8097 	bhi.w	505a <cbvprintf+0x18a>
    4f2c:	2b20      	cmp	r3, #32
    4f2e:	f000 809e 	beq.w	506e <cbvprintf+0x19e>
    4f32:	2b23      	cmp	r3, #35	; 0x23
    4f34:	f000 809e 	beq.w	5074 <cbvprintf+0x1a4>
    4f38:	b12f      	cbz	r7, 4f46 <cbvprintf+0x76>
    4f3a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4f3e:	f040 0004 	orr.w	r0, r0, #4
    4f42:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    4f46:	f1bc 0f00 	cmp.w	ip, #0
    4f4a:	d005      	beq.n	4f58 <cbvprintf+0x88>
    4f4c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4f50:	f040 0008 	orr.w	r0, r0, #8
    4f54:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    4f58:	f1b8 0f00 	cmp.w	r8, #0
    4f5c:	d005      	beq.n	4f6a <cbvprintf+0x9a>
    4f5e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4f62:	f040 0010 	orr.w	r0, r0, #16
    4f66:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    4f6a:	f1be 0f00 	cmp.w	lr, #0
    4f6e:	d005      	beq.n	4f7c <cbvprintf+0xac>
    4f70:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4f74:	f040 0020 	orr.w	r0, r0, #32
    4f78:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    4f7c:	b12a      	cbz	r2, 4f8a <cbvprintf+0xba>
    4f7e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    4f86:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    4f8a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4f8e:	f002 0044 	and.w	r0, r2, #68	; 0x44
    4f92:	2844      	cmp	r0, #68	; 0x44
    4f94:	d103      	bne.n	4f9e <cbvprintf+0xce>
		conv->flag_zero = false;
    4f96:	f36f 1286 	bfc	r2, #6, #1
    4f9a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    4f9e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    4fa2:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    4fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4fa8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    4fac:	d17e      	bne.n	50ac <cbvprintf+0x1dc>
		conv->width_star = true;
    4fae:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4fb2:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    4fb6:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    4fb8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    4fbc:	781a      	ldrb	r2, [r3, #0]
    4fbe:	2a2e      	cmp	r2, #46	; 0x2e
    4fc0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4fc4:	bf0c      	ite	eq
    4fc6:	2101      	moveq	r1, #1
    4fc8:	2100      	movne	r1, #0
    4fca:	f361 0241 	bfi	r2, r1, #1, #1
    4fce:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    4fd2:	d177      	bne.n	50c4 <cbvprintf+0x1f4>
	if (*sp == '*') {
    4fd4:	785a      	ldrb	r2, [r3, #1]
    4fd6:	2a2a      	cmp	r2, #42	; 0x2a
    4fd8:	d06d      	beq.n	50b6 <cbvprintf+0x1e6>
	++sp;
    4fda:	3301      	adds	r3, #1
	size_t val = 0;
    4fdc:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    4fde:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4fe2:	4618      	mov	r0, r3
    4fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
    4fe8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4fec:	2f09      	cmp	r7, #9
    4fee:	f240 80ab 	bls.w	5148 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    4ff2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    4ff6:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    4ff8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    4ffc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    5000:	f361 0241 	bfi	r2, r1, #1, #1
    5004:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    5008:	e05c      	b.n	50c4 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    500a:	1caa      	adds	r2, r5, #2
    500c:	9202      	str	r2, [sp, #8]
    500e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    5012:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5016:	07df      	lsls	r7, r3, #31
    5018:	f140 8173 	bpl.w	5302 <cbvprintf+0x432>
			width = va_arg(ap, int);
    501c:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    5020:	f1bb 0f00 	cmp.w	fp, #0
    5024:	da07      	bge.n	5036 <cbvprintf+0x166>
				conv->flag_dash = true;
    5026:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    502a:	f042 0204 	orr.w	r2, r2, #4
    502e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    5032:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    5036:	0758      	lsls	r0, r3, #29
    5038:	f140 816c 	bpl.w	5314 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    503c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    5040:	f1b8 0f00 	cmp.w	r8, #0
    5044:	f280 816b 	bge.w	531e <cbvprintf+0x44e>
				conv->prec_present = false;
    5048:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    504c:	f36f 0341 	bfc	r3, #1, #1
    5050:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    5054:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5058:	e161      	b.n	531e <cbvprintf+0x44e>
		switch (*sp) {
    505a:	2b2d      	cmp	r3, #45	; 0x2d
    505c:	d00d      	beq.n	507a <cbvprintf+0x1aa>
    505e:	2b30      	cmp	r3, #48	; 0x30
    5060:	f47f af6a 	bne.w	4f38 <cbvprintf+0x68>
			conv->flag_zero = true;
    5064:	2201      	movs	r2, #1
	} while (loop);
    5066:	e759      	b.n	4f1c <cbvprintf+0x4c>
			conv->flag_plus = true;
    5068:	f04f 0c01 	mov.w	ip, #1
    506c:	e756      	b.n	4f1c <cbvprintf+0x4c>
			conv->flag_space = true;
    506e:	f04f 0801 	mov.w	r8, #1
    5072:	e753      	b.n	4f1c <cbvprintf+0x4c>
			conv->flag_hash = true;
    5074:	f04f 0e01 	mov.w	lr, #1
    5078:	e750      	b.n	4f1c <cbvprintf+0x4c>
		switch (*sp) {
    507a:	2701      	movs	r7, #1
    507c:	e74e      	b.n	4f1c <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    507e:	fb0c 7202 	mla	r2, ip, r2, r7
    5082:	3a30      	subs	r2, #48	; 0x30
    5084:	4603      	mov	r3, r0
    5086:	4618      	mov	r0, r3
    5088:	f810 7b01 	ldrb.w	r7, [r0], #1
    508c:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5090:	f1be 0f09 	cmp.w	lr, #9
    5094:	d9f3      	bls.n	507e <cbvprintf+0x1ae>
	if (sp != wp) {
    5096:	4299      	cmp	r1, r3
    5098:	d090      	beq.n	4fbc <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    509a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    509e:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    50a0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    50a2:	f362 0141 	bfi	r1, r2, #1, #1
    50a6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    50aa:	e787      	b.n	4fbc <cbvprintf+0xec>
    50ac:	460b      	mov	r3, r1
	size_t val = 0;
    50ae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    50b0:	f04f 0c0a 	mov.w	ip, #10
    50b4:	e7e7      	b.n	5086 <cbvprintf+0x1b6>
		conv->prec_star = true;
    50b6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    50ba:	f042 0204 	orr.w	r2, r2, #4
    50be:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    50c2:	3302      	adds	r3, #2
	switch (*sp) {
    50c4:	4619      	mov	r1, r3
    50c6:	f811 2b01 	ldrb.w	r2, [r1], #1
    50ca:	2a6c      	cmp	r2, #108	; 0x6c
    50cc:	d05c      	beq.n	5188 <cbvprintf+0x2b8>
    50ce:	d840      	bhi.n	5152 <cbvprintf+0x282>
    50d0:	2a68      	cmp	r2, #104	; 0x68
    50d2:	d046      	beq.n	5162 <cbvprintf+0x292>
    50d4:	2a6a      	cmp	r2, #106	; 0x6a
    50d6:	d061      	beq.n	519c <cbvprintf+0x2cc>
    50d8:	2a4c      	cmp	r2, #76	; 0x4c
    50da:	d067      	beq.n	51ac <cbvprintf+0x2dc>
    50dc:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    50de:	460b      	mov	r3, r1
    50e0:	f813 2b01 	ldrb.w	r2, [r3], #1
    50e4:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    50e6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    50e8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    50ec:	f200 80df 	bhi.w	52ae <cbvprintf+0x3de>
    50f0:	2a57      	cmp	r2, #87	; 0x57
    50f2:	d868      	bhi.n	51c6 <cbvprintf+0x2f6>
    50f4:	2a41      	cmp	r2, #65	; 0x41
    50f6:	d004      	beq.n	5102 <cbvprintf+0x232>
    50f8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    50fc:	2b02      	cmp	r3, #2
    50fe:	f200 80d6 	bhi.w	52ae <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    5102:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    5106:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    510a:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    510c:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    5110:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    5114:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    5118:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    511c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    5120:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    5124:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    5128:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    512a:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    512e:	b2cb      	uxtb	r3, r1
    5130:	f100 80e5 	bmi.w	52fe <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    5134:	f003 0278 	and.w	r2, r3, #120	; 0x78
    5138:	2a18      	cmp	r2, #24
    513a:	f040 80b5 	bne.w	52a8 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    513e:	f36f 03c6 	bfc	r3, #3, #4
    5142:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    5146:	e09c      	b.n	5282 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    5148:	fb0c 2101 	mla	r1, ip, r1, r2
    514c:	3930      	subs	r1, #48	; 0x30
    514e:	4603      	mov	r3, r0
    5150:	e747      	b.n	4fe2 <cbvprintf+0x112>
	switch (*sp) {
    5152:	2a74      	cmp	r2, #116	; 0x74
    5154:	d026      	beq.n	51a4 <cbvprintf+0x2d4>
    5156:	2a7a      	cmp	r2, #122	; 0x7a
    5158:	d1c0      	bne.n	50dc <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    515a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    515e:	2206      	movs	r2, #6
    5160:	e00d      	b.n	517e <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    5162:	785a      	ldrb	r2, [r3, #1]
    5164:	2a68      	cmp	r2, #104	; 0x68
    5166:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    516a:	d106      	bne.n	517a <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    516c:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    516e:	f361 02c6 	bfi	r2, r1, #3, #4
    5172:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    5176:	1c99      	adds	r1, r3, #2
    5178:	e7b1      	b.n	50de <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    517a:	4613      	mov	r3, r2
    517c:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    517e:	f362 03c6 	bfi	r3, r2, #3, #4
    5182:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    5186:	e7aa      	b.n	50de <cbvprintf+0x20e>
		if (*++sp == 'l') {
    5188:	785a      	ldrb	r2, [r3, #1]
    518a:	2a6c      	cmp	r2, #108	; 0x6c
    518c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5190:	d101      	bne.n	5196 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    5192:	2104      	movs	r1, #4
    5194:	e7eb      	b.n	516e <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    5196:	4613      	mov	r3, r2
    5198:	2203      	movs	r2, #3
    519a:	e7f0      	b.n	517e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    519c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    51a0:	2205      	movs	r2, #5
    51a2:	e7ec      	b.n	517e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    51a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    51a8:	2207      	movs	r2, #7
    51aa:	e7e8      	b.n	517e <cbvprintf+0x2ae>
		conv->unsupported = true;
    51ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    51b0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    51b4:	f023 0302 	bic.w	r3, r3, #2
    51b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    51bc:	f043 0302 	orr.w	r3, r3, #2
    51c0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    51c4:	e78b      	b.n	50de <cbvprintf+0x20e>
	switch (conv->specifier) {
    51c6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    51ca:	2b20      	cmp	r3, #32
    51cc:	d86f      	bhi.n	52ae <cbvprintf+0x3de>
    51ce:	a101      	add	r1, pc, #4	; (adr r1, 51d4 <cbvprintf+0x304>)
    51d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    51d4:	00005287 	.word	0x00005287
    51d8:	000052af 	.word	0x000052af
    51dc:	000052af 	.word	0x000052af
    51e0:	000052af 	.word	0x000052af
    51e4:	000052af 	.word	0x000052af
    51e8:	000052af 	.word	0x000052af
    51ec:	000052af 	.word	0x000052af
    51f0:	000052af 	.word	0x000052af
    51f4:	000052af 	.word	0x000052af
    51f8:	00005103 	.word	0x00005103
    51fc:	000052af 	.word	0x000052af
    5200:	00005287 	.word	0x00005287
    5204:	00005259 	.word	0x00005259
    5208:	00005103 	.word	0x00005103
    520c:	00005103 	.word	0x00005103
    5210:	00005103 	.word	0x00005103
    5214:	000052af 	.word	0x000052af
    5218:	00005259 	.word	0x00005259
    521c:	000052af 	.word	0x000052af
    5220:	000052af 	.word	0x000052af
    5224:	000052af 	.word	0x000052af
    5228:	000052af 	.word	0x000052af
    522c:	000052bd 	.word	0x000052bd
    5230:	00005287 	.word	0x00005287
    5234:	000052e1 	.word	0x000052e1
    5238:	000052af 	.word	0x000052af
    523c:	000052af 	.word	0x000052af
    5240:	000052e1 	.word	0x000052e1
    5244:	000052af 	.word	0x000052af
    5248:	00005287 	.word	0x00005287
    524c:	000052af 	.word	0x000052af
    5250:	000052af 	.word	0x000052af
    5254:	00005287 	.word	0x00005287
		conv->specifier_cat = SPECIFIER_SINT;
    5258:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    525c:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    525e:	f361 0302 	bfi	r3, r1, #0, #3
    5262:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5266:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    526a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    526e:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    5270:	bf02      	ittt	eq
    5272:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    5276:	f041 0101 	orreq.w	r1, r1, #1
    527a:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    527e:	2a63      	cmp	r2, #99	; 0x63
    5280:	d005      	beq.n	528e <cbvprintf+0x3be>
	bool unsupported = false;
    5282:	2300      	movs	r3, #0
    5284:	e006      	b.n	5294 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    5286:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    528a:	2102      	movs	r1, #2
    528c:	e7e7      	b.n	525e <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    528e:	3b00      	subs	r3, #0
    5290:	bf18      	it	ne
    5292:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    5294:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5298:	f3c2 0140 	ubfx	r1, r2, #1, #1
    529c:	430b      	orrs	r3, r1
    529e:	f363 0241 	bfi	r2, r3, #1, #1
    52a2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    52a6:	e6b4      	b.n	5012 <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    52a8:	f013 0f38 	tst.w	r3, #56	; 0x38
    52ac:	d0e9      	beq.n	5282 <cbvprintf+0x3b2>
			conv->invalid = true;
    52ae:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    52b2:	f043 0301 	orr.w	r3, r3, #1
    52b6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    52ba:	e7e2      	b.n	5282 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    52bc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    52c0:	2203      	movs	r2, #3
    52c2:	f362 0302 	bfi	r3, r2, #0, #3
    52c6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    52ca:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    52ce:	f003 0378 	and.w	r3, r3, #120	; 0x78
    52d2:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    52d6:	f1dc 0300 	rsbs	r3, ip, #0
    52da:	eb43 030c 	adc.w	r3, r3, ip
    52de:	e7d9      	b.n	5294 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    52e0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    52e4:	2203      	movs	r2, #3
    52e6:	f362 0302 	bfi	r3, r2, #0, #3
    52ea:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    52ee:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    52f2:	f013 0f78 	tst.w	r3, #120	; 0x78
    52f6:	bf14      	ite	ne
    52f8:	2301      	movne	r3, #1
    52fa:	2300      	moveq	r3, #0
    52fc:	e7ca      	b.n	5294 <cbvprintf+0x3c4>
			unsupported = true;
    52fe:	2301      	movs	r3, #1
    5300:	e7c8      	b.n	5294 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    5302:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    5306:	2a00      	cmp	r2, #0
			width = conv->width_value;
    5308:	bfb4      	ite	lt
    530a:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    530e:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    5312:	e690      	b.n	5036 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    5314:	0799      	lsls	r1, r3, #30
    5316:	f57f ae9d 	bpl.w	5054 <cbvprintf+0x184>
			precision = conv->prec_value;
    531a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    531e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5322:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    5324:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    5328:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    532c:	f003 0207 	and.w	r2, r3, #7
    5330:	2a04      	cmp	r2, #4
    5332:	d109      	bne.n	5348 <cbvprintf+0x478>
		    && !conv->prec_present) {
    5334:	078a      	lsls	r2, r1, #30
    5336:	d407      	bmi.n	5348 <cbvprintf+0x478>
			if (conv->specifier_a) {
    5338:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    533c:	2a00      	cmp	r2, #0
    533e:	bfb4      	ite	lt
    5340:	f04f 080d 	movlt.w	r8, #13
    5344:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    5348:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    534c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    534e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    5352:	d137      	bne.n	53c4 <cbvprintf+0x4f4>
			switch (length_mod) {
    5354:	1ecb      	subs	r3, r1, #3
    5356:	2b04      	cmp	r3, #4
    5358:	d821      	bhi.n	539e <cbvprintf+0x4ce>
    535a:	e8df f003 	tbb	[pc, r3]
    535e:	0903      	.short	0x0903
    5360:	2009      	.short	0x2009
    5362:	20          	.byte	0x20
    5363:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    5364:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    5368:	17da      	asrs	r2, r3, #31
    536a:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    536e:	e006      	b.n	537e <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    5370:	3407      	adds	r4, #7
    5372:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    5376:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    537a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    537e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5382:	07bb      	lsls	r3, r7, #30
    5384:	d056      	beq.n	5434 <cbvprintf+0x564>
			OUTS(sp, fp);
    5386:	9b02      	ldr	r3, [sp, #8]
    5388:	462a      	mov	r2, r5
    538a:	4651      	mov	r1, sl
    538c:	4648      	mov	r0, r9
    538e:	f01f ff9a 	bl	252c6 <outs>
    5392:	2800      	cmp	r0, #0
    5394:	f2c0 8397 	blt.w	5ac6 <cbvprintf+0xbf6>
    5398:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    539a:	9d02      	ldr	r5, [sp, #8]
    539c:	e5a0      	b.n	4ee0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    539e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    53a2:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    53a4:	ea4f 72e3 	mov.w	r2, r3, asr #31
    53a8:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    53ac:	d105      	bne.n	53ba <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    53ae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    53b2:	930c      	str	r3, [sp, #48]	; 0x30
    53b4:	2300      	movs	r3, #0
    53b6:	930d      	str	r3, [sp, #52]	; 0x34
    53b8:	e7e1      	b.n	537e <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    53ba:	2902      	cmp	r1, #2
    53bc:	d1df      	bne.n	537e <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    53be:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    53c2:	e7d1      	b.n	5368 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    53c4:	2b02      	cmp	r3, #2
    53c6:	d123      	bne.n	5410 <cbvprintf+0x540>
			switch (length_mod) {
    53c8:	1ecb      	subs	r3, r1, #3
    53ca:	2b04      	cmp	r3, #4
    53cc:	d813      	bhi.n	53f6 <cbvprintf+0x526>
    53ce:	e8df f003 	tbb	[pc, r3]
    53d2:	0a03      	.short	0x0a03
    53d4:	120a      	.short	0x120a
    53d6:	12          	.byte	0x12
    53d7:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    53d8:	6822      	ldr	r2, [r4, #0]
    53da:	920c      	str	r2, [sp, #48]	; 0x30
    53dc:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    53de:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    53e0:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    53e2:	4604      	mov	r4, r0
    53e4:	e7cb      	b.n	537e <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    53e6:	1de0      	adds	r0, r4, #7
    53e8:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    53ec:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    53f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    53f4:	e7f5      	b.n	53e2 <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    53f6:	f854 3b04 	ldr.w	r3, [r4], #4
    53fa:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    53fc:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    53fe:	f04f 0300 	mov.w	r3, #0
    5402:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    5404:	d0d3      	beq.n	53ae <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    5406:	2902      	cmp	r1, #2
    5408:	d1b9      	bne.n	537e <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    540a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    540e:	e7d0      	b.n	53b2 <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    5410:	2b04      	cmp	r3, #4
    5412:	d109      	bne.n	5428 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    5414:	1de3      	adds	r3, r4, #7
    5416:	f023 0307 	bic.w	r3, r3, #7
    541a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    541e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5422:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    5426:	e7aa      	b.n	537e <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    5428:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    542a:	bf04      	itt	eq
    542c:	f854 3b04 	ldreq.w	r3, [r4], #4
    5430:	930c      	streq	r3, [sp, #48]	; 0x30
    5432:	e7a4      	b.n	537e <cbvprintf+0x4ae>
		switch (conv->specifier) {
    5434:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    5438:	2a78      	cmp	r2, #120	; 0x78
    543a:	d8ae      	bhi.n	539a <cbvprintf+0x4ca>
    543c:	2a57      	cmp	r2, #87	; 0x57
    543e:	f200 808c 	bhi.w	555a <cbvprintf+0x68a>
    5442:	2a25      	cmp	r2, #37	; 0x25
    5444:	f000 80d4 	beq.w	55f0 <cbvprintf+0x720>
    5448:	2a24      	cmp	r2, #36	; 0x24
    544a:	d9a6      	bls.n	539a <cbvprintf+0x4ca>
    544c:	2a41      	cmp	r2, #65	; 0x41
    544e:	d003      	beq.n	5458 <cbvprintf+0x588>
    5450:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5454:	2b02      	cmp	r3, #2
    5456:	d8a0      	bhi.n	539a <cbvprintf+0x4ca>
	} u = {
    5458:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    545c:	2b00      	cmp	r3, #0
    545e:	f2c0 81be 	blt.w	57de <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    5462:	0738      	lsls	r0, r7, #28
    5464:	f100 81bd 	bmi.w	57e2 <cbvprintf+0x912>
		*sign = ' ';
    5468:	f017 0710 	ands.w	r7, r7, #16
    546c:	bf18      	it	ne
    546e:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    5470:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    5474:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5478:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    547c:	2d00      	cmp	r5, #0
    547e:	f040 81b2 	bne.w	57e6 <cbvprintf+0x916>
    5482:	ea51 0003 	orrs.w	r0, r1, r3
    5486:	bf14      	ite	ne
    5488:	2001      	movne	r0, #1
    548a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    548c:	02db      	lsls	r3, r3, #11
    548e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    5492:	02c9      	lsls	r1, r1, #11
		c = 'f';
    5494:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    5496:	ea45 0e01 	orr.w	lr, r5, r1
    549a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    549e:	bf08      	it	eq
    54a0:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    54a2:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    54a6:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    54aa:	f000 8206 	beq.w	58ba <cbvprintf+0x9ea>
		if (is_subnormal) {
    54ae:	2800      	cmp	r0, #0
    54b0:	f040 81ce 	bne.w	5850 <cbvprintf+0x980>
		fract |= BIT_63;
    54b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    54b8:	f04f 0c00 	mov.w	ip, #0
    54bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    54c0:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    54c4:	9109      	str	r1, [sp, #36]	; 0x24
    54c6:	4663      	mov	r3, ip
		fract *= 5U;
    54c8:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    54cc:	f115 0f02 	cmn.w	r5, #2
    54d0:	f2c0 81c5 	blt.w	585e <cbvprintf+0x98e>
    54d4:	f1bc 0f00 	cmp.w	ip, #0
    54d8:	d001      	beq.n	54de <cbvprintf+0x60e>
    54da:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    54de:	2d00      	cmp	r5, #0
		fract += 2;
    54e0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    54e4:	f300 81d0 	bgt.w	5888 <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    54e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    54ea:	9908      	ldr	r1, [sp, #32]
    54ec:	f1c5 0c04 	rsb	ip, r5, #4
    54f0:	351c      	adds	r5, #28
    54f2:	fa00 f505 	lsl.w	r5, r0, r5
    54f6:	f1ac 0e20 	sub.w	lr, ip, #32
    54fa:	fa21 f10c 	lsr.w	r1, r1, ip
    54fe:	fa20 fe0e 	lsr.w	lr, r0, lr
    5502:	4329      	orrs	r1, r5
    5504:	ea41 010e 	orr.w	r1, r1, lr
    5508:	fa20 f00c 	lsr.w	r0, r0, ip
    550c:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    5510:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    5514:	2947      	cmp	r1, #71	; 0x47
    5516:	f040 81d7 	bne.w	58c8 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    551a:	1cdd      	adds	r5, r3, #3
    551c:	db02      	blt.n	5524 <cbvprintf+0x654>
    551e:	4598      	cmp	r8, r3
    5520:	f280 81ce 	bge.w	58c0 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    5524:	3a02      	subs	r2, #2
			if (precision > 0) {
    5526:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    552a:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    552c:	dd01      	ble.n	5532 <cbvprintf+0x662>
				precision--;
    552e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    5532:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5536:	0688      	lsls	r0, r1, #26
    5538:	f100 81c6 	bmi.w	58c8 <cbvprintf+0x9f8>
    553c:	f1b8 0f00 	cmp.w	r8, #0
    5540:	bfd4      	ite	le
    5542:	2100      	movle	r1, #0
    5544:	2101      	movgt	r1, #1
	if (c == 'f') {
    5546:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    5548:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    554a:	f040 81bf 	bne.w	58cc <cbvprintf+0x9fc>
		if (decimals < 0) {
    554e:	eb18 0503 	adds.w	r5, r8, r3
    5552:	f140 81bd 	bpl.w	58d0 <cbvprintf+0xa00>
			decimals = 0;
    5556:	2500      	movs	r5, #0
    5558:	e1bd      	b.n	58d6 <cbvprintf+0xa06>
		switch (conv->specifier) {
    555a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    555e:	2b20      	cmp	r3, #32
    5560:	f63f af1b 	bhi.w	539a <cbvprintf+0x4ca>
    5564:	a001      	add	r0, pc, #4	; (adr r0, 556c <cbvprintf+0x69c>)
    5566:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    556a:	bf00      	nop
    556c:	00005781 	.word	0x00005781
    5570:	0000539b 	.word	0x0000539b
    5574:	0000539b 	.word	0x0000539b
    5578:	0000539b 	.word	0x0000539b
    557c:	0000539b 	.word	0x0000539b
    5580:	0000539b 	.word	0x0000539b
    5584:	0000539b 	.word	0x0000539b
    5588:	0000539b 	.word	0x0000539b
    558c:	0000539b 	.word	0x0000539b
    5590:	00005459 	.word	0x00005459
    5594:	0000539b 	.word	0x0000539b
    5598:	0000561d 	.word	0x0000561d
    559c:	00005721 	.word	0x00005721
    55a0:	00005459 	.word	0x00005459
    55a4:	00005459 	.word	0x00005459
    55a8:	00005459 	.word	0x00005459
    55ac:	0000539b 	.word	0x0000539b
    55b0:	00005721 	.word	0x00005721
    55b4:	0000539b 	.word	0x0000539b
    55b8:	0000539b 	.word	0x0000539b
    55bc:	0000539b 	.word	0x0000539b
    55c0:	0000539b 	.word	0x0000539b
    55c4:	000057b7 	.word	0x000057b7
    55c8:	00005781 	.word	0x00005781
    55cc:	00005785 	.word	0x00005785
    55d0:	0000539b 	.word	0x0000539b
    55d4:	0000539b 	.word	0x0000539b
    55d8:	000055f7 	.word	0x000055f7
    55dc:	0000539b 	.word	0x0000539b
    55e0:	00005781 	.word	0x00005781
    55e4:	0000539b 	.word	0x0000539b
    55e8:	0000539b 	.word	0x0000539b
    55ec:	00005781 	.word	0x00005781
			OUTC('%');
    55f0:	4651      	mov	r1, sl
    55f2:	4610      	mov	r0, r2
    55f4:	e47e      	b.n	4ef4 <cbvprintf+0x24>
			if (precision >= 0) {
    55f6:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    55fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    55fc:	db09      	blt.n	5612 <cbvprintf+0x742>
				len = strnlen(bps, precision);
    55fe:	4641      	mov	r1, r8
    5600:	4610      	mov	r0, r2
    5602:	9203      	str	r2, [sp, #12]
    5604:	f022 ff88 	bl	28518 <strnlen>
				len = strlen(bps);
    5608:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    560a:	2700      	movs	r7, #0
			bpe = bps + len;
    560c:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    560e:	b962      	cbnz	r2, 562a <cbvprintf+0x75a>
    5610:	e6c3      	b.n	539a <cbvprintf+0x4ca>
				len = strlen(bps);
    5612:	4610      	mov	r0, r2
    5614:	9203      	str	r2, [sp, #12]
    5616:	f022 ff78 	bl	2850a <strlen>
    561a:	e7f5      	b.n	5608 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    561c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    561e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    5622:	2700      	movs	r7, #0
			bpe = buf + 1;
    5624:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    5628:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    562a:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    562c:	b107      	cbz	r7, 5630 <cbvprintf+0x760>
			nj_len += 1U;
    562e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    5630:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    5634:	06c1      	lsls	r1, r0, #27
    5636:	f140 823a 	bpl.w	5aae <cbvprintf+0xbde>
			nj_len += 2U;
    563a:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    563c:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    563e:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    5640:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    5642:	bf44      	itt	mi
    5644:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    5646:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    5648:	f1bb 0f00 	cmp.w	fp, #0
    564c:	dd23      	ble.n	5696 <cbvprintf+0x7c6>
			width -= (int)nj_len;
    564e:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    5652:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5656:	0759      	lsls	r1, r3, #29
    5658:	f3c3 0880 	ubfx	r8, r3, #2, #1
    565c:	d41b      	bmi.n	5696 <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    565e:	0658      	lsls	r0, r3, #25
    5660:	f140 8234 	bpl.w	5acc <cbvprintf+0xbfc>
					if (sign != 0) {
    5664:	2f00      	cmp	r7, #0
    5666:	f000 8234 	beq.w	5ad2 <cbvprintf+0xc02>
						OUTC(sign);
    566a:	4651      	mov	r1, sl
    566c:	4638      	mov	r0, r7
    566e:	9203      	str	r2, [sp, #12]
    5670:	47c8      	blx	r9
    5672:	2800      	cmp	r0, #0
    5674:	f2c0 8227 	blt.w	5ac6 <cbvprintf+0xbf6>
    5678:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    567a:	4647      	mov	r7, r8
						OUTC(sign);
    567c:	3601      	adds	r6, #1
					pad = '0';
    567e:	f04f 0830 	mov.w	r8, #48	; 0x30
    5682:	445e      	add	r6, fp
    5684:	465b      	mov	r3, fp
				while (width-- > 0) {
    5686:	2b00      	cmp	r3, #0
    5688:	eba6 000b 	sub.w	r0, r6, fp
    568c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    5690:	f300 8211 	bgt.w	5ab6 <cbvprintf+0xbe6>
    5694:	4606      	mov	r6, r0
		if (sign != 0) {
    5696:	b147      	cbz	r7, 56aa <cbvprintf+0x7da>
			OUTC(sign);
    5698:	4651      	mov	r1, sl
    569a:	4638      	mov	r0, r7
    569c:	9203      	str	r2, [sp, #12]
    569e:	47c8      	blx	r9
    56a0:	2800      	cmp	r0, #0
    56a2:	f2c0 8210 	blt.w	5ac6 <cbvprintf+0xbf6>
    56a6:	9a03      	ldr	r2, [sp, #12]
    56a8:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    56aa:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    56ae:	0659      	lsls	r1, r3, #25
    56b0:	f140 8265 	bpl.w	5b7e <cbvprintf+0xcae>
			if (conv->specifier_a) {
    56b4:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    56b8:	2b00      	cmp	r3, #0
    56ba:	eba6 0302 	sub.w	r3, r6, r2
    56be:	9303      	str	r3, [sp, #12]
    56c0:	f2c0 820a 	blt.w	5ad8 <cbvprintf+0xc08>
    56c4:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    56c6:	7838      	ldrb	r0, [r7, #0]
    56c8:	9b03      	ldr	r3, [sp, #12]
    56ca:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    56ce:	2a09      	cmp	r2, #9
    56d0:	46b8      	mov	r8, r7
    56d2:	eb03 0607 	add.w	r6, r3, r7
    56d6:	f107 0701 	add.w	r7, r7, #1
    56da:	f240 8229 	bls.w	5b30 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    56de:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    56e2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    56e4:	0693      	lsls	r3, r2, #26
    56e6:	d408      	bmi.n	56fa <cbvprintf+0x82a>
    56e8:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    56ea:	2f00      	cmp	r7, #0
    56ec:	eba6 0307 	sub.w	r3, r6, r7
    56f0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    56f4:	f300 8222 	bgt.w	5b3c <cbvprintf+0xc6c>
    56f8:	461e      	mov	r6, r3
				if (*cp == '.') {
    56fa:	f898 0000 	ldrb.w	r0, [r8]
    56fe:	282e      	cmp	r0, #46	; 0x2e
    5700:	d10b      	bne.n	571a <cbvprintf+0x84a>
					OUTC(*cp++);
    5702:	4651      	mov	r1, sl
    5704:	47c8      	blx	r9
						OUTC('0');
    5706:	2800      	cmp	r0, #0
    5708:	f2c0 81dd 	blt.w	5ac6 <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    570c:	2f00      	cmp	r7, #0
						OUTC('0');
    570e:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    5712:	f300 821a 	bgt.w	5b4a <cbvprintf+0xc7a>
					OUTC(*cp++);
    5716:	f108 0801 	add.w	r8, r8, #1
    571a:	eba6 0608 	sub.w	r6, r6, r8
    571e:	e21d      	b.n	5b5c <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    5720:	073d      	lsls	r5, r7, #28
    5722:	d42b      	bmi.n	577c <cbvprintf+0x8ac>
				sign = ' ';
    5724:	f017 0710 	ands.w	r7, r7, #16
    5728:	bf18      	it	ne
    572a:	2720      	movne	r7, #32
			sint = value->sint;
    572c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    5730:	2b00      	cmp	r3, #0
    5732:	da05      	bge.n	5740 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    5734:	4252      	negs	r2, r2
    5736:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    573a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    573e:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    5740:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    5744:	9300      	str	r3, [sp, #0]
    5746:	aa0e      	add	r2, sp, #56	; 0x38
    5748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    574c:	ab13      	add	r3, sp, #76	; 0x4c
    574e:	f01f fd74 	bl	2523a <encode_uint>
    5752:	4602      	mov	r2, r0
			if (precision >= 0) {
    5754:	f1b8 0f00 	cmp.w	r8, #0
    5758:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    575c:	f6ff af57 	blt.w	560e <cbvprintf+0x73e>
				conv->flag_zero = false;
    5760:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    5764:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    5766:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    576a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    576c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    5770:	f67f af4d 	bls.w	560e <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    5774:	eba8 0303 	sub.w	r3, r8, r3
    5778:	930f      	str	r3, [sp, #60]	; 0x3c
    577a:	e748      	b.n	560e <cbvprintf+0x73e>
				sign = '+';
    577c:	272b      	movs	r7, #43	; 0x2b
    577e:	e7d5      	b.n	572c <cbvprintf+0x85c>
		switch (conv->specifier) {
    5780:	2700      	movs	r7, #0
    5782:	e7dd      	b.n	5740 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    5784:	980c      	ldr	r0, [sp, #48]	; 0x30
    5786:	2800      	cmp	r0, #0
    5788:	f000 818d 	beq.w	5aa6 <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    578c:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    5790:	9300      	str	r3, [sp, #0]
    5792:	aa0e      	add	r2, sp, #56	; 0x38
    5794:	ab13      	add	r3, sp, #76	; 0x4c
    5796:	2100      	movs	r1, #0
    5798:	f01f fd4f 	bl	2523a <encode_uint>
				conv->altform_0c = true;
    579c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    57a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    57a4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    57a8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    57ac:	4602      	mov	r2, r0
				conv->altform_0c = true;
    57ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    57b2:	2700      	movs	r7, #0
				goto prec_int_pad0;
    57b4:	e7ce      	b.n	5754 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    57b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    57b8:	2907      	cmp	r1, #7
    57ba:	f63f adee 	bhi.w	539a <cbvprintf+0x4ca>
    57be:	e8df f001 	tbb	[pc, r1]
    57c2:	040c      	.short	0x040c
    57c4:	08080c06 	.word	0x08080c06
    57c8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    57ca:	701e      	strb	r6, [r3, #0]
		break;
    57cc:	e5e5      	b.n	539a <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    57ce:	801e      	strh	r6, [r3, #0]
		break;
    57d0:	e5e3      	b.n	539a <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    57d2:	17f2      	asrs	r2, r6, #31
    57d4:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    57d8:	e5df      	b.n	539a <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    57da:	601e      	str	r6, [r3, #0]
		break;
    57dc:	e5dd      	b.n	539a <cbvprintf+0x4ca>
		*sign = '-';
    57de:	272d      	movs	r7, #45	; 0x2d
    57e0:	e646      	b.n	5470 <cbvprintf+0x5a0>
		*sign = '+';
    57e2:	272b      	movs	r7, #43	; 0x2b
    57e4:	e644      	b.n	5470 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    57e6:	f240 70ff 	movw	r0, #2047	; 0x7ff
    57ea:	4285      	cmp	r5, r0
    57ec:	d12d      	bne.n	584a <cbvprintf+0x97a>
		if (fract == 0) {
    57ee:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    57f0:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    57f4:	d11b      	bne.n	582e <cbvprintf+0x95e>
			if (isupper((int)c)) {
    57f6:	2a19      	cmp	r2, #25
    57f8:	d811      	bhi.n	581e <cbvprintf+0x94e>
				*buf++ = 'I';
    57fa:	2349      	movs	r3, #73	; 0x49
    57fc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    5800:	234e      	movs	r3, #78	; 0x4e
    5802:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    5806:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    5808:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    580c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5810:	f36f 1386 	bfc	r3, #6, #1
    5814:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    5818:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    581c:	e704      	b.n	5628 <cbvprintf+0x758>
				*buf++ = 'i';
    581e:	2369      	movs	r3, #105	; 0x69
    5820:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    5824:	236e      	movs	r3, #110	; 0x6e
    5826:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    582a:	2366      	movs	r3, #102	; 0x66
    582c:	e7ec      	b.n	5808 <cbvprintf+0x938>
			if (isupper((int)c)) {
    582e:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    5830:	bf99      	ittee	ls
    5832:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    5834:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    5836:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    5838:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    583a:	bf94      	ite	ls
    583c:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    5840:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    5844:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    5848:	e7de      	b.n	5808 <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    584a:	2000      	movs	r0, #0
    584c:	e61e      	b.n	548c <cbvprintf+0x5bc>
				expo--;
    584e:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    5850:	1849      	adds	r1, r1, r1
    5852:	415b      	adcs	r3, r3
    5854:	2b00      	cmp	r3, #0
    5856:	dafa      	bge.n	584e <cbvprintf+0x97e>
    5858:	e9cd 1308 	strd	r1, r3, [sp, #32]
    585c:	e62a      	b.n	54b4 <cbvprintf+0x5e4>
			fract >>= 1;
    585e:	0840      	lsrs	r0, r0, #1
    5860:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    5864:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    5866:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    586a:	46ac      	mov	ip, r5
			expo++;
    586c:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    5870:	d2f5      	bcs.n	585e <cbvprintf+0x98e>
		fract *= 5U;
    5872:	fb0e f501 	mul.w	r5, lr, r1
    5876:	fba0 010e 	umull	r0, r1, r0, lr
    587a:	4429      	add	r1, r5
		decexp--;
    587c:	3b01      	subs	r3, #1
		expo++;
    587e:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    5882:	f04f 0c01 	mov.w	ip, #1
    5886:	e621      	b.n	54cc <cbvprintf+0x5fc>
		fract += 2;
    5888:	3102      	adds	r1, #2
    588a:	f140 0000 	adc.w	r0, r0, #0
    588e:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    5892:	a808      	add	r0, sp, #32
    5894:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5898:	f01f fca0 	bl	251dc <_ldiv5>
		decexp++;
    589c:	9b04      	ldr	r3, [sp, #16]
    589e:	9a03      	ldr	r2, [sp, #12]
    58a0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    58a4:	3d01      	subs	r5, #1
		decexp++;
    58a6:	3301      	adds	r3, #1
			fract <<= 1;
    58a8:	1849      	adds	r1, r1, r1
    58aa:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    58ac:	2800      	cmp	r0, #0
			expo--;
    58ae:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    58b2:	daf9      	bge.n	58a8 <cbvprintf+0x9d8>
    58b4:	e9cd 1008 	strd	r1, r0, [sp, #32]
    58b8:	e611      	b.n	54de <cbvprintf+0x60e>
    58ba:	2300      	movs	r3, #0
    58bc:	461d      	mov	r5, r3
    58be:	e613      	b.n	54e8 <cbvprintf+0x618>
			precision -= decexp;
    58c0:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    58c4:	2266      	movs	r2, #102	; 0x66
    58c6:	e634      	b.n	5532 <cbvprintf+0x662>
	bool prune_zero = false;
    58c8:	2100      	movs	r1, #0
    58ca:	e63c      	b.n	5546 <cbvprintf+0x676>
		decimals = precision + 1;
    58cc:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    58d0:	2d10      	cmp	r5, #16
    58d2:	bfa8      	it	ge
    58d4:	2510      	movge	r5, #16
    58d6:	2110      	movs	r1, #16
    58d8:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    58da:	2000      	movs	r0, #0
    58dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    58e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    58e4:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    58e8:	b9a5      	cbnz	r5, 5914 <cbvprintf+0xa44>
	fract += round;
    58ea:	9d08      	ldr	r5, [sp, #32]
    58ec:	1949      	adds	r1, r1, r5
    58ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
    58f0:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    58f4:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    58f8:	d21b      	bcs.n	5932 <cbvprintf+0xa62>
	fract += round;
    58fa:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    58fe:	2a66      	cmp	r2, #102	; 0x66
    5900:	f040 8099 	bne.w	5a36 <cbvprintf+0xb66>
		if (decexp > 0) {
    5904:	2b00      	cmp	r3, #0
    5906:	dc23      	bgt.n	5950 <cbvprintf+0xa80>
			*buf++ = '0';
    5908:	2130      	movs	r1, #48	; 0x30
    590a:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    590e:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5912:	e02f      	b.n	5974 <cbvprintf+0xaa4>
	*v >>= 1;
    5914:	0849      	lsrs	r1, r1, #1
    5916:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    591a:	0840      	lsrs	r0, r0, #1
    591c:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    5920:	a80a      	add	r0, sp, #40	; 0x28
    5922:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5926:	3d01      	subs	r5, #1
    5928:	f01f fc58 	bl	251dc <_ldiv5>
    592c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    5930:	e7d8      	b.n	58e4 <cbvprintf+0xa14>
	*v >>= 1;
    5932:	0849      	lsrs	r1, r1, #1
    5934:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    5938:	a808      	add	r0, sp, #32
	*v >>= 1;
    593a:	086d      	lsrs	r5, r5, #1
    593c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5940:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    5944:	f01f fc4a 	bl	251dc <_ldiv5>
		decexp++;
    5948:	9b05      	ldr	r3, [sp, #20]
    594a:	9a04      	ldr	r2, [sp, #16]
    594c:	3301      	adds	r3, #1
    594e:	e7d6      	b.n	58fe <cbvprintf+0xa2e>
	char *buf = bps;
    5950:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    5952:	9907      	ldr	r1, [sp, #28]
    5954:	2900      	cmp	r1, #0
    5956:	dd0b      	ble.n	5970 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    5958:	a907      	add	r1, sp, #28
    595a:	a808      	add	r0, sp, #32
    595c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5960:	f01f fc54 	bl	2520c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    5964:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    5966:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    596a:	3b01      	subs	r3, #1
    596c:	9a04      	ldr	r2, [sp, #16]
    596e:	d1f0      	bne.n	5952 <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    5970:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    5972:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    5974:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5978:	0689      	lsls	r1, r1, #26
    597a:	d402      	bmi.n	5982 <cbvprintf+0xab2>
    597c:	f1b8 0f00 	cmp.w	r8, #0
    5980:	dd1d      	ble.n	59be <cbvprintf+0xaee>
			*buf++ = '.';
    5982:	212e      	movs	r1, #46	; 0x2e
    5984:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    5988:	b19b      	cbz	r3, 59b2 <cbvprintf+0xae2>
    598a:	f1b8 0f00 	cmp.w	r8, #0
    598e:	dd16      	ble.n	59be <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    5990:	4259      	negs	r1, r3
    5992:	4541      	cmp	r1, r8
    5994:	bfa8      	it	ge
    5996:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    5998:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    599c:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    599e:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    59a0:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    59a4:	bfd4      	ite	le
    59a6:	2100      	movle	r1, #0
    59a8:	2101      	movgt	r1, #1
    59aa:	f361 1045 	bfi	r0, r1, #5, #1
    59ae:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    59b2:	f1b8 0f00 	cmp.w	r8, #0
    59b6:	dd02      	ble.n	59be <cbvprintf+0xaee>
    59b8:	9907      	ldr	r1, [sp, #28]
    59ba:	2900      	cmp	r1, #0
    59bc:	dc56      	bgt.n	5a6c <cbvprintf+0xb9c>
	if (prune_zero) {
    59be:	9903      	ldr	r1, [sp, #12]
    59c0:	2900      	cmp	r1, #0
    59c2:	d163      	bne.n	5a8c <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    59c4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    59c8:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    59cc:	2945      	cmp	r1, #69	; 0x45
    59ce:	d121      	bne.n	5a14 <cbvprintf+0xb44>
		if (decexp < 0) {
    59d0:	2b00      	cmp	r3, #0
		*buf++ = c;
    59d2:	4629      	mov	r1, r5
			decexp = -decexp;
    59d4:	bfb8      	it	lt
    59d6:	425b      	neglt	r3, r3
		*buf++ = c;
    59d8:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    59dc:	bfb4      	ite	lt
    59de:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    59e0:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    59e2:	2b63      	cmp	r3, #99	; 0x63
    59e4:	706a      	strb	r2, [r5, #1]
    59e6:	dd09      	ble.n	59fc <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    59e8:	2064      	movs	r0, #100	; 0x64
    59ea:	fbb3 f2f0 	udiv	r2, r3, r0
    59ee:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    59f2:	1ce9      	adds	r1, r5, #3
    59f4:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    59f8:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    59fc:	200a      	movs	r0, #10
    59fe:	460d      	mov	r5, r1
    5a00:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    5a04:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5a08:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    5a0c:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    5a0e:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    5a12:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    5a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5a16:	2b00      	cmp	r3, #0
    5a18:	dc43      	bgt.n	5aa2 <cbvprintf+0xbd2>
    5a1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	bfd4      	ite	le
    5a20:	2300      	movle	r3, #0
    5a22:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    5a24:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5a28:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    5a2c:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    5a2e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    5a32:	702b      	strb	r3, [r5, #0]
	return bps;
    5a34:	e5f8      	b.n	5628 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    5a36:	a907      	add	r1, sp, #28
    5a38:	a808      	add	r0, sp, #32
    5a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5a3e:	f01f fbe5 	bl	2520c <_get_digit>
		if (*buf++ != '0') {
    5a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    5a46:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    5a4a:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    5a4e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    5a50:	bf18      	it	ne
    5a52:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    5a56:	0688      	lsls	r0, r1, #26
    5a58:	d402      	bmi.n	5a60 <cbvprintf+0xb90>
    5a5a:	f1b8 0f00 	cmp.w	r8, #0
    5a5e:	dd12      	ble.n	5a86 <cbvprintf+0xbb6>
			*buf++ = '.';
    5a60:	212e      	movs	r1, #46	; 0x2e
    5a62:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    5a66:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    5a6a:	e7a2      	b.n	59b2 <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    5a6c:	a907      	add	r1, sp, #28
    5a6e:	a808      	add	r0, sp, #32
    5a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5a74:	f01f fbca 	bl	2520c <_get_digit>
		precision--;
    5a78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    5a80:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    5a84:	e795      	b.n	59b2 <cbvprintf+0xae2>
		if (*buf++ != '0') {
    5a86:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5a8a:	e798      	b.n	59be <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    5a8c:	2100      	movs	r1, #0
    5a8e:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    5a90:	4628      	mov	r0, r5
    5a92:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    5a96:	2930      	cmp	r1, #48	; 0x30
    5a98:	d0fa      	beq.n	5a90 <cbvprintf+0xbc0>
		if (*buf != '.') {
    5a9a:	292e      	cmp	r1, #46	; 0x2e
    5a9c:	bf18      	it	ne
    5a9e:	4605      	movne	r5, r0
    5aa0:	e792      	b.n	59c8 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    5aa2:	2301      	movs	r3, #1
    5aa4:	e7be      	b.n	5a24 <cbvprintf+0xb54>
			bpe = bps + 5;
    5aa6:	4d4b      	ldr	r5, [pc, #300]	; (5bd4 <cbvprintf+0xd04>)
		char sign = 0;
    5aa8:	4607      	mov	r7, r0
			bps = "(nil)";
    5aaa:	1f6a      	subs	r2, r5, #5
    5aac:	e5bd      	b.n	562a <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    5aae:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    5ab0:	bf48      	it	mi
    5ab2:	3301      	addmi	r3, #1
    5ab4:	e5c2      	b.n	563c <cbvprintf+0x76c>
					OUTC(pad);
    5ab6:	4651      	mov	r1, sl
    5ab8:	4640      	mov	r0, r8
    5aba:	9203      	str	r2, [sp, #12]
    5abc:	47c8      	blx	r9
    5abe:	2800      	cmp	r0, #0
    5ac0:	9a03      	ldr	r2, [sp, #12]
    5ac2:	f6bf addf 	bge.w	5684 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    5ac6:	b01b      	add	sp, #108	; 0x6c
    5ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    5acc:	f04f 0820 	mov.w	r8, #32
    5ad0:	e5d7      	b.n	5682 <cbvprintf+0x7b2>
					pad = '0';
    5ad2:	f04f 0830 	mov.w	r8, #48	; 0x30
    5ad6:	e5d4      	b.n	5682 <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    5ad8:	4690      	mov	r8, r2
    5ada:	9b03      	ldr	r3, [sp, #12]
    5adc:	4647      	mov	r7, r8
    5ade:	4443      	add	r3, r8
				while (*cp != 'p') {
    5ae0:	f818 0b01 	ldrb.w	r0, [r8], #1
    5ae4:	2870      	cmp	r0, #112	; 0x70
    5ae6:	d11e      	bne.n	5b26 <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    5ae8:	461e      	mov	r6, r3
    5aea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5aec:	eb03 0806 	add.w	r8, r3, r6
    5af0:	eba8 0306 	sub.w	r3, r8, r6
    5af4:	2b00      	cmp	r3, #0
    5af6:	dc3b      	bgt.n	5b70 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    5af8:	462b      	mov	r3, r5
    5afa:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    5afc:	4651      	mov	r1, sl
    5afe:	4648      	mov	r0, r9
    5b00:	f01f fbe1 	bl	252c6 <outs>
    5b04:	2800      	cmp	r0, #0
    5b06:	dbde      	blt.n	5ac6 <cbvprintf+0xbf6>
    5b08:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    5b0a:	4606      	mov	r6, r0
    5b0c:	4483      	add	fp, r0
		while (width > 0) {
    5b0e:	ebab 0306 	sub.w	r3, fp, r6
    5b12:	2b00      	cmp	r3, #0
    5b14:	f77f ac41 	ble.w	539a <cbvprintf+0x4ca>
			OUTC(' ');
    5b18:	4651      	mov	r1, sl
    5b1a:	2020      	movs	r0, #32
    5b1c:	47c8      	blx	r9
    5b1e:	2800      	cmp	r0, #0
    5b20:	dbd1      	blt.n	5ac6 <cbvprintf+0xbf6>
    5b22:	3601      	adds	r6, #1
			--width;
    5b24:	e7f3      	b.n	5b0e <cbvprintf+0xc3e>
					OUTC(*cp++);
    5b26:	4651      	mov	r1, sl
    5b28:	47c8      	blx	r9
    5b2a:	2800      	cmp	r0, #0
    5b2c:	dad5      	bge.n	5ada <cbvprintf+0xc0a>
    5b2e:	e7ca      	b.n	5ac6 <cbvprintf+0xbf6>
					OUTC(*cp++);
    5b30:	4651      	mov	r1, sl
    5b32:	47c8      	blx	r9
    5b34:	2800      	cmp	r0, #0
    5b36:	f6bf adc6 	bge.w	56c6 <cbvprintf+0x7f6>
    5b3a:	e7c4      	b.n	5ac6 <cbvprintf+0xbf6>
						OUTC('0');
    5b3c:	4651      	mov	r1, sl
    5b3e:	2030      	movs	r0, #48	; 0x30
    5b40:	47c8      	blx	r9
    5b42:	2800      	cmp	r0, #0
    5b44:	f6bf add1 	bge.w	56ea <cbvprintf+0x81a>
    5b48:	e7bd      	b.n	5ac6 <cbvprintf+0xbf6>
						OUTC('0');
    5b4a:	4651      	mov	r1, sl
    5b4c:	2030      	movs	r0, #48	; 0x30
    5b4e:	47c8      	blx	r9
    5b50:	3f01      	subs	r7, #1
    5b52:	e5d8      	b.n	5706 <cbvprintf+0x836>
					OUTC(*cp++);
    5b54:	4651      	mov	r1, sl
    5b56:	47c8      	blx	r9
    5b58:	2800      	cmp	r0, #0
    5b5a:	dbb4      	blt.n	5ac6 <cbvprintf+0xbf6>
    5b5c:	4647      	mov	r7, r8
    5b5e:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    5b62:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5b66:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    5b6a:	2a09      	cmp	r2, #9
    5b6c:	d9f2      	bls.n	5b54 <cbvprintf+0xc84>
    5b6e:	e7bb      	b.n	5ae8 <cbvprintf+0xc18>
				OUTC('0');
    5b70:	4651      	mov	r1, sl
    5b72:	2030      	movs	r0, #48	; 0x30
    5b74:	47c8      	blx	r9
    5b76:	2800      	cmp	r0, #0
    5b78:	dba5      	blt.n	5ac6 <cbvprintf+0xbf6>
    5b7a:	3601      	adds	r6, #1
    5b7c:	e7b8      	b.n	5af0 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    5b7e:	06d8      	lsls	r0, r3, #27
    5b80:	d401      	bmi.n	5b86 <cbvprintf+0xcb6>
    5b82:	0719      	lsls	r1, r3, #28
    5b84:	d507      	bpl.n	5b96 <cbvprintf+0xcc6>
				OUTC('0');
    5b86:	4651      	mov	r1, sl
    5b88:	2030      	movs	r0, #48	; 0x30
    5b8a:	9203      	str	r2, [sp, #12]
    5b8c:	47c8      	blx	r9
    5b8e:	2800      	cmp	r0, #0
    5b90:	db99      	blt.n	5ac6 <cbvprintf+0xbf6>
    5b92:	9a03      	ldr	r2, [sp, #12]
    5b94:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    5b96:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5b9a:	06db      	lsls	r3, r3, #27
    5b9c:	d508      	bpl.n	5bb0 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    5b9e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5ba2:	9203      	str	r2, [sp, #12]
    5ba4:	4651      	mov	r1, sl
    5ba6:	47c8      	blx	r9
    5ba8:	2800      	cmp	r0, #0
    5baa:	db8c      	blt.n	5ac6 <cbvprintf+0xbf6>
    5bac:	9a03      	ldr	r2, [sp, #12]
    5bae:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    5bb0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5bb2:	4437      	add	r7, r6
    5bb4:	1bbb      	subs	r3, r7, r6
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	dc01      	bgt.n	5bbe <cbvprintf+0xcee>
			OUTS(bps, bpe);
    5bba:	462b      	mov	r3, r5
    5bbc:	e79e      	b.n	5afc <cbvprintf+0xc2c>
				OUTC('0');
    5bbe:	4651      	mov	r1, sl
    5bc0:	2030      	movs	r0, #48	; 0x30
    5bc2:	9203      	str	r2, [sp, #12]
    5bc4:	47c8      	blx	r9
    5bc6:	2800      	cmp	r0, #0
    5bc8:	f6ff af7d 	blt.w	5ac6 <cbvprintf+0xbf6>
    5bcc:	9a03      	ldr	r2, [sp, #12]
    5bce:	3601      	adds	r6, #1
    5bd0:	e7f0      	b.n	5bb4 <cbvprintf+0xce4>
    5bd2:	bf00      	nop
    5bd4:	0002e596 	.word	0x0002e596

00005bd8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    5bd8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    5bda:	4910      	ldr	r1, [pc, #64]	; (5c1c <enable_logger+0x44>)
    5bdc:	4810      	ldr	r0, [pc, #64]	; (5c20 <enable_logger+0x48>)
{
    5bde:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    5be0:	2200      	movs	r2, #0
    5be2:	f026 f801 	bl	2bbe8 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5be6:	4d0f      	ldr	r5, [pc, #60]	; (5c24 <enable_logger+0x4c>)
    5be8:	490f      	ldr	r1, [pc, #60]	; (5c28 <enable_logger+0x50>)
    5bea:	2200      	movs	r2, #0
    5bec:	2300      	movs	r3, #0
    5bee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5bf2:	2400      	movs	r4, #0
    5bf4:	230e      	movs	r3, #14
    5bf6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    5bfa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5bfe:	4b0b      	ldr	r3, [pc, #44]	; (5c2c <enable_logger+0x54>)
    5c00:	9400      	str	r4, [sp, #0]
    5c02:	f44f 7240 	mov.w	r2, #768	; 0x300
    5c06:	4628      	mov	r0, r5
    5c08:	f01d fdc4 	bl	23794 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5c0c:	4908      	ldr	r1, [pc, #32]	; (5c30 <enable_logger+0x58>)
    5c0e:	4628      	mov	r0, r5
    5c10:	f01d fd0e 	bl	23630 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5c14:	4620      	mov	r0, r4
    5c16:	b009      	add	sp, #36	; 0x24
    5c18:	bd30      	pop	{r4, r5, pc}
    5c1a:	bf00      	nop
    5c1c:	00005c35 	.word	0x00005c35
    5c20:	200012d8 	.word	0x200012d8
    5c24:	20001310 	.word	0x20001310
    5c28:	20005a00 	.word	0x20005a00
    5c2c:	00005e89 	.word	0x00005e89
    5c30:	0002e910 	.word	0x0002e910

00005c34 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    5c34:	4801      	ldr	r0, [pc, #4]	; (5c3c <log_process_thread_timer_expiry_fn+0x8>)
    5c36:	f01d bf41 	b.w	23abc <z_impl_k_sem_give>
    5c3a:	bf00      	nop
    5c3c:	20000b58 	.word	0x20000b58

00005c40 <log_init>:
{
    5c40:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5c42:	4b12      	ldr	r3, [pc, #72]	; (5c8c <log_init+0x4c>)
    5c44:	f3bf 8f5b 	dmb	ish
    5c48:	e853 5f00 	ldrex	r5, [r3]
    5c4c:	1c6a      	adds	r2, r5, #1
    5c4e:	e843 2100 	strex	r1, r2, [r3]
    5c52:	2900      	cmp	r1, #0
    5c54:	d1f8      	bne.n	5c48 <log_init+0x8>
    5c56:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    5c5a:	b92d      	cbnz	r5, 5c68 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    5c5c:	4c0c      	ldr	r4, [pc, #48]	; (5c90 <log_init+0x50>)
    5c5e:	4e0d      	ldr	r6, [pc, #52]	; (5c94 <log_init+0x54>)
    5c60:	1b36      	subs	r6, r6, r4
    5c62:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5c64:	42b5      	cmp	r5, r6
    5c66:	db00      	blt.n	5c6a <log_init+0x2a>
}
    5c68:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    5c6a:	7b23      	ldrb	r3, [r4, #12]
    5c6c:	b153      	cbz	r3, 5c84 <log_init+0x44>
			if (backend->api->init != NULL) {
    5c6e:	6823      	ldr	r3, [r4, #0]
    5c70:	699b      	ldr	r3, [r3, #24]
    5c72:	b10b      	cbz	r3, 5c78 <log_init+0x38>
				backend->api->init(backend);
    5c74:	4620      	mov	r0, r4
    5c76:	4798      	blx	r3
			log_backend_enable(backend,
    5c78:	6863      	ldr	r3, [r4, #4]
    5c7a:	2204      	movs	r2, #4
    5c7c:	6819      	ldr	r1, [r3, #0]
    5c7e:	4620      	mov	r0, r4
    5c80:	f000 fa38 	bl	60f4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5c84:	3501      	adds	r5, #1
    5c86:	3410      	adds	r4, #16
    5c88:	e7ec      	b.n	5c64 <log_init+0x24>
    5c8a:	bf00      	nop
    5c8c:	20002404 	.word	0x20002404
    5c90:	0002c3ac 	.word	0x0002c3ac
    5c94:	0002c3bc 	.word	0x0002c3bc

00005c98 <z_log_notify_backend_enabled>:
{
    5c98:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    5c9a:	4c04      	ldr	r4, [pc, #16]	; (5cac <z_log_notify_backend_enabled+0x14>)
    5c9c:	7823      	ldrb	r3, [r4, #0]
    5c9e:	b913      	cbnz	r3, 5ca6 <z_log_notify_backend_enabled+0xe>
    5ca0:	4803      	ldr	r0, [pc, #12]	; (5cb0 <z_log_notify_backend_enabled+0x18>)
    5ca2:	f01d ff0b 	bl	23abc <z_impl_k_sem_give>
	backend_attached = true;
    5ca6:	2301      	movs	r3, #1
    5ca8:	7023      	strb	r3, [r4, #0]
}
    5caa:	bd10      	pop	{r4, pc}
    5cac:	2000481e 	.word	0x2000481e
    5cb0:	20000b58 	.word	0x20000b58

00005cb4 <z_log_dropped>:
    5cb4:	4b0c      	ldr	r3, [pc, #48]	; (5ce8 <z_log_dropped+0x34>)
    5cb6:	f3bf 8f5b 	dmb	ish
    5cba:	e853 2f00 	ldrex	r2, [r3]
    5cbe:	3201      	adds	r2, #1
    5cc0:	e843 2100 	strex	r1, r2, [r3]
    5cc4:	2900      	cmp	r1, #0
    5cc6:	d1f8      	bne.n	5cba <z_log_dropped+0x6>
    5cc8:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    5ccc:	b158      	cbz	r0, 5ce6 <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5cce:	f3bf 8f5b 	dmb	ish
    5cd2:	4b06      	ldr	r3, [pc, #24]	; (5cec <z_log_dropped+0x38>)
    5cd4:	e853 2f00 	ldrex	r2, [r3]
    5cd8:	3a01      	subs	r2, #1
    5cda:	e843 2100 	strex	r1, r2, [r3]
    5cde:	2900      	cmp	r1, #0
    5ce0:	d1f8      	bne.n	5cd4 <z_log_dropped+0x20>
    5ce2:	f3bf 8f5b 	dmb	ish
}
    5ce6:	4770      	bx	lr
    5ce8:	20002400 	.word	0x20002400
    5cec:	200023fc 	.word	0x200023fc

00005cf0 <z_log_dropped_read_and_clear>:
}
    5cf0:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5cf2:	4b06      	ldr	r3, [pc, #24]	; (5d0c <z_log_dropped_read_and_clear+0x1c>)
    5cf4:	f3bf 8f5b 	dmb	ish
    5cf8:	4602      	mov	r2, r0
    5cfa:	e853 0f00 	ldrex	r0, [r3]
    5cfe:	e843 2100 	strex	r1, r2, [r3]
    5d02:	2900      	cmp	r1, #0
    5d04:	d1f9      	bne.n	5cfa <z_log_dropped_read_and_clear+0xa>
    5d06:	f3bf 8f5b 	dmb	ish
    5d0a:	4770      	bx	lr
    5d0c:	20002400 	.word	0x20002400

00005d10 <dropped_notify>:
{
    5d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    5d12:	f7ff ffed 	bl	5cf0 <z_log_dropped_read_and_clear>
    5d16:	4c0a      	ldr	r4, [pc, #40]	; (5d40 <dropped_notify+0x30>)
    5d18:	4d0a      	ldr	r5, [pc, #40]	; (5d44 <dropped_notify+0x34>)
    5d1a:	1b2d      	subs	r5, r5, r4
    5d1c:	4607      	mov	r7, r0
    5d1e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5d20:	2600      	movs	r6, #0
    5d22:	42ae      	cmp	r6, r5
    5d24:	db00      	blt.n	5d28 <dropped_notify+0x18>
}
    5d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    5d28:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5d2a:	795b      	ldrb	r3, [r3, #5]
    5d2c:	b12b      	cbz	r3, 5d3a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    5d2e:	6823      	ldr	r3, [r4, #0]
    5d30:	691b      	ldr	r3, [r3, #16]
    5d32:	b113      	cbz	r3, 5d3a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    5d34:	4639      	mov	r1, r7
    5d36:	4620      	mov	r0, r4
    5d38:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5d3a:	3601      	adds	r6, #1
    5d3c:	3410      	adds	r4, #16
    5d3e:	e7f0      	b.n	5d22 <dropped_notify+0x12>
    5d40:	0002c3ac 	.word	0x0002c3ac
    5d44:	0002c3bc 	.word	0x0002c3bc

00005d48 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    5d48:	4901      	ldr	r1, [pc, #4]	; (5d50 <z_log_msg2_init+0x8>)
    5d4a:	4802      	ldr	r0, [pc, #8]	; (5d54 <z_log_msg2_init+0xc>)
    5d4c:	f01f bc49 	b.w	255e2 <mpsc_pbuf_init>
    5d50:	0002c5b4 	.word	0x0002c5b4
    5d54:	20002408 	.word	0x20002408

00005d58 <log_core_init>:
	panic_mode = false;
    5d58:	4a09      	ldr	r2, [pc, #36]	; (5d80 <log_core_init+0x28>)
{
    5d5a:	b508      	push	{r3, lr}
	panic_mode = false;
    5d5c:	2300      	movs	r3, #0
    5d5e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    5d60:	4a08      	ldr	r2, [pc, #32]	; (5d84 <log_core_init+0x2c>)
    5d62:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    5d64:	4b08      	ldr	r3, [pc, #32]	; (5d88 <log_core_init+0x30>)
    5d66:	4a09      	ldr	r2, [pc, #36]	; (5d8c <log_core_init+0x34>)
    5d68:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    5d6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5d6e:	f000 fbd1 	bl	6514 <log_output_timestamp_freq_set>
		z_log_msg2_init();
    5d72:	f7ff ffe9 	bl	5d48 <z_log_msg2_init>
}
    5d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    5d7a:	f000 b925 	b.w	5fc8 <z_log_runtime_filters_init>
    5d7e:	bf00      	nop
    5d80:	2000481f 	.word	0x2000481f
    5d84:	20002400 	.word	0x20002400
    5d88:	200001b0 	.word	0x200001b0
    5d8c:	00025ae9 	.word	0x00025ae9

00005d90 <z_log_msg2_alloc>:
{
    5d90:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    5d92:	2200      	movs	r2, #0
    5d94:	4801      	ldr	r0, [pc, #4]	; (5d9c <z_log_msg2_alloc+0xc>)
    5d96:	2300      	movs	r3, #0
    5d98:	f01f bc42 	b.w	25620 <mpsc_pbuf_alloc>
    5d9c:	20002408 	.word	0x20002408

00005da0 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    5da0:	4801      	ldr	r0, [pc, #4]	; (5da8 <z_log_msg2_claim+0x8>)
    5da2:	f01f bcd0 	b.w	25746 <mpsc_pbuf_claim>
    5da6:	bf00      	nop
    5da8:	20002408 	.word	0x20002408

00005dac <z_log_msg2_free>:
{
    5dac:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    5dae:	4801      	ldr	r0, [pc, #4]	; (5db4 <z_log_msg2_free+0x8>)
    5db0:	f01f bd15 	b.w	257de <mpsc_pbuf_free>
    5db4:	20002408 	.word	0x20002408

00005db8 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    5db8:	4801      	ldr	r0, [pc, #4]	; (5dc0 <z_log_msg2_pending+0x8>)
    5dba:	f01f bd44 	b.w	25846 <mpsc_pbuf_is_pending>
    5dbe:	bf00      	nop
    5dc0:	20002408 	.word	0x20002408

00005dc4 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    5dc4:	4b2a      	ldr	r3, [pc, #168]	; (5e70 <z_impl_log_process+0xac>)
    5dc6:	781b      	ldrb	r3, [r3, #0]
{
    5dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5dcc:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
    5dce:	b90b      	cbnz	r3, 5dd4 <z_impl_log_process+0x10>
    5dd0:	2800      	cmp	r0, #0
    5dd2:	d04b      	beq.n	5e6c <z_impl_log_process+0xa8>
	msg = get_msg();
    5dd4:	f01f fe9c 	bl	25b10 <get_msg>
	if (msg.msg) {
    5dd8:	4605      	mov	r5, r0
    5dda:	b118      	cbz	r0, 5de4 <z_impl_log_process+0x20>
		if (!bypass) {
    5ddc:	b16e      	cbz	r6, 5dfa <z_impl_log_process+0x36>
		z_log_msg2_free(msg.msg2);
    5dde:	4628      	mov	r0, r5
    5de0:	f7ff ffe4 	bl	5dac <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    5de4:	b92e      	cbnz	r6, 5df2 <z_impl_log_process+0x2e>
	return dropped_cnt > 0;
    5de6:	4b23      	ldr	r3, [pc, #140]	; (5e74 <z_impl_log_process+0xb0>)
	if (!bypass && z_log_dropped_pending()) {
    5de8:	681b      	ldr	r3, [r3, #0]
    5dea:	2b00      	cmp	r3, #0
    5dec:	dd01      	ble.n	5df2 <z_impl_log_process+0x2e>
		dropped_notify();
    5dee:	f7ff ff8f 	bl	5d10 <dropped_notify>
}
    5df2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return z_log_msg2_pending();
    5df6:	f7ff bfdf 	b.w	5db8 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5dfa:	4b1f      	ldr	r3, [pc, #124]	; (5e78 <z_impl_log_process+0xb4>)
    5dfc:	f3bf 8f5b 	dmb	ish
    5e00:	e853 2f00 	ldrex	r2, [r3]
    5e04:	3a01      	subs	r2, #1
    5e06:	e843 2100 	strex	r1, r2, [r3]
    5e0a:	2900      	cmp	r1, #0
    5e0c:	d1f8      	bne.n	5e00 <z_impl_log_process+0x3c>
    5e0e:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    5e12:	4c1a      	ldr	r4, [pc, #104]	; (5e7c <z_impl_log_process+0xb8>)
    5e14:	4f1a      	ldr	r7, [pc, #104]	; (5e80 <z_impl_log_process+0xbc>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    5e16:	f8df a06c 	ldr.w	sl, [pc, #108]	; 5e84 <z_impl_log_process+0xc0>
    5e1a:	1b3f      	subs	r7, r7, r4
    5e1c:	113f      	asrs	r7, r7, #4
    5e1e:	46b0      	mov	r8, r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    5e20:	45b8      	cmp	r8, r7
    5e22:	dadc      	bge.n	5dde <z_impl_log_process+0x1a>
	return backend->cb->active;
    5e24:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    5e26:	795b      	ldrb	r3, [r3, #5]
    5e28:	b1cb      	cbz	r3, 5e5e <z_impl_log_process+0x9a>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    5e2a:	7829      	ldrb	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    5e2c:	074b      	lsls	r3, r1, #29
    5e2e:	d411      	bmi.n	5e54 <z_impl_log_process+0x90>
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    5e30:	f8b5 9000 	ldrh.w	r9, [r5]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    5e34:	686a      	ldr	r2, [r5, #4]
	return msg->hdr.desc.level;
    5e36:	f3c9 1982 	ubfx	r9, r9, #6, #3
	return msg->hdr.desc.domain;
    5e3a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		source_id = source ? log_dynamic_source_id(source) : -1;
    5e3e:	b192      	cbz	r2, 5e66 <z_impl_log_process+0xa2>
    5e40:	eba2 020a 	sub.w	r2, r2, sl
    5e44:	f342 028f 	sbfx	r2, r2, #2, #16
	backend_level = log_filter_get(backend, domain_id,
    5e48:	2301      	movs	r3, #1
    5e4a:	4620      	mov	r0, r4
    5e4c:	f000 f968 	bl	6120 <log_filter_get>
			if (log_backend_is_active(backend) &&
    5e50:	4548      	cmp	r0, r9
    5e52:	d304      	bcc.n	5e5e <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
    5e54:	6823      	ldr	r3, [r4, #0]
    5e56:	4629      	mov	r1, r5
    5e58:	681b      	ldr	r3, [r3, #0]
    5e5a:	4620      	mov	r0, r4
    5e5c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5e5e:	f108 0801 	add.w	r8, r8, #1
    5e62:	3410      	adds	r4, #16
    5e64:	e7dc      	b.n	5e20 <z_impl_log_process+0x5c>
		source_id = source ? log_dynamic_source_id(source) : -1;
    5e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e6a:	e7ed      	b.n	5e48 <z_impl_log_process+0x84>
}
    5e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e70:	2000481e 	.word	0x2000481e
    5e74:	20002400 	.word	0x20002400
    5e78:	200023fc 	.word	0x200023fc
    5e7c:	0002c3ac 	.word	0x0002c3ac
    5e80:	0002c3bc 	.word	0x0002c3bc
    5e84:	2000097c 	.word	0x2000097c

00005e88 <log_process_thread_func>:
{
    5e88:	b510      	push	{r4, lr}
	log_init();
    5e8a:	f7ff fed9 	bl	5c40 <log_init>
	return z_impl_z_current_get();
    5e8e:	f01e fb13 	bl	244b8 <z_impl_z_current_get>
	proc_tid = process_tid;
    5e92:	4b0c      	ldr	r3, [pc, #48]	; (5ec4 <log_process_thread_func+0x3c>)
    5e94:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5e96:	b130      	cbz	r0, 5ea6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5e98:	4b0b      	ldr	r3, [pc, #44]	; (5ec8 <log_process_thread_func+0x40>)
	    process_tid &&
    5e9a:	681b      	ldr	r3, [r3, #0]
    5e9c:	2b09      	cmp	r3, #9
    5e9e:	dd02      	ble.n	5ea6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5ea0:	480a      	ldr	r0, [pc, #40]	; (5ecc <log_process_thread_func+0x44>)
    5ea2:	f01d fe0b 	bl	23abc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5ea6:	4c09      	ldr	r4, [pc, #36]	; (5ecc <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5ea8:	2000      	movs	r0, #0
    5eaa:	f7ff ff8b 	bl	5dc4 <z_impl_log_process>
		if (log_process(false) == false) {
    5eae:	2800      	cmp	r0, #0
    5eb0:	d1fa      	bne.n	5ea8 <log_process_thread_func+0x20>
    5eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5eba:	4620      	mov	r0, r4
    5ebc:	f01d fe24 	bl	23b08 <z_impl_k_sem_take>
    5ec0:	e7f2      	b.n	5ea8 <log_process_thread_func+0x20>
    5ec2:	bf00      	nop
    5ec4:	20002444 	.word	0x20002444
    5ec8:	200023fc 	.word	0x200023fc
    5ecc:	20000b58 	.word	0x20000b58

00005ed0 <z_log_msg_post_finalize>:
{
    5ed0:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5ed2:	4b1d      	ldr	r3, [pc, #116]	; (5f48 <z_log_msg_post_finalize+0x78>)
    5ed4:	f3bf 8f5b 	dmb	ish
    5ed8:	e853 2f00 	ldrex	r2, [r3]
    5edc:	1c51      	adds	r1, r2, #1
    5ede:	e843 1000 	strex	r0, r1, [r3]
    5ee2:	2800      	cmp	r0, #0
    5ee4:	d1f8      	bne.n	5ed8 <z_log_msg_post_finalize+0x8>
    5ee6:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    5eea:	4b18      	ldr	r3, [pc, #96]	; (5f4c <z_log_msg_post_finalize+0x7c>)
    5eec:	781b      	ldrb	r3, [r3, #0]
    5eee:	b183      	cbz	r3, 5f12 <z_log_msg_post_finalize+0x42>
    5ef0:	f04f 0320 	mov.w	r3, #32
    5ef4:	f3ef 8411 	mrs	r4, BASEPRI
    5ef8:	f383 8812 	msr	BASEPRI_MAX, r3
    5efc:	f3bf 8f6f 	isb	sy
    5f00:	2000      	movs	r0, #0
    5f02:	f7ff ff5f 	bl	5dc4 <z_impl_log_process>
	__asm__ volatile(
    5f06:	f384 8811 	msr	BASEPRI, r4
    5f0a:	f3bf 8f6f 	isb	sy
}
    5f0e:	b002      	add	sp, #8
    5f10:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    5f12:	4b0f      	ldr	r3, [pc, #60]	; (5f50 <z_log_msg_post_finalize+0x80>)
    5f14:	681b      	ldr	r3, [r3, #0]
    5f16:	2b00      	cmp	r3, #0
    5f18:	d0f9      	beq.n	5f0e <z_log_msg_post_finalize+0x3e>
    5f1a:	b952      	cbnz	r2, 5f32 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    5f1c:	2200      	movs	r2, #0
    5f1e:	2300      	movs	r3, #0
    5f20:	e9cd 2300 	strd	r2, r3, [sp]
    5f24:	480b      	ldr	r0, [pc, #44]	; (5f54 <z_log_msg_post_finalize+0x84>)
    5f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5f2a:	2300      	movs	r3, #0
    5f2c:	f01e fd02 	bl	24934 <z_impl_k_timer_start>
    5f30:	e7ed      	b.n	5f0e <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    5f32:	2a0a      	cmp	r2, #10
    5f34:	d1eb      	bne.n	5f0e <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    5f36:	4807      	ldr	r0, [pc, #28]	; (5f54 <z_log_msg_post_finalize+0x84>)
    5f38:	f025 fe62 	bl	2bc00 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5f3c:	4806      	ldr	r0, [pc, #24]	; (5f58 <z_log_msg_post_finalize+0x88>)
}
    5f3e:	b002      	add	sp, #8
    5f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f44:	f01d bdba 	b.w	23abc <z_impl_k_sem_give>
    5f48:	200023fc 	.word	0x200023fc
    5f4c:	2000481f 	.word	0x2000481f
    5f50:	20002444 	.word	0x20002444
    5f54:	200012d8 	.word	0x200012d8
    5f58:	20000b58 	.word	0x20000b58

00005f5c <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    5f5c:	4b06      	ldr	r3, [pc, #24]	; (5f78 <z_log_msg2_commit+0x1c>)
{
    5f5e:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    5f60:	681b      	ldr	r3, [r3, #0]
{
    5f62:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5f64:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    5f66:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    5f68:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    5f6a:	4804      	ldr	r0, [pc, #16]	; (5f7c <z_log_msg2_commit+0x20>)
    5f6c:	f01f fbce 	bl	2570c <mpsc_pbuf_commit>
}
    5f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    5f74:	f7ff bfac 	b.w	5ed0 <z_log_msg_post_finalize>
    5f78:	200001b0 	.word	0x200001b0
    5f7c:	20002408 	.word	0x20002408

00005f80 <z_impl_log_panic>:
{
    5f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    5f82:	4f0e      	ldr	r7, [pc, #56]	; (5fbc <z_impl_log_panic+0x3c>)
    5f84:	783d      	ldrb	r5, [r7, #0]
    5f86:	b975      	cbnz	r5, 5fa6 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5f88:	4c0d      	ldr	r4, [pc, #52]	; (5fc0 <z_impl_log_panic+0x40>)
    5f8a:	4e0e      	ldr	r6, [pc, #56]	; (5fc4 <z_impl_log_panic+0x44>)
	log_init();
    5f8c:	f7ff fe58 	bl	5c40 <log_init>
    5f90:	1b36      	subs	r6, r6, r4
    5f92:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5f94:	42b5      	cmp	r5, r6
    5f96:	db07      	blt.n	5fa8 <z_impl_log_panic+0x28>
    5f98:	2000      	movs	r0, #0
    5f9a:	f7ff ff13 	bl	5dc4 <z_impl_log_process>
		while (log_process(false) == true) {
    5f9e:	2800      	cmp	r0, #0
    5fa0:	d1fa      	bne.n	5f98 <z_impl_log_panic+0x18>
	panic_mode = true;
    5fa2:	2301      	movs	r3, #1
    5fa4:	703b      	strb	r3, [r7, #0]
}
    5fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5fa8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5faa:	795b      	ldrb	r3, [r3, #5]
    5fac:	b11b      	cbz	r3, 5fb6 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5fae:	6823      	ldr	r3, [r4, #0]
    5fb0:	4620      	mov	r0, r4
    5fb2:	695b      	ldr	r3, [r3, #20]
    5fb4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5fb6:	3501      	adds	r5, #1
    5fb8:	3410      	adds	r4, #16
    5fba:	e7eb      	b.n	5f94 <z_impl_log_panic+0x14>
    5fbc:	2000481f 	.word	0x2000481f
    5fc0:	0002c3ac 	.word	0x0002c3ac
    5fc4:	0002c3bc 	.word	0x0002c3bc

00005fc8 <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    5fc8:	480b      	ldr	r0, [pc, #44]	; (5ff8 <z_log_runtime_filters_init+0x30>)
    5fca:	4b0c      	ldr	r3, [pc, #48]	; (5ffc <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
    5fcc:	b530      	push	{r4, r5, lr}
    5fce:	1a1b      	subs	r3, r3, r0
    5fd0:	4c0b      	ldr	r4, [pc, #44]	; (6000 <z_log_runtime_filters_init+0x38>)
    5fd2:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    5fd4:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    5fd6:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    5fd8:	4299      	cmp	r1, r3
    5fda:	d100      	bne.n	5fde <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    5fdc:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    5fde:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    5fe2:	6825      	ldr	r5, [r4, #0]
    5fe4:	f002 0207 	and.w	r2, r2, #7
    5fe8:	f025 0507 	bic.w	r5, r5, #7
    5fec:	432a      	orrs	r2, r5
    5fee:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    5ff2:	3101      	adds	r1, #1
    5ff4:	e7f0      	b.n	5fd8 <z_log_runtime_filters_init+0x10>
    5ff6:	bf00      	nop
    5ff8:	0002c1ec 	.word	0x0002c1ec
    5ffc:	0002c3ac 	.word	0x0002c3ac
    6000:	2000097c 	.word	0x2000097c

00006004 <log_source_name_get>:
    6004:	4a04      	ldr	r2, [pc, #16]	; (6018 <log_source_name_get+0x14>)
    6006:	4b05      	ldr	r3, [pc, #20]	; (601c <log_source_name_get+0x18>)
    6008:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    600a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    600e:	bf34      	ite	cc
    6010:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    6014:	2000      	movcs	r0, #0
}
    6016:	4770      	bx	lr
    6018:	0002c1ec 	.word	0x0002c1ec
    601c:	0002c3ac 	.word	0x0002c3ac

00006020 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    6020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6024:	4689      	mov	r9, r1
    6026:	4616      	mov	r6, r2
    6028:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
    602a:	4604      	mov	r4, r0
    602c:	b9b8      	cbnz	r0, 605e <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
    602e:	f8df a084 	ldr.w	sl, [pc, #132]	; 60b4 <z_impl_log_filter_set+0x94>
    6032:	4f21      	ldr	r7, [pc, #132]	; (60b8 <z_impl_log_filter_set+0x98>)
    6034:	eba7 070a 	sub.w	r7, r7, sl
    6038:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
    603a:	4605      	mov	r5, r0
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
    603c:	42bc      	cmp	r4, r7
    603e:	db02      	blt.n	6046 <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
    6040:	4628      	mov	r0, r5
    6042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    6046:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    604a:	4643      	mov	r3, r8
    604c:	4632      	mov	r2, r6
    604e:	4649      	mov	r1, r9
    6050:	f7ff ffe6 	bl	6020 <z_impl_log_filter_set>
				max = MAX(current, max);
    6054:	4285      	cmp	r5, r0
    6056:	bf38      	it	cc
    6058:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    605a:	3401      	adds	r4, #1
    605c:	e7ee      	b.n	603c <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
    605e:	4b17      	ldr	r3, [pc, #92]	; (60bc <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    6060:	4c17      	ldr	r4, [pc, #92]	; (60c0 <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
    6062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
    6066:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    6068:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    606a:	791a      	ldrb	r2, [r3, #4]
    606c:	2307      	movs	r3, #7
    606e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6072:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
    6076:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    6078:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
    607c:	bf28      	it	cs
    607e:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    6080:	ea23 0301 	bic.w	r3, r3, r1
    6084:	f005 0107 	and.w	r1, r5, #7
    6088:	fa01 f202 	lsl.w	r2, r1, r2
    608c:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    608e:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
    6090:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    6092:	fa23 f002 	lsr.w	r0, r3, r2
    6096:	f000 0007 	and.w	r0, r0, #7
    609a:	4281      	cmp	r1, r0
    609c:	f102 0203 	add.w	r2, r2, #3
    60a0:	bf38      	it	cc
    60a2:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    60a4:	2a1e      	cmp	r2, #30
    60a6:	d1f4      	bne.n	6092 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    60a8:	f023 0307 	bic.w	r3, r3, #7
    60ac:	430b      	orrs	r3, r1
    60ae:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
    60b2:	e7c5      	b.n	6040 <z_impl_log_filter_set+0x20>
    60b4:	0002c3ac 	.word	0x0002c3ac
    60b8:	0002c3bc 	.word	0x0002c3bc
    60bc:	0002c1ec 	.word	0x0002c1ec
    60c0:	2000097c 	.word	0x2000097c

000060c4 <backend_filter_set>:
{
    60c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60c6:	4c09      	ldr	r4, [pc, #36]	; (60ec <backend_filter_set+0x28>)
    60c8:	4b09      	ldr	r3, [pc, #36]	; (60f0 <backend_filter_set+0x2c>)
    60ca:	1ae4      	subs	r4, r4, r3
    60cc:	4606      	mov	r6, r0
    60ce:	460f      	mov	r7, r1
    60d0:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
    60d2:	2500      	movs	r5, #0
    60d4:	42a5      	cmp	r5, r4
    60d6:	d100      	bne.n	60da <backend_filter_set+0x16>
}
    60d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60da:	2100      	movs	r1, #0
    60dc:	b22a      	sxth	r2, r5
    60de:	463b      	mov	r3, r7
    60e0:	4630      	mov	r0, r6
    60e2:	f7ff ff9d 	bl	6020 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
    60e6:	3501      	adds	r5, #1
    60e8:	e7f4      	b.n	60d4 <backend_filter_set+0x10>
    60ea:	bf00      	nop
    60ec:	0002c3ac 	.word	0x0002c3ac
    60f0:	0002c1ec 	.word	0x0002c1ec

000060f4 <log_backend_enable>:
	id += backend - log_backend_get(0);
    60f4:	4b09      	ldr	r3, [pc, #36]	; (611c <log_backend_enable+0x28>)
    60f6:	1ac3      	subs	r3, r0, r3
{
    60f8:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    60fa:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    60fc:	6846      	ldr	r6, [r0, #4]
{
    60fe:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    6100:	3301      	adds	r3, #1
{
    6102:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    6104:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    6106:	4611      	mov	r1, r2
    6108:	f7ff ffdc 	bl	60c4 <backend_filter_set>
	backend->cb->ctx = ctx;
    610c:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
    610e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    6110:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    6112:	715a      	strb	r2, [r3, #5]
}
    6114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    6118:	f7ff bdbe 	b.w	5c98 <z_log_notify_backend_enabled>
    611c:	0002c3ac 	.word	0x0002c3ac

00006120 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    6120:	b163      	cbz	r3, 613c <log_filter_get+0x1c>
		if (source_id < 0) {
    6122:	2a00      	cmp	r2, #0
    6124:	db0f      	blt.n	6146 <log_filter_get+0x26>
	return backend->cb->id;
    6126:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    6128:	4908      	ldr	r1, [pc, #32]	; (614c <log_filter_get+0x2c>)
    612a:	7918      	ldrb	r0, [r3, #4]
    612c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6130:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    6134:	40d8      	lsrs	r0, r3
    6136:	f000 0007 	and.w	r0, r0, #7
    613a:	4770      	bx	lr
	return __log_const_start[source_id].level;
    613c:	4b04      	ldr	r3, [pc, #16]	; (6150 <log_filter_get+0x30>)
    613e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
    6142:	7910      	ldrb	r0, [r2, #4]
    6144:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    6146:	2004      	movs	r0, #4
}
    6148:	4770      	bx	lr
    614a:	bf00      	nop
    614c:	2000097c 	.word	0x2000097c
    6150:	0002c1ec 	.word	0x0002c1ec

00006154 <log_msg_mem_get_free>:
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    6154:	4b02      	ldr	r3, [pc, #8]	; (6160 <log_msg_mem_get_free+0xc>)
    6156:	6898      	ldr	r0, [r3, #8]
    6158:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
    615a:	1ac0      	subs	r0, r0, r3
    615c:	4770      	bx	lr
    615e:	bf00      	nop
    6160:	20002448 	.word	0x20002448

00006164 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
    6164:	4b01      	ldr	r3, [pc, #4]	; (616c <log_msg_mem_get_used+0x8>)
    6166:	6998      	ldr	r0, [r3, #24]
    6168:	4770      	bx	lr
    616a:	bf00      	nop
    616c:	20002448 	.word	0x20002448

00006170 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    6170:	b40e      	push	{r1, r2, r3}
    6172:	b503      	push	{r0, r1, lr}
    6174:	ab03      	add	r3, sp, #12
    6176:	4601      	mov	r1, r0
    6178:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    617c:	4804      	ldr	r0, [pc, #16]	; (6190 <print_formatted+0x20>)
	va_start(args, fmt);
    617e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    6180:	f7fe fea6 	bl	4ed0 <cbvprintf>
	va_end(args);

	return length;
}
    6184:	b002      	add	sp, #8
    6186:	f85d eb04 	ldr.w	lr, [sp], #4
    618a:	b003      	add	sp, #12
    618c:	4770      	bx	lr
    618e:	bf00      	nop
    6190:	00025b5b 	.word	0x00025b5b

00006194 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    6194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6198:	461d      	mov	r5, r3
    619a:	9b08      	ldr	r3, [sp, #32]
    619c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    619e:	06da      	lsls	r2, r3, #27
{
    61a0:	4604      	mov	r4, r0
    61a2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    61a4:	d405      	bmi.n	61b2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    61a6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    61a8:	bf4c      	ite	mi
    61aa:	492a      	ldrmi	r1, [pc, #168]	; (6254 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    61ac:	492a      	ldrpl	r1, [pc, #168]	; (6258 <hexdump_line_print+0xc4>)
    61ae:	f7ff ffdf 	bl	6170 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    61b2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 625c <hexdump_line_print+0xc8>
{
    61b6:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    61ba:	45a8      	cmp	r8, r5
    61bc:	db2a      	blt.n	6214 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    61be:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6260 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    61c2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 6264 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    61c6:	f8df a094 	ldr.w	sl, [pc, #148]	; 625c <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    61ca:	2500      	movs	r5, #0
		if (i < length) {
    61cc:	42bd      	cmp	r5, r7
    61ce:	d22f      	bcs.n	6230 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    61d0:	5d72      	ldrb	r2, [r6, r5]
    61d2:	4649      	mov	r1, r9
    61d4:	4620      	mov	r0, r4
    61d6:	f7ff ffcb 	bl	6170 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    61da:	3501      	adds	r5, #1
    61dc:	2d10      	cmp	r5, #16
    61de:	d120      	bne.n	6222 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    61e0:	4921      	ldr	r1, [pc, #132]	; (6268 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    61e2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 625c <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    61e6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 626c <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    61ea:	4620      	mov	r0, r4
    61ec:	f7ff ffc0 	bl	6170 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    61f0:	2500      	movs	r5, #0
		if (i < length) {
    61f2:	42af      	cmp	r7, r5
    61f4:	d928      	bls.n	6248 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    61f6:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    61f8:	f1a2 0320 	sub.w	r3, r2, #32
    61fc:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    61fe:	bf28      	it	cs
    6200:	222e      	movcs	r2, #46	; 0x2e
    6202:	4649      	mov	r1, r9
    6204:	4620      	mov	r0, r4
    6206:	f7ff ffb3 	bl	6170 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    620a:	3501      	adds	r5, #1
    620c:	2d10      	cmp	r5, #16
    620e:	d114      	bne.n	623a <hexdump_line_print+0xa6>
		}
	}
}
    6210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    6214:	4649      	mov	r1, r9
    6216:	4620      	mov	r0, r4
    6218:	f7ff ffaa 	bl	6170 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    621c:	f108 0801 	add.w	r8, r8, #1
    6220:	e7cb      	b.n	61ba <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    6222:	076a      	lsls	r2, r5, #29
    6224:	d1d2      	bne.n	61cc <hexdump_line_print+0x38>
			print_formatted(output, " ");
    6226:	4651      	mov	r1, sl
    6228:	4620      	mov	r0, r4
    622a:	f7ff ffa1 	bl	6170 <print_formatted>
    622e:	e7cd      	b.n	61cc <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    6230:	4641      	mov	r1, r8
    6232:	4620      	mov	r0, r4
    6234:	f7ff ff9c 	bl	6170 <print_formatted>
    6238:	e7cf      	b.n	61da <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    623a:	076b      	lsls	r3, r5, #29
    623c:	d1d9      	bne.n	61f2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    623e:	4641      	mov	r1, r8
    6240:	4620      	mov	r0, r4
    6242:	f7ff ff95 	bl	6170 <print_formatted>
    6246:	e7d4      	b.n	61f2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    6248:	4641      	mov	r1, r8
    624a:	4620      	mov	r0, r4
    624c:	f7ff ff90 	bl	6170 <print_formatted>
    6250:	e7db      	b.n	620a <hexdump_line_print+0x76>
    6252:	bf00      	nop
    6254:	0002eae3 	.word	0x0002eae3
    6258:	0002e6ad 	.word	0x0002e6ad
    625c:	0002e5a3 	.word	0x0002e5a3
    6260:	0002e5a1 	.word	0x0002e5a1
    6264:	0002e59b 	.word	0x0002e59b
    6268:	0002e5a5 	.word	0x0002e5a5
    626c:	0002f144 	.word	0x0002f144

00006270 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    6270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6274:	b087      	sub	sp, #28
    6276:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6278:	f001 0301 	and.w	r3, r1, #1
{
    627c:	9205      	str	r2, [sp, #20]
    627e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    6282:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6286:	9304      	str	r3, [sp, #16]
{
    6288:	4607      	mov	r7, r0
    628a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    628c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    6290:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    6294:	f01f fc40 	bl	25b18 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    6298:	4602      	mov	r2, r0
    629a:	2800      	cmp	r0, #0
    629c:	d044      	beq.n	6328 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    629e:	493a      	ldr	r1, [pc, #232]	; (6388 <prefix_print+0x118>)
    62a0:	4638      	mov	r0, r7
    62a2:	f7ff ff65 	bl	6170 <print_formatted>
    62a6:	4605      	mov	r5, r0
	}

	if (stamp) {
    62a8:	f1bb 0f00 	cmp.w	fp, #0
    62ac:	d008      	beq.n	62c0 <prefix_print+0x50>
	if (!format) {
    62ae:	f018 0f44 	tst.w	r8, #68	; 0x44
    62b2:	d13b      	bne.n	632c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    62b4:	4935      	ldr	r1, [pc, #212]	; (638c <prefix_print+0x11c>)
    62b6:	4622      	mov	r2, r4
    62b8:	4638      	mov	r0, r7
    62ba:	f7ff ff59 	bl	6170 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    62be:	4405      	add	r5, r0
	if (color) {
    62c0:	9b04      	ldr	r3, [sp, #16]
    62c2:	b153      	cbz	r3, 62da <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    62c4:	4b32      	ldr	r3, [pc, #200]	; (6390 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    62c6:	4933      	ldr	r1, [pc, #204]	; (6394 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    62c8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    62cc:	4b32      	ldr	r3, [pc, #200]	; (6398 <prefix_print+0x128>)
    62ce:	4638      	mov	r0, r7
    62d0:	2a00      	cmp	r2, #0
    62d2:	bf08      	it	eq
    62d4:	461a      	moveq	r2, r3
    62d6:	f7ff ff4b 	bl	6170 <print_formatted>
	if (level_on) {
    62da:	b13e      	cbz	r6, 62ec <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    62dc:	4b2f      	ldr	r3, [pc, #188]	; (639c <prefix_print+0x12c>)
    62de:	4930      	ldr	r1, [pc, #192]	; (63a0 <prefix_print+0x130>)
    62e0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    62e4:	4638      	mov	r0, r7
    62e6:	f7ff ff43 	bl	6170 <print_formatted>
    62ea:	4606      	mov	r6, r0
	if (source_id >= 0) {
    62ec:	f1ba 0f00 	cmp.w	sl, #0
    62f0:	db16      	blt.n	6320 <prefix_print+0xb0>
		total += print_formatted(output,
    62f2:	9b05      	ldr	r3, [sp, #20]
    62f4:	2b00      	cmp	r3, #0
    62f6:	d045      	beq.n	6384 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    62f8:	2301      	movs	r3, #1
    62fa:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    62fe:	4b29      	ldr	r3, [pc, #164]	; (63a4 <prefix_print+0x134>)
    6300:	4c29      	ldr	r4, [pc, #164]	; (63a8 <prefix_print+0x138>)
    6302:	f019 0f10 	tst.w	r9, #16
    6306:	bf18      	it	ne
    6308:	461c      	movne	r4, r3
    630a:	4651      	mov	r1, sl
    630c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    6310:	f7ff fe78 	bl	6004 <log_source_name_get>
    6314:	4621      	mov	r1, r4
    6316:	4602      	mov	r2, r0
    6318:	4638      	mov	r0, r7
    631a:	f7ff ff29 	bl	6170 <print_formatted>
    631e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    6320:	1970      	adds	r0, r6, r5
    6322:	b007      	add	sp, #28
    6324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    6328:	4605      	mov	r5, r0
    632a:	e7bd      	b.n	62a8 <prefix_print+0x38>
	} else if (freq != 0U) {
    632c:	4b1f      	ldr	r3, [pc, #124]	; (63ac <prefix_print+0x13c>)
    632e:	6818      	ldr	r0, [r3, #0]
    6330:	2800      	cmp	r0, #0
    6332:	d0c4      	beq.n	62be <prefix_print+0x4e>
		timestamp /= timestamp_div;
    6334:	4b1e      	ldr	r3, [pc, #120]	; (63b0 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    6336:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    633a:	681b      	ldr	r3, [r3, #0]
    633c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    6340:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    6344:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    6348:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    634c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    6350:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    6354:	fbb3 f2f1 	udiv	r2, r3, r1
    6358:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    635c:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    6360:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6364:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    6368:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    636c:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    6370:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6372:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    6376:	490f      	ldr	r1, [pc, #60]	; (63b4 <prefix_print+0x144>)
    6378:	e9cd e001 	strd	lr, r0, [sp, #4]
    637c:	4638      	mov	r0, r7
    637e:	f7ff fef7 	bl	6170 <print_formatted>
    6382:	e79c      	b.n	62be <prefix_print+0x4e>
		total += print_formatted(output,
    6384:	4c08      	ldr	r4, [pc, #32]	; (63a8 <prefix_print+0x138>)
    6386:	e7c0      	b.n	630a <prefix_print+0x9a>
    6388:	0002e5b5 	.word	0x0002e5b5
    638c:	0002e5b9 	.word	0x0002e5b9
    6390:	0002c5c8 	.word	0x0002c5c8
    6394:	0002ec02 	.word	0x0002ec02
    6398:	0002e5a7 	.word	0x0002e5a7
    639c:	0002c5dc 	.word	0x0002c5dc
    63a0:	0002e5de 	.word	0x0002e5de
    63a4:	0002e5b1 	.word	0x0002e5b1
    63a8:	0002e5ac 	.word	0x0002e5ac
    63ac:	20002464 	.word	0x20002464
    63b0:	20002468 	.word	0x20002468
    63b4:	0002e5c2 	.word	0x0002e5c2

000063b8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    63b8:	b538      	push	{r3, r4, r5, lr}
    63ba:	460c      	mov	r4, r1
	if (color) {
    63bc:	07e1      	lsls	r1, r4, #31
{
    63be:	4605      	mov	r5, r0
	if (color) {
    63c0:	d503      	bpl.n	63ca <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    63c2:	4a08      	ldr	r2, [pc, #32]	; (63e4 <postfix_print+0x2c>)
    63c4:	4908      	ldr	r1, [pc, #32]	; (63e8 <postfix_print+0x30>)
    63c6:	f7ff fed3 	bl	6170 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    63ca:	06e2      	lsls	r2, r4, #27
    63cc:	d408      	bmi.n	63e0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    63ce:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    63d0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    63d2:	bf4c      	ite	mi
    63d4:	4905      	ldrmi	r1, [pc, #20]	; (63ec <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    63d6:	4906      	ldrpl	r1, [pc, #24]	; (63f0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    63d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    63dc:	f7ff bec8 	b.w	6170 <print_formatted>
}
    63e0:	bd38      	pop	{r3, r4, r5, pc}
    63e2:	bf00      	nop
    63e4:	0002e5a7 	.word	0x0002e5a7
    63e8:	0002ec02 	.word	0x0002ec02
    63ec:	0002eae3 	.word	0x0002eae3
    63f0:	0002e6ad 	.word	0x0002e6ad

000063f4 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    63f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.desc.level;
    63f8:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    63fa:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    63fe:	4606      	mov	r6, r0
    6400:	460c      	mov	r4, r1
    6402:	4690      	mov	r8, r2
    6404:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    6408:	d04d      	beq.n	64a6 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    640a:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    640c:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    640e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    6412:	2b00      	cmp	r3, #0
    6414:	d044      	beq.n	64a0 <log_output_msg2_process+0xac>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    6416:	4925      	ldr	r1, [pc, #148]	; (64ac <log_output_msg2_process+0xb8>)
    6418:	1a5b      	subs	r3, r3, r1
    641a:	f343 038f 	sbfx	r3, r3, #2, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    641e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    6422:	f8cd 9000 	str.w	r9, [sp]
    6426:	68a3      	ldr	r3, [r4, #8]
    6428:	2200      	movs	r2, #0
    642a:	4641      	mov	r1, r8
    642c:	4630      	mov	r0, r6
    642e:	f7ff ff1f 	bl	6270 <prefix_print>
    6432:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    6434:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    6436:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    643a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    643e:	b153      	cbz	r3, 6456 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    6440:	4f1b      	ldr	r7, [pc, #108]	; (64b0 <log_output_msg2_process+0xbc>)
    6442:	481c      	ldr	r0, [pc, #112]	; (64b4 <log_output_msg2_process+0xc0>)
    6444:	491c      	ldr	r1, [pc, #112]	; (64b8 <log_output_msg2_process+0xc4>)
    6446:	462b      	mov	r3, r5
    6448:	4632      	mov	r2, r6
    644a:	f1b9 0f00 	cmp.w	r9, #0
    644e:	bf08      	it	eq
    6450:	4638      	moveq	r0, r7
    6452:	f01e fb68 	bl	24b26 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    6456:	8867      	ldrh	r7, [r4, #2]
    6458:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    645c:	b197      	cbz	r7, 6484 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    645e:	6823      	ldr	r3, [r4, #0]
    6460:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6464:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    6466:	2f10      	cmp	r7, #16
    6468:	463c      	mov	r4, r7
    646a:	bf28      	it	cs
    646c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    646e:	4629      	mov	r1, r5
    6470:	f8cd 8000 	str.w	r8, [sp]
    6474:	4653      	mov	r3, sl
    6476:	4622      	mov	r2, r4
    6478:	4630      	mov	r0, r6
    647a:	f7ff fe8b 	bl	6194 <hexdump_line_print>
	} while (len);
    647e:	1b3f      	subs	r7, r7, r4
		data += length;
    6480:	4425      	add	r5, r4
	} while (len);
    6482:	d1f0      	bne.n	6466 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    6484:	f1b9 0f00 	cmp.w	r9, #0
    6488:	d004      	beq.n	6494 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    648a:	464a      	mov	r2, r9
    648c:	4641      	mov	r1, r8
    648e:	4630      	mov	r0, r6
    6490:	f7ff ff92 	bl	63b8 <postfix_print>
	}

	log_output_flush(output);
    6494:	4630      	mov	r0, r6
}
    6496:	b004      	add	sp, #16
    6498:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    649c:	f01f bb50 	b.w	25b40 <log_output_flush>
		int16_t source_id = source ?
    64a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64a4:	e7bb      	b.n	641e <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    64a6:	46ca      	mov	sl, r9
    64a8:	e7c4      	b.n	6434 <log_output_msg2_process+0x40>
    64aa:	bf00      	nop
    64ac:	2000097c 	.word	0x2000097c
    64b0:	00025b91 	.word	0x00025b91
    64b4:	00025b5b 	.word	0x00025b5b
    64b8:	00004ed1 	.word	0x00004ed1

000064bc <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    64bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    64be:	f242 730f 	movw	r3, #9999	; 0x270f
    64c2:	428b      	cmp	r3, r1
    64c4:	bf28      	it	cs
    64c6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    64c8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    64ca:	4a0f      	ldr	r2, [pc, #60]	; (6508 <log_output_dropped_process+0x4c>)
{
    64cc:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    64ce:	2105      	movs	r1, #5
    64d0:	4668      	mov	r0, sp
    64d2:	f01e fba0 	bl	24c16 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    64d6:	6863      	ldr	r3, [r4, #4]
    64d8:	490c      	ldr	r1, [pc, #48]	; (650c <log_output_dropped_process+0x50>)
    64da:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    64dc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    64de:	2204      	movs	r2, #4
    64e0:	4628      	mov	r0, r5
    64e2:	f01f fb20 	bl	25b26 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    64e6:	6863      	ldr	r3, [r4, #4]
    64e8:	4632      	mov	r2, r6
    64ea:	4669      	mov	r1, sp
    64ec:	4628      	mov	r0, r5
    64ee:	685b      	ldr	r3, [r3, #4]
    64f0:	f01f fb19 	bl	25b26 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    64f4:	6863      	ldr	r3, [r4, #4]
    64f6:	4906      	ldr	r1, [pc, #24]	; (6510 <log_output_dropped_process+0x54>)
    64f8:	685b      	ldr	r3, [r3, #4]
    64fa:	2217      	movs	r2, #23
    64fc:	4628      	mov	r0, r5
    64fe:	f01f fb12 	bl	25b26 <buffer_write>
		     output->control_block->ctx);
}
    6502:	b002      	add	sp, #8
    6504:	bd70      	pop	{r4, r5, r6, pc}
    6506:	bf00      	nop
    6508:	00031829 	.word	0x00031829
    650c:	0002e61c 	.word	0x0002e61c
    6510:	0002e604 	.word	0x0002e604

00006514 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    6514:	4a08      	ldr	r2, [pc, #32]	; (6538 <log_output_timestamp_freq_set+0x24>)
{
    6516:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    6518:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    651a:	4c08      	ldr	r4, [pc, #32]	; (653c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    651c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    651e:	2100      	movs	r1, #0
    6520:	42a0      	cmp	r0, r4
    6522:	d804      	bhi.n	652e <log_output_timestamp_freq_set+0x1a>
    6524:	b101      	cbz	r1, 6528 <log_output_timestamp_freq_set+0x14>
    6526:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    6528:	4b05      	ldr	r3, [pc, #20]	; (6540 <log_output_timestamp_freq_set+0x2c>)
    652a:	6018      	str	r0, [r3, #0]
}
    652c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    652e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    6530:	005b      	lsls	r3, r3, #1
    6532:	2101      	movs	r1, #1
    6534:	e7f4      	b.n	6520 <log_output_timestamp_freq_set+0xc>
    6536:	bf00      	nop
    6538:	20002468 	.word	0x20002468
    653c:	000f4240 	.word	0x000f4240
    6540:	20002464 	.word	0x20002464

00006544 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    6544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6548:	b085      	sub	sp, #20
    654a:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    654e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    6552:	4605      	mov	r5, r0
    6554:	4688      	mov	r8, r1
    6556:	4614      	mov	r4, r2
    6558:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    655a:	f1bb 0f00 	cmp.w	fp, #0
    655e:	d037      	beq.n	65d0 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    6560:	2200      	movs	r2, #0
    6562:	f8cd a000 	str.w	sl, [sp]
    6566:	465b      	mov	r3, fp
    6568:	210c      	movs	r1, #12
    656a:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    656c:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    6570:	f7fe f9b0 	bl	48d4 <cbvprintf_package>
    6574:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    6576:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    657a:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    657e:	f005 0407 	and.w	r4, r5, #7
    6582:	4d14      	ldr	r5, [pc, #80]	; (65d4 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    6584:	4b14      	ldr	r3, [pc, #80]	; (65d8 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    6586:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6588:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    658a:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    658e:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6592:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    6596:	432c      	orrs	r4, r5
    6598:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    659c:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    659e:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    65a0:	f7ff fbf6 	bl	5d90 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    65a4:	4605      	mov	r5, r0
    65a6:	b150      	cbz	r0, 65be <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    65a8:	f1bb 0f00 	cmp.w	fp, #0
    65ac:	d007      	beq.n	65be <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    65ae:	f8cd a000 	str.w	sl, [sp]
    65b2:	465b      	mov	r3, fp
    65b4:	2200      	movs	r2, #0
    65b6:	4639      	mov	r1, r7
    65b8:	300c      	adds	r0, #12
    65ba:	f7fe f98b 	bl	48d4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    65be:	464b      	mov	r3, r9
    65c0:	4622      	mov	r2, r4
    65c2:	4641      	mov	r1, r8
    65c4:	4628      	mov	r0, r5
}
    65c6:	b005      	add	sp, #20
    65c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    65cc:	f01f baed 	b.w	25baa <z_log_msg2_finalize>
		plen = 0;
    65d0:	465f      	mov	r7, fp
    65d2:	e7d0      	b.n	6576 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    65d4:	0007fe00 	.word	0x0007fe00
    65d8:	7ff80000 	.word	0x7ff80000

000065dc <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    65dc:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    65de:	2804      	cmp	r0, #4
	entry->handler = NULL;
    65e0:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    65e2:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    65e4:	bf98      	it	ls
    65e6:	4b04      	ldrls	r3, [pc, #16]	; (65f8 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    65e8:	4a04      	ldr	r2, [pc, #16]	; (65fc <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    65ea:	bf98      	it	ls
    65ec:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    65f0:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    65f2:	600b      	str	r3, [r1, #0]
}
    65f4:	4770      	bx	lr
    65f6:	bf00      	nop
    65f8:	0002c630 	.word	0x0002c630
    65fc:	0002c60c 	.word	0x0002c60c

00006600 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    6600:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    6602:	4a08      	ldr	r2, [pc, #32]	; (6624 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    6604:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    6606:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    6608:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    660a:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    660c:	4b06      	ldr	r3, [pc, #24]	; (6628 <backend_name_get+0x28>)
    660e:	4a07      	ldr	r2, [pc, #28]	; (662c <backend_name_get+0x2c>)
    6610:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    6612:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    6616:	bf3e      	ittt	cc
    6618:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    661c:	689b      	ldrcc	r3, [r3, #8]
    661e:	600b      	strcc	r3, [r1, #0]
	}
}
    6620:	4770      	bx	lr
    6622:	bf00      	nop
    6624:	0002c784 	.word	0x0002c784
    6628:	0002c3ac 	.word	0x0002c3ac
    662c:	0002c3bc 	.word	0x0002c3bc

00006630 <cmd_log_memory_slabs>:
{
    6630:	b538      	push	{r3, r4, r5, lr}
    6632:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
    6634:	f7ff fd8e 	bl	6154 <log_msg_mem_get_free>
    6638:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
    663a:	f7ff fd93 	bl	6164 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
    663e:	4a09      	ldr	r2, [pc, #36]	; (6664 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
    6640:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
    6642:	2108      	movs	r1, #8
    6644:	4620      	mov	r0, r4
    6646:	f01f fcc6 	bl	25fd6 <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
    664a:	462b      	mov	r3, r5
    664c:	4620      	mov	r0, r4
    664e:	4a06      	ldr	r2, [pc, #24]	; (6668 <cmd_log_memory_slabs+0x38>)
    6650:	2108      	movs	r1, #8
    6652:	f01f fcc0 	bl	25fd6 <shell_fprintf>
		shell_print(
    6656:	4620      	mov	r0, r4
    6658:	4a04      	ldr	r2, [pc, #16]	; (666c <cmd_log_memory_slabs+0x3c>)
    665a:	2108      	movs	r1, #8
    665c:	f01f fcbb 	bl	25fd6 <shell_fprintf>
}
    6660:	2000      	movs	r0, #0
    6662:	bd38      	pop	{r3, r4, r5, pc}
    6664:	0002e621 	.word	0x0002e621
    6668:	0002e632 	.word	0x0002e632
    666c:	0002e643 	.word	0x0002e643

00006670 <cmd_log_backends_list>:
{
    6670:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6674:	4b11      	ldr	r3, [pc, #68]	; (66bc <cmd_log_backends_list+0x4c>)
    6676:	4c12      	ldr	r4, [pc, #72]	; (66c0 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    6678:	f8df 8048 	ldr.w	r8, [pc, #72]	; 66c4 <cmd_log_backends_list+0x54>
    667c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 66c8 <cmd_log_backends_list+0x58>
    6680:	f8df a048 	ldr.w	sl, [pc, #72]	; 66cc <cmd_log_backends_list+0x5c>
    6684:	1b1b      	subs	r3, r3, r4
{
    6686:	4607      	mov	r7, r0
    6688:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
    668a:	2500      	movs	r5, #0
    668c:	42b5      	cmp	r5, r6
    668e:	db03      	blt.n	6698 <cmd_log_backends_list+0x28>
}
    6690:	2000      	movs	r0, #0
    6692:	b002      	add	sp, #8
    6694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    6698:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    669a:	7959      	ldrb	r1, [r3, #5]
    669c:	791b      	ldrb	r3, [r3, #4]
    669e:	2900      	cmp	r1, #0
    66a0:	bf14      	ite	ne
    66a2:	4642      	movne	r2, r8
    66a4:	464a      	moveq	r2, r9
    66a6:	e9cd 2300 	strd	r2, r3, [sp]
    66aa:	2108      	movs	r1, #8
    66ac:	68a3      	ldr	r3, [r4, #8]
    66ae:	4652      	mov	r2, sl
    66b0:	4638      	mov	r0, r7
    66b2:	f01f fc90 	bl	25fd6 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    66b6:	3501      	adds	r5, #1
    66b8:	3410      	adds	r4, #16
    66ba:	e7e7      	b.n	668c <cmd_log_backends_list+0x1c>
    66bc:	0002c3bc 	.word	0x0002c3bc
    66c0:	0002c3ac 	.word	0x0002c3ac
    66c4:	0003196f 	.word	0x0003196f
    66c8:	0002f6d8 	.word	0x0002f6d8
    66cc:	0002e68f 	.word	0x0002e68f

000066d0 <log_status>:
{
    66d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    66d4:	4b24      	ldr	r3, [pc, #144]	; (6768 <log_status+0x98>)
    66d6:	4c25      	ldr	r4, [pc, #148]	; (676c <log_status+0x9c>)
    66d8:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
    66da:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    66dc:	795b      	ldrb	r3, [r3, #5]
{
    66de:	b085      	sub	sp, #20
    66e0:	4605      	mov	r5, r0
    66e2:	460e      	mov	r6, r1
    66e4:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
    66e6:	b91b      	cbnz	r3, 66f0 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    66e8:	4a21      	ldr	r2, [pc, #132]	; (6770 <log_status+0xa0>)
    66ea:	2103      	movs	r1, #3
    66ec:	f01f fc73 	bl	25fd6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    66f0:	4b20      	ldr	r3, [pc, #128]	; (6774 <log_status+0xa4>)
    66f2:	4a21      	ldr	r2, [pc, #132]	; (6778 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    66f4:	f8df a084 	ldr.w	sl, [pc, #132]	; 677c <log_status+0xac>
    66f8:	f8df b084 	ldr.w	fp, [pc, #132]	; 6780 <log_status+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    66fc:	2108      	movs	r1, #8
    66fe:	4628      	mov	r0, r5
    6700:	f01f fc69 	bl	25fd6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    6704:	4a1f      	ldr	r2, [pc, #124]	; (6784 <log_status+0xb4>)
    6706:	2108      	movs	r1, #8
    6708:	4628      	mov	r0, r5
    670a:	f01f fc64 	bl	25fd6 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    670e:	f04f 0800 	mov.w	r8, #0
    6712:	fa0f f788 	sxth.w	r7, r8
    6716:	42a7      	cmp	r7, r4
    6718:	f108 0801 	add.w	r8, r8, #1
    671c:	d303      	bcc.n	6726 <log_status+0x56>
}
    671e:	2000      	movs	r0, #0
    6720:	b005      	add	sp, #20
    6722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    6726:	463a      	mov	r2, r7
    6728:	2301      	movs	r3, #1
    672a:	2100      	movs	r1, #0
    672c:	4630      	mov	r0, r6
    672e:	f7ff fcf7 	bl	6120 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    6732:	2300      	movs	r3, #0
    6734:	463a      	mov	r2, r7
    6736:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    6738:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    673a:	4630      	mov	r0, r6
    673c:	f7ff fcf0 	bl	6120 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    6740:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    6742:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    6744:	2000      	movs	r0, #0
    6746:	f7ff fc5d 	bl	6004 <log_source_name_get>
    674a:	9a03      	ldr	r2, [sp, #12]
    674c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    6750:	9201      	str	r2, [sp, #4]
    6752:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    6756:	9200      	str	r2, [sp, #0]
    6758:	4603      	mov	r3, r0
    675a:	465a      	mov	r2, fp
    675c:	2108      	movs	r1, #8
    675e:	4628      	mov	r0, r5
    6760:	f01f fc39 	bl	25fd6 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    6764:	e7d5      	b.n	6712 <log_status+0x42>
    6766:	bf00      	nop
    6768:	0002c1ec 	.word	0x0002c1ec
    676c:	0002c3ac 	.word	0x0002c3ac
    6770:	0002e6b0 	.word	0x0002e6b0
    6774:	0002e6c2 	.word	0x0002e6c2
    6778:	0002e6ce 	.word	0x0002e6ce
    677c:	0002c61c 	.word	0x0002c61c
    6780:	0002e729 	.word	0x0002e729
    6784:	0002e6ec 	.word	0x0002e6ec

00006788 <module_name_get>:
{
    6788:	b510      	push	{r4, lr}
	entry->handler = NULL;
    678a:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    678c:	4a05      	ldr	r2, [pc, #20]	; (67a4 <module_name_get+0x1c>)
	entry->handler = NULL;
    678e:	60cb      	str	r3, [r1, #12]
{
    6790:	460c      	mov	r4, r1
	entry->help  = NULL;
    6792:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    6794:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    6796:	4601      	mov	r1, r0
    6798:	4618      	mov	r0, r3
    679a:	f7ff fc33 	bl	6004 <log_source_name_get>
    679e:	6020      	str	r0, [r4, #0]
}
    67a0:	bd10      	pop	{r4, pc}
    67a2:	bf00      	nop
    67a4:	0002c60c 	.word	0x0002c60c

000067a8 <shell_backend_cmd_execute>:
{
    67a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    67ac:	f852 ac04 	ldr.w	sl, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    67b0:	4c18      	ldr	r4, [pc, #96]	; (6814 <shell_backend_cmd_execute+0x6c>)
{
    67b2:	b085      	sub	sp, #20
    67b4:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    67b6:	4650      	mov	r0, sl
{
    67b8:	4689      	mov	r9, r1
    67ba:	4690      	mov	r8, r2
    67bc:	9302      	str	r3, [sp, #8]
	size_t slen = strlen(name);
    67be:	f021 fea4 	bl	2850a <strlen>
    67c2:	4915      	ldr	r1, [pc, #84]	; (6818 <shell_backend_cmd_execute+0x70>)
    67c4:	1b09      	subs	r1, r1, r4
    67c6:	110b      	asrs	r3, r1, #4
    67c8:	4602      	mov	r2, r0
    67ca:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    67cc:	2700      	movs	r7, #0
    67ce:	46a3      	mov	fp, r4
    67d0:	9b01      	ldr	r3, [sp, #4]
    67d2:	429f      	cmp	r7, r3
    67d4:	db08      	blt.n	67e8 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    67d6:	4a11      	ldr	r2, [pc, #68]	; (681c <shell_backend_cmd_execute+0x74>)
    67d8:	4653      	mov	r3, sl
    67da:	2101      	movs	r1, #1
    67dc:	4630      	mov	r0, r6
    67de:	f01f fbfa 	bl	25fd6 <shell_fprintf>
		return -ENOEXEC;
    67e2:	f06f 0507 	mvn.w	r5, #7
    67e6:	e00f      	b.n	6808 <shell_backend_cmd_execute+0x60>
		if (strncmp(name, backend->name, slen) == 0) {
    67e8:	68a1      	ldr	r1, [r4, #8]
    67ea:	9203      	str	r2, [sp, #12]
    67ec:	4650      	mov	r0, sl
    67ee:	f021 fea8 	bl	28542 <strncmp>
    67f2:	3410      	adds	r4, #16
    67f4:	9a03      	ldr	r2, [sp, #12]
    67f6:	4605      	mov	r5, r0
    67f8:	b950      	cbnz	r0, 6810 <shell_backend_cmd_execute+0x68>
		func(shell, backend, argc, argv);
    67fa:	9c02      	ldr	r4, [sp, #8]
    67fc:	4643      	mov	r3, r8
    67fe:	464a      	mov	r2, r9
    6800:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
    6804:	4630      	mov	r0, r6
    6806:	47a0      	blx	r4
}
    6808:	4628      	mov	r0, r5
    680a:	b005      	add	sp, #20
    680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
    6810:	3701      	adds	r7, #1
    6812:	e7dd      	b.n	67d0 <shell_backend_cmd_execute+0x28>
    6814:	0002c3ac 	.word	0x0002c3ac
    6818:	0002c3bc 	.word	0x0002c3bc
    681c:	0002e73d 	.word	0x0002e73d

00006820 <cmd_log_backend_status>:
{
    6820:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    6822:	4b02      	ldr	r3, [pc, #8]	; (682c <cmd_log_backend_status+0xc>)
    6824:	f7ff ffc0 	bl	67a8 <shell_backend_cmd_execute>
}
    6828:	2000      	movs	r0, #0
    682a:	bd08      	pop	{r3, pc}
    682c:	000066d1 	.word	0x000066d1

00006830 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    6830:	4b01      	ldr	r3, [pc, #4]	; (6838 <cmd_log_backend_halt+0x8>)
    6832:	f7ff bfb9 	b.w	67a8 <shell_backend_cmd_execute>
    6836:	bf00      	nop
    6838:	00025c21 	.word	0x00025c21

0000683c <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    683c:	4b01      	ldr	r3, [pc, #4]	; (6844 <cmd_log_backend_go+0x8>)
    683e:	f7ff bfb3 	b.w	67a8 <shell_backend_cmd_execute>
    6842:	bf00      	nop
    6844:	00025c29 	.word	0x00025c29

00006848 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    6848:	4b01      	ldr	r3, [pc, #4]	; (6850 <cmd_log_backend_enable+0x8>)
    684a:	f7ff bfad 	b.w	67a8 <shell_backend_cmd_execute>
    684e:	bf00      	nop
    6850:	00006951 	.word	0x00006951

00006854 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    6854:	4b01      	ldr	r3, [pc, #4]	; (685c <cmd_log_backend_disable+0x8>)
    6856:	f7ff bfa7 	b.w	67a8 <shell_backend_cmd_execute>
    685a:	bf00      	nop
    685c:	00025c75 	.word	0x00025c75

00006860 <shell_state_precheck>:
{
    6860:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    6862:	69c3      	ldr	r3, [r0, #28]
    6864:	68db      	ldr	r3, [r3, #12]
    6866:	791c      	ldrb	r4, [r3, #4]
    6868:	b92c      	cbnz	r4, 6876 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    686a:	4a04      	ldr	r2, [pc, #16]	; (687c <shell_state_precheck+0x1c>)
    686c:	2101      	movs	r1, #1
    686e:	f01f fbb2 	bl	25fd6 <shell_fprintf>
    6872:	4620      	mov	r0, r4
}
    6874:	bd10      	pop	{r4, pc}
	return true;
    6876:	2001      	movs	r0, #1
    6878:	e7fc      	b.n	6874 <shell_state_precheck+0x14>
    687a:	bf00      	nop
    687c:	0002e752 	.word	0x0002e752

00006880 <filters_set>:
{
    6880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6884:	4e2c      	ldr	r6, [pc, #176]	; (6938 <filters_set+0xb8>)
    6886:	461f      	mov	r7, r3
    6888:	4b2c      	ldr	r3, [pc, #176]	; (693c <filters_set+0xbc>)
    688a:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
    688c:	1e15      	subs	r5, r2, #0
{
    688e:	b085      	sub	sp, #20
    6890:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
    6894:	bf14      	ite	ne
    6896:	462b      	movne	r3, r5
    6898:	4633      	moveq	r3, r6
    689a:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    689c:	684b      	ldr	r3, [r1, #4]
    689e:	795b      	ldrb	r3, [r3, #5]
{
    68a0:	4680      	mov	r8, r0
    68a2:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    68a4:	b91b      	cbnz	r3, 68ae <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    68a6:	4a26      	ldr	r2, [pc, #152]	; (6940 <filters_set+0xc0>)
    68a8:	2103      	movs	r1, #3
    68aa:	f01f fb94 	bl	25fd6 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    68ae:	f8df a094 	ldr.w	sl, [pc, #148]	; 6944 <filters_set+0xc4>
	for (i = 0U; i < modules_cnt; i++) {
    68b2:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    68b4:	9b02      	ldr	r3, [sp, #8]
    68b6:	429c      	cmp	r4, r3
    68b8:	db02      	blt.n	68c0 <filters_set+0x40>
}
    68ba:	b005      	add	sp, #20
    68bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    68c0:	b3bd      	cbz	r5, 6932 <filters_set+0xb2>
    68c2:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    68c6:	2300      	movs	r3, #0
    68c8:	429e      	cmp	r6, r3
    68ca:	d107      	bne.n	68dc <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    68cc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    68d0:	4a1d      	ldr	r2, [pc, #116]	; (6948 <filters_set+0xc8>)
    68d2:	2101      	movs	r1, #1
    68d4:	4640      	mov	r0, r8
    68d6:	f01f fb7e 	bl	25fd6 <shell_fprintf>
    68da:	e023      	b.n	6924 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    68dc:	4619      	mov	r1, r3
    68de:	2000      	movs	r0, #0
    68e0:	9303      	str	r3, [sp, #12]
    68e2:	f7ff fb8f 	bl	6004 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    68e6:	2240      	movs	r2, #64	; 0x40
    68e8:	4659      	mov	r1, fp
    68ea:	f021 fe2a 	bl	28542 <strncmp>
    68ee:	9b03      	ldr	r3, [sp, #12]
    68f0:	b9d0      	cbnz	r0, 6928 <filters_set+0xa8>
			return i;
    68f2:	461a      	mov	r2, r3
    68f4:	2100      	movs	r1, #0
    68f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    68f8:	b212      	sxth	r2, r2
    68fa:	4648      	mov	r0, r9
    68fc:	f7ff fb90 	bl	6020 <z_impl_log_filter_set>
			if (set_lvl != level) {
    6900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6902:	4283      	cmp	r3, r0
    6904:	4683      	mov	fp, r0
    6906:	d00d      	beq.n	6924 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    6908:	b985      	cbnz	r5, 692c <filters_set+0xac>
					log_source_name_get(
    690a:	4621      	mov	r1, r4
    690c:	4628      	mov	r0, r5
    690e:	f7ff fb79 	bl	6004 <log_source_name_get>
    6912:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    6914:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    6918:	9200      	str	r2, [sp, #0]
    691a:	2103      	movs	r1, #3
    691c:	4a0b      	ldr	r2, [pc, #44]	; (694c <filters_set+0xcc>)
    691e:	4640      	mov	r0, r8
    6920:	f01f fb59 	bl	25fd6 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    6924:	3401      	adds	r4, #1
    6926:	e7c5      	b.n	68b4 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    6928:	3301      	adds	r3, #1
    692a:	e7cd      	b.n	68c8 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
    692c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    6930:	e7f0      	b.n	6914 <filters_set+0x94>
    6932:	4622      	mov	r2, r4
    6934:	e7de      	b.n	68f4 <filters_set+0x74>
    6936:	bf00      	nop
    6938:	0002c3ac 	.word	0x0002c3ac
    693c:	0002c1ec 	.word	0x0002c1ec
    6940:	0002e776 	.word	0x0002e776
    6944:	0002c61c 	.word	0x0002c61c
    6948:	0002e7a1 	.word	0x0002e7a1
    694c:	0002e78b 	.word	0x0002e78b

00006950 <log_enable>:
{
    6950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    6954:	f8d3 b004 	ldr.w	fp, [r3, #4]
    6958:	f8df a04c 	ldr.w	sl, [pc, #76]	; 69a8 <log_enable+0x58>
{
    695c:	4606      	mov	r6, r0
    695e:	4688      	mov	r8, r1
    6960:	4691      	mov	r9, r2
    6962:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    6964:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    6966:	f85a 1b04 	ldr.w	r1, [sl], #4
    696a:	2204      	movs	r2, #4
    696c:	4658      	mov	r0, fp
    696e:	f021 fde8 	bl	28542 <strncmp>
    6972:	4604      	mov	r4, r0
    6974:	b170      	cbz	r0, 6994 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    6976:	3701      	adds	r7, #1
    6978:	2f05      	cmp	r7, #5
    697a:	d1f4      	bne.n	6966 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    697c:	686b      	ldr	r3, [r5, #4]
    697e:	4a0b      	ldr	r2, [pc, #44]	; (69ac <log_enable+0x5c>)
    6980:	2101      	movs	r1, #1
    6982:	4630      	mov	r0, r6
    6984:	f01f fb27 	bl	25fd6 <shell_fprintf>
    6988:	f06f 0407 	mvn.w	r4, #7
}
    698c:	4620      	mov	r0, r4
    698e:	b003      	add	sp, #12
    6990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    6994:	9700      	str	r7, [sp, #0]
    6996:	f105 0308 	add.w	r3, r5, #8
    699a:	f1a9 0202 	sub.w	r2, r9, #2
    699e:	4641      	mov	r1, r8
    69a0:	4630      	mov	r0, r6
    69a2:	f7ff ff6d 	bl	6880 <filters_set>
	return 0;
    69a6:	e7f1      	b.n	698c <log_enable+0x3c>
    69a8:	0002c61c 	.word	0x0002c61c
    69ac:	0002e7bb 	.word	0x0002e7bb

000069b0 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    69b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    69b2:	2407      	movs	r4, #7
    69b4:	9402      	str	r4, [sp, #8]
    69b6:	4c04      	ldr	r4, [pc, #16]	; (69c8 <read_pnp_id+0x18>)
    69b8:	9401      	str	r4, [sp, #4]
    69ba:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    69be:	9400      	str	r4, [sp, #0]
    69c0:	f023 f9d8 	bl	29d74 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    69c4:	b004      	add	sp, #16
    69c6:	bd10      	pop	{r4, pc}
    69c8:	2000095a 	.word	0x2000095a

000069cc <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    69cc:	b513      	push	{r0, r1, r4, lr}
    69ce:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    69d0:	f024 fd9a 	bl	2b508 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    69d4:	f3c0 2307 	ubfx	r3, r0, #8, #8
    69d8:	9301      	str	r3, [sp, #4]
    69da:	f3c0 4307 	ubfx	r3, r0, #16, #8
    69de:	9300      	str	r3, [sp, #0]
    69e0:	4a04      	ldr	r2, [pc, #16]	; (69f4 <cmd_kernel_version+0x28>)
    69e2:	0e03      	lsrs	r3, r0, #24
    69e4:	2108      	movs	r1, #8
    69e6:	4620      	mov	r0, r4
    69e8:	f01f faf5 	bl	25fd6 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    69ec:	2000      	movs	r0, #0
    69ee:	b002      	add	sp, #8
    69f0:	bd10      	pop	{r4, pc}
    69f2:	bf00      	nop
    69f4:	0002e998 	.word	0x0002e998

000069f8 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    69f8:	b510      	push	{r4, lr}
    69fa:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    69fc:	f025 f8c3 	bl	2bb86 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    6a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6a04:	fba0 2003 	umull	r2, r0, r0, r3
    6a08:	fb03 0301 	mla	r3, r3, r1, r0
    6a0c:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    6a0e:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    6a12:	4620      	mov	r0, r4
    6a14:	4a02      	ldr	r2, [pc, #8]	; (6a20 <cmd_kernel_uptime+0x28>)
    6a16:	2108      	movs	r1, #8
    6a18:	f01f fadd 	bl	25fd6 <shell_fprintf>
	return 0;
}
    6a1c:	2000      	movs	r0, #0
    6a1e:	bd10      	pop	{r4, pc}
    6a20:	0002e9b1 	.word	0x0002e9b1

00006a24 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    6a24:	b510      	push	{r4, lr}
    6a26:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    6a28:	f01a fdfe 	bl	21628 <sys_clock_elapsed>
    6a2c:	4a08      	ldr	r2, [pc, #32]	; (6a50 <cmd_kernel_threads+0x2c>)
    6a2e:	4603      	mov	r3, r0
    6a30:	2108      	movs	r1, #8
    6a32:	4620      	mov	r0, r4
    6a34:	f01f facf 	bl	25fd6 <shell_fprintf>
	shell_print(shell, "Threads:");
    6a38:	4a06      	ldr	r2, [pc, #24]	; (6a54 <cmd_kernel_threads+0x30>)
    6a3a:	4620      	mov	r0, r4
    6a3c:	2108      	movs	r1, #8
    6a3e:	f01f faca 	bl	25fd6 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    6a42:	4805      	ldr	r0, [pc, #20]	; (6a58 <cmd_kernel_threads+0x34>)
    6a44:	4621      	mov	r1, r4
    6a46:	f01c fdbb 	bl	235c0 <k_thread_foreach>
	return 0;
}
    6a4a:	2000      	movs	r0, #0
    6a4c:	bd10      	pop	{r4, pc}
    6a4e:	bf00      	nop
    6a50:	0002e9c0 	.word	0x0002e9c0
    6a54:	0002e9df 	.word	0x0002e9df
    6a58:	00006abd 	.word	0x00006abd

00006a5c <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    6a5c:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    6a5e:	4601      	mov	r1, r0
{
    6a60:	b087      	sub	sp, #28
    6a62:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    6a64:	4811      	ldr	r0, [pc, #68]	; (6aac <cmd_kernel_stacks+0x50>)
    6a66:	f01c fdab 	bl	235c0 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    6a6a:	4a11      	ldr	r2, [pc, #68]	; (6ab0 <cmd_kernel_stacks+0x54>)
		unused = 0;
    6a6c:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    6a6e:	f812 1b01 	ldrb.w	r1, [r2], #1
    6a72:	29aa      	cmp	r1, #170	; 0xaa
    6a74:	d103      	bne.n	6a7e <cmd_kernel_stacks+0x22>
				unused++;
    6a76:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    6a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6a7c:	d1f7      	bne.n	6a6e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    6a7e:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    6a82:	2264      	movs	r2, #100	; 0x64
    6a84:	434a      	muls	r2, r1
    6a86:	0ad2      	lsrs	r2, r2, #11
    6a88:	9205      	str	r2, [sp, #20]
    6a8a:	2500      	movs	r5, #0
    6a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6a90:	e9cd 1203 	strd	r1, r2, [sp, #12]
    6a94:	e9cd 2301 	strd	r2, r3, [sp, #4]
    6a98:	4620      	mov	r0, r4
    6a9a:	4b06      	ldr	r3, [pc, #24]	; (6ab4 <cmd_kernel_stacks+0x58>)
    6a9c:	4a06      	ldr	r2, [pc, #24]	; (6ab8 <cmd_kernel_stacks+0x5c>)
    6a9e:	9500      	str	r5, [sp, #0]
    6aa0:	2108      	movs	r1, #8
    6aa2:	f01f fa98 	bl	25fd6 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    6aa6:	4628      	mov	r0, r5
    6aa8:	b007      	add	sp, #28
    6aaa:	bd30      	pop	{r4, r5, pc}
    6aac:	00006b9d 	.word	0x00006b9d
    6ab0:	200081e0 	.word	0x200081e0
    6ab4:	200081c0 	.word	0x200081c0
    6ab8:	0002e9e9 	.word	0x0002e9e9

00006abc <shell_tdata_dump>:
{
    6abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6abe:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    6ac0:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    6ac4:	4604      	mov	r4, r0
    6ac6:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    6ac8:	f024 fd0c 	bl	2b4e4 <k_thread_name_get>
    6acc:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    6ace:	f01d fcf3 	bl	244b8 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    6ad2:	4b23      	ldr	r3, [pc, #140]	; (6b60 <shell_tdata_dump+0xa4>)
    6ad4:	4a23      	ldr	r2, [pc, #140]	; (6b64 <shell_tdata_dump+0xa8>)
    6ad6:	2e00      	cmp	r6, #0
    6ad8:	bf08      	it	eq
    6ada:	461e      	moveq	r6, r3
    6adc:	4b22      	ldr	r3, [pc, #136]	; (6b68 <shell_tdata_dump+0xac>)
    6ade:	e9cd 4600 	strd	r4, r6, [sp]
    6ae2:	4284      	cmp	r4, r0
    6ae4:	bf18      	it	ne
    6ae6:	4613      	movne	r3, r2
    6ae8:	2108      	movs	r1, #8
    6aea:	4628      	mov	r0, r5
    6aec:	4a1f      	ldr	r2, [pc, #124]	; (6b6c <shell_tdata_dump+0xb0>)
    6aee:	f01f fa72 	bl	25fd6 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    6af2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    6af6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    6afa:	f994 300e 	ldrsb.w	r3, [r4, #14]
    6afe:	4a1c      	ldr	r2, [pc, #112]	; (6b70 <shell_tdata_dump+0xb4>)
    6b00:	9300      	str	r3, [sp, #0]
    6b02:	2108      	movs	r1, #8
    6b04:	7b23      	ldrb	r3, [r4, #12]
    6b06:	4628      	mov	r0, r5
    6b08:	f01f fa65 	bl	25fd6 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    6b0c:	4620      	mov	r0, r4
    6b0e:	f01c fd9f 	bl	23650 <k_thread_state_str>
    6b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6b14:	9200      	str	r2, [sp, #0]
    6b16:	4603      	mov	r3, r0
    6b18:	4a16      	ldr	r2, [pc, #88]	; (6b74 <shell_tdata_dump+0xb8>)
    6b1a:	2108      	movs	r1, #8
    6b1c:	4628      	mov	r0, r5
    6b1e:	f01f fa5a 	bl	25fd6 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    6b22:	a905      	add	r1, sp, #20
    6b24:	4620      	mov	r0, r4
    6b26:	f024 fce1 	bl	2b4ec <z_impl_k_thread_stack_space_get>
	if (ret) {
    6b2a:	4603      	mov	r3, r0
    6b2c:	b130      	cbz	r0, 6b3c <shell_tdata_dump+0x80>
		shell_print(shell,
    6b2e:	4a12      	ldr	r2, [pc, #72]	; (6b78 <shell_tdata_dump+0xbc>)
    6b30:	2108      	movs	r1, #8
    6b32:	4628      	mov	r0, r5
    6b34:	f01f fa4f 	bl	25fd6 <shell_fprintf>
}
    6b38:	b007      	add	sp, #28
    6b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    6b3c:	9a05      	ldr	r2, [sp, #20]
    6b3e:	2364      	movs	r3, #100	; 0x64
    6b40:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    6b42:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    6b46:	434b      	muls	r3, r1
		shell_print(shell,
    6b48:	4a0c      	ldr	r2, [pc, #48]	; (6b7c <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    6b4a:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    6b4e:	2108      	movs	r1, #8
    6b50:	e9cd 7302 	strd	r7, r3, [sp, #8]
    6b54:	4628      	mov	r0, r5
    6b56:	463b      	mov	r3, r7
    6b58:	f01f fa3d 	bl	25fd6 <shell_fprintf>
}
    6b5c:	e7ec      	b.n	6b38 <shell_tdata_dump+0x7c>
    6b5e:	bf00      	nop
    6b60:	0002ea2f 	.word	0x0002ea2f
    6b64:	0002e5a3 	.word	0x0002e5a3
    6b68:	0002fea8 	.word	0x0002fea8
    6b6c:	0002ea32 	.word	0x0002ea32
    6b70:	0002ea3e 	.word	0x0002ea3e
    6b74:	0002ea6a 	.word	0x0002ea6a
    6b78:	0002ea81 	.word	0x0002ea81
    6b7c:	0002eaae 	.word	0x0002eaae

00006b80 <cmd_kernel_cycles>:
{
    6b80:	b510      	push	{r4, lr}
    6b82:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6b84:	f024 fa77 	bl	2b076 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    6b88:	4a03      	ldr	r2, [pc, #12]	; (6b98 <cmd_kernel_cycles+0x18>)
    6b8a:	4603      	mov	r3, r0
    6b8c:	2108      	movs	r1, #8
    6b8e:	4620      	mov	r0, r4
    6b90:	f01f fa21 	bl	25fd6 <shell_fprintf>
}
    6b94:	2000      	movs	r0, #0
    6b96:	bd10      	pop	{r4, pc}
    6b98:	0002eae5 	.word	0x0002eae5

00006b9c <shell_stack_dump>:
{
    6b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    6b9e:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    6ba2:	b089      	sub	sp, #36	; 0x24
    6ba4:	4604      	mov	r4, r0
    6ba6:	460d      	mov	r5, r1
    6ba8:	a907      	add	r1, sp, #28
    6baa:	f024 fc9f 	bl	2b4ec <z_impl_k_thread_stack_space_get>
	if (ret) {
    6bae:	4603      	mov	r3, r0
    6bb0:	b130      	cbz	r0, 6bc0 <shell_stack_dump+0x24>
		shell_print(shell,
    6bb2:	4a10      	ldr	r2, [pc, #64]	; (6bf4 <shell_stack_dump+0x58>)
    6bb4:	2108      	movs	r1, #8
    6bb6:	4628      	mov	r0, r5
    6bb8:	f01f fa0d 	bl	25fd6 <shell_fprintf>
}
    6bbc:	b009      	add	sp, #36	; 0x24
    6bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    6bc0:	4620      	mov	r0, r4
    6bc2:	f024 fc8f 	bl	2b4e4 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    6bc6:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    6bc8:	4a0b      	ldr	r2, [pc, #44]	; (6bf8 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    6bca:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    6bcc:	2800      	cmp	r0, #0
    6bce:	bf18      	it	ne
    6bd0:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    6bd2:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    6bd4:	e9cd 1702 	strd	r1, r7, [sp, #8]
    6bd8:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    6bdc:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    6bde:	4a07      	ldr	r2, [pc, #28]	; (6bfc <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    6be0:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    6be4:	2108      	movs	r1, #8
    6be6:	e9cd 6304 	strd	r6, r3, [sp, #16]
    6bea:	4628      	mov	r0, r5
    6bec:	4623      	mov	r3, r4
    6bee:	f01f f9f2 	bl	25fd6 <shell_fprintf>
    6bf2:	e7e3      	b.n	6bbc <shell_stack_dump+0x20>
    6bf4:	0002ea81 	.word	0x0002ea81
    6bf8:	0002ea2f 	.word	0x0002ea2f
    6bfc:	0002eafb 	.word	0x0002eafb

00006c00 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    6c00:	4603      	mov	r3, r0
	const char *name = dev->name;
    6c02:	6800      	ldr	r0, [r0, #0]
{
    6c04:	b510      	push	{r4, lr}
    6c06:	460c      	mov	r4, r1
    6c08:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    6c0a:	b108      	cbz	r0, 6c10 <get_device_name+0x10>
    6c0c:	7802      	ldrb	r2, [r0, #0]
    6c0e:	b922      	cbnz	r2, 6c1a <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    6c10:	4a02      	ldr	r2, [pc, #8]	; (6c1c <get_device_name+0x1c>)
    6c12:	4620      	mov	r0, r4
    6c14:	f004 fa34 	bl	b080 <snprintf>
		name = buf;
    6c18:	4620      	mov	r0, r4
	}

	return name;
}
    6c1a:	bd10      	pop	{r4, pc}
    6c1c:	0002ebd2 	.word	0x0002ebd2

00006c20 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    6c20:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    6c22:	680c      	ldr	r4, [r1, #0]
    6c24:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    6c28:	f7ff ffea 	bl	6c00 <get_device_name>
    6c2c:	4a03      	ldr	r2, [pc, #12]	; (6c3c <cmd_device_list_visitor+0x1c>)
    6c2e:	4603      	mov	r3, r0
    6c30:	2108      	movs	r1, #8
    6c32:	4620      	mov	r0, r4
    6c34:	f01f f9cf 	bl	25fd6 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    6c38:	2000      	movs	r0, #0
    6c3a:	bd10      	pop	{r4, pc}
    6c3c:	0002ebd7 	.word	0x0002ebd7

00006c40 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    6c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c44:	b08a      	sub	sp, #40	; 0x28
    6c46:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    6c48:	a801      	add	r0, sp, #4
    6c4a:	f01c fabb 	bl	231c4 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    6c4e:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    6c50:	4a1b      	ldr	r2, [pc, #108]	; (6cc0 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    6c52:	f8df 8070 	ldr.w	r8, [pc, #112]	; 6cc4 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    6c56:	f8df 9070 	ldr.w	r9, [pc, #112]	; 6cc8 <cmd_device_list+0x88>
    6c5a:	f8df a070 	ldr.w	sl, [pc, #112]	; 6ccc <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    6c5e:	2318      	movs	r3, #24
    6c60:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    6c64:	2108      	movs	r1, #8
    6c66:	4628      	mov	r0, r5
    6c68:	f01f f9b5 	bl	25fd6 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    6c6c:	9c01      	ldr	r4, [sp, #4]
    6c6e:	42b4      	cmp	r4, r6
    6c70:	d303      	bcc.n	6c7a <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    6c72:	2000      	movs	r0, #0
    6c74:	b00a      	add	sp, #40	; 0x28
    6c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    6c7a:	af05      	add	r7, sp, #20
    6c7c:	4639      	mov	r1, r7
    6c7e:	2214      	movs	r2, #20
    6c80:	4620      	mov	r0, r4
    6c82:	f7ff ffbd 	bl	6c00 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    6c86:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    6c88:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    6c8a:	2108      	movs	r1, #8
    6c8c:	4628      	mov	r0, r5
    6c8e:	f01f f9a2 	bl	25fd6 <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    6c92:	4620      	mov	r0, r4
    6c94:	f024 fb56 	bl	2b344 <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    6c98:	4a0d      	ldr	r2, [pc, #52]	; (6cd0 <cmd_device_list+0x90>)
    6c9a:	2800      	cmp	r0, #0
    6c9c:	bf14      	ite	ne
    6c9e:	464b      	movne	r3, r9
    6ca0:	4653      	moveq	r3, sl
    6ca2:	2108      	movs	r1, #8
    6ca4:	4628      	mov	r0, r5
    6ca6:	f01f f996 	bl	25fd6 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    6caa:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    6cac:	4620      	mov	r0, r4
    6cae:	4909      	ldr	r1, [pc, #36]	; (6cd4 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    6cb0:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    6cb2:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    6cb4:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    6cb8:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    6cba:	f024 fb4d 	bl	2b358 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    6cbe:	e7d6      	b.n	6c6e <cmd_device_list+0x2e>
    6cc0:	0002ebf6 	.word	0x0002ebf6
    6cc4:	0002ec00 	.word	0x0002ec00
    6cc8:	0002ebe7 	.word	0x0002ebe7
    6ccc:	0002ebed 	.word	0x0002ebed
    6cd0:	0002ec05 	.word	0x0002ec05
    6cd4:	00006c21 	.word	0x00006c21

00006cd8 <device_get_config_level>:
{
    6cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    6cdc:	4b11      	ldr	r3, [pc, #68]	; (6d24 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    6cde:	f8df 9048 	ldr.w	r9, [pc, #72]	; 6d28 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    6ce2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    6ce6:	3101      	adds	r1, #1
{
    6ce8:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    6cea:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    6cee:	4606      	mov	r6, r0
	bool devices = false;
    6cf0:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    6cf2:	45a0      	cmp	r8, r4
    6cf4:	d803      	bhi.n	6cfe <device_get_config_level+0x26>
}
    6cf6:	4638      	mov	r0, r7
    6cf8:	b007      	add	sp, #28
    6cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6cfe:	4620      	mov	r0, r4
    6d00:	f024 fb20 	bl	2b344 <z_device_is_ready>
		if (device_is_ready(dev)) {
    6d04:	4605      	mov	r5, r0
    6d06:	b158      	cbz	r0, 6d20 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    6d08:	2214      	movs	r2, #20
    6d0a:	a901      	add	r1, sp, #4
    6d0c:	4620      	mov	r0, r4
    6d0e:	f7ff ff77 	bl	6c00 <get_device_name>
    6d12:	464a      	mov	r2, r9
    6d14:	4603      	mov	r3, r0
    6d16:	2108      	movs	r1, #8
    6d18:	4630      	mov	r0, r6
    6d1a:	f01f f95c 	bl	25fd6 <shell_fprintf>
			devices = true;
    6d1e:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    6d20:	3418      	adds	r4, #24
    6d22:	e7e6      	b.n	6cf2 <device_get_config_level+0x1a>
    6d24:	0002c8c8 	.word	0x0002c8c8
    6d28:	0002ec0c 	.word	0x0002ec0c

00006d2c <cmd_device_levels>:
{
    6d2c:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    6d2e:	2108      	movs	r1, #8
{
    6d30:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    6d32:	4a1e      	ldr	r2, [pc, #120]	; (6dac <cmd_device_levels+0x80>)
    6d34:	f01f f94f 	bl	25fd6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    6d38:	2100      	movs	r1, #0
    6d3a:	4620      	mov	r0, r4
    6d3c:	f7ff ffcc 	bl	6cd8 <device_get_config_level>
	if (ret == false) {
    6d40:	b920      	cbnz	r0, 6d4c <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    6d42:	4a1b      	ldr	r2, [pc, #108]	; (6db0 <cmd_device_levels+0x84>)
    6d44:	2108      	movs	r1, #8
    6d46:	4620      	mov	r0, r4
    6d48:	f01f f945 	bl	25fd6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    6d4c:	2108      	movs	r1, #8
    6d4e:	4620      	mov	r0, r4
    6d50:	4a18      	ldr	r2, [pc, #96]	; (6db4 <cmd_device_levels+0x88>)
    6d52:	f01f f940 	bl	25fd6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    6d56:	2101      	movs	r1, #1
    6d58:	4620      	mov	r0, r4
    6d5a:	f7ff ffbd 	bl	6cd8 <device_get_config_level>
	if (ret == false) {
    6d5e:	b920      	cbnz	r0, 6d6a <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    6d60:	4a13      	ldr	r2, [pc, #76]	; (6db0 <cmd_device_levels+0x84>)
    6d62:	2108      	movs	r1, #8
    6d64:	4620      	mov	r0, r4
    6d66:	f01f f936 	bl	25fd6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    6d6a:	2108      	movs	r1, #8
    6d6c:	4620      	mov	r0, r4
    6d6e:	4a12      	ldr	r2, [pc, #72]	; (6db8 <cmd_device_levels+0x8c>)
    6d70:	f01f f931 	bl	25fd6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    6d74:	2102      	movs	r1, #2
    6d76:	4620      	mov	r0, r4
    6d78:	f7ff ffae 	bl	6cd8 <device_get_config_level>
	if (ret == false) {
    6d7c:	b920      	cbnz	r0, 6d88 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    6d7e:	4a0c      	ldr	r2, [pc, #48]	; (6db0 <cmd_device_levels+0x84>)
    6d80:	2108      	movs	r1, #8
    6d82:	4620      	mov	r0, r4
    6d84:	f01f f927 	bl	25fd6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    6d88:	2108      	movs	r1, #8
    6d8a:	4620      	mov	r0, r4
    6d8c:	4a0b      	ldr	r2, [pc, #44]	; (6dbc <cmd_device_levels+0x90>)
    6d8e:	f01f f922 	bl	25fd6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    6d92:	2103      	movs	r1, #3
    6d94:	4620      	mov	r0, r4
    6d96:	f7ff ff9f 	bl	6cd8 <device_get_config_level>
	if (ret == false) {
    6d9a:	b920      	cbnz	r0, 6da6 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    6d9c:	4a04      	ldr	r2, [pc, #16]	; (6db0 <cmd_device_levels+0x84>)
    6d9e:	2108      	movs	r1, #8
    6da0:	4620      	mov	r0, r4
    6da2:	f01f f918 	bl	25fd6 <shell_fprintf>
}
    6da6:	2000      	movs	r0, #0
    6da8:	bd10      	pop	{r4, pc}
    6daa:	bf00      	nop
    6dac:	0002ec12 	.word	0x0002ec12
    6db0:	0002ec21 	.word	0x0002ec21
    6db4:	0002ec29 	.word	0x0002ec29
    6db8:	0002ec38 	.word	0x0002ec38
    6dbc:	0002ec46 	.word	0x0002ec46

00006dc0 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    6dc0:	1e8b      	subs	r3, r1, #2
    6dc2:	2b02      	cmp	r3, #2
{
    6dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dc8:	4607      	mov	r7, r0
    6dca:	4688      	mov	r8, r1
    6dcc:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    6dce:	d833      	bhi.n	6e38 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    6dd0:	6860      	ldr	r0, [r4, #4]
    6dd2:	2210      	movs	r2, #16
    6dd4:	2100      	movs	r1, #0
    6dd6:	f021 fad5 	bl	28384 <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    6dda:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    6dde:	4606      	mov	r6, r0
	if (argc < 3) {
    6de0:	d01e      	beq.n	6e20 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    6de2:	68a0      	ldr	r0, [r4, #8]
    6de4:	220a      	movs	r2, #10
    6de6:	2100      	movs	r1, #0
    6de8:	f021 facc 	bl	28384 <strtoul>
    6dec:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    6dee:	4a21      	ldr	r2, [pc, #132]	; (6e74 <cmd_devmem+0xb4>)
    6df0:	462b      	mov	r3, r5
    6df2:	2108      	movs	r1, #8
    6df4:	4638      	mov	r0, r7
    6df6:	f01f f8ee 	bl	25fd6 <shell_fprintf>

	if (argc <= 3) {
    6dfa:	f1b8 0f04 	cmp.w	r8, #4
    6dfe:	d01e      	beq.n	6e3e <cmd_devmem+0x7e>
	switch (width) {
    6e00:	2d10      	cmp	r5, #16
    6e02:	d00f      	beq.n	6e24 <cmd_devmem+0x64>
    6e04:	2d20      	cmp	r5, #32
    6e06:	d010      	beq.n	6e2a <cmd_devmem+0x6a>
    6e08:	2d08      	cmp	r5, #8
    6e0a:	d110      	bne.n	6e2e <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    6e0c:	7833      	ldrb	r3, [r6, #0]
    6e0e:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    6e10:	4a19      	ldr	r2, [pc, #100]	; (6e78 <cmd_devmem+0xb8>)
    6e12:	2108      	movs	r1, #8
    6e14:	4638      	mov	r0, r7
    6e16:	f01f f8de 	bl	25fd6 <shell_fprintf>
	int err = 0;
    6e1a:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    6e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    6e20:	2520      	movs	r5, #32
    6e22:	e7e4      	b.n	6dee <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    6e24:	8833      	ldrh	r3, [r6, #0]
    6e26:	b29b      	uxth	r3, r3
	if (err == 0) {
    6e28:	e7f2      	b.n	6e10 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    6e2a:	6833      	ldr	r3, [r6, #0]
    6e2c:	e7f0      	b.n	6e10 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    6e2e:	4a13      	ldr	r2, [pc, #76]	; (6e7c <cmd_devmem+0xbc>)
    6e30:	2108      	movs	r1, #8
    6e32:	4638      	mov	r0, r7
    6e34:	f01f f8cf 	bl	25fd6 <shell_fprintf>
		return -EINVAL;
    6e38:	f06f 0015 	mvn.w	r0, #21
    6e3c:	e7ee      	b.n	6e1c <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    6e3e:	68e0      	ldr	r0, [r4, #12]
    6e40:	2210      	movs	r2, #16
    6e42:	2100      	movs	r1, #0
    6e44:	f021 fa9e 	bl	28384 <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    6e48:	4a0d      	ldr	r2, [pc, #52]	; (6e80 <cmd_devmem+0xc0>)
    6e4a:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    6e4c:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    6e4e:	2108      	movs	r1, #8
    6e50:	4638      	mov	r0, r7
    6e52:	f01f f8c0 	bl	25fd6 <shell_fprintf>
	switch (width) {
    6e56:	2d10      	cmp	r5, #16
    6e58:	d006      	beq.n	6e68 <cmd_devmem+0xa8>
    6e5a:	2d20      	cmp	r5, #32
    6e5c:	d007      	beq.n	6e6e <cmd_devmem+0xae>
    6e5e:	2d08      	cmp	r5, #8
    6e60:	d1e5      	bne.n	6e2e <cmd_devmem+0x6e>
		sys_write8(value, addr);
    6e62:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    6e64:	7034      	strb	r4, [r6, #0]
    6e66:	e7d8      	b.n	6e1a <cmd_devmem+0x5a>
		sys_write16(value, addr);
    6e68:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    6e6a:	8034      	strh	r4, [r6, #0]
    6e6c:	e7d5      	b.n	6e1a <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    6e6e:	6034      	str	r4, [r6, #0]
    6e70:	e7d3      	b.n	6e1a <cmd_devmem+0x5a>
    6e72:	bf00      	nop
    6e74:	0002ec9e 	.word	0x0002ec9e
    6e78:	0002ecc9 	.word	0x0002ecc9
    6e7c:	0002ecb3 	.word	0x0002ecb3
    6e80:	0002ecda 	.word	0x0002ecda

00006e84 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    6e84:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    6e86:	4e0e      	ldr	r6, [pc, #56]	; (6ec0 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    6e88:	4604      	mov	r4, r0
	if (bypass && in_use) {
    6e8a:	7833      	ldrb	r3, [r6, #0]
    6e8c:	460d      	mov	r5, r1
    6e8e:	b131      	cbz	r1, 6e9e <set_bypass.isra.0+0x1a>
    6e90:	b12b      	cbz	r3, 6e9e <set_bypass.isra.0+0x1a>
}
    6e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    6e96:	4a0b      	ldr	r2, [pc, #44]	; (6ec4 <set_bypass.isra.0+0x40>)
    6e98:	2101      	movs	r1, #1
    6e9a:	f01f b89c 	b.w	25fd6 <shell_fprintf>
	in_use = !in_use;
    6e9e:	f083 0301 	eor.w	r3, r3, #1
    6ea2:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    6ea4:	b133      	cbz	r3, 6eb4 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    6ea6:	4a08      	ldr	r2, [pc, #32]	; (6ec8 <set_bypass.isra.0+0x44>)
    6ea8:	2108      	movs	r1, #8
    6eaa:	4620      	mov	r0, r4
    6eac:	f01f f893 	bl	25fd6 <shell_fprintf>
		in_use = true;
    6eb0:	2301      	movs	r3, #1
    6eb2:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    6eb4:	4629      	mov	r1, r5
    6eb6:	4620      	mov	r0, r4
}
    6eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    6ebc:	f01f b898 	b.w	25ff0 <shell_set_bypass>
    6ec0:	20004822 	.word	0x20004822
    6ec4:	0002ecee 	.word	0x0002ecee
    6ec8:	0002ed29 	.word	0x0002ed29

00006ecc <bypass_cb>:
{
    6ecc:	b570      	push	{r4, r5, r6, lr}
    6ece:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    6ed0:	483c      	ldr	r0, [pc, #240]	; (6fc4 <bypass_cb+0xf8>)
    6ed2:	7803      	ldrb	r3, [r0, #0]
    6ed4:	2b18      	cmp	r3, #24
    6ed6:	d102      	bne.n	6ede <bypass_cb+0x12>
    6ed8:	780b      	ldrb	r3, [r1, #0]
    6eda:	2b11      	cmp	r3, #17
    6edc:	d031      	beq.n	6f42 <bypass_cb+0x76>
    6ede:	3a01      	subs	r2, #1
    6ee0:	460b      	mov	r3, r1
    6ee2:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    6ee4:	429d      	cmp	r5, r3
    6ee6:	d125      	bne.n	6f34 <bypass_cb+0x68>
	tail = recv[len - 1];
    6ee8:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    6eea:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    6eec:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    6eee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    6ef2:	2b09      	cmp	r3, #9
    6ef4:	4c34      	ldr	r4, [pc, #208]	; (6fc8 <bypass_cb+0xfc>)
    6ef6:	d904      	bls.n	6f02 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    6ef8:	f022 0320 	bic.w	r3, r2, #32
    6efc:	3b41      	subs	r3, #65	; 0x41
    6efe:	2b05      	cmp	r3, #5
    6f00:	d804      	bhi.n	6f0c <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    6f02:	6823      	ldr	r3, [r4, #0]
    6f04:	4931      	ldr	r1, [pc, #196]	; (6fcc <bypass_cb+0x100>)
    6f06:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    6f08:	3301      	adds	r3, #1
    6f0a:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    6f0c:	6823      	ldr	r3, [r4, #0]
    6f0e:	2b02      	cmp	r3, #2
    6f10:	d134      	bne.n	6f7c <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    6f12:	2210      	movs	r2, #16
    6f14:	482d      	ldr	r0, [pc, #180]	; (6fcc <bypass_cb+0x100>)
    6f16:	2100      	movs	r1, #0
    6f18:	f021 fa34 	bl	28384 <strtoul>
		*bytes = byte;
    6f1c:	4a2c      	ldr	r2, [pc, #176]	; (6fd0 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    6f1e:	6813      	ldr	r3, [r2, #0]
    6f20:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    6f24:	6013      	str	r3, [r2, #0]
		sum++;
    6f26:	4a2b      	ldr	r2, [pc, #172]	; (6fd4 <bypass_cb+0x108>)
    6f28:	6813      	ldr	r3, [r2, #0]
    6f2a:	3301      	adds	r3, #1
    6f2c:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    6f2e:	2300      	movs	r3, #0
    6f30:	6023      	str	r3, [r4, #0]
    6f32:	e023      	b.n	6f7c <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    6f34:	f813 6b01 	ldrb.w	r6, [r3], #1
    6f38:	2e18      	cmp	r6, #24
    6f3a:	d1d3      	bne.n	6ee4 <bypass_cb+0x18>
    6f3c:	781e      	ldrb	r6, [r3, #0]
    6f3e:	2e11      	cmp	r6, #17
    6f40:	d1d0      	bne.n	6ee4 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    6f42:	4d24      	ldr	r5, [pc, #144]	; (6fd4 <bypass_cb+0x108>)
    6f44:	4a24      	ldr	r2, [pc, #144]	; (6fd8 <bypass_cb+0x10c>)
    6f46:	682b      	ldr	r3, [r5, #0]
    6f48:	2108      	movs	r1, #8
    6f4a:	4620      	mov	r0, r4
    6f4c:	f01f f843 	bl	25fd6 <shell_fprintf>
		set_bypass(sh, NULL);
    6f50:	4620      	mov	r0, r4
    6f52:	2100      	movs	r1, #0
    6f54:	f7ff ff96 	bl	6e84 <set_bypass.isra.0>
		if (!littleendian) {
    6f58:	4b20      	ldr	r3, [pc, #128]	; (6fdc <bypass_cb+0x110>)
    6f5a:	7818      	ldrb	r0, [r3, #0]
    6f5c:	b970      	cbnz	r0, 6f7c <bypass_cb+0xb0>
    6f5e:	4a20      	ldr	r2, [pc, #128]	; (6fe0 <bypass_cb+0x114>)
    6f60:	682b      	ldr	r3, [r5, #0]
    6f62:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    6f64:	2b04      	cmp	r3, #4
    6f66:	dc0a      	bgt.n	6f7e <bypass_cb+0xb2>
    6f68:	b108      	cbz	r0, 6f6e <bypass_cb+0xa2>
    6f6a:	6011      	str	r1, [r2, #0]
    6f6c:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    6f6e:	f013 0103 	ands.w	r1, r3, #3
    6f72:	d10b      	bne.n	6f8c <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    6f74:	6812      	ldr	r2, [r2, #0]
    6f76:	6813      	ldr	r3, [r2, #0]
    6f78:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    6f7a:	6013      	str	r3, [r2, #0]
}
    6f7c:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    6f7e:	6808      	ldr	r0, [r1, #0]
    6f80:	ba00      	rev	r0, r0
    6f82:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    6f86:	3b04      	subs	r3, #4
				data++;
    6f88:	2001      	movs	r0, #1
    6f8a:	e7eb      	b.n	6f64 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    6f8c:	425b      	negs	r3, r3
    6f8e:	f003 0303 	and.w	r3, r3, #3
    6f92:	bf58      	it	pl
    6f94:	4259      	negpl	r1, r3
    6f96:	2902      	cmp	r1, #2
    6f98:	d104      	bne.n	6fa4 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    6f9a:	6812      	ldr	r2, [r2, #0]
    6f9c:	8813      	ldrh	r3, [r2, #0]
    6f9e:	ba5b      	rev16	r3, r3
    6fa0:	b29b      	uxth	r3, r3
    6fa2:	e7ea      	b.n	6f7a <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    6fa4:	2903      	cmp	r1, #3
    6fa6:	d1e9      	bne.n	6f7c <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    6fa8:	6810      	ldr	r0, [r2, #0]
    6faa:	6802      	ldr	r2, [r0, #0]
    6fac:	0411      	lsls	r1, r2, #16
    6fae:	f3c2 4307 	ubfx	r3, r2, #16, #8
    6fb2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    6fb6:	430b      	orrs	r3, r1
    6fb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    6fbc:	4313      	orrs	r3, r2
    6fbe:	6003      	str	r3, [r0, #0]
    6fc0:	e7dc      	b.n	6f7c <bypass_cb+0xb0>
    6fc2:	bf00      	nop
    6fc4:	20004824 	.word	0x20004824
    6fc8:	20002470 	.word	0x20002470
    6fcc:	20004820 	.word	0x20004820
    6fd0:	2000246c 	.word	0x2000246c
    6fd4:	20002478 	.word	0x20002478
    6fd8:	0002ed53 	.word	0x0002ed53
    6fdc:	20004823 	.word	0x20004823
    6fe0:	20002474 	.word	0x20002474

00006fe4 <cmd_load>:
{
    6fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fe8:	460d      	mov	r5, r1
	chunk_element = 0;
    6fea:	492d      	ldr	r1, [pc, #180]	; (70a0 <cmd_load+0xbc>)
	littleendian = false;
    6fec:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 70a4 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    6ff0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 70a8 <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    6ff4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 70ac <cmd_load+0xc8>
	littleendian = false;
    6ff8:	2300      	movs	r3, #0
	chunk_element = 0;
    6ffa:	600b      	str	r3, [r1, #0]
	sum = 0;
    6ffc:	492c      	ldr	r1, [pc, #176]	; (70b0 <cmd_load+0xcc>)
	littleendian = false;
    6ffe:	f888 3000 	strb.w	r3, [r8]
{
    7002:	4606      	mov	r6, r0
	sum = 0;
    7004:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    7006:	4614      	mov	r4, r2
    7008:	2d01      	cmp	r5, #1
    700a:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    700c:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    7010:	d921      	bls.n	7056 <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    7012:	4618      	mov	r0, r3
    7014:	2202      	movs	r2, #2
    7016:	4649      	mov	r1, r9
    7018:	9301      	str	r3, [sp, #4]
    701a:	f021 fa92 	bl	28542 <strncmp>
    701e:	9b01      	ldr	r3, [sp, #4]
    7020:	b988      	cbnz	r0, 7046 <cmd_load+0x62>
    7022:	6822      	ldr	r2, [r4, #0]
    7024:	7892      	ldrb	r2, [r2, #2]
    7026:	3a00      	subs	r2, #0
    7028:	bf18      	it	ne
    702a:	2201      	movne	r2, #1
    702c:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    7030:	4920      	ldr	r1, [pc, #128]	; (70b4 <cmd_load+0xd0>)
    7032:	2202      	movs	r2, #2
    7034:	4650      	mov	r0, sl
    7036:	f021 fa84 	bl	28542 <strncmp>
    703a:	b930      	cbnz	r0, 704a <cmd_load+0x66>
			littleendian = true;
    703c:	2301      	movs	r3, #1
    703e:	f888 3000 	strb.w	r3, [r8]
		argc--;
    7042:	3d01      	subs	r5, #1
    7044:	e7e0      	b.n	7008 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    7046:	2200      	movs	r2, #0
    7048:	e7f0      	b.n	702c <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    704a:	4649      	mov	r1, r9
    704c:	4650      	mov	r0, sl
    704e:	f021 fa6c 	bl	2852a <strcmp>
    7052:	b9b0      	cbnz	r0, 7082 <cmd_load+0x9e>
			argv++;
    7054:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    7056:	2200      	movs	r2, #0
    7058:	4611      	mov	r1, r2
    705a:	6878      	ldr	r0, [r7, #4]
    705c:	f021 f91e 	bl	2829c <strtol>
    7060:	4b15      	ldr	r3, [pc, #84]	; (70b8 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    7062:	2200      	movs	r2, #0
    7064:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    7066:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    7068:	6878      	ldr	r0, [r7, #4]
    706a:	f021 f917 	bl	2829c <strtol>
    706e:	4b13      	ldr	r3, [pc, #76]	; (70bc <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    7070:	4913      	ldr	r1, [pc, #76]	; (70c0 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    7072:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    7074:	4630      	mov	r0, r6
    7076:	f7ff ff05 	bl	6e84 <set_bypass.isra.0>
}
    707a:	2000      	movs	r0, #0
    707c:	b003      	add	sp, #12
    707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    7082:	f89a 2000 	ldrb.w	r2, [sl]
    7086:	2a2d      	cmp	r2, #45	; 0x2d
    7088:	d1e5      	bne.n	7056 <cmd_load+0x72>
    708a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    708e:	2a00      	cmp	r2, #0
    7090:	d0e1      	beq.n	7056 <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    7092:	4653      	mov	r3, sl
    7094:	465a      	mov	r2, fp
    7096:	2108      	movs	r1, #8
    7098:	4630      	mov	r0, r6
    709a:	f01e ff9c 	bl	25fd6 <shell_fprintf>
    709e:	e7d0      	b.n	7042 <cmd_load+0x5e>
    70a0:	20002470 	.word	0x20002470
    70a4:	20004823 	.word	0x20004823
    70a8:	0002ed6d 	.word	0x0002ed6d
    70ac:	0002ed73 	.word	0x0002ed73
    70b0:	20002478 	.word	0x20002478
    70b4:	0002ed70 	.word	0x0002ed70
    70b8:	2000246c 	.word	0x2000246c
    70bc:	20002474 	.word	0x20002474
    70c0:	00006ecd 	.word	0x00006ecd

000070c4 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    70c4:	b507      	push	{r0, r1, r2, lr}
    70c6:	480a      	ldr	r0, [pc, #40]	; (70f0 <enable_shell_uart+0x2c>)
    70c8:	f024 f93c 	bl	2b344 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    70cc:	b160      	cbz	r0, 70e8 <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    70ce:	4a09      	ldr	r2, [pc, #36]	; (70f4 <enable_shell_uart+0x30>)
    70d0:	4907      	ldr	r1, [pc, #28]	; (70f0 <enable_shell_uart+0x2c>)
    70d2:	6812      	ldr	r2, [r2, #0]
    70d4:	4808      	ldr	r0, [pc, #32]	; (70f8 <enable_shell_uart+0x34>)
    70d6:	2304      	movs	r3, #4
    70d8:	9300      	str	r3, [sp, #0]
    70da:	2301      	movs	r3, #1
    70dc:	f000 fe0a 	bl	7cf4 <shell_init>

	return 0;
    70e0:	2000      	movs	r0, #0
}
    70e2:	b003      	add	sp, #12
    70e4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    70e8:	f06f 0012 	mvn.w	r0, #18
    70ec:	e7f9      	b.n	70e2 <enable_shell_uart+0x1e>
    70ee:	bf00      	nop
    70f0:	0002bff8 	.word	0x0002bff8
    70f4:	0002c964 	.word	0x0002c964
    70f8:	0002c3bc 	.word	0x0002c3bc

000070fc <init>:
{
    70fc:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    70fe:	6846      	ldr	r6, [r0, #4]
{
    7100:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    7102:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    7104:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    7106:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    7108:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    710a:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    710e:	2208      	movs	r2, #8
	buf->tail = 0;
    7110:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    7114:	4629      	mov	r1, r5
    7116:	4410      	add	r0, r2
    7118:	f021 fa58 	bl	285cc <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    711c:	68f0      	ldr	r0, [r6, #12]
    711e:	2208      	movs	r2, #8
	buf->tail = 0;
    7120:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    7124:	4629      	mov	r1, r5
    7126:	4410      	add	r0, r2
    7128:	f021 fa50 	bl	285cc <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    712c:	6833      	ldr	r3, [r6, #0]
    712e:	60dd      	str	r5, [r3, #12]
	const struct uart_driver_api *api =
    7130:	68a3      	ldr	r3, [r4, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    7132:	b12b      	cbz	r3, 7140 <init+0x44>
    7134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7136:	b11b      	cbz	r3, 7140 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    7138:	4905      	ldr	r1, [pc, #20]	; (7150 <init+0x54>)
    713a:	4632      	mov	r2, r6
    713c:	4620      	mov	r0, r4
    713e:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    7140:	68a3      	ldr	r3, [r4, #8]
    7142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7144:	b10b      	cbz	r3, 714a <init+0x4e>
		api->irq_rx_enable(dev);
    7146:	4620      	mov	r0, r4
    7148:	4798      	blx	r3
}
    714a:	2000      	movs	r0, #0
    714c:	bd70      	pop	{r4, r5, r6, pc}
    714e:	bf00      	nop
    7150:	00007155 	.word	0x00007155

00007154 <uart_callback>:
{
    7154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7158:	4604      	mov	r4, r0
    715a:	b088      	sub	sp, #32
    715c:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
    715e:	6883      	ldr	r3, [r0, #8]
    7160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7162:	b103      	cbz	r3, 7166 <uart_callback+0x12>
	return api->irq_update(dev);
    7164:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    7166:	68a3      	ldr	r3, [r4, #8]
    7168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    716a:	bb4b      	cbnz	r3, 71c0 <uart_callback+0x6c>
			LOG_WRN("RX ring buffer full.");
    716c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 728c <uart_callback+0x138>
    7170:	f8df a11c 	ldr.w	sl, [pc, #284]	; 7290 <uart_callback+0x13c>
{
    7174:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    7178:	68f0      	ldr	r0, [r6, #12]
    717a:	4669      	mov	r1, sp
    717c:	6902      	ldr	r2, [r0, #16]
    717e:	f01e f8cc 	bl	2531a <ring_buf_put_claim>
		if (len > 0) {
    7182:	4607      	mov	r7, r0
    7184:	2800      	cmp	r0, #0
    7186:	d043      	beq.n	7210 <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
    7188:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    718a:	9900      	ldr	r1, [sp, #0]
    718c:	699b      	ldr	r3, [r3, #24]
    718e:	2b00      	cmp	r3, #0
    7190:	d03b      	beq.n	720a <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
    7192:	4602      	mov	r2, r0
    7194:	4620      	mov	r0, r4
    7196:	4798      	blx	r3
				new_data = true;
    7198:	1e05      	subs	r5, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    719a:	4629      	mov	r1, r5
    719c:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
    719e:	bf18      	it	ne
    71a0:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    71a4:	f01e f8e6 	bl	25374 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    71a8:	b10d      	cbz	r5, 71ae <uart_callback+0x5a>
    71aa:	42af      	cmp	r7, r5
    71ac:	d0e4      	beq.n	7178 <uart_callback+0x24>
	if (new_data) {
    71ae:	f1b8 0f00 	cmp.w	r8, #0
    71b2:	d009      	beq.n	71c8 <uart_callback+0x74>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    71b4:	6833      	ldr	r3, [r6, #0]
    71b6:	2000      	movs	r0, #0
    71b8:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    71bc:	4790      	blx	r2
}
    71be:	e003      	b.n	71c8 <uart_callback+0x74>
	return api->irq_rx_ready(dev);
    71c0:	4620      	mov	r0, r4
    71c2:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    71c4:	2800      	cmp	r0, #0
    71c6:	d1d1      	bne.n	716c <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    71c8:	68a3      	ldr	r3, [r4, #8]
    71ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71cc:	2b00      	cmp	r3, #0
    71ce:	d13c      	bne.n	724a <uart_callback+0xf6>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    71d0:	68b0      	ldr	r0, [r6, #8]
    71d2:	a901      	add	r1, sp, #4
    71d4:	6902      	ldr	r2, [r0, #16]
    71d6:	f01e f908 	bl	253ea <ring_buf_get_claim>
	if (len) {
    71da:	4605      	mov	r5, r0
    71dc:	2800      	cmp	r0, #0
    71de:	d04f      	beq.n	7280 <uart_callback+0x12c>
	if (api->line_ctrl_get == NULL) {
    71e0:	68a3      	ldr	r3, [r4, #8]
    71e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    71e4:	2b00      	cmp	r3, #0
    71e6:	d037      	beq.n	7258 <uart_callback+0x104>
	return api->line_ctrl_get(dev, ctrl, val);
    71e8:	aa02      	add	r2, sp, #8
    71ea:	2104      	movs	r1, #4
    71ec:	4620      	mov	r0, r4
    71ee:	4798      	blx	r3
			if (err == -ENOSYS || err == -ENOTSUP) {
    71f0:	f110 0f58 	cmn.w	r0, #88	; 0x58
    71f4:	d030      	beq.n	7258 <uart_callback+0x104>
    71f6:	3086      	adds	r0, #134	; 0x86
    71f8:	d02e      	beq.n	7258 <uart_callback+0x104>
			if (dtr) {
    71fa:	9b02      	ldr	r3, [sp, #8]
    71fc:	bb63      	cbnz	r3, 7258 <uart_callback+0x104>
	return z_impl_k_sleep(timeout);
    71fe:	2100      	movs	r1, #0
    7200:	f640 40cd 	movw	r0, #3277	; 0xccd
    7204:	f01d f93e 	bl	24484 <z_impl_k_sleep>
		while (true) {
    7208:	e7ea      	b.n	71e0 <uart_callback+0x8c>
		return -ENOSYS;
    720a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    720e:	e7c3      	b.n	7198 <uart_callback+0x44>
			LOG_WRN("RX ring buffer full.");
    7210:	f8d9 3000 	ldr.w	r3, [r9]
    7214:	f013 0f06 	tst.w	r3, #6
    7218:	d00b      	beq.n	7232 <uart_callback+0xde>
    721a:	2302      	movs	r3, #2
    721c:	f8cd a018 	str.w	sl, [sp, #24]
    7220:	9301      	str	r3, [sp, #4]
    7222:	9305      	str	r3, [sp, #20]
    7224:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    7228:	4603      	mov	r3, r0
    722a:	aa05      	add	r2, sp, #20
    722c:	4648      	mov	r0, r9
    722e:	f01e fcd7 	bl	25be0 <z_impl_z_log_msg2_static_create>
	if (api->fifo_read == NULL) {
    7232:	68a3      	ldr	r3, [r4, #8]
    7234:	699b      	ldr	r3, [r3, #24]
    7236:	b12b      	cbz	r3, 7244 <uart_callback+0xf0>
	return api->fifo_read(dev, rx_data, size);
    7238:	2201      	movs	r2, #1
    723a:	a902      	add	r1, sp, #8
    723c:	4620      	mov	r0, r4
    723e:	4798      	blx	r3
    7240:	4605      	mov	r5, r0
    7242:	e7b1      	b.n	71a8 <uart_callback+0x54>
		return -ENOSYS;
    7244:	f06f 0557 	mvn.w	r5, #87	; 0x57
    7248:	e7ae      	b.n	71a8 <uart_callback+0x54>
	return api->irq_tx_ready(dev);
    724a:	4620      	mov	r0, r4
    724c:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    724e:	2800      	cmp	r0, #0
    7250:	d1be      	bne.n	71d0 <uart_callback+0x7c>
}
    7252:	b008      	add	sp, #32
    7254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (api->fifo_fill == NULL) {
    7258:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    725a:	9901      	ldr	r1, [sp, #4]
    725c:	695b      	ldr	r3, [r3, #20]
    725e:	b163      	cbz	r3, 727a <uart_callback+0x126>
	return api->fifo_fill(dev, tx_data, size);
    7260:	462a      	mov	r2, r5
    7262:	4620      	mov	r0, r4
    7264:	4798      	blx	r3
    7266:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    7268:	68b0      	ldr	r0, [r6, #8]
    726a:	f01e f8e9 	bl	25440 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    726e:	6833      	ldr	r3, [r6, #0]
    7270:	2001      	movs	r0, #1
    7272:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    7276:	4790      	blx	r2
}
    7278:	e7eb      	b.n	7252 <uart_callback+0xfe>
		return -ENOSYS;
    727a:	f06f 0157 	mvn.w	r1, #87	; 0x57
    727e:	e7f3      	b.n	7268 <uart_callback+0x114>
		uart_irq_tx_disable(dev);
    7280:	4620      	mov	r0, r4
    7282:	f01e fd55 	bl	25d30 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    7286:	6833      	ldr	r3, [r6, #0]
    7288:	60dd      	str	r5, [r3, #12]
    728a:	e7f0      	b.n	726e <uart_callback+0x11a>
    728c:	20000a3c 	.word	0x20000a3c
    7290:	0002ee15 	.word	0x0002ee15

00007294 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    7294:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    7296:	6881      	ldr	r1, [r0, #8]
{
    7298:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    729a:	3108      	adds	r1, #8
    729c:	f001 f852 	bl	8344 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    72a0:	68a1      	ldr	r1, [r4, #8]
    72a2:	4a03      	ldr	r2, [pc, #12]	; (72b0 <shell_internal_help_print+0x1c>)
    72a4:	4620      	mov	r0, r4
    72a6:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    72a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    72ac:	f000 bff2 	b.w	8294 <z_shell_help_subcmd_print>
    72b0:	0002ee63 	.word	0x0002ee63

000072b4 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    72b4:	4901      	ldr	r1, [pc, #4]	; (72bc <z_cursor_next_line_move.isra.0+0x8>)
    72b6:	f01e bdd1 	b.w	25e5c <z_shell_raw_fprintf>
    72ba:	bf00      	nop
    72bc:	0002eae3 	.word	0x0002eae3

000072c0 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    72c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    72c2:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    72c4:	6880      	ldr	r0, [r0, #8]
    72c6:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    72ca:	075a      	lsls	r2, r3, #29
{
    72cc:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    72ce:	d505      	bpl.n	72dc <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    72d0:	2100      	movs	r1, #0
    72d2:	f01e fe04 	bl	25ede <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    72d6:	68e0      	ldr	r0, [r4, #12]
    72d8:	f01f fccd 	bl	26c76 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    72dc:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    72de:	68db      	ldr	r3, [r3, #12]
    72e0:	b96b      	cbnz	r3, 72fe <history_handle+0x3e>
		if (up) {
    72e2:	2d00      	cmp	r5, #0
    72e4:	d037      	beq.n	7356 <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    72e6:	68a0      	ldr	r0, [r4, #8]
    72e8:	3042      	adds	r0, #66	; 0x42
    72ea:	f01e fdb1 	bl	25e50 <z_shell_strlen>

			if (cmd_len) {
    72ee:	68a3      	ldr	r3, [r4, #8]
    72f0:	b398      	cbz	r0, 735a <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    72f2:	f103 0142 	add.w	r1, r3, #66	; 0x42
    72f6:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    72fa:	f021 f8dc 	bl	284b6 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    72fe:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    7300:	68e0      	ldr	r0, [r4, #12]
    7302:	f10d 0306 	add.w	r3, sp, #6
    7306:	3242      	adds	r2, #66	; 0x42
    7308:	4629      	mov	r1, r5
    730a:	f01f fcb7 	bl	26c7c <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    730e:	b958      	cbnz	r0, 7328 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    7310:	68a0      	ldr	r0, [r4, #8]
    7312:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    7316:	3042      	adds	r0, #66	; 0x42
    7318:	f021 f8cd 	bl	284b6 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    731c:	68a0      	ldr	r0, [r4, #8]
    731e:	3042      	adds	r0, #66	; 0x42
    7320:	f01e fd96 	bl	25e50 <z_shell_strlen>
    7324:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    7328:	4620      	mov	r0, r4
    732a:	f01f f932 	bl	26592 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    732e:	68a3      	ldr	r3, [r4, #8]
    7330:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    7334:	069b      	lsls	r3, r3, #26
    7336:	d503      	bpl.n	7340 <history_handle+0x80>
    7338:	4909      	ldr	r1, [pc, #36]	; (7360 <history_handle+0xa0>)
    733a:	6960      	ldr	r0, [r4, #20]
    733c:	f01e fd8e 	bl	25e5c <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    7340:	4620      	mov	r0, r4
    7342:	f000 fe77 	bl	8034 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    7346:	68a3      	ldr	r3, [r4, #8]
    7348:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    734c:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    734e:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    7350:	4620      	mov	r0, r4
    7352:	f01f f88b 	bl	2646c <z_shell_op_cond_next_line>
}
    7356:	b003      	add	sp, #12
    7358:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    735a:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    735e:	e7ce      	b.n	72fe <history_handle+0x3e>
    7360:	0002c4eb 	.word	0x0002c4eb

00007364 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    7364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    7368:	2300      	movs	r3, #0
{
    736a:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    736c:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    7370:	6883      	ldr	r3, [r0, #8]
{
    7372:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    7374:	3342      	adds	r3, #66	; 0x42
    7376:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    7378:	f01f f911 	bl	2659e <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    737c:	4620      	mov	r0, r4
    737e:	f01f f861 	bl	26444 <z_shell_cursor_in_empty_line>
    7382:	b910      	cbnz	r0, 738a <execute+0x26>
		z_cursor_next_line_move(shell);
    7384:	6960      	ldr	r0, [r4, #20]
    7386:	f7ff ff95 	bl	72b4 <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    738a:	68a0      	ldr	r0, [r4, #8]
    738c:	2214      	movs	r2, #20
    738e:	2100      	movs	r1, #0
    7390:	3008      	adds	r0, #8
    7392:	f021 f91b 	bl	285cc <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    7396:	4620      	mov	r0, r4
    7398:	f01f f801 	bl	2639e <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    739c:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    739e:	68e0      	ldr	r0, [r4, #12]
    73a0:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    73a2:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    73a4:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    73a6:	f01f fca0 	bl	26cea <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    73aa:	4620      	mov	r0, r4
    73ac:	f01f fd23 	bl	26df6 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    73b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    73b4:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    73b6:	46b2      	mov	sl, r6
    73b8:	af11      	add	r7, sp, #68	; 0x44
    73ba:	9602      	str	r6, [sp, #8]
    73bc:	4635      	mov	r5, r6
    73be:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    73c0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    73c4:	2a01      	cmp	r2, #1
    73c6:	f000 80d6 	beq.w	7576 <execute+0x212>
    73ca:	2b0b      	cmp	r3, #11
    73cc:	f240 80ae 	bls.w	752c <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    73d0:	9b06      	ldr	r3, [sp, #24]
    73d2:	2b02      	cmp	r3, #2
    73d4:	f040 80ae 	bne.w	7534 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    73d8:	4b89      	ldr	r3, [pc, #548]	; (7600 <execute+0x29c>)
    73da:	4a8a      	ldr	r2, [pc, #552]	; (7604 <execute+0x2a0>)
    73dc:	2101      	movs	r1, #1
    73de:	e014      	b.n	740a <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    73e0:	9a03      	ldr	r2, [sp, #12]
    73e2:	2302      	movs	r3, #2
    73e4:	4639      	mov	r1, r7
    73e6:	a806      	add	r0, sp, #24
    73e8:	f01e fe6d 	bl	260c6 <z_shell_make_argv>
		if (argc == 0) {
    73ec:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    73ee:	687a      	ldr	r2, [r7, #4]
    73f0:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    73f2:	4603      	mov	r3, r0
		if (argc == 0) {
    73f4:	b929      	cbnz	r1, 7402 <execute+0x9e>
			return -ENOEXEC;
    73f6:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    73fa:	4628      	mov	r0, r5
    73fc:	b01f      	add	sp, #124	; 0x7c
    73fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    7402:	2901      	cmp	r1, #1
    7404:	d105      	bne.n	7412 <execute+0xae>
    7406:	b120      	cbz	r0, 7412 <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    7408:	4a7f      	ldr	r2, [pc, #508]	; (7608 <execute+0x2a4>)
    740a:	4620      	mov	r0, r4
    740c:	f01f f973 	bl	266f6 <z_shell_fprintf>
    7410:	e7f1      	b.n	73f6 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    7412:	9b05      	ldr	r3, [sp, #20]
    7414:	b34b      	cbz	r3, 746a <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    7416:	6838      	ldr	r0, [r7, #0]
    7418:	f000 ffb8 	bl	838c <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    741c:	b198      	cbz	r0, 7446 <execute+0xe2>
			if (help_entry.help) {
    741e:	b166      	cbz	r6, 743a <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    7420:	68a5      	ldr	r5, [r4, #8]
    7422:	960d      	str	r6, [sp, #52]	; 0x34
    7424:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    7426:	ae0c      	add	r6, sp, #48	; 0x30
    7428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    742a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    742c:	6833      	ldr	r3, [r6, #0]
    742e:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    7430:	4620      	mov	r0, r4
    7432:	f7ff ff2f 	bl	7294 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    7436:	2501      	movs	r5, #1
    7438:	e7df      	b.n	73fa <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    743a:	4a74      	ldr	r2, [pc, #464]	; (760c <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    743c:	2101      	movs	r1, #1
    743e:	4620      	mov	r0, r4
    7440:	f01f f959 	bl	266f6 <z_shell_fprintf>
		return false;
    7444:	e7d7      	b.n	73f6 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    7446:	9b05      	ldr	r3, [sp, #20]
    7448:	b17b      	cbz	r3, 746a <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    744a:	683a      	ldr	r2, [r7, #0]
    744c:	4629      	mov	r1, r5
    744e:	4620      	mov	r0, r4
    7450:	f001 f900 	bl	8654 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    7454:	2802      	cmp	r0, #2
    7456:	f000 808e 	beq.w	7576 <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    745a:	2803      	cmp	r0, #3
    745c:	d005      	beq.n	746a <execute+0x106>
				++cmd_lvl;
    745e:	9b05      	ldr	r3, [sp, #20]
    7460:	3301      	adds	r3, #1
    7462:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    7464:	2301      	movs	r3, #1
    7466:	9302      	str	r3, [sp, #8]
				continue;
    7468:	e7aa      	b.n	73c0 <execute+0x5c>
		if (has_last_handler == false) {
    746a:	f1ba 0f00 	cmp.w	sl, #0
    746e:	d105      	bne.n	747c <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    7470:	6839      	ldr	r1, [r7, #0]
    7472:	aa07      	add	r2, sp, #28
    7474:	4658      	mov	r0, fp
    7476:	f01e ff11 	bl	2629c <z_shell_find_cmd>
    747a:	4605      	mov	r5, r0
		argvp++;
    747c:	3704      	adds	r7, #4
		args_left--;
    747e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    7482:	2d00      	cmp	r5, #0
    7484:	d040      	beq.n	7508 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    7486:	9a02      	ldr	r2, [sp, #8]
    7488:	68eb      	ldr	r3, [r5, #12]
    748a:	b142      	cbz	r2, 749e <execute+0x13a>
    748c:	b313      	cbz	r3, 74d4 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    748e:	4620      	mov	r0, r4
    7490:	f01f f885 	bl	2659e <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    7494:	4620      	mov	r0, r4
    7496:	f01e ffe9 	bl	2646c <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    749a:	4a5d      	ldr	r2, [pc, #372]	; (7610 <execute+0x2ac>)
    749c:	e7ce      	b.n	743c <execute+0xd8>
	if (entry->handler) {
    749e:	b1cb      	cbz	r3, 74d4 <execute+0x170>
		*active_cmd = *entry;
    74a0:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    74a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    74a6:	46ae      	mov	lr, r5
    74a8:	f103 0c08 	add.w	ip, r3, #8
    74ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    74b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    74b4:	f8de 3000 	ldr.w	r3, [lr]
    74b8:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    74bc:	68ab      	ldr	r3, [r5, #8]
    74be:	b94b      	cbnz	r3, 74d4 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    74c0:	7c6b      	ldrb	r3, [r5, #17]
    74c2:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    74c4:	bf01      	itttt	eq
    74c6:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    74ca:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    74ce:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    74d2:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    74d4:	f8d5 c004 	ldr.w	ip, [r5, #4]
    74d8:	f1bc 0f00 	cmp.w	ip, #0
    74dc:	d008      	beq.n	74f0 <execute+0x18c>
		*help_entry = *entry;
    74de:	46ae      	mov	lr, r5
    74e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    74e4:	ae0c      	add	r6, sp, #48	; 0x30
    74e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    74e8:	f8de 3000 	ldr.w	r3, [lr]
    74ec:	6033      	str	r3, [r6, #0]
    74ee:	4666      	mov	r6, ip
    74f0:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    74f2:	f1b8 0f00 	cmp.w	r8, #0
    74f6:	d103      	bne.n	7500 <execute+0x19c>
    74f8:	9b06      	ldr	r3, [sp, #24]
    74fa:	2b02      	cmp	r3, #2
    74fc:	f47f af60 	bne.w	73c0 <execute+0x5c>
			cmd_lvl++;
    7500:	9b05      	ldr	r3, [sp, #20]
    7502:	3301      	adds	r3, #1
    7504:	9305      	str	r3, [sp, #20]
    7506:	e75b      	b.n	73c0 <execute+0x5c>
			if (cmd_lvl == 0 &&
    7508:	9b05      	ldr	r3, [sp, #20]
    750a:	b963      	cbnz	r3, 7526 <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    750c:	68a3      	ldr	r3, [r4, #8]
    750e:	69db      	ldr	r3, [r3, #28]
    7510:	b10b      	cbz	r3, 7516 <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    7512:	68db      	ldr	r3, [r3, #12]
    7514:	b93b      	cbnz	r3, 7526 <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    7516:	4b3f      	ldr	r3, [pc, #252]	; (7614 <execute+0x2b0>)
    7518:	9300      	str	r3, [sp, #0]
    751a:	4a3f      	ldr	r2, [pc, #252]	; (7618 <execute+0x2b4>)
    751c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    751e:	2101      	movs	r1, #1
    7520:	4620      	mov	r0, r4
    7522:	f01f f8e8 	bl	266f6 <z_shell_fprintf>
			has_last_handler = true;
    7526:	f04f 0a01 	mov.w	sl, #1
    752a:	e7e2      	b.n	74f2 <execute+0x18e>
		&& args_left > 0) {
    752c:	f1b8 0f00 	cmp.w	r8, #0
    7530:	f47f af56 	bne.w	73e0 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    7534:	9b02      	ldr	r3, [sp, #8]
    7536:	b14b      	cbz	r3, 754c <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    7538:	4620      	mov	r0, r4
    753a:	f01f fc7d 	bl	26e38 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    753e:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    7540:	230c      	movs	r3, #12
    7542:	3242      	adds	r2, #66	; 0x42
    7544:	a911      	add	r1, sp, #68	; 0x44
    7546:	a805      	add	r0, sp, #20
    7548:	f01e fdbd 	bl	260c6 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    754c:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    754e:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    7550:	ab1e      	add	r3, sp, #120	; 0x78
    7552:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7556:	2200      	movs	r2, #0
    7558:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    755c:	6943      	ldr	r3, [r0, #20]
    755e:	b973      	cbnz	r3, 757e <execute+0x21a>
			if (help_entry->help == NULL) {
    7560:	2e00      	cmp	r6, #0
    7562:	f43f af48 	beq.w	73f6 <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    7566:	68c3      	ldr	r3, [r0, #12]
    7568:	42b3      	cmp	r3, r6
    756a:	f43f af61 	beq.w	7430 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    756e:	960d      	str	r6, [sp, #52]	; 0x34
    7570:	f100 0508 	add.w	r5, r0, #8
    7574:	e757      	b.n	7426 <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    7576:	9b05      	ldr	r3, [sp, #20]
    7578:	2b0b      	cmp	r3, #11
    757a:	d9db      	bls.n	7534 <execute+0x1d0>
    757c:	e728      	b.n	73d0 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    757e:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    7580:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    7584:	b1b3      	cbz	r3, 75b4 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    7586:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    7588:	f64f 72ff 	movw	r2, #65535	; 0xffff
    758c:	29ff      	cmp	r1, #255	; 0xff
    758e:	bf18      	it	ne
    7590:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    7592:	429d      	cmp	r5, r3
    7594:	d302      	bcc.n	759c <execute+0x238>
    7596:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    7598:	429d      	cmp	r5, r3
    759a:	d90b      	bls.n	75b4 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    759c:	6883      	ldr	r3, [r0, #8]
    759e:	4a1f      	ldr	r2, [pc, #124]	; (761c <execute+0x2b8>)
    75a0:	2101      	movs	r1, #1
    75a2:	4620      	mov	r0, r4
    75a4:	f01f f8a7 	bl	266f6 <z_shell_fprintf>
			shell_internal_help_print(shell);
    75a8:	4620      	mov	r0, r4
    75aa:	f7ff fe73 	bl	7294 <shell_internal_help_print>
		return -EINVAL;
    75ae:	f06f 0515 	mvn.w	r5, #21
    75b2:	e722      	b.n	73fa <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    75b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    75b8:	f500 7019 	add.w	r0, r0, #612	; 0x264
    75bc:	f01e fc14 	bl	25de8 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    75c0:	68a0      	ldr	r0, [r4, #8]
    75c2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    75c6:	f01e fca3 	bl	25f10 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    75ca:	68a3      	ldr	r3, [r4, #8]
    75cc:	aa11      	add	r2, sp, #68	; 0x44
    75ce:	4629      	mov	r1, r5
    75d0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    75d4:	695b      	ldr	r3, [r3, #20]
    75d6:	4620      	mov	r0, r4
    75d8:	4798      	blx	r3
    75da:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    75dc:	68a0      	ldr	r0, [r4, #8]
    75de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    75e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75e6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    75ea:	f01e fc44 	bl	25e76 <k_mutex_lock.constprop.0.isra.0>
    75ee:	68a0      	ldr	r0, [r4, #8]
    75f0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    75f4:	f500 7019 	add.w	r0, r0, #612	; 0x264
    75f8:	f01e fc05 	bl	25e06 <atomic_and>
	return ret;
    75fc:	e6fd      	b.n	73fa <execute+0x96>
    75fe:	bf00      	nop
    7600:	0002eee6 	.word	0x0002eee6
    7604:	0002ec0e 	.word	0x0002ec0e
    7608:	0002ee71 	.word	0x0002ee71
    760c:	0002ee85 	.word	0x0002ee85
    7610:	0002eea3 	.word	0x0002eea3
    7614:	0002eed2 	.word	0x0002eed2
    7618:	0002f195 	.word	0x0002f195
    761c:	0002ef0a 	.word	0x0002ef0a

00007620 <state_set.constprop.0>:
	shell->ctx->state = state;
    7620:	6883      	ldr	r3, [r0, #8]
    7622:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    7624:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    7626:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    7628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    762a:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    762c:	b9ba      	cbnz	r2, 765e <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    762e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    7632:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    7634:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    7638:	04db      	lsls	r3, r3, #19
    763a:	d50b      	bpl.n	7654 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    763c:	2103      	movs	r1, #3
    763e:	4b08      	ldr	r3, [pc, #32]	; (7660 <state_set.constprop.0+0x40>)
    7640:	4a08      	ldr	r2, [pc, #32]	; (7664 <state_set.constprop.0+0x44>)
    7642:	f01f f858 	bl	266f6 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    7646:	68a0      	ldr	r0, [r4, #8]
    7648:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    764c:	f500 7019 	add.w	r0, r0, #612	; 0x264
    7650:	f01e fbd9 	bl	25e06 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    7654:	4620      	mov	r0, r4
}
    7656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    765a:	f000 bdfd 	b.w	8258 <z_shell_print_prompt_and_cmd>
}
    765e:	bd10      	pop	{r4, pc}
    7660:	0002ef25 	.word	0x0002ef25
    7664:	0002ec02 	.word	0x0002ec02

00007668 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    7668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    766c:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    766e:	6880      	ldr	r0, [r0, #8]
    7670:	b0ab      	sub	sp, #172	; 0xac
    7672:	2101      	movs	r1, #1
    7674:	f500 7019 	add.w	r0, r0, #612	; 0x264
    7678:	f01e fbb6 	bl	25de8 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    767c:	68a3      	ldr	r3, [r4, #8]
    767e:	791b      	ldrb	r3, [r3, #4]
    7680:	2b02      	cmp	r3, #2
    7682:	d117      	bne.n	76b4 <shell_process+0x4c>
	size_t count = 0;
    7684:	2300      	movs	r3, #0
    7686:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    7688:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    768a:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    768c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    768e:	6803      	ldr	r3, [r0, #0]
    7690:	691d      	ldr	r5, [r3, #16]
    7692:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    7694:	b1c6      	cbz	r6, 76c8 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    7696:	2210      	movs	r2, #16
    7698:	a91d      	add	r1, sp, #116	; 0x74
    769a:	47a8      	blx	r5
			if (count) {
    769c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    769e:	b14a      	cbz	r2, 76b4 <shell_process+0x4c>
				bypass(shell, buf, count);
    76a0:	a91d      	add	r1, sp, #116	; 0x74
    76a2:	4620      	mov	r0, r4
    76a4:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    76a6:	68a3      	ldr	r3, [r4, #8]
    76a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    76aa:	2b00      	cmp	r3, #0
    76ac:	d1ec      	bne.n	7688 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    76ae:	4620      	mov	r0, r4
    76b0:	f7ff ffb6 	bl	7620 <state_set.constprop.0>
    76b4:	68a0      	ldr	r0, [r4, #8]
    76b6:	f06f 0101 	mvn.w	r1, #1
    76ba:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    76be:	b02b      	add	sp, #172	; 0xac
    76c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76c4:	f01e bb9f 	b.w	25e06 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    76c8:	2201      	movs	r2, #1
    76ca:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    76ce:	47a8      	blx	r5
		if (count == 0) {
    76d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    76d2:	2b00      	cmp	r3, #0
    76d4:	d0ee      	beq.n	76b4 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    76d6:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    76da:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    76de:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    76e0:	2a00      	cmp	r2, #0
    76e2:	dbd1      	blt.n	7688 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    76e4:	7942      	ldrb	r2, [r0, #5]
    76e6:	2a03      	cmp	r2, #3
    76e8:	f200 82fd 	bhi.w	7ce6 <shell_process+0x67e>
    76ec:	e8df f012 	tbh	[pc, r2, lsl #1]
    76f0:	02750004 	.word	0x02750004
    76f4:	02fb0298 	.word	0x02fb0298
	if ((data != '\r') && (data != '\n')) {
    76f8:	2b0d      	cmp	r3, #13
    76fa:	d01a      	beq.n	7732 <shell_process+0xca>
    76fc:	2b0a      	cmp	r3, #10
    76fe:	d018      	beq.n	7732 <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    7700:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    7704:	f36f 02ca 	bfc	r2, #3, #8
    7708:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    770c:	2b09      	cmp	r3, #9
    770e:	d04c      	beq.n	77aa <shell_process+0x142>
    7710:	d832      	bhi.n	7778 <shell_process+0x110>
    7712:	2b00      	cmp	r3, #0
    7714:	d0b8      	beq.n	7688 <shell_process+0x20>
    7716:	2b08      	cmp	r3, #8
    7718:	f000 81c4 	beq.w	7aa4 <shell_process+0x43c>
    771c:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    7720:	2a5e      	cmp	r2, #94	; 0x5e
    7722:	f200 81cb 	bhi.w	7abc <shell_process+0x454>
					z_flag_history_exit_set(shell, true);
    7726:	2101      	movs	r1, #1
    7728:	f01e fbd9 	bl	25ede <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    772c:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    7730:	e0e8      	b.n	7904 <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    7732:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    7736:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    773a:	b12a      	cbz	r2, 7748 <shell_process+0xe0>
    773c:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    7740:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    7744:	4293      	cmp	r3, r2
    7746:	d1e1      	bne.n	770c <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    7748:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    774c:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    774e:	f363 02ca 	bfi	r2, r3, #3, #8
    7752:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    7756:	b959      	cbnz	r1, 7770 <shell_process+0x108>
	z_flag_history_exit_set(shell, false);
    7758:	f01e fbc1 	bl	25ede <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    775c:	68e0      	ldr	r0, [r4, #12]
    775e:	f01f fa8a 	bl	26c76 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    7762:	6960      	ldr	r0, [r4, #20]
    7764:	f7ff fda6 	bl	72b4 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    7768:	4620      	mov	r0, r4
    776a:	f7ff ff59 	bl	7620 <state_set.constprop.0>
		break;
    776e:	e78b      	b.n	7688 <shell_process+0x20>
					(void)execute(shell);
    7770:	4620      	mov	r0, r4
    7772:	f7ff fdf7 	bl	7364 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    7776:	e7f7      	b.n	7768 <shell_process+0x100>
    7778:	2b1b      	cmp	r3, #27
    777a:	d013      	beq.n	77a4 <shell_process+0x13c>
    777c:	2b7f      	cmp	r3, #127	; 0x7f
    777e:	d1cd      	bne.n	771c <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    7780:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    7784:	079a      	lsls	r2, r3, #30
    7786:	f57f af7f 	bpl.w	7688 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    778a:	2101      	movs	r1, #1
    778c:	f01e fba7 	bl	25ede <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    7790:	68a3      	ldr	r3, [r4, #8]
    7792:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    7796:	071b      	lsls	r3, r3, #28
    7798:	f100 818c 	bmi.w	7ab4 <shell_process+0x44c>
		z_shell_op_char_delete(shell);
    779c:	4620      	mov	r0, r4
    779e:	f01e ffea 	bl	26776 <z_shell_op_char_delete>
		break;
    77a2:	e771      	b.n	7688 <shell_process+0x20>
	shell->ctx->receive_state = state;
    77a4:	2301      	movs	r3, #1
    77a6:	7143      	strb	r3, [r0, #5]
}
    77a8:	e76e      	b.n	7688 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    77aa:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    77ae:	079e      	lsls	r6, r3, #30
    77b0:	f57f af6a 	bpl.w	7688 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    77b4:	2101      	movs	r1, #1
    77b6:	f01e fb92 	bl	25ede <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    77ba:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    77bc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    77be:	2bff      	cmp	r3, #255	; 0xff
    77c0:	f43f af62 	beq.w	7688 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    77c4:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    77c6:	f100 0142 	add.w	r1, r0, #66	; 0x42
    77ca:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    77ce:	f020 fef2 	bl	285b6 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    77d2:	68a2      	ldr	r2, [r4, #8]
    77d4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    77d6:	4413      	add	r3, r2
    77d8:	2500      	movs	r5, #0
    77da:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    77de:	a91d      	add	r1, sp, #116	; 0x74
    77e0:	230c      	movs	r3, #12
    77e2:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    77e6:	a80d      	add	r0, sp, #52	; 0x34
    77e8:	f01e fc6d 	bl	260c6 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    77ec:	990d      	ldr	r1, [sp, #52]	; 0x34
    77ee:	290c      	cmp	r1, #12
    77f0:	f63f af4a 	bhi.w	7688 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    77f4:	ab2a      	add	r3, sp, #168	; 0xa8
    77f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    77fa:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
    77fe:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    7800:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    7802:	4413      	add	r3, r2
    7804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    7808:	2b20      	cmp	r3, #32
    780a:	f000 826e 	beq.w	7cea <shell_process+0x682>
    780e:	3b09      	subs	r3, #9
    7810:	2b04      	cmp	r3, #4
    7812:	f240 826a 	bls.w	7cea <shell_process+0x682>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    7816:	2901      	cmp	r1, #1
    7818:	d84f      	bhi.n	78ba <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    781a:	2500      	movs	r5, #0
    781c:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    781e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7820:	aa2a      	add	r2, sp, #168	; 0xa8
    7822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    7826:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    7828:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    782c:	4650      	mov	r0, sl
    782e:	f01e fb0f 	bl	25e50 <z_shell_strlen>
	size_t first = 0;
    7832:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    7834:	4681      	mov	r9, r0
	*longest = 0U;
    7836:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    7838:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    783a:	aa18      	add	r2, sp, #96	; 0x60
    783c:	4639      	mov	r1, r7
    783e:	4628      	mov	r0, r5
    7840:	f000 fb94 	bl	7f6c <z_shell_cmd_get>
    7844:	4683      	mov	fp, r0
    7846:	2800      	cmp	r0, #0
    7848:	d144      	bne.n	78d4 <shell_process+0x26c>
	if (cnt == 1) {
    784a:	2e01      	cmp	r6, #1
    784c:	d163      	bne.n	7916 <shell_process+0x2ae>
		autocomplete(shell, cmd, argv[arg_idx], first);
    784e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7850:	aa2a      	add	r2, sp, #168	; 0xa8
    7852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    7856:	f853 0c34 	ldr.w	r0, [r3, #-52]
    785a:	f01e faf9 	bl	25e50 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    785e:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    7860:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    7862:	3208      	adds	r2, #8
    7864:	4641      	mov	r1, r8
    7866:	4628      	mov	r0, r5
    7868:	f000 fb80 	bl	7f6c <z_shell_cmd_get>
    786c:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    786e:	6800      	ldr	r0, [r0, #0]
    7870:	f01e faee 	bl	25e50 <z_shell_strlen>
	if (cmd_len != arg_len) {
    7874:	4286      	cmp	r6, r0
    7876:	d006      	beq.n	7886 <shell_process+0x21e>
		z_shell_op_completion_insert(shell,
    7878:	6829      	ldr	r1, [r5, #0]
    787a:	1b82      	subs	r2, r0, r6
    787c:	b292      	uxth	r2, r2
    787e:	4431      	add	r1, r6
    7880:	4620      	mov	r0, r4
    7882:	f01e ff76 	bl	26772 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    7886:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    7888:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    788a:	4403      	add	r3, r0
    788c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    7890:	2b20      	cmp	r3, #32
    7892:	d03b      	beq.n	790c <shell_process+0x2a4>
    7894:	3b09      	subs	r3, #9
    7896:	2b04      	cmp	r3, #4
    7898:	d938      	bls.n	790c <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    789a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    789e:	07dd      	lsls	r5, r3, #31
    78a0:	d52f      	bpl.n	7902 <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    78a2:	2100      	movs	r1, #0
    78a4:	f01e fb25 	bl	25ef2 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    78a8:	2120      	movs	r1, #32
    78aa:	4620      	mov	r0, r4
    78ac:	f000 fca0 	bl	81f0 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    78b0:	68a0      	ldr	r0, [r4, #8]
    78b2:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    78b4:	f01e fb1d 	bl	25ef2 <z_flag_insert_mode_set.isra.0>
				break;
    78b8:	e6e6      	b.n	7688 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    78ba:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    78bc:	2000      	movs	r0, #0
    78be:	ab0e      	add	r3, sp, #56	; 0x38
    78c0:	9300      	str	r3, [sp, #0]
    78c2:	9001      	str	r0, [sp, #4]
    78c4:	ab0c      	add	r3, sp, #48	; 0x30
    78c6:	aa1d      	add	r2, sp, #116	; 0x74
    78c8:	f01e fd08 	bl	262dc <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    78cc:	4605      	mov	r5, r0
    78ce:	2800      	cmp	r0, #0
    78d0:	d1a5      	bne.n	781e <shell_process+0x1b6>
    78d2:	e6d9      	b.n	7688 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    78d4:	f8db 0000 	ldr.w	r0, [fp]
    78d8:	464a      	mov	r2, r9
    78da:	4651      	mov	r1, sl
    78dc:	f020 fe31 	bl	28542 <strncmp>
		if (is_candidate) {
    78e0:	b968      	cbnz	r0, 78fe <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    78e2:	f8db 0000 	ldr.w	r0, [fp]
    78e6:	f020 fe10 	bl	2850a <strlen>
    78ea:	9b04      	ldr	r3, [sp, #16]
    78ec:	4283      	cmp	r3, r0
    78ee:	bf38      	it	cc
    78f0:	4603      	movcc	r3, r0
    78f2:	b29b      	uxth	r3, r3
				*first_idx = idx;
    78f4:	2e00      	cmp	r6, #0
    78f6:	bf08      	it	eq
    78f8:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    78fa:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    78fc:	3601      	adds	r6, #1
		idx++;
    78fe:	3701      	adds	r7, #1
    7900:	e79b      	b.n	783a <shell_process+0x1d2>
			z_shell_op_char_insert(shell, ' ');
    7902:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    7904:	4620      	mov	r0, r4
    7906:	f000 fc73 	bl	81f0 <z_shell_op_char_insert>
    790a:	e6bd      	b.n	7688 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    790c:	2101      	movs	r1, #1
    790e:	4620      	mov	r0, r4
    7910:	f01e fddf 	bl	264d2 <z_shell_op_cursor_move>
    7914:	e6b8      	b.n	7688 <shell_process+0x20>
	} else if (cnt > 1) {
    7916:	f67f aeb7 	bls.w	7688 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    791a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    791c:	aa2a      	add	r2, sp, #168	; 0xa8
    791e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7922:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    7926:	4650      	mov	r0, sl
    7928:	f01e fa92 	bl	25e50 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    792c:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    792e:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    7930:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    7934:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 7c08 <shell_process+0x5a0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    7938:	9605      	str	r6, [sp, #20]
    793a:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    793e:	68a2      	ldr	r2, [r4, #8]
    7940:	9903      	ldr	r1, [sp, #12]
    7942:	3208      	adds	r2, #8
    7944:	4628      	mov	r0, r5
    7946:	f000 fb11 	bl	7f6c <z_shell_cmd_get>
		idx++;
    794a:	9b03      	ldr	r3, [sp, #12]
    794c:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    794e:	4607      	mov	r7, r0
		idx++;
    7950:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    7952:	f1ba 0f00 	cmp.w	sl, #0
    7956:	d152      	bne.n	79fe <shell_process+0x396>
		tab_item_print(shell, match->syntax, longest);
    7958:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    795a:	2f00      	cmp	r7, #0
    795c:	d159      	bne.n	7a12 <shell_process+0x3aa>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    795e:	68a2      	ldr	r2, [r4, #8]
    7960:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    7962:	9b05      	ldr	r3, [sp, #20]
    7964:	3b01      	subs	r3, #1
    7966:	9305      	str	r3, [sp, #20]
    7968:	d1e9      	bne.n	793e <shell_process+0x2d6>
	z_cursor_next_line_move(shell);
    796a:	6960      	ldr	r0, [r4, #20]
    796c:	f7ff fca2 	bl	72b4 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    7970:	4620      	mov	r0, r4
    7972:	f000 fc71 	bl	8258 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    7976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7978:	aa2a      	add	r2, sp, #168	; 0xa8
    797a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    797e:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    7982:	f853 0c34 	ldr.w	r0, [r3, #-52]
    7986:	f01e fa63 	bl	25e50 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    798a:	4641      	mov	r1, r8
    798c:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    798e:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    7990:	4628      	mov	r0, r5
    7992:	f000 faeb 	bl	7f6c <z_shell_cmd_get>
    7996:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    7998:	68a0      	ldr	r0, [r4, #8]
    799a:	f8d8 1000 	ldr.w	r1, [r8]
    799e:	22ff      	movs	r2, #255	; 0xff
    79a0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    79a4:	f020 fd91 	bl	284ca <strncpy>
	*str = match->syntax;
    79a8:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    79ac:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    79b0:	aa18      	add	r2, sp, #96	; 0x60
    79b2:	4649      	mov	r1, r9
    79b4:	4628      	mov	r0, r5
    79b6:	f109 0b01 	add.w	fp, r9, #1
    79ba:	f000 fad7 	bl	7f6c <z_shell_cmd_get>
		if (match2 == NULL) {
    79be:	2800      	cmp	r0, #0
    79c0:	d063      	beq.n	7a8a <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    79c2:	68a3      	ldr	r3, [r4, #8]
    79c4:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    79c6:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    79ca:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    79cc:	f813 cb01 	ldrb.w	ip, [r3], #1
    79d0:	5c81      	ldrb	r1, [r0, r2]
    79d2:	4561      	cmp	r1, ip
    79d4:	d105      	bne.n	79e2 <shell_process+0x37a>
    79d6:	b121      	cbz	r1, 79e2 <shell_process+0x37a>
		common++;
    79d8:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    79da:	f64f 71ff 	movw	r1, #65535	; 0xffff
    79de:	428a      	cmp	r2, r1
    79e0:	d1f4      	bne.n	79cc <shell_process+0x364>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    79e2:	b10f      	cbz	r7, 79e8 <shell_process+0x380>
    79e4:	42ba      	cmp	r2, r7
    79e6:	db08      	blt.n	79fa <shell_process+0x392>
			common = (curr_common < common) ? curr_common : common;
    79e8:	4542      	cmp	r2, r8
			--cnt;
    79ea:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    79ee:	bfa8      	it	ge
    79f0:	4642      	movge	r2, r8
	while (cnt > 1) {
    79f2:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    79f4:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    79f8:	d047      	beq.n	7a8a <shell_process+0x422>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    79fa:	46d9      	mov	r9, fp
    79fc:	e7d8      	b.n	79b0 <shell_process+0x348>
		if (str && match->syntax &&
    79fe:	6800      	ldr	r0, [r0, #0]
    7a00:	2800      	cmp	r0, #0
    7a02:	d0a9      	beq.n	7958 <shell_process+0x2f0>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    7a04:	9a06      	ldr	r2, [sp, #24]
    7a06:	4651      	mov	r1, sl
    7a08:	f020 fd9b 	bl	28542 <strncmp>
		if (str && match->syntax &&
    7a0c:	2800      	cmp	r0, #0
    7a0e:	d0a3      	beq.n	7958 <shell_process+0x2f0>
    7a10:	e795      	b.n	793e <shell_process+0x2d6>
	longest_option += z_shell_strlen(tab);
    7a12:	4658      	mov	r0, fp
    7a14:	f01e fa1c 	bl	25e50 <z_shell_strlen>
    7a18:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    7a1a:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    7a1c:	18c2      	adds	r2, r0, r3
    7a1e:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    7a20:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    7a22:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    7a24:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    7a26:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    7a28:	f01e fa12 	bl	25e50 <z_shell_strlen>
    7a2c:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    7a2e:	4638      	mov	r0, r7
    7a30:	f01e fa0e 	bl	25e50 <z_shell_strlen>
    7a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    7a36:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    7a3a:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    7a3e:	68a0      	ldr	r0, [r4, #8]
    7a40:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    7a44:	1a59      	subs	r1, r3, r1
    7a46:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    7a4a:	b292      	uxth	r2, r2
    7a4c:	fbbc f1f2 	udiv	r1, ip, r2
    7a50:	fb02 c211 	mls	r2, r2, r1, ip
    7a54:	f10c 0e01 	add.w	lr, ip, #1
    7a58:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    7a5a:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    7a5e:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    7a62:	b95a      	cbnz	r2, 7a7c <shell_process+0x414>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    7a64:	4a69      	ldr	r2, [pc, #420]	; (7c0c <shell_process+0x5a4>)
    7a66:	9700      	str	r7, [sp, #0]
    7a68:	465b      	mov	r3, fp
    7a6a:	2106      	movs	r1, #6
    7a6c:	4620      	mov	r0, r4
    7a6e:	f01e fe42 	bl	266f6 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    7a72:	4649      	mov	r1, r9
    7a74:	4620      	mov	r0, r4
    7a76:	f000 fac7 	bl	8008 <z_shell_op_cursor_horiz_move>
    7a7a:	e772      	b.n	7962 <shell_process+0x2fa>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    7a7c:	4a64      	ldr	r2, [pc, #400]	; (7c10 <shell_process+0x5a8>)
    7a7e:	463b      	mov	r3, r7
    7a80:	2106      	movs	r1, #6
    7a82:	4620      	mov	r0, r4
    7a84:	f01e fe37 	bl	266f6 <z_shell_fprintf>
    7a88:	e7f3      	b.n	7a72 <shell_process+0x40a>
	if (common) {
    7a8a:	f1b8 0f00 	cmp.w	r8, #0
    7a8e:	f43f adfb 	beq.w	7688 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    7a92:	eba8 0207 	sub.w	r2, r8, r7
    7a96:	b292      	uxth	r2, r2
    7a98:	eb0a 0107 	add.w	r1, sl, r7
    7a9c:	4620      	mov	r0, r4
    7a9e:	f01e fe68 	bl	26772 <z_shell_op_completion_insert>
    7aa2:	e5f1      	b.n	7688 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    7aa4:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    7aa8:	0799      	lsls	r1, r3, #30
    7aaa:	f57f aded 	bpl.w	7688 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    7aae:	2101      	movs	r1, #1
    7ab0:	f01e fa15 	bl	25ede <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    7ab4:	4620      	mov	r0, r4
    7ab6:	f01e fe79 	bl	267ac <z_shell_op_char_backspace>
    7aba:	e5e5      	b.n	7688 <shell_process+0x20>
    7abc:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    7ac0:	0797      	lsls	r7, r2, #30
    7ac2:	f57f ade1 	bpl.w	7688 <shell_process+0x20>
	switch (data) {
    7ac6:	3b01      	subs	r3, #1
    7ac8:	2b16      	cmp	r3, #22
    7aca:	f63f addd 	bhi.w	7688 <shell_process+0x20>
    7ace:	a201      	add	r2, pc, #4	; (adr r2, 7ad4 <shell_process+0x46c>)
    7ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7ad4:	00007cbd 	.word	0x00007cbd
    7ad8:	00007b31 	.word	0x00007b31
    7adc:	00007b39 	.word	0x00007b39
    7ae0:	0000779d 	.word	0x0000779d
    7ae4:	00007cb1 	.word	0x00007cb1
    7ae8:	00007b57 	.word	0x00007b57
    7aec:	00007689 	.word	0x00007689
    7af0:	00007689 	.word	0x00007689
    7af4:	00007689 	.word	0x00007689
    7af8:	00007689 	.word	0x00007689
    7afc:	00007b5f 	.word	0x00007b5f
    7b00:	00007b67 	.word	0x00007b67
    7b04:	00007689 	.word	0x00007689
    7b08:	00007b91 	.word	0x00007b91
    7b0c:	00007689 	.word	0x00007689
    7b10:	00007b9b 	.word	0x00007b9b
    7b14:	00007689 	.word	0x00007689
    7b18:	00007689 	.word	0x00007689
    7b1c:	00007689 	.word	0x00007689
    7b20:	00007689 	.word	0x00007689
    7b24:	00007b9f 	.word	0x00007b9f
    7b28:	00007689 	.word	0x00007689
    7b2c:	00007bcb 	.word	0x00007bcb
		z_shell_op_left_arrow(shell);
    7b30:	4620      	mov	r0, r4
    7b32:	f01e fd3b 	bl	265ac <z_shell_op_left_arrow>
		break;
    7b36:	e5a7      	b.n	7688 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    7b38:	4620      	mov	r0, r4
    7b3a:	f01e fd30 	bl	2659e <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    7b3e:	4620      	mov	r0, r4
    7b40:	f01e fc80 	bl	26444 <z_shell_cursor_in_empty_line>
    7b44:	b910      	cbnz	r0, 7b4c <shell_process+0x4e4>
			z_cursor_next_line_move(shell);
    7b46:	6960      	ldr	r0, [r4, #20]
    7b48:	f7ff fbb4 	bl	72b4 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    7b4c:	68a0      	ldr	r0, [r4, #8]
    7b4e:	2101      	movs	r1, #1
    7b50:	f01e f9c5 	bl	25ede <z_flag_history_exit_set.isra.0>
    7b54:	e608      	b.n	7768 <shell_process+0x100>
		z_shell_op_right_arrow(shell);
    7b56:	4620      	mov	r0, r4
    7b58:	f01e fd30 	bl	265bc <z_shell_op_right_arrow>
		break;
    7b5c:	e594      	b.n	7688 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    7b5e:	4620      	mov	r0, r4
    7b60:	f01e fd35 	bl	265ce <z_shell_op_delete_from_cursor>
		break;
    7b64:	e590      	b.n	7688 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    7b66:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    7b6a:	069e      	lsls	r6, r3, #26
    7b6c:	d503      	bpl.n	7b76 <shell_process+0x50e>
    7b6e:	4929      	ldr	r1, [pc, #164]	; (7c14 <shell_process+0x5ac>)
    7b70:	6960      	ldr	r0, [r4, #20]
    7b72:	f01e f973 	bl	25e5c <z_shell_raw_fprintf>
    7b76:	68a3      	ldr	r3, [r4, #8]
    7b78:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    7b7c:	069d      	lsls	r5, r3, #26
    7b7e:	d503      	bpl.n	7b88 <shell_process+0x520>
    7b80:	4925      	ldr	r1, [pc, #148]	; (7c18 <shell_process+0x5b0>)
    7b82:	6960      	ldr	r0, [r4, #20]
    7b84:	f01e f96a 	bl	25e5c <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    7b88:	4620      	mov	r0, r4
    7b8a:	f000 fb65 	bl	8258 <z_shell_print_prompt_and_cmd>
		break;
    7b8e:	e57b      	b.n	7688 <shell_process+0x20>
		history_handle(shell, false);
    7b90:	2100      	movs	r1, #0
		history_handle(shell, true);
    7b92:	4620      	mov	r0, r4
    7b94:	f7ff fb94 	bl	72c0 <history_handle>
		break;
    7b98:	e576      	b.n	7688 <shell_process+0x20>
		history_handle(shell, true);
    7b9a:	2101      	movs	r1, #1
    7b9c:	e7f9      	b.n	7b92 <shell_process+0x52a>
		z_shell_op_cursor_home_move(shell);
    7b9e:	4620      	mov	r0, r4
    7ba0:	f01e fcf7 	bl	26592 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    7ba4:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    7ba6:	2300      	movs	r3, #0
    7ba8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    7bac:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    7bae:	2101      	movs	r1, #1
    7bb0:	f01e f995 	bl	25ede <z_flag_history_exit_set.isra.0>
    7bb4:	68a3      	ldr	r3, [r4, #8]
    7bb6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    7bba:	0698      	lsls	r0, r3, #26
    7bbc:	f57f ad64 	bpl.w	7688 <shell_process+0x20>
    7bc0:	4916      	ldr	r1, [pc, #88]	; (7c1c <shell_process+0x5b4>)
    7bc2:	6960      	ldr	r0, [r4, #20]
    7bc4:	f01e f94a 	bl	25e5c <z_shell_raw_fprintf>
    7bc8:	e55e      	b.n	7688 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    7bca:	4620      	mov	r0, r4
    7bcc:	f000 fa78 	bl	80c0 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    7bd0:	68a0      	ldr	r0, [r4, #8]
    7bd2:	2101      	movs	r1, #1
    7bd4:	f01e f983 	bl	25ede <z_flag_history_exit_set.isra.0>
		break;
    7bd8:	e556      	b.n	7688 <shell_process+0x20>
			if (data == '[') {
    7bda:	2b5b      	cmp	r3, #91	; 0x5b
    7bdc:	d101      	bne.n	7be2 <shell_process+0x57a>
	shell->ctx->receive_state = state;
    7bde:	2302      	movs	r3, #2
    7be0:	e5e1      	b.n	77a6 <shell_process+0x13e>
	return sh->ctx->cfg.flags.echo == 1;
    7be2:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    7be6:	0791      	lsls	r1, r2, #30
    7be8:	d506      	bpl.n	7bf8 <shell_process+0x590>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    7bea:	2b62      	cmp	r3, #98	; 0x62
    7bec:	d108      	bne.n	7c00 <shell_process+0x598>
		z_shell_op_cursor_word_move(shell, -1);
    7bee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    7bf2:	4620      	mov	r0, r4
    7bf4:	f01e fc91 	bl	2651a <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    7bf8:	68a3      	ldr	r3, [r4, #8]
    7bfa:	2200      	movs	r2, #0
    7bfc:	715a      	strb	r2, [r3, #5]
}
    7bfe:	e543      	b.n	7688 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    7c00:	2b66      	cmp	r3, #102	; 0x66
    7c02:	d1f9      	bne.n	7bf8 <shell_process+0x590>
		z_shell_op_cursor_word_move(shell, 1);
    7c04:	2101      	movs	r1, #1
    7c06:	e7f4      	b.n	7bf2 <shell_process+0x58a>
    7c08:	0002e5a2 	.word	0x0002e5a2
    7c0c:	0002ef69 	.word	0x0002ef69
    7c10:	0002ec02 	.word	0x0002ec02
    7c14:	0002c4f0 	.word	0x0002c4f0
    7c18:	0002c4f5 	.word	0x0002c4f5
    7c1c:	0002c4eb 	.word	0x0002c4eb
	shell->ctx->receive_state = state;
    7c20:	2200      	movs	r2, #0
    7c22:	7142      	strb	r2, [r0, #5]
    7c24:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    7c28:	0792      	lsls	r2, r2, #30
    7c2a:	f57f ad2d 	bpl.w	7688 <shell_process+0x20>
			switch (data) {
    7c2e:	3b31      	subs	r3, #49	; 0x31
    7c30:	2b1b      	cmp	r3, #27
    7c32:	f63f ad29 	bhi.w	7688 <shell_process+0x20>
    7c36:	a201      	add	r2, pc, #4	; (adr r2, 7c3c <shell_process+0x5d4>)
    7c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7c3c:	00007cb9 	.word	0x00007cb9
    7c40:	00007cc5 	.word	0x00007cc5
    7c44:	00007cd7 	.word	0x00007cd7
    7c48:	00007cad 	.word	0x00007cad
    7c4c:	00007689 	.word	0x00007689
    7c50:	00007689 	.word	0x00007689
    7c54:	00007689 	.word	0x00007689
    7c58:	00007689 	.word	0x00007689
    7c5c:	00007689 	.word	0x00007689
    7c60:	00007689 	.word	0x00007689
    7c64:	00007689 	.word	0x00007689
    7c68:	00007689 	.word	0x00007689
    7c6c:	00007689 	.word	0x00007689
    7c70:	00007689 	.word	0x00007689
    7c74:	00007689 	.word	0x00007689
    7c78:	00007689 	.word	0x00007689
    7c7c:	00007b9b 	.word	0x00007b9b
    7c80:	00007b91 	.word	0x00007b91
    7c84:	00007b57 	.word	0x00007b57
    7c88:	00007b31 	.word	0x00007b31
    7c8c:	00007689 	.word	0x00007689
    7c90:	00007cb1 	.word	0x00007cb1
    7c94:	00007689 	.word	0x00007689
    7c98:	00007cbd 	.word	0x00007cbd
    7c9c:	00007689 	.word	0x00007689
    7ca0:	00007689 	.word	0x00007689
    7ca4:	00007689 	.word	0x00007689
    7ca8:	00007cc9 	.word	0x00007cc9
	shell->ctx->receive_state = state;
    7cac:	2303      	movs	r3, #3
    7cae:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    7cb0:	4620      	mov	r0, r4
    7cb2:	f01e fc74 	bl	2659e <z_shell_op_cursor_end_move>
		break;
    7cb6:	e4e7      	b.n	7688 <shell_process+0x20>
	shell->ctx->receive_state = state;
    7cb8:	2303      	movs	r3, #3
    7cba:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    7cbc:	4620      	mov	r0, r4
    7cbe:	f01e fc68 	bl	26592 <z_shell_op_cursor_home_move>
		break;
    7cc2:	e4e1      	b.n	7688 <shell_process+0x20>
	shell->ctx->receive_state = state;
    7cc4:	2303      	movs	r3, #3
    7cc6:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    7cc8:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    7ccc:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    7cd0:	f081 0101 	eor.w	r1, r1, #1
    7cd4:	e5ee      	b.n	78b4 <shell_process+0x24c>
	shell->ctx->receive_state = state;
    7cd6:	2303      	movs	r3, #3
    7cd8:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    7cda:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    7cde:	079b      	lsls	r3, r3, #30
    7ce0:	f57f acd2 	bpl.w	7688 <shell_process+0x20>
    7ce4:	e55a      	b.n	779c <shell_process+0x134>
	shell->ctx->receive_state = state;
    7ce6:	2300      	movs	r3, #0
    7ce8:	e55d      	b.n	77a6 <shell_process+0x13e>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    7cea:	2900      	cmp	r1, #0
    7cec:	f43f ad95 	beq.w	781a <shell_process+0x1b2>
    7cf0:	e5e4      	b.n	78bc <shell_process+0x254>
    7cf2:	bf00      	nop

00007cf4 <shell_init>:
{
    7cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7cf8:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    7cfa:	6880      	ldr	r0, [r0, #8]
{
    7cfc:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    7cfe:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    7d02:	b089      	sub	sp, #36	; 0x24
    7d04:	4615      	mov	r5, r2
    7d06:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    7d08:	2900      	cmp	r1, #0
    7d0a:	d161      	bne.n	7dd0 <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    7d0c:	f44f 7244 	mov.w	r2, #784	; 0x310
    7d10:	f020 fc5c 	bl	285cc <memset>
	sh->ctx->prompt = sh->default_prompt;
    7d14:	68a3      	ldr	r3, [r4, #8]
    7d16:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    7d18:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    7d1a:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    7d1c:	f01f f851 	bl	26dc2 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    7d20:	68a0      	ldr	r0, [r4, #8]
    7d22:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    7d26:	f023 fc01 	bl	2b52c <z_impl_k_mutex_init>
    7d2a:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    7d2e:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    7d32:	68a0      	ldr	r0, [r4, #8]
    7d34:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    7d36:	f024 f8cc 	bl	2bed2 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    7d3a:	68a0      	ldr	r0, [r4, #8]
    7d3c:	2200      	movs	r2, #0
    7d3e:	1983      	adds	r3, r0, r6
    7d40:	2101      	movs	r1, #1
    7d42:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    7d44:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    7d46:	f024 f8a7 	bl	2be98 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    7d4a:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    7d4e:	f109 0914 	add.w	r9, r9, #20
    7d52:	d1ee      	bne.n	7d32 <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    7d54:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    7d56:	68a0      	ldr	r0, [r4, #8]
    7d58:	2600      	movs	r6, #0
    7d5a:	2102      	movs	r1, #2
    7d5c:	601e      	str	r6, [r3, #0]
    7d5e:	f500 7019 	add.w	r0, r0, #612	; 0x264
    7d62:	f01e f841 	bl	25de8 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    7d66:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    7d68:	4a1b      	ldr	r2, [pc, #108]	; (7dd8 <shell_init+0xe4>)
    7d6a:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    7d6c:	6818      	ldr	r0, [r3, #0]
    7d6e:	f01e f86f 	bl	25e50 <z_shell_strlen>
    7d72:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    7d74:	4a19      	ldr	r2, [pc, #100]	; (7ddc <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    7d76:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    7d7a:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    7d7c:	f366 0582 	bfi	r5, r6, #2, #1
    7d80:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    7d84:	6803      	ldr	r3, [r0, #0]
    7d86:	4641      	mov	r1, r8
    7d88:	681d      	ldr	r5, [r3, #0]
    7d8a:	4623      	mov	r3, r4
    7d8c:	47a8      	blx	r5
	if (ret == 0) {
    7d8e:	4605      	mov	r5, r0
    7d90:	b9d0      	cbnz	r0, 7dc8 <shell_init+0xd4>
	shell->ctx->state = state;
    7d92:	68a3      	ldr	r3, [r4, #8]
    7d94:	2201      	movs	r2, #1
    7d96:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    7d98:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7d9c:	2200      	movs	r2, #0
    7d9e:	2300      	movs	r3, #0
    7da0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7da4:	230e      	movs	r3, #14
    7da6:	9303      	str	r3, [sp, #12]
    7da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7daa:	9504      	str	r5, [sp, #16]
    7dac:	e9cd 7301 	strd	r7, r3, [sp, #4]
    7db0:	9400      	str	r4, [sp, #0]
    7db2:	4b0b      	ldr	r3, [pc, #44]	; (7de0 <shell_init+0xec>)
    7db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7db8:	f01b fcec 	bl	23794 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    7dbc:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    7dbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    7dc0:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    7dc4:	f01b fc34 	bl	23630 <z_impl_k_thread_name_set>
}
    7dc8:	4628      	mov	r0, r5
    7dca:	b009      	add	sp, #36	; 0x24
    7dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    7dd0:	f06f 0577 	mvn.w	r5, #119	; 0x77
    7dd4:	e7f8      	b.n	7dc8 <shell_init+0xd4>
    7dd6:	bf00      	nop
    7dd8:	00500018 	.word	0x00500018
    7ddc:	00025e7b 	.word	0x00025e7b
    7de0:	00007e31 	.word	0x00007e31

00007de4 <shell_start>:
{
    7de4:	b510      	push	{r4, lr}
    7de6:	4604      	mov	r4, r0
	return shell->ctx->state;
    7de8:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    7dea:	7903      	ldrb	r3, [r0, #4]
    7dec:	2b01      	cmp	r3, #1
    7dee:	d119      	bne.n	7e24 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    7df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7df8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    7dfc:	f01e f83b 	bl	25e76 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    7e00:	2108      	movs	r1, #8
    7e02:	4620      	mov	r0, r4
    7e04:	f000 f91e 	bl	8044 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    7e08:	4908      	ldr	r1, [pc, #32]	; (7e2c <shell_start+0x48>)
    7e0a:	6960      	ldr	r0, [r4, #20]
    7e0c:	f01e f826 	bl	25e5c <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    7e10:	4620      	mov	r0, r4
    7e12:	f7ff fc05 	bl	7620 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    7e16:	68a0      	ldr	r0, [r4, #8]
    7e18:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    7e1c:	f01e f878 	bl	25f10 <k_mutex_unlock.isra.0>
	return 0;
    7e20:	2000      	movs	r0, #0
}
    7e22:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    7e24:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7e28:	e7fb      	b.n	7e22 <shell_start+0x3e>
    7e2a:	bf00      	nop
    7e2c:	0002eae2 	.word	0x0002eae2

00007e30 <shell_thread>:
{
    7e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e34:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    7e36:	6840      	ldr	r0, [r0, #4]
    7e38:	6803      	ldr	r3, [r0, #0]
{
    7e3a:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    7e3c:	689b      	ldr	r3, [r3, #8]
    7e3e:	2100      	movs	r1, #0
{
    7e40:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    7e42:	4798      	blx	r3
	if (err != 0) {
    7e44:	2800      	cmp	r0, #0
    7e46:	d14c      	bne.n	7ee2 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    7e48:	b126      	cbz	r6, 7e54 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    7e4a:	69e0      	ldr	r0, [r4, #28]
    7e4c:	462a      	mov	r2, r5
    7e4e:	4621      	mov	r1, r4
    7e50:	f01e fd80 	bl	26954 <z_shell_log_backend_enable>
	err = shell_start(shell);
    7e54:	4620      	mov	r0, r4
    7e56:	f7ff ffc5 	bl	7de4 <shell_start>
	if (err != 0) {
    7e5a:	2800      	cmp	r0, #0
    7e5c:	d141      	bne.n	7ee2 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    7e5e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 7ee8 <shell_thread+0xb8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    7e62:	4f22      	ldr	r7, [pc, #136]	; (7eec <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    7e64:	4e22      	ldr	r6, [pc, #136]	; (7ef0 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    7e66:	68a0      	ldr	r0, [r4, #8]
    7e68:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    7e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e74:	2103      	movs	r1, #3
    7e76:	f01c fdaf 	bl	249d8 <z_impl_k_poll>
		if (err != 0) {
    7e7a:	4605      	mov	r5, r0
    7e7c:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    7e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e86:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    7e8a:	b175      	cbz	r5, 7eaa <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    7e8c:	f01d fff3 	bl	25e76 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    7e90:	4620      	mov	r0, r4
    7e92:	462b      	mov	r3, r5
    7e94:	4a17      	ldr	r2, [pc, #92]	; (7ef4 <shell_thread+0xc4>)
    7e96:	2101      	movs	r1, #1
    7e98:	f01e fc2d 	bl	266f6 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    7e9c:	68a0      	ldr	r0, [r4, #8]
}
    7e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    7ea2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    7ea6:	f01e b833 	b.w	25f10 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    7eaa:	f01d ffe4 	bl	25e76 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    7eae:	6860      	ldr	r0, [r4, #4]
    7eb0:	6803      	ldr	r3, [r0, #0]
    7eb2:	695b      	ldr	r3, [r3, #20]
    7eb4:	b103      	cbz	r3, 7eb8 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
    7eb6:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    7eb8:	4642      	mov	r2, r8
    7eba:	4620      	mov	r0, r4
    7ebc:	2102      	movs	r1, #2
    7ebe:	f01d ffb1 	bl	25e24 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    7ec2:	463a      	mov	r2, r7
    7ec4:	4620      	mov	r0, r4
    7ec6:	2100      	movs	r1, #0
    7ec8:	f01d ffac 	bl	25e24 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    7ecc:	4620      	mov	r0, r4
    7ece:	4632      	mov	r2, r6
    7ed0:	2101      	movs	r1, #1
    7ed2:	f01d ffa7 	bl	25e24 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    7ed6:	68a0      	ldr	r0, [r4, #8]
    7ed8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    7edc:	f01e f818 	bl	25f10 <k_mutex_unlock.isra.0>
    7ee0:	e7c1      	b.n	7e66 <shell_thread+0x36>
}
    7ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ee6:	bf00      	nop
    7ee8:	00025e8f 	.word	0x00025e8f
    7eec:	00007669 	.word	0x00007669
    7ef0:	00025f15 	.word	0x00025f15
    7ef4:	0002ef6f 	.word	0x0002ef6f

00007ef8 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    7ef8:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    7efa:	4a0d      	ldr	r2, [pc, #52]	; (7f30 <cmd_help+0x38>)
{
    7efc:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    7efe:	2108      	movs	r1, #8
    7f00:	f01e f869 	bl	25fd6 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    7f04:	4620      	mov	r0, r4
    7f06:	4a0b      	ldr	r2, [pc, #44]	; (7f34 <cmd_help+0x3c>)
    7f08:	2108      	movs	r1, #8
    7f0a:	f01e f864 	bl	25fd6 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    7f0e:	4620      	mov	r0, r4
    7f10:	4a09      	ldr	r2, [pc, #36]	; (7f38 <cmd_help+0x40>)
    7f12:	2108      	movs	r1, #8
    7f14:	f01e f85f 	bl	25fd6 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    7f18:	4620      	mov	r0, r4
    7f1a:	4a08      	ldr	r2, [pc, #32]	; (7f3c <cmd_help+0x44>)
    7f1c:	2108      	movs	r1, #8
    7f1e:	f01e f85a 	bl	25fd6 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    7f22:	4620      	mov	r0, r4
    7f24:	4a06      	ldr	r2, [pc, #24]	; (7f40 <cmd_help+0x48>)
    7f26:	2100      	movs	r1, #0
    7f28:	f000 f9b4 	bl	8294 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    7f2c:	2000      	movs	r0, #0
    7f2e:	bd10      	pop	{r4, pc}
    7f30:	0002ef86 	.word	0x0002ef86
    7f34:	0002efc4 	.word	0x0002efc4
    7f38:	0002f023 	.word	0x0002f023
    7f3c:	0002f077 	.word	0x0002f077
    7f40:	0002f111 	.word	0x0002f111

00007f44 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    7f44:	b510      	push	{r4, lr}
    7f46:	4604      	mov	r4, r0
    7f48:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    7f4a:	460a      	mov	r2, r1
    7f4c:	4601      	mov	r1, r0
    7f4e:	4806      	ldr	r0, [pc, #24]	; (7f68 <z_shell_fprintf_fmt+0x24>)
    7f50:	f7fc ffbe 	bl	4ed0 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    7f54:	6923      	ldr	r3, [r4, #16]
    7f56:	791b      	ldrb	r3, [r3, #4]
    7f58:	b123      	cbz	r3, 7f64 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    7f5a:	4620      	mov	r0, r4
	}
}
    7f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    7f60:	f01e b849 	b.w	25ff6 <z_shell_fprintf_buffer_flush>
}
    7f64:	bd10      	pop	{r4, pc}
    7f66:	bf00      	nop
    7f68:	0002600f 	.word	0x0002600f

00007f6c <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    7f6c:	b510      	push	{r4, lr}
    7f6e:	460b      	mov	r3, r1
    7f70:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    7f72:	b950      	cbnz	r0, 7f8a <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    7f74:	490e      	ldr	r1, [pc, #56]	; (7fb0 <z_shell_cmd_get+0x44>)
    7f76:	4a0f      	ldr	r2, [pc, #60]	; (7fb4 <z_shell_cmd_get+0x48>)
    7f78:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    7f7a:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    7f7e:	d20f      	bcs.n	7fa0 <z_shell_cmd_get+0x34>
    7f80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    7f84:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    7f86:	4620      	mov	r0, r4
    7f88:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    7f8a:	6881      	ldr	r1, [r0, #8]
    7f8c:	b141      	cbz	r1, 7fa0 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    7f8e:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    7f90:	7809      	ldrb	r1, [r1, #0]
    7f92:	b139      	cbz	r1, 7fa4 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    7f94:	4618      	mov	r0, r3
    7f96:	4621      	mov	r1, r4
    7f98:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    7f9a:	6823      	ldr	r3, [r4, #0]
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	d1f2      	bne.n	7f86 <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    7fa0:	2400      	movs	r4, #0
    7fa2:	e7f0      	b.n	7f86 <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    7fa4:	2014      	movs	r0, #20
    7fa6:	4343      	muls	r3, r0
    7fa8:	18d4      	adds	r4, r2, r3
    7faa:	58d3      	ldr	r3, [r2, r3]
    7fac:	e7f6      	b.n	7f9c <z_shell_cmd_get+0x30>
    7fae:	bf00      	nop
    7fb0:	0002c3ec 	.word	0x0002c3ec
    7fb4:	0002c444 	.word	0x0002c444

00007fb8 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    7fb8:	6883      	ldr	r3, [r0, #8]
    7fba:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    7fbe:	069b      	lsls	r3, r3, #26
    7fc0:	d503      	bpl.n	7fca <z_clear_eos+0x12>
    7fc2:	4902      	ldr	r1, [pc, #8]	; (7fcc <z_clear_eos+0x14>)
    7fc4:	6940      	ldr	r0, [r0, #20]
    7fc6:	f01e ba1c 	b.w	26402 <z_shell_raw_fprintf>
}
    7fca:	4770      	bx	lr
    7fcc:	0002c4fb 	.word	0x0002c4fb

00007fd0 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    7fd0:	4901      	ldr	r1, [pc, #4]	; (7fd8 <z_cursor_next_line_move.isra.0+0x8>)
    7fd2:	f01e ba16 	b.w	26402 <z_shell_raw_fprintf>
    7fd6:	bf00      	nop
    7fd8:	0002eae3 	.word	0x0002eae3

00007fdc <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    7fdc:	1e0a      	subs	r2, r1, #0
    7fde:	dc0d      	bgt.n	7ffc <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    7fe0:	d00e      	beq.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	char dir = delta > 0 ? 'A' : 'B';
    7fe2:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    7fe4:	6881      	ldr	r1, [r0, #8]
    7fe6:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    7fea:	0689      	lsls	r1, r1, #26
    7fec:	d508      	bpl.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    7fee:	2a00      	cmp	r2, #0
    7ff0:	4904      	ldr	r1, [pc, #16]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7ff2:	6940      	ldr	r0, [r0, #20]
    7ff4:	bfb8      	it	lt
    7ff6:	4252      	neglt	r2, r2
    7ff8:	f01e ba03 	b.w	26402 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    7ffc:	2341      	movs	r3, #65	; 0x41
    7ffe:	e7f1      	b.n	7fe4 <z_shell_op_cursor_vert_move+0x8>
}
    8000:	4770      	bx	lr
    8002:	bf00      	nop
    8004:	0002f140 	.word	0x0002f140

00008008 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    8008:	1e0a      	subs	r2, r1, #0
    800a:	dc0d      	bgt.n	8028 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    800c:	d00e      	beq.n	802c <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    800e:	2344      	movs	r3, #68	; 0x44
    8010:	6881      	ldr	r1, [r0, #8]
    8012:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    8016:	0689      	lsls	r1, r1, #26
    8018:	d508      	bpl.n	802c <z_shell_op_cursor_horiz_move+0x24>
    801a:	2a00      	cmp	r2, #0
    801c:	4904      	ldr	r1, [pc, #16]	; (8030 <z_shell_op_cursor_horiz_move+0x28>)
    801e:	6940      	ldr	r0, [r0, #20]
    8020:	bfb8      	it	lt
    8022:	4252      	neglt	r2, r2
    8024:	f01e b9ed 	b.w	26402 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    8028:	2343      	movs	r3, #67	; 0x43
    802a:	e7f1      	b.n	8010 <z_shell_op_cursor_horiz_move+0x8>
}
    802c:	4770      	bx	lr
    802e:	bf00      	nop
    8030:	0002f140 	.word	0x0002f140

00008034 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    8034:	6882      	ldr	r2, [r0, #8]
    8036:	4902      	ldr	r1, [pc, #8]	; (8040 <z_shell_print_cmd+0xc>)
    8038:	6940      	ldr	r0, [r0, #20]
    803a:	3242      	adds	r2, #66	; 0x42
    803c:	f01e b9e1 	b.w	26402 <z_shell_raw_fprintf>
    8040:	0002ec02 	.word	0x0002ec02

00008044 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    8044:	2908      	cmp	r1, #8
{
    8046:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    8048:	d816      	bhi.n	8078 <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    804a:	6883      	ldr	r3, [r0, #8]
    804c:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    8050:	4291      	cmp	r1, r2
    8052:	d011      	beq.n	8078 <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    8054:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    8056:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    805a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    805e:	d005      	beq.n	806c <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    8060:	0699      	lsls	r1, r3, #26
    8062:	d509      	bpl.n	8078 <z_shell_vt100_color_set+0x34>
    8064:	4905      	ldr	r1, [pc, #20]	; (807c <z_shell_vt100_color_set+0x38>)
    8066:	6940      	ldr	r0, [r0, #20]
    8068:	f01e b9cb 	b.w	26402 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    806c:	069b      	lsls	r3, r3, #26
    806e:	d503      	bpl.n	8078 <z_shell_vt100_color_set+0x34>
    8070:	4903      	ldr	r1, [pc, #12]	; (8080 <z_shell_vt100_color_set+0x3c>)
    8072:	6940      	ldr	r0, [r0, #20]
    8074:	f01e b9c5 	b.w	26402 <z_shell_raw_fprintf>
	}
}
    8078:	4770      	bx	lr
    807a:	bf00      	nop
    807c:	0002f147 	.word	0x0002f147
    8080:	0002c500 	.word	0x0002c500

00008084 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    8084:	b538      	push	{r3, r4, r5, lr}
    8086:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    8088:	7809      	ldrb	r1, [r1, #0]
{
    808a:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    808c:	f7ff ffda 	bl	8044 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    8090:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    8092:	2a07      	cmp	r2, #7
    8094:	d810      	bhi.n	80b8 <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    8096:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    8098:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    809c:	4291      	cmp	r1, r2
    809e:	d00b      	beq.n	80b8 <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    80a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    80a4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    80a8:	069b      	lsls	r3, r3, #26
    80aa:	d505      	bpl.n	80b8 <z_shell_vt100_colors_restore+0x34>
    80ac:	6960      	ldr	r0, [r4, #20]
    80ae:	4903      	ldr	r1, [pc, #12]	; (80bc <z_shell_vt100_colors_restore+0x38>)
}
    80b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    80b4:	f01e b9a5 	b.w	26402 <z_shell_raw_fprintf>
}
    80b8:	bd38      	pop	{r3, r4, r5, pc}
    80ba:	bf00      	nop
    80bc:	0002f150 	.word	0x0002f150

000080c0 <z_shell_op_word_remove>:
{
    80c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    80c2:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    80c4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    80c6:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    80c8:	2a00      	cmp	r2, #0
    80ca:	d04e      	beq.n	816a <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    80cc:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    80ce:	2800      	cmp	r0, #0
    80d0:	d04b      	beq.n	816a <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    80d2:	3041      	adds	r0, #65	; 0x41
    80d4:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    80d6:	f103 0642 	add.w	r6, r3, #66	; 0x42
    80da:	4603      	mov	r3, r0
    80dc:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    80de:	42b3      	cmp	r3, r6
    80e0:	b2a4      	uxth	r4, r4
    80e2:	4619      	mov	r1, r3
    80e4:	d30d      	bcc.n	8102 <z_shell_op_word_remove+0x42>
    80e6:	f811 7901 	ldrb.w	r7, [r1], #-1
    80ea:	2f20      	cmp	r7, #32
    80ec:	d03b      	beq.n	8166 <z_shell_op_word_remove+0xa6>
    80ee:	4619      	mov	r1, r3
    80f0:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    80f2:	7808      	ldrb	r0, [r1, #0]
    80f4:	2820      	cmp	r0, #32
    80f6:	d004      	beq.n	8102 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    80f8:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    80fa:	429e      	cmp	r6, r3
		++chars_to_delete;
    80fc:	b2a4      	uxth	r4, r4
		--str;
    80fe:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    8100:	d9f5      	bls.n	80ee <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    8102:	1c63      	adds	r3, r4, #1
    8104:	1c4e      	adds	r6, r1, #1
    8106:	1b12      	subs	r2, r2, r4
    8108:	4419      	add	r1, r3
    810a:	4630      	mov	r0, r6
    810c:	f020 fa3b 	bl	28586 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    8110:	68a9      	ldr	r1, [r5, #8]
    8112:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    8114:	1b12      	subs	r2, r2, r4
    8116:	b292      	uxth	r2, r2
    8118:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    811a:	440a      	add	r2, r1
    811c:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    811e:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    8120:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    8124:	b209      	sxth	r1, r1
    8126:	4628      	mov	r0, r5
    8128:	f01e f9d3 	bl	264d2 <z_shell_op_cursor_move>
    812c:	68ab      	ldr	r3, [r5, #8]
    812e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    8132:	069a      	lsls	r2, r3, #26
    8134:	d503      	bpl.n	813e <z_shell_op_word_remove+0x7e>
    8136:	490d      	ldr	r1, [pc, #52]	; (816c <z_shell_op_word_remove+0xac>)
    8138:	6968      	ldr	r0, [r5, #20]
    813a:	f01e f962 	bl	26402 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    813e:	4633      	mov	r3, r6
    8140:	4a0b      	ldr	r2, [pc, #44]	; (8170 <z_shell_op_word_remove+0xb0>)
    8142:	2108      	movs	r1, #8
    8144:	4628      	mov	r0, r5
    8146:	f01e fad6 	bl	266f6 <z_shell_fprintf>
	z_clear_eos(shell);
    814a:	4628      	mov	r0, r5
    814c:	f7ff ff34 	bl	7fb8 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    8150:	68ab      	ldr	r3, [r5, #8]
    8152:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    8156:	069b      	lsls	r3, r3, #26
    8158:	d507      	bpl.n	816a <z_shell_op_word_remove+0xaa>
    815a:	6968      	ldr	r0, [r5, #20]
    815c:	4905      	ldr	r1, [pc, #20]	; (8174 <z_shell_op_word_remove+0xb4>)
}
    815e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8162:	f01e b94e 	b.w	26402 <z_shell_raw_fprintf>
    8166:	460b      	mov	r3, r1
    8168:	e7b8      	b.n	80dc <z_shell_op_word_remove+0x1c>
    816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    816c:	0002c505 	.word	0x0002c505
    8170:	0002ec02 	.word	0x0002ec02
    8174:	0002c509 	.word	0x0002c509

00008178 <reprint_from_cursor>:
{
    8178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    817c:	4604      	mov	r4, r0
    817e:	460d      	mov	r5, r1
	if (data_removed) {
    8180:	4617      	mov	r7, r2
    8182:	b10a      	cbz	r2, 8188 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    8184:	f7ff ff18 	bl	7fb8 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    8188:	68a3      	ldr	r3, [r4, #8]
    818a:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    818e:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    8190:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    8192:	f100 0042 	add.w	r0, r0, #66	; 0x42
    8196:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    8198:	d51f      	bpl.n	81da <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    819a:	4618      	mov	r0, r3
    819c:	f020 f9b5 	bl	2850a <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    81a0:	f8df 8044 	ldr.w	r8, [pc, #68]	; 81e8 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    81a4:	4606      	mov	r6, r0
		while (len--) {
    81a6:	b996      	cbnz	r6, 81ce <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    81a8:	68a3      	ldr	r3, [r4, #8]
    81aa:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    81ac:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    81ae:	4620      	mov	r0, r4
    81b0:	f01e f934 	bl	2641c <full_line_cmd>
    81b4:	b120      	cbz	r0, 81c0 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    81b6:	b107      	cbz	r7, 81ba <reprint_from_cursor+0x42>
    81b8:	b115      	cbz	r5, 81c0 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    81ba:	6960      	ldr	r0, [r4, #20]
    81bc:	f7ff ff08 	bl	7fd0 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    81c0:	4269      	negs	r1, r5
    81c2:	4620      	mov	r0, r4
    81c4:	b209      	sxth	r1, r1
}
    81c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    81ca:	f01e b982 	b.w	264d2 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    81ce:	6960      	ldr	r0, [r4, #20]
    81d0:	4641      	mov	r1, r8
    81d2:	f01e f916 	bl	26402 <z_shell_raw_fprintf>
    81d6:	3e01      	subs	r6, #1
    81d8:	e7e5      	b.n	81a6 <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    81da:	4a04      	ldr	r2, [pc, #16]	; (81ec <reprint_from_cursor+0x74>)
    81dc:	2108      	movs	r1, #8
    81de:	4620      	mov	r0, r4
    81e0:	f01e fa89 	bl	266f6 <z_shell_fprintf>
    81e4:	e7e0      	b.n	81a8 <reprint_from_cursor+0x30>
    81e6:	bf00      	nop
    81e8:	0002fea8 	.word	0x0002fea8
    81ec:	0002ec02 	.word	0x0002ec02

000081f0 <z_shell_op_char_insert>:
{
    81f0:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    81f2:	6883      	ldr	r3, [r0, #8]
    81f4:	f88d 1007 	strb.w	r1, [sp, #7]
    81f8:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    81fc:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    81fe:	07d0      	lsls	r0, r2, #31
    8200:	d521      	bpl.n	8246 <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    8202:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    8204:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    8206:	428a      	cmp	r2, r1
    8208:	d01d      	beq.n	8246 <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    820a:	1c48      	adds	r0, r1, #1
    820c:	4419      	add	r1, r3
		char_replace(shell, data);
    820e:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    8212:	87d8      	strh	r0, [r3, #62]	; 0x3e
    8214:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    8218:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    821c:	0789      	lsls	r1, r1, #30
    821e:	d510      	bpl.n	8242 <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    8220:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    8224:	6960      	ldr	r0, [r4, #20]
    8226:	490b      	ldr	r1, [pc, #44]	; (8254 <z_shell_op_char_insert+0x64>)
		data = '*';
    8228:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    822c:	bf18      	it	ne
    822e:	222a      	movne	r2, #42	; 0x2a
    8230:	f01e f8e7 	bl	26402 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    8234:	4620      	mov	r0, r4
    8236:	f01e f905 	bl	26444 <z_shell_cursor_in_empty_line>
    823a:	b110      	cbz	r0, 8242 <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    823c:	6960      	ldr	r0, [r4, #20]
    823e:	f7ff fec7 	bl	7fd0 <z_cursor_next_line_move.isra.0>
}
    8242:	b002      	add	sp, #8
    8244:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    8246:	2201      	movs	r2, #1
    8248:	f10d 0107 	add.w	r1, sp, #7
    824c:	4620      	mov	r0, r4
    824e:	f01e fa5f 	bl	26710 <data_insert>
}
    8252:	e7f6      	b.n	8242 <z_shell_op_char_insert+0x52>
    8254:	0002f144 	.word	0x0002f144

00008258 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    8258:	6883      	ldr	r3, [r0, #8]
    825a:	4a0a      	ldr	r2, [pc, #40]	; (8284 <z_shell_print_prompt_and_cmd+0x2c>)
    825c:	681b      	ldr	r3, [r3, #0]
{
    825e:	b510      	push	{r4, lr}
    8260:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    8262:	2102      	movs	r1, #2
    8264:	f01e fa47 	bl	266f6 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    8268:	68a3      	ldr	r3, [r4, #8]
    826a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    826e:	079b      	lsls	r3, r3, #30
    8270:	d507      	bpl.n	8282 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    8272:	4620      	mov	r0, r4
    8274:	f7ff fede 	bl	8034 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    8278:	4620      	mov	r0, r4
}
    827a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    827e:	f01e b905 	b.w	2648c <z_shell_op_cursor_position_synchronize>
}
    8282:	bd10      	pop	{r4, pc}
    8284:	0002ec02 	.word	0x0002ec02

00008288 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    8288:	4901      	ldr	r1, [pc, #4]	; (8290 <z_cursor_next_line_move.isra.0+0x8>)
    828a:	f01e bbeb 	b.w	26a64 <z_shell_raw_fprintf>
    828e:	bf00      	nop
    8290:	0002eae3 	.word	0x0002eae3

00008294 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    8294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8298:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    829a:	2100      	movs	r1, #0
{
    829c:	b08d      	sub	sp, #52	; 0x34
    829e:	4604      	mov	r4, r0
    82a0:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    82a2:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    82a4:	aa07      	add	r2, sp, #28
    82a6:	4630      	mov	r0, r6
    82a8:	f101 0801 	add.w	r8, r1, #1
    82ac:	f7ff fe5e 	bl	7f6c <z_shell_cmd_get>
    82b0:	b9a0      	cbnz	r0, 82dc <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    82b2:	b185      	cbz	r5, 82d6 <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    82b4:	b127      	cbz	r7, 82c0 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    82b6:	463a      	mov	r2, r7
    82b8:	2108      	movs	r1, #8
    82ba:	4620      	mov	r0, r4
    82bc:	f01e fa1b 	bl	266f6 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    82c0:	4f1e      	ldr	r7, [pc, #120]	; (833c <z_shell_help_subcmd_print+0xa8>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    82c2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8340 <z_shell_help_subcmd_print+0xac>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    82c6:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    82c8:	aa07      	add	r2, sp, #28
    82ca:	4630      	mov	r0, r6
    82cc:	f101 0801 	add.w	r8, r1, #1
    82d0:	f7ff fe4c 	bl	7f6c <z_shell_cmd_get>
    82d4:	b960      	cbnz	r0, 82f0 <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    82d6:	b00d      	add	sp, #52	; 0x34
    82d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    82dc:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    82de:	b110      	cbz	r0, 82e6 <z_shell_help_subcmd_print+0x52>
    82e0:	f020 f913 	bl	2850a <strlen>
    82e4:	b280      	uxth	r0, r0
    82e6:	4285      	cmp	r5, r0
    82e8:	bf38      	it	cc
    82ea:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    82ec:	4641      	mov	r1, r8
    82ee:	e7d9      	b.n	82a4 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    82f0:	6803      	ldr	r3, [r0, #0]
    82f2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    82f6:	4811      	ldr	r0, [pc, #68]	; (833c <z_shell_help_subcmd_print+0xa8>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    82f8:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    82fa:	f020 f906 	bl	2850a <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    82fe:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    8300:	4683      	mov	fp, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    8302:	b183      	cbz	r3, 8326 <z_shell_help_subcmd_print+0x92>
    8304:	781a      	ldrb	r2, [r3, #0]
    8306:	b172      	cbz	r2, 8326 <z_shell_help_subcmd_print+0x92>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    8308:	e9cd 3701 	strd	r3, r7, [sp, #4]
    830c:	9500      	str	r5, [sp, #0]
    830e:	463b      	mov	r3, r7
    8310:	464a      	mov	r2, r9
    8312:	2108      	movs	r1, #8
    8314:	4620      	mov	r0, r4
    8316:	f01e f9ee 	bl	266f6 <z_shell_fprintf>
	if (item_help == NULL) {
    831a:	f1ba 0f00 	cmp.w	sl, #0
    831e:	d104      	bne.n	832a <z_shell_help_subcmd_print+0x96>
		z_cursor_next_line_move(shell);
    8320:	6960      	ldr	r0, [r4, #20]
    8322:	f7ff ffb1 	bl	8288 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    8326:	4641      	mov	r1, r8
    8328:	e7ce      	b.n	82c8 <z_shell_help_subcmd_print+0x34>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    832a:	1c6a      	adds	r2, r5, #1
    832c:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    8330:	b292      	uxth	r2, r2
    8332:	4651      	mov	r1, sl
    8334:	4620      	mov	r0, r4
    8336:	f01e fba2 	bl	26a7e <formatted_text_print.constprop.0>
    833a:	e7f4      	b.n	8326 <z_shell_help_subcmd_print+0x92>
    833c:	0002f171 	.word	0x0002f171
    8340:	0002f159 	.word	0x0002f159

00008344 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    8344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8346:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    8348:	6808      	ldr	r0, [r1, #0]
{
    834a:	460d      	mov	r5, r1
    834c:	b1b8      	cbz	r0, 837e <z_shell_help_cmd_print+0x3a>
    834e:	f020 f8dc 	bl	2850a <strlen>
    8352:	b284      	uxth	r4, r0
    8354:	4f0b      	ldr	r7, [pc, #44]	; (8384 <z_shell_help_cmd_print+0x40>)
    8356:	4638      	mov	r0, r7
    8358:	f020 f8d7 	bl	2850a <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    835c:	682b      	ldr	r3, [r5, #0]
    835e:	4a0a      	ldr	r2, [pc, #40]	; (8388 <z_shell_help_cmd_print+0x44>)
    8360:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    8362:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    8364:	2108      	movs	r1, #8
    8366:	4630      	mov	r0, r6
    8368:	f01e f9c5 	bl	266f6 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    836c:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    836e:	6869      	ldr	r1, [r5, #4]
    8370:	4622      	mov	r2, r4
    8372:	4630      	mov	r0, r6
}
    8374:	b003      	add	sp, #12
    8376:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    837a:	f01e bb80 	b.w	26a7e <formatted_text_print.constprop.0>
    837e:	4604      	mov	r4, r0
    8380:	e7e8      	b.n	8354 <z_shell_help_cmd_print+0x10>
    8382:	bf00      	nop
    8384:	0002f16d 	.word	0x0002f16d
    8388:	0002ef6a 	.word	0x0002ef6a

0000838c <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    838c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    838e:	4907      	ldr	r1, [pc, #28]	; (83ac <z_shell_help_request+0x20>)
{
    8390:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    8392:	f020 f8ca 	bl	2852a <strcmp>
    8396:	b138      	cbz	r0, 83a8 <z_shell_help_request+0x1c>
    8398:	4905      	ldr	r1, [pc, #20]	; (83b0 <z_shell_help_request+0x24>)
    839a:	4620      	mov	r0, r4
    839c:	f020 f8c5 	bl	2852a <strcmp>
    83a0:	fab0 f080 	clz	r0, r0
    83a4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    83a6:	bd10      	pop	{r4, pc}
		return true;
    83a8:	2001      	movs	r0, #1
    83aa:	e7fc      	b.n	83a6 <z_shell_help_request+0x1a>
    83ac:	0002f163 	.word	0x0002f163
    83b0:	0002f166 	.word	0x0002f166

000083b4 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    83b4:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    83b6:	6883      	ldr	r3, [r0, #8]
    83b8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    83bc:	069b      	lsls	r3, r3, #26
{
    83be:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    83c0:	d503      	bpl.n	83ca <cmd_resize_default+0x16>
    83c2:	4904      	ldr	r1, [pc, #16]	; (83d4 <cmd_resize_default+0x20>)
    83c4:	6940      	ldr	r0, [r0, #20]
    83c6:	f01e fbd1 	bl	26b6c <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    83ca:	68a3      	ldr	r3, [r4, #8]
    83cc:	4a02      	ldr	r2, [pc, #8]	; (83d8 <cmd_resize_default+0x24>)
    83ce:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    83d0:	2000      	movs	r0, #0
    83d2:	bd10      	pop	{r4, pc}
    83d4:	0002c50d 	.word	0x0002c50d
    83d8:	00500018 	.word	0x00500018

000083dc <cmd_shell_stats_show>:
{
    83dc:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    83de:	6983      	ldr	r3, [r0, #24]
    83e0:	4a03      	ldr	r2, [pc, #12]	; (83f0 <cmd_shell_stats_show+0x14>)
    83e2:	681b      	ldr	r3, [r3, #0]
    83e4:	2108      	movs	r1, #8
    83e6:	f01d fdf6 	bl	25fd6 <shell_fprintf>
}
    83ea:	2000      	movs	r0, #0
    83ec:	bd08      	pop	{r3, pc}
    83ee:	bf00      	nop
    83f0:	0002f174 	.word	0x0002f174

000083f4 <cmd_history>:
{
    83f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    83f6:	4e0f      	ldr	r6, [pc, #60]	; (8434 <cmd_history+0x40>)
{
    83f8:	4604      	mov	r4, r0
    83fa:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    83fc:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    83fe:	68e0      	ldr	r0, [r4, #12]
    8400:	f10d 030e 	add.w	r3, sp, #14
    8404:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    8408:	2101      	movs	r1, #1
    840a:	f01e fc37 	bl	26c7c <z_shell_history_get>
		if (len) {
    840e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    8412:	68a3      	ldr	r3, [r4, #8]
    8414:	b150      	cbz	r0, 842c <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    8416:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    841a:	9300      	str	r3, [sp, #0]
    841c:	4632      	mov	r2, r6
    841e:	462b      	mov	r3, r5
    8420:	2108      	movs	r1, #8
    8422:	4620      	mov	r0, r4
    8424:	f01d fdd7 	bl	25fd6 <shell_fprintf>
	while (1) {
    8428:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    842a:	e7e7      	b.n	83fc <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    842c:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    8430:	b004      	add	sp, #16
    8432:	bd70      	pop	{r4, r5, r6, pc}
    8434:	0002f184 	.word	0x0002f184

00008438 <cmd_echo>:
	if (argc == 2) {
    8438:	2902      	cmp	r1, #2
{
    843a:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    843c:	d10d      	bne.n	845a <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    843e:	6853      	ldr	r3, [r2, #4]
    8440:	9301      	str	r3, [sp, #4]
    8442:	4b0e      	ldr	r3, [pc, #56]	; (847c <cmd_echo+0x44>)
    8444:	9300      	str	r3, [sp, #0]
    8446:	6813      	ldr	r3, [r2, #0]
    8448:	4a0d      	ldr	r2, [pc, #52]	; (8480 <cmd_echo+0x48>)
    844a:	2101      	movs	r1, #1
    844c:	f01d fdc3 	bl	25fd6 <shell_fprintf>
    8450:	f06f 0015 	mvn.w	r0, #21
}
    8454:	b003      	add	sp, #12
    8456:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    845a:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    845c:	4a09      	ldr	r2, [pc, #36]	; (8484 <cmd_echo+0x4c>)
    845e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    8462:	f013 0f02 	tst.w	r3, #2
    8466:	f04f 0108 	mov.w	r1, #8
    846a:	4b07      	ldr	r3, [pc, #28]	; (8488 <cmd_echo+0x50>)
    846c:	bf18      	it	ne
    846e:	4613      	movne	r3, r2
    8470:	4a06      	ldr	r2, [pc, #24]	; (848c <cmd_echo+0x54>)
    8472:	f01d fdb0 	bl	25fd6 <shell_fprintf>
	return 0;
    8476:	2000      	movs	r0, #0
    8478:	e7ec      	b.n	8454 <cmd_echo+0x1c>
    847a:	bf00      	nop
    847c:	0002f19b 	.word	0x0002f19b
    8480:	0002f192 	.word	0x0002f192
    8484:	0002ebbf 	.word	0x0002ebbf
    8488:	0002f18e 	.word	0x0002f18e
    848c:	0002f1b0 	.word	0x0002f1b0

00008490 <cmd_clear>:
{
    8490:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    8492:	6883      	ldr	r3, [r0, #8]
    8494:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    8498:	069a      	lsls	r2, r3, #26
{
    849a:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    849c:	d503      	bpl.n	84a6 <cmd_clear+0x16>
    849e:	4907      	ldr	r1, [pc, #28]	; (84bc <cmd_clear+0x2c>)
    84a0:	6940      	ldr	r0, [r0, #20]
    84a2:	f01e fb63 	bl	26b6c <z_shell_raw_fprintf>
    84a6:	68a3      	ldr	r3, [r4, #8]
    84a8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    84ac:	069b      	lsls	r3, r3, #26
    84ae:	d503      	bpl.n	84b8 <cmd_clear+0x28>
    84b0:	4903      	ldr	r1, [pc, #12]	; (84c0 <cmd_clear+0x30>)
    84b2:	6960      	ldr	r0, [r4, #20]
    84b4:	f01e fb5a 	bl	26b6c <z_shell_raw_fprintf>
}
    84b8:	2000      	movs	r0, #0
    84ba:	bd10      	pop	{r4, pc}
    84bc:	0002c514 	.word	0x0002c514
    84c0:	0002c519 	.word	0x0002c519

000084c4 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    84c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    84c6:	2901      	cmp	r1, #1
{
    84c8:	b085      	sub	sp, #20
    84ca:	4604      	mov	r4, r0
	if (argc != 1) {
    84cc:	d00d      	beq.n	84ea <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    84ce:	6853      	ldr	r3, [r2, #4]
    84d0:	9301      	str	r3, [sp, #4]
    84d2:	4b59      	ldr	r3, [pc, #356]	; (8638 <cmd_resize+0x174>)
    84d4:	9300      	str	r3, [sp, #0]
    84d6:	6813      	ldr	r3, [r2, #0]
    84d8:	4a58      	ldr	r2, [pc, #352]	; (863c <cmd_resize+0x178>)
    84da:	2101      	movs	r1, #1
    84dc:	f01d fd7b 	bl	25fd6 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    84e0:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    84e4:	4628      	mov	r0, r5
    84e6:	b005      	add	sp, #20
    84e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84ea:	6883      	ldr	r3, [r0, #8]
    84ec:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    84f0:	069a      	lsls	r2, r3, #26
    84f2:	d503      	bpl.n	84fc <cmd_resize+0x38>
    84f4:	4952      	ldr	r1, [pc, #328]	; (8640 <cmd_resize+0x17c>)
    84f6:	6940      	ldr	r0, [r0, #20]
    84f8:	f01e fb38 	bl	26b6c <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    84fc:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    8500:	4620      	mov	r0, r4
    8502:	f7ff fd6b 	bl	7fdc <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    8506:	21fa      	movs	r1, #250	; 0xfa
    8508:	4620      	mov	r0, r4
    850a:	f7ff fd7d 	bl	8008 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    850e:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    8510:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    8512:	f44f 7280 	mov.w	r2, #256	; 0x100
    8516:	4629      	mov	r1, r5
    8518:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    851c:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    8520:	f020 f854 	bl	285cc <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    8524:	4947      	ldr	r1, [pc, #284]	; (8644 <cmd_resize+0x180>)
    8526:	6960      	ldr	r0, [r4, #20]
    8528:	f01e fb20 	bl	26b6c <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    852c:	6960      	ldr	r0, [r4, #20]
    852e:	f01d fd62 	bl	25ff6 <z_shell_fprintf_buffer_flush>
    8532:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    8536:	6860      	ldr	r0, [r4, #4]
    8538:	6803      	ldr	r3, [r0, #0]
    853a:	2201      	movs	r2, #1
    853c:	691f      	ldr	r7, [r3, #16]
    853e:	f10d 010b 	add.w	r1, sp, #11
    8542:	ab03      	add	r3, sp, #12
    8544:	47b8      	blx	r7
			if (cnt == 0) {
    8546:	9b03      	ldr	r3, [sp, #12]
    8548:	b953      	cbnz	r3, 8560 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    854a:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    854c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8550:	b2b6      	uxth	r6, r6
    8552:	f023 fb1a 	bl	2bb8a <z_impl_k_busy_wait>
    8556:	2e00      	cmp	r6, #0
    8558:	d1ed      	bne.n	8536 <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    855a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    855e:	e034      	b.n	85ca <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    8560:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    8564:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    8566:	2b1b      	cmp	r3, #27
    8568:	d05a      	beq.n	8620 <cmd_resize+0x15c>
    856a:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    856e:	2a1b      	cmp	r2, #27
    8570:	d1e1      	bne.n	8536 <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    8572:	2b52      	cmp	r3, #82	; 0x52
    8574:	d154      	bne.n	8620 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    8576:	440d      	add	r5, r1
    8578:	2300      	movs	r3, #0
    857a:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    857e:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    8582:	2a5b      	cmp	r2, #91	; 0x5b
    8584:	d154      	bne.n	8630 <cmd_resize+0x16c>
    8586:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    858a:	461f      	mov	r7, r3
				buff_idx = 2U;
    858c:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    858e:	f815 0b01 	ldrb.w	r0, [r5], #1
    8592:	4632      	mov	r2, r6
    8594:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    8596:	f106 0601 	add.w	r6, r6, #1
    859a:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    859c:	d12b      	bne.n	85f6 <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    859e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    85a2:	d0da      	beq.n	855a <cmd_resize+0x96>
    85a4:	f202 1243 	addw	r2, r2, #323	; 0x143
    85a8:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    85ac:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    85ae:	f812 5b01 	ldrb.w	r5, [r2], #1
    85b2:	bb55      	cbnz	r5, 860a <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    85b4:	2bfa      	cmp	r3, #250	; 0xfa
    85b6:	bf28      	it	cs
    85b8:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    85ba:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    85bc:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    85be:	463b      	mov	r3, r7
    85c0:	bf28      	it	cs
    85c2:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    85c4:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    85c8:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    85ca:	68a3      	ldr	r3, [r4, #8]
    85cc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    85d0:	069b      	lsls	r3, r3, #26
    85d2:	d503      	bpl.n	85dc <cmd_resize+0x118>
    85d4:	491c      	ldr	r1, [pc, #112]	; (8648 <cmd_resize+0x184>)
    85d6:	6960      	ldr	r0, [r4, #20]
    85d8:	f01e fac8 	bl	26b6c <z_shell_raw_fprintf>
	if (err != 0) {
    85dc:	2d00      	cmp	r5, #0
    85de:	d081      	beq.n	84e4 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    85e0:	68a3      	ldr	r3, [r4, #8]
    85e2:	4a1a      	ldr	r2, [pc, #104]	; (864c <cmd_resize+0x188>)
    85e4:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    85e6:	2103      	movs	r1, #3
    85e8:	4a19      	ldr	r2, [pc, #100]	; (8650 <cmd_resize+0x18c>)
    85ea:	4620      	mov	r0, r4
    85ec:	f01d fcf3 	bl	25fd6 <shell_fprintf>
    85f0:	f06f 0507 	mvn.w	r5, #7
    85f4:	e776      	b.n	84e4 <cmd_resize+0x20>
					*y = *y * 10U +
    85f6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    85fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    85fe:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    8600:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    8604:	b29f      	uxth	r7, r3
					if (buff_idx >=
    8606:	d1c2      	bne.n	858e <cmd_resize+0xca>
    8608:	e7a7      	b.n	855a <cmd_resize+0x96>
					*x = *x * 10U +
    860a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    860e:	3601      	adds	r6, #1
					*x = *x * 10U +
    8610:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    8614:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    8616:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    8618:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    861a:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    861c:	d9c7      	bls.n	85ae <cmd_resize+0xea>
    861e:	e79c      	b.n	855a <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    8620:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    8622:	3501      	adds	r5, #1
    8624:	b2ad      	uxth	r5, r5
    8626:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    8628:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    862c:	d983      	bls.n	8536 <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    862e:	2300      	movs	r3, #0
    8630:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    8634:	e791      	b.n	855a <cmd_resize+0x96>
    8636:	bf00      	nop
    8638:	0002f19b 	.word	0x0002f19b
    863c:	0002f192 	.word	0x0002f192
    8640:	0002c51f 	.word	0x0002c51f
    8644:	0002f5b9 	.word	0x0002f5b9
    8648:	0002c523 	.word	0x0002c523
    864c:	00500018 	.word	0x00500018
    8650:	0002f1c1 	.word	0x0002f1c1

00008654 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    8654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8658:	4607      	mov	r7, r0
    865a:	b089      	sub	sp, #36	; 0x24
    865c:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    865e:	4689      	mov	r9, r1
    8660:	b921      	cbnz	r1, 866c <z_shell_wildcard_process+0x18>
		return ret_val;
    8662:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    8664:	4620      	mov	r0, r4
    8666:	b009      	add	sp, #36	; 0x24
    8668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    866c:	4610      	mov	r0, r2
    866e:	f01e fbae 	bl	26dce <z_shell_has_wildcard>
    8672:	2800      	cmp	r0, #0
    8674:	d0f5      	beq.n	8662 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    8676:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    867a:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    867c:	2402      	movs	r4, #2
    867e:	e024      	b.n	86ca <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    8680:	465c      	mov	r4, fp
    8682:	e03c      	b.n	86fe <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    8684:	4629      	mov	r1, r5
    8686:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    868a:	f01f fef4 	bl	28476 <strstr>
	if (!completion_addr) {
    868e:	4606      	mov	r6, r0
    8690:	2800      	cmp	r0, #0
    8692:	d04c      	beq.n	872e <z_shell_wildcard_process+0xda>
    8694:	f01f ff39 	bl	2850a <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    8698:	b282      	uxth	r2, r0
    869a:	1c60      	adds	r0, r4, #1
    869c:	3201      	adds	r2, #1
    869e:	4631      	mov	r1, r6
    86a0:	4430      	add	r0, r6
    86a2:	f01f ff70 	bl	28586 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    86a6:	4622      	mov	r2, r4
    86a8:	4659      	mov	r1, fp
    86aa:	4630      	mov	r0, r6
    86ac:	f01f ff83 	bl	285b6 <memcpy>
	completion_addr[cmd_len] = ' ';
    86b0:	f04f 0320 	mov.w	r3, #32
    86b4:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    86b6:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    86ba:	3001      	adds	r0, #1
    86bc:	4404      	add	r4, r0
    86be:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    86c2:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    86c6:	2400      	movs	r4, #0
    86c8:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    86ca:	1c4b      	adds	r3, r1, #1
    86cc:	aa03      	add	r2, sp, #12
    86ce:	4648      	mov	r0, r9
    86d0:	9301      	str	r3, [sp, #4]
    86d2:	f7ff fc4b 	bl	7f6c <z_shell_cmd_get>
    86d6:	4606      	mov	r6, r0
    86d8:	b1e8      	cbz	r0, 8716 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    86da:	6831      	ldr	r1, [r6, #0]
    86dc:	2200      	movs	r2, #0
    86de:	4628      	mov	r0, r5
    86e0:	f01d f9ed 	bl	25abe <fnmatch>
    86e4:	2800      	cmp	r0, #0
    86e6:	d1ef      	bne.n	86c8 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    86e8:	f8d6 b000 	ldr.w	fp, [r6]
    86ec:	f8d7 a008 	ldr.w	sl, [r7, #8]
    86f0:	f1bb 0f00 	cmp.w	fp, #0
    86f4:	d0c4      	beq.n	8680 <z_shell_wildcard_process+0x2c>
    86f6:	4658      	mov	r0, fp
    86f8:	f01f ff07 	bl	2850a <strlen>
    86fc:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    86fe:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    8702:	4422      	add	r2, r4
    8704:	2aff      	cmp	r2, #255	; 0xff
    8706:	ddbd      	ble.n	8684 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    8708:	4a0a      	ldr	r2, [pc, #40]	; (8734 <z_shell_wildcard_process+0xe0>)
    870a:	462b      	mov	r3, r5
    870c:	2103      	movs	r1, #3
    870e:	4638      	mov	r0, r7
    8710:	f01d fff1 	bl	266f6 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    8714:	2401      	movs	r4, #1
	if (cnt > 0) {
    8716:	f1b8 0f00 	cmp.w	r8, #0
    871a:	d0a3      	beq.n	8664 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    871c:	68b8      	ldr	r0, [r7, #8]
    871e:	462a      	mov	r2, r5
    8720:	f100 0140 	add.w	r1, r0, #64	; 0x40
    8724:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    8728:	f01d fd91 	bl	2624e <z_shell_pattern_remove>
	return ret_val;
    872c:	e79a      	b.n	8664 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    872e:	2402      	movs	r4, #2
    8730:	e7f1      	b.n	8716 <z_shell_wildcard_process+0xc2>
    8732:	bf00      	nop
    8734:	0002f5be 	.word	0x0002f5be

00008738 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    8738:	4b0c      	ldr	r3, [pc, #48]	; (876c <class_handler+0x34>)
{
    873a:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    873c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    873e:	4e0c      	ldr	r6, [pc, #48]	; (8770 <class_handler+0x38>)
    8740:	4b0c      	ldr	r3, [pc, #48]	; (8774 <class_handler+0x3c>)
    8742:	42b3      	cmp	r3, r6
    8744:	d303      	bcc.n	874e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    8746:	f06f 0085 	mvn.w	r0, #133	; 0x85
    874a:	bcf0      	pop	{r4, r5, r6, r7}
    874c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    874e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    8750:	42bd      	cmp	r5, r7
    8752:	d309      	bcc.n	8768 <class_handler+0x30>
		if (iface->class_handler &&
    8754:	691c      	ldr	r4, [r3, #16]
    8756:	b13c      	cbz	r4, 8768 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    8758:	f895 c002 	ldrb.w	ip, [r5, #2]
    875c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    875e:	45ac      	cmp	ip, r5
    8760:	d102      	bne.n	8768 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    8762:	4623      	mov	r3, r4
}
    8764:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    8766:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    8768:	3324      	adds	r3, #36	; 0x24
    876a:	e7ea      	b.n	8742 <class_handler+0xa>
    876c:	200027fc 	.word	0x200027fc
    8770:	20000e1c 	.word	0x20000e1c
    8774:	20000df8 	.word	0x20000df8

00008778 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    8778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    877c:	4c13      	ldr	r4, [pc, #76]	; (87cc <custom_handler+0x54>)
    877e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 87d0 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    8782:	f8df 9050 	ldr.w	r9, [pc, #80]	; 87d4 <custom_handler+0x5c>
{
    8786:	4605      	mov	r5, r0
    8788:	460e      	mov	r6, r1
    878a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    878c:	4544      	cmp	r4, r8
    878e:	d303      	bcc.n	8798 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    8790:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    8798:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    879a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    879e:	429a      	cmp	r2, r3
    87a0:	d312      	bcc.n	87c8 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    87a2:	69a3      	ldr	r3, [r4, #24]
    87a4:	b183      	cbz	r3, 87c8 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    87a6:	7890      	ldrb	r0, [r2, #2]
    87a8:	7929      	ldrb	r1, [r5, #4]
    87aa:	4288      	cmp	r0, r1
    87ac:	d105      	bne.n	87ba <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    87ae:	463a      	mov	r2, r7
    87b0:	4631      	mov	r1, r6
    87b2:	4628      	mov	r0, r5
}
    87b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    87b8:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    87ba:	7952      	ldrb	r2, [r2, #5]
    87bc:	2a01      	cmp	r2, #1
    87be:	d103      	bne.n	87c8 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    87c0:	463a      	mov	r2, r7
    87c2:	4631      	mov	r1, r6
    87c4:	4628      	mov	r0, r5
    87c6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    87c8:	3424      	adds	r4, #36	; 0x24
    87ca:	e7df      	b.n	878c <custom_handler+0x14>
    87cc:	20000df8 	.word	0x20000df8
    87d0:	20000e1c 	.word	0x20000e1c
    87d4:	200027fc 	.word	0x200027fc

000087d8 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    87d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    87dc:	4c0b      	ldr	r4, [pc, #44]	; (880c <vendor_handler+0x34>)
    87de:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8810 <vendor_handler+0x38>
{
    87e2:	4605      	mov	r5, r0
    87e4:	460e      	mov	r6, r1
    87e6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    87e8:	4544      	cmp	r4, r8
    87ea:	d302      	bcc.n	87f2 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    87ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    87f0:	e009      	b.n	8806 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    87f2:	6963      	ldr	r3, [r4, #20]
    87f4:	b90b      	cbnz	r3, 87fa <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    87f6:	3424      	adds	r4, #36	; 0x24
    87f8:	e7f6      	b.n	87e8 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    87fa:	463a      	mov	r2, r7
    87fc:	4631      	mov	r1, r6
    87fe:	4628      	mov	r0, r5
    8800:	4798      	blx	r3
    8802:	2800      	cmp	r0, #0
    8804:	d1f7      	bne.n	87f6 <vendor_handler+0x1e>
}
    8806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    880a:	bf00      	nop
    880c:	20000df8 	.word	0x20000df8
    8810:	20000e1c 	.word	0x20000e1c

00008814 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    8814:	4802      	ldr	r0, [pc, #8]	; (8820 <usb_reset_alt_setting+0xc>)
    8816:	2208      	movs	r2, #8
    8818:	2100      	movs	r1, #0
    881a:	f01f bed7 	b.w	285cc <memset>
    881e:	bf00      	nop
    8820:	200028b7 	.word	0x200028b7

00008824 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    8824:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    8826:	4b0b      	ldr	r3, [pc, #44]	; (8854 <is_ep_valid.part.0+0x30>)
    8828:	4c0b      	ldr	r4, [pc, #44]	; (8858 <is_ep_valid.part.0+0x34>)
    882a:	42a3      	cmp	r3, r4
    882c:	d301      	bcc.n	8832 <is_ep_valid.part.0+0xe>
	return false;
    882e:	2000      	movs	r0, #0
}
    8830:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    8832:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    8834:	7f1e      	ldrb	r6, [r3, #28]
    8836:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    8838:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    883a:	b2d5      	uxtb	r5, r2
    883c:	42ae      	cmp	r6, r5
    883e:	d801      	bhi.n	8844 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    8840:	3324      	adds	r3, #36	; 0x24
    8842:	e7f2      	b.n	882a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    8844:	3201      	adds	r2, #1
    8846:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    884a:	4285      	cmp	r5, r0
    884c:	d1f5      	bne.n	883a <is_ep_valid.part.0+0x16>
				return true;
    884e:	2001      	movs	r0, #1
    8850:	e7ee      	b.n	8830 <is_ep_valid.part.0+0xc>
    8852:	bf00      	nop
    8854:	20000df8 	.word	0x20000df8
    8858:	20000e1c 	.word	0x20000e1c

0000885c <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    885c:	4809      	ldr	r0, [pc, #36]	; (8884 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    885e:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    8860:	7803      	ldrb	r3, [r0, #0]
    8862:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    8866:	330a      	adds	r3, #10
    8868:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    886c:	b13b      	cbz	r3, 887e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    886e:	f100 0208 	add.w	r2, r0, #8
    8872:	f100 0110 	add.w	r1, r0, #16
    8876:	4798      	blx	r3
    8878:	43c0      	mvns	r0, r0
    887a:	0fc0      	lsrs	r0, r0, #31
}
    887c:	bd08      	pop	{r3, pc}
		return false;
    887e:	4618      	mov	r0, r3
    8880:	e7fc      	b.n	887c <usb_handle_request.constprop.0+0x20>
    8882:	bf00      	nop
    8884:	200027fc 	.word	0x200027fc

00008888 <set_endpoint>:
{
    8888:	b500      	push	{lr}
    888a:	b08b      	sub	sp, #44	; 0x2c
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    888c:	7883      	ldrb	r3, [r0, #2]
    888e:	f88d 3008 	strb.w	r3, [sp, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    8892:	7903      	ldrb	r3, [r0, #4]
    8894:	7942      	ldrb	r2, [r0, #5]
    8896:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    889a:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    889e:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    88a0:	a802      	add	r0, sp, #8
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    88a2:	f003 0303 	and.w	r3, r3, #3
    88a6:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = usb_dc_ep_configure(&ep_cfg);
    88aa:	f017 f9e5 	bl	1fc78 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    88ae:	f110 0f78 	cmn.w	r0, #120	; 0x78
    88b2:	d12f      	bne.n	8914 <set_endpoint+0x8c>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    88b4:	4828      	ldr	r0, [pc, #160]	; (8958 <set_endpoint+0xd0>)
    88b6:	6803      	ldr	r3, [r0, #0]
    88b8:	f013 0f06 	tst.w	r3, #6
    88bc:	d00c      	beq.n	88d8 <set_endpoint+0x50>
    88be:	f89d 3008 	ldrb.w	r3, [sp, #8]
    88c2:	4a26      	ldr	r2, [pc, #152]	; (895c <set_endpoint+0xd4>)
    88c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    88c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    88cc:	2303      	movs	r3, #3
    88ce:	aa07      	add	r2, sp, #28
    88d0:	9301      	str	r3, [sp, #4]
    88d2:	9307      	str	r3, [sp, #28]
    88d4:	f01e fabf 	bl	26e56 <z_log_msg2_static_create.constprop.0>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    88d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    88dc:	f017 fa7c 	bl	1fdd8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    88e0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    88e4:	d12e      	bne.n	8944 <set_endpoint+0xbc>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    88e6:	481c      	ldr	r0, [pc, #112]	; (8958 <set_endpoint+0xd0>)
    88e8:	6803      	ldr	r3, [r0, #0]
    88ea:	f013 0f06 	tst.w	r3, #6
    88ee:	d00c      	beq.n	890a <set_endpoint+0x82>
    88f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    88f4:	4a1a      	ldr	r2, [pc, #104]	; (8960 <set_endpoint+0xd8>)
    88f6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    88fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    88fe:	2303      	movs	r3, #3
    8900:	aa07      	add	r2, sp, #28
    8902:	9301      	str	r3, [sp, #4]
    8904:	9307      	str	r3, [sp, #28]
    8906:	f01e faa6 	bl	26e56 <z_log_msg2_static_create.constprop.0>
	usb_dev.configured = true;
    890a:	4b16      	ldr	r3, [pc, #88]	; (8964 <set_endpoint+0xdc>)
    890c:	2001      	movs	r0, #1
    890e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    8912:	e006      	b.n	8922 <set_endpoint+0x9a>
	} else if (ret) {
    8914:	2800      	cmp	r0, #0
    8916:	d0df      	beq.n	88d8 <set_endpoint+0x50>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    8918:	480f      	ldr	r0, [pc, #60]	; (8958 <set_endpoint+0xd0>)
    891a:	6803      	ldr	r3, [r0, #0]
    891c:	075a      	lsls	r2, r3, #29
    891e:	d103      	bne.n	8928 <set_endpoint+0xa0>
		return false;
    8920:	2000      	movs	r0, #0
}
    8922:	b00b      	add	sp, #44	; 0x2c
    8924:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    8928:	f89d 3008 	ldrb.w	r3, [sp, #8]
    892c:	4a0e      	ldr	r2, [pc, #56]	; (8968 <set_endpoint+0xe0>)
    892e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    8932:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8936:	2303      	movs	r3, #3
    8938:	aa07      	add	r2, sp, #28
    893a:	9301      	str	r3, [sp, #4]
    893c:	9307      	str	r3, [sp, #28]
    893e:	f01e fa8a 	bl	26e56 <z_log_msg2_static_create.constprop.0>
    8942:	e7ed      	b.n	8920 <set_endpoint+0x98>
	} else if (ret) {
    8944:	2800      	cmp	r0, #0
    8946:	d0e0      	beq.n	890a <set_endpoint+0x82>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    8948:	4803      	ldr	r0, [pc, #12]	; (8958 <set_endpoint+0xd0>)
    894a:	6803      	ldr	r3, [r0, #0]
    894c:	075b      	lsls	r3, r3, #29
    894e:	d0e7      	beq.n	8920 <set_endpoint+0x98>
    8950:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8954:	4a05      	ldr	r2, [pc, #20]	; (896c <set_endpoint+0xe4>)
    8956:	e7ea      	b.n	892e <set_endpoint+0xa6>
    8958:	20000a50 	.word	0x20000a50
    895c:	0002f610 	.word	0x0002f610
    8960:	0002f657 	.word	0x0002f657
    8964:	200027fc 	.word	0x200027fc
    8968:	0002f633 	.word	0x0002f633
    896c:	0002f677 	.word	0x0002f677

00008970 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    8970:	2804      	cmp	r0, #4
{
    8972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8976:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8a00 <forward_status_cb+0x90>
    897a:	4604      	mov	r4, r0
    897c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    897e:	d10e      	bne.n	899e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    8980:	f7ff ff48 	bl	8814 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    8984:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8a04 <forward_status_cb+0x94>
    8988:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    898c:	b15b      	cbz	r3, 89a6 <forward_status_cb+0x36>
			usb_cancel_transfers();
    898e:	f000 ff4d 	bl	982c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    8992:	2c04      	cmp	r4, #4
    8994:	d001      	beq.n	899a <forward_status_cb+0x2a>
    8996:	2c01      	cmp	r4, #1
    8998:	d105      	bne.n	89a6 <forward_status_cb+0x36>
    899a:	4d1b      	ldr	r5, [pc, #108]	; (8a08 <forward_status_cb+0x98>)
    899c:	e016      	b.n	89cc <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    899e:	2805      	cmp	r0, #5
    89a0:	d0f0      	beq.n	8984 <forward_status_cb+0x14>
    89a2:	2801      	cmp	r0, #1
    89a4:	d0ee      	beq.n	8984 <forward_status_cb+0x14>
    89a6:	4d18      	ldr	r5, [pc, #96]	; (8a08 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    89a8:	4545      	cmp	r5, r8
    89aa:	d31e      	bcc.n	89ea <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    89ac:	4b15      	ldr	r3, [pc, #84]	; (8a04 <forward_status_cb+0x94>)
    89ae:	6a1b      	ldr	r3, [r3, #32]
    89b0:	b31b      	cbz	r3, 89fa <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    89b2:	4631      	mov	r1, r6
    89b4:	4620      	mov	r0, r4
}
    89b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    89ba:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    89bc:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    89c0:	2700      	movs	r7, #0
    89c2:	7f2a      	ldrb	r2, [r5, #28]
    89c4:	b2fb      	uxtb	r3, r7
    89c6:	429a      	cmp	r2, r3
    89c8:	d803      	bhi.n	89d2 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    89ca:	3524      	adds	r5, #36	; 0x24
    89cc:	4545      	cmp	r5, r8
    89ce:	d3f5      	bcc.n	89bc <forward_status_cb+0x4c>
    89d0:	e007      	b.n	89e2 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    89d2:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    89d6:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    89d8:	7918      	ldrb	r0, [r3, #4]
    89da:	f017 fa27 	bl	1fe2c <usb_dc_ep_disable>
			if (ret < 0) {
    89de:	2800      	cmp	r0, #0
    89e0:	daef      	bge.n	89c2 <forward_status_cb+0x52>
				usb_dev.configured = false;
    89e2:	2300      	movs	r3, #0
    89e4:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    89e8:	e7dd      	b.n	89a6 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    89ea:	68eb      	ldr	r3, [r5, #12]
    89ec:	b11b      	cbz	r3, 89f6 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    89ee:	4632      	mov	r2, r6
    89f0:	4621      	mov	r1, r4
    89f2:	4628      	mov	r0, r5
    89f4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    89f6:	3524      	adds	r5, #36	; 0x24
    89f8:	e7d6      	b.n	89a8 <forward_status_cb+0x38>
}
    89fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    89fe:	bf00      	nop
    8a00:	20000e1c 	.word	0x20000e1c
    8a04:	200027fc 	.word	0x200027fc
    8a08:	20000df8 	.word	0x20000df8

00008a0c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    8a0c:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    8a0e:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    8a10:	b088      	sub	sp, #32
	if (USB_EP_GET_IDX(ep) == 0) {
    8a12:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    8a14:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    8a16:	f88d 4003 	strb.w	r4, [sp, #3]
	if (USB_EP_GET_IDX(ep) == 0) {
    8a1a:	d007      	beq.n	8a2c <usb_halt_endpoint_req.isra.0+0x20>
    8a1c:	4620      	mov	r0, r4
    8a1e:	f7ff ff01 	bl	8824 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    8a22:	b318      	cbz	r0, 8a6c <usb_halt_endpoint_req.isra.0+0x60>
	return (usb_dev.configuration != 0);
    8a24:	4b1f      	ldr	r3, [pc, #124]	; (8aa4 <usb_halt_endpoint_req.isra.0+0x98>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    8a26:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    8a2a:	b1f8      	cbz	r0, 8a6c <usb_halt_endpoint_req.isra.0+0x60>
			LOG_INF("Set halt ep 0x%02x", ep);
    8a2c:	481e      	ldr	r0, [pc, #120]	; (8aa8 <usb_halt_endpoint_req.isra.0+0x9c>)
    8a2e:	4e1d      	ldr	r6, [pc, #116]	; (8aa4 <usb_halt_endpoint_req.isra.0+0x98>)
    8a30:	6803      	ldr	r3, [r0, #0]
    8a32:	f003 0307 	and.w	r3, r3, #7
		if (halt) {
    8a36:	b1dd      	cbz	r5, 8a70 <usb_halt_endpoint_req.isra.0+0x64>
			LOG_INF("Set halt ep 0x%02x", ep);
    8a38:	2b02      	cmp	r3, #2
    8a3a:	d90a      	bls.n	8a52 <usb_halt_endpoint_req.isra.0+0x46>
    8a3c:	4b1b      	ldr	r3, [pc, #108]	; (8aac <usb_halt_endpoint_req.isra.0+0xa0>)
    8a3e:	aa05      	add	r2, sp, #20
    8a40:	e9cd 3406 	strd	r3, r4, [sp, #24]
    8a44:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8a48:	2303      	movs	r3, #3
    8a4a:	9301      	str	r3, [sp, #4]
    8a4c:	9305      	str	r3, [sp, #20]
    8a4e:	f01e fa02 	bl	26e56 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_set_stall(ep);
    8a52:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8a56:	f017 f947 	bl	1fce8 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    8a5a:	69f3      	ldr	r3, [r6, #28]
    8a5c:	b90b      	cbnz	r3, 8a62 <usb_halt_endpoint_req.isra.0+0x56>
		return true;
    8a5e:	2001      	movs	r0, #1
    8a60:	e004      	b.n	8a6c <usb_halt_endpoint_req.isra.0+0x60>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    8a62:	2008      	movs	r0, #8
    8a64:	f10d 0103 	add.w	r1, sp, #3
    8a68:	4798      	blx	r3
		return true;
    8a6a:	4628      	mov	r0, r5
}
    8a6c:	b008      	add	sp, #32
    8a6e:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    8a70:	2b02      	cmp	r3, #2
    8a72:	d90a      	bls.n	8a8a <usb_halt_endpoint_req.isra.0+0x7e>
    8a74:	4b0e      	ldr	r3, [pc, #56]	; (8ab0 <usb_halt_endpoint_req.isra.0+0xa4>)
    8a76:	aa05      	add	r2, sp, #20
    8a78:	e9cd 3406 	strd	r3, r4, [sp, #24]
    8a7c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8a80:	2303      	movs	r3, #3
    8a82:	9301      	str	r3, [sp, #4]
    8a84:	9305      	str	r3, [sp, #20]
    8a86:	f01e f9e6 	bl	26e56 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_clear_stall(ep);
    8a8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8a8e:	f017 f967 	bl	1fd60 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    8a92:	69f3      	ldr	r3, [r6, #28]
    8a94:	2b00      	cmp	r3, #0
    8a96:	d0e2      	beq.n	8a5e <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    8a98:	f10d 0103 	add.w	r1, sp, #3
    8a9c:	2009      	movs	r0, #9
    8a9e:	4798      	blx	r3
    8aa0:	e7dd      	b.n	8a5e <usb_halt_endpoint_req.isra.0+0x52>
    8aa2:	bf00      	nop
    8aa4:	200027fc 	.word	0x200027fc
    8aa8:	20000a50 	.word	0x20000a50
    8aac:	0002f698 	.word	0x0002f698
    8ab0:	0002f6ab 	.word	0x0002f6ab

00008ab4 <usb_handle_standard_request>:
{
    8ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    8ab8:	4ea1      	ldr	r6, [pc, #644]	; (8d40 <usb_handle_standard_request+0x28c>)
    8aba:	69b3      	ldr	r3, [r6, #24]
{
    8abc:	b08b      	sub	sp, #44	; 0x2c
    8abe:	4605      	mov	r5, r0
    8ac0:	460f      	mov	r7, r1
    8ac2:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    8ac4:	b963      	cbnz	r3, 8ae0 <usb_handle_standard_request+0x2c>
	switch (setup->RequestType.recipient) {
    8ac6:	7828      	ldrb	r0, [r5, #0]
    8ac8:	f000 001f 	and.w	r0, r0, #31
    8acc:	2801      	cmp	r0, #1
    8ace:	f000 80a6 	beq.w	8c1e <usb_handle_standard_request+0x16a>
    8ad2:	2802      	cmp	r0, #2
    8ad4:	f000 813e 	beq.w	8d54 <usb_handle_standard_request+0x2a0>
    8ad8:	b138      	cbz	r0, 8aea <usb_handle_standard_request+0x36>
		switch (setup->bRequest) {
    8ada:	f06f 0015 	mvn.w	r0, #21
    8ade:	e094      	b.n	8c0a <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    8ae0:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    8ae2:	2800      	cmp	r0, #0
    8ae4:	d1ef      	bne.n	8ac6 <usb_handle_standard_request+0x12>
	int rc = 0;
    8ae6:	2000      	movs	r0, #0
    8ae8:	e08f      	b.n	8c0a <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    8aea:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    8aee:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    8af0:	2a00      	cmp	r2, #0
    8af2:	da31      	bge.n	8b58 <usb_handle_standard_request+0xa4>
		switch (setup->bRequest) {
    8af4:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    8af6:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    8afa:	d010      	beq.n	8b1e <usb_handle_standard_request+0x6a>
    8afc:	2b08      	cmp	r3, #8
    8afe:	d025      	beq.n	8b4c <usb_handle_standard_request+0x98>
    8b00:	2b00      	cmp	r3, #0
    8b02:	d1ea      	bne.n	8ada <usb_handle_standard_request+0x26>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    8b04:	2101      	movs	r1, #1
	data[1] = 0U;
    8b06:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    8b08:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    8b0a:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    8b0e:	2900      	cmp	r1, #0
    8b10:	bf18      	it	ne
    8b12:	2302      	movne	r3, #2
    8b14:	f043 0301 	orr.w	r3, r3, #1
    8b18:	7013      	strb	r3, [r2, #0]
		*len = 2;
    8b1a:	2302      	movs	r3, #2
    8b1c:	e01a      	b.n	8b54 <usb_handle_standard_request+0xa0>
			return usb_get_descriptor(setup, len, data_buf);
    8b1e:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    8b20:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    8b22:	1f11      	subs	r1, r2, #4
    8b24:	2901      	cmp	r1, #1
    8b26:	d9d8      	bls.n	8ada <usb_handle_standard_request+0x26>
    8b28:	2a07      	cmp	r2, #7
    8b2a:	d8d6      	bhi.n	8ada <usb_handle_standard_request+0x26>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    8b2c:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    8b2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    8b30:	781c      	ldrb	r4, [r3, #0]
    8b32:	2c00      	cmp	r4, #0
    8b34:	d0d1      	beq.n	8ada <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    8b36:	785d      	ldrb	r5, [r3, #1]
    8b38:	4295      	cmp	r5, r2
    8b3a:	d103      	bne.n	8b44 <usb_handle_standard_request+0x90>
			if (cur_index == index) {
    8b3c:	4281      	cmp	r1, r0
    8b3e:	f000 813e 	beq.w	8dbe <usb_handle_standard_request+0x30a>
			cur_index++;
    8b42:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    8b44:	4423      	add	r3, r4
    8b46:	e7f3      	b.n	8b30 <usb_handle_standard_request+0x7c>
			*len = p[DESC_bLength];
    8b48:	781b      	ldrb	r3, [r3, #0]
    8b4a:	e13e      	b.n	8dca <usb_handle_standard_request+0x316>
			data[0] = usb_dev.configuration;
    8b4c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    8b50:	7013      	strb	r3, [r2, #0]
			*len = 1;
    8b52:	2301      	movs	r3, #1
		*len = 2;
    8b54:	603b      	str	r3, [r7, #0]
		return true;
    8b56:	e058      	b.n	8c0a <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    8b58:	3b01      	subs	r3, #1
    8b5a:	2b08      	cmp	r3, #8
    8b5c:	d8bd      	bhi.n	8ada <usb_handle_standard_request+0x26>
    8b5e:	a201      	add	r2, pc, #4	; (adr r2, 8b64 <usb_handle_standard_request+0xb0>)
    8b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8b64:	00008bfd 	.word	0x00008bfd
    8b68:	00008adb 	.word	0x00008adb
    8b6c:	00008c11 	.word	0x00008c11
    8b70:	00008adb 	.word	0x00008adb
    8b74:	00008b89 	.word	0x00008b89
    8b78:	00008adb 	.word	0x00008adb
    8b7c:	00008adb 	.word	0x00008adb
    8b80:	00008adb 	.word	0x00008adb
    8b84:	00008b95 	.word	0x00008b95
			return !usb_dc_set_address(setup->wValue);
    8b88:	78a8      	ldrb	r0, [r5, #2]
    8b8a:	f017 f823 	bl	1fbd4 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    8b8e:	2800      	cmp	r0, #0
    8b90:	d0a9      	beq.n	8ae6 <usb_handle_standard_request+0x32>
    8b92:	e7a2      	b.n	8ada <usb_handle_standard_request+0x26>
	if (setup->wValue == 0U) {
    8b94:	886c      	ldrh	r4, [r5, #2]
    8b96:	b144      	cbz	r4, 8baa <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    8b98:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    8b9c:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    8b9e:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    8ba0:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    8ba2:	783c      	ldrb	r4, [r7, #0]
    8ba4:	b96c      	cbnz	r4, 8bc2 <usb_handle_standard_request+0x10e>
	if (found) {
    8ba6:	2800      	cmp	r0, #0
    8ba8:	d097      	beq.n	8ada <usb_handle_standard_request+0x26>
		usb_reset_alt_setting();
    8baa:	f7ff fe33 	bl	8814 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    8bae:	886b      	ldrh	r3, [r5, #2]
    8bb0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    8bb4:	69f3      	ldr	r3, [r6, #28]
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d095      	beq.n	8ae6 <usb_handle_standard_request+0x32>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    8bba:	4962      	ldr	r1, [pc, #392]	; (8d44 <usb_handle_standard_request+0x290>)
    8bbc:	2003      	movs	r0, #3
    8bbe:	4798      	blx	r3
    8bc0:	e791      	b.n	8ae6 <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    8bc2:	787b      	ldrb	r3, [r7, #1]
    8bc4:	2b04      	cmp	r3, #4
    8bc6:	d00c      	beq.n	8be2 <usb_handle_standard_request+0x12e>
    8bc8:	2b05      	cmp	r3, #5
    8bca:	d00d      	beq.n	8be8 <usb_handle_standard_request+0x134>
    8bcc:	2b02      	cmp	r3, #2
    8bce:	d105      	bne.n	8bdc <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    8bd0:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    8bd4:	886a      	ldrh	r2, [r5, #2]
				found = true;
    8bd6:	4542      	cmp	r2, r8
    8bd8:	bf08      	it	eq
    8bda:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    8bdc:	783b      	ldrb	r3, [r7, #0]
    8bde:	441f      	add	r7, r3
    8be0:	e7df      	b.n	8ba2 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    8be2:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    8be6:	e7f9      	b.n	8bdc <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    8be8:	886b      	ldrh	r3, [r5, #2]
    8bea:	4543      	cmp	r3, r8
    8bec:	d1f6      	bne.n	8bdc <usb_handle_standard_request+0x128>
    8bee:	f1b9 0f00 	cmp.w	r9, #0
    8bf2:	d1f3      	bne.n	8bdc <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    8bf4:	4638      	mov	r0, r7
    8bf6:	f7ff fe47 	bl	8888 <set_endpoint>
			break;
    8bfa:	e7ef      	b.n	8bdc <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    8bfc:	886b      	ldrh	r3, [r5, #2]
    8bfe:	2b01      	cmp	r3, #1
    8c00:	f47f af6b 	bne.w	8ada <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = false;
    8c04:	2000      	movs	r0, #0
    8c06:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    8c0a:	b00b      	add	sp, #44	; 0x2c
    8c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    8c10:	886b      	ldrh	r3, [r5, #2]
    8c12:	2b01      	cmp	r3, #1
    8c14:	f47f af61 	bne.w	8ada <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = true;
    8c18:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    8c1c:	e763      	b.n	8ae6 <usb_handle_standard_request+0x32>
	if (!is_device_configured() ||
    8c1e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    8c22:	2b00      	cmp	r3, #0
    8c24:	f43f af59 	beq.w	8ada <usb_handle_standard_request+0x26>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    8c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    8c2a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    8c2e:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    8c30:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    8c32:	781a      	ldrb	r2, [r3, #0]
    8c34:	2a00      	cmp	r2, #0
    8c36:	f43f af50 	beq.w	8ada <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    8c3a:	7859      	ldrb	r1, [r3, #1]
    8c3c:	2902      	cmp	r1, #2
    8c3e:	d104      	bne.n	8c4a <usb_handle_standard_request+0x196>
			if (interface < cfg_descr->bNumInterfaces) {
    8c40:	f893 e004 	ldrb.w	lr, [r3, #4]
    8c44:	4586      	cmp	lr, r0
    8c46:	f200 80c2 	bhi.w	8dce <usb_handle_standard_request+0x31a>
		p += p[DESC_bLength];
    8c4a:	4413      	add	r3, r2
    8c4c:	e7f1      	b.n	8c32 <usb_handle_standard_request+0x17e>
			data[0] = 0U;
    8c4e:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    8c50:	7050      	strb	r0, [r2, #1]
			*len = 2;
    8c52:	6039      	str	r1, [r7, #0]
			return true;
    8c54:	e7d9      	b.n	8c0a <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    8c56:	440c      	add	r4, r1
    8c58:	e0c7      	b.n	8dea <usb_handle_standard_request+0x336>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    8c5a:	280b      	cmp	r0, #11
    8c5c:	f47f af3d 	bne.w	8ada <usb_handle_standard_request+0x26>
	bool ret = false;
    8c60:	2200      	movs	r2, #0
	uint8_t cur_iface = 0xFF;
    8c62:	f04f 09ff 	mov.w	r9, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    8c66:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8d48 <usb_handle_standard_request+0x294>
	uint8_t cur_alt_setting = 0xFF;
    8c6a:	464f      	mov	r7, r9
	const uint8_t *if_desc = NULL;
    8c6c:	4690      	mov	r8, r2
    8c6e:	e006      	b.n	8c7e <usb_handle_standard_request+0x1ca>
		switch (p[DESC_bDescriptorType]) {
    8c70:	7861      	ldrb	r1, [r4, #1]
    8c72:	2904      	cmp	r1, #4
    8c74:	d011      	beq.n	8c9a <usb_handle_standard_request+0x1e6>
    8c76:	2905      	cmp	r1, #5
    8c78:	d023      	beq.n	8cc2 <usb_handle_standard_request+0x20e>
		p += p[DESC_bLength];
    8c7a:	7821      	ldrb	r1, [r4, #0]
    8c7c:	440c      	add	r4, r1
	while (p[DESC_bLength] != 0U) {
    8c7e:	7821      	ldrb	r1, [r4, #0]
    8c80:	2900      	cmp	r1, #0
    8c82:	d1f5      	bne.n	8c70 <usb_handle_standard_request+0x1bc>
	if (usb_dev.status_callback) {
    8c84:	69f3      	ldr	r3, [r6, #28]
    8c86:	b123      	cbz	r3, 8c92 <usb_handle_standard_request+0x1de>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    8c88:	4641      	mov	r1, r8
    8c8a:	2007      	movs	r0, #7
    8c8c:	9201      	str	r2, [sp, #4]
    8c8e:	4798      	blx	r3
    8c90:	9a01      	ldr	r2, [sp, #4]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    8c92:	2a00      	cmp	r2, #0
    8c94:	f47f af27 	bne.w	8ae6 <usb_handle_standard_request+0x32>
    8c98:	e71f      	b.n	8ada <usb_handle_standard_request+0x26>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    8c9a:	f894 9002 	ldrb.w	r9, [r4, #2]
			if (cur_iface == setup->wIndex &&
    8c9e:	88a8      	ldrh	r0, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    8ca0:	78e7      	ldrb	r7, [r4, #3]
			if (cur_iface == setup->wIndex &&
    8ca2:	4581      	cmp	r9, r0
    8ca4:	4649      	mov	r1, r9
    8ca6:	d1e8      	bne.n	8c7a <usb_handle_standard_request+0x1c6>
			    cur_alt_setting == setup->wValue) {
    8ca8:	f8b5 c002 	ldrh.w	ip, [r5, #2]
			if (cur_iface == setup->wIndex &&
    8cac:	4567      	cmp	r7, ip
    8cae:	b2b8      	uxth	r0, r7
    8cb0:	d1e3      	bne.n	8c7a <usb_handle_standard_request+0x1c6>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    8cb2:	2907      	cmp	r1, #7
    8cb4:	d842      	bhi.n	8d3c <usb_handle_standard_request+0x288>
		usb_dev.alt_setting[iface] = alt_setting;
    8cb6:	4431      	add	r1, r6
		return true;
    8cb8:	46a0      	mov	r8, r4
				ret = usb_set_alt_setting(setup->wIndex,
    8cba:	f881 00bb 	strb.w	r0, [r1, #187]	; 0xbb
	return true;
    8cbe:	2201      	movs	r2, #1
    8cc0:	e7db      	b.n	8c7a <usb_handle_standard_request+0x1c6>
			if (cur_iface == setup->wIndex) {
    8cc2:	88a9      	ldrh	r1, [r5, #4]
    8cc4:	4549      	cmp	r1, r9
    8cc6:	d1d8      	bne.n	8c7a <usb_handle_standard_request+0x1c6>
	if (cur_alt_setting != alt_setting) {
    8cc8:	78aa      	ldrb	r2, [r5, #2]
    8cca:	42ba      	cmp	r2, r7
    8ccc:	d031      	beq.n	8d32 <usb_handle_standard_request+0x27e>
		ret = reset_endpoint(ep_desc);
    8cce:	f894 b002 	ldrb.w	fp, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    8cd2:	4658      	mov	r0, fp
    8cd4:	f000 fd8c 	bl	97f0 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    8cd8:	4658      	mov	r0, fp
    8cda:	f017 f8a7 	bl	1fe2c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    8cde:	f110 0f78 	cmn.w	r0, #120	; 0x78
    8ce2:	d111      	bne.n	8d08 <usb_handle_standard_request+0x254>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    8ce4:	f8da 2000 	ldr.w	r2, [sl]
    8ce8:	f012 0f06 	tst.w	r2, #6
    8cec:	d0e7      	beq.n	8cbe <usb_handle_standard_request+0x20a>
    8cee:	2203      	movs	r2, #3
    8cf0:	4b16      	ldr	r3, [pc, #88]	; (8d4c <usb_handle_standard_request+0x298>)
    8cf2:	9203      	str	r2, [sp, #12]
    8cf4:	9207      	str	r2, [sp, #28]
    8cf6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8cfa:	aa07      	add	r2, sp, #28
    8cfc:	4650      	mov	r0, sl
    8cfe:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    8d02:	f01e f8a8 	bl	26e56 <z_log_msg2_static_create.constprop.0>
    8d06:	e7da      	b.n	8cbe <usb_handle_standard_request+0x20a>
	} else if (ret) {
    8d08:	2800      	cmp	r0, #0
    8d0a:	d0d8      	beq.n	8cbe <usb_handle_standard_request+0x20a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    8d0c:	f8da 2000 	ldr.w	r2, [sl]
    8d10:	f012 0207 	ands.w	r2, r2, #7
    8d14:	d0b1      	beq.n	8c7a <usb_handle_standard_request+0x1c6>
    8d16:	2203      	movs	r2, #3
    8d18:	4b0d      	ldr	r3, [pc, #52]	; (8d50 <usb_handle_standard_request+0x29c>)
    8d1a:	9203      	str	r2, [sp, #12]
    8d1c:	9207      	str	r2, [sp, #28]
    8d1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8d22:	aa07      	add	r2, sp, #28
    8d24:	4650      	mov	r0, sl
    8d26:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    8d2a:	f01e f894 	bl	26e56 <z_log_msg2_static_create.constprop.0>
	return false;
    8d2e:	2200      	movs	r2, #0
    8d30:	e7a3      	b.n	8c7a <usb_handle_standard_request+0x1c6>
		ret = set_endpoint(ep_desc);
    8d32:	4620      	mov	r0, r4
    8d34:	f7ff fda8 	bl	8888 <set_endpoint>
    8d38:	4602      	mov	r2, r0
    8d3a:	e79e      	b.n	8c7a <usb_handle_standard_request+0x1c6>
    8d3c:	46a0      	mov	r8, r4
    8d3e:	e7f6      	b.n	8d2e <usb_handle_standard_request+0x27a>
    8d40:	200027fc 	.word	0x200027fc
    8d44:	200028b6 	.word	0x200028b6
    8d48:	20000a50 	.word	0x20000a50
    8d4c:	0002f6c0 	.word	0x0002f6c0
    8d50:	0002f6e1 	.word	0x0002f6e1
	if (usb_reqtype_is_to_host(setup)) {
    8d54:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    8d58:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    8d5a:	2a00      	cmp	r2, #0
    8d5c:	da19      	bge.n	8d92 <usb_handle_standard_request+0x2de>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    8d5e:	2b00      	cmp	r3, #0
    8d60:	f47f aebb 	bne.w	8ada <usb_handle_standard_request+0x26>
	uint8_t ep = setup->wIndex;
    8d64:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    8d66:	0663      	lsls	r3, r4, #25
    8d68:	d00a      	beq.n	8d80 <usb_handle_standard_request+0x2cc>
    8d6a:	4620      	mov	r0, r4
    8d6c:	f7ff fd5a 	bl	8824 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    8d70:	2800      	cmp	r0, #0
    8d72:	f43f aeb2 	beq.w	8ada <usb_handle_standard_request+0x26>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    8d76:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	f43f aead 	beq.w	8ada <usb_handle_standard_request+0x26>
    8d80:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    8d84:	4620      	mov	r0, r4
    8d86:	4629      	mov	r1, r5
    8d88:	f017 f80a 	bl	1fda0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    8d8c:	2000      	movs	r0, #0
    8d8e:	7068      	strb	r0, [r5, #1]
    8d90:	e6c3      	b.n	8b1a <usb_handle_standard_request+0x66>
		switch (setup->bRequest) {
    8d92:	2b01      	cmp	r3, #1
    8d94:	d008      	beq.n	8da8 <usb_handle_standard_request+0x2f4>
    8d96:	2b03      	cmp	r3, #3
    8d98:	f47f ae9f 	bne.w	8ada <usb_handle_standard_request+0x26>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    8d9c:	886b      	ldrh	r3, [r5, #2]
    8d9e:	2b00      	cmp	r3, #0
    8da0:	f47f ae9b 	bne.w	8ada <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    8da4:	2101      	movs	r1, #1
    8da6:	e003      	b.n	8db0 <usb_handle_standard_request+0x2fc>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    8da8:	8869      	ldrh	r1, [r5, #2]
    8daa:	2900      	cmp	r1, #0
    8dac:	f47f ae95 	bne.w	8ada <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    8db0:	88a8      	ldrh	r0, [r5, #4]
    8db2:	f7ff fe2b 	bl	8a0c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    8db6:	2800      	cmp	r0, #0
    8db8:	f47f ae95 	bne.w	8ae6 <usb_handle_standard_request+0x32>
    8dbc:	e68d      	b.n	8ada <usb_handle_standard_request+0x26>
		if (type == USB_DESC_CONFIGURATION) {
    8dbe:	2a02      	cmp	r2, #2
		*data = p;
    8dc0:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    8dc4:	f47f aec0 	bne.w	8b48 <usb_handle_standard_request+0x94>
			*len = (p[CONF_DESC_wTotalLength]) |
    8dc8:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    8dca:	603b      	str	r3, [r7, #0]
    8dcc:	e68b      	b.n	8ae6 <usb_handle_standard_request+0x32>
	if (usb_reqtype_is_to_host(setup)) {
    8dce:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    8dd2:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    8dd4:	2b00      	cmp	r3, #0
    8dd6:	f6bf af40 	bge.w	8c5a <usb_handle_standard_request+0x1a6>
    8dda:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    8dde:	2800      	cmp	r0, #0
    8de0:	f43f af35 	beq.w	8c4e <usb_handle_standard_request+0x19a>
    8de4:	280a      	cmp	r0, #10
    8de6:	f47f ae78 	bne.w	8ada <usb_handle_standard_request+0x26>
	while (p[DESC_bLength] != 0U) {
    8dea:	7821      	ldrb	r1, [r4, #0]
    8dec:	2900      	cmp	r1, #0
    8dee:	f43f ae74 	beq.w	8ada <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    8df2:	7863      	ldrb	r3, [r4, #1]
    8df4:	2b04      	cmp	r3, #4
    8df6:	f47f af2e 	bne.w	8c56 <usb_handle_standard_request+0x1a2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    8dfa:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    8dfc:	459c      	cmp	ip, r3
    8dfe:	f47f af2a 	bne.w	8c56 <usb_handle_standard_request+0x1a2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    8e02:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    8e04:	bf96      	itet	ls
    8e06:	199b      	addls	r3, r3, r6
	return 0;
    8e08:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    8e0a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    8e0e:	7013      	strb	r3, [r2, #0]
				*len = 1;
    8e10:	2301      	movs	r3, #1
    8e12:	e7da      	b.n	8dca <usb_handle_standard_request+0x316>

00008e14 <usb_write>:
{
    8e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    8e18:	f8df a058 	ldr.w	sl, [pc, #88]	; 8e74 <usb_write+0x60>
{
    8e1c:	b089      	sub	sp, #36	; 0x24
    8e1e:	4605      	mov	r5, r0
    8e20:	460f      	mov	r7, r1
    8e22:	4690      	mov	r8, r2
    8e24:	4699      	mov	r9, r3
    8e26:	2604      	movs	r6, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    8e28:	f04f 0b03 	mov.w	fp, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    8e2c:	464b      	mov	r3, r9
    8e2e:	4642      	mov	r2, r8
    8e30:	4639      	mov	r1, r7
    8e32:	4628      	mov	r0, r5
    8e34:	f017 f820 	bl	1fe78 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    8e38:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    8e3c:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    8e3e:	d115      	bne.n	8e6c <usb_write+0x58>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    8e40:	f8da 3000 	ldr.w	r3, [sl]
    8e44:	f013 0f06 	tst.w	r3, #6
    8e48:	d00c      	beq.n	8e64 <usb_write+0x50>
    8e4a:	4b0b      	ldr	r3, [pc, #44]	; (8e78 <usb_write+0x64>)
    8e4c:	f8cd b004 	str.w	fp, [sp, #4]
    8e50:	aa05      	add	r2, sp, #20
    8e52:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8e56:	4650      	mov	r0, sl
    8e58:	e9cd 3506 	strd	r3, r5, [sp, #24]
    8e5c:	f8cd b014 	str.w	fp, [sp, #20]
    8e60:	f01d fff9 	bl	26e56 <z_log_msg2_static_create.constprop.0>
	z_impl_k_yield();
    8e64:	f01b fa86 	bl	24374 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    8e68:	3e01      	subs	r6, #1
    8e6a:	d1df      	bne.n	8e2c <usb_write+0x18>
}
    8e6c:	4620      	mov	r0, r4
    8e6e:	b009      	add	sp, #36	; 0x24
    8e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e74:	20000a50 	.word	0x20000a50
    8e78:	0002f703 	.word	0x0002f703

00008e7c <usb_data_to_host>:
{
    8e7c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    8e7e:	4c13      	ldr	r4, [pc, #76]	; (8ecc <usb_data_to_host+0x50>)
    8e80:	7d23      	ldrb	r3, [r4, #20]
    8e82:	b9cb      	cbnz	r3, 8eb8 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    8e84:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    8e86:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    8e88:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    8e8a:	ab01      	add	r3, sp, #4
    8e8c:	2080      	movs	r0, #128	; 0x80
    8e8e:	f7ff ffc1 	bl	8e14 <usb_write>
		usb_dev.data_buf += chunk;
    8e92:	9a01      	ldr	r2, [sp, #4]
    8e94:	68a3      	ldr	r3, [r4, #8]
    8e96:	4413      	add	r3, r2
    8e98:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    8e9a:	68e3      	ldr	r3, [r4, #12]
    8e9c:	1a9b      	subs	r3, r3, r2
    8e9e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    8ea0:	b943      	cbnz	r3, 8eb4 <usb_data_to_host+0x38>
    8ea2:	b13a      	cbz	r2, 8eb4 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    8ea4:	6923      	ldr	r3, [r4, #16]
    8ea6:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    8ea8:	429a      	cmp	r2, r3
    8eaa:	dd03      	ble.n	8eb4 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    8eac:	069b      	lsls	r3, r3, #26
    8eae:	d101      	bne.n	8eb4 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    8eb0:	2301      	movs	r3, #1
    8eb2:	7523      	strb	r3, [r4, #20]
}
    8eb4:	b002      	add	sp, #8
    8eb6:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    8eb8:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    8eba:	461a      	mov	r2, r3
    8ebc:	4619      	mov	r1, r3
    8ebe:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    8ec0:	7523      	strb	r3, [r4, #20]
}
    8ec2:	b002      	add	sp, #8
    8ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    8ec8:	f016 bfd6 	b.w	1fe78 <usb_dc_ep_write>
    8ecc:	200027fc 	.word	0x200027fc

00008ed0 <usb_handle_control_transfer>:
{
    8ed0:	b530      	push	{r4, r5, lr}
    8ed2:	b08b      	sub	sp, #44	; 0x2c
	uint32_t chunk = 0U;
    8ed4:	2300      	movs	r3, #0
{
    8ed6:	4602      	mov	r2, r0
    8ed8:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    8eda:	9300      	str	r3, [sp, #0]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    8edc:	2800      	cmp	r0, #0
    8ede:	d16d      	bne.n	8fbc <usb_handle_control_transfer+0xec>
    8ee0:	2900      	cmp	r1, #0
    8ee2:	d14a      	bne.n	8f7a <usb_handle_control_transfer+0xaa>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    8ee4:	2208      	movs	r2, #8
    8ee6:	460b      	mov	r3, r1
    8ee8:	eb0d 0102 	add.w	r1, sp, r2
    8eec:	f021 fdec 	bl	2aac8 <usb_dc_ep_read>
    8ef0:	2800      	cmp	r0, #0
    8ef2:	da04      	bge.n	8efe <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    8ef4:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    8ef6:	f016 fef7 	bl	1fce8 <usb_dc_ep_set_stall>
}
    8efa:	b00b      	add	sp, #44	; 0x2c
    8efc:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    8efe:	4c34      	ldr	r4, [pc, #208]	; (8fd0 <usb_handle_control_transfer+0x100>)
		setup->bRequest = setup_raw.bRequest;
    8f00:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    8f04:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    8f08:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    8f0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8f0e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    8f10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    8f14:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    8f16:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    8f18:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    8f1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8f20:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    8f22:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    8f24:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    8f28:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    8f2a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    8f2c:	d418      	bmi.n	8f60 <usb_handle_control_transfer+0x90>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    8f2e:	2b80      	cmp	r3, #128	; 0x80
    8f30:	d912      	bls.n	8f58 <usb_handle_control_transfer+0x88>
				LOG_ERR("Request buffer too small");
    8f32:	4828      	ldr	r0, [pc, #160]	; (8fd4 <usb_handle_control_transfer+0x104>)
    8f34:	6803      	ldr	r3, [r0, #0]
    8f36:	075b      	lsls	r3, r3, #29
    8f38:	d009      	beq.n	8f4e <usb_handle_control_transfer+0x7e>
    8f3a:	4b27      	ldr	r3, [pc, #156]	; (8fd8 <usb_handle_control_transfer+0x108>)
    8f3c:	9308      	str	r3, [sp, #32]
    8f3e:	aa07      	add	r2, sp, #28
    8f40:	2302      	movs	r3, #2
    8f42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8f46:	9301      	str	r3, [sp, #4]
    8f48:	9307      	str	r3, [sp, #28]
    8f4a:	f01d ff84 	bl	26e56 <z_log_msg2_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    8f4e:	2080      	movs	r0, #128	; 0x80
    8f50:	f016 feca 	bl	1fce8 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    8f54:	2000      	movs	r0, #0
    8f56:	e7ce      	b.n	8ef6 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    8f58:	b113      	cbz	r3, 8f60 <usb_handle_control_transfer+0x90>
				usb_dev.data_buf_residue = setup->wLength;
    8f5a:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    8f5e:	e7cc      	b.n	8efa <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    8f60:	f7ff fc7c 	bl	885c <usb_handle_request.constprop.0>
    8f64:	2800      	cmp	r0, #0
    8f66:	d0c5      	beq.n	8ef4 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    8f68:	88e2      	ldrh	r2, [r4, #6]
    8f6a:	6923      	ldr	r3, [r4, #16]
    8f6c:	429a      	cmp	r2, r3
    8f6e:	bfd4      	ite	le
    8f70:	60e2      	strle	r2, [r4, #12]
    8f72:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    8f74:	f7ff ff82 	bl	8e7c <usb_data_to_host>
    8f78:	e7bf      	b.n	8efa <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    8f7a:	4c15      	ldr	r4, [pc, #84]	; (8fd0 <usb_handle_control_transfer+0x100>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    8f7c:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    8f80:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    8f82:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    8f84:	dc04      	bgt.n	8f90 <usb_handle_control_transfer+0xc0>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    8f86:	f021 fd9f 	bl	2aac8 <usb_dc_ep_read>
    8f8a:	2800      	cmp	r0, #0
    8f8c:	dab5      	bge.n	8efa <usb_handle_control_transfer+0x2a>
    8f8e:	e7b1      	b.n	8ef4 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    8f90:	462a      	mov	r2, r5
    8f92:	f021 fd99 	bl	2aac8 <usb_dc_ep_read>
    8f96:	2800      	cmp	r0, #0
    8f98:	dbd9      	blt.n	8f4e <usb_handle_control_transfer+0x7e>
		usb_dev.data_buf += chunk;
    8f9a:	9900      	ldr	r1, [sp, #0]
    8f9c:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    8f9e:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    8fa0:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    8fa2:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    8fa4:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    8fa6:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d1a6      	bne.n	8efa <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    8fac:	f104 0338 	add.w	r3, r4, #56	; 0x38
    8fb0:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    8fb2:	f7ff fc53 	bl	885c <usb_handle_request.constprop.0>
    8fb6:	2800      	cmp	r0, #0
    8fb8:	d1dc      	bne.n	8f74 <usb_handle_control_transfer+0xa4>
    8fba:	e79b      	b.n	8ef4 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    8fbc:	2880      	cmp	r0, #128	; 0x80
    8fbe:	d19c      	bne.n	8efa <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    8fc0:	4b03      	ldr	r3, [pc, #12]	; (8fd0 <usb_handle_control_transfer+0x100>)
    8fc2:	68da      	ldr	r2, [r3, #12]
    8fc4:	2a00      	cmp	r2, #0
    8fc6:	d1d5      	bne.n	8f74 <usb_handle_control_transfer+0xa4>
    8fc8:	7d1b      	ldrb	r3, [r3, #20]
    8fca:	2b00      	cmp	r3, #0
    8fcc:	d1d2      	bne.n	8f74 <usb_handle_control_transfer+0xa4>
    8fce:	e794      	b.n	8efa <usb_handle_control_transfer+0x2a>
    8fd0:	200027fc 	.word	0x200027fc
    8fd4:	20000a50 	.word	0x20000a50
    8fd8:	0002f72a 	.word	0x0002f72a

00008fdc <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    8fdc:	4b05      	ldr	r3, [pc, #20]	; (8ff4 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    8fde:	4a06      	ldr	r2, [pc, #24]	; (8ff8 <usb_set_config+0x1c>)
    8fe0:	629a      	str	r2, [r3, #40]	; 0x28
    8fe2:	4a06      	ldr	r2, [pc, #24]	; (8ffc <usb_set_config+0x20>)
    8fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    8fe6:	4a06      	ldr	r2, [pc, #24]	; (9000 <usb_set_config+0x24>)
    8fe8:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    8fea:	4a06      	ldr	r2, [pc, #24]	; (9004 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    8fec:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    8fee:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    8ff0:	2000      	movs	r0, #0
    8ff2:	4770      	bx	lr
    8ff4:	200027fc 	.word	0x200027fc
    8ff8:	00008ab5 	.word	0x00008ab5
    8ffc:	00008739 	.word	0x00008739
    9000:	000087d9 	.word	0x000087d9
    9004:	00008779 	.word	0x00008779

00009008 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    9008:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    900a:	4b10      	ldr	r3, [pc, #64]	; (904c <usb_device_init+0x44>)
    900c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    9010:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    9012:	b9c4      	cbnz	r4, 9046 <usb_device_init+0x3e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    9014:	f000 fa12 	bl	943c <usb_get_device_descriptor>
	if (!device_descriptor) {
    9018:	b980      	cbnz	r0, 903c <usb_device_init+0x34>
		LOG_ERR("Failed to configure USB device stack");
    901a:	480d      	ldr	r0, [pc, #52]	; (9050 <usb_device_init+0x48>)
    901c:	6803      	ldr	r3, [r0, #0]
    901e:	075b      	lsls	r3, r3, #29
    9020:	d009      	beq.n	9036 <usb_device_init+0x2e>
    9022:	4b0c      	ldr	r3, [pc, #48]	; (9054 <usb_device_init+0x4c>)
    9024:	9306      	str	r3, [sp, #24]
    9026:	aa05      	add	r2, sp, #20
    9028:	2302      	movs	r3, #2
    902a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    902e:	9301      	str	r3, [sp, #4]
    9030:	9305      	str	r3, [sp, #20]
    9032:	f01d ff10 	bl	26e56 <z_log_msg2_static_create.constprop.0>
    9036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    903a:	e002      	b.n	9042 <usb_device_init+0x3a>
		return -1;
	}

	usb_set_config(device_descriptor);
    903c:	f7ff ffce 	bl	8fdc <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    9040:	4620      	mov	r0, r4
}
    9042:	b008      	add	sp, #32
    9044:	bd10      	pop	{r4, pc}
		return -EALREADY;
    9046:	f06f 0077 	mvn.w	r0, #119	; 0x77
    904a:	e7fa      	b.n	9042 <usb_device_init+0x3a>
    904c:	200027fc 	.word	0x200027fc
    9050:	20000a50 	.word	0x20000a50
    9054:	0002f743 	.word	0x0002f743

00009058 <usb_enable>:
{
    9058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    905c:	4604      	mov	r4, r0
    905e:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    9060:	4d3c      	ldr	r5, [pc, #240]	; (9154 <usb_enable+0xfc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    9062:	483d      	ldr	r0, [pc, #244]	; (9158 <usb_enable+0x100>)
    9064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    906c:	f01a fc36 	bl	238dc <z_impl_k_mutex_lock>
    9070:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    9074:	b18e      	cbz	r6, 909a <usb_enable+0x42>
		LOG_WRN("USB device support already enabled");
    9076:	4839      	ldr	r0, [pc, #228]	; (915c <usb_enable+0x104>)
    9078:	6803      	ldr	r3, [r0, #0]
    907a:	f013 0f06 	tst.w	r3, #6
    907e:	d009      	beq.n	9094 <usb_enable+0x3c>
    9080:	4b37      	ldr	r3, [pc, #220]	; (9160 <usb_enable+0x108>)
    9082:	9306      	str	r3, [sp, #24]
    9084:	aa05      	add	r2, sp, #20
    9086:	2302      	movs	r3, #2
    9088:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    908c:	9301      	str	r3, [sp, #4]
    908e:	9305      	str	r3, [sp, #20]
    9090:	f01d fee1 	bl	26e56 <z_log_msg2_static_create.constprop.0>
		ret = -EALREADY;
    9094:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9098:	e03f      	b.n	911a <usb_enable+0xc2>
	usb_dev.status_callback = cb;
    909a:	4832      	ldr	r0, [pc, #200]	; (9164 <usb_enable+0x10c>)
	usb_dev.user_status_callback = status_cb;
    909c:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    909e:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    90a0:	f017 f852 	bl	20148 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    90a4:	f016 fd58 	bl	1fb58 <usb_dc_attach>
	if (ret < 0) {
    90a8:	1e04      	subs	r4, r0, #0
    90aa:	db36      	blt.n	911a <usb_enable+0xc2>
	ret = usb_transfer_init();
    90ac:	f000 fbe6 	bl	987c <usb_transfer_init>
	if (ret < 0) {
    90b0:	1e04      	subs	r4, r0, #0
    90b2:	db32      	blt.n	911a <usb_enable+0xc2>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    90b4:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    90b6:	a802      	add	r0, sp, #8
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    90b8:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    90bc:	f88d 600c 	strb.w	r6, [sp, #12]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    90c0:	f88d 6008 	strb.w	r6, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    90c4:	f016 fdd8 	bl	1fc78 <usb_dc_ep_configure>
	if (ret < 0) {
    90c8:	1e04      	subs	r4, r0, #0
    90ca:	db26      	blt.n	911a <usb_enable+0xc2>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    90cc:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    90ce:	a802      	add	r0, sp, #8
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    90d0:	f88d 7008 	strb.w	r7, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    90d4:	f016 fdd0 	bl	1fc78 <usb_dc_ep_configure>
	if (ret < 0) {
    90d8:	1e04      	subs	r4, r0, #0
    90da:	db1e      	blt.n	911a <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    90dc:	4922      	ldr	r1, [pc, #136]	; (9168 <usb_enable+0x110>)
    90de:	4630      	mov	r0, r6
    90e0:	f017 f81e 	bl	20120 <usb_dc_ep_set_callback>
	if (ret < 0) {
    90e4:	1e04      	subs	r4, r0, #0
    90e6:	db18      	blt.n	911a <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    90e8:	491f      	ldr	r1, [pc, #124]	; (9168 <usb_enable+0x110>)
    90ea:	4638      	mov	r0, r7
    90ec:	f017 f818 	bl	20120 <usb_dc_ep_set_callback>
	if (ret < 0) {
    90f0:	1e04      	subs	r4, r0, #0
    90f2:	db12      	blt.n	911a <usb_enable+0xc2>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    90f4:	4c1d      	ldr	r4, [pc, #116]	; (916c <usb_enable+0x114>)
    90f6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 9170 <usb_enable+0x118>
    90fa:	4544      	cmp	r4, r8
    90fc:	d314      	bcc.n	9128 <usb_enable+0xd0>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    90fe:	2000      	movs	r0, #0
    9100:	f016 fe6a 	bl	1fdd8 <usb_dc_ep_enable>
	if (ret < 0) {
    9104:	1e04      	subs	r4, r0, #0
    9106:	db08      	blt.n	911a <usb_enable+0xc2>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    9108:	2080      	movs	r0, #128	; 0x80
    910a:	f016 fe65 	bl	1fdd8 <usb_dc_ep_enable>
	if (ret < 0) {
    910e:	1e04      	subs	r4, r0, #0
    9110:	db03      	blt.n	911a <usb_enable+0xc2>
	usb_dev.enabled = true;
    9112:	2301      	movs	r3, #1
    9114:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    9118:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    911a:	480f      	ldr	r0, [pc, #60]	; (9158 <usb_enable+0x100>)
    911c:	f01a fc56 	bl	239cc <z_impl_k_mutex_unlock>
}
    9120:	4620      	mov	r0, r4
    9122:	b008      	add	sp, #32
    9124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    9128:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    912a:	2600      	movs	r6, #0
    912c:	7f22      	ldrb	r2, [r4, #28]
    912e:	b2f3      	uxtb	r3, r6
    9130:	429a      	cmp	r2, r3
    9132:	d801      	bhi.n	9138 <usb_enable+0xe0>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9134:	3424      	adds	r4, #36	; 0x24
    9136:	e7e0      	b.n	90fa <usb_enable+0xa2>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    9138:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    913c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    9140:	7910      	ldrb	r0, [r2, #4]
    9142:	f016 ffed 	bl	20120 <usb_dc_ep_set_callback>
    9146:	3601      	adds	r6, #1
    9148:	2800      	cmp	r0, #0
    914a:	d0ef      	beq.n	912c <usb_enable+0xd4>
    914c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    9150:	e7e3      	b.n	911a <usb_enable+0xc2>
    9152:	bf00      	nop
    9154:	200027fc 	.word	0x200027fc
    9158:	20000afc 	.word	0x20000afc
    915c:	20000a50 	.word	0x20000a50
    9160:	0002f768 	.word	0x0002f768
    9164:	00008971 	.word	0x00008971
    9168:	00008ed1 	.word	0x00008ed1
    916c:	20000df8 	.word	0x20000df8
    9170:	20000e1c 	.word	0x20000e1c

00009174 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    9174:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    9176:	4b1f      	ldr	r3, [pc, #124]	; (91f4 <usb_update_sn_string_descriptor+0x80>)
{
    9178:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    917a:	aa05      	add	r2, sp, #20
    917c:	f103 0510 	add.w	r5, r3, #16
    9180:	6818      	ldr	r0, [r3, #0]
    9182:	6859      	ldr	r1, [r3, #4]
    9184:	4614      	mov	r4, r2
    9186:	c403      	stmia	r4!, {r0, r1}
    9188:	3308      	adds	r3, #8
    918a:	42ab      	cmp	r3, r5
    918c:	4622      	mov	r2, r4
    918e:	d1f7      	bne.n	9180 <usb_update_sn_string_descriptor+0xc>
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    9194:	2210      	movs	r2, #16
    9196:	2100      	movs	r1, #0
    9198:	a801      	add	r0, sp, #4
    919a:	f01f fa17 	bl	285cc <memset>
	memset(sn, 0, sizeof(sn));
    919e:	2212      	movs	r2, #18
    91a0:	2100      	movs	r1, #0
    91a2:	4815      	ldr	r0, [pc, #84]	; (91f8 <usb_update_sn_string_descriptor+0x84>)
    91a4:	f01f fa12 	bl	285cc <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    91a8:	2110      	movs	r1, #16
    91aa:	a801      	add	r0, sp, #4
    91ac:	f021 fd7e 	bl	2acac <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    91b0:	2800      	cmp	r0, #0
    91b2:	dd1b      	ble.n	91ec <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    91b4:	2808      	cmp	r0, #8
    91b6:	bfb8      	it	lt
    91b8:	2008      	movlt	r0, #8
    91ba:	3808      	subs	r0, #8
    91bc:	ab01      	add	r3, sp, #4
    91be:	4a0e      	ldr	r2, [pc, #56]	; (91f8 <usb_update_sn_string_descriptor+0x84>)
    91c0:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    91c2:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    91c4:	f810 3b01 	ldrb.w	r3, [r0], #1
    91c8:	ac0a      	add	r4, sp, #40	; 0x28
    91ca:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    91ce:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    91d2:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    91d6:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    91d8:	ac0a      	add	r4, sp, #40	; 0x28
    91da:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    91dc:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    91de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    91e2:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    91e4:	2908      	cmp	r1, #8
    91e6:	f102 0202 	add.w	r2, r2, #2
    91ea:	d1eb      	bne.n	91c4 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    91ec:	4802      	ldr	r0, [pc, #8]	; (91f8 <usb_update_sn_string_descriptor+0x84>)
    91ee:	b00b      	add	sp, #44	; 0x2c
    91f0:	bd30      	pop	{r4, r5, pc}
    91f2:	bf00      	nop
    91f4:	0002f796 	.word	0x0002f796
    91f8:	20004843 	.word	0x20004843

000091fc <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    91fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9200:	4604      	mov	r4, r0
    9202:	b08b      	sub	sp, #44	; 0x2c
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    9204:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    9206:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    920a:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    920c:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    920e:	4637      	mov	r7, r6

	while (head->bLength != 0U) {
    9210:	7820      	ldrb	r0, [r4, #0]
    9212:	b920      	cbnz	r0, 921e <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    9214:	4b7f      	ldr	r3, [pc, #508]	; (9414 <usb_fix_descriptor+0x218>)
    9216:	3402      	adds	r4, #2
    9218:	429c      	cmp	r4, r3
    921a:	d039      	beq.n	9290 <usb_fix_descriptor+0x94>
    921c:	e7f2      	b.n	9204 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    921e:	7863      	ldrb	r3, [r4, #1]
    9220:	2b05      	cmp	r3, #5
    9222:	d805      	bhi.n	9230 <usb_fix_descriptor+0x34>
    9224:	e8df f003 	tbb	[pc, r3]
    9228:	a30304a3 	.word	0xa30304a3
    922c:	2c07      	.short	0x2c07
    922e:	4627      	mov	r7, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    9230:	7823      	ldrb	r3, [r4, #0]
    9232:	441c      	add	r4, r3
    9234:	e7ec      	b.n	9210 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    9236:	78e3      	ldrb	r3, [r4, #3]
    9238:	2b00      	cmp	r3, #0
    923a:	d1f9      	bne.n	9230 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    923c:	78a3      	ldrb	r3, [r4, #2]
    923e:	b1e3      	cbz	r3, 927a <usb_fix_descriptor+0x7e>
			numof_ifaces++;
    9240:	f10a 0a01 	add.w	sl, sl, #1
    9244:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    9248:	e7f2      	b.n	9230 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    924a:	686a      	ldr	r2, [r5, #4]
    924c:	4294      	cmp	r4, r2
    924e:	f000 80d9 	beq.w	9404 <usb_fix_descriptor+0x208>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9252:	3524      	adds	r5, #36	; 0x24
    9254:	429d      	cmp	r5, r3
    9256:	d3f8      	bcc.n	924a <usb_fix_descriptor+0x4e>
					LOG_ERR("There is no usb_cfg_data "
    9258:	486f      	ldr	r0, [pc, #444]	; (9418 <usb_fix_descriptor+0x21c>)
    925a:	6803      	ldr	r3, [r0, #0]
    925c:	075b      	lsls	r3, r3, #29
    925e:	d015      	beq.n	928c <usb_fix_descriptor+0x90>
    9260:	4b6e      	ldr	r3, [pc, #440]	; (941c <usb_fix_descriptor+0x220>)
    9262:	e9cd 3408 	strd	r3, r4, [sp, #32]
    9266:	2303      	movs	r3, #3
    9268:	9303      	str	r3, [sp, #12]
    926a:	9307      	str	r3, [sp, #28]
    926c:	2300      	movs	r3, #0
    926e:	aa07      	add	r2, sp, #28
    9270:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9274:	f01c fcb4 	bl	25be0 <z_impl_z_log_msg2_static_create>
    9278:	e008      	b.n	928c <usb_fix_descriptor+0x90>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    927a:	4d69      	ldr	r5, [pc, #420]	; (9420 <usb_fix_descriptor+0x224>)
    927c:	4b69      	ldr	r3, [pc, #420]	; (9424 <usb_fix_descriptor+0x228>)
    927e:	e7e9      	b.n	9254 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    9280:	2d00      	cmp	r5, #0
    9282:	d171      	bne.n	9368 <usb_fix_descriptor+0x16c>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    9284:	4864      	ldr	r0, [pc, #400]	; (9418 <usb_fix_descriptor+0x21c>)
    9286:	6803      	ldr	r3, [r0, #0]
    9288:	075d      	lsls	r5, r3, #29
    928a:	d104      	bne.n	9296 <usb_fix_descriptor+0x9a>
				return -1;
    928c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    9290:	b00b      	add	sp, #44	; 0x2c
    9292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    9296:	4b64      	ldr	r3, [pc, #400]	; (9428 <usb_fix_descriptor+0x22c>)
				LOG_ERR("Failed to validate endpoints");
    9298:	9308      	str	r3, [sp, #32]
    929a:	2302      	movs	r3, #2
    929c:	9303      	str	r3, [sp, #12]
    929e:	9307      	str	r3, [sp, #28]
    92a0:	2300      	movs	r3, #0
    92a2:	aa07      	add	r2, sp, #28
    92a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    92a8:	e7e4      	b.n	9274 <usb_fix_descriptor+0x78>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    92aa:	6a2a      	ldr	r2, [r5, #32]
    92ac:	f894 c002 	ldrb.w	ip, [r4, #2]
    92b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    92b4:	7910      	ldrb	r0, [r2, #4]
    92b6:	4584      	cmp	ip, r0
    92b8:	d009      	beq.n	92ce <usb_fix_descriptor+0xd2>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    92ba:	3301      	adds	r3, #1
    92bc:	7f2a      	ldrb	r2, [r5, #28]
    92be:	4293      	cmp	r3, r2
    92c0:	d3f3      	bcc.n	92aa <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    92c2:	4855      	ldr	r0, [pc, #340]	; (9418 <usb_fix_descriptor+0x21c>)
    92c4:	6803      	ldr	r3, [r0, #0]
    92c6:	075c      	lsls	r4, r3, #29
    92c8:	d0e0      	beq.n	928c <usb_fix_descriptor+0x90>
    92ca:	4b58      	ldr	r3, [pc, #352]	; (942c <usb_fix_descriptor+0x230>)
    92cc:	e7e4      	b.n	9298 <usb_fix_descriptor+0x9c>
    92ce:	f04f 0801 	mov.w	r8, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    92d2:	78e0      	ldrb	r0, [r4, #3]
    92d4:	f000 0003 	and.w	r0, r0, #3
    92d8:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    92dc:	7920      	ldrb	r0, [r4, #4]
    92de:	f894 c005 	ldrb.w	ip, [r4, #5]
    92e2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    92e6:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    92ea:	f994 0002 	ldrsb.w	r0, [r4, #2]
    92ee:	2800      	cmp	r0, #0
    92f0:	fa5f f988 	uxtb.w	r9, r8
    92f4:	da2a      	bge.n	934c <usb_fix_descriptor+0x150>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    92f6:	f108 0010 	add.w	r0, r8, #16
    92fa:	fa01 f000 	lsl.w	r0, r1, r0
    92fe:	ea10 0f0b 	tst.w	r0, fp
    9302:	d12b      	bne.n	935c <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    9304:	f069 007f 	orn	r0, r9, #127	; 0x7f
    9308:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    930c:	a804      	add	r0, sp, #16
    930e:	e9cd 3200 	strd	r3, r2, [sp]
    9312:	f016 fc71 	bl	1fbf8 <usb_dc_ep_check_cap>
    9316:	e9dd 3200 	ldrd	r3, r2, [sp]
    931a:	2101      	movs	r1, #1
    931c:	b9f0      	cbnz	r0, 935c <usb_fix_descriptor+0x160>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    931e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    9322:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    9324:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    9328:	bf1c      	itt	ne
    932a:	f109 0910 	addne.w	r9, r9, #16
    932e:	fa5f f989 	uxtbne.w	r9, r9
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    9332:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    9334:	bf18      	it	ne
    9336:	fa01 f909 	lslne.w	r9, r1, r9
    933a:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    933c:	bf0a      	itet	eq
    933e:	fa01 f308 	lsleq.w	r3, r1, r8
					*requested_ep |= (1U << (idx + 16U));
    9342:	ea4b 0b09 	orrne.w	fp, fp, r9
					*requested_ep |= (1U << idx);
    9346:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    934a:	e771      	b.n	9230 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    934c:	fa01 f008 	lsl.w	r0, r1, r8
    9350:	ea10 0f0b 	tst.w	r0, fp
    9354:	d102      	bne.n	935c <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = idx;
    9356:	f88d 9010 	strb.w	r9, [sp, #16]
    935a:	e7d7      	b.n	930c <usb_fix_descriptor+0x110>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    935c:	f108 0801 	add.w	r8, r8, #1
    9360:	f1b8 0f10 	cmp.w	r8, #16
    9364:	d1b5      	bne.n	92d2 <usb_fix_descriptor+0xd6>
    9366:	e7a8      	b.n	92ba <usb_fix_descriptor+0xbe>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    9368:	2300      	movs	r3, #0
    936a:	2101      	movs	r1, #1
    936c:	e7a6      	b.n	92bc <usb_fix_descriptor+0xc0>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    936e:	2e03      	cmp	r6, #3
    9370:	d12d      	bne.n	93ce <usb_fix_descriptor+0x1d2>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    9372:	f7ff feff 	bl	9174 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    9376:	4680      	mov	r8, r0
    9378:	b1b8      	cbz	r0, 93aa <usb_fix_descriptor+0x1ae>
	runtime_sn_len = strlen(runtime_sn);
    937a:	f01f f8c6 	bl	2850a <strlen>
	if (!runtime_sn_len) {
    937e:	4681      	mov	r9, r0
    9380:	b198      	cbz	r0, 93aa <usb_fix_descriptor+0x1ae>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    9382:	482b      	ldr	r0, [pc, #172]	; (9430 <usb_fix_descriptor+0x234>)
    9384:	f01f f8c1 	bl	2850a <strlen>
	if (runtime_sn_len != default_sn_len) {
    9388:	4581      	cmp	r9, r0
    938a:	d01a      	beq.n	93c2 <usb_fix_descriptor+0x1c6>
		LOG_ERR("the new SN descriptor doesn't have the same "
    938c:	4822      	ldr	r0, [pc, #136]	; (9418 <usb_fix_descriptor+0x21c>)
    938e:	6803      	ldr	r3, [r0, #0]
    9390:	0759      	lsls	r1, r3, #29
    9392:	d00a      	beq.n	93aa <usb_fix_descriptor+0x1ae>
    9394:	4b27      	ldr	r3, [pc, #156]	; (9434 <usb_fix_descriptor+0x238>)
    9396:	9308      	str	r3, [sp, #32]
    9398:	2302      	movs	r3, #2
    939a:	9303      	str	r3, [sp, #12]
    939c:	9307      	str	r3, [sp, #28]
    939e:	2300      	movs	r3, #0
    93a0:	aa07      	add	r2, sp, #28
    93a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    93a6:	f01c fc1b 	bl	25be0 <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    93aa:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    93ac:	f06f 0102 	mvn.w	r1, #2
    93b0:	18e2      	adds	r2, r4, r3
    93b2:	1b09      	subs	r1, r1, r4
    93b4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    93b8:	42d1      	cmn	r1, r2
    93ba:	d512      	bpl.n	93e2 <usb_fix_descriptor+0x1e6>
			str_descr_idx += 1U;
    93bc:	3601      	adds	r6, #1
    93be:	b2f6      	uxtb	r6, r6
			break;
    93c0:	e736      	b.n	9230 <usb_fix_descriptor+0x34>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    93c2:	464a      	mov	r2, r9
    93c4:	4641      	mov	r1, r8
    93c6:	1ca0      	adds	r0, r4, #2
    93c8:	f01f f8f5 	bl	285b6 <memcpy>
    93cc:	e7ed      	b.n	93aa <usb_fix_descriptor+0x1ae>
			if (str_descr_idx) {
    93ce:	2e00      	cmp	r6, #0
    93d0:	d1eb      	bne.n	93aa <usb_fix_descriptor+0x1ae>
				if (!cfg_descr) {
    93d2:	b97f      	cbnz	r7, 93f4 <usb_fix_descriptor+0x1f8>
					LOG_ERR("Incomplete device descriptor");
    93d4:	4810      	ldr	r0, [pc, #64]	; (9418 <usb_fix_descriptor+0x21c>)
    93d6:	6803      	ldr	r3, [r0, #0]
    93d8:	075a      	lsls	r2, r3, #29
    93da:	f43f af57 	beq.w	928c <usb_fix_descriptor+0x90>
    93de:	4b16      	ldr	r3, [pc, #88]	; (9438 <usb_fix_descriptor+0x23c>)
    93e0:	e75a      	b.n	9298 <usb_fix_descriptor+0x9c>
		buf[i] = 0U;
    93e2:	f04f 0000 	mov.w	r0, #0
    93e6:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    93ea:	f813 0901 	ldrb.w	r0, [r3], #-1
    93ee:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    93f2:	e7e1      	b.n	93b8 <usb_fix_descriptor+0x1bc>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    93f4:	1be3      	subs	r3, r4, r7
	dst[0] = val;
    93f6:	70bb      	strb	r3, [r7, #2]
	dst[1] = val >> 8;
    93f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    93fc:	70fb      	strb	r3, [r7, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    93fe:	f887 a004 	strb.w	sl, [r7, #4]
    9402:	e7db      	b.n	93bc <usb_fix_descriptor+0x1c0>
				if (cfg_data->interface_config) {
    9404:	68ab      	ldr	r3, [r5, #8]
    9406:	2b00      	cmp	r3, #0
    9408:	f43f af1a 	beq.w	9240 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    940c:	4651      	mov	r1, sl
    940e:	4620      	mov	r0, r4
    9410:	4798      	blx	r3
    9412:	e715      	b.n	9240 <usb_fix_descriptor+0x44>
    9414:	20000df7 	.word	0x20000df7
    9418:	20000a4c 	.word	0x20000a4c
    941c:	0002f7a7 	.word	0x0002f7a7
    9420:	20000df8 	.word	0x20000df8
    9424:	20000e1c 	.word	0x20000e1c
    9428:	0002f7c7 	.word	0x0002f7c7
    942c:	0002f808 	.word	0x0002f808
    9430:	0002f796 	.word	0x0002f796
    9434:	0002f825 	.word	0x0002f825
    9438:	0002f870 	.word	0x0002f870

0000943c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    943c:	b500      	push	{lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    943e:	480e      	ldr	r0, [pc, #56]	; (9478 <usb_get_device_descriptor+0x3c>)
{
    9440:	b089      	sub	sp, #36	; 0x24
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    9442:	f7ff fedb 	bl	91fc <usb_fix_descriptor>
    9446:	b198      	cbz	r0, 9470 <usb_get_device_descriptor+0x34>
		LOG_ERR("Failed to fixup USB descriptor");
    9448:	480c      	ldr	r0, [pc, #48]	; (947c <usb_get_device_descriptor+0x40>)
    944a:	6803      	ldr	r3, [r0, #0]
    944c:	f013 0307 	ands.w	r3, r3, #7
    9450:	d010      	beq.n	9474 <usb_get_device_descriptor+0x38>
    9452:	4b0b      	ldr	r3, [pc, #44]	; (9480 <usb_get_device_descriptor+0x44>)
    9454:	9306      	str	r3, [sp, #24]
    9456:	2302      	movs	r3, #2
    9458:	9301      	str	r3, [sp, #4]
    945a:	9305      	str	r3, [sp, #20]
    945c:	2300      	movs	r3, #0
    945e:	aa05      	add	r2, sp, #20
    9460:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9464:	f01c fbbc 	bl	25be0 <z_impl_z_log_msg2_static_create>
		return NULL;
    9468:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    946a:	b009      	add	sp, #36	; 0x24
    946c:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    9470:	4801      	ldr	r0, [pc, #4]	; (9478 <usb_get_device_descriptor+0x3c>)
    9472:	e7fa      	b.n	946a <usb_get_device_descriptor+0x2e>
		return NULL;
    9474:	4618      	mov	r0, r3
    9476:	e7f8      	b.n	946a <usb_get_device_descriptor+0x2e>
    9478:	20000d08 	.word	0x20000d08
    947c:	20000a4c 	.word	0x20000a4c
    9480:	0002f88d 	.word	0x0002f88d

00009484 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    9484:	b510      	push	{r4, lr}
    9486:	4b09      	ldr	r3, [pc, #36]	; (94ac <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    9488:	2100      	movs	r1, #0
    948a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    948c:	781c      	ldrb	r4, [r3, #0]
    948e:	4284      	cmp	r4, r0
    9490:	d105      	bne.n	949e <usb_ep_get_transfer+0x1a>
    9492:	685c      	ldr	r4, [r3, #4]
    9494:	b11c      	cbz	r4, 949e <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    9496:	2048      	movs	r0, #72	; 0x48
    9498:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    949c:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    949e:	3101      	adds	r1, #1
    94a0:	2904      	cmp	r1, #4
    94a2:	f103 0348 	add.w	r3, r3, #72	; 0x48
    94a6:	d1f1      	bne.n	948c <usb_ep_get_transfer+0x8>
	return NULL;
    94a8:	2000      	movs	r0, #0
    94aa:	e7f7      	b.n	949c <usb_ep_get_transfer+0x18>
    94ac:	200028c0 	.word	0x200028c0

000094b0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    94b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    94b4:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    94b6:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    94ba:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    94be:	3310      	adds	r3, #16
{
    94c0:	af00      	add	r7, sp, #0
    94c2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    94c4:	d111      	bne.n	94ea <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    94c6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    94c8:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    94cc:	f013 0602 	ands.w	r6, r3, #2
    94d0:	d053      	beq.n	957a <usb_transfer_work+0xca>
		if (!trans->bsize) {
    94d2:	bb0a      	cbnz	r2, 9518 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    94d4:	f013 0304 	ands.w	r3, r3, #4
    94d8:	d104      	bne.n	94e4 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    94da:	461a      	mov	r2, r3
    94dc:	4619      	mov	r1, r3
    94de:	4628      	mov	r0, r5
    94e0:	f7ff fc98 	bl	8e14 <usb_write>
			}
			trans->status = 0;
    94e4:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    94e6:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    94ea:	f854 3c30 	ldr.w	r3, [r4, #-48]
    94ee:	3310      	adds	r3, #16
    94f0:	d00e      	beq.n	9510 <usb_transfer_work+0x60>
    94f2:	f854 6c20 	ldr.w	r6, [r4, #-32]
    94f6:	b15e      	cbz	r6, 9510 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    94f8:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    94fc:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    9500:	f021 ffea 	bl	2b4d8 <k_is_in_isr>
    9504:	2800      	cmp	r0, #0
    9506:	d07b      	beq.n	9600 <usb_transfer_work+0x150>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    9508:	4845      	ldr	r0, [pc, #276]	; (9620 <usb_transfer_work+0x170>)
    950a:	4621      	mov	r1, r4
    950c:	f022 f96c 	bl	2b7e8 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    9510:	370c      	adds	r7, #12
    9512:	46bd      	mov	sp, r7
    9514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    9518:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    951c:	463b      	mov	r3, r7
    951e:	4628      	mov	r0, r5
    9520:	f7ff fc78 	bl	8e14 <usb_write>
		if (ret) {
    9524:	4603      	mov	r3, r0
    9526:	b1b8      	cbz	r0, 9558 <usb_transfer_work+0xa8>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    9528:	483e      	ldr	r0, [pc, #248]	; (9624 <usb_transfer_work+0x174>)
    952a:	6802      	ldr	r2, [r0, #0]
    952c:	0751      	lsls	r1, r2, #29
    952e:	d010      	beq.n	9552 <usb_transfer_work+0xa2>
    9530:	493d      	ldr	r1, [pc, #244]	; (9628 <usb_transfer_work+0x178>)
    9532:	466e      	mov	r6, sp
    9534:	b088      	sub	sp, #32
    9536:	466a      	mov	r2, sp
    9538:	e9c2 1304 	strd	r1, r3, [r2, #16]
    953c:	2304      	movs	r3, #4
    953e:	6195      	str	r5, [r2, #24]
    9540:	607b      	str	r3, [r7, #4]
    9542:	f842 3f0c 	str.w	r3, [r2, #12]!
    9546:	2300      	movs	r3, #0
    9548:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    954c:	f01c fb48 	bl	25be0 <z_impl_z_log_msg2_static_create>
    9550:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    9552:	f06f 0315 	mvn.w	r3, #21
    9556:	e7c6      	b.n	94e6 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    9558:	683a      	ldr	r2, [r7, #0]
    955a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    955e:	4413      	add	r3, r2
    9560:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    9564:	f854 3c28 	ldr.w	r3, [r4, #-40]
    9568:	1a9b      	subs	r3, r3, r2
    956a:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    956e:	f854 3c24 	ldr.w	r3, [r4, #-36]
    9572:	4413      	add	r3, r2
    9574:	f844 3c24 	str.w	r3, [r4, #-36]
    9578:	e7b7      	b.n	94ea <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    957a:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    957e:	463b      	mov	r3, r7
    9580:	4628      	mov	r0, r5
    9582:	f016 fd13 	bl	1ffac <usb_dc_ep_read_wait>
		if (ret) {
    9586:	4603      	mov	r3, r0
    9588:	b1a8      	cbz	r0, 95b6 <usb_transfer_work+0x106>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    958a:	4826      	ldr	r0, [pc, #152]	; (9624 <usb_transfer_work+0x174>)
    958c:	6802      	ldr	r2, [r0, #0]
    958e:	0752      	lsls	r2, r2, #29
    9590:	d0df      	beq.n	9552 <usb_transfer_work+0xa2>
    9592:	4925      	ldr	r1, [pc, #148]	; (9628 <usb_transfer_work+0x178>)
    9594:	46e8      	mov	r8, sp
    9596:	b088      	sub	sp, #32
    9598:	466a      	mov	r2, sp
    959a:	e9c2 1304 	strd	r1, r3, [r2, #16]
    959e:	2304      	movs	r3, #4
    95a0:	6195      	str	r5, [r2, #24]
    95a2:	607b      	str	r3, [r7, #4]
    95a4:	f842 3f0c 	str.w	r3, [r2, #12]!
    95a8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    95ac:	4633      	mov	r3, r6
    95ae:	f01c fb17 	bl	25be0 <z_impl_z_log_msg2_static_create>
    95b2:	46c5      	mov	sp, r8
    95b4:	e7cd      	b.n	9552 <usb_transfer_work+0xa2>
		trans->buffer += bytes;
    95b6:	683e      	ldr	r6, [r7, #0]
    95b8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    95bc:	4433      	add	r3, r6
    95be:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    95c2:	f854 3c28 	ldr.w	r3, [r4, #-40]
    95c6:	1b9b      	subs	r3, r3, r6
    95c8:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    95cc:	f854 3c24 	ldr.w	r3, [r4, #-36]
    95d0:	4433      	add	r3, r6
    95d2:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    95d6:	2e00      	cmp	r6, #0
    95d8:	d084      	beq.n	94e4 <usb_transfer_work+0x34>
    95da:	4628      	mov	r0, r5
    95dc:	f016 fdba 	bl	20154 <usb_dc_ep_mps>
    95e0:	fbb6 f3f0 	udiv	r3, r6, r0
    95e4:	fb03 6610 	mls	r6, r3, r0, r6
    95e8:	2e00      	cmp	r6, #0
    95ea:	f47f af7b 	bne.w	94e4 <usb_transfer_work+0x34>
    95ee:	f854 3c28 	ldr.w	r3, [r4, #-40]
    95f2:	2b00      	cmp	r3, #0
    95f4:	f43f af76 	beq.w	94e4 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    95f8:	4628      	mov	r0, r5
    95fa:	f016 fd39 	bl	20070 <usb_dc_ep_read_continue>
    95fe:	e774      	b.n	94ea <usb_transfer_work+0x3a>
		trans->cb = NULL;
    9600:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    9604:	f1a4 0018 	sub.w	r0, r4, #24
    9608:	f01a fa58 	bl	23abc <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    960c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    9610:	338c      	adds	r3, #140	; 0x8c
    9612:	f43f af7d 	beq.w	9510 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    9616:	464a      	mov	r2, r9
    9618:	4641      	mov	r1, r8
    961a:	4628      	mov	r0, r5
    961c:	47b0      	blx	r6
    961e:	e777      	b.n	9510 <usb_transfer_work+0x60>
    9620:	20001680 	.word	0x20001680
    9624:	20000a58 	.word	0x20000a58
    9628:	0002f8bb 	.word	0x0002f8bb

0000962c <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    962c:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    962e:	1e4b      	subs	r3, r1, #1
    9630:	2b01      	cmp	r3, #1
{
    9632:	b088      	sub	sp, #32
    9634:	4606      	mov	r6, r0
    9636:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    9638:	d81c      	bhi.n	9674 <usb_transfer_ep_callback+0x48>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    963a:	f7ff ff23 	bl	9484 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    963e:	4604      	mov	r4, r0
    9640:	b9d0      	cbnz	r0, 9678 <usb_transfer_ep_callback+0x4c>
		if (status == USB_DC_EP_DATA_OUT) {
    9642:	2d01      	cmp	r5, #1
    9644:	d116      	bne.n	9674 <usb_transfer_ep_callback+0x48>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    9646:	466b      	mov	r3, sp
    9648:	2201      	movs	r2, #1
    964a:	a902      	add	r1, sp, #8
    964c:	4630      	mov	r0, r6
    964e:	f016 fcad 	bl	1ffac <usb_dc_ep_read_wait>
			} while (bytes);
    9652:	9b00      	ldr	r3, [sp, #0]
    9654:	2b00      	cmp	r3, #0
    9656:	d1f6      	bne.n	9646 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    9658:	4811      	ldr	r0, [pc, #68]	; (96a0 <usb_transfer_ep_callback+0x74>)
    965a:	6802      	ldr	r2, [r0, #0]
    965c:	0752      	lsls	r2, r2, #29
    965e:	d009      	beq.n	9674 <usb_transfer_ep_callback+0x48>
    9660:	4a10      	ldr	r2, [pc, #64]	; (96a4 <usb_transfer_ep_callback+0x78>)
    9662:	9206      	str	r2, [sp, #24]
    9664:	2202      	movs	r2, #2
    9666:	9201      	str	r2, [sp, #4]
    9668:	9205      	str	r2, [sp, #20]
    966a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    966e:	aa05      	add	r2, sp, #20
    9670:	f01c fab6 	bl	25be0 <z_impl_z_log_msg2_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    9674:	b008      	add	sp, #32
    9676:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    9678:	f021 ff2e 	bl	2b4d8 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    967c:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    9680:	b108      	cbz	r0, 9686 <usb_transfer_ep_callback+0x5a>
    9682:	2d01      	cmp	r5, #1
    9684:	d105      	bne.n	9692 <usb_transfer_ep_callback+0x66>
		usb_transfer_work(&trans->work);
    9686:	4608      	mov	r0, r1
}
    9688:	b008      	add	sp, #32
    968a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    968e:	f7ff bf0f 	b.w	94b0 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    9692:	4805      	ldr	r0, [pc, #20]	; (96a8 <usb_transfer_ep_callback+0x7c>)
}
    9694:	b008      	add	sp, #32
    9696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    969a:	f022 b8a5 	b.w	2b7e8 <k_work_submit_to_queue>
    969e:	bf00      	nop
    96a0:	20000a58 	.word	0x20000a58
    96a4:	0002f8d8 	.word	0x0002f8d8
    96a8:	20001680 	.word	0x20001680

000096ac <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    96ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96b0:	b08b      	sub	sp, #44	; 0x2c
    96b2:	4605      	mov	r5, r0
    96b4:	9100      	str	r1, [sp, #0]
    96b6:	4616      	mov	r6, r2
    96b8:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    96ba:	f01d fbff 	bl	26ebc <usb_transfer_is_busy>
    96be:	4604      	mov	r4, r0
    96c0:	2800      	cmp	r0, #0
    96c2:	f040 8086 	bne.w	97d2 <usb_transfer+0x126>
	__asm__ volatile(
    96c6:	f04f 0320 	mov.w	r3, #32
    96ca:	f3ef 8211 	mrs	r2, BASEPRI
    96ce:	f383 8812 	msr	BASEPRI_MAX, r3
    96d2:	f3bf 8f6f 	isb	sy
    96d6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 97d8 <usb_transfer+0x12c>
    96da:	9201      	str	r2, [sp, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    96dc:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    96e0:	fb0a f704 	mul.w	r7, sl, r4
	return z_impl_k_sem_take(sem, timeout);
    96e4:	2300      	movs	r3, #0
    96e6:	2200      	movs	r2, #0
    96e8:	4648      	mov	r0, r9
    96ea:	f01a fa0d 	bl	23b08 <z_impl_k_sem_take>
    96ee:	4603      	mov	r3, r0
    96f0:	bb18      	cbnz	r0, 973a <usb_transfer+0x8e>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    96f2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 97dc <usb_transfer+0x130>
    96f6:	eb0a 0b07 	add.w	fp, sl, r7
    96fa:	f8db 4004 	ldr.w	r4, [fp, #4]
    96fe:	f114 0f10 	cmn.w	r4, #16
    9702:	d131      	bne.n	9768 <usb_transfer+0xbc>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    9704:	4836      	ldr	r0, [pc, #216]	; (97e0 <usb_transfer+0x134>)
    9706:	6802      	ldr	r2, [r0, #0]
    9708:	0752      	lsls	r2, r2, #29
    970a:	d00a      	beq.n	9722 <usb_transfer+0x76>
    970c:	4a35      	ldr	r2, [pc, #212]	; (97e4 <usb_transfer+0x138>)
    970e:	e9cd 2508 	strd	r2, r5, [sp, #32]
    9712:	2203      	movs	r2, #3
    9714:	9203      	str	r2, [sp, #12]
    9716:	9207      	str	r2, [sp, #28]
    9718:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    971c:	aa07      	add	r2, sp, #28
    971e:	f01c fa5f 	bl	25be0 <z_impl_z_log_msg2_static_create>
	z_impl_k_sem_give(sem);
    9722:	4648      	mov	r0, r9
    9724:	f01a f9ca 	bl	23abc <z_impl_k_sem_give>
	__asm__ volatile(
    9728:	9b01      	ldr	r3, [sp, #4]
    972a:	f383 8811 	msr	BASEPRI, r3
    972e:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    9732:	4620      	mov	r0, r4
    9734:	b00b      	add	sp, #44	; 0x2c
    9736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    973a:	3401      	adds	r4, #1
    973c:	2c04      	cmp	r4, #4
    973e:	f109 0948 	add.w	r9, r9, #72	; 0x48
    9742:	d1cd      	bne.n	96e0 <usb_transfer+0x34>
		LOG_ERR("No transfer slot available");
    9744:	4826      	ldr	r0, [pc, #152]	; (97e0 <usb_transfer+0x134>)
    9746:	6803      	ldr	r3, [r0, #0]
    9748:	075b      	lsls	r3, r3, #29
    974a:	d00a      	beq.n	9762 <usb_transfer+0xb6>
    974c:	4b26      	ldr	r3, [pc, #152]	; (97e8 <usb_transfer+0x13c>)
    974e:	9308      	str	r3, [sp, #32]
    9750:	2302      	movs	r3, #2
    9752:	9303      	str	r3, [sp, #12]
    9754:	9307      	str	r3, [sp, #28]
    9756:	2300      	movs	r3, #0
    9758:	aa07      	add	r2, sp, #28
    975a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    975e:	f01c fa3f 	bl	25be0 <z_impl_z_log_msg2_static_create>
		ret = -ENOMEM;
    9762:	f06f 040b 	mvn.w	r4, #11
    9766:	e7df      	b.n	9728 <usb_transfer+0x7c>
	trans->cb = cb;
    9768:	9b14      	ldr	r3, [sp, #80]	; 0x50
	trans->buffer = data;
    976a:	9a00      	ldr	r2, [sp, #0]
	trans->cb = cb;
    976c:	f8cb 3014 	str.w	r3, [fp, #20]
	trans->priv = cb_data;
    9770:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9772:	f8cb 3018 	str.w	r3, [fp, #24]
	trans->status = -EBUSY;
    9776:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    977a:	f8cb 0010 	str.w	r0, [fp, #16]
	trans->bsize = dlen;
    977e:	e9cb 2602 	strd	r2, r6, [fp, #8]
	trans->ep = ep;
    9782:	f80a 5007 	strb.w	r5, [sl, r7]
	trans->flags = flags;
    9786:	f8cb 8044 	str.w	r8, [fp, #68]	; 0x44
	trans->status = -EBUSY;
    978a:	f8cb 3004 	str.w	r3, [fp, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    978e:	4628      	mov	r0, r5
    9790:	f016 fce0 	bl	20154 <usb_dc_ep_mps>
    9794:	b168      	cbz	r0, 97b2 <usb_transfer+0x106>
    9796:	4628      	mov	r0, r5
    9798:	f016 fcdc 	bl	20154 <usb_dc_ep_mps>
    979c:	fbb6 f3f0 	udiv	r3, r6, r0
    97a0:	fb03 6610 	mls	r6, r3, r0, r6
    97a4:	b12e      	cbz	r6, 97b2 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
    97a6:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    97aa:	f043 0304 	orr.w	r3, r3, #4
    97ae:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    97b2:	f018 0f02 	tst.w	r8, #2
    97b6:	d007      	beq.n	97c8 <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    97b8:	3734      	adds	r7, #52	; 0x34
    97ba:	480c      	ldr	r0, [pc, #48]	; (97ec <usb_transfer+0x140>)
    97bc:	eb0a 0107 	add.w	r1, sl, r7
    97c0:	f022 f812 	bl	2b7e8 <k_work_submit_to_queue>
	int i, key, ret = 0;
    97c4:	2400      	movs	r4, #0
    97c6:	e7af      	b.n	9728 <usb_transfer+0x7c>
		ret = usb_dc_ep_read_continue(ep);
    97c8:	4628      	mov	r0, r5
    97ca:	f016 fc51 	bl	20070 <usb_dc_ep_read_continue>
    97ce:	4604      	mov	r4, r0
    97d0:	e7aa      	b.n	9728 <usb_transfer+0x7c>
		return -EBUSY;
    97d2:	f06f 040f 	mvn.w	r4, #15
    97d6:	e7ac      	b.n	9732 <usb_transfer+0x86>
    97d8:	200028dc 	.word	0x200028dc
    97dc:	200028c0 	.word	0x200028c0
    97e0:	20000a58 	.word	0x20000a58
    97e4:	0002f90d 	.word	0x0002f90d
    97e8:	0002f8f2 	.word	0x0002f8f2
    97ec:	20001680 	.word	0x20001680

000097f0 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    97f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    97f2:	f04f 0320 	mov.w	r3, #32
    97f6:	f3ef 8411 	mrs	r4, BASEPRI
    97fa:	f383 8812 	msr	BASEPRI_MAX, r3
    97fe:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    9802:	f7ff fe3f 	bl	9484 <usb_ep_get_transfer>
	if (!trans) {
    9806:	b150      	cbz	r0, 981e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    9808:	6843      	ldr	r3, [r0, #4]
    980a:	3310      	adds	r3, #16
    980c:	d107      	bne.n	981e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    980e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    9812:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    9814:	f100 0134 	add.w	r1, r0, #52	; 0x34
    9818:	4803      	ldr	r0, [pc, #12]	; (9828 <usb_cancel_transfer+0x38>)
    981a:	f021 ffe5 	bl	2b7e8 <k_work_submit_to_queue>
	__asm__ volatile(
    981e:	f384 8811 	msr	BASEPRI, r4
    9822:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    9826:	bd10      	pop	{r4, pc}
    9828:	20001680 	.word	0x20001680

0000982c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9830:	4c10      	ldr	r4, [pc, #64]	; (9874 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    9832:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9878 <usb_cancel_transfers+0x4c>
{
    9836:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    9838:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    983c:	f04f 0320 	mov.w	r3, #32
    9840:	f3ef 8611 	mrs	r6, BASEPRI
    9844:	f383 8812 	msr	BASEPRI_MAX, r3
    9848:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    984c:	6863      	ldr	r3, [r4, #4]
    984e:	3310      	adds	r3, #16
    9850:	d105      	bne.n	985e <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    9852:	f104 0134 	add.w	r1, r4, #52	; 0x34
    9856:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    9858:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    985a:	f021 ffc5 	bl	2b7e8 <k_work_submit_to_queue>
	__asm__ volatile(
    985e:	f386 8811 	msr	BASEPRI, r6
    9862:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    9866:	3d01      	subs	r5, #1
    9868:	f104 0448 	add.w	r4, r4, #72	; 0x48
    986c:	d1e6      	bne.n	983c <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    986e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9872:	bf00      	nop
    9874:	200028c0 	.word	0x200028c0
    9878:	20001680 	.word	0x20001680

0000987c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    987c:	b570      	push	{r4, r5, r6, lr}
    987e:	4c0a      	ldr	r4, [pc, #40]	; (98a8 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    9880:	4e0a      	ldr	r6, [pc, #40]	; (98ac <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    9882:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    9884:	4631      	mov	r1, r6
    9886:	4620      	mov	r0, r4
    9888:	f021 ffa5 	bl	2b7d6 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    988c:	2201      	movs	r2, #1
    988e:	f1a4 0018 	sub.w	r0, r4, #24
    9892:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    9894:	3501      	adds	r5, #1
    9896:	f021 ff1e 	bl	2b6d6 <z_impl_k_sem_init>
    989a:	2d04      	cmp	r5, #4
    989c:	f104 0448 	add.w	r4, r4, #72	; 0x48
    98a0:	d1f0      	bne.n	9884 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    98a2:	2000      	movs	r0, #0
    98a4:	bd70      	pop	{r4, r5, r6, pc}
    98a6:	bf00      	nop
    98a8:	200028f4 	.word	0x200028f4
    98ac:	000094b1 	.word	0x000094b1

000098b0 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    98b0:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    98b2:	2301      	movs	r3, #1
    98b4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    98b8:	680b      	ldr	r3, [r1, #0]
    98ba:	b133      	cbz	r3, 98ca <cdc_acm_irq_rx_enable+0x1a>
    98bc:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    98c0:	b11b      	cbz	r3, 98ca <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    98c2:	4802      	ldr	r0, [pc, #8]	; (98cc <cdc_acm_irq_rx_enable+0x1c>)
    98c4:	3108      	adds	r1, #8
    98c6:	f021 bf8f 	b.w	2b7e8 <k_work_submit_to_queue>
	}
}
    98ca:	4770      	bx	lr
    98cc:	20001680 	.word	0x20001680

000098d0 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    98d0:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    98d2:	2301      	movs	r3, #1
    98d4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    98d8:	680b      	ldr	r3, [r1, #0]
    98da:	b133      	cbz	r3, 98ea <cdc_acm_irq_tx_enable+0x1a>
    98dc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    98e0:	b11b      	cbz	r3, 98ea <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    98e2:	4802      	ldr	r0, [pc, #8]	; (98ec <cdc_acm_irq_tx_enable+0x1c>)
    98e4:	3108      	adds	r1, #8
    98e6:	f021 bf7f 	b.w	2b7e8 <k_work_submit_to_queue>
}
    98ea:	4770      	bx	lr
    98ec:	20001680 	.word	0x20001680

000098f0 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    98f0:	4a0b      	ldr	r2, [pc, #44]	; (9920 <cdc_acm_reset_port+0x30>)
{
    98f2:	4603      	mov	r3, r0
	dev_data->configured = false;
    98f4:	2100      	movs	r1, #0
    98f6:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    98fa:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    98fc:	6810      	ldr	r0, [r2, #0]
    98fe:	6758      	str	r0, [r3, #116]	; 0x74
    9900:	8890      	ldrh	r0, [r2, #4]
    9902:	7992      	ldrb	r2, [r2, #6]
    9904:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    9908:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    990c:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    9910:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    9914:	2240      	movs	r2, #64	; 0x40
    9916:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    991a:	f01e be57 	b.w	285cc <memset>
    991e:	bf00      	nop
    9920:	0002c527 	.word	0x0002c527

00009924 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    9924:	2301      	movs	r3, #1
    9926:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    992a:	6813      	ldr	r3, [r2, #0]
{
    992c:	b510      	push	{r4, lr}
    992e:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    9930:	b13b      	cbz	r3, 9942 <cdc_acm_write_cb+0x1e>
    9932:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    9936:	b123      	cbz	r3, 9942 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    9938:	4808      	ldr	r0, [pc, #32]	; (995c <cdc_acm_write_cb+0x38>)
    993a:	f102 0108 	add.w	r1, r2, #8
    993e:	f021 ff53 	bl	2b7e8 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    9942:	6f20      	ldr	r0, [r4, #112]	; 0x70
    9944:	f01b fcd8 	bl	252f8 <ring_buf_is_empty>
    9948:	b930      	cbnz	r0, 9958 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    994a:	f104 0118 	add.w	r1, r4, #24
    994e:	4803      	ldr	r0, [pc, #12]	; (995c <cdc_acm_write_cb+0x38>)
}
    9950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    9954:	f021 bf48 	b.w	2b7e8 <k_work_submit_to_queue>
}
    9958:	bd10      	pop	{r4, pc}
    995a:	bf00      	nop
    995c:	20001680 	.word	0x20001680

00009960 <tx_work_handler>:
{
    9960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    9962:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    9964:	685b      	ldr	r3, [r3, #4]
    9966:	6a1b      	ldr	r3, [r3, #32]
    9968:	7d1e      	ldrb	r6, [r3, #20]
{
    996a:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    996c:	4630      	mov	r0, r6
    996e:	f01d faa5 	bl	26ebc <usb_transfer_is_busy>
    9972:	b9d0      	cbnz	r0, 99aa <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    9974:	6da8      	ldr	r0, [r5, #88]	; 0x58
    9976:	f44f 6280 	mov.w	r2, #1024	; 0x400
    997a:	a903      	add	r1, sp, #12
    997c:	f01b fd35 	bl	253ea <ring_buf_get_claim>
	if (!len) {
    9980:	4604      	mov	r4, r0
    9982:	b190      	cbz	r0, 99aa <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    9984:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    9986:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    998a:	bf08      	it	eq
    998c:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    9990:	9301      	str	r3, [sp, #4]
    9992:	4b07      	ldr	r3, [pc, #28]	; (99b0 <tx_work_handler+0x50>)
    9994:	9903      	ldr	r1, [sp, #12]
    9996:	9300      	str	r3, [sp, #0]
    9998:	4622      	mov	r2, r4
    999a:	2302      	movs	r3, #2
    999c:	4630      	mov	r0, r6
    999e:	f7ff fe85 	bl	96ac <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    99a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    99a4:	4621      	mov	r1, r4
    99a6:	f01b fd4b 	bl	25440 <ring_buf_get_finish>
}
    99aa:	b004      	add	sp, #16
    99ac:	bd70      	pop	{r4, r5, r6, pc}
    99ae:	bf00      	nop
    99b0:	00009925 	.word	0x00009925

000099b4 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    99b4:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    99b6:	6904      	ldr	r4, [r0, #16]
{
    99b8:	b08b      	sub	sp, #44	; 0x2c

	if (!dev_data->configured || dev_data->suspended) {
    99ba:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
{
    99be:	f88d 1007 	strb.w	r1, [sp, #7]
	if (!dev_data->configured || dev_data->suspended) {
    99c2:	b113      	cbz	r3, 99ca <cdc_acm_poll_out+0x16>
    99c4:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    99c8:	b18b      	cbz	r3, 99ee <cdc_acm_poll_out+0x3a>
		LOG_INF("USB device not ready, drop data");
    99ca:	4826      	ldr	r0, [pc, #152]	; (9a64 <cdc_acm_poll_out+0xb0>)
    99cc:	6803      	ldr	r3, [r0, #0]
    99ce:	f003 0307 	and.w	r3, r3, #7
    99d2:	2b02      	cmp	r3, #2
    99d4:	d909      	bls.n	99ea <cdc_acm_poll_out+0x36>
    99d6:	4b24      	ldr	r3, [pc, #144]	; (9a68 <cdc_acm_poll_out+0xb4>)
    99d8:	9308      	str	r3, [sp, #32]
    99da:	2302      	movs	r3, #2
    99dc:	9303      	str	r3, [sp, #12]
    99de:	9307      	str	r3, [sp, #28]
    99e0:	aa07      	add	r2, sp, #28
    99e2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    99e6:	f01d fadc 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    99ea:	b00b      	add	sp, #44	; 0x2c
    99ec:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    99ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    99f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    99f4:	2201      	movs	r2, #1
    99f6:	f10d 0107 	add.w	r1, sp, #7
    99fa:	f01b fcd7 	bl	253ac <ring_buf_put>
    99fe:	bb58      	cbnz	r0, 9a58 <cdc_acm_poll_out+0xa4>
		LOG_INF("Ring buffer full, drain buffer");
    9a00:	4d18      	ldr	r5, [pc, #96]	; (9a64 <cdc_acm_poll_out+0xb0>)
    9a02:	682b      	ldr	r3, [r5, #0]
    9a04:	f003 0307 	and.w	r3, r3, #7
    9a08:	2b02      	cmp	r3, #2
    9a0a:	d90a      	bls.n	9a22 <cdc_acm_poll_out+0x6e>
    9a0c:	4b17      	ldr	r3, [pc, #92]	; (9a6c <cdc_acm_poll_out+0xb8>)
    9a0e:	9308      	str	r3, [sp, #32]
    9a10:	aa07      	add	r2, sp, #28
    9a12:	2302      	movs	r3, #2
    9a14:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    9a18:	4628      	mov	r0, r5
    9a1a:	9303      	str	r3, [sp, #12]
    9a1c:	9307      	str	r3, [sp, #28]
    9a1e:	f01d fac0 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    9a22:	6f20      	ldr	r0, [r4, #112]	; 0x70
    9a24:	2201      	movs	r2, #1
    9a26:	2100      	movs	r1, #0
    9a28:	f01b fd28 	bl	2547c <ring_buf_get>
    9a2c:	b960      	cbnz	r0, 9a48 <cdc_acm_poll_out+0x94>
			LOG_ERR("Failed to drain buffer");
    9a2e:	682b      	ldr	r3, [r5, #0]
    9a30:	075b      	lsls	r3, r3, #29
    9a32:	d0da      	beq.n	99ea <cdc_acm_poll_out+0x36>
    9a34:	4b0e      	ldr	r3, [pc, #56]	; (9a70 <cdc_acm_poll_out+0xbc>)
    9a36:	9308      	str	r3, [sp, #32]
    9a38:	2302      	movs	r3, #2
    9a3a:	480a      	ldr	r0, [pc, #40]	; (9a64 <cdc_acm_poll_out+0xb0>)
    9a3c:	9303      	str	r3, [sp, #12]
    9a3e:	9307      	str	r3, [sp, #28]
    9a40:	aa07      	add	r2, sp, #28
    9a42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9a46:	e7ce      	b.n	99e6 <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    9a48:	6f20      	ldr	r0, [r4, #112]	; 0x70
    9a4a:	2201      	movs	r2, #1
    9a4c:	f10d 0107 	add.w	r1, sp, #7
    9a50:	f01b fcac 	bl	253ac <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    9a54:	2800      	cmp	r0, #0
    9a56:	d0ea      	beq.n	9a2e <cdc_acm_poll_out+0x7a>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    9a58:	f104 0118 	add.w	r1, r4, #24
    9a5c:	4805      	ldr	r0, [pc, #20]	; (9a74 <cdc_acm_poll_out+0xc0>)
    9a5e:	f021 fec3 	bl	2b7e8 <k_work_submit_to_queue>
    9a62:	e7c2      	b.n	99ea <cdc_acm_poll_out+0x36>
    9a64:	20000a48 	.word	0x20000a48
    9a68:	0002f943 	.word	0x0002f943
    9a6c:	0002f963 	.word	0x0002f963
    9a70:	0002f982 	.word	0x0002f982
    9a74:	20001680 	.word	0x20001680

00009a78 <cdc_acm_read_cb>:
{
    9a78:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (size <= 0) {
    9a7a:	1e0d      	subs	r5, r1, #0
{
    9a7c:	b08b      	sub	sp, #44	; 0x2c
    9a7e:	4606      	mov	r6, r0
    9a80:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    9a82:	f102 072c 	add.w	r7, r2, #44	; 0x2c
	if (size <= 0) {
    9a86:	dd24      	ble.n	9ad2 <cdc_acm_read_cb+0x5a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    9a88:	462a      	mov	r2, r5
    9a8a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    9a8c:	4639      	mov	r1, r7
    9a8e:	f01b fc8d 	bl	253ac <ring_buf_put>
	if (wrote < size) {
    9a92:	4285      	cmp	r5, r0
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    9a94:	4602      	mov	r2, r0
	if (wrote < size) {
    9a96:	d90f      	bls.n	9ab8 <cdc_acm_read_cb+0x40>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    9a98:	4813      	ldr	r0, [pc, #76]	; (9ae8 <cdc_acm_read_cb+0x70>)
    9a9a:	6803      	ldr	r3, [r0, #0]
    9a9c:	075b      	lsls	r3, r3, #29
    9a9e:	d00b      	beq.n	9ab8 <cdc_acm_read_cb+0x40>
    9aa0:	4b12      	ldr	r3, [pc, #72]	; (9aec <cdc_acm_read_cb+0x74>)
    9aa2:	9308      	str	r3, [sp, #32]
    9aa4:	1aad      	subs	r5, r5, r2
    9aa6:	2303      	movs	r3, #3
    9aa8:	aa07      	add	r2, sp, #28
    9aaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9aae:	9509      	str	r5, [sp, #36]	; 0x24
    9ab0:	9303      	str	r3, [sp, #12]
    9ab2:	9307      	str	r3, [sp, #28]
    9ab4:	f01d fa75 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
	dev_data->rx_ready = true;
    9ab8:	2301      	movs	r3, #1
    9aba:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    9abe:	6823      	ldr	r3, [r4, #0]
    9ac0:	b13b      	cbz	r3, 9ad2 <cdc_acm_read_cb+0x5a>
    9ac2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    9ac6:	b123      	cbz	r3, 9ad2 <cdc_acm_read_cb+0x5a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    9ac8:	4809      	ldr	r0, [pc, #36]	; (9af0 <cdc_acm_read_cb+0x78>)
    9aca:	f104 0108 	add.w	r1, r4, #8
    9ace:	f021 fe8b 	bl	2b7e8 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    9ad2:	4b08      	ldr	r3, [pc, #32]	; (9af4 <cdc_acm_read_cb+0x7c>)
    9ad4:	9300      	str	r3, [sp, #0]
    9ad6:	9401      	str	r4, [sp, #4]
    9ad8:	2301      	movs	r3, #1
    9ada:	2240      	movs	r2, #64	; 0x40
    9adc:	4639      	mov	r1, r7
    9ade:	4630      	mov	r0, r6
    9ae0:	f7ff fde4 	bl	96ac <usb_transfer>
}
    9ae4:	b00b      	add	sp, #44	; 0x2c
    9ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ae8:	20000a48 	.word	0x20000a48
    9aec:	0002f999 	.word	0x0002f999
    9af0:	20001680 	.word	0x20001680
    9af4:	00009a79 	.word	0x00009a79

00009af8 <cdc_acm_dev_status_cb>:
{
    9af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9afa:	4605      	mov	r5, r0
    9afc:	b089      	sub	sp, #36	; 0x24
    9afe:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    9b00:	4601      	mov	r1, r0
    9b02:	485f      	ldr	r0, [pc, #380]	; (9c80 <cdc_acm_dev_status_cb+0x188>)
    9b04:	f01d f9aa 	bl	26e5c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    9b08:	4604      	mov	r4, r0
    9b0a:	b988      	cbnz	r0, 9b30 <cdc_acm_dev_status_cb+0x38>
		LOG_WRN("Device data not found for cfg %p", cfg);
    9b0c:	485d      	ldr	r0, [pc, #372]	; (9c84 <cdc_acm_dev_status_cb+0x18c>)
    9b0e:	6803      	ldr	r3, [r0, #0]
    9b10:	f013 0f06 	tst.w	r3, #6
    9b14:	d00a      	beq.n	9b2c <cdc_acm_dev_status_cb+0x34>
    9b16:	4b5c      	ldr	r3, [pc, #368]	; (9c88 <cdc_acm_dev_status_cb+0x190>)
    9b18:	aa05      	add	r2, sp, #20
    9b1a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    9b1e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9b22:	2303      	movs	r3, #3
    9b24:	9301      	str	r3, [sp, #4]
    9b26:	9305      	str	r3, [sp, #20]
    9b28:	f01d fa3b 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
}
    9b2c:	b009      	add	sp, #36	; 0x24
    9b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    9b30:	4605      	mov	r5, r0
	switch (status) {
    9b32:	1e71      	subs	r1, r6, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    9b34:	f855 3980 	ldr.w	r3, [r5], #-128
    9b38:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    9b3a:	2905      	cmp	r1, #5
    9b3c:	d8f6      	bhi.n	9b2c <cdc_acm_dev_status_cb+0x34>
    9b3e:	a301      	add	r3, pc, #4	; (adr r3, 9b44 <cdc_acm_dev_status_cb+0x4c>)
    9b40:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    9b44:	00009be1 	.word	0x00009be1
    9b48:	00009b2d 	.word	0x00009b2d
    9b4c:	00009b5d 	.word	0x00009b5d
    9b50:	00009bc1 	.word	0x00009bc1
    9b54:	00009bed 	.word	0x00009bed
    9b58:	00009c15 	.word	0x00009c15
		LOG_INF("Device configured");
    9b5c:	4849      	ldr	r0, [pc, #292]	; (9c84 <cdc_acm_dev_status_cb+0x18c>)
    9b5e:	6803      	ldr	r3, [r0, #0]
    9b60:	f003 0307 	and.w	r3, r3, #7
    9b64:	2b02      	cmp	r3, #2
    9b66:	d909      	bls.n	9b7c <cdc_acm_dev_status_cb+0x84>
    9b68:	4b48      	ldr	r3, [pc, #288]	; (9c8c <cdc_acm_dev_status_cb+0x194>)
    9b6a:	9306      	str	r3, [sp, #24]
    9b6c:	aa05      	add	r2, sp, #20
    9b6e:	2302      	movs	r3, #2
    9b70:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    9b74:	9301      	str	r3, [sp, #4]
    9b76:	9305      	str	r3, [sp, #20]
    9b78:	f01d fa13 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
		if (!dev_data->configured) {
    9b7c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    9b80:	b939      	cbnz	r1, 9b92 <cdc_acm_dev_status_cb+0x9a>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    9b82:	6a3b      	ldr	r3, [r7, #32]
    9b84:	462a      	mov	r2, r5
    9b86:	7b18      	ldrb	r0, [r3, #12]
    9b88:	f7ff ff76 	bl	9a78 <cdc_acm_read_cb>
			dev_data->configured = true;
    9b8c:	2301      	movs	r3, #1
    9b8e:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    9b92:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    9b96:	2b00      	cmp	r3, #0
    9b98:	d1c8      	bne.n	9b2c <cdc_acm_dev_status_cb+0x34>
			dev_data->tx_ready = true;
    9b9a:	2301      	movs	r3, #1
    9b9c:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    9ba0:	f854 3c80 	ldr.w	r3, [r4, #-128]
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d0c1      	beq.n	9b2c <cdc_acm_dev_status_cb+0x34>
    9ba8:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    9bac:	2b00      	cmp	r3, #0
    9bae:	d0bd      	beq.n	9b2c <cdc_acm_dev_status_cb+0x34>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    9bb0:	4837      	ldr	r0, [pc, #220]	; (9c90 <cdc_acm_dev_status_cb+0x198>)
    9bb2:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
}
    9bb6:	b009      	add	sp, #36	; 0x24
    9bb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    9bbc:	f021 be14 	b.w	2b7e8 <k_work_submit_to_queue>
		LOG_INF("Device disconnected");
    9bc0:	4830      	ldr	r0, [pc, #192]	; (9c84 <cdc_acm_dev_status_cb+0x18c>)
    9bc2:	6803      	ldr	r3, [r0, #0]
    9bc4:	f003 0307 	and.w	r3, r3, #7
    9bc8:	2b02      	cmp	r3, #2
    9bca:	d909      	bls.n	9be0 <cdc_acm_dev_status_cb+0xe8>
    9bcc:	4b31      	ldr	r3, [pc, #196]	; (9c94 <cdc_acm_dev_status_cb+0x19c>)
    9bce:	9306      	str	r3, [sp, #24]
    9bd0:	aa05      	add	r2, sp, #20
    9bd2:	2302      	movs	r3, #2
    9bd4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    9bd8:	9301      	str	r3, [sp, #4]
    9bda:	9305      	str	r3, [sp, #20]
    9bdc:	f01d f9e1 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
		cdc_acm_reset_port(dev_data);
    9be0:	4628      	mov	r0, r5
}
    9be2:	b009      	add	sp, #36	; 0x24
    9be4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    9be8:	f7ff be82 	b.w	98f0 <cdc_acm_reset_port>
		LOG_INF("Device suspended");
    9bec:	4825      	ldr	r0, [pc, #148]	; (9c84 <cdc_acm_dev_status_cb+0x18c>)
    9bee:	6803      	ldr	r3, [r0, #0]
    9bf0:	f003 0307 	and.w	r3, r3, #7
    9bf4:	2b02      	cmp	r3, #2
    9bf6:	d909      	bls.n	9c0c <cdc_acm_dev_status_cb+0x114>
    9bf8:	4b27      	ldr	r3, [pc, #156]	; (9c98 <cdc_acm_dev_status_cb+0x1a0>)
    9bfa:	9306      	str	r3, [sp, #24]
    9bfc:	aa05      	add	r2, sp, #20
    9bfe:	2302      	movs	r3, #2
    9c00:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    9c04:	9301      	str	r3, [sp, #4]
    9c06:	9305      	str	r3, [sp, #20]
    9c08:	f01d f9cb 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    9c0c:	2301      	movs	r3, #1
    9c0e:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    9c12:	e78b      	b.n	9b2c <cdc_acm_dev_status_cb+0x34>
		LOG_INF("Device resumed");
    9c14:	4e1b      	ldr	r6, [pc, #108]	; (9c84 <cdc_acm_dev_status_cb+0x18c>)
    9c16:	6833      	ldr	r3, [r6, #0]
    9c18:	f003 0307 	and.w	r3, r3, #7
    9c1c:	2b02      	cmp	r3, #2
    9c1e:	d90a      	bls.n	9c36 <cdc_acm_dev_status_cb+0x13e>
    9c20:	4b1e      	ldr	r3, [pc, #120]	; (9c9c <cdc_acm_dev_status_cb+0x1a4>)
    9c22:	9306      	str	r3, [sp, #24]
    9c24:	aa05      	add	r2, sp, #20
    9c26:	2302      	movs	r3, #2
    9c28:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    9c2c:	4630      	mov	r0, r6
    9c2e:	9301      	str	r3, [sp, #4]
    9c30:	9305      	str	r3, [sp, #20]
    9c32:	f01d f9b6 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    9c36:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	f43f af76 	beq.w	9b2c <cdc_acm_dev_status_cb+0x34>
			LOG_INF("from suspend");
    9c40:	6833      	ldr	r3, [r6, #0]
    9c42:	f003 0307 	and.w	r3, r3, #7
    9c46:	2b02      	cmp	r3, #2
    9c48:	d90a      	bls.n	9c60 <cdc_acm_dev_status_cb+0x168>
    9c4a:	4b15      	ldr	r3, [pc, #84]	; (9ca0 <cdc_acm_dev_status_cb+0x1a8>)
    9c4c:	9306      	str	r3, [sp, #24]
    9c4e:	480d      	ldr	r0, [pc, #52]	; (9c84 <cdc_acm_dev_status_cb+0x18c>)
    9c50:	2302      	movs	r3, #2
    9c52:	aa05      	add	r2, sp, #20
    9c54:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    9c58:	9301      	str	r3, [sp, #4]
    9c5a:	9305      	str	r3, [sp, #20]
    9c5c:	f01d f9a1 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
			if (dev_data->configured) {
    9c60:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    9c64:	2100      	movs	r1, #0
    9c66:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    9c6a:	2b00      	cmp	r3, #0
    9c6c:	f43f af5e 	beq.w	9b2c <cdc_acm_dev_status_cb+0x34>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    9c70:	6a3b      	ldr	r3, [r7, #32]
    9c72:	7b18      	ldrb	r0, [r3, #12]
    9c74:	462a      	mov	r2, r5
}
    9c76:	b009      	add	sp, #36	; 0x24
    9c78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    9c7c:	f7ff befc 	b.w	9a78 <cdc_acm_read_cb>
    9c80:	200029e0 	.word	0x200029e0
    9c84:	20000a48 	.word	0x20000a48
    9c88:	0002f9ba 	.word	0x0002f9ba
    9c8c:	0002f9db 	.word	0x0002f9db
    9c90:	20001680 	.word	0x20001680
    9c94:	0002f9ed 	.word	0x0002f9ed
    9c98:	0002fa01 	.word	0x0002fa01
    9c9c:	0002fa12 	.word	0x0002fa12
    9ca0:	0002fa21 	.word	0x0002fa21

00009ca4 <cdc_acm_fifo_fill>:
{
    9ca4:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9ca6:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    9ca8:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
{
    9cac:	b088      	sub	sp, #32
    9cae:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    9cb0:	b113      	cbz	r3, 9cb8 <cdc_acm_fifo_fill+0x14>
    9cb2:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    9cb6:	b193      	cbz	r3, 9cde <cdc_acm_fifo_fill+0x3a>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    9cb8:	4819      	ldr	r0, [pc, #100]	; (9d20 <cdc_acm_fifo_fill+0x7c>)
    9cba:	6804      	ldr	r4, [r0, #0]
    9cbc:	f014 0406 	ands.w	r4, r4, #6
    9cc0:	d02b      	beq.n	9d1a <cdc_acm_fifo_fill+0x76>
    9cc2:	4b18      	ldr	r3, [pc, #96]	; (9d24 <cdc_acm_fifo_fill+0x80>)
    9cc4:	aa05      	add	r2, sp, #20
    9cc6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    9cca:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9cce:	2303      	movs	r3, #3
    9cd0:	9301      	str	r3, [sp, #4]
    9cd2:	9305      	str	r3, [sp, #20]
    9cd4:	f01d f965 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
		return 0;
    9cd8:	2000      	movs	r0, #0
}
    9cda:	b008      	add	sp, #32
    9cdc:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    9cde:	6f30      	ldr	r0, [r6, #112]	; 0x70
	dev_data->tx_ready = false;
    9ce0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    9ce4:	f01b fb62 	bl	253ac <ring_buf_put>
	if (wrote < len) {
    9ce8:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    9cea:	4604      	mov	r4, r0
	if (wrote < len) {
    9cec:	d210      	bcs.n	9d10 <cdc_acm_fifo_fill+0x6c>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    9cee:	480c      	ldr	r0, [pc, #48]	; (9d20 <cdc_acm_fifo_fill+0x7c>)
    9cf0:	6803      	ldr	r3, [r0, #0]
    9cf2:	f013 0f06 	tst.w	r3, #6
    9cf6:	d00b      	beq.n	9d10 <cdc_acm_fifo_fill+0x6c>
    9cf8:	4b0b      	ldr	r3, [pc, #44]	; (9d28 <cdc_acm_fifo_fill+0x84>)
    9cfa:	9306      	str	r3, [sp, #24]
    9cfc:	1b2d      	subs	r5, r5, r4
    9cfe:	2303      	movs	r3, #3
    9d00:	aa05      	add	r2, sp, #20
    9d02:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9d06:	9507      	str	r5, [sp, #28]
    9d08:	9301      	str	r3, [sp, #4]
    9d0a:	9305      	str	r3, [sp, #20]
    9d0c:	f01d f949 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    9d10:	4806      	ldr	r0, [pc, #24]	; (9d2c <cdc_acm_fifo_fill+0x88>)
    9d12:	f106 0118 	add.w	r1, r6, #24
    9d16:	f021 fd67 	bl	2b7e8 <k_work_submit_to_queue>
		return 0;
    9d1a:	4620      	mov	r0, r4
    9d1c:	e7dd      	b.n	9cda <cdc_acm_fifo_fill+0x36>
    9d1e:	bf00      	nop
    9d20:	20000a48 	.word	0x20000a48
    9d24:	0002fa2e 	.word	0x0002fa2e
    9d28:	0002f999 	.word	0x0002f999
    9d2c:	20001680 	.word	0x20001680

00009d30 <cdc_acm_int_in>:
{
    9d30:	b510      	push	{r4, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    9d32:	4601      	mov	r1, r0
{
    9d34:	b088      	sub	sp, #32
    9d36:	4604      	mov	r4, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    9d38:	480c      	ldr	r0, [pc, #48]	; (9d6c <cdc_acm_int_in+0x3c>)
    9d3a:	f01d f8a9 	bl	26e90 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    9d3e:	b988      	cbnz	r0, 9d64 <cdc_acm_int_in+0x34>
		LOG_WRN("Device data not found for endpoint %u", ep);
    9d40:	480b      	ldr	r0, [pc, #44]	; (9d70 <cdc_acm_int_in+0x40>)
    9d42:	6803      	ldr	r3, [r0, #0]
    9d44:	f013 0f06 	tst.w	r3, #6
    9d48:	d00a      	beq.n	9d60 <cdc_acm_int_in+0x30>
    9d4a:	4b0a      	ldr	r3, [pc, #40]	; (9d74 <cdc_acm_int_in+0x44>)
    9d4c:	aa05      	add	r2, sp, #20
    9d4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    9d52:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9d56:	2303      	movs	r3, #3
    9d58:	9301      	str	r3, [sp, #4]
    9d5a:	9305      	str	r3, [sp, #20]
    9d5c:	f01d f921 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
}
    9d60:	b008      	add	sp, #32
    9d62:	bd10      	pop	{r4, pc}
	dev_data->notification_sent = 1U;
    9d64:	2301      	movs	r3, #1
    9d66:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
    9d6a:	e7f9      	b.n	9d60 <cdc_acm_int_in+0x30>
    9d6c:	200029e0 	.word	0x200029e0
    9d70:	20000a48 	.word	0x20000a48
    9d74:	0002fa60 	.word	0x0002fa60

00009d78 <cdc_acm_class_handle_req>:
{
    9d78:	b570      	push	{r4, r5, r6, lr}
    9d7a:	4604      	mov	r4, r0
    9d7c:	b088      	sub	sp, #32
    9d7e:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    9d80:	7901      	ldrb	r1, [r0, #4]
    9d82:	481c      	ldr	r0, [pc, #112]	; (9df4 <cdc_acm_class_handle_req+0x7c>)
{
    9d84:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    9d86:	f01d f875 	bl	26e74 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    9d8a:	b998      	cbnz	r0, 9db4 <cdc_acm_class_handle_req+0x3c>
		LOG_WRN("Device data not found for interface %u",
    9d8c:	481a      	ldr	r0, [pc, #104]	; (9df8 <cdc_acm_class_handle_req+0x80>)
    9d8e:	6803      	ldr	r3, [r0, #0]
    9d90:	f013 0f06 	tst.w	r3, #6
    9d94:	d00b      	beq.n	9dae <cdc_acm_class_handle_req+0x36>
    9d96:	88a3      	ldrh	r3, [r4, #4]
    9d98:	4a18      	ldr	r2, [pc, #96]	; (9dfc <cdc_acm_class_handle_req+0x84>)
    9d9a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9d9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9da2:	2303      	movs	r3, #3
    9da4:	aa05      	add	r2, sp, #20
    9da6:	9301      	str	r3, [sp, #4]
    9da8:	9305      	str	r3, [sp, #20]
    9daa:	f01d f8fa 	bl	26fa2 <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    9dae:	f06f 0012 	mvn.w	r0, #18
    9db2:	e011      	b.n	9dd8 <cdc_acm_class_handle_req+0x60>
	if (usb_reqtype_is_to_device(setup)) {
    9db4:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    9db8:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    9dba:	2a00      	cmp	r2, #0
    9dbc:	db12      	blt.n	9de4 <cdc_acm_class_handle_req+0x6c>
		switch (setup->bRequest) {
    9dbe:	2b20      	cmp	r3, #32
    9dc0:	d004      	beq.n	9dcc <cdc_acm_class_handle_req+0x54>
    9dc2:	2b22      	cmp	r3, #34	; 0x22
    9dc4:	d00a      	beq.n	9ddc <cdc_acm_class_handle_req+0x64>
	return -ENOTSUP;
    9dc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9dca:	e005      	b.n	9dd8 <cdc_acm_class_handle_req+0x60>
			memcpy(&dev_data->line_coding, *data,
    9dcc:	6829      	ldr	r1, [r5, #0]
    9dce:	2207      	movs	r2, #7
    9dd0:	380c      	subs	r0, #12
    9dd2:	f01e fbf0 	bl	285b6 <memcpy>
			return 0;
    9dd6:	2000      	movs	r0, #0
}
    9dd8:	b008      	add	sp, #32
    9dda:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    9ddc:	8863      	ldrh	r3, [r4, #2]
    9dde:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    9de2:	e7f8      	b.n	9dd6 <cdc_acm_class_handle_req+0x5e>
		if (setup->bRequest == GET_LINE_CODING) {
    9de4:	2b21      	cmp	r3, #33	; 0x21
    9de6:	d1ee      	bne.n	9dc6 <cdc_acm_class_handle_req+0x4e>
			*data = (uint8_t *)(&dev_data->line_coding);
    9de8:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    9dea:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    9dec:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    9dee:	6033      	str	r3, [r6, #0]
    9df0:	e7f1      	b.n	9dd6 <cdc_acm_class_handle_req+0x5e>
    9df2:	bf00      	nop
    9df4:	200029e0 	.word	0x200029e0
    9df8:	20000a48 	.word	0x20000a48
    9dfc:	0002fa86 	.word	0x0002fa86

00009e00 <cdc_acm_init>:
{
    9e00:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9e02:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    9e04:	2300      	movs	r3, #0
    9e06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    9e0a:	4b0c      	ldr	r3, [pc, #48]	; (9e3c <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    9e0c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    9e10:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    9e12:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    9e16:	b969      	cbnz	r1, 9e34 <cdc_acm_init+0x34>
	list->head = node;
    9e18:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    9e1c:	f104 0008 	add.w	r0, r4, #8
    9e20:	4907      	ldr	r1, [pc, #28]	; (9e40 <cdc_acm_init+0x40>)
    9e22:	f021 fcd8 	bl	2b7d6 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    9e26:	f104 0018 	add.w	r0, r4, #24
    9e2a:	4906      	ldr	r1, [pc, #24]	; (9e44 <cdc_acm_init+0x44>)
    9e2c:	f021 fcd3 	bl	2b7d6 <k_work_init>
}
    9e30:	2000      	movs	r0, #0
    9e32:	bd10      	pop	{r4, pc}
	parent->next = child;
    9e34:	600a      	str	r2, [r1, #0]
	list->tail = node;
    9e36:	605a      	str	r2, [r3, #4]
}
    9e38:	e7f0      	b.n	9e1c <cdc_acm_init+0x1c>
    9e3a:	bf00      	nop
    9e3c:	200029e0 	.word	0x200029e0
    9e40:	00026ee7 	.word	0x00026ee7
    9e44:	00009961 	.word	0x00009961

00009e48 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    9e48:	b530      	push	{r4, r5, lr}
    9e4a:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    9e4c:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9e4e:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    9e50:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    9e54:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    9e56:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    9e58:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    9e5c:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    9e5e:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    9e62:	2002      	movs	r0, #2
    9e64:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    9e68:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    9e6a:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    9e6e:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    9e72:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    9e74:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    9e78:	220a      	movs	r2, #10
    9e7a:	a901      	add	r1, sp, #4
    9e7c:	f7fe ffca 	bl	8e14 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    9e80:	4c05      	ldr	r4, [pc, #20]	; (9e98 <cdc_acm_send_notification.isra.0+0x50>)
    9e82:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    9e86:	b923      	cbnz	r3, 9e92 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    9e88:	2001      	movs	r0, #1
    9e8a:	f021 fe7e 	bl	2bb8a <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    9e8e:	3c01      	subs	r4, #1
    9e90:	d1f7      	bne.n	9e82 <cdc_acm_send_notification.isra.0+0x3a>
}
    9e92:	b005      	add	sp, #20
    9e94:	bd30      	pop	{r4, r5, pc}
    9e96:	bf00      	nop
    9e98:	000186a1 	.word	0x000186a1

00009e9c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    9e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    9e9e:	4d09      	ldr	r5, [pc, #36]	; (9ec4 <z_usb_work_q_init+0x28>)
    9ea0:	4909      	ldr	r1, [pc, #36]	; (9ec8 <z_usb_work_q_init+0x2c>)
    9ea2:	2400      	movs	r4, #0
    9ea4:	9400      	str	r4, [sp, #0]
    9ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9eae:	4628      	mov	r0, r5
    9eb0:	f019 ff76 	bl	23da0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    9eb4:	4905      	ldr	r1, [pc, #20]	; (9ecc <z_usb_work_q_init+0x30>)
    9eb6:	4628      	mov	r0, r5
    9eb8:	f019 fbba 	bl	23630 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    9ebc:	4620      	mov	r0, r4
    9ebe:	b003      	add	sp, #12
    9ec0:	bd30      	pop	{r4, r5, pc}
    9ec2:	bf00      	nop
    9ec4:	20001680 	.word	0x20001680
    9ec8:	20006540 	.word	0x20006540
    9ecc:	0002fac3 	.word	0x0002fac3

00009ed0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    9ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ed4:	4605      	mov	r5, r0
	__asm__ volatile(
    9ed6:	f04f 0320 	mov.w	r3, #32
    9eda:	f3ef 8611 	mrs	r6, BASEPRI
    9ede:	f383 8812 	msr	BASEPRI_MAX, r3
    9ee2:	f3bf 8f6f 	isb	sy
	return list->head;
    9ee6:	4b0e      	ldr	r3, [pc, #56]	; (9f20 <pm_state_notify+0x50>)
    9ee8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9eea:	b19c      	cbz	r4, 9f14 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9eec:	4f0d      	ldr	r7, [pc, #52]	; (9f24 <pm_state_notify+0x54>)
    9eee:	f8df 8038 	ldr.w	r8, [pc, #56]	; 9f28 <pm_state_notify+0x58>
    9ef2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    9ef6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    9efa:	2d00      	cmp	r5, #0
    9efc:	bf08      	it	eq
    9efe:	4613      	moveq	r3, r2
		if (callback) {
    9f00:	b12b      	cbz	r3, 9f0e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9f02:	f898 2014 	ldrb.w	r2, [r8, #20]
    9f06:	fb09 f202 	mul.w	r2, r9, r2
    9f0a:	5cb8      	ldrb	r0, [r7, r2]
    9f0c:	4798      	blx	r3
	return node->next;
    9f0e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9f10:	2c00      	cmp	r4, #0
    9f12:	d1f0      	bne.n	9ef6 <pm_state_notify+0x26>
	__asm__ volatile(
    9f14:	f386 8811 	msr	BASEPRI, r6
    9f18:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    9f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9f20:	200029e8 	.word	0x200029e8
    9f24:	200029f0 	.word	0x200029f0
    9f28:	200047a8 	.word	0x200047a8

00009f2c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f2c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    9f2e:	2301      	movs	r3, #1
    9f30:	f000 001f 	and.w	r0, r0, #31
    9f34:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9f38:	4b07      	ldr	r3, [pc, #28]	; (9f58 <atomic_clear_bit.constprop.0+0x2c>)
    9f3a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f3e:	43c0      	mvns	r0, r0
    9f40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9f44:	e853 2f00 	ldrex	r2, [r3]
    9f48:	4002      	ands	r2, r0
    9f4a:	e843 2100 	strex	r1, r2, [r3]
    9f4e:	2900      	cmp	r1, #0
    9f50:	d1f8      	bne.n	9f44 <atomic_clear_bit.constprop.0+0x18>
    9f52:	f3bf 8f5b 	dmb	ish
}
    9f56:	4770      	bx	lr
    9f58:	200029fc 	.word	0x200029fc

00009f5c <pm_system_resume>:

void pm_system_resume(void)
{
    9f5c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    9f5e:	4b1d      	ldr	r3, [pc, #116]	; (9fd4 <pm_system_resume+0x78>)
    9f60:	7d1c      	ldrb	r4, [r3, #20]
    9f62:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    9f66:	f004 031f 	and.w	r3, r4, #31
    9f6a:	2201      	movs	r2, #1
    9f6c:	409a      	lsls	r2, r3
    9f6e:	4b1a      	ldr	r3, [pc, #104]	; (9fd8 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f70:	0961      	lsrs	r1, r4, #5
{
    9f72:	b085      	sub	sp, #20
    9f74:	43d0      	mvns	r0, r2
    9f76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9f7a:	e853 1f00 	ldrex	r1, [r3]
    9f7e:	ea01 0500 	and.w	r5, r1, r0
    9f82:	e843 5c00 	strex	ip, r5, [r3]
    9f86:	f1bc 0f00 	cmp.w	ip, #0
    9f8a:	d1f6      	bne.n	9f7a <pm_system_resume+0x1e>
    9f8c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    9f90:	4211      	tst	r1, r2
    9f92:	d017      	beq.n	9fc4 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    9f94:	4d11      	ldr	r5, [pc, #68]	; (9fdc <pm_system_resume+0x80>)
    9f96:	220c      	movs	r2, #12
    9f98:	fb02 5204 	mla	r2, r2, r4, r5
    9f9c:	ca07      	ldmia	r2, {r0, r1, r2}
    9f9e:	ab01      	add	r3, sp, #4
    9fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    9fa4:	4a0e      	ldr	r2, [pc, #56]	; (9fe0 <pm_system_resume+0x84>)
    9fa6:	b17a      	cbz	r2, 9fc8 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    9fa8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    9fac:	f01e fb37 	bl	2861e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    9fb0:	2000      	movs	r0, #0
    9fb2:	f7ff ff8d 	bl	9ed0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    9fb6:	230c      	movs	r3, #12
    9fb8:	435c      	muls	r4, r3
    9fba:	192a      	adds	r2, r5, r4
    9fbc:	2300      	movs	r3, #0
    9fbe:	512b      	str	r3, [r5, r4]
    9fc0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    9fc4:	b005      	add	sp, #20
    9fc6:	bd30      	pop	{r4, r5, pc}
    9fc8:	f382 8811 	msr	BASEPRI, r2
    9fcc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    9fd0:	e7ee      	b.n	9fb0 <pm_system_resume+0x54>
    9fd2:	bf00      	nop
    9fd4:	200047a8 	.word	0x200047a8
    9fd8:	20002a00 	.word	0x20002a00
    9fdc:	200029f0 	.word	0x200029f0
    9fe0:	0002861f 	.word	0x0002861f

00009fe4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    9fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    9fe8:	4b35      	ldr	r3, [pc, #212]	; (a0c0 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9fea:	4a36      	ldr	r2, [pc, #216]	; (a0c4 <pm_system_suspend+0xe0>)
    9fec:	7d1c      	ldrb	r4, [r3, #20]
    9fee:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9ff2:	0963      	lsrs	r3, r4, #5
    9ff4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    9ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ffc:	4d32      	ldr	r5, [pc, #200]	; (a0c8 <pm_system_suspend+0xe4>)
    9ffe:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a002:	f004 081f 	and.w	r8, r4, #31
    a006:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    a00a:	f013 0f01 	tst.w	r3, #1
{
    a00e:	b085      	sub	sp, #20
    a010:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    a012:	d10a      	bne.n	a02a <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    a014:	4601      	mov	r1, r0
    a016:	4620      	mov	r0, r4
    a018:	f000 f876 	bl	a108 <pm_policy_next_state>
		if (info != NULL) {
    a01c:	b128      	cbz	r0, a02a <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    a01e:	c807      	ldmia	r0, {r0, r1, r2}
    a020:	230c      	movs	r3, #12
    a022:	fb03 5304 	mla	r3, r3, r4, r5
    a026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    a02a:	230c      	movs	r3, #12
    a02c:	4363      	muls	r3, r4
    a02e:	18ea      	adds	r2, r5, r3
    a030:	5cee      	ldrb	r6, [r5, r3]
    a032:	b936      	cbnz	r6, a042 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    a034:	4620      	mov	r0, r4
    a036:	f7ff ff79 	bl	9f2c <atomic_clear_bit.constprop.0>
		ret = false;
    a03a:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    a03c:	b005      	add	sp, #20
    a03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    a042:	1c7b      	adds	r3, r7, #1
    a044:	d00f      	beq.n	a066 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    a046:	f8d2 c008 	ldr.w	ip, [r2, #8]
    a04a:	4820      	ldr	r0, [pc, #128]	; (a0cc <pm_system_suspend+0xe8>)
    a04c:	4a20      	ldr	r2, [pc, #128]	; (a0d0 <pm_system_suspend+0xec>)
    a04e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a052:	2100      	movs	r1, #0
    a054:	2300      	movs	r3, #0
    a056:	fbec 0106 	umlal	r0, r1, ip, r6
    a05a:	f7f7 f851 	bl	1100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    a05e:	2101      	movs	r1, #1
    a060:	1a38      	subs	r0, r7, r0
    a062:	f021 fd72 	bl	2bb4a <z_set_timeout_expiry>
	k_sched_lock();
    a066:	f019 ff8f 	bl	23f88 <k_sched_lock>
	pm_state_notify(true);
    a06a:	2001      	movs	r0, #1
    a06c:	f7ff ff30 	bl	9ed0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a070:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    a074:	2301      	movs	r3, #1
    a076:	fa03 f808 	lsl.w	r8, r3, r8
    a07a:	4b16      	ldr	r3, [pc, #88]	; (a0d4 <pm_system_suspend+0xf0>)
    a07c:	4499      	add	r9, r3
    a07e:	e859 3f00 	ldrex	r3, [r9]
    a082:	ea43 0308 	orr.w	r3, r3, r8
    a086:	e849 3200 	strex	r2, r3, [r9]
    a08a:	2a00      	cmp	r2, #0
    a08c:	d1f7      	bne.n	a07e <pm_system_suspend+0x9a>
    a08e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    a092:	230c      	movs	r3, #12
    a094:	fb03 5504 	mla	r5, r3, r4, r5
    a098:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    a09c:	ab01      	add	r3, sp, #4
    a09e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    a0a2:	4a0d      	ldr	r2, [pc, #52]	; (a0d8 <pm_system_suspend+0xf4>)
    a0a4:	b11a      	cbz	r2, a0ae <pm_system_suspend+0xca>
		pm_power_state_set(info);
    a0a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    a0aa:	f01e faa5 	bl	285f8 <pm_power_state_set>
	pm_system_resume();
    a0ae:	f7ff ff55 	bl	9f5c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    a0b2:	4620      	mov	r0, r4
    a0b4:	f7ff ff3a 	bl	9f2c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    a0b8:	f01a f934 	bl	24324 <k_sched_unlock>
	bool ret = true;
    a0bc:	2001      	movs	r0, #1
    a0be:	e7bd      	b.n	a03c <pm_system_suspend+0x58>
    a0c0:	200047a8 	.word	0x200047a8
    a0c4:	200029fc 	.word	0x200029fc
    a0c8:	200029f0 	.word	0x200029f0
    a0cc:	000f423f 	.word	0x000f423f
    a0d0:	000f4240 	.word	0x000f4240
    a0d4:	20002a00 	.word	0x20002a00
    a0d8:	000285f9 	.word	0x000285f9

0000a0dc <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a0dc:	4b05      	ldr	r3, [pc, #20]	; (a0f4 <pm_constraint_get+0x18>)
    a0de:	f3bf 8f5b 	dmb	ish
    a0e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a0e6:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    a0ea:	fab0 f080 	clz	r0, r0
    a0ee:	0940      	lsrs	r0, r0, #5
    a0f0:	4770      	bx	lr
    a0f2:	bf00      	nop
    a0f4:	20002a04 	.word	0x20002a04

0000a0f8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    a0f8:	b908      	cbnz	r0, a0fe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    a0fa:	4b02      	ldr	r3, [pc, #8]	; (a104 <pm_state_cpu_get_all+0xc>)
    a0fc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    a0fe:	2000      	movs	r0, #0
    a100:	4770      	bx	lr
    a102:	bf00      	nop
    a104:	0002cc64 	.word	0x0002cc64

0000a108 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a10c:	b085      	sub	sp, #20
    a10e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    a110:	a903      	add	r1, sp, #12
    a112:	f7ff fff1 	bl	a0f8 <pm_state_cpu_get_all>
    a116:	f8df a074 	ldr.w	sl, [pc, #116]	; a18c <pm_policy_next_state+0x84>
    a11a:	f8df 8074 	ldr.w	r8, [pc, #116]	; a190 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    a11e:	1e44      	subs	r4, r0, #1
    a120:	b224      	sxth	r4, r4
    a122:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    a126:	f04f 0900 	mov.w	r9, #0
    a12a:	1c63      	adds	r3, r4, #1
    a12c:	d104      	bne.n	a138 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    a12e:	2500      	movs	r5, #0
}
    a130:	4628      	mov	r0, r5
    a132:	b005      	add	sp, #20
    a134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    a138:	9a03      	ldr	r2, [sp, #12]
    a13a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    a13e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    a142:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    a146:	f7ff ffc9 	bl	a0dc <pm_constraint_get>
    a14a:	b1e0      	cbz	r0, a186 <pm_policy_next_state+0x7e>
    a14c:	6868      	ldr	r0, [r5, #4]
    a14e:	f04f 0b00 	mov.w	fp, #0
    a152:	46d4      	mov	ip, sl
    a154:	4659      	mov	r1, fp
    a156:	fbe0 c107 	umlal	ip, r1, r0, r7
    a15a:	4642      	mov	r2, r8
    a15c:	464b      	mov	r3, r9
    a15e:	4660      	mov	r0, ip
    a160:	f7f6 ffce 	bl	1100 <__aeabi_uldivmod>
    a164:	9001      	str	r0, [sp, #4]
    a166:	68a8      	ldr	r0, [r5, #8]
    a168:	46d4      	mov	ip, sl
    a16a:	4659      	mov	r1, fp
    a16c:	fbe0 c107 	umlal	ip, r1, r0, r7
    a170:	4642      	mov	r2, r8
    a172:	464b      	mov	r3, r9
    a174:	4660      	mov	r0, ip
    a176:	f7f6 ffc3 	bl	1100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    a17a:	1c72      	adds	r2, r6, #1
    a17c:	d0d8      	beq.n	a130 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    a17e:	9b01      	ldr	r3, [sp, #4]
    a180:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    a182:	42b0      	cmp	r0, r6
    a184:	d9d4      	bls.n	a130 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    a186:	3c01      	subs	r4, #1
    a188:	b224      	sxth	r4, r4
    a18a:	e7ce      	b.n	a12a <pm_policy_next_state+0x22>
    a18c:	000f423f 	.word	0x000f423f
    a190:	000f4240 	.word	0x000f4240

0000a194 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    a194:	4b01      	ldr	r3, [pc, #4]	; (a19c <uECC_get_rng+0x8>)
    a196:	6818      	ldr	r0, [r3, #0]
    a198:	4770      	bx	lr
    a19a:	bf00      	nop
    a19c:	20000318 	.word	0x20000318

0000a1a0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    a1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    a1a2:	2208      	movs	r2, #8
{
    a1a4:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    a1a6:	f01d f90f 	bl	273c8 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    a1aa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    a1ac:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    a1ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    a1b0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    a1b2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    a1b4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    a1b6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    a1b8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    a1ba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    a1bc:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    a1be:	4613      	mov	r3, r2
    a1c0:	466a      	mov	r2, sp
{
    a1c2:	460c      	mov	r4, r1
    a1c4:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    a1c6:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    a1c8:	4611      	mov	r1, r2
    a1ca:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    a1cc:	e9cd 7701 	strd	r7, r7, [sp, #4]
    a1d0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    a1d2:	f01d f80f 	bl	271f4 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a1d6:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    a1d8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a1da:	4630      	mov	r0, r6
    a1dc:	f01d f80a 	bl	271f4 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    a1e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a1e2:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    a1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a1e6:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    a1e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    a1ea:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    a1ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a1ee:	4405      	add	r5, r0
	tmp[7] = 0;
    a1f0:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    a1f4:	4610      	mov	r0, r2
    a1f6:	4611      	mov	r1, r2
    a1f8:	f01c fffc 	bl	271f4 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a1fc:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    a1fe:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a200:	4630      	mov	r0, r6
    a202:	f01c fff7 	bl	271f4 <uECC_vli_add>
    a206:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    a208:	6a20      	ldr	r0, [r4, #32]
    a20a:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    a20c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a20e:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    a210:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a212:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    a214:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    a216:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    a218:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a21a:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a21c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    a21e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    a222:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a224:	f01c ffe6 	bl	271f4 <uECC_vli_add>
    a228:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    a22a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a22c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    a22e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    a230:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    a234:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    a236:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a238:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    a23a:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    a23e:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    a240:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    a244:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    a246:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    a24a:	6a20      	ldr	r0, [r4, #32]
    a24c:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    a24e:	4630      	mov	r0, r6
    a250:	f01c ffd0 	bl	271f4 <uECC_vli_add>
    a254:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    a256:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a258:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    a25a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a25c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    a25e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a260:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    a262:	6a20      	ldr	r0, [r4, #32]
    a264:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    a266:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a268:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a26a:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    a26c:	e9cd 7704 	strd	r7, r7, [sp, #16]
    a270:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a272:	f01d f8dc 	bl	2742e <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    a276:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a278:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    a27a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a27c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    a27e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a280:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    a282:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a284:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    a286:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a288:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    a28a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a28c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a28e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a290:	2308      	movs	r3, #8
    a292:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    a294:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a298:	f01d f8c9 	bl	2742e <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    a29c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a29e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    a2a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a2a2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    a2a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a2a6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    a2a8:	6a23      	ldr	r3, [r4, #32]
    a2aa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    a2ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a2ae:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    a2b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    a2b2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    a2b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a2b8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a2ba:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a2bc:	2308      	movs	r3, #8
    a2be:	4630      	mov	r0, r6
    a2c0:	f01d f8b5 	bl	2742e <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    a2c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a2c6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    a2c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    a2ca:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    a2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a2d0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    a2d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a2d4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    a2d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    a2d8:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    a2dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a2de:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a2e0:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    a2e2:	2308      	movs	r3, #8
    a2e4:	4630      	mov	r0, r6
    a2e6:	f01d f8a2 	bl	2742e <uECC_vli_sub>

	if (carry < 0) {
    a2ea:	1a2d      	subs	r5, r5, r0
    a2ec:	d410      	bmi.n	a310 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    a2ee:	4c0d      	ldr	r4, [pc, #52]	; (a324 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    a2f0:	b935      	cbnz	r5, a300 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    a2f2:	2208      	movs	r2, #8
    a2f4:	4631      	mov	r1, r6
    a2f6:	4620      	mov	r0, r4
    a2f8:	f01d f872 	bl	273e0 <uECC_vli_cmp_unsafe>
		while (carry || 
    a2fc:	2801      	cmp	r0, #1
    a2fe:	d00f      	beq.n	a320 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    a300:	2308      	movs	r3, #8
    a302:	4622      	mov	r2, r4
    a304:	4631      	mov	r1, r6
    a306:	4630      	mov	r0, r6
    a308:	f01d f891 	bl	2742e <uECC_vli_sub>
    a30c:	1a2d      	subs	r5, r5, r0
    a30e:	e7ef      	b.n	a2f0 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    a310:	4a04      	ldr	r2, [pc, #16]	; (a324 <vli_mmod_fast_secp256r1+0x184>)
    a312:	2308      	movs	r3, #8
    a314:	4631      	mov	r1, r6
    a316:	4630      	mov	r0, r6
    a318:	f01c ff6c 	bl	271f4 <uECC_vli_add>
		while (carry < 0);
    a31c:	182d      	adds	r5, r5, r0
    a31e:	d4f8      	bmi.n	a312 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    a320:	b009      	add	sp, #36	; 0x24
    a322:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a324:	0002cc68 	.word	0x0002cc68

0000a328 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    a328:	4904      	ldr	r1, [pc, #16]	; (a33c <sub_bytes+0x14>)
    a32a:	1e43      	subs	r3, r0, #1
    a32c:	300f      	adds	r0, #15
    a32e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    a332:	5c8a      	ldrb	r2, [r1, r2]
    a334:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    a336:	4283      	cmp	r3, r0
    a338:	d1f9      	bne.n	a32e <sub_bytes+0x6>
	}
}
    a33a:	4770      	bx	lr
    a33c:	0002facf 	.word	0x0002facf

0000a340 <tc_aes128_set_encrypt_key>:
{
    a340:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    a342:	4e26      	ldr	r6, [pc, #152]	; (a3dc <tc_aes128_set_encrypt_key+0x9c>)
{
    a344:	4607      	mov	r7, r0
    a346:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    a348:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    a34a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    a34c:	ad01      	add	r5, sp, #4
    a34e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a350:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a354:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a358:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    a35c:	4638      	mov	r0, r7
    a35e:	2f00      	cmp	r7, #0
    a360:	d038      	beq.n	a3d4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    a362:	2c00      	cmp	r4, #0
    a364:	d038      	beq.n	a3d8 <tc_aes128_set_encrypt_key+0x98>
    a366:	1f38      	subs	r0, r7, #4
    a368:	4621      	mov	r1, r4
    a36a:	4602      	mov	r2, r0
    a36c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    a36e:	784b      	ldrb	r3, [r1, #1]
    a370:	780d      	ldrb	r5, [r1, #0]
    a372:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    a374:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    a378:	78cd      	ldrb	r5, [r1, #3]
    a37a:	432b      	orrs	r3, r5
    a37c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    a37e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    a380:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    a384:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    a386:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    a38a:	d1f0      	bne.n	a36e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    a38c:	4c14      	ldr	r4, [pc, #80]	; (a3e0 <tc_aes128_set_encrypt_key+0xa0>)
    a38e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    a390:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    a392:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    a394:	d116      	bne.n	a3c4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    a396:	f3c3 4207 	ubfx	r2, r3, #16, #8
    a39a:	5ca5      	ldrb	r5, [r4, r2]
    a39c:	0e1a      	lsrs	r2, r3, #24
    a39e:	5ca2      	ldrb	r2, [r4, r2]
    a3a0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    a3a4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    a3a8:	b2db      	uxtb	r3, r3
    a3aa:	5d65      	ldrb	r5, [r4, r5]
    a3ac:	5ce3      	ldrb	r3, [r4, r3]
    a3ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    a3b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    a3b6:	ad0c      	add	r5, sp, #48	; 0x30
    a3b8:	f021 0303 	bic.w	r3, r1, #3
    a3bc:	442b      	add	r3, r5
    a3be:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    a3c2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    a3c4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    a3c8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    a3ca:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    a3cc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    a3ce:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    a3d0:	d1de      	bne.n	a390 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    a3d2:	2001      	movs	r0, #1
}
    a3d4:	b00d      	add	sp, #52	; 0x34
    a3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    a3d8:	4620      	mov	r0, r4
    a3da:	e7fb      	b.n	a3d4 <tc_aes128_set_encrypt_key+0x94>
    a3dc:	0002c484 	.word	0x0002c484
    a3e0:	0002facf 	.word	0x0002facf

0000a3e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    a3e4:	4901      	ldr	r1, [pc, #4]	; (a3ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    a3e6:	2210      	movs	r2, #16
	str	r2, [r1]
    a3e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    a3ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    a3ec:	e000ed10 	.word	0xe000ed10

0000a3f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    a3f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    a3f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    a3f4:	f380 8811 	msr	BASEPRI, r0
	isb
    a3f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    a3fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    a400:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    a402:	b662      	cpsie	i
	isb
    a404:	f3bf 8f6f 	isb	sy

	bx	lr
    a408:	4770      	bx	lr
    a40a:	bf00      	nop

0000a40c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    a40c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    a40e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    a410:	f381 8811 	msr	BASEPRI, r1

	wfe
    a414:	bf20      	wfe

	msr	BASEPRI, r0
    a416:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    a41a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    a41c:	4770      	bx	lr
    a41e:	bf00      	nop

0000a420 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a424:	b089      	sub	sp, #36	; 0x24
    a426:	4680      	mov	r8, r0
    a428:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    a42a:	460c      	mov	r4, r1
    a42c:	2900      	cmp	r1, #0
    a42e:	d053      	beq.n	a4d8 <z_arm_fatal_error+0xb8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    a430:	4d2d      	ldr	r5, [pc, #180]	; (a4e8 <z_arm_fatal_error+0xc8>)
    a432:	682b      	ldr	r3, [r5, #0]
    a434:	0758      	lsls	r0, r3, #29
    a436:	d04f      	beq.n	a4d8 <z_arm_fatal_error+0xb8>
    a438:	e9d1 0100 	ldrd	r0, r1, [r1]
    a43c:	4e2b      	ldr	r6, [pc, #172]	; (a4ec <z_arm_fatal_error+0xcc>)
    a43e:	68a3      	ldr	r3, [r4, #8]
    a440:	46e9      	mov	r9, sp
    a442:	b088      	sub	sp, #32
    a444:	466a      	mov	r2, sp
    a446:	e9c2 6004 	strd	r6, r0, [r2, #16]
    a44a:	2605      	movs	r6, #5
    a44c:	e9c2 1306 	strd	r1, r3, [r2, #24]
    a450:	60be      	str	r6, [r7, #8]
    a452:	f842 6f0c 	str.w	r6, [r2, #12]!
    a456:	2300      	movs	r3, #0
    a458:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    a45c:	4628      	mov	r0, r5
    a45e:	f01b fbbf 	bl	25be0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    a462:	682b      	ldr	r3, [r5, #0]
    a464:	0759      	lsls	r1, r3, #29
    a466:	46cd      	mov	sp, r9
    a468:	d036      	beq.n	a4d8 <z_arm_fatal_error+0xb8>
    a46a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    a46e:	4b20      	ldr	r3, [pc, #128]	; (a4f0 <z_arm_fatal_error+0xd0>)
    a470:	60be      	str	r6, [r7, #8]
    a472:	b088      	sub	sp, #32
    a474:	466a      	mov	r2, sp
    a476:	e9c2 3004 	strd	r3, r0, [r2, #16]
    a47a:	6963      	ldr	r3, [r4, #20]
    a47c:	6191      	str	r1, [r2, #24]
    a47e:	61d3      	str	r3, [r2, #28]
    a480:	f842 6f0c 	str.w	r6, [r2, #12]!
    a484:	2300      	movs	r3, #0
    a486:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    a48a:	4628      	mov	r0, r5
    a48c:	f01b fba8 	bl	25be0 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    a490:	682b      	ldr	r3, [r5, #0]
    a492:	075a      	lsls	r2, r3, #29
    a494:	46cd      	mov	sp, r9
    a496:	d01f      	beq.n	a4d8 <z_arm_fatal_error+0xb8>
    a498:	69e3      	ldr	r3, [r4, #28]
    a49a:	4a16      	ldr	r2, [pc, #88]	; (a4f4 <z_arm_fatal_error+0xd4>)
    a49c:	2603      	movs	r6, #3
    a49e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    a4a2:	607e      	str	r6, [r7, #4]
    a4a4:	617e      	str	r6, [r7, #20]
    a4a6:	2300      	movs	r3, #0
    a4a8:	f107 0214 	add.w	r2, r7, #20
    a4ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a4b0:	4628      	mov	r0, r5
    a4b2:	f01b fb95 	bl	25be0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    a4b6:	682b      	ldr	r3, [r5, #0]
    a4b8:	075b      	lsls	r3, r3, #29
    a4ba:	d00d      	beq.n	a4d8 <z_arm_fatal_error+0xb8>
    a4bc:	69a3      	ldr	r3, [r4, #24]
    a4be:	4a0e      	ldr	r2, [pc, #56]	; (a4f8 <z_arm_fatal_error+0xd8>)
    a4c0:	607e      	str	r6, [r7, #4]
    a4c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    a4c6:	617e      	str	r6, [r7, #20]
    a4c8:	2300      	movs	r3, #0
    a4ca:	f107 0214 	add.w	r2, r7, #20
    a4ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a4d2:	4628      	mov	r0, r5
    a4d4:	f01b fb84 	bl	25be0 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    a4d8:	4621      	mov	r1, r4
    a4da:	4640      	mov	r0, r8
    a4dc:	f018 fecc 	bl	23278 <z_fatal_error>
}
    a4e0:	3724      	adds	r7, #36	; 0x24
    a4e2:	46bd      	mov	sp, r7
    a4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a4e8:	20000a30 	.word	0x20000a30
    a4ec:	0002fbcf 	.word	0x0002fbcf
    a4f0:	0002fbfe 	.word	0x0002fbfe
    a4f4:	0002fc2d 	.word	0x0002fc2d
    a4f8:	0002fc3c 	.word	0x0002fc3c

0000a4fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    a4fc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    a4fe:	2b00      	cmp	r3, #0
    a500:	db08      	blt.n	a514 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a502:	2201      	movs	r2, #1
    a504:	f000 001f 	and.w	r0, r0, #31
    a508:	fa02 f000 	lsl.w	r0, r2, r0
    a50c:	095b      	lsrs	r3, r3, #5
    a50e:	4a02      	ldr	r2, [pc, #8]	; (a518 <arch_irq_enable+0x1c>)
    a510:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    a514:	4770      	bx	lr
    a516:	bf00      	nop
    a518:	e000e100 	.word	0xe000e100

0000a51c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    a51c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    a51e:	2b00      	cmp	r3, #0
    a520:	db0d      	blt.n	a53e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a522:	2201      	movs	r2, #1
    a524:	095b      	lsrs	r3, r3, #5
    a526:	f000 001f 	and.w	r0, r0, #31
    a52a:	fa02 f000 	lsl.w	r0, r2, r0
    a52e:	3320      	adds	r3, #32
    a530:	4a03      	ldr	r2, [pc, #12]	; (a540 <arch_irq_disable+0x24>)
    a532:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    a536:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a53a:	f3bf 8f6f 	isb	sy
}
    a53e:	4770      	bx	lr
    a540:	e000e100 	.word	0xe000e100

0000a544 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    a544:	4b05      	ldr	r3, [pc, #20]	; (a55c <arch_irq_is_enabled+0x18>)
    a546:	0942      	lsrs	r2, r0, #5
    a548:	f000 001f 	and.w	r0, r0, #31
    a54c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    a550:	2301      	movs	r3, #1
    a552:	fa03 f000 	lsl.w	r0, r3, r0
}
    a556:	4010      	ands	r0, r2
    a558:	4770      	bx	lr
    a55a:	bf00      	nop
    a55c:	e000e100 	.word	0xe000e100

0000a560 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    a560:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    a562:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a564:	bfa8      	it	ge
    a566:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    a56a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a56e:	bfb8      	it	lt
    a570:	4b06      	ldrlt	r3, [pc, #24]	; (a58c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a572:	ea4f 1141 	mov.w	r1, r1, lsl #5
    a576:	bfac      	ite	ge
    a578:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a57c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a580:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a582:	bfb4      	ite	lt
    a584:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a586:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    a58a:	4770      	bx	lr
    a58c:	e000ed14 	.word	0xe000ed14

0000a590 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    a590:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    a592:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    a594:	4b04      	ldr	r3, [pc, #16]	; (a5a8 <_arch_isr_direct_pm+0x18>)
    a596:	699a      	ldr	r2, [r3, #24]
    a598:	b11a      	cbz	r2, a5a2 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    a59a:	2200      	movs	r2, #0
    a59c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    a59e:	f020 ffb6 	bl	2b50e <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    a5a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    a5a4:	bd08      	pop	{r3, pc}
    a5a6:	bf00      	nop
    a5a8:	200047a8 	.word	0x200047a8

0000a5ac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    a5ac:	bf30      	wfi
    b z_SysNmiOnReset
    a5ae:	f7ff bffd 	b.w	a5ac <z_SysNmiOnReset>
    a5b2:	bf00      	nop

0000a5b4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    a5b4:	4a0f      	ldr	r2, [pc, #60]	; (a5f4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    a5b6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    a5b8:	4b0f      	ldr	r3, [pc, #60]	; (a5f8 <z_arm_prep_c+0x44>)
    a5ba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    a5be:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    a5c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a5c4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    a5c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    a5cc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    a5d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a5d4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    a5d8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    a5dc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    a5e0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    a5e4:	f018 ff0a 	bl	233fc <z_bss_zero>
	z_data_copy();
    a5e8:	f019 ffe4 	bl	245b4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    a5ec:	f000 fc22 	bl	ae34 <z_arm_interrupt_init>
	z_cstart();
    a5f0:	f018 ff0e 	bl	23410 <z_cstart>
    a5f4:	00001000 	.word	0x00001000
    a5f8:	e000ed00 	.word	0xe000ed00

0000a5fc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    a5fc:	4a0a      	ldr	r2, [pc, #40]	; (a628 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    a5fe:	490b      	ldr	r1, [pc, #44]	; (a62c <arch_swap+0x30>)
	_current->arch.basepri = key;
    a600:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    a602:	6809      	ldr	r1, [r1, #0]
    a604:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    a608:	4909      	ldr	r1, [pc, #36]	; (a630 <arch_swap+0x34>)
	_current->arch.basepri = key;
    a60a:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    a60e:	684b      	ldr	r3, [r1, #4]
    a610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a614:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    a616:	2300      	movs	r3, #0
    a618:	f383 8811 	msr	BASEPRI, r3
    a61c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    a620:	6893      	ldr	r3, [r2, #8]
}
    a622:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    a626:	4770      	bx	lr
    a628:	200047a8 	.word	0x200047a8
    a62c:	0002e3ec 	.word	0x0002e3ec
    a630:	e000ed00 	.word	0xe000ed00

0000a634 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    a634:	4913      	ldr	r1, [pc, #76]	; (a684 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    a636:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    a638:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    a63c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    a63e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    a642:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    a646:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    a648:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    a64c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    a650:	4f0d      	ldr	r7, [pc, #52]	; (a688 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    a652:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    a656:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    a658:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    a65a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    a65c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    a660:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    a662:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    a666:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    a66a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    a66c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    a66e:	f000 fc29 	bl	aec4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    a672:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    a676:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    a67a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    a67e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    a682:	4770      	bx	lr
    ldr r1, =_kernel
    a684:	200047a8 	.word	0x200047a8
    ldr v4, =_SCS_ICSR
    a688:	e000ed04 	.word	0xe000ed04

0000a68c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    a68c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    a690:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    a692:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    a696:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    a69a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    a69c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    a6a0:	2902      	cmp	r1, #2
    beq _oops
    a6a2:	d0ff      	beq.n	a6a4 <_oops>

0000a6a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    a6a4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    a6a6:	f01d fde7 	bl	28278 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    a6aa:	bd01      	pop	{r0, pc}

0000a6ac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    a6ac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    a6b0:	9b00      	ldr	r3, [sp, #0]
    a6b2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    a6b6:	490a      	ldr	r1, [pc, #40]	; (a6e0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    a6b8:	9b01      	ldr	r3, [sp, #4]
    a6ba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    a6be:	9b02      	ldr	r3, [sp, #8]
    a6c0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    a6c4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    a6c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a6cc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    a6d0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    a6d4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    a6d6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    a6d8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    a6da:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    a6de:	4770      	bx	lr
    a6e0:	00024e3d 	.word	0x00024e3d

0000a6e4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    a6e4:	4a0a      	ldr	r2, [pc, #40]	; (a710 <z_check_thread_stack_fail+0x2c>)
{
    a6e6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    a6e8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    a6ea:	b178      	cbz	r0, a70c <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    a6ec:	f113 0f16 	cmn.w	r3, #22
    a6f0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    a6f4:	d005      	beq.n	a702 <z_check_thread_stack_fail+0x1e>
    a6f6:	f1a0 0220 	sub.w	r2, r0, #32
    a6fa:	429a      	cmp	r2, r3
    a6fc:	d805      	bhi.n	a70a <z_check_thread_stack_fail+0x26>
    a6fe:	4283      	cmp	r3, r0
    a700:	d203      	bcs.n	a70a <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    a702:	4281      	cmp	r1, r0
    a704:	bf28      	it	cs
    a706:	2000      	movcs	r0, #0
    a708:	4770      	bx	lr
    a70a:	2000      	movs	r0, #0
}
    a70c:	4770      	bx	lr
    a70e:	bf00      	nop
    a710:	200047a8 	.word	0x200047a8

0000a714 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    a714:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    a716:	4b09      	ldr	r3, [pc, #36]	; (a73c <arch_switch_to_main_thread+0x28>)
    a718:	6098      	str	r0, [r3, #8]
{
    a71a:	460d      	mov	r5, r1
    a71c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    a71e:	f000 fbd1 	bl	aec4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    a722:	4620      	mov	r0, r4
    a724:	f385 8809 	msr	PSP, r5
    a728:	2100      	movs	r1, #0
    a72a:	b663      	cpsie	if
    a72c:	f381 8811 	msr	BASEPRI, r1
    a730:	f3bf 8f6f 	isb	sy
    a734:	2200      	movs	r2, #0
    a736:	2300      	movs	r3, #0
    a738:	f01a fb80 	bl	24e3c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    a73c:	200047a8 	.word	0x200047a8

0000a740 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    a740:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    a742:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    a744:	4a0b      	ldr	r2, [pc, #44]	; (a774 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    a746:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    a748:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    a74a:	bf1e      	ittt	ne
	movne	r1, #0
    a74c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    a74e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    a750:	f020 fedd 	blne	2b50e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    a754:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    a756:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    a75a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    a75e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    a762:	4905      	ldr	r1, [pc, #20]	; (a778 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    a764:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    a766:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    a768:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    a76a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    a76e:	4903      	ldr	r1, [pc, #12]	; (a77c <_isr_wrapper+0x3c>)
	bx r1
    a770:	4708      	bx	r1
    a772:	0000      	.short	0x0000
	ldr r2, =_kernel
    a774:	200047a8 	.word	0x200047a8
	ldr r1, =_sw_isr_table
    a778:	0002c028 	.word	0x0002c028
	ldr r1, =z_arm_int_exit
    a77c:	0000a781 	.word	0x0000a781

0000a780 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    a780:	4b04      	ldr	r3, [pc, #16]	; (a794 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    a782:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    a784:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    a786:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    a788:	d003      	beq.n	a792 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    a78a:	4903      	ldr	r1, [pc, #12]	; (a798 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    a78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    a790:	600a      	str	r2, [r1, #0]

0000a792 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    a792:	4770      	bx	lr
	ldr r3, =_kernel
    a794:	200047a8 	.word	0x200047a8
	ldr r1, =_SCS_ICSR
    a798:	e000ed04 	.word	0xe000ed04

0000a79c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    a79c:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    a79e:	4c4b      	ldr	r4, [pc, #300]	; (a8cc <bus_fault.constprop.0+0x130>)
    a7a0:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    a7a2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    a7a4:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    a7a6:	b088      	sub	sp, #32
    a7a8:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    a7aa:	d00a      	beq.n	a7c2 <bus_fault.constprop.0+0x26>
    a7ac:	4b48      	ldr	r3, [pc, #288]	; (a8d0 <bus_fault.constprop.0+0x134>)
    a7ae:	9306      	str	r3, [sp, #24]
    a7b0:	aa05      	add	r2, sp, #20
    a7b2:	2302      	movs	r3, #2
    a7b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a7b8:	4620      	mov	r0, r4
    a7ba:	9301      	str	r3, [sp, #4]
    a7bc:	9305      	str	r3, [sp, #20]
    a7be:	f01d fd6a 	bl	28296 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    a7c2:	4b44      	ldr	r3, [pc, #272]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a7c6:	04da      	lsls	r2, r3, #19
    a7c8:	d50d      	bpl.n	a7e6 <bus_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error");
    a7ca:	6823      	ldr	r3, [r4, #0]
    a7cc:	075b      	lsls	r3, r3, #29
    a7ce:	d00a      	beq.n	a7e6 <bus_fault.constprop.0+0x4a>
    a7d0:	4b41      	ldr	r3, [pc, #260]	; (a8d8 <bus_fault.constprop.0+0x13c>)
    a7d2:	9306      	str	r3, [sp, #24]
    a7d4:	483d      	ldr	r0, [pc, #244]	; (a8cc <bus_fault.constprop.0+0x130>)
    a7d6:	2302      	movs	r3, #2
    a7d8:	aa05      	add	r2, sp, #20
    a7da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a7de:	9301      	str	r3, [sp, #4]
    a7e0:	9305      	str	r3, [sp, #20]
    a7e2:	f01d fd58 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    a7e6:	4b3b      	ldr	r3, [pc, #236]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a7ea:	0518      	lsls	r0, r3, #20
    a7ec:	d50d      	bpl.n	a80a <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    a7ee:	6823      	ldr	r3, [r4, #0]
    a7f0:	0759      	lsls	r1, r3, #29
    a7f2:	d00a      	beq.n	a80a <bus_fault.constprop.0+0x6e>
    a7f4:	4b39      	ldr	r3, [pc, #228]	; (a8dc <bus_fault.constprop.0+0x140>)
    a7f6:	9306      	str	r3, [sp, #24]
    a7f8:	4834      	ldr	r0, [pc, #208]	; (a8cc <bus_fault.constprop.0+0x130>)
    a7fa:	2302      	movs	r3, #2
    a7fc:	aa05      	add	r2, sp, #20
    a7fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a802:	9301      	str	r3, [sp, #4]
    a804:	9305      	str	r3, [sp, #20]
    a806:	f01d fd46 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    a80a:	4b32      	ldr	r3, [pc, #200]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a80e:	059a      	lsls	r2, r3, #22
    a810:	d527      	bpl.n	a862 <bus_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Precise data bus error");
    a812:	6823      	ldr	r3, [r4, #0]
    a814:	075b      	lsls	r3, r3, #29
    a816:	d00a      	beq.n	a82e <bus_fault.constprop.0+0x92>
    a818:	4b31      	ldr	r3, [pc, #196]	; (a8e0 <bus_fault.constprop.0+0x144>)
    a81a:	9306      	str	r3, [sp, #24]
    a81c:	482b      	ldr	r0, [pc, #172]	; (a8cc <bus_fault.constprop.0+0x130>)
    a81e:	2302      	movs	r3, #2
    a820:	aa05      	add	r2, sp, #20
    a822:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a826:	9301      	str	r3, [sp, #4]
    a828:	9305      	str	r3, [sp, #20]
    a82a:	f01d fd34 	bl	28296 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    a82e:	4b29      	ldr	r3, [pc, #164]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a830:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    a832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a834:	0418      	lsls	r0, r3, #16
    a836:	d514      	bpl.n	a862 <bus_fault.constprop.0+0xc6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    a838:	6823      	ldr	r3, [r4, #0]
    a83a:	0759      	lsls	r1, r3, #29
    a83c:	d00b      	beq.n	a856 <bus_fault.constprop.0+0xba>
    a83e:	4b29      	ldr	r3, [pc, #164]	; (a8e4 <bus_fault.constprop.0+0x148>)
    a840:	4822      	ldr	r0, [pc, #136]	; (a8cc <bus_fault.constprop.0+0x130>)
    a842:	e9cd 3206 	strd	r3, r2, [sp, #24]
    a846:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a84a:	2303      	movs	r3, #3
    a84c:	aa05      	add	r2, sp, #20
    a84e:	9301      	str	r3, [sp, #4]
    a850:	9305      	str	r3, [sp, #20]
    a852:	f01d fd20 	bl	28296 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    a856:	b126      	cbz	r6, a862 <bus_fault.constprop.0+0xc6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    a858:	4a1e      	ldr	r2, [pc, #120]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a85a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    a85c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a860:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    a862:	4b1c      	ldr	r3, [pc, #112]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a866:	055b      	lsls	r3, r3, #21
    a868:	d50d      	bpl.n	a886 <bus_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Imprecise data bus error");
    a86a:	6823      	ldr	r3, [r4, #0]
    a86c:	075e      	lsls	r6, r3, #29
    a86e:	d00a      	beq.n	a886 <bus_fault.constprop.0+0xea>
    a870:	4b1d      	ldr	r3, [pc, #116]	; (a8e8 <bus_fault.constprop.0+0x14c>)
    a872:	9306      	str	r3, [sp, #24]
    a874:	4815      	ldr	r0, [pc, #84]	; (a8cc <bus_fault.constprop.0+0x130>)
    a876:	2302      	movs	r3, #2
    a878:	aa05      	add	r2, sp, #20
    a87a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a87e:	9301      	str	r3, [sp, #4]
    a880:	9305      	str	r3, [sp, #20]
    a882:	f01d fd08 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    a886:	4b13      	ldr	r3, [pc, #76]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a88a:	05d0      	lsls	r0, r2, #23
    a88c:	d516      	bpl.n	a8bc <bus_fault.constprop.0+0x120>
		PR_FAULT_INFO("  Instruction bus error");
    a88e:	6823      	ldr	r3, [r4, #0]
    a890:	0759      	lsls	r1, r3, #29
    a892:	d00a      	beq.n	a8aa <bus_fault.constprop.0+0x10e>
    a894:	4b15      	ldr	r3, [pc, #84]	; (a8ec <bus_fault.constprop.0+0x150>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    a896:	9306      	str	r3, [sp, #24]
    a898:	480c      	ldr	r0, [pc, #48]	; (a8cc <bus_fault.constprop.0+0x130>)
    a89a:	2302      	movs	r3, #2
    a89c:	aa05      	add	r2, sp, #20
    a89e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a8a2:	9301      	str	r3, [sp, #4]
    a8a4:	9305      	str	r3, [sp, #20]
    a8a6:	f01d fcf6 	bl	28296 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    a8aa:	4a0a      	ldr	r2, [pc, #40]	; (a8d4 <bus_fault.constprop.0+0x138>)
    a8ac:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    a8ae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    a8b0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    a8b4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    a8b6:	7028      	strb	r0, [r5, #0]

	return reason;
}
    a8b8:	b008      	add	sp, #32
    a8ba:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    a8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a8be:	049a      	lsls	r2, r3, #18
    a8c0:	d5f3      	bpl.n	a8aa <bus_fault.constprop.0+0x10e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    a8c2:	6823      	ldr	r3, [r4, #0]
    a8c4:	075b      	lsls	r3, r3, #29
    a8c6:	d0f0      	beq.n	a8aa <bus_fault.constprop.0+0x10e>
    a8c8:	4b09      	ldr	r3, [pc, #36]	; (a8f0 <bus_fault.constprop.0+0x154>)
    a8ca:	e7e4      	b.n	a896 <bus_fault.constprop.0+0xfa>
    a8cc:	20000a30 	.word	0x20000a30
    a8d0:	0002fc6a 	.word	0x0002fc6a
    a8d4:	e000ed00 	.word	0xe000ed00
    a8d8:	0002fc80 	.word	0x0002fc80
    a8dc:	0002fc91 	.word	0x0002fc91
    a8e0:	0002fca4 	.word	0x0002fca4
    a8e4:	0002fcbd 	.word	0x0002fcbd
    a8e8:	0002fcd2 	.word	0x0002fcd2
    a8ec:	0002fced 	.word	0x0002fced
    a8f0:	0002fd05 	.word	0x0002fd05

0000a8f4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    a8f4:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    a8f6:	4c43      	ldr	r4, [pc, #268]	; (aa04 <usage_fault.constprop.0+0x110>)
    a8f8:	6823      	ldr	r3, [r4, #0]
    a8fa:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    a8fc:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** USAGE FAULT *****");
    a8fe:	d00a      	beq.n	a916 <usage_fault.constprop.0+0x22>
    a900:	4b41      	ldr	r3, [pc, #260]	; (aa08 <usage_fault.constprop.0+0x114>)
    a902:	9306      	str	r3, [sp, #24]
    a904:	aa05      	add	r2, sp, #20
    a906:	2302      	movs	r3, #2
    a908:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a90c:	4620      	mov	r0, r4
    a90e:	9301      	str	r3, [sp, #4]
    a910:	9305      	str	r3, [sp, #20]
    a912:	f01d fcc0 	bl	28296 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    a916:	4b3d      	ldr	r3, [pc, #244]	; (aa0c <usage_fault.constprop.0+0x118>)
    a918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a91a:	0198      	lsls	r0, r3, #6
    a91c:	d50d      	bpl.n	a93a <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    a91e:	6823      	ldr	r3, [r4, #0]
    a920:	0759      	lsls	r1, r3, #29
    a922:	d00a      	beq.n	a93a <usage_fault.constprop.0+0x46>
    a924:	4b3a      	ldr	r3, [pc, #232]	; (aa10 <usage_fault.constprop.0+0x11c>)
    a926:	9306      	str	r3, [sp, #24]
    a928:	4836      	ldr	r0, [pc, #216]	; (aa04 <usage_fault.constprop.0+0x110>)
    a92a:	2302      	movs	r3, #2
    a92c:	aa05      	add	r2, sp, #20
    a92e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a932:	9301      	str	r3, [sp, #4]
    a934:	9305      	str	r3, [sp, #20]
    a936:	f01d fcae 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    a93a:	4b34      	ldr	r3, [pc, #208]	; (aa0c <usage_fault.constprop.0+0x118>)
    a93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a93e:	01da      	lsls	r2, r3, #7
    a940:	d50d      	bpl.n	a95e <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Unaligned memory access");
    a942:	6823      	ldr	r3, [r4, #0]
    a944:	075b      	lsls	r3, r3, #29
    a946:	d00a      	beq.n	a95e <usage_fault.constprop.0+0x6a>
    a948:	4b32      	ldr	r3, [pc, #200]	; (aa14 <usage_fault.constprop.0+0x120>)
    a94a:	9306      	str	r3, [sp, #24]
    a94c:	482d      	ldr	r0, [pc, #180]	; (aa04 <usage_fault.constprop.0+0x110>)
    a94e:	2302      	movs	r3, #2
    a950:	aa05      	add	r2, sp, #20
    a952:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a956:	9301      	str	r3, [sp, #4]
    a958:	9305      	str	r3, [sp, #20]
    a95a:	f01d fc9c 	bl	28296 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    a95e:	4b2b      	ldr	r3, [pc, #172]	; (aa0c <usage_fault.constprop.0+0x118>)
    a960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a962:	0318      	lsls	r0, r3, #12
    a964:	d50d      	bpl.n	a982 <usage_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  No coprocessor instructions");
    a966:	6823      	ldr	r3, [r4, #0]
    a968:	0759      	lsls	r1, r3, #29
    a96a:	d00a      	beq.n	a982 <usage_fault.constprop.0+0x8e>
    a96c:	4b2a      	ldr	r3, [pc, #168]	; (aa18 <usage_fault.constprop.0+0x124>)
    a96e:	9306      	str	r3, [sp, #24]
    a970:	4824      	ldr	r0, [pc, #144]	; (aa04 <usage_fault.constprop.0+0x110>)
    a972:	2302      	movs	r3, #2
    a974:	aa05      	add	r2, sp, #20
    a976:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a97a:	9301      	str	r3, [sp, #4]
    a97c:	9305      	str	r3, [sp, #20]
    a97e:	f01d fc8a 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    a982:	4b22      	ldr	r3, [pc, #136]	; (aa0c <usage_fault.constprop.0+0x118>)
    a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a986:	035a      	lsls	r2, r3, #13
    a988:	d50d      	bpl.n	a9a6 <usage_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    a98a:	6823      	ldr	r3, [r4, #0]
    a98c:	075b      	lsls	r3, r3, #29
    a98e:	d00a      	beq.n	a9a6 <usage_fault.constprop.0+0xb2>
    a990:	4b22      	ldr	r3, [pc, #136]	; (aa1c <usage_fault.constprop.0+0x128>)
    a992:	9306      	str	r3, [sp, #24]
    a994:	481b      	ldr	r0, [pc, #108]	; (aa04 <usage_fault.constprop.0+0x110>)
    a996:	2302      	movs	r3, #2
    a998:	aa05      	add	r2, sp, #20
    a99a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a99e:	9301      	str	r3, [sp, #4]
    a9a0:	9305      	str	r3, [sp, #20]
    a9a2:	f01d fc78 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    a9a6:	4b19      	ldr	r3, [pc, #100]	; (aa0c <usage_fault.constprop.0+0x118>)
    a9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a9aa:	0398      	lsls	r0, r3, #14
    a9ac:	d50d      	bpl.n	a9ca <usage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    a9ae:	6823      	ldr	r3, [r4, #0]
    a9b0:	0759      	lsls	r1, r3, #29
    a9b2:	d00a      	beq.n	a9ca <usage_fault.constprop.0+0xd6>
    a9b4:	4b1a      	ldr	r3, [pc, #104]	; (aa20 <usage_fault.constprop.0+0x12c>)
    a9b6:	9306      	str	r3, [sp, #24]
    a9b8:	4812      	ldr	r0, [pc, #72]	; (aa04 <usage_fault.constprop.0+0x110>)
    a9ba:	2302      	movs	r3, #2
    a9bc:	aa05      	add	r2, sp, #20
    a9be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a9c2:	9301      	str	r3, [sp, #4]
    a9c4:	9305      	str	r3, [sp, #20]
    a9c6:	f01d fc66 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    a9ca:	4b10      	ldr	r3, [pc, #64]	; (aa0c <usage_fault.constprop.0+0x118>)
    a9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a9ce:	03da      	lsls	r2, r3, #15
    a9d0:	d50d      	bpl.n	a9ee <usage_fault.constprop.0+0xfa>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    a9d2:	6823      	ldr	r3, [r4, #0]
    a9d4:	075b      	lsls	r3, r3, #29
    a9d6:	d00a      	beq.n	a9ee <usage_fault.constprop.0+0xfa>
    a9d8:	4b12      	ldr	r3, [pc, #72]	; (aa24 <usage_fault.constprop.0+0x130>)
    a9da:	9306      	str	r3, [sp, #24]
    a9dc:	4809      	ldr	r0, [pc, #36]	; (aa04 <usage_fault.constprop.0+0x110>)
    a9de:	2302      	movs	r3, #2
    a9e0:	aa05      	add	r2, sp, #20
    a9e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a9e6:	9301      	str	r3, [sp, #4]
    a9e8:	9305      	str	r3, [sp, #20]
    a9ea:	f01d fc54 	bl	28296 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    a9ee:	4a07      	ldr	r2, [pc, #28]	; (aa0c <usage_fault.constprop.0+0x118>)
    a9f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    a9f2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    a9f6:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    a9fa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    a9fc:	6293      	str	r3, [r2, #40]	; 0x28
}
    a9fe:	b008      	add	sp, #32
    aa00:	bd10      	pop	{r4, pc}
    aa02:	bf00      	nop
    aa04:	20000a30 	.word	0x20000a30
    aa08:	0002fd34 	.word	0x0002fd34
    aa0c:	e000ed00 	.word	0xe000ed00
    aa10:	0002fd4c 	.word	0x0002fd4c
    aa14:	0002fd5f 	.word	0x0002fd5f
    aa18:	0002fd79 	.word	0x0002fd79
    aa1c:	0002fd97 	.word	0x0002fd97
    aa20:	0002fdbc 	.word	0x0002fdbc
    aa24:	0002fdd6 	.word	0x0002fdd6

0000aa28 <mem_manage_fault>:
{
    aa28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    aa2c:	4c55      	ldr	r4, [pc, #340]	; (ab84 <mem_manage_fault+0x15c>)
    aa2e:	6823      	ldr	r3, [r4, #0]
{
    aa30:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    aa32:	0759      	lsls	r1, r3, #29
{
    aa34:	b088      	sub	sp, #32
    aa36:	4607      	mov	r7, r0
    aa38:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    aa3a:	d00a      	beq.n	aa52 <mem_manage_fault+0x2a>
    aa3c:	4b52      	ldr	r3, [pc, #328]	; (ab88 <mem_manage_fault+0x160>)
    aa3e:	9306      	str	r3, [sp, #24]
    aa40:	aa05      	add	r2, sp, #20
    aa42:	2302      	movs	r3, #2
    aa44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aa48:	4620      	mov	r0, r4
    aa4a:	9301      	str	r3, [sp, #4]
    aa4c:	9305      	str	r3, [sp, #20]
    aa4e:	f01d fc22 	bl	28296 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    aa52:	4b4e      	ldr	r3, [pc, #312]	; (ab8c <mem_manage_fault+0x164>)
    aa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa56:	06da      	lsls	r2, r3, #27
    aa58:	d50d      	bpl.n	aa76 <mem_manage_fault+0x4e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    aa5a:	6823      	ldr	r3, [r4, #0]
    aa5c:	075b      	lsls	r3, r3, #29
    aa5e:	d00a      	beq.n	aa76 <mem_manage_fault+0x4e>
    aa60:	4b4b      	ldr	r3, [pc, #300]	; (ab90 <mem_manage_fault+0x168>)
    aa62:	9306      	str	r3, [sp, #24]
    aa64:	4847      	ldr	r0, [pc, #284]	; (ab84 <mem_manage_fault+0x15c>)
    aa66:	2302      	movs	r3, #2
    aa68:	aa05      	add	r2, sp, #20
    aa6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aa6e:	9301      	str	r3, [sp, #4]
    aa70:	9305      	str	r3, [sp, #20]
    aa72:	f01d fc10 	bl	28296 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    aa76:	4b45      	ldr	r3, [pc, #276]	; (ab8c <mem_manage_fault+0x164>)
    aa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa7a:	071e      	lsls	r6, r3, #28
    aa7c:	d50d      	bpl.n	aa9a <mem_manage_fault+0x72>
		PR_FAULT_INFO("  Unstacking error");
    aa7e:	6823      	ldr	r3, [r4, #0]
    aa80:	0758      	lsls	r0, r3, #29
    aa82:	d00a      	beq.n	aa9a <mem_manage_fault+0x72>
    aa84:	4b43      	ldr	r3, [pc, #268]	; (ab94 <mem_manage_fault+0x16c>)
    aa86:	9306      	str	r3, [sp, #24]
    aa88:	483e      	ldr	r0, [pc, #248]	; (ab84 <mem_manage_fault+0x15c>)
    aa8a:	2302      	movs	r3, #2
    aa8c:	aa05      	add	r2, sp, #20
    aa8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aa92:	9301      	str	r3, [sp, #4]
    aa94:	9305      	str	r3, [sp, #20]
    aa96:	f01d fbfe 	bl	28296 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    aa9a:	4b3c      	ldr	r3, [pc, #240]	; (ab8c <mem_manage_fault+0x164>)
    aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa9e:	0799      	lsls	r1, r3, #30
    aaa0:	d437      	bmi.n	ab12 <mem_manage_fault+0xea>
	uint32_t mmfar = -EINVAL;
    aaa2:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    aaa6:	4b39      	ldr	r3, [pc, #228]	; (ab8c <mem_manage_fault+0x164>)
    aaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aaaa:	07d9      	lsls	r1, r3, #31
    aaac:	d50d      	bpl.n	aaca <mem_manage_fault+0xa2>
		PR_FAULT_INFO("  Instruction Access Violation");
    aaae:	6823      	ldr	r3, [r4, #0]
    aab0:	075a      	lsls	r2, r3, #29
    aab2:	d00a      	beq.n	aaca <mem_manage_fault+0xa2>
    aab4:	4b38      	ldr	r3, [pc, #224]	; (ab98 <mem_manage_fault+0x170>)
    aab6:	9306      	str	r3, [sp, #24]
    aab8:	4832      	ldr	r0, [pc, #200]	; (ab84 <mem_manage_fault+0x15c>)
    aaba:	2302      	movs	r3, #2
    aabc:	aa05      	add	r2, sp, #20
    aabe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aac2:	9301      	str	r3, [sp, #4]
    aac4:	9305      	str	r3, [sp, #20]
    aac6:	f01d fbe6 	bl	28296 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    aaca:	4b30      	ldr	r3, [pc, #192]	; (ab8c <mem_manage_fault+0x164>)
    aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aace:	069b      	lsls	r3, r3, #26
    aad0:	d50d      	bpl.n	aaee <mem_manage_fault+0xc6>
		PR_FAULT_INFO(
    aad2:	6823      	ldr	r3, [r4, #0]
    aad4:	0758      	lsls	r0, r3, #29
    aad6:	d00a      	beq.n	aaee <mem_manage_fault+0xc6>
    aad8:	4b30      	ldr	r3, [pc, #192]	; (ab9c <mem_manage_fault+0x174>)
    aada:	9306      	str	r3, [sp, #24]
    aadc:	4829      	ldr	r0, [pc, #164]	; (ab84 <mem_manage_fault+0x15c>)
    aade:	2302      	movs	r3, #2
    aae0:	aa05      	add	r2, sp, #20
    aae2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aae6:	9301      	str	r3, [sp, #4]
    aae8:	9305      	str	r3, [sp, #20]
    aaea:	f01d fbd4 	bl	28296 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    aaee:	4b27      	ldr	r3, [pc, #156]	; (ab8c <mem_manage_fault+0x164>)
    aaf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    aaf2:	06d1      	lsls	r1, r2, #27
    aaf4:	d438      	bmi.n	ab68 <mem_manage_fault+0x140>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    aaf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    aaf8:	0792      	lsls	r2, r2, #30
    aafa:	d435      	bmi.n	ab68 <mem_manage_fault+0x140>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    aafc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    aafe:	4a23      	ldr	r2, [pc, #140]	; (ab8c <mem_manage_fault+0x164>)
    ab00:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ab02:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    ab06:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    ab08:	2300      	movs	r3, #0
    ab0a:	702b      	strb	r3, [r5, #0]
}
    ab0c:	b008      	add	sp, #32
    ab0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    ab12:	6823      	ldr	r3, [r4, #0]
    ab14:	075a      	lsls	r2, r3, #29
    ab16:	d00a      	beq.n	ab2e <mem_manage_fault+0x106>
    ab18:	4b21      	ldr	r3, [pc, #132]	; (aba0 <mem_manage_fault+0x178>)
    ab1a:	9306      	str	r3, [sp, #24]
    ab1c:	4819      	ldr	r0, [pc, #100]	; (ab84 <mem_manage_fault+0x15c>)
    ab1e:	2302      	movs	r3, #2
    ab20:	aa05      	add	r2, sp, #20
    ab22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ab26:	9301      	str	r3, [sp, #4]
    ab28:	9305      	str	r3, [sp, #20]
    ab2a:	f01d fbb4 	bl	28296 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    ab2e:	4b17      	ldr	r3, [pc, #92]	; (ab8c <mem_manage_fault+0x164>)
    ab30:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ab32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab34:	061b      	lsls	r3, r3, #24
    ab36:	d5b4      	bpl.n	aaa2 <mem_manage_fault+0x7a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ab38:	6823      	ldr	r3, [r4, #0]
    ab3a:	0758      	lsls	r0, r3, #29
    ab3c:	d00b      	beq.n	ab56 <mem_manage_fault+0x12e>
    ab3e:	4b19      	ldr	r3, [pc, #100]	; (aba4 <mem_manage_fault+0x17c>)
    ab40:	4810      	ldr	r0, [pc, #64]	; (ab84 <mem_manage_fault+0x15c>)
    ab42:	e9cd 3606 	strd	r3, r6, [sp, #24]
    ab46:	aa05      	add	r2, sp, #20
    ab48:	2303      	movs	r3, #3
    ab4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ab4e:	9301      	str	r3, [sp, #4]
    ab50:	9305      	str	r3, [sp, #20]
    ab52:	f01d fba0 	bl	28296 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    ab56:	f1b8 0f00 	cmp.w	r8, #0
    ab5a:	d0a4      	beq.n	aaa6 <mem_manage_fault+0x7e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ab5c:	4a0b      	ldr	r2, [pc, #44]	; (ab8c <mem_manage_fault+0x164>)
    ab5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ab60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ab64:	6293      	str	r3, [r2, #40]	; 0x28
    ab66:	e79e      	b.n	aaa6 <mem_manage_fault+0x7e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    ab68:	685b      	ldr	r3, [r3, #4]
    ab6a:	051b      	lsls	r3, r3, #20
    ab6c:	d5c6      	bpl.n	aafc <mem_manage_fault+0xd4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    ab6e:	4639      	mov	r1, r7
    ab70:	4630      	mov	r0, r6
    ab72:	f7ff fdb7 	bl	a6e4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    ab76:	2800      	cmp	r0, #0
    ab78:	d0c0      	beq.n	aafc <mem_manage_fault+0xd4>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    ab7a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    ab7e:	2002      	movs	r0, #2
    ab80:	e7bd      	b.n	aafe <mem_manage_fault+0xd6>
    ab82:	bf00      	nop
    ab84:	20000a30 	.word	0x20000a30
    ab88:	0002fe01 	.word	0x0002fe01
    ab8c:	e000ed00 	.word	0xe000ed00
    ab90:	0002fe17 	.word	0x0002fe17
    ab94:	0002fc91 	.word	0x0002fc91
    ab98:	0002fe78 	.word	0x0002fe78
    ab9c:	0002fd05 	.word	0x0002fd05
    aba0:	0002fe4a 	.word	0x0002fe4a
    aba4:	0002fe62 	.word	0x0002fe62

0000aba8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    aba8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    abaa:	ab0a      	add	r3, sp, #40	; 0x28
    abac:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    abae:	9302      	str	r3, [sp, #8]
    abb0:	4b05      	ldr	r3, [pc, #20]	; (abc8 <z_log_msg2_runtime_create.constprop.0+0x20>)
    abb2:	9301      	str	r3, [sp, #4]
    abb4:	2300      	movs	r3, #0
    abb6:	9300      	str	r3, [sp, #0]
    abb8:	2201      	movs	r2, #1
    abba:	4618      	mov	r0, r3
    abbc:	f7fb fcc2 	bl	6544 <z_impl_z_log_msg2_runtime_vcreate>
}
    abc0:	b007      	add	sp, #28
    abc2:	f85d fb04 	ldr.w	pc, [sp], #4
    abc6:	bf00      	nop
    abc8:	0002fe97 	.word	0x0002fe97

0000abcc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    abcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    abd0:	4b83      	ldr	r3, [pc, #524]	; (ade0 <z_arm_fault+0x214>)
    abd2:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    abd6:	b08e      	sub	sp, #56	; 0x38
    abd8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    abda:	f3c8 0408 	ubfx	r4, r8, #0, #9
    abde:	2500      	movs	r5, #0
    abe0:	f385 8811 	msr	BASEPRI, r5
    abe4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    abe8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    abec:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    abf0:	d112      	bne.n	ac18 <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    abf2:	f002 030c 	and.w	r3, r2, #12
    abf6:	2b08      	cmp	r3, #8
    abf8:	d111      	bne.n	ac1e <z_arm_fault+0x52>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    abfa:	487a      	ldr	r0, [pc, #488]	; (ade4 <z_arm_fault+0x218>)
    abfc:	6803      	ldr	r3, [r0, #0]
    abfe:	f013 0707 	ands.w	r7, r3, #7
    ac02:	d00a      	beq.n	ac1a <z_arm_fault+0x4e>
    ac04:	4b78      	ldr	r3, [pc, #480]	; (ade8 <z_arm_fault+0x21c>)
    ac06:	930a      	str	r3, [sp, #40]	; 0x28
    ac08:	aa09      	add	r2, sp, #36	; 0x24
    ac0a:	2302      	movs	r3, #2
    ac0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ac10:	9305      	str	r3, [sp, #20]
    ac12:	9309      	str	r3, [sp, #36]	; 0x24
    ac14:	f01d fb3f 	bl	28296 <z_log_msg2_static_create.constprop.0>
	*nested_exc = false;
    ac18:	462f      	mov	r7, r5
		return NULL;
    ac1a:	463e      	mov	r6, r7
    ac1c:	e004      	b.n	ac28 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ac1e:	0711      	lsls	r1, r2, #28
	*nested_exc = false;
    ac20:	bf4e      	itee	mi
    ac22:	462f      	movmi	r7, r5
			ptr_esf = (z_arch_esf_t *)msp;
    ac24:	4606      	movpl	r6, r0
			*nested_exc = true;
    ac26:	2701      	movpl	r7, #1
	*recoverable = false;
    ac28:	2300      	movs	r3, #0
    ac2a:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    ac2e:	1ee3      	subs	r3, r4, #3
    ac30:	2b09      	cmp	r3, #9
    ac32:	f200 80b8 	bhi.w	ada6 <z_arm_fault+0x1da>
    ac36:	e8df f003 	tbb	[pc, r3]
    ac3a:	a005      	.short	0xa005
    ac3c:	b6b69da4 	.word	0xb6b69da4
    ac40:	a8b6b6b6 	.word	0xa8b6b6b6
	PR_FAULT_INFO("***** HARD FAULT *****");
    ac44:	4d67      	ldr	r5, [pc, #412]	; (ade4 <z_arm_fault+0x218>)
    ac46:	682b      	ldr	r3, [r5, #0]
    ac48:	075a      	lsls	r2, r3, #29
    ac4a:	d00a      	beq.n	ac62 <z_arm_fault+0x96>
    ac4c:	4b67      	ldr	r3, [pc, #412]	; (adec <z_arm_fault+0x220>)
    ac4e:	930a      	str	r3, [sp, #40]	; 0x28
    ac50:	aa09      	add	r2, sp, #36	; 0x24
    ac52:	2302      	movs	r3, #2
    ac54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ac58:	4628      	mov	r0, r5
    ac5a:	9305      	str	r3, [sp, #20]
    ac5c:	9309      	str	r3, [sp, #36]	; 0x24
    ac5e:	f01d fb1a 	bl	28296 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ac62:	4a5f      	ldr	r2, [pc, #380]	; (ade0 <z_arm_fault+0x214>)
    ac64:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	*recoverable = false;
    ac66:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ac6a:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    ac6e:	f88d 8013 	strb.w	r8, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ac72:	d010      	beq.n	ac96 <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    ac74:	682b      	ldr	r3, [r5, #0]
    ac76:	075b      	lsls	r3, r3, #29
    ac78:	d101      	bne.n	ac7e <z_arm_fault+0xb2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ac7a:	2400      	movs	r4, #0
    ac7c:	e01c      	b.n	acb8 <z_arm_fault+0xec>
		PR_EXC("  Bus fault on vector table read");
    ac7e:	4b5c      	ldr	r3, [pc, #368]	; (adf0 <z_arm_fault+0x224>)
    ac80:	930a      	str	r3, [sp, #40]	; 0x28
    ac82:	4858      	ldr	r0, [pc, #352]	; (ade4 <z_arm_fault+0x218>)
    ac84:	2302      	movs	r3, #2
    ac86:	9305      	str	r3, [sp, #20]
    ac88:	9309      	str	r3, [sp, #36]	; 0x24
    ac8a:	aa09      	add	r2, sp, #36	; 0x24
    ac8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
    ac90:	f01d fb01 	bl	28296 <z_log_msg2_static_create.constprop.0>
    ac94:	e7f1      	b.n	ac7a <z_arm_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    ac96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ac98:	2b00      	cmp	r3, #0
    ac9a:	da28      	bge.n	acee <z_arm_fault+0x122>
		PR_EXC("  Debug event");
    ac9c:	682b      	ldr	r3, [r5, #0]
    ac9e:	075d      	lsls	r5, r3, #29
    aca0:	d0eb      	beq.n	ac7a <z_arm_fault+0xae>
    aca2:	4b54      	ldr	r3, [pc, #336]	; (adf4 <z_arm_fault+0x228>)
    aca4:	930a      	str	r3, [sp, #40]	; 0x28
    aca6:	484f      	ldr	r0, [pc, #316]	; (ade4 <z_arm_fault+0x218>)
    aca8:	2302      	movs	r3, #2
    acaa:	aa09      	add	r2, sp, #36	; 0x24
    acac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    acb0:	9305      	str	r3, [sp, #20]
    acb2:	9309      	str	r3, [sp, #36]	; 0x24
    acb4:	f01d faef 	bl	28296 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    acb8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    acbc:	b9a3      	cbnz	r3, ace8 <z_arm_fault+0x11c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    acbe:	2220      	movs	r2, #32
    acc0:	4631      	mov	r1, r6
    acc2:	a806      	add	r0, sp, #24
    acc4:	f01d fc77 	bl	285b6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    acc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    acca:	2f00      	cmp	r7, #0
    accc:	f000 8083 	beq.w	add6 <z_arm_fault+0x20a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    acd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    acd4:	b922      	cbnz	r2, ace0 <z_arm_fault+0x114>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    acd6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    acda:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    acde:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    ace0:	a906      	add	r1, sp, #24
    ace2:	4620      	mov	r0, r4
    ace4:	f7ff fb9c 	bl	a420 <z_arm_fatal_error>
}
    ace8:	b00e      	add	sp, #56	; 0x38
    acea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    acee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    acf0:	005c      	lsls	r4, r3, #1
    acf2:	d5c2      	bpl.n	ac7a <z_arm_fault+0xae>
		PR_EXC("  Fault escalation (see below)");
    acf4:	682b      	ldr	r3, [r5, #0]
    acf6:	0758      	lsls	r0, r3, #29
    acf8:	d00a      	beq.n	ad10 <z_arm_fault+0x144>
    acfa:	4b3f      	ldr	r3, [pc, #252]	; (adf8 <z_arm_fault+0x22c>)
    acfc:	930a      	str	r3, [sp, #40]	; 0x28
    acfe:	4839      	ldr	r0, [pc, #228]	; (ade4 <z_arm_fault+0x218>)
    ad00:	2302      	movs	r3, #2
    ad02:	aa09      	add	r2, sp, #36	; 0x24
    ad04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ad08:	9305      	str	r3, [sp, #20]
    ad0a:	9309      	str	r3, [sp, #36]	; 0x24
    ad0c:	f01d fac3 	bl	28296 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    ad10:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    ad12:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    ad16:	f64d 7302 	movw	r3, #57090	; 0xdf02
    ad1a:	429a      	cmp	r2, r3
    ad1c:	d00b      	beq.n	ad36 <z_arm_fault+0x16a>
		} else if (SCB_MMFSR != 0) {
    ad1e:	4b30      	ldr	r3, [pc, #192]	; (ade0 <z_arm_fault+0x214>)
    ad20:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    ad24:	b1ca      	cbz	r2, ad5a <z_arm_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
    ad26:	f10d 0213 	add.w	r2, sp, #19
    ad2a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    ad2c:	4630      	mov	r0, r6
    ad2e:	f7ff fe7b 	bl	aa28 <mem_manage_fault>
    ad32:	4604      	mov	r4, r0
		break;
    ad34:	e7c0      	b.n	acb8 <z_arm_fault+0xec>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    ad36:	682b      	ldr	r3, [r5, #0]
    ad38:	0759      	lsls	r1, r3, #29
    ad3a:	d00c      	beq.n	ad56 <z_arm_fault+0x18a>
    ad3c:	6833      	ldr	r3, [r6, #0]
    ad3e:	4a2f      	ldr	r2, [pc, #188]	; (adfc <z_arm_fault+0x230>)
    ad40:	4828      	ldr	r0, [pc, #160]	; (ade4 <z_arm_fault+0x218>)
    ad42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ad46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ad4a:	2303      	movs	r3, #3
    ad4c:	aa09      	add	r2, sp, #36	; 0x24
    ad4e:	9305      	str	r3, [sp, #20]
    ad50:	9309      	str	r3, [sp, #36]	; 0x24
    ad52:	f01d faa0 	bl	28296 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    ad56:	6834      	ldr	r4, [r6, #0]
    ad58:	e7ae      	b.n	acb8 <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
    ad5a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    ad5e:	b12a      	cbz	r2, ad6c <z_arm_fault+0x1a0>
			reason = bus_fault(esf, 1, recoverable);
    ad60:	f10d 0113 	add.w	r1, sp, #19
    ad64:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    ad66:	f7ff fd19 	bl	a79c <bus_fault.constprop.0>
    ad6a:	e7e2      	b.n	ad32 <z_arm_fault+0x166>
		} else if (SCB_UFSR != 0) {
    ad6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    ad6e:	b29b      	uxth	r3, r3
    ad70:	2b00      	cmp	r3, #0
    ad72:	d082      	beq.n	ac7a <z_arm_fault+0xae>
		reason = usage_fault(esf);
    ad74:	f7ff fdbe 	bl	a8f4 <usage_fault.constprop.0>
    ad78:	e7db      	b.n	ad32 <z_arm_fault+0x166>
		reason = mem_manage_fault(esf, 0, recoverable);
    ad7a:	f10d 0213 	add.w	r2, sp, #19
    ad7e:	2100      	movs	r1, #0
    ad80:	e7d4      	b.n	ad2c <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    ad82:	f10d 0113 	add.w	r1, sp, #19
    ad86:	2000      	movs	r0, #0
    ad88:	e7ed      	b.n	ad66 <z_arm_fault+0x19a>
	PR_FAULT_INFO(
    ad8a:	4816      	ldr	r0, [pc, #88]	; (ade4 <z_arm_fault+0x218>)
    ad8c:	6803      	ldr	r3, [r0, #0]
    ad8e:	075a      	lsls	r2, r3, #29
    ad90:	f43f af73 	beq.w	ac7a <z_arm_fault+0xae>
    ad94:	4b1a      	ldr	r3, [pc, #104]	; (ae00 <z_arm_fault+0x234>)
    ad96:	930a      	str	r3, [sp, #40]	; 0x28
    ad98:	2302      	movs	r3, #2
    ad9a:	9305      	str	r3, [sp, #20]
    ad9c:	9309      	str	r3, [sp, #36]	; 0x24
    ad9e:	aa09      	add	r2, sp, #36	; 0x24
    ada0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ada4:	e774      	b.n	ac90 <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
    ada6:	490f      	ldr	r1, [pc, #60]	; (ade4 <z_arm_fault+0x218>)
    ada8:	680b      	ldr	r3, [r1, #0]
    adaa:	075b      	lsls	r3, r3, #29
    adac:	f43f af65 	beq.w	ac7a <z_arm_fault+0xae>
    adb0:	4a14      	ldr	r2, [pc, #80]	; (ae04 <z_arm_fault+0x238>)
    adb2:	4b15      	ldr	r3, [pc, #84]	; (ae08 <z_arm_fault+0x23c>)
    adb4:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    adb8:	bf18      	it	ne
    adba:	4613      	movne	r3, r2
    adbc:	3c10      	subs	r4, #16
    adbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
    adc2:	2400      	movs	r4, #0
    adc4:	4b11      	ldr	r3, [pc, #68]	; (ae0c <z_arm_fault+0x240>)
    adc6:	9301      	str	r3, [sp, #4]
    adc8:	9400      	str	r4, [sp, #0]
    adca:	4623      	mov	r3, r4
    adcc:	2201      	movs	r2, #1
    adce:	4620      	mov	r0, r4
    add0:	f7ff feea 	bl	aba8 <z_log_msg2_runtime_create.constprop.0>
    add4:	e770      	b.n	acb8 <z_arm_fault+0xec>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    add6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    adda:	f023 0301 	bic.w	r3, r3, #1
    adde:	e77e      	b.n	acde <z_arm_fault+0x112>
    ade0:	e000ed00 	.word	0xe000ed00
    ade4:	20000a30 	.word	0x20000a30
    ade8:	0002fed8 	.word	0x0002fed8
    adec:	0002ff03 	.word	0x0002ff03
    adf0:	0002ff1a 	.word	0x0002ff1a
    adf4:	0002ff3b 	.word	0x0002ff3b
    adf8:	0002ff49 	.word	0x0002ff49
    adfc:	0002ff68 	.word	0x0002ff68
    ae00:	0002ff84 	.word	0x0002ff84
    ae04:	0002febf 	.word	0x0002febf
    ae08:	0002feaa 	.word	0x0002feaa
    ae0c:	0002fe97 	.word	0x0002fe97

0000ae10 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    ae10:	4a02      	ldr	r2, [pc, #8]	; (ae1c <z_arm_fault_init+0xc>)
    ae12:	6953      	ldr	r3, [r2, #20]
    ae14:	f043 0310 	orr.w	r3, r3, #16
    ae18:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    ae1a:	4770      	bx	lr
    ae1c:	e000ed00 	.word	0xe000ed00

0000ae20 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    ae20:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    ae24:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    ae28:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    ae2a:	4672      	mov	r2, lr
	bl z_arm_fault
    ae2c:	f7ff fece 	bl	abcc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    ae30:	bd01      	pop	{r0, pc}
    ae32:	bf00      	nop

0000ae34 <z_arm_interrupt_init>:
    ae34:	4804      	ldr	r0, [pc, #16]	; (ae48 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    ae36:	2300      	movs	r3, #0
    ae38:	2120      	movs	r1, #32
    ae3a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    ae3c:	3301      	adds	r3, #1
    ae3e:	2b30      	cmp	r3, #48	; 0x30
    ae40:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    ae44:	d1f9      	bne.n	ae3a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    ae46:	4770      	bx	lr
    ae48:	e000e100 	.word	0xe000e100

0000ae4c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    ae4c:	f021 f856 	bl	2befc <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ae50:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ae52:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    ae56:	480b      	ldr	r0, [pc, #44]	; (ae84 <__start+0x38>)
    ldr r1, =0xaa
    ae58:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    ae5c:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
    ae60:	f01d fbb4 	bl	285cc <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    ae64:	4807      	ldr	r0, [pc, #28]	; (ae84 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    ae66:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    ae6a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    ae6c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    ae70:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    ae74:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    ae76:	4308      	orrs	r0, r1
    msr CONTROL, r0
    ae78:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    ae7c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    ae80:	f7ff fb98 	bl	a5b4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    ae84:	200081c0 	.word	0x200081c0

0000ae88 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    ae88:	4b06      	ldr	r3, [pc, #24]	; (aea4 <z_impl_k_thread_abort+0x1c>)
    ae8a:	689b      	ldr	r3, [r3, #8]
    ae8c:	4283      	cmp	r3, r0
    ae8e:	d107      	bne.n	aea0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ae90:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    ae94:	b123      	cbz	r3, aea0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ae96:	4a04      	ldr	r2, [pc, #16]	; (aea8 <z_impl_k_thread_abort+0x20>)
    ae98:	6853      	ldr	r3, [r2, #4]
    ae9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ae9e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    aea0:	f019 bb20 	b.w	244e4 <z_thread_abort>
    aea4:	200047a8 	.word	0x200047a8
    aea8:	e000ed00 	.word	0xe000ed00

0000aeac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    aeac:	4b02      	ldr	r3, [pc, #8]	; (aeb8 <z_arm_configure_static_mpu_regions+0xc>)
    aeae:	4a03      	ldr	r2, [pc, #12]	; (aebc <z_arm_configure_static_mpu_regions+0x10>)
    aeb0:	4803      	ldr	r0, [pc, #12]	; (aec0 <z_arm_configure_static_mpu_regions+0x14>)
    aeb2:	2101      	movs	r1, #1
    aeb4:	f000 b892 	b.w	afdc <arm_core_mpu_configure_static_mpu_regions>
    aeb8:	20040000 	.word	0x20040000
    aebc:	20000000 	.word	0x20000000
    aec0:	0002cd14 	.word	0x0002cd14

0000aec4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    aec4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    aec8:	4b05      	ldr	r3, [pc, #20]	; (aee0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    aeca:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    aecc:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    aece:	4a05      	ldr	r2, [pc, #20]	; (aee4 <z_arm_configure_dynamic_mpu_regions+0x20>)
    aed0:	2120      	movs	r1, #32
    aed2:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    aed6:	4618      	mov	r0, r3
    aed8:	2101      	movs	r1, #1
    aeda:	f000 b889 	b.w	aff0 <arm_core_mpu_configure_dynamic_mpu_regions>
    aede:	bf00      	nop
    aee0:	20002a20 	.word	0x20002a20
    aee4:	150b0000 	.word	0x150b0000

0000aee8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    aee8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    aeea:	4f2d      	ldr	r7, [pc, #180]	; (afa0 <mpu_configure_regions+0xb8>)
    aeec:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    aeee:	2600      	movs	r6, #0
    aef0:	428e      	cmp	r6, r1
    aef2:	db02      	blt.n	aefa <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    aef4:	4610      	mov	r0, r2
    aef6:	b009      	add	sp, #36	; 0x24
    aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    aefa:	6844      	ldr	r4, [r0, #4]
    aefc:	2c00      	cmp	r4, #0
    aefe:	d04c      	beq.n	af9a <mpu_configure_regions+0xb2>
		if (do_sanity_check &&
    af00:	b1db      	cbz	r3, af3a <mpu_configure_regions+0x52>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    af02:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    af06:	ea14 0f0c 	tst.w	r4, ip
    af0a:	d010      	beq.n	af2e <mpu_configure_regions+0x46>
			LOG_ERR("Partition %u: sanity check failed.", i);
    af0c:	4825      	ldr	r0, [pc, #148]	; (afa4 <mpu_configure_regions+0xbc>)
    af0e:	6803      	ldr	r3, [r0, #0]
    af10:	075a      	lsls	r2, r3, #29
    af12:	d029      	beq.n	af68 <mpu_configure_regions+0x80>
    af14:	4b24      	ldr	r3, [pc, #144]	; (afa8 <mpu_configure_regions+0xc0>)
    af16:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    af1a:	2303      	movs	r3, #3
    af1c:	9301      	str	r3, [sp, #4]
    af1e:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    af20:	2300      	movs	r3, #0
    af22:	aa05      	add	r2, sp, #20
    af24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    af28:	f01a fe5a 	bl	25be0 <z_impl_z_log_msg2_static_create>
		if (reg_index == -EINVAL) {
    af2c:	e01c      	b.n	af68 <mpu_configure_regions+0x80>
		&&
    af2e:	2c1f      	cmp	r4, #31
    af30:	d9ec      	bls.n	af0c <mpu_configure_regions+0x24>
		((part->start & (part->size - 1U)) == 0U);
    af32:	6805      	ldr	r5, [r0, #0]
		&&
    af34:	ea1c 0f05 	tst.w	ip, r5
    af38:	d1e8      	bne.n	af0c <mpu_configure_regions+0x24>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    af3a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    af3c:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    af3e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    af42:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    af44:	d913      	bls.n	af6e <mpu_configure_regions+0x86>
	if (size > (1UL << 31)) {
    af46:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    af4a:	d812      	bhi.n	af72 <mpu_configure_regions+0x8a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    af4c:	3c01      	subs	r4, #1
    af4e:	fab4 f484 	clz	r4, r4
    af52:	f1c4 041f 	rsb	r4, r4, #31
    af56:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    af58:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    af5a:	ea4c 0404 	orr.w	r4, ip, r4
    af5e:	d90e      	bls.n	af7e <mpu_configure_regions+0x96>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    af60:	4810      	ldr	r0, [pc, #64]	; (afa4 <mpu_configure_regions+0xbc>)
    af62:	6803      	ldr	r3, [r0, #0]
    af64:	075b      	lsls	r3, r3, #29
    af66:	d106      	bne.n	af76 <mpu_configure_regions+0x8e>
			return -EINVAL;
    af68:	f06f 0215 	mvn.w	r2, #21
    af6c:	e7c2      	b.n	aef4 <mpu_configure_regions+0xc>
		return REGION_32B;
    af6e:	2408      	movs	r4, #8
    af70:	e7f2      	b.n	af58 <mpu_configure_regions+0x70>
		return REGION_4G;
    af72:	243e      	movs	r4, #62	; 0x3e
    af74:	e7f0      	b.n	af58 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    af76:	4b0d      	ldr	r3, [pc, #52]	; (afac <mpu_configure_regions+0xc4>)
    af78:	e9cd 3206 	strd	r3, r2, [sp, #24]
    af7c:	e7cd      	b.n	af1a <mpu_configure_regions+0x32>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    af7e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    af82:	4315      	orrs	r5, r2
    af84:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    af88:	f044 0401 	orr.w	r4, r4, #1
    af8c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    af90:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    af94:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    af96:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    af9a:	3601      	adds	r6, #1
    af9c:	300c      	adds	r0, #12
    af9e:	e7a7      	b.n	aef0 <mpu_configure_regions+0x8>
    afa0:	e000ed00 	.word	0xe000ed00
    afa4:	20000a28 	.word	0x20000a28
    afa8:	0002ffac 	.word	0x0002ffac
    afac:	0002ffcf 	.word	0x0002ffcf

0000afb0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    afb0:	4b04      	ldr	r3, [pc, #16]	; (afc4 <arm_core_mpu_enable+0x14>)
    afb2:	2205      	movs	r2, #5
    afb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    afb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    afbc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    afc0:	4770      	bx	lr
    afc2:	bf00      	nop
    afc4:	e000ed00 	.word	0xe000ed00

0000afc8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    afc8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    afcc:	4b02      	ldr	r3, [pc, #8]	; (afd8 <arm_core_mpu_disable+0x10>)
    afce:	2200      	movs	r2, #0
    afd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    afd4:	4770      	bx	lr
    afd6:	bf00      	nop
    afd8:	e000ed00 	.word	0xe000ed00

0000afdc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    afdc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    afde:	4c03      	ldr	r4, [pc, #12]	; (afec <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    afe0:	2301      	movs	r3, #1
    afe2:	7822      	ldrb	r2, [r4, #0]
    afe4:	f7ff ff80 	bl	aee8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    afe8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    afea:	bd10      	pop	{r4, pc}
    afec:	20004855 	.word	0x20004855

0000aff0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    aff0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    aff2:	4a09      	ldr	r2, [pc, #36]	; (b018 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    aff4:	2300      	movs	r3, #0
    aff6:	7812      	ldrb	r2, [r2, #0]
    aff8:	f7ff ff76 	bl	aee8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    affc:	f110 0f16 	cmn.w	r0, #22
    b000:	d003      	beq.n	b00a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    b002:	4b06      	ldr	r3, [pc, #24]	; (b01c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    b004:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    b006:	2807      	cmp	r0, #7
    b008:	dd00      	ble.n	b00c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    b00a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    b00c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    b010:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    b014:	3001      	adds	r0, #1
    b016:	e7f6      	b.n	b006 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    b018:	20004855 	.word	0x20004855
    b01c:	e000ed00 	.word	0xe000ed00

0000b020 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    b020:	4914      	ldr	r1, [pc, #80]	; (b074 <z_arm_mpu_init+0x54>)
    b022:	6808      	ldr	r0, [r1, #0]
    b024:	2808      	cmp	r0, #8
{
    b026:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    b028:	d821      	bhi.n	b06e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    b02a:	f7ff ffcd 	bl	afc8 <arm_core_mpu_disable>
    b02e:	4c12      	ldr	r4, [pc, #72]	; (b078 <z_arm_mpu_init+0x58>)
    b030:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    b032:	2200      	movs	r2, #0
    b034:	4290      	cmp	r0, r2
    b036:	f101 010c 	add.w	r1, r1, #12
    b03a:	d105      	bne.n	b048 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    b03c:	4b0f      	ldr	r3, [pc, #60]	; (b07c <z_arm_mpu_init+0x5c>)
    b03e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    b040:	f7ff ffb6 	bl	afb0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    b044:	2000      	movs	r0, #0
}
    b046:	bd10      	pop	{r4, pc}
    b048:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b04c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    b050:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    b054:	4313      	orrs	r3, r2
    b056:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    b05a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    b05e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b062:	f043 0301 	orr.w	r3, r3, #1
    b066:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    b06a:	3201      	adds	r2, #1
    b06c:	e7e2      	b.n	b034 <z_arm_mpu_init+0x14>
		return -1;
    b06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b072:	e7e8      	b.n	b046 <z_arm_mpu_init+0x26>
    b074:	0002cd20 	.word	0x0002cd20
    b078:	e000ed00 	.word	0xe000ed00
    b07c:	20004855 	.word	0x20004855

0000b080 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    b080:	b40c      	push	{r2, r3}
    b082:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    b084:	b909      	cbnz	r1, b08a <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    b086:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    b08a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    b08e:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    b090:	9a06      	ldr	r2, [sp, #24]
    b092:	4806      	ldr	r0, [pc, #24]	; (b0ac <snprintf+0x2c>)
	va_start(vargs, format);
    b094:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    b096:	a902      	add	r1, sp, #8
    b098:	f7f9 ff1a 	bl	4ed0 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    b09c:	9b02      	ldr	r3, [sp, #8]
    b09e:	2200      	movs	r2, #0
    b0a0:	701a      	strb	r2, [r3, #0]
	return r;
}
    b0a2:	b005      	add	sp, #20
    b0a4:	f85d eb04 	ldr.w	lr, [sp], #4
    b0a8:	b002      	add	sp, #8
    b0aa:	4770      	bx	lr
    b0ac:	000285df 	.word	0x000285df

0000b0b0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    b0b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    b0b2:	f04f 0320 	mov.w	r3, #32
    b0b6:	f3ef 8011 	mrs	r0, BASEPRI
    b0ba:	f383 8812 	msr	BASEPRI_MAX, r3
    b0be:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    b0c2:	4a11      	ldr	r2, [pc, #68]	; (b108 <nordicsemi_nrf52_init+0x58>)
    b0c4:	2301      	movs	r3, #1
    b0c6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    b0ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b0ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    b0d2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    b0d6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    b0da:	2c08      	cmp	r4, #8
    b0dc:	d108      	bne.n	b0f0 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    b0de:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    b0e2:	2905      	cmp	r1, #5
    b0e4:	d804      	bhi.n	b0f0 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    b0e6:	4c09      	ldr	r4, [pc, #36]	; (b10c <nordicsemi_nrf52_init+0x5c>)
    b0e8:	5c61      	ldrb	r1, [r4, r1]
    b0ea:	b109      	cbz	r1, b0f0 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    b0ec:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    b0f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b0f4:	2201      	movs	r2, #1
    b0f6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    b0fa:	f380 8811 	msr	BASEPRI, r0
    b0fe:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    b102:	2000      	movs	r0, #0
    b104:	bd10      	pop	{r4, pc}
    b106:	bf00      	nop
    b108:	4001e000 	.word	0x4001e000
    b10c:	00030008 	.word	0x00030008

0000b110 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b110:	b120      	cbz	r0, b11c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b112:	4b03      	ldr	r3, [pc, #12]	; (b120 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    b114:	0180      	lsls	r0, r0, #6
    b116:	f043 0301 	orr.w	r3, r3, #1
    b11a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b11c:	4770      	bx	lr
    b11e:	bf00      	nop
    b120:	0002c570 	.word	0x0002c570

0000b124 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    b124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b128:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    b12c:	07db      	lsls	r3, r3, #31
    b12e:	d52e      	bpl.n	b18e <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    b130:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    b134:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    b138:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    b13c:	2b07      	cmp	r3, #7
    b13e:	d126      	bne.n	b18e <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    b140:	4a14      	ldr	r2, [pc, #80]	; (b194 <board_nrf52840dongle_nrf52840_init+0x70>)
    b142:	2301      	movs	r3, #1
    b144:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    b148:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    b14c:	2b00      	cmp	r3, #0
    b14e:	d0fb      	beq.n	b148 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    b150:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    b154:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    b158:	f023 0307 	bic.w	r3, r3, #7
    b15c:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    b160:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    b164:	2300      	movs	r3, #0
    b166:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    b16a:	4a0a      	ldr	r2, [pc, #40]	; (b194 <board_nrf52840dongle_nrf52840_init+0x70>)
    b16c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    b170:	2b00      	cmp	r3, #0
    b172:	d0fb      	beq.n	b16c <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    b174:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    b178:	4907      	ldr	r1, [pc, #28]	; (b198 <board_nrf52840dongle_nrf52840_init+0x74>)
    b17a:	4b08      	ldr	r3, [pc, #32]	; (b19c <board_nrf52840dongle_nrf52840_init+0x78>)
    b17c:	68ca      	ldr	r2, [r1, #12]
    b17e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b182:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    b184:	60cb      	str	r3, [r1, #12]
    b186:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    b18a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    b18c:	e7fd      	b.n	b18a <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    b18e:	2000      	movs	r0, #0
    b190:	4770      	bx	lr
    b192:	bf00      	nop
    b194:	4001e000 	.word	0x4001e000
    b198:	e000ed00 	.word	0xe000ed00
    b19c:	05fa0004 	.word	0x05fa0004

0000b1a0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    b1a0:	4b0e      	ldr	r3, [pc, #56]	; (b1dc <bt_hex_real+0x3c>)
    b1a2:	2940      	cmp	r1, #64	; 0x40
{
    b1a4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    b1a6:	bf28      	it	cs
    b1a8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    b1aa:	4c0d      	ldr	r4, [pc, #52]	; (b1e0 <bt_hex_real+0x40>)
    b1ac:	1846      	adds	r6, r0, r1
    b1ae:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    b1b0:	42b0      	cmp	r0, r6
    b1b2:	f103 0302 	add.w	r3, r3, #2
    b1b6:	d104      	bne.n	b1c2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    b1b8:	2300      	movs	r3, #0
    b1ba:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    b1be:	4807      	ldr	r0, [pc, #28]	; (b1dc <bt_hex_real+0x3c>)
    b1c0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    b1c2:	7802      	ldrb	r2, [r0, #0]
    b1c4:	0912      	lsrs	r2, r2, #4
    b1c6:	5ca2      	ldrb	r2, [r4, r2]
    b1c8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    b1cc:	f810 2b01 	ldrb.w	r2, [r0], #1
    b1d0:	f002 020f 	and.w	r2, r2, #15
    b1d4:	5ca2      	ldrb	r2, [r4, r2]
    b1d6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    b1da:	e7e9      	b.n	b1b0 <bt_hex_real+0x10>
    b1dc:	20004874 	.word	0x20004874
    b1e0:	00030053 	.word	0x00030053

0000b1e4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    b1e4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    b1e6:	7803      	ldrb	r3, [r0, #0]
    b1e8:	b08b      	sub	sp, #44	; 0x2c
    b1ea:	4604      	mov	r4, r0
    b1ec:	ad07      	add	r5, sp, #28
    b1ee:	2b03      	cmp	r3, #3
    b1f0:	d821      	bhi.n	b236 <bt_addr_le_str_real+0x52>
    b1f2:	e8df f003 	tbb	[pc, r3]
    b1f6:	1a02      	.short	0x1a02
    b1f8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    b1fa:	4912      	ldr	r1, [pc, #72]	; (b244 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    b1fc:	4628      	mov	r0, r5
    b1fe:	f01d f95a 	bl	284b6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    b202:	7863      	ldrb	r3, [r4, #1]
    b204:	9304      	str	r3, [sp, #16]
    b206:	78a3      	ldrb	r3, [r4, #2]
    b208:	9303      	str	r3, [sp, #12]
    b20a:	78e3      	ldrb	r3, [r4, #3]
    b20c:	9302      	str	r3, [sp, #8]
    b20e:	7923      	ldrb	r3, [r4, #4]
    b210:	9301      	str	r3, [sp, #4]
    b212:	7963      	ldrb	r3, [r4, #5]
    b214:	9300      	str	r3, [sp, #0]
    b216:	4a0c      	ldr	r2, [pc, #48]	; (b248 <bt_addr_le_str_real+0x64>)
    b218:	79a3      	ldrb	r3, [r4, #6]
    b21a:	9505      	str	r5, [sp, #20]
    b21c:	211e      	movs	r1, #30
    b21e:	480b      	ldr	r0, [pc, #44]	; (b24c <bt_addr_le_str_real+0x68>)
    b220:	f019 fcf9 	bl	24c16 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    b224:	4809      	ldr	r0, [pc, #36]	; (b24c <bt_addr_le_str_real+0x68>)
    b226:	b00b      	add	sp, #44	; 0x2c
    b228:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    b22a:	4909      	ldr	r1, [pc, #36]	; (b250 <bt_addr_le_str_real+0x6c>)
    b22c:	e7e6      	b.n	b1fc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    b22e:	4909      	ldr	r1, [pc, #36]	; (b254 <bt_addr_le_str_real+0x70>)
    b230:	e7e4      	b.n	b1fc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    b232:	4909      	ldr	r1, [pc, #36]	; (b258 <bt_addr_le_str_real+0x74>)
    b234:	e7e2      	b.n	b1fc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    b236:	4a09      	ldr	r2, [pc, #36]	; (b25c <bt_addr_le_str_real+0x78>)
    b238:	210a      	movs	r1, #10
    b23a:	4628      	mov	r0, r5
    b23c:	f019 fceb 	bl	24c16 <snprintk>
		break;
    b240:	e7df      	b.n	b202 <bt_addr_le_str_real+0x1e>
    b242:	bf00      	nop
    b244:	0003000e 	.word	0x0003000e
    b248:	00030030 	.word	0x00030030
    b24c:	20004856 	.word	0x20004856
    b250:	00030015 	.word	0x00030015
    b254:	0003001c 	.word	0x0003001c
    b258:	00030026 	.word	0x00030026
    b25c:	00031871 	.word	0x00031871

0000b260 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    b260:	b570      	push	{r4, r5, r6, lr}
    b262:	4c21      	ldr	r4, [pc, #132]	; (b2e8 <le_gen_dhkey+0x88>)
    b264:	f3bf 8f5b 	dmb	ish
    b268:	6823      	ldr	r3, [r4, #0]
    b26a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    b26e:	07da      	lsls	r2, r3, #31
{
    b270:	4606      	mov	r6, r0
    b272:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    b274:	d501      	bpl.n	b27a <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    b276:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    b278:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    b27a:	2901      	cmp	r1, #1
    b27c:	d831      	bhi.n	b2e2 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b27e:	f3bf 8f5b 	dmb	ish
    b282:	e854 3f00 	ldrex	r3, [r4]
    b286:	f043 0202 	orr.w	r2, r3, #2
    b28a:	e844 2100 	strex	r1, r2, [r4]
    b28e:	2900      	cmp	r1, #0
    b290:	d1f7      	bne.n	b282 <le_gen_dhkey+0x22>
    b292:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    b296:	079b      	lsls	r3, r3, #30
    b298:	d4ed      	bmi.n	b276 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    b29a:	4814      	ldr	r0, [pc, #80]	; (b2ec <le_gen_dhkey+0x8c>)
    b29c:	4631      	mov	r1, r6
    b29e:	f01d fa34 	bl	2870a <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    b2a2:	4813      	ldr	r0, [pc, #76]	; (b2f0 <le_gen_dhkey+0x90>)
    b2a4:	f106 0120 	add.w	r1, r6, #32
    b2a8:	f01d fa2f 	bl	2870a <sys_memcpy_swap.constprop.0>
    b2ac:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    b2b0:	b175      	cbz	r5, b2d0 <le_gen_dhkey+0x70>
    b2b2:	e854 3f00 	ldrex	r3, [r4]
    b2b6:	f043 0304 	orr.w	r3, r3, #4
    b2ba:	e844 3200 	strex	r2, r3, [r4]
    b2be:	2a00      	cmp	r2, #0
    b2c0:	d1f7      	bne.n	b2b2 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b2c2:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    b2c6:	480b      	ldr	r0, [pc, #44]	; (b2f4 <le_gen_dhkey+0x94>)
    b2c8:	f018 fbf8 	bl	23abc <z_impl_k_sem_give>
    b2cc:	2000      	movs	r0, #0
    b2ce:	e7d3      	b.n	b278 <le_gen_dhkey+0x18>
    b2d0:	e854 3f00 	ldrex	r3, [r4]
    b2d4:	f023 0304 	bic.w	r3, r3, #4
    b2d8:	e844 3200 	strex	r2, r3, [r4]
    b2dc:	2a00      	cmp	r2, #0
    b2de:	d0f0      	beq.n	b2c2 <le_gen_dhkey+0x62>
    b2e0:	e7f6      	b.n	b2d0 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    b2e2:	2012      	movs	r0, #18
    b2e4:	e7c8      	b.n	b278 <le_gen_dhkey+0x18>
    b2e6:	bf00      	nop
    b2e8:	20002a2c 	.word	0x20002a2c
    b2ec:	20004915 	.word	0x20004915
    b2f0:	20004935 	.word	0x20004935
    b2f4:	20000b40 	.word	0x20000b40

0000b2f8 <ecc_thread>:
{
    b2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2fc:	4f71      	ldr	r7, [pc, #452]	; (b4c4 <ecc_thread+0x1cc>)
	return z_impl_k_sem_take(sem, timeout);
    b2fe:	f8df 81c8 	ldr.w	r8, [pc, #456]	; b4c8 <ecc_thread+0x1d0>
    b302:	b089      	sub	sp, #36	; 0x24
    b304:	463e      	mov	r6, r7
    b306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b30e:	4640      	mov	r0, r8
    b310:	f018 fbfa 	bl	23b08 <z_impl_k_sem_take>
    b314:	f3bf 8f5b 	dmb	ish
    b318:	683d      	ldr	r5, [r7, #0]
    b31a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    b31e:	f015 0501 	ands.w	r5, r5, #1
    b322:	d063      	beq.n	b3ec <ecc_thread+0xf4>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    b324:	f8df 91a4 	ldr.w	r9, [pc, #420]	; b4cc <ecc_thread+0x1d4>
    b328:	4c69      	ldr	r4, [pc, #420]	; (b4d0 <ecc_thread+0x1d8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    b32a:	4d6a      	ldr	r5, [pc, #424]	; (b4d4 <ecc_thread+0x1dc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    b32c:	486a      	ldr	r0, [pc, #424]	; (b4d8 <ecc_thread+0x1e0>)
    b32e:	464a      	mov	r2, r9
    b330:	4621      	mov	r1, r4
    b332:	f01b feb3 	bl	2709c <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    b336:	4603      	mov	r3, r0
    b338:	b980      	cbnz	r0, b35c <ecc_thread+0x64>
			BT_ERR("Failed to create ECC public/private pair");
    b33a:	4868      	ldr	r0, [pc, #416]	; (b4dc <ecc_thread+0x1e4>)
    b33c:	6802      	ldr	r2, [r0, #0]
    b33e:	0752      	lsls	r2, r2, #29
    b340:	d009      	beq.n	b356 <ecc_thread+0x5e>
    b342:	4a67      	ldr	r2, [pc, #412]	; (b4e0 <ecc_thread+0x1e8>)
    b344:	9206      	str	r2, [sp, #24]
    b346:	2202      	movs	r2, #2
    b348:	9201      	str	r2, [sp, #4]
    b34a:	9205      	str	r2, [sp, #20]
    b34c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b350:	aa05      	add	r2, sp, #20
    b352:	f01a fc45 	bl	25be0 <z_impl_z_log_msg2_static_create>
			return BT_HCI_ERR_UNSPECIFIED;
    b356:	f04f 091f 	mov.w	r9, #31
    b35a:	e008      	b.n	b36e <ecc_thread+0x76>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    b35c:	2220      	movs	r2, #32
    b35e:	4629      	mov	r1, r5
    b360:	4620      	mov	r0, r4
    b362:	f01d f8ff 	bl	28564 <memcmp>
    b366:	2800      	cmp	r0, #0
    b368:	d0e0      	beq.n	b32c <ecc_thread+0x34>
	return 0;
    b36a:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b36e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b376:	2001      	movs	r0, #1
    b378:	f000 f97e 	bl	b678 <bt_buf_get_rx>
    b37c:	f100 0508 	add.w	r5, r0, #8
    b380:	2102      	movs	r1, #2
    b382:	4604      	mov	r4, r0
    b384:	4628      	mov	r0, r5
    b386:	f01f fb30 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    b38a:	233e      	movs	r3, #62	; 0x3e
    b38c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    b38e:	2342      	movs	r3, #66	; 0x42
    b390:	7043      	strb	r3, [r0, #1]
    b392:	2101      	movs	r1, #1
    b394:	4628      	mov	r0, r5
    b396:	f01f fb28 	bl	2a9ea <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    b39a:	2308      	movs	r3, #8
    b39c:	7003      	strb	r3, [r0, #0]
    b39e:	2141      	movs	r1, #65	; 0x41
    b3a0:	4628      	mov	r0, r5
    b3a2:	f01f fb22 	bl	2a9ea <net_buf_simple_add>
    b3a6:	4605      	mov	r5, r0
	evt->status = status;
    b3a8:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    b3ac:	f1b9 0f00 	cmp.w	r9, #0
    b3b0:	d013      	beq.n	b3da <ecc_thread+0xe2>
		(void)memset(evt->key, 0, sizeof(evt->key));
    b3b2:	2240      	movs	r2, #64	; 0x40
    b3b4:	2100      	movs	r1, #0
    b3b6:	f01d f909 	bl	285cc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b3ba:	f3bf 8f5b 	dmb	ish
    b3be:	e856 3f00 	ldrex	r3, [r6]
    b3c2:	f023 0301 	bic.w	r3, r3, #1
    b3c6:	e846 3200 	strex	r2, r3, [r6]
    b3ca:	2a00      	cmp	r2, #0
    b3cc:	d1f7      	bne.n	b3be <ecc_thread+0xc6>
    b3ce:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    b3d2:	4620      	mov	r0, r4
	bt_recv(buf);
    b3d4:	f001 fb9c 	bl	cb10 <bt_recv>
	while (true) {
    b3d8:	e795      	b.n	b306 <ecc_thread+0xe>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    b3da:	493f      	ldr	r1, [pc, #252]	; (b4d8 <ecc_thread+0x1e0>)
    b3dc:	f01d f995 	bl	2870a <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    b3e0:	3120      	adds	r1, #32
    b3e2:	f105 0021 	add.w	r0, r5, #33	; 0x21
    b3e6:	f01d f990 	bl	2870a <sys_memcpy_swap.constprop.0>
    b3ea:	e7e6      	b.n	b3ba <ecc_thread+0xc2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b3ec:	f3bf 8f5b 	dmb	ish
    b3f0:	683b      	ldr	r3, [r7, #0]
    b3f2:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    b3f6:	079b      	lsls	r3, r3, #30
    b3f8:	d585      	bpl.n	b306 <ecc_thread+0xe>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    b3fa:	4934      	ldr	r1, [pc, #208]	; (b4cc <ecc_thread+0x1d4>)
    b3fc:	4836      	ldr	r0, [pc, #216]	; (b4d8 <ecc_thread+0x1e0>)
    b3fe:	f01c fd06 	bl	27e0e <uECC_valid_public_key>
	if (ret < 0) {
    b402:	1e03      	subs	r3, r0, #0
    b404:	da44      	bge.n	b490 <ecc_thread+0x198>
		BT_ERR("public key is not valid (ret %d)", ret);
    b406:	4835      	ldr	r0, [pc, #212]	; (b4dc <ecc_thread+0x1e4>)
    b408:	6804      	ldr	r4, [r0, #0]
    b40a:	f014 0407 	ands.w	r4, r4, #7
    b40e:	d00c      	beq.n	b42a <ecc_thread+0x132>
    b410:	4a34      	ldr	r2, [pc, #208]	; (b4e4 <ecc_thread+0x1ec>)
    b412:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b416:	2303      	movs	r3, #3
    b418:	9301      	str	r3, [sp, #4]
    b41a:	9305      	str	r3, [sp, #20]
    b41c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b420:	462b      	mov	r3, r5
    b422:	aa05      	add	r2, sp, #20
		ret = TC_CRYPTO_FAIL;
    b424:	462c      	mov	r4, r5
    b426:	f01a fbdb 	bl	25be0 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b42a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b432:	2001      	movs	r0, #1
    b434:	f000 f920 	bl	b678 <bt_buf_get_rx>
    b438:	f100 0908 	add.w	r9, r0, #8
    b43c:	2102      	movs	r1, #2
    b43e:	4605      	mov	r5, r0
    b440:	4648      	mov	r0, r9
    b442:	f01f fad2 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    b446:	233e      	movs	r3, #62	; 0x3e
    b448:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    b44a:	2322      	movs	r3, #34	; 0x22
    b44c:	7043      	strb	r3, [r0, #1]
    b44e:	2101      	movs	r1, #1
    b450:	4648      	mov	r0, r9
    b452:	f01f faca 	bl	2a9ea <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    b456:	2309      	movs	r3, #9
    b458:	7003      	strb	r3, [r0, #0]
    b45a:	2121      	movs	r1, #33	; 0x21
    b45c:	4648      	mov	r0, r9
    b45e:	f01f fac4 	bl	2a9ea <net_buf_simple_add>
    b462:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    b464:	3001      	adds	r0, #1
    b466:	bb34      	cbnz	r4, b4b6 <ecc_thread+0x1be>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    b468:	221f      	movs	r2, #31
    b46a:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    b46c:	21ff      	movs	r1, #255	; 0xff
    b46e:	2220      	movs	r2, #32
    b470:	f01d f8ac 	bl	285cc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b474:	f3bf 8f5b 	dmb	ish
    b478:	e856 3f00 	ldrex	r3, [r6]
    b47c:	f023 0302 	bic.w	r3, r3, #2
    b480:	e846 3200 	strex	r2, r3, [r6]
    b484:	2a00      	cmp	r2, #0
    b486:	d1f7      	bne.n	b478 <ecc_thread+0x180>
    b488:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    b48c:	4628      	mov	r0, r5
    b48e:	e7a1      	b.n	b3d4 <ecc_thread+0xdc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b490:	f3bf 8f5b 	dmb	ish
    b494:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
    b496:	490e      	ldr	r1, [pc, #56]	; (b4d0 <ecc_thread+0x1d8>)
    b498:	480e      	ldr	r0, [pc, #56]	; (b4d4 <ecc_thread+0x1dc>)
    b49a:	f3bf 8f5b 	dmb	ish
    b49e:	f013 0f04 	tst.w	r3, #4
    b4a2:	f101 0220 	add.w	r2, r1, #32
    b4a6:	4b09      	ldr	r3, [pc, #36]	; (b4cc <ecc_thread+0x1d4>)
    b4a8:	bf18      	it	ne
    b4aa:	4601      	movne	r1, r0
    b4ac:	4610      	mov	r0, r2
    b4ae:	f01b fe44 	bl	2713a <uECC_shared_secret>
    b4b2:	4604      	mov	r4, r0
    b4b4:	e7b9      	b.n	b42a <ecc_thread+0x132>
		evt->status = 0U;
    b4b6:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    b4b8:	4907      	ldr	r1, [pc, #28]	; (b4d8 <ecc_thread+0x1e0>)
		evt->status = 0U;
    b4ba:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    b4bc:	f01d f925 	bl	2870a <sys_memcpy_swap.constprop.0>
    b4c0:	e7d8      	b.n	b474 <ecc_thread+0x17c>
    b4c2:	bf00      	nop
    b4c4:	20002a2c 	.word	0x20002a2c
    b4c8:	20000b40 	.word	0x20000b40
    b4cc:	0002cd40 	.word	0x0002cd40
    b4d0:	200048f5 	.word	0x200048f5
    b4d4:	000300c7 	.word	0x000300c7
    b4d8:	20004915 	.word	0x20004915
    b4dc:	20000a00 	.word	0x20000a00
    b4e0:	0003006b 	.word	0x0003006b
    b4e4:	00030094 	.word	0x00030094

0000b4e8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    b4e8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    b4ea:	7d06      	ldrb	r6, [r0, #20]
    b4ec:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    b4ee:	b976      	cbnz	r6, b50e <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    b4f0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    b4f2:	881d      	ldrh	r5, [r3, #0]
    b4f4:	f242 0226 	movw	r2, #8230	; 0x2026
    b4f8:	4295      	cmp	r5, r2
    b4fa:	d045      	beq.n	b588 <bt_hci_ecc_send+0xa0>
    b4fc:	d80f      	bhi.n	b51e <bt_hci_ecc_send+0x36>
    b4fe:	f242 0201 	movw	r2, #8193	; 0x2001
    b502:	4295      	cmp	r5, r2
    b504:	d04f      	beq.n	b5a6 <bt_hci_ecc_send+0xbe>
    b506:	f242 0325 	movw	r3, #8229	; 0x2025
    b50a:	429d      	cmp	r5, r3
    b50c:	d013      	beq.n	b536 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    b50e:	4b2a      	ldr	r3, [pc, #168]	; (b5b8 <bt_hci_ecc_send+0xd0>)
    b510:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    b514:	4620      	mov	r0, r4
    b516:	691b      	ldr	r3, [r3, #16]
}
    b518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    b51c:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    b51e:	f242 035e 	movw	r3, #8286	; 0x205e
    b522:	429d      	cmp	r5, r3
    b524:	d1f3      	bne.n	b50e <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    b526:	2103      	movs	r1, #3
    b528:	3008      	adds	r0, #8
    b52a:	f01f fa87 	bl	2aa3c <net_buf_simple_pull>
	cmd = (void *)buf->data;
    b52e:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    b530:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b534:	e02e      	b.n	b594 <bt_hci_ecc_send+0xac>
    b536:	2103      	movs	r1, #3
    b538:	3008      	adds	r0, #8
    b53a:	f01f fa7f 	bl	2aa3c <net_buf_simple_pull>
	net_buf_unref(buf);
    b53e:	4620      	mov	r0, r4
    b540:	f013 fe94 	bl	1f26c <net_buf_unref>
    b544:	f3bf 8f5b 	dmb	ish
    b548:	4b1c      	ldr	r3, [pc, #112]	; (b5bc <bt_hci_ecc_send+0xd4>)
    b54a:	681a      	ldr	r2, [r3, #0]
    b54c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    b550:	0792      	lsls	r2, r2, #30
    b552:	d507      	bpl.n	b564 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    b554:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    b556:	4631      	mov	r1, r6
    b558:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    b55c:	f01d f8b1 	bl	286c2 <send_cmd_status>
}
    b560:	2000      	movs	r0, #0
    b562:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b564:	f3bf 8f5b 	dmb	ish
    b568:	e853 2f00 	ldrex	r2, [r3]
    b56c:	f042 0101 	orr.w	r1, r2, #1
    b570:	e843 1000 	strex	r0, r1, [r3]
    b574:	2800      	cmp	r0, #0
    b576:	d1f7      	bne.n	b568 <bt_hci_ecc_send+0x80>
    b578:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    b57c:	07d3      	lsls	r3, r2, #31
    b57e:	d4e9      	bmi.n	b554 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    b580:	480f      	ldr	r0, [pc, #60]	; (b5c0 <bt_hci_ecc_send+0xd8>)
    b582:	f018 fa9b 	bl	23abc <z_impl_k_sem_give>
}
    b586:	e7e6      	b.n	b556 <bt_hci_ecc_send+0x6e>
    b588:	2103      	movs	r1, #3
    b58a:	3008      	adds	r0, #8
    b58c:	f01f fa56 	bl	2aa3c <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    b590:	68a0      	ldr	r0, [r4, #8]
    b592:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    b594:	f7ff fe64 	bl	b260 <le_gen_dhkey>
    b598:	4606      	mov	r6, r0
	net_buf_unref(buf);
    b59a:	4620      	mov	r0, r4
    b59c:	f013 fe66 	bl	1f26c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    b5a0:	4631      	mov	r1, r6
    b5a2:	4628      	mov	r0, r5
    b5a4:	e7da      	b.n	b55c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    b5a6:	78da      	ldrb	r2, [r3, #3]
    b5a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b5ac:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    b5ae:	791a      	ldrb	r2, [r3, #4]
    b5b0:	f022 0201 	bic.w	r2, r2, #1
    b5b4:	711a      	strb	r2, [r3, #4]
}
    b5b6:	e7aa      	b.n	b50e <bt_hci_ecc_send+0x26>
    b5b8:	20000000 	.word	0x20000000
    b5bc:	20002a2c 	.word	0x20002a2c
    b5c0:	20000b40 	.word	0x20000b40

0000b5c4 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    b5c4:	b510      	push	{r4, lr}
    b5c6:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b5c8:	4c0c      	ldr	r4, [pc, #48]	; (b5fc <bt_hci_ecc_init+0x38>)
    b5ca:	490d      	ldr	r1, [pc, #52]	; (b600 <bt_hci_ecc_init+0x3c>)
    b5cc:	2200      	movs	r2, #0
    b5ce:	2300      	movs	r3, #0
    b5d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b5d4:	2300      	movs	r3, #0
    b5d6:	220a      	movs	r2, #10
    b5d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    b5dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    b5e0:	9300      	str	r3, [sp, #0]
    b5e2:	f44f 628f 	mov.w	r2, #1144	; 0x478
    b5e6:	4b07      	ldr	r3, [pc, #28]	; (b604 <bt_hci_ecc_init+0x40>)
    b5e8:	4620      	mov	r0, r4
    b5ea:	f018 f8d3 	bl	23794 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    b5ee:	4906      	ldr	r1, [pc, #24]	; (b608 <bt_hci_ecc_init+0x44>)
    b5f0:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    b5f2:	b008      	add	sp, #32
    b5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5f8:	f018 b81a 	b.w	23630 <z_impl_k_thread_name_set>
    b5fc:	20001758 	.word	0x20001758
    b600:	20006960 	.word	0x20006960
    b604:	0000b2f9 	.word	0x0000b2f9
    b608:	000300b5 	.word	0x000300b5

0000b60c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    b60c:	b430      	push	{r4, r5}
    b60e:	4603      	mov	r3, r0
    b610:	4608      	mov	r0, r1
	switch (src->type) {
    b612:	781a      	ldrb	r2, [r3, #0]
    b614:	2a01      	cmp	r2, #1
    b616:	d013      	beq.n	b640 <uuid_to_uuid128+0x34>
    b618:	2a02      	cmp	r2, #2
    b61a:	d026      	beq.n	b66a <uuid_to_uuid128+0x5e>
    b61c:	b972      	cbnz	r2, b63c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    b61e:	4a15      	ldr	r2, [pc, #84]	; (b674 <uuid_to_uuid128+0x68>)
    b620:	f102 0410 	add.w	r4, r2, #16
    b624:	f852 5b04 	ldr.w	r5, [r2], #4
    b628:	f841 5b04 	str.w	r5, [r1], #4
    b62c:	42a2      	cmp	r2, r4
    b62e:	d1f9      	bne.n	b624 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    b630:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    b632:	7812      	ldrb	r2, [r2, #0]
    b634:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    b636:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    b638:	0a1b      	lsrs	r3, r3, #8
    b63a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    b63c:	bc30      	pop	{r4, r5}
    b63e:	4770      	bx	lr
		*dst = uuid128_base;
    b640:	4a0c      	ldr	r2, [pc, #48]	; (b674 <uuid_to_uuid128+0x68>)
    b642:	f102 0410 	add.w	r4, r2, #16
    b646:	f852 5b04 	ldr.w	r5, [r2], #4
    b64a:	f841 5b04 	str.w	r5, [r1], #4
    b64e:	42a2      	cmp	r2, r4
    b650:	d1f9      	bne.n	b646 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    b652:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    b654:	7812      	ldrb	r2, [r2, #0]
    b656:	700a      	strb	r2, [r1, #0]
    b658:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    b65c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    b65e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    b660:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    b662:	0a1b      	lsrs	r3, r3, #8
    b664:	7382      	strb	r2, [r0, #14]
    b666:	7403      	strb	r3, [r0, #16]
}
    b668:	e7e8      	b.n	b63c <uuid_to_uuid128+0x30>
}
    b66a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    b66c:	2211      	movs	r2, #17
    b66e:	4619      	mov	r1, r3
    b670:	f01c bfa1 	b.w	285b6 <memcpy>
    b674:	000300e7 	.word	0x000300e7

0000b678 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    b678:	b538      	push	{r3, r4, r5, lr}
    b67a:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    b67c:	4805      	ldr	r0, [pc, #20]	; (b694 <bt_buf_get_rx+0x1c>)
    b67e:	f01f f94c 	bl	2a91a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    b682:	4604      	mov	r4, r0
    b684:	b120      	cbz	r0, b690 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    b686:	2100      	movs	r1, #0
    b688:	3008      	adds	r0, #8
    b68a:	f01f f96b 	bl	2a964 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    b68e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    b690:	4620      	mov	r0, r4
    b692:	bd38      	pop	{r3, r4, r5, pc}
    b694:	20000cb0 	.word	0x20000cb0

0000b698 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    b698:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    b69a:	490b      	ldr	r1, [pc, #44]	; (b6c8 <bt_buf_get_cmd_complete+0x30>)
{
    b69c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    b69e:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
    b6a2:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    b6a4:	b920      	cbnz	r0, b6b0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    b6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    b6aa:	2001      	movs	r0, #1
    b6ac:	f7ff bfe4 	b.w	b678 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    b6b0:	f01f f969 	bl	2a986 <net_buf_ref>
    b6b4:	2301      	movs	r3, #1
		buf->len = 0U;
    b6b6:	2100      	movs	r1, #0
    b6b8:	7503      	strb	r3, [r0, #20]
    b6ba:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    b6bc:	4604      	mov	r4, r0
    b6be:	3008      	adds	r0, #8
    b6c0:	f01f f950 	bl	2a964 <net_buf_simple_reserve>
}
    b6c4:	4620      	mov	r0, r4
    b6c6:	bd10      	pop	{r4, pc}
    b6c8:	20000000 	.word	0x20000000

0000b6cc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    b6cc:	b570      	push	{r4, r5, r6, lr}
    b6ce:	4604      	mov	r4, r0
	switch (evt) {
    b6d0:	2c0f      	cmp	r4, #15
{
    b6d2:	460d      	mov	r5, r1
    b6d4:	4610      	mov	r0, r2
    b6d6:	4619      	mov	r1, r3
	switch (evt) {
    b6d8:	d805      	bhi.n	b6e6 <bt_buf_get_evt+0x1a>
    b6da:	2c0d      	cmp	r4, #13
    b6dc:	d912      	bls.n	b704 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    b6de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    b6e2:	f7ff bfd9 	b.w	b698 <bt_buf_get_cmd_complete>
	switch (evt) {
    b6e6:	2c13      	cmp	r4, #19
    b6e8:	d10c      	bne.n	b704 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    b6ea:	480b      	ldr	r0, [pc, #44]	; (b718 <bt_buf_get_evt+0x4c>)
    b6ec:	f01f f915 	bl	2a91a <net_buf_alloc_fixed>
			if (buf) {
    b6f0:	4604      	mov	r4, r0
    b6f2:	b128      	cbz	r0, b700 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    b6f4:	2100      	movs	r1, #0
    b6f6:	3008      	adds	r0, #8
    b6f8:	f01f f934 	bl	2a964 <net_buf_simple_reserve>
    b6fc:	2301      	movs	r3, #1
    b6fe:	7523      	strb	r3, [r4, #20]
}
    b700:	4620      	mov	r0, r4
    b702:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    b704:	4602      	mov	r2, r0
    b706:	460b      	mov	r3, r1
		if (discardable) {
    b708:	b10d      	cbz	r5, b70e <bt_buf_get_evt+0x42>
    b70a:	4804      	ldr	r0, [pc, #16]	; (b71c <bt_buf_get_evt+0x50>)
    b70c:	e7ee      	b.n	b6ec <bt_buf_get_evt+0x20>
}
    b70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    b712:	2001      	movs	r0, #1
    b714:	f7ff bfb0 	b.w	b678 <bt_buf_get_rx>
    b718:	20000cdc 	.word	0x20000cdc
    b71c:	20000c2c 	.word	0x20000c2c

0000b720 <ver_str>:
{
    b720:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    b722:	4d0b      	ldr	r5, [pc, #44]	; (b750 <ver_str+0x30>)
{
    b724:	4606      	mov	r6, r0
	const char * const str[] = {
    b726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    b728:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    b72a:	ac01      	add	r4, sp, #4
    b72c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b72e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    b736:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    b738:	682b      	ldr	r3, [r5, #0]
    b73a:	6023      	str	r3, [r4, #0]
		return str[ver];
    b73c:	bf9b      	ittet	ls
    b73e:	ab0e      	addls	r3, sp, #56	; 0x38
    b740:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    b744:	4803      	ldrhi	r0, [pc, #12]	; (b754 <ver_str+0x34>)
		return str[ver];
    b746:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
    b74a:	b00e      	add	sp, #56	; 0x38
    b74c:	bd70      	pop	{r4, r5, r6, pc}
    b74e:	bf00      	nop
    b750:	0002c4b0 	.word	0x0002c4b0
    b754:	000301ee 	.word	0x000301ee

0000b758 <hci_disconn_complete_prio>:
{
    b758:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    b75a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    b75c:	781a      	ldrb	r2, [r3, #0]
    b75e:	b972      	cbnz	r2, b77e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    b760:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    b764:	4620      	mov	r0, r4
    b766:	f002 ff6b 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    b76a:	4605      	mov	r5, r0
    b76c:	b940      	cbnz	r0, b780 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    b76e:	4b08      	ldr	r3, [pc, #32]	; (b790 <hci_disconn_complete_prio+0x38>)
    b770:	881a      	ldrh	r2, [r3, #0]
    b772:	b922      	cbnz	r2, b77e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    b774:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    b778:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    b77c:	8018      	strh	r0, [r3, #0]
}
    b77e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    b780:	2101      	movs	r1, #1
    b782:	f002 ff65 	bl	e650 <bt_conn_set_state>
	bt_conn_unref(conn);
    b786:	4628      	mov	r0, r5
}
    b788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    b78c:	f01d ba82 	b.w	28c94 <bt_conn_unref>
    b790:	200047f8 	.word	0x200047f8

0000b794 <hci_data_buf_overflow>:
{
    b794:	b500      	push	{lr}
    b796:	4603      	mov	r3, r0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    b798:	480a      	ldr	r0, [pc, #40]	; (b7c4 <hci_data_buf_overflow+0x30>)
    b79a:	6802      	ldr	r2, [r0, #0]
    b79c:	f012 0f06 	tst.w	r2, #6
{
    b7a0:	b089      	sub	sp, #36	; 0x24
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    b7a2:	d00c      	beq.n	b7be <hci_data_buf_overflow+0x2a>
    b7a4:	689b      	ldr	r3, [r3, #8]
    b7a6:	4a08      	ldr	r2, [pc, #32]	; (b7c8 <hci_data_buf_overflow+0x34>)
    b7a8:	781b      	ldrb	r3, [r3, #0]
    b7aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    b7ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b7b2:	2303      	movs	r3, #3
    b7b4:	aa05      	add	r2, sp, #20
    b7b6:	9301      	str	r3, [sp, #4]
    b7b8:	9305      	str	r3, [sp, #20]
    b7ba:	f01d f857 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    b7be:	b009      	add	sp, #36	; 0x24
    b7c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c4:	200009fc 	.word	0x200009fc
    b7c8:	000301f6 	.word	0x000301f6

0000b7cc <le_conn_update_complete>:
{
    b7cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    b7ce:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    b7d0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    b7d4:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    b7d6:	4630      	mov	r0, r6
    b7d8:	f002 ff32 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    b7dc:	4604      	mov	r4, r0
    b7de:	b980      	cbnz	r0, b802 <le_conn_update_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    b7e0:	4826      	ldr	r0, [pc, #152]	; (b87c <le_conn_update_complete+0xb0>)
    b7e2:	6803      	ldr	r3, [r0, #0]
    b7e4:	075a      	lsls	r2, r3, #29
    b7e6:	d00a      	beq.n	b7fe <le_conn_update_complete+0x32>
    b7e8:	4b25      	ldr	r3, [pc, #148]	; (b880 <le_conn_update_complete+0xb4>)
    b7ea:	aa05      	add	r2, sp, #20
    b7ec:	e9cd 3606 	strd	r3, r6, [sp, #24]
    b7f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b7f4:	2303      	movs	r3, #3
    b7f6:	9301      	str	r3, [sp, #4]
    b7f8:	9305      	str	r3, [sp, #20]
    b7fa:	f01d f837 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    b7fe:	b008      	add	sp, #32
    b800:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    b802:	782b      	ldrb	r3, [r5, #0]
    b804:	b9cb      	cbnz	r3, b83a <le_conn_update_complete+0x6e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    b806:	792a      	ldrb	r2, [r5, #4]
    b808:	78eb      	ldrb	r3, [r5, #3]
    b80a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b80e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    b812:	79aa      	ldrb	r2, [r5, #6]
    b814:	796b      	ldrb	r3, [r5, #5]
    b816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b81a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    b81e:	79eb      	ldrb	r3, [r5, #7]
    b820:	7a2a      	ldrb	r2, [r5, #8]
    b822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b826:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    b82a:	f003 f86d 	bl	e908 <notify_le_param_updated>
	bt_conn_unref(conn);
    b82e:	4620      	mov	r0, r4
}
    b830:	b008      	add	sp, #32
    b832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    b836:	f01d ba2d 	b.w	28c94 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    b83a:	2b1a      	cmp	r3, #26
    b83c:	d1f7      	bne.n	b82e <le_conn_update_complete+0x62>
    b83e:	78c3      	ldrb	r3, [r0, #3]
    b840:	2b01      	cmp	r3, #1
    b842:	d1f4      	bne.n	b82e <le_conn_update_complete+0x62>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    b844:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b848:	3004      	adds	r0, #4
    b84a:	f01d f800 	bl	2884e <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    b84e:	0543      	lsls	r3, r0, #21
    b850:	d4ed      	bmi.n	b82e <le_conn_update_complete+0x62>
		param.interval_min = conn->le.interval_min;
    b852:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    b856:	f8ad 3008 	strh.w	r3, [sp, #8]
		param.interval_max = conn->le.interval_max;
    b85a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    b85e:	f8ad 300a 	strh.w	r3, [sp, #10]
		param.latency = conn->le.pending_latency;
    b862:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    b866:	f8ad 300c 	strh.w	r3, [sp, #12]
		bt_l2cap_update_conn_param(conn, &param);
    b86a:	a902      	add	r1, sp, #8
		param.timeout = conn->le.pending_timeout;
    b86c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    b870:	f8ad 300e 	strh.w	r3, [sp, #14]
		bt_l2cap_update_conn_param(conn, &param);
    b874:	4620      	mov	r0, r4
    b876:	f003 fd27 	bl	f2c8 <bt_l2cap_update_conn_param>
    b87a:	e7d8      	b.n	b82e <le_conn_update_complete+0x62>
    b87c:	200009fc 	.word	0x200009fc
    b880:	0003021e 	.word	0x0003021e

0000b884 <hci_hardware_error>:
{
    b884:	b500      	push	{lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    b886:	2101      	movs	r1, #1
    b888:	b089      	sub	sp, #36	; 0x24
    b88a:	3008      	adds	r0, #8
    b88c:	f01f f8de 	bl	2aa4c <net_buf_simple_pull_mem>
    b890:	4603      	mov	r3, r0
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    b892:	4809      	ldr	r0, [pc, #36]	; (b8b8 <hci_hardware_error+0x34>)
    b894:	6802      	ldr	r2, [r0, #0]
    b896:	0752      	lsls	r2, r2, #29
    b898:	d00b      	beq.n	b8b2 <hci_hardware_error+0x2e>
    b89a:	781b      	ldrb	r3, [r3, #0]
    b89c:	4a07      	ldr	r2, [pc, #28]	; (b8bc <hci_hardware_error+0x38>)
    b89e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b8a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b8a6:	2303      	movs	r3, #3
    b8a8:	aa05      	add	r2, sp, #20
    b8aa:	9301      	str	r3, [sp, #4]
    b8ac:	9305      	str	r3, [sp, #20]
    b8ae:	f01c ffdd 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    b8b2:	b009      	add	sp, #36	; 0x24
    b8b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b8b8:	200009fc 	.word	0x200009fc
    b8bc:	00030242 	.word	0x00030242

0000b8c0 <le_data_len_change>:
{
    b8c0:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    b8c2:	6883      	ldr	r3, [r0, #8]
    b8c4:	881c      	ldrh	r4, [r3, #0]
{
    b8c6:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    b8c8:	4620      	mov	r0, r4
    b8ca:	f002 feb9 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    b8ce:	b980      	cbnz	r0, b8f2 <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    b8d0:	480a      	ldr	r0, [pc, #40]	; (b8fc <le_data_len_change+0x3c>)
    b8d2:	6803      	ldr	r3, [r0, #0]
    b8d4:	075b      	lsls	r3, r3, #29
    b8d6:	d00a      	beq.n	b8ee <le_data_len_change+0x2e>
    b8d8:	4b09      	ldr	r3, [pc, #36]	; (b900 <le_data_len_change+0x40>)
    b8da:	aa05      	add	r2, sp, #20
    b8dc:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b8e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b8e4:	2303      	movs	r3, #3
    b8e6:	9301      	str	r3, [sp, #4]
    b8e8:	9305      	str	r3, [sp, #20]
    b8ea:	f01c ffbf 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    b8ee:	b008      	add	sp, #32
    b8f0:	bd10      	pop	{r4, pc}
    b8f2:	b008      	add	sp, #32
    b8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    b8f8:	f01d b9cc 	b.w	28c94 <bt_conn_unref>
    b8fc:	200009fc 	.word	0x200009fc
    b900:	0003021e 	.word	0x0003021e

0000b904 <hci_vendor_event>:
{
    b904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    b906:	4c0a      	ldr	r4, [pc, #40]	; (b930 <hci_vendor_event+0x2c>)
    b908:	6823      	ldr	r3, [r4, #0]
    b90a:	f013 0f06 	tst.w	r3, #6
    b90e:	d00d      	beq.n	b92c <hci_vendor_event+0x28>
    b910:	8981      	ldrh	r1, [r0, #12]
    b912:	6880      	ldr	r0, [r0, #8]
    b914:	f7ff fc44 	bl	b1a0 <bt_hex_real>
    b918:	4b06      	ldr	r3, [pc, #24]	; (b934 <hci_vendor_event+0x30>)
    b91a:	9301      	str	r3, [sp, #4]
    b91c:	2300      	movs	r3, #0
    b91e:	9002      	str	r0, [sp, #8]
    b920:	9300      	str	r3, [sp, #0]
    b922:	2202      	movs	r2, #2
    b924:	4621      	mov	r1, r4
    b926:	4618      	mov	r0, r3
    b928:	f01c ffa3 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
}
    b92c:	b004      	add	sp, #16
    b92e:	bd10      	pop	{r4, pc}
    b930:	200009fc 	.word	0x200009fc
    b934:	00030264 	.word	0x00030264

0000b938 <handle_event>:
{
    b938:	b5f0      	push	{r4, r5, r6, r7, lr}
    b93a:	b089      	sub	sp, #36	; 0x24
    b93c:	4604      	mov	r4, r0
    b93e:	af06      	add	r7, sp, #24
    b940:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    b942:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    b946:	7811      	ldrb	r1, [r2, #0]
    b948:	42a1      	cmp	r1, r4
    b94a:	d019      	beq.n	b980 <handle_event+0x48>
	for (i = 0; i < num_handlers; i++) {
    b94c:	3208      	adds	r2, #8
    b94e:	4293      	cmp	r3, r2
    b950:	d1f9      	bne.n	b946 <handle_event+0xe>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    b952:	4d1a      	ldr	r5, [pc, #104]	; (b9bc <handle_event+0x84>)
    b954:	682b      	ldr	r3, [r5, #0]
    b956:	f013 0f06 	tst.w	r3, #6
    b95a:	d029      	beq.n	b9b0 <handle_event+0x78>
    b95c:	8986      	ldrh	r6, [r0, #12]
    b95e:	6880      	ldr	r0, [r0, #8]
    b960:	4631      	mov	r1, r6
    b962:	f7ff fc1d 	bl	b1a0 <bt_hex_real>
    b966:	4b16      	ldr	r3, [pc, #88]	; (b9c0 <handle_event+0x88>)
    b968:	9301      	str	r3, [sp, #4]
    b96a:	2300      	movs	r3, #0
    b96c:	e9cd 6003 	strd	r6, r0, [sp, #12]
    b970:	9402      	str	r4, [sp, #8]
    b972:	9300      	str	r3, [sp, #0]
    b974:	2202      	movs	r2, #2
    b976:	4629      	mov	r1, r5
    b978:	4618      	mov	r0, r3
    b97a:	f01c ff7a 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
    b97e:	e017      	b.n	b9b0 <handle_event+0x78>
		if (buf->len < handler->min_len) {
    b980:	8983      	ldrh	r3, [r0, #12]
    b982:	7851      	ldrb	r1, [r2, #1]
    b984:	4299      	cmp	r1, r3
    b986:	d916      	bls.n	b9b6 <handle_event+0x7e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    b988:	480c      	ldr	r0, [pc, #48]	; (b9bc <handle_event+0x84>)
    b98a:	6802      	ldr	r2, [r0, #0]
    b98c:	0752      	lsls	r2, r2, #29
    b98e:	d00f      	beq.n	b9b0 <handle_event+0x78>
    b990:	490c      	ldr	r1, [pc, #48]	; (b9c4 <handle_event+0x8c>)
    b992:	466d      	mov	r5, sp
    b994:	b088      	sub	sp, #32
    b996:	aa06      	add	r2, sp, #24
    b998:	e9c2 1304 	strd	r1, r3, [r2, #16]
    b99c:	2304      	movs	r3, #4
    b99e:	6194      	str	r4, [r2, #24]
    b9a0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b9a4:	f842 3f0c 	str.w	r3, [r2, #12]!
    b9a8:	607b      	str	r3, [r7, #4]
    b9aa:	f01c ff5f 	bl	2886c <z_log_msg2_static_create.constprop.0>
    b9ae:	46ad      	mov	sp, r5
}
    b9b0:	370c      	adds	r7, #12
    b9b2:	46bd      	mov	sp, r7
    b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		handler->handler(buf);
    b9b6:	6853      	ldr	r3, [r2, #4]
    b9b8:	4798      	blx	r3
		return;
    b9ba:	e7f9      	b.n	b9b0 <handle_event+0x78>
    b9bc:	200009fc 	.word	0x200009fc
    b9c0:	000302aa 	.word	0x000302aa
    b9c4:	00030288 	.word	0x00030288

0000b9c8 <hci_le_meta_event>:
{
    b9c8:	b510      	push	{r4, lr}
    b9ca:	2101      	movs	r1, #1
    b9cc:	4604      	mov	r4, r0
    b9ce:	3008      	adds	r0, #8
    b9d0:	f01f f83c 	bl	2aa4c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    b9d4:	4621      	mov	r1, r4
    b9d6:	4a03      	ldr	r2, [pc, #12]	; (b9e4 <hci_le_meta_event+0x1c>)
    b9d8:	7800      	ldrb	r0, [r0, #0]
}
    b9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    b9de:	230b      	movs	r3, #11
    b9e0:	f7ff bfaa 	b.w	b938 <handle_event>
    b9e4:	0002ce20 	.word	0x0002ce20

0000b9e8 <hci_cmd_done>:
{
    b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9ec:	b083      	sub	sp, #12
    b9ee:	4680      	mov	r8, r0
    b9f0:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    b9f2:	7990      	ldrb	r0, [r2, #6]
    b9f4:	f8df 9158 	ldr.w	r9, [pc, #344]	; bb50 <hci_cmd_done+0x168>
{
    b9f8:	460e      	mov	r6, r1
    b9fa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    b9fc:	f013 fb72 	bl	1f0e4 <net_buf_pool_get>
    ba00:	4581      	cmp	r9, r0
    ba02:	d025      	beq.n	ba50 <hci_cmd_done+0x68>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    ba04:	4e53      	ldr	r6, [pc, #332]	; (bb54 <hci_cmd_done+0x16c>)
    ba06:	6833      	ldr	r3, [r6, #0]
    ba08:	f013 0f06 	tst.w	r3, #6
    ba0c:	d01c      	beq.n	ba48 <hci_cmd_done+0x60>
    ba0e:	79a0      	ldrb	r0, [r4, #6]
    ba10:	f013 fb68 	bl	1f0e4 <net_buf_pool_get>
    ba14:	46ea      	mov	sl, sp
    ba16:	b08a      	sub	sp, #40	; 0x28
    ba18:	4b4f      	ldr	r3, [pc, #316]	; (bb58 <hci_cmd_done+0x170>)
    ba1a:	79a0      	ldrb	r0, [r4, #6]
    ba1c:	466d      	mov	r5, sp
    ba1e:	e9c5 3804 	strd	r3, r8, [r5, #16]
    ba22:	61a8      	str	r0, [r5, #24]
    ba24:	f013 fb5e 	bl	1f0e4 <net_buf_pool_get>
    ba28:	79a0      	ldrb	r0, [r4, #6]
    ba2a:	f013 fb5b 	bl	1f0e4 <net_buf_pool_get>
    ba2e:	462a      	mov	r2, r5
    ba30:	2306      	movs	r3, #6
    ba32:	e9c5 0907 	strd	r0, r9, [r5, #28]
    ba36:	f842 3f0c 	str.w	r3, [r2, #12]!
    ba3a:	607b      	str	r3, [r7, #4]
    ba3c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    ba40:	4630      	mov	r0, r6
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    ba42:	f01c ff13 	bl	2886c <z_log_msg2_static_create.constprop.0>
    ba46:	46d5      	mov	sp, sl
}
    ba48:	370c      	adds	r7, #12
    ba4a:	46bd      	mov	sp, r7
    ba4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (cmd(buf)->opcode != opcode) {
    ba50:	4620      	mov	r0, r4
    ba52:	f013 fb4f 	bl	1f0f4 <net_buf_id>
    ba56:	4d41      	ldr	r5, [pc, #260]	; (bb5c <hci_cmd_done+0x174>)
    ba58:	f04f 0b0c 	mov.w	fp, #12
    ba5c:	fb0b 5000 	mla	r0, fp, r0, r5
    ba60:	8843      	ldrh	r3, [r0, #2]
    ba62:	4543      	cmp	r3, r8
    ba64:	d022      	beq.n	baac <hci_cmd_done+0xc4>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    ba66:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bb54 <hci_cmd_done+0x16c>
    ba6a:	f8d9 3000 	ldr.w	r3, [r9]
    ba6e:	f013 0f06 	tst.w	r3, #6
    ba72:	d0e9      	beq.n	ba48 <hci_cmd_done+0x60>
    ba74:	4620      	mov	r0, r4
    ba76:	f013 fb3d 	bl	1f0f4 <net_buf_id>
    ba7a:	46ea      	mov	sl, sp
    ba7c:	4b38      	ldr	r3, [pc, #224]	; (bb60 <hci_cmd_done+0x178>)
    ba7e:	b088      	sub	sp, #32
    ba80:	466e      	mov	r6, sp
    ba82:	e9c6 3804 	strd	r3, r8, [r6, #16]
    ba86:	4620      	mov	r0, r4
    ba88:	f013 fb34 	bl	1f0f4 <net_buf_id>
    ba8c:	4620      	mov	r0, r4
    ba8e:	f013 fb31 	bl	1f0f4 <net_buf_id>
    ba92:	fb0b 5500 	mla	r5, fp, r0, r5
    ba96:	4632      	mov	r2, r6
    ba98:	886b      	ldrh	r3, [r5, #2]
    ba9a:	61b3      	str	r3, [r6, #24]
    ba9c:	2304      	movs	r3, #4
    ba9e:	f842 3f0c 	str.w	r3, [r2, #12]!
    baa2:	607b      	str	r3, [r7, #4]
    baa4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    baa8:	4648      	mov	r0, r9
    baaa:	e7ca      	b.n	ba42 <hci_cmd_done+0x5a>
	if (bt_dev.sent_cmd) {
    baac:	f8df 80b4 	ldr.w	r8, [pc, #180]	; bb64 <hci_cmd_done+0x17c>
    bab0:	f8d8 0138 	ldr.w	r0, [r8, #312]	; 0x138
    bab4:	b120      	cbz	r0, bac0 <hci_cmd_done+0xd8>
		net_buf_unref(bt_dev.sent_cmd);
    bab6:	f013 fbd9 	bl	1f26c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    baba:	2300      	movs	r3, #0
    babc:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    bac0:	4620      	mov	r0, r4
    bac2:	f013 fb17 	bl	1f0f4 <net_buf_id>
    bac6:	f04f 080c 	mov.w	r8, #12
    baca:	fb08 5000 	mla	r0, r8, r0, r5
    bace:	6843      	ldr	r3, [r0, #4]
    bad0:	b1b3      	cbz	r3, bb00 <hci_cmd_done+0x118>
    bad2:	b9ae      	cbnz	r6, bb00 <hci_cmd_done+0x118>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    bad4:	4620      	mov	r0, r4
    bad6:	f013 fb0d 	bl	1f0f4 <net_buf_id>
    bada:	fb08 5000 	mla	r0, r8, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    bade:	2301      	movs	r3, #1
    bae0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bae4:	e9dc 2000 	ldrd	r2, r0, [ip]
    bae8:	f000 011f 	and.w	r1, r0, #31
    baec:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
    baf0:	f89c 3008 	ldrb.w	r3, [ip, #8]
    baf4:	0940      	lsrs	r0, r0, #5
    baf6:	b1e3      	cbz	r3, bb32 <hci_cmd_done+0x14a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    baf8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    bafc:	f01c fea7 	bl	2884e <atomic_or>
	if (cmd(buf)->sync) {
    bb00:	4620      	mov	r0, r4
    bb02:	f013 faf7 	bl	1f0f4 <net_buf_id>
    bb06:	f04f 080c 	mov.w	r8, #12
    bb0a:	fb08 5000 	mla	r0, r8, r0, r5
    bb0e:	6883      	ldr	r3, [r0, #8]
    bb10:	2b00      	cmp	r3, #0
    bb12:	d099      	beq.n	ba48 <hci_cmd_done+0x60>
		cmd(buf)->status = status;
    bb14:	4620      	mov	r0, r4
    bb16:	f013 faed 	bl	1f0f4 <net_buf_id>
    bb1a:	fb08 f000 	mul.w	r0, r8, r0
    bb1e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    bb20:	4620      	mov	r0, r4
    bb22:	f013 fae7 	bl	1f0f4 <net_buf_id>
    bb26:	fb08 5500 	mla	r5, r8, r0, r5
    bb2a:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    bb2c:	f017 ffc6 	bl	23abc <z_impl_k_sem_give>
}
    bb30:	e78a      	b.n	ba48 <hci_cmd_done+0x60>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb32:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bb34:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    bb38:	f3bf 8f5b 	dmb	ish
    bb3c:	e852 1f00 	ldrex	r1, [r2]
    bb40:	4019      	ands	r1, r3
    bb42:	e842 1000 	strex	r0, r1, [r2]
    bb46:	2800      	cmp	r0, #0
    bb48:	d1f8      	bne.n	bb3c <hci_cmd_done+0x154>
    bb4a:	f3bf 8f5b 	dmb	ish
    bb4e:	e7d7      	b.n	bb00 <hci_cmd_done+0x118>
    bb50:	20000c84 	.word	0x20000c84
    bb54:	200009fc 	.word	0x200009fc
    bb58:	000302cc 	.word	0x000302cc
    bb5c:	20002a34 	.word	0x20002a34
    bb60:	00030301 	.word	0x00030301
    bb64:	20000000 	.word	0x20000000

0000bb68 <hci_cmd_status>:
{
    bb68:	b538      	push	{r3, r4, r5, lr}
    bb6a:	2104      	movs	r1, #4
    bb6c:	4604      	mov	r4, r0
    bb6e:	3008      	adds	r0, #8
    bb70:	f01e ff6c 	bl	2aa4c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    bb74:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    bb76:	7801      	ldrb	r1, [r0, #0]
    bb78:	8840      	ldrh	r0, [r0, #2]
    bb7a:	4622      	mov	r2, r4
    bb7c:	f7ff ff34 	bl	b9e8 <hci_cmd_done>
	if (ncmd) {
    bb80:	b125      	cbz	r5, bb8c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    bb82:	4803      	ldr	r0, [pc, #12]	; (bb90 <hci_cmd_status+0x28>)
}
    bb84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bb88:	f017 bf98 	b.w	23abc <z_impl_k_sem_give>
    bb8c:	bd38      	pop	{r3, r4, r5, pc}
    bb8e:	bf00      	nop
    bb90:	20000120 	.word	0x20000120

0000bb94 <hci_cmd_complete>:
{
    bb94:	b538      	push	{r3, r4, r5, lr}
    bb96:	2103      	movs	r1, #3
    bb98:	4604      	mov	r4, r0
    bb9a:	3008      	adds	r0, #8
    bb9c:	f01e ff56 	bl	2aa4c <net_buf_simple_pull_mem>
	status = buf->data[0];
    bba0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    bba2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    bba4:	7819      	ldrb	r1, [r3, #0]
    bba6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    bbaa:	4622      	mov	r2, r4
    bbac:	f7ff ff1c 	bl	b9e8 <hci_cmd_done>
	if (ncmd) {
    bbb0:	b125      	cbz	r5, bbbc <hci_cmd_complete+0x28>
    bbb2:	4803      	ldr	r0, [pc, #12]	; (bbc0 <hci_cmd_complete+0x2c>)
}
    bbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bbb8:	f017 bf80 	b.w	23abc <z_impl_k_sem_give>
    bbbc:	bd38      	pop	{r3, r4, r5, pc}
    bbbe:	bf00      	nop
    bbc0:	20000120 	.word	0x20000120

0000bbc4 <hci_tx_thread>:
{
    bbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    bbc8:	f8df 9174 	ldr.w	r9, [pc, #372]	; bd40 <hci_tx_thread+0x17c>
		BT_ASSERT(err == 0);
    bbcc:	f8df a174 	ldr.w	sl, [pc, #372]	; bd44 <hci_tx_thread+0x180>
{
    bbd0:	b089      	sub	sp, #36	; 0x24
		events[0].state = K_POLL_STATE_NOT_READY;
    bbd2:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    bbd6:	485c      	ldr	r0, [pc, #368]	; (bd48 <hci_tx_thread+0x184>)
		events[0].state = K_POLL_STATE_NOT_READY;
    bbd8:	f36f 3352 	bfc	r3, #13, #6
    bbdc:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    bbe0:	f002 fcfa 	bl	e5d8 <bt_conn_prepare_events>
    bbe4:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    bbe6:	4856      	ldr	r0, [pc, #344]	; (bd40 <hci_tx_thread+0x17c>)
    bbe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bbec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbf0:	4631      	mov	r1, r6
    bbf2:	f018 fef1 	bl	249d8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    bbf6:	b160      	cbz	r0, bc12 <hci_tx_thread+0x4e>
    bbf8:	4954      	ldr	r1, [pc, #336]	; (bd4c <hci_tx_thread+0x188>)
    bbfa:	4855      	ldr	r0, [pc, #340]	; (bd50 <hci_tx_thread+0x18c>)
    bbfc:	f640 1393 	movw	r3, #2451	; 0x993
    bc00:	4652      	mov	r2, sl
    bc02:	f018 fffb 	bl	24bfc <printk>
    bc06:	4040      	eors	r0, r0
    bc08:	f380 8811 	msr	BASEPRI, r0
    bc0c:	f04f 0003 	mov.w	r0, #3
    bc10:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    bc12:	4d50      	ldr	r5, [pc, #320]	; (bd54 <hci_tx_thread+0x190>)
{
    bc14:	f8df 8128 	ldr.w	r8, [pc, #296]	; bd40 <hci_tx_thread+0x17c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    bc18:	4f4f      	ldr	r7, [pc, #316]	; (bd58 <hci_tx_thread+0x194>)
    bc1a:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
    bc1e:	b916      	cbnz	r6, bc26 <hci_tx_thread+0x62>
	z_impl_k_yield();
    bc20:	f018 fba8 	bl	24374 <z_impl_k_yield>
	while (1) {
    bc24:	e7d5      	b.n	bbd2 <hci_tx_thread+0xe>
		switch (ev->state) {
    bc26:	f8d8 300c 	ldr.w	r3, [r8, #12]
    bc2a:	f3c3 3345 	ubfx	r3, r3, #13, #6
    bc2e:	2b01      	cmp	r3, #1
    bc30:	d969      	bls.n	bd06 <hci_tx_thread+0x142>
    bc32:	2b04      	cmp	r3, #4
    bc34:	d173      	bne.n	bd1e <hci_tx_thread+0x15a>
			if (ev->tag == BT_EVENT_CMD_TX) {
    bc36:	f898 300c 	ldrb.w	r3, [r8, #12]
    bc3a:	2b00      	cmp	r3, #0
    bc3c:	d167      	bne.n	bd0e <hci_tx_thread+0x14a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    bc3e:	4847      	ldr	r0, [pc, #284]	; (bd5c <hci_tx_thread+0x198>)
    bc40:	2200      	movs	r2, #0
    bc42:	2300      	movs	r3, #0
    bc44:	f01e fe6e 	bl	2a924 <net_buf_get>
	BT_ASSERT(buf);
    bc48:	4604      	mov	r4, r0
    bc4a:	b960      	cbnz	r0, bc66 <hci_tx_thread+0xa2>
    bc4c:	4944      	ldr	r1, [pc, #272]	; (bd60 <hci_tx_thread+0x19c>)
    bc4e:	4840      	ldr	r0, [pc, #256]	; (bd50 <hci_tx_thread+0x18c>)
    bc50:	f640 132a 	movw	r3, #2346	; 0x92a
    bc54:	4652      	mov	r2, sl
    bc56:	f018 ffd1 	bl	24bfc <printk>
    bc5a:	4040      	eors	r0, r0
    bc5c:	f380 8811 	msr	BASEPRI, r0
    bc60:	f04f 0003 	mov.w	r0, #3
    bc64:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    bc66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc6e:	4658      	mov	r0, fp
    bc70:	f017 ff4a 	bl	23b08 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    bc74:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
    bc78:	b1a3      	cbz	r3, bca4 <hci_tx_thread+0xe0>
		BT_ERR("Uncleared pending sent_cmd");
    bc7a:	683b      	ldr	r3, [r7, #0]
    bc7c:	075a      	lsls	r2, r3, #29
    bc7e:	d00a      	beq.n	bc96 <hci_tx_thread+0xd2>
    bc80:	4b38      	ldr	r3, [pc, #224]	; (bd64 <hci_tx_thread+0x1a0>)
    bc82:	9306      	str	r3, [sp, #24]
    bc84:	aa05      	add	r2, sp, #20
    bc86:	2302      	movs	r3, #2
    bc88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bc8c:	4638      	mov	r0, r7
    bc8e:	9301      	str	r3, [sp, #4]
    bc90:	9305      	str	r3, [sp, #20]
    bc92:	f01c fdeb 	bl	2886c <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    bc96:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    bc9a:	f013 fae7 	bl	1f26c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    bc9e:	2300      	movs	r3, #0
    bca0:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    bca4:	4620      	mov	r0, r4
    bca6:	f01e fe6e 	bl	2a986 <net_buf_ref>
    bcaa:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
		return bt_hci_ecc_send(buf);
    bcae:	4620      	mov	r0, r4
    bcb0:	f7ff fc1a 	bl	b4e8 <bt_hci_ecc_send>
	if (err) {
    bcb4:	b338      	cbz	r0, bd06 <hci_tx_thread+0x142>
		BT_ERR("Unable to send to driver (err %d)", err);
    bcb6:	683b      	ldr	r3, [r7, #0]
    bcb8:	075b      	lsls	r3, r3, #29
    bcba:	d00b      	beq.n	bcd4 <hci_tx_thread+0x110>
    bcbc:	4b2a      	ldr	r3, [pc, #168]	; (bd68 <hci_tx_thread+0x1a4>)
    bcbe:	aa05      	add	r2, sp, #20
    bcc0:	e9cd 3006 	strd	r3, r0, [sp, #24]
    bcc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bcc8:	2303      	movs	r3, #3
    bcca:	4638      	mov	r0, r7
    bccc:	9301      	str	r3, [sp, #4]
    bcce:	9305      	str	r3, [sp, #20]
    bcd0:	f01c fdcc 	bl	2886c <z_log_msg2_static_create.constprop.0>
	z_impl_k_sem_give(sem);
    bcd4:	4825      	ldr	r0, [pc, #148]	; (bd6c <hci_tx_thread+0x1a8>)
    bcd6:	f017 fef1 	bl	23abc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    bcda:	4620      	mov	r0, r4
    bcdc:	f013 fa0a 	bl	1f0f4 <net_buf_id>
    bce0:	4b23      	ldr	r3, [pc, #140]	; (bd70 <hci_tx_thread+0x1ac>)
    bce2:	220c      	movs	r2, #12
    bce4:	fb02 3000 	mla	r0, r2, r0, r3
    bce8:	211f      	movs	r1, #31
    bcea:	8840      	ldrh	r0, [r0, #2]
    bcec:	4622      	mov	r2, r4
    bcee:	f7ff fe7b 	bl	b9e8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    bcf2:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    bcf6:	f013 fab9 	bl	1f26c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    bcfa:	2300      	movs	r3, #0
		net_buf_unref(buf);
    bcfc:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    bcfe:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
    bd02:	f013 fab3 	bl	1f26c <net_buf_unref>
	for (; count; ev++, count--) {
    bd06:	f108 0814 	add.w	r8, r8, #20
    bd0a:	3e01      	subs	r6, #1
    bd0c:	e787      	b.n	bc1e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    bd0e:	2b01      	cmp	r3, #1
    bd10:	d1f9      	bne.n	bd06 <hci_tx_thread+0x142>
					conn = CONTAINER_OF(ev->fifo,
    bd12:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    bd16:	3838      	subs	r0, #56	; 0x38
    bd18:	f003 f86c 	bl	edf4 <bt_conn_process_tx>
    bd1c:	e7f3      	b.n	bd06 <hci_tx_thread+0x142>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    bd1e:	683a      	ldr	r2, [r7, #0]
    bd20:	f012 0f06 	tst.w	r2, #6
    bd24:	d0ef      	beq.n	bd06 <hci_tx_thread+0x142>
    bd26:	4a13      	ldr	r2, [pc, #76]	; (bd74 <hci_tx_thread+0x1b0>)
    bd28:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		switch (ev->state) {
    bd2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    bd30:	4638      	mov	r0, r7
    bd32:	2303      	movs	r3, #3
    bd34:	aa05      	add	r2, sp, #20
    bd36:	9301      	str	r3, [sp, #4]
    bd38:	9305      	str	r3, [sp, #20]
    bd3a:	f01c fd97 	bl	2886c <z_log_msg2_static_create.constprop.0>
    bd3e:	e7e2      	b.n	bd06 <hci_tx_thread+0x142>
    bd40:	2000031c 	.word	0x2000031c
    bd44:	00030334 	.word	0x00030334
    bd48:	20000330 	.word	0x20000330
    bd4c:	00030368 	.word	0x00030368
    bd50:	00030371 	.word	0x00030371
    bd54:	20000000 	.word	0x20000000
    bd58:	200009fc 	.word	0x200009fc
    bd5c:	2000013c 	.word	0x2000013c
    bd60:	000300fb 	.word	0x000300fb
    bd64:	0003038e 	.word	0x0003038e
    bd68:	000303a9 	.word	0x000303a9
    bd6c:	20000120 	.word	0x20000120
    bd70:	20002a34 	.word	0x20002a34
    bd74:	000303cb 	.word	0x000303cb

0000bd78 <hci_num_completed_packets>:
{
    bd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    bd7c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    bd7e:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    bd82:	4f3f      	ldr	r7, [pc, #252]	; (be80 <hci_num_completed_packets+0x108>)
{
    bd84:	b088      	sub	sp, #32
			tx->pending_no_cb = 0U;
    bd86:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
    bd88:	f898 3000 	ldrb.w	r3, [r8]
    bd8c:	429d      	cmp	r5, r3
    bd8e:	db02      	blt.n	bd96 <hci_num_completed_packets+0x1e>
}
    bd90:	b008      	add	sp, #32
    bd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    bd96:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    bd9a:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    bd9e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    bda2:	4650      	mov	r0, sl
    bda4:	f002 fc4c 	bl	e640 <bt_conn_lookup_handle>
		if (!conn) {
    bda8:	4604      	mov	r4, r0
    bdaa:	b1d8      	cbz	r0, bde4 <hci_num_completed_packets+0x6c>
			k_work_submit(&conn->tx_complete_work);
    bdac:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    bdb0:	2e00      	cmp	r6, #0
    bdb2:	d043      	beq.n	be3c <hci_num_completed_packets+0xc4>
	__asm__ volatile(
    bdb4:	f04f 0320 	mov.w	r3, #32
    bdb8:	f3ef 8211 	mrs	r2, BASEPRI
    bdbc:	f383 8812 	msr	BASEPRI_MAX, r3
    bdc0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    bdc4:	69e3      	ldr	r3, [r4, #28]
    bdc6:	b1f3      	cbz	r3, be06 <hci_num_completed_packets+0x8e>
				conn->pending_no_cb--;
    bdc8:	3b01      	subs	r3, #1
    bdca:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    bdcc:	f382 8811 	msr	BASEPRI, r2
    bdd0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    bdd4:	4620      	mov	r0, r4
    bdd6:	f002 faad 	bl	e334 <bt_conn_get_pkts>
    bdda:	3e01      	subs	r6, #1
    bddc:	f017 fe6e 	bl	23abc <z_impl_k_sem_give>
    bde0:	b2b6      	uxth	r6, r6
    bde2:	e7e5      	b.n	bdb0 <hci_num_completed_packets+0x38>
			BT_ERR("No connection for handle %u", handle);
    bde4:	683b      	ldr	r3, [r7, #0]
    bde6:	075a      	lsls	r2, r3, #29
    bde8:	d00b      	beq.n	be02 <hci_num_completed_packets+0x8a>
    bdea:	4b26      	ldr	r3, [pc, #152]	; (be84 <hci_num_completed_packets+0x10c>)
    bdec:	aa05      	add	r2, sp, #20
    bdee:	e9cd 3a06 	strd	r3, sl, [sp, #24]
    bdf2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bdf6:	2303      	movs	r3, #3
    bdf8:	4638      	mov	r0, r7
    bdfa:	9301      	str	r3, [sp, #4]
    bdfc:	9305      	str	r3, [sp, #20]
    bdfe:	f01c fd35 	bl	2886c <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
    be02:	3501      	adds	r5, #1
    be04:	e7c0      	b.n	bd88 <hci_num_completed_packets+0x10>
	return list->head;
    be06:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    be08:	b12b      	cbz	r3, be16 <hci_num_completed_packets+0x9e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    be0a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    be0c:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    be0e:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    be10:	428b      	cmp	r3, r1
	list->tail = node;
    be12:	bf08      	it	eq
    be14:	61a0      	streq	r0, [r4, #24]
    be16:	f382 8811 	msr	BASEPRI, r2
    be1a:	f3bf 8f6f 	isb	sy
			if (!node) {
    be1e:	b98b      	cbnz	r3, be44 <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
    be20:	683b      	ldr	r3, [r7, #0]
    be22:	075b      	lsls	r3, r3, #29
    be24:	d00a      	beq.n	be3c <hci_num_completed_packets+0xc4>
    be26:	4b18      	ldr	r3, [pc, #96]	; (be88 <hci_num_completed_packets+0x110>)
    be28:	9306      	str	r3, [sp, #24]
    be2a:	aa05      	add	r2, sp, #20
    be2c:	2302      	movs	r3, #2
    be2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be32:	4638      	mov	r0, r7
    be34:	9301      	str	r3, [sp, #4]
    be36:	9305      	str	r3, [sp, #20]
    be38:	f01c fd18 	bl	2886c <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
    be3c:	4620      	mov	r0, r4
    be3e:	f01c ff29 	bl	28c94 <bt_conn_unref>
    be42:	e7de      	b.n	be02 <hci_num_completed_packets+0x8a>
	__asm__ volatile(
    be44:	f04f 0220 	mov.w	r2, #32
    be48:	f3ef 8111 	mrs	r1, BASEPRI
    be4c:	f382 8812 	msr	BASEPRI_MAX, r2
    be50:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    be54:	68da      	ldr	r2, [r3, #12]
    be56:	61e2      	str	r2, [r4, #28]
	return list->tail;
    be58:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    be5a:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    be5e:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    be62:	b94a      	cbnz	r2, be78 <hci_num_completed_packets+0x100>
	list->head = node;
    be64:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    be68:	f381 8811 	msr	BASEPRI, r1
    be6c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    be70:	4650      	mov	r0, sl
    be72:	f017 ff8f 	bl	23d94 <k_work_submit>
    be76:	e7ad      	b.n	bdd4 <hci_num_completed_packets+0x5c>
	parent->next = child;
    be78:	6013      	str	r3, [r2, #0]
	list->tail = node;
    be7a:	6263      	str	r3, [r4, #36]	; 0x24
}
    be7c:	e7f4      	b.n	be68 <hci_num_completed_packets+0xf0>
    be7e:	bf00      	nop
    be80:	200009fc 	.word	0x200009fc
    be84:	000303ec 	.word	0x000303ec
    be88:	00030408 	.word	0x00030408

0000be8c <hci_disconn_complete>:
{
    be8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    be8e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    be90:	7835      	ldrb	r5, [r6, #0]
{
    be92:	b089      	sub	sp, #36	; 0x24
	if (evt->status) {
    be94:	b9ad      	cbnz	r5, bec2 <hci_disconn_complete+0x36>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    be96:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    be9a:	4638      	mov	r0, r7
    be9c:	f002 fbd0 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    bea0:	4604      	mov	r4, r0
    bea2:	b980      	cbnz	r0, bec6 <hci_disconn_complete+0x3a>
		BT_ERR("Unable to look up conn with handle %u", handle);
    bea4:	4816      	ldr	r0, [pc, #88]	; (bf00 <hci_disconn_complete+0x74>)
    bea6:	6803      	ldr	r3, [r0, #0]
    bea8:	075a      	lsls	r2, r3, #29
    beaa:	d00a      	beq.n	bec2 <hci_disconn_complete+0x36>
    beac:	4b15      	ldr	r3, [pc, #84]	; (bf04 <hci_disconn_complete+0x78>)
    beae:	aa05      	add	r2, sp, #20
    beb0:	e9cd 3706 	strd	r3, r7, [sp, #24]
    beb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    beb8:	2303      	movs	r3, #3
    beba:	9301      	str	r3, [sp, #4]
    bebc:	9305      	str	r3, [sp, #20]
    bebe:	f01c fcd5 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    bec2:	b009      	add	sp, #36	; 0x24
    bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
    bec6:	78f3      	ldrb	r3, [r6, #3]
    bec8:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    beca:	4629      	mov	r1, r5
    becc:	f002 fbc0 	bl	e650 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    bed0:	78a3      	ldrb	r3, [r4, #2]
    bed2:	2b01      	cmp	r3, #1
    bed4:	d005      	beq.n	bee2 <hci_disconn_complete+0x56>
	bt_conn_unref(conn);
    bed6:	4620      	mov	r0, r4
}
    bed8:	b009      	add	sp, #36	; 0x24
    beda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    bede:	f01c bed9 	b.w	28c94 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bee2:	f3bf 8f5b 	dmb	ish
    bee6:	6863      	ldr	r3, [r4, #4]
    bee8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    beec:	07db      	lsls	r3, r3, #31
    beee:	d5f2      	bpl.n	bed6 <hci_disconn_complete+0x4a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    bef0:	4620      	mov	r0, r4
    bef2:	2102      	movs	r1, #2
    bef4:	f002 fbac 	bl	e650 <bt_conn_set_state>
		bt_le_scan_update(false);
    bef8:	4628      	mov	r0, r5
    befa:	f001 fe0d 	bl	db18 <bt_le_scan_update>
    befe:	e7ea      	b.n	bed6 <hci_disconn_complete+0x4a>
    bf00:	200009fc 	.word	0x200009fc
    bf04:	0003041f 	.word	0x0003041f

0000bf08 <bt_hci_cmd_state_set_init>:
{
    bf08:	b510      	push	{r4, lr}
	state->bit = bit;
    bf0a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    bf0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bf12:	720b      	strb	r3, [r1, #8]
{
    bf14:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    bf16:	f013 f8ed 	bl	1f0f4 <net_buf_id>
    bf1a:	4b03      	ldr	r3, [pc, #12]	; (bf28 <bt_hci_cmd_state_set_init+0x20>)
    bf1c:	220c      	movs	r2, #12
    bf1e:	fb02 3300 	mla	r3, r2, r0, r3
    bf22:	605c      	str	r4, [r3, #4]
}
    bf24:	bd10      	pop	{r4, pc}
    bf26:	bf00      	nop
    bf28:	20002a34 	.word	0x20002a34

0000bf2c <bt_hci_cmd_create>:
{
    bf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    bf30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf38:	4606      	mov	r6, r0
    bf3a:	4817      	ldr	r0, [pc, #92]	; (bf98 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    bf3c:	4d17      	ldr	r5, [pc, #92]	; (bf9c <bt_hci_cmd_create+0x70>)
{
    bf3e:	460f      	mov	r7, r1
    bf40:	f01e fceb 	bl	2a91a <net_buf_alloc_fixed>
    bf44:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    bf46:	f100 0a08 	add.w	sl, r0, #8
    bf4a:	2100      	movs	r1, #0
    bf4c:	f04f 0800 	mov.w	r8, #0
    bf50:	4650      	mov	r0, sl
    bf52:	f01e fd07 	bl	2a964 <net_buf_simple_reserve>
    bf56:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    bf5a:	4620      	mov	r0, r4
    bf5c:	f013 f8ca 	bl	1f0f4 <net_buf_id>
    bf60:	f04f 090c 	mov.w	r9, #12
    bf64:	fb09 5000 	mla	r0, r9, r0, r5
    bf68:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    bf6a:	4620      	mov	r0, r4
    bf6c:	f013 f8c2 	bl	1f0f4 <net_buf_id>
    bf70:	fb09 5000 	mla	r0, r9, r0, r5
    bf74:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    bf78:	4620      	mov	r0, r4
    bf7a:	f013 f8bb 	bl	1f0f4 <net_buf_id>
    bf7e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    bf82:	2103      	movs	r1, #3
    bf84:	f8c5 8004 	str.w	r8, [r5, #4]
    bf88:	4650      	mov	r0, sl
    bf8a:	f01e fd2e 	bl	2a9ea <net_buf_simple_add>
	hdr->param_len = param_len;
    bf8e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    bf90:	8006      	strh	r6, [r0, #0]
}
    bf92:	4620      	mov	r0, r4
    bf94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf98:	20000c84 	.word	0x20000c84
    bf9c:	20002a34 	.word	0x20002a34

0000bfa0 <bt_hci_cmd_send>:
{
    bfa0:	b530      	push	{r4, r5, lr}
    bfa2:	4605      	mov	r5, r0
    bfa4:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    bfa6:	460c      	mov	r4, r1
    bfa8:	b919      	cbnz	r1, bfb2 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    bfaa:	f7ff ffbf 	bl	bf2c <bt_hci_cmd_create>
		if (!buf) {
    bfae:	4604      	mov	r4, r0
    bfb0:	b318      	cbz	r0, bffa <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    bfb2:	f640 4335 	movw	r3, #3125	; 0xc35
    bfb6:	429d      	cmp	r5, r3
    bfb8:	d119      	bne.n	bfee <bt_hci_cmd_send+0x4e>
		return bt_hci_ecc_send(buf);
    bfba:	4620      	mov	r0, r4
    bfbc:	f7ff fa94 	bl	b4e8 <bt_hci_ecc_send>
		if (err) {
    bfc0:	4605      	mov	r5, r0
    bfc2:	b188      	cbz	r0, bfe8 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
    bfc4:	480e      	ldr	r0, [pc, #56]	; (c000 <bt_hci_cmd_send+0x60>)
    bfc6:	6803      	ldr	r3, [r0, #0]
    bfc8:	075b      	lsls	r3, r3, #29
    bfca:	d00a      	beq.n	bfe2 <bt_hci_cmd_send+0x42>
    bfcc:	4b0d      	ldr	r3, [pc, #52]	; (c004 <bt_hci_cmd_send+0x64>)
    bfce:	aa05      	add	r2, sp, #20
    bfd0:	e9cd 3506 	strd	r3, r5, [sp, #24]
    bfd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bfd8:	2303      	movs	r3, #3
    bfda:	9301      	str	r3, [sp, #4]
    bfdc:	9305      	str	r3, [sp, #20]
    bfde:	f01c fc45 	bl	2886c <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    bfe2:	4620      	mov	r0, r4
    bfe4:	f013 f942 	bl	1f26c <net_buf_unref>
}
    bfe8:	4628      	mov	r0, r5
    bfea:	b009      	add	sp, #36	; 0x24
    bfec:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    bfee:	4806      	ldr	r0, [pc, #24]	; (c008 <bt_hci_cmd_send+0x68>)
    bff0:	4621      	mov	r1, r4
    bff2:	f01e fcbb 	bl	2a96c <net_buf_put>
	return 0;
    bff6:	2500      	movs	r5, #0
    bff8:	e7f6      	b.n	bfe8 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    bffa:	f06f 0568 	mvn.w	r5, #104	; 0x68
    bffe:	e7f3      	b.n	bfe8 <bt_hci_cmd_send+0x48>
    c000:	200009fc 	.word	0x200009fc
    c004:	000303a9 	.word	0x000303a9
    c008:	2000013c 	.word	0x2000013c

0000c00c <le_ltk_request>:
{
    c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    c00e:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    c010:	8826      	ldrh	r6, [r4, #0]
    c012:	b2b7      	uxth	r7, r6
{
    c014:	b08f      	sub	sp, #60	; 0x3c
	conn = bt_conn_lookup_handle(handle);
    c016:	4638      	mov	r0, r7
    c018:	f002 fb12 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    c01c:	4605      	mov	r5, r0
    c01e:	b980      	cbnz	r0, c042 <le_ltk_request+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    c020:	482a      	ldr	r0, [pc, #168]	; (c0cc <le_ltk_request+0xc0>)
    c022:	6803      	ldr	r3, [r0, #0]
    c024:	075a      	lsls	r2, r3, #29
    c026:	d00a      	beq.n	c03e <le_ltk_request+0x32>
    c028:	4b29      	ldr	r3, [pc, #164]	; (c0d0 <le_ltk_request+0xc4>)
    c02a:	aa0b      	add	r2, sp, #44	; 0x2c
    c02c:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    c030:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c034:	2303      	movs	r3, #3
    c036:	9304      	str	r3, [sp, #16]
    c038:	930b      	str	r3, [sp, #44]	; 0x2c
    c03a:	f01c fc17 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c03e:	b00f      	add	sp, #60	; 0x3c
    c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    c042:	af04      	add	r7, sp, #16
    c044:	f8d4 2002 	ldr.w	r2, [r4, #2]
    c048:	f8d4 3006 	ldr.w	r3, [r4, #6]
    c04c:	9701      	str	r7, [sp, #4]
    c04e:	8961      	ldrh	r1, [r4, #10]
    c050:	9100      	str	r1, [sp, #0]
    c052:	f01e fa4c 	bl	2a4ee <bt_smp_request_ltk>
    c056:	b340      	cbz	r0, c0aa <le_ltk_request+0x9e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    c058:	2112      	movs	r1, #18
    c05a:	f242 001a 	movw	r0, #8218	; 0x201a
    c05e:	f7ff ff65 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    c062:	4604      	mov	r4, r0
    c064:	b988      	cbnz	r0, c08a <le_ltk_request+0x7e>
		BT_ERR("Out of command buffers");
    c066:	4819      	ldr	r0, [pc, #100]	; (c0cc <le_ltk_request+0xc0>)
    c068:	6803      	ldr	r3, [r0, #0]
    c06a:	075b      	lsls	r3, r3, #29
    c06c:	d009      	beq.n	c082 <le_ltk_request+0x76>
    c06e:	4b19      	ldr	r3, [pc, #100]	; (c0d4 <le_ltk_request+0xc8>)
    c070:	930c      	str	r3, [sp, #48]	; 0x30
    c072:	aa0b      	add	r2, sp, #44	; 0x2c
    c074:	2302      	movs	r3, #2
    c076:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c07a:	9303      	str	r3, [sp, #12]
    c07c:	930b      	str	r3, [sp, #44]	; 0x2c
    c07e:	f01c fbf5 	bl	2886c <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
    c082:	4628      	mov	r0, r5
    c084:	f01c fe06 	bl	28c94 <bt_conn_unref>
    c088:	e7d9      	b.n	c03e <le_ltk_request+0x32>
    c08a:	2112      	movs	r1, #18
    c08c:	3008      	adds	r0, #8
    c08e:	f01e fcac 	bl	2a9ea <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    c092:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    c094:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    c098:	2210      	movs	r2, #16
    c09a:	f01c fa8c 	bl	285b6 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    c09e:	4621      	mov	r1, r4
    c0a0:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    c0a4:	f7ff ff7c 	bl	bfa0 <bt_hci_cmd_send>
    c0a8:	e7eb      	b.n	c082 <le_ltk_request+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    c0aa:	2102      	movs	r1, #2
    c0ac:	f242 001b 	movw	r0, #8219	; 0x201b
    c0b0:	f7ff ff3c 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    c0b4:	4604      	mov	r4, r0
    c0b6:	2800      	cmp	r0, #0
    c0b8:	d0d5      	beq.n	c066 <le_ltk_request+0x5a>
    c0ba:	2102      	movs	r1, #2
    c0bc:	3008      	adds	r0, #8
    c0be:	f01e fc94 	bl	2a9ea <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    c0c2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    c0c4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    c0c6:	f242 001b 	movw	r0, #8219	; 0x201b
    c0ca:	e7eb      	b.n	c0a4 <le_ltk_request+0x98>
    c0cc:	200009fc 	.word	0x200009fc
    c0d0:	0003021e 	.word	0x0003021e
    c0d4:	00030445 	.word	0x00030445

0000c0d8 <le_conn_param_neg_reply>:
{
    c0d8:	b570      	push	{r4, r5, r6, lr}
    c0da:	4606      	mov	r6, r0
    c0dc:	b088      	sub	sp, #32
    c0de:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    c0e0:	f242 0021 	movw	r0, #8225	; 0x2021
    c0e4:	2103      	movs	r1, #3
    c0e6:	f7ff ff21 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    c0ea:	4604      	mov	r4, r0
    c0ec:	b978      	cbnz	r0, c10e <le_conn_param_neg_reply+0x36>
		BT_ERR("Unable to allocate buffer");
    c0ee:	480f      	ldr	r0, [pc, #60]	; (c12c <le_conn_param_neg_reply+0x54>)
    c0f0:	6803      	ldr	r3, [r0, #0]
    c0f2:	075b      	lsls	r3, r3, #29
    c0f4:	d009      	beq.n	c10a <le_conn_param_neg_reply+0x32>
    c0f6:	4b0e      	ldr	r3, [pc, #56]	; (c130 <le_conn_param_neg_reply+0x58>)
    c0f8:	9306      	str	r3, [sp, #24]
    c0fa:	aa05      	add	r2, sp, #20
    c0fc:	2302      	movs	r3, #2
    c0fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c102:	9301      	str	r3, [sp, #4]
    c104:	9305      	str	r3, [sp, #20]
    c106:	f01c fbb1 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c10a:	b008      	add	sp, #32
    c10c:	bd70      	pop	{r4, r5, r6, pc}
    c10e:	2103      	movs	r1, #3
    c110:	3008      	adds	r0, #8
    c112:	f01e fc6a 	bl	2a9ea <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    c116:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    c118:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    c11a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    c11c:	f242 0021 	movw	r0, #8225	; 0x2021
}
    c120:	b008      	add	sp, #32
    c122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    c126:	f7ff bf3b 	b.w	bfa0 <bt_hci_cmd_send>
    c12a:	bf00      	nop
    c12c:	200009fc 	.word	0x200009fc
    c130:	0003045c 	.word	0x0003045c

0000c134 <le_conn_param_req>:
{
    c134:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    c136:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    c138:	78d9      	ldrb	r1, [r3, #3]
    c13a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    c13c:	881f      	ldrh	r7, [r3, #0]
{
    c13e:	b08b      	sub	sp, #44	; 0x2c
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    c140:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c144:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    c148:	7959      	ldrb	r1, [r3, #5]
    c14a:	791a      	ldrb	r2, [r3, #4]
    c14c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c150:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
    c154:	799a      	ldrb	r2, [r3, #6]
    c156:	79d9      	ldrb	r1, [r3, #7]
    c158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c15c:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    c160:	7a1a      	ldrb	r2, [r3, #8]
    c162:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    c164:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    c166:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    c16a:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    c16c:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
    c170:	f002 fa66 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    c174:	4606      	mov	r6, r0
    c176:	b9a0      	cbnz	r0, c1a2 <le_conn_param_req+0x6e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    c178:	4822      	ldr	r0, [pc, #136]	; (c204 <le_conn_param_req+0xd0>)
    c17a:	6803      	ldr	r3, [r0, #0]
    c17c:	075b      	lsls	r3, r3, #29
    c17e:	d00a      	beq.n	c196 <le_conn_param_req+0x62>
    c180:	4b21      	ldr	r3, [pc, #132]	; (c208 <le_conn_param_req+0xd4>)
    c182:	aa07      	add	r2, sp, #28
    c184:	e9cd 3408 	strd	r3, r4, [sp, #32]
    c188:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c18c:	2303      	movs	r3, #3
    c18e:	9301      	str	r3, [sp, #4]
    c190:	9307      	str	r3, [sp, #28]
    c192:	f01c fb6b 	bl	2886c <z_log_msg2_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    c196:	2102      	movs	r1, #2
    c198:	4620      	mov	r0, r4
    c19a:	f7ff ff9d 	bl	c0d8 <le_conn_param_neg_reply>
}
    c19e:	b00b      	add	sp, #44	; 0x2c
    c1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    c1a2:	a902      	add	r1, sp, #8
    c1a4:	f002 fbf2 	bl	e98c <le_param_req>
    c1a8:	b938      	cbnz	r0, c1ba <le_conn_param_req+0x86>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    c1aa:	211e      	movs	r1, #30
    c1ac:	4620      	mov	r0, r4
    c1ae:	f7ff ff93 	bl	c0d8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    c1b2:	4630      	mov	r0, r6
    c1b4:	f01c fd6e 	bl	28c94 <bt_conn_unref>
    c1b8:	e7f1      	b.n	c19e <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    c1ba:	210e      	movs	r1, #14
    c1bc:	f242 0020 	movw	r0, #8224	; 0x2020
    c1c0:	f7ff feb4 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    c1c4:	4605      	mov	r5, r0
    c1c6:	2800      	cmp	r0, #0
    c1c8:	d0f3      	beq.n	c1b2 <le_conn_param_req+0x7e>
    c1ca:	210e      	movs	r1, #14
    c1cc:	3008      	adds	r0, #8
    c1ce:	f01e fc0c 	bl	2a9ea <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    c1d2:	220e      	movs	r2, #14
    c1d4:	4604      	mov	r4, r0
    c1d6:	2100      	movs	r1, #0
    c1d8:	f01c f9f8 	bl	285cc <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    c1dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    c1e0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    c1e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c1e6:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    c1e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c1ec:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    c1ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	cp->handle = sys_cpu_to_le16(handle);
    c1f2:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    c1f4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    c1f6:	4629      	mov	r1, r5
    c1f8:	f242 0020 	movw	r0, #8224	; 0x2020
    c1fc:	f7ff fed0 	bl	bfa0 <bt_hci_cmd_send>
    c200:	e7d7      	b.n	c1b2 <le_conn_param_req+0x7e>
    c202:	bf00      	nop
    c204:	200009fc 	.word	0x200009fc
    c208:	0003021e 	.word	0x0003021e

0000c20c <bt_hci_cmd_send_sync>:
{
    c20c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c210:	b089      	sub	sp, #36	; 0x24
    c212:	4680      	mov	r8, r0
    c214:	af00      	add	r7, sp, #0
    c216:	4615      	mov	r5, r2
	if (!buf) {
    c218:	460c      	mov	r4, r1
    c21a:	b921      	cbnz	r1, c226 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    c21c:	f7ff fe86 	bl	bf2c <bt_hci_cmd_create>
		if (!buf) {
    c220:	4604      	mov	r4, r0
    c222:	2800      	cmp	r0, #0
    c224:	d062      	beq.n	c2ec <bt_hci_cmd_send_sync+0xe0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    c226:	f107 0608 	add.w	r6, r7, #8
    c22a:	2201      	movs	r2, #1
    c22c:	2100      	movs	r1, #0
    c22e:	4630      	mov	r0, r6
    c230:	f01f fa51 	bl	2b6d6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    c234:	4620      	mov	r0, r4
    c236:	f012 ff5d 	bl	1f0f4 <net_buf_id>
    c23a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; c2f4 <bt_hci_cmd_send_sync+0xe8>
    c23e:	230c      	movs	r3, #12
    c240:	fb03 9000 	mla	r0, r3, r0, r9
    c244:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    c246:	4620      	mov	r0, r4
    c248:	f01e fb9d 	bl	2a986 <net_buf_ref>
    c24c:	4601      	mov	r1, r0
    c24e:	482a      	ldr	r0, [pc, #168]	; (c2f8 <bt_hci_cmd_send_sync+0xec>)
    c250:	f01e fb8c 	bl	2a96c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    c254:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    c258:	4630      	mov	r0, r6
    c25a:	2300      	movs	r3, #0
    c25c:	f017 fc54 	bl	23b08 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    c260:	4606      	mov	r6, r0
    c262:	b180      	cbz	r0, c286 <bt_hci_cmd_send_sync+0x7a>
    c264:	4a25      	ldr	r2, [pc, #148]	; (c2fc <bt_hci_cmd_send_sync+0xf0>)
    c266:	4926      	ldr	r1, [pc, #152]	; (c300 <bt_hci_cmd_send_sync+0xf4>)
    c268:	4826      	ldr	r0, [pc, #152]	; (c304 <bt_hci_cmd_send_sync+0xf8>)
    c26a:	f240 1331 	movw	r3, #305	; 0x131
    c26e:	f018 fcc5 	bl	24bfc <printk>
    c272:	4825      	ldr	r0, [pc, #148]	; (c308 <bt_hci_cmd_send_sync+0xfc>)
    c274:	4631      	mov	r1, r6
    c276:	f018 fcc1 	bl	24bfc <printk>
    c27a:	4040      	eors	r0, r0
    c27c:	f380 8811 	msr	BASEPRI, r0
    c280:	f04f 0003 	mov.w	r0, #3
    c284:	df02      	svc	2
	status = cmd(buf)->status;
    c286:	4620      	mov	r0, r4
    c288:	f012 ff34 	bl	1f0f4 <net_buf_id>
    c28c:	230c      	movs	r3, #12
    c28e:	4358      	muls	r0, r3
    c290:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    c294:	b30e      	cbz	r6, c2da <bt_hci_cmd_send_sync+0xce>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    c296:	481d      	ldr	r0, [pc, #116]	; (c30c <bt_hci_cmd_send_sync+0x100>)
    c298:	6803      	ldr	r3, [r0, #0]
    c29a:	f013 0f06 	tst.w	r3, #6
    c29e:	d00f      	beq.n	c2c0 <bt_hci_cmd_send_sync+0xb4>
    c2a0:	4b1b      	ldr	r3, [pc, #108]	; (c310 <bt_hci_cmd_send_sync+0x104>)
    c2a2:	466d      	mov	r5, sp
    c2a4:	b088      	sub	sp, #32
    c2a6:	466a      	mov	r2, sp
    c2a8:	e9c2 3804 	strd	r3, r8, [r2, #16]
    c2ac:	2304      	movs	r3, #4
    c2ae:	6196      	str	r6, [r2, #24]
    c2b0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    c2b4:	f842 3f0c 	str.w	r3, [r2, #12]!
    c2b8:	607b      	str	r3, [r7, #4]
    c2ba:	f01c fad7 	bl	2886c <z_log_msg2_static_create.constprop.0>
    c2be:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    c2c0:	4620      	mov	r0, r4
    c2c2:	f012 ffd3 	bl	1f26c <net_buf_unref>
			return -EIO;
    c2c6:	2e09      	cmp	r6, #9
    c2c8:	bf0c      	ite	eq
    c2ca:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    c2ce:	f06f 0004 	mvnne.w	r0, #4
}
    c2d2:	3724      	adds	r7, #36	; 0x24
    c2d4:	46bd      	mov	sp, r7
    c2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    c2da:	b115      	cbz	r5, c2e2 <bt_hci_cmd_send_sync+0xd6>
		*rsp = buf;
    c2dc:	602c      	str	r4, [r5, #0]
	return 0;
    c2de:	4630      	mov	r0, r6
    c2e0:	e7f7      	b.n	c2d2 <bt_hci_cmd_send_sync+0xc6>
		net_buf_unref(buf);
    c2e2:	4620      	mov	r0, r4
    c2e4:	f012 ffc2 	bl	1f26c <net_buf_unref>
	return 0;
    c2e8:	4628      	mov	r0, r5
    c2ea:	e7f2      	b.n	c2d2 <bt_hci_cmd_send_sync+0xc6>
			return -ENOBUFS;
    c2ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c2f0:	e7ef      	b.n	c2d2 <bt_hci_cmd_send_sync+0xc6>
    c2f2:	bf00      	nop
    c2f4:	20002a34 	.word	0x20002a34
    c2f8:	2000013c 	.word	0x2000013c
    c2fc:	00030334 	.word	0x00030334
    c300:	00030368 	.word	0x00030368
    c304:	00030371 	.word	0x00030371
    c308:	00030476 	.word	0x00030476
    c30c:	200009fc 	.word	0x200009fc
    c310:	00030496 	.word	0x00030496

0000c314 <hci_le_read_max_data_len>:
{
    c314:	b570      	push	{r4, r5, r6, lr}
    c316:	b088      	sub	sp, #32
    c318:	4606      	mov	r6, r0
    c31a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    c31c:	466a      	mov	r2, sp
    c31e:	2100      	movs	r1, #0
    c320:	f242 002f 	movw	r0, #8239	; 0x202f
    c324:	f7ff ff72 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    c328:	4604      	mov	r4, r0
    c32a:	b180      	cbz	r0, c34e <hci_le_read_max_data_len+0x3a>
		BT_ERR("Failed to read DLE max data len");
    c32c:	480d      	ldr	r0, [pc, #52]	; (c364 <hci_le_read_max_data_len+0x50>)
    c32e:	6803      	ldr	r3, [r0, #0]
    c330:	075b      	lsls	r3, r3, #29
    c332:	d009      	beq.n	c348 <hci_le_read_max_data_len+0x34>
    c334:	4b0c      	ldr	r3, [pc, #48]	; (c368 <hci_le_read_max_data_len+0x54>)
    c336:	9306      	str	r3, [sp, #24]
    c338:	aa05      	add	r2, sp, #20
    c33a:	2302      	movs	r3, #2
    c33c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c340:	9301      	str	r3, [sp, #4]
    c342:	9305      	str	r3, [sp, #20]
    c344:	f01c fa92 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c348:	4620      	mov	r0, r4
    c34a:	b008      	add	sp, #32
    c34c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    c34e:	9800      	ldr	r0, [sp, #0]
    c350:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    c352:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    c356:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    c358:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    c35c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    c35e:	f012 ff85 	bl	1f26c <net_buf_unref>
	return 0;
    c362:	e7f1      	b.n	c348 <hci_le_read_max_data_len+0x34>
    c364:	200009fc 	.word	0x200009fc
    c368:	000304b2 	.word	0x000304b2

0000c36c <bt_le_create_conn_legacy>:
{
    c36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c370:	b086      	sub	sp, #24
    c372:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    c374:	f10d 010b 	add.w	r1, sp, #11
    c378:	2000      	movs	r0, #0
    c37a:	f001 fabd 	bl	d8f8 <bt_id_set_create_conn_own_addr>
	if (err) {
    c37e:	4605      	mov	r5, r0
    c380:	2800      	cmp	r0, #0
    c382:	d147      	bne.n	c414 <bt_le_create_conn_legacy+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    c384:	2119      	movs	r1, #25
    c386:	f242 000d 	movw	r0, #8205	; 0x200d
    c38a:	f7ff fdcf 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    c38e:	4607      	mov	r7, r0
    c390:	2800      	cmp	r0, #0
    c392:	d046      	beq.n	c422 <bt_le_create_conn_legacy+0xb6>
    c394:	2119      	movs	r1, #25
    c396:	3008      	adds	r0, #8
    c398:	f01e fb27 	bl	2a9ea <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    c39c:	4629      	mov	r1, r5
    c39e:	4604      	mov	r4, r0
    c3a0:	2219      	movs	r2, #25
    c3a2:	f01c f913 	bl	285cc <memset>
		if (!bt_dev.le.rl_size ||
    c3a6:	4d20      	ldr	r5, [pc, #128]	; (c428 <bt_le_create_conn_legacy+0xbc>)
	cp->own_addr_type = own_addr_type;
    c3a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c3ac:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    c3ae:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    c3b2:	b39b      	cbz	r3, c41c <bt_le_create_conn_legacy+0xb0>
    c3b4:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    c3b8:	429a      	cmp	r2, r3
    c3ba:	d82f      	bhi.n	c41c <bt_le_create_conn_legacy+0xb0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    c3bc:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    c3c0:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    c3c2:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    c3c6:	f01c fa3f 	bl	28848 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    c3ca:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    c3ce:	89ab      	ldrh	r3, [r5, #12]
    c3d0:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    c3d2:	89eb      	ldrh	r3, [r5, #14]
    c3d4:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    c3d6:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    c3da:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    c3de:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    c3e2:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    c3e6:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    c3ea:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    c3ee:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    c3f2:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    c3f6:	2301      	movs	r3, #1
    c3f8:	4a0c      	ldr	r2, [pc, #48]	; (c42c <bt_le_create_conn_legacy+0xc0>)
    c3fa:	9300      	str	r3, [sp, #0]
    c3fc:	a903      	add	r1, sp, #12
    c3fe:	230b      	movs	r3, #11
    c400:	4638      	mov	r0, r7
    c402:	f7ff fd81 	bl	bf08 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    c406:	4642      	mov	r2, r8
    c408:	4639      	mov	r1, r7
    c40a:	f242 000d 	movw	r0, #8205	; 0x200d
    c40e:	f7ff fefd 	bl	c20c <bt_hci_cmd_send_sync>
    c412:	4605      	mov	r5, r0
}
    c414:	4628      	mov	r0, r5
    c416:	b006      	add	sp, #24
    c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    c41c:	f106 0196 	add.w	r1, r6, #150	; 0x96
    c420:	e7ce      	b.n	c3c0 <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
    c422:	f06f 0568 	mvn.w	r5, #104	; 0x68
    c426:	e7f5      	b.n	c414 <bt_le_create_conn_legacy+0xa8>
    c428:	20000000 	.word	0x20000000
    c42c:	200000cc 	.word	0x200000cc

0000c430 <bt_le_create_conn_cancel>:
{
    c430:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    c432:	2100      	movs	r1, #0
{
    c434:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    c436:	f242 000e 	movw	r0, #8206	; 0x200e
    c43a:	f7ff fd77 	bl	bf2c <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    c43e:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    c440:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    c442:	230b      	movs	r3, #11
    c444:	a903      	add	r1, sp, #12
    c446:	4a06      	ldr	r2, [pc, #24]	; (c460 <bt_le_create_conn_cancel+0x30>)
    c448:	9500      	str	r5, [sp, #0]
    c44a:	f7ff fd5d 	bl	bf08 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    c44e:	462a      	mov	r2, r5
    c450:	4621      	mov	r1, r4
    c452:	f242 000e 	movw	r0, #8206	; 0x200e
    c456:	f7ff fed9 	bl	c20c <bt_hci_cmd_send_sync>
}
    c45a:	b007      	add	sp, #28
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	bf00      	nop
    c460:	200000cc 	.word	0x200000cc

0000c464 <conn_auto_initiate>:
{
    c464:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    c466:	7b43      	ldrb	r3, [r0, #13]
    c468:	2b07      	cmp	r3, #7
{
    c46a:	b08a      	sub	sp, #40	; 0x28
    c46c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    c46e:	d178      	bne.n	c562 <CONFIG_USB_DEVICE_VID+0xf>
    c470:	f3bf 8f5b 	dmb	ish
    c474:	6843      	ldr	r3, [r0, #4]
    c476:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    c47a:	0499      	lsls	r1, r3, #18
    c47c:	f100 0604 	add.w	r6, r0, #4
    c480:	d41b      	bmi.n	c4ba <conn_auto_initiate+0x56>
    c482:	78c3      	ldrb	r3, [r0, #3]
    c484:	b123      	cbz	r3, c490 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    c486:	4b38      	ldr	r3, [pc, #224]	; (c568 <CONFIG_USB_DEVICE_VID+0x15>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    c488:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    c48c:	071a      	lsls	r2, r3, #28
    c48e:	d514      	bpl.n	c4ba <conn_auto_initiate+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    c490:	2102      	movs	r1, #2
    c492:	f242 0016 	movw	r0, #8214	; 0x2016
    c496:	f7ff fd49 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    c49a:	4605      	mov	r5, r0
    c49c:	b168      	cbz	r0, c4ba <conn_auto_initiate+0x56>
    c49e:	2102      	movs	r1, #2
    c4a0:	3008      	adds	r0, #8
    c4a2:	f01e faa2 	bl	2a9ea <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    c4a6:	8823      	ldrh	r3, [r4, #0]
    c4a8:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    c4aa:	4629      	mov	r1, r5
    c4ac:	f242 0016 	movw	r0, #8214	; 0x2016
}
    c4b0:	b00a      	add	sp, #40	; 0x28
    c4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    c4b6:	f7ff bd73 	b.w	bfa0 <bt_hci_cmd_send>
    c4ba:	f3bf 8f5b 	dmb	ish
    c4be:	6863      	ldr	r3, [r4, #4]
    c4c0:	4d29      	ldr	r5, [pc, #164]	; (c568 <CONFIG_USB_DEVICE_VID+0x15>)
    c4c2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    c4c6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c4ca:	f3c3 3100 	ubfx	r1, r3, #12, #1
    c4ce:	d121      	bne.n	c514 <conn_auto_initiate+0xb0>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    c4d0:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    c4d4:	07db      	lsls	r3, r3, #31
    c4d6:	d51d      	bpl.n	c514 <conn_auto_initiate+0xb0>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    c4d8:	2302      	movs	r3, #2
    c4da:	461a      	mov	r2, r3
    c4dc:	9100      	str	r1, [sp, #0]
    c4de:	4620      	mov	r0, r4
    c4e0:	f01c fa1f 	bl	28922 <bt_le_set_phy>
		if (!err) {
    c4e4:	4603      	mov	r3, r0
    c4e6:	b930      	cbnz	r0, c4f6 <conn_auto_initiate+0x92>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c4e8:	2180      	movs	r1, #128	; 0x80
    c4ea:	4630      	mov	r0, r6
}
    c4ec:	b00a      	add	sp, #40	; 0x28
    c4ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c4f2:	f01c b9ac 	b.w	2884e <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    c4f6:	481d      	ldr	r0, [pc, #116]	; (c56c <CONFIG_USB_DEVICE_VID+0x19>)
    c4f8:	6802      	ldr	r2, [r0, #0]
    c4fa:	0756      	lsls	r6, r2, #29
    c4fc:	d00a      	beq.n	c514 <conn_auto_initiate+0xb0>
    c4fe:	4a1c      	ldr	r2, [pc, #112]	; (c570 <CONFIG_USB_DEVICE_VID+0x1d>)
    c500:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c504:	e9cd 2308 	strd	r2, r3, [sp, #32]
    c508:	2303      	movs	r3, #3
    c50a:	aa07      	add	r2, sp, #28
    c50c:	9303      	str	r3, [sp, #12]
    c50e:	9307      	str	r3, [sp, #28]
    c510:	f01c f9ac 	bl	2886c <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    c514:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    c518:	0698      	lsls	r0, r3, #26
    c51a:	d522      	bpl.n	c562 <CONFIG_USB_DEVICE_VID+0xf>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    c51c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    c520:	689b      	ldr	r3, [r3, #8]
    c522:	0799      	lsls	r1, r3, #30
    c524:	d51d      	bpl.n	c562 <CONFIG_USB_DEVICE_VID+0xf>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    c526:	f10d 010a 	add.w	r1, sp, #10
    c52a:	a802      	add	r0, sp, #8
    c52c:	f7ff fef2 	bl	c314 <hci_le_read_max_data_len>
			if (!err) {
    c530:	b9b8      	cbnz	r0, c562 <CONFIG_USB_DEVICE_VID+0xf>
				err = bt_le_set_data_len(conn,
    c532:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c536:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    c53a:	4620      	mov	r0, r4
    c53c:	f01c f9d4 	bl	288e8 <bt_le_set_data_len>
				if (err) {
    c540:	4603      	mov	r3, r0
    c542:	b170      	cbz	r0, c562 <CONFIG_USB_DEVICE_VID+0xf>
					BT_ERR("Failed to set data len (%d)", err);
    c544:	4809      	ldr	r0, [pc, #36]	; (c56c <CONFIG_USB_DEVICE_VID+0x19>)
    c546:	6802      	ldr	r2, [r0, #0]
    c548:	0752      	lsls	r2, r2, #29
    c54a:	d00a      	beq.n	c562 <CONFIG_USB_DEVICE_VID+0xf>
    c54c:	4a09      	ldr	r2, [pc, #36]	; (c574 <CONFIG_USB_DEVICE_VID+0x21>)
    c54e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c552:	e9cd 2308 	strd	r2, r3, [sp, #32]
    c556:	2303      	movs	r3, #3
    c558:	aa07      	add	r2, sp, #28
    c55a:	9303      	str	r3, [sp, #12]
    c55c:	9307      	str	r3, [sp, #28]
    c55e:	f01c f985 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c562:	b00a      	add	sp, #40	; 0x28
    c564:	bd70      	pop	{r4, r5, r6, pc}
    c566:	bf00      	nop
    c568:	20000000 	.word	0x20000000
    c56c:	200009fc 	.word	0x200009fc
    c570:	000304d2 	.word	0x000304d2
    c574:	000304ec 	.word	0x000304ec

0000c578 <le_phy_update_complete>:
{
    c578:	b530      	push	{r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c57a:	6883      	ldr	r3, [r0, #8]
    c57c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
{
    c580:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    c582:	4628      	mov	r0, r5
    c584:	f002 f85c 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    c588:	4604      	mov	r4, r0
    c58a:	b980      	cbnz	r0, c5ae <le_phy_update_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    c58c:	4816      	ldr	r0, [pc, #88]	; (c5e8 <le_phy_update_complete+0x70>)
    c58e:	6803      	ldr	r3, [r0, #0]
    c590:	075a      	lsls	r2, r3, #29
    c592:	d00a      	beq.n	c5aa <le_phy_update_complete+0x32>
    c594:	4b15      	ldr	r3, [pc, #84]	; (c5ec <le_phy_update_complete+0x74>)
    c596:	aa05      	add	r2, sp, #20
    c598:	e9cd 3506 	strd	r3, r5, [sp, #24]
    c59c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c5a0:	2303      	movs	r3, #3
    c5a2:	9301      	str	r3, [sp, #4]
    c5a4:	9305      	str	r3, [sp, #20]
    c5a6:	f01c f961 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c5aa:	b009      	add	sp, #36	; 0x24
    c5ac:	bd30      	pop	{r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    c5ae:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c5b0:	f3bf 8f5b 	dmb	ish
    c5b4:	e850 3f00 	ldrex	r3, [r0]
    c5b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    c5bc:	e840 2100 	strex	r1, r2, [r0]
    c5c0:	2900      	cmp	r1, #0
    c5c2:	d1f7      	bne.n	c5b4 <le_phy_update_complete+0x3c>
    c5c4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    c5c8:	061b      	lsls	r3, r3, #24
    c5ca:	d506      	bpl.n	c5da <le_phy_update_complete+0x62>
    c5cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    c5d0:	f01c f93d 	bl	2884e <atomic_or>
		conn_auto_initiate(conn);
    c5d4:	4620      	mov	r0, r4
    c5d6:	f7ff ff45 	bl	c464 <conn_auto_initiate>
	bt_conn_unref(conn);
    c5da:	4620      	mov	r0, r4
}
    c5dc:	b009      	add	sp, #36	; 0x24
    c5de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    c5e2:	f01c bb57 	b.w	28c94 <bt_conn_unref>
    c5e6:	bf00      	nop
    c5e8:	200009fc 	.word	0x200009fc
    c5ec:	0003021e 	.word	0x0003021e

0000c5f0 <le_remote_feat_complete>:
{
    c5f0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    c5f2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c5f4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    c5f8:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    c5fa:	4630      	mov	r0, r6
    c5fc:	f002 f820 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    c600:	4604      	mov	r4, r0
    c602:	b980      	cbnz	r0, c626 <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    c604:	4812      	ldr	r0, [pc, #72]	; (c650 <le_remote_feat_complete+0x60>)
    c606:	6803      	ldr	r3, [r0, #0]
    c608:	075b      	lsls	r3, r3, #29
    c60a:	d00a      	beq.n	c622 <le_remote_feat_complete+0x32>
    c60c:	4b11      	ldr	r3, [pc, #68]	; (c654 <le_remote_feat_complete+0x64>)
    c60e:	aa05      	add	r2, sp, #20
    c610:	e9cd 3606 	strd	r3, r6, [sp, #24]
    c614:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c618:	2303      	movs	r3, #3
    c61a:	9301      	str	r3, [sp, #4]
    c61c:	9305      	str	r3, [sp, #20]
    c61e:	f01c f925 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c622:	b008      	add	sp, #32
    c624:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    c626:	782b      	ldrb	r3, [r5, #0]
    c628:	b923      	cbnz	r3, c634 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    c62a:	2208      	movs	r2, #8
    c62c:	1ce9      	adds	r1, r5, #3
    c62e:	30ac      	adds	r0, #172	; 0xac
    c630:	f01b ffc1 	bl	285b6 <memcpy>
    c634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    c638:	1d20      	adds	r0, r4, #4
    c63a:	f01c f908 	bl	2884e <atomic_or>
	conn_auto_initiate(conn);
    c63e:	4620      	mov	r0, r4
    c640:	f7ff ff10 	bl	c464 <conn_auto_initiate>
	bt_conn_unref(conn);
    c644:	4620      	mov	r0, r4
}
    c646:	b008      	add	sp, #32
    c648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    c64c:	f01c bb22 	b.w	28c94 <bt_conn_unref>
    c650:	200009fc 	.word	0x200009fc
    c654:	0003021e 	.word	0x0003021e

0000c658 <bt_hci_le_enh_conn_complete>:
{
    c658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c65c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    c660:	4a7f      	ldr	r2, [pc, #508]	; (c860 <bt_hci_le_enh_conn_complete+0x208>)
	handle |= ~BT_ACL_HANDLE_MASK;
    c662:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
    c666:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    c668:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    c66c:	b29b      	uxth	r3, r3
    c66e:	4299      	cmp	r1, r3
{
    c670:	4604      	mov	r4, r0
    c672:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    c676:	bf08      	it	eq
    c678:	8016      	strheq	r6, [r2, #0]
{
    c67a:	b08f      	sub	sp, #60	; 0x3c
			return true;
    c67c:	bf08      	it	eq
    c67e:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    c680:	f000 feb4 	bl	d3ec <bt_id_pending_keys_update>
	if (evt->status) {
    c684:	7825      	ldrb	r5, [r4, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c686:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
    c68a:	2d00      	cmp	r5, #0
    c68c:	d03f      	beq.n	c70e <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c68e:	2d02      	cmp	r5, #2
    c690:	d12c      	bne.n	c6ec <bt_hci_le_enh_conn_complete+0x94>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    c692:	2100      	movs	r1, #0
    c694:	2206      	movs	r2, #6
    c696:	4608      	mov	r0, r1
    c698:	f002 fa42 	bl	eb20 <bt_conn_lookup_state_le>
	if (!conn) {
    c69c:	4604      	mov	r4, r0
    c69e:	b990      	cbnz	r0, c6c6 <bt_hci_le_enh_conn_complete+0x6e>
		BT_ERR("No pending central connection");
    c6a0:	4870      	ldr	r0, [pc, #448]	; (c864 <bt_hci_le_enh_conn_complete+0x20c>)
    c6a2:	6803      	ldr	r3, [r0, #0]
    c6a4:	0759      	lsls	r1, r3, #29
    c6a6:	d008      	beq.n	c6ba <bt_hci_le_enh_conn_complete+0x62>
    c6a8:	4b6f      	ldr	r3, [pc, #444]	; (c868 <bt_hci_le_enh_conn_complete+0x210>)
    c6aa:	930c      	str	r3, [sp, #48]	; 0x30
    c6ac:	aa0b      	add	r2, sp, #44	; 0x2c
    c6ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c6b2:	9506      	str	r5, [sp, #24]
    c6b4:	950b      	str	r5, [sp, #44]	; 0x2c
    c6b6:	f01c f8d9 	bl	2886c <z_log_msg2_static_create.constprop.0>
			bt_le_scan_update(false);
    c6ba:	2000      	movs	r0, #0
    c6bc:	f001 fa2c 	bl	db18 <bt_le_scan_update>
}
    c6c0:	b00f      	add	sp, #60	; 0x3c
    c6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    c6c6:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c6c8:	2100      	movs	r1, #0
    c6ca:	f001 ffc1 	bl	e650 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c6ce:	f3bf 8f5b 	dmb	ish
    c6d2:	6863      	ldr	r3, [r4, #4]
    c6d4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    c6d8:	07da      	lsls	r2, r3, #31
    c6da:	d503      	bpl.n	c6e4 <bt_hci_le_enh_conn_complete+0x8c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    c6dc:	4629      	mov	r1, r5
    c6de:	4620      	mov	r0, r4
    c6e0:	f001 ffb6 	bl	e650 <bt_conn_set_state>
	bt_conn_unref(conn);
    c6e4:	4620      	mov	r0, r4
    c6e6:	f01c fad5 	bl	28c94 <bt_conn_unref>
    c6ea:	e7e6      	b.n	c6ba <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    c6ec:	485d      	ldr	r0, [pc, #372]	; (c864 <bt_hci_le_enh_conn_complete+0x20c>)
    c6ee:	6803      	ldr	r3, [r0, #0]
    c6f0:	f013 0f06 	tst.w	r3, #6
    c6f4:	d0e4      	beq.n	c6c0 <bt_hci_le_enh_conn_complete+0x68>
    c6f6:	4b5d      	ldr	r3, [pc, #372]	; (c86c <bt_hci_le_enh_conn_complete+0x214>)
    c6f8:	aa0b      	add	r2, sp, #44	; 0x2c
    c6fa:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
    c6fe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c702:	2303      	movs	r3, #3
    c704:	9306      	str	r3, [sp, #24]
    c706:	930b      	str	r3, [sp, #44]	; 0x2c
    c708:	f01c f8b0 	bl	2886c <z_log_msg2_static_create.constprop.0>
    c70c:	e7d8      	b.n	c6c0 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    c70e:	7923      	ldrb	r3, [r4, #4]
    c710:	3b02      	subs	r3, #2
    c712:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    c714:	f104 0904 	add.w	r9, r4, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    c718:	d83f      	bhi.n	c79a <bt_hci_le_enh_conn_complete+0x142>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    c71a:	4649      	mov	r1, r9
    c71c:	a808      	add	r0, sp, #32
    c71e:	f01c f893 	bl	28848 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    c722:	f89d 3020 	ldrb.w	r3, [sp, #32]
	memcpy(dst, src, sizeof(*dst));
    c726:	2206      	movs	r2, #6
    c728:	3b02      	subs	r3, #2
    c72a:	f104 0111 	add.w	r1, r4, #17
    c72e:	f10d 0019 	add.w	r0, sp, #25
    c732:	f88d 3020 	strb.w	r3, [sp, #32]
    c736:	f01b ff3e 	bl	285b6 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    c73a:	2301      	movs	r3, #1
    c73c:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    c740:	78e0      	ldrb	r0, [r4, #3]
    c742:	b9a0      	cbnz	r0, c76e <bt_hci_le_enh_conn_complete+0x116>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    c744:	2206      	movs	r2, #6
    c746:	a908      	add	r1, sp, #32
    c748:	f002 f9ea 	bl	eb20 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c74c:	78e3      	ldrb	r3, [r4, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    c74e:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c750:	b963      	cbnz	r3, c76c <bt_hci_le_enh_conn_complete+0x114>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c752:	f3bf 8f5b 	dmb	ish
    c756:	4b46      	ldr	r3, [pc, #280]	; (c870 <bt_hci_le_enh_conn_complete+0x218>)
    c758:	e853 2f00 	ldrex	r2, [r3]
    c75c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    c760:	e843 2100 	strex	r1, r2, [r3]
    c764:	2900      	cmp	r1, #0
    c766:	d1f7      	bne.n	c758 <bt_hci_le_enh_conn_complete+0x100>
    c768:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    c76c:	bb45      	cbnz	r5, c7c0 <bt_hci_le_enh_conn_complete+0x168>
		BT_ERR("No pending conn for peer %s",
    c76e:	4c3d      	ldr	r4, [pc, #244]	; (c864 <bt_hci_le_enh_conn_complete+0x20c>)
    c770:	6823      	ldr	r3, [r4, #0]
    c772:	075b      	lsls	r3, r3, #29
    c774:	d00c      	beq.n	c790 <bt_hci_le_enh_conn_complete+0x138>
    c776:	4648      	mov	r0, r9
    c778:	f7fe fd34 	bl	b1e4 <bt_addr_le_str_real>
    c77c:	4b3d      	ldr	r3, [pc, #244]	; (c874 <bt_hci_le_enh_conn_complete+0x21c>)
    c77e:	9301      	str	r3, [sp, #4]
    c780:	2300      	movs	r3, #0
    c782:	9002      	str	r0, [sp, #8]
    c784:	9300      	str	r3, [sp, #0]
    c786:	2201      	movs	r2, #1
    c788:	4621      	mov	r1, r4
    c78a:	4618      	mov	r0, r3
    c78c:	f01c f871 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    c790:	211f      	movs	r1, #31
    c792:	4640      	mov	r0, r8
    c794:	f01c f88d 	bl	288b2 <bt_hci_disconnect>
		return;
    c798:	e792      	b.n	c6c0 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    c79a:	78e3      	ldrb	r3, [r4, #3]
    c79c:	2b01      	cmp	r3, #1
    c79e:	bf04      	itt	eq
    c7a0:	4b35      	ldreq	r3, [pc, #212]	; (c878 <bt_hci_le_enh_conn_complete+0x220>)
    c7a2:	f893 5067 	ldrbeq.w	r5, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    c7a6:	4649      	mov	r1, r9
    c7a8:	4628      	mov	r0, r5
    c7aa:	f01c f96f 	bl	28a8c <bt_lookup_id_addr>
    c7ae:	4601      	mov	r1, r0
    c7b0:	a808      	add	r0, sp, #32
    c7b2:	f01c f849 	bl	28848 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    c7b6:	4649      	mov	r1, r9
    c7b8:	a806      	add	r0, sp, #24
    c7ba:	f01c f845 	bl	28848 <bt_addr_le_copy>
    c7be:	e7bf      	b.n	c740 <bt_hci_le_enh_conn_complete+0xe8>
	conn->handle = handle;
    c7c0:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    c7c2:	a908      	add	r1, sp, #32
	conn->handle = handle;
    c7c4:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    c7c8:	f01c f83e 	bl	28848 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    c7cc:	7e22      	ldrb	r2, [r4, #24]
    c7ce:	7de3      	ldrb	r3, [r4, #23]
    c7d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c7d4:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    c7d8:	7ea2      	ldrb	r2, [r4, #26]
    c7da:	7e63      	ldrb	r3, [r4, #25]
    c7dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c7e0:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    c7e4:	7ee3      	ldrb	r3, [r4, #27]
    c7e6:	7f22      	ldrb	r2, [r4, #28]
    c7e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c7ec:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    c7f0:	78e7      	ldrb	r7, [r4, #3]
    c7f2:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    c7f4:	2300      	movs	r3, #0
    c7f6:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c7f8:	b9c7      	cbnz	r7, c82c <bt_hci_le_enh_conn_complete+0x1d4>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    c7fa:	a906      	add	r1, sp, #24
    c7fc:	f105 0096 	add.w	r0, r5, #150	; 0x96
    c800:	f01c f822 	bl	28848 <bt_addr_le_copy>
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
    c804:	340b      	adds	r4, #11
			conn->le.init_addr.type = BT_ADDR_LE_RANDOM;
    c806:	2301      	movs	r3, #1
    c808:	f885 308f 	strb.w	r3, [r5, #143]	; 0x8f
	return memcmp(a, b, sizeof(*a));
    c80c:	2206      	movs	r2, #6
    c80e:	a904      	add	r1, sp, #16
    c810:	4620      	mov	r0, r4
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
    c812:	9704      	str	r7, [sp, #16]
    c814:	f8ad 7014 	strh.w	r7, [sp, #20]
    c818:	f01b fea4 	bl	28564 <memcmp>
    c81c:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
    c81e:	2206      	movs	r2, #6
				bt_addr_copy(&conn->le.init_addr.a,
    c820:	f105 0090 	add.w	r0, r5, #144	; 0x90
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
    c824:	b1cb      	cbz	r3, c85a <bt_hci_le_enh_conn_complete+0x202>
    c826:	4621      	mov	r1, r4
    c828:	f01b fec5 	bl	285b6 <memcpy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    c82c:	2107      	movs	r1, #7
    c82e:	4628      	mov	r0, r5
    c830:	f001 ff0e 	bl	e650 <bt_conn_set_state>
	if (is_disconnected) {
    c834:	b11e      	cbz	r6, c83e <bt_hci_le_enh_conn_complete+0x1e6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    c836:	2101      	movs	r1, #1
    c838:	4628      	mov	r0, r5
    c83a:	f001 ff09 	bl	e650 <bt_conn_set_state>
	bt_conn_connected(conn);
    c83e:	4628      	mov	r0, r5
    c840:	f01c fa2b 	bl	28c9a <bt_conn_connected>
	conn_auto_initiate(conn);
    c844:	4628      	mov	r0, r5
    c846:	f7ff fe0d 	bl	c464 <conn_auto_initiate>
	bt_conn_unref(conn);
    c84a:	4628      	mov	r0, r5
    c84c:	f01c fa22 	bl	28c94 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c850:	78eb      	ldrb	r3, [r5, #3]
    c852:	2b00      	cmp	r3, #0
    c854:	f47f af34 	bne.w	c6c0 <bt_hci_le_enh_conn_complete+0x68>
    c858:	e72f      	b.n	c6ba <bt_hci_le_enh_conn_complete+0x62>
    c85a:	4908      	ldr	r1, [pc, #32]	; (c87c <bt_hci_le_enh_conn_complete+0x224>)
    c85c:	e7e4      	b.n	c828 <bt_hci_le_enh_conn_complete+0x1d0>
    c85e:	bf00      	nop
    c860:	200047f8 	.word	0x200047f8
    c864:	200009fc 	.word	0x200009fc
    c868:	00030508 	.word	0x00030508
    c86c:	00030526 	.word	0x00030526
    c870:	200000cc 	.word	0x200000cc
    c874:	0003053f 	.word	0x0003053f
    c878:	20000000 	.word	0x20000000
    c87c:	20000061 	.word	0x20000061

0000c880 <le_legacy_conn_complete>:
{
    c880:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    c882:	6881      	ldr	r1, [r0, #8]
{
    c884:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    c886:	780b      	ldrb	r3, [r1, #0]
    c888:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    c88c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    c890:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    c894:	78cb      	ldrb	r3, [r1, #3]
    c896:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    c89a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    c89e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    c8a2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    c8a6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    c8aa:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    c8ae:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    c8b2:	7c4b      	ldrb	r3, [r1, #17]
    c8b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    c8b8:	a803      	add	r0, sp, #12
    c8ba:	3104      	adds	r1, #4
    c8bc:	f01b ffc4 	bl	28848 <bt_addr_le_copy>
    c8c0:	490a      	ldr	r1, [pc, #40]	; (c8ec <le_legacy_conn_complete+0x6c>)
    c8c2:	2206      	movs	r2, #6
    c8c4:	f10d 0013 	add.w	r0, sp, #19
    c8c8:	f01b fe75 	bl	285b6 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    c8cc:	2300      	movs	r3, #0
    c8ce:	2206      	movs	r2, #6
    c8d0:	4669      	mov	r1, sp
    c8d2:	f10d 0019 	add.w	r0, sp, #25
    c8d6:	9300      	str	r3, [sp, #0]
    c8d8:	f8ad 3004 	strh.w	r3, [sp, #4]
    c8dc:	f01b fe6b 	bl	285b6 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    c8e0:	a802      	add	r0, sp, #8
    c8e2:	f7ff feb9 	bl	c658 <bt_hci_le_enh_conn_complete>
}
    c8e6:	b00b      	add	sp, #44	; 0x2c
    c8e8:	f85d fb04 	ldr.w	pc, [sp], #4
    c8ec:	20000061 	.word	0x20000061

0000c8f0 <bt_security_err_get>:
	switch (hci_err) {
    c8f0:	2829      	cmp	r0, #41	; 0x29
    c8f2:	bf9a      	itte	ls
    c8f4:	4b01      	ldrls	r3, [pc, #4]	; (c8fc <bt_security_err_get+0xc>)
    c8f6:	5c18      	ldrbls	r0, [r3, r0]
{
    c8f8:	2009      	movhi	r0, #9
}
    c8fa:	4770      	bx	lr
    c8fc:	00030874 	.word	0x00030874

0000c900 <hci_encrypt_key_refresh_complete>:
{
    c900:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    c902:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    c904:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    c908:	781d      	ldrb	r5, [r3, #0]
{
    c90a:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    c90c:	4630      	mov	r0, r6
    c90e:	f001 fe97 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    c912:	4604      	mov	r4, r0
    c914:	b980      	cbnz	r0, c938 <hci_encrypt_key_refresh_complete+0x38>
		BT_ERR("Unable to look up conn with handle %u", handle);
    c916:	4824      	ldr	r0, [pc, #144]	; (c9a8 <hci_encrypt_key_refresh_complete+0xa8>)
    c918:	6803      	ldr	r3, [r0, #0]
    c91a:	075a      	lsls	r2, r3, #29
    c91c:	d00a      	beq.n	c934 <hci_encrypt_key_refresh_complete+0x34>
    c91e:	4b23      	ldr	r3, [pc, #140]	; (c9ac <hci_encrypt_key_refresh_complete+0xac>)
    c920:	aa05      	add	r2, sp, #20
    c922:	e9cd 3606 	strd	r3, r6, [sp, #24]
    c926:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c92a:	2303      	movs	r3, #3
    c92c:	9301      	str	r3, [sp, #4]
    c92e:	9305      	str	r3, [sp, #20]
    c930:	f01b ff9c 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c934:	b008      	add	sp, #32
    c936:	bd70      	pop	{r4, r5, r6, pc}
	if (status) {
    c938:	b16d      	cbz	r5, c956 <hci_encrypt_key_refresh_complete+0x56>
		bt_conn_security_changed(conn, status,
    c93a:	4628      	mov	r0, r5
    c93c:	f7ff ffd8 	bl	c8f0 <bt_security_err_get>
    c940:	4629      	mov	r1, r5
    c942:	4602      	mov	r2, r0
    c944:	4620      	mov	r0, r4
    c946:	f002 f889 	bl	ea5c <bt_conn_security_changed>
	bt_conn_unref(conn);
    c94a:	4620      	mov	r0, r4
}
    c94c:	b008      	add	sp, #32
    c94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    c952:	f01c b99f 	b.w	28c94 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    c956:	7883      	ldrb	r3, [r0, #2]
    c958:	2b01      	cmp	r3, #1
    c95a:	d107      	bne.n	c96c <hci_encrypt_key_refresh_complete+0x6c>
		bt_smp_update_keys(conn);
    c95c:	f006 fbc8 	bl	130f0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    c960:	4620      	mov	r0, r4
    c962:	f01b ff59 	bl	28818 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    c966:	2800      	cmp	r0, #0
    c968:	bf08      	it	eq
    c96a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    c96c:	4628      	mov	r0, r5
    c96e:	f7ff ffbf 	bl	c8f0 <bt_security_err_get>
    c972:	4629      	mov	r1, r5
    c974:	4602      	mov	r2, r0
    c976:	4620      	mov	r0, r4
    c978:	f002 f870 	bl	ea5c <bt_conn_security_changed>
	if (status) {
    c97c:	2d00      	cmp	r5, #0
    c97e:	d0e4      	beq.n	c94a <hci_encrypt_key_refresh_complete+0x4a>
		BT_ERR("Failed to set required security level");
    c980:	4809      	ldr	r0, [pc, #36]	; (c9a8 <hci_encrypt_key_refresh_complete+0xa8>)
    c982:	6803      	ldr	r3, [r0, #0]
    c984:	075b      	lsls	r3, r3, #29
    c986:	d009      	beq.n	c99c <hci_encrypt_key_refresh_complete+0x9c>
    c988:	4b09      	ldr	r3, [pc, #36]	; (c9b0 <hci_encrypt_key_refresh_complete+0xb0>)
    c98a:	9306      	str	r3, [sp, #24]
    c98c:	aa05      	add	r2, sp, #20
    c98e:	2302      	movs	r3, #2
    c990:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c994:	9301      	str	r3, [sp, #4]
    c996:	9305      	str	r3, [sp, #20]
    c998:	f01b ff68 	bl	2886c <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    c99c:	4629      	mov	r1, r5
    c99e:	4620      	mov	r0, r4
    c9a0:	f01c fa11 	bl	28dc6 <bt_conn_disconnect>
    c9a4:	e7d1      	b.n	c94a <hci_encrypt_key_refresh_complete+0x4a>
    c9a6:	bf00      	nop
    c9a8:	200009fc 	.word	0x200009fc
    c9ac:	0003041f 	.word	0x0003041f
    c9b0:	0003055b 	.word	0x0003055b

0000c9b4 <hci_encrypt_change>:
{
    c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    c9b6:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c9b8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    c9bc:	7835      	ldrb	r5, [r6, #0]
{
    c9be:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    c9c0:	4638      	mov	r0, r7
    c9c2:	f001 fe3d 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    c9c6:	4604      	mov	r4, r0
    c9c8:	b980      	cbnz	r0, c9ec <hci_encrypt_change+0x38>
		BT_ERR("Unable to look up conn with handle %u", handle);
    c9ca:	4825      	ldr	r0, [pc, #148]	; (ca60 <hci_encrypt_change+0xac>)
    c9cc:	6803      	ldr	r3, [r0, #0]
    c9ce:	075a      	lsls	r2, r3, #29
    c9d0:	d00a      	beq.n	c9e8 <hci_encrypt_change+0x34>
    c9d2:	4b24      	ldr	r3, [pc, #144]	; (ca64 <hci_encrypt_change+0xb0>)
    c9d4:	aa05      	add	r2, sp, #20
    c9d6:	e9cd 3706 	strd	r3, r7, [sp, #24]
    c9da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c9de:	2303      	movs	r3, #3
    c9e0:	9301      	str	r3, [sp, #4]
    c9e2:	9305      	str	r3, [sp, #20]
    c9e4:	f01b ff42 	bl	2886c <z_log_msg2_static_create.constprop.0>
}
    c9e8:	b009      	add	sp, #36	; 0x24
    c9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
    c9ec:	b16d      	cbz	r5, ca0a <hci_encrypt_change+0x56>
		bt_conn_security_changed(conn, status,
    c9ee:	4628      	mov	r0, r5
    c9f0:	f7ff ff7e 	bl	c8f0 <bt_security_err_get>
    c9f4:	4629      	mov	r1, r5
    c9f6:	4602      	mov	r2, r0
    c9f8:	4620      	mov	r0, r4
    c9fa:	f002 f82f 	bl	ea5c <bt_conn_security_changed>
	bt_conn_unref(conn);
    c9fe:	4620      	mov	r0, r4
}
    ca00:	b009      	add	sp, #36	; 0x24
    ca02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    ca06:	f01c b945 	b.w	28c94 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    ca0a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    ca0c:	78f3      	ldrb	r3, [r6, #3]
    ca0e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    ca10:	2a01      	cmp	r2, #1
    ca12:	d108      	bne.n	ca26 <hci_encrypt_change+0x72>
		if (conn->encrypt) {
    ca14:	b10b      	cbz	r3, ca1a <hci_encrypt_change+0x66>
			bt_smp_update_keys(conn);
    ca16:	f006 fb6b 	bl	130f0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    ca1a:	4620      	mov	r0, r4
    ca1c:	f01b fefc 	bl	28818 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    ca20:	2800      	cmp	r0, #0
    ca22:	bf08      	it	eq
    ca24:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    ca26:	4628      	mov	r0, r5
    ca28:	f7ff ff62 	bl	c8f0 <bt_security_err_get>
    ca2c:	4629      	mov	r1, r5
    ca2e:	4602      	mov	r2, r0
    ca30:	4620      	mov	r0, r4
    ca32:	f002 f813 	bl	ea5c <bt_conn_security_changed>
	if (status) {
    ca36:	2d00      	cmp	r5, #0
    ca38:	d0e1      	beq.n	c9fe <hci_encrypt_change+0x4a>
		BT_ERR("Failed to set required security level");
    ca3a:	4809      	ldr	r0, [pc, #36]	; (ca60 <hci_encrypt_change+0xac>)
    ca3c:	6803      	ldr	r3, [r0, #0]
    ca3e:	075b      	lsls	r3, r3, #29
    ca40:	d009      	beq.n	ca56 <hci_encrypt_change+0xa2>
    ca42:	4b09      	ldr	r3, [pc, #36]	; (ca68 <hci_encrypt_change+0xb4>)
    ca44:	9306      	str	r3, [sp, #24]
    ca46:	aa05      	add	r2, sp, #20
    ca48:	2302      	movs	r3, #2
    ca4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ca4e:	9301      	str	r3, [sp, #4]
    ca50:	9305      	str	r3, [sp, #20]
    ca52:	f01b ff0b 	bl	2886c <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    ca56:	4629      	mov	r1, r5
    ca58:	4620      	mov	r0, r4
    ca5a:	f01c f9b4 	bl	28dc6 <bt_conn_disconnect>
    ca5e:	e7ce      	b.n	c9fe <hci_encrypt_change+0x4a>
    ca60:	200009fc 	.word	0x200009fc
    ca64:	0003041f 	.word	0x0003041f
    ca68:	0003055b 	.word	0x0003055b

0000ca6c <hci_event_prio>:
{
    ca6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca70:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    ca72:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    ca76:	4630      	mov	r0, r6
    ca78:	f01e f800 	bl	2aa7c <net_buf_simple_headroom>
	state->len = buf->len;
    ca7c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ca80:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    ca84:	4605      	mov	r5, r0
    ca86:	d80c      	bhi.n	caa2 <hci_event_prio+0x36>
    ca88:	4a1c      	ldr	r2, [pc, #112]	; (cafc <hci_event_prio+0x90>)
    ca8a:	491d      	ldr	r1, [pc, #116]	; (cb00 <hci_event_prio+0x94>)
    ca8c:	481d      	ldr	r0, [pc, #116]	; (cb04 <hci_event_prio+0x98>)
    ca8e:	f640 532f 	movw	r3, #3375	; 0xd2f
    ca92:	f018 f8b3 	bl	24bfc <printk>
    ca96:	4040      	eors	r0, r0
    ca98:	f380 8811 	msr	BASEPRI, r0
    ca9c:	f04f 0003 	mov.w	r0, #3
    caa0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    caa2:	4630      	mov	r0, r6
    caa4:	2102      	movs	r1, #2
    caa6:	f01d ffd1 	bl	2aa4c <net_buf_simple_pull_mem>
    caaa:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    caac:	7800      	ldrb	r0, [r0, #0]
    caae:	f01b fea1 	bl	287f4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    cab2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    cab4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    cab6:	d40c      	bmi.n	cad2 <hci_event_prio+0x66>
    cab8:	4a10      	ldr	r2, [pc, #64]	; (cafc <hci_event_prio+0x90>)
    caba:	4913      	ldr	r1, [pc, #76]	; (cb08 <hci_event_prio+0x9c>)
    cabc:	4811      	ldr	r0, [pc, #68]	; (cb04 <hci_event_prio+0x98>)
    cabe:	f640 5333 	movw	r3, #3379	; 0xd33
    cac2:	f018 f89b 	bl	24bfc <printk>
    cac6:	4040      	eors	r0, r0
    cac8:	f380 8811 	msr	BASEPRI, r0
    cacc:	f04f 0003 	mov.w	r0, #3
    cad0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    cad2:	2305      	movs	r3, #5
    cad4:	4a0d      	ldr	r2, [pc, #52]	; (cb0c <hci_event_prio+0xa0>)
    cad6:	7838      	ldrb	r0, [r7, #0]
    cad8:	4621      	mov	r1, r4
    cada:	f7fe ff2d 	bl	b938 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    cade:	07b3      	lsls	r3, r6, #30
    cae0:	d507      	bpl.n	caf2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    cae2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    cae4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    cae8:	fa10 f585 	uxtah	r5, r0, r5
    caec:	60a5      	str	r5, [r4, #8]
}
    caee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    caf2:	4620      	mov	r0, r4
}
    caf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    caf8:	f012 bbb8 	b.w	1f26c <net_buf_unref>
    cafc:	00030334 	.word	0x00030334
    cb00:	00030581 	.word	0x00030581
    cb04:	00030371 	.word	0x00030371
    cb08:	0003059a 	.word	0x0003059a
    cb0c:	0002ced8 	.word	0x0002ced8

0000cb10 <bt_recv>:
{
    cb10:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_recv_thread_id == NULL) {
    cb12:	4d58      	ldr	r5, [pc, #352]	; (cc74 <bt_recv+0x164>)
{
    cb14:	b089      	sub	sp, #36	; 0x24
	if (bt_recv_thread_id == NULL) {
    cb16:	682b      	ldr	r3, [r5, #0]
{
    cb18:	af00      	add	r7, sp, #0
    cb1a:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    cb1c:	b913      	cbnz	r3, cb24 <bt_recv+0x14>
	return z_impl_z_current_get();
    cb1e:	f017 fccb 	bl	244b8 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    cb22:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    cb24:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    cb26:	2b01      	cmp	r3, #1
    cb28:	d05e      	beq.n	cbe8 <bt_recv+0xd8>
    cb2a:	2b03      	cmp	r3, #3
    cb2c:	f040 808b 	bne.w	cc46 <bt_recv+0x136>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cb30:	89a3      	ldrh	r3, [r4, #12]
    cb32:	2b03      	cmp	r3, #3
    cb34:	d80c      	bhi.n	cb50 <bt_recv+0x40>
    cb36:	4a50      	ldr	r2, [pc, #320]	; (cc78 <bt_recv+0x168>)
    cb38:	4950      	ldr	r1, [pc, #320]	; (cc7c <bt_recv+0x16c>)
    cb3a:	4851      	ldr	r0, [pc, #324]	; (cc80 <bt_recv+0x170>)
    cb3c:	f240 13b5 	movw	r3, #437	; 0x1b5
    cb40:	f018 f85c 	bl	24bfc <printk>
    cb44:	4040      	eors	r0, r0
    cb46:	f380 8811 	msr	BASEPRI, r0
    cb4a:	f04f 0003 	mov.w	r0, #3
    cb4e:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    cb50:	2104      	movs	r1, #4
    cb52:	f104 0008 	add.w	r0, r4, #8
    cb56:	f01d ff79 	bl	2aa4c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    cb5a:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    cb5c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    cb5e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    cb60:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    cb62:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    cb66:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    cb68:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    cb6a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    cb6c:	d017      	beq.n	cb9e <bt_recv+0x8e>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    cb6e:	4845      	ldr	r0, [pc, #276]	; (cc84 <bt_recv+0x174>)
    cb70:	6802      	ldr	r2, [r0, #0]
    cb72:	0756      	lsls	r6, r2, #29
    cb74:	d00f      	beq.n	cb96 <bt_recv+0x86>
    cb76:	466d      	mov	r5, sp
    cb78:	b088      	sub	sp, #32
    cb7a:	466a      	mov	r2, sp
    cb7c:	4e42      	ldr	r6, [pc, #264]	; (cc88 <bt_recv+0x178>)
    cb7e:	6193      	str	r3, [r2, #24]
    cb80:	2304      	movs	r3, #4
    cb82:	e9c2 6104 	strd	r6, r1, [r2, #16]
    cb86:	f842 3f0c 	str.w	r3, [r2, #12]!
    cb8a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    cb8e:	60bb      	str	r3, [r7, #8]
    cb90:	f01b fe6c 	bl	2886c <z_log_msg2_static_create.constprop.0>
    cb94:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    cb96:	4620      	mov	r0, r4
    cb98:	f012 fb68 	bl	1f26c <net_buf_unref>
    cb9c:	e020      	b.n	cbe0 <bt_recv+0xd0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    cb9e:	f001 fd4f 	bl	e640 <bt_conn_lookup_handle>
	if (!conn) {
    cba2:	4605      	mov	r5, r0
    cba4:	b988      	cbnz	r0, cbca <bt_recv+0xba>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    cba6:	4837      	ldr	r0, [pc, #220]	; (cc84 <bt_recv+0x174>)
    cba8:	6803      	ldr	r3, [r0, #0]
    cbaa:	075d      	lsls	r5, r3, #29
    cbac:	d0f3      	beq.n	cb96 <bt_recv+0x86>
    cbae:	8ae3      	ldrh	r3, [r4, #22]
    cbb0:	4a36      	ldr	r2, [pc, #216]	; (cc8c <bt_recv+0x17c>)
    cbb2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cbb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    cbba:	2303      	movs	r3, #3
    cbbc:	f107 0214 	add.w	r2, r7, #20
    cbc0:	607b      	str	r3, [r7, #4]
    cbc2:	617b      	str	r3, [r7, #20]
    cbc4:	f01b fe52 	bl	2886c <z_log_msg2_static_create.constprop.0>
    cbc8:	e7e5      	b.n	cb96 <bt_recv+0x86>
	acl(buf)->index = bt_conn_index(conn);
    cbca:	f001 fe69 	bl	e8a0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    cbce:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    cbd0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    cbd2:	4621      	mov	r1, r4
    cbd4:	4628      	mov	r0, r5
    cbd6:	f001 fbe5 	bl	e3a4 <bt_conn_recv>
	bt_conn_unref(conn);
    cbda:	4628      	mov	r0, r5
    cbdc:	f01c f85a 	bl	28c94 <bt_conn_unref>
		return 0;
    cbe0:	2000      	movs	r0, #0
}
    cbe2:	3724      	adds	r7, #36	; 0x24
    cbe4:	46bd      	mov	sp, r7
    cbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cbe8:	89a3      	ldrh	r3, [r4, #12]
    cbea:	2b01      	cmp	r3, #1
    cbec:	d80c      	bhi.n	cc08 <bt_recv+0xf8>
    cbee:	4a22      	ldr	r2, [pc, #136]	; (cc78 <bt_recv+0x168>)
    cbf0:	4922      	ldr	r1, [pc, #136]	; (cc7c <bt_recv+0x16c>)
    cbf2:	4823      	ldr	r0, [pc, #140]	; (cc80 <bt_recv+0x170>)
    cbf4:	f640 1317 	movw	r3, #2327	; 0x917
    cbf8:	f018 f800 	bl	24bfc <printk>
    cbfc:	4040      	eors	r0, r0
    cbfe:	f380 8811 	msr	BASEPRI, r0
    cc02:	f04f 0003 	mov.w	r0, #3
    cc06:	df02      	svc	2
    cc08:	2102      	movs	r1, #2
    cc0a:	f104 0008 	add.w	r0, r4, #8
    cc0e:	f01d ff1d 	bl	2aa4c <net_buf_simple_pull_mem>
    cc12:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    cc14:	7800      	ldrb	r0, [r0, #0]
    cc16:	f01b fded 	bl	287f4 <bt_hci_evt_get_flags>
    cc1a:	0781      	lsls	r1, r0, #30
    cc1c:	d40c      	bmi.n	cc38 <bt_recv+0x128>
    cc1e:	4a16      	ldr	r2, [pc, #88]	; (cc78 <bt_recv+0x168>)
    cc20:	491b      	ldr	r1, [pc, #108]	; (cc90 <bt_recv+0x180>)
    cc22:	4817      	ldr	r0, [pc, #92]	; (cc80 <bt_recv+0x170>)
    cc24:	f640 131b 	movw	r3, #2331	; 0x91b
    cc28:	f017 ffe8 	bl	24bfc <printk>
    cc2c:	4040      	eors	r0, r0
    cc2e:	f380 8811 	msr	BASEPRI, r0
    cc32:	f04f 0003 	mov.w	r0, #3
    cc36:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    cc38:	4a16      	ldr	r2, [pc, #88]	; (cc94 <bt_recv+0x184>)
    cc3a:	7828      	ldrb	r0, [r5, #0]
    cc3c:	2306      	movs	r3, #6
    cc3e:	4621      	mov	r1, r4
    cc40:	f7fe fe7a 	bl	b938 <handle_event>
    cc44:	e7a7      	b.n	cb96 <bt_recv+0x86>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    cc46:	480f      	ldr	r0, [pc, #60]	; (cc84 <bt_recv+0x174>)
    cc48:	6802      	ldr	r2, [r0, #0]
    cc4a:	0752      	lsls	r2, r2, #29
    cc4c:	d00b      	beq.n	cc66 <bt_recv+0x156>
    cc4e:	4a12      	ldr	r2, [pc, #72]	; (cc98 <bt_recv+0x188>)
    cc50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (bt_buf_get_type(buf)) {
    cc54:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    cc58:	2303      	movs	r3, #3
    cc5a:	f107 0214 	add.w	r2, r7, #20
    cc5e:	607b      	str	r3, [r7, #4]
    cc60:	617b      	str	r3, [r7, #20]
    cc62:	f01b fe03 	bl	2886c <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    cc66:	4620      	mov	r0, r4
    cc68:	f012 fb00 	bl	1f26c <net_buf_unref>
		return -EINVAL;
    cc6c:	f06f 0015 	mvn.w	r0, #21
    cc70:	e7b7      	b.n	cbe2 <bt_recv+0xd2>
    cc72:	bf00      	nop
    cc74:	20002a30 	.word	0x20002a30
    cc78:	00030334 	.word	0x00030334
    cc7c:	00030581 	.word	0x00030581
    cc80:	00030371 	.word	0x00030371
    cc84:	200009fc 	.word	0x200009fc
    cc88:	000305b3 	.word	0x000305b3
    cc8c:	000305d7 	.word	0x000305d7
    cc90:	000305f9 	.word	0x000305f9
    cc94:	0002ce98 	.word	0x0002ce98
    cc98:	00030627 	.word	0x00030627

0000cc9c <bt_recv_prio>:
{
    cc9c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    cc9e:	7d03      	ldrb	r3, [r0, #20]
    cca0:	2b01      	cmp	r3, #1
{
    cca2:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    cca4:	d00c      	beq.n	ccc0 <bt_recv_prio+0x24>
    cca6:	4a09      	ldr	r2, [pc, #36]	; (cccc <bt_recv_prio+0x30>)
    cca8:	4909      	ldr	r1, [pc, #36]	; (ccd0 <bt_recv_prio+0x34>)
    ccaa:	480a      	ldr	r0, [pc, #40]	; (ccd4 <bt_recv_prio+0x38>)
    ccac:	f640 537c 	movw	r3, #3452	; 0xd7c
    ccb0:	f017 ffa4 	bl	24bfc <printk>
    ccb4:	4040      	eors	r0, r0
    ccb6:	f380 8811 	msr	BASEPRI, r0
    ccba:	f04f 0003 	mov.w	r0, #3
    ccbe:	df02      	svc	2
	hci_event_prio(buf);
    ccc0:	4620      	mov	r0, r4
    ccc2:	f7ff fed3 	bl	ca6c <hci_event_prio>
}
    ccc6:	2000      	movs	r0, #0
    ccc8:	bd10      	pop	{r4, pc}
    ccca:	bf00      	nop
    cccc:	00030334 	.word	0x00030334
    ccd0:	0003063b 	.word	0x0003063b
    ccd4:	00030371 	.word	0x00030371

0000ccd8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    ccd8:	4a08      	ldr	r2, [pc, #32]	; (ccfc <bt_hci_driver_register+0x24>)
{
    ccda:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    ccdc:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
    cce0:	b930      	cbnz	r0, ccf0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    cce2:	68d9      	ldr	r1, [r3, #12]
    cce4:	b139      	cbz	r1, ccf6 <bt_hci_driver_register+0x1e>
    cce6:	6919      	ldr	r1, [r3, #16]
    cce8:	b129      	cbz	r1, ccf6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    ccea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
    ccee:	4770      	bx	lr
		return -EALREADY;
    ccf0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ccf4:	4770      	bx	lr
		return -EINVAL;
    ccf6:	f06f 0015 	mvn.w	r0, #21
}
    ccfa:	4770      	bx	lr
    ccfc:	20000000 	.word	0x20000000

0000cd00 <bt_finalize_init>:
{
    cd00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cd04:	4c3b      	ldr	r4, [pc, #236]	; (cdf4 <bt_finalize_init+0xf4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    cd06:	4e3c      	ldr	r6, [pc, #240]	; (cdf8 <bt_finalize_init+0xf8>)
{
    cd08:	b087      	sub	sp, #28
    cd0a:	2102      	movs	r1, #2
    cd0c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
    cd10:	f01b fd9d 	bl	2884e <atomic_or>
		bt_le_scan_update(false);
    cd14:	2000      	movs	r0, #0
    cd16:	f000 feff 	bl	db18 <bt_le_scan_update>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    cd1a:	6833      	ldr	r3, [r6, #0]
    cd1c:	f003 0307 	and.w	r3, r3, #7
    cd20:	2b02      	cmp	r3, #2
    cd22:	d913      	bls.n	cd4c <bt_finalize_init+0x4c>
    cd24:	79e2      	ldrb	r2, [r4, #7]
    cd26:	4b35      	ldr	r3, [pc, #212]	; (cdfc <bt_finalize_init+0xfc>)
    cd28:	4d35      	ldr	r5, [pc, #212]	; (ce00 <bt_finalize_init+0x100>)
    cd2a:	4620      	mov	r0, r4
    cd2c:	2a01      	cmp	r2, #1
    cd2e:	bf98      	it	ls
    cd30:	461d      	movls	r5, r3
    cd32:	f7fe fa57 	bl	b1e4 <bt_addr_le_str_real>
    cd36:	4b33      	ldr	r3, [pc, #204]	; (ce04 <bt_finalize_init+0x104>)
    cd38:	9301      	str	r3, [sp, #4]
    cd3a:	2300      	movs	r3, #0
    cd3c:	e9cd 5002 	strd	r5, r0, [sp, #8]
    cd40:	9300      	str	r3, [sp, #0]
    cd42:	2203      	movs	r2, #3
    cd44:	4631      	mov	r1, r6
    cd46:	4618      	mov	r0, r3
    cd48:	f01b fd93 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
		BT_INFO("Identity[%d]: %s",
    cd4c:	4f2e      	ldr	r7, [pc, #184]	; (ce08 <bt_finalize_init+0x108>)
    cd4e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; cdf8 <bt_finalize_init+0xf8>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    cd52:	2501      	movs	r5, #1
		BT_INFO("Identity[%d]: %s",
    cd54:	f04f 0800 	mov.w	r8, #0
	for (i = 1; i < bt_dev.id_count; i++) {
    cd58:	79e2      	ldrb	r2, [r4, #7]
		BT_INFO("Identity[%d]: %s",
    cd5a:	6833      	ldr	r3, [r6, #0]
	for (i = 1; i < bt_dev.id_count; i++) {
    cd5c:	4295      	cmp	r5, r2
		BT_INFO("Identity[%d]: %s",
    cd5e:	f003 0307 	and.w	r3, r3, #7
	for (i = 1; i < bt_dev.id_count; i++) {
    cd62:	db33      	blt.n	cdcc <bt_finalize_init+0xcc>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    cd64:	2b02      	cmp	r3, #2
    cd66:	d92e      	bls.n	cdc6 <bt_finalize_init+0xc6>
    cd68:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
    cd6c:	4628      	mov	r0, r5
    cd6e:	f7fe fcd7 	bl	b720 <ver_str>
    cd72:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    cd76:	9305      	str	r3, [sp, #20]
    cd78:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    cd7c:	9002      	str	r0, [sp, #8]
    cd7e:	e9cd 5303 	strd	r5, r3, [sp, #12]
    cd82:	2500      	movs	r5, #0
    cd84:	4b21      	ldr	r3, [pc, #132]	; (ce0c <bt_finalize_init+0x10c>)
    cd86:	9301      	str	r3, [sp, #4]
    cd88:	491b      	ldr	r1, [pc, #108]	; (cdf8 <bt_finalize_init+0xf8>)
    cd8a:	9500      	str	r5, [sp, #0]
    cd8c:	462b      	mov	r3, r5
    cd8e:	2203      	movs	r2, #3
    cd90:	4628      	mov	r0, r5
    cd92:	f01b fd6e 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    cd96:	6833      	ldr	r3, [r6, #0]
    cd98:	f003 0307 	and.w	r3, r3, #7
    cd9c:	2b02      	cmp	r3, #2
    cd9e:	d912      	bls.n	cdc6 <bt_finalize_init+0xc6>
    cda0:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
    cda4:	4630      	mov	r0, r6
    cda6:	f7fe fcbb 	bl	b720 <ver_str>
    cdaa:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    cdae:	9002      	str	r0, [sp, #8]
    cdb0:	e9cd 6303 	strd	r6, r3, [sp, #12]
    cdb4:	4b16      	ldr	r3, [pc, #88]	; (ce10 <bt_finalize_init+0x110>)
    cdb6:	4910      	ldr	r1, [pc, #64]	; (cdf8 <bt_finalize_init+0xf8>)
    cdb8:	e9cd 5300 	strd	r5, r3, [sp]
    cdbc:	2203      	movs	r2, #3
    cdbe:	462b      	mov	r3, r5
    cdc0:	4628      	mov	r0, r5
    cdc2:	f01b fd56 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
}
    cdc6:	b007      	add	sp, #28
    cdc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    cdcc:	2b02      	cmp	r3, #2
    cdce:	d90e      	bls.n	cdee <bt_finalize_init+0xee>
    cdd0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    cdd4:	4420      	add	r0, r4
    cdd6:	f7fe fa05 	bl	b1e4 <bt_addr_le_str_real>
    cdda:	2300      	movs	r3, #0
    cddc:	e9cd 5002 	strd	r5, r0, [sp, #8]
    cde0:	e9cd 8700 	strd	r8, r7, [sp]
    cde4:	2203      	movs	r2, #3
    cde6:	4649      	mov	r1, r9
    cde8:	4618      	mov	r0, r3
    cdea:	f01b fd42 	bl	28872 <z_log_msg2_runtime_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
    cdee:	3501      	adds	r5, #1
    cdf0:	e7b2      	b.n	cd58 <bt_finalize_init+0x58>
    cdf2:	bf00      	nop
    cdf4:	20000000 	.word	0x20000000
    cdf8:	200009fc 	.word	0x200009fc
    cdfc:	0002eae4 	.word	0x0002eae4
    ce00:	0003065e 	.word	0x0003065e
    ce04:	00030662 	.word	0x00030662
    ce08:	00030671 	.word	0x00030671
    ce0c:	00030682 	.word	0x00030682
    ce10:	000306c0 	.word	0x000306c0

0000ce14 <init_work>:

static void init_work(struct k_work *work)
{
    ce14:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    ce16:	f7f4 fae3 	bl	13e0 <bt_init>
	if (ready_cb) {
    ce1a:	4b03      	ldr	r3, [pc, #12]	; (ce28 <init_work+0x14>)
    ce1c:	681b      	ldr	r3, [r3, #0]
    ce1e:	b113      	cbz	r3, ce26 <init_work+0x12>
		ready_cb(err);
	}
}
    ce20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    ce24:	4718      	bx	r3
}
    ce26:	bd10      	pop	{r4, pc}
    ce28:	20002a4c 	.word	0x20002a4c

0000ce2c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    ce2c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    ce2e:	4d2f      	ldr	r5, [pc, #188]	; (ceec <bt_enable+0xc0>)
    ce30:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
    ce34:	b090      	sub	sp, #64	; 0x40
    ce36:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    ce38:	b983      	cbnz	r3, ce5c <bt_enable+0x30>
		BT_ERR("No HCI driver registered");
    ce3a:	482d      	ldr	r0, [pc, #180]	; (cef0 <bt_enable+0xc4>)
    ce3c:	6803      	ldr	r3, [r0, #0]
    ce3e:	075a      	lsls	r2, r3, #29
    ce40:	d009      	beq.n	ce56 <bt_enable+0x2a>
    ce42:	4b2c      	ldr	r3, [pc, #176]	; (cef4 <bt_enable+0xc8>)
    ce44:	930e      	str	r3, [sp, #56]	; 0x38
    ce46:	aa0d      	add	r2, sp, #52	; 0x34
    ce48:	2302      	movs	r3, #2
    ce4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ce4e:	9309      	str	r3, [sp, #36]	; 0x24
    ce50:	930d      	str	r3, [sp, #52]	; 0x34
    ce52:	f01b fd0b 	bl	2886c <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    ce56:	f06f 0412 	mvn.w	r4, #18
    ce5a:	e036      	b.n	ceca <bt_enable+0x9e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ce5c:	2101      	movs	r1, #1
    ce5e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    ce62:	f01b fcf4 	bl	2884e <atomic_or>
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    ce66:	ea10 0301 	ands.w	r3, r0, r1
    ce6a:	d13c      	bne.n	cee6 <bt_enable+0xba>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    ce6c:	4a22      	ldr	r2, [pc, #136]	; (cef8 <bt_enable+0xcc>)
    ce6e:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ce70:	2000      	movs	r0, #0
    ce72:	2100      	movs	r1, #0
    ce74:	f06f 0208 	mvn.w	r2, #8
    ce78:	e9cd 0106 	strd	r0, r1, [sp, #24]
    ce7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    ce80:	e9cd 3300 	strd	r3, r3, [sp]
    ce84:	9304      	str	r3, [sp, #16]
    ce86:	491d      	ldr	r1, [pc, #116]	; (cefc <bt_enable+0xd0>)
    ce88:	4b1d      	ldr	r3, [pc, #116]	; (cf00 <bt_enable+0xd4>)
    ce8a:	481e      	ldr	r0, [pc, #120]	; (cf04 <bt_enable+0xd8>)
    ce8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ce90:	f016 fc80 	bl	23794 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ce94:	491c      	ldr	r1, [pc, #112]	; (cf08 <bt_enable+0xdc>)
    ce96:	481b      	ldr	r0, [pc, #108]	; (cf04 <bt_enable+0xd8>)
    ce98:	f016 fbca 	bl	23630 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
    ce9c:	f7fe fb92 	bl	b5c4 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
    cea0:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    cea4:	68db      	ldr	r3, [r3, #12]
    cea6:	4798      	blx	r3
	if (err) {
    cea8:	4604      	mov	r4, r0
    ceaa:	b188      	cbz	r0, ced0 <bt_enable+0xa4>
		BT_ERR("HCI driver open failed (%d)", err);
    ceac:	4810      	ldr	r0, [pc, #64]	; (cef0 <bt_enable+0xc4>)
    ceae:	6803      	ldr	r3, [r0, #0]
    ceb0:	075b      	lsls	r3, r3, #29
    ceb2:	d00a      	beq.n	ceca <bt_enable+0x9e>
    ceb4:	4b15      	ldr	r3, [pc, #84]	; (cf0c <bt_enable+0xe0>)
    ceb6:	aa0d      	add	r2, sp, #52	; 0x34
    ceb8:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    cebc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cec0:	2303      	movs	r3, #3
    cec2:	9309      	str	r3, [sp, #36]	; 0x24
    cec4:	930d      	str	r3, [sp, #52]	; 0x34
    cec6:	f01b fcd1 	bl	2886c <z_log_msg2_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    ceca:	4620      	mov	r0, r4
    cecc:	b010      	add	sp, #64	; 0x40
    cece:	bd70      	pop	{r4, r5, r6, pc}
	if (!cb) {
    ced0:	b926      	cbnz	r6, cedc <bt_enable+0xb0>
}
    ced2:	b010      	add	sp, #64	; 0x40
    ced4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    ced8:	f7f4 ba82 	b.w	13e0 <bt_init>
	k_work_submit(&bt_dev.init);
    cedc:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    cee0:	f016 ff58 	bl	23d94 <k_work_submit>
	return 0;
    cee4:	e7f1      	b.n	ceca <bt_enable+0x9e>
		return -EALREADY;
    cee6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ceea:	e7ee      	b.n	ceca <bt_enable+0x9e>
    ceec:	20000000 	.word	0x20000000
    cef0:	200009fc 	.word	0x200009fc
    cef4:	00030802 	.word	0x00030802
    cef8:	20002a4c 	.word	0x20002a4c
    cefc:	20006e00 	.word	0x20006e00
    cf00:	0000bbc5 	.word	0x0000bbc5
    cf04:	20001810 	.word	0x20001810
    cf08:	0003081b 	.word	0x0003081b
    cf0c:	00030821 	.word	0x00030821

0000cf10 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    cf10:	4800      	ldr	r0, [pc, #0]	; (cf14 <bt_get_name+0x4>)
    cf12:	4770      	bx	lr
    cf14:	0003083d 	.word	0x0003083d

0000cf18 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
    cf18:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf1a:	4604      	mov	r4, r0
    cf1c:	b089      	sub	sp, #36	; 0x24
    cf1e:	460e      	mov	r6, r1
    cf20:	4617      	mov	r7, r2
	while (ad->len > 1) {
    cf22:	88a3      	ldrh	r3, [r4, #4]
    cf24:	2b01      	cmp	r3, #1
    cf26:	d917      	bls.n	cf58 <bt_data_parse+0x40>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
    cf28:	4620      	mov	r0, r4
    cf2a:	f01d fd97 	bl	2aa5c <net_buf_simple_pull_u8>
		if (len == 0U) {
    cf2e:	4605      	mov	r5, r0
    cf30:	b190      	cbz	r0, cf58 <bt_data_parse+0x40>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
    cf32:	88a2      	ldrh	r2, [r4, #4]
    cf34:	b283      	uxth	r3, r0
    cf36:	429a      	cmp	r2, r3
    cf38:	d210      	bcs.n	cf5c <bt_data_parse+0x44>
			BT_WARN("Malformed data");
    cf3a:	4812      	ldr	r0, [pc, #72]	; (cf84 <bt_data_parse+0x6c>)
    cf3c:	6803      	ldr	r3, [r0, #0]
    cf3e:	f013 0f06 	tst.w	r3, #6
    cf42:	d009      	beq.n	cf58 <bt_data_parse+0x40>
    cf44:	4b10      	ldr	r3, [pc, #64]	; (cf88 <bt_data_parse+0x70>)
    cf46:	9306      	str	r3, [sp, #24]
    cf48:	aa05      	add	r2, sp, #20
    cf4a:	2302      	movs	r3, #2
    cf4c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    cf50:	9301      	str	r3, [sp, #4]
    cf52:	9305      	str	r3, [sp, #20]
    cf54:	f01b fc8a 	bl	2886c <z_log_msg2_static_create.constprop.0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
    cf58:	b009      	add	sp, #36	; 0x24
    cf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    cf5c:	4620      	mov	r0, r4
    cf5e:	f01d fd7d 	bl	2aa5c <net_buf_simple_pull_u8>
		data.data_len = len - 1;
    cf62:	3d01      	subs	r5, #1
		data.data = ad->data;
    cf64:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    cf66:	f88d 0008 	strb.w	r0, [sp, #8]
		if (!func(&data, user_data)) {
    cf6a:	4639      	mov	r1, r7
    cf6c:	a802      	add	r0, sp, #8
		data.data_len = len - 1;
    cf6e:	f88d 5009 	strb.w	r5, [sp, #9]
		data.data = ad->data;
    cf72:	9303      	str	r3, [sp, #12]
		if (!func(&data, user_data)) {
    cf74:	47b0      	blx	r6
    cf76:	2800      	cmp	r0, #0
    cf78:	d0ee      	beq.n	cf58 <bt_data_parse+0x40>
		net_buf_simple_pull(ad, len - 1);
    cf7a:	4629      	mov	r1, r5
    cf7c:	4620      	mov	r0, r4
    cf7e:	f01d fd5d 	bl	2aa3c <net_buf_simple_pull>
    cf82:	e7ce      	b.n	cf22 <bt_data_parse+0xa>
    cf84:	200009fc 	.word	0x200009fc
    cf88:	00030865 	.word	0x00030865

0000cf8c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    cf8e:	4f0b      	ldr	r7, [pc, #44]	; (cfbc <id_find+0x30>)
{
    cf90:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    cf92:	2500      	movs	r5, #0
    cf94:	79fb      	ldrb	r3, [r7, #7]
    cf96:	b2ec      	uxtb	r4, r5
    cf98:	42a3      	cmp	r3, r4
    cf9a:	d802      	bhi.n	cfa2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    cf9c:	f06f 0401 	mvn.w	r4, #1
    cfa0:	e009      	b.n	cfb6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    cfa2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    cfa6:	2207      	movs	r2, #7
    cfa8:	4439      	add	r1, r7
    cfaa:	4630      	mov	r0, r6
    cfac:	f01b fada 	bl	28564 <memcmp>
    cfb0:	3501      	adds	r5, #1
    cfb2:	2800      	cmp	r0, #0
    cfb4:	d1ee      	bne.n	cf94 <id_find+0x8>
}
    cfb6:	4620      	mov	r0, r4
    cfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfba:	bf00      	nop
    cfbc:	20000000 	.word	0x20000000

0000cfc0 <le_rpa_invalidate>:
    cfc0:	4b06      	ldr	r3, [pc, #24]	; (cfdc <le_rpa_invalidate+0x1c>)
    cfc2:	f3bf 8f5b 	dmb	ish
    cfc6:	e853 2f00 	ldrex	r2, [r3]
    cfca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    cfce:	e843 2100 	strex	r1, r2, [r3]
    cfd2:	2900      	cmp	r1, #0
    cfd4:	d1f7      	bne.n	cfc6 <le_rpa_invalidate+0x6>
    cfd6:	f3bf 8f5b 	dmb	ish
}
    cfda:	4770      	bx	lr
    cfdc:	200000cc 	.word	0x200000cc

0000cfe0 <hci_id_add>:
{
    cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfe4:	4605      	mov	r5, r0
    cfe6:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    cfe8:	f242 0027 	movw	r0, #8231	; 0x2027
    cfec:	2127      	movs	r1, #39	; 0x27
{
    cfee:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    cff0:	f7fe ff9c 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    cff4:	4604      	mov	r4, r0
    cff6:	b1f8      	cbz	r0, d038 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
    cff8:	2127      	movs	r1, #39	; 0x27
    cffa:	3008      	adds	r0, #8
    cffc:	f01d fcf5 	bl	2a9ea <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    d000:	4641      	mov	r1, r8
    d002:	4606      	mov	r6, r0
    d004:	f01b fd19 	bl	28a3a <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    d008:	4639      	mov	r1, r7
    d00a:	2210      	movs	r2, #16
    d00c:	1df0      	adds	r0, r6, #7
    d00e:	f01b fad2 	bl	285b6 <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
    d012:	2210      	movs	r2, #16
    d014:	f44f 71ac 	mov.w	r1, #344	; 0x158
    d018:	fb12 1505 	smlabb	r5, r2, r5, r1
    d01c:	4908      	ldr	r1, [pc, #32]	; (d040 <hci_id_add+0x60>)
    d01e:	f106 0017 	add.w	r0, r6, #23
    d022:	4429      	add	r1, r5
    d024:	f01b fac7 	bl	285b6 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    d028:	4621      	mov	r1, r4
    d02a:	2200      	movs	r2, #0
}
    d02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    d030:	f242 0027 	movw	r0, #8231	; 0x2027
    d034:	f7ff b8ea 	b.w	c20c <bt_hci_cmd_send_sync>
}
    d038:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d040:	20000000 	.word	0x20000000

0000d044 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d044:	4b03      	ldr	r3, [pc, #12]	; (d054 <atomic_get.constprop.0+0x10>)
    d046:	f3bf 8f5b 	dmb	ish
    d04a:	6818      	ldr	r0, [r3, #0]
    d04c:	f3bf 8f5b 	dmb	ish
}
    d050:	4770      	bx	lr
    d052:	bf00      	nop
    d054:	200000cc 	.word	0x200000cc

0000d058 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
    d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    d05c:	2100      	movs	r1, #0
    d05e:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
    d060:	b088      	sub	sp, #32
    d062:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    d064:	4608      	mov	r0, r1
    d066:	f001 fd5b 	bl	eb20 <bt_conn_lookup_state_le>
	if (conn) {
    d06a:	4602      	mov	r2, r0
    d06c:	b1a8      	cbz	r0, d09a <bt_id_add.part.0+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d06e:	f3bf 8f5b 	dmb	ish
    d072:	4b62      	ldr	r3, [pc, #392]	; (d1fc <bt_id_add.part.0+0x1a4>)
    d074:	e853 2f00 	ldrex	r2, [r3]
    d078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d07c:	e843 2100 	strex	r1, r2, [r3]
    d080:	2900      	cmp	r1, #0
    d082:	d1f7      	bne.n	d074 <bt_id_add.part.0+0x1c>
    d084:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    d088:	7a23      	ldrb	r3, [r4, #8]
    d08a:	f043 0301 	orr.w	r3, r3, #1
    d08e:	7223      	strb	r3, [r4, #8]
}
    d090:	b008      	add	sp, #32
    d092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    d096:	f01b bdfd 	b.w	28c94 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d09a:	f7ff ffd3 	bl	d044 <atomic_get.constprop.0>
	if (scan_enabled) {
    d09e:	0685      	lsls	r5, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d0a0:	f3c0 1740 	ubfx	r7, r0, #5, #1
    d0a4:	d502      	bpl.n	d0ac <bt_id_add.part.0+0x54>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    d0a6:	4610      	mov	r0, r2
    d0a8:	f01b fd37 	bl	28b1a <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
    d0ac:	4d54      	ldr	r5, [pc, #336]	; (d200 <bt_id_add.part.0+0x1a8>)
    d0ae:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    d0b2:	b18b      	cbz	r3, d0d8 <bt_id_add.part.0+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    d0b4:	2000      	movs	r0, #0
    d0b6:	f01b fcd1 	bl	28a5c <addr_res_enable>
		if (err) {
    d0ba:	b168      	cbz	r0, d0d8 <bt_id_add.part.0+0x80>
			BT_WARN("Failed to disable address resolution");
    d0bc:	4851      	ldr	r0, [pc, #324]	; (d204 <bt_id_add.part.0+0x1ac>)
    d0be:	6803      	ldr	r3, [r0, #0]
    d0c0:	f013 0f06 	tst.w	r3, #6
    d0c4:	d03d      	beq.n	d142 <bt_id_add.part.0+0xea>
    d0c6:	4b50      	ldr	r3, [pc, #320]	; (d208 <bt_id_add.part.0+0x1b0>)
		BT_WARN("Set privacy mode command is not supported");
    d0c8:	9306      	str	r3, [sp, #24]
    d0ca:	2302      	movs	r3, #2
    d0cc:	9301      	str	r3, [sp, #4]
    d0ce:	9305      	str	r3, [sp, #20]
    d0d0:	aa05      	add	r2, sp, #20
    d0d2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d0d6:	e028      	b.n	d12a <bt_id_add.part.0+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    d0d8:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    d0dc:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    d0e0:	429a      	cmp	r2, r3
    d0e2:	d139      	bne.n	d158 <bt_id_add.part.0+0x100>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    d0e4:	4e47      	ldr	r6, [pc, #284]	; (d204 <bt_id_add.part.0+0x1ac>)
    d0e6:	6833      	ldr	r3, [r6, #0]
    d0e8:	f013 0f06 	tst.w	r3, #6
    d0ec:	d00a      	beq.n	d104 <bt_id_add.part.0+0xac>
    d0ee:	4b47      	ldr	r3, [pc, #284]	; (d20c <bt_id_add.part.0+0x1b4>)
    d0f0:	9306      	str	r3, [sp, #24]
    d0f2:	aa05      	add	r2, sp, #20
    d0f4:	2302      	movs	r3, #2
    d0f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d0fa:	4630      	mov	r0, r6
    d0fc:	9301      	str	r3, [sp, #4]
    d0fe:	9305      	str	r3, [sp, #20]
    d100:	f01b fca9 	bl	28a56 <z_log_msg2_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    d104:	2200      	movs	r2, #0
    d106:	4611      	mov	r1, r2
    d108:	f242 0029 	movw	r0, #8233	; 0x2029
    d10c:	f7ff f87e 	bl	c20c <bt_hci_cmd_send_sync>
		if (err) {
    d110:	b170      	cbz	r0, d130 <bt_id_add.part.0+0xd8>
			BT_ERR("Failed to clear resolution list");
    d112:	6833      	ldr	r3, [r6, #0]
    d114:	0758      	lsls	r0, r3, #29
    d116:	d014      	beq.n	d142 <bt_id_add.part.0+0xea>
    d118:	4b3d      	ldr	r3, [pc, #244]	; (d210 <bt_id_add.part.0+0x1b8>)
    d11a:	9306      	str	r3, [sp, #24]
    d11c:	4839      	ldr	r0, [pc, #228]	; (d204 <bt_id_add.part.0+0x1ac>)
    d11e:	2302      	movs	r3, #2
    d120:	9301      	str	r3, [sp, #4]
    d122:	9305      	str	r3, [sp, #20]
    d124:	aa05      	add	r2, sp, #20
    d126:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Failed to set privacy mode");
    d12a:	f01b fc94 	bl	28a56 <z_log_msg2_static_create.constprop.0>
    d12e:	e008      	b.n	d142 <bt_id_add.part.0+0xea>
		bt_dev.le.rl_entries++;
    d130:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    d134:	3301      	adds	r3, #1
    d136:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    d13a:	7a23      	ldrb	r3, [r4, #8]
    d13c:	f043 0304 	orr.w	r3, r3, #4
    d140:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    d142:	2001      	movs	r0, #1
    d144:	f01b fc8a 	bl	28a5c <addr_res_enable>
	if (scan_enabled) {
    d148:	2f00      	cmp	r7, #0
    d14a:	d053      	beq.n	d1f4 <bt_id_add.part.0+0x19c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    d14c:	2001      	movs	r0, #1
}
    d14e:	b008      	add	sp, #32
    d150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    d154:	f01b bce1 	b.w	28b1a <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    d158:	4622      	mov	r2, r4
    d15a:	f104 0801 	add.w	r8, r4, #1
    d15e:	f812 0b2a 	ldrb.w	r0, [r2], #42
    d162:	4641      	mov	r1, r8
    d164:	f7ff ff3c 	bl	cfe0 <hci_id_add>
	if (err) {
    d168:	4606      	mov	r6, r0
    d16a:	b160      	cbz	r0, d186 <bt_id_add.part.0+0x12e>
		BT_ERR("Failed to add IRK to controller");
    d16c:	4825      	ldr	r0, [pc, #148]	; (d204 <bt_id_add.part.0+0x1ac>)
    d16e:	6803      	ldr	r3, [r0, #0]
    d170:	0759      	lsls	r1, r3, #29
    d172:	d0e6      	beq.n	d142 <bt_id_add.part.0+0xea>
    d174:	4b27      	ldr	r3, [pc, #156]	; (d214 <bt_id_add.part.0+0x1bc>)
		BT_ERR("Failed to set privacy mode");
    d176:	9306      	str	r3, [sp, #24]
    d178:	2302      	movs	r3, #2
    d17a:	9301      	str	r3, [sp, #4]
    d17c:	9305      	str	r3, [sp, #20]
    d17e:	aa05      	add	r2, sp, #20
    d180:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d184:	e7d1      	b.n	d12a <bt_id_add.part.0+0xd2>
	bt_dev.le.rl_entries++;
    d186:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    d18a:	3301      	adds	r3, #1
    d18c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
    d190:	7a23      	ldrb	r3, [r4, #8]
    d192:	f043 0304 	orr.w	r3, r3, #4
    d196:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    d198:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    d19c:	075a      	lsls	r2, r3, #29
    d19e:	d406      	bmi.n	d1ae <bt_id_add.part.0+0x156>
		BT_WARN("Set privacy mode command is not supported");
    d1a0:	4818      	ldr	r0, [pc, #96]	; (d204 <bt_id_add.part.0+0x1ac>)
    d1a2:	6803      	ldr	r3, [r0, #0]
    d1a4:	f013 0f06 	tst.w	r3, #6
    d1a8:	d0cb      	beq.n	d142 <bt_id_add.part.0+0xea>
    d1aa:	4b1b      	ldr	r3, [pc, #108]	; (d218 <bt_id_add.part.0+0x1c0>)
    d1ac:	e78c      	b.n	d0c8 <bt_id_add.part.0+0x70>
	bt_addr_le_copy(&cp.id_addr, addr);
    d1ae:	4641      	mov	r1, r8
    d1b0:	a802      	add	r0, sp, #8
    d1b2:	f01b fc42 	bl	28a3a <bt_addr_le_copy>
	cp.mode = mode;
    d1b6:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    d1b8:	2108      	movs	r1, #8
    d1ba:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    d1be:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    d1c2:	f7fe feb3 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    d1c6:	4604      	mov	r4, r0
    d1c8:	b928      	cbnz	r0, d1d6 <bt_id_add.part.0+0x17e>
		BT_ERR("Failed to set privacy mode");
    d1ca:	480e      	ldr	r0, [pc, #56]	; (d204 <bt_id_add.part.0+0x1ac>)
    d1cc:	6803      	ldr	r3, [r0, #0]
    d1ce:	075b      	lsls	r3, r3, #29
    d1d0:	d0b7      	beq.n	d142 <bt_id_add.part.0+0xea>
    d1d2:	4b12      	ldr	r3, [pc, #72]	; (d21c <bt_id_add.part.0+0x1c4>)
    d1d4:	e7cf      	b.n	d176 <bt_id_add.part.0+0x11e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d1d6:	2208      	movs	r2, #8
    d1d8:	eb0d 0102 	add.w	r1, sp, r2
    d1dc:	4410      	add	r0, r2
    d1de:	f01d fc0a 	bl	2a9f6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    d1e2:	4632      	mov	r2, r6
    d1e4:	4621      	mov	r1, r4
    d1e6:	f242 004e 	movw	r0, #8270	; 0x204e
    d1ea:	f7ff f80f 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    d1ee:	2800      	cmp	r0, #0
    d1f0:	d0a7      	beq.n	d142 <bt_id_add.part.0+0xea>
    d1f2:	e7ea      	b.n	d1ca <bt_id_add.part.0+0x172>
}
    d1f4:	b008      	add	sp, #32
    d1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1fa:	bf00      	nop
    d1fc:	200000cc 	.word	0x200000cc
    d200:	20000000 	.word	0x20000000
    d204:	20000a04 	.word	0x20000a04
    d208:	0003089e 	.word	0x0003089e
    d20c:	000308c3 	.word	0x000308c3
    d210:	000308f4 	.word	0x000308f4
    d214:	00030914 	.word	0x00030914
    d218:	00030934 	.word	0x00030934
    d21c:	0003095e 	.word	0x0003095e

0000d220 <set_random_address>:
{
    d220:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    d222:	4914      	ldr	r1, [pc, #80]	; (d274 <set_random_address+0x54>)
    d224:	2206      	movs	r2, #6
    d226:	4605      	mov	r5, r0
    d228:	f01b f99c 	bl	28564 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    d22c:	4604      	mov	r4, r0
    d22e:	b1e0      	cbz	r0, d26a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    d230:	2106      	movs	r1, #6
    d232:	f242 0005 	movw	r0, #8197	; 0x2005
    d236:	f7fe fe79 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    d23a:	4604      	mov	r4, r0
    d23c:	b1b8      	cbz	r0, d26e <set_random_address+0x4e>
    d23e:	2206      	movs	r2, #6
    d240:	4629      	mov	r1, r5
    d242:	3008      	adds	r0, #8
    d244:	f01d fbd7 	bl	2a9f6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    d248:	4621      	mov	r1, r4
    d24a:	2200      	movs	r2, #0
    d24c:	f242 0005 	movw	r0, #8197	; 0x2005
    d250:	f7fe ffdc 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    d254:	4604      	mov	r4, r0
    d256:	b940      	cbnz	r0, d26a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    d258:	2206      	movs	r2, #6
    d25a:	4806      	ldr	r0, [pc, #24]	; (d274 <set_random_address+0x54>)
    d25c:	4629      	mov	r1, r5
    d25e:	f01b f9aa 	bl	285b6 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    d262:	4b05      	ldr	r3, [pc, #20]	; (d278 <set_random_address+0x58>)
    d264:	2201      	movs	r2, #1
    d266:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    d26a:	4620      	mov	r0, r4
    d26c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    d26e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    d272:	e7fa      	b.n	d26a <set_random_address+0x4a>
    d274:	20000061 	.word	0x20000061
    d278:	20000000 	.word	0x20000000

0000d27c <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
    d27c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d27e:	4604      	mov	r4, r0
    d280:	b087      	sub	sp, #28
    d282:	4615      	mov	r5, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    d284:	460e      	mov	r6, r1
    d286:	b359      	cbz	r1, d2e0 <id_create+0x64>
    d288:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    d28a:	2207      	movs	r2, #7
    d28c:	4669      	mov	r1, sp
    d28e:	4630      	mov	r0, r6
    d290:	9300      	str	r3, [sp, #0]
    d292:	f8cd 3003 	str.w	r3, [sp, #3]
    d296:	f01b f965 	bl	28564 <memcmp>
    d29a:	b308      	cbz	r0, d2e0 <id_create+0x64>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    d29c:	4822      	ldr	r0, [pc, #136]	; (d328 <id_create+0xac>)
    d29e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    d2a2:	4631      	mov	r1, r6
    d2a4:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    d2a6:	f01b fbc8 	bl	28a3a <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
    d2aa:	f44f 70ac 	mov.w	r0, #344	; 0x158
    d2ae:	2610      	movs	r6, #16
    d2b0:	fb16 0404 	smlabb	r4, r6, r4, r0
    d2b4:	481c      	ldr	r0, [pc, #112]	; (d328 <id_create+0xac>)
		uint8_t zero_irk[16] = { 0 };
    d2b6:	2300      	movs	r3, #0
    d2b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    d2bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
    d2c0:	4404      	add	r4, r0
		if (irk && memcmp(irk, zero_irk, 16)) {
    d2c2:	b325      	cbz	r5, d30e <id_create+0x92>
    d2c4:	4632      	mov	r2, r6
    d2c6:	a902      	add	r1, sp, #8
    d2c8:	4628      	mov	r0, r5
    d2ca:	f01b f94b 	bl	28564 <memcmp>
    d2ce:	b1f0      	cbz	r0, d30e <id_create+0x92>
			memcpy(&bt_dev.irk[id], irk, 16);
    d2d0:	4632      	mov	r2, r6
    d2d2:	4629      	mov	r1, r5
    d2d4:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
    d2d6:	f01b f96e 	bl	285b6 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    d2da:	2000      	movs	r0, #0
}
    d2dc:	b007      	add	sp, #28
    d2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_addr_le_create_static(&new_addr);
    d2e0:	a802      	add	r0, sp, #8
    d2e2:	f01b fa79 	bl	287d8 <bt_addr_le_create_static>
			if (err) {
    d2e6:	2800      	cmp	r0, #0
    d2e8:	d1f8      	bne.n	d2dc <id_create+0x60>
		} while (id_find(&new_addr) >= 0);
    d2ea:	a802      	add	r0, sp, #8
    d2ec:	f7ff fe4e 	bl	cf8c <id_find>
    d2f0:	2800      	cmp	r0, #0
    d2f2:	daf5      	bge.n	d2e0 <id_create+0x64>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    d2f4:	480c      	ldr	r0, [pc, #48]	; (d328 <id_create+0xac>)
    d2f6:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    d2fa:	4407      	add	r7, r0
    d2fc:	a902      	add	r1, sp, #8
    d2fe:	4638      	mov	r0, r7
    d300:	f01b fb9b 	bl	28a3a <bt_addr_le_copy>
		if (addr) {
    d304:	2e00      	cmp	r6, #0
    d306:	d0d0      	beq.n	d2aa <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    d308:	4639      	mov	r1, r7
    d30a:	4630      	mov	r0, r6
    d30c:	e7cb      	b.n	d2a6 <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
    d30e:	2110      	movs	r1, #16
    d310:	4620      	mov	r0, r4
    d312:	f009 fa6f 	bl	167f4 <bt_rand>
			if (err) {
    d316:	2800      	cmp	r0, #0
    d318:	d1e0      	bne.n	d2dc <id_create+0x60>
			if (irk) {
    d31a:	2d00      	cmp	r5, #0
    d31c:	d0dd      	beq.n	d2da <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    d31e:	2210      	movs	r2, #16
    d320:	4621      	mov	r1, r4
    d322:	4628      	mov	r0, r5
    d324:	e7d7      	b.n	d2d6 <id_create+0x5a>
    d326:	bf00      	nop
    d328:	20000000 	.word	0x20000000

0000d32c <bt_id_set_private_addr>:
{
    d32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d32e:	4602      	mov	r2, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d330:	f7ff fe88 	bl	d044 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    d334:	04c3      	lsls	r3, r0, #19
    d336:	d425      	bmi.n	d384 <bt_id_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    d338:	f44f 73ac 	mov.w	r3, #344	; 0x158
    d33c:	4d12      	ldr	r5, [pc, #72]	; (d388 <bt_id_set_private_addr+0x5c>)
    d33e:	eb03 1002 	add.w	r0, r3, r2, lsl #4
    d342:	4669      	mov	r1, sp
    d344:	4428      	add	r0, r5
    d346:	f01b f9a5 	bl	28694 <bt_rpa_create>
	if (!err) {
    d34a:	4604      	mov	r4, r0
    d34c:	b988      	cbnz	r0, d372 <bt_id_set_private_addr+0x46>
		err = set_random_address(&rpa);
    d34e:	4668      	mov	r0, sp
    d350:	f7ff ff66 	bl	d220 <set_random_address>
		if (!err) {
    d354:	4604      	mov	r4, r0
    d356:	b960      	cbnz	r0, d372 <bt_id_set_private_addr+0x46>
    d358:	f3bf 8f5b 	dmb	ish
    d35c:	35cc      	adds	r5, #204	; 0xcc
    d35e:	e855 3f00 	ldrex	r3, [r5]
    d362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d366:	e845 3200 	strex	r2, r3, [r5]
    d36a:	2a00      	cmp	r2, #0
    d36c:	d1f7      	bne.n	d35e <bt_id_set_private_addr+0x32>
    d36e:	f3bf 8f5b 	dmb	ish
	(void)k_work_schedule(&bt_dev.rpa_update, RPA_TIMEOUT);
    d372:	4806      	ldr	r0, [pc, #24]	; (d38c <bt_id_set_private_addr+0x60>)
    d374:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    d378:	2300      	movs	r3, #0
    d37a:	f016 fd73 	bl	23e64 <k_work_schedule>
}
    d37e:	4620      	mov	r0, r4
    d380:	b003      	add	sp, #12
    d382:	bd30      	pop	{r4, r5, pc}
		return 0;
    d384:	2400      	movs	r4, #0
    d386:	e7fa      	b.n	d37e <bt_id_set_private_addr+0x52>
    d388:	20000000 	.word	0x20000000
    d38c:	20000168 	.word	0x20000168

0000d390 <le_update_private_addr>:
{
    d390:	b510      	push	{r4, lr}
    d392:	b088      	sub	sp, #32
    d394:	f7ff fe56 	bl	d044 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    d398:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d39a:	f3c0 1440 	ubfx	r4, r0, #5, #1
    d39e:	d502      	bpl.n	d3a6 <le_update_private_addr+0x16>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    d3a0:	2000      	movs	r0, #0
    d3a2:	f01b fbba 	bl	28b1a <bt_le_scan_set_enable>
	err = bt_id_set_private_addr(id);
    d3a6:	2000      	movs	r0, #0
    d3a8:	f7ff ffc0 	bl	d32c <bt_id_set_private_addr>
	if (err) {
    d3ac:	4603      	mov	r3, r0
    d3ae:	b188      	cbz	r0, d3d4 <le_update_private_addr+0x44>
		BT_WARN("Failed to update RPA address (%d)", err);
    d3b0:	480c      	ldr	r0, [pc, #48]	; (d3e4 <le_update_private_addr+0x54>)
    d3b2:	6802      	ldr	r2, [r0, #0]
    d3b4:	f012 0f06 	tst.w	r2, #6
    d3b8:	d00a      	beq.n	d3d0 <le_update_private_addr+0x40>
    d3ba:	4a0b      	ldr	r2, [pc, #44]	; (d3e8 <le_update_private_addr+0x58>)
    d3bc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d3c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d3c4:	2303      	movs	r3, #3
    d3c6:	aa05      	add	r2, sp, #20
    d3c8:	9301      	str	r3, [sp, #4]
    d3ca:	9305      	str	r3, [sp, #20]
    d3cc:	f01b fb43 	bl	28a56 <z_log_msg2_static_create.constprop.0>
}
    d3d0:	b008      	add	sp, #32
    d3d2:	bd10      	pop	{r4, pc}
	if (scan_enabled) {
    d3d4:	2c00      	cmp	r4, #0
    d3d6:	d0fb      	beq.n	d3d0 <le_update_private_addr+0x40>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    d3d8:	2001      	movs	r0, #1
}
    d3da:	b008      	add	sp, #32
    d3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    d3e0:	f01b bb9b 	b.w	28b1a <bt_le_scan_set_enable>
    d3e4:	20000a04 	.word	0x20000a04
    d3e8:	00030979 	.word	0x00030979

0000d3ec <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d3ec:	4b0a      	ldr	r3, [pc, #40]	; (d418 <bt_id_pending_keys_update+0x2c>)
    d3ee:	f3bf 8f5b 	dmb	ish
    d3f2:	e853 2f00 	ldrex	r2, [r3]
    d3f6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
    d3fa:	e843 1000 	strex	r0, r1, [r3]
    d3fe:	2800      	cmp	r0, #0
    d400:	d1f7      	bne.n	d3f2 <bt_id_pending_keys_update+0x6>
    d402:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    d406:	0493      	lsls	r3, r2, #18
    d408:	d504      	bpl.n	d414 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_ALL, pending_id_update, NULL);
    d40a:	4904      	ldr	r1, [pc, #16]	; (d41c <bt_id_pending_keys_update+0x30>)
    d40c:	2200      	movs	r2, #0
    d40e:	203f      	movs	r0, #63	; 0x3f
    d410:	f005 bf3c 	b.w	1328c <bt_keys_foreach>
}
    d414:	4770      	bx	lr
    d416:	bf00      	nop
    d418:	200000cc 	.word	0x200000cc
    d41c:	00028add 	.word	0x00028add

0000d420 <bt_id_add>:
{
    d420:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    d422:	490a      	ldr	r1, [pc, #40]	; (d44c <bt_id_add+0x2c>)
    d424:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
    d428:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
    d42c:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    d42e:	b10c      	cbz	r4, d434 <bt_id_add+0x14>
    d430:	4294      	cmp	r4, r2
    d432:	d208      	bcs.n	d446 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    d434:	3201      	adds	r2, #1
    d436:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    d43a:	7a1a      	ldrb	r2, [r3, #8]
}
    d43c:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
    d43e:	f042 0204 	orr.w	r2, r2, #4
    d442:	721a      	strb	r2, [r3, #8]
}
    d444:	4770      	bx	lr
    d446:	bc10      	pop	{r4}
    d448:	f7ff be06 	b.w	d058 <bt_id_add.part.0>
    d44c:	20000000 	.word	0x20000000

0000d450 <bt_id_del>:
{
    d450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    d454:	4c4f      	ldr	r4, [pc, #316]	; (d594 <bt_id_del+0x144>)
    d456:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    d45a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
    d45e:	b089      	sub	sp, #36	; 0x24
    d460:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    d462:	b112      	cbz	r2, d46a <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    d464:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    d466:	4293      	cmp	r3, r2
    d468:	dd09      	ble.n	d47e <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
    d46a:	3b01      	subs	r3, #1
    d46c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    d470:	7a2b      	ldrb	r3, [r5, #8]
    d472:	f023 0304 	bic.w	r3, r3, #4
    d476:	722b      	strb	r3, [r5, #8]
}
    d478:	b009      	add	sp, #36	; 0x24
    d47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    d47e:	2100      	movs	r1, #0
    d480:	2206      	movs	r2, #6
    d482:	4608      	mov	r0, r1
    d484:	f001 fb4c 	bl	eb20 <bt_conn_lookup_state_le>
	if (conn) {
    d488:	4602      	mov	r2, r0
    d48a:	b1a8      	cbz	r0, d4b8 <bt_id_del+0x68>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d48c:	f3bf 8f5b 	dmb	ish
    d490:	34cc      	adds	r4, #204	; 0xcc
    d492:	e854 3f00 	ldrex	r3, [r4]
    d496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d49a:	e844 3200 	strex	r2, r3, [r4]
    d49e:	2a00      	cmp	r2, #0
    d4a0:	d1f7      	bne.n	d492 <bt_id_del+0x42>
    d4a2:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    d4a6:	7a2b      	ldrb	r3, [r5, #8]
    d4a8:	f043 0302 	orr.w	r3, r3, #2
    d4ac:	722b      	strb	r3, [r5, #8]
}
    d4ae:	b009      	add	sp, #36	; 0x24
    d4b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    d4b4:	f01b bbee 	b.w	28c94 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d4b8:	f7ff fdc4 	bl	d044 <atomic_get.constprop.0>
	if (scan_enabled) {
    d4bc:	0681      	lsls	r1, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d4be:	f3c0 1840 	ubfx	r8, r0, #5, #1
    d4c2:	d502      	bpl.n	d4ca <bt_id_del+0x7a>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    d4c4:	4610      	mov	r0, r2
    d4c6:	f01b fb28 	bl	28b1a <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    d4ca:	2000      	movs	r0, #0
    d4cc:	f01b fac6 	bl	28a5c <addr_res_enable>
	if (err) {
    d4d0:	4606      	mov	r6, r0
    d4d2:	b178      	cbz	r0, d4f4 <bt_id_del+0xa4>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    d4d4:	4830      	ldr	r0, [pc, #192]	; (d598 <bt_id_del+0x148>)
    d4d6:	6803      	ldr	r3, [r0, #0]
    d4d8:	075a      	lsls	r2, r3, #29
    d4da:	d01d      	beq.n	d518 <bt_id_del+0xc8>
    d4dc:	4b2f      	ldr	r3, [pc, #188]	; (d59c <bt_id_del+0x14c>)
    d4de:	e9cd 3606 	strd	r3, r6, [sp, #24]
    d4e2:	2303      	movs	r3, #3
    d4e4:	9301      	str	r3, [sp, #4]
    d4e6:	9305      	str	r3, [sp, #20]
    d4e8:	aa05      	add	r2, sp, #20
    d4ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Failed to remove IRK from controller");
    d4ee:	f01b fab2 	bl	28a56 <z_log_msg2_static_create.constprop.0>
    d4f2:	e011      	b.n	d518 <bt_id_del+0xc8>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    d4f4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    d4f8:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    d4fc:	429a      	cmp	r2, r3
    d4fe:	d21a      	bcs.n	d536 <bt_id_del+0xe6>
		bt_dev.le.rl_entries--;
    d500:	3b01      	subs	r3, #1
    d502:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    d506:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
    d508:	4925      	ldr	r1, [pc, #148]	; (d5a0 <bt_id_del+0x150>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    d50a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
    d50e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    d510:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
    d512:	203f      	movs	r0, #63	; 0x3f
    d514:	f005 feba 	bl	1328c <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    d518:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    d51c:	b113      	cbz	r3, d524 <bt_id_del+0xd4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    d51e:	2001      	movs	r0, #1
    d520:	f01b fa9c 	bl	28a5c <addr_res_enable>
	if (scan_enabled) {
    d524:	f1b8 0f00 	cmp.w	r8, #0
    d528:	d0a6      	beq.n	d478 <bt_id_del+0x28>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    d52a:	2001      	movs	r0, #1
}
    d52c:	b009      	add	sp, #36	; 0x24
    d52e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    d532:	f01b baf2 	b.w	28b1a <bt_le_scan_set_enable>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    d536:	2107      	movs	r1, #7
    d538:	f242 0028 	movw	r0, #8232	; 0x2028
    d53c:	f7fe fcf6 	bl	bf2c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    d540:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
    d544:	4607      	mov	r7, r0
    d546:	b960      	cbnz	r0, d562 <bt_id_del+0x112>
		BT_ERR("Failed to remove IRK from controller");
    d548:	4813      	ldr	r0, [pc, #76]	; (d598 <bt_id_del+0x148>)
    d54a:	6803      	ldr	r3, [r0, #0]
    d54c:	075b      	lsls	r3, r3, #29
    d54e:	d0e3      	beq.n	d518 <bt_id_del+0xc8>
    d550:	4b14      	ldr	r3, [pc, #80]	; (d5a4 <bt_id_del+0x154>)
    d552:	9306      	str	r3, [sp, #24]
    d554:	2302      	movs	r3, #2
    d556:	9301      	str	r3, [sp, #4]
    d558:	9305      	str	r3, [sp, #20]
    d55a:	aa05      	add	r2, sp, #20
    d55c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d560:	e7c5      	b.n	d4ee <bt_id_del+0x9e>
	return net_buf_simple_add(&buf->b, len);
    d562:	2107      	movs	r1, #7
    d564:	3008      	adds	r0, #8
    d566:	f01d fa40 	bl	2a9ea <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    d56a:	4649      	mov	r1, r9
    d56c:	f01b fa65 	bl	28a3a <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    d570:	4632      	mov	r2, r6
    d572:	4639      	mov	r1, r7
    d574:	f242 0028 	movw	r0, #8232	; 0x2028
    d578:	f7fe fe48 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    d57c:	2800      	cmp	r0, #0
    d57e:	d1e3      	bne.n	d548 <bt_id_del+0xf8>
	bt_dev.le.rl_entries--;
    d580:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    d584:	3b01      	subs	r3, #1
    d586:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
    d58a:	7a2b      	ldrb	r3, [r5, #8]
    d58c:	f023 0304 	bic.w	r3, r3, #4
    d590:	722b      	strb	r3, [r5, #8]
    d592:	e7c1      	b.n	d518 <bt_id_del+0xc8>
    d594:	20000000 	.word	0x20000000
    d598:	20000a04 	.word	0x20000a04
    d59c:	0003099b 	.word	0x0003099b
    d5a0:	00028a41 	.word	0x00028a41
    d5a4:	000309c8 	.word	0x000309c8

0000d5a8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    d5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5aa:	460e      	mov	r6, r1
    d5ac:	b08b      	sub	sp, #44	; 0x2c
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    d5ae:	4605      	mov	r5, r0
    d5b0:	b930      	cbnz	r0, d5c0 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    d5b2:	4f2f      	ldr	r7, [pc, #188]	; (d670 <bt_id_create+0xc8>)
    d5b4:	79fb      	ldrb	r3, [r7, #7]
    d5b6:	2b01      	cmp	r3, #1
    d5b8:	d12e      	bne.n	d618 <bt_id_create+0x70>
		return -ENOMEM;
    d5ba:	f06f 000b 	mvn.w	r0, #11
    d5be:	e029      	b.n	d614 <bt_id_create+0x6c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    d5c0:	2300      	movs	r3, #0
    d5c2:	2207      	movs	r2, #7
    d5c4:	a902      	add	r1, sp, #8
    d5c6:	9302      	str	r3, [sp, #8]
    d5c8:	f8cd 300b 	str.w	r3, [sp, #11]
    d5cc:	f01a ffca 	bl	28564 <memcmp>
    d5d0:	2800      	cmp	r0, #0
    d5d2:	d0ee      	beq.n	d5b2 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    d5d4:	782b      	ldrb	r3, [r5, #0]
    d5d6:	2b01      	cmp	r3, #1
    d5d8:	d104      	bne.n	d5e4 <bt_id_create+0x3c>
    d5da:	79ab      	ldrb	r3, [r5, #6]
    d5dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d5e0:	2bc0      	cmp	r3, #192	; 0xc0
    d5e2:	d010      	beq.n	d606 <bt_id_create+0x5e>
			BT_ERR("Only static random identity address supported");
    d5e4:	4823      	ldr	r0, [pc, #140]	; (d674 <bt_id_create+0xcc>)
    d5e6:	6803      	ldr	r3, [r0, #0]
    d5e8:	075b      	lsls	r3, r3, #29
    d5ea:	d009      	beq.n	d600 <bt_id_create+0x58>
    d5ec:	4b22      	ldr	r3, [pc, #136]	; (d678 <bt_id_create+0xd0>)
    d5ee:	9308      	str	r3, [sp, #32]
    d5f0:	aa07      	add	r2, sp, #28
    d5f2:	2302      	movs	r3, #2
    d5f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d5f8:	9301      	str	r3, [sp, #4]
    d5fa:	9307      	str	r3, [sp, #28]
    d5fc:	f01b fa2b 	bl	28a56 <z_log_msg2_static_create.constprop.0>
    d600:	f06f 0015 	mvn.w	r0, #21
    d604:	e006      	b.n	d614 <bt_id_create+0x6c>
		if (id_find(addr) >= 0) {
    d606:	4628      	mov	r0, r5
    d608:	f7ff fcc0 	bl	cf8c <id_find>
    d60c:	2800      	cmp	r0, #0
    d60e:	dbd0      	blt.n	d5b2 <bt_id_create+0xa>
			return -EALREADY;
    d610:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    d614:	b00b      	add	sp, #44	; 0x2c
    d616:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d618:	f7ff fd14 	bl	d044 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    d61c:	f010 0001 	ands.w	r0, r0, #1
    d620:	d119      	bne.n	d656 <bt_id_create+0xae>
		uint8_t zero_irk[16] = { 0 };
    d622:	e9cd 0004 	strd	r0, r0, [sp, #16]
    d626:	e9cd 0006 	strd	r0, r0, [sp, #24]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    d62a:	2d00      	cmp	r5, #0
    d62c:	d0e8      	beq.n	d600 <bt_id_create+0x58>
    d62e:	9002      	str	r0, [sp, #8]
    d630:	2207      	movs	r2, #7
    d632:	f8cd 000b 	str.w	r0, [sp, #11]
    d636:	a902      	add	r1, sp, #8
    d638:	4628      	mov	r0, r5
    d63a:	f01a ff93 	bl	28564 <memcmp>
    d63e:	2800      	cmp	r0, #0
    d640:	d0de      	beq.n	d600 <bt_id_create+0x58>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    d642:	2e00      	cmp	r6, #0
    d644:	d0dc      	beq.n	d600 <bt_id_create+0x58>
		    !(irk && memcmp(irk, zero_irk, 16))) {
    d646:	2210      	movs	r2, #16
    d648:	eb0d 0102 	add.w	r1, sp, r2
    d64c:	4630      	mov	r0, r6
    d64e:	f01a ff89 	bl	28564 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    d652:	2800      	cmp	r0, #0
    d654:	d0d4      	beq.n	d600 <bt_id_create+0x58>
	new_id = bt_dev.id_count++;
    d656:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
    d658:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
    d65a:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    d65c:	4629      	mov	r1, r5
    d65e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    d660:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
    d662:	f7ff fe0b 	bl	d27c <id_create>
	new_id = bt_dev.id_count++;
    d666:	2800      	cmp	r0, #0
    d668:	bf08      	it	eq
    d66a:	4620      	moveq	r0, r4
    d66c:	e7d2      	b.n	d614 <bt_id_create+0x6c>
    d66e:	bf00      	nop
    d670:	20000000 	.word	0x20000000
    d674:	20000a04 	.word	0x20000a04
    d678:	000309ed 	.word	0x000309ed

0000d67c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    d67c:	b570      	push	{r4, r5, r6, lr}
    d67e:	b08a      	sub	sp, #40	; 0x28
    d680:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    d682:	aa01      	add	r2, sp, #4
    d684:	2100      	movs	r1, #0
    d686:	f241 0009 	movw	r0, #4105	; 0x1009
    d68a:	f7fe fdbf 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    d68e:	4604      	mov	r4, r0
    d690:	b188      	cbz	r0, d6b6 <bt_id_read_public_addr+0x3a>
		BT_WARN("Failed to read public address");
    d692:	4821      	ldr	r0, [pc, #132]	; (d718 <bt_id_read_public_addr+0x9c>)
    d694:	6803      	ldr	r3, [r0, #0]
    d696:	f013 0306 	ands.w	r3, r3, #6
    d69a:	d03b      	beq.n	d714 <bt_id_read_public_addr+0x98>
    d69c:	4b1f      	ldr	r3, [pc, #124]	; (d71c <bt_id_read_public_addr+0xa0>)
    d69e:	9308      	str	r3, [sp, #32]
    d6a0:	aa07      	add	r2, sp, #28
    d6a2:	2302      	movs	r3, #2
    d6a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d6a8:	9302      	str	r3, [sp, #8]
    d6aa:	9307      	str	r3, [sp, #28]
    d6ac:	f01b f9d3 	bl	28a56 <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    d6b0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    d6b2:	b00a      	add	sp, #40	; 0x28
    d6b4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    d6b6:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d6b8:	689d      	ldr	r5, [r3, #8]
    d6ba:	9002      	str	r0, [sp, #8]
    d6bc:	3501      	adds	r5, #1
    d6be:	f8ad 000c 	strh.w	r0, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    d6c2:	2206      	movs	r2, #6
    d6c4:	a902      	add	r1, sp, #8
    d6c6:	4628      	mov	r0, r5
    d6c8:	f01a ff4c 	bl	28564 <memcmp>
    d6cc:	b918      	cbnz	r0, d6d6 <bt_id_read_public_addr+0x5a>
		net_buf_unref(rsp);
    d6ce:	9801      	ldr	r0, [sp, #4]
    d6d0:	f011 fdcc 	bl	1f26c <net_buf_unref>
    d6d4:	e7ec      	b.n	d6b0 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    d6d6:	23ff      	movs	r3, #255	; 0xff
    d6d8:	2206      	movs	r2, #6
    d6da:	a904      	add	r1, sp, #16
    d6dc:	4628      	mov	r0, r5
    d6de:	f88d 3010 	strb.w	r3, [sp, #16]
    d6e2:	f88d 3011 	strb.w	r3, [sp, #17]
    d6e6:	f88d 3012 	strb.w	r3, [sp, #18]
    d6ea:	f88d 3013 	strb.w	r3, [sp, #19]
    d6ee:	f88d 3014 	strb.w	r3, [sp, #20]
    d6f2:	f88d 3015 	strb.w	r3, [sp, #21]
    d6f6:	f01a ff35 	bl	28564 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d6fa:	2800      	cmp	r0, #0
    d6fc:	d0e7      	beq.n	d6ce <bt_id_read_public_addr+0x52>
	memcpy(dst, src, sizeof(*dst));
    d6fe:	2206      	movs	r2, #6
    d700:	4629      	mov	r1, r5
    d702:	1c70      	adds	r0, r6, #1
    d704:	f01a ff57 	bl	285b6 <memcpy>
	net_buf_unref(rsp);
    d708:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    d70a:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    d70c:	f011 fdae 	bl	1f26c <net_buf_unref>
	return 1U;
    d710:	2001      	movs	r0, #1
    d712:	e7ce      	b.n	d6b2 <bt_id_read_public_addr+0x36>
		return 0U;
    d714:	4618      	mov	r0, r3
    d716:	e7cc      	b.n	d6b2 <bt_id_read_public_addr+0x36>
    d718:	20000a04 	.word	0x20000a04
    d71c:	00030a1b 	.word	0x00030a1b

0000d720 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    d720:	b510      	push	{r4, lr}
    d722:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    d724:	a802      	add	r0, sp, #8
    d726:	f7ff ffa9 	bl	d67c <bt_id_read_public_addr>
    d72a:	4c1f      	ldr	r4, [pc, #124]	; (d7a8 <bt_setup_public_id_addr+0x88>)
    d72c:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
    d72e:	b360      	cbz	r0, d78a <bt_setup_public_id_addr+0x6a>
	memset(ir, 0, 16);
    d730:	2210      	movs	r2, #16
    d732:	2100      	movs	r1, #0
    d734:	eb0d 0002 	add.w	r0, sp, r2
    d738:	f01a ff48 	bl	285cc <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    d73c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    d740:	079b      	lsls	r3, r3, #30
    d742:	d515      	bpl.n	d770 <bt_setup_public_id_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    d744:	466a      	mov	r2, sp
    d746:	2100      	movs	r1, #0
    d748:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    d74c:	f7fe fd5e 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    d750:	b1e8      	cbz	r0, d78e <bt_setup_public_id_addr+0x6e>
		BT_WARN("Failed to read identity root");
    d752:	4816      	ldr	r0, [pc, #88]	; (d7ac <bt_setup_public_id_addr+0x8c>)
    d754:	6803      	ldr	r3, [r0, #0]
    d756:	f013 0f06 	tst.w	r3, #6
    d75a:	d009      	beq.n	d770 <bt_setup_public_id_addr+0x50>
    d75c:	4b14      	ldr	r3, [pc, #80]	; (d7b0 <bt_setup_public_id_addr+0x90>)
    d75e:	930c      	str	r3, [sp, #48]	; 0x30
    d760:	aa0b      	add	r2, sp, #44	; 0x2c
    d762:	2302      	movs	r3, #2
    d764:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d768:	9301      	str	r3, [sp, #4]
    d76a:	930b      	str	r3, [sp, #44]	; 0x2c
    d76c:	f01b f973 	bl	28a56 <z_log_msg2_static_create.constprop.0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
    d770:	ac08      	add	r4, sp, #32
    d772:	4621      	mov	r1, r4
    d774:	a804      	add	r0, sp, #16
    d776:	f01c ff59 	bl	2a62c <bt_smp_irk_get>
		irk = ir_irk;
    d77a:	2800      	cmp	r0, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    d77c:	bf0c      	ite	eq
    d77e:	4622      	moveq	r2, r4
    d780:	2200      	movne	r2, #0
    d782:	a902      	add	r1, sp, #8
    d784:	2000      	movs	r0, #0
    d786:	f7ff fd79 	bl	d27c <id_create>
}
    d78a:	b00e      	add	sp, #56	; 0x38
    d78c:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
    d78e:	9b00      	ldr	r3, [sp, #0]
	memcpy(ir, rp->ir, 16);
    d790:	6899      	ldr	r1, [r3, #8]
    d792:	2210      	movs	r2, #16
    d794:	3101      	adds	r1, #1
    d796:	eb0d 0002 	add.w	r0, sp, r2
    d79a:	f01a ff0c 	bl	285b6 <memcpy>
	net_buf_unref(rsp);
    d79e:	9800      	ldr	r0, [sp, #0]
    d7a0:	f011 fd64 	bl	1f26c <net_buf_unref>
    d7a4:	e7e4      	b.n	d770 <bt_setup_public_id_addr+0x50>
    d7a6:	bf00      	nop
    d7a8:	20000000 	.word	0x20000000
    d7ac:	20000a04 	.word	0x20000a04
    d7b0:	00030a39 	.word	0x00030a39

0000d7b4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    d7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d7b8:	4b2a      	ldr	r3, [pc, #168]	; (d864 <bt_read_static_addr+0xb0>)
    d7ba:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    d7be:	f014 0401 	ands.w	r4, r4, #1
{
    d7c2:	b088      	sub	sp, #32
    d7c4:	4607      	mov	r7, r0
    d7c6:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d7c8:	d114      	bne.n	d7f4 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
    d7ca:	4827      	ldr	r0, [pc, #156]	; (d868 <bt_read_static_addr+0xb4>)
    d7cc:	6803      	ldr	r3, [r0, #0]
    d7ce:	f013 0f06 	tst.w	r3, #6
    d7d2:	d104      	bne.n	d7de <bt_read_static_addr+0x2a>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
		return 0;
    d7d4:	2400      	movs	r4, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    d7d6:	4620      	mov	r0, r4
    d7d8:	b008      	add	sp, #32
    d7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Read Static Addresses command not available");
    d7de:	4b23      	ldr	r3, [pc, #140]	; (d86c <bt_read_static_addr+0xb8>)
		BT_WARN("No static addresses stored in controller");
    d7e0:	9306      	str	r3, [sp, #24]
    d7e2:	aa05      	add	r2, sp, #20
    d7e4:	2302      	movs	r3, #2
    d7e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d7ea:	9301      	str	r3, [sp, #4]
    d7ec:	9305      	str	r3, [sp, #20]
    d7ee:	f01b f932 	bl	28a56 <z_log_msg2_static_create.constprop.0>
    d7f2:	e7f0      	b.n	d7d6 <bt_read_static_addr+0x22>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    d7f4:	466a      	mov	r2, sp
    d7f6:	2100      	movs	r1, #0
    d7f8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    d7fc:	f7fe fd06 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    d800:	4605      	mov	r5, r0
    d802:	b178      	cbz	r0, d824 <bt_read_static_addr+0x70>
		BT_WARN("Failed to read static addresses");
    d804:	4818      	ldr	r0, [pc, #96]	; (d868 <bt_read_static_addr+0xb4>)
    d806:	6803      	ldr	r3, [r0, #0]
    d808:	f013 0f06 	tst.w	r3, #6
    d80c:	d0e2      	beq.n	d7d4 <bt_read_static_addr+0x20>
    d80e:	4b18      	ldr	r3, [pc, #96]	; (d870 <bt_read_static_addr+0xbc>)
    d810:	9306      	str	r3, [sp, #24]
    d812:	aa05      	add	r2, sp, #20
    d814:	2302      	movs	r3, #2
    d816:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d81a:	9301      	str	r3, [sp, #4]
    d81c:	9305      	str	r3, [sp, #20]
    d81e:	f01b f91a 	bl	28a56 <z_log_msg2_static_create.constprop.0>
    d822:	e7d7      	b.n	d7d4 <bt_read_static_addr+0x20>
	rp = (void *)rsp->data;
    d824:	9b00      	ldr	r3, [sp, #0]
    d826:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    d828:	785c      	ldrb	r4, [r3, #1]
    d82a:	42b4      	cmp	r4, r6
    d82c:	bf28      	it	cs
    d82e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    d830:	f04f 0816 	mov.w	r8, #22
    d834:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    d836:	42ac      	cmp	r4, r5
    d838:	dc0b      	bgt.n	d852 <bt_read_static_addr+0x9e>
	net_buf_unref(rsp);
    d83a:	9800      	ldr	r0, [sp, #0]
    d83c:	f011 fd16 	bl	1f26c <net_buf_unref>
	if (!cnt) {
    d840:	2c00      	cmp	r4, #0
    d842:	d1c8      	bne.n	d7d6 <bt_read_static_addr+0x22>
		BT_WARN("No static addresses stored in controller");
    d844:	4808      	ldr	r0, [pc, #32]	; (d868 <bt_read_static_addr+0xb4>)
    d846:	6803      	ldr	r3, [r0, #0]
    d848:	f013 0f06 	tst.w	r3, #6
    d84c:	d0c2      	beq.n	d7d4 <bt_read_static_addr+0x20>
    d84e:	4b09      	ldr	r3, [pc, #36]	; (d874 <bt_read_static_addr+0xc0>)
    d850:	e7c6      	b.n	d7e0 <bt_read_static_addr+0x2c>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    d852:	fb08 7005 	mla	r0, r8, r5, r7
    d856:	2216      	movs	r2, #22
    d858:	4631      	mov	r1, r6
    d85a:	f01a feac 	bl	285b6 <memcpy>
	for (i = 0; i < cnt; i++) {
    d85e:	3501      	adds	r5, #1
    d860:	e7e9      	b.n	d836 <bt_read_static_addr+0x82>
    d862:	bf00      	nop
    d864:	20000000 	.word	0x20000000
    d868:	20000a04 	.word	0x20000a04
    d86c:	00030a56 	.word	0x00030a56
    d870:	00030a82 	.word	0x00030a82
    d874:	00030aa2 	.word	0x00030aa2

0000d878 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    d878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    d87c:	4f1d      	ldr	r7, [pc, #116]	; (d8f4 <bt_setup_random_id_addr+0x7c>)
    d87e:	79fc      	ldrb	r4, [r7, #7]
{
    d880:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    d882:	bb7c      	cbnz	r4, d8e4 <bt_setup_random_id_addr+0x6c>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    d884:	2101      	movs	r1, #1
    d886:	a806      	add	r0, sp, #24
    d888:	f7ff ff94 	bl	d7b4 <bt_read_static_addr>
    d88c:	71f8      	strb	r0, [r7, #7]

		if (bt_dev.id_count) {
    d88e:	b348      	cbz	r0, d8e4 <bt_setup_random_id_addr+0x6c>
    d890:	f04f 0916 	mov.w	r9, #22
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    d894:	f10d 0808 	add.w	r8, sp, #8
    d898:	b2e5      	uxtb	r5, r4
    d89a:	fb09 f605 	mul.w	r6, r9, r5
    d89e:	ab06      	add	r3, sp, #24
    d8a0:	1db0      	adds	r0, r6, #6
    d8a2:	4641      	mov	r1, r8
    d8a4:	4418      	add	r0, r3
    d8a6:	f01c fec1 	bl	2a62c <bt_smp_irk_get>
    d8aa:	ab06      	add	r3, sp, #24
					irk = ir_irk;
    d8ac:	2800      	cmp	r0, #0
    d8ae:	bf0c      	ite	eq
    d8b0:	46c2      	moveq	sl, r8
    d8b2:	f04f 0a00 	movne.w	sl, #0
    d8b6:	1999      	adds	r1, r3, r6
    d8b8:	2206      	movs	r2, #6
    d8ba:	f10d 0001 	add.w	r0, sp, #1
    d8be:	f01a fe7a 	bl	285b6 <memcpy>
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
				addr.type = BT_ADDR_LE_RANDOM;
    d8c2:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    d8c4:	4652      	mov	r2, sl
    d8c6:	4669      	mov	r1, sp
    d8c8:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    d8ca:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    d8ce:	f7ff fcd5 	bl	d27c <id_create>
				if (err) {
    d8d2:	b920      	cbnz	r0, d8de <bt_setup_random_id_addr+0x66>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    d8d4:	79fa      	ldrb	r2, [r7, #7]
    d8d6:	3401      	adds	r4, #1
    d8d8:	b2e3      	uxtb	r3, r4
    d8da:	429a      	cmp	r2, r3
    d8dc:	d8dc      	bhi.n	d898 <bt_setup_random_id_addr+0x20>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    d8de:	b00c      	add	sp, #48	; 0x30
    d8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_id_create(NULL, NULL);
    d8e4:	2100      	movs	r1, #0
    d8e6:	4608      	mov	r0, r1
}
    d8e8:	b00c      	add	sp, #48	; 0x30
    d8ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
    d8ee:	f7ff be5b 	b.w	d5a8 <bt_id_create>
    d8f2:	bf00      	nop
    d8f4:	20000000 	.word	0x20000000

0000d8f8 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    d8f8:	b510      	push	{r4, lr}
    d8fa:	460c      	mov	r4, r1
    d8fc:	b08a      	sub	sp, #40	; 0x28
	int err;

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		if (use_filter || rpa_timeout_valid_check()) {
    d8fe:	b128      	cbz	r0, d90c <bt_id_set_create_conn_own_addr+0x14>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    d900:	2000      	movs	r0, #0
    d902:	f7ff fd13 	bl	d32c <bt_id_set_private_addr>
			if (err) {
    d906:	b1d0      	cbz	r0, d93e <bt_id_set_create_conn_own_addr+0x46>

		*own_addr_type = addr->type;
	}

	return 0;
}
    d908:	b00a      	add	sp, #40	; 0x28
    d90a:	bd10      	pop	{r4, pc}
	return z_timeout_remaining(&dwork->timeout);
    d90c:	4812      	ldr	r0, [pc, #72]	; (d958 <bt_id_set_create_conn_own_addr+0x60>)
    d90e:	f01e f8fc 	bl	2bb0a <z_timeout_remaining>
    d912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d916:	fba0 3003 	umull	r3, r0, r0, r3
    d91a:	0bdb      	lsrs	r3, r3, #15
    d91c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return remaining_ms > (10 * bt_dev.create_param.timeout);
    d920:	480e      	ldr	r0, [pc, #56]	; (d95c <bt_id_set_create_conn_own_addr+0x64>)
    d922:	8a82      	ldrh	r2, [r0, #20]
    d924:	210a      	movs	r1, #10
    d926:	434a      	muls	r2, r1
		if (use_filter || rpa_timeout_valid_check()) {
    d928:	429a      	cmp	r2, r3
    d92a:	d3e9      	bcc.n	d900 <bt_id_set_create_conn_own_addr+0x8>
	k_work_cancel_delayable_sync(&bt_dev.rpa_update, &sync);
    d92c:	4669      	mov	r1, sp
    d92e:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    d932:	f01d ff96 	bl	2b862 <k_work_cancel_delayable_sync>
	le_rpa_invalidate();
    d936:	f7ff fb43 	bl	cfc0 <le_rpa_invalidate>
	le_update_private_addr();
    d93a:	f7ff fd29 	bl	d390 <le_update_private_addr>
		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    d93e:	4b07      	ldr	r3, [pc, #28]	; (d95c <bt_id_set_create_conn_own_addr+0x64>)
    d940:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
    d944:	f010 0040 	ands.w	r0, r0, #64	; 0x40
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    d948:	bf17      	itett	ne
    d94a:	2303      	movne	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    d94c:	2301      	moveq	r3, #1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    d94e:	7023      	strbne	r3, [r4, #0]
	return 0;
    d950:	2000      	movne	r0, #0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    d952:	bf08      	it	eq
    d954:	7023      	strbeq	r3, [r4, #0]
    d956:	e7d7      	b.n	d908 <bt_id_set_create_conn_own_addr+0x10>
    d958:	20000178 	.word	0x20000178
    d95c:	20000000 	.word	0x20000000

0000d960 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    d960:	b510      	push	{r4, lr}
	int err;

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
    d962:	2000      	movs	r0, #0
{
    d964:	460c      	mov	r4, r1
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
    d966:	f7ff fce1 	bl	d32c <bt_id_set_private_addr>
		if (err) {
    d96a:	b938      	cbnz	r0, d97c <bt_id_set_scan_own_addr+0x1c>
			return err;
		}

		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    d96c:	4b04      	ldr	r3, [pc, #16]	; (d980 <bt_id_set_scan_own_addr+0x20>)
    d96e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    d972:	065b      	lsls	r3, r3, #25
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    d974:	bf4c      	ite	mi
    d976:	2303      	movmi	r3, #3
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
    d978:	2301      	movpl	r3, #1
    d97a:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
    d97c:	bd10      	pop	{r4, pc}
    d97e:	bf00      	nop
    d980:	20000000 	.word	0x20000000

0000d984 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    d984:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d986:	4d18      	ldr	r5, [pc, #96]	; (d9e8 <bt_id_init+0x64>)
    d988:	79eb      	ldrb	r3, [r5, #7]
{
    d98a:	b089      	sub	sp, #36	; 0x24
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d98c:	bb33      	cbnz	r3, d9dc <bt_id_init+0x58>
		BT_DBG("No user identity. Trying to set public.");

		err = bt_setup_public_id_addr();
    d98e:	f7ff fec7 	bl	d720 <bt_setup_public_id_addr>
		if (err) {
    d992:	4604      	mov	r4, r0
    d994:	b180      	cbz	r0, d9b8 <bt_id_init+0x34>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
		BT_DBG("No public address. Trying to set static random.");

		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to set identity address");
    d996:	4815      	ldr	r0, [pc, #84]	; (d9ec <bt_id_init+0x68>)
    d998:	6803      	ldr	r3, [r0, #0]
    d99a:	075a      	lsls	r2, r3, #29
    d99c:	d009      	beq.n	d9b2 <bt_id_init+0x2e>
    d99e:	4b14      	ldr	r3, [pc, #80]	; (d9f0 <bt_id_init+0x6c>)
		 * is a random address, it needs a valid value, even though it's
		 * not actually used.
		 */
		err = set_random_address(&bt_dev.id_addr[0].a);
		if (err) {
			BT_ERR("Unable to set random address");
    d9a0:	9306      	str	r3, [sp, #24]
    d9a2:	aa05      	add	r2, sp, #20
    d9a4:	2302      	movs	r3, #2
    d9a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d9aa:	9301      	str	r3, [sp, #4]
    d9ac:	9305      	str	r3, [sp, #20]
    d9ae:	f01b f852 	bl	28a56 <z_log_msg2_static_create.constprop.0>
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
    d9b2:	4620      	mov	r0, r4
    d9b4:	b009      	add	sp, #36	; 0x24
    d9b6:	bd30      	pop	{r4, r5, pc}
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d9b8:	79eb      	ldrb	r3, [r5, #7]
    d9ba:	b97b      	cbnz	r3, d9dc <bt_id_init+0x58>
		err = bt_setup_random_id_addr();
    d9bc:	f7ff ff5c 	bl	d878 <bt_setup_random_id_addr>
		if (err) {
    d9c0:	4604      	mov	r4, r0
    d9c2:	2800      	cmp	r0, #0
    d9c4:	d1e7      	bne.n	d996 <bt_id_init+0x12>
		err = set_random_address(&bt_dev.id_addr[0].a);
    d9c6:	1c68      	adds	r0, r5, #1
    d9c8:	f7ff fc2a 	bl	d220 <set_random_address>
		if (err) {
    d9cc:	4604      	mov	r4, r0
    d9ce:	b128      	cbz	r0, d9dc <bt_id_init+0x58>
			BT_ERR("Unable to set random address");
    d9d0:	4806      	ldr	r0, [pc, #24]	; (d9ec <bt_id_init+0x68>)
    d9d2:	6803      	ldr	r3, [r0, #0]
    d9d4:	075b      	lsls	r3, r3, #29
    d9d6:	d0ec      	beq.n	d9b2 <bt_id_init+0x2e>
    d9d8:	4b06      	ldr	r3, [pc, #24]	; (d9f4 <bt_id_init+0x70>)
    d9da:	e7e1      	b.n	d9a0 <bt_id_init+0x1c>
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
    d9dc:	4906      	ldr	r1, [pc, #24]	; (d9f8 <bt_id_init+0x74>)
    d9de:	4807      	ldr	r0, [pc, #28]	; (d9fc <bt_id_init+0x78>)
    d9e0:	f01d ff1f 	bl	2b822 <k_work_init_delayable>
	return 0;
    d9e4:	2400      	movs	r4, #0
    d9e6:	e7e4      	b.n	d9b2 <bt_id_init+0x2e>
    d9e8:	20000000 	.word	0x20000000
    d9ec:	20000a04 	.word	0x20000a04
    d9f0:	00030acb 	.word	0x00030acb
    d9f4:	00030aea 	.word	0x00030aea
    d9f8:	00028a9d 	.word	0x00028a9d
    d9fc:	20000168 	.word	0x20000168

0000da00 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    da00:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    da02:	2102      	movs	r1, #2
{
    da04:	b087      	sub	sp, #28
    da06:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    da08:	f242 000c 	movw	r0, #8204	; 0x200c
    da0c:	f7fe fa8e 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    da10:	4605      	mov	r5, r0
    da12:	b318      	cbz	r0, da5c <bt_le_scan_set_enable_legacy+0x5c>
    da14:	2102      	movs	r1, #2
    da16:	3008      	adds	r0, #8
    da18:	f01c ffe7 	bl	2a9ea <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    da1c:	2c01      	cmp	r4, #1
    da1e:	d11b      	bne.n	da58 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    da20:	f3bf 8f5b 	dmb	ish
    da24:	4b0f      	ldr	r3, [pc, #60]	; (da64 <bt_le_scan_set_enable_legacy+0x64>)
    da26:	681b      	ldr	r3, [r3, #0]
    da28:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    da2c:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    da30:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    da32:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    da34:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    da36:	425c      	negs	r4, r3
    da38:	415c      	adcs	r4, r3
    da3a:	4a0a      	ldr	r2, [pc, #40]	; (da64 <bt_le_scan_set_enable_legacy+0x64>)
    da3c:	9400      	str	r4, [sp, #0]
    da3e:	a903      	add	r1, sp, #12
    da40:	4628      	mov	r0, r5
    da42:	2305      	movs	r3, #5
    da44:	f7fe fa60 	bl	bf08 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    da48:	2200      	movs	r2, #0
    da4a:	4629      	mov	r1, r5
    da4c:	f242 000c 	movw	r0, #8204	; 0x200c
    da50:	f7fe fbdc 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    da54:	b007      	add	sp, #28
    da56:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    da58:	2300      	movs	r3, #0
    da5a:	e7e9      	b.n	da30 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    da5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    da60:	e7f8      	b.n	da54 <bt_le_scan_set_enable_legacy+0x54>
    da62:	bf00      	nop
    da64:	200000cc 	.word	0x200000cc

0000da68 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    da68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    da6a:	4605      	mov	r5, r0
    da6c:	4614      	mov	r4, r2
    da6e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    da70:	2207      	movs	r2, #7
    da72:	2100      	movs	r1, #0
    da74:	4668      	mov	r0, sp
    da76:	f01a fda9 	bl	285cc <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    da7a:	2300      	movs	r3, #0
    da7c:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    da80:	1e6b      	subs	r3, r5, #1
    da82:	4258      	negs	r0, r3
    da84:	f10d 0105 	add.w	r1, sp, #5
    da88:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    da8a:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    da8e:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    da92:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    da96:	f7ff ff63 	bl	d960 <bt_id_set_scan_own_addr>
	if (err) {
    da9a:	4604      	mov	r4, r0
    da9c:	bb38      	cbnz	r0, daee <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    da9e:	2107      	movs	r1, #7
    daa0:	f242 000b 	movw	r0, #8203	; 0x200b
    daa4:	f7fe fa42 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    daa8:	4606      	mov	r6, r0
    daaa:	b348      	cbz	r0, db00 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    daac:	2207      	movs	r2, #7
    daae:	4669      	mov	r1, sp
    dab0:	3008      	adds	r0, #8
    dab2:	f01c ffa0 	bl	2a9f6 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    dab6:	4622      	mov	r2, r4
    dab8:	4631      	mov	r1, r6
    daba:	f242 000b 	movw	r0, #8203	; 0x200b
    dabe:	f7fe fba5 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    dac2:	4604      	mov	r4, r0
    dac4:	b998      	cbnz	r0, daee <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    dac6:	2001      	movs	r0, #1
    dac8:	f7ff ff9a 	bl	da00 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    dacc:	4604      	mov	r4, r0
    dace:	b970      	cbnz	r0, daee <start_le_scan_legacy+0x86>
	if (val) {
    dad0:	2d01      	cmp	r5, #1
    dad2:	d10f      	bne.n	daf4 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dad4:	f3bf 8f5b 	dmb	ish
    dad8:	4b0b      	ldr	r3, [pc, #44]	; (db08 <start_le_scan_legacy+0xa0>)
    dada:	e853 2f00 	ldrex	r2, [r3]
    dade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dae2:	e843 2100 	strex	r1, r2, [r3]
    dae6:	2900      	cmp	r1, #0
    dae8:	d1f7      	bne.n	dada <start_le_scan_legacy+0x72>
    daea:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    daee:	4620      	mov	r0, r4
    daf0:	b002      	add	sp, #8
    daf2:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    daf4:	f06f 0180 	mvn.w	r1, #128	; 0x80
    daf8:	4803      	ldr	r0, [pc, #12]	; (db08 <start_le_scan_legacy+0xa0>)
    dafa:	f01a ffff 	bl	28afc <atomic_and>
    dafe:	e7f6      	b.n	daee <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    db00:	f06f 0468 	mvn.w	r4, #104	; 0x68
    db04:	e7f3      	b.n	daee <start_le_scan_legacy+0x86>
    db06:	bf00      	nop
    db08:	200000cc 	.word	0x200000cc

0000db0c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    db0c:	4b01      	ldr	r3, [pc, #4]	; (db14 <bt_scan_reset+0x8>)
    db0e:	2200      	movs	r2, #0
    db10:	601a      	str	r2, [r3, #0]
}
    db12:	4770      	bx	lr
    db14:	20002a58 	.word	0x20002a58

0000db18 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    db18:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db1a:	4b23      	ldr	r3, [pc, #140]	; (dba8 <bt_le_scan_update+0x90>)
    db1c:	f3bf 8f5b 	dmb	ish
    db20:	681a      	ldr	r2, [r3, #0]
    db22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    db26:	f012 0f40 	tst.w	r2, #64	; 0x40
{
    db2a:	4605      	mov	r5, r0
    db2c:	461e      	mov	r6, r3
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    db2e:	f3c2 1080 	ubfx	r0, r2, #6, #1
    db32:	d001      	beq.n	db38 <bt_le_scan_update+0x20>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    db34:	2000      	movs	r0, #0
    db36:	e032      	b.n	db9e <bt_le_scan_update+0x86>
    db38:	f3bf 8f5b 	dmb	ish
    db3c:	681b      	ldr	r3, [r3, #0]
    db3e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    db42:	069b      	lsls	r3, r3, #26
    db44:	d427      	bmi.n	db96 <bt_le_scan_update+0x7e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    db46:	2100      	movs	r1, #0
    db48:	2206      	movs	r2, #6
    db4a:	4608      	mov	r0, r1
    db4c:	f000 ffe8 	bl	eb20 <bt_conn_lookup_state_le>
		if (conn) {
    db50:	4604      	mov	r4, r0
    db52:	bb28      	cbnz	r0, dba0 <bt_le_scan_update+0x88>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    db54:	2202      	movs	r2, #2
    db56:	4601      	mov	r1, r0
    db58:	f000 ffe2 	bl	eb20 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    db5c:	2800      	cmp	r0, #0
    db5e:	d0e9      	beq.n	db34 <bt_le_scan_update+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    db60:	f3bf 8f5b 	dmb	ish
    db64:	e856 3f00 	ldrex	r3, [r6]
    db68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    db6c:	e846 3200 	strex	r2, r3, [r6]
    db70:	2a00      	cmp	r2, #0
    db72:	d1f7      	bne.n	db64 <bt_le_scan_update+0x4c>
    db74:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    db78:	f01b f88c 	bl	28c94 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    db7c:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    db7e:	4620      	mov	r0, r4
    db80:	bf18      	it	ne
    db82:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    db84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    db88:	bf0a      	itet	eq
    db8a:	2212      	moveq	r2, #18
    db8c:	2160      	movne	r1, #96	; 0x60
    db8e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    db92:	f7ff bf69 	b.w	da68 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    db96:	f7ff ff33 	bl	da00 <bt_le_scan_set_enable_legacy>
		if (err) {
    db9a:	2800      	cmp	r0, #0
    db9c:	d0d3      	beq.n	db46 <bt_le_scan_update+0x2e>
}
    db9e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    dba0:	f01b f878 	bl	28c94 <bt_conn_unref>
    dba4:	e7c6      	b.n	db34 <bt_le_scan_update+0x1c>
    dba6:	bf00      	nop
    dba8:	200000cc 	.word	0x200000cc

0000dbac <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    dbb0:	f100 0808 	add.w	r8, r0, #8
    dbb4:	b08f      	sub	sp, #60	; 0x3c
    dbb6:	4604      	mov	r4, r0
    dbb8:	4640      	mov	r0, r8
    dbba:	f01c ff4f 	bl	2aa5c <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    dbbe:	f8df a1c8 	ldr.w	sl, [pc, #456]	; dd88 <bt_hci_le_adv_report+0x1dc>
    dbc2:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    dbc4:	b18e      	cbz	r6, dbea <bt_hci_le_adv_report+0x3e>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
    dbc6:	89a3      	ldrh	r3, [r4, #12]
    dbc8:	2b08      	cmp	r3, #8
    dbca:	d811      	bhi.n	dbf0 <bt_hci_le_adv_report+0x44>
			BT_ERR("Unexpected end of buffer");
    dbcc:	486f      	ldr	r0, [pc, #444]	; (dd8c <bt_hci_le_adv_report+0x1e0>)
    dbce:	6803      	ldr	r3, [r0, #0]
    dbd0:	075c      	lsls	r4, r3, #29
    dbd2:	d00a      	beq.n	dbea <bt_hci_le_adv_report+0x3e>
    dbd4:	4b6e      	ldr	r3, [pc, #440]	; (dd90 <bt_hci_le_adv_report+0x1e4>)
    dbd6:	930c      	str	r3, [sp, #48]	; 0x30
    dbd8:	2302      	movs	r3, #2
    dbda:	9306      	str	r3, [sp, #24]
    dbdc:	930b      	str	r3, [sp, #44]	; 0x2c
    dbde:	2300      	movs	r3, #0
    dbe0:	aa0b      	add	r2, sp, #44	; 0x2c
    dbe2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dbe6:	f017 fffb 	bl	25be0 <z_impl_z_log_msg2_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    dbea:	b00f      	add	sp, #60	; 0x3c
    dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    dbf0:	2109      	movs	r1, #9
    dbf2:	4640      	mov	r0, r8
    dbf4:	f01c ff2a 	bl	2aa4c <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    dbf8:	237f      	movs	r3, #127	; 0x7f
    dbfa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    dbfe:	7a01      	ldrb	r1, [r0, #8]
    dc00:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    dc02:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    dc04:	7a5b      	ldrb	r3, [r3, #9]
    dc06:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    dc0a:	23ff      	movs	r3, #255	; 0xff
    dc0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    dc10:	2300      	movs	r3, #0
    dc12:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    dc16:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    dc1a:	7802      	ldrb	r2, [r0, #0]
    dc1c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    dc20:	2a04      	cmp	r2, #4
    dc22:	bf9c      	itt	ls
    dc24:	4b5b      	ldrls	r3, [pc, #364]	; (dd94 <bt_hci_le_adv_report+0x1e8>)
    dc26:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    dc28:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    dc2c:	b28b      	uxth	r3, r1
    dc2e:	9301      	str	r3, [sp, #4]
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    dc30:	7843      	ldrb	r3, [r0, #1]
    dc32:	1e9a      	subs	r2, r3, #2
    dc34:	2a01      	cmp	r2, #1
    dc36:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    dc38:	f100 0901 	add.w	r9, r0, #1
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    dc3c:	d848      	bhi.n	dcd0 <bt_hci_le_adv_report+0x124>
	memcpy(dst, src, sizeof(*dst));
    dc3e:	2207      	movs	r2, #7
    dc40:	4649      	mov	r1, r9
    dc42:	a804      	add	r0, sp, #16
    dc44:	f01a fcb7 	bl	285b6 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    dc48:	f89d 3010 	ldrb.w	r3, [sp, #16]
    dc4c:	3b02      	subs	r3, #2
    dc4e:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    dc52:	ab04      	add	r3, sp, #16
    dc54:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    dc56:	f8da 3000 	ldr.w	r3, [sl]
    dc5a:	b1a3      	cbz	r3, dc86 <bt_hci_le_adv_report+0xda>
	state->offset = net_buf_simple_headroom(buf);
    dc5c:	4640      	mov	r0, r8
    dc5e:	f01c ff0d 	bl	2aa7c <net_buf_simple_headroom>
		buf->len = len;
    dc62:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    dc64:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    dc66:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    dc6a:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    dc6c:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    dc6e:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    dc72:	f8da c000 	ldr.w	ip, [sl]
    dc76:	a804      	add	r0, sp, #16
    dc78:	4643      	mov	r3, r8
    dc7a:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    dc7c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    dc7e:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    dc80:	fa10 f08b 	uxtah	r0, r0, fp
    dc84:	60a0      	str	r0, [r4, #8]
	return list->head;
    dc86:	4b44      	ldr	r3, [pc, #272]	; (dd98 <bt_hci_le_adv_report+0x1ec>)
    dc88:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    dc8a:	2a00      	cmp	r2, #0
    dc8c:	d033      	beq.n	dcf6 <bt_hci_le_adv_report+0x14a>
	return node->next;
    dc8e:	f852 7908 	ldr.w	r7, [r2], #-8
    dc92:	b107      	cbz	r7, dc96 <bt_hci_le_adv_report+0xea>
    dc94:	3f08      	subs	r7, #8
		if (listener->recv) {
    dc96:	6813      	ldr	r3, [r2, #0]
    dc98:	9203      	str	r2, [sp, #12]
    dc9a:	b193      	cbz	r3, dcc2 <bt_hci_le_adv_report+0x116>
	state->offset = net_buf_simple_headroom(buf);
    dc9c:	4640      	mov	r0, r8
    dc9e:	f01c feed 	bl	2aa7c <net_buf_simple_headroom>
	state->len = buf->len;
    dca2:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    dca4:	9a03      	ldr	r2, [sp, #12]
    dca6:	9302      	str	r3, [sp, #8]
			buf->len = len;
    dca8:	9b01      	ldr	r3, [sp, #4]
    dcaa:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    dcac:	4683      	mov	fp, r0
			listener->recv(info, buf);
    dcae:	6812      	ldr	r2, [r2, #0]
    dcb0:	a808      	add	r0, sp, #32
    dcb2:	4641      	mov	r1, r8
    dcb4:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    dcb6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    dcb8:	9b02      	ldr	r3, [sp, #8]
    dcba:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    dcbc:	fa10 f08b 	uxtah	r0, r0, fp
    dcc0:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    dcc2:	b1c7      	cbz	r7, dcf6 <bt_hci_le_adv_report+0x14a>
    dcc4:	68bb      	ldr	r3, [r7, #8]
    dcc6:	b103      	cbz	r3, dcca <bt_hci_le_adv_report+0x11e>
    dcc8:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    dcca:	463a      	mov	r2, r7
    dccc:	461f      	mov	r7, r3
    dcce:	e7e2      	b.n	dc96 <bt_hci_le_adv_report+0xea>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    dcd0:	2bff      	cmp	r3, #255	; 0xff
    dcd2:	d109      	bne.n	dce8 <bt_hci_le_adv_report+0x13c>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    dcd4:	2300      	movs	r3, #0
    dcd6:	9306      	str	r3, [sp, #24]
    dcd8:	2207      	movs	r2, #7
    dcda:	f8cd 301b 	str.w	r3, [sp, #27]
    dcde:	a906      	add	r1, sp, #24
    dce0:	a804      	add	r0, sp, #16
    dce2:	f01a fc68 	bl	285b6 <memcpy>
}
    dce6:	e7b4      	b.n	dc52 <bt_hci_le_adv_report+0xa6>
		bt_addr_le_copy(&id_addr,
    dce8:	4649      	mov	r1, r9
    dcea:	2000      	movs	r0, #0
    dcec:	f01a fece 	bl	28a8c <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    dcf0:	2207      	movs	r2, #7
    dcf2:	4601      	mov	r1, r0
    dcf4:	e7f4      	b.n	dce0 <bt_hci_le_adv_report+0x134>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dcf6:	4b29      	ldr	r3, [pc, #164]	; (dd9c <bt_hci_le_adv_report+0x1f0>)
	check_pending_conn(&id_addr, addr, info->adv_props);
    dcf8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    dcfc:	f3bf 8f5b 	dmb	ish
    dd00:	681a      	ldr	r2, [r3, #0]
    dd02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    dd06:	0650      	lsls	r0, r2, #25
    dd08:	f3c2 1b80 	ubfx	fp, r2, #6, #1
    dd0c:	d421      	bmi.n	dd52 <bt_hci_le_adv_report+0x1a6>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    dd0e:	07ca      	lsls	r2, r1, #31
    dd10:	d51f      	bpl.n	dd52 <bt_hci_le_adv_report+0x1a6>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    dd12:	2202      	movs	r2, #2
    dd14:	a904      	add	r1, sp, #16
    dd16:	4658      	mov	r0, fp
    dd18:	f000 ff02 	bl	eb20 <bt_conn_lookup_state_le>
	if (!conn) {
    dd1c:	4607      	mov	r7, r0
    dd1e:	b1c0      	cbz	r0, dd52 <bt_hci_le_adv_report+0x1a6>
    dd20:	f3bf 8f5b 	dmb	ish
    dd24:	4b1d      	ldr	r3, [pc, #116]	; (dd9c <bt_hci_le_adv_report+0x1f0>)
    dd26:	681b      	ldr	r3, [r3, #0]
    dd28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    dd2c:	069b      	lsls	r3, r3, #26
    dd2e:	d418      	bmi.n	dd62 <bt_hci_le_adv_report+0x1b6>
    dd30:	2207      	movs	r2, #7
    dd32:	4649      	mov	r1, r9
    dd34:	f107 0096 	add.w	r0, r7, #150	; 0x96
    dd38:	f01a fc3d 	bl	285b6 <memcpy>
	if (bt_le_create_conn(conn)) {
    dd3c:	4638      	mov	r0, r7
    dd3e:	f01a fdb6 	bl	288ae <bt_le_create_conn>
    dd42:	b998      	cbnz	r0, dd6c <bt_hci_le_adv_report+0x1c0>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    dd44:	4638      	mov	r0, r7
    dd46:	2106      	movs	r1, #6
    dd48:	f000 fc82 	bl	e650 <bt_conn_set_state>
	bt_conn_unref(conn);
    dd4c:	4638      	mov	r0, r7
    dd4e:	f01a ffa1 	bl	28c94 <bt_conn_unref>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    dd52:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    dd54:	4640      	mov	r0, r8
    dd56:	3101      	adds	r1, #1
    dd58:	3e01      	subs	r6, #1
    dd5a:	f01c fe6f 	bl	2aa3c <net_buf_simple_pull>
    dd5e:	b2f6      	uxtb	r6, r6
    dd60:	e730      	b.n	dbc4 <bt_hci_le_adv_report+0x18>
	return bt_le_scan_set_enable_legacy(enable);
    dd62:	4658      	mov	r0, fp
    dd64:	f7ff fe4c 	bl	da00 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    dd68:	2800      	cmp	r0, #0
    dd6a:	d0e1      	beq.n	dd30 <bt_hci_le_adv_report+0x184>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    dd6c:	231f      	movs	r3, #31
    dd6e:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    dd70:	2100      	movs	r1, #0
    dd72:	4638      	mov	r0, r7
    dd74:	f000 fc6c 	bl	e650 <bt_conn_set_state>
	bt_conn_unref(conn);
    dd78:	4638      	mov	r0, r7
    dd7a:	f01a ff8b 	bl	28c94 <bt_conn_unref>
	bt_le_scan_update(false);
    dd7e:	2000      	movs	r0, #0
    dd80:	f7ff feca 	bl	db18 <bt_le_scan_update>
    dd84:	e7e5      	b.n	dd52 <bt_hci_le_adv_report+0x1a6>
    dd86:	bf00      	nop
    dd88:	20002a58 	.word	0x20002a58
    dd8c:	20000a14 	.word	0x20000a14
    dd90:	00030b0d 	.word	0x00030b0d
    dd94:	00030b2e 	.word	0x00030b2e
    dd98:	20002a50 	.word	0x20002a50
    dd9c:	200000cc 	.word	0x200000cc

0000dda0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    dda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dda2:	4c3d      	ldr	r4, [pc, #244]	; (de98 <bt_le_scan_start+0xf8>)
    dda4:	f3bf 8f5b 	dmb	ish
    dda8:	6823      	ldr	r3, [r4, #0]
    ddaa:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ddae:	f013 0f02 	tst.w	r3, #2
{
    ddb2:	4605      	mov	r5, r0
    ddb4:	460f      	mov	r7, r1
    ddb6:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ddb8:	d06b      	beq.n	de92 <bt_le_scan_start+0xf2>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    ddba:	7802      	ldrb	r2, [r0, #0]
    ddbc:	2a01      	cmp	r2, #1
    ddbe:	d903      	bls.n	ddc8 <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    ddc0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    ddc4:	4620      	mov	r0, r4
    ddc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    ddc8:	6843      	ldr	r3, [r0, #4]
    ddca:	f033 030f 	bics.w	r3, r3, #15
    ddce:	d1f7      	bne.n	ddc0 <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    ddd0:	8900      	ldrh	r0, [r0, #8]
    ddd2:	1f03      	subs	r3, r0, #4
    ddd4:	b29b      	uxth	r3, r3
    ddd6:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    ddda:	4563      	cmp	r3, ip
    dddc:	d8f0      	bhi.n	ddc0 <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
    ddde:	8969      	ldrh	r1, [r5, #10]
    dde0:	1f0b      	subs	r3, r1, #4
    dde2:	b29b      	uxth	r3, r3
    dde4:	4563      	cmp	r3, ip
    dde6:	d8eb      	bhi.n	ddc0 <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
    dde8:	4288      	cmp	r0, r1
    ddea:	d3e9      	bcc.n	ddc0 <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
    ddec:	b98a      	cbnz	r2, de12 <bt_le_scan_start+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ddee:	f3bf 8f5b 	dmb	ish
    ddf2:	e856 0f00 	ldrex	r0, [r6]
    ddf6:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    ddfa:	e846 3200 	strex	r2, r3, [r6]
    ddfe:	2a00      	cmp	r2, #0
    de00:	d1f7      	bne.n	ddf2 <bt_le_scan_start+0x52>
    de02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    de06:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    de0a:	d007      	beq.n	de1c <bt_le_scan_start+0x7c>
		return -EALREADY;
    de0c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    de10:	e7d8      	b.n	ddc4 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    de12:	f01a fe61 	bl	28ad8 <bt_id_scan_random_addr_check>
    de16:	2800      	cmp	r0, #0
    de18:	d1e9      	bne.n	ddee <bt_le_scan_start+0x4e>
    de1a:	e7d1      	b.n	ddc0 <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    de1c:	f3bf 8f5b 	dmb	ish
    de20:	6823      	ldr	r3, [r4, #0]
    de22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    de26:	069a      	lsls	r2, r3, #26
    de28:	d509      	bpl.n	de3e <bt_le_scan_start+0x9e>
	return bt_le_scan_set_enable_legacy(enable);
    de2a:	f7ff fde9 	bl	da00 <bt_le_scan_set_enable_legacy>
		if (err) {
    de2e:	4604      	mov	r4, r0
    de30:	b128      	cbz	r0, de3e <bt_le_scan_start+0x9e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    de32:	f06f 0140 	mvn.w	r1, #64	; 0x40
    de36:	4818      	ldr	r0, [pc, #96]	; (de98 <bt_le_scan_start+0xf8>)
    de38:	f01a fe60 	bl	28afc <atomic_and>
		return err;
    de3c:	e7c2      	b.n	ddc4 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    de3e:	686b      	ldr	r3, [r5, #4]
	if (val) {
    de40:	07db      	lsls	r3, r3, #31
    de42:	d515      	bpl.n	de70 <bt_le_scan_start+0xd0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    de44:	f3bf 8f5b 	dmb	ish
    de48:	e856 3f00 	ldrex	r3, [r6]
    de4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    de50:	e846 3200 	strex	r2, r3, [r6]
    de54:	2a00      	cmp	r2, #0
    de56:	d1f7      	bne.n	de48 <bt_le_scan_start+0xa8>
    de58:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    de5c:	89ab      	ldrh	r3, [r5, #12]
    de5e:	b16b      	cbz	r3, de7c <bt_le_scan_start+0xdc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    de60:	480d      	ldr	r0, [pc, #52]	; (de98 <bt_le_scan_start+0xf8>)
    de62:	f06f 0140 	mvn.w	r1, #64	; 0x40
    de66:	f01a fe49 	bl	28afc <atomic_and>
			return -ENOTSUP;
    de6a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    de6e:	e7a9      	b.n	ddc4 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    de70:	f46f 7180 	mvn.w	r1, #256	; 0x100
    de74:	4808      	ldr	r0, [pc, #32]	; (de98 <bt_le_scan_start+0xf8>)
    de76:	f01a fe41 	bl	28afc <atomic_and>
    de7a:	e7ef      	b.n	de5c <bt_le_scan_start+0xbc>
		err = start_le_scan_legacy(param->type, param->interval,
    de7c:	896a      	ldrh	r2, [r5, #10]
    de7e:	8929      	ldrh	r1, [r5, #8]
    de80:	7828      	ldrb	r0, [r5, #0]
    de82:	f7ff fdf1 	bl	da68 <start_le_scan_legacy>
	if (err) {
    de86:	4604      	mov	r4, r0
    de88:	2800      	cmp	r0, #0
    de8a:	d1d2      	bne.n	de32 <bt_le_scan_start+0x92>
	scan_dev_found_cb = cb;
    de8c:	4b03      	ldr	r3, [pc, #12]	; (de9c <bt_le_scan_start+0xfc>)
    de8e:	601f      	str	r7, [r3, #0]
	return 0;
    de90:	e798      	b.n	ddc4 <bt_le_scan_start+0x24>
		return -EAGAIN;
    de92:	f06f 040a 	mvn.w	r4, #10
    de96:	e795      	b.n	ddc4 <bt_le_scan_start+0x24>
    de98:	200000cc 	.word	0x200000cc
    de9c:	20002a58 	.word	0x20002a58

0000dea0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    dea0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    dea2:	4808      	ldr	r0, [pc, #32]	; (dec4 <bt_le_scan_stop+0x24>)
    dea4:	f06f 0140 	mvn.w	r1, #64	; 0x40
    dea8:	f01a fe28 	bl	28afc <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    deac:	0643      	lsls	r3, r0, #25
    deae:	d506      	bpl.n	debe <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
    deb0:	4b05      	ldr	r3, [pc, #20]	; (dec8 <bt_le_scan_stop+0x28>)
    deb2:	2000      	movs	r0, #0
    deb4:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    deb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    deba:	f7ff be2d 	b.w	db18 <bt_le_scan_update>
}
    debe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    dec2:	bd08      	pop	{r3, pc}
    dec4:	200000cc 	.word	0x200000cc
    dec8:	20002a58 	.word	0x20002a58

0000decc <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    decc:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    dece:	4904      	ldr	r1, [pc, #16]	; (dee0 <bt_pub_key_is_debug+0x14>)
    ded0:	2240      	movs	r2, #64	; 0x40
    ded2:	f01a fb47 	bl	28564 <memcmp>
}
    ded6:	fab0 f080 	clz	r0, r0
    deda:	0940      	lsrs	r0, r0, #5
    dedc:	bd08      	pop	{r3, pc}
    dede:	bf00      	nop
    dee0:	00030bc1 	.word	0x00030bc1

0000dee4 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    dee4:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    dee6:	4b4a      	ldr	r3, [pc, #296]	; (e010 <bt_pub_key_gen+0x12c>)
    dee8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    deec:	f003 0306 	and.w	r3, r3, #6
    def0:	2b06      	cmp	r3, #6
{
    def2:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    def4:	d012      	beq.n	df1c <bt_pub_key_gen+0x38>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    def6:	4847      	ldr	r0, [pc, #284]	; (e014 <bt_pub_key_gen+0x130>)
    def8:	6803      	ldr	r3, [r0, #0]
    defa:	f013 0f06 	tst.w	r3, #6
    defe:	d00a      	beq.n	df16 <bt_pub_key_gen+0x32>
    df00:	4b45      	ldr	r3, [pc, #276]	; (e018 <bt_pub_key_gen+0x134>)
    df02:	9306      	str	r3, [sp, #24]
    df04:	2302      	movs	r3, #2
    df06:	9301      	str	r3, [sp, #4]
    df08:	9305      	str	r3, [sp, #20]
    df0a:	2300      	movs	r3, #0
    df0c:	aa05      	add	r2, sp, #20
    df0e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    df12:	f017 fe65 	bl	25be0 <z_impl_z_log_msg2_static_create>
		return -ENOTSUP;
    df16:	f06f 0485 	mvn.w	r4, #133	; 0x85
    df1a:	e035      	b.n	df88 <bt_pub_key_gen+0xa4>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
    df1c:	2800      	cmp	r0, #0
    df1e:	d074      	beq.n	e00a <bt_pub_key_gen+0x126>
	return list->head;
    df20:	4e3e      	ldr	r6, [pc, #248]	; (e01c <bt_pub_key_gen+0x138>)
    df22:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    df24:	b1ca      	cbz	r2, df5a <bt_pub_key_gen+0x76>
    df26:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    df28:	4298      	cmp	r0, r3
    df2a:	d112      	bne.n	df52 <bt_pub_key_gen+0x6e>
			BT_WARN("Callback already registered");
    df2c:	4839      	ldr	r0, [pc, #228]	; (e014 <bt_pub_key_gen+0x130>)
    df2e:	6803      	ldr	r3, [r0, #0]
    df30:	f013 0f06 	tst.w	r3, #6
    df34:	d00a      	beq.n	df4c <bt_pub_key_gen+0x68>
    df36:	4b3a      	ldr	r3, [pc, #232]	; (e020 <bt_pub_key_gen+0x13c>)
    df38:	9306      	str	r3, [sp, #24]
    df3a:	2302      	movs	r3, #2
    df3c:	9301      	str	r3, [sp, #4]
    df3e:	9305      	str	r3, [sp, #20]
    df40:	2300      	movs	r3, #0
    df42:	aa05      	add	r2, sp, #20
    df44:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    df48:	f017 fe4a 	bl	25be0 <z_impl_z_log_msg2_static_create>
			return -EALREADY;
    df4c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    df50:	e01a      	b.n	df88 <bt_pub_key_gen+0xa4>
	return node->next;
    df52:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    df54:	b10b      	cbz	r3, df5a <bt_pub_key_gen+0x76>
    df56:	3b04      	subs	r3, #4
    df58:	e7e6      	b.n	df28 <bt_pub_key_gen+0x44>
	parent->next = child;
    df5a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    df5c:	6872      	ldr	r2, [r6, #4]
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    df5e:	1d03      	adds	r3, r0, #4
	list->head = node;
    df60:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    df62:	b902      	cbnz	r2, df66 <bt_pub_key_gen+0x82>
	list->tail = node;
    df64:	6073      	str	r3, [r6, #4]
    df66:	4d2f      	ldr	r5, [pc, #188]	; (e024 <bt_pub_key_gen+0x140>)
    df68:	f3bf 8f5b 	dmb	ish
    df6c:	e855 7f00 	ldrex	r7, [r5]
    df70:	f047 0310 	orr.w	r3, r7, #16
    df74:	e845 3200 	strex	r2, r3, [r5]
    df78:	2a00      	cmp	r2, #0
    df7a:	d1f7      	bne.n	df6c <bt_pub_key_gen+0x88>
    df7c:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    df80:	f017 0710 	ands.w	r7, r7, #16
    df84:	d003      	beq.n	df8e <bt_pub_key_gen+0xaa>
		return 0;
    df86:	2400      	movs	r4, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    df88:	4620      	mov	r0, r4
    df8a:	b009      	add	sp, #36	; 0x24
    df8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    df8e:	f3bf 8f5b 	dmb	ish
    df92:	e855 3f00 	ldrex	r3, [r5]
    df96:	f023 0308 	bic.w	r3, r3, #8
    df9a:	e845 3200 	strex	r2, r3, [r5]
    df9e:	2a00      	cmp	r2, #0
    dfa0:	d1f7      	bne.n	df92 <bt_pub_key_gen+0xae>
    dfa2:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    dfa6:	463a      	mov	r2, r7
    dfa8:	4639      	mov	r1, r7
    dfaa:	f242 0025 	movw	r0, #8229	; 0x2025
    dfae:	f7fe f92d 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    dfb2:	4604      	mov	r4, r0
    dfb4:	2800      	cmp	r0, #0
    dfb6:	d0e6      	beq.n	df86 <bt_pub_key_gen+0xa2>
		BT_ERR("Sending LE P256 Public Key command failed");
    dfb8:	4816      	ldr	r0, [pc, #88]	; (e014 <bt_pub_key_gen+0x130>)
    dfba:	6803      	ldr	r3, [r0, #0]
    dfbc:	075b      	lsls	r3, r3, #29
    dfbe:	d00a      	beq.n	dfd6 <bt_pub_key_gen+0xf2>
    dfc0:	4b19      	ldr	r3, [pc, #100]	; (e028 <bt_pub_key_gen+0x144>)
    dfc2:	9306      	str	r3, [sp, #24]
    dfc4:	2302      	movs	r3, #2
    dfc6:	9301      	str	r3, [sp, #4]
    dfc8:	9305      	str	r3, [sp, #20]
    dfca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dfce:	463b      	mov	r3, r7
    dfd0:	aa05      	add	r2, sp, #20
    dfd2:	f017 fe05 	bl	25be0 <z_impl_z_log_msg2_static_create>
    dfd6:	f3bf 8f5b 	dmb	ish
    dfda:	e855 3f00 	ldrex	r3, [r5]
    dfde:	f023 0310 	bic.w	r3, r3, #16
    dfe2:	e845 3200 	strex	r2, r3, [r5]
    dfe6:	2a00      	cmp	r2, #0
    dfe8:	d1f7      	bne.n	dfda <bt_pub_key_gen+0xf6>
    dfea:	f3bf 8f5b 	dmb	ish
	return list->head;
    dfee:	6835      	ldr	r5, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    dff0:	b13d      	cbz	r5, e002 <bt_pub_key_gen+0x11e>
			if (cb->func) {
    dff2:	f855 3c04 	ldr.w	r3, [r5, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    dff6:	3d04      	subs	r5, #4
			if (cb->func) {
    dff8:	b10b      	cbz	r3, dffe <bt_pub_key_gen+0x11a>
				cb->func(NULL);
    dffa:	2000      	movs	r0, #0
    dffc:	4798      	blx	r3
	return node->next;
    dffe:	686d      	ldr	r5, [r5, #4]
    e000:	e7f6      	b.n	dff0 <bt_pub_key_gen+0x10c>
	list->head = NULL;
    e002:	2300      	movs	r3, #0
	list->tail = NULL;
    e004:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    e008:	e7be      	b.n	df88 <bt_pub_key_gen+0xa4>
		return -EINVAL;
    e00a:	f06f 0415 	mvn.w	r4, #21
    e00e:	e7bb      	b.n	df88 <bt_pub_key_gen+0xa4>
    e010:	20000000 	.word	0x20000000
    e014:	200009f4 	.word	0x200009f4
    e018:	00030b33 	.word	0x00030b33
    e01c:	20002a60 	.word	0x20002a60
    e020:	00030b52 	.word	0x00030b52
    e024:	200000cc 	.word	0x200000cc
    e028:	00030b6e 	.word	0x00030b6e

0000e02c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e02c:	4b05      	ldr	r3, [pc, #20]	; (e044 <bt_pub_key_get+0x18>)
    e02e:	f3bf 8f5b 	dmb	ish
    e032:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    e034:	4804      	ldr	r0, [pc, #16]	; (e048 <bt_pub_key_get+0x1c>)
    e036:	f3bf 8f5b 	dmb	ish
		return pub_key;
    e03a:	f013 0f08 	tst.w	r3, #8
}
    e03e:	bf08      	it	eq
    e040:	2000      	moveq	r0, #0
    e042:	4770      	bx	lr
    e044:	200000cc 	.word	0x200000cc
    e048:	20004955 	.word	0x20004955

0000e04c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    e04c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
    e04e:	4d29      	ldr	r5, [pc, #164]	; (e0f4 <bt_dh_key_gen+0xa8>)
    e050:	682b      	ldr	r3, [r5, #0]
    e052:	428b      	cmp	r3, r1
{
    e054:	b089      	sub	sp, #36	; 0x24
    e056:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    e058:	d045      	beq.n	e0e6 <bt_dh_key_gen+0x9a>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    e05a:	b123      	cbz	r3, e066 <bt_dh_key_gen+0x1a>
		return -EBUSY;
    e05c:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    e060:	4620      	mov	r0, r4
    e062:	b009      	add	sp, #36	; 0x24
    e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e066:	4b24      	ldr	r3, [pc, #144]	; (e0f8 <bt_dh_key_gen+0xac>)
    e068:	f3bf 8f5b 	dmb	ish
    e06c:	681a      	ldr	r2, [r3, #0]
    e06e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    e072:	f3c2 1700 	ubfx	r7, r2, #4, #1
    e076:	06d2      	lsls	r2, r2, #27
    e078:	d4f0      	bmi.n	e05c <bt_dh_key_gen+0x10>
    e07a:	f3bf 8f5b 	dmb	ish
    e07e:	681b      	ldr	r3, [r3, #0]
    e080:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    e084:	071b      	lsls	r3, r3, #28
    e086:	d531      	bpl.n	e0ec <bt_dh_key_gen+0xa0>
	dh_key_cb = cb;
    e088:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    e08a:	f242 0026 	movw	r0, #8230	; 0x2026
    e08e:	2140      	movs	r1, #64	; 0x40
    e090:	f7fd ff4c 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
    e094:	4604      	mov	r4, r0
    e096:	b318      	cbz	r0, e0e0 <bt_dh_key_gen+0x94>
	return net_buf_simple_add(&buf->b, len);
    e098:	2140      	movs	r1, #64	; 0x40
    e09a:	3008      	adds	r0, #8
    e09c:	f01c fca5 	bl	2a9ea <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    e0a0:	2240      	movs	r2, #64	; 0x40
    e0a2:	4631      	mov	r1, r6
    e0a4:	f01a fa87 	bl	285b6 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    e0a8:	4621      	mov	r1, r4
    e0aa:	463a      	mov	r2, r7
    e0ac:	f242 0026 	movw	r0, #8230	; 0x2026
    e0b0:	f7fe f8ac 	bl	c20c <bt_hci_cmd_send_sync>
	if (err) {
    e0b4:	4604      	mov	r4, r0
    e0b6:	2800      	cmp	r0, #0
    e0b8:	d0d2      	beq.n	e060 <bt_dh_key_gen+0x14>
		BT_WARN("Failed to generate DHKey (err %d)", err);
    e0ba:	4810      	ldr	r0, [pc, #64]	; (e0fc <bt_dh_key_gen+0xb0>)
    e0bc:	6802      	ldr	r2, [r0, #0]
		dh_key_cb = NULL;
    e0be:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
    e0c0:	f012 0f06 	tst.w	r2, #6
		dh_key_cb = NULL;
    e0c4:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
    e0c6:	d0cb      	beq.n	e060 <bt_dh_key_gen+0x14>
    e0c8:	4a0d      	ldr	r2, [pc, #52]	; (e100 <bt_dh_key_gen+0xb4>)
    e0ca:	e9cd 2406 	strd	r2, r4, [sp, #24]
    e0ce:	2203      	movs	r2, #3
    e0d0:	9201      	str	r2, [sp, #4]
    e0d2:	9205      	str	r2, [sp, #20]
    e0d4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e0d8:	aa05      	add	r2, sp, #20
    e0da:	f017 fd81 	bl	25be0 <z_impl_z_log_msg2_static_create>
    e0de:	e7bf      	b.n	e060 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
    e0e0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e0e4:	e7e9      	b.n	e0ba <bt_dh_key_gen+0x6e>
		return -EALREADY;
    e0e6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e0ea:	e7b9      	b.n	e060 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
    e0ec:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    e0f0:	e7b6      	b.n	e060 <bt_dh_key_gen+0x14>
    e0f2:	bf00      	nop
    e0f4:	20002a5c 	.word	0x20002a5c
    e0f8:	200000cc 	.word	0x200000cc
    e0fc:	200009f4 	.word	0x200009f4
    e100:	00030b98 	.word	0x00030b98

0000e104 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e106:	4c1b      	ldr	r4, [pc, #108]	; (e174 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    e108:	6886      	ldr	r6, [r0, #8]
    e10a:	f3bf 8f5b 	dmb	ish
    e10e:	e854 3f00 	ldrex	r3, [r4]
    e112:	f023 0310 	bic.w	r3, r3, #16
    e116:	e844 3200 	strex	r2, r3, [r4]
    e11a:	2a00      	cmp	r2, #0
    e11c:	d1f7      	bne.n	e10e <bt_hci_evt_le_pkey_complete+0xa>
    e11e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    e122:	7833      	ldrb	r3, [r6, #0]
    e124:	b983      	cbnz	r3, e148 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    e126:	4814      	ldr	r0, [pc, #80]	; (e178 <bt_hci_evt_le_pkey_complete+0x74>)
    e128:	2240      	movs	r2, #64	; 0x40
    e12a:	1c71      	adds	r1, r6, #1
    e12c:	f01a fa43 	bl	285b6 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e130:	f3bf 8f5b 	dmb	ish
    e134:	e854 3f00 	ldrex	r3, [r4]
    e138:	f043 0308 	orr.w	r3, r3, #8
    e13c:	e844 3200 	strex	r2, r3, [r4]
    e140:	2a00      	cmp	r2, #0
    e142:	d1f7      	bne.n	e134 <bt_hci_evt_le_pkey_complete+0x30>
    e144:	f3bf 8f5b 	dmb	ish
	return list->head;
    e148:	4d0c      	ldr	r5, [pc, #48]	; (e17c <bt_hci_evt_le_pkey_complete+0x78>)
    e14a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    e14c:	b16c      	cbz	r4, e16a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    e14e:	4f0a      	ldr	r7, [pc, #40]	; (e178 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    e150:	3c04      	subs	r4, #4
		if (cb->func) {
    e152:	6823      	ldr	r3, [r4, #0]
    e154:	b12b      	cbz	r3, e162 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
    e156:	7832      	ldrb	r2, [r6, #0]
    e158:	2a00      	cmp	r2, #0
    e15a:	bf0c      	ite	eq
    e15c:	4638      	moveq	r0, r7
    e15e:	2000      	movne	r0, #0
    e160:	4798      	blx	r3
	return node->next;
    e162:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    e164:	b10c      	cbz	r4, e16a <bt_hci_evt_le_pkey_complete+0x66>
    e166:	3c04      	subs	r4, #4
    e168:	e7f3      	b.n	e152 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
    e16a:	2300      	movs	r3, #0
	list->tail = NULL;
    e16c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    e170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e172:	bf00      	nop
    e174:	200000cc 	.word	0x200000cc
    e178:	20004955 	.word	0x20004955
    e17c:	20002a60 	.word	0x20002a60

0000e180 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    e180:	4905      	ldr	r1, [pc, #20]	; (e198 <bt_hci_evt_le_dhkey_complete+0x18>)
    e182:	680b      	ldr	r3, [r1, #0]
    e184:	b133      	cbz	r3, e194 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    e186:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    e188:	2000      	movs	r0, #0
    e18a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    e18c:	7811      	ldrb	r1, [r2, #0]
    e18e:	b901      	cbnz	r1, e192 <bt_hci_evt_le_dhkey_complete+0x12>
    e190:	1c50      	adds	r0, r2, #1
    e192:	4718      	bx	r3
	}
}
    e194:	4770      	bx	lr
    e196:	bf00      	nop
    e198:	20002a5c 	.word	0x20002a5c

0000e19c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    e19c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    e19e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    e1a2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    e1a4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    e1a6:	4801      	ldr	r0, [pc, #4]	; (e1ac <tx_free+0x10>)
    e1a8:	f01d ba44 	b.w	2b634 <k_queue_append>
    e1ac:	20000bb8 	.word	0x20000bb8

0000e1b0 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    e1b0:	4b0e      	ldr	r3, [pc, #56]	; (e1ec <notify_connected+0x3c>)
{
    e1b2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    e1b4:	681d      	ldr	r5, [r3, #0]
{
    e1b6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    e1b8:	b955      	cbnz	r5, e1d0 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e1ba:	4d0d      	ldr	r5, [pc, #52]	; (e1f0 <notify_connected+0x40>)
    e1bc:	4e0d      	ldr	r6, [pc, #52]	; (e1f4 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    e1be:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e1c0:	42b5      	cmp	r5, r6
    e1c2:	d30c      	bcc.n	e1de <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    e1c4:	b989      	cbnz	r1, e1ea <notify_connected+0x3a>
		bt_gatt_connected(conn);
    e1c6:	4620      	mov	r0, r4
	}
}
    e1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    e1cc:	f002 bffa 	b.w	111c4 <bt_gatt_connected>
		if (cb->connected) {
    e1d0:	682b      	ldr	r3, [r5, #0]
    e1d2:	b113      	cbz	r3, e1da <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    e1d4:	7b21      	ldrb	r1, [r4, #12]
    e1d6:	4620      	mov	r0, r4
    e1d8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    e1da:	69ad      	ldr	r5, [r5, #24]
    e1dc:	e7ec      	b.n	e1b8 <notify_connected+0x8>
		if (cb->connected) {
    e1de:	682b      	ldr	r3, [r5, #0]
    e1e0:	b10b      	cbz	r3, e1e6 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    e1e2:	4620      	mov	r0, r4
    e1e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e1e6:	351c      	adds	r5, #28
    e1e8:	e7e9      	b.n	e1be <notify_connected+0xe>
}
    e1ea:	bd70      	pop	{r4, r5, r6, pc}
    e1ec:	20002a6c 	.word	0x20002a6c
    e1f0:	0002c1cc 	.word	0x0002c1cc
    e1f4:	0002c1cc 	.word	0x0002c1cc

0000e1f8 <send_frag>:
{
    e1f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    e1fc:	694d      	ldr	r5, [r1, #20]
{
    e1fe:	b089      	sub	sp, #36	; 0x24
    e200:	4604      	mov	r4, r0
    e202:	460e      	mov	r6, r1
    e204:	4690      	mov	r8, r2
    e206:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    e208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e20c:	4846      	ldr	r0, [pc, #280]	; (e328 <send_frag+0x130>)
    e20e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e212:	f015 fc79 	bl	23b08 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    e216:	7b63      	ldrb	r3, [r4, #13]
    e218:	2b07      	cmp	r3, #7
    e21a:	d156      	bne.n	e2ca <send_frag+0xd2>
	__asm__ volatile(
    e21c:	f04f 0320 	mov.w	r3, #32
    e220:	f3ef 8211 	mrs	r2, BASEPRI
    e224:	f383 8812 	msr	BASEPRI_MAX, r3
    e228:	f3bf 8f6f 	isb	sy
	if (tx) {
    e22c:	69a3      	ldr	r3, [r4, #24]
    e22e:	2d00      	cmp	r5, #0
    e230:	d05e      	beq.n	e2f0 <send_frag+0xf8>
	parent->next = child;
    e232:	2100      	movs	r1, #0
    e234:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    e236:	2b00      	cmp	r3, #0
    e238:	d157      	bne.n	e2ea <send_frag+0xf2>
	list->head = node;
    e23a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    e23e:	f382 8811 	msr	BASEPRI, r2
    e242:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    e246:	2104      	movs	r1, #4
    e248:	f106 0008 	add.w	r0, r6, #8
    e24c:	f01c fbee 	bl	2aa2c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    e250:	8823      	ldrh	r3, [r4, #0]
    e252:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    e256:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    e25a:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    e25c:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    e260:	3b04      	subs	r3, #4
    e262:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e264:	2302      	movs	r3, #2
    e266:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    e268:	4630      	mov	r0, r6
    e26a:	f01a fba4 	bl	289b6 <bt_send>
	if (err) {
    e26e:	4603      	mov	r3, r0
    e270:	2800      	cmp	r0, #0
    e272:	d057      	beq.n	e324 <send_frag+0x12c>
		BT_ERR("Unable to send to driver (err %d)", err);
    e274:	482d      	ldr	r0, [pc, #180]	; (e32c <send_frag+0x134>)
    e276:	6802      	ldr	r2, [r0, #0]
    e278:	0752      	lsls	r2, r2, #29
    e27a:	d00a      	beq.n	e292 <send_frag+0x9a>
    e27c:	4a2c      	ldr	r2, [pc, #176]	; (e330 <send_frag+0x138>)
    e27e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e282:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e286:	2303      	movs	r3, #3
    e288:	aa05      	add	r2, sp, #20
    e28a:	9301      	str	r3, [sp, #4]
    e28c:	9305      	str	r3, [sp, #20]
    e28e:	f01a fc5b 	bl	28b48 <z_log_msg2_static_create.constprop.0>
	__asm__ volatile(
    e292:	f04f 0320 	mov.w	r3, #32
    e296:	f3ef 8011 	mrs	r0, BASEPRI
    e29a:	f383 8812 	msr	BASEPRI_MAX, r3
    e29e:	f3bf 8f6f 	isb	sy
		if (tx) {
    e2a2:	2d00      	cmp	r5, #0
    e2a4:	d038      	beq.n	e318 <send_frag+0x120>
	return list->head;
    e2a6:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e2a8:	2200      	movs	r2, #0
    e2aa:	b153      	cbz	r3, e2c2 <send_frag+0xca>
    e2ac:	429d      	cmp	r5, r3
    e2ae:	d130      	bne.n	e312 <send_frag+0x11a>
	return node->next;
    e2b0:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    e2b2:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    e2b4:	bb42      	cbnz	r2, e308 <send_frag+0x110>
    e2b6:	428d      	cmp	r5, r1
	list->head = node;
    e2b8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    e2ba:	d100      	bne.n	e2be <send_frag+0xc6>
	list->tail = node;
    e2bc:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    e2be:	2300      	movs	r3, #0
    e2c0:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    e2c2:	f380 8811 	msr	BASEPRI, r0
    e2c6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    e2ca:	4817      	ldr	r0, [pc, #92]	; (e328 <send_frag+0x130>)
    e2cc:	f015 fbf6 	bl	23abc <z_impl_k_sem_give>
	if (tx) {
    e2d0:	b115      	cbz	r5, e2d8 <send_frag+0xe0>
		tx_free(tx);
    e2d2:	4628      	mov	r0, r5
    e2d4:	f7ff ff62 	bl	e19c <tx_free>
	if (always_consume) {
    e2d8:	b11f      	cbz	r7, e2e2 <send_frag+0xea>
		net_buf_unref(buf);
    e2da:	4630      	mov	r0, r6
    e2dc:	f010 ffc6 	bl	1f26c <net_buf_unref>
	return false;
    e2e0:	2700      	movs	r7, #0
}
    e2e2:	4638      	mov	r0, r7
    e2e4:	b009      	add	sp, #36	; 0x24
    e2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e2ea:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e2ec:	61a5      	str	r5, [r4, #24]
}
    e2ee:	e7a6      	b.n	e23e <send_frag+0x46>
		if (tail_tx) {
    e2f0:	b133      	cbz	r3, e300 <send_frag+0x108>
			pending_no_cb = &tail_tx->pending_no_cb;
    e2f2:	f103 090c 	add.w	r9, r3, #12
    e2f6:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    e2f8:	3301      	adds	r3, #1
    e2fa:	f8c9 3000 	str.w	r3, [r9]
    e2fe:	e79e      	b.n	e23e <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
    e300:	69e3      	ldr	r3, [r4, #28]
    e302:	f104 091c 	add.w	r9, r4, #28
    e306:	e7f7      	b.n	e2f8 <send_frag+0x100>
Z_GENLIST_REMOVE(slist, snode)
    e308:	428d      	cmp	r5, r1
	parent->next = child;
    e30a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e30c:	bf08      	it	eq
    e30e:	61a2      	streq	r2, [r4, #24]
}
    e310:	e7d5      	b.n	e2be <send_frag+0xc6>
	return node->next;
    e312:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e314:	681b      	ldr	r3, [r3, #0]
    e316:	e7c8      	b.n	e2aa <send_frag+0xb2>
			(*pending_no_cb)--;
    e318:	f8d9 3000 	ldr.w	r3, [r9]
    e31c:	3b01      	subs	r3, #1
    e31e:	f8c9 3000 	str.w	r3, [r9]
    e322:	e7ce      	b.n	e2c2 <send_frag+0xca>
	return true;
    e324:	2701      	movs	r7, #1
    e326:	e7dc      	b.n	e2e2 <send_frag+0xea>
    e328:	20000100 	.word	0x20000100
    e32c:	20000994 	.word	0x20000994
    e330:	000303a9 	.word	0x000303a9

0000e334 <bt_conn_get_pkts>:
}
    e334:	4800      	ldr	r0, [pc, #0]	; (e338 <bt_conn_get_pkts+0x4>)
    e336:	4770      	bx	lr
    e338:	20000100 	.word	0x20000100

0000e33c <bt_conn_new>:
{
    e33c:	b538      	push	{r3, r4, r5, lr}
    e33e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    e340:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e342:	2501      	movs	r5, #1
    e344:	428b      	cmp	r3, r1
    e346:	d102      	bne.n	e34e <bt_conn_new+0x12>
		return NULL;
    e348:	2400      	movs	r4, #0
}
    e34a:	4620      	mov	r0, r4
    e34c:	bd38      	pop	{r3, r4, r5, pc}
    e34e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    e352:	f3bf 8f5b 	dmb	ish
    e356:	e852 0f00 	ldrex	r0, [r2]
    e35a:	2800      	cmp	r0, #0
    e35c:	d104      	bne.n	e368 <bt_conn_new+0x2c>
    e35e:	e842 5c00 	strex	ip, r5, [r2]
    e362:	f1bc 0f00 	cmp.w	ip, #0
    e366:	d1f6      	bne.n	e356 <bt_conn_new+0x1a>
    e368:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    e36c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e370:	d002      	beq.n	e378 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    e372:	3301      	adds	r3, #1
    e374:	4604      	mov	r4, r0
    e376:	e7e5      	b.n	e344 <bt_conn_new+0x8>
	if (!conn) {
    e378:	2c00      	cmp	r4, #0
    e37a:	d0e6      	beq.n	e34a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    e37c:	22b8      	movs	r2, #184	; 0xb8
    e37e:	2100      	movs	r1, #0
    e380:	4620      	mov	r0, r4
    e382:	f01a f923 	bl	285cc <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    e386:	f104 0058 	add.w	r0, r4, #88	; 0x58
    e38a:	4904      	ldr	r1, [pc, #16]	; (e39c <bt_conn_new+0x60>)
    e38c:	f01d fa49 	bl	2b822 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    e390:	4903      	ldr	r1, [pc, #12]	; (e3a0 <bt_conn_new+0x64>)
    e392:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e396:	f01d fa1e 	bl	2b7d6 <k_work_init>
	return conn;
    e39a:	e7d6      	b.n	e34a <bt_conn_new+0xe>
    e39c:	0000ecb1 	.word	0x0000ecb1
    e3a0:	00028bcb 	.word	0x00028bcb

0000e3a4 <bt_conn_recv>:
{
    e3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3a6:	b089      	sub	sp, #36	; 0x24
    e3a8:	4616      	mov	r6, r2
    e3aa:	af00      	add	r7, sp, #0
    e3ac:	4604      	mov	r4, r0
    e3ae:	460d      	mov	r5, r1
	tx_notify(conn);
    e3b0:	f01a fbe8 	bl	28b84 <tx_notify>
	switch (flags) {
    e3b4:	2e01      	cmp	r6, #1
    e3b6:	d039      	beq.n	e42c <bt_conn_recv+0x88>
    e3b8:	2e02      	cmp	r6, #2
    e3ba:	d17a      	bne.n	e4b2 <bt_conn_recv+0x10e>
		if (conn->rx) {
    e3bc:	6923      	ldr	r3, [r4, #16]
    e3be:	b183      	cbz	r3, e3e2 <bt_conn_recv+0x3e>
			BT_ERR("Unexpected first L2CAP frame");
    e3c0:	4847      	ldr	r0, [pc, #284]	; (e4e0 <bt_conn_recv+0x13c>)
    e3c2:	6803      	ldr	r3, [r0, #0]
    e3c4:	075a      	lsls	r2, r3, #29
    e3c6:	d009      	beq.n	e3dc <bt_conn_recv+0x38>
    e3c8:	4b46      	ldr	r3, [pc, #280]	; (e4e4 <bt_conn_recv+0x140>)
    e3ca:	61bb      	str	r3, [r7, #24]
    e3cc:	f107 0214 	add.w	r2, r7, #20
    e3d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e3d4:	607e      	str	r6, [r7, #4]
    e3d6:	617e      	str	r6, [r7, #20]
    e3d8:	f01a fbb6 	bl	28b48 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    e3dc:	4620      	mov	r0, r4
    e3de:	f01a fbf7 	bl	28bd0 <bt_conn_reset_rx_state>
		conn->rx = buf;
    e3e2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    e3e4:	6921      	ldr	r1, [r4, #16]
    e3e6:	898a      	ldrh	r2, [r1, #12]
    e3e8:	2a01      	cmp	r2, #1
    e3ea:	d936      	bls.n	e45a <bt_conn_recv+0xb6>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    e3ec:	688b      	ldr	r3, [r1, #8]
    e3ee:	881b      	ldrh	r3, [r3, #0]
    e3f0:	3304      	adds	r3, #4
    e3f2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    e3f4:	429a      	cmp	r2, r3
    e3f6:	d330      	bcc.n	e45a <bt_conn_recv+0xb6>
	if (conn->rx->len > acl_total_len) {
    e3f8:	d96a      	bls.n	e4d0 <bt_conn_recv+0x12c>
		BT_ERR("ACL len mismatch (%u > %u)",
    e3fa:	4839      	ldr	r0, [pc, #228]	; (e4e0 <bt_conn_recv+0x13c>)
    e3fc:	6802      	ldr	r2, [r0, #0]
    e3fe:	0752      	lsls	r2, r2, #29
    e400:	d010      	beq.n	e424 <bt_conn_recv+0x80>
    e402:	466d      	mov	r5, sp
    e404:	b088      	sub	sp, #32
    e406:	466a      	mov	r2, sp
    e408:	4e37      	ldr	r6, [pc, #220]	; (e4e8 <bt_conn_recv+0x144>)
    e40a:	6116      	str	r6, [r2, #16]
    e40c:	8989      	ldrh	r1, [r1, #12]
    e40e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    e412:	2304      	movs	r3, #4
    e414:	f842 3f0c 	str.w	r3, [r2, #12]!
    e418:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e41c:	60bb      	str	r3, [r7, #8]
    e41e:	f01a fb93 	bl	28b48 <z_log_msg2_static_create.constprop.0>
    e422:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
    e424:	4620      	mov	r0, r4
    e426:	f01a fbd3 	bl	28bd0 <bt_conn_reset_rx_state>
		return;
    e42a:	e016      	b.n	e45a <bt_conn_recv+0xb6>
		if (!conn->rx) {
    e42c:	6920      	ldr	r0, [r4, #16]
    e42e:	b9b8      	cbnz	r0, e460 <bt_conn_recv+0xbc>
			BT_ERR("Unexpected L2CAP continuation");
    e430:	482b      	ldr	r0, [pc, #172]	; (e4e0 <bt_conn_recv+0x13c>)
    e432:	6803      	ldr	r3, [r0, #0]
    e434:	075b      	lsls	r3, r3, #29
    e436:	d00a      	beq.n	e44e <bt_conn_recv+0xaa>
    e438:	4b2c      	ldr	r3, [pc, #176]	; (e4ec <bt_conn_recv+0x148>)
    e43a:	61bb      	str	r3, [r7, #24]
    e43c:	2302      	movs	r3, #2
    e43e:	607b      	str	r3, [r7, #4]
    e440:	617b      	str	r3, [r7, #20]
    e442:	f107 0214 	add.w	r2, r7, #20
    e446:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e44a:	f01a fb7d 	bl	28b48 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    e44e:	4620      	mov	r0, r4
    e450:	f01a fbbe 	bl	28bd0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    e454:	4628      	mov	r0, r5
    e456:	f010 ff09 	bl	1f26c <net_buf_unref>
}
    e45a:	3724      	adds	r7, #36	; 0x24
    e45c:	46bd      	mov	sp, r7
    e45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!buf->len) {
    e460:	89ae      	ldrh	r6, [r5, #12]
    e462:	2e00      	cmp	r6, #0
    e464:	d0f6      	beq.n	e454 <bt_conn_recv+0xb0>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    e466:	3008      	adds	r0, #8
    e468:	f01c fb0c 	bl	2aa84 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    e46c:	4286      	cmp	r6, r0
    e46e:	d916      	bls.n	e49e <bt_conn_recv+0xfa>
			BT_ERR("Not enough buffer space for L2CAP data");
    e470:	481b      	ldr	r0, [pc, #108]	; (e4e0 <bt_conn_recv+0x13c>)
    e472:	6803      	ldr	r3, [r0, #0]
    e474:	075e      	lsls	r6, r3, #29
    e476:	d00a      	beq.n	e48e <bt_conn_recv+0xea>
    e478:	4b1d      	ldr	r3, [pc, #116]	; (e4f0 <bt_conn_recv+0x14c>)
    e47a:	61bb      	str	r3, [r7, #24]
    e47c:	f107 0214 	add.w	r2, r7, #20
    e480:	2302      	movs	r3, #2
    e482:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e486:	607b      	str	r3, [r7, #4]
    e488:	617b      	str	r3, [r7, #20]
    e48a:	f01a fb5d 	bl	28b48 <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    e48e:	6921      	ldr	r1, [r4, #16]
    e490:	2200      	movs	r2, #0
    e492:	4620      	mov	r0, r4
    e494:	f000 fed8 	bl	f248 <bt_l2cap_recv>
			conn->rx = NULL;
    e498:	2300      	movs	r3, #0
    e49a:	6123      	str	r3, [r4, #16]
    e49c:	e7da      	b.n	e454 <bt_conn_recv+0xb0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e49e:	6920      	ldr	r0, [r4, #16]
    e4a0:	89aa      	ldrh	r2, [r5, #12]
    e4a2:	68a9      	ldr	r1, [r5, #8]
    e4a4:	3008      	adds	r0, #8
    e4a6:	f01c faa6 	bl	2a9f6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    e4aa:	4628      	mov	r0, r5
    e4ac:	f010 fede 	bl	1f26c <net_buf_unref>
		break;
    e4b0:	e798      	b.n	e3e4 <bt_conn_recv+0x40>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    e4b2:	480b      	ldr	r0, [pc, #44]	; (e4e0 <bt_conn_recv+0x13c>)
    e4b4:	6803      	ldr	r3, [r0, #0]
    e4b6:	0759      	lsls	r1, r3, #29
    e4b8:	d0c9      	beq.n	e44e <bt_conn_recv+0xaa>
    e4ba:	4b0e      	ldr	r3, [pc, #56]	; (e4f4 <bt_conn_recv+0x150>)
	switch (flags) {
    e4bc:	e9c7 3606 	strd	r3, r6, [r7, #24]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    e4c0:	2303      	movs	r3, #3
    e4c2:	607b      	str	r3, [r7, #4]
    e4c4:	617b      	str	r3, [r7, #20]
    e4c6:	f107 0214 	add.w	r2, r7, #20
    e4ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e4ce:	e7bc      	b.n	e44a <bt_conn_recv+0xa6>
	conn->rx = NULL;
    e4d0:	2300      	movs	r3, #0
    e4d2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    e4d4:	2201      	movs	r2, #1
    e4d6:	4620      	mov	r0, r4
    e4d8:	f000 feb6 	bl	f248 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    e4dc:	e7bd      	b.n	e45a <bt_conn_recv+0xb6>
    e4de:	bf00      	nop
    e4e0:	20000994 	.word	0x20000994
    e4e4:	00030c01 	.word	0x00030c01
    e4e8:	00030c81 	.word	0x00030c81
    e4ec:	00030c1e 	.word	0x00030c1e
    e4f0:	00030c3c 	.word	0x00030c3c
    e4f4:	00030c63 	.word	0x00030c63

0000e4f8 <bt_conn_send_cb>:
{
    e4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4fc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    e4fe:	7b43      	ldrb	r3, [r0, #13]
    e500:	2b07      	cmp	r3, #7
{
    e502:	b088      	sub	sp, #32
    e504:	4605      	mov	r5, r0
    e506:	460e      	mov	r6, r1
    e508:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    e50a:	d012      	beq.n	e532 <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
    e50c:	482c      	ldr	r0, [pc, #176]	; (e5c0 <bt_conn_send_cb+0xc8>)
    e50e:	6803      	ldr	r3, [r0, #0]
    e510:	075a      	lsls	r2, r3, #29
    e512:	d009      	beq.n	e528 <bt_conn_send_cb+0x30>
    e514:	4b2b      	ldr	r3, [pc, #172]	; (e5c4 <bt_conn_send_cb+0xcc>)
    e516:	9306      	str	r3, [sp, #24]
    e518:	aa05      	add	r2, sp, #20
    e51a:	2302      	movs	r3, #2
    e51c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e520:	9301      	str	r3, [sp, #4]
    e522:	9305      	str	r3, [sp, #20]
    e524:	f01a fb10 	bl	28b48 <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
    e528:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    e52c:	b008      	add	sp, #32
    e52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    e532:	2a00      	cmp	r2, #0
    e534:	d042      	beq.n	e5bc <bt_conn_send_cb+0xc4>
	return z_impl_z_current_get();
    e536:	f015 ffbf 	bl	244b8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    e53a:	4b23      	ldr	r3, [pc, #140]	; (e5c8 <bt_conn_send_cb+0xd0>)
    e53c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    e53e:	4823      	ldr	r0, [pc, #140]	; (e5cc <bt_conn_send_cb+0xd4>)
    e540:	bf07      	ittee	eq
    e542:	2200      	moveq	r2, #0
    e544:	2300      	moveq	r3, #0
    e546:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    e54a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    e54e:	f015 fa81 	bl	23a54 <z_impl_k_queue_get>
    e552:	4604      	mov	r4, r0
		if (!tx) {
    e554:	b980      	cbnz	r0, e578 <bt_conn_send_cb+0x80>
			BT_ERR("Unable to allocate TX context");
    e556:	481a      	ldr	r0, [pc, #104]	; (e5c0 <bt_conn_send_cb+0xc8>)
    e558:	6803      	ldr	r3, [r0, #0]
    e55a:	075b      	lsls	r3, r3, #29
    e55c:	d009      	beq.n	e572 <bt_conn_send_cb+0x7a>
    e55e:	4b1c      	ldr	r3, [pc, #112]	; (e5d0 <bt_conn_send_cb+0xd8>)
    e560:	9306      	str	r3, [sp, #24]
    e562:	aa05      	add	r2, sp, #20
    e564:	2302      	movs	r3, #2
    e566:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e56a:	9301      	str	r3, [sp, #4]
    e56c:	9305      	str	r3, [sp, #20]
    e56e:	f01a faeb 	bl	28b48 <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
    e572:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e576:	e7d9      	b.n	e52c <bt_conn_send_cb+0x34>
		if (conn->state != BT_CONN_CONNECTED) {
    e578:	7b6b      	ldrb	r3, [r5, #13]
    e57a:	2b07      	cmp	r3, #7
    e57c:	d012      	beq.n	e5a4 <bt_conn_send_cb+0xac>
			BT_WARN("Disconnected while allocating context");
    e57e:	4810      	ldr	r0, [pc, #64]	; (e5c0 <bt_conn_send_cb+0xc8>)
    e580:	6803      	ldr	r3, [r0, #0]
    e582:	f013 0f06 	tst.w	r3, #6
    e586:	d009      	beq.n	e59c <bt_conn_send_cb+0xa4>
    e588:	4b12      	ldr	r3, [pc, #72]	; (e5d4 <bt_conn_send_cb+0xdc>)
    e58a:	9306      	str	r3, [sp, #24]
    e58c:	aa05      	add	r2, sp, #20
    e58e:	2302      	movs	r3, #2
    e590:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e594:	9301      	str	r3, [sp, #4]
    e596:	9305      	str	r3, [sp, #20]
    e598:	f01a fad6 	bl	28b48 <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
    e59c:	4620      	mov	r0, r4
    e59e:	f7ff fdfd 	bl	e19c <tx_free>
    e5a2:	e7c1      	b.n	e528 <bt_conn_send_cb+0x30>
		tx->pending_no_cb = 0U;
    e5a4:	2300      	movs	r3, #0
		tx->user_data = user_data;
    e5a6:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    e5aa:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    e5ac:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    e5ae:	f105 0038 	add.w	r0, r5, #56	; 0x38
    e5b2:	4631      	mov	r1, r6
    e5b4:	f01c f9da 	bl	2a96c <net_buf_put>
	return 0;
    e5b8:	2000      	movs	r0, #0
    e5ba:	e7b7      	b.n	e52c <bt_conn_send_cb+0x34>
		tx_data(buf)->tx = NULL;
    e5bc:	614a      	str	r2, [r1, #20]
    e5be:	e7f6      	b.n	e5ae <bt_conn_send_cb+0xb6>
    e5c0:	20000994 	.word	0x20000994
    e5c4:	00030c9c 	.word	0x00030c9c
    e5c8:	20002318 	.word	0x20002318
    e5cc:	20000bb8 	.word	0x20000bb8
    e5d0:	00030cab 	.word	0x00030cab
    e5d4:	00030cc9 	.word	0x00030cc9

0000e5d8 <bt_conn_prepare_events>:
{
    e5d8:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
    e5da:	4b16      	ldr	r3, [pc, #88]	; (e634 <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
    e5dc:	4c16      	ldr	r4, [pc, #88]	; (e638 <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
    e5de:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    e5e0:	2101      	movs	r1, #1
{
    e5e2:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    e5e4:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    e5e6:	f01d fc57 	bl	2be98 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    e5ea:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    e5ee:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    e5f2:	f01a faa3 	bl	28b3c <atomic_get>
    e5f6:	b908      	cbnz	r0, e5fc <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    e5f8:	2001      	movs	r0, #1
}
    e5fa:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    e5fc:	7b63      	ldrb	r3, [r4, #13]
    e5fe:	b953      	cbnz	r3, e616 <bt_conn_prepare_events+0x3e>
    e600:	f06f 0140 	mvn.w	r1, #64	; 0x40
    e604:	1d20      	adds	r0, r4, #4
    e606:	f01a fa8a 	bl	28b1e <atomic_and>
    e60a:	0643      	lsls	r3, r0, #25
    e60c:	d503      	bpl.n	e616 <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
    e60e:	4620      	mov	r0, r4
    e610:	f01a fae7 	bl	28be2 <conn_cleanup>
    e614:	e7f0      	b.n	e5f8 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    e616:	7b63      	ldrb	r3, [r4, #13]
    e618:	2b07      	cmp	r3, #7
    e61a:	d1ed      	bne.n	e5f8 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    e61c:	4b07      	ldr	r3, [pc, #28]	; (e63c <bt_conn_prepare_events+0x64>)
    e61e:	4630      	mov	r0, r6
    e620:	2200      	movs	r2, #0
    e622:	2104      	movs	r1, #4
    e624:	f01d fc38 	bl	2be98 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    e628:	2301      	movs	r3, #1
    e62a:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    e62e:	2002      	movs	r0, #2
	return ev_count;
    e630:	e7e3      	b.n	e5fa <bt_conn_prepare_events+0x22>
    e632:	bf00      	nop
    e634:	20000358 	.word	0x20000358
    e638:	200018c8 	.word	0x200018c8
    e63c:	20001900 	.word	0x20001900

0000e640 <bt_conn_lookup_handle>:
{
    e640:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    e642:	2101      	movs	r1, #1
    e644:	4801      	ldr	r0, [pc, #4]	; (e64c <bt_conn_lookup_handle+0xc>)
    e646:	f01a bb05 	b.w	28c54 <conn_lookup_handle>
    e64a:	bf00      	nop
    e64c:	200018c8 	.word	0x200018c8

0000e650 <bt_conn_set_state>:
{
    e650:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    e652:	7b46      	ldrb	r6, [r0, #13]
    e654:	42b1      	cmp	r1, r6
{
    e656:	b08c      	sub	sp, #48	; 0x30
    e658:	4604      	mov	r4, r0
    e65a:	460d      	mov	r5, r1
	if (conn->state == state) {
    e65c:	d116      	bne.n	e68c <bt_conn_set_state+0x3c>
		BT_WARN("no transition %s", state2str(state));
    e65e:	4b87      	ldr	r3, [pc, #540]	; (e87c <bt_conn_set_state+0x22c>)
    e660:	681b      	ldr	r3, [r3, #0]
    e662:	f013 0f06 	tst.w	r3, #6
    e666:	d00f      	beq.n	e688 <bt_conn_set_state+0x38>
	switch (state) {
    e668:	2908      	cmp	r1, #8
    e66a:	bf96      	itet	ls
    e66c:	4b84      	ldrls	r3, [pc, #528]	; (e880 <bt_conn_set_state+0x230>)
		BT_WARN("no transition %s", state2str(state));
    e66e:	4b85      	ldrhi	r3, [pc, #532]	; (e884 <bt_conn_set_state+0x234>)
    e670:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
    e674:	9302      	str	r3, [sp, #8]
    e676:	4b84      	ldr	r3, [pc, #528]	; (e888 <bt_conn_set_state+0x238>)
    e678:	9301      	str	r3, [sp, #4]
    e67a:	2300      	movs	r3, #0
    e67c:	497f      	ldr	r1, [pc, #508]	; (e87c <bt_conn_set_state+0x22c>)
    e67e:	9300      	str	r3, [sp, #0]
    e680:	2202      	movs	r2, #2
    e682:	4618      	mov	r0, r3
    e684:	f01a fa63 	bl	28b4e <z_log_msg2_runtime_create.constprop.0>
}
    e688:	b00c      	add	sp, #48	; 0x30
    e68a:	bd70      	pop	{r4, r5, r6, pc}
	conn->state = state;
    e68c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    e68e:	b1de      	cbz	r6, e6c8 <bt_conn_set_state+0x78>
    e690:	2e06      	cmp	r6, #6
    e692:	d01f      	beq.n	e6d4 <bt_conn_set_state+0x84>
	switch (conn->state) {
    e694:	7b63      	ldrb	r3, [r4, #13]
    e696:	2b08      	cmp	r3, #8
    e698:	f200 80e8 	bhi.w	e86c <bt_conn_set_state+0x21c>
    e69c:	a201      	add	r2, pc, #4	; (adr r2, e6a4 <bt_conn_set_state+0x54>)
    e69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e6a2:	bf00      	nop
    e6a4:	0000e731 	.word	0x0000e731
    e6a8:	0000e6e3 	.word	0x0000e6e3
    e6ac:	0000e689 	.word	0x0000e689
    e6b0:	0000e689 	.word	0x0000e689
    e6b4:	0000e689 	.word	0x0000e689
    e6b8:	0000e689 	.word	0x0000e689
    e6bc:	0000e7e3 	.word	0x0000e7e3
    e6c0:	0000e713 	.word	0x0000e713
    e6c4:	0000e689 	.word	0x0000e689
		if (conn->type != BT_CONN_TYPE_ISO) {
    e6c8:	7883      	ldrb	r3, [r0, #2]
    e6ca:	2b08      	cmp	r3, #8
    e6cc:	d0e2      	beq.n	e694 <bt_conn_set_state+0x44>
			bt_conn_ref(conn);
    e6ce:	f01a faa6 	bl	28c1e <bt_conn_ref>
    e6d2:	e7df      	b.n	e694 <bt_conn_set_state+0x44>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e6d4:	7883      	ldrb	r3, [r0, #2]
    e6d6:	2b01      	cmp	r3, #1
    e6d8:	d1dc      	bne.n	e694 <bt_conn_set_state+0x44>
			k_work_cancel_delayable(&conn->deferred_work);
    e6da:	3058      	adds	r0, #88	; 0x58
    e6dc:	f01d f8ad 	bl	2b83a <k_work_cancel_delayable>
    e6e0:	e7d8      	b.n	e694 <bt_conn_set_state+0x44>
	z_impl_k_sem_give(sem);
    e6e2:	4d6a      	ldr	r5, [pc, #424]	; (e88c <bt_conn_set_state+0x23c>)
		tx->pending_no_cb = 0U;
    e6e4:	2600      	movs	r6, #0
	__asm__ volatile(
    e6e6:	f04f 0320 	mov.w	r3, #32
    e6ea:	f3ef 8211 	mrs	r2, BASEPRI
    e6ee:	f383 8812 	msr	BASEPRI_MAX, r3
    e6f2:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    e6f6:	69e3      	ldr	r3, [r4, #28]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	f000 8096 	beq.w	e82a <bt_conn_set_state+0x1da>
			conn->pending_no_cb--;
    e6fe:	3b01      	subs	r3, #1
    e700:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e702:	f382 8811 	msr	BASEPRI, r2
    e706:	f3bf 8f6f 	isb	sy
    e70a:	4628      	mov	r0, r5
    e70c:	f015 f9d6 	bl	23abc <z_impl_k_sem_give>
}
    e710:	e7e9      	b.n	e6e6 <bt_conn_set_state+0x96>
		if (conn->type == BT_CONN_TYPE_SCO) {
    e712:	78a3      	ldrb	r3, [r4, #2]
    e714:	2b04      	cmp	r3, #4
    e716:	d0b7      	beq.n	e688 <bt_conn_set_state+0x38>
	z_impl_k_queue_init(queue);
    e718:	f104 0038 	add.w	r0, r4, #56	; 0x38
    e71c:	f01c ff7e 	bl	2b61c <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    e720:	485b      	ldr	r0, [pc, #364]	; (e890 <bt_conn_set_state+0x240>)
    e722:	2100      	movs	r1, #0
    e724:	f016 f9b4 	bl	24a90 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    e728:	2300      	movs	r3, #0
	list->tail = NULL;
    e72a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
    e72e:	e7ab      	b.n	e688 <bt_conn_set_state+0x38>
		if (conn->type == BT_CONN_TYPE_SCO) {
    e730:	78a3      	ldrb	r3, [r4, #2]
    e732:	2b04      	cmp	r3, #4
    e734:	d106      	bne.n	e744 <bt_conn_set_state+0xf4>
	old = atomic_dec(&conn->ref);
    e736:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
    e73a:	b00c      	add	sp, #48	; 0x30
    e73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	old = atomic_dec(&conn->ref);
    e740:	f01a ba14 	b.w	28b6c <atomic_dec.isra.0>
		switch (old_state) {
    e744:	2e08      	cmp	r6, #8
    e746:	d89f      	bhi.n	e688 <bt_conn_set_state+0x38>
    e748:	a301      	add	r3, pc, #4	; (adr r3, e750 <bt_conn_set_state+0x100>)
    e74a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    e74e:	bf00      	nop
    e750:	0000e7bf 	.word	0x0000e7bf
    e754:	0000e775 	.word	0x0000e775
    e758:	0000e7b1 	.word	0x0000e7b1
    e75c:	0000e737 	.word	0x0000e737
    e760:	0000e737 	.word	0x0000e737
    e764:	0000e7b1 	.word	0x0000e7b1
    e768:	0000e7b1 	.word	0x0000e7b1
    e76c:	0000e7bf 	.word	0x0000e7bf
    e770:	0000e7bf 	.word	0x0000e7bf
			tx_notify(conn);
    e774:	4620      	mov	r0, r4
    e776:	f01a fa05 	bl	28b84 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    e77a:	78a3      	ldrb	r3, [r4, #2]
    e77c:	2b01      	cmp	r3, #1
    e77e:	d103      	bne.n	e788 <bt_conn_set_state+0x138>
				k_work_cancel_delayable(&conn->deferred_work);
    e780:	f104 0058 	add.w	r0, r4, #88	; 0x58
    e784:	f01d f859 	bl	2b83a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e788:	f3bf 8f5b 	dmb	ish
    e78c:	3404      	adds	r4, #4
    e78e:	e854 3f00 	ldrex	r3, [r4]
    e792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e796:	e844 3200 	strex	r2, r3, [r4]
    e79a:	2a00      	cmp	r2, #0
    e79c:	d1f7      	bne.n	e78e <bt_conn_set_state+0x13e>
    e79e:	f3bf 8f5b 	dmb	ish
    e7a2:	483b      	ldr	r0, [pc, #236]	; (e890 <bt_conn_set_state+0x240>)
    e7a4:	2100      	movs	r1, #0
}
    e7a6:	b00c      	add	sp, #48	; 0x30
    e7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e7ac:	f016 b970 	b.w	24a90 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    e7b0:	7b23      	ldrb	r3, [r4, #12]
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d0bf      	beq.n	e736 <bt_conn_set_state+0xe6>
				notify_connected(conn);
    e7b6:	4620      	mov	r0, r4
    e7b8:	f7ff fcfa 	bl	e1b0 <notify_connected>
    e7bc:	e7bb      	b.n	e736 <bt_conn_set_state+0xe6>
			BT_WARN("Invalid (%u) old state", state);
    e7be:	482f      	ldr	r0, [pc, #188]	; (e87c <bt_conn_set_state+0x22c>)
    e7c0:	6803      	ldr	r3, [r0, #0]
    e7c2:	f013 0f06 	tst.w	r3, #6
    e7c6:	f43f af5f 	beq.w	e688 <bt_conn_set_state+0x38>
    e7ca:	4b32      	ldr	r3, [pc, #200]	; (e894 <bt_conn_set_state+0x244>)
		BT_WARN("no valid (%u) state was set", state);
    e7cc:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
    e7d0:	aa09      	add	r2, sp, #36	; 0x24
    e7d2:	2303      	movs	r3, #3
    e7d4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e7d8:	9305      	str	r3, [sp, #20]
    e7da:	9309      	str	r3, [sp, #36]	; 0x24
    e7dc:	f01a f9b4 	bl	28b48 <z_log_msg2_static_create.constprop.0>
    e7e0:	e752      	b.n	e688 <bt_conn_set_state+0x38>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e7e2:	78a3      	ldrb	r3, [r4, #2]
    e7e4:	2b01      	cmp	r3, #1
    e7e6:	f47f af4f 	bne.w	e688 <bt_conn_set_state+0x38>
					K_MSEC(10 * bt_dev.create_param.timeout));
    e7ea:	4b2b      	ldr	r3, [pc, #172]	; (e898 <bt_conn_set_state+0x248>)
    e7ec:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    e7ee:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    e7f0:	b1c8      	cbz	r0, e826 <bt_conn_set_state+0x1d6>
    e7f2:	230a      	movs	r3, #10
    e7f4:	4358      	muls	r0, r3
    e7f6:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
    e7f8:	03c9      	lsls	r1, r1, #15
    e7fa:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    e7fe:	f240 33e7 	movw	r3, #999	; 0x3e7
    e802:	03c0      	lsls	r0, r0, #15
    e804:	18c0      	adds	r0, r0, r3
    e806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e80a:	f04f 0300 	mov.w	r3, #0
    e80e:	f141 0100 	adc.w	r1, r1, #0
    e812:	f7f2 fc75 	bl	1100 <__aeabi_uldivmod>
    e816:	4602      	mov	r2, r0
    e818:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    e81a:	4620      	mov	r0, r4
}
    e81c:	b00c      	add	sp, #48	; 0x30
    e81e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    e822:	f015 bb1f 	b.w	23e64 <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
    e826:	4601      	mov	r1, r0
    e828:	e7e6      	b.n	e7f8 <bt_conn_set_state+0x1a8>
	return list->head;
    e82a:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    e82c:	b128      	cbz	r0, e83a <bt_conn_set_state+0x1ea>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e82e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e830:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    e832:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e834:	4288      	cmp	r0, r1
	list->tail = node;
    e836:	bf08      	it	eq
    e838:	61a3      	streq	r3, [r4, #24]
    e83a:	f382 8811 	msr	BASEPRI, r2
    e83e:	f3bf 8f6f 	isb	sy
		if (!node) {
    e842:	2800      	cmp	r0, #0
    e844:	f43f af20 	beq.w	e688 <bt_conn_set_state+0x38>
	__asm__ volatile(
    e848:	f04f 0220 	mov.w	r2, #32
    e84c:	f3ef 8311 	mrs	r3, BASEPRI
    e850:	f382 8812 	msr	BASEPRI_MAX, r2
    e854:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    e858:	68c2      	ldr	r2, [r0, #12]
    e85a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    e85c:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    e85e:	f383 8811 	msr	BASEPRI, r3
    e862:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    e866:	f7ff fc99 	bl	e19c <tx_free>
    e86a:	e74e      	b.n	e70a <bt_conn_set_state+0xba>
		BT_WARN("no valid (%u) state was set", state);
    e86c:	4803      	ldr	r0, [pc, #12]	; (e87c <bt_conn_set_state+0x22c>)
    e86e:	6803      	ldr	r3, [r0, #0]
    e870:	f013 0f06 	tst.w	r3, #6
    e874:	f43f af08 	beq.w	e688 <bt_conn_set_state+0x38>
    e878:	4b08      	ldr	r3, [pc, #32]	; (e89c <bt_conn_set_state+0x24c>)
    e87a:	e7a7      	b.n	e7cc <bt_conn_set_state+0x17c>
    e87c:	20000994 	.word	0x20000994
    e880:	0002cf10 	.word	0x0002cf10
    e884:	00030cef 	.word	0x00030cef
    e888:	00030cf9 	.word	0x00030cf9
    e88c:	20000100 	.word	0x20000100
    e890:	20000358 	.word	0x20000358
    e894:	00030d0a 	.word	0x00030d0a
    e898:	20000000 	.word	0x20000000
    e89c:	00030d21 	.word	0x00030d21

0000e8a0 <bt_conn_index>:
		index = conn - acl_conns;
    e8a0:	4b03      	ldr	r3, [pc, #12]	; (e8b0 <bt_conn_index+0x10>)
    e8a2:	1ac0      	subs	r0, r0, r3
    e8a4:	4b03      	ldr	r3, [pc, #12]	; (e8b4 <bt_conn_index+0x14>)
    e8a6:	1180      	asrs	r0, r0, #6
    e8a8:	4358      	muls	r0, r3
}
    e8aa:	b2c0      	uxtb	r0, r0
    e8ac:	4770      	bx	lr
    e8ae:	bf00      	nop
    e8b0:	200018c8 	.word	0x200018c8
    e8b4:	aaaaaaab 	.word	0xaaaaaaab

0000e8b8 <bt_conn_create_pdu_timeout>:
{
    e8b8:	b530      	push	{r4, r5, lr}
    e8ba:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    e8bc:	490f      	ldr	r1, [pc, #60]	; (e8fc <bt_conn_create_pdu_timeout+0x44>)
    e8be:	b089      	sub	sp, #36	; 0x24
    e8c0:	2800      	cmp	r0, #0
    e8c2:	bf08      	it	eq
    e8c4:	4608      	moveq	r0, r1
    e8c6:	f01c f828 	bl	2a91a <net_buf_alloc_fixed>
	if (!buf) {
    e8ca:	4604      	mov	r4, r0
    e8cc:	b988      	cbnz	r0, e8f2 <bt_conn_create_pdu_timeout+0x3a>
		BT_WARN("Unable to allocate buffer within timeout");
    e8ce:	480c      	ldr	r0, [pc, #48]	; (e900 <bt_conn_create_pdu_timeout+0x48>)
    e8d0:	6803      	ldr	r3, [r0, #0]
    e8d2:	f013 0f06 	tst.w	r3, #6
    e8d6:	d009      	beq.n	e8ec <bt_conn_create_pdu_timeout+0x34>
    e8d8:	4b0a      	ldr	r3, [pc, #40]	; (e904 <bt_conn_create_pdu_timeout+0x4c>)
    e8da:	9306      	str	r3, [sp, #24]
    e8dc:	aa05      	add	r2, sp, #20
    e8de:	2302      	movs	r3, #2
    e8e0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e8e4:	9301      	str	r3, [sp, #4]
    e8e6:	9305      	str	r3, [sp, #20]
    e8e8:	f01a f92e 	bl	28b48 <z_log_msg2_static_create.constprop.0>
}
    e8ec:	4620      	mov	r0, r4
    e8ee:	b009      	add	sp, #36	; 0x24
    e8f0:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    e8f2:	1d29      	adds	r1, r5, #4
    e8f4:	3008      	adds	r0, #8
    e8f6:	f01c f835 	bl	2a964 <net_buf_simple_reserve>
	return buf;
    e8fa:	e7f7      	b.n	e8ec <bt_conn_create_pdu_timeout+0x34>
    e8fc:	20000c00 	.word	0x20000c00
    e900:	20000994 	.word	0x20000994
    e904:	00030d3d 	.word	0x00030d3d

0000e908 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    e908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    e90a:	1d03      	adds	r3, r0, #4
{
    e90c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e90e:	4618      	mov	r0, r3
    e910:	f01a f914 	bl	28b3c <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    e914:	0582      	lsls	r2, r0, #22
    e916:	d512      	bpl.n	e93e <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    e918:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    e91c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    e920:	4291      	cmp	r1, r2
    e922:	d80c      	bhi.n	e93e <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    e924:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    e928:	4291      	cmp	r1, r2
    e92a:	d308      	bcc.n	e93e <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    e92c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    e930:	4291      	cmp	r1, r2
    e932:	d104      	bne.n	e93e <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e934:	f46f 7100 	mvn.w	r1, #512	; 0x200
    e938:	4618      	mov	r0, r3
    e93a:	f01a f8f0 	bl	28b1e <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    e93e:	4b10      	ldr	r3, [pc, #64]	; (e980 <notify_le_param_updated+0x78>)
    e940:	681d      	ldr	r5, [r3, #0]
    e942:	b925      	cbnz	r5, e94e <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e944:	4d0f      	ldr	r5, [pc, #60]	; (e984 <notify_le_param_updated+0x7c>)
    e946:	4f10      	ldr	r7, [pc, #64]	; (e988 <notify_le_param_updated+0x80>)
    e948:	42bd      	cmp	r5, r7
    e94a:	d30c      	bcc.n	e966 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    e94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    e94e:	68ee      	ldr	r6, [r5, #12]
    e950:	b13e      	cbz	r6, e962 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
    e952:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    e956:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    e95a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    e95e:	4620      	mov	r0, r4
    e960:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    e962:	69ad      	ldr	r5, [r5, #24]
    e964:	e7ed      	b.n	e942 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
    e966:	68ee      	ldr	r6, [r5, #12]
    e968:	b13e      	cbz	r6, e97a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
    e96a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    e96e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    e972:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    e976:	4620      	mov	r0, r4
    e978:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e97a:	351c      	adds	r5, #28
    e97c:	e7e4      	b.n	e948 <notify_le_param_updated+0x40>
    e97e:	bf00      	nop
    e980:	20002a6c 	.word	0x20002a6c
    e984:	0002c1cc 	.word	0x0002c1cc
    e988:	0002c1cc 	.word	0x0002c1cc

0000e98c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e990:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    e992:	4608      	mov	r0, r1
{
    e994:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    e996:	f019 ffed 	bl	28974 <bt_le_conn_params_valid>
    e99a:	4605      	mov	r5, r0
    e99c:	b918      	cbnz	r0, e9a6 <le_param_req+0x1a>
		return false;
    e99e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    e9a0:	4628      	mov	r0, r5
    e9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    e9a6:	4b13      	ldr	r3, [pc, #76]	; (e9f4 <le_param_req+0x68>)
    e9a8:	681e      	ldr	r6, [r3, #0]
    e9aa:	b946      	cbnz	r6, e9be <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e9ac:	4e12      	ldr	r6, [pc, #72]	; (e9f8 <le_param_req+0x6c>)
    e9ae:	f8df 804c 	ldr.w	r8, [pc, #76]	; e9fc <le_param_req+0x70>
    e9b2:	4546      	cmp	r6, r8
    e9b4:	d2f4      	bcs.n	e9a0 <le_param_req+0x14>
		if (!cb->le_param_req) {
    e9b6:	68b3      	ldr	r3, [r6, #8]
    e9b8:	b983      	cbnz	r3, e9dc <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e9ba:	361c      	adds	r6, #28
    e9bc:	e7f9      	b.n	e9b2 <le_param_req+0x26>
		if (!cb->le_param_req) {
    e9be:	68b3      	ldr	r3, [r6, #8]
    e9c0:	b90b      	cbnz	r3, e9c6 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    e9c2:	69b6      	ldr	r6, [r6, #24]
    e9c4:	e7f1      	b.n	e9aa <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    e9c6:	4621      	mov	r1, r4
    e9c8:	4638      	mov	r0, r7
    e9ca:	4798      	blx	r3
    e9cc:	2800      	cmp	r0, #0
    e9ce:	d0e6      	beq.n	e99e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    e9d0:	4620      	mov	r0, r4
    e9d2:	f019 ffcf 	bl	28974 <bt_le_conn_params_valid>
    e9d6:	2800      	cmp	r0, #0
    e9d8:	d1f3      	bne.n	e9c2 <le_param_req+0x36>
    e9da:	e7e0      	b.n	e99e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    e9dc:	4621      	mov	r1, r4
    e9de:	4638      	mov	r0, r7
    e9e0:	4798      	blx	r3
    e9e2:	2800      	cmp	r0, #0
    e9e4:	d0db      	beq.n	e99e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    e9e6:	4620      	mov	r0, r4
    e9e8:	f019 ffc4 	bl	28974 <bt_le_conn_params_valid>
    e9ec:	2800      	cmp	r0, #0
    e9ee:	d1e4      	bne.n	e9ba <le_param_req+0x2e>
    e9f0:	e7d5      	b.n	e99e <le_param_req+0x12>
    e9f2:	bf00      	nop
    e9f4:	20002a6c 	.word	0x20002a6c
    e9f8:	0002c1cc 	.word	0x0002c1cc
    e9fc:	0002c1cc 	.word	0x0002c1cc

0000ea00 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    ea00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    ea04:	78c3      	ldrb	r3, [r0, #3]
{
    ea06:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    ea08:	b973      	cbnz	r3, ea28 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
    ea0a:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    ea0e:	4b10      	ldr	r3, [pc, #64]	; (ea50 <bt_conn_identity_resolved+0x50>)
    ea10:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ea12:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    ea16:	b955      	cbnz	r5, ea2e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ea18:	4d0e      	ldr	r5, [pc, #56]	; (ea54 <bt_conn_identity_resolved+0x54>)
    ea1a:	4f0f      	ldr	r7, [pc, #60]	; (ea58 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ea1c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ea20:	42bd      	cmp	r5, r7
    ea22:	d30c      	bcc.n	ea3e <bt_conn_identity_resolved+0x3e>
		}
	}
}
    ea24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
    ea28:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    ea2c:	e7ef      	b.n	ea0e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
    ea2e:	692b      	ldr	r3, [r5, #16]
    ea30:	b11b      	cbz	r3, ea3a <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ea32:	463a      	mov	r2, r7
    ea34:	4631      	mov	r1, r6
    ea36:	4620      	mov	r0, r4
    ea38:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ea3a:	69ad      	ldr	r5, [r5, #24]
    ea3c:	e7eb      	b.n	ea16 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
    ea3e:	692b      	ldr	r3, [r5, #16]
    ea40:	b11b      	cbz	r3, ea4a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ea42:	4642      	mov	r2, r8
    ea44:	4631      	mov	r1, r6
    ea46:	4620      	mov	r0, r4
    ea48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ea4a:	351c      	adds	r5, #28
    ea4c:	e7e8      	b.n	ea20 <bt_conn_identity_resolved+0x20>
    ea4e:	bf00      	nop
    ea50:	20002a6c 	.word	0x20002a6c
    ea54:	0002c1cc 	.word	0x0002c1cc
    ea58:	0002c1cc 	.word	0x0002c1cc

0000ea5c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    ea5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
    ea5e:	7a43      	ldrb	r3, [r0, #9]
    ea60:	7283      	strb	r3, [r0, #10]
{
    ea62:	4604      	mov	r4, r0
    ea64:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    ea66:	f01a fa5a 	bl	28f1e <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
    ea6a:	4b0c      	ldr	r3, [pc, #48]	; (ea9c <bt_conn_security_changed+0x40>)
    ea6c:	681d      	ldr	r5, [r3, #0]
    ea6e:	b925      	cbnz	r5, ea7a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ea70:	4d0b      	ldr	r5, [pc, #44]	; (eaa0 <bt_conn_security_changed+0x44>)
    ea72:	4f0c      	ldr	r7, [pc, #48]	; (eaa4 <bt_conn_security_changed+0x48>)
    ea74:	42bd      	cmp	r5, r7
    ea76:	d308      	bcc.n	ea8a <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    ea78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
    ea7a:	696b      	ldr	r3, [r5, #20]
    ea7c:	b11b      	cbz	r3, ea86 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
    ea7e:	7a61      	ldrb	r1, [r4, #9]
    ea80:	4632      	mov	r2, r6
    ea82:	4620      	mov	r0, r4
    ea84:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ea86:	69ad      	ldr	r5, [r5, #24]
    ea88:	e7f1      	b.n	ea6e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
    ea8a:	696b      	ldr	r3, [r5, #20]
    ea8c:	b11b      	cbz	r3, ea96 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
    ea8e:	7a61      	ldrb	r1, [r4, #9]
    ea90:	4632      	mov	r2, r6
    ea92:	4620      	mov	r0, r4
    ea94:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ea96:	351c      	adds	r5, #28
    ea98:	e7ec      	b.n	ea74 <bt_conn_security_changed+0x18>
    ea9a:	bf00      	nop
    ea9c:	20002a6c 	.word	0x20002a6c
    eaa0:	0002c1cc 	.word	0x0002c1cc
    eaa4:	0002c1cc 	.word	0x0002c1cc

0000eaa8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    eaa8:	b570      	push	{r4, r5, r6, lr}
    eaaa:	4606      	mov	r6, r0
    eaac:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    eaae:	480a      	ldr	r0, [pc, #40]	; (ead8 <bt_conn_add_le+0x30>)
    eab0:	2101      	movs	r1, #1
    eab2:	f7ff fc43 	bl	e33c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    eab6:	4604      	mov	r4, r0
    eab8:	b160      	cbz	r0, ead4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
    eaba:	7206      	strb	r6, [r0, #8]
    eabc:	2207      	movs	r2, #7
    eabe:	4629      	mov	r1, r5
    eac0:	3088      	adds	r0, #136	; 0x88
    eac2:	f019 fd78 	bl	285b6 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    eac6:	2301      	movs	r3, #1
    eac8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    eaca:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    eacc:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    eace:	4b03      	ldr	r3, [pc, #12]	; (eadc <bt_conn_add_le+0x34>)
    ead0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    ead4:	4620      	mov	r0, r4
    ead6:	bd70      	pop	{r4, r5, r6, pc}
    ead8:	200018c8 	.word	0x200018c8
    eadc:	00280018 	.word	0x00280018

0000eae0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    eae0:	b570      	push	{r4, r5, r6, lr}
    eae2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    eae4:	480d      	ldr	r0, [pc, #52]	; (eb1c <bt_conn_lookup_addr_le+0x3c>)
{
    eae6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    eae8:	f01a f899 	bl	28c1e <bt_conn_ref>

		if (!conn) {
    eaec:	4604      	mov	r4, r0
    eaee:	b130      	cbz	r0, eafe <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    eaf0:	7883      	ldrb	r3, [r0, #2]
    eaf2:	2b01      	cmp	r3, #1
    eaf4:	d005      	beq.n	eb02 <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
    eaf6:	30b8      	adds	r0, #184	; 0xb8
    eaf8:	f01a f838 	bl	28b6c <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    eafc:	2400      	movs	r4, #0
}
    eafe:	4620      	mov	r0, r4
    eb00:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    eb02:	4629      	mov	r1, r5
    eb04:	4632      	mov	r2, r6
    eb06:	f01a f93e 	bl	28d86 <bt_conn_is_peer_addr_le>
    eb0a:	4601      	mov	r1, r0
    eb0c:	2800      	cmp	r0, #0
    eb0e:	d1f6      	bne.n	eafe <bt_conn_lookup_addr_le+0x1e>
	old = atomic_dec(&conn->ref);
    eb10:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    eb14:	f01a f82a 	bl	28b6c <atomic_dec.isra.0>
	return NULL;
    eb18:	460c      	mov	r4, r1
			continue;
    eb1a:	e7f0      	b.n	eafe <bt_conn_lookup_addr_le+0x1e>
    eb1c:	200018c8 	.word	0x200018c8

0000eb20 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb22:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    eb24:	480f      	ldr	r0, [pc, #60]	; (eb64 <bt_conn_lookup_state_le+0x44>)
{
    eb26:	460e      	mov	r6, r1
    eb28:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    eb2a:	f01a f878 	bl	28c1e <bt_conn_ref>

		if (!conn) {
    eb2e:	4604      	mov	r4, r0
    eb30:	b1a8      	cbz	r0, eb5e <bt_conn_lookup_state_le+0x3e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    eb32:	7883      	ldrb	r3, [r0, #2]
    eb34:	2b01      	cmp	r3, #1
    eb36:	d005      	beq.n	eb44 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
    eb38:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    eb3c:	f01a f816 	bl	28b6c <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    eb40:	2400      	movs	r4, #0
			continue;
    eb42:	e00c      	b.n	eb5e <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    eb44:	b12e      	cbz	r6, eb52 <bt_conn_lookup_state_le+0x32>
    eb46:	4632      	mov	r2, r6
    eb48:	4629      	mov	r1, r5
    eb4a:	f01a f91c 	bl	28d86 <bt_conn_is_peer_addr_le>
    eb4e:	2800      	cmp	r0, #0
    eb50:	d0f2      	beq.n	eb38 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    eb52:	7b63      	ldrb	r3, [r4, #13]
    eb54:	42bb      	cmp	r3, r7
    eb56:	d1ef      	bne.n	eb38 <bt_conn_lookup_state_le+0x18>
    eb58:	7a23      	ldrb	r3, [r4, #8]
    eb5a:	42ab      	cmp	r3, r5
    eb5c:	d1ec      	bne.n	eb38 <bt_conn_lookup_state_le+0x18>
}
    eb5e:	4620      	mov	r0, r4
    eb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb62:	bf00      	nop
    eb64:	200018c8 	.word	0x200018c8

0000eb68 <bt_le_set_auto_conn>:
}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    eb68:	b570      	push	{r4, r5, r6, lr}
    eb6a:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eb6c:	4835      	ldr	r0, [pc, #212]	; (ec44 <bt_le_set_auto_conn+0xdc>)
    eb6e:	f019 ffe5 	bl	28b3c <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    eb72:	0780      	lsls	r0, r0, #30
{
    eb74:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    eb76:	d55e      	bpl.n	ec36 <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    eb78:	b929      	cbnz	r1, eb86 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
    eb7a:	f019 ffad 	bl	28ad8 <bt_id_scan_random_addr_check>
    eb7e:	b940      	cbnz	r0, eb92 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    eb80:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    eb84:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    eb86:	4608      	mov	r0, r1
    eb88:	f019 fef4 	bl	28974 <bt_le_conn_params_valid>
    eb8c:	2800      	cmp	r0, #0
    eb8e:	d1f4      	bne.n	eb7a <bt_le_set_auto_conn+0x12>
    eb90:	e7f6      	b.n	eb80 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    eb92:	4631      	mov	r1, r6
    eb94:	2000      	movs	r0, #0
    eb96:	f7ff ffa3 	bl	eae0 <bt_conn_lookup_addr_le>
	if (!conn) {
    eb9a:	4604      	mov	r4, r0
    eb9c:	b928      	cbnz	r0, ebaa <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    eb9e:	4631      	mov	r1, r6
    eba0:	f7ff ff82 	bl	eaa8 <bt_conn_add_le>
		if (!conn) {
    eba4:	4604      	mov	r4, r0
    eba6:	2800      	cmp	r0, #0
    eba8:	d048      	beq.n	ec3c <bt_le_set_auto_conn+0xd4>
		if (!atomic_test_and_set_bit(conn->flags,
    ebaa:	1d20      	adds	r0, r4, #4
	old = atomic_dec(&conn->ref);
    ebac:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
	if (param) {
    ebb0:	b385      	cbz	r5, ec14 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    ebb2:	882b      	ldrh	r3, [r5, #0]
    ebb4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    ebb8:	886b      	ldrh	r3, [r5, #2]
    ebba:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    ebbe:	88ab      	ldrh	r3, [r5, #4]
    ebc0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    ebc4:	88eb      	ldrh	r3, [r5, #6]
    ebc6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    ebca:	f3bf 8f5b 	dmb	ish
    ebce:	e850 3f00 	ldrex	r3, [r0]
    ebd2:	f043 0201 	orr.w	r2, r3, #1
    ebd6:	e840 2100 	strex	r1, r2, [r0]
    ebda:	2900      	cmp	r1, #0
    ebdc:	d1f7      	bne.n	ebce <bt_le_set_auto_conn+0x66>
    ebde:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    ebe2:	07d9      	lsls	r1, r3, #31
    ebe4:	d402      	bmi.n	ebec <bt_le_set_auto_conn+0x84>
			bt_conn_ref(conn);
    ebe6:	4620      	mov	r0, r4
    ebe8:	f01a f819 	bl	28c1e <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    ebec:	7b63      	ldrb	r3, [r4, #13]
    ebee:	b963      	cbnz	r3, ec0a <bt_le_set_auto_conn+0xa2>
    ebf0:	4814      	ldr	r0, [pc, #80]	; (ec44 <bt_le_set_auto_conn+0xdc>)
    ebf2:	f019 ffa3 	bl	28b3c <atomic_get>
    ebf6:	0783      	lsls	r3, r0, #30
    ebf8:	d507      	bpl.n	ec0a <bt_le_set_auto_conn+0xa2>
		if (param) {
    ebfa:	b11d      	cbz	r5, ec04 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ebfc:	2102      	movs	r1, #2
    ebfe:	4620      	mov	r0, r4
    ec00:	f7ff fd26 	bl	e650 <bt_conn_set_state>
		bt_le_scan_update(false);
    ec04:	2000      	movs	r0, #0
    ec06:	f7fe ff87 	bl	db18 <bt_le_scan_update>
	old = atomic_dec(&conn->ref);
    ec0a:	4630      	mov	r0, r6
    ec0c:	f019 ffae 	bl	28b6c <atomic_dec.isra.0>
	return 0;
    ec10:	2000      	movs	r0, #0
    ec12:	e7b7      	b.n	eb84 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ec14:	f06f 0101 	mvn.w	r1, #1
    ec18:	f019 ff81 	bl	28b1e <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
    ec1c:	07c2      	lsls	r2, r0, #31
    ec1e:	d5e5      	bpl.n	ebec <bt_le_set_auto_conn+0x84>
	old = atomic_dec(&conn->ref);
    ec20:	4630      	mov	r0, r6
    ec22:	f019 ffa3 	bl	28b6c <atomic_dec.isra.0>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    ec26:	7b63      	ldrb	r3, [r4, #13]
    ec28:	2b02      	cmp	r3, #2
    ec2a:	d1df      	bne.n	ebec <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ec2c:	4629      	mov	r1, r5
    ec2e:	4620      	mov	r0, r4
    ec30:	f7ff fd0e 	bl	e650 <bt_conn_set_state>
    ec34:	e7da      	b.n	ebec <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    ec36:	f06f 000a 	mvn.w	r0, #10
    ec3a:	e7a3      	b.n	eb84 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    ec3c:	f06f 000b 	mvn.w	r0, #11
    ec40:	e7a0      	b.n	eb84 <bt_le_set_auto_conn+0x1c>
    ec42:	bf00      	nop
    ec44:	200000cc 	.word	0x200000cc

0000ec48 <send_conn_le_param_update>:
{
    ec48:	b538      	push	{r3, r4, r5, lr}
    ec4a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    ec4c:	4608      	mov	r0, r1
{
    ec4e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    ec50:	f019 fe90 	bl	28974 <bt_le_conn_params_valid>
    ec54:	b338      	cbz	r0, eca6 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    ec56:	4b15      	ldr	r3, [pc, #84]	; (ecac <send_conn_le_param_update+0x64>)
    ec58:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    ec5c:	0799      	lsls	r1, r3, #30
    ec5e:	d407      	bmi.n	ec70 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    ec60:	78e3      	ldrb	r3, [r4, #3]
    ec62:	b173      	cbz	r3, ec82 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    ec64:	4629      	mov	r1, r5
    ec66:	4620      	mov	r0, r4
}
    ec68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    ec6c:	f000 bb2c 	b.w	f2c8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    ec70:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    ec74:	079a      	lsls	r2, r3, #30
    ec76:	d5f3      	bpl.n	ec60 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ec78:	1d20      	adds	r0, r4, #4
    ec7a:	f019 ff5f 	bl	28b3c <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    ec7e:	0543      	lsls	r3, r0, #21
    ec80:	d4ee      	bmi.n	ec60 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    ec82:	4629      	mov	r1, r5
    ec84:	4620      	mov	r0, r4
    ec86:	f01a f8d7 	bl	28e38 <bt_conn_le_conn_update>
		if (rc == 0) {
    ec8a:	b958      	cbnz	r0, eca4 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    ec8c:	882b      	ldrh	r3, [r5, #0]
    ec8e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    ec92:	886b      	ldrh	r3, [r5, #2]
    ec94:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    ec98:	88ab      	ldrh	r3, [r5, #4]
    ec9a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    ec9e:	88eb      	ldrh	r3, [r5, #6]
    eca0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    eca4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    eca6:	f06f 0015 	mvn.w	r0, #21
    ecaa:	e7fb      	b.n	eca4 <send_conn_le_param_update+0x5c>
    ecac:	20000000 	.word	0x20000000

0000ecb0 <deferred_work>:
{
    ecb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    ecb2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    ecb6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    ecb8:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    ecbc:	bb03      	cbnz	r3, ed00 <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
    ecbe:	4628      	mov	r0, r5
    ecc0:	f01a f91c 	bl	28efc <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    ecc4:	4b2a      	ldr	r3, [pc, #168]	; (ed70 <deferred_work+0xc0>)
    ecc6:	681e      	ldr	r6, [r3, #0]
    ecc8:	b956      	cbnz	r6, ece0 <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ecca:	4e2a      	ldr	r6, [pc, #168]	; (ed74 <deferred_work+0xc4>)
    eccc:	4f2a      	ldr	r7, [pc, #168]	; (ed78 <deferred_work+0xc8>)
    ecce:	42be      	cmp	r6, r7
    ecd0:	d30e      	bcc.n	ecf0 <deferred_work+0x40>
	old = atomic_dec(&conn->ref);
    ecd2:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
    ecd6:	b003      	add	sp, #12
    ecd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	old = atomic_dec(&conn->ref);
    ecdc:	f019 bf46 	b.w	28b6c <atomic_dec.isra.0>
		if (cb->disconnected) {
    ece0:	6873      	ldr	r3, [r6, #4]
    ece2:	b11b      	cbz	r3, ecec <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
    ece4:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ece8:	4628      	mov	r0, r5
    ecea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ecec:	69b6      	ldr	r6, [r6, #24]
    ecee:	e7eb      	b.n	ecc8 <deferred_work+0x18>
		if (cb->disconnected) {
    ecf0:	6873      	ldr	r3, [r6, #4]
    ecf2:	b11b      	cbz	r3, ecfc <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
    ecf4:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ecf8:	4628      	mov	r0, r5
    ecfa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ecfc:	361c      	adds	r6, #28
    ecfe:	e7e6      	b.n	ecce <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    ed00:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    ed04:	2b01      	cmp	r3, #1
    ed06:	d130      	bne.n	ed6a <deferred_work+0xba>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ed08:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    ed0c:	b923      	cbnz	r3, ed18 <deferred_work+0x68>
}
    ed0e:	b003      	add	sp, #12
    ed10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    ed14:	f7fd bb8c 	b.w	c430 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    ed18:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ed1c:	f46f 7100 	mvn.w	r1, #512	; 0x200
    ed20:	4630      	mov	r0, r6
    ed22:	f019 fefc 	bl	28b1e <atomic_and>
    ed26:	0583      	lsls	r3, r0, #22
    ed28:	d513      	bpl.n	ed52 <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ed2a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    ed2e:	f8ad 3000 	strh.w	r3, [sp]
    ed32:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    ed36:	f8ad 3002 	strh.w	r3, [sp, #2]
    ed3a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    ed3e:	f8ad 3004 	strh.w	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    ed42:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ed44:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    ed48:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    ed4c:	4628      	mov	r0, r5
    ed4e:	f7ff ff7b 	bl	ec48 <send_conn_le_param_update>
    ed52:	f3bf 8f5b 	dmb	ish
    ed56:	e856 3f00 	ldrex	r3, [r6]
    ed5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ed5e:	e846 3200 	strex	r2, r3, [r6]
    ed62:	2a00      	cmp	r2, #0
    ed64:	d1f7      	bne.n	ed56 <deferred_work+0xa6>
    ed66:	f3bf 8f5b 	dmb	ish
}
    ed6a:	b003      	add	sp, #12
    ed6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed6e:	bf00      	nop
    ed70:	20002a6c 	.word	0x20002a6c
    ed74:	0002c1cc 	.word	0x0002c1cc
    ed78:	0002c1cc 	.word	0x0002c1cc

0000ed7c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    ed7c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    ed7e:	4801      	ldr	r0, [pc, #4]	; (ed84 <bt_conn_create_frag_timeout+0x8>)
    ed80:	f7ff bd9a 	b.w	e8b8 <bt_conn_create_pdu_timeout>
    ed84:	20000c58 	.word	0x20000c58

0000ed88 <create_frag>:
{
    ed88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed8c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    ed8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ed92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ed96:	2000      	movs	r0, #0
{
    ed98:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    ed9a:	f7ff ffef 	bl	ed7c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    ed9e:	7b73      	ldrb	r3, [r6, #13]
    eda0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    eda2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    eda4:	f04f 0600 	mov.w	r6, #0
    eda8:	d005      	beq.n	edb6 <create_frag+0x2e>
		net_buf_unref(frag);
    edaa:	f010 fa5f 	bl	1f26c <net_buf_unref>
		return NULL;
    edae:	4635      	mov	r5, r6
}
    edb0:	4628      	mov	r0, r5
    edb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    edb6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    edb8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    edbc:	4e0c      	ldr	r6, [pc, #48]	; (edf0 <create_frag+0x68>)
    edbe:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    edc0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    edc4:	f01b fe5e 	bl	2aa84 <net_buf_simple_tailroom>
    edc8:	4580      	cmp	r8, r0
    edca:	d20c      	bcs.n	ede6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    edcc:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    edd0:	f854 1f08 	ldr.w	r1, [r4, #8]!
    edd4:	4632      	mov	r2, r6
    edd6:	4638      	mov	r0, r7
    edd8:	f01b fe0d 	bl	2a9f6 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    eddc:	4631      	mov	r1, r6
    edde:	4620      	mov	r0, r4
    ede0:	f01b fe2c 	bl	2aa3c <net_buf_simple_pull>
    ede4:	e7e4      	b.n	edb0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    ede6:	4638      	mov	r0, r7
    ede8:	f01b fe4c 	bl	2aa84 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    edec:	b286      	uxth	r6, r0
    edee:	e7ef      	b.n	edd0 <create_frag+0x48>
    edf0:	20000000 	.word	0x20000000

0000edf4 <bt_conn_process_tx>:
{
    edf4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    edf6:	7b43      	ldrb	r3, [r0, #13]
{
    edf8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    edfa:	b95b      	cbnz	r3, ee14 <bt_conn_process_tx+0x20>
    edfc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ee00:	3004      	adds	r0, #4
    ee02:	f019 fe8c 	bl	28b1e <atomic_and>
    ee06:	0643      	lsls	r3, r0, #25
    ee08:	d504      	bpl.n	ee14 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    ee0a:	4620      	mov	r0, r4
}
    ee0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    ee10:	f019 bee7 	b.w	28be2 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    ee14:	2200      	movs	r2, #0
    ee16:	2300      	movs	r3, #0
    ee18:	f104 0038 	add.w	r0, r4, #56	; 0x38
    ee1c:	f01b fd82 	bl	2a924 <net_buf_get>
	BT_ASSERT(buf);
    ee20:	4605      	mov	r5, r0
    ee22:	b960      	cbnz	r0, ee3e <bt_conn_process_tx+0x4a>
    ee24:	4a1f      	ldr	r2, [pc, #124]	; (eea4 <bt_conn_process_tx+0xb0>)
    ee26:	4920      	ldr	r1, [pc, #128]	; (eea8 <bt_conn_process_tx+0xb4>)
    ee28:	4820      	ldr	r0, [pc, #128]	; (eeac <bt_conn_process_tx+0xb8>)
    ee2a:	f240 23e7 	movw	r3, #743	; 0x2e7
    ee2e:	f015 fee5 	bl	24bfc <printk>
    ee32:	4040      	eors	r0, r0
    ee34:	f380 8811 	msr	BASEPRI, r0
    ee38:	f04f 0003 	mov.w	r0, #3
    ee3c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    ee3e:	4e1c      	ldr	r6, [pc, #112]	; (eeb0 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    ee40:	89aa      	ldrh	r2, [r5, #12]
    ee42:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    ee46:	429a      	cmp	r2, r3
    ee48:	d807      	bhi.n	ee5a <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    ee4a:	2300      	movs	r3, #0
    ee4c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    ee4e:	4629      	mov	r1, r5
    ee50:	4620      	mov	r0, r4
    ee52:	f7ff f9d1 	bl	e1f8 <send_frag>
	if (!send_buf(conn, buf)) {
    ee56:	b130      	cbz	r0, ee66 <bt_conn_process_tx+0x72>
}
    ee58:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    ee5a:	4629      	mov	r1, r5
    ee5c:	4620      	mov	r0, r4
    ee5e:	f7ff ff93 	bl	ed88 <create_frag>
	if (!frag) {
    ee62:	4601      	mov	r1, r0
    ee64:	b920      	cbnz	r0, ee70 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    ee66:	4628      	mov	r0, r5
}
    ee68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    ee6c:	f010 b9fe 	b.w	1f26c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    ee70:	2301      	movs	r3, #1
    ee72:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ee74:	4620      	mov	r0, r4
    ee76:	f7ff f9bf 	bl	e1f8 <send_frag>
    ee7a:	2800      	cmp	r0, #0
    ee7c:	d0f3      	beq.n	ee66 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    ee7e:	89aa      	ldrh	r2, [r5, #12]
    ee80:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    ee84:	429a      	cmp	r2, r3
    ee86:	d802      	bhi.n	ee8e <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    ee88:	2300      	movs	r3, #0
    ee8a:	2203      	movs	r2, #3
    ee8c:	e7df      	b.n	ee4e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    ee8e:	4629      	mov	r1, r5
    ee90:	4620      	mov	r0, r4
    ee92:	f7ff ff79 	bl	ed88 <create_frag>
		if (!frag) {
    ee96:	4601      	mov	r1, r0
    ee98:	2800      	cmp	r0, #0
    ee9a:	d0e4      	beq.n	ee66 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ee9c:	2301      	movs	r3, #1
    ee9e:	461a      	mov	r2, r3
    eea0:	e7e8      	b.n	ee74 <bt_conn_process_tx+0x80>
    eea2:	bf00      	nop
    eea4:	00030d66 	.word	0x00030d66
    eea8:	000300fb 	.word	0x000300fb
    eeac:	00030371 	.word	0x00030371
    eeb0:	20000000 	.word	0x20000000

0000eeb4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    eeb4:	b570      	push	{r4, r5, r6, lr}
    eeb6:	4d14      	ldr	r5, [pc, #80]	; (ef08 <bt_conn_init+0x54>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    eeb8:	4e14      	ldr	r6, [pc, #80]	; (ef0c <bt_conn_init+0x58>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    eeba:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    eebc:	4629      	mov	r1, r5
    eebe:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    eec0:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    eec2:	f01c fbb7 	bl	2b634 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    eec6:	2c10      	cmp	r4, #16
    eec8:	f105 0510 	add.w	r5, r5, #16
    eecc:	d1f6      	bne.n	eebc <bt_conn_init+0x8>
	}

	bt_att_init();
    eece:	f01a fbcf 	bl	29670 <bt_att_init>

	err = bt_smp_init();
    eed2:	f004 f99d 	bl	13210 <bt_smp_init>
	if (err) {
    eed6:	4605      	mov	r5, r0
    eed8:	b9a0      	cbnz	r0, ef04 <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    eeda:	f01a f885 	bl	28fe8 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    eede:	480c      	ldr	r0, [pc, #48]	; (ef10 <bt_conn_init+0x5c>)
    eee0:	f019 fe9d 	bl	28c1e <bt_conn_ref>

			if (!conn) {
    eee4:	4604      	mov	r4, r0
    eee6:	b168      	cbz	r0, ef04 <bt_conn_init+0x50>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eee8:	3004      	adds	r0, #4
    eeea:	f019 fe27 	bl	28b3c <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    eeee:	07c3      	lsls	r3, r0, #31
    eef0:	d504      	bpl.n	eefc <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    eef2:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    eef4:	2102      	movs	r1, #2
    eef6:	4620      	mov	r0, r4
    eef8:	f7ff fbaa 	bl	e650 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    eefc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ef00:	f019 fe34 	bl	28b6c <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    ef04:	4628      	mov	r0, r5
    ef06:	bd70      	pop	{r4, r5, r6, pc}
    ef08:	20002a70 	.word	0x20002a70
    ef0c:	20000bb8 	.word	0x20000bb8
    ef10:	200018c8 	.word	0x200018c8

0000ef14 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    ef14:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
    ef16:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    ef18:	b089      	sub	sp, #36	; 0x24
    ef1a:	4605      	mov	r5, r0
    ef1c:	460f      	mov	r7, r1
    ef1e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    ef20:	2104      	movs	r1, #4
    ef22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ef26:	2000      	movs	r0, #0
    ef28:	f7ff fcc6 	bl	e8b8 <bt_conn_create_pdu_timeout>
	if (!buf) {
    ef2c:	4604      	mov	r4, r0
    ef2e:	b988      	cbnz	r0, ef54 <l2cap_create_le_sig_pdu.constprop.0+0x40>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    ef30:	480c      	ldr	r0, [pc, #48]	; (ef64 <l2cap_create_le_sig_pdu.constprop.0+0x50>)
    ef32:	6803      	ldr	r3, [r0, #0]
    ef34:	075b      	lsls	r3, r3, #29
    ef36:	d00a      	beq.n	ef4e <l2cap_create_le_sig_pdu.constprop.0+0x3a>
    ef38:	4b0b      	ldr	r3, [pc, #44]	; (ef68 <l2cap_create_le_sig_pdu.constprop.0+0x54>)
    ef3a:	aa05      	add	r2, sp, #20
    ef3c:	e9cd 3506 	strd	r3, r5, [sp, #24]
    ef40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ef44:	2303      	movs	r3, #3
    ef46:	9301      	str	r3, [sp, #4]
    ef48:	9305      	str	r3, [sp, #20]
    ef4a:	f019 ffa1 	bl	28e90 <z_log_msg2_static_create.constprop.0>
}
    ef4e:	4620      	mov	r0, r4
    ef50:	b009      	add	sp, #36	; 0x24
    ef52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    ef54:	2104      	movs	r1, #4
    ef56:	3008      	adds	r0, #8
    ef58:	f01b fd47 	bl	2a9ea <net_buf_simple_add>
	hdr->code = code;
    ef5c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    ef5e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    ef60:	8046      	strh	r6, [r0, #2]
	return buf;
    ef62:	e7f4      	b.n	ef4e <l2cap_create_le_sig_pdu.constprop.0+0x3a>
    ef64:	20000a0c 	.word	0x20000a0c
    ef68:	00030df3 	.word	0x00030df3

0000ef6c <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    ef6c:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    ef6e:	4a0e      	ldr	r2, [pc, #56]	; (efa8 <l2cap_accept+0x3c>)
{
    ef70:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    ef72:	6810      	ldr	r0, [r2, #0]
{
    ef74:	b089      	sub	sp, #36	; 0x24
		if (l2cap->chan.chan.conn) {
    ef76:	b928      	cbnz	r0, ef84 <l2cap_accept+0x18>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    ef78:	4b0c      	ldr	r3, [pc, #48]	; (efac <l2cap_accept+0x40>)
    ef7a:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    ef7c:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    ef7e:	b009      	add	sp, #36	; 0x24
    ef80:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    ef84:	480a      	ldr	r0, [pc, #40]	; (efb0 <l2cap_accept+0x44>)
    ef86:	6802      	ldr	r2, [r0, #0]
    ef88:	0752      	lsls	r2, r2, #29
    ef8a:	d00a      	beq.n	efa2 <l2cap_accept+0x36>
    ef8c:	4a09      	ldr	r2, [pc, #36]	; (efb4 <l2cap_accept+0x48>)
    ef8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ef92:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ef96:	2303      	movs	r3, #3
    ef98:	aa05      	add	r2, sp, #20
    ef9a:	9301      	str	r3, [sp, #4]
    ef9c:	9305      	str	r3, [sp, #20]
    ef9e:	f019 ff77 	bl	28e90 <z_log_msg2_static_create.constprop.0>
    efa2:	f06f 000b 	mvn.w	r0, #11
    efa6:	e7ea      	b.n	ef7e <l2cap_accept+0x12>
    efa8:	20001988 	.word	0x20001988
    efac:	0002cf54 	.word	0x0002cf54
    efb0:	20000a0c 	.word	0x20000a0c
    efb4:	00030e1b 	.word	0x00030e1b

0000efb8 <l2cap_rtx_timeout>:
{
    efb8:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    efba:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    efbc:	480d      	ldr	r0, [pc, #52]	; (eff4 <l2cap_rtx_timeout+0x3c>)
	struct bt_conn *conn = chan->chan.conn;
    efbe:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    efc2:	6803      	ldr	r3, [r0, #0]
    efc4:	075b      	lsls	r3, r3, #29
{
    efc6:	b089      	sub	sp, #36	; 0x24
	BT_ERR("chan %p timeout", chan);
    efc8:	d00a      	beq.n	efe0 <l2cap_rtx_timeout+0x28>
    efca:	4b0b      	ldr	r3, [pc, #44]	; (eff8 <l2cap_rtx_timeout+0x40>)
    efcc:	aa05      	add	r2, sp, #20
    efce:	e9cd 3406 	strd	r3, r4, [sp, #24]
    efd2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    efd6:	2303      	movs	r3, #3
    efd8:	9301      	str	r3, [sp, #4]
    efda:	9305      	str	r3, [sp, #20]
    efdc:	f019 ff58 	bl	28e90 <z_log_msg2_static_create.constprop.0>
	bt_l2cap_chan_remove(conn, &chan->chan);
    efe0:	4628      	mov	r0, r5
    efe2:	4621      	mov	r1, r4
    efe4:	f019 ff57 	bl	28e96 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    efe8:	4620      	mov	r0, r4
}
    efea:	b009      	add	sp, #36	; 0x24
    efec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    eff0:	f019 bf6f 	b.w	28ed2 <bt_l2cap_chan_del>
    eff4:	20000a0c 	.word	0x20000a0c
    eff8:	00030e42 	.word	0x00030e42

0000effc <bt_l2cap_connected>:
{
    effc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    f000:	4e29      	ldr	r6, [pc, #164]	; (f0a8 <bt_l2cap_connected+0xac>)
    f002:	4f2a      	ldr	r7, [pc, #168]	; (f0ac <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    f004:	f8df 80a8 	ldr.w	r8, [pc, #168]	; f0b0 <bt_l2cap_connected+0xb4>
{
    f008:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    f00a:	42be      	cmp	r6, r7
    f00c:	d302      	bcc.n	f014 <bt_l2cap_connected+0x18>
}
    f00e:	b003      	add	sp, #12
    f010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    f014:	6873      	ldr	r3, [r6, #4]
    f016:	a901      	add	r1, sp, #4
    f018:	4620      	mov	r0, r4
    f01a:	4798      	blx	r3
    f01c:	2800      	cmp	r0, #0
    f01e:	db3d      	blt.n	f09c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    f020:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    f022:	8833      	ldrh	r3, [r6, #0]
    f024:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    f028:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    f02c:	4641      	mov	r1, r8
    f02e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    f032:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    f036:	f01c fbf4 	bl	2b822 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f03a:	f3bf 8f5b 	dmb	ish
    f03e:	f105 0368 	add.w	r3, r5, #104	; 0x68
    f042:	2200      	movs	r2, #0
    f044:	e853 1f00 	ldrex	r1, [r3]
    f048:	e843 2000 	strex	r0, r2, [r3]
    f04c:	2800      	cmp	r0, #0
    f04e:	d1f9      	bne.n	f044 <bt_l2cap_connected+0x48>
    f050:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    f054:	60aa      	str	r2, [r5, #8]
	return list->tail;
    f056:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    f058:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    f05c:	bb02      	cbnz	r2, f0a0 <bt_l2cap_connected+0xa4>
	list->head = node;
    f05e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    f062:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    f064:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    f066:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    f068:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    f06c:	681b      	ldr	r3, [r3, #0]
    f06e:	b103      	cbz	r3, f072 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    f070:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f072:	9b01      	ldr	r3, [sp, #4]
    f074:	f3bf 8f5b 	dmb	ish
    f078:	3368      	adds	r3, #104	; 0x68
    f07a:	e853 2f00 	ldrex	r2, [r3]
    f07e:	f042 0201 	orr.w	r2, r2, #1
    f082:	e843 2100 	strex	r1, r2, [r3]
    f086:	2900      	cmp	r1, #0
    f088:	d1f7      	bne.n	f07a <bt_l2cap_connected+0x7e>
    f08a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    f08e:	9801      	ldr	r0, [sp, #4]
    f090:	6843      	ldr	r3, [r0, #4]
    f092:	699b      	ldr	r3, [r3, #24]
    f094:	b113      	cbz	r3, f09c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    f096:	f100 0168 	add.w	r1, r0, #104	; 0x68
    f09a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    f09c:	360c      	adds	r6, #12
    f09e:	e7b4      	b.n	f00a <bt_l2cap_connected+0xe>
	parent->next = child;
    f0a0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f0a2:	6563      	str	r3, [r4, #84]	; 0x54
}
    f0a4:	e7dd      	b.n	f062 <bt_l2cap_connected+0x66>
    f0a6:	bf00      	nop
    f0a8:	0002c1a8 	.word	0x0002c1a8
    f0ac:	0002c1cc 	.word	0x0002c1cc
    f0b0:	0000efb9 	.word	0x0000efb9

0000f0b4 <l2cap_recv>:
{
    f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0b8:	b08a      	sub	sp, #40	; 0x28
	if (buf->len < sizeof(*hdr)) {
    f0ba:	898b      	ldrh	r3, [r1, #12]
    f0bc:	2b03      	cmp	r3, #3
{
    f0be:	af02      	add	r7, sp, #8
    f0c0:	4606      	mov	r6, r0
    f0c2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f0c4:	d80f      	bhi.n	f0e6 <l2cap_recv+0x32>
		BT_ERR("Too small L2CAP signaling PDU");
    f0c6:	4859      	ldr	r0, [pc, #356]	; (f22c <l2cap_recv+0x178>)
    f0c8:	6803      	ldr	r3, [r0, #0]
    f0ca:	075d      	lsls	r5, r3, #29
    f0cc:	d02b      	beq.n	f126 <l2cap_recv+0x72>
    f0ce:	4b58      	ldr	r3, [pc, #352]	; (f230 <l2cap_recv+0x17c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    f0d0:	61bb      	str	r3, [r7, #24]
    f0d2:	f107 0214 	add.w	r2, r7, #20
    f0d6:	2302      	movs	r3, #2
    f0d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f0dc:	607b      	str	r3, [r7, #4]
    f0de:	617b      	str	r3, [r7, #20]
    f0e0:	f019 fed6 	bl	28e90 <z_log_msg2_static_create.constprop.0>
    f0e4:	e01f      	b.n	f126 <l2cap_recv+0x72>
	return net_buf_simple_pull_mem(&buf->b, len);
    f0e6:	2104      	movs	r1, #4
    f0e8:	f105 0008 	add.w	r0, r5, #8
    f0ec:	f01b fcae 	bl	2aa4c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    f0f0:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    f0f2:	f8b0 c002 	ldrh.w	ip, [r0, #2]
	if (buf->len != len) {
    f0f6:	459c      	cmp	ip, r3
    f0f8:	4604      	mov	r4, r0
    f0fa:	d019      	beq.n	f130 <l2cap_recv+0x7c>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    f0fc:	484b      	ldr	r0, [pc, #300]	; (f22c <l2cap_recv+0x178>)
    f0fe:	6802      	ldr	r2, [r0, #0]
    f100:	0754      	lsls	r4, r2, #29
    f102:	d010      	beq.n	f126 <l2cap_recv+0x72>
    f104:	494b      	ldr	r1, [pc, #300]	; (f234 <l2cap_recv+0x180>)
    f106:	466c      	mov	r4, sp
    f108:	b088      	sub	sp, #32
    f10a:	aa02      	add	r2, sp, #8
    f10c:	e9c2 1304 	strd	r1, r3, [r2, #16]
    f110:	2304      	movs	r3, #4
    f112:	f8c2 c018 	str.w	ip, [r2, #24]
    f116:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f11a:	f842 3f0c 	str.w	r3, [r2, #12]!
    f11e:	60bb      	str	r3, [r7, #8]
    f120:	f019 feb6 	bl	28e90 <z_log_msg2_static_create.constprop.0>
    f124:	46a5      	mov	sp, r4
}
    f126:	2000      	movs	r0, #0
    f128:	3720      	adds	r7, #32
    f12a:	46bd      	mov	sp, r7
    f12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
    f130:	7841      	ldrb	r1, [r0, #1]
    f132:	b929      	cbnz	r1, f140 <l2cap_recv+0x8c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    f134:	483d      	ldr	r0, [pc, #244]	; (f22c <l2cap_recv+0x178>)
    f136:	6803      	ldr	r3, [r0, #0]
    f138:	0759      	lsls	r1, r3, #29
    f13a:	d0f4      	beq.n	f126 <l2cap_recv+0x72>
    f13c:	4b3e      	ldr	r3, [pc, #248]	; (f238 <l2cap_recv+0x184>)
    f13e:	e7c7      	b.n	f0d0 <l2cap_recv+0x1c>
	switch (hdr->code) {
    f140:	7803      	ldrb	r3, [r0, #0]
    f142:	2b12      	cmp	r3, #18
    f144:	d020      	beq.n	f188 <l2cap_recv+0xd4>
    f146:	2b13      	cmp	r3, #19
    f148:	d015      	beq.n	f176 <l2cap_recv+0xc2>
    f14a:	2b01      	cmp	r3, #1
    f14c:	d0eb      	beq.n	f126 <l2cap_recv+0x72>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    f14e:	4837      	ldr	r0, [pc, #220]	; (f22c <l2cap_recv+0x178>)
    f150:	6802      	ldr	r2, [r0, #0]
    f152:	f012 0f06 	tst.w	r2, #6
    f156:	d00b      	beq.n	f170 <l2cap_recv+0xbc>
    f158:	4a38      	ldr	r2, [pc, #224]	; (f23c <l2cap_recv+0x188>)
    f15a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
	switch (hdr->code) {
    f15e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    f162:	2303      	movs	r3, #3
    f164:	f107 0214 	add.w	r2, r7, #20
    f168:	607b      	str	r3, [r7, #4]
    f16a:	617b      	str	r3, [r7, #20]
    f16c:	f019 fe90 	bl	28e90 <z_log_msg2_static_create.constprop.0>
		l2cap_send_reject(chan->conn, hdr->ident,
    f170:	7861      	ldrb	r1, [r4, #1]
    f172:	6830      	ldr	r0, [r6, #0]
    f174:	e018      	b.n	f1a8 <l2cap_recv+0xf4>
	if (buf->len < sizeof(*rsp)) {
    f176:	f1bc 0f01 	cmp.w	ip, #1
    f17a:	d8d4      	bhi.n	f126 <l2cap_recv+0x72>
		BT_ERR("Too small LE conn param rsp");
    f17c:	482b      	ldr	r0, [pc, #172]	; (f22c <l2cap_recv+0x178>)
    f17e:	6803      	ldr	r3, [r0, #0]
    f180:	075a      	lsls	r2, r3, #29
    f182:	d0d0      	beq.n	f126 <l2cap_recv+0x72>
    f184:	4b2e      	ldr	r3, [pc, #184]	; (f240 <l2cap_recv+0x18c>)
    f186:	e7a3      	b.n	f0d0 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    f188:	f1bc 0f07 	cmp.w	ip, #7
    f18c:	d805      	bhi.n	f19a <l2cap_recv+0xe6>
		BT_ERR("Too small LE conn update param req");
    f18e:	4827      	ldr	r0, [pc, #156]	; (f22c <l2cap_recv+0x178>)
    f190:	6803      	ldr	r3, [r0, #0]
    f192:	075b      	lsls	r3, r3, #29
    f194:	d0c7      	beq.n	f126 <l2cap_recv+0x72>
    f196:	4b2b      	ldr	r3, [pc, #172]	; (f244 <l2cap_recv+0x190>)
    f198:	e79a      	b.n	f0d0 <l2cap_recv+0x1c>
    f19a:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
    f19c:	f896 8003 	ldrb.w	r8, [r6, #3]
    f1a0:	f1b8 0f00 	cmp.w	r8, #0
    f1a4:	d003      	beq.n	f1ae <l2cap_recv+0xfa>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    f1a6:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    f1a8:	f019 feea 	bl	28f80 <l2cap_send_reject.constprop.0>
		break;
    f1ac:	e7bb      	b.n	f126 <l2cap_recv+0x72>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    f1ae:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    f1b0:	7850      	ldrb	r0, [r2, #1]
    f1b2:	7813      	ldrb	r3, [r2, #0]
    f1b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    f1b8:	813b      	strh	r3, [r7, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    f1ba:	78d0      	ldrb	r0, [r2, #3]
    f1bc:	7893      	ldrb	r3, [r2, #2]
    f1be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    f1c2:	817b      	strh	r3, [r7, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    f1c4:	7950      	ldrb	r0, [r2, #5]
    f1c6:	7913      	ldrb	r3, [r2, #4]
    f1c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    f1cc:	81bb      	strh	r3, [r7, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    f1ce:	7993      	ldrb	r3, [r2, #6]
    f1d0:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    f1d2:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    f1d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    f1d8:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    f1da:	81fb      	strh	r3, [r7, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    f1dc:	f7ff fe9a 	bl	ef14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    f1e0:	4604      	mov	r4, r0
    f1e2:	2800      	cmp	r0, #0
    f1e4:	d09f      	beq.n	f126 <l2cap_recv+0x72>
	accepted = le_param_req(conn, &param);
    f1e6:	f107 0108 	add.w	r1, r7, #8
    f1ea:	4630      	mov	r0, r6
    f1ec:	f7ff fbce 	bl	e98c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
    f1f0:	2102      	movs	r1, #2
    f1f2:	4605      	mov	r5, r0
    f1f4:	f104 0008 	add.w	r0, r4, #8
    f1f8:	f01b fbf7 	bl	2a9ea <net_buf_simple_add>
	if (accepted) {
    f1fc:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    f200:	b2db      	uxtb	r3, r3
    f202:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    f204:	4622      	mov	r2, r4
    f206:	f8cd 8000 	str.w	r8, [sp]
    f20a:	4643      	mov	r3, r8
    f20c:	2105      	movs	r1, #5
    f20e:	4630      	mov	r0, r6
    f210:	f019 fe9d 	bl	28f4e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    f214:	b110      	cbz	r0, f21c <l2cap_recv+0x168>
		net_buf_unref(buf);
    f216:	4620      	mov	r0, r4
    f218:	f010 f828 	bl	1f26c <net_buf_unref>
	if (accepted) {
    f21c:	2d00      	cmp	r5, #0
    f21e:	d082      	beq.n	f126 <l2cap_recv+0x72>
		bt_conn_le_conn_update(conn, &param);
    f220:	f107 0108 	add.w	r1, r7, #8
    f224:	4630      	mov	r0, r6
    f226:	f019 fe07 	bl	28e38 <bt_conn_le_conn_update>
    f22a:	e77c      	b.n	f126 <l2cap_recv+0x72>
    f22c:	20000a0c 	.word	0x20000a0c
    f230:	00030e52 	.word	0x00030e52
    f234:	00030e70 	.word	0x00030e70
    f238:	00030e91 	.word	0x00030e91
    f23c:	00030ef1 	.word	0x00030ef1
    f240:	00030eb2 	.word	0x00030eb2
    f244:	00030ece 	.word	0x00030ece

0000f248 <bt_l2cap_recv>:
{
    f248:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    f24a:	898b      	ldrh	r3, [r1, #12]
    f24c:	2b03      	cmp	r3, #3
{
    f24e:	b089      	sub	sp, #36	; 0x24
    f250:	4605      	mov	r5, r0
    f252:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    f254:	d813      	bhi.n	f27e <bt_l2cap_recv+0x36>
		BT_ERR("Too small L2CAP PDU received");
    f256:	4819      	ldr	r0, [pc, #100]	; (f2bc <bt_l2cap_recv+0x74>)
    f258:	6803      	ldr	r3, [r0, #0]
    f25a:	075b      	lsls	r3, r3, #29
    f25c:	d009      	beq.n	f272 <bt_l2cap_recv+0x2a>
    f25e:	4b18      	ldr	r3, [pc, #96]	; (f2c0 <bt_l2cap_recv+0x78>)
    f260:	9306      	str	r3, [sp, #24]
    f262:	2302      	movs	r3, #2
    f264:	9301      	str	r3, [sp, #4]
    f266:	9305      	str	r3, [sp, #20]
    f268:	aa05      	add	r2, sp, #20
    f26a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f26e:	f019 fe0f 	bl	28e90 <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
    f272:	4620      	mov	r0, r4
}
    f274:	b009      	add	sp, #36	; 0x24
    f276:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
    f27a:	f00f bff7 	b.w	1f26c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    f27e:	2104      	movs	r1, #4
    f280:	f104 0008 	add.w	r0, r4, #8
    f284:	f01b fbe2 	bl	2aa4c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    f288:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    f28a:	4628      	mov	r0, r5
    f28c:	f019 fea1 	bl	28fd2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    f290:	b970      	cbnz	r0, f2b0 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    f292:	480a      	ldr	r0, [pc, #40]	; (f2bc <bt_l2cap_recv+0x74>)
    f294:	6803      	ldr	r3, [r0, #0]
    f296:	f013 0f06 	tst.w	r3, #6
    f29a:	d0ea      	beq.n	f272 <bt_l2cap_recv+0x2a>
    f29c:	4b09      	ldr	r3, [pc, #36]	; (f2c4 <bt_l2cap_recv+0x7c>)
    f29e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    f2a2:	2303      	movs	r3, #3
    f2a4:	9301      	str	r3, [sp, #4]
    f2a6:	9305      	str	r3, [sp, #20]
    f2a8:	aa05      	add	r2, sp, #20
    f2aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f2ae:	e7de      	b.n	f26e <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
    f2b0:	6843      	ldr	r3, [r0, #4]
    f2b2:	4621      	mov	r1, r4
    f2b4:	691b      	ldr	r3, [r3, #16]
    f2b6:	4798      	blx	r3
    f2b8:	e7db      	b.n	f272 <bt_l2cap_recv+0x2a>
    f2ba:	bf00      	nop
    f2bc:	20000a0c 	.word	0x20000a0c
    f2c0:	00030f0f 	.word	0x00030f0f
    f2c4:	00030f2c 	.word	0x00030f2c

0000f2c8 <bt_l2cap_update_conn_param>:
{
    f2c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f2ca:	460d      	mov	r5, r1
	ident++;
    f2cc:	4916      	ldr	r1, [pc, #88]	; (f328 <bt_l2cap_update_conn_param+0x60>)
    f2ce:	780b      	ldrb	r3, [r1, #0]
    f2d0:	3301      	adds	r3, #1
	if (!ident) {
    f2d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    f2d6:	bf08      	it	eq
    f2d8:	2301      	moveq	r3, #1
    f2da:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    f2dc:	7809      	ldrb	r1, [r1, #0]
{
    f2de:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    f2e0:	2208      	movs	r2, #8
    f2e2:	2012      	movs	r0, #18
    f2e4:	f7ff fe16 	bl	ef14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    f2e8:	4604      	mov	r4, r0
    f2ea:	b1d0      	cbz	r0, f322 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    f2ec:	2108      	movs	r1, #8
    f2ee:	4408      	add	r0, r1
    f2f0:	f01b fb7b 	bl	2a9ea <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    f2f4:	882b      	ldrh	r3, [r5, #0]
    f2f6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    f2f8:	886b      	ldrh	r3, [r5, #2]
    f2fa:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    f2fc:	88ab      	ldrh	r3, [r5, #4]
    f2fe:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    f300:	88eb      	ldrh	r3, [r5, #6]
    f302:	80c3      	strh	r3, [r0, #6]
    f304:	2300      	movs	r3, #0
    f306:	9300      	str	r3, [sp, #0]
    f308:	4622      	mov	r2, r4
    f30a:	2105      	movs	r1, #5
    f30c:	4630      	mov	r0, r6
    f30e:	f019 fe1e 	bl	28f4e <bt_l2cap_send_cb>
	if (err) {
    f312:	4605      	mov	r5, r0
    f314:	b110      	cbz	r0, f31c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    f316:	4620      	mov	r0, r4
    f318:	f00f ffa8 	bl	1f26c <net_buf_unref>
}
    f31c:	4628      	mov	r0, r5
    f31e:	b002      	add	sp, #8
    f320:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    f322:	f06f 050b 	mvn.w	r5, #11
    f326:	e7f9      	b.n	f31c <bt_l2cap_update_conn_param+0x54>
    f328:	20004995 	.word	0x20004995

0000f32c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    f32c:	4b02      	ldr	r3, [pc, #8]	; (f338 <att_cfm_sent+0xc>)
    f32e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    f332:	f019 be6c 	b.w	2900e <att_sent>
    f336:	bf00      	nop
    f338:	00029473 	.word	0x00029473

0000f33c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    f33c:	4b02      	ldr	r3, [pc, #8]	; (f348 <att_rsp_sent+0xc>)
    f33e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    f342:	f019 be64 	b.w	2900e <att_sent>
    f346:	bf00      	nop
    f348:	00029457 	.word	0x00029457

0000f34c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    f34c:	4b02      	ldr	r3, [pc, #8]	; (f358 <att_req_sent+0xc>)
    f34e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    f352:	f019 be5c 	b.w	2900e <att_sent>
    f356:	bf00      	nop
    f358:	00029205 	.word	0x00029205

0000f35c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    f35c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    f35e:	3808      	subs	r0, #8
    f360:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    f362:	a901      	add	r1, sp, #4
    f364:	4802      	ldr	r0, [pc, #8]	; (f370 <bt_att_released+0x14>)
    f366:	f01c f88d 	bl	2b484 <k_mem_slab_free>
}
    f36a:	b003      	add	sp, #12
    f36c:	f85d fb04 	ldr.w	pc, [sp], #4
    f370:	20000aa8 	.word	0x20000aa8

0000f374 <find_type_cb>:
{
    f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    f378:	f8d2 9000 	ldr.w	r9, [r2]
{
    f37c:	b099      	sub	sp, #100	; 0x64
    f37e:	4606      	mov	r6, r0
    f380:	460f      	mov	r7, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    f382:	2500      	movs	r5, #0
    f384:	f642 0301 	movw	r3, #10241	; 0x2801
    f388:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    f38a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    f38e:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    f392:	a912      	add	r1, sp, #72	; 0x48
{
    f394:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    f396:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    f39a:	f019 f9d4 	bl	28746 <bt_uuid_cmp>
    f39e:	2800      	cmp	r0, #0
    f3a0:	d06d      	beq.n	f47e <find_type_cb+0x10a>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    f3a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    f3a6:	6830      	ldr	r0, [r6, #0]
    f3a8:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    f3ac:	a912      	add	r1, sp, #72	; 0x48
    f3ae:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    f3b2:	f019 f9c8 	bl	28746 <bt_uuid_cmp>
    f3b6:	b138      	cbz	r0, f3c8 <find_type_cb+0x54>
		if (data->group &&
    f3b8:	68a3      	ldr	r3, [r4, #8]
    f3ba:	b11b      	cbz	r3, f3c4 <find_type_cb+0x50>
    f3bc:	885a      	ldrh	r2, [r3, #2]
    f3be:	42ba      	cmp	r2, r7
    f3c0:	d200      	bcs.n	f3c4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    f3c2:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    f3c4:	2001      	movs	r0, #1
    f3c6:	e009      	b.n	f3dc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    f3c8:	6861      	ldr	r1, [r4, #4]
    f3ca:	4608      	mov	r0, r1
    f3cc:	f019 fe17 	bl	28ffe <net_buf_frags_len>
    f3d0:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    f3d4:	1a1b      	subs	r3, r3, r0
    f3d6:	2b03      	cmp	r3, #3
    f3d8:	d803      	bhi.n	f3e2 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    f3da:	2000      	movs	r0, #0
}
    f3dc:	b019      	add	sp, #100	; 0x64
    f3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    f3e2:	4608      	mov	r0, r1
    f3e4:	f01b fad3 	bl	2a98e <net_buf_frag_last>
    f3e8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    f3ea:	6860      	ldr	r0, [r4, #4]
    f3ec:	f019 fe07 	bl	28ffe <net_buf_frags_len>
    f3f0:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
    f3f4:	f105 0b08 	add.w	fp, r5, #8
    f3f8:	ebaa 0a00 	sub.w	sl, sl, r0
    f3fc:	4658      	mov	r0, fp
    f3fe:	f01b fb41 	bl	2aa84 <net_buf_simple_tailroom>
    f402:	4550      	cmp	r0, sl
    f404:	d93e      	bls.n	f484 <find_type_cb+0x110>
    f406:	6860      	ldr	r0, [r4, #4]
    f408:	f019 fdf9 	bl	28ffe <net_buf_frags_len>
    f40c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    f410:	1a18      	subs	r0, r3, r0
	if (!len) {
    f412:	b970      	cbnz	r0, f432 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    f414:	6863      	ldr	r3, [r4, #4]
    f416:	7998      	ldrb	r0, [r3, #6]
    f418:	f00f fe64 	bl	1f0e4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    f41c:	2200      	movs	r2, #0
    f41e:	2300      	movs	r3, #0
    f420:	f01b fa7b 	bl	2a91a <net_buf_alloc_fixed>
		if (!frag) {
    f424:	4605      	mov	r5, r0
    f426:	2800      	cmp	r0, #0
    f428:	d0d7      	beq.n	f3da <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    f42a:	4601      	mov	r1, r0
    f42c:	6860      	ldr	r0, [r4, #4]
    f42e:	f01b fabf 	bl	2a9b0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    f432:	2300      	movs	r3, #0
    f434:	9300      	str	r3, [sp, #0]
    f436:	2310      	movs	r3, #16
    f438:	f8d6 9004 	ldr.w	r9, [r6, #4]
    f43c:	4631      	mov	r1, r6
    f43e:	eb0d 0203 	add.w	r2, sp, r3
    f442:	4640      	mov	r0, r8
    f444:	47c8      	blx	r9
	if (read < 0) {
    f446:	1e06      	subs	r6, r0, #0
    f448:	db19      	blt.n	f47e <find_type_cb+0x10a>
	if (read != data->value_len) {
    f44a:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    f44c:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    f44e:	4296      	cmp	r6, r2
    f450:	d03e      	beq.n	f4d0 <find_type_cb+0x15c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    f452:	4601      	mov	r1, r0
    f454:	a80d      	add	r0, sp, #52	; 0x34
    f456:	f019 f9a4 	bl	287a2 <bt_uuid_create>
    f45a:	b9b8      	cbnz	r0, f48c <find_type_cb+0x118>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    f45c:	481f      	ldr	r0, [pc, #124]	; (f4dc <find_type_cb+0x168>)
    f45e:	6803      	ldr	r3, [r0, #0]
    f460:	f013 0f06 	tst.w	r3, #6
    f464:	d00b      	beq.n	f47e <find_type_cb+0x10a>
    f466:	7c23      	ldrb	r3, [r4, #16]
    f468:	4a1d      	ldr	r2, [pc, #116]	; (f4e0 <find_type_cb+0x16c>)
    f46a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    f46e:	2303      	movs	r3, #3
    f470:	9308      	str	r3, [sp, #32]
			BT_WARN("Unable to create UUID: size %d", read);
    f472:	aa15      	add	r2, sp, #84	; 0x54
    f474:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f478:	9315      	str	r3, [sp, #84]	; 0x54
    f47a:	f019 ff00 	bl	2927e <z_log_msg2_static_create.constprop.0>
	data->group = NULL;
    f47e:	2300      	movs	r3, #0
    f480:	60a3      	str	r3, [r4, #8]
    f482:	e79f      	b.n	f3c4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    f484:	4658      	mov	r0, fp
    f486:	f01b fafd 	bl	2aa84 <net_buf_simple_tailroom>
    f48a:	e7c2      	b.n	f412 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    f48c:	b2f2      	uxtb	r2, r6
    f48e:	a904      	add	r1, sp, #16
    f490:	a808      	add	r0, sp, #32
    f492:	f019 f986 	bl	287a2 <bt_uuid_create>
    f496:	b950      	cbnz	r0, f4ae <find_type_cb+0x13a>
			BT_WARN("Unable to create UUID: size %d", read);
    f498:	4810      	ldr	r0, [pc, #64]	; (f4dc <find_type_cb+0x168>)
    f49a:	6803      	ldr	r3, [r0, #0]
    f49c:	f013 0f06 	tst.w	r3, #6
    f4a0:	d0ed      	beq.n	f47e <find_type_cb+0x10a>
    f4a2:	4b10      	ldr	r3, [pc, #64]	; (f4e4 <find_type_cb+0x170>)
    f4a4:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
    f4a8:	2303      	movs	r3, #3
    f4aa:	9303      	str	r3, [sp, #12]
    f4ac:	e7e1      	b.n	f472 <find_type_cb+0xfe>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    f4ae:	a908      	add	r1, sp, #32
    f4b0:	a80d      	add	r0, sp, #52	; 0x34
    f4b2:	f019 f948 	bl	28746 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    f4b6:	2800      	cmp	r0, #0
    f4b8:	d1e1      	bne.n	f47e <find_type_cb+0x10a>
	data->err = 0x00;
    f4ba:	2300      	movs	r3, #0
    f4bc:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    f4be:	2104      	movs	r1, #4
    f4c0:	f105 0008 	add.w	r0, r5, #8
    f4c4:	f01b fa91 	bl	2a9ea <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    f4c8:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    f4ca:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    f4cc:	8047      	strh	r7, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    f4ce:	e779      	b.n	f3c4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    f4d0:	4632      	mov	r2, r6
    f4d2:	a904      	add	r1, sp, #16
    f4d4:	f019 f846 	bl	28564 <memcmp>
    f4d8:	e7ed      	b.n	f4b6 <find_type_cb+0x142>
    f4da:	bf00      	nop
    f4dc:	2000098c 	.word	0x2000098c
    f4e0:	00030f68 	.word	0x00030f68
    f4e4:	00030f87 	.word	0x00030f87

0000f4e8 <att_get>:
{
    f4e8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    f4ea:	7b43      	ldrb	r3, [r0, #13]
    f4ec:	2b07      	cmp	r3, #7
{
    f4ee:	b088      	sub	sp, #32
	if (conn->state != BT_CONN_CONNECTED) {
    f4f0:	d013      	beq.n	f51a <att_get+0x32>
		BT_WARN("Not connected");
    f4f2:	481d      	ldr	r0, [pc, #116]	; (f568 <att_get+0x80>)
    f4f4:	6803      	ldr	r3, [r0, #0]
    f4f6:	f013 0f06 	tst.w	r3, #6
    f4fa:	d103      	bne.n	f504 <att_get+0x1c>
		return NULL;
    f4fc:	2400      	movs	r4, #0
}
    f4fe:	4620      	mov	r0, r4
    f500:	b008      	add	sp, #32
    f502:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
    f504:	4b19      	ldr	r3, [pc, #100]	; (f56c <att_get+0x84>)
    f506:	9306      	str	r3, [sp, #24]
    f508:	aa05      	add	r2, sp, #20
    f50a:	2302      	movs	r3, #2
    f50c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f510:	9301      	str	r3, [sp, #4]
    f512:	9305      	str	r3, [sp, #20]
    f514:	f019 feb3 	bl	2927e <z_log_msg2_static_create.constprop.0>
    f518:	e7f0      	b.n	f4fc <att_get+0x14>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    f51a:	2104      	movs	r1, #4
    f51c:	f019 fd59 	bl	28fd2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    f520:	4604      	mov	r4, r0
    f522:	b970      	cbnz	r0, f542 <att_get+0x5a>
		BT_ERR("Unable to find ATT channel");
    f524:	4810      	ldr	r0, [pc, #64]	; (f568 <att_get+0x80>)
    f526:	6803      	ldr	r3, [r0, #0]
    f528:	075a      	lsls	r2, r3, #29
    f52a:	d0e7      	beq.n	f4fc <att_get+0x14>
    f52c:	4b10      	ldr	r3, [pc, #64]	; (f570 <att_get+0x88>)
    f52e:	9306      	str	r3, [sp, #24]
    f530:	aa05      	add	r2, sp, #20
    f532:	2302      	movs	r3, #2
    f534:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f538:	9301      	str	r3, [sp, #4]
    f53a:	9305      	str	r3, [sp, #20]
    f53c:	f019 fe9f 	bl	2927e <z_log_msg2_static_create.constprop.0>
    f540:	e7dd      	b.n	f4fe <att_get+0x16>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f542:	f3bf 8f5b 	dmb	ish
    f546:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    f54a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    f54e:	075b      	lsls	r3, r3, #29
    f550:	d506      	bpl.n	f560 <att_get+0x78>
		BT_WARN("ATT channel flagged as disconnected");
    f552:	4805      	ldr	r0, [pc, #20]	; (f568 <att_get+0x80>)
    f554:	6803      	ldr	r3, [r0, #0]
    f556:	f013 0f06 	tst.w	r3, #6
    f55a:	d0cf      	beq.n	f4fc <att_get+0x14>
    f55c:	4b05      	ldr	r3, [pc, #20]	; (f574 <att_get+0x8c>)
    f55e:	e7d2      	b.n	f506 <att_get+0x1e>
	return att_chan->att;
    f560:	f850 4c08 	ldr.w	r4, [r0, #-8]
    f564:	e7cb      	b.n	f4fe <att_get+0x16>
    f566:	bf00      	nop
    f568:	2000098c 	.word	0x2000098c
    f56c:	00030fa6 	.word	0x00030fa6
    f570:	00030fb4 	.word	0x00030fb4
    f574:	00030fcf 	.word	0x00030fcf

0000f578 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    f578:	b5f0      	push	{r4, r5, r6, r7, lr}
    f57a:	b08b      	sub	sp, #44	; 0x2c
    f57c:	4607      	mov	r7, r0
    f57e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    f580:	482a      	ldr	r0, [pc, #168]	; (f62c <bt_att_accept+0xb4>)
    f582:	2200      	movs	r2, #0
    f584:	2300      	movs	r3, #0
    f586:	a901      	add	r1, sp, #4
    f588:	f013 ffec 	bl	23564 <k_mem_slab_alloc>
    f58c:	4604      	mov	r4, r0
    f58e:	b198      	cbz	r0, f5b8 <bt_att_accept+0x40>
		BT_ERR("No available ATT context for conn %p", conn);
    f590:	4827      	ldr	r0, [pc, #156]	; (f630 <bt_att_accept+0xb8>)
    f592:	6803      	ldr	r3, [r0, #0]
    f594:	075a      	lsls	r2, r3, #29
    f596:	d00a      	beq.n	f5ae <bt_att_accept+0x36>
    f598:	4b26      	ldr	r3, [pc, #152]	; (f634 <bt_att_accept+0xbc>)
    f59a:	e9cd 3708 	strd	r3, r7, [sp, #32]
		BT_ERR("No available ATT channel for conn %p", att->conn);
    f59e:	2303      	movs	r3, #3
    f5a0:	aa07      	add	r2, sp, #28
    f5a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f5a6:	9303      	str	r3, [sp, #12]
    f5a8:	9307      	str	r3, [sp, #28]
    f5aa:	f019 fe68 	bl	2927e <z_log_msg2_static_create.constprop.0>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    f5ae:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    f5b2:	4620      	mov	r0, r4
    f5b4:	b00b      	add	sp, #44	; 0x2c
    f5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    f5b8:	4601      	mov	r1, r0
    f5ba:	222c      	movs	r2, #44	; 0x2c
    f5bc:	9801      	ldr	r0, [sp, #4]
    f5be:	f019 f805 	bl	285cc <memset>
	att->conn = conn;
    f5c2:	9d01      	ldr	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    f5c4:	481c      	ldr	r0, [pc, #112]	; (f638 <bt_att_accept+0xc0>)
	list->tail = NULL;
    f5c6:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    f5c8:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    f5cc:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    f5d0:	2200      	movs	r2, #0
    f5d2:	2300      	movs	r3, #0
    f5d4:	a902      	add	r1, sp, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    f5d6:	9402      	str	r4, [sp, #8]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    f5d8:	f013 ffc4 	bl	23564 <k_mem_slab_alloc>
    f5dc:	4604      	mov	r4, r0
    f5de:	b140      	cbz	r0, f5f2 <bt_att_accept+0x7a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    f5e0:	4813      	ldr	r0, [pc, #76]	; (f630 <bt_att_accept+0xb8>)
    f5e2:	6803      	ldr	r3, [r0, #0]
    f5e4:	075b      	lsls	r3, r3, #29
    f5e6:	d0e2      	beq.n	f5ae <bt_att_accept+0x36>
    f5e8:	682b      	ldr	r3, [r5, #0]
    f5ea:	4a14      	ldr	r2, [pc, #80]	; (f63c <bt_att_accept+0xc4>)
    f5ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f5f0:	e7d5      	b.n	f59e <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
    f5f2:	4601      	mov	r1, r0
    f5f4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f5f8:	9802      	ldr	r0, [sp, #8]
    f5fa:	f018 ffe7 	bl	285cc <memset>
	chan->chan.chan.ops = &ops;
    f5fe:	9802      	ldr	r0, [sp, #8]
    f600:	4b0f      	ldr	r3, [pc, #60]	; (f640 <bt_att_accept+0xc8>)
    f602:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    f604:	30f8      	adds	r0, #248	; 0xf8
    f606:	f01c f809 	bl	2b61c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f60a:	9b02      	ldr	r3, [sp, #8]
    f60c:	f3bf 8f5b 	dmb	ish
    f610:	33f0      	adds	r3, #240	; 0xf0
    f612:	e853 2f00 	ldrex	r2, [r3]
    f616:	e843 4100 	strex	r1, r4, [r3]
    f61a:	2900      	cmp	r1, #0
    f61c:	d1f9      	bne.n	f612 <bt_att_accept+0x9a>
    f61e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    f622:	9b02      	ldr	r3, [sp, #8]
    f624:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    f628:	6033      	str	r3, [r6, #0]
	return 0;
    f62a:	e7c2      	b.n	f5b2 <bt_att_accept+0x3a>
    f62c:	20000a8c 	.word	0x20000a8c
    f630:	2000098c 	.word	0x2000098c
    f634:	00030ff3 	.word	0x00030ff3
    f638:	20000aa8 	.word	0x20000aa8
    f63c:	00031018 	.word	0x00031018
    f640:	20000368 	.word	0x20000368

0000f644 <read_group_cb>:
{
    f644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    f648:	4605      	mov	r5, r0
    f64a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    f64c:	f04f 0800 	mov.w	r8, #0
    f650:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    f654:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    f656:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    f658:	f88d 8008 	strb.w	r8, [sp, #8]
    f65c:	a902      	add	r1, sp, #8
{
    f65e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    f660:	f8ad 300a 	strh.w	r3, [sp, #10]
    f664:	f019 f86f 	bl	28746 <bt_uuid_cmp>
    f668:	b1a0      	cbz	r0, f694 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    f66a:	f642 0301 	movw	r3, #10241	; 0x2801
    f66e:	6828      	ldr	r0, [r5, #0]
    f670:	f88d 800c 	strb.w	r8, [sp, #12]
    f674:	a903      	add	r1, sp, #12
    f676:	f8ad 300e 	strh.w	r3, [sp, #14]
    f67a:	f019 f864 	bl	28746 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    f67e:	b148      	cbz	r0, f694 <read_group_cb+0x50>
		if (data->group &&
    f680:	6923      	ldr	r3, [r4, #16]
    f682:	b11b      	cbz	r3, f68c <read_group_cb+0x48>
    f684:	885a      	ldrh	r2, [r3, #2]
    f686:	42b2      	cmp	r2, r6
    f688:	d200      	bcs.n	f68c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    f68a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    f68c:	2001      	movs	r0, #1
}
    f68e:	b004      	add	sp, #16
    f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    f694:	6861      	ldr	r1, [r4, #4]
    f696:	6828      	ldr	r0, [r5, #0]
    f698:	f019 f855 	bl	28746 <bt_uuid_cmp>
    f69c:	b110      	cbz	r0, f6a4 <read_group_cb+0x60>
		data->group = NULL;
    f69e:	2300      	movs	r3, #0
    f6a0:	6123      	str	r3, [r4, #16]
    f6a2:	e7f3      	b.n	f68c <read_group_cb+0x48>
	if (data->rsp->len &&
    f6a4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    f6a6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    f6a8:	781a      	ldrb	r2, [r3, #0]
    f6aa:	b13a      	cbz	r2, f6bc <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    f6ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    f6b0:	8981      	ldrh	r1, [r0, #12]
    f6b2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    f6b4:	4293      	cmp	r3, r2
    f6b6:	da01      	bge.n	f6bc <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    f6b8:	2000      	movs	r0, #0
    f6ba:	e7e8      	b.n	f68e <read_group_cb+0x4a>
    f6bc:	2104      	movs	r1, #4
    f6be:	3008      	adds	r0, #8
    f6c0:	f01b f993 	bl	2a9ea <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    f6c4:	4b09      	ldr	r3, [pc, #36]	; (f6ec <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    f6c6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    f6c8:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    f6ca:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    f6cc:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    f6ce:	4629      	mov	r1, r5
    f6d0:	9300      	str	r3, [sp, #0]
    f6d2:	9401      	str	r4, [sp, #4]
    f6d4:	2300      	movs	r3, #0
    f6d6:	4638      	mov	r0, r7
    f6d8:	f019 fdd4 	bl	29284 <att_chan_read>
	if (read < 0) {
    f6dc:	2800      	cmp	r0, #0
    f6de:	dbeb      	blt.n	f6b8 <read_group_cb+0x74>
	if (!data->group) {
    f6e0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    f6e2:	3800      	subs	r0, #0
    f6e4:	bf18      	it	ne
    f6e6:	2001      	movne	r0, #1
    f6e8:	e7d1      	b.n	f68e <read_group_cb+0x4a>
    f6ea:	bf00      	nop
    f6ec:	000291e5 	.word	0x000291e5

0000f6f0 <chan_send>:
{
    f6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    f6f4:	688b      	ldr	r3, [r1, #8]
    f6f6:	781b      	ldrb	r3, [r3, #0]
    f6f8:	2bd2      	cmp	r3, #210	; 0xd2
{
    f6fa:	b08b      	sub	sp, #44	; 0x2c
    f6fc:	4606      	mov	r6, r0
    f6fe:	460c      	mov	r4, r1
    f700:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    f702:	d11a      	bne.n	f73a <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
    f704:	6803      	ldr	r3, [r0, #0]
    f706:	6818      	ldr	r0, [r3, #0]
    f708:	f003 f8ea 	bl	128e0 <bt_smp_sign>
		if (err) {
    f70c:	4605      	mov	r5, r0
    f70e:	b1a0      	cbz	r0, f73a <chan_send+0x4a>
			BT_ERR("Error signing data");
    f710:	4825      	ldr	r0, [pc, #148]	; (f7a8 <chan_send+0xb8>)
    f712:	6803      	ldr	r3, [r0, #0]
    f714:	075b      	lsls	r3, r3, #29
    f716:	d009      	beq.n	f72c <chan_send+0x3c>
    f718:	4b24      	ldr	r3, [pc, #144]	; (f7ac <chan_send+0xbc>)
    f71a:	9308      	str	r3, [sp, #32]
    f71c:	aa07      	add	r2, sp, #28
    f71e:	2302      	movs	r3, #2
    f720:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f724:	9303      	str	r3, [sp, #12]
    f726:	9307      	str	r3, [sp, #28]
    f728:	f019 fda9 	bl	2927e <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    f72c:	4620      	mov	r0, r4
    f72e:	f00f fd9d 	bl	1f26c <net_buf_unref>
}
    f732:	4628      	mov	r0, r5
    f734:	b00b      	add	sp, #44	; 0x2c
    f736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    f73a:	f104 0008 	add.w	r0, r4, #8
    f73e:	f01b f99d 	bl	2aa7c <net_buf_simple_headroom>
	state->len = buf->len;
    f742:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f746:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    f748:	b957      	cbnz	r7, f760 <chan_send+0x70>
	switch (att_op_get_type(buf->data[0])) {
    f74a:	68a3      	ldr	r3, [r4, #8]
    f74c:	7818      	ldrb	r0, [r3, #0]
    f74e:	f019 fc76 	bl	2903e <att_op_get_type>
    f752:	1e43      	subs	r3, r0, #1
    f754:	b2db      	uxtb	r3, r3
    f756:	2b04      	cmp	r3, #4
    f758:	bf9c      	itt	ls
    f75a:	4a15      	ldrls	r2, [pc, #84]	; (f7b0 <chan_send+0xc0>)
    f75c:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    f760:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    f762:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    f766:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    f768:	4b12      	ldr	r3, [pc, #72]	; (f7b4 <chan_send+0xc4>)
    f76a:	429f      	cmp	r7, r3
    f76c:	d018      	beq.n	f7a0 <chan_send+0xb0>
	} else if (cb == chan_cfm_sent) {
    f76e:	4b12      	ldr	r3, [pc, #72]	; (f7b8 <chan_send+0xc8>)
    f770:	429f      	cmp	r7, r3
    f772:	d017      	beq.n	f7a4 <chan_send+0xb4>
		return att_sent;
    f774:	4911      	ldr	r1, [pc, #68]	; (f7bc <chan_send+0xcc>)
    f776:	4b12      	ldr	r3, [pc, #72]	; (f7c0 <chan_send+0xd0>)
    f778:	4a12      	ldr	r2, [pc, #72]	; (f7c4 <chan_send+0xd4>)
    f77a:	428f      	cmp	r7, r1
    f77c:	bf18      	it	ne
    f77e:	4613      	movne	r3, r2
			       &chan->chan.chan);
    f780:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    f782:	9600      	str	r6, [sp, #0]
    f784:	4622      	mov	r2, r4
    f786:	2104      	movs	r1, #4
    f788:	f019 fbe1 	bl	28f4e <bt_l2cap_send_cb>
	if (err) {
    f78c:	4605      	mov	r5, r0
    f78e:	2800      	cmp	r0, #0
    f790:	d0cf      	beq.n	f732 <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
    f792:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f794:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f798:	fa10 f088 	uxtah	r0, r0, r8
    f79c:	60a0      	str	r0, [r4, #8]
}
    f79e:	e7c8      	b.n	f732 <chan_send+0x42>
		return att_rsp_sent;
    f7a0:	4b09      	ldr	r3, [pc, #36]	; (f7c8 <chan_send+0xd8>)
    f7a2:	e7ed      	b.n	f780 <chan_send+0x90>
		return att_cfm_sent;
    f7a4:	4b09      	ldr	r3, [pc, #36]	; (f7cc <chan_send+0xdc>)
    f7a6:	e7eb      	b.n	f780 <chan_send+0x90>
    f7a8:	2000098c 	.word	0x2000098c
    f7ac:	0003103d 	.word	0x0003103d
    f7b0:	0002cf78 	.word	0x0002cf78
    f7b4:	00029457 	.word	0x00029457
    f7b8:	00029473 	.word	0x00029473
    f7bc:	00029205 	.word	0x00029205
    f7c0:	0000f34d 	.word	0x0000f34d
    f7c4:	0002900f 	.word	0x0002900f
    f7c8:	0000f33d 	.word	0x0000f33d
    f7cc:	0000f32d 	.word	0x0000f32d

0000f7d0 <read_type_cb>:
{
    f7d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    f7d4:	f8d2 8000 	ldr.w	r8, [r2]
{
    f7d8:	4606      	mov	r6, r0
    f7da:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    f7dc:	6800      	ldr	r0, [r0, #0]
    f7de:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    f7e0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    f7e4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    f7e6:	f018 ffae 	bl	28746 <bt_uuid_cmp>
    f7ea:	4607      	mov	r7, r0
    f7ec:	2800      	cmp	r0, #0
    f7ee:	d13e      	bne.n	f86e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    f7f0:	4628      	mov	r0, r5
    f7f2:	2215      	movs	r2, #21
    f7f4:	4631      	mov	r1, r6
    f7f6:	f01a fb2f 	bl	29e58 <bt_gatt_check_perm>
    f7fa:	4605      	mov	r5, r0
    f7fc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    f7fe:	b148      	cbz	r0, f814 <read_type_cb+0x44>
		if (data->rsp->len) {
    f800:	68e3      	ldr	r3, [r4, #12]
    f802:	781b      	ldrb	r3, [r3, #0]
    f804:	b923      	cbnz	r3, f810 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    f806:	2500      	movs	r5, #0
}
    f808:	4628      	mov	r0, r5
    f80a:	b003      	add	sp, #12
    f80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    f810:	7527      	strb	r7, [r4, #20]
    f812:	e7f8      	b.n	f806 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    f814:	68a0      	ldr	r0, [r4, #8]
    f816:	f01b f8ba 	bl	2a98e <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    f81a:	2102      	movs	r1, #2
    f81c:	3008      	adds	r0, #8
    f81e:	f01b f8e4 	bl	2a9ea <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    f822:	4b14      	ldr	r3, [pc, #80]	; (f874 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    f824:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    f826:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    f828:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    f82c:	4631      	mov	r1, r6
    f82e:	9300      	str	r3, [sp, #0]
    f830:	9401      	str	r4, [sp, #4]
    f832:	462b      	mov	r3, r5
    f834:	4640      	mov	r0, r8
    f836:	f019 fd25 	bl	29284 <att_chan_read>
	if (read < 0) {
    f83a:	2800      	cmp	r0, #0
    f83c:	da07      	bge.n	f84e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    f83e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    f842:	bf26      	itte	cs
    f844:	4240      	negcs	r0, r0
    f846:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    f848:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    f84a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    f84c:	e7dc      	b.n	f808 <read_type_cb+0x38>
	if (!data->item) {
    f84e:	6923      	ldr	r3, [r4, #16]
    f850:	2b00      	cmp	r3, #0
    f852:	d0d8      	beq.n	f806 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    f854:	68a0      	ldr	r0, [r4, #8]
    f856:	f019 fbd2 	bl	28ffe <net_buf_frags_len>
    f85a:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    f85e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    f860:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    f862:	7818      	ldrb	r0, [r3, #0]
    f864:	4285      	cmp	r5, r0
    f866:	bf94      	ite	ls
    f868:	2500      	movls	r5, #0
    f86a:	2501      	movhi	r5, #1
    f86c:	e7cc      	b.n	f808 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    f86e:	2501      	movs	r5, #1
    f870:	e7ca      	b.n	f808 <read_type_cb+0x38>
    f872:	bf00      	nop
    f874:	0002901b 	.word	0x0002901b

0000f878 <bt_att_connected>:
{
    f878:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    f87a:	4606      	mov	r6, r0
{
    f87c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    f87e:	2104      	movs	r1, #4
    f880:	f856 0908 	ldr.w	r0, [r6], #-8
    f884:	f019 fb9a 	bl	28fbc <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    f888:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    f88c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f88e:	b91b      	cbnz	r3, f898 <bt_att_connected+0x20>
    f890:	f105 000c 	add.w	r0, r5, #12
    f894:	f01b fec2 	bl	2b61c <z_impl_k_queue_init>
	parent->next = child;
    f898:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f89a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    f89e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    f8a0:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    f8a4:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    f8a6:	b902      	cbnz	r2, f8aa <bt_att_connected+0x32>
	list->tail = node;
    f8a8:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f8aa:	f3bf 8f5b 	dmb	ish
    f8ae:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    f8b2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    f8b6:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    f8b8:	bf58      	it	pl
    f8ba:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    f8bc:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    f8be:	bf5c      	itt	pl
    f8c0:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    f8c4:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    f8c8:	f019 fbff 	bl	290ca <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    f8cc:	f504 7084 	add.w	r0, r4, #264	; 0x108
    f8d0:	4902      	ldr	r1, [pc, #8]	; (f8dc <bt_att_connected+0x64>)
}
    f8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    f8d6:	f01b bfa4 	b.w	2b822 <k_work_init_delayable>
    f8da:	bf00      	nop
    f8dc:	00010469 	.word	0x00010469

0000f8e0 <bt_att_chan_create_pdu>:
{
    f8e0:	b5b0      	push	{r4, r5, r7, lr}
    f8e2:	b088      	sub	sp, #32
    f8e4:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    f8e6:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    f8ea:	1c53      	adds	r3, r2, #1
    f8ec:	428b      	cmp	r3, r1
{
    f8ee:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    f8f0:	d91a      	bls.n	f928 <bt_att_chan_create_pdu+0x48>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    f8f2:	4823      	ldr	r0, [pc, #140]	; (f980 <bt_att_chan_create_pdu+0xa0>)
    f8f4:	6802      	ldr	r2, [r0, #0]
    f8f6:	f012 0f06 	tst.w	r2, #6
    f8fa:	d104      	bne.n	f906 <bt_att_chan_create_pdu+0x26>
		return NULL;
    f8fc:	2400      	movs	r4, #0
}
    f8fe:	4620      	mov	r0, r4
    f900:	3720      	adds	r7, #32
    f902:	46bd      	mov	sp, r7
    f904:	bdb0      	pop	{r4, r5, r7, pc}
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    f906:	466c      	mov	r4, sp
    f908:	b088      	sub	sp, #32
    f90a:	466a      	mov	r2, sp
    f90c:	4d1d      	ldr	r5, [pc, #116]	; (f984 <bt_att_chan_create_pdu+0xa4>)
    f90e:	6193      	str	r3, [r2, #24]
    f910:	2304      	movs	r3, #4
    f912:	e9c2 5104 	strd	r5, r1, [r2, #16]
    f916:	f842 3f0c 	str.w	r3, [r2, #12]!
    f91a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    f91e:	60bb      	str	r3, [r7, #8]
    f920:	f019 fcad 	bl	2927e <z_log_msg2_static_create.constprop.0>
    f924:	46a5      	mov	sp, r4
    f926:	e7e9      	b.n	f8fc <bt_att_chan_create_pdu+0x1c>
	switch (att_op_get_type(op)) {
    f928:	4628      	mov	r0, r5
    f92a:	f019 fb88 	bl	2903e <att_op_get_type>
    f92e:	2802      	cmp	r0, #2
    f930:	d001      	beq.n	f936 <bt_att_chan_create_pdu+0x56>
    f932:	2804      	cmp	r0, #4
    f934:	d119      	bne.n	f96a <bt_att_chan_create_pdu+0x8a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    f936:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    f93a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    f93c:	2100      	movs	r1, #0
    f93e:	4608      	mov	r0, r1
    f940:	f019 fb02 	bl	28f48 <bt_l2cap_create_pdu_timeout>
    f944:	4604      	mov	r4, r0
	if (!buf) {
    f946:	b9a8      	cbnz	r0, f974 <bt_att_chan_create_pdu+0x94>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    f948:	480d      	ldr	r0, [pc, #52]	; (f980 <bt_att_chan_create_pdu+0xa0>)
    f94a:	6803      	ldr	r3, [r0, #0]
    f94c:	075b      	lsls	r3, r3, #29
    f94e:	d0d5      	beq.n	f8fc <bt_att_chan_create_pdu+0x1c>
    f950:	4b0d      	ldr	r3, [pc, #52]	; (f988 <bt_att_chan_create_pdu+0xa8>)
    f952:	f107 0214 	add.w	r2, r7, #20
    f956:	e9c7 3506 	strd	r3, r5, [r7, #24]
    f95a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f95e:	2303      	movs	r3, #3
    f960:	607b      	str	r3, [r7, #4]
    f962:	617b      	str	r3, [r7, #20]
    f964:	f019 fc8b 	bl	2927e <z_log_msg2_static_create.constprop.0>
    f968:	e7c9      	b.n	f8fe <bt_att_chan_create_pdu+0x1e>
		buf = bt_l2cap_create_pdu(NULL, 0);
    f96a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f96e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f972:	e7e3      	b.n	f93c <bt_att_chan_create_pdu+0x5c>
    f974:	2101      	movs	r1, #1
    f976:	3008      	adds	r0, #8
    f978:	f01b f837 	bl	2a9ea <net_buf_simple_add>
	hdr->code = op;
    f97c:	7005      	strb	r5, [r0, #0]
	return buf;
    f97e:	e7be      	b.n	f8fe <bt_att_chan_create_pdu+0x1e>
    f980:	2000098c 	.word	0x2000098c
    f984:	00031050 	.word	0x00031050
    f988:	00030df3 	.word	0x00030df3

0000f98c <att_indicate>:
{
    f98c:	b570      	push	{r4, r5, r6, lr}
    f98e:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    f990:	f101 0008 	add.w	r0, r1, #8
    f994:	460d      	mov	r5, r1
    f996:	f01b f869 	bl	2aa6c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    f99a:	6826      	ldr	r6, [r4, #0]
    f99c:	89ab      	ldrh	r3, [r5, #12]
    f99e:	68aa      	ldr	r2, [r5, #8]
    f9a0:	4601      	mov	r1, r0
    f9a2:	6830      	ldr	r0, [r6, #0]
    f9a4:	f01a fb07 	bl	29fb6 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    f9a8:	211e      	movs	r1, #30
    f9aa:	2200      	movs	r2, #0
    f9ac:	4620      	mov	r0, r4
    f9ae:	f7ff ff97 	bl	f8e0 <bt_att_chan_create_pdu>
	if (!buf) {
    f9b2:	4601      	mov	r1, r0
    f9b4:	b118      	cbz	r0, f9be <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    f9b6:	4a03      	ldr	r2, [pc, #12]	; (f9c4 <att_indicate+0x38>)
    f9b8:	4620      	mov	r0, r4
    f9ba:	f019 fd24 	bl	29406 <bt_att_chan_send_rsp>
}
    f9be:	2000      	movs	r0, #0
    f9c0:	bd70      	pop	{r4, r5, r6, pc}
    f9c2:	bf00      	nop
    f9c4:	00029473 	.word	0x00029473

0000f9c8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9cc:	4688      	mov	r8, r1
    f9ce:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    f9d0:	2101      	movs	r1, #1
    f9d2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    f9d4:	4605      	mov	r5, r0
    f9d6:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    f9d8:	f7ff ff82 	bl	f8e0 <bt_att_chan_create_pdu>
	if (!buf) {
    f9dc:	4604      	mov	r4, r0
    f9de:	b178      	cbz	r0, fa00 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    f9e0:	2104      	movs	r1, #4
    f9e2:	3008      	adds	r0, #8
    f9e4:	f01b f801 	bl	2a9ea <net_buf_simple_add>
	rsp->request = req;
    f9e8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    f9ec:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    f9ee:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    f9f2:	4621      	mov	r1, r4
    f9f4:	4628      	mov	r0, r5
    f9f6:	4a03      	ldr	r2, [pc, #12]	; (fa04 <send_err_rsp.part.0+0x3c>)
}
    f9f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    f9fc:	f019 bd03 	b.w	29406 <bt_att_chan_send_rsp>
}
    fa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa04:	00029457 	.word	0x00029457

0000fa08 <bt_att_recv>:
{
    fa08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa0c:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
    fa0e:	898b      	ldrh	r3, [r1, #12]
{
    fa10:	af00      	add	r7, sp, #0
    fa12:	4604      	mov	r4, r0
    fa14:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    fa16:	b99b      	cbnz	r3, fa40 <bt_att_recv+0x38>
		BT_ERR("Too small ATT PDU received");
    fa18:	485f      	ldr	r0, [pc, #380]	; (fb98 <bt_att_recv+0x190>)
    fa1a:	6803      	ldr	r3, [r0, #0]
    fa1c:	075d      	lsls	r5, r3, #29
    fa1e:	d00a      	beq.n	fa36 <bt_att_recv+0x2e>
    fa20:	4b5e      	ldr	r3, [pc, #376]	; (fb9c <bt_att_recv+0x194>)
    fa22:	61bb      	str	r3, [r7, #24]
    fa24:	2302      	movs	r3, #2
    fa26:	607b      	str	r3, [r7, #4]
    fa28:	617b      	str	r3, [r7, #20]
    fa2a:	f107 0214 	add.w	r2, r7, #20
    fa2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
    fa32:	f019 fc24 	bl	2927e <z_log_msg2_static_create.constprop.0>
}
    fa36:	2000      	movs	r0, #0
    fa38:	3724      	adds	r7, #36	; 0x24
    fa3a:	46bd      	mov	sp, r7
    fa3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    fa40:	2101      	movs	r1, #1
    fa42:	f108 0008 	add.w	r0, r8, #8
    fa46:	f01b f801 	bl	2aa4c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    fa4a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    fa4e:	4605      	mov	r5, r0
    fa50:	2b00      	cmp	r3, #0
    fa52:	d0f0      	beq.n	fa36 <bt_att_recv+0x2e>
		if (hdr->code == handlers[i].op) {
    fa54:	7801      	ldrb	r1, [r0, #0]
    fa56:	4a52      	ldr	r2, [pc, #328]	; (fba0 <bt_att_recv+0x198>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    fa58:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    fa5c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    fa5e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    fa62:	4288      	cmp	r0, r1
    fa64:	d126      	bne.n	fab4 <bt_att_recv+0xac>
		if (handler->type == ATT_REQUEST &&
    fa66:	00d9      	lsls	r1, r3, #3
    fa68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    fa6c:	f893 9002 	ldrb.w	r9, [r3, #2]
    fa70:	f1b9 0f01 	cmp.w	r9, #1
    fa74:	d142      	bne.n	fafc <bt_att_recv+0xf4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fa76:	f3bf 8f5b 	dmb	ish
    fa7a:	34e8      	adds	r4, #232	; 0xe8
    fa7c:	e854 3f00 	ldrex	r3, [r4]
    fa80:	f043 0001 	orr.w	r0, r3, #1
    fa84:	e844 0c00 	strex	ip, r0, [r4]
    fa88:	f1bc 0f00 	cmp.w	ip, #0
    fa8c:	d1f6      	bne.n	fa7c <bt_att_recv+0x74>
    fa8e:	f3bf 8f5b 	dmb	ish
    fa92:	07dc      	lsls	r4, r3, #31
    fa94:	d54c      	bpl.n	fb30 <bt_att_recv+0x128>
			BT_WARN("Ignoring unexpected request");
    fa96:	4840      	ldr	r0, [pc, #256]	; (fb98 <bt_att_recv+0x190>)
    fa98:	6803      	ldr	r3, [r0, #0]
    fa9a:	f013 0f06 	tst.w	r3, #6
    fa9e:	d0ca      	beq.n	fa36 <bt_att_recv+0x2e>
    faa0:	4b40      	ldr	r3, [pc, #256]	; (fba4 <bt_att_recv+0x19c>)
			BT_WARN("Ignoring unexpected indication");
    faa2:	61bb      	str	r3, [r7, #24]
    faa4:	2302      	movs	r3, #2
    faa6:	607b      	str	r3, [r7, #4]
    faa8:	617b      	str	r3, [r7, #20]
    faaa:	f107 0214 	add.w	r2, r7, #20
    faae:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    fab2:	e7be      	b.n	fa32 <bt_att_recv+0x2a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    fab4:	3301      	adds	r3, #1
    fab6:	2b1d      	cmp	r3, #29
    fab8:	d1d1      	bne.n	fa5e <bt_att_recv+0x56>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    faba:	4837      	ldr	r0, [pc, #220]	; (fb98 <bt_att_recv+0x190>)
    fabc:	6803      	ldr	r3, [r0, #0]
    fabe:	f013 0f06 	tst.w	r3, #6
    fac2:	d00b      	beq.n	fadc <bt_att_recv+0xd4>
    fac4:	4b38      	ldr	r3, [pc, #224]	; (fba8 <bt_att_recv+0x1a0>)
    fac6:	f107 0214 	add.w	r2, r7, #20
    faca:	e9c7 3106 	strd	r3, r1, [r7, #24]
    face:	2303      	movs	r3, #3
    fad0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fad4:	607b      	str	r3, [r7, #4]
    fad6:	617b      	str	r3, [r7, #20]
    fad8:	f019 fbd1 	bl	2927e <z_log_msg2_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    fadc:	7829      	ldrb	r1, [r5, #0]
    fade:	4608      	mov	r0, r1
    fae0:	f019 faad 	bl	2903e <att_op_get_type>
    fae4:	2800      	cmp	r0, #0
    fae6:	d0a6      	beq.n	fa36 <bt_att_recv+0x2e>
    fae8:	2805      	cmp	r0, #5
    faea:	d0a4      	beq.n	fa36 <bt_att_recv+0x2e>
	if (!req) {
    faec:	2900      	cmp	r1, #0
    faee:	d0a2      	beq.n	fa36 <bt_att_recv+0x2e>
    faf0:	2306      	movs	r3, #6
    faf2:	2200      	movs	r2, #0
    faf4:	4630      	mov	r0, r6
    faf6:	f7ff ff67 	bl	f9c8 <send_err_rsp.part.0>
    fafa:	e79c      	b.n	fa36 <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
    fafc:	f1b9 0f05 	cmp.w	r9, #5
    fb00:	d116      	bne.n	fb30 <bt_att_recv+0x128>
    fb02:	f3bf 8f5b 	dmb	ish
    fb06:	34e8      	adds	r4, #232	; 0xe8
    fb08:	e854 3f00 	ldrex	r3, [r4]
    fb0c:	f043 0002 	orr.w	r0, r3, #2
    fb10:	e844 0c00 	strex	ip, r0, [r4]
    fb14:	f1bc 0f00 	cmp.w	ip, #0
    fb18:	d1f6      	bne.n	fb08 <bt_att_recv+0x100>
    fb1a:	f3bf 8f5b 	dmb	ish
    fb1e:	0798      	lsls	r0, r3, #30
    fb20:	d506      	bpl.n	fb30 <bt_att_recv+0x128>
			BT_WARN("Ignoring unexpected indication");
    fb22:	481d      	ldr	r0, [pc, #116]	; (fb98 <bt_att_recv+0x190>)
    fb24:	6803      	ldr	r3, [r0, #0]
    fb26:	f013 0f06 	tst.w	r3, #6
    fb2a:	d084      	beq.n	fa36 <bt_att_recv+0x2e>
    fb2c:	4b1f      	ldr	r3, [pc, #124]	; (fbac <bt_att_recv+0x1a4>)
    fb2e:	e7b8      	b.n	faa2 <bt_att_recv+0x9a>
	if (buf->len < handler->expect_len) {
    fb30:	440a      	add	r2, r1
    fb32:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    fb36:	7851      	ldrb	r1, [r2, #1]
    fb38:	4299      	cmp	r1, r3
    fb3a:	d91b      	bls.n	fb74 <bt_att_recv+0x16c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    fb3c:	4816      	ldr	r0, [pc, #88]	; (fb98 <bt_att_recv+0x190>)
    fb3e:	6802      	ldr	r2, [r0, #0]
    fb40:	0752      	lsls	r2, r2, #29
    fb42:	d011      	beq.n	fb68 <bt_att_recv+0x160>
    fb44:	f8df c068 	ldr.w	ip, [pc, #104]	; fbb0 <bt_att_recv+0x1a8>
    fb48:	7829      	ldrb	r1, [r5, #0]
    fb4a:	466c      	mov	r4, sp
    fb4c:	b088      	sub	sp, #32
    fb4e:	466a      	mov	r2, sp
    fb50:	e9c2 c304 	strd	ip, r3, [r2, #16]
    fb54:	2304      	movs	r3, #4
    fb56:	6191      	str	r1, [r2, #24]
    fb58:	f842 3f0c 	str.w	r3, [r2, #12]!
    fb5c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    fb60:	60bb      	str	r3, [r7, #8]
    fb62:	f019 fb8c 	bl	2927e <z_log_msg2_static_create.constprop.0>
    fb66:	46a5      	mov	sp, r4
	if (handler->type == ATT_REQUEST && err) {
    fb68:	f1b9 0f01 	cmp.w	r9, #1
    fb6c:	f47f af63 	bne.w	fa36 <bt_att_recv+0x2e>
    fb70:	2304      	movs	r3, #4
    fb72:	e00b      	b.n	fb8c <bt_att_recv+0x184>
		err = handler->func(att_chan, buf);
    fb74:	6853      	ldr	r3, [r2, #4]
    fb76:	4641      	mov	r1, r8
    fb78:	4630      	mov	r0, r6
    fb7a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    fb7c:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
    fb80:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    fb82:	f47f af58 	bne.w	fa36 <bt_att_recv+0x2e>
    fb86:	2800      	cmp	r0, #0
    fb88:	f43f af55 	beq.w	fa36 <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
    fb8c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    fb8e:	2900      	cmp	r1, #0
    fb90:	f43f af51 	beq.w	fa36 <bt_att_recv+0x2e>
    fb94:	e7ad      	b.n	faf2 <bt_att_recv+0xea>
    fb96:	bf00      	nop
    fb98:	2000098c 	.word	0x2000098c
    fb9c:	00031075 	.word	0x00031075
    fba0:	0002cf8c 	.word	0x0002cf8c
    fba4:	000310aa 	.word	0x000310aa
    fba8:	00031090 	.word	0x00031090
    fbac:	000310c6 	.word	0x000310c6
    fbb0:	000310e5 	.word	0x000310e5

0000fbb4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    fbb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fbb8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    fbba:	6803      	ldr	r3, [r0, #0]
    fbbc:	460e      	mov	r6, r1
    fbbe:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    fbc0:	b087      	sub	sp, #28
    fbc2:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    fbc4:	bf18      	it	ne
    fbc6:	2101      	movne	r1, #1
    fbc8:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    fbca:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    fbcc:	f01a fa1f 	bl	2a00e <bt_gatt_change_aware>
    fbd0:	2800      	cmp	r0, #0
    fbd2:	d04b      	beq.n	fc6c <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
    fbd4:	2f00      	cmp	r7, #0
    fbd6:	d04b      	beq.n	fc70 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
    fbd8:	2218      	movs	r2, #24
    fbda:	2100      	movs	r1, #0
    fbdc:	4668      	mov	r0, sp
    fbde:	f018 fcf5 	bl	285cc <memset>
	if (rsp) {
    fbe2:	f1b8 0f00 	cmp.w	r8, #0
    fbe6:	d122      	bne.n	fc2e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    fbe8:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    fbea:	4a22      	ldr	r2, [pc, #136]	; (fc74 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    fbec:	681b      	ldr	r3, [r3, #0]
    fbee:	9300      	str	r3, [sp, #0]
	data.value = value;
    fbf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbf2:	9303      	str	r3, [sp, #12]
	data.len = len;
    fbf4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    fbf8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    fbfc:	2301      	movs	r3, #1
    fbfe:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    fc02:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    fc06:	466b      	mov	r3, sp
    fc08:	4639      	mov	r1, r7
    fc0a:	4638      	mov	r0, r7
	data.req = req;
    fc0c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    fc10:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    fc14:	f019 fa8f 	bl	29136 <bt_gatt_foreach_attr>
	if (data.err) {
    fc18:	f89d 4014 	ldrb.w	r4, [sp, #20]
    fc1c:	b1f4      	cbz	r4, fc5c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    fc1e:	f1b8 0f00 	cmp.w	r8, #0
    fc22:	d10e      	bne.n	fc42 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    fc24:	2400      	movs	r4, #0
}
    fc26:	4620      	mov	r0, r4
    fc28:	b007      	add	sp, #28
    fc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    fc2e:	2200      	movs	r2, #0
    fc30:	4641      	mov	r1, r8
    fc32:	4628      	mov	r0, r5
    fc34:	f7ff fe54 	bl	f8e0 <bt_att_chan_create_pdu>
    fc38:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    fc3a:	2800      	cmp	r0, #0
    fc3c:	d1d4      	bne.n	fbe8 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    fc3e:	240e      	movs	r4, #14
    fc40:	e7f1      	b.n	fc26 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    fc42:	9801      	ldr	r0, [sp, #4]
    fc44:	f00f fb12 	bl	1f26c <net_buf_unref>
	if (!req) {
    fc48:	2e00      	cmp	r6, #0
    fc4a:	d0eb      	beq.n	fc24 <att_write_rsp.constprop.0+0x70>
    fc4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    fc50:	463a      	mov	r2, r7
    fc52:	4631      	mov	r1, r6
    fc54:	4628      	mov	r0, r5
    fc56:	f7ff feb7 	bl	f9c8 <send_err_rsp.part.0>
    fc5a:	e7e3      	b.n	fc24 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    fc5c:	9901      	ldr	r1, [sp, #4]
    fc5e:	2900      	cmp	r1, #0
    fc60:	d0e0      	beq.n	fc24 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    fc62:	4a05      	ldr	r2, [pc, #20]	; (fc78 <att_write_rsp.constprop.0+0xc4>)
    fc64:	4628      	mov	r0, r5
    fc66:	f019 fbce 	bl	29406 <bt_att_chan_send_rsp>
    fc6a:	e7dc      	b.n	fc26 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    fc6c:	2412      	movs	r4, #18
    fc6e:	e7da      	b.n	fc26 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    fc70:	2401      	movs	r4, #1
    fc72:	e7d8      	b.n	fc26 <att_write_rsp.constprop.0+0x72>
    fc74:	0002921b 	.word	0x0002921b
    fc78:	00029457 	.word	0x00029457

0000fc7c <att_signed_write_cmd>:
{
    fc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    fc80:	f8d0 9008 	ldr.w	r9, [r0, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fc84:	f3bf 8f5b 	dmb	ish
    fc88:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    fc8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    fc90:	071a      	lsls	r2, r3, #28
{
    fc92:	b08b      	sub	sp, #44	; 0x2c
    fc94:	4606      	mov	r6, r0
    fc96:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    fc98:	d503      	bpl.n	fca2 <att_signed_write_cmd+0x26>
		return 0;
    fc9a:	2000      	movs	r0, #0
}
    fc9c:	b00b      	add	sp, #44	; 0x2c
    fc9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	handle = sys_le16_to_cpu(req->handle);
    fca2:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
    fca4:	2101      	movs	r1, #1
    fca6:	f857 3f08 	ldr.w	r3, [r7, #8]!
    fcaa:	4638      	mov	r0, r7
    fcac:	f8b3 8000 	ldrh.w	r8, [r3]
    fcb0:	f01a febc 	bl	2aa2c <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    fcb4:	4648      	mov	r0, r9
    fcb6:	4629      	mov	r1, r5
    fcb8:	f002 fd96 	bl	127e8 <bt_smp_sign_verify>
	if (err) {
    fcbc:	4681      	mov	r9, r0
    fcbe:	b170      	cbz	r0, fcde <att_signed_write_cmd+0x62>
		BT_ERR("Error verifying data");
    fcc0:	4811      	ldr	r0, [pc, #68]	; (fd08 <att_signed_write_cmd+0x8c>)
    fcc2:	6803      	ldr	r3, [r0, #0]
    fcc4:	075b      	lsls	r3, r3, #29
    fcc6:	d0e8      	beq.n	fc9a <att_signed_write_cmd+0x1e>
    fcc8:	4b10      	ldr	r3, [pc, #64]	; (fd0c <att_signed_write_cmd+0x90>)
    fcca:	9308      	str	r3, [sp, #32]
    fccc:	aa07      	add	r2, sp, #28
    fcce:	2302      	movs	r3, #2
    fcd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fcd4:	9303      	str	r3, [sp, #12]
    fcd6:	9307      	str	r3, [sp, #28]
    fcd8:	f019 fad1 	bl	2927e <z_log_msg2_static_create.constprop.0>
    fcdc:	e7dd      	b.n	fc9a <att_signed_write_cmd+0x1e>
	return net_buf_simple_pull(&buf->b, len);
    fcde:	2101      	movs	r1, #1
    fce0:	4638      	mov	r0, r7
    fce2:	f01a feab 	bl	2aa3c <net_buf_simple_pull>
    fce6:	2102      	movs	r1, #2
    fce8:	4638      	mov	r0, r7
    fcea:	f01a fea7 	bl	2aa3c <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    fcee:	89ab      	ldrh	r3, [r5, #12]
    fcf0:	3b0c      	subs	r3, #12
    fcf2:	b29b      	uxth	r3, r3
    fcf4:	9301      	str	r3, [sp, #4]
    fcf6:	68ab      	ldr	r3, [r5, #8]
    fcf8:	9300      	str	r3, [sp, #0]
    fcfa:	464a      	mov	r2, r9
    fcfc:	4643      	mov	r3, r8
    fcfe:	4649      	mov	r1, r9
    fd00:	4630      	mov	r0, r6
    fd02:	f7ff ff57 	bl	fbb4 <att_write_rsp.constprop.0>
    fd06:	e7c9      	b.n	fc9c <att_signed_write_cmd+0x20>
    fd08:	2000098c 	.word	0x2000098c
    fd0c:	00031104 	.word	0x00031104

0000fd10 <bt_att_create_pdu>:
{
    fd10:	b530      	push	{r4, r5, lr}
    fd12:	b089      	sub	sp, #36	; 0x24
    fd14:	460d      	mov	r5, r1
    fd16:	4614      	mov	r4, r2
	att = att_get(conn);
    fd18:	f7ff fbe6 	bl	f4e8 <att_get>
	if (!att) {
    fd1c:	b1f0      	cbz	r0, fd5c <bt_att_create_pdu+0x4c>
	return list->head;
    fd1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    fd20:	b15b      	cbz	r3, fd3a <bt_att_create_pdu+0x2a>
    fd22:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
    fd26:	681b      	ldr	r3, [r3, #0]
    fd28:	b10b      	cbz	r3, fd2e <bt_att_create_pdu+0x1e>
    fd2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    fd2e:	1c61      	adds	r1, r4, #1
    fd30:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
    fd34:	4291      	cmp	r1, r2
    fd36:	d914      	bls.n	fd62 <bt_att_create_pdu+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    fd38:	b9d3      	cbnz	r3, fd70 <bt_att_create_pdu+0x60>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    fd3a:	4811      	ldr	r0, [pc, #68]	; (fd80 <bt_att_create_pdu+0x70>)
    fd3c:	6803      	ldr	r3, [r0, #0]
    fd3e:	f013 0f06 	tst.w	r3, #6
    fd42:	d00b      	beq.n	fd5c <bt_att_create_pdu+0x4c>
    fd44:	4b0f      	ldr	r3, [pc, #60]	; (fd84 <bt_att_create_pdu+0x74>)
    fd46:	9306      	str	r3, [sp, #24]
    fd48:	3401      	adds	r4, #1
    fd4a:	2303      	movs	r3, #3
    fd4c:	aa05      	add	r2, sp, #20
    fd4e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fd52:	9407      	str	r4, [sp, #28]
    fd54:	9301      	str	r3, [sp, #4]
    fd56:	9305      	str	r3, [sp, #20]
    fd58:	f019 fa91 	bl	2927e <z_log_msg2_static_create.constprop.0>
}
    fd5c:	2000      	movs	r0, #0
    fd5e:	b009      	add	sp, #36	; 0x24
    fd60:	bd30      	pop	{r4, r5, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    fd62:	4622      	mov	r2, r4
    fd64:	4629      	mov	r1, r5
}
    fd66:	b009      	add	sp, #36	; 0x24
    fd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    fd6c:	f7ff bdb8 	b.w	f8e0 <bt_att_chan_create_pdu>
    fd70:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    fd74:	b10a      	cbz	r2, fd7a <bt_att_create_pdu+0x6a>
    fd76:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
    fd7a:	4618      	mov	r0, r3
    fd7c:	4613      	mov	r3, r2
    fd7e:	e7d7      	b.n	fd30 <bt_att_create_pdu+0x20>
    fd80:	2000098c 	.word	0x2000098c
    fd84:	00031119 	.word	0x00031119

0000fd88 <att_read_group_req>:
{
    fd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    fd8c:	898c      	ldrh	r4, [r1, #12]
    fd8e:	3c04      	subs	r4, #4
    fd90:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    fd92:	2c02      	cmp	r4, #2
{
    fd94:	4605      	mov	r5, r0
    fd96:	b08c      	sub	sp, #48	; 0x30
    fd98:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    fd9a:	d001      	beq.n	fda0 <att_read_group_req+0x18>
    fd9c:	2c10      	cmp	r4, #16
    fd9e:	d16f      	bne.n	fe80 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
    fda0:	2104      	movs	r1, #4
    fda2:	3008      	adds	r0, #8
    fda4:	f01a fe52 	bl	2aa4c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    fda8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    fdac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    fdae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    fdb0:	1d01      	adds	r1, r0, #4
    fdb2:	4622      	mov	r2, r4
    fdb4:	4640      	mov	r0, r8
    fdb6:	f018 fcf4 	bl	287a2 <bt_uuid_create>
    fdba:	2800      	cmp	r0, #0
    fdbc:	d062      	beq.n	fe84 <att_read_group_req+0xfc>
	if (!start || !end) {
    fdbe:	2e00      	cmp	r6, #0
    fdc0:	d03a      	beq.n	fe38 <att_read_group_req+0xb0>
    fdc2:	2400      	movs	r4, #0
    fdc4:	2f00      	cmp	r7, #0
    fdc6:	d036      	beq.n	fe36 <att_read_group_req+0xae>
	if (start > end) {
    fdc8:	42b7      	cmp	r7, r6
    fdca:	d335      	bcc.n	fe38 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    fdcc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    fdd0:	a901      	add	r1, sp, #4
    fdd2:	4640      	mov	r0, r8
    fdd4:	f88d 4004 	strb.w	r4, [sp, #4]
    fdd8:	f8ad 3006 	strh.w	r3, [sp, #6]
    fddc:	f018 fcb3 	bl	28746 <bt_uuid_cmp>
    fde0:	2800      	cmp	r0, #0
    fde2:	d134      	bne.n	fe4e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    fde4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    fde6:	2214      	movs	r2, #20
    fde8:	2100      	movs	r1, #0
    fdea:	a807      	add	r0, sp, #28
    fdec:	f018 fbee 	bl	285cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    fdf0:	2201      	movs	r2, #1
    fdf2:	2111      	movs	r1, #17
    fdf4:	4620      	mov	r0, r4
    fdf6:	f7ff ff8b 	bl	fd10 <bt_att_create_pdu>
    fdfa:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    fdfc:	2800      	cmp	r0, #0
    fdfe:	d041      	beq.n	fe84 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    fe00:	2101      	movs	r1, #1
    fe02:	3008      	adds	r0, #8
	data.uuid = uuid;
    fe04:	e9cd 5807 	strd	r5, r8, [sp, #28]
    fe08:	f01a fdef 	bl	2a9ea <net_buf_simple_add>
	data.rsp->len = 0U;
    fe0c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    fe10:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    fe12:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    fe14:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    fe18:	4a1b      	ldr	r2, [pc, #108]	; (fe88 <att_read_group_req+0x100>)
	data.group = NULL;
    fe1a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    fe1e:	4639      	mov	r1, r7
    fe20:	4630      	mov	r0, r6
    fe22:	f019 f988 	bl	29136 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    fe26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe28:	781c      	ldrb	r4, [r3, #0]
    fe2a:	bb1c      	cbnz	r4, fe74 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    fe2c:	9809      	ldr	r0, [sp, #36]	; 0x24
    fe2e:	f00f fa1d 	bl	1f26c <net_buf_unref>
	if (!req) {
    fe32:	230a      	movs	r3, #10
    fe34:	e018      	b.n	fe68 <att_read_group_req+0xe0>
			*err = 0U;
    fe36:	463e      	mov	r6, r7
	if (!req) {
    fe38:	2301      	movs	r3, #1
    fe3a:	4632      	mov	r2, r6
    fe3c:	2110      	movs	r1, #16
    fe3e:	4628      	mov	r0, r5
    fe40:	f7ff fdc2 	bl	f9c8 <send_err_rsp.part.0>
		return 0;
    fe44:	2400      	movs	r4, #0
}
    fe46:	4620      	mov	r0, r4
    fe48:	b00c      	add	sp, #48	; 0x30
    fe4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    fe4e:	f642 0301 	movw	r3, #10241	; 0x2801
    fe52:	a907      	add	r1, sp, #28
    fe54:	4640      	mov	r0, r8
    fe56:	f88d 401c 	strb.w	r4, [sp, #28]
    fe5a:	f8ad 301e 	strh.w	r3, [sp, #30]
    fe5e:	f018 fc72 	bl	28746 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    fe62:	2800      	cmp	r0, #0
    fe64:	d0be      	beq.n	fde4 <att_read_group_req+0x5c>
	if (!req) {
    fe66:	2310      	movs	r3, #16
    fe68:	4632      	mov	r2, r6
    fe6a:	2110      	movs	r1, #16
    fe6c:	4628      	mov	r0, r5
    fe6e:	f7ff fdab 	bl	f9c8 <send_err_rsp.part.0>
		return 0;
    fe72:	e7e8      	b.n	fe46 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    fe74:	4a05      	ldr	r2, [pc, #20]	; (fe8c <att_read_group_req+0x104>)
    fe76:	9909      	ldr	r1, [sp, #36]	; 0x24
    fe78:	4628      	mov	r0, r5
    fe7a:	f019 fac4 	bl	29406 <bt_att_chan_send_rsp>
	return 0;
    fe7e:	e7e1      	b.n	fe44 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    fe80:	2404      	movs	r4, #4
    fe82:	e7e0      	b.n	fe46 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    fe84:	240e      	movs	r4, #14
    fe86:	e7de      	b.n	fe46 <att_read_group_req+0xbe>
    fe88:	0000f645 	.word	0x0000f645
    fe8c:	00029457 	.word	0x00029457

0000fe90 <att_read_mult_req>:
{
    fe90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    fe94:	6886      	ldr	r6, [r0, #8]
{
    fe96:	b085      	sub	sp, #20
    fe98:	4604      	mov	r4, r0
    fe9a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    fe9c:	4630      	mov	r0, r6
    fe9e:	2101      	movs	r1, #1
    fea0:	f01a f8b5 	bl	2a00e <bt_gatt_change_aware>
    fea4:	2800      	cmp	r0, #0
    fea6:	d038      	beq.n	ff1a <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
    fea8:	2210      	movs	r2, #16
    feaa:	2100      	movs	r1, #0
    feac:	4668      	mov	r0, sp
    feae:	f018 fb8d 	bl	285cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    feb2:	2200      	movs	r2, #0
    feb4:	210f      	movs	r1, #15
    feb6:	4630      	mov	r0, r6
    feb8:	f7ff ff2a 	bl	fd10 <bt_att_create_pdu>
    febc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    febe:	b370      	cbz	r0, ff1e <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    fec0:	f8df 9060 	ldr.w	r9, [pc, #96]	; ff24 <att_read_mult_req+0x94>
	data.chan = chan;
    fec4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    fec6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    feca:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    fece:	89ab      	ldrh	r3, [r5, #12]
    fed0:	2b01      	cmp	r3, #1
    fed2:	d805      	bhi.n	fee0 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    fed4:	4a14      	ldr	r2, [pc, #80]	; (ff28 <att_read_mult_req+0x98>)
    fed6:	9902      	ldr	r1, [sp, #8]
    fed8:	4620      	mov	r0, r4
    feda:	f019 fa94 	bl	29406 <bt_att_chan_send_rsp>
    fede:	e018      	b.n	ff12 <att_read_mult_req+0x82>
    fee0:	4638      	mov	r0, r7
    fee2:	f01a fdc3 	bl	2aa6c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    fee6:	466b      	mov	r3, sp
    fee8:	464a      	mov	r2, r9
    feea:	4601      	mov	r1, r0
    feec:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    feee:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    fef2:	f019 f920 	bl	29136 <bt_gatt_foreach_attr>
		if (data.err) {
    fef6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    fefa:	2b00      	cmp	r3, #0
    fefc:	d0e7      	beq.n	fece <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
    fefe:	9802      	ldr	r0, [sp, #8]
    ff00:	f00f f9b4 	bl	1f26c <net_buf_unref>
	if (!req) {
    ff04:	f89d 300c 	ldrb.w	r3, [sp, #12]
    ff08:	4632      	mov	r2, r6
    ff0a:	210e      	movs	r1, #14
    ff0c:	4620      	mov	r0, r4
    ff0e:	f7ff fd5b 	bl	f9c8 <send_err_rsp.part.0>
	return 0;
    ff12:	2000      	movs	r0, #0
}
    ff14:	b005      	add	sp, #20
    ff16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ff1a:	2012      	movs	r0, #18
    ff1c:	e7fa      	b.n	ff14 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
    ff1e:	200e      	movs	r0, #14
    ff20:	e7f8      	b.n	ff14 <att_read_mult_req+0x84>
    ff22:	bf00      	nop
    ff24:	0002948f 	.word	0x0002948f
    ff28:	00029457 	.word	0x00029457

0000ff2c <att_read_rsp>:
{
    ff2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    ff30:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    ff34:	4605      	mov	r5, r0
    ff36:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    ff38:	4640      	mov	r0, r8
    ff3a:	2101      	movs	r1, #1
{
    ff3c:	4614      	mov	r4, r2
    ff3e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    ff40:	f01a f865 	bl	2a00e <bt_gatt_change_aware>
    ff44:	b390      	cbz	r0, ffac <att_read_rsp+0x80>
	if (!handle) {
    ff46:	b39e      	cbz	r6, ffb0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    ff48:	2210      	movs	r2, #16
    ff4a:	2100      	movs	r1, #0
    ff4c:	4668      	mov	r0, sp
    ff4e:	f018 fb3d 	bl	285cc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    ff52:	2200      	movs	r2, #0
    ff54:	4621      	mov	r1, r4
    ff56:	4640      	mov	r0, r8
    ff58:	f7ff feda 	bl	fd10 <bt_att_create_pdu>
    ff5c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ff5e:	b348      	cbz	r0, ffb4 <att_read_rsp+0x88>
	data.offset = offset;
    ff60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ff64:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ff68:	2301      	movs	r3, #1
    ff6a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ff6e:	4a12      	ldr	r2, [pc, #72]	; (ffb8 <att_read_rsp+0x8c>)
	data.chan = chan;
    ff70:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ff72:	466b      	mov	r3, sp
    ff74:	4631      	mov	r1, r6
    ff76:	4630      	mov	r0, r6
    ff78:	f019 f8dd 	bl	29136 <bt_gatt_foreach_attr>
	if (data.err) {
    ff7c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    ff80:	b174      	cbz	r4, ffa0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    ff82:	9802      	ldr	r0, [sp, #8]
    ff84:	f00f f972 	bl	1f26c <net_buf_unref>
	if (!req) {
    ff88:	f89d 300c 	ldrb.w	r3, [sp, #12]
    ff8c:	4632      	mov	r2, r6
    ff8e:	4639      	mov	r1, r7
    ff90:	4628      	mov	r0, r5
    ff92:	f7ff fd19 	bl	f9c8 <send_err_rsp.part.0>
		return 0;
    ff96:	2400      	movs	r4, #0
}
    ff98:	4620      	mov	r0, r4
    ff9a:	b004      	add	sp, #16
    ff9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ffa0:	4a06      	ldr	r2, [pc, #24]	; (ffbc <att_read_rsp+0x90>)
    ffa2:	9902      	ldr	r1, [sp, #8]
    ffa4:	4628      	mov	r0, r5
    ffa6:	f019 fa2e 	bl	29406 <bt_att_chan_send_rsp>
	return 0;
    ffaa:	e7f5      	b.n	ff98 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ffac:	2412      	movs	r4, #18
    ffae:	e7f3      	b.n	ff98 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    ffb0:	2401      	movs	r4, #1
    ffb2:	e7f1      	b.n	ff98 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    ffb4:	240e      	movs	r4, #14
    ffb6:	e7ef      	b.n	ff98 <att_read_rsp+0x6c>
    ffb8:	0002948f 	.word	0x0002948f
    ffbc:	00029457 	.word	0x00029457

0000ffc0 <att_read_type_req>:
{
    ffc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    ffc4:	898c      	ldrh	r4, [r1, #12]
    ffc6:	3c04      	subs	r4, #4
    ffc8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    ffca:	2c02      	cmp	r4, #2
{
    ffcc:	4605      	mov	r5, r0
    ffce:	b08c      	sub	sp, #48	; 0x30
    ffd0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    ffd2:	d001      	beq.n	ffd8 <att_read_type_req+0x18>
    ffd4:	2c10      	cmp	r4, #16
    ffd6:	d150      	bne.n	1007a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7b>
	return net_buf_simple_pull_mem(&buf->b, len);
    ffd8:	2104      	movs	r1, #4
    ffda:	3008      	adds	r0, #8
    ffdc:	f01a fd36 	bl	2aa4c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ffe0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    ffe4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    ffe6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ffe8:	1d01      	adds	r1, r0, #4
    ffea:	4622      	mov	r2, r4
    ffec:	4640      	mov	r0, r8
    ffee:	f018 fbd8 	bl	287a2 <bt_uuid_create>
    fff2:	b188      	cbz	r0, 10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
	if (!start || !end) {
    fff4:	b19e      	cbz	r6, 1001e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f>
    fff6:	b18f      	cbz	r7, 1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
	if (start > end) {
    fff8:	42be      	cmp	r6, r7
    fffa:	d810      	bhi.n	1001e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f>
	(void)memset(&data, 0, sizeof(data));
    fffc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    fffe:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   10000:	2100      	movs	r1, #0
   10002:	eb0d 0002 	add.w	r0, sp, r2
   10006:	f018 fae1 	bl	285cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1000a:	2201      	movs	r2, #1
   1000c:	2109      	movs	r1, #9
   1000e:	4620      	mov	r0, r4
   10010:	f7ff fe7e 	bl	fd10 <bt_att_create_pdu>
   10014:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   10016:	b968      	cbnz	r0, 10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>
		return BT_ATT_ERR_UNLIKELY;
   10018:	240e      	movs	r4, #14
   1001a:	e007      	b.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
			*err = 0U;
   1001c:	463e      	mov	r6, r7
	if (!req) {
   1001e:	2301      	movs	r3, #1
   10020:	4632      	mov	r2, r6
   10022:	2108      	movs	r1, #8
   10024:	4628      	mov	r0, r5
   10026:	f7ff fccf 	bl	f9c8 <send_err_rsp.part.0>
		return 0;
   1002a:	2400      	movs	r4, #0
}
   1002c:	4620      	mov	r0, r4
   1002e:	b00c      	add	sp, #48	; 0x30
   10030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   10034:	2101      	movs	r1, #1
   10036:	3008      	adds	r0, #8
	data.uuid = uuid;
   10038:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1003c:	f01a fcd5 	bl	2a9ea <net_buf_simple_add>
	data.rsp->len = 0U;
   10040:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   10044:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   10046:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   10048:	4a0d      	ldr	r2, [pc, #52]	; (10080 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x81>)
	data.rsp->len = 0U;
   1004a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1004e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   10050:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   10054:	4630      	mov	r0, r6
   10056:	ab06      	add	r3, sp, #24
   10058:	f019 f86d 	bl	29136 <bt_gatt_foreach_attr>
	if (data.err) {
   1005c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   10060:	b12c      	cbz	r4, 1006e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f>
		net_buf_unref(data.buf);
   10062:	9808      	ldr	r0, [sp, #32]
   10064:	f00f f902 	bl	1f26c <net_buf_unref>
	if (!req) {
   10068:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1006c:	e7d8      	b.n	10020 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1006e:	4a05      	ldr	r2, [pc, #20]	; (10084 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x85>)
   10070:	9908      	ldr	r1, [sp, #32]
   10072:	4628      	mov	r0, r5
   10074:	f019 f9c7 	bl	29406 <bt_att_chan_send_rsp>
	return 0;
   10078:	e7d8      	b.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
		return BT_ATT_ERR_INVALID_PDU;
   1007a:	2404      	movs	r4, #4
   1007c:	e7d6      	b.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
   1007e:	bf00      	nop
   10080:	0000f7d1 	.word	0x0000f7d1
   10084:	00029457 	.word	0x00029457

00010088 <att_find_type_req>:
{
   10088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1008c:	4688      	mov	r8, r1
   1008e:	b086      	sub	sp, #24
   10090:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   10092:	2106      	movs	r1, #6
   10094:	f108 0008 	add.w	r0, r8, #8
   10098:	f01a fcd8 	bl	2aa4c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1009c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1009e:	b317      	cbz	r7, 100e6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   100a0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   100a4:	f1b9 0f00 	cmp.w	r9, #0
   100a8:	d01c      	beq.n	100e4 <att_find_type_req+0x5c>
	if (start > end) {
   100aa:	45b9      	cmp	r9, r7
   100ac:	d31b      	bcc.n	100e6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   100ae:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   100b0:	f8ad 3002 	strh.w	r3, [sp, #2]
   100b4:	2400      	movs	r4, #0
   100b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   100ba:	a901      	add	r1, sp, #4
   100bc:	4668      	mov	r0, sp
	value = buf->data;
   100be:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   100c2:	f88d 4000 	strb.w	r4, [sp]
   100c6:	f88d 4004 	strb.w	r4, [sp, #4]
   100ca:	f8ad 3006 	strh.w	r3, [sp, #6]
   100ce:	f018 fb3a 	bl	28746 <bt_uuid_cmp>
   100d2:	4606      	mov	r6, r0
   100d4:	b190      	cbz	r0, 100fc <att_find_type_req+0x74>
	if (!req) {
   100d6:	230a      	movs	r3, #10
   100d8:	463a      	mov	r2, r7
   100da:	2106      	movs	r1, #6
   100dc:	4628      	mov	r0, r5
   100de:	f7ff fc73 	bl	f9c8 <send_err_rsp.part.0>
		return 0;
   100e2:	e007      	b.n	100f4 <att_find_type_req+0x6c>
			*err = 0U;
   100e4:	464f      	mov	r7, r9
	if (!req) {
   100e6:	2301      	movs	r3, #1
   100e8:	463a      	mov	r2, r7
   100ea:	2106      	movs	r1, #6
   100ec:	4628      	mov	r0, r5
   100ee:	f7ff fc6b 	bl	f9c8 <send_err_rsp.part.0>
		return 0;
   100f2:	2400      	movs	r4, #0
}
   100f4:	4620      	mov	r0, r4
   100f6:	b006      	add	sp, #24
   100f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   100fc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   10100:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   10104:	4601      	mov	r1, r0
   10106:	2214      	movs	r2, #20
   10108:	a801      	add	r0, sp, #4
   1010a:	f018 fa5f 	bl	285cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1010e:	4632      	mov	r2, r6
   10110:	2107      	movs	r1, #7
   10112:	4640      	mov	r0, r8
   10114:	f7ff fdfc 	bl	fd10 <bt_att_create_pdu>
   10118:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1011a:	b1e0      	cbz	r0, 10156 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1011c:	230a      	movs	r3, #10
   1011e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   10122:	4a0e      	ldr	r2, [pc, #56]	; (1015c <att_find_type_req+0xd4>)
	data.value_len = value_len;
   10124:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   10128:	ab01      	add	r3, sp, #4
   1012a:	4649      	mov	r1, r9
   1012c:	4638      	mov	r0, r7
	data.value = value;
   1012e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   10132:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   10134:	f018 ffff 	bl	29136 <bt_gatt_foreach_attr>
	if (data.err) {
   10138:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1013c:	b12c      	cbz	r4, 1014a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1013e:	9802      	ldr	r0, [sp, #8]
   10140:	f00f f894 	bl	1f26c <net_buf_unref>
	if (!req) {
   10144:	f89d 3015 	ldrb.w	r3, [sp, #21]
   10148:	e7ce      	b.n	100e8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1014a:	4a05      	ldr	r2, [pc, #20]	; (10160 <att_find_type_req+0xd8>)
   1014c:	9902      	ldr	r1, [sp, #8]
   1014e:	4628      	mov	r0, r5
   10150:	f019 f959 	bl	29406 <bt_att_chan_send_rsp>
	return 0;
   10154:	e7ce      	b.n	100f4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   10156:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   10158:	e7cc      	b.n	100f4 <att_find_type_req+0x6c>
   1015a:	bf00      	nop
   1015c:	0000f375 	.word	0x0000f375
   10160:	00029457 	.word	0x00029457

00010164 <att_find_info_req>:
{
   10164:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   10166:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   10168:	881e      	ldrh	r6, [r3, #0]
{
   1016a:	b085      	sub	sp, #20
   1016c:	4605      	mov	r5, r0
	if (!start || !end) {
   1016e:	b19e      	cbz	r6, 10198 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   10170:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   10172:	b184      	cbz	r4, 10196 <att_find_info_req+0x32>
	if (start > end) {
   10174:	42a6      	cmp	r6, r4
   10176:	d80f      	bhi.n	10198 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   10178:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1017a:	2210      	movs	r2, #16
   1017c:	2100      	movs	r1, #0
   1017e:	4668      	mov	r0, sp
   10180:	f018 fa24 	bl	285cc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   10184:	2200      	movs	r2, #0
   10186:	2105      	movs	r1, #5
   10188:	4638      	mov	r0, r7
   1018a:	f7ff fdc1 	bl	fd10 <bt_att_create_pdu>
   1018e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   10190:	b958      	cbnz	r0, 101aa <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   10192:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   10194:	e007      	b.n	101a6 <att_find_info_req+0x42>
			*err = 0U;
   10196:	4626      	mov	r6, r4
	if (!req) {
   10198:	2301      	movs	r3, #1
   1019a:	4632      	mov	r2, r6
   1019c:	2104      	movs	r1, #4
   1019e:	4628      	mov	r0, r5
   101a0:	f7ff fc12 	bl	f9c8 <send_err_rsp.part.0>
	return 0;
   101a4:	2000      	movs	r0, #0
}
   101a6:	b005      	add	sp, #20
   101a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   101aa:	4621      	mov	r1, r4
   101ac:	4a09      	ldr	r2, [pc, #36]	; (101d4 <att_find_info_req+0x70>)
	data.chan = chan;
   101ae:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   101b0:	466b      	mov	r3, sp
   101b2:	4630      	mov	r0, r6
   101b4:	f018 ffbf 	bl	29136 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   101b8:	9c02      	ldr	r4, [sp, #8]
   101ba:	b924      	cbnz	r4, 101c6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   101bc:	9801      	ldr	r0, [sp, #4]
   101be:	f00f f855 	bl	1f26c <net_buf_unref>
	if (!req) {
   101c2:	230a      	movs	r3, #10
   101c4:	e7e9      	b.n	1019a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   101c6:	4a04      	ldr	r2, [pc, #16]	; (101d8 <att_find_info_req+0x74>)
   101c8:	9901      	ldr	r1, [sp, #4]
   101ca:	4628      	mov	r0, r5
   101cc:	f019 f91b 	bl	29406 <bt_att_chan_send_rsp>
   101d0:	e7e8      	b.n	101a4 <att_find_info_req+0x40>
   101d2:	bf00      	nop
   101d4:	0002914d 	.word	0x0002914d
   101d8:	00029457 	.word	0x00029457

000101dc <att_mtu_req>:
{
   101dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   101de:	6803      	ldr	r3, [r0, #0]
{
   101e0:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   101e2:	6818      	ldr	r0, [r3, #0]
   101e4:	f3bf 8f5b 	dmb	ish
   101e8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   101ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   101f0:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   101f4:	071b      	lsls	r3, r3, #28
   101f6:	d421      	bmi.n	1023c <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   101f8:	688b      	ldr	r3, [r1, #8]
   101fa:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   101fc:	2e16      	cmp	r6, #22
   101fe:	d91f      	bls.n	10240 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   10200:	2202      	movs	r2, #2
   10202:	2103      	movs	r1, #3
   10204:	f7ff fd84 	bl	fd10 <bt_att_create_pdu>
	if (!pdu) {
   10208:	4607      	mov	r7, r0
   1020a:	b1d8      	cbz	r0, 10244 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   1020c:	2102      	movs	r1, #2
   1020e:	3008      	adds	r0, #8
   10210:	f01a fbeb 	bl	2a9ea <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   10214:	2341      	movs	r3, #65	; 0x41
   10216:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   10218:	4a0b      	ldr	r2, [pc, #44]	; (10248 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1021a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1021c:	4639      	mov	r1, r7
   1021e:	4620      	mov	r0, r4
   10220:	f019 f8f1 	bl	29406 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   10224:	2e41      	cmp	r6, #65	; 0x41
   10226:	bf28      	it	cs
   10228:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   1022a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1022c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   10230:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   10234:	f018 ff49 	bl	290ca <att_chan_mtu_updated>
	return 0;
   10238:	4628      	mov	r0, r5
}
   1023a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1023c:	2006      	movs	r0, #6
   1023e:	e7fc      	b.n	1023a <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   10240:	2004      	movs	r0, #4
   10242:	e7fa      	b.n	1023a <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   10244:	200e      	movs	r0, #14
   10246:	e7f8      	b.n	1023a <att_mtu_req+0x5e>
   10248:	00029457 	.word	0x00029457

0001024c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1024c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1024e:	2300      	movs	r3, #0
{
   10250:	4605      	mov	r5, r0
   10252:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   10254:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   10256:	f014 f92f 	bl	244b8 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   1025a:	4b0b      	ldr	r3, [pc, #44]	; (10288 <bt_att_req_alloc+0x3c>)
   1025c:	681b      	ldr	r3, [r3, #0]
   1025e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   10260:	bf04      	itt	eq
   10262:	2500      	moveq	r5, #0
   10264:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   10266:	a901      	add	r1, sp, #4
   10268:	4808      	ldr	r0, [pc, #32]	; (1028c <bt_att_req_alloc+0x40>)
   1026a:	462a      	mov	r2, r5
   1026c:	4623      	mov	r3, r4
   1026e:	f013 f979 	bl	23564 <k_mem_slab_alloc>
   10272:	4601      	mov	r1, r0
   10274:	b930      	cbnz	r0, 10284 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   10276:	9801      	ldr	r0, [sp, #4]
   10278:	221c      	movs	r2, #28
   1027a:	f018 f9a7 	bl	285cc <memset>

	return req;
   1027e:	9801      	ldr	r0, [sp, #4]
}
   10280:	b003      	add	sp, #12
   10282:	bd30      	pop	{r4, r5, pc}
		return NULL;
   10284:	2000      	movs	r0, #0
   10286:	e7fb      	b.n	10280 <bt_att_req_alloc+0x34>
   10288:	20002a30 	.word	0x20002a30
   1028c:	20000ae0 	.word	0x20000ae0

00010290 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   10290:	b507      	push	{r0, r1, r2, lr}
   10292:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   10294:	6880      	ldr	r0, [r0, #8]
   10296:	b120      	cbz	r0, 102a2 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   10298:	f00e ffe8 	bl	1f26c <net_buf_unref>
		req->buf = NULL;
   1029c:	9b01      	ldr	r3, [sp, #4]
   1029e:	2200      	movs	r2, #0
   102a0:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   102a2:	4803      	ldr	r0, [pc, #12]	; (102b0 <bt_att_req_free+0x20>)
   102a4:	a901      	add	r1, sp, #4
   102a6:	f01b f8ed 	bl	2b484 <k_mem_slab_free>
}
   102aa:	b003      	add	sp, #12
   102ac:	f85d fb04 	ldr.w	pc, [sp], #4
   102b0:	20000ae0 	.word	0x20000ae0

000102b4 <att_handle_rsp>:
{
   102b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102b8:	4605      	mov	r5, r0
   102ba:	b08b      	sub	sp, #44	; 0x2c
	k_work_cancel_delayable(&chan->timeout_work);
   102bc:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   102c0:	460f      	mov	r7, r1
   102c2:	4690      	mov	r8, r2
   102c4:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   102c6:	f01b fab8 	bl	2b83a <k_work_cancel_delayable>
	if (!chan->req) {
   102ca:	f8d5 a0f4 	ldr.w	sl, [r5, #244]	; 0xf4
   102ce:	f1ba 0f00 	cmp.w	sl, #0
   102d2:	d11f      	bne.n	10314 <att_handle_rsp+0x60>
		BT_WARN("No pending ATT request");
   102d4:	481a      	ldr	r0, [pc, #104]	; (10340 <att_handle_rsp+0x8c>)
   102d6:	6804      	ldr	r4, [r0, #0]
   102d8:	f014 0406 	ands.w	r4, r4, #6
   102dc:	d00a      	beq.n	102f4 <att_handle_rsp+0x40>
   102de:	4b19      	ldr	r3, [pc, #100]	; (10344 <att_handle_rsp+0x90>)
   102e0:	9308      	str	r3, [sp, #32]
   102e2:	aa07      	add	r2, sp, #28
   102e4:	2302      	movs	r3, #2
   102e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
   102ea:	4654      	mov	r4, sl
		BT_WARN("No pending ATT request");
   102ec:	9303      	str	r3, [sp, #12]
   102ee:	9307      	str	r3, [sp, #28]
   102f0:	f018 ffc5 	bl	2927e <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
   102f4:	6828      	ldr	r0, [r5, #0]
   102f6:	f019 f931 	bl	2955c <att_req_send_process>
	if (func) {
   102fa:	b13c      	cbz	r4, 1030c <att_handle_rsp+0x58>
		func(chan->att->conn, err, pdu, len, params);
   102fc:	6828      	ldr	r0, [r5, #0]
   102fe:	f8cd 9000 	str.w	r9, [sp]
   10302:	6800      	ldr	r0, [r0, #0]
   10304:	4643      	mov	r3, r8
   10306:	463a      	mov	r2, r7
   10308:	4631      	mov	r1, r6
   1030a:	47a0      	blx	r4
}
   1030c:	2000      	movs	r0, #0
   1030e:	b00b      	add	sp, #44	; 0x2c
   10310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   10314:	4b0c      	ldr	r3, [pc, #48]	; (10348 <att_handle_rsp+0x94>)
   10316:	459a      	cmp	sl, r3
   10318:	f04f 0b00 	mov.w	fp, #0
   1031c:	d103      	bne.n	10326 <att_handle_rsp+0x72>
		chan->req = NULL;
   1031e:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
	bt_att_func_t func = NULL;
   10322:	465c      	mov	r4, fp
		goto process;
   10324:	e7e6      	b.n	102f4 <att_handle_rsp+0x40>
	func = chan->req->func;
   10326:	f8da 4004 	ldr.w	r4, [sl, #4]
	chan->req->func = NULL;
   1032a:	f8ca b004 	str.w	fp, [sl, #4]
	bt_att_req_free(chan->req);
   1032e:	4650      	mov	r0, sl
	params = chan->req->user_data;
   10330:	f8da 9018 	ldr.w	r9, [sl, #24]
	bt_att_req_free(chan->req);
   10334:	f7ff ffac 	bl	10290 <bt_att_req_free>
	chan->req = NULL;
   10338:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
   1033c:	e7da      	b.n	102f4 <att_handle_rsp+0x40>
   1033e:	bf00      	nop
   10340:	2000098c 	.word	0x2000098c
   10344:	00031134 	.word	0x00031134
   10348:	20002b70 	.word	0x20002b70

0001034c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1034c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
{
   10350:	b570      	push	{r4, r5, r6, lr}
   10352:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   10354:	b313      	cbz	r3, 1039c <att_error_rsp+0x50>
   10356:	4a16      	ldr	r2, [pc, #88]	; (103b0 <att_error_rsp+0x64>)
   10358:	4293      	cmp	r3, r2
   1035a:	d01f      	beq.n	1039c <att_error_rsp+0x50>
	err = rsp->error;
   1035c:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1035e:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
   10360:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
   10362:	2d05      	cmp	r5, #5
   10364:	d006      	beq.n	10374 <att_error_rsp+0x28>
   10366:	2d0f      	cmp	r5, #15
   10368:	d119      	bne.n	1039e <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   1036a:	7a43      	ldrb	r3, [r0, #9]
   1036c:	2b01      	cmp	r3, #1
   1036e:	d816      	bhi.n	1039e <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   10370:	2102      	movs	r1, #2
   10372:	e007      	b.n	10384 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   10374:	7a43      	ldrb	r3, [r0, #9]
   10376:	2b01      	cmp	r3, #1
   10378:	d9fa      	bls.n	10370 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   1037a:	2b02      	cmp	r3, #2
   1037c:	d00c      	beq.n	10398 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   1037e:	2b03      	cmp	r3, #3
   10380:	d10d      	bne.n	1039e <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   10382:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   10384:	f018 fccd 	bl	28d22 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   10388:	b948      	cbnz	r0, 1039e <att_error_rsp+0x52>
		chan->req->retrying = true;
   1038a:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   1038e:	7c13      	ldrb	r3, [r2, #16]
   10390:	f043 0301 	orr.w	r3, r3, #1
   10394:	7413      	strb	r3, [r2, #16]
}
   10396:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   10398:	2103      	movs	r1, #3
   1039a:	e7f3      	b.n	10384 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   1039c:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   1039e:	2200      	movs	r2, #0
   103a0:	462b      	mov	r3, r5
   103a2:	4620      	mov	r0, r4
   103a4:	4611      	mov	r1, r2
}
   103a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   103aa:	f7ff bf83 	b.w	102b4 <att_handle_rsp>
   103ae:	bf00      	nop
   103b0:	20002b70 	.word	0x20002b70

000103b4 <bt_att_disconnected>:
{
   103b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   103b6:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   103ba:	b085      	sub	sp, #20
   103bc:	4604      	mov	r4, r0
	if (!att_chan->att) {
   103be:	2d00      	cmp	r5, #0
   103c0:	d04d      	beq.n	1045e <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   103c2:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   103c6:	f105 0024 	add.w	r0, r5, #36	; 0x24
   103ca:	f019 f82a 	bl	29422 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   103ce:	f1a4 0608 	sub.w	r6, r4, #8
   103d2:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   103d6:	2200      	movs	r2, #0
   103d8:	2300      	movs	r3, #0
   103da:	4638      	mov	r0, r7
   103dc:	f01a faa2 	bl	2a924 <net_buf_get>
   103e0:	4602      	mov	r2, r0
   103e2:	bb18      	cbnz	r0, 1042c <bt_att_disconnected+0x78>
	if (chan->req) {
   103e4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   103e8:	b123      	cbz	r3, 103f4 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   103ea:	4601      	mov	r1, r0
   103ec:	230e      	movs	r3, #14
   103ee:	4630      	mov	r0, r6
   103f0:	f7ff ff60 	bl	102b4 <att_handle_rsp>
	chan->att = NULL;
   103f4:	2300      	movs	r3, #0
   103f6:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   103fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   103fc:	2b00      	cmp	r3, #0
   103fe:	d12e      	bne.n	1045e <bt_att_disconnected+0xaa>
	att_reset(att);
   10400:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   10402:	9803      	ldr	r0, [sp, #12]
   10404:	2200      	movs	r2, #0
   10406:	2300      	movs	r3, #0
   10408:	300c      	adds	r0, #12
   1040a:	f01a fa8b 	bl	2a924 <net_buf_get>
   1040e:	b980      	cbnz	r0, 10432 <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   10410:	9803      	ldr	r0, [sp, #12]
	return list->head;
   10412:	6845      	ldr	r5, [r0, #4]
   10414:	b985      	cbnz	r5, 10438 <bt_att_disconnected+0x84>
	att->conn = NULL;
   10416:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   10418:	a903      	add	r1, sp, #12
   1041a:	4812      	ldr	r0, [pc, #72]	; (10464 <bt_att_disconnected+0xb0>)
   1041c:	f01b f832 	bl	2b484 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   10420:	6820      	ldr	r0, [r4, #0]
}
   10422:	b005      	add	sp, #20
   10424:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   10428:	f000 bf6c 	b.w	11304 <bt_gatt_disconnected>
		net_buf_unref(buf);
   1042c:	f00e ff1e 	bl	1f26c <net_buf_unref>
   10430:	e7d1      	b.n	103d6 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   10432:	f00e ff1b 	bl	1f26c <net_buf_unref>
   10436:	e7e4      	b.n	10402 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10438:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   1043a:	686e      	ldr	r6, [r5, #4]
	return node->next;
   1043c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1043e:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10440:	4295      	cmp	r5, r2
	list->tail = node;
   10442:	bf08      	it	eq
   10444:	6083      	streq	r3, [r0, #8]
   10446:	b136      	cbz	r6, 10456 <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   10448:	69ab      	ldr	r3, [r5, #24]
   1044a:	9300      	str	r3, [sp, #0]
   1044c:	2300      	movs	r3, #0
   1044e:	6800      	ldr	r0, [r0, #0]
   10450:	461a      	mov	r2, r3
   10452:	210e      	movs	r1, #14
   10454:	47b0      	blx	r6
		bt_att_req_free(req);
   10456:	4628      	mov	r0, r5
   10458:	f7ff ff1a 	bl	10290 <bt_att_req_free>
   1045c:	e7d8      	b.n	10410 <bt_att_disconnected+0x5c>
}
   1045e:	b005      	add	sp, #20
   10460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10462:	bf00      	nop
   10464:	20000a8c 	.word	0x20000a8c

00010468 <att_timeout>:
{
   10468:	b510      	push	{r4, lr}
   1046a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1046c:	480a      	ldr	r0, [pc, #40]	; (10498 <att_timeout+0x30>)
   1046e:	6803      	ldr	r3, [r0, #0]
   10470:	075b      	lsls	r3, r3, #29
{
   10472:	b088      	sub	sp, #32
	BT_ERR("ATT Timeout");
   10474:	d009      	beq.n	1048a <att_timeout+0x22>
   10476:	4b09      	ldr	r3, [pc, #36]	; (1049c <att_timeout+0x34>)
   10478:	9306      	str	r3, [sp, #24]
   1047a:	aa05      	add	r2, sp, #20
   1047c:	2302      	movs	r3, #2
   1047e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10482:	9301      	str	r3, [sp, #4]
   10484:	9305      	str	r3, [sp, #20]
   10486:	f018 fefa 	bl	2927e <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1048a:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   1048e:	b008      	add	sp, #32
   10490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   10494:	f7ff bf8e 	b.w	103b4 <bt_att_disconnected>
   10498:	2000098c 	.word	0x2000098c
   1049c:	0003114b 	.word	0x0003114b

000104a0 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   104a0:	b510      	push	{r4, lr}
   104a2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   104a4:	b330      	cbz	r0, 104f4 <bt_att_req_cancel+0x54>
   104a6:	b329      	cbz	r1, 104f4 <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
   104a8:	f7ff f81e 	bl	f4e8 <att_get>
	if (!att) {
   104ac:	b310      	cbz	r0, 104f4 <bt_att_req_cancel+0x54>
	return list->head;
   104ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   104b0:	b153      	cbz	r3, 104c8 <bt_att_req_cancel+0x28>
   104b2:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
   104b6:	681b      	ldr	r3, [r3, #0]
   104b8:	b10b      	cbz	r3, 104be <bt_att_req_cancel+0x1e>
   104ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   104be:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
   104c2:	4294      	cmp	r4, r2
   104c4:	d006      	beq.n	104d4 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   104c6:	b96b      	cbnz	r3, 104e4 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   104c8:	3004      	adds	r0, #4
   104ca:	4621      	mov	r1, r4
   104cc:	f018 ffa9 	bl	29422 <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
   104d0:	4620      	mov	r0, r4
   104d2:	e003      	b.n	104dc <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
   104d4:	4b08      	ldr	r3, [pc, #32]	; (104f8 <bt_att_req_cancel+0x58>)
   104d6:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
   104da:	4620      	mov	r0, r4
}
   104dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   104e0:	f7ff bed6 	b.w	10290 <bt_att_req_free>
   104e4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   104e8:	b10a      	cbz	r2, 104ee <bt_att_req_cancel+0x4e>
   104ea:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   104ee:	4619      	mov	r1, r3
   104f0:	4613      	mov	r3, r2
   104f2:	e7e4      	b.n	104be <bt_att_req_cancel+0x1e>
}
   104f4:	bd10      	pop	{r4, pc}
   104f6:	bf00      	nop
   104f8:	20002b70 	.word	0x20002b70

000104fc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   104fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   104fe:	4c15      	ldr	r4, [pc, #84]	; (10554 <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   10500:	4605      	mov	r5, r0
   10502:	b140      	cbz	r0, 10516 <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   10504:	4622      	mov	r2, r4
   10506:	f812 1b01 	ldrb.w	r1, [r2], #1
   1050a:	f018 fc3c 	bl	28d86 <bt_conn_is_peer_addr_le>
   1050e:	b1b0      	cbz	r0, 1053e <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
   10510:	4620      	mov	r0, r4
   10512:	b003      	add	sp, #12
   10514:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   10516:	9000      	str	r0, [sp, #0]
   10518:	4669      	mov	r1, sp
   1051a:	f8cd 0003 	str.w	r0, [sp, #3]
   1051e:	1c60      	adds	r0, r4, #1
   10520:	f019 fa14 	bl	2994c <bt_addr_le_cmp>
   10524:	2800      	cmp	r0, #0
   10526:	d0f3      	beq.n	10510 <find_cf_cfg+0x14>
   10528:	4669      	mov	r1, sp
   1052a:	f104 0011 	add.w	r0, r4, #17
   1052e:	9500      	str	r5, [sp, #0]
   10530:	f8cd 5003 	str.w	r5, [sp, #3]
   10534:	f019 fa0a 	bl	2994c <bt_addr_le_cmp>
   10538:	b948      	cbnz	r0, 1054e <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1053a:	3410      	adds	r4, #16
   1053c:	e7e8      	b.n	10510 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1053e:	7c21      	ldrb	r1, [r4, #16]
   10540:	f104 0211 	add.w	r2, r4, #17
   10544:	4628      	mov	r0, r5
   10546:	f018 fc1e 	bl	28d86 <bt_conn_is_peer_addr_le>
   1054a:	2800      	cmp	r0, #0
   1054c:	d1f5      	bne.n	1053a <find_cf_cfg+0x3e>
	return NULL;
   1054e:	2400      	movs	r4, #0
   10550:	e7de      	b.n	10510 <find_cf_cfg+0x14>
   10552:	bf00      	nop
   10554:	20002b94 	.word	0x20002b94

00010558 <find_sc_cfg>:
{
   10558:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1055a:	4c0d      	ldr	r4, [pc, #52]	; (10590 <find_sc_cfg+0x38>)
   1055c:	7823      	ldrb	r3, [r4, #0]
   1055e:	4283      	cmp	r3, r0
{
   10560:	4605      	mov	r5, r0
   10562:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   10564:	d009      	beq.n	1057a <find_sc_cfg+0x22>
   10566:	7b23      	ldrb	r3, [r4, #12]
   10568:	42ab      	cmp	r3, r5
   1056a:	d10f      	bne.n	1058c <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1056c:	4809      	ldr	r0, [pc, #36]	; (10594 <find_sc_cfg+0x3c>)
   1056e:	4631      	mov	r1, r6
   10570:	f019 f9ec 	bl	2994c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   10574:	b950      	cbnz	r0, 1058c <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   10576:	2001      	movs	r0, #1
   10578:	e004      	b.n	10584 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1057a:	1c60      	adds	r0, r4, #1
   1057c:	f019 f9e6 	bl	2994c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   10580:	2800      	cmp	r0, #0
   10582:	d1f0      	bne.n	10566 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   10584:	230c      	movs	r3, #12
   10586:	fb03 4000 	mla	r0, r3, r0, r4
   1058a:	e000      	b.n	1058e <find_sc_cfg+0x36>
	return NULL;
   1058c:	2000      	movs	r0, #0
}
   1058e:	bd70      	pop	{r4, r5, r6, pc}
   10590:	200047fc 	.word	0x200047fc
   10594:	20004809 	.word	0x20004809

00010598 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   10598:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1059a:	4c15      	ldr	r4, [pc, #84]	; (105f0 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   1059c:	4605      	mov	r5, r0
   1059e:	b140      	cbz	r0, 105b2 <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   105a0:	4622      	mov	r2, r4
   105a2:	f812 1b01 	ldrb.w	r1, [r2], #1
   105a6:	f018 fbee 	bl	28d86 <bt_conn_is_peer_addr_le>
   105aa:	b1b0      	cbz	r0, 105da <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
   105ac:	4620      	mov	r0, r4
   105ae:	b003      	add	sp, #12
   105b0:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   105b2:	9000      	str	r0, [sp, #0]
   105b4:	4669      	mov	r1, sp
   105b6:	f8cd 0003 	str.w	r0, [sp, #3]
   105ba:	1c60      	adds	r0, r4, #1
   105bc:	f019 f9c6 	bl	2994c <bt_addr_le_cmp>
   105c0:	2800      	cmp	r0, #0
   105c2:	d0f3      	beq.n	105ac <gatt_sub_find+0x14>
   105c4:	4669      	mov	r1, sp
   105c6:	f104 0011 	add.w	r0, r4, #17
   105ca:	9500      	str	r5, [sp, #0]
   105cc:	f8cd 5003 	str.w	r5, [sp, #3]
   105d0:	f019 f9bc 	bl	2994c <bt_addr_le_cmp>
   105d4:	b948      	cbnz	r0, 105ea <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
   105d6:	3410      	adds	r4, #16
   105d8:	e7e8      	b.n	105ac <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   105da:	7c21      	ldrb	r1, [r4, #16]
   105dc:	f104 0211 	add.w	r2, r4, #17
   105e0:	4628      	mov	r0, r5
   105e2:	f018 fbd0 	bl	28d86 <bt_conn_is_peer_addr_le>
   105e6:	2800      	cmp	r0, #0
   105e8:	d1f5      	bne.n	105d6 <gatt_sub_find+0x3e>
	return NULL;
   105ea:	2400      	movs	r4, #0
   105ec:	e7de      	b.n	105ac <gatt_sub_find+0x14>
   105ee:	bf00      	nop
   105f0:	20002bd4 	.word	0x20002bd4

000105f4 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   105f4:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   105f6:	2312      	movs	r3, #18
{
   105f8:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   105fa:	2104      	movs	r1, #4
   105fc:	e9cd 3100 	strd	r3, r1, [sp]
   10600:	4b03      	ldr	r3, [pc, #12]	; (10610 <gatt_write_ccc+0x1c>)
   10602:	4904      	ldr	r1, [pc, #16]	; (10614 <gatt_write_ccc+0x20>)
   10604:	f019 f9ff 	bl	29a06 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   10608:	b003      	add	sp, #12
   1060a:	f85d fb04 	ldr.w	pc, [sp], #4
   1060e:	bf00      	nop
   10610:	00029b0f 	.word	0x00029b0f
   10614:	00029b39 	.word	0x00029b39

00010618 <bt_gatt_attr_write_ccc>:
{
   10618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1061c:	b089      	sub	sp, #36	; 0x24
   1061e:	461f      	mov	r7, r3
   10620:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   10624:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   10628:	4604      	mov	r4, r0
   1062a:	4688      	mov	r8, r1
	if (offset) {
   1062c:	2b00      	cmp	r3, #0
   1062e:	d153      	bne.n	106d8 <bt_gatt_attr_write_ccc+0xc0>
	if (!len || len > sizeof(uint16_t)) {
   10630:	1e7b      	subs	r3, r7, #1
   10632:	2b01      	cmp	r3, #1
   10634:	d853      	bhi.n	106de <bt_gatt_attr_write_ccc+0xc6>
		value = *(uint8_t *)buf;
   10636:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   10638:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1063a:	4649      	mov	r1, r9
   1063c:	bf14      	ite	ne
   1063e:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   10640:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   10642:	f019 f986 	bl	29952 <find_ccc_cfg>
	if (!cfg) {
   10646:	4605      	mov	r5, r0
   10648:	bb10      	cbnz	r0, 10690 <bt_gatt_attr_write_ccc+0x78>
		if (!value) {
   1064a:	b91e      	cbnz	r6, 10654 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   1064c:	4638      	mov	r0, r7
}
   1064e:	b009      	add	sp, #36	; 0x24
   10650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   10654:	4649      	mov	r1, r9
   10656:	f019 f97c 	bl	29952 <find_ccc_cfg>
		if (!cfg) {
   1065a:	4605      	mov	r5, r0
   1065c:	b988      	cbnz	r0, 10682 <bt_gatt_attr_write_ccc+0x6a>
			BT_WARN("No space to store CCC cfg");
   1065e:	4821      	ldr	r0, [pc, #132]	; (106e4 <bt_gatt_attr_write_ccc+0xcc>)
   10660:	6803      	ldr	r3, [r0, #0]
   10662:	f013 0f06 	tst.w	r3, #6
   10666:	d009      	beq.n	1067c <bt_gatt_attr_write_ccc+0x64>
   10668:	4b1f      	ldr	r3, [pc, #124]	; (106e8 <bt_gatt_attr_write_ccc+0xd0>)
   1066a:	9306      	str	r3, [sp, #24]
   1066c:	aa05      	add	r2, sp, #20
   1066e:	2302      	movs	r3, #2
   10670:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10674:	9301      	str	r3, [sp, #4]
   10676:	9305      	str	r3, [sp, #20]
   10678:	f019 f9ff 	bl	29a7a <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1067c:	f06f 0010 	mvn.w	r0, #16
   10680:	e7e5      	b.n	1064e <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10682:	f104 0188 	add.w	r1, r4, #136	; 0x88
   10686:	3001      	adds	r0, #1
   10688:	f019 f98f 	bl	299aa <bt_addr_le_copy>
		cfg->id = conn->id;
   1068c:	7a23      	ldrb	r3, [r4, #8]
   1068e:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   10690:	f8d9 301c 	ldr.w	r3, [r9, #28]
   10694:	b9a3      	cbnz	r3, 106c0 <bt_gatt_attr_write_ccc+0xa8>
	if (cfg->value != ccc->value) {
   10696:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   1069a:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   1069c:	42b3      	cmp	r3, r6
   1069e:	d003      	beq.n	106a8 <bt_gatt_attr_write_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   106a0:	4649      	mov	r1, r9
   106a2:	4640      	mov	r0, r8
   106a4:	f019 f8d2 	bl	2984c <gatt_ccc_changed>
	if (!value) {
   106a8:	2e00      	cmp	r6, #0
   106aa:	d1cf      	bne.n	1064c <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   106ac:	a902      	add	r1, sp, #8
   106ae:	1c68      	adds	r0, r5, #1
   106b0:	9602      	str	r6, [sp, #8]
   106b2:	f8cd 600b 	str.w	r6, [sp, #11]
   106b6:	f019 f978 	bl	299aa <bt_addr_le_copy>
	cfg->id = 0U;
   106ba:	702e      	strb	r6, [r5, #0]
	cfg->value = 0U;
   106bc:	812e      	strh	r6, [r5, #8]
}
   106be:	e7c5      	b.n	1064c <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   106c0:	4632      	mov	r2, r6
   106c2:	4641      	mov	r1, r8
   106c4:	4620      	mov	r0, r4
   106c6:	4798      	blx	r3
		if (write < 0) {
   106c8:	2800      	cmp	r0, #0
   106ca:	dbc0      	blt.n	1064e <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
   106cc:	1e44      	subs	r4, r0, #1
   106ce:	2c01      	cmp	r4, #1
   106d0:	d9e1      	bls.n	10696 <bt_gatt_attr_write_ccc+0x7e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   106d2:	f06f 000d 	mvn.w	r0, #13
   106d6:	e7ba      	b.n	1064e <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   106d8:	f06f 0006 	mvn.w	r0, #6
   106dc:	e7b7      	b.n	1064e <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   106de:	f06f 000c 	mvn.w	r0, #12
   106e2:	e7b4      	b.n	1064e <bt_gatt_attr_write_ccc+0x36>
   106e4:	200009f8 	.word	0x200009f8
   106e8:	0003115e 	.word	0x0003115e

000106ec <sc_save>:
{
   106ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106f0:	b08a      	sub	sp, #40	; 0x28
   106f2:	4680      	mov	r8, r0
   106f4:	460f      	mov	r7, r1
   106f6:	4616      	mov	r6, r2
   106f8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   106fa:	f7ff ff2d 	bl	10558 <find_sc_cfg>
	if (!cfg) {
   106fe:	4604      	mov	r4, r0
   10700:	b9e8      	cbnz	r0, 1073e <sc_save+0x52>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   10702:	a902      	add	r1, sp, #8
   10704:	9002      	str	r0, [sp, #8]
   10706:	f8cd 000b 	str.w	r0, [sp, #11]
   1070a:	f7ff ff25 	bl	10558 <find_sc_cfg>
		if (!cfg) {
   1070e:	4604      	mov	r4, r0
   10710:	b980      	cbnz	r0, 10734 <sc_save+0x48>
			BT_ERR("unable to save SC: no cfg left");
   10712:	4812      	ldr	r0, [pc, #72]	; (1075c <sc_save+0x70>)
   10714:	6803      	ldr	r3, [r0, #0]
   10716:	075b      	lsls	r3, r3, #29
   10718:	d009      	beq.n	1072e <sc_save+0x42>
   1071a:	4b11      	ldr	r3, [pc, #68]	; (10760 <sc_save+0x74>)
   1071c:	9308      	str	r3, [sp, #32]
   1071e:	aa07      	add	r2, sp, #28
   10720:	2302      	movs	r3, #2
   10722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10726:	9301      	str	r3, [sp, #4]
   10728:	9307      	str	r3, [sp, #28]
   1072a:	f019 f9a6 	bl	29a7a <z_log_msg2_static_create.constprop.0>
}
   1072e:	b00a      	add	sp, #40	; 0x28
   10730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   10734:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   10738:	4639      	mov	r1, r7
   1073a:	f019 f936 	bl	299aa <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1073e:	8922      	ldrh	r2, [r4, #8]
   10740:	8963      	ldrh	r3, [r4, #10]
   10742:	b91a      	cbnz	r2, 1074c <sc_save+0x60>
   10744:	b923      	cbnz	r3, 10750 <sc_save+0x64>
		cfg->data.start = start;
   10746:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   10748:	8165      	strh	r5, [r4, #10]
   1074a:	e7f0      	b.n	1072e <sc_save+0x42>
	if (new_start >= *start && new_end <= *end) {
   1074c:	4296      	cmp	r6, r2
   1074e:	d302      	bcc.n	10756 <sc_save+0x6a>
   10750:	429d      	cmp	r5, r3
   10752:	d8f9      	bhi.n	10748 <sc_save+0x5c>
   10754:	e7eb      	b.n	1072e <sc_save+0x42>
		*start = new_start;
   10756:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   10758:	e7fa      	b.n	10750 <sc_save+0x64>
   1075a:	bf00      	nop
   1075c:	200009f8 	.word	0x200009f8
   10760:	00031178 	.word	0x00031178

00010764 <cf_write>:
{
   10764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10768:	b088      	sub	sp, #32
   1076a:	4698      	mov	r8, r3
   1076c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   10770:	2b01      	cmp	r3, #1
{
   10772:	4606      	mov	r6, r0
   10774:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   10776:	d843      	bhi.n	10800 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
   10778:	4443      	add	r3, r8
   1077a:	2b01      	cmp	r3, #1
   1077c:	4645      	mov	r5, r8
   1077e:	dc42      	bgt.n	10806 <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
   10780:	f7ff febc 	bl	104fc <find_cf_cfg>
	if (!cfg) {
   10784:	4604      	mov	r4, r0
   10786:	b918      	cbnz	r0, 10790 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   10788:	f7ff feb8 	bl	104fc <find_cf_cfg>
	if (!cfg) {
   1078c:	4604      	mov	r4, r0
   1078e:	b198      	cbz	r0, 107b8 <cf_write+0x54>
{
   10790:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   10792:	f1b8 0f00 	cmp.w	r8, #0
   10796:	d121      	bne.n	107dc <cf_write+0x78>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10798:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1079c:	1c60      	adds	r0, r4, #1
   1079e:	f019 f904 	bl	299aa <bt_addr_le_copy>
	cfg->id = conn->id;
   107a2:	4620      	mov	r0, r4
   107a4:	7a33      	ldrb	r3, [r6, #8]
   107a6:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   107aa:	2100      	movs	r1, #0
   107ac:	f019 f985 	bl	29aba <atomic_set_bit>
}
   107b0:	4628      	mov	r0, r5
   107b2:	b008      	add	sp, #32
   107b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No space to store Client Supported Features");
   107b8:	4816      	ldr	r0, [pc, #88]	; (10814 <cf_write+0xb0>)
   107ba:	6803      	ldr	r3, [r0, #0]
   107bc:	f013 0f06 	tst.w	r3, #6
   107c0:	d009      	beq.n	107d6 <cf_write+0x72>
   107c2:	4b15      	ldr	r3, [pc, #84]	; (10818 <cf_write+0xb4>)
   107c4:	9306      	str	r3, [sp, #24]
   107c6:	aa05      	add	r2, sp, #20
   107c8:	2302      	movs	r3, #2
   107ca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   107ce:	9301      	str	r3, [sp, #4]
   107d0:	9305      	str	r3, [sp, #20]
   107d2:	f019 f952 	bl	29a7a <z_log_msg2_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   107d6:	f06f 0510 	mvn.w	r5, #16
   107da:	e7e9      	b.n	107b0 <cf_write+0x4c>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   107dc:	7a20      	ldrb	r0, [r4, #8]
   107de:	fa20 f301 	lsr.w	r3, r0, r1
   107e2:	07da      	lsls	r2, r3, #31
   107e4:	d503      	bpl.n	107ee <cf_write+0x8a>
		    !(value[i / 8] & BIT(i % 8))) {
   107e6:	783b      	ldrb	r3, [r7, #0]
   107e8:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   107ea:	07db      	lsls	r3, r3, #31
   107ec:	d50e      	bpl.n	1080c <cf_write+0xa8>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   107ee:	3101      	adds	r1, #1
   107f0:	2903      	cmp	r1, #3
   107f2:	d1ce      	bne.n	10792 <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   107f4:	783b      	ldrb	r3, [r7, #0]
   107f6:	f003 0307 	and.w	r3, r3, #7
   107fa:	4318      	orrs	r0, r3
   107fc:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   107fe:	e7cb      	b.n	10798 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10800:	f06f 0506 	mvn.w	r5, #6
   10804:	e7d4      	b.n	107b0 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   10806:	f06f 050c 	mvn.w	r5, #12
   1080a:	e7d1      	b.n	107b0 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1080c:	f06f 0512 	mvn.w	r5, #18
   10810:	e7ce      	b.n	107b0 <cf_write+0x4c>
   10812:	bf00      	nop
   10814:	200009f8 	.word	0x200009f8
   10818:	00031197 	.word	0x00031197

0001081c <sc_indicate_rsp>:
{
   1081c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1081e:	4913      	ldr	r1, [pc, #76]	; (1086c <sc_indicate_rsp+0x50>)
   10820:	f3bf 8f5b 	dmb	ish
   10824:	4604      	mov	r4, r0
   10826:	e851 3f00 	ldrex	r3, [r1]
   1082a:	f023 0302 	bic.w	r3, r3, #2
   1082e:	e841 3200 	strex	r2, r3, [r1]
   10832:	2a00      	cmp	r2, #0
   10834:	d1f7      	bne.n	10826 <sc_indicate_rsp+0xa>
   10836:	f3bf 8f5b 	dmb	ish
   1083a:	4608      	mov	r0, r1
   1083c:	f019 f82b 	bl	29896 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   10840:	07c2      	lsls	r2, r0, #31
   10842:	d505      	bpl.n	10850 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
   10844:	2200      	movs	r2, #0
   10846:	2300      	movs	r3, #0
   10848:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1084c:	f013 fb3e 	bl	23ecc <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   10850:	4620      	mov	r0, r4
   10852:	f7ff fe53 	bl	104fc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   10856:	b140      	cbz	r0, 1086a <sc_indicate_rsp+0x4e>
   10858:	7a03      	ldrb	r3, [r0, #8]
   1085a:	07db      	lsls	r3, r3, #31
   1085c:	d505      	bpl.n	1086a <sc_indicate_rsp+0x4e>
}
   1085e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   10862:	2100      	movs	r1, #0
   10864:	300c      	adds	r0, #12
   10866:	f019 b928 	b.w	29aba <atomic_set_bit>
}
   1086a:	bd10      	pop	{r4, pc}
   1086c:	20001b28 	.word	0x20001b28

00010870 <disconnected_cb>:
{
   10870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   10874:	4b2b      	ldr	r3, [pc, #172]	; (10924 <disconnected_cb+0xb4>)
{
   10876:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   10878:	6882      	ldr	r2, [r0, #8]
   1087a:	429a      	cmp	r2, r3
{
   1087c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1087e:	d12f      	bne.n	108e0 <disconnected_cb+0x70>
	ccc = attr->user_data;
   10880:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   10882:	8aab      	ldrh	r3, [r5, #20]
   10884:	b363      	cbz	r3, 108e0 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
   10886:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 10928 <disconnected_cb+0xb8>
   1088a:	1c6c      	adds	r4, r5, #1
   1088c:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
   10890:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   10894:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   10898:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1089c:	b19b      	cbz	r3, 108c6 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1089e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   108a2:	4622      	mov	r2, r4
   108a4:	4630      	mov	r0, r6
   108a6:	f018 fa6e 	bl	28d86 <bt_conn_is_peer_addr_le>
   108aa:	b9e8      	cbnz	r0, 108e8 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   108ac:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   108b0:	4621      	mov	r1, r4
   108b2:	f7fe f915 	bl	eae0 <bt_conn_lookup_addr_le>
			if (tmp) {
   108b6:	b130      	cbz	r0, 108c6 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   108b8:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   108ba:	2b07      	cmp	r3, #7
   108bc:	bf08      	it	eq
   108be:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   108c2:	f018 f9e7 	bl	28c94 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   108c6:	340a      	adds	r4, #10
   108c8:	4554      	cmp	r4, sl
   108ca:	d1e5      	bne.n	10898 <disconnected_cb+0x28>
	if (!value_used) {
   108cc:	f1b8 0f00 	cmp.w	r8, #0
   108d0:	d106      	bne.n	108e0 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   108d2:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   108d4:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   108d8:	b113      	cbz	r3, 108e0 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   108da:	4641      	mov	r1, r8
   108dc:	4638      	mov	r0, r7
   108de:	4798      	blx	r3
}
   108e0:	2001      	movs	r0, #1
   108e2:	b003      	add	sp, #12
   108e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   108e8:	7a30      	ldrb	r0, [r6, #8]
   108ea:	4649      	mov	r1, r9
   108ec:	f018 f865 	bl	289ba <bt_addr_le_is_bonded>
   108f0:	b990      	cbnz	r0, 10918 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
   108f2:	455d      	cmp	r5, fp
   108f4:	d102      	bne.n	108fc <disconnected_cb+0x8c>
					sc_clear(conn);
   108f6:	4630      	mov	r0, r6
   108f8:	f019 f959 	bl	29bae <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   108fc:	2300      	movs	r3, #0
   108fe:	4669      	mov	r1, sp
   10900:	4620      	mov	r0, r4
   10902:	9300      	str	r3, [sp, #0]
   10904:	f8cd 3003 	str.w	r3, [sp, #3]
   10908:	f019 f84f 	bl	299aa <bt_addr_le_copy>
	cfg->id = 0U;
   1090c:	2300      	movs	r3, #0
   1090e:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   10912:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   10916:	e7d6      	b.n	108c6 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10918:	4649      	mov	r1, r9
   1091a:	4620      	mov	r0, r4
   1091c:	f019 f845 	bl	299aa <bt_addr_le_copy>
   10920:	e7d1      	b.n	108c6 <disconnected_cb+0x56>
   10922:	bf00      	nop
   10924:	00010619 	.word	0x00010619
   10928:	200003bc 	.word	0x200003bc

0001092c <bt_gatt_init>:
{
   1092c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1092e:	4b20      	ldr	r3, [pc, #128]	; (109b0 <bt_gatt_init+0x84>)
   10930:	f3bf 8f5b 	dmb	ish
   10934:	2201      	movs	r2, #1
   10936:	e853 1f00 	ldrex	r1, [r3]
   1093a:	2900      	cmp	r1, #0
   1093c:	d103      	bne.n	10946 <bt_gatt_init+0x1a>
   1093e:	e843 2000 	strex	r0, r2, [r3]
   10942:	2800      	cmp	r0, #0
   10944:	d1f7      	bne.n	10936 <bt_gatt_init+0xa>
   10946:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1094a:	d130      	bne.n	109ae <bt_gatt_init+0x82>
   1094c:	f3bf 8f5b 	dmb	ish
   10950:	4b18      	ldr	r3, [pc, #96]	; (109b4 <bt_gatt_init+0x88>)
   10952:	e853 1f00 	ldrex	r1, [r3]
   10956:	2900      	cmp	r1, #0
   10958:	d103      	bne.n	10962 <bt_gatt_init+0x36>
   1095a:	e843 2000 	strex	r0, r2, [r3]
   1095e:	2800      	cmp	r0, #0
   10960:	d1f7      	bne.n	10952 <bt_gatt_init+0x26>
   10962:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   10966:	d108      	bne.n	1097a <bt_gatt_init+0x4e>
   10968:	4913      	ldr	r1, [pc, #76]	; (109b8 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1096a:	4a14      	ldr	r2, [pc, #80]	; (109bc <bt_gatt_init+0x90>)
   1096c:	880b      	ldrh	r3, [r1, #0]
   1096e:	4c14      	ldr	r4, [pc, #80]	; (109c0 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   10970:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   10972:	42a2      	cmp	r2, r4
   10974:	d315      	bcc.n	109a2 <bt_gatt_init+0x76>
   10976:	b100      	cbz	r0, 1097a <bt_gatt_init+0x4e>
   10978:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1097a:	4b12      	ldr	r3, [pc, #72]	; (109c4 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1097c:	4912      	ldr	r1, [pc, #72]	; (109c8 <bt_gatt_init+0x9c>)
   1097e:	4813      	ldr	r0, [pc, #76]	; (109cc <bt_gatt_init+0xa0>)
   10980:	2200      	movs	r2, #0
	list->tail = NULL;
   10982:	e9c3 2200 	strd	r2, r2, [r3]
   10986:	f01a ff4c 	bl	2b822 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1098a:	4810      	ldr	r0, [pc, #64]	; (109cc <bt_gatt_init+0xa0>)
   1098c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   10990:	2300      	movs	r3, #0
   10992:	f013 fa67 	bl	23e64 <k_work_schedule>
}
   10996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1099a:	490d      	ldr	r1, [pc, #52]	; (109d0 <bt_gatt_init+0xa4>)
   1099c:	480d      	ldr	r0, [pc, #52]	; (109d4 <bt_gatt_init+0xa8>)
   1099e:	f01a bf40 	b.w	2b822 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   109a2:	6850      	ldr	r0, [r2, #4]
   109a4:	4403      	add	r3, r0
   109a6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   109a8:	3208      	adds	r2, #8
   109aa:	2001      	movs	r0, #1
   109ac:	e7e1      	b.n	10972 <bt_gatt_init+0x46>
}
   109ae:	bd10      	pop	{r4, pc}
   109b0:	20002bb4 	.word	0x20002bb4
   109b4:	20002bd0 	.word	0x20002bd0
   109b8:	200047fa 	.word	0x200047fa
   109bc:	0002c1cc 	.word	0x0002c1cc
   109c0:	0002c1ec 	.word	0x0002c1ec
   109c4:	20002b8c 	.word	0x20002b8c
   109c8:	00029e55 	.word	0x00029e55
   109cc:	20001a80 	.word	0x20001a80
   109d0:	00010d71 	.word	0x00010d71
   109d4:	20001af8 	.word	0x20001af8

000109d8 <bt_gatt_attr_get_handle>:
{
   109d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   109dc:	4603      	mov	r3, r0
   109de:	b148      	cbz	r0, 109f4 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   109e0:	8a00      	ldrh	r0, [r0, #16]
   109e2:	b938      	cbnz	r0, 109f4 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   109e4:	4912      	ldr	r1, [pc, #72]	; (10a30 <bt_gatt_attr_get_handle+0x58>)
   109e6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 10a34 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   109ea:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   109ec:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   109f0:	4571      	cmp	r1, lr
   109f2:	d301      	bcc.n	109f8 <bt_gatt_attr_get_handle+0x20>
}
   109f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   109f8:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   109fc:	42bb      	cmp	r3, r7
   109fe:	d304      	bcc.n	10a0a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   10a00:	fb0c 7206 	mla	r2, ip, r6, r7
   10a04:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   10a06:	4293      	cmp	r3, r2
   10a08:	d90e      	bls.n	10a28 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   10a0a:	19a2      	adds	r2, r4, r6
   10a0c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   10a0e:	3108      	adds	r1, #8
   10a10:	4614      	mov	r4, r2
   10a12:	e7ed      	b.n	109f0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   10a14:	fb0c 7805 	mla	r8, ip, r5, r7
   10a18:	4543      	cmp	r3, r8
   10a1a:	d007      	beq.n	10a2c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   10a1c:	3501      	adds	r5, #1
   10a1e:	1962      	adds	r2, r4, r5
   10a20:	42b5      	cmp	r5, r6
   10a22:	b292      	uxth	r2, r2
   10a24:	d1f6      	bne.n	10a14 <bt_gatt_attr_get_handle+0x3c>
   10a26:	e7f2      	b.n	10a0e <bt_gatt_attr_get_handle+0x36>
   10a28:	2500      	movs	r5, #0
   10a2a:	e7f8      	b.n	10a1e <bt_gatt_attr_get_handle+0x46>
   10a2c:	4610      	mov	r0, r2
   10a2e:	e7e1      	b.n	109f4 <bt_gatt_attr_get_handle+0x1c>
   10a30:	0002c1cc 	.word	0x0002c1cc
   10a34:	0002c1ec 	.word	0x0002c1ec

00010a38 <bt_gatt_foreach_attr_type>:
{
   10a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a3c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   10a40:	9100      	str	r1, [sp, #0]
   10a42:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   10a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10a48:	2d00      	cmp	r5, #0
   10a4a:	bf08      	it	eq
   10a4c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   10a4e:	4b24      	ldr	r3, [pc, #144]	; (10ae0 <bt_gatt_foreach_attr_type+0xa8>)
   10a50:	881b      	ldrh	r3, [r3, #0]
   10a52:	4283      	cmp	r3, r0
{
   10a54:	4607      	mov	r7, r0
   10a56:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   10a58:	d23c      	bcs.n	10ad4 <bt_gatt_foreach_attr_type+0x9c>
}
   10a5a:	b003      	add	sp, #12
   10a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   10a60:	6873      	ldr	r3, [r6, #4]
   10a62:	4423      	add	r3, r4
   10a64:	42bb      	cmp	r3, r7
   10a66:	d232      	bcs.n	10ace <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   10a68:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   10a6a:	3608      	adds	r6, #8
   10a6c:	4b1d      	ldr	r3, [pc, #116]	; (10ae4 <bt_gatt_foreach_attr_type+0xac>)
   10a6e:	429e      	cmp	r6, r3
   10a70:	d3f6      	bcc.n	10a60 <bt_gatt_foreach_attr_type+0x28>
   10a72:	e7f2      	b.n	10a5a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   10a74:	5889      	ldr	r1, [r1, r2]
   10a76:	9301      	str	r3, [sp, #4]
   10a78:	4640      	mov	r0, r8
   10a7a:	f017 fe64 	bl	28746 <bt_uuid_cmp>
   10a7e:	9b01      	ldr	r3, [sp, #4]
   10a80:	b190      	cbz	r0, 10aa8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   10a82:	3401      	adds	r4, #1
   10a84:	f10a 0a01 	add.w	sl, sl, #1
   10a88:	b2a4      	uxth	r4, r4
   10a8a:	6873      	ldr	r3, [r6, #4]
   10a8c:	4553      	cmp	r3, sl
   10a8e:	d9ec      	bls.n	10a6a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   10a90:	9b00      	ldr	r3, [sp, #0]
   10a92:	429c      	cmp	r4, r3
   10a94:	d8e1      	bhi.n	10a5a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   10a96:	42bc      	cmp	r4, r7
   10a98:	d3f3      	bcc.n	10a82 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10a9a:	6831      	ldr	r1, [r6, #0]
   10a9c:	fb0b f20a 	mul.w	r2, fp, sl
   10aa0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   10aa2:	f1b8 0f00 	cmp.w	r8, #0
   10aa6:	d1e5      	bne.n	10a74 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   10aa8:	f1b9 0f00 	cmp.w	r9, #0
   10aac:	d10b      	bne.n	10ac6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   10aae:	3d01      	subs	r5, #1
   10ab0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   10ab2:	4618      	mov	r0, r3
   10ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10ab8:	4621      	mov	r1, r4
   10aba:	4798      	blx	r3
	if (!*num_matches) {
   10abc:	2d00      	cmp	r5, #0
   10abe:	d0cc      	beq.n	10a5a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10ac0:	2800      	cmp	r0, #0
   10ac2:	d1de      	bne.n	10a82 <bt_gatt_foreach_attr_type+0x4a>
   10ac4:	e7c9      	b.n	10a5a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   10ac6:	68da      	ldr	r2, [r3, #12]
   10ac8:	4591      	cmp	r9, r2
   10aca:	d1da      	bne.n	10a82 <bt_gatt_foreach_attr_type+0x4a>
   10acc:	e7ef      	b.n	10aae <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   10ace:	f04f 0a00 	mov.w	sl, #0
   10ad2:	e7da      	b.n	10a8a <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   10ad4:	4e04      	ldr	r6, [pc, #16]	; (10ae8 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   10ad6:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10ad8:	f04f 0b14 	mov.w	fp, #20
   10adc:	e7c6      	b.n	10a6c <bt_gatt_foreach_attr_type+0x34>
   10ade:	bf00      	nop
   10ae0:	200047fa 	.word	0x200047fa
   10ae4:	0002c1ec 	.word	0x0002c1ec
   10ae8:	0002c1cc 	.word	0x0002c1cc

00010aec <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   10aec:	b510      	push	{r4, lr}
   10aee:	b0d0      	sub	sp, #320	; 0x140
	uint8_t key[16] = {};
   10af0:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   10af2:	aa24      	add	r2, sp, #144	; 0x90
   10af4:	a902      	add	r1, sp, #8
   10af6:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t key[16] = {};
   10af8:	e9cd 4402 	strd	r4, r4, [sp, #8]
   10afc:	e9cd 4404 	strd	r4, r4, [sp, #16]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   10b00:	f017 faef 	bl	280e2 <tc_cmac_setup>
   10b04:	b978      	cbnz	r0, 10b26 <db_hash_gen.constprop.0+0x3a>
		BT_ERR("Unable to setup AES CMAC");
   10b06:	481e      	ldr	r0, [pc, #120]	; (10b80 <db_hash_gen.constprop.0+0x94>)
   10b08:	6803      	ldr	r3, [r0, #0]
   10b0a:	075a      	lsls	r2, r3, #29
   10b0c:	d009      	beq.n	10b22 <db_hash_gen.constprop.0+0x36>
   10b0e:	4b1d      	ldr	r3, [pc, #116]	; (10b84 <db_hash_gen.constprop.0+0x98>)
		BT_ERR("Unable to calculate hash");
   10b10:	930a      	str	r3, [sp, #40]	; 0x28
   10b12:	aa09      	add	r2, sp, #36	; 0x24
   10b14:	2302      	movs	r3, #2
   10b16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b1a:	9301      	str	r3, [sp, #4]
   10b1c:	9309      	str	r3, [sp, #36]	; 0x24
   10b1e:	f018 ffac 	bl	29a7a <z_log_msg2_static_create.constprop.0>
}
   10b22:	b050      	add	sp, #320	; 0x140
   10b24:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   10b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10b2a:	2001      	movs	r0, #1
   10b2c:	4a16      	ldr	r2, [pc, #88]	; (10b88 <db_hash_gen.constprop.0+0x9c>)
   10b2e:	ab0c      	add	r3, sp, #48	; 0x30
   10b30:	f019 f985 	bl	29e3e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   10b34:	4815      	ldr	r0, [pc, #84]	; (10b8c <db_hash_gen.constprop.0+0xa0>)
   10b36:	a90c      	add	r1, sp, #48	; 0x30
   10b38:	f017 fb69 	bl	2820e <tc_cmac_final>
   10b3c:	b928      	cbnz	r0, 10b4a <db_hash_gen.constprop.0+0x5e>
		BT_ERR("Unable to calculate hash");
   10b3e:	4810      	ldr	r0, [pc, #64]	; (10b80 <db_hash_gen.constprop.0+0x94>)
   10b40:	6803      	ldr	r3, [r0, #0]
   10b42:	075b      	lsls	r3, r3, #29
   10b44:	d0ed      	beq.n	10b22 <db_hash_gen.constprop.0+0x36>
   10b46:	4b12      	ldr	r3, [pc, #72]	; (10b90 <db_hash_gen.constprop.0+0xa4>)
   10b48:	e7e2      	b.n	10b10 <db_hash_gen.constprop.0+0x24>
   10b4a:	4b10      	ldr	r3, [pc, #64]	; (10b8c <db_hash_gen.constprop.0+0xa0>)
   10b4c:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   10b50:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   10b52:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   10b54:	7810      	ldrb	r0, [r2, #0]
   10b56:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   10b5a:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   10b5c:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   10b60:	d1f6      	bne.n	10b50 <db_hash_gen.constprop.0+0x64>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10b62:	f3bf 8f5b 	dmb	ish
   10b66:	4b0b      	ldr	r3, [pc, #44]	; (10b94 <db_hash_gen.constprop.0+0xa8>)
   10b68:	e853 2f00 	ldrex	r2, [r3]
   10b6c:	f042 0204 	orr.w	r2, r2, #4
   10b70:	e843 2100 	strex	r1, r2, [r3]
   10b74:	2900      	cmp	r1, #0
   10b76:	d1f7      	bne.n	10b68 <db_hash_gen.constprop.0+0x7c>
   10b78:	f3bf 8f5b 	dmb	ish
   10b7c:	e7d1      	b.n	10b22 <db_hash_gen.constprop.0+0x36>
   10b7e:	bf00      	nop
   10b80:	200009f8 	.word	0x200009f8
   10b84:	000311c3 	.word	0x000311c3
   10b88:	000298a3 	.word	0x000298a3
   10b8c:	20001a70 	.word	0x20001a70
   10b90:	000311dc 	.word	0x000311dc
   10b94:	20001b28 	.word	0x20001b28

00010b98 <gatt_indicate>:
{
   10b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b9c:	4615      	mov	r5, r2
   10b9e:	b088      	sub	sp, #32
   10ba0:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   10ba2:	2214      	movs	r2, #20
   10ba4:	6869      	ldr	r1, [r5, #4]
{
   10ba6:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   10ba8:	f019 f956 	bl	29e58 <bt_gatt_check_perm>
   10bac:	4607      	mov	r7, r0
   10bae:	b188      	cbz	r0, 10bd4 <gatt_indicate+0x3c>
		BT_WARN("Link is not encrypted");
   10bb0:	482f      	ldr	r0, [pc, #188]	; (10c70 <gatt_indicate+0xd8>)
   10bb2:	6803      	ldr	r3, [r0, #0]
   10bb4:	f013 0f06 	tst.w	r3, #6
   10bb8:	d009      	beq.n	10bce <gatt_indicate+0x36>
   10bba:	4b2e      	ldr	r3, [pc, #184]	; (10c74 <gatt_indicate+0xdc>)
   10bbc:	9306      	str	r3, [sp, #24]
   10bbe:	aa05      	add	r2, sp, #20
   10bc0:	2302      	movs	r3, #2
   10bc2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10bc6:	9301      	str	r3, [sp, #4]
   10bc8:	9305      	str	r3, [sp, #20]
   10bca:	f018 ff56 	bl	29a7a <z_log_msg2_static_create.constprop.0>
		return -EPERM;
   10bce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10bd2:	e00a      	b.n	10bea <gatt_indicate+0x52>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   10bd4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   10bd8:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   10bda:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   10bdc:	f7ff fb36 	bl	1024c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   10be0:	3602      	adds	r6, #2
	if (!req) {
   10be2:	4604      	mov	r4, r0
   10be4:	b928      	cbnz	r0, 10bf2 <gatt_indicate+0x5a>
		return -ENOMEM;
   10be6:	f06f 050b 	mvn.w	r5, #11
}
   10bea:	4628      	mov	r0, r5
   10bec:	b008      	add	sp, #32
   10bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   10bf2:	4b21      	ldr	r3, [pc, #132]	; (10c78 <gatt_indicate+0xe0>)
	req->len = len;
   10bf4:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   10bf6:	211d      	movs	r1, #29
   10bf8:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   10bfa:	60c7      	str	r7, [r0, #12]
	req->func = func;
   10bfc:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   10bfe:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   10c00:	4632      	mov	r2, r6
   10c02:	4640      	mov	r0, r8
   10c04:	f7ff f884 	bl	fd10 <bt_att_create_pdu>
	if (!buf) {
   10c08:	4606      	mov	r6, r0
   10c0a:	b990      	cbnz	r0, 10c32 <gatt_indicate+0x9a>
		BT_WARN("No buffer available to send indication");
   10c0c:	4818      	ldr	r0, [pc, #96]	; (10c70 <gatt_indicate+0xd8>)
   10c0e:	6803      	ldr	r3, [r0, #0]
   10c10:	f013 0f06 	tst.w	r3, #6
   10c14:	d009      	beq.n	10c2a <gatt_indicate+0x92>
   10c16:	4b19      	ldr	r3, [pc, #100]	; (10c7c <gatt_indicate+0xe4>)
   10c18:	9306      	str	r3, [sp, #24]
   10c1a:	aa05      	add	r2, sp, #20
   10c1c:	2302      	movs	r3, #2
   10c1e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10c22:	9301      	str	r3, [sp, #4]
   10c24:	9305      	str	r3, [sp, #20]
   10c26:	f018 ff28 	bl	29a7a <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
   10c2a:	4620      	mov	r0, r4
   10c2c:	f7ff fb30 	bl	10290 <bt_att_req_free>
   10c30:	e7d9      	b.n	10be6 <gatt_indicate+0x4e>
   10c32:	f100 0a08 	add.w	sl, r0, #8
   10c36:	2102      	movs	r1, #2
   10c38:	4650      	mov	r0, sl
   10c3a:	f019 fed6 	bl	2a9ea <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   10c3e:	4607      	mov	r7, r0
   10c40:	8aa9      	ldrh	r1, [r5, #20]
   10c42:	f827 9b02 	strh.w	r9, [r7], #2
   10c46:	4650      	mov	r0, sl
   10c48:	f019 fecf 	bl	2a9ea <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   10c4c:	8aaa      	ldrh	r2, [r5, #20]
   10c4e:	6929      	ldr	r1, [r5, #16]
   10c50:	4638      	mov	r0, r7
   10c52:	f017 fcb0 	bl	285b6 <memcpy>
	req->buf = buf;
   10c56:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   10c58:	4621      	mov	r1, r4
   10c5a:	4640      	mov	r0, r8
   10c5c:	f018 fdc7 	bl	297ee <bt_att_req_send>
	if (err) {
   10c60:	4605      	mov	r5, r0
   10c62:	2800      	cmp	r0, #0
   10c64:	d0c1      	beq.n	10bea <gatt_indicate+0x52>
		bt_att_req_free(req);
   10c66:	4620      	mov	r0, r4
   10c68:	f7ff fb12 	bl	10290 <bt_att_req_free>
   10c6c:	e7bd      	b.n	10bea <gatt_indicate+0x52>
   10c6e:	bf00      	nop
   10c70:	200009f8 	.word	0x200009f8
   10c74:	000311f5 	.word	0x000311f5
   10c78:	00029869 	.word	0x00029869
   10c7c:	0003120b 	.word	0x0003120b

00010c80 <bt_gatt_indicate>:
{
   10c80:	b530      	push	{r4, r5, lr}
   10c82:	4604      	mov	r4, r0
   10c84:	b08b      	sub	sp, #44	; 0x2c
   10c86:	4837      	ldr	r0, [pc, #220]	; (10d64 <bt_gatt_indicate+0xe4>)
   10c88:	f018 fe05 	bl	29896 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c8c:	0782      	lsls	r2, r0, #30
{
   10c8e:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c90:	d561      	bpl.n	10d56 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   10c92:	b114      	cbz	r4, 10c9a <bt_gatt_indicate+0x1a>
   10c94:	7b63      	ldrb	r3, [r4, #13]
   10c96:	2b07      	cmp	r3, #7
   10c98:	d160      	bne.n	10d5c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   10c9a:	6868      	ldr	r0, [r5, #4]
   10c9c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   10c9e:	f7ff fe9b 	bl	109d8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   10ca2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   10ca4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   10ca8:	b33a      	cbz	r2, 10cfa <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   10caa:	a905      	add	r1, sp, #20
   10cac:	9102      	str	r1, [sp, #8]
   10cae:	492e      	ldr	r1, [pc, #184]	; (10d68 <bt_gatt_indicate+0xe8>)
   10cb0:	9101      	str	r1, [sp, #4]
   10cb2:	2101      	movs	r1, #1
	found->attr = NULL;
   10cb4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   10cb6:	9100      	str	r1, [sp, #0]
   10cb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   10cbc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   10cbe:	f7ff febb 	bl	10a38 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   10cc2:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   10cc4:	b91b      	cbnz	r3, 10cce <bt_gatt_indicate+0x4e>
			return -ENOENT;
   10cc6:	f06f 0001 	mvn.w	r0, #1
}
   10cca:	b00b      	add	sp, #44	; 0x2c
   10ccc:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   10cce:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   10cd0:	9b05      	ldr	r3, [sp, #20]
   10cd2:	6818      	ldr	r0, [r3, #0]
   10cd4:	2300      	movs	r3, #0
   10cd6:	f88d 3010 	strb.w	r3, [sp, #16]
   10cda:	a904      	add	r1, sp, #16
   10cdc:	f642 0303 	movw	r3, #10243	; 0x2803
   10ce0:	f8ad 3012 	strh.w	r3, [sp, #18]
   10ce4:	f017 fd2f 	bl	28746 <bt_uuid_cmp>
   10ce8:	b970      	cbnz	r0, 10d08 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   10cea:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   10cec:	68c3      	ldr	r3, [r0, #12]
   10cee:	799b      	ldrb	r3, [r3, #6]
   10cf0:	069b      	lsls	r3, r3, #26
   10cf2:	d405      	bmi.n	10d00 <bt_gatt_indicate+0x80>
			return -EINVAL;
   10cf4:	f06f 0015 	mvn.w	r0, #21
   10cf8:	e7e7      	b.n	10cca <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   10cfa:	2800      	cmp	r0, #0
   10cfc:	d1e8      	bne.n	10cd0 <bt_gatt_indicate+0x50>
   10cfe:	e7e2      	b.n	10cc6 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   10d00:	f019 f84f 	bl	29da2 <bt_gatt_attr_value_handle>
   10d04:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   10d08:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   10d0c:	b13c      	cbz	r4, 10d1e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   10d0e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   10d10:	4601      	mov	r1, r0
		params->_ref = 1;
   10d12:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   10d14:	462a      	mov	r2, r5
   10d16:	4620      	mov	r0, r4
   10d18:	f7ff ff3e 	bl	10b98 <gatt_indicate>
   10d1c:	e7d5      	b.n	10cca <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   10d1e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   10d22:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   10d24:	2302      	movs	r3, #2
   10d26:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10d2a:	f642 1302 	movw	r3, #10498	; 0x2902
   10d2e:	f8ad 3012 	strh.w	r3, [sp, #18]
   10d32:	ab05      	add	r3, sp, #20
   10d34:	9302      	str	r3, [sp, #8]
   10d36:	4b0d      	ldr	r3, [pc, #52]	; (10d6c <bt_gatt_indicate+0xec>)
   10d38:	9301      	str	r3, [sp, #4]
   10d3a:	2301      	movs	r3, #1
   10d3c:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   10d3e:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10d40:	4623      	mov	r3, r4
   10d42:	aa04      	add	r2, sp, #16
   10d44:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   10d48:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10d4a:	f88d 4010 	strb.w	r4, [sp, #16]
   10d4e:	f7ff fe73 	bl	10a38 <bt_gatt_foreach_attr_type>
	return data.err;
   10d52:	9807      	ldr	r0, [sp, #28]
   10d54:	e7b9      	b.n	10cca <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   10d56:	f06f 000a 	mvn.w	r0, #10
   10d5a:	e7b6      	b.n	10cca <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   10d5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10d60:	e7b3      	b.n	10cca <bt_gatt_indicate+0x4a>
   10d62:	bf00      	nop
   10d64:	200000cc 	.word	0x200000cc
   10d68:	0002988f 	.word	0x0002988f
   10d6c:	00010e95 	.word	0x00010e95

00010d70 <sc_process>:
{
   10d70:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   10d72:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   10d76:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   10d7a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   10d7e:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   10d82:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   10d84:	f1a0 0120 	sub.w	r1, r0, #32
   10d88:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d8c:	f3bf 8f5b 	dmb	ish
   10d90:	e854 2f00 	ldrex	r2, [r4]
   10d94:	f022 0201 	bic.w	r2, r2, #1
   10d98:	e844 2000 	strex	r0, r2, [r4]
   10d9c:	2800      	cmp	r0, #0
   10d9e:	d1f7      	bne.n	10d90 <sc_process+0x20>
   10da0:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   10da4:	4a0c      	ldr	r2, [pc, #48]	; (10dd8 <sc_process+0x68>)
   10da6:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   10daa:	4a0c      	ldr	r2, [pc, #48]	; (10ddc <sc_process+0x6c>)
   10dac:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   10db0:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   10db2:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   10db4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   10db8:	2204      	movs	r2, #4
	sc->start = 0U;
   10dba:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   10dbe:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   10dc2:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   10dc6:	f7ff ff5b 	bl	10c80 <bt_gatt_indicate>
   10dca:	b918      	cbnz	r0, 10dd4 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   10dcc:	2101      	movs	r1, #1
   10dce:	4620      	mov	r0, r4
   10dd0:	f018 fe73 	bl	29aba <atomic_set_bit>
}
   10dd4:	b002      	add	sp, #8
   10dd6:	bd10      	pop	{r4, pc}
   10dd8:	0002d09c 	.word	0x0002d09c
   10ddc:	0001081d 	.word	0x0001081d

00010de0 <gatt_notify>:
{
   10de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10de4:	4614      	mov	r4, r2
   10de6:	b089      	sub	sp, #36	; 0x24
   10de8:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   10dea:	2214      	movs	r2, #20
   10dec:	6861      	ldr	r1, [r4, #4]
{
   10dee:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   10df0:	f019 f832 	bl	29e58 <bt_gatt_check_perm>
   10df4:	b198      	cbz	r0, 10e1e <gatt_notify+0x3e>
		BT_WARN("Link is not encrypted");
   10df6:	4824      	ldr	r0, [pc, #144]	; (10e88 <gatt_notify+0xa8>)
   10df8:	6803      	ldr	r3, [r0, #0]
   10dfa:	f013 0f06 	tst.w	r3, #6
   10dfe:	d009      	beq.n	10e14 <gatt_notify+0x34>
   10e00:	4b22      	ldr	r3, [pc, #136]	; (10e8c <gatt_notify+0xac>)
   10e02:	9306      	str	r3, [sp, #24]
   10e04:	aa05      	add	r2, sp, #20
   10e06:	2302      	movs	r3, #2
   10e08:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10e0c:	9301      	str	r3, [sp, #4]
   10e0e:	9305      	str	r3, [sp, #20]
   10e10:	f018 fe33 	bl	29a7a <z_log_msg2_static_create.constprop.0>
		return -EPERM;
   10e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10e18:	b009      	add	sp, #36	; 0x24
   10e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
   10e1e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   10e20:	211b      	movs	r1, #27
   10e22:	3202      	adds	r2, #2
   10e24:	4638      	mov	r0, r7
   10e26:	f7fe ff73 	bl	fd10 <bt_att_create_pdu>
	if (!buf) {
   10e2a:	4605      	mov	r5, r0
   10e2c:	b988      	cbnz	r0, 10e52 <gatt_notify+0x72>
		BT_WARN("No buffer available to send notification");
   10e2e:	4816      	ldr	r0, [pc, #88]	; (10e88 <gatt_notify+0xa8>)
   10e30:	6803      	ldr	r3, [r0, #0]
   10e32:	f013 0f06 	tst.w	r3, #6
   10e36:	d009      	beq.n	10e4c <gatt_notify+0x6c>
   10e38:	4b15      	ldr	r3, [pc, #84]	; (10e90 <gatt_notify+0xb0>)
   10e3a:	9306      	str	r3, [sp, #24]
   10e3c:	aa05      	add	r2, sp, #20
   10e3e:	2302      	movs	r3, #2
   10e40:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10e44:	9301      	str	r3, [sp, #4]
   10e46:	9305      	str	r3, [sp, #20]
   10e48:	f018 fe17 	bl	29a7a <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
   10e4c:	f06f 000b 	mvn.w	r0, #11
   10e50:	e7e2      	b.n	10e18 <gatt_notify+0x38>
   10e52:	f100 0908 	add.w	r9, r0, #8
   10e56:	2102      	movs	r1, #2
   10e58:	4648      	mov	r0, r9
   10e5a:	f019 fdc6 	bl	2a9ea <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   10e5e:	4606      	mov	r6, r0
   10e60:	89a1      	ldrh	r1, [r4, #12]
   10e62:	f826 8b02 	strh.w	r8, [r6], #2
   10e66:	4648      	mov	r0, r9
   10e68:	f019 fdbf 	bl	2a9ea <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   10e6c:	89a2      	ldrh	r2, [r4, #12]
   10e6e:	68a1      	ldr	r1, [r4, #8]
   10e70:	4630      	mov	r0, r6
   10e72:	f017 fba0 	bl	285b6 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   10e76:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   10e7a:	4629      	mov	r1, r5
   10e7c:	4638      	mov	r0, r7
}
   10e7e:	b009      	add	sp, #36	; 0x24
   10e80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   10e84:	f018 bc6c 	b.w	29760 <bt_att_send>
   10e88:	200009f8 	.word	0x200009f8
   10e8c:	000311f5 	.word	0x000311f5
   10e90:	00031232 	.word	0x00031232

00010e94 <notify_cb>:
{
   10e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   10e98:	4b46      	ldr	r3, [pc, #280]	; (10fb4 <notify_cb+0x120>)
{
   10e9a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   10e9c:	6882      	ldr	r2, [r0, #8]
   10e9e:	429a      	cmp	r2, r3
{
   10ea0:	b08b      	sub	sp, #44	; 0x2c
   10ea2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   10ea4:	d004      	beq.n	10eb0 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   10ea6:	2701      	movs	r7, #1
}
   10ea8:	4638      	mov	r0, r7
   10eaa:	b00b      	add	sp, #44	; 0x2c
   10eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   10eb0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   10eb4:	4b40      	ldr	r3, [pc, #256]	; (10fb8 <notify_cb+0x124>)
   10eb6:	4598      	cmp	r8, r3
   10eb8:	d01c      	beq.n	10ef4 <notify_cb+0x60>
   10eba:	f108 0315 	add.w	r3, r8, #21
			BT_WARN("Link is not encrypted");
   10ebe:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 10fbc <notify_cb+0x128>
   10ec2:	9301      	str	r3, [sp, #4]
   10ec4:	f108 0501 	add.w	r5, r8, #1
		if (cfg->value != data->type) {
   10ec8:	f8b5 2007 	ldrh.w	r2, [r5, #7]
   10ecc:	89a3      	ldrh	r3, [r4, #12]
   10ece:	429a      	cmp	r2, r3
   10ed0:	d10b      	bne.n	10eea <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   10ed2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   10ed6:	4629      	mov	r1, r5
   10ed8:	f7fd fe02 	bl	eae0 <bt_conn_lookup_addr_le>
		if (!conn) {
   10edc:	4682      	mov	sl, r0
   10ede:	b120      	cbz	r0, 10eea <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
   10ee0:	7b42      	ldrb	r2, [r0, #13]
   10ee2:	2a07      	cmp	r2, #7
   10ee4:	d02a      	beq.n	10f3c <notify_cb+0xa8>
			bt_conn_unref(conn);
   10ee6:	f017 fed5 	bl	28c94 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   10eea:	9b01      	ldr	r3, [sp, #4]
   10eec:	350a      	adds	r5, #10
   10eee:	429d      	cmp	r5, r3
   10ef0:	d0d9      	beq.n	10ea6 <notify_cb+0x12>
   10ef2:	e7e9      	b.n	10ec8 <notify_cb+0x34>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   10ef4:	2700      	movs	r7, #0
   10ef6:	4d32      	ldr	r5, [pc, #200]	; (10fc0 <notify_cb+0x12c>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   10ef8:	46b9      	mov	r9, r7
   10efa:	a904      	add	r1, sp, #16
   10efc:	4628      	mov	r0, r5
   10efe:	f8cd 9010 	str.w	r9, [sp, #16]
   10f02:	f8cd 9013 	str.w	r9, [sp, #19]
   10f06:	f018 fd21 	bl	2994c <bt_addr_le_cmp>
   10f0a:	b178      	cbz	r0, 10f2c <notify_cb+0x98>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   10f0c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   10f10:	2207      	movs	r2, #7
   10f12:	4629      	mov	r1, r5
   10f14:	f7fd fe04 	bl	eb20 <bt_conn_lookup_state_le>
			if (!conn) {
   10f18:	b968      	cbnz	r0, 10f36 <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
   10f1a:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   10f1c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   10f20:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   10f22:	4629      	mov	r1, r5
   10f24:	8853      	ldrh	r3, [r2, #2]
   10f26:	8812      	ldrh	r2, [r2, #0]
   10f28:	f7ff fbe0 	bl	106ec <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   10f2c:	350c      	adds	r5, #12
   10f2e:	2f00      	cmp	r7, #0
   10f30:	d1c3      	bne.n	10eba <notify_cb+0x26>
   10f32:	2701      	movs	r7, #1
   10f34:	e7e1      	b.n	10efa <notify_cb+0x66>
			bt_conn_unref(conn);
   10f36:	f017 fead 	bl	28c94 <bt_conn_unref>
   10f3a:	e7f7      	b.n	10f2c <notify_cb+0x98>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   10f3c:	f8d8 2020 	ldr.w	r2, [r8, #32]
   10f40:	b122      	cbz	r2, 10f4c <notify_cb+0xb8>
   10f42:	4631      	mov	r1, r6
   10f44:	4790      	blx	r2
   10f46:	b908      	cbnz	r0, 10f4c <notify_cb+0xb8>
			bt_conn_unref(conn);
   10f48:	4650      	mov	r0, sl
   10f4a:	e7cc      	b.n	10ee6 <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
   10f4c:	2214      	movs	r2, #20
   10f4e:	4631      	mov	r1, r6
   10f50:	4650      	mov	r0, sl
   10f52:	f018 ff81 	bl	29e58 <bt_gatt_check_perm>
   10f56:	4607      	mov	r7, r0
   10f58:	b180      	cbz	r0, 10f7c <notify_cb+0xe8>
			BT_WARN("Link is not encrypted");
   10f5a:	f8d9 3000 	ldr.w	r3, [r9]
   10f5e:	f013 0f06 	tst.w	r3, #6
   10f62:	d0c2      	beq.n	10eea <notify_cb+0x56>
   10f64:	4b17      	ldr	r3, [pc, #92]	; (10fc4 <notify_cb+0x130>)
   10f66:	9308      	str	r3, [sp, #32]
   10f68:	aa07      	add	r2, sp, #28
   10f6a:	2302      	movs	r3, #2
   10f6c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10f70:	4648      	mov	r0, r9
   10f72:	9303      	str	r3, [sp, #12]
   10f74:	9307      	str	r3, [sp, #28]
   10f76:	f018 fd80 	bl	29a7a <z_log_msg2_static_create.constprop.0>
   10f7a:	e7b6      	b.n	10eea <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
   10f7c:	89a0      	ldrh	r0, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   10f7e:	88a1      	ldrh	r1, [r4, #4]
   10f80:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   10f82:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
   10f84:	4650      	mov	r0, sl
		if (data->type == BT_GATT_CCC_INDICATE) {
   10f86:	d110      	bne.n	10faa <notify_cb+0x116>
			err = gatt_indicate(conn, data->handle,
   10f88:	f7ff fe06 	bl	10b98 <gatt_indicate>
			if (err == 0) {
   10f8c:	4683      	mov	fp, r0
   10f8e:	b918      	cbnz	r0, 10f98 <notify_cb+0x104>
				data->ind_params->_ref++;
   10f90:	6920      	ldr	r0, [r4, #16]
   10f92:	7d81      	ldrb	r1, [r0, #22]
   10f94:	3101      	adds	r1, #1
   10f96:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
   10f98:	4650      	mov	r0, sl
   10f9a:	f017 fe7b 	bl	28c94 <bt_conn_unref>
		if (err < 0) {
   10f9e:	f1bb 0f00 	cmp.w	fp, #0
   10fa2:	db81      	blt.n	10ea8 <notify_cb+0x14>
		data->err = 0;
   10fa4:	2300      	movs	r3, #0
   10fa6:	60a3      	str	r3, [r4, #8]
   10fa8:	e79f      	b.n	10eea <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   10faa:	f7ff ff19 	bl	10de0 <gatt_notify>
   10fae:	4683      	mov	fp, r0
   10fb0:	e7f2      	b.n	10f98 <notify_cb+0x104>
   10fb2:	bf00      	nop
   10fb4:	00010619 	.word	0x00010619
   10fb8:	200003bc 	.word	0x200003bc
   10fbc:	200009f8 	.word	0x200009f8
   10fc0:	200047fd 	.word	0x200047fd
   10fc4:	000311f5 	.word	0x000311f5

00010fc8 <update_ccc>:
{
   10fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   10fcc:	4b43      	ldr	r3, [pc, #268]	; (110dc <update_ccc+0x114>)
{
   10fce:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   10fd0:	6882      	ldr	r2, [r0, #8]
   10fd2:	429a      	cmp	r2, r3
{
   10fd4:	b089      	sub	sp, #36	; 0x24
   10fd6:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   10fd8:	d17b      	bne.n	110d2 <update_ccc+0x10a>
	ccc = attr->user_data;
   10fda:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   10fde:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   10fe0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 110e0 <update_ccc+0x118>
   10fe4:	f108 0601 	add.w	r6, r8, #1
   10fe8:	f108 0a15 	add.w	sl, r8, #21
		if (!cfg->value ||
   10fec:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   10ff0:	b1f3      	cbz	r3, 11030 <update_ccc+0x68>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   10ff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   10ff6:	4632      	mov	r2, r6
   10ff8:	4620      	mov	r0, r4
   10ffa:	f017 fec4 	bl	28d86 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   10ffe:	b1b8      	cbz	r0, 11030 <update_ccc+0x68>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   11000:	222a      	movs	r2, #42	; 0x2a
   11002:	4629      	mov	r1, r5
   11004:	4620      	mov	r0, r4
   11006:	f018 ff27 	bl	29e58 <bt_gatt_check_perm>
		if (err) {
   1100a:	b330      	cbz	r0, 1105a <update_ccc+0x92>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1100c:	2803      	cmp	r0, #3
   1100e:	d113      	bne.n	11038 <update_ccc+0x70>
				BT_WARN("CCC %p not writable", attr);
   11010:	f8d9 3000 	ldr.w	r3, [r9]
   11014:	f013 0f06 	tst.w	r3, #6
   11018:	d00a      	beq.n	11030 <update_ccc+0x68>
   1101a:	4b32      	ldr	r3, [pc, #200]	; (110e4 <update_ccc+0x11c>)
   1101c:	9001      	str	r0, [sp, #4]
   1101e:	9005      	str	r0, [sp, #20]
   11020:	aa05      	add	r2, sp, #20
   11022:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11026:	4648      	mov	r0, r9
   11028:	e9cd 3506 	strd	r3, r5, [sp, #24]
   1102c:	f018 fd25 	bl	29a7a <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   11030:	360a      	adds	r6, #10
   11032:	45b2      	cmp	sl, r6
   11034:	d04d      	beq.n	110d2 <update_ccc+0x10a>
   11036:	e7d9      	b.n	10fec <update_ccc+0x24>
				sec = BT_SECURITY_L3;
   11038:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1103a:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1103c:	bf14      	ite	ne
   1103e:	f04f 0b02 	movne.w	fp, #2
   11042:	f04f 0b03 	moveq.w	fp, #3
			    bt_conn_get_security(conn) < sec) {
   11046:	f017 fe9c 	bl	28d82 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1104a:	4583      	cmp	fp, r0
   1104c:	d905      	bls.n	1105a <update_ccc+0x92>
				if (data->sec < sec) {
   1104e:	793a      	ldrb	r2, [r7, #4]
   11050:	455a      	cmp	r2, fp
   11052:	d2ed      	bcs.n	11030 <update_ccc+0x68>
					data->sec = sec;
   11054:	f887 b004 	strb.w	fp, [r7, #4]
   11058:	e7ea      	b.n	11030 <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   1105a:	4641      	mov	r1, r8
   1105c:	4628      	mov	r0, r5
   1105e:	f018 fbf5 	bl	2984c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   11062:	4b21      	ldr	r3, [pc, #132]	; (110e8 <update_ccc+0x120>)
   11064:	4598      	cmp	r8, r3
   11066:	d134      	bne.n	110d2 <update_ccc+0x10a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   11068:	7a20      	ldrb	r0, [r4, #8]
   1106a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1106e:	f7ff fa73 	bl	10558 <find_sc_cfg>
	if (!cfg) {
   11072:	b370      	cbz	r0, 110d2 <update_ccc+0x10a>
	if (!(cfg->data.start || cfg->data.end)) {
   11074:	8902      	ldrh	r2, [r0, #8]
   11076:	8943      	ldrh	r3, [r0, #10]
   11078:	ea53 0102 	orrs.w	r1, r3, r2
   1107c:	d029      	beq.n	110d2 <update_ccc+0x10a>
	index = bt_conn_index(conn);
   1107e:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   11080:	f8ad 2000 	strh.w	r2, [sp]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   11084:	f8ad 3002 	strh.w	r3, [sp, #2]
	index = bt_conn_index(conn);
   11088:	f7fd fc0a 	bl	e8a0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1108c:	4917      	ldr	r1, [pc, #92]	; (110ec <update_ccc+0x124>)
   1108e:	4a18      	ldr	r2, [pc, #96]	; (110f0 <update_ccc+0x128>)
   11090:	2318      	movs	r3, #24
   11092:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   11096:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   11098:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1109a:	4a16      	ldr	r2, [pc, #88]	; (110f4 <update_ccc+0x12c>)
   1109c:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1109e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
   110a2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   110a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].data = &sc_range[0];
   110a8:	f8c3 d010 	str.w	sp, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   110ac:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   110ae:	4620      	mov	r0, r4
   110b0:	f7ff fde6 	bl	10c80 <bt_gatt_indicate>
   110b4:	b168      	cbz	r0, 110d2 <update_ccc+0x10a>
		BT_ERR("SC restore indication failed");
   110b6:	480a      	ldr	r0, [pc, #40]	; (110e0 <update_ccc+0x118>)
   110b8:	6803      	ldr	r3, [r0, #0]
   110ba:	075b      	lsls	r3, r3, #29
   110bc:	d009      	beq.n	110d2 <update_ccc+0x10a>
   110be:	4b0e      	ldr	r3, [pc, #56]	; (110f8 <update_ccc+0x130>)
   110c0:	9306      	str	r3, [sp, #24]
   110c2:	aa05      	add	r2, sp, #20
   110c4:	2302      	movs	r3, #2
   110c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   110ca:	9301      	str	r3, [sp, #4]
   110cc:	9305      	str	r3, [sp, #20]
   110ce:	f018 fcd4 	bl	29a7a <z_log_msg2_static_create.constprop.0>
}
   110d2:	2001      	movs	r0, #1
   110d4:	b009      	add	sp, #36	; 0x24
   110d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110da:	bf00      	nop
   110dc:	00010619 	.word	0x00010619
   110e0:	200009f8 	.word	0x200009f8
   110e4:	0003125b 	.word	0x0003125b
   110e8:	200003bc 	.word	0x200003bc
   110ec:	20002bb8 	.word	0x20002bb8
   110f0:	0002d09c 	.word	0x0002d09c
   110f4:	00029ad7 	.word	0x00029ad7
   110f8:	0003126f 	.word	0x0003126f

000110fc <bt_gatt_mult_notification>:
{
   110fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11100:	b087      	sub	sp, #28
   11102:	af00      	add	r7, sp, #0
   11104:	4681      	mov	r9, r0
   11106:	460c      	mov	r4, r1
   11108:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
   1110a:	f7ff fa45 	bl	10598 <gatt_sub_find>
	if (!sub) {
   1110e:	4606      	mov	r6, r0
   11110:	b340      	cbz	r0, 11164 <bt_gatt_mult_notification+0x68>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   11112:	4652      	mov	r2, sl
   11114:	4621      	mov	r1, r4
   11116:	f107 000c 	add.w	r0, r7, #12
   1111a:	f019 fc1d 	bl	2a958 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1111e:	8a3b      	ldrh	r3, [r7, #16]
   11120:	2b04      	cmp	r3, #4
   11122:	d91f      	bls.n	11164 <bt_gatt_mult_notification+0x68>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   11124:	2104      	movs	r1, #4
   11126:	f107 000c 	add.w	r0, r7, #12
   1112a:	f019 fc8f 	bl	2aa4c <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1112e:	8a39      	ldrh	r1, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
   11130:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
   11134:	4541      	cmp	r1, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   11136:	4602      	mov	r2, r0
		if (len > buf.len) {
   11138:	d218      	bcs.n	1116c <bt_gatt_mult_notification+0x70>
			BT_ERR("Invalid data len %u > %u", len, length);
   1113a:	4820      	ldr	r0, [pc, #128]	; (111bc <bt_gatt_mult_notification+0xc0>)
   1113c:	6802      	ldr	r2, [r0, #0]
   1113e:	0753      	lsls	r3, r2, #29
   11140:	d010      	beq.n	11164 <bt_gatt_mult_notification+0x68>
   11142:	466c      	mov	r4, sp
   11144:	b088      	sub	sp, #32
   11146:	466a      	mov	r2, sp
   11148:	491d      	ldr	r1, [pc, #116]	; (111c0 <bt_gatt_mult_notification+0xc4>)
   1114a:	f8c2 a018 	str.w	sl, [r2, #24]
   1114e:	2304      	movs	r3, #4
   11150:	e9c2 1804 	strd	r1, r8, [r2, #16]
   11154:	f842 3f0c 	str.w	r3, [r2, #12]!
   11158:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1115c:	60bb      	str	r3, [r7, #8]
   1115e:	f018 fc8c 	bl	29a7a <z_log_msg2_static_create.constprop.0>
   11162:	46a5      	mov	sp, r4
}
   11164:	371c      	adds	r7, #28
   11166:	46bd      	mov	sp, r7
   11168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1116c:	68b4      	ldr	r4, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1116e:	b1f4      	cbz	r4, 111ae <bt_gatt_mult_notification+0xb2>
	return node->next;
   11170:	f854 5914 	ldr.w	r5, [r4], #-20
   11174:	b105      	cbz	r5, 11178 <bt_gatt_mult_notification+0x7c>
   11176:	3d14      	subs	r5, #20
		handle = sys_cpu_to_le16(nfy->handle);
   11178:	4693      	mov	fp, r2
   1117a:	f83b 3b04 	ldrh.w	r3, [fp], #4
   1117e:	607b      	str	r3, [r7, #4]
			if (handle != params->value_handle) {
   11180:	8921      	ldrh	r1, [r4, #8]
   11182:	687b      	ldr	r3, [r7, #4]
   11184:	4299      	cmp	r1, r3
   11186:	d10b      	bne.n	111a0 <bt_gatt_mult_notification+0xa4>
			if (params->notify(conn, params, nfy->value, len) ==
   11188:	f8d4 c000 	ldr.w	ip, [r4]
   1118c:	4643      	mov	r3, r8
   1118e:	465a      	mov	r2, fp
   11190:	4621      	mov	r1, r4
   11192:	4648      	mov	r0, r9
   11194:	47e0      	blx	ip
   11196:	b918      	cbnz	r0, 111a0 <bt_gatt_mult_notification+0xa4>
				bt_gatt_unsubscribe(conn, params);
   11198:	4621      	mov	r1, r4
   1119a:	4648      	mov	r0, r9
   1119c:	f018 fea6 	bl	29eec <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   111a0:	b12d      	cbz	r5, 111ae <bt_gatt_mult_notification+0xb2>
   111a2:	6969      	ldr	r1, [r5, #20]
   111a4:	b101      	cbz	r1, 111a8 <bt_gatt_mult_notification+0xac>
   111a6:	3914      	subs	r1, #20
{
   111a8:	462c      	mov	r4, r5
   111aa:	460d      	mov	r5, r1
   111ac:	e7e8      	b.n	11180 <bt_gatt_mult_notification+0x84>
		net_buf_simple_pull_mem(&buf, len);
   111ae:	4641      	mov	r1, r8
   111b0:	f107 000c 	add.w	r0, r7, #12
   111b4:	f019 fc4a 	bl	2aa4c <net_buf_simple_pull_mem>
   111b8:	e7b1      	b.n	1111e <bt_gatt_mult_notification+0x22>
   111ba:	bf00      	nop
   111bc:	200009f8 	.word	0x200009f8
   111c0:	0003128c 	.word	0x0003128c

000111c4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   111c4:	b570      	push	{r4, r5, r6, lr}
   111c6:	b08a      	sub	sp, #40	; 0x28
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   111c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   111cc:	4a21      	ldr	r2, [pc, #132]	; (11254 <bt_gatt_connected+0x90>)
	data.conn = conn;
   111ce:	9002      	str	r0, [sp, #8]
{
   111d0:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   111d2:	ab02      	add	r3, sp, #8
	data.sec = BT_SECURITY_L1;
   111d4:	2001      	movs	r0, #1
   111d6:	f88d 000c 	strb.w	r0, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   111da:	f018 fe30 	bl	29e3e <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   111de:	4628      	mov	r0, r5
   111e0:	f017 fdcf 	bl	28d82 <bt_conn_get_security>
   111e4:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   111e8:	4288      	cmp	r0, r1
   111ea:	d214      	bcs.n	11216 <bt_gatt_connected+0x52>
		int err = bt_conn_set_security(conn, data.sec);
   111ec:	4628      	mov	r0, r5
   111ee:	f017 fd98 	bl	28d22 <bt_conn_set_security>

		if (err) {
   111f2:	4603      	mov	r3, r0
   111f4:	b178      	cbz	r0, 11216 <bt_gatt_connected+0x52>
			BT_WARN("Failed to set security for bonded peer (%d)",
   111f6:	4818      	ldr	r0, [pc, #96]	; (11258 <bt_gatt_connected+0x94>)
   111f8:	6802      	ldr	r2, [r0, #0]
   111fa:	f012 0f06 	tst.w	r2, #6
   111fe:	d00a      	beq.n	11216 <bt_gatt_connected+0x52>
   11200:	4a16      	ldr	r2, [pc, #88]	; (1125c <bt_gatt_connected+0x98>)
   11202:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11206:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1120a:	2303      	movs	r3, #3
   1120c:	aa07      	add	r2, sp, #28
   1120e:	9301      	str	r3, [sp, #4]
   11210:	9307      	str	r3, [sp, #28]
   11212:	f018 fc32 	bl	29a7a <z_log_msg2_static_create.constprop.0>
	sub = gatt_sub_find(conn);
   11216:	4628      	mov	r0, r5
   11218:	f7ff f9be 	bl	10598 <gatt_sub_find>
	if (!sub) {
   1121c:	b1b8      	cbz	r0, 1124e <bt_gatt_connected+0x8a>
	return list->head;
   1121e:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   11220:	b1ac      	cbz	r4, 1124e <bt_gatt_connected+0x8a>
   11222:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   11224:	f105 0688 	add.w	r6, r5, #136	; 0x88
   11228:	7a28      	ldrb	r0, [r5, #8]
   1122a:	4631      	mov	r1, r6
   1122c:	f017 fbc5 	bl	289ba <bt_addr_le_is_bonded>
   11230:	b148      	cbz	r0, 11246 <bt_gatt_connected+0x82>
   11232:	f104 0010 	add.w	r0, r4, #16
   11236:	f018 fb2e 	bl	29896 <atomic_get>
   1123a:	0783      	lsls	r3, r0, #30
   1123c:	d403      	bmi.n	11246 <bt_gatt_connected+0x82>
			gatt_write_ccc(conn, params);
   1123e:	4621      	mov	r1, r4
   11240:	4628      	mov	r0, r5
   11242:	f7ff f9d7 	bl	105f4 <gatt_write_ccc>
	return node->next;
   11246:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   11248:	b10c      	cbz	r4, 1124e <bt_gatt_connected+0x8a>
   1124a:	3c14      	subs	r4, #20
   1124c:	e7ec      	b.n	11228 <bt_gatt_connected+0x64>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1124e:	b00a      	add	sp, #40	; 0x28
   11250:	bd70      	pop	{r4, r5, r6, pc}
   11252:	bf00      	nop
   11254:	00010fc9 	.word	0x00010fc9
   11258:	200009f8 	.word	0x200009f8
   1125c:	000312a5 	.word	0x000312a5

00011260 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   11260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   11262:	4b08      	ldr	r3, [pc, #32]	; (11284 <bt_gatt_att_max_mtu_changed+0x24>)
   11264:	681c      	ldr	r4, [r3, #0]
   11266:	4605      	mov	r5, r0
   11268:	460e      	mov	r6, r1
   1126a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1126c:	b14c      	cbz	r4, 11282 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1126e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11272:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   11274:	b11b      	cbz	r3, 1127e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   11276:	463a      	mov	r2, r7
   11278:	4631      	mov	r1, r6
   1127a:	4628      	mov	r0, r5
   1127c:	4798      	blx	r3
	return node->next;
   1127e:	6864      	ldr	r4, [r4, #4]
   11280:	e7f4      	b.n	1126c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   11282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11284:	20002b8c 	.word	0x20002b8c

00011288 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   11288:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1128a:	4a06      	ldr	r2, [pc, #24]	; (112a4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1128c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1128e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   11290:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   11292:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   11296:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1129a:	f018 fdd0 	bl	29e3e <bt_gatt_foreach_attr>
}
   1129e:	b003      	add	sp, #12
   112a0:	f85d fb04 	ldr.w	pc, [sp], #4
   112a4:	00010fc9 	.word	0x00010fc9

000112a8 <db_hash_read>:
{
   112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   112aa:	4913      	ldr	r1, [pc, #76]	; (112f8 <db_hash_read+0x50>)
{
   112ac:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   112b0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   112b2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   112b6:	461f      	mov	r7, r3
   112b8:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   112ba:	f01a fad2 	bl	2b862 <k_work_cancel_delayable_sync>
   112be:	480f      	ldr	r0, [pc, #60]	; (112fc <db_hash_read+0x54>)
   112c0:	f018 fae9 	bl	29896 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   112c4:	0743      	lsls	r3, r0, #29
   112c6:	d401      	bmi.n	112cc <db_hash_read+0x24>
		db_hash_gen(true);
   112c8:	f7ff fc10 	bl	10aec <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
   112cc:	2101      	movs	r1, #1
   112ce:	4620      	mov	r0, r4
   112d0:	f018 fe9d 	bl	2a00e <bt_gatt_change_aware>
	if (offset > value_len) {
   112d4:	2e10      	cmp	r6, #16
   112d6:	d80c      	bhi.n	112f2 <db_hash_read+0x4a>
	len = MIN(buf_len, value_len - offset);
   112d8:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   112dc:	4908      	ldr	r1, [pc, #32]	; (11300 <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
   112de:	42bc      	cmp	r4, r7
   112e0:	bfa8      	it	ge
   112e2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   112e4:	4622      	mov	r2, r4
   112e6:	4431      	add	r1, r6
   112e8:	4628      	mov	r0, r5
   112ea:	f017 f964 	bl	285b6 <memcpy>
}
   112ee:	4620      	mov	r0, r4
   112f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   112f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   112f6:	e7fa      	b.n	112ee <db_hash_read+0x46>
   112f8:	20001ab0 	.word	0x20001ab0
   112fc:	20001b28 	.word	0x20001b28
   11300:	20001a70 	.word	0x20001a70

00011304 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   11304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   11308:	4a30      	ldr	r2, [pc, #192]	; (113cc <bt_gatt_disconnected+0xc8>)
   1130a:	4603      	mov	r3, r0
{
   1130c:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1130e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11312:	2001      	movs	r0, #1
   11314:	f018 fd93 	bl	29e3e <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   11318:	4620      	mov	r0, r4
   1131a:	f7ff f93d 	bl	10598 <gatt_sub_find>
	if (!sub) {
   1131e:	4607      	mov	r7, r0
   11320:	b378      	cbz	r0, 11382 <bt_gatt_disconnected+0x7e>
	return list->head;
   11322:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   11324:	b36d      	cbz	r5, 11382 <bt_gatt_disconnected+0x7e>
	return node->next;
   11326:	f855 6914 	ldr.w	r6, [r5], #-20
   1132a:	b106      	cbz	r6, 1132e <bt_gatt_disconnected+0x2a>
   1132c:	3e14      	subs	r6, #20
{
   1132e:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   11332:	f104 0988 	add.w	r9, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   11336:	f107 0a01 	add.w	sl, r7, #1
			params->value = 0U;
   1133a:	46c3      	mov	fp, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1133c:	7a20      	ldrb	r0, [r4, #8]
   1133e:	4649      	mov	r1, r9
   11340:	f017 fb3b 	bl	289ba <bt_addr_le_is_bonded>
   11344:	b970      	cbnz	r0, 11364 <bt_gatt_disconnected+0x60>
			params->value = 0U;
   11346:	f8a5 b00c 	strh.w	fp, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1134a:	462b      	mov	r3, r5
   1134c:	4642      	mov	r2, r8
   1134e:	4639      	mov	r1, r7
   11350:	4620      	mov	r0, r4
   11352:	f018 fb39 	bl	299c8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   11356:	b1a6      	cbz	r6, 11382 <bt_gatt_disconnected+0x7e>
   11358:	6973      	ldr	r3, [r6, #20]
   1135a:	b103      	cbz	r3, 1135e <bt_gatt_disconnected+0x5a>
   1135c:	3b14      	subs	r3, #20
{
   1135e:	4635      	mov	r5, r6
   11360:	461e      	mov	r6, r3
   11362:	e7eb      	b.n	1133c <bt_gatt_disconnected+0x38>
   11364:	f105 0010 	add.w	r0, r5, #16
   11368:	f018 fa95 	bl	29896 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1136c:	07c3      	lsls	r3, r0, #31
   1136e:	d4ea      	bmi.n	11346 <bt_gatt_disconnected+0x42>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   11370:	787b      	ldrb	r3, [r7, #1]
   11372:	b11b      	cbz	r3, 1137c <bt_gatt_disconnected+0x78>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   11374:	4649      	mov	r1, r9
   11376:	4650      	mov	r0, sl
   11378:	f018 fb17 	bl	299aa <bt_addr_le_copy>
			prev = &params->node;
   1137c:	f105 0814 	add.w	r8, r5, #20
   11380:	e7e9      	b.n	11356 <bt_gatt_disconnected+0x52>
	cfg = find_cf_cfg(conn);
   11382:	4620      	mov	r0, r4
   11384:	f7ff f8ba 	bl	104fc <find_cf_cfg>
	if (!cfg) {
   11388:	4605      	mov	r5, r0
   1138a:	b1e0      	cbz	r0, 113c6 <bt_gatt_disconnected+0xc2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1138c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   11390:	7a20      	ldrb	r0, [r4, #8]
   11392:	4631      	mov	r1, r6
   11394:	f017 fb11 	bl	289ba <bt_addr_le_is_bonded>
   11398:	b920      	cbnz	r0, 113a4 <bt_gatt_disconnected+0xa0>
		clear_cf_cfg(cfg);
   1139a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1139c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   113a0:	f018 bb6e 	b.w	29a80 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   113a4:	1c68      	adds	r0, r5, #1
   113a6:	4631      	mov	r1, r6
   113a8:	350c      	adds	r5, #12
   113aa:	f018 fafe 	bl	299aa <bt_addr_le_copy>
   113ae:	f3bf 8f5b 	dmb	ish
   113b2:	e855 3f00 	ldrex	r3, [r5]
   113b6:	f023 0302 	bic.w	r3, r3, #2
   113ba:	e845 3200 	strex	r2, r3, [r5]
   113be:	2a00      	cmp	r2, #0
   113c0:	d1f7      	bne.n	113b2 <bt_gatt_disconnected+0xae>
   113c2:	f3bf 8f5b 	dmb	ish
}
   113c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113ca:	bf00      	nop
   113cc:	00010871 	.word	0x00010871

000113d0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   113d0:	4b10      	ldr	r3, [pc, #64]	; (11414 <get_io_capa+0x44>)
   113d2:	681b      	ldr	r3, [r3, #0]
   113d4:	b1bb      	cbz	r3, 11406 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   113d6:	681a      	ldr	r2, [r3, #0]
   113d8:	b142      	cbz	r2, 113ec <get_io_capa+0x1c>
   113da:	6859      	ldr	r1, [r3, #4]
   113dc:	b131      	cbz	r1, 113ec <get_io_capa+0x1c>
   113de:	6899      	ldr	r1, [r3, #8]
   113e0:	b911      	cbnz	r1, 113e8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   113e2:	490d      	ldr	r1, [pc, #52]	; (11418 <get_io_capa+0x48>)
   113e4:	7809      	ldrb	r1, [r1, #0]
   113e6:	b939      	cbnz	r1, 113f8 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   113e8:	2004      	movs	r0, #4
   113ea:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   113ec:	490a      	ldr	r1, [pc, #40]	; (11418 <get_io_capa+0x48>)
   113ee:	7809      	ldrb	r1, [r1, #0]
   113f0:	b111      	cbz	r1, 113f8 <get_io_capa+0x28>
   113f2:	b10a      	cbz	r2, 113f8 <get_io_capa+0x28>
   113f4:	6899      	ldr	r1, [r3, #8]
   113f6:	b941      	cbnz	r1, 1140a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   113f8:	685b      	ldr	r3, [r3, #4]
   113fa:	b943      	cbnz	r3, 1140e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   113fc:	2a00      	cmp	r2, #0
   113fe:	bf0c      	ite	eq
   11400:	2003      	moveq	r0, #3
   11402:	2000      	movne	r0, #0
   11404:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   11406:	2003      	movs	r0, #3
   11408:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1140a:	2001      	movs	r0, #1
   1140c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1140e:	2002      	movs	r0, #2
	}
}
   11410:	4770      	bx	lr
   11412:	bf00      	nop
   11414:	20002a68 	.word	0x20002a68
   11418:	20004997 	.word	0x20004997

0001141c <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1141c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1141e:	1d14      	adds	r4, r2, #4
{
   11420:	b091      	sub	sp, #68	; 0x44
   11422:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   11424:	588b      	ldr	r3, [r1, r2]
   11426:	9300      	str	r3, [sp, #0]
{
   11428:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1142a:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1142c:	4628      	mov	r0, r5
   1142e:	4621      	mov	r1, r4
   11430:	f018 fe25 	bl	2a07e <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   11434:	4631      	mov	r1, r6
   11436:	2210      	movs	r2, #16
   11438:	a802      	add	r0, sp, #8
   1143a:	f018 fe16 	bl	2a06a <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1143e:	ab06      	add	r3, sp, #24
   11440:	4622      	mov	r2, r4
   11442:	4629      	mov	r1, r5
   11444:	a802      	add	r0, sp, #8
   11446:	f018 fe29 	bl	2a09c <bt_smp_aes_cmac>
	if (err) {
   1144a:	4606      	mov	r6, r0
   1144c:	b180      	cbz	r0, 11470 <smp_sign_buf+0x54>
		BT_ERR("Data signing failed");
   1144e:	4812      	ldr	r0, [pc, #72]	; (11498 <smp_sign_buf+0x7c>)
   11450:	6803      	ldr	r3, [r0, #0]
   11452:	075b      	lsls	r3, r3, #29
   11454:	d009      	beq.n	1146a <smp_sign_buf+0x4e>
   11456:	4b11      	ldr	r3, [pc, #68]	; (1149c <smp_sign_buf+0x80>)
   11458:	930e      	str	r3, [sp, #56]	; 0x38
   1145a:	aa0d      	add	r2, sp, #52	; 0x34
   1145c:	2302      	movs	r3, #2
   1145e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11462:	9301      	str	r3, [sp, #4]
   11464:	930d      	str	r3, [sp, #52]	; 0x34
   11466:	f018 fed4 	bl	2a212 <z_log_msg2_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   1146a:	4630      	mov	r0, r6
   1146c:	b011      	add	sp, #68	; 0x44
   1146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   11470:	a806      	add	r0, sp, #24
   11472:	2110      	movs	r1, #16
   11474:	f018 fe03 	bl	2a07e <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   11478:	2204      	movs	r2, #4
   1147a:	4669      	mov	r1, sp
   1147c:	a807      	add	r0, sp, #28
   1147e:	f017 f89a 	bl	285b6 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   11482:	4621      	mov	r1, r4
   11484:	4628      	mov	r0, r5
   11486:	f018 fdfa 	bl	2a07e <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1148a:	220c      	movs	r2, #12
   1148c:	a907      	add	r1, sp, #28
   1148e:	4638      	mov	r0, r7
   11490:	f017 f891 	bl	285b6 <memcpy>
	return 0;
   11494:	e7e9      	b.n	1146a <smp_sign_buf+0x4e>
   11496:	bf00      	nop
   11498:	20000a18 	.word	0x20000a18
   1149c:	000312e0 	.word	0x000312e0

000114a0 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   114a0:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   114a2:	4b10      	ldr	r3, [pc, #64]	; (114e4 <bt_smp_accept+0x44>)
{
   114a4:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   114a6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
{
   114aa:	b089      	sub	sp, #36	; 0x24
		if (smp->chan.chan.conn) {
   114ac:	b938      	cbnz	r0, 114be <bt_smp_accept+0x1e>
			continue;
		}

		smp->chan.chan.ops = &ops;
   114ae:	4a0e      	ldr	r2, [pc, #56]	; (114e8 <bt_smp_accept+0x48>)
   114b0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   114b4:	33f0      	adds	r3, #240	; 0xf0
   114b6:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   114b8:	b009      	add	sp, #36	; 0x24
   114ba:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
   114be:	480b      	ldr	r0, [pc, #44]	; (114ec <bt_smp_accept+0x4c>)
   114c0:	6803      	ldr	r3, [r0, #0]
   114c2:	075b      	lsls	r3, r3, #29
   114c4:	d00a      	beq.n	114dc <bt_smp_accept+0x3c>
   114c6:	4b0a      	ldr	r3, [pc, #40]	; (114f0 <bt_smp_accept+0x50>)
   114c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   114cc:	e9cd 3206 	strd	r3, r2, [sp, #24]
   114d0:	2303      	movs	r3, #3
   114d2:	aa05      	add	r2, sp, #20
   114d4:	9301      	str	r3, [sp, #4]
   114d6:	9305      	str	r3, [sp, #20]
   114d8:	f018 fe9b 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   114dc:	f06f 000b 	mvn.w	r0, #11
   114e0:	e7ea      	b.n	114b8 <bt_smp_accept+0x18>
   114e2:	bf00      	nop
   114e4:	20001b30 	.word	0x20001b30
   114e8:	0002d218 	.word	0x0002d218
   114ec:	20000a18 	.word	0x20000a18
   114f0:	000312f4 	.word	0x000312f4

000114f4 <smp_chan_get>:
{
   114f4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   114f6:	2106      	movs	r1, #6
{
   114f8:	b088      	sub	sp, #32
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   114fa:	f017 fd6a 	bl	28fd2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   114fe:	4604      	mov	r4, r0
   11500:	b980      	cbnz	r0, 11524 <smp_chan_get+0x30>
		BT_ERR("Unable to find SMP channel");
   11502:	480a      	ldr	r0, [pc, #40]	; (1152c <smp_chan_get+0x38>)
   11504:	6803      	ldr	r3, [r0, #0]
   11506:	075b      	lsls	r3, r3, #29
   11508:	d009      	beq.n	1151e <smp_chan_get+0x2a>
   1150a:	4b09      	ldr	r3, [pc, #36]	; (11530 <smp_chan_get+0x3c>)
   1150c:	9306      	str	r3, [sp, #24]
   1150e:	aa05      	add	r2, sp, #20
   11510:	2302      	movs	r3, #2
   11512:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11516:	9301      	str	r3, [sp, #4]
   11518:	9305      	str	r3, [sp, #20]
   1151a:	f018 fe7a 	bl	2a212 <z_log_msg2_static_create.constprop.0>
}
   1151e:	4620      	mov	r0, r4
   11520:	b008      	add	sp, #32
   11522:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   11524:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   11528:	e7f9      	b.n	1151e <smp_chan_get+0x2a>
   1152a:	bf00      	nop
   1152c:	20000a18 	.word	0x20000a18
   11530:	00031319 	.word	0x00031319

00011534 <smp_find>:
{
   11534:	4601      	mov	r1, r0
   11536:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   11538:	4803      	ldr	r0, [pc, #12]	; (11548 <smp_find+0x14>)
   1153a:	f018 fe7c 	bl	2a236 <atomic_test_bit>
	return NULL;
   1153e:	2800      	cmp	r0, #0
}
   11540:	4802      	ldr	r0, [pc, #8]	; (1154c <smp_find+0x18>)
   11542:	bf08      	it	eq
   11544:	2000      	moveq	r0, #0
   11546:	bd08      	pop	{r3, pc}
   11548:	20001b34 	.word	0x20001b34
   1154c:	20001b30 	.word	0x20001b30

00011550 <smp_dhkey_check>:
{
   11550:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   11552:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   11556:	78dd      	ldrb	r5, [r3, #3]
{
   11558:	b097      	sub	sp, #92	; 0x5c
   1155a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1155c:	2d00      	cmp	r5, #0
   1155e:	d17b      	bne.n	11658 <smp_dhkey_check+0x108>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   11560:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   11562:	2210      	movs	r2, #16
   11564:	4629      	mov	r1, r5
   11566:	a80c      	add	r0, sp, #48	; 0x30
   11568:	f017 f830 	bl	285cc <memset>
		switch (smp->method) {
   1156c:	7a23      	ldrb	r3, [r4, #8]
   1156e:	2b05      	cmp	r3, #5
   11570:	d857      	bhi.n	11622 <smp_dhkey_check+0xd2>
   11572:	e8df f003 	tbb	[pc, r3]
   11576:	0309      	.short	0x0309
   11578:	50560903 	.word	0x50560903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1157c:	2204      	movs	r2, #4
   1157e:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   11582:	a80c      	add	r0, sp, #48	; 0x30
   11584:	f017 f817 	bl	285b6 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   11588:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   1158c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   11590:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   11592:	ae08      	add	r6, sp, #32
   11594:	9301      	str	r3, [sp, #4]
   11596:	f104 0311 	add.w	r3, r4, #17
   1159a:	9202      	str	r2, [sp, #8]
   1159c:	9300      	str	r3, [sp, #0]
   1159e:	9603      	str	r6, [sp, #12]
   115a0:	ab0c      	add	r3, sp, #48	; 0x30
   115a2:	f104 0227 	add.w	r2, r4, #39	; 0x27
   115a6:	f104 0137 	add.w	r1, r4, #55	; 0x37
   115aa:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   115ae:	f018 fdb7 	bl	2a120 <smp_f6>
   115b2:	2800      	cmp	r0, #0
   115b4:	d139      	bne.n	1162a <smp_dhkey_check+0xda>
		if (memcmp(e, req->e, 16)) {
   115b6:	4630      	mov	r0, r6
   115b8:	2210      	movs	r2, #16
   115ba:	4639      	mov	r1, r7
   115bc:	f016 ffd2 	bl	28564 <memcmp>
   115c0:	4606      	mov	r6, r0
   115c2:	2800      	cmp	r0, #0
   115c4:	d146      	bne.n	11654 <smp_dhkey_check+0x104>
	return MIN(req->max_key_size, rsp->max_key_size);
   115c6:	7b63      	ldrb	r3, [r4, #13]
   115c8:	7d27      	ldrb	r7, [r4, #20]
		(void)memset(ediv, 0, sizeof(ediv));
   115ca:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   115cc:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   115ce:	f04f 0202 	mov.w	r2, #2
   115d2:	a804      	add	r0, sp, #16
	return MIN(req->max_key_size, rsp->max_key_size);
   115d4:	bf28      	it	cs
   115d6:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   115d8:	f016 fff8 	bl	285cc <memset>
		(void)memset(rand, 0, sizeof(rand));
   115dc:	2208      	movs	r2, #8
   115de:	4631      	mov	r1, r6
   115e0:	a806      	add	r0, sp, #24
   115e2:	f016 fff3 	bl	285cc <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   115e6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   115ea:	9700      	str	r7, [sp, #0]
   115ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
   115f0:	aa04      	add	r2, sp, #16
   115f2:	a906      	add	r1, sp, #24
   115f4:	f017 fb5a 	bl	28cac <bt_conn_le_start_encryption>
   115f8:	2800      	cmp	r0, #0
   115fa:	da26      	bge.n	1164a <smp_dhkey_check+0xfa>
			BT_ERR("Failed to start encryption");
   115fc:	4817      	ldr	r0, [pc, #92]	; (1165c <smp_dhkey_check+0x10c>)
   115fe:	6803      	ldr	r3, [r0, #0]
   11600:	075b      	lsls	r3, r3, #29
   11602:	d012      	beq.n	1162a <smp_dhkey_check+0xda>
   11604:	4b16      	ldr	r3, [pc, #88]	; (11660 <smp_dhkey_check+0x110>)
   11606:	9314      	str	r3, [sp, #80]	; 0x50
   11608:	2302      	movs	r3, #2
   1160a:	9305      	str	r3, [sp, #20]
   1160c:	9313      	str	r3, [sp, #76]	; 0x4c
   1160e:	aa13      	add	r2, sp, #76	; 0x4c
   11610:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11614:	e016      	b.n	11644 <smp_dhkey_check+0xf4>
			if (smp->oobd_local) {
   11616:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1161a:	2900      	cmp	r1, #0
   1161c:	d0b4      	beq.n	11588 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1161e:	2210      	movs	r2, #16
   11620:	e7af      	b.n	11582 <smp_dhkey_check+0x32>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   11622:	480e      	ldr	r0, [pc, #56]	; (1165c <smp_dhkey_check+0x10c>)
   11624:	6802      	ldr	r2, [r0, #0]
   11626:	0752      	lsls	r2, r2, #29
   11628:	d103      	bne.n	11632 <smp_dhkey_check+0xe2>
			return BT_SMP_ERR_UNSPECIFIED;
   1162a:	2508      	movs	r5, #8
}
   1162c:	4628      	mov	r0, r5
   1162e:	b017      	add	sp, #92	; 0x5c
   11630:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BT_ERR("Unknown pairing method (%u)", smp->method);
   11632:	4a0c      	ldr	r2, [pc, #48]	; (11664 <smp_dhkey_check+0x114>)
		switch (smp->method) {
   11634:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			BT_ERR("Unknown pairing method (%u)", smp->method);
   11638:	2303      	movs	r3, #3
   1163a:	9308      	str	r3, [sp, #32]
   1163c:	9313      	str	r3, [sp, #76]	; 0x4c
   1163e:	aa13      	add	r2, sp, #76	; 0x4c
   11640:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			BT_ERR("Failed to start encryption");
   11644:	f018 fde5 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   11648:	e7ef      	b.n	1162a <smp_dhkey_check+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1164a:	2101      	movs	r1, #1
   1164c:	1d20      	adds	r0, r4, #4
   1164e:	f018 fe34 	bl	2a2ba <atomic_set_bit>
		return 0;
   11652:	e7eb      	b.n	1162c <smp_dhkey_check+0xdc>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   11654:	250b      	movs	r5, #11
   11656:	e7e9      	b.n	1162c <smp_dhkey_check+0xdc>
	return 0;
   11658:	2500      	movs	r5, #0
   1165a:	e7e7      	b.n	1162c <smp_dhkey_check+0xdc>
   1165c:	20000a18 	.word	0x20000a18
   11660:	00031350 	.word	0x00031350
   11664:	00031334 	.word	0x00031334

00011668 <smp_dhkey_generate>:
{
   11668:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1166a:	1d05      	adds	r5, r0, #4
{
   1166c:	b089      	sub	sp, #36	; 0x24
   1166e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   11670:	2108      	movs	r1, #8
   11672:	4628      	mov	r0, r5
   11674:	f018 fe21 	bl	2a2ba <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   11678:	490d      	ldr	r1, [pc, #52]	; (116b0 <smp_dhkey_generate+0x48>)
   1167a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1167e:	f7fc fce5 	bl	e04c <bt_dh_key_gen>
	if (err) {
   11682:	b190      	cbz	r0, 116aa <smp_dhkey_generate+0x42>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   11684:	4628      	mov	r0, r5
   11686:	2108      	movs	r1, #8
   11688:	f018 fd97 	bl	2a1ba <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1168c:	4809      	ldr	r0, [pc, #36]	; (116b4 <smp_dhkey_generate+0x4c>)
   1168e:	6803      	ldr	r3, [r0, #0]
   11690:	075b      	lsls	r3, r3, #29
   11692:	d009      	beq.n	116a8 <smp_dhkey_generate+0x40>
   11694:	4b08      	ldr	r3, [pc, #32]	; (116b8 <smp_dhkey_generate+0x50>)
   11696:	9306      	str	r3, [sp, #24]
   11698:	aa05      	add	r2, sp, #20
   1169a:	2302      	movs	r3, #2
   1169c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   116a0:	9301      	str	r3, [sp, #4]
   116a2:	9305      	str	r3, [sp, #20]
   116a4:	f018 fdb5 	bl	2a212 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   116a8:	2008      	movs	r0, #8
}
   116aa:	b009      	add	sp, #36	; 0x24
   116ac:	bd30      	pop	{r4, r5, pc}
   116ae:	bf00      	nop
   116b0:	0002a7a5 	.word	0x0002a7a5
   116b4:	20000a18 	.word	0x20000a18
   116b8:	0003136b 	.word	0x0003136b

000116bc <smp_ident_info>:
{
   116bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   116be:	460b      	mov	r3, r1
   116c0:	b085      	sub	sp, #20
   116c2:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   116c4:	210d      	movs	r1, #13
   116c6:	3004      	adds	r0, #4
   116c8:	f018 fdb5 	bl	2a236 <atomic_test_bit>
   116cc:	b318      	cbz	r0, 11716 <smp_ident_info+0x5a>
		struct bt_smp_ident_info *req = (void *)buf->data;
   116ce:	689f      	ldr	r7, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   116d0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   116d4:	f103 0688 	add.w	r6, r3, #136	; 0x88
   116d8:	7a19      	ldrb	r1, [r3, #8]
   116da:	4632      	mov	r2, r6
   116dc:	2002      	movs	r0, #2
   116de:	f019 f8f9 	bl	2a8d4 <bt_keys_get_type>
		if (!keys) {
   116e2:	4604      	mov	r4, r0
   116e4:	b990      	cbnz	r0, 1170c <smp_ident_info+0x50>
			BT_ERR("Unable to get keys for %s",
   116e6:	4d0f      	ldr	r5, [pc, #60]	; (11724 <smp_ident_info+0x68>)
   116e8:	682b      	ldr	r3, [r5, #0]
   116ea:	075b      	lsls	r3, r3, #29
   116ec:	d00c      	beq.n	11708 <smp_ident_info+0x4c>
   116ee:	4630      	mov	r0, r6
   116f0:	f7f9 fd78 	bl	b1e4 <bt_addr_le_str_real>
   116f4:	4b0c      	ldr	r3, [pc, #48]	; (11728 <smp_ident_info+0x6c>)
   116f6:	9002      	str	r0, [sp, #8]
   116f8:	e9cd 4300 	strd	r4, r3, [sp]
   116fc:	2201      	movs	r2, #1
   116fe:	4623      	mov	r3, r4
   11700:	4629      	mov	r1, r5
   11702:	4620      	mov	r0, r4
   11704:	f018 fd88 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   11708:	2008      	movs	r0, #8
   1170a:	e009      	b.n	11720 <smp_ident_info+0x64>
		memcpy(keys->irk.val, req->irk, 16);
   1170c:	2210      	movs	r2, #16
   1170e:	4639      	mov	r1, r7
   11710:	302a      	adds	r0, #42	; 0x2a
   11712:	f016 ff50 	bl	285b6 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   11716:	4628      	mov	r0, r5
   11718:	2109      	movs	r1, #9
   1171a:	f018 fdce 	bl	2a2ba <atomic_set_bit>
	return 0;
   1171e:	2000      	movs	r0, #0
}
   11720:	b005      	add	sp, #20
   11722:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11724:	20000a18 	.word	0x20000a18
   11728:	00031384 	.word	0x00031384

0001172c <smp_encrypt_info>:
{
   1172c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1172e:	460b      	mov	r3, r1
   11730:	b085      	sub	sp, #20
   11732:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   11734:	210d      	movs	r1, #13
   11736:	3004      	adds	r0, #4
   11738:	f018 fd7d 	bl	2a236 <atomic_test_bit>
   1173c:	b318      	cbz	r0, 11786 <smp_encrypt_info+0x5a>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1173e:	689f      	ldr	r7, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   11740:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   11744:	f103 0688 	add.w	r6, r3, #136	; 0x88
   11748:	7a19      	ldrb	r1, [r3, #8]
   1174a:	4632      	mov	r2, r6
   1174c:	2004      	movs	r0, #4
   1174e:	f019 f8c1 	bl	2a8d4 <bt_keys_get_type>
		if (!keys) {
   11752:	4604      	mov	r4, r0
   11754:	b990      	cbnz	r0, 1177c <smp_encrypt_info+0x50>
			BT_ERR("Unable to get keys for %s",
   11756:	4d0f      	ldr	r5, [pc, #60]	; (11794 <smp_encrypt_info+0x68>)
   11758:	682b      	ldr	r3, [r5, #0]
   1175a:	075b      	lsls	r3, r3, #29
   1175c:	d00c      	beq.n	11778 <smp_encrypt_info+0x4c>
   1175e:	4630      	mov	r0, r6
   11760:	f7f9 fd40 	bl	b1e4 <bt_addr_le_str_real>
   11764:	4b0c      	ldr	r3, [pc, #48]	; (11798 <smp_encrypt_info+0x6c>)
   11766:	9002      	str	r0, [sp, #8]
   11768:	e9cd 4300 	strd	r4, r3, [sp]
   1176c:	2201      	movs	r2, #1
   1176e:	4623      	mov	r3, r4
   11770:	4629      	mov	r1, r5
   11772:	4620      	mov	r0, r4
   11774:	f018 fd50 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   11778:	2008      	movs	r0, #8
   1177a:	e009      	b.n	11790 <smp_encrypt_info+0x64>
		memcpy(keys->ltk.val, req->ltk, 16);
   1177c:	2210      	movs	r2, #16
   1177e:	4639      	mov	r1, r7
   11780:	301a      	adds	r0, #26
   11782:	f016 ff18 	bl	285b6 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   11786:	4628      	mov	r0, r5
   11788:	2107      	movs	r1, #7
   1178a:	f018 fd96 	bl	2a2ba <atomic_set_bit>
	return 0;
   1178e:	2000      	movs	r0, #0
}
   11790:	b005      	add	sp, #20
   11792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11794:	20000a18 	.word	0x20000a18
   11798:	00031384 	.word	0x00031384

0001179c <bt_smp_distribute_keys>:
{
   1179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   117a0:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   117a4:	f8d8 50b4 	ldr.w	r5, [r8, #180]	; 0xb4
{
   117a8:	b095      	sub	sp, #84	; 0x54
   117aa:	4604      	mov	r4, r0
	if (!keys) {
   117ac:	b9b5      	cbnz	r5, 117dc <bt_smp_distribute_keys+0x40>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   117ae:	4c8f      	ldr	r4, [pc, #572]	; (119ec <bt_smp_distribute_keys+0x250>)
   117b0:	6823      	ldr	r3, [r4, #0]
   117b2:	0758      	lsls	r0, r3, #29
   117b4:	d103      	bne.n	117be <bt_smp_distribute_keys+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   117b6:	2008      	movs	r0, #8
}
   117b8:	b015      	add	sp, #84	; 0x54
   117ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   117be:	f108 0088 	add.w	r0, r8, #136	; 0x88
   117c2:	f7f9 fd0f 	bl	b1e4 <bt_addr_le_str_real>
   117c6:	4b8a      	ldr	r3, [pc, #552]	; (119f0 <bt_smp_distribute_keys+0x254>)
   117c8:	9002      	str	r0, [sp, #8]
   117ca:	e9cd 5300 	strd	r5, r3, [sp]
   117ce:	2201      	movs	r2, #1
   117d0:	462b      	mov	r3, r5
   117d2:	4621      	mov	r1, r4
   117d4:	4628      	mov	r0, r5
   117d6:	f018 fd1f 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
   117da:	e7ec      	b.n	117b6 <bt_smp_distribute_keys+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   117dc:	1d07      	adds	r7, r0, #4
   117de:	2105      	movs	r1, #5
   117e0:	4638      	mov	r0, r7
   117e2:	f018 fd28 	bl	2a236 <atomic_test_bit>
   117e6:	b9d8      	cbnz	r0, 11820 <bt_smp_distribute_keys+0x84>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   117e8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   117ec:	07d9      	lsls	r1, r3, #31
   117ee:	d517      	bpl.n	11820 <bt_smp_distribute_keys+0x84>
	struct bt_keys *keys = conn->le.keys;
   117f0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   117f4:	211a      	movs	r1, #26
   117f6:	a80c      	add	r0, sp, #48	; 0x30
	struct bt_keys *keys = conn->le.keys;
   117f8:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   117fc:	f004 fffa 	bl	167f4 <bt_rand>
   11800:	4682      	mov	sl, r0
   11802:	b340      	cbz	r0, 11856 <bt_smp_distribute_keys+0xba>
			BT_ERR("Unable to get random bytes");
   11804:	4879      	ldr	r0, [pc, #484]	; (119ec <bt_smp_distribute_keys+0x250>)
   11806:	6803      	ldr	r3, [r0, #0]
   11808:	075a      	lsls	r2, r3, #29
   1180a:	d009      	beq.n	11820 <bt_smp_distribute_keys+0x84>
   1180c:	4b79      	ldr	r3, [pc, #484]	; (119f4 <bt_smp_distribute_keys+0x258>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1180e:	930a      	str	r3, [sp, #40]	; 0x28
   11810:	aa09      	add	r2, sp, #36	; 0x24
   11812:	2302      	movs	r3, #2
   11814:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11818:	9305      	str	r3, [sp, #20]
   1181a:	9309      	str	r3, [sp, #36]	; 0x24
   1181c:	f018 fcf9 	bl	2a212 <z_log_msg2_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   11820:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   11824:	0798      	lsls	r0, r3, #30
   11826:	f140 80a9 	bpl.w	1197c <bt_smp_distribute_keys+0x1e0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1182a:	2108      	movs	r1, #8
   1182c:	4620      	mov	r0, r4
   1182e:	f018 fd58 	bl	2a2e2 <smp_create_pdu.constprop.0>
		if (!buf) {
   11832:	4606      	mov	r6, r0
   11834:	2800      	cmp	r0, #0
   11836:	d16e      	bne.n	11916 <bt_smp_distribute_keys+0x17a>
			BT_ERR("Unable to allocate Ident Info buffer");
   11838:	486c      	ldr	r0, [pc, #432]	; (119ec <bt_smp_distribute_keys+0x250>)
   1183a:	6803      	ldr	r3, [r0, #0]
   1183c:	0759      	lsls	r1, r3, #29
   1183e:	d0ba      	beq.n	117b6 <bt_smp_distribute_keys+0x1a>
   11840:	4b6d      	ldr	r3, [pc, #436]	; (119f8 <bt_smp_distribute_keys+0x25c>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   11842:	9310      	str	r3, [sp, #64]	; 0x40
   11844:	aa0f      	add	r2, sp, #60	; 0x3c
   11846:	2302      	movs	r3, #2
   11848:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1184c:	9306      	str	r3, [sp, #24]
   1184e:	930f      	str	r3, [sp, #60]	; 0x3c
   11850:	f018 fcdf 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   11854:	e7af      	b.n	117b6 <bt_smp_distribute_keys+0x1a>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   11856:	2106      	movs	r1, #6
   11858:	4620      	mov	r0, r4
   1185a:	f018 fd42 	bl	2a2e2 <smp_create_pdu.constprop.0>
		if (!buf) {
   1185e:	4681      	mov	r9, r0
   11860:	b928      	cbnz	r0, 1186e <bt_smp_distribute_keys+0xd2>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   11862:	4862      	ldr	r0, [pc, #392]	; (119ec <bt_smp_distribute_keys+0x250>)
   11864:	6803      	ldr	r3, [r0, #0]
   11866:	075b      	lsls	r3, r3, #29
   11868:	d0da      	beq.n	11820 <bt_smp_distribute_keys+0x84>
   1186a:	4b64      	ldr	r3, [pc, #400]	; (119fc <bt_smp_distribute_keys+0x260>)
   1186c:	e7cf      	b.n	1180e <bt_smp_distribute_keys+0x72>
   1186e:	2110      	movs	r1, #16
   11870:	3008      	adds	r0, #8
   11872:	f019 f8ba 	bl	2a9ea <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   11876:	7b32      	ldrb	r2, [r6, #12]
   11878:	a90c      	add	r1, sp, #48	; 0x30
   1187a:	4683      	mov	fp, r0
   1187c:	f016 fe9b 	bl	285b6 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   11880:	7b30      	ldrb	r0, [r6, #12]
   11882:	280f      	cmp	r0, #15
   11884:	d805      	bhi.n	11892 <bt_smp_distribute_keys+0xf6>
			(void)memset(info->ltk + keys->enc_size, 0,
   11886:	f1c0 0210 	rsb	r2, r0, #16
   1188a:	4651      	mov	r1, sl
   1188c:	4458      	add	r0, fp
   1188e:	f016 fe9d 	bl	285cc <memset>
		smp_send(smp, buf, NULL, NULL);
   11892:	4649      	mov	r1, r9
   11894:	2200      	movs	r2, #0
   11896:	4620      	mov	r0, r4
   11898:	f018 fc9e 	bl	2a1d8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1189c:	2107      	movs	r1, #7
   1189e:	4620      	mov	r0, r4
   118a0:	f018 fd1f 	bl	2a2e2 <smp_create_pdu.constprop.0>
		if (!buf) {
   118a4:	4681      	mov	r9, r0
   118a6:	b928      	cbnz	r0, 118b4 <bt_smp_distribute_keys+0x118>
			BT_ERR("Unable to allocate Central Ident buffer");
   118a8:	4850      	ldr	r0, [pc, #320]	; (119ec <bt_smp_distribute_keys+0x250>)
   118aa:	6803      	ldr	r3, [r0, #0]
   118ac:	075e      	lsls	r6, r3, #29
   118ae:	d0b7      	beq.n	11820 <bt_smp_distribute_keys+0x84>
   118b0:	4b53      	ldr	r3, [pc, #332]	; (11a00 <bt_smp_distribute_keys+0x264>)
   118b2:	e7ac      	b.n	1180e <bt_smp_distribute_keys+0x72>
   118b4:	210a      	movs	r1, #10
   118b6:	3008      	adds	r0, #8
   118b8:	f019 f897 	bl	2a9ea <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   118bc:	2208      	movs	r2, #8
   118be:	4682      	mov	sl, r0
   118c0:	a910      	add	r1, sp, #64	; 0x40
   118c2:	3002      	adds	r0, #2
   118c4:	f016 fe77 	bl	285b6 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   118c8:	2202      	movs	r2, #2
   118ca:	a912      	add	r1, sp, #72	; 0x48
   118cc:	4650      	mov	r0, sl
   118ce:	f016 fe72 	bl	285b6 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   118d2:	4649      	mov	r1, r9
   118d4:	4620      	mov	r0, r4
   118d6:	4a4b      	ldr	r2, [pc, #300]	; (11a04 <bt_smp_distribute_keys+0x268>)
   118d8:	f018 fc7e 	bl	2a1d8 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   118dc:	210d      	movs	r1, #13
   118de:	4638      	mov	r0, r7
   118e0:	f018 fca9 	bl	2a236 <atomic_test_bit>
   118e4:	2800      	cmp	r0, #0
   118e6:	d09b      	beq.n	11820 <bt_smp_distribute_keys+0x84>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   118e8:	4630      	mov	r0, r6
   118ea:	2101      	movs	r1, #1
   118ec:	f019 f802 	bl	2a8f4 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   118f0:	a90c      	add	r1, sp, #48	; 0x30
   118f2:	2210      	movs	r2, #16
   118f4:	f106 0072 	add.w	r0, r6, #114	; 0x72
   118f8:	f016 fe5d 	bl	285b6 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   118fc:	a910      	add	r1, sp, #64	; 0x40
   118fe:	2208      	movs	r2, #8
   11900:	f106 0068 	add.w	r0, r6, #104	; 0x68
   11904:	f016 fe57 	bl	285b6 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   11908:	2202      	movs	r2, #2
   1190a:	a912      	add	r1, sp, #72	; 0x48
   1190c:	f106 0070 	add.w	r0, r6, #112	; 0x70
   11910:	f016 fe51 	bl	285b6 <memcpy>
   11914:	e784      	b.n	11820 <bt_smp_distribute_keys+0x84>
   11916:	2110      	movs	r1, #16
   11918:	3008      	adds	r0, #8
   1191a:	f019 f866 	bl	2a9ea <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1191e:	f898 1008 	ldrb.w	r1, [r8, #8]
   11922:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 11a08 <bt_smp_distribute_keys+0x26c>
   11926:	f44f 73ac 	mov.w	r3, #344	; 0x158
   1192a:	2210      	movs	r2, #16
   1192c:	fb12 3101 	smlabb	r1, r2, r1, r3
   11930:	4449      	add	r1, r9
   11932:	f016 fe40 	bl	285b6 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   11936:	4631      	mov	r1, r6
   11938:	2200      	movs	r2, #0
   1193a:	4620      	mov	r0, r4
   1193c:	f018 fc4c 	bl	2a1d8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   11940:	2109      	movs	r1, #9
   11942:	4620      	mov	r0, r4
   11944:	f018 fccd 	bl	2a2e2 <smp_create_pdu.constprop.0>
		if (!buf) {
   11948:	4606      	mov	r6, r0
   1194a:	b930      	cbnz	r0, 1195a <bt_smp_distribute_keys+0x1be>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1194c:	4827      	ldr	r0, [pc, #156]	; (119ec <bt_smp_distribute_keys+0x250>)
   1194e:	6803      	ldr	r3, [r0, #0]
   11950:	075a      	lsls	r2, r3, #29
   11952:	f43f af30 	beq.w	117b6 <bt_smp_distribute_keys+0x1a>
   11956:	4b2d      	ldr	r3, [pc, #180]	; (11a0c <bt_smp_distribute_keys+0x270>)
   11958:	e773      	b.n	11842 <bt_smp_distribute_keys+0xa6>
   1195a:	2107      	movs	r1, #7
   1195c:	3008      	adds	r0, #8
   1195e:	f019 f844 	bl	2a9ea <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   11962:	f898 1008 	ldrb.w	r1, [r8, #8]
   11966:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1196a:	2207      	movs	r2, #7
   1196c:	4449      	add	r1, r9
   1196e:	f016 fe22 	bl	285b6 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   11972:	4a27      	ldr	r2, [pc, #156]	; (11a10 <bt_smp_distribute_keys+0x274>)
   11974:	4631      	mov	r1, r6
   11976:	4620      	mov	r0, r4
   11978:	f018 fc2e 	bl	2a1d8 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1197c:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
   11980:	f010 0004 	ands.w	r0, r0, #4
   11984:	f43f af18 	beq.w	117b8 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   11988:	210a      	movs	r1, #10
   1198a:	4620      	mov	r0, r4
   1198c:	f018 fca9 	bl	2a2e2 <smp_create_pdu.constprop.0>
		if (!buf) {
   11990:	4606      	mov	r6, r0
   11992:	b930      	cbnz	r0, 119a2 <bt_smp_distribute_keys+0x206>
			BT_ERR("Unable to allocate Signing Info buffer");
   11994:	4815      	ldr	r0, [pc, #84]	; (119ec <bt_smp_distribute_keys+0x250>)
   11996:	6803      	ldr	r3, [r0, #0]
   11998:	075b      	lsls	r3, r3, #29
   1199a:	f43f af0c 	beq.w	117b6 <bt_smp_distribute_keys+0x1a>
   1199e:	4b1d      	ldr	r3, [pc, #116]	; (11a14 <bt_smp_distribute_keys+0x278>)
   119a0:	e74f      	b.n	11842 <bt_smp_distribute_keys+0xa6>
   119a2:	2110      	movs	r1, #16
   119a4:	3008      	adds	r0, #8
   119a6:	f019 f820 	bl	2a9ea <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   119aa:	2110      	movs	r1, #16
   119ac:	4681      	mov	r9, r0
   119ae:	f004 ff21 	bl	167f4 <bt_rand>
   119b2:	4680      	mov	r8, r0
   119b4:	2800      	cmp	r0, #0
   119b6:	f47f aefe 	bne.w	117b6 <bt_smp_distribute_keys+0x1a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   119ba:	210d      	movs	r1, #13
   119bc:	4638      	mov	r0, r7
   119be:	f018 fc3a 	bl	2a236 <atomic_test_bit>
   119c2:	b158      	cbz	r0, 119dc <bt_smp_distribute_keys+0x240>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   119c4:	2108      	movs	r1, #8
   119c6:	4628      	mov	r0, r5
   119c8:	f018 ff94 	bl	2a8f4 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   119cc:	2210      	movs	r2, #16
   119ce:	4649      	mov	r1, r9
   119d0:	f105 0040 	add.w	r0, r5, #64	; 0x40
   119d4:	f016 fdef 	bl	285b6 <memcpy>
			keys->local_csrk.cnt = 0U;
   119d8:	f8c5 8050 	str.w	r8, [r5, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   119dc:	4620      	mov	r0, r4
   119de:	4a0e      	ldr	r2, [pc, #56]	; (11a18 <bt_smp_distribute_keys+0x27c>)
   119e0:	4631      	mov	r1, r6
   119e2:	f018 fbf9 	bl	2a1d8 <smp_send.constprop.0>
	return 0;
   119e6:	2000      	movs	r0, #0
   119e8:	e6e6      	b.n	117b8 <bt_smp_distribute_keys+0x1c>
   119ea:	bf00      	nop
   119ec:	20000a18 	.word	0x20000a18
   119f0:	0003139e 	.word	0x0003139e
   119f4:	000313b3 	.word	0x000313b3
   119f8:	0003141d 	.word	0x0003141d
   119fc:	000313ce 	.word	0x000313ce
   11a00:	000313f5 	.word	0x000313f5
   11a04:	0002a86b 	.word	0x0002a86b
   11a08:	20000000 	.word	0x20000000
   11a0c:	00031442 	.word	0x00031442
   11a10:	0002a865 	.word	0x0002a865
   11a14:	0003146c 	.word	0x0003146c
   11a18:	0002a85f 	.word	0x0002a85f

00011a1c <smp_send_pairing_req>:
{
   11a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11a20:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   11a22:	f7ff fd67 	bl	114f4 <smp_chan_get>
	if (!smp) {
   11a26:	4604      	mov	r4, r0
   11a28:	2800      	cmp	r0, #0
   11a2a:	f000 80bd 	beq.w	11ba8 <smp_send_pairing_req+0x18c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   11a2e:	1d06      	adds	r6, r0, #4
   11a30:	2104      	movs	r1, #4
   11a32:	4630      	mov	r0, r6
   11a34:	f018 fbff 	bl	2a236 <atomic_test_bit>
   11a38:	4603      	mov	r3, r0
   11a3a:	2800      	cmp	r0, #0
   11a3c:	f040 80b7 	bne.w	11bae <smp_send_pairing_req+0x192>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   11a40:	2102      	movs	r1, #2
   11a42:	4630      	mov	r0, r6
   11a44:	f018 fbf7 	bl	2a236 <atomic_test_bit>
   11a48:	2800      	cmp	r0, #0
   11a4a:	f040 80b3 	bne.w	11bb4 <smp_send_pairing_req+0x198>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   11a4e:	2103      	movs	r1, #3
   11a50:	4630      	mov	r0, r6
   11a52:	f018 fbf0 	bl	2a236 <atomic_test_bit>
   11a56:	b120      	cbz	r0, 11a62 <smp_send_pairing_req+0x46>
		return -EBUSY;
   11a58:	f06f 050f 	mvn.w	r5, #15
}
   11a5c:	4628      	mov	r0, r5
   11a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   11a62:	2101      	movs	r1, #1
   11a64:	4630      	mov	r0, r6
   11a66:	f018 fbe6 	bl	2a236 <atomic_test_bit>
   11a6a:	2800      	cmp	r0, #0
   11a6c:	d1f4      	bne.n	11a58 <smp_send_pairing_req+0x3c>
	if (!sec_level_reachable(conn)) {
   11a6e:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   11a70:	2b03      	cmp	r3, #3
   11a72:	d016      	beq.n	11aa2 <smp_send_pairing_req+0x86>
   11a74:	d805      	bhi.n	11a82 <smp_send_pairing_req+0x66>
   11a76:	3b01      	subs	r3, #1
   11a78:	428b      	cmp	r3, r1
   11a7a:	d91f      	bls.n	11abc <smp_send_pairing_req+0xa0>
		return -EINVAL;
   11a7c:	f06f 0515 	mvn.w	r5, #21
   11a80:	e7ec      	b.n	11a5c <smp_send_pairing_req+0x40>
	switch (conn->required_sec_level) {
   11a82:	2b04      	cmp	r3, #4
   11a84:	d1fa      	bne.n	11a7c <smp_send_pairing_req+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   11a86:	f7ff fca3 	bl	113d0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   11a8a:	2803      	cmp	r0, #3
   11a8c:	d104      	bne.n	11a98 <smp_send_pairing_req+0x7c>
   11a8e:	4b4a      	ldr	r3, [pc, #296]	; (11bb8 <smp_send_pairing_req+0x19c>)
   11a90:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   11a92:	b33b      	cbz	r3, 11ae4 <smp_send_pairing_req+0xc8>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   11a94:	68db      	ldr	r3, [r3, #12]
   11a96:	b10b      	cbz	r3, 11a9c <smp_send_pairing_req+0x80>
   11a98:	4b48      	ldr	r3, [pc, #288]	; (11bbc <smp_send_pairing_req+0x1a0>)
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	f003 0301 	and.w	r3, r3, #1
   11aa0:	e00a      	b.n	11ab8 <smp_send_pairing_req+0x9c>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   11aa2:	f7ff fc95 	bl	113d0 <get_io_capa>
   11aa6:	2803      	cmp	r0, #3
   11aa8:	d11a      	bne.n	11ae0 <smp_send_pairing_req+0xc4>
		       (bt_auth && bt_auth->oob_data_request);
   11aaa:	4b43      	ldr	r3, [pc, #268]	; (11bb8 <smp_send_pairing_req+0x19c>)
   11aac:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   11aae:	b11b      	cbz	r3, 11ab8 <smp_send_pairing_req+0x9c>
		       (bt_auth && bt_auth->oob_data_request);
   11ab0:	68db      	ldr	r3, [r3, #12]
   11ab2:	3b00      	subs	r3, #0
   11ab4:	bf18      	it	ne
   11ab6:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
   11ab8:	2b00      	cmp	r3, #0
   11aba:	d0df      	beq.n	11a7c <smp_send_pairing_req+0x60>
	if (!conn->le.keys) {
   11abc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   11ac0:	b193      	cbz	r3, 11ae8 <smp_send_pairing_req+0xcc>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   11ac2:	22f0      	movs	r2, #240	; 0xf0
   11ac4:	2100      	movs	r1, #0
   11ac6:	4620      	mov	r0, r4
   11ac8:	f016 fd80 	bl	285cc <memset>
	if (bt_rand(smp->prnd, 16)) {
   11acc:	2110      	movs	r1, #16
   11ace:	f104 0027 	add.w	r0, r4, #39	; 0x27
   11ad2:	f004 fe8f 	bl	167f4 <bt_rand>
   11ad6:	4605      	mov	r5, r0
   11ad8:	b190      	cbz	r0, 11b00 <smp_send_pairing_req+0xe4>
		return -ENOBUFS;
   11ada:	f06f 0568 	mvn.w	r5, #104	; 0x68
   11ade:	e7bd      	b.n	11a5c <smp_send_pairing_req+0x40>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   11ae0:	2301      	movs	r3, #1
   11ae2:	e7e9      	b.n	11ab8 <smp_send_pairing_req+0x9c>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   11ae4:	2300      	movs	r3, #0
   11ae6:	e7d9      	b.n	11a9c <smp_send_pairing_req+0x80>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   11ae8:	7a28      	ldrb	r0, [r5, #8]
   11aea:	f105 0188 	add.w	r1, r5, #136	; 0x88
   11aee:	f001 fba5 	bl	1323c <bt_keys_get_addr>
   11af2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   11af6:	2800      	cmp	r0, #0
   11af8:	d1e3      	bne.n	11ac2 <smp_send_pairing_req+0xa6>
			return -ENOMEM;
   11afa:	f06f 050b 	mvn.w	r5, #11
   11afe:	e7ad      	b.n	11a5c <smp_send_pairing_req+0x40>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   11b00:	2105      	movs	r1, #5
   11b02:	4620      	mov	r0, r4
   11b04:	f018 fbd9 	bl	2a2ba <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   11b08:	f7fc fa90 	bl	e02c <bt_pub_key_get>
   11b0c:	4b2c      	ldr	r3, [pc, #176]	; (11bc0 <smp_send_pairing_req+0x1a4>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   11b0e:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   11b10:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   11b12:	4620      	mov	r0, r4
   11b14:	f018 fbe5 	bl	2a2e2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   11b18:	4681      	mov	r9, r0
   11b1a:	2800      	cmp	r0, #0
   11b1c:	d0dd      	beq.n	11ada <smp_send_pairing_req+0xbe>
   11b1e:	2106      	movs	r1, #6
   11b20:	3008      	adds	r0, #8
   11b22:	f018 ff62 	bl	2a9ea <net_buf_simple_add>
	if (sc_supported) {
   11b26:	4b25      	ldr	r3, [pc, #148]	; (11bbc <smp_send_pairing_req+0x1a0>)
   11b28:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	bf14      	ite	ne
   11b2e:	f04f 0809 	movne.w	r8, #9
   11b32:	f04f 0801 	moveq.w	r8, #1
   11b36:	4607      	mov	r7, r0
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   11b38:	f7ff fc4a 	bl	113d0 <get_io_capa>
	if (bondable) {
   11b3c:	4b21      	ldr	r3, [pc, #132]	; (11bc4 <smp_send_pairing_req+0x1a8>)
   11b3e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   11b40:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   11b42:	bf18      	it	ne
   11b44:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
   11b48:	b35b      	cbz	r3, 11ba2 <smp_send_pairing_req+0x186>
		auth |= BT_SMP_AUTH_BONDING;
   11b4a:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   11b4e:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
   11b52:	f7ff fc3d 	bl	113d0 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   11b56:	4b1c      	ldr	r3, [pc, #112]	; (11bc8 <smp_send_pairing_req+0x1ac>)
	req->io_capability = get_io_capa();
   11b58:	7038      	strb	r0, [r7, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   11b5a:	781b      	ldrb	r3, [r3, #0]
   11b5c:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   11b5e:	2310      	movs	r3, #16
   11b60:	70fb      	strb	r3, [r7, #3]
	req->init_key_dist = SEND_KEYS;
   11b62:	2307      	movs	r3, #7
   11b64:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
   11b66:	717b      	strb	r3, [r7, #5]
	smp->local_dist = SEND_KEYS;
   11b68:	f240 7307 	movw	r3, #1799	; 0x707
   11b6c:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   11b70:	2301      	movs	r3, #1
   11b72:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   11b74:	4639      	mov	r1, r7
   11b76:	2206      	movs	r2, #6
   11b78:	f104 000a 	add.w	r0, r4, #10
   11b7c:	f016 fd1b 	bl	285b6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   11b80:	2200      	movs	r2, #0
   11b82:	4649      	mov	r1, r9
   11b84:	4620      	mov	r0, r4
   11b86:	f018 fb27 	bl	2a1d8 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   11b8a:	4620      	mov	r0, r4
   11b8c:	2102      	movs	r1, #2
   11b8e:	f018 fb94 	bl	2a2ba <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   11b92:	210b      	movs	r1, #11
   11b94:	f018 fb91 	bl	2a2ba <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   11b98:	2103      	movs	r1, #3
   11b9a:	4630      	mov	r0, r6
   11b9c:	f018 fb8d 	bl	2a2ba <atomic_set_bit>
	return 0;
   11ba0:	e75c      	b.n	11a5c <smp_send_pairing_req+0x40>
		auth &= ~BT_SMP_AUTH_BONDING;
   11ba2:	f008 080c 	and.w	r8, r8, #12
   11ba6:	e7d2      	b.n	11b4e <smp_send_pairing_req+0x132>
		return -ENOTCONN;
   11ba8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   11bac:	e756      	b.n	11a5c <smp_send_pairing_req+0x40>
		return -EIO;
   11bae:	f06f 0504 	mvn.w	r5, #4
   11bb2:	e753      	b.n	11a5c <smp_send_pairing_req+0x40>
		return 0;
   11bb4:	461d      	mov	r5, r3
   11bb6:	e751      	b.n	11a5c <smp_send_pairing_req+0x40>
   11bb8:	20002a68 	.word	0x20002a68
   11bbc:	20004997 	.word	0x20004997
   11bc0:	20002bf4 	.word	0x20002bf4
   11bc4:	20000961 	.word	0x20000961
   11bc8:	20004996 	.word	0x20004996

00011bcc <smp_security_request>:
{
   11bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   11bce:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   11bd0:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   11bd4:	688b      	ldr	r3, [r1, #8]
{
   11bd6:	b08b      	sub	sp, #44	; 0x2c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   11bd8:	2102      	movs	r1, #2
   11bda:	4620      	mov	r0, r4
   11bdc:	f018 fb2b 	bl	2a236 <atomic_test_bit>
   11be0:	b108      	cbz	r0, 11be6 <smp_security_request+0x1a>
	return 0;
   11be2:	2000      	movs	r0, #0
   11be4:	e07b      	b.n	11cde <smp_security_request+0x112>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   11be6:	2103      	movs	r1, #3
   11be8:	4620      	mov	r0, r4
   11bea:	f018 fb24 	bl	2a236 <atomic_test_bit>
   11bee:	2800      	cmp	r0, #0
   11bf0:	d1f7      	bne.n	11be2 <smp_security_request+0x16>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   11bf2:	2101      	movs	r1, #1
   11bf4:	4620      	mov	r0, r4
   11bf6:	f018 fb1e 	bl	2a236 <atomic_test_bit>
   11bfa:	2800      	cmp	r0, #0
   11bfc:	d1f1      	bne.n	11be2 <smp_security_request+0x16>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   11bfe:	781e      	ldrb	r6, [r3, #0]
	if (sc_supported) {
   11c00:	4b40      	ldr	r3, [pc, #256]	; (11d04 <smp_security_request+0x138>)
   11c02:	781b      	ldrb	r3, [r3, #0]
   11c04:	b17b      	cbz	r3, 11c26 <smp_security_request+0x5a>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   11c06:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
   11c0a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   11c0e:	b16b      	cbz	r3, 11c2c <smp_security_request+0x60>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   11c10:	89db      	ldrh	r3, [r3, #14]
   11c12:	f003 0324 	and.w	r3, r3, #36	; 0x24
   11c16:	b9d3      	cbnz	r3, 11c4e <smp_security_request+0x82>
	if (smp_send_pairing_req(conn) < 0) {
   11c18:	4628      	mov	r0, r5
   11c1a:	f7ff feff 	bl	11a1c <smp_send_pairing_req>
   11c1e:	2800      	cmp	r0, #0
   11c20:	db5c      	blt.n	11cdc <smp_security_request+0x110>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   11c22:	210f      	movs	r1, #15
   11c24:	e069      	b.n	11cfa <smp_security_request+0x12e>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   11c26:	f006 0607 	and.w	r6, r6, #7
   11c2a:	e7ee      	b.n	11c0a <smp_security_request+0x3e>
					     &conn->le.dst);
   11c2c:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   11c30:	7a29      	ldrb	r1, [r5, #8]
   11c32:	463a      	mov	r2, r7
   11c34:	2020      	movs	r0, #32
   11c36:	f001 fb37 	bl	132a8 <bt_keys_find>
   11c3a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   11c3e:	b930      	cbnz	r0, 11c4e <smp_security_request+0x82>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   11c40:	7a29      	ldrb	r1, [r5, #8]
   11c42:	463a      	mov	r2, r7
   11c44:	2004      	movs	r0, #4
   11c46:	f001 fb2f 	bl	132a8 <bt_keys_find>
   11c4a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
   11c4e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   11c52:	2900      	cmp	r1, #0
   11c54:	d0e0      	beq.n	11c18 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   11c56:	0773      	lsls	r3, r6, #29
   11c58:	d525      	bpl.n	11ca6 <smp_security_request+0xda>
   11c5a:	7b4b      	ldrb	r3, [r1, #13]
   11c5c:	07df      	lsls	r7, r3, #31
   11c5e:	d422      	bmi.n	11ca6 <smp_security_request+0xda>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   11c60:	f7ff fbb6 	bl	113d0 <get_io_capa>
   11c64:	4603      	mov	r3, r0
			BT_INFO("New auth requirements: 0x%x, repairing",
   11c66:	4828      	ldr	r0, [pc, #160]	; (11d08 <smp_security_request+0x13c>)
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   11c68:	2b03      	cmp	r3, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
   11c6a:	6802      	ldr	r2, [r0, #0]
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   11c6c:	d00d      	beq.n	11c8a <smp_security_request+0xbe>
			BT_INFO("New auth requirements: 0x%x, repairing",
   11c6e:	f002 0207 	and.w	r2, r2, #7
   11c72:	2a02      	cmp	r2, #2
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   11c74:	d9d0      	bls.n	11c18 <smp_security_request+0x4c>
   11c76:	4b25      	ldr	r3, [pc, #148]	; (11d0c <smp_security_request+0x140>)
   11c78:	e9cd 3608 	strd	r3, r6, [sp, #32]
   11c7c:	2303      	movs	r3, #3
   11c7e:	9303      	str	r3, [sp, #12]
   11c80:	9307      	str	r3, [sp, #28]
   11c82:	aa07      	add	r2, sp, #28
   11c84:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   11c88:	e00a      	b.n	11ca0 <smp_security_request+0xd4>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   11c8a:	f012 0f06 	tst.w	r2, #6
   11c8e:	d0c3      	beq.n	11c18 <smp_security_request+0x4c>
   11c90:	4a1f      	ldr	r2, [pc, #124]	; (11d10 <smp_security_request+0x144>)
   11c92:	9303      	str	r3, [sp, #12]
   11c94:	e9cd 2608 	strd	r2, r6, [sp, #32]
   11c98:	9307      	str	r3, [sp, #28]
   11c9a:	aa07      	add	r2, sp, #28
   11c9c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   11ca0:	f018 fab7 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   11ca4:	e7b8      	b.n	11c18 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   11ca6:	0730      	lsls	r0, r6, #28
   11ca8:	d508      	bpl.n	11cbc <smp_security_request+0xf0>
   11caa:	89cb      	ldrh	r3, [r1, #14]
   11cac:	069a      	lsls	r2, r3, #26
   11cae:	d405      	bmi.n	11cbc <smp_security_request+0xf0>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   11cb0:	4815      	ldr	r0, [pc, #84]	; (11d08 <smp_security_request+0x13c>)
   11cb2:	6803      	ldr	r3, [r0, #0]
   11cb4:	f003 0307 	and.w	r3, r3, #7
   11cb8:	2b02      	cmp	r3, #2
   11cba:	e7db      	b.n	11c74 <smp_security_request+0xa8>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   11cbc:	7b0b      	ldrb	r3, [r1, #12]
   11cbe:	9300      	str	r3, [sp, #0]
   11cc0:	f101 0218 	add.w	r2, r1, #24
   11cc4:	f101 031a 	add.w	r3, r1, #26
   11cc8:	4628      	mov	r0, r5
   11cca:	3110      	adds	r1, #16
   11ccc:	f016 ffee 	bl	28cac <bt_conn_le_start_encryption>
   11cd0:	2800      	cmp	r0, #0
   11cd2:	da11      	bge.n	11cf8 <smp_security_request+0x12c>
		BT_ERR("Failed to start encryption");
   11cd4:	480c      	ldr	r0, [pc, #48]	; (11d08 <smp_security_request+0x13c>)
   11cd6:	6803      	ldr	r3, [r0, #0]
   11cd8:	075b      	lsls	r3, r3, #29
   11cda:	d102      	bne.n	11ce2 <smp_security_request+0x116>
		return BT_SMP_ERR_UNSPECIFIED;
   11cdc:	2008      	movs	r0, #8
}
   11cde:	b00b      	add	sp, #44	; 0x2c
   11ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Failed to start encryption");
   11ce2:	4b0c      	ldr	r3, [pc, #48]	; (11d14 <smp_security_request+0x148>)
   11ce4:	9308      	str	r3, [sp, #32]
   11ce6:	aa07      	add	r2, sp, #28
   11ce8:	2302      	movs	r3, #2
   11cea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11cee:	9303      	str	r3, [sp, #12]
   11cf0:	9307      	str	r3, [sp, #28]
   11cf2:	f018 fa8e 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   11cf6:	e7f1      	b.n	11cdc <smp_security_request+0x110>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   11cf8:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   11cfa:	4620      	mov	r0, r4
   11cfc:	f018 fadd 	bl	2a2ba <atomic_set_bit>
   11d00:	e76f      	b.n	11be2 <smp_security_request+0x16>
   11d02:	bf00      	nop
   11d04:	20004997 	.word	0x20004997
   11d08:	20000a18 	.word	0x20000a18
   11d0c:	00031493 	.word	0x00031493
   11d10:	000314ba 	.word	0x000314ba
   11d14:	00031350 	.word	0x00031350

00011d18 <sc_send_public_key>:
{
   11d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   11d1a:	210c      	movs	r1, #12
{
   11d1c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   11d1e:	f018 fae0 	bl	2a2e2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   11d22:	4604      	mov	r4, r0
   11d24:	b1b0      	cbz	r0, 11d54 <sc_send_public_key+0x3c>
   11d26:	2140      	movs	r1, #64	; 0x40
   11d28:	3008      	adds	r0, #8
   11d2a:	f018 fe5e 	bl	2a9ea <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   11d2e:	4f0a      	ldr	r7, [pc, #40]	; (11d58 <sc_send_public_key+0x40>)
   11d30:	2220      	movs	r2, #32
   11d32:	6839      	ldr	r1, [r7, #0]
   11d34:	4606      	mov	r6, r0
   11d36:	f016 fc3e 	bl	285b6 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   11d3a:	6839      	ldr	r1, [r7, #0]
   11d3c:	2220      	movs	r2, #32
   11d3e:	4411      	add	r1, r2
   11d40:	18b0      	adds	r0, r6, r2
   11d42:	f016 fc38 	bl	285b6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   11d46:	4628      	mov	r0, r5
   11d48:	2200      	movs	r2, #0
   11d4a:	4621      	mov	r1, r4
   11d4c:	f018 fa44 	bl	2a1d8 <smp_send.constprop.0>
	return 0;
   11d50:	2000      	movs	r0, #0
}
   11d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   11d54:	2008      	movs	r0, #8
   11d56:	e7fc      	b.n	11d52 <sc_send_public_key+0x3a>
   11d58:	20002bf4 	.word	0x20002bf4

00011d5c <compute_and_send_central_dhcheck>:
{
   11d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
   11d60:	2210      	movs	r2, #16
{
   11d62:	b0a2      	sub	sp, #136	; 0x88
   11d64:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   11d66:	2100      	movs	r1, #0
   11d68:	eb0d 0002 	add.w	r0, sp, r2
   11d6c:	f016 fc2e 	bl	285cc <memset>
	switch (smp->method) {
   11d70:	7a23      	ldrb	r3, [r4, #8]
   11d72:	2b05      	cmp	r3, #5
   11d74:	f200 8098 	bhi.w	11ea8 <compute_and_send_central_dhcheck+0x14c>
   11d78:	e8df f003 	tbb	[pc, r3]
   11d7c:	09030309 	.word	0x09030309
   11d80:	8d96      	.short	0x8d96
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   11d82:	2204      	movs	r2, #4
   11d84:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   11d88:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   11d8a:	f016 fc14 	bl	285b6 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   11d8e:	4b63      	ldr	r3, [pc, #396]	; (11f1c <compute_and_send_central_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
   11d90:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   11d94:	aa14      	add	r2, sp, #80	; 0x50
   11d96:	f103 0730 	add.w	r7, r3, #48	; 0x30
   11d9a:	4691      	mov	r9, r2
   11d9c:	6818      	ldr	r0, [r3, #0]
   11d9e:	6859      	ldr	r1, [r3, #4]
   11da0:	4616      	mov	r6, r2
   11da2:	c603      	stmia	r6!, {r0, r1}
   11da4:	3308      	adds	r3, #8
   11da6:	42bb      	cmp	r3, r7
   11da8:	4632      	mov	r2, r6
   11daa:	d1f7      	bne.n	11d9c <compute_and_send_central_dhcheck+0x40>
   11dac:	6818      	ldr	r0, [r3, #0]
   11dae:	791b      	ldrb	r3, [r3, #4]
   11db0:	6030      	str	r0, [r6, #0]
	sys_memcpy_swap(ws, w, 32);
   11db2:	af0c      	add	r7, sp, #48	; 0x30
	uint8_t m[53] = { 0x00, /* counter */
   11db4:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   11db6:	2220      	movs	r2, #32
   11db8:	f104 0197 	add.w	r1, r4, #151	; 0x97
   11dbc:	4638      	mov	r0, r7
   11dbe:	f018 f954 	bl	2a06a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   11dc2:	4857      	ldr	r0, [pc, #348]	; (11f20 <compute_and_send_central_dhcheck+0x1c4>)
   11dc4:	ab08      	add	r3, sp, #32
   11dc6:	2220      	movs	r2, #32
   11dc8:	4639      	mov	r1, r7
   11dca:	f018 f967 	bl	2a09c <bt_smp_aes_cmac>
	if (err) {
   11dce:	2800      	cmp	r0, #0
   11dd0:	f040 8097 	bne.w	11f02 <compute_and_send_central_dhcheck+0x1a6>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   11dd4:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   11dd8:	2210      	movs	r2, #16
   11dda:	4641      	mov	r1, r8
   11ddc:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   11de0:	f104 0a37 	add.w	sl, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   11de4:	f018 f941 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   11de8:	2210      	movs	r2, #16
   11dea:	4651      	mov	r1, sl
   11dec:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   11df0:	f018 f93b 	bl	2a06a <sys_memcpy_swap>
	m[37] = a1->type;
   11df4:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
   11df8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   11dfc:	2206      	movs	r2, #6
   11dfe:	f105 0190 	add.w	r1, r5, #144	; 0x90
   11e02:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   11e06:	f018 f930 	bl	2a06a <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   11e0a:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   11e0e:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   11e12:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   11e16:	2206      	movs	r2, #6
   11e18:	f105 0197 	add.w	r1, r5, #151	; 0x97
   11e1c:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   11e20:	f018 f923 	bl	2a06a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   11e24:	4633      	mov	r3, r6
   11e26:	2235      	movs	r2, #53	; 0x35
   11e28:	4649      	mov	r1, r9
   11e2a:	a808      	add	r0, sp, #32
   11e2c:	f018 f936 	bl	2a09c <bt_smp_aes_cmac>
	if (err) {
   11e30:	2800      	cmp	r0, #0
   11e32:	d166      	bne.n	11f02 <compute_and_send_central_dhcheck+0x1a6>
	sys_mem_swap(mackey, 16);
   11e34:	2110      	movs	r1, #16
   11e36:	4630      	mov	r0, r6
   11e38:	f018 f921 	bl	2a07e <sys_mem_swap>
		   smp->tk)) {
   11e3c:	f104 0547 	add.w	r5, r4, #71	; 0x47
	m[0] = 0x01;
   11e40:	2301      	movs	r3, #1
   11e42:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   11e46:	2235      	movs	r2, #53	; 0x35
   11e48:	462b      	mov	r3, r5
   11e4a:	4649      	mov	r1, r9
   11e4c:	a808      	add	r0, sp, #32
   11e4e:	f018 f925 	bl	2a09c <bt_smp_aes_cmac>
	if (err) {
   11e52:	2800      	cmp	r0, #0
   11e54:	d155      	bne.n	11f02 <compute_and_send_central_dhcheck+0x1a6>
	sys_mem_swap(ltk, 16);
   11e56:	4628      	mov	r0, r5
   11e58:	2110      	movs	r1, #16
   11e5a:	f018 f910 	bl	2a07e <sys_mem_swap>
		   &smp->chan.chan.conn->le.init_addr,
   11e5e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   11e62:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   11e64:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   11e68:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   11e6a:	9301      	str	r3, [sp, #4]
   11e6c:	f104 030a 	add.w	r3, r4, #10
   11e70:	9202      	str	r2, [sp, #8]
   11e72:	9300      	str	r3, [sp, #0]
   11e74:	4652      	mov	r2, sl
   11e76:	ab04      	add	r3, sp, #16
   11e78:	4641      	mov	r1, r8
   11e7a:	4630      	mov	r0, r6
   11e7c:	f018 f950 	bl	2a120 <smp_f6>
   11e80:	4605      	mov	r5, r0
   11e82:	b328      	cbz	r0, 11ed0 <compute_and_send_central_dhcheck+0x174>
		BT_ERR("Calculate local DHKey check failed");
   11e84:	4827      	ldr	r0, [pc, #156]	; (11f24 <compute_and_send_central_dhcheck+0x1c8>)
   11e86:	6803      	ldr	r3, [r0, #0]
   11e88:	075a      	lsls	r2, r3, #29
   11e8a:	d011      	beq.n	11eb0 <compute_and_send_central_dhcheck+0x154>
   11e8c:	4b26      	ldr	r3, [pc, #152]	; (11f28 <compute_and_send_central_dhcheck+0x1cc>)
   11e8e:	9318      	str	r3, [sp, #96]	; 0x60
   11e90:	2302      	movs	r3, #2
   11e92:	9308      	str	r3, [sp, #32]
   11e94:	e03d      	b.n	11f12 <compute_and_send_central_dhcheck+0x1b6>
		if (smp->oobd_remote) {
   11e96:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   11e9a:	2900      	cmp	r1, #0
   11e9c:	f43f af77 	beq.w	11d8e <compute_and_send_central_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   11ea0:	2210      	movs	r2, #16
   11ea2:	eb0d 0002 	add.w	r0, sp, r2
   11ea6:	e770      	b.n	11d8a <compute_and_send_central_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   11ea8:	481e      	ldr	r0, [pc, #120]	; (11f24 <compute_and_send_central_dhcheck+0x1c8>)
   11eaa:	6802      	ldr	r2, [r0, #0]
   11eac:	0751      	lsls	r1, r2, #29
   11eae:	d103      	bne.n	11eb8 <compute_and_send_central_dhcheck+0x15c>
		return BT_SMP_ERR_UNSPECIFIED;
   11eb0:	2008      	movs	r0, #8
}
   11eb2:	b022      	add	sp, #136	; 0x88
   11eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   11eb8:	4a1c      	ldr	r2, [pc, #112]	; (11f2c <compute_and_send_central_dhcheck+0x1d0>)
	switch (smp->method) {
   11eba:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
		BT_ERR("Unknown pairing method (%u)", smp->method);
   11ebe:	2303      	movs	r3, #3
   11ec0:	930c      	str	r3, [sp, #48]	; 0x30
   11ec2:	9317      	str	r3, [sp, #92]	; 0x5c
   11ec4:	aa17      	add	r2, sp, #92	; 0x5c
   11ec6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate local DHKey check failed");
   11eca:	f018 f9a2 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   11ece:	e7ef      	b.n	11eb0 <compute_and_send_central_dhcheck+0x154>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   11ed0:	210d      	movs	r1, #13
   11ed2:	4620      	mov	r0, r4
   11ed4:	f018 f9f1 	bl	2a2ba <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   11ed8:	210d      	movs	r1, #13
   11eda:	f018 fa02 	bl	2a2e2 <smp_create_pdu.constprop.0>
	if (!buf) {
   11ede:	4606      	mov	r6, r0
   11ee0:	2800      	cmp	r0, #0
   11ee2:	d0e5      	beq.n	11eb0 <compute_and_send_central_dhcheck+0x154>
   11ee4:	2110      	movs	r1, #16
   11ee6:	3008      	adds	r0, #8
   11ee8:	f018 fd7f 	bl	2a9ea <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   11eec:	2210      	movs	r2, #16
   11eee:	4639      	mov	r1, r7
   11ef0:	f016 fb61 	bl	285b6 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   11ef4:	4620      	mov	r0, r4
   11ef6:	462a      	mov	r2, r5
   11ef8:	4631      	mov	r1, r6
   11efa:	f018 f96d 	bl	2a1d8 <smp_send.constprop.0>
	return 0;
   11efe:	4628      	mov	r0, r5
   11f00:	e7d7      	b.n	11eb2 <compute_and_send_central_dhcheck+0x156>
		BT_ERR("Calculate LTK failed");
   11f02:	4808      	ldr	r0, [pc, #32]	; (11f24 <compute_and_send_central_dhcheck+0x1c8>)
   11f04:	6803      	ldr	r3, [r0, #0]
   11f06:	075b      	lsls	r3, r3, #29
   11f08:	d0d2      	beq.n	11eb0 <compute_and_send_central_dhcheck+0x154>
   11f0a:	4b09      	ldr	r3, [pc, #36]	; (11f30 <compute_and_send_central_dhcheck+0x1d4>)
   11f0c:	9318      	str	r3, [sp, #96]	; 0x60
   11f0e:	2302      	movs	r3, #2
   11f10:	930c      	str	r3, [sp, #48]	; 0x30
		BT_ERR("Calculate local DHKey check failed");
   11f12:	9317      	str	r3, [sp, #92]	; 0x5c
   11f14:	aa17      	add	r2, sp, #92	; 0x5c
   11f16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11f1a:	e7d6      	b.n	11eca <compute_and_send_central_dhcheck+0x16e>
   11f1c:	0002c52e 	.word	0x0002c52e
   11f20:	0003176b 	.word	0x0003176b
   11f24:	20000a18 	.word	0x20000a18
   11f28:	000314fe 	.word	0x000314fe
   11f2c:	00031334 	.word	0x00031334
   11f30:	000314e9 	.word	0x000314e9

00011f34 <smp_send_pairing_confirm>:
{
   11f34:	b570      	push	{r4, r5, r6, lr}
	switch (smp->method) {
   11f36:	7a04      	ldrb	r4, [r0, #8]
   11f38:	2c02      	cmp	r4, #2
{
   11f3a:	b08a      	sub	sp, #40	; 0x28
   11f3c:	4605      	mov	r5, r0
	switch (smp->method) {
   11f3e:	d823      	bhi.n	11f88 <smp_send_pairing_confirm+0x54>
   11f40:	b144      	cbz	r4, 11f54 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   11f42:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   11f46:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   11f4a:	40dc      	lsrs	r4, r3
   11f4c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   11f50:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   11f54:	2103      	movs	r1, #3
   11f56:	4628      	mov	r0, r5
   11f58:	f018 f9c3 	bl	2a2e2 <smp_create_pdu.constprop.0>
	if (!buf) {
   11f5c:	4606      	mov	r6, r0
   11f5e:	b1c8      	cbz	r0, 11f94 <smp_send_pairing_confirm+0x60>
   11f60:	2110      	movs	r1, #16
   11f62:	3008      	adds	r0, #8
   11f64:	f018 fd41 	bl	2a9ea <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   11f68:	9000      	str	r0, [sp, #0]
   11f6a:	4818      	ldr	r0, [pc, #96]	; (11fcc <smp_send_pairing_confirm+0x98>)
   11f6c:	4623      	mov	r3, r4
   11f6e:	6800      	ldr	r0, [r0, #0]
   11f70:	f105 0227 	add.w	r2, r5, #39	; 0x27
   11f74:	f105 0157 	add.w	r1, r5, #87	; 0x57
   11f78:	f018 f8ac 	bl	2a0d4 <smp_f4>
   11f7c:	4604      	mov	r4, r0
   11f7e:	b1d0      	cbz	r0, 11fb6 <smp_send_pairing_confirm+0x82>
		net_buf_unref(buf);
   11f80:	4630      	mov	r0, r6
   11f82:	f00d f973 	bl	1f26c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   11f86:	e005      	b.n	11f94 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   11f88:	2c03      	cmp	r4, #3
   11f8a:	d012      	beq.n	11fb2 <smp_send_pairing_confirm+0x7e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   11f8c:	4810      	ldr	r0, [pc, #64]	; (11fd0 <smp_send_pairing_confirm+0x9c>)
   11f8e:	6803      	ldr	r3, [r0, #0]
   11f90:	075b      	lsls	r3, r3, #29
   11f92:	d102      	bne.n	11f9a <smp_send_pairing_confirm+0x66>
		return BT_SMP_ERR_UNSPECIFIED;
   11f94:	2008      	movs	r0, #8
}
   11f96:	b00a      	add	sp, #40	; 0x28
   11f98:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   11f9a:	4b0e      	ldr	r3, [pc, #56]	; (11fd4 <smp_send_pairing_confirm+0xa0>)
   11f9c:	aa07      	add	r2, sp, #28
	switch (smp->method) {
   11f9e:	e9cd 3408 	strd	r3, r4, [sp, #32]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   11fa2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11fa6:	2303      	movs	r3, #3
   11fa8:	9303      	str	r3, [sp, #12]
   11faa:	9307      	str	r3, [sp, #28]
   11fac:	f018 f931 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   11fb0:	e7f0      	b.n	11f94 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   11fb2:	2400      	movs	r4, #0
   11fb4:	e7ce      	b.n	11f54 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   11fb6:	4602      	mov	r2, r0
   11fb8:	4631      	mov	r1, r6
   11fba:	4628      	mov	r0, r5
   11fbc:	f018 f90c 	bl	2a1d8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   11fc0:	1d28      	adds	r0, r5, #4
   11fc2:	4621      	mov	r1, r4
   11fc4:	f018 f8f9 	bl	2a1ba <atomic_clear_bit>
	return 0;
   11fc8:	4620      	mov	r0, r4
   11fca:	e7e4      	b.n	11f96 <smp_send_pairing_confirm+0x62>
   11fcc:	20002bf4 	.word	0x20002bf4
   11fd0:	20000a18 	.word	0x20000a18
   11fd4:	00031334 	.word	0x00031334

00011fd8 <smp_public_key>:
{
   11fd8:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   11fda:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   11fdc:	f100 0657 	add.w	r6, r0, #87	; 0x57
{
   11fe0:	b088      	sub	sp, #32
   11fe2:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   11fe4:	2220      	movs	r2, #32
   11fe6:	4629      	mov	r1, r5
   11fe8:	4630      	mov	r0, r6
   11fea:	f016 fae4 	bl	285b6 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   11fee:	2220      	movs	r2, #32
   11ff0:	18a9      	adds	r1, r5, r2
   11ff2:	f104 0077 	add.w	r0, r4, #119	; 0x77
   11ff6:	f016 fade 	bl	285b6 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   11ffa:	4630      	mov	r0, r6
   11ffc:	f7fb ff66 	bl	decc <bt_pub_key_is_debug>
   12000:	b9d0      	cbnz	r0, 12038 <smp_public_key+0x60>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   12002:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12006:	78db      	ldrb	r3, [r3, #3]
   12008:	2b00      	cmp	r3, #0
   1200a:	d144      	bne.n	12096 <smp_public_key+0xbe>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1200c:	1d25      	adds	r5, r4, #4
   1200e:	210e      	movs	r1, #14
   12010:	4628      	mov	r0, r5
   12012:	f018 f910 	bl	2a236 <atomic_test_bit>
   12016:	2800      	cmp	r0, #0
   12018:	d14a      	bne.n	120b0 <smp_public_key+0xd8>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1201a:	4b75      	ldr	r3, [pc, #468]	; (121f0 <smp_public_key+0x218>)
   1201c:	2220      	movs	r2, #32
   1201e:	6819      	ldr	r1, [r3, #0]
   12020:	4630      	mov	r0, r6
   12022:	f016 fa9f 	bl	28564 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   12026:	2800      	cmp	r0, #0
   12028:	d142      	bne.n	120b0 <smp_public_key+0xd8>
			BT_WARN("Remote public key rejected");
   1202a:	4872      	ldr	r0, [pc, #456]	; (121f4 <smp_public_key+0x21c>)
   1202c:	6803      	ldr	r3, [r0, #0]
   1202e:	f013 0f06 	tst.w	r3, #6
   12032:	d132      	bne.n	1209a <smp_public_key+0xc2>
			return BT_SMP_ERR_UNSPECIFIED;
   12034:	2008      	movs	r0, #8
   12036:	e02c      	b.n	12092 <smp_public_key+0xba>
		BT_INFO("Remote is using Debug Public key");
   12038:	486e      	ldr	r0, [pc, #440]	; (121f4 <smp_public_key+0x21c>)
   1203a:	6803      	ldr	r3, [r0, #0]
   1203c:	f003 0307 	and.w	r3, r3, #7
   12040:	2b02      	cmp	r3, #2
   12042:	d909      	bls.n	12058 <smp_public_key+0x80>
   12044:	4b6c      	ldr	r3, [pc, #432]	; (121f8 <smp_public_key+0x220>)
   12046:	9306      	str	r3, [sp, #24]
   12048:	aa05      	add	r2, sp, #20
   1204a:	2302      	movs	r3, #2
   1204c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12050:	9301      	str	r3, [sp, #4]
   12052:	9305      	str	r3, [sp, #20]
   12054:	f018 f8dd 	bl	2a212 <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   12058:	210e      	movs	r1, #14
   1205a:	1d20      	adds	r0, r4, #4
   1205c:	f018 f92d 	bl	2a2ba <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   12060:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   12064:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   12068:	b933      	cbnz	r3, 12078 <smp_public_key+0xa0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1206a:	7a28      	ldrb	r0, [r5, #8]
   1206c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   12070:	f001 f8e4 	bl	1323c <bt_keys_get_addr>
   12074:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   12078:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1207c:	2b00      	cmp	r3, #0
   1207e:	d0c0      	beq.n	12002 <smp_public_key+0x2a>
   12080:	89da      	ldrh	r2, [r3, #14]
   12082:	f002 0224 	and.w	r2, r2, #36	; 0x24
   12086:	2a00      	cmp	r2, #0
   12088:	d0bb      	beq.n	12002 <smp_public_key+0x2a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1208a:	7b5b      	ldrb	r3, [r3, #13]
   1208c:	0798      	lsls	r0, r3, #30
   1208e:	d4b8      	bmi.n	12002 <smp_public_key+0x2a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   12090:	2003      	movs	r0, #3
}
   12092:	b008      	add	sp, #32
   12094:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   12096:	2000      	movs	r0, #0
   12098:	e7fb      	b.n	12092 <smp_public_key+0xba>
			BT_WARN("Remote public key rejected");
   1209a:	4b58      	ldr	r3, [pc, #352]	; (121fc <smp_public_key+0x224>)
   1209c:	9306      	str	r3, [sp, #24]
   1209e:	2302      	movs	r3, #2
   120a0:	9301      	str	r3, [sp, #4]
   120a2:	9305      	str	r3, [sp, #20]
   120a4:	aa05      	add	r2, sp, #20
   120a6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
			BT_ERR("Unknown pairing method (%u)", smp->method);
   120aa:	f018 f8b2 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   120ae:	e7c1      	b.n	12034 <smp_public_key+0x5c>
		switch (smp->method) {
   120b0:	7a23      	ldrb	r3, [r4, #8]
   120b2:	2b05      	cmp	r3, #5
   120b4:	f200 8085 	bhi.w	121c2 <smp_public_key+0x1ea>
   120b8:	e8df f003 	tbb	[pc, r3]
   120bc:	03084403 	.word	0x03084403
   120c0:	5083      	.short	0x5083
			atomic_set_bit(smp->allowed_cmds,
   120c2:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   120c4:	4620      	mov	r0, r4
   120c6:	f018 f8f8 	bl	2a2ba <atomic_set_bit>
			break;
   120ca:	e02c      	b.n	12126 <smp_public_key+0x14e>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   120cc:	2104      	movs	r1, #4
   120ce:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   120d2:	f004 fb8f 	bl	167f4 <bt_rand>
   120d6:	2800      	cmp	r0, #0
   120d8:	d1ac      	bne.n	12034 <smp_public_key+0x5c>
		smp->passkey %= 1000000;
   120da:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   120de:	4a48      	ldr	r2, [pc, #288]	; (12200 <smp_public_key+0x228>)
	if (bt_auth && bt_auth->passkey_display) {
   120e0:	4e48      	ldr	r6, [pc, #288]	; (12204 <smp_public_key+0x22c>)
		smp->passkey %= 1000000;
   120e2:	fbb3 f1f2 	udiv	r1, r3, r2
   120e6:	fb02 3311 	mls	r3, r2, r1, r3
   120ea:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   120ee:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
   120f0:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   120f4:	b163      	cbz	r3, 12110 <smp_public_key+0x138>
   120f6:	681b      	ldr	r3, [r3, #0]
   120f8:	b153      	cbz	r3, 12110 <smp_public_key+0x138>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   120fa:	210b      	movs	r1, #11
   120fc:	4628      	mov	r0, r5
   120fe:	f018 f8dc 	bl	2a2ba <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   12102:	6833      	ldr	r3, [r6, #0]
   12104:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   12108:	681b      	ldr	r3, [r3, #0]
   1210a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1210e:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   12110:	2103      	movs	r1, #3
   12112:	4620      	mov	r0, r4
   12114:	f018 f8d1 	bl	2a2ba <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   12118:	210e      	movs	r1, #14
   1211a:	f018 f8ce 	bl	2a2ba <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1211e:	f7ff ff09 	bl	11f34 <smp_send_pairing_confirm>
			if (err) {
   12122:	2800      	cmp	r0, #0
   12124:	d1b5      	bne.n	12092 <smp_public_key+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   12126:	4628      	mov	r0, r5
   12128:	2107      	movs	r1, #7
   1212a:	f018 f8c6 	bl	2a2ba <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1212e:	2008      	movs	r0, #8
   12130:	f7ff fa00 	bl	11534 <smp_find>
   12134:	2800      	cmp	r0, #0
   12136:	d1ae      	bne.n	12096 <smp_public_key+0xbe>
		return smp_dhkey_generate(smp);
   12138:	4620      	mov	r0, r4
}
   1213a:	b008      	add	sp, #32
   1213c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_dhkey_generate(smp);
   12140:	f7ff ba92 	b.w	11668 <smp_dhkey_generate>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12144:	210a      	movs	r1, #10
   12146:	4628      	mov	r0, r5
   12148:	f018 f8b7 	bl	2a2ba <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   1214c:	4b2d      	ldr	r3, [pc, #180]	; (12204 <smp_public_key+0x22c>)
   1214e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   12152:	681b      	ldr	r3, [r3, #0]
   12154:	685b      	ldr	r3, [r3, #4]
   12156:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   12158:	210e      	movs	r1, #14
   1215a:	e7b3      	b.n	120c4 <smp_public_key+0xec>
			if (bt_rand(smp->prnd, 16)) {
   1215c:	2110      	movs	r1, #16
   1215e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   12162:	f004 fb47 	bl	167f4 <bt_rand>
   12166:	2800      	cmp	r0, #0
   12168:	f47f af64 	bne.w	12034 <smp_public_key+0x5c>
			if (bt_auth && bt_auth->oob_data_request) {
   1216c:	4e25      	ldr	r6, [pc, #148]	; (12204 <smp_public_key+0x22c>)
   1216e:	6833      	ldr	r3, [r6, #0]
   12170:	2b00      	cmp	r3, #0
   12172:	d035      	beq.n	121e0 <smp_public_key+0x208>
   12174:	68db      	ldr	r3, [r3, #12]
   12176:	2b00      	cmp	r3, #0
   12178:	d032      	beq.n	121e0 <smp_public_key+0x208>
				struct bt_conn_oob_info info = {
   1217a:	4b23      	ldr	r3, [pc, #140]	; (12208 <smp_public_key+0x230>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1217c:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
				struct bt_conn_oob_info info = {
   12180:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   12184:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12188:	78c9      	ldrb	r1, [r1, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1218a:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1218c:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1218e:	b939      	cbnz	r1, 121a0 <smp_public_key+0x1c8>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   12190:	07d1      	lsls	r1, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   12192:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   12196:	d425      	bmi.n	121e4 <smp_public_key+0x20c>
	int oob_config = BT_CONN_OOB_NO_DATA;
   12198:	2b00      	cmp	r3, #0
   1219a:	bf08      	it	eq
   1219c:	2003      	moveq	r0, #3
   1219e:	e000      	b.n	121a2 <smp_public_key+0x1ca>
   121a0:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
   121a2:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   121a4:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   121a8:	f88d 0009 	strb.w	r0, [sp, #9]
				atomic_set_bit(smp->flags,
   121ac:	210c      	movs	r1, #12
   121ae:	4628      	mov	r0, r5
   121b0:	f018 f883 	bl	2a2ba <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   121b4:	6833      	ldr	r3, [r6, #0]
   121b6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   121ba:	68db      	ldr	r3, [r3, #12]
   121bc:	a902      	add	r1, sp, #8
   121be:	4798      	blx	r3
			break;
   121c0:	e7b1      	b.n	12126 <smp_public_key+0x14e>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   121c2:	480c      	ldr	r0, [pc, #48]	; (121f4 <smp_public_key+0x21c>)
   121c4:	6802      	ldr	r2, [r0, #0]
   121c6:	0752      	lsls	r2, r2, #29
   121c8:	f43f af34 	beq.w	12034 <smp_public_key+0x5c>
   121cc:	4a0f      	ldr	r2, [pc, #60]	; (1220c <smp_public_key+0x234>)
		switch (smp->method) {
   121ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_ERR("Unknown pairing method (%u)", smp->method);
   121d2:	2303      	movs	r3, #3
   121d4:	9301      	str	r3, [sp, #4]
   121d6:	9305      	str	r3, [sp, #20]
   121d8:	aa05      	add	r2, sp, #20
   121da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   121de:	e764      	b.n	120aa <smp_public_key+0xd2>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   121e0:	2002      	movs	r0, #2
   121e2:	e756      	b.n	12092 <smp_public_key+0xba>
				     BT_CONN_OOB_BOTH_PEERS :
   121e4:	2b00      	cmp	r3, #0
   121e6:	bf0c      	ite	eq
   121e8:	2001      	moveq	r0, #1
   121ea:	2002      	movne	r0, #2
   121ec:	e7d9      	b.n	121a2 <smp_public_key+0x1ca>
   121ee:	bf00      	nop
   121f0:	20002bf4 	.word	0x20002bf4
   121f4:	20000a18 	.word	0x20000a18
   121f8:	00031521 	.word	0x00031521
   121fc:	00031542 	.word	0x00031542
   12200:	000f4240 	.word	0x000f4240
   12204:	20002a68 	.word	0x20002a68
   12208:	0002c52e 	.word	0x0002c52e
   1220c:	00031334 	.word	0x00031334

00012210 <bt_smp_connected>:
{
   12210:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   12212:	4905      	ldr	r1, [pc, #20]	; (12228 <bt_smp_connected+0x18>)
   12214:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   12218:	30e8      	adds	r0, #232	; 0xe8
   1221a:	f019 fb02 	bl	2b822 <k_work_init_delayable>
	smp_reset(smp);
   1221e:	4620      	mov	r0, r4
}
   12220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   12224:	f018 b8b0 	b.w	2a388 <smp_reset>
   12228:	000130a9 	.word	0x000130a9

0001222c <smp_pairing_rsp>:
{
   1222c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   12230:	688f      	ldr	r7, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   12232:	78fb      	ldrb	r3, [r7, #3]
   12234:	3b07      	subs	r3, #7
   12236:	2b09      	cmp	r3, #9
{
   12238:	b088      	sub	sp, #32
   1223a:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1223c:	d904      	bls.n	12248 <smp_pairing_rsp+0x1c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1223e:	2706      	movs	r7, #6
}
   12240:	4638      	mov	r0, r7
   12242:	b008      	add	sp, #32
   12244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   12248:	793a      	ldrb	r2, [r7, #4]
   1224a:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   1224e:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   12252:	4013      	ands	r3, r2
   12254:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   12258:	797a      	ldrb	r2, [r7, #5]
   1225a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1225e:	4013      	ands	r3, r2
   12260:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   12264:	2302      	movs	r3, #2
   12266:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   12268:	2206      	movs	r2, #6
   1226a:	4639      	mov	r1, r7
   1226c:	3011      	adds	r0, #17
   1226e:	f016 f9a2 	bl	285b6 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   12272:	78bb      	ldrb	r3, [r7, #2]
   12274:	0718      	lsls	r0, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   12276:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1227a:	d506      	bpl.n	1228a <smp_pairing_rsp+0x5e>
   1227c:	7b23      	ldrb	r3, [r4, #12]
   1227e:	0719      	lsls	r1, r3, #28
   12280:	d503      	bpl.n	1228a <smp_pairing_rsp+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   12282:	2105      	movs	r1, #5
   12284:	4628      	mov	r0, r5
   12286:	f018 f818 	bl	2a2ba <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1228a:	78bb      	ldrb	r3, [r7, #2]
   1228c:	069a      	lsls	r2, r3, #26
   1228e:	d506      	bpl.n	1229e <smp_pairing_rsp+0x72>
   12290:	7b23      	ldrb	r3, [r4, #12]
   12292:	069b      	lsls	r3, r3, #26
   12294:	d503      	bpl.n	1229e <smp_pairing_rsp+0x72>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   12296:	2114      	movs	r1, #20
   12298:	4628      	mov	r0, r5
   1229a:	f018 f80e 	bl	2a2ba <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1229e:	78bb      	ldrb	r3, [r7, #2]
   122a0:	07d8      	lsls	r0, r3, #31
   122a2:	d506      	bpl.n	122b2 <smp_pairing_rsp+0x86>
   122a4:	7b23      	ldrb	r3, [r4, #12]
   122a6:	07d9      	lsls	r1, r3, #31
   122a8:	d503      	bpl.n	122b2 <smp_pairing_rsp+0x86>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   122aa:	210d      	movs	r1, #13
   122ac:	4628      	mov	r0, r5
   122ae:	f018 f804 	bl	2a2ba <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   122b2:	2105      	movs	r1, #5
   122b4:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   122b6:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   122b8:	f017 ffbd 	bl	2a236 <atomic_test_bit>
   122bc:	bb28      	cbnz	r0, 1230a <smp_pairing_rsp+0xde>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   122be:	2f04      	cmp	r7, #4
   122c0:	d841      	bhi.n	12346 <smp_pairing_rsp+0x11a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   122c2:	7ca2      	ldrb	r2, [r4, #18]
   122c4:	7ae3      	ldrb	r3, [r4, #11]
   122c6:	4013      	ands	r3, r2
   122c8:	07da      	lsls	r2, r3, #31
   122ca:	d43a      	bmi.n	12342 <smp_pairing_rsp+0x116>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   122cc:	7b21      	ldrb	r1, [r4, #12]
   122ce:	7ce0      	ldrb	r0, [r4, #19]
   122d0:	4301      	orrs	r1, r0
   122d2:	f011 0104 	ands.w	r1, r1, #4
   122d6:	d00f      	beq.n	122f8 <smp_pairing_rsp+0xcc>
	method = gen_method_legacy[remote_io][get_io_capa()];
   122d8:	f7ff f87a 	bl	113d0 <get_io_capa>
   122dc:	4b9e      	ldr	r3, [pc, #632]	; (12558 <smp_pairing_rsp+0x32c>)
   122de:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   122e2:	441f      	add	r7, r3
   122e4:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
   122e6:	2904      	cmp	r1, #4
   122e8:	d106      	bne.n	122f8 <smp_pairing_rsp+0xcc>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   122ea:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   122ee:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   122f0:	2b00      	cmp	r3, #0
   122f2:	bf0c      	ite	eq
   122f4:	2102      	moveq	r1, #2
   122f6:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
   122f8:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   122fa:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   122fe:	4620      	mov	r0, r4
   12300:	f017 ffa2 	bl	2a248 <update_keys_check>
   12304:	bb08      	cbnz	r0, 1234a <smp_pairing_rsp+0x11e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   12306:	2703      	movs	r7, #3
   12308:	e79a      	b.n	12240 <smp_pairing_rsp+0x14>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1230a:	7b20      	ldrb	r0, [r4, #12]
   1230c:	7ce2      	ldrb	r2, [r4, #19]
   1230e:	ea00 0302 	and.w	r3, r0, r2
   12312:	071b      	lsls	r3, r3, #28
   12314:	d506      	bpl.n	12324 <smp_pairing_rsp+0xf8>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   12316:	7ae3      	ldrb	r3, [r4, #11]
   12318:	f894 c012 	ldrb.w	ip, [r4, #18]
   1231c:	ea43 030c 	orr.w	r3, r3, ip
   12320:	07db      	lsls	r3, r3, #31
   12322:	d4e9      	bmi.n	122f8 <smp_pairing_rsp+0xcc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   12324:	2f04      	cmp	r7, #4
   12326:	d80e      	bhi.n	12346 <smp_pairing_rsp+0x11a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   12328:	ea40 0102 	orr.w	r1, r0, r2
   1232c:	f011 0104 	ands.w	r1, r1, #4
   12330:	d0e2      	beq.n	122f8 <smp_pairing_rsp+0xcc>
	return gen_method_sc[remote_io][get_io_capa()];
   12332:	f7ff f84d 	bl	113d0 <get_io_capa>
   12336:	4b89      	ldr	r3, [pc, #548]	; (1255c <smp_pairing_rsp+0x330>)
   12338:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1233c:	441f      	add	r7, r3
   1233e:	5c39      	ldrb	r1, [r7, r0]
   12340:	e7da      	b.n	122f8 <smp_pairing_rsp+0xcc>
		return LEGACY_OOB;
   12342:	2106      	movs	r1, #6
   12344:	e7d8      	b.n	122f8 <smp_pairing_rsp+0xcc>
		return JUST_WORKS;
   12346:	2100      	movs	r1, #0
   12348:	e7d6      	b.n	122f8 <smp_pairing_rsp+0xcc>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1234a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1234e:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   12350:	2b03      	cmp	r3, #3
   12352:	d015      	beq.n	12380 <smp_pairing_rsp+0x154>
   12354:	d804      	bhi.n	12360 <smp_pairing_rsp+0x134>
   12356:	3b01      	subs	r3, #1
   12358:	2b01      	cmp	r3, #1
   1235a:	d914      	bls.n	12386 <smp_pairing_rsp+0x15a>
   1235c:	2708      	movs	r7, #8
   1235e:	e76f      	b.n	12240 <smp_pairing_rsp+0x14>
   12360:	2b04      	cmp	r3, #4
   12362:	d1fb      	bne.n	1235c <smp_pairing_rsp+0x130>
	return MIN(req->max_key_size, rsp->max_key_size);
   12364:	7d23      	ldrb	r3, [r4, #20]
   12366:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   12368:	4293      	cmp	r3, r2
   1236a:	bf28      	it	cs
   1236c:	4613      	movcs	r3, r2
   1236e:	2b10      	cmp	r3, #16
   12370:	f47f af65 	bne.w	1223e <smp_pairing_rsp+0x12>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12374:	2105      	movs	r1, #5
   12376:	4628      	mov	r0, r5
   12378:	f017 ff5d 	bl	2a236 <atomic_test_bit>
   1237c:	2800      	cmp	r0, #0
   1237e:	d0c2      	beq.n	12306 <smp_pairing_rsp+0xda>
		if (smp->method == JUST_WORKS) {
   12380:	7a23      	ldrb	r3, [r4, #8]
   12382:	2b00      	cmp	r3, #0
   12384:	d0bf      	beq.n	12306 <smp_pairing_rsp+0xda>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12386:	2105      	movs	r1, #5
   12388:	4628      	mov	r0, r5
   1238a:	f017 ff54 	bl	2a236 <atomic_test_bit>
   1238e:	2800      	cmp	r0, #0
   12390:	f040 80ad 	bne.w	124ee <smp_pairing_rsp+0x2c2>
	struct bt_conn *conn = smp->chan.chan.conn;
   12394:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   12398:	7a30      	ldrb	r0, [r6, #8]
   1239a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1239e:	f000 ffd1 	bl	13344 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   123a2:	7a23      	ldrb	r3, [r4, #8]
   123a4:	b190      	cbz	r0, 123cc <smp_pairing_rsp+0x1a0>
   123a6:	7b42      	ldrb	r2, [r0, #13]
   123a8:	07d0      	lsls	r0, r2, #31
   123aa:	d50f      	bpl.n	123cc <smp_pairing_rsp+0x1a0>
   123ac:	b973      	cbnz	r3, 123cc <smp_pairing_rsp+0x1a0>
		BT_ERR("JustWorks failed, authenticated keys present");
   123ae:	486c      	ldr	r0, [pc, #432]	; (12560 <smp_pairing_rsp+0x334>)
   123b0:	6803      	ldr	r3, [r0, #0]
   123b2:	0759      	lsls	r1, r3, #29
   123b4:	d0d2      	beq.n	1235c <smp_pairing_rsp+0x130>
   123b6:	4b6b      	ldr	r3, [pc, #428]	; (12564 <smp_pairing_rsp+0x338>)
   123b8:	9306      	str	r3, [sp, #24]
   123ba:	2302      	movs	r3, #2
   123bc:	9301      	str	r3, [sp, #4]
   123be:	9305      	str	r3, [sp, #20]
   123c0:	aa05      	add	r2, sp, #20
   123c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
   123c6:	f017 ff24 	bl	2a212 <z_log_msg2_static_create.constprop.0>
	if (ret) {
   123ca:	e7c7      	b.n	1235c <smp_pairing_rsp+0x130>
	switch (smp->method) {
   123cc:	2b06      	cmp	r3, #6
   123ce:	d867      	bhi.n	124a0 <smp_pairing_rsp+0x274>
   123d0:	e8df f003 	tbb	[pc, r3]
   123d4:	66335c1b 	.word	0x66335c1b
   123d8:	6666      	.short	0x6666
   123da:	04          	.byte	0x04
   123db:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   123dc:	4e62      	ldr	r6, [pc, #392]	; (12568 <smp_pairing_rsp+0x33c>)
   123de:	6833      	ldr	r3, [r6, #0]
   123e0:	2b00      	cmp	r3, #0
   123e2:	d06c      	beq.n	124be <smp_pairing_rsp+0x292>
   123e4:	68db      	ldr	r3, [r3, #12]
   123e6:	2b00      	cmp	r3, #0
   123e8:	d069      	beq.n	124be <smp_pairing_rsp+0x292>
			struct bt_conn_oob_info info = {
   123ea:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   123ec:	210a      	movs	r1, #10
   123ee:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   123f0:	f8ad 3008 	strh.w	r3, [sp, #8]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   123f4:	f017 ff61 	bl	2a2ba <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   123f8:	6833      	ldr	r3, [r6, #0]
   123fa:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   123fe:	68db      	ldr	r3, [r3, #12]
   12400:	a902      	add	r1, sp, #8
   12402:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   12404:	7a23      	ldrb	r3, [r4, #8]
   12406:	2b00      	cmp	r3, #0
   12408:	d15b      	bne.n	124c2 <smp_pairing_rsp+0x296>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1240a:	210f      	movs	r1, #15
   1240c:	4628      	mov	r0, r5
   1240e:	f017 ff12 	bl	2a236 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   12412:	2800      	cmp	r0, #0
   12414:	d055      	beq.n	124c2 <smp_pairing_rsp+0x296>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   12416:	4e54      	ldr	r6, [pc, #336]	; (12568 <smp_pairing_rsp+0x33c>)
   12418:	6833      	ldr	r3, [r6, #0]
   1241a:	2b00      	cmp	r3, #0
   1241c:	d051      	beq.n	124c2 <smp_pairing_rsp+0x296>
	    bt_auth && bt_auth->pairing_confirm) {
   1241e:	695b      	ldr	r3, [r3, #20]
   12420:	2b00      	cmp	r3, #0
   12422:	d04e      	beq.n	124c2 <smp_pairing_rsp+0x296>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12424:	4628      	mov	r0, r5
   12426:	210a      	movs	r1, #10
   12428:	f017 ff47 	bl	2a2ba <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1242c:	6833      	ldr	r3, [r6, #0]
   1242e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   12432:	695b      	ldr	r3, [r3, #20]
   12434:	4798      	blx	r3
	return 0;
   12436:	2700      	movs	r7, #0
   12438:	e702      	b.n	12240 <smp_pairing_rsp+0x14>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1243a:	2104      	movs	r1, #4
   1243c:	a802      	add	r0, sp, #8
   1243e:	f004 f9d9 	bl	167f4 <bt_rand>
   12442:	2800      	cmp	r0, #0
   12444:	d18a      	bne.n	1235c <smp_pairing_rsp+0x130>
			passkey %= 1000000;
   12446:	9b02      	ldr	r3, [sp, #8]
   12448:	4a48      	ldr	r2, [pc, #288]	; (1256c <smp_pairing_rsp+0x340>)
		if (bt_auth && bt_auth->passkey_display) {
   1244a:	4f47      	ldr	r7, [pc, #284]	; (12568 <smp_pairing_rsp+0x33c>)
			passkey %= 1000000;
   1244c:	fbb3 f1f2 	udiv	r1, r3, r2
   12450:	fb02 3311 	mls	r3, r2, r1, r3
   12454:	9302      	str	r3, [sp, #8]
		if (bt_auth && bt_auth->passkey_display) {
   12456:	683b      	ldr	r3, [r7, #0]
   12458:	b153      	cbz	r3, 12470 <smp_pairing_rsp+0x244>
   1245a:	681b      	ldr	r3, [r3, #0]
   1245c:	b143      	cbz	r3, 12470 <smp_pairing_rsp+0x244>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1245e:	210b      	movs	r1, #11
   12460:	4628      	mov	r0, r5
   12462:	f017 ff2a 	bl	2a2ba <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   12466:	683b      	ldr	r3, [r7, #0]
   12468:	9902      	ldr	r1, [sp, #8]
   1246a:	681b      	ldr	r3, [r3, #0]
   1246c:	4630      	mov	r0, r6
   1246e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   12470:	9b02      	ldr	r3, [sp, #8]
	dst[0] = val;
   12472:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   12476:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1247a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1247c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   12480:	0a1b      	lsrs	r3, r3, #8
   12482:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   12486:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1248a:	e7bb      	b.n	12404 <smp_pairing_rsp+0x1d8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1248c:	4628      	mov	r0, r5
   1248e:	210a      	movs	r1, #10
   12490:	f017 ff13 	bl	2a2ba <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   12494:	4b34      	ldr	r3, [pc, #208]	; (12568 <smp_pairing_rsp+0x33c>)
   12496:	681b      	ldr	r3, [r3, #0]
   12498:	4630      	mov	r0, r6
   1249a:	685b      	ldr	r3, [r3, #4]
   1249c:	4798      	blx	r3
	if (ret) {
   1249e:	e7b1      	b.n	12404 <smp_pairing_rsp+0x1d8>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   124a0:	482f      	ldr	r0, [pc, #188]	; (12560 <smp_pairing_rsp+0x334>)
   124a2:	6802      	ldr	r2, [r0, #0]
   124a4:	0752      	lsls	r2, r2, #29
   124a6:	f43f af59 	beq.w	1235c <smp_pairing_rsp+0x130>
   124aa:	4a31      	ldr	r2, [pc, #196]	; (12570 <smp_pairing_rsp+0x344>)
	switch (smp->method) {
   124ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   124b0:	2303      	movs	r3, #3
   124b2:	9301      	str	r3, [sp, #4]
   124b4:	9305      	str	r3, [sp, #20]
   124b6:	aa05      	add	r2, sp, #20
   124b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   124bc:	e783      	b.n	123c6 <smp_pairing_rsp+0x19a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   124be:	2702      	movs	r7, #2
   124c0:	e6be      	b.n	12240 <smp_pairing_rsp+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   124c2:	210a      	movs	r1, #10
   124c4:	4628      	mov	r0, r5
   124c6:	f017 feb6 	bl	2a236 <atomic_test_bit>
   124ca:	b958      	cbnz	r0, 124e4 <smp_pairing_rsp+0x2b8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   124cc:	4620      	mov	r0, r4
   124ce:	2103      	movs	r1, #3
   124d0:	f017 fef3 	bl	2a2ba <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   124d4:	210e      	movs	r1, #14
   124d6:	f017 fef0 	bl	2a2ba <atomic_set_bit>
}
   124da:	b008      	add	sp, #32
   124dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   124e0:	f017 bfd5 	b.w	2a48e <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   124e4:	2100      	movs	r1, #0
   124e6:	4628      	mov	r0, r5
   124e8:	f017 fee7 	bl	2a2ba <atomic_set_bit>
   124ec:	e7a3      	b.n	12436 <smp_pairing_rsp+0x20a>
	smp->local_dist &= SEND_KEYS_SC;
   124ee:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   124f2:	7a27      	ldrb	r7, [r4, #8]
	smp->local_dist &= SEND_KEYS_SC;
   124f4:	f423 4379 	bic.w	r3, r3, #63744	; 0xf900
   124f8:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
   124fc:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   12500:	b9af      	cbnz	r7, 1252e <smp_pairing_rsp+0x302>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   12502:	210f      	movs	r1, #15
   12504:	4628      	mov	r0, r5
   12506:	f017 fe96 	bl	2a236 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1250a:	b180      	cbz	r0, 1252e <smp_pairing_rsp+0x302>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1250c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12568 <smp_pairing_rsp+0x33c>
   12510:	f8d8 3000 	ldr.w	r3, [r8]
   12514:	b15b      	cbz	r3, 1252e <smp_pairing_rsp+0x302>
	    bt_auth && bt_auth->pairing_confirm) {
   12516:	695b      	ldr	r3, [r3, #20]
   12518:	b14b      	cbz	r3, 1252e <smp_pairing_rsp+0x302>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1251a:	4628      	mov	r0, r5
   1251c:	210a      	movs	r1, #10
   1251e:	f017 fecc 	bl	2a2ba <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   12522:	f8d8 3000 	ldr.w	r3, [r8]
   12526:	4630      	mov	r0, r6
   12528:	695b      	ldr	r3, [r3, #20]
   1252a:	4798      	blx	r3
		return 0;
   1252c:	e688      	b.n	12240 <smp_pairing_rsp+0x14>
	if (!sc_public_key) {
   1252e:	4b11      	ldr	r3, [pc, #68]	; (12574 <smp_pairing_rsp+0x348>)
   12530:	681f      	ldr	r7, [r3, #0]
   12532:	b927      	cbnz	r7, 1253e <smp_pairing_rsp+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   12534:	2106      	movs	r1, #6
   12536:	4628      	mov	r0, r5
   12538:	f017 febf 	bl	2a2ba <atomic_set_bit>
		return 0;
   1253c:	e680      	b.n	12240 <smp_pairing_rsp+0x14>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1253e:	4620      	mov	r0, r4
   12540:	210c      	movs	r1, #12
   12542:	f017 feba 	bl	2a2ba <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   12546:	210b      	movs	r1, #11
   12548:	f017 fe37 	bl	2a1ba <atomic_clear_bit>
}
   1254c:	b008      	add	sp, #32
   1254e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   12552:	f7ff bbe1 	b.w	11d18 <sc_send_public_key>
   12556:	bf00      	nop
   12558:	00031739 	.word	0x00031739
   1255c:	00031752 	.word	0x00031752
   12560:	20000a18 	.word	0x20000a18
   12564:	0003155d 	.word	0x0003155d
   12568:	20002a68 	.word	0x20002a68
   1256c:	000f4240 	.word	0x000f4240
   12570:	00031334 	.word	0x00031334
   12574:	20002bf4 	.word	0x20002bf4

00012578 <smp_pairing_random>:
{
   12578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1257c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1257e:	f100 0737 	add.w	r7, r0, #55	; 0x37
   12582:	6889      	ldr	r1, [r1, #8]
{
   12584:	b0a0      	sub	sp, #128	; 0x80
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   12586:	2210      	movs	r2, #16
   12588:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1258a:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1258c:	f016 f813 	bl	285b6 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   12590:	2105      	movs	r1, #5
   12592:	4630      	mov	r0, r6
   12594:	f017 fe4f 	bl	2a236 <atomic_test_bit>
   12598:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
   1259c:	2800      	cmp	r0, #0
   1259e:	d163      	bne.n	12668 <smp_pairing_random+0xf0>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   125a0:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   125a4:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   125a8:	f10d 0820 	add.w	r8, sp, #32
   125ac:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   125ae:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   125b2:	9300      	str	r3, [sp, #0]
   125b4:	f8cd 8008 	str.w	r8, [sp, #8]
   125b8:	f104 0310 	add.w	r3, r4, #16
   125bc:	f104 0209 	add.w	r2, r4, #9
   125c0:	4639      	mov	r1, r7
   125c2:	4650      	mov	r0, sl
   125c4:	f017 ff08 	bl	2a3d8 <smp_c1>
	if (err) {
   125c8:	b9e0      	cbnz	r0, 12604 <smp_pairing_random+0x8c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   125ca:	2210      	movs	r2, #16
   125cc:	4641      	mov	r1, r8
   125ce:	f104 0017 	add.w	r0, r4, #23
   125d2:	f015 ffc7 	bl	28564 <memcmp>
   125d6:	2800      	cmp	r0, #0
   125d8:	d17b      	bne.n	126d2 <smp_pairing_random+0x15a>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   125da:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   125de:	2d00      	cmp	r5, #0
   125e0:	d13d      	bne.n	1265e <smp_pairing_random+0xe6>
	memcpy(out, r2, 8);
   125e2:	2208      	movs	r2, #8
   125e4:	f104 0127 	add.w	r1, r4, #39	; 0x27
   125e8:	4640      	mov	r0, r8
   125ea:	f015 ffe4 	bl	285b6 <memcpy>
	memcpy(out + 8, r1, 8);
   125ee:	2208      	movs	r2, #8
   125f0:	4639      	mov	r1, r7
   125f2:	a80a      	add	r0, sp, #40	; 0x28
   125f4:	f015 ffdf 	bl	285b6 <memcpy>
	return bt_encrypt_le(k, out, out);
   125f8:	4642      	mov	r2, r8
   125fa:	4641      	mov	r1, r8
   125fc:	4650      	mov	r0, sl
   125fe:	f004 f8fb 	bl	167f8 <bt_encrypt_le>
		if (err) {
   12602:	b108      	cbz	r0, 12608 <smp_pairing_random+0x90>
			return BT_SMP_ERR_UNSPECIFIED;
   12604:	2508      	movs	r5, #8
   12606:	e02b      	b.n	12660 <smp_pairing_random+0xe8>
		(void)memset(ediv, 0, sizeof(ediv));
   12608:	2202      	movs	r2, #2
   1260a:	4629      	mov	r1, r5
   1260c:	a804      	add	r0, sp, #16
   1260e:	f015 ffdd 	bl	285cc <memset>
		(void)memset(rand, 0, sizeof(rand));
   12612:	2208      	movs	r2, #8
   12614:	4629      	mov	r1, r5
   12616:	a806      	add	r0, sp, #24
   12618:	f015 ffd8 	bl	285cc <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   1261c:	7d22      	ldrb	r2, [r4, #20]
   1261e:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   12620:	429a      	cmp	r2, r3
   12622:	bf94      	ite	ls
   12624:	9200      	strls	r2, [sp, #0]
   12626:	9300      	strhi	r3, [sp, #0]
   12628:	a906      	add	r1, sp, #24
   1262a:	4643      	mov	r3, r8
   1262c:	aa04      	add	r2, sp, #16
   1262e:	4648      	mov	r0, r9
   12630:	f016 fb3c 	bl	28cac <bt_conn_le_start_encryption>
   12634:	b170      	cbz	r0, 12654 <smp_pairing_random+0xdc>
			BT_ERR("Failed to start encryption");
   12636:	4865      	ldr	r0, [pc, #404]	; (127cc <smp_pairing_random+0x254>)
   12638:	6803      	ldr	r3, [r0, #0]
   1263a:	075c      	lsls	r4, r3, #29
   1263c:	d0e2      	beq.n	12604 <smp_pairing_random+0x8c>
   1263e:	4b64      	ldr	r3, [pc, #400]	; (127d0 <smp_pairing_random+0x258>)
   12640:	9310      	str	r3, [sp, #64]	; 0x40
   12642:	2302      	movs	r3, #2
   12644:	9305      	str	r3, [sp, #20]
		BT_ERR("Calculate confirm failed");
   12646:	930f      	str	r3, [sp, #60]	; 0x3c
   12648:	aa0f      	add	r2, sp, #60	; 0x3c
   1264a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1264e:	f017 fde0 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   12652:	e7d7      	b.n	12604 <smp_pairing_random+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   12654:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   12656:	4630      	mov	r0, r6
   12658:	f017 fe2f 	bl	2a2ba <atomic_set_bit>
			return 0;
   1265c:	e000      	b.n	12660 <smp_pairing_random+0xe8>
	return 0;
   1265e:	4605      	mov	r5, r0
}
   12660:	4628      	mov	r0, r5
   12662:	b020      	add	sp, #128	; 0x80
   12664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   12668:	f899 5003 	ldrb.w	r5, [r9, #3]
   1266c:	2d00      	cmp	r5, #0
   1266e:	f040 80ab 	bne.w	127c8 <smp_pairing_random+0x250>
	switch (smp->method) {
   12672:	7a23      	ldrb	r3, [r4, #8]
   12674:	2b05      	cmp	r3, #5
   12676:	f200 808b 	bhi.w	12790 <smp_pairing_random+0x218>
   1267a:	e8df f003 	tbb	[pc, r3]
   1267e:	0321      	.short	0x0321
   12680:	2c892103 	.word	0x2c892103
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   12684:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   12688:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1268c:	40d3      	lsrs	r3, r2
   1268e:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   12692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   12696:	494f      	ldr	r1, [pc, #316]	; (127d4 <smp_pairing_random+0x25c>)
   12698:	f10d 0820 	add.w	r8, sp, #32
   1269c:	f8cd 8000 	str.w	r8, [sp]
   126a0:	6809      	ldr	r1, [r1, #0]
   126a2:	463a      	mov	r2, r7
   126a4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   126a8:	f017 fd14 	bl	2a0d4 <smp_f4>
   126ac:	b150      	cbz	r0, 126c4 <smp_pairing_random+0x14c>
		BT_ERR("Calculate confirm failed");
   126ae:	4847      	ldr	r0, [pc, #284]	; (127cc <smp_pairing_random+0x254>)
   126b0:	6803      	ldr	r3, [r0, #0]
   126b2:	0759      	lsls	r1, r3, #29
   126b4:	d0a6      	beq.n	12604 <smp_pairing_random+0x8c>
   126b6:	4b48      	ldr	r3, [pc, #288]	; (127d8 <smp_pairing_random+0x260>)
   126b8:	9310      	str	r3, [sp, #64]	; 0x40
   126ba:	2302      	movs	r3, #2
   126bc:	9306      	str	r3, [sp, #24]
   126be:	e7c2      	b.n	12646 <smp_pairing_random+0xce>
	switch (smp->method) {
   126c0:	2300      	movs	r3, #0
   126c2:	e7e8      	b.n	12696 <smp_pairing_random+0x11e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   126c4:	2210      	movs	r2, #16
   126c6:	4641      	mov	r1, r8
   126c8:	f104 0017 	add.w	r0, r4, #23
   126cc:	f015 ff4a 	bl	28564 <memcmp>
   126d0:	b108      	cbz	r0, 126d6 <smp_pairing_random+0x15e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   126d2:	2504      	movs	r5, #4
   126d4:	e7c4      	b.n	12660 <smp_pairing_random+0xe8>
		switch (smp->method) {
   126d6:	7a23      	ldrb	r3, [r4, #8]
   126d8:	2b05      	cmp	r3, #5
   126da:	d859      	bhi.n	12790 <smp_pairing_random+0x218>
   126dc:	e8df f003 	tbb	[pc, r3]
   126e0:	033f3f67 	.word	0x033f3f67
   126e4:	6758      	.short	0x6758
	sys_memcpy_swap(m, u, 32);
   126e6:	4b3b      	ldr	r3, [pc, #236]	; (127d4 <smp_pairing_random+0x25c>)
   126e8:	2220      	movs	r2, #32
   126ea:	6819      	ldr	r1, [r3, #0]
   126ec:	a80c      	add	r0, sp, #48	; 0x30
   126ee:	f017 fcbc 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   126f2:	2220      	movs	r2, #32
   126f4:	f104 0157 	add.w	r1, r4, #87	; 0x57
   126f8:	a814      	add	r0, sp, #80	; 0x50
   126fa:	f017 fcb6 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   126fe:	2210      	movs	r2, #16
   12700:	4639      	mov	r1, r7
   12702:	a81c      	add	r0, sp, #112	; 0x70
   12704:	f017 fcb1 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   12708:	2210      	movs	r2, #16
   1270a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1270e:	a808      	add	r0, sp, #32
   12710:	f017 fcab 	bl	2a06a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   12714:	ab08      	add	r3, sp, #32
   12716:	2250      	movs	r2, #80	; 0x50
   12718:	a90c      	add	r1, sp, #48	; 0x30
   1271a:	4618      	mov	r0, r3
   1271c:	f017 fcbe 	bl	2a09c <bt_smp_aes_cmac>
	if (err) {
   12720:	2800      	cmp	r0, #0
   12722:	f47f af6f 	bne.w	12604 <smp_pairing_random+0x8c>
	memcpy(passkey, xs + 12, 4);
   12726:	a90b      	add	r1, sp, #44	; 0x2c
   12728:	2204      	movs	r2, #4
   1272a:	a806      	add	r0, sp, #24
   1272c:	f015 ff43 	bl	285b6 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   12730:	9b06      	ldr	r3, [sp, #24]
   12732:	4a2a      	ldr	r2, [pc, #168]	; (127dc <smp_pairing_random+0x264>)
   12734:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12736:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   12738:	fbb3 f1f2 	udiv	r1, r3, r2
   1273c:	fb02 3311 	mls	r3, r2, r1, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12740:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   12742:	9306      	str	r3, [sp, #24]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   12744:	f017 fdb9 	bl	2a2ba <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   12748:	2109      	movs	r1, #9
   1274a:	f017 fdb6 	bl	2a2ba <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1274e:	4b24      	ldr	r3, [pc, #144]	; (127e0 <smp_pairing_random+0x268>)
   12750:	9906      	ldr	r1, [sp, #24]
   12752:	681b      	ldr	r3, [r3, #0]
   12754:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   12758:	689b      	ldr	r3, [r3, #8]
   1275a:	4798      	blx	r3
			return 0;
   1275c:	e780      	b.n	12660 <smp_pairing_random+0xe8>
			smp->passkey_round++;
   1275e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12762:	3301      	adds	r3, #1
   12764:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   12766:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   12768:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1276c:	d01f      	beq.n	127ae <smp_pairing_random+0x236>
			if (bt_rand(smp->prnd, 16)) {
   1276e:	2110      	movs	r1, #16
   12770:	f104 0027 	add.w	r0, r4, #39	; 0x27
   12774:	f004 f83e 	bl	167f4 <bt_rand>
   12778:	2800      	cmp	r0, #0
   1277a:	f47f af43 	bne.w	12604 <smp_pairing_random+0x8c>
			atomic_set_bit(smp->allowed_cmds,
   1277e:	2103      	movs	r1, #3
   12780:	4620      	mov	r0, r4
   12782:	f017 fd9a 	bl	2a2ba <atomic_set_bit>
}
   12786:	b020      	add	sp, #128	; 0x80
   12788:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
   1278c:	f7ff bbd2 	b.w	11f34 <smp_send_pairing_confirm>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   12790:	480e      	ldr	r0, [pc, #56]	; (127cc <smp_pairing_random+0x254>)
   12792:	6802      	ldr	r2, [r0, #0]
   12794:	0752      	lsls	r2, r2, #29
   12796:	f43f af35 	beq.w	12604 <smp_pairing_random+0x8c>
   1279a:	4a12      	ldr	r2, [pc, #72]	; (127e4 <smp_pairing_random+0x26c>)
		switch (smp->method) {
   1279c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			BT_ERR("Unknown pairing method (%u)", smp->method);
   127a0:	2303      	movs	r3, #3
   127a2:	9308      	str	r3, [sp, #32]
   127a4:	930f      	str	r3, [sp, #60]	; 0x3c
   127a6:	aa0f      	add	r2, sp, #60	; 0x3c
   127a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   127ac:	e74f      	b.n	1264e <smp_pairing_random+0xd6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   127ae:	2107      	movs	r1, #7
   127b0:	4630      	mov	r0, r6
   127b2:	f017 fd40 	bl	2a236 <atomic_test_bit>
   127b6:	b108      	cbz	r0, 127bc <smp_pairing_random+0x244>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   127b8:	2109      	movs	r1, #9
   127ba:	e74c      	b.n	12656 <smp_pairing_random+0xde>
		return compute_and_send_central_dhcheck(smp);
   127bc:	4620      	mov	r0, r4
}
   127be:	b020      	add	sp, #128	; 0x80
   127c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
   127c4:	f7ff baca 	b.w	11d5c <compute_and_send_central_dhcheck>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   127c8:	460d      	mov	r5, r1
   127ca:	e749      	b.n	12660 <smp_pairing_random+0xe8>
   127cc:	20000a18 	.word	0x20000a18
   127d0:	00031350 	.word	0x00031350
   127d4:	20002bf4 	.word	0x20002bf4
   127d8:	0003158a 	.word	0x0003158a
   127dc:	000f4240 	.word	0x000f4240
   127e0:	20002a68 	.word	0x20002a68
   127e4:	00031334 	.word	0x00031334

000127e8 <bt_smp_sign_verify>:
{
   127e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   127ea:	898b      	ldrh	r3, [r1, #12]
   127ec:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   127ee:	6889      	ldr	r1, [r1, #8]
{
   127f0:	4605      	mov	r5, r0
   127f2:	b089      	sub	sp, #36	; 0x24
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   127f4:	3b0c      	subs	r3, #12
   127f6:	4419      	add	r1, r3
   127f8:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   127fa:	f105 0788 	add.w	r7, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   127fe:	a805      	add	r0, sp, #20
   12800:	f015 fed9 	bl	285b6 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   12804:	7a29      	ldrb	r1, [r5, #8]
   12806:	463a      	mov	r2, r7
   12808:	2010      	movs	r0, #16
   1280a:	f000 fd4d 	bl	132a8 <bt_keys_find>
	if (!keys) {
   1280e:	4605      	mov	r5, r0
   12810:	b998      	cbnz	r0, 1283a <bt_smp_sign_verify+0x52>
		BT_ERR("Unable to find Remote CSRK for %s",
   12812:	4c2f      	ldr	r4, [pc, #188]	; (128d0 <bt_smp_sign_verify+0xe8>)
   12814:	6823      	ldr	r3, [r4, #0]
   12816:	0759      	lsls	r1, r3, #29
   12818:	d00c      	beq.n	12834 <bt_smp_sign_verify+0x4c>
   1281a:	4638      	mov	r0, r7
   1281c:	f7f8 fce2 	bl	b1e4 <bt_addr_le_str_real>
   12820:	4b2c      	ldr	r3, [pc, #176]	; (128d4 <bt_smp_sign_verify+0xec>)
   12822:	9002      	str	r0, [sp, #8]
   12824:	e9cd 5300 	strd	r5, r3, [sp]
   12828:	2201      	movs	r2, #1
   1282a:	462b      	mov	r3, r5
   1282c:	4621      	mov	r1, r4
   1282e:	4628      	mov	r0, r5
   12830:	f017 fcf2 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
		return -ENOENT;
   12834:	f06f 0001 	mvn.w	r0, #1
   12838:	e047      	b.n	128ca <bt_smp_sign_verify+0xe2>
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1283a:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1283c:	9304      	str	r3, [sp, #16]
   1283e:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   12840:	68a0      	ldr	r0, [r4, #8]
   12842:	3b0c      	subs	r3, #12
   12844:	2204      	movs	r2, #4
   12846:	a904      	add	r1, sp, #16
   12848:	4418      	add	r0, r3
   1284a:	f015 feb4 	bl	285b6 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1284e:	89a2      	ldrh	r2, [r4, #12]
   12850:	68a1      	ldr	r1, [r4, #8]
   12852:	3a0c      	subs	r2, #12
   12854:	b292      	uxth	r2, r2
   12856:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1285a:	f7fe fddf 	bl	1141c <smp_sign_buf>
	if (err) {
   1285e:	4606      	mov	r6, r0
   12860:	b198      	cbz	r0, 1288a <bt_smp_sign_verify+0xa2>
		BT_ERR("Unable to create signature for %s",
   12862:	4c1b      	ldr	r4, [pc, #108]	; (128d0 <bt_smp_sign_verify+0xe8>)
   12864:	6823      	ldr	r3, [r4, #0]
   12866:	075a      	lsls	r2, r3, #29
   12868:	d00c      	beq.n	12884 <bt_smp_sign_verify+0x9c>
   1286a:	4638      	mov	r0, r7
   1286c:	f7f8 fcba 	bl	b1e4 <bt_addr_le_str_real>
   12870:	4b19      	ldr	r3, [pc, #100]	; (128d8 <bt_smp_sign_verify+0xf0>)
   12872:	9301      	str	r3, [sp, #4]
   12874:	2300      	movs	r3, #0
   12876:	9002      	str	r0, [sp, #8]
   12878:	9300      	str	r3, [sp, #0]
   1287a:	2201      	movs	r2, #1
   1287c:	4621      	mov	r1, r4
   1287e:	4618      	mov	r0, r3
   12880:	f017 fcca 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
   12884:	f06f 0004 	mvn.w	r0, #4
   12888:	e01f      	b.n	128ca <bt_smp_sign_verify+0xe2>
   1288a:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1288c:	68a1      	ldr	r1, [r4, #8]
   1288e:	3b0c      	subs	r3, #12
   12890:	220c      	movs	r2, #12
   12892:	4419      	add	r1, r3
   12894:	a805      	add	r0, sp, #20
   12896:	f015 fe65 	bl	28564 <memcmp>
   1289a:	b198      	cbz	r0, 128c4 <bt_smp_sign_verify+0xdc>
		BT_ERR("Unable to verify signature for %s",
   1289c:	4c0c      	ldr	r4, [pc, #48]	; (128d0 <bt_smp_sign_verify+0xe8>)
   1289e:	6823      	ldr	r3, [r4, #0]
   128a0:	075b      	lsls	r3, r3, #29
   128a2:	d00c      	beq.n	128be <bt_smp_sign_verify+0xd6>
   128a4:	4638      	mov	r0, r7
   128a6:	f7f8 fc9d 	bl	b1e4 <bt_addr_le_str_real>
   128aa:	4b0c      	ldr	r3, [pc, #48]	; (128dc <bt_smp_sign_verify+0xf4>)
   128ac:	9002      	str	r0, [sp, #8]
   128ae:	e9cd 6300 	strd	r6, r3, [sp]
   128b2:	2201      	movs	r2, #1
   128b4:	4633      	mov	r3, r6
   128b6:	4621      	mov	r1, r4
   128b8:	4630      	mov	r0, r6
   128ba:	f017 fcad 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
		return -EBADMSG;
   128be:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   128c2:	e002      	b.n	128ca <bt_smp_sign_verify+0xe2>
	keys->remote_csrk.cnt++;
   128c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   128c6:	3301      	adds	r3, #1
   128c8:	666b      	str	r3, [r5, #100]	; 0x64
}
   128ca:	b009      	add	sp, #36	; 0x24
   128cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128ce:	bf00      	nop
   128d0:	20000a18 	.word	0x20000a18
   128d4:	000315a3 	.word	0x000315a3
   128d8:	000315c5 	.word	0x000315c5
   128dc:	000315e7 	.word	0x000315e7

000128e0 <bt_smp_sign>:
{
   128e0:	b570      	push	{r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   128e2:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   128e6:	b086      	sub	sp, #24
   128e8:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   128ea:	4632      	mov	r2, r6
   128ec:	7a01      	ldrb	r1, [r0, #8]
   128ee:	2008      	movs	r0, #8
   128f0:	f000 fcda 	bl	132a8 <bt_keys_find>
	if (!keys) {
   128f4:	4604      	mov	r4, r0
   128f6:	b998      	cbnz	r0, 12920 <bt_smp_sign+0x40>
		BT_ERR("Unable to find local CSRK for %s",
   128f8:	4d22      	ldr	r5, [pc, #136]	; (12984 <bt_smp_sign+0xa4>)
   128fa:	682b      	ldr	r3, [r5, #0]
   128fc:	075a      	lsls	r2, r3, #29
   128fe:	d00c      	beq.n	1291a <bt_smp_sign+0x3a>
   12900:	4630      	mov	r0, r6
   12902:	f7f8 fc6f 	bl	b1e4 <bt_addr_le_str_real>
   12906:	4b20      	ldr	r3, [pc, #128]	; (12988 <bt_smp_sign+0xa8>)
   12908:	9002      	str	r0, [sp, #8]
   1290a:	e9cd 4300 	strd	r4, r3, [sp]
   1290e:	2201      	movs	r2, #1
   12910:	4623      	mov	r3, r4
   12912:	4629      	mov	r1, r5
   12914:	4620      	mov	r0, r4
   12916:	f017 fc7f 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
		return -ENOENT;
   1291a:	f06f 0001 	mvn.w	r0, #1
   1291e:	e02e      	b.n	1297e <bt_smp_sign+0x9e>
	return net_buf_simple_add(&buf->b, len);
   12920:	210c      	movs	r1, #12
   12922:	f105 0008 	add.w	r0, r5, #8
   12926:	f018 f860 	bl	2a9ea <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1292a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1292c:	9305      	str	r3, [sp, #20]
	return buf->data + buf->len;
   1292e:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   12930:	68a8      	ldr	r0, [r5, #8]
   12932:	3b0c      	subs	r3, #12
   12934:	2204      	movs	r2, #4
   12936:	a905      	add	r1, sp, #20
   12938:	4418      	add	r0, r3
   1293a:	f015 fe3c 	bl	285b6 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1293e:	89aa      	ldrh	r2, [r5, #12]
   12940:	68a9      	ldr	r1, [r5, #8]
   12942:	3a0c      	subs	r2, #12
   12944:	b292      	uxth	r2, r2
   12946:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1294a:	f7fe fd67 	bl	1141c <smp_sign_buf>
	if (err) {
   1294e:	b198      	cbz	r0, 12978 <bt_smp_sign+0x98>
		BT_ERR("Unable to create signature for %s",
   12950:	4c0c      	ldr	r4, [pc, #48]	; (12984 <bt_smp_sign+0xa4>)
   12952:	6823      	ldr	r3, [r4, #0]
   12954:	075b      	lsls	r3, r3, #29
   12956:	d00c      	beq.n	12972 <bt_smp_sign+0x92>
   12958:	4630      	mov	r0, r6
   1295a:	f7f8 fc43 	bl	b1e4 <bt_addr_le_str_real>
   1295e:	4b0b      	ldr	r3, [pc, #44]	; (1298c <bt_smp_sign+0xac>)
   12960:	9301      	str	r3, [sp, #4]
   12962:	2300      	movs	r3, #0
   12964:	9002      	str	r0, [sp, #8]
   12966:	9300      	str	r3, [sp, #0]
   12968:	2201      	movs	r2, #1
   1296a:	4621      	mov	r1, r4
   1296c:	4618      	mov	r0, r3
   1296e:	f017 fc53 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
   12972:	f06f 0004 	mvn.w	r0, #4
   12976:	e002      	b.n	1297e <bt_smp_sign+0x9e>
	keys->local_csrk.cnt++;
   12978:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1297a:	3301      	adds	r3, #1
   1297c:	6523      	str	r3, [r4, #80]	; 0x50
}
   1297e:	b006      	add	sp, #24
   12980:	bd70      	pop	{r4, r5, r6, pc}
   12982:	bf00      	nop
   12984:	20000a18 	.word	0x20000a18
   12988:	00031609 	.word	0x00031609
   1298c:	000315c5 	.word	0x000315c5

00012990 <smp_pairing_complete>:
{
   12990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   12992:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   12996:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   12998:	1d07      	adds	r7, r0, #4
	if (!status) {
   1299a:	b9b9      	cbnz	r1, 129cc <smp_pairing_complete+0x3c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1299c:	210d      	movs	r1, #13
		if (bt_auth && bt_auth->pairing_complete) {
   1299e:	4b28      	ldr	r3, [pc, #160]	; (12a40 <smp_pairing_complete+0xb0>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   129a0:	4638      	mov	r0, r7
   129a2:	f017 fc48 	bl	2a236 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   129a6:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   129a8:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   129aa:	b11b      	cbz	r3, 129b4 <smp_pairing_complete+0x24>
   129ac:	699b      	ldr	r3, [r3, #24]
   129ae:	b10b      	cbz	r3, 129b4 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   129b0:	4620      	mov	r0, r4
   129b2:	4798      	blx	r3
	smp_reset(smp);
   129b4:	4628      	mov	r0, r5
   129b6:	f017 fce7 	bl	2a388 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   129ba:	7a62      	ldrb	r2, [r4, #9]
   129bc:	7aa3      	ldrb	r3, [r4, #10]
   129be:	429a      	cmp	r2, r3
   129c0:	d03c      	beq.n	12a3c <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
   129c2:	4620      	mov	r0, r4
}
   129c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   129c8:	f017 be51 	b.w	2a66e <bt_smp_start_security>
	switch (smp_err) {
   129cc:	3901      	subs	r1, #1
   129ce:	b2c9      	uxtb	r1, r1
   129d0:	290e      	cmp	r1, #14
   129d2:	bf9c      	itt	ls
   129d4:	4b1b      	ldrls	r3, [pc, #108]	; (12a44 <smp_pairing_complete+0xb4>)
   129d6:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   129d8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   129dc:	bf88      	it	hi
   129de:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   129e0:	b143      	cbz	r3, 129f4 <smp_pairing_complete+0x64>
   129e2:	7b1b      	ldrb	r3, [r3, #12]
   129e4:	bb1b      	cbnz	r3, 12a2e <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
   129e6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   129ea:	f017 ff87 	bl	2a8fc <bt_keys_clear>
			conn->le.keys = NULL;
   129ee:	2300      	movs	r3, #0
   129f0:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   129f4:	2102      	movs	r1, #2
   129f6:	4638      	mov	r0, r7
   129f8:	f017 fc1d 	bl	2a236 <atomic_test_bit>
   129fc:	b940      	cbnz	r0, 12a10 <smp_pairing_complete+0x80>
	switch (err) {
   129fe:	2e07      	cmp	r6, #7
   12a00:	bf96      	itet	ls
   12a02:	4b11      	ldrls	r3, [pc, #68]	; (12a48 <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   12a04:	211f      	movhi	r1, #31
   12a06:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   12a08:	4632      	mov	r2, r6
   12a0a:	4620      	mov	r0, r4
   12a0c:	f7fc f826 	bl	ea5c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   12a10:	2103      	movs	r1, #3
   12a12:	4638      	mov	r0, r7
   12a14:	f017 fc0f 	bl	2a236 <atomic_test_bit>
   12a18:	2800      	cmp	r0, #0
   12a1a:	d0cb      	beq.n	129b4 <smp_pairing_complete+0x24>
   12a1c:	4b08      	ldr	r3, [pc, #32]	; (12a40 <smp_pairing_complete+0xb0>)
   12a1e:	681b      	ldr	r3, [r3, #0]
   12a20:	2b00      	cmp	r3, #0
   12a22:	d0c7      	beq.n	129b4 <smp_pairing_complete+0x24>
		    bt_auth && bt_auth->pairing_failed) {
   12a24:	69db      	ldr	r3, [r3, #28]
   12a26:	2b00      	cmp	r3, #0
   12a28:	d0c4      	beq.n	129b4 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   12a2a:	4631      	mov	r1, r6
   12a2c:	e7c0      	b.n	129b0 <smp_pairing_complete+0x20>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   12a2e:	2102      	movs	r1, #2
   12a30:	4638      	mov	r0, r7
   12a32:	f017 fc00 	bl	2a236 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   12a36:	2800      	cmp	r0, #0
   12a38:	d1d5      	bne.n	129e6 <smp_pairing_complete+0x56>
   12a3a:	e7db      	b.n	129f4 <smp_pairing_complete+0x64>
}
   12a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a3e:	bf00      	nop
   12a40:	20002a68 	.word	0x20002a68
   12a44:	00031719 	.word	0x00031719
   12a48:	00031731 	.word	0x00031731

00012a4c <bt_smp_recv>:
{
   12a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a50:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
   12a52:	898b      	ldrh	r3, [r1, #12]
{
   12a54:	af00      	add	r7, sp, #0
   12a56:	4680      	mov	r8, r0
   12a58:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   12a5a:	b99b      	cbnz	r3, 12a84 <bt_smp_recv+0x38>
		BT_ERR("Too small SMP PDU received");
   12a5c:	484d      	ldr	r0, [pc, #308]	; (12b94 <bt_smp_recv+0x148>)
   12a5e:	6803      	ldr	r3, [r0, #0]
   12a60:	0759      	lsls	r1, r3, #29
   12a62:	d00a      	beq.n	12a7a <bt_smp_recv+0x2e>
   12a64:	4b4c      	ldr	r3, [pc, #304]	; (12b98 <bt_smp_recv+0x14c>)
   12a66:	61bb      	str	r3, [r7, #24]
   12a68:	2302      	movs	r3, #2
   12a6a:	607b      	str	r3, [r7, #4]
   12a6c:	617b      	str	r3, [r7, #20]
   12a6e:	f107 0214 	add.w	r2, r7, #20
   12a72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   12a76:	f017 fbcc 	bl	2a212 <z_log_msg2_static_create.constprop.0>
}
   12a7a:	2000      	movs	r0, #0
   12a7c:	3720      	adds	r7, #32
   12a7e:	46bd      	mov	sp, r7
   12a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   12a84:	2101      	movs	r1, #1
   12a86:	f105 0008 	add.w	r0, r5, #8
   12a8a:	f017 ffdf 	bl	2aa4c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   12a8e:	2104      	movs	r1, #4
   12a90:	4606      	mov	r6, r0
   12a92:	f1a8 00ec 	sub.w	r0, r8, #236	; 0xec
   12a96:	f1a8 04f0 	sub.w	r4, r8, #240	; 0xf0
   12a9a:	f017 fbcc 	bl	2a236 <atomic_test_bit>
   12a9e:	b180      	cbz	r0, 12ac2 <bt_smp_recv+0x76>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   12aa0:	483c      	ldr	r0, [pc, #240]	; (12b94 <bt_smp_recv+0x148>)
   12aa2:	6803      	ldr	r3, [r0, #0]
   12aa4:	f013 0f06 	tst.w	r3, #6
   12aa8:	d0e7      	beq.n	12a7a <bt_smp_recv+0x2e>
   12aaa:	7833      	ldrb	r3, [r6, #0]
   12aac:	4a3b      	ldr	r2, [pc, #236]	; (12b9c <bt_smp_recv+0x150>)
   12aae:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   12ab2:	2303      	movs	r3, #3
   12ab4:	607b      	str	r3, [r7, #4]
   12ab6:	617b      	str	r3, [r7, #20]
   12ab8:	f107 0214 	add.w	r2, r7, #20
   12abc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12ac0:	e7d9      	b.n	12a76 <bt_smp_recv+0x2a>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   12ac2:	7831      	ldrb	r1, [r6, #0]
   12ac4:	290e      	cmp	r1, #14
   12ac6:	d908      	bls.n	12ada <bt_smp_recv+0x8e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   12ac8:	4832      	ldr	r0, [pc, #200]	; (12b94 <bt_smp_recv+0x148>)
   12aca:	6803      	ldr	r3, [r0, #0]
   12acc:	f013 0f06 	tst.w	r3, #6
   12ad0:	d0d3      	beq.n	12a7a <bt_smp_recv+0x2e>
   12ad2:	4b33      	ldr	r3, [pc, #204]	; (12ba0 <bt_smp_recv+0x154>)
   12ad4:	e9c7 3106 	strd	r3, r1, [r7, #24]
   12ad8:	e7eb      	b.n	12ab2 <bt_smp_recv+0x66>
	if (!handlers[hdr->code].func) {
   12ada:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 12ba4 <bt_smp_recv+0x158>
   12ade:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   12ae2:	b9ab      	cbnz	r3, 12b10 <bt_smp_recv+0xc4>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   12ae4:	482b      	ldr	r0, [pc, #172]	; (12b94 <bt_smp_recv+0x148>)
   12ae6:	6803      	ldr	r3, [r0, #0]
   12ae8:	f013 0f06 	tst.w	r3, #6
   12aec:	d00b      	beq.n	12b06 <bt_smp_recv+0xba>
   12aee:	4b2e      	ldr	r3, [pc, #184]	; (12ba8 <bt_smp_recv+0x15c>)
   12af0:	f107 0214 	add.w	r2, r7, #20
   12af4:	e9c7 3106 	strd	r3, r1, [r7, #24]
   12af8:	2303      	movs	r3, #3
   12afa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12afe:	607b      	str	r3, [r7, #4]
   12b00:	617b      	str	r3, [r7, #20]
   12b02:	f017 fb86 	bl	2a212 <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   12b06:	2107      	movs	r1, #7
		smp_error(smp, err);
   12b08:	4620      	mov	r0, r4
   12b0a:	f017 fe13 	bl	2a734 <smp_error>
   12b0e:	e7b4      	b.n	12a7a <bt_smp_recv+0x2e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   12b10:	4620      	mov	r0, r4
   12b12:	f017 fbba 	bl	2a28a <atomic_test_and_clear_bit>
   12b16:	7833      	ldrb	r3, [r6, #0]
   12b18:	b9a8      	cbnz	r0, 12b46 <bt_smp_recv+0xfa>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   12b1a:	481e      	ldr	r0, [pc, #120]	; (12b94 <bt_smp_recv+0x148>)
   12b1c:	6802      	ldr	r2, [r0, #0]
   12b1e:	f012 0f06 	tst.w	r2, #6
   12b22:	d00b      	beq.n	12b3c <bt_smp_recv+0xf0>
   12b24:	4a21      	ldr	r2, [pc, #132]	; (12bac <bt_smp_recv+0x160>)
   12b26:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12b2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
   12b2e:	2303      	movs	r3, #3
   12b30:	f107 0214 	add.w	r2, r7, #20
   12b34:	607b      	str	r3, [r7, #4]
   12b36:	617b      	str	r3, [r7, #20]
   12b38:	f017 fb6b 	bl	2a212 <z_log_msg2_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   12b3c:	7833      	ldrb	r3, [r6, #0]
   12b3e:	2b05      	cmp	r3, #5
   12b40:	d09b      	beq.n	12a7a <bt_smp_recv+0x2e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   12b42:	2108      	movs	r1, #8
   12b44:	e7e0      	b.n	12b08 <bt_smp_recv+0xbc>
	if (buf->len != handlers[hdr->code].expect_len) {
   12b46:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   12b4a:	89a9      	ldrh	r1, [r5, #12]
   12b4c:	7912      	ldrb	r2, [r2, #4]
   12b4e:	428a      	cmp	r2, r1
   12b50:	d015      	beq.n	12b7e <bt_smp_recv+0x132>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12b52:	4810      	ldr	r0, [pc, #64]	; (12b94 <bt_smp_recv+0x148>)
   12b54:	6802      	ldr	r2, [r0, #0]
   12b56:	0752      	lsls	r2, r2, #29
   12b58:	d00f      	beq.n	12b7a <bt_smp_recv+0x12e>
   12b5a:	466d      	mov	r5, sp
   12b5c:	b088      	sub	sp, #32
   12b5e:	466a      	mov	r2, sp
   12b60:	4e13      	ldr	r6, [pc, #76]	; (12bb0 <bt_smp_recv+0x164>)
   12b62:	6193      	str	r3, [r2, #24]
   12b64:	2304      	movs	r3, #4
   12b66:	e9c2 6104 	strd	r6, r1, [r2, #16]
   12b6a:	f842 3f0c 	str.w	r3, [r2, #12]!
   12b6e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12b72:	60bb      	str	r3, [r7, #8]
   12b74:	f017 fb4d 	bl	2a212 <z_log_msg2_static_create.constprop.0>
   12b78:	46ad      	mov	sp, r5
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   12b7a:	210a      	movs	r1, #10
   12b7c:	e7c4      	b.n	12b08 <bt_smp_recv+0xbc>
	err = handlers[hdr->code].func(smp, buf);
   12b7e:	4629      	mov	r1, r5
   12b80:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   12b84:	4620      	mov	r0, r4
   12b86:	4798      	blx	r3
	if (err) {
   12b88:	4601      	mov	r1, r0
   12b8a:	2800      	cmp	r0, #0
   12b8c:	f43f af75 	beq.w	12a7a <bt_smp_recv+0x2e>
   12b90:	e7ba      	b.n	12b08 <bt_smp_recv+0xbc>
   12b92:	bf00      	nop
   12b94:	20000a18 	.word	0x20000a18
   12b98:	0003162a 	.word	0x0003162a
   12b9c:	00031645 	.word	0x00031645
   12ba0:	00031676 	.word	0x00031676
   12ba4:	0002d1a0 	.word	0x0002d1a0
   12ba8:	00031698 	.word	0x00031698
   12bac:	000316b2 	.word	0x000316b2
   12bb0:	000310e5 	.word	0x000310e5

00012bb4 <bt_smp_pkey_ready>:
{
   12bb4:	b530      	push	{r4, r5, lr}
	sc_public_key = pkey;
   12bb6:	4b1e      	ldr	r3, [pc, #120]	; (12c30 <bt_smp_pkey_ready+0x7c>)
{
   12bb8:	b089      	sub	sp, #36	; 0x24
	sc_public_key = pkey;
   12bba:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   12bbc:	b980      	cbnz	r0, 12be0 <bt_smp_pkey_ready+0x2c>
		BT_WARN("Public key not available");
   12bbe:	481d      	ldr	r0, [pc, #116]	; (12c34 <bt_smp_pkey_ready+0x80>)
   12bc0:	6803      	ldr	r3, [r0, #0]
   12bc2:	f013 0f06 	tst.w	r3, #6
   12bc6:	d009      	beq.n	12bdc <bt_smp_pkey_ready+0x28>
   12bc8:	4b1b      	ldr	r3, [pc, #108]	; (12c38 <bt_smp_pkey_ready+0x84>)
   12bca:	9306      	str	r3, [sp, #24]
   12bcc:	aa05      	add	r2, sp, #20
   12bce:	2302      	movs	r3, #2
   12bd0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12bd4:	9301      	str	r3, [sp, #4]
   12bd6:	9305      	str	r3, [sp, #20]
   12bd8:	f017 fb1b 	bl	2a212 <z_log_msg2_static_create.constprop.0>
}
   12bdc:	b009      	add	sp, #36	; 0x24
   12bde:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12be0:	4c16      	ldr	r4, [pc, #88]	; (12c3c <bt_smp_pkey_ready+0x88>)
	z_impl_k_sem_give(sem);
   12be2:	4817      	ldr	r0, [pc, #92]	; (12c40 <bt_smp_pkey_ready+0x8c>)
   12be4:	f010 ff6a 	bl	23abc <z_impl_k_sem_give>
   12be8:	f3bf 8f5b 	dmb	ish
   12bec:	6863      	ldr	r3, [r4, #4]
   12bee:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   12bf2:	f013 0f40 	tst.w	r3, #64	; 0x40
   12bf6:	4625      	mov	r5, r4
   12bf8:	d0f0      	beq.n	12bdc <bt_smp_pkey_ready+0x28>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   12bfa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12bfe:	78db      	ldrb	r3, [r3, #3]
   12c00:	2b00      	cmp	r3, #0
   12c02:	d1eb      	bne.n	12bdc <bt_smp_pkey_ready+0x28>
			err = sc_send_public_key(smp);
   12c04:	4620      	mov	r0, r4
   12c06:	f7ff f887 	bl	11d18 <sc_send_public_key>
			if (err) {
   12c0a:	4601      	mov	r1, r0
   12c0c:	b110      	cbz	r0, 12c14 <bt_smp_pkey_ready+0x60>
				smp_error(smp, err);
   12c0e:	4620      	mov	r0, r4
   12c10:	f017 fd90 	bl	2a734 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c14:	f3bf 8f5b 	dmb	ish
   12c18:	e855 3f00 	ldrex	r3, [r5]
   12c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   12c20:	e845 3200 	strex	r2, r3, [r5]
   12c24:	2a00      	cmp	r2, #0
   12c26:	d1f7      	bne.n	12c18 <bt_smp_pkey_ready+0x64>
   12c28:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   12c2c:	e7d6      	b.n	12bdc <bt_smp_pkey_ready+0x28>
   12c2e:	bf00      	nop
   12c30:	20002bf4 	.word	0x20002bf4
   12c34:	20000a18 	.word	0x20000a18
   12c38:	000316cd 	.word	0x000316cd
   12c3c:	20001b30 	.word	0x20001b30
   12c40:	20000b70 	.word	0x20000b70

00012c44 <smp_signing_info>:
{
   12c44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   12c48:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   12c4c:	4605      	mov	r5, r0
   12c4e:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   12c50:	3004      	adds	r0, #4
   12c52:	210d      	movs	r1, #13
   12c54:	f017 faef 	bl	2a236 <atomic_test_bit>
   12c58:	b310      	cbz	r0, 12ca0 <smp_signing_info+0x5c>
					&conn->le.dst);
   12c5a:	f106 0788 	add.w	r7, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   12c5e:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   12c60:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   12c64:	463a      	mov	r2, r7
   12c66:	2010      	movs	r0, #16
   12c68:	f017 fe34 	bl	2a8d4 <bt_keys_get_type>
		if (!keys) {
   12c6c:	4604      	mov	r4, r0
   12c6e:	b990      	cbnz	r0, 12c96 <smp_signing_info+0x52>
			BT_ERR("Unable to get keys for %s",
   12c70:	4d19      	ldr	r5, [pc, #100]	; (12cd8 <smp_signing_info+0x94>)
   12c72:	682b      	ldr	r3, [r5, #0]
   12c74:	075b      	lsls	r3, r3, #29
   12c76:	d00c      	beq.n	12c92 <smp_signing_info+0x4e>
   12c78:	4638      	mov	r0, r7
   12c7a:	f7f8 fab3 	bl	b1e4 <bt_addr_le_str_real>
   12c7e:	4b17      	ldr	r3, [pc, #92]	; (12cdc <smp_signing_info+0x98>)
   12c80:	9002      	str	r0, [sp, #8]
   12c82:	e9cd 4300 	strd	r4, r3, [sp]
   12c86:	2201      	movs	r2, #1
   12c88:	4623      	mov	r3, r4
   12c8a:	4629      	mov	r1, r5
   12c8c:	4620      	mov	r0, r4
   12c8e:	f017 fac3 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   12c92:	2008      	movs	r0, #8
   12c94:	e011      	b.n	12cba <smp_signing_info+0x76>
		memcpy(keys->remote_csrk.val, req->csrk,
   12c96:	2210      	movs	r2, #16
   12c98:	4641      	mov	r1, r8
   12c9a:	3054      	adds	r0, #84	; 0x54
   12c9c:	f015 fc8b 	bl	285b6 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   12ca0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   12ca4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12ca8:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12cac:	78f2      	ldrb	r2, [r6, #3]
   12cae:	4313      	orrs	r3, r2
   12cb0:	d006      	beq.n	12cc0 <smp_signing_info+0x7c>
	if (!smp->local_dist && !smp->remote_dist) {
   12cb2:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   12cb6:	b14c      	cbz	r4, 12ccc <smp_signing_info+0x88>
	return 0;
   12cb8:	2000      	movs	r0, #0
}
   12cba:	b004      	add	sp, #16
   12cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_smp_distribute_keys(smp);
   12cc0:	4628      	mov	r0, r5
   12cc2:	f7fe fd6b 	bl	1179c <bt_smp_distribute_keys>
		if (err) {
   12cc6:	2800      	cmp	r0, #0
   12cc8:	d0f3      	beq.n	12cb2 <smp_signing_info+0x6e>
   12cca:	e7f6      	b.n	12cba <smp_signing_info+0x76>
		smp_pairing_complete(smp, 0);
   12ccc:	4621      	mov	r1, r4
   12cce:	4628      	mov	r0, r5
   12cd0:	f7ff fe5e 	bl	12990 <smp_pairing_complete>
   12cd4:	e7f0      	b.n	12cb8 <smp_signing_info+0x74>
   12cd6:	bf00      	nop
   12cd8:	20000a18 	.word	0x20000a18
   12cdc:	00031384 	.word	0x00031384

00012ce0 <smp_ident_addr_info>:
{
   12ce0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   12ce4:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   12ce6:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   12cea:	783b      	ldrb	r3, [r7, #0]
{
   12cec:	4605      	mov	r5, r0
   12cee:	b363      	cbz	r3, 12d4a <smp_ident_addr_info+0x6a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   12cf0:	79bb      	ldrb	r3, [r7, #6]
   12cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12cf6:	2bc0      	cmp	r3, #192	; 0xc0
   12cf8:	d027      	beq.n	12d4a <smp_ident_addr_info+0x6a>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   12cfa:	4e58      	ldr	r6, [pc, #352]	; (12e5c <smp_ident_addr_info+0x17c>)
   12cfc:	6833      	ldr	r3, [r6, #0]
   12cfe:	0758      	lsls	r0, r3, #29
   12d00:	d103      	bne.n	12d0a <smp_ident_addr_info+0x2a>
		return BT_SMP_ERR_INVALID_PARAMS;
   12d02:	200a      	movs	r0, #10
}
   12d04:	b004      	add	sp, #16
   12d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   12d0a:	4638      	mov	r0, r7
   12d0c:	f7f8 fa6a 	bl	b1e4 <bt_addr_le_str_real>
   12d10:	2500      	movs	r5, #0
   12d12:	4b53      	ldr	r3, [pc, #332]	; (12e60 <smp_ident_addr_info+0x180>)
   12d14:	9002      	str	r0, [sp, #8]
   12d16:	9301      	str	r3, [sp, #4]
   12d18:	4631      	mov	r1, r6
   12d1a:	462b      	mov	r3, r5
   12d1c:	9500      	str	r5, [sp, #0]
   12d1e:	2201      	movs	r2, #1
   12d20:	4628      	mov	r0, r5
   12d22:	f017 fa79 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   12d26:	6833      	ldr	r3, [r6, #0]
   12d28:	0759      	lsls	r1, r3, #29
   12d2a:	d0ea      	beq.n	12d02 <smp_ident_addr_info+0x22>
   12d2c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   12d30:	f7f8 fa58 	bl	b1e4 <bt_addr_le_str_real>
   12d34:	4b4b      	ldr	r3, [pc, #300]	; (12e64 <smp_ident_addr_info+0x184>)
   12d36:	9002      	str	r0, [sp, #8]
   12d38:	e9cd 5300 	strd	r5, r3, [sp]
   12d3c:	2201      	movs	r2, #1
   12d3e:	462b      	mov	r3, r5
   12d40:	4631      	mov	r1, r6
   12d42:	4628      	mov	r0, r5
   12d44:	f017 fa68 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
   12d48:	e7db      	b.n	12d02 <smp_ident_addr_info+0x22>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   12d4a:	f104 0888 	add.w	r8, r4, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   12d4e:	2207      	movs	r2, #7
   12d50:	4639      	mov	r1, r7
   12d52:	4640      	mov	r0, r8
   12d54:	f015 fc06 	bl	28564 <memcmp>
   12d58:	b178      	cbz	r0, 12d7a <smp_ident_addr_info+0x9a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   12d5a:	7a20      	ldrb	r0, [r4, #8]
   12d5c:	4639      	mov	r1, r7
   12d5e:	f000 faf1 	bl	13344 <bt_keys_find_addr>
		if (keys) {
   12d62:	4606      	mov	r6, r0
   12d64:	b148      	cbz	r0, 12d7a <smp_ident_addr_info+0x9a>
			if (!update_keys_check(smp, keys)) {
   12d66:	4601      	mov	r1, r0
   12d68:	4628      	mov	r0, r5
   12d6a:	f017 fa6d 	bl	2a248 <update_keys_check>
   12d6e:	b908      	cbnz	r0, 12d74 <smp_ident_addr_info+0x94>
			return BT_SMP_ERR_UNSPECIFIED;
   12d70:	2008      	movs	r0, #8
   12d72:	e7c7      	b.n	12d04 <smp_ident_addr_info+0x24>
			bt_keys_clear(keys);
   12d74:	4630      	mov	r0, r6
   12d76:	f017 fdc1 	bl	2a8fc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   12d7a:	210d      	movs	r1, #13
   12d7c:	1d28      	adds	r0, r5, #4
   12d7e:	f017 fa5a 	bl	2a236 <atomic_test_bit>
   12d82:	2800      	cmp	r0, #0
   12d84:	d043      	beq.n	12e0e <smp_ident_addr_info+0x12e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   12d86:	7a21      	ldrb	r1, [r4, #8]
   12d88:	4642      	mov	r2, r8
   12d8a:	2002      	movs	r0, #2
   12d8c:	f017 fda2 	bl	2a8d4 <bt_keys_get_type>
		if (!keys) {
   12d90:	4606      	mov	r6, r0
   12d92:	b988      	cbnz	r0, 12db8 <smp_ident_addr_info+0xd8>
			BT_ERR("Unable to get keys for %s",
   12d94:	4c31      	ldr	r4, [pc, #196]	; (12e5c <smp_ident_addr_info+0x17c>)
   12d96:	6823      	ldr	r3, [r4, #0]
   12d98:	075a      	lsls	r2, r3, #29
   12d9a:	d0e9      	beq.n	12d70 <smp_ident_addr_info+0x90>
   12d9c:	4640      	mov	r0, r8
   12d9e:	f7f8 fa21 	bl	b1e4 <bt_addr_le_str_real>
   12da2:	4b31      	ldr	r3, [pc, #196]	; (12e68 <smp_ident_addr_info+0x188>)
   12da4:	9002      	str	r0, [sp, #8]
   12da6:	e9cd 6300 	strd	r6, r3, [sp]
   12daa:	2201      	movs	r2, #1
   12dac:	4633      	mov	r3, r6
   12dae:	4621      	mov	r1, r4
   12db0:	4630      	mov	r0, r6
   12db2:	f017 fa31 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
   12db6:	e7db      	b.n	12d70 <smp_ident_addr_info+0x90>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   12db8:	78e3      	ldrb	r3, [r4, #3]
   12dba:	bbdb      	cbnz	r3, 12e34 <smp_ident_addr_info+0x154>
			dst = &conn->le.resp_addr;
   12dbc:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   12dc0:	780b      	ldrb	r3, [r1, #0]
   12dc2:	2b01      	cmp	r3, #1
   12dc4:	d120      	bne.n	12e08 <smp_ident_addr_info+0x128>
		if (bt_addr_le_is_rpa(dst)) {
   12dc6:	798b      	ldrb	r3, [r1, #6]
   12dc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12dcc:	2b40      	cmp	r3, #64	; 0x40
   12dce:	d11b      	bne.n	12e08 <smp_ident_addr_info+0x128>
	memcpy(dst, src, sizeof(*dst));
   12dd0:	2206      	movs	r2, #6
   12dd2:	3101      	adds	r1, #1
   12dd4:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   12dd8:	f015 fbed 	bl	285b6 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   12ddc:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   12de0:	b193      	cbz	r3, 12e08 <smp_ident_addr_info+0x128>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   12de2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   12de6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12dea:	2bc0      	cmp	r3, #192	; 0xc0
   12dec:	d00c      	beq.n	12e08 <smp_ident_addr_info+0x128>
	memcpy(dst, src, sizeof(*dst));
   12dee:	2207      	movs	r2, #7
   12df0:	4639      	mov	r1, r7
   12df2:	1c70      	adds	r0, r6, #1
   12df4:	f015 fbdf 	bl	285b6 <memcpy>
   12df8:	2207      	movs	r2, #7
   12dfa:	4639      	mov	r1, r7
   12dfc:	4640      	mov	r0, r8
   12dfe:	f015 fbda 	bl	285b6 <memcpy>
				bt_conn_identity_resolved(conn);
   12e02:	4620      	mov	r0, r4
   12e04:	f7fb fdfc 	bl	ea00 <bt_conn_identity_resolved>
		bt_id_add(keys);
   12e08:	4630      	mov	r0, r6
   12e0a:	f7fa fb09 	bl	d420 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   12e0e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   12e12:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   12e16:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   12e18:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   12e1c:	d503      	bpl.n	12e26 <smp_ident_addr_info+0x146>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   12e1e:	210a      	movs	r1, #10
   12e20:	4628      	mov	r0, r5
   12e22:	f017 fa4a 	bl	2a2ba <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12e26:	78e3      	ldrb	r3, [r4, #3]
   12e28:	b13b      	cbz	r3, 12e3a <smp_ident_addr_info+0x15a>
	if (!smp->local_dist && !smp->remote_dist) {
   12e2a:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   12e2e:	b174      	cbz	r4, 12e4e <smp_ident_addr_info+0x16e>
	return 0;
   12e30:	2000      	movs	r0, #0
   12e32:	e767      	b.n	12d04 <smp_ident_addr_info+0x24>
			dst = &conn->le.init_addr;
   12e34:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   12e38:	e7c2      	b.n	12dc0 <smp_ident_addr_info+0xe0>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   12e3a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   12e3e:	2b00      	cmp	r3, #0
   12e40:	d1f3      	bne.n	12e2a <smp_ident_addr_info+0x14a>
		err = bt_smp_distribute_keys(smp);
   12e42:	4628      	mov	r0, r5
   12e44:	f7fe fcaa 	bl	1179c <bt_smp_distribute_keys>
		if (err) {
   12e48:	2800      	cmp	r0, #0
   12e4a:	d0ee      	beq.n	12e2a <smp_ident_addr_info+0x14a>
   12e4c:	e75a      	b.n	12d04 <smp_ident_addr_info+0x24>
		smp_pairing_complete(smp, 0);
   12e4e:	4628      	mov	r0, r5
   12e50:	4621      	mov	r1, r4
   12e52:	f7ff fd9d 	bl	12990 <smp_pairing_complete>
	return 0;
   12e56:	4620      	mov	r0, r4
   12e58:	e754      	b.n	12d04 <smp_ident_addr_info+0x24>
   12e5a:	bf00      	nop
   12e5c:	20000a18 	.word	0x20000a18
   12e60:	000316e6 	.word	0x000316e6
   12e64:	000315bd 	.word	0x000315bd
   12e68:	00031384 	.word	0x00031384

00012e6c <smp_central_ident>:
{
   12e6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   12e70:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   12e74:	4605      	mov	r5, r0
   12e76:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   12e78:	3004      	adds	r0, #4
   12e7a:	210d      	movs	r1, #13
   12e7c:	f017 f9db 	bl	2a236 <atomic_test_bit>
   12e80:	b338      	cbz	r0, 12ed2 <smp_central_ident+0x66>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   12e82:	f106 0888 	add.w	r8, r6, #136	; 0x88
   12e86:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   12e88:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   12e8a:	4642      	mov	r2, r8
   12e8c:	2004      	movs	r0, #4
   12e8e:	f017 fd21 	bl	2a8d4 <bt_keys_get_type>
		if (!keys) {
   12e92:	4604      	mov	r4, r0
   12e94:	b990      	cbnz	r0, 12ebc <smp_central_ident+0x50>
			BT_ERR("Unable to get keys for %s",
   12e96:	4d23      	ldr	r5, [pc, #140]	; (12f24 <smp_central_ident+0xb8>)
   12e98:	682b      	ldr	r3, [r5, #0]
   12e9a:	0759      	lsls	r1, r3, #29
   12e9c:	d00c      	beq.n	12eb8 <smp_central_ident+0x4c>
   12e9e:	4640      	mov	r0, r8
   12ea0:	f7f8 f9a0 	bl	b1e4 <bt_addr_le_str_real>
   12ea4:	4b20      	ldr	r3, [pc, #128]	; (12f28 <smp_central_ident+0xbc>)
   12ea6:	9002      	str	r0, [sp, #8]
   12ea8:	e9cd 4300 	strd	r4, r3, [sp]
   12eac:	2201      	movs	r2, #1
   12eae:	4623      	mov	r3, r4
   12eb0:	4629      	mov	r1, r5
   12eb2:	4620      	mov	r0, r4
   12eb4:	f017 f9b0 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   12eb8:	2008      	movs	r0, #8
   12eba:	e01c      	b.n	12ef6 <smp_central_ident+0x8a>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   12ebc:	2202      	movs	r2, #2
   12ebe:	4639      	mov	r1, r7
   12ec0:	3018      	adds	r0, #24
   12ec2:	f015 fb78 	bl	285b6 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   12ec6:	2208      	movs	r2, #8
   12ec8:	1cb9      	adds	r1, r7, #2
   12eca:	f104 0010 	add.w	r0, r4, #16
   12ece:	f015 fb72 	bl	285b6 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   12ed2:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   12ed6:	f023 0201 	bic.w	r2, r3, #1
   12eda:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   12ede:	079a      	lsls	r2, r3, #30
   12ee0:	d50c      	bpl.n	12efc <smp_central_ident+0x90>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   12ee2:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   12ee4:	4628      	mov	r0, r5
   12ee6:	f017 f9e8 	bl	2a2ba <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12eea:	78f3      	ldrb	r3, [r6, #3]
   12eec:	b153      	cbz	r3, 12f04 <smp_central_ident+0x98>
	if (!smp->local_dist && !smp->remote_dist) {
   12eee:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   12ef2:	b18c      	cbz	r4, 12f18 <smp_central_ident+0xac>
	return 0;
   12ef4:	2000      	movs	r0, #0
}
   12ef6:	b004      	add	sp, #16
   12ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   12efc:	075b      	lsls	r3, r3, #29
   12efe:	d5f4      	bpl.n	12eea <smp_central_ident+0x7e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   12f00:	210a      	movs	r1, #10
   12f02:	e7ef      	b.n	12ee4 <smp_central_ident+0x78>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   12f04:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   12f08:	2b00      	cmp	r3, #0
   12f0a:	d1f0      	bne.n	12eee <smp_central_ident+0x82>
		err = bt_smp_distribute_keys(smp);
   12f0c:	4628      	mov	r0, r5
   12f0e:	f7fe fc45 	bl	1179c <bt_smp_distribute_keys>
		if (err) {
   12f12:	2800      	cmp	r0, #0
   12f14:	d0eb      	beq.n	12eee <smp_central_ident+0x82>
   12f16:	e7ee      	b.n	12ef6 <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   12f18:	4621      	mov	r1, r4
   12f1a:	4628      	mov	r0, r5
   12f1c:	f7ff fd38 	bl	12990 <smp_pairing_complete>
   12f20:	e7e8      	b.n	12ef4 <smp_central_ident+0x88>
   12f22:	bf00      	nop
   12f24:	20000a18 	.word	0x20000a18
   12f28:	00031384 	.word	0x00031384

00012f2c <smp_pairing_failed>:
{
   12f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   12f2e:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   12f32:	688d      	ldr	r5, [r1, #8]
{
   12f34:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   12f36:	4817      	ldr	r0, [pc, #92]	; (12f94 <smp_pairing_failed+0x68>)
   12f38:	6803      	ldr	r3, [r0, #0]
   12f3a:	075b      	lsls	r3, r3, #29
{
   12f3c:	b089      	sub	sp, #36	; 0x24
	BT_ERR("reason 0x%x", req->reason);
   12f3e:	d00b      	beq.n	12f58 <smp_pairing_failed+0x2c>
   12f40:	782b      	ldrb	r3, [r5, #0]
   12f42:	4a15      	ldr	r2, [pc, #84]	; (12f98 <smp_pairing_failed+0x6c>)
   12f44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12f48:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12f4c:	2303      	movs	r3, #3
   12f4e:	aa05      	add	r2, sp, #20
   12f50:	9301      	str	r3, [sp, #4]
   12f52:	9305      	str	r3, [sp, #20]
   12f54:	f017 f95d 	bl	2a212 <z_log_msg2_static_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   12f58:	1d26      	adds	r6, r4, #4
   12f5a:	210a      	movs	r1, #10
   12f5c:	4630      	mov	r0, r6
   12f5e:	f017 f994 	bl	2a28a <atomic_test_and_clear_bit>
   12f62:	b148      	cbz	r0, 12f78 <smp_pairing_failed+0x4c>
		if (bt_auth && bt_auth->cancel) {
   12f64:	4b0d      	ldr	r3, [pc, #52]	; (12f9c <smp_pairing_failed+0x70>)
   12f66:	681b      	ldr	r3, [r3, #0]
   12f68:	b96b      	cbnz	r3, 12f86 <smp_pairing_failed+0x5a>
	smp_pairing_complete(smp, req->reason);
   12f6a:	4620      	mov	r0, r4
   12f6c:	7829      	ldrb	r1, [r5, #0]
   12f6e:	f7ff fd0f 	bl	12990 <smp_pairing_complete>
}
   12f72:	2000      	movs	r0, #0
   12f74:	b009      	add	sp, #36	; 0x24
   12f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   12f78:	210b      	movs	r1, #11
   12f7a:	4630      	mov	r0, r6
   12f7c:	f017 f985 	bl	2a28a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   12f80:	2800      	cmp	r0, #0
   12f82:	d1ef      	bne.n	12f64 <smp_pairing_failed+0x38>
   12f84:	e7f1      	b.n	12f6a <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   12f86:	691b      	ldr	r3, [r3, #16]
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d0ee      	beq.n	12f6a <smp_pairing_failed+0x3e>
			bt_auth->cancel(conn);
   12f8c:	4638      	mov	r0, r7
   12f8e:	4798      	blx	r3
   12f90:	e7eb      	b.n	12f6a <smp_pairing_failed+0x3e>
   12f92:	bf00      	nop
   12f94:	20000a18 	.word	0x20000a18
   12f98:	000316fa 	.word	0x000316fa
   12f9c:	20002a68 	.word	0x20002a68

00012fa0 <bt_smp_encrypt_change>:
{
   12fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   12fa4:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   12fa6:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   12faa:	4604      	mov	r4, r0
   12fac:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   12fae:	4630      	mov	r0, r6
   12fb0:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   12fb2:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   12fb6:	f017 f968 	bl	2a28a <atomic_test_and_clear_bit>
   12fba:	2800      	cmp	r0, #0
   12fbc:	d06e      	beq.n	1309c <bt_smp_encrypt_change+0xfc>
	if (hci_status) {
   12fbe:	b1cf      	cbz	r7, 12ff4 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   12fc0:	2103      	movs	r1, #3
   12fc2:	4630      	mov	r0, r6
   12fc4:	f017 f937 	bl	2a236 <atomic_test_bit>
   12fc8:	2800      	cmp	r0, #0
   12fca:	d067      	beq.n	1309c <bt_smp_encrypt_change+0xfc>
			uint8_t smp_err = smp_err_get(
   12fcc:	4638      	mov	r0, r7
   12fce:	f7f9 fc8f 	bl	c8f0 <bt_security_err_get>
	switch (auth_err) {
   12fd2:	3801      	subs	r0, #1
   12fd4:	b2c0      	uxtb	r0, r0
   12fd6:	2808      	cmp	r0, #8
   12fd8:	bf9a      	itte	ls
   12fda:	4b32      	ldrls	r3, [pc, #200]	; (130a4 <bt_smp_encrypt_change+0x104>)
   12fdc:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   12fde:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   12fe0:	2102      	movs	r1, #2
   12fe2:	4630      	mov	r0, r6
   12fe4:	f017 f969 	bl	2a2ba <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   12fe8:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   12fea:	4628      	mov	r0, r5
}
   12fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   12ff0:	f7ff bcce 	b.w	12990 <smp_pairing_complete>
	if (!conn->encrypt) {
   12ff4:	f898 300b 	ldrb.w	r3, [r8, #11]
   12ff8:	2b00      	cmp	r3, #0
   12ffa:	d04f      	beq.n	1309c <bt_smp_encrypt_change+0xfc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   12ffc:	2103      	movs	r1, #3
   12ffe:	4630      	mov	r0, r6
   13000:	f017 f919 	bl	2a236 <atomic_test_bit>
   13004:	b920      	cbnz	r0, 13010 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   13006:	4628      	mov	r0, r5
}
   13008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   1300c:	f017 b9bc 	b.w	2a388 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13010:	2105      	movs	r1, #5
   13012:	4630      	mov	r0, r6
   13014:	f017 f90f 	bl	2a236 <atomic_test_bit>
   13018:	b1b8      	cbz	r0, 1304a <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1301a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1301e:	071b      	lsls	r3, r3, #28
   13020:	d507      	bpl.n	13032 <bt_smp_encrypt_change+0x92>
   13022:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   13026:	071f      	lsls	r7, r3, #28
   13028:	d503      	bpl.n	13032 <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1302a:	2111      	movs	r1, #17
   1302c:	4630      	mov	r0, r6
   1302e:	f017 f944 	bl	2a2ba <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   13032:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   13036:	f023 0308 	bic.w	r3, r3, #8
   1303a:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1303e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   13042:	f023 0308 	bic.w	r3, r3, #8
   13046:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1304a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1304e:	07d8      	lsls	r0, r3, #31
   13050:	d508      	bpl.n	13064 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   13052:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   13054:	4628      	mov	r0, r5
   13056:	f017 f930 	bl	2a2ba <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1305a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1305e:	079b      	lsls	r3, r3, #30
   13060:	d506      	bpl.n	13070 <bt_smp_encrypt_change+0xd0>
   13062:	e009      	b.n	13078 <bt_smp_encrypt_change+0xd8>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   13064:	0799      	lsls	r1, r3, #30
   13066:	d501      	bpl.n	1306c <bt_smp_encrypt_change+0xcc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   13068:	2108      	movs	r1, #8
   1306a:	e7f3      	b.n	13054 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1306c:	075a      	lsls	r2, r3, #29
   1306e:	d417      	bmi.n	130a0 <bt_smp_encrypt_change+0x100>
		bt_id_add(conn->le.keys);
   13070:	f8d8 00b4 	ldr.w	r0, [r8, #180]	; 0xb4
   13074:	f7fa f9d4 	bl	d420 <bt_id_add>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   13078:	2102      	movs	r1, #2
   1307a:	4630      	mov	r0, r6
   1307c:	f017 f91d 	bl	2a2ba <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13080:	f898 3003 	ldrb.w	r3, [r8, #3]
   13084:	b913      	cbnz	r3, 1308c <bt_smp_encrypt_change+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   13086:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1308a:	b93b      	cbnz	r3, 1309c <bt_smp_encrypt_change+0xfc>
	if (bt_smp_distribute_keys(smp)) {
   1308c:	4628      	mov	r0, r5
   1308e:	f7fe fb85 	bl	1179c <bt_smp_distribute_keys>
   13092:	b918      	cbnz	r0, 1309c <bt_smp_encrypt_change+0xfc>
	if (!smp->local_dist && !smp->remote_dist) {
   13094:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   13098:	2900      	cmp	r1, #0
   1309a:	d0a6      	beq.n	12fea <bt_smp_encrypt_change+0x4a>
}
   1309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   130a0:	210a      	movs	r1, #10
   130a2:	e7d7      	b.n	13054 <bt_smp_encrypt_change+0xb4>
   130a4:	00031728 	.word	0x00031728

000130a8 <smp_timeout>:
{
   130a8:	b530      	push	{r4, r5, lr}
   130aa:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   130ac:	f5a0 75ec 	sub.w	r5, r0, #472	; 0x1d8
	BT_ERR("SMP Timeout");
   130b0:	480d      	ldr	r0, [pc, #52]	; (130e8 <smp_timeout+0x40>)
   130b2:	6803      	ldr	r3, [r0, #0]
   130b4:	075b      	lsls	r3, r3, #29
{
   130b6:	b089      	sub	sp, #36	; 0x24
	BT_ERR("SMP Timeout");
   130b8:	d009      	beq.n	130ce <smp_timeout+0x26>
   130ba:	4b0c      	ldr	r3, [pc, #48]	; (130ec <smp_timeout+0x44>)
   130bc:	9306      	str	r3, [sp, #24]
   130be:	aa05      	add	r2, sp, #20
   130c0:	2302      	movs	r3, #2
   130c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   130c6:	9301      	str	r3, [sp, #4]
   130c8:	9305      	str	r3, [sp, #20]
   130ca:	f017 f8a2 	bl	2a212 <z_log_msg2_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   130ce:	4628      	mov	r0, r5
   130d0:	2108      	movs	r1, #8
   130d2:	f7ff fc5d 	bl	12990 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   130d6:	2104      	movs	r1, #4
   130d8:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
}
   130dc:	b009      	add	sp, #36	; 0x24
   130de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   130e2:	f017 b8ea 	b.w	2a2ba <atomic_set_bit>
   130e6:	bf00      	nop
   130e8:	20000a18 	.word	0x20000a18
   130ec:	00031706 	.word	0x00031706

000130f0 <bt_smp_update_keys>:
{
   130f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   130f4:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   130f6:	f7fe f9fd 	bl	114f4 <smp_chan_get>
	if (!smp) {
   130fa:	4605      	mov	r5, r0
   130fc:	2800      	cmp	r0, #0
   130fe:	d07f      	beq.n	13200 <bt_smp_update_keys+0x110>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   13100:	1d07      	adds	r7, r0, #4
   13102:	2103      	movs	r1, #3
   13104:	4638      	mov	r0, r7
   13106:	f017 f896 	bl	2a236 <atomic_test_bit>
   1310a:	2800      	cmp	r0, #0
   1310c:	d078      	beq.n	13200 <bt_smp_update_keys+0x110>
	if (conn->le.keys) {
   1310e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   13112:	b108      	cbz	r0, 13118 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   13114:	f017 fbf2 	bl	2a8fc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   13118:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1311c:	7a20      	ldrb	r0, [r4, #8]
   1311e:	4641      	mov	r1, r8
   13120:	f000 f88c 	bl	1323c <bt_keys_get_addr>
   13124:	4606      	mov	r6, r0
   13126:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1312a:	b9b8      	cbnz	r0, 1315c <bt_smp_update_keys+0x6c>
		BT_ERR("Unable to get keys for %s",
   1312c:	4c36      	ldr	r4, [pc, #216]	; (13208 <bt_smp_update_keys+0x118>)
   1312e:	6823      	ldr	r3, [r4, #0]
   13130:	075b      	lsls	r3, r3, #29
   13132:	d00c      	beq.n	1314e <bt_smp_update_keys+0x5e>
   13134:	4640      	mov	r0, r8
   13136:	f7f8 f855 	bl	b1e4 <bt_addr_le_str_real>
   1313a:	4b34      	ldr	r3, [pc, #208]	; (1320c <bt_smp_update_keys+0x11c>)
   1313c:	9002      	str	r0, [sp, #8]
   1313e:	e9cd 6300 	strd	r6, r3, [sp]
   13142:	2201      	movs	r2, #1
   13144:	4633      	mov	r3, r6
   13146:	4621      	mov	r1, r4
   13148:	4630      	mov	r0, r6
   1314a:	f017 f865 	bl	2a218 <z_log_msg2_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1314e:	2108      	movs	r1, #8
   13150:	4628      	mov	r0, r5
}
   13152:	b004      	add	sp, #16
   13154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   13158:	f017 baec 	b.w	2a734 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1315c:	210e      	movs	r1, #14
   1315e:	4638      	mov	r0, r7
   13160:	f017 f869 	bl	2a236 <atomic_test_bit>
   13164:	b128      	cbz	r0, 13172 <bt_smp_update_keys+0x82>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   13166:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1316a:	7b53      	ldrb	r3, [r2, #13]
   1316c:	f043 0302 	orr.w	r3, r3, #2
   13170:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   13172:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   13174:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   13178:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1317a:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1317c:	d837      	bhi.n	131ee <bt_smp_update_keys+0xfe>
   1317e:	b3ca      	cbz	r2, 131f4 <bt_smp_update_keys+0x104>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   13180:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   13184:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   13186:	7d2b      	ldrb	r3, [r5, #20]
   13188:	7b6a      	ldrb	r2, [r5, #13]
   1318a:	4293      	cmp	r3, r2
   1318c:	bf28      	it	cs
   1318e:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   13190:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13192:	4638      	mov	r0, r7
   13194:	2105      	movs	r1, #5
   13196:	f017 f84e 	bl	2a236 <atomic_test_bit>
   1319a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1319e:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   131a0:	b358      	cbz	r0, 131fa <bt_smp_update_keys+0x10a>
		conn->le.keys->flags |= BT_KEYS_SC;
   131a2:	f042 0210 	orr.w	r2, r2, #16
   131a6:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   131a8:	210d      	movs	r1, #13
   131aa:	4638      	mov	r0, r7
   131ac:	f017 f843 	bl	2a236 <atomic_test_bit>
   131b0:	b330      	cbz	r0, 13200 <bt_smp_update_keys+0x110>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   131b2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   131b6:	2120      	movs	r1, #32
   131b8:	f017 fb9c 	bl	2a8f4 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   131bc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   131c0:	f105 0147 	add.w	r1, r5, #71	; 0x47
   131c4:	2210      	movs	r2, #16
   131c6:	301a      	adds	r0, #26
   131c8:	f015 f9f5 	bl	285b6 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   131cc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   131d0:	2208      	movs	r2, #8
   131d2:	2100      	movs	r1, #0
   131d4:	3010      	adds	r0, #16
   131d6:	f015 f9f9 	bl	285cc <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   131da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   131de:	2202      	movs	r2, #2
   131e0:	2100      	movs	r1, #0
   131e2:	3018      	adds	r0, #24
}
   131e4:	b004      	add	sp, #16
   131e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   131ea:	f015 b9ef 	b.w	285cc <memset>
	switch (smp->method) {
   131ee:	3a05      	subs	r2, #5
   131f0:	2a01      	cmp	r2, #1
   131f2:	d9c5      	bls.n	13180 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   131f4:	f023 0301 	bic.w	r3, r3, #1
   131f8:	e7c4      	b.n	13184 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   131fa:	f022 0210 	bic.w	r2, r2, #16
   131fe:	735a      	strb	r2, [r3, #13]
}
   13200:	b004      	add	sp, #16
   13202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13206:	bf00      	nop
   13208:	20000a18 	.word	0x20000a18
   1320c:	00031384 	.word	0x00031384

00013210 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   13210:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   13212:	4b07      	ldr	r3, [pc, #28]	; (13230 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   13214:	4807      	ldr	r0, [pc, #28]	; (13234 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   13216:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1321a:	f003 0306 	and.w	r3, r3, #6
   1321e:	1f9a      	subs	r2, r3, #6
   13220:	4253      	negs	r3, r2
   13222:	4153      	adcs	r3, r2
   13224:	4a04      	ldr	r2, [pc, #16]	; (13238 <bt_smp_init+0x28>)
   13226:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   13228:	f7fa fe5c 	bl	dee4 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1322c:	2000      	movs	r0, #0
   1322e:	bd08      	pop	{r3, pc}
   13230:	20000000 	.word	0x20000000
   13234:	200003e0 	.word	0x200003e0
   13238:	20004997 	.word	0x20004997

0001323c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1323c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1323e:	4d11      	ldr	r5, [pc, #68]	; (13284 <bt_keys_get_addr+0x48>)
   13240:	782b      	ldrb	r3, [r5, #0]
   13242:	4283      	cmp	r3, r0
{
   13244:	4606      	mov	r6, r0
   13246:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   13248:	d00b      	beq.n	13262 <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1324a:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1324c:	480e      	ldr	r0, [pc, #56]	; (13288 <bt_keys_get_addr+0x4c>)
   1324e:	9400      	str	r4, [sp, #0]
   13250:	2207      	movs	r2, #7
   13252:	4669      	mov	r1, sp
   13254:	f8cd 4003 	str.w	r4, [sp, #3]
   13258:	f015 f984 	bl	28564 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1325c:	b150      	cbz	r0, 13274 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1325e:	4620      	mov	r0, r4
   13260:	e006      	b.n	13270 <bt_keys_get_addr+0x34>
   13262:	2207      	movs	r2, #7
   13264:	1c68      	adds	r0, r5, #1
   13266:	f015 f97d 	bl	28564 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1326a:	2800      	cmp	r0, #0
   1326c:	d1ed      	bne.n	1324a <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   1326e:	4628      	mov	r0, r5
}
   13270:	b003      	add	sp, #12
   13272:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   13274:	4804      	ldr	r0, [pc, #16]	; (13288 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   13276:	702e      	strb	r6, [r5, #0]
   13278:	2207      	movs	r2, #7
   1327a:	4639      	mov	r1, r7
   1327c:	f015 f99b 	bl	285b6 <memcpy>
		return keys;
   13280:	4800      	ldr	r0, [pc, #0]	; (13284 <bt_keys_get_addr+0x48>)
}
   13282:	e7f5      	b.n	13270 <bt_keys_get_addr+0x34>
   13284:	20002bf8 	.word	0x20002bf8
   13288:	20002bf9 	.word	0x20002bf9

0001328c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1328c:	460b      	mov	r3, r1
   1328e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   13290:	4a04      	ldr	r2, [pc, #16]	; (132a4 <bt_keys_foreach+0x18>)
{
   13292:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   13294:	89d4      	ldrh	r4, [r2, #14]
   13296:	4204      	tst	r4, r0
   13298:	d002      	beq.n	132a0 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1329a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1329c:	4610      	mov	r0, r2
   1329e:	4718      	bx	r3
}
   132a0:	bc10      	pop	{r4}
   132a2:	4770      	bx	lr
   132a4:	20002bf8 	.word	0x20002bf8

000132a8 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   132a8:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   132aa:	4c09      	ldr	r4, [pc, #36]	; (132d0 <bt_keys_find+0x28>)
{
   132ac:	460b      	mov	r3, r1
   132ae:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   132b0:	89e2      	ldrh	r2, [r4, #14]
   132b2:	4202      	tst	r2, r0
   132b4:	d007      	beq.n	132c6 <bt_keys_find+0x1e>
   132b6:	7822      	ldrb	r2, [r4, #0]
   132b8:	429a      	cmp	r2, r3
   132ba:	d104      	bne.n	132c6 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   132bc:	2207      	movs	r2, #7
   132be:	1c60      	adds	r0, r4, #1
   132c0:	f015 f950 	bl	28564 <memcmp>
   132c4:	b108      	cbz	r0, 132ca <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   132c6:	2000      	movs	r0, #0
}
   132c8:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   132ca:	4620      	mov	r0, r4
   132cc:	e7fc      	b.n	132c8 <bt_keys_find+0x20>
   132ce:	bf00      	nop
   132d0:	20002bf8 	.word	0x20002bf8

000132d4 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   132d4:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   132d6:	780b      	ldrb	r3, [r1, #0]
   132d8:	2b01      	cmp	r3, #1
   132da:	4606      	mov	r6, r0
   132dc:	460d      	mov	r5, r1
   132de:	d001      	beq.n	132e4 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   132e0:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   132e2:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   132e4:	798b      	ldrb	r3, [r1, #6]
   132e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   132ea:	2b40      	cmp	r3, #64	; 0x40
   132ec:	d1f8      	bne.n	132e0 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   132ee:	4c12      	ldr	r4, [pc, #72]	; (13338 <bt_keys_find_irk+0x64>)
   132f0:	89e3      	ldrh	r3, [r4, #14]
   132f2:	079b      	lsls	r3, r3, #30
   132f4:	d5f4      	bpl.n	132e0 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   132f6:	7823      	ldrb	r3, [r4, #0]
   132f8:	42b3      	cmp	r3, r6
   132fa:	d10b      	bne.n	13314 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   132fc:	2206      	movs	r2, #6
   132fe:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   13302:	1c68      	adds	r0, r5, #1
   13304:	f015 f92e 	bl	28564 <memcmp>
   13308:	b908      	cbnz	r0, 1330e <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1330a:	4620      	mov	r0, r4
   1330c:	e7e9      	b.n	132e2 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1330e:	89e3      	ldrh	r3, [r4, #14]
   13310:	079a      	lsls	r2, r3, #30
   13312:	d5e5      	bpl.n	132e0 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   13314:	7823      	ldrb	r3, [r4, #0]
   13316:	42b3      	cmp	r3, r6
   13318:	d1e2      	bne.n	132e0 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1331a:	3501      	adds	r5, #1
   1331c:	4807      	ldr	r0, [pc, #28]	; (1333c <bt_keys_find_irk+0x68>)
   1331e:	4629      	mov	r1, r5
   13320:	f015 f9a5 	bl	2866e <bt_rpa_irk_matches>
   13324:	2800      	cmp	r0, #0
   13326:	d0db      	beq.n	132e0 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   13328:	4805      	ldr	r0, [pc, #20]	; (13340 <bt_keys_find_irk+0x6c>)
   1332a:	2206      	movs	r2, #6
   1332c:	4629      	mov	r1, r5
   1332e:	f015 f942 	bl	285b6 <memcpy>
			return &key_pool[i];
   13332:	4801      	ldr	r0, [pc, #4]	; (13338 <bt_keys_find_irk+0x64>)
}
   13334:	e7d5      	b.n	132e2 <bt_keys_find_irk+0xe>
   13336:	bf00      	nop
   13338:	20002bf8 	.word	0x20002bf8
   1333c:	20002c22 	.word	0x20002c22
   13340:	20002c32 	.word	0x20002c32

00013344 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   13344:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   13346:	4c06      	ldr	r4, [pc, #24]	; (13360 <bt_keys_find_addr+0x1c>)
   13348:	7823      	ldrb	r3, [r4, #0]
   1334a:	4283      	cmp	r3, r0
   1334c:	d104      	bne.n	13358 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1334e:	2207      	movs	r2, #7
   13350:	1c60      	adds	r0, r4, #1
   13352:	f015 f907 	bl	28564 <memcmp>
   13356:	b108      	cbz	r0, 1335c <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   13358:	2000      	movs	r0, #0
}
   1335a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1335c:	4620      	mov	r0, r4
   1335e:	e7fc      	b.n	1335a <bt_keys_find_addr+0x16>
   13360:	20002bf8 	.word	0x20002bf8

00013364 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   13364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13368:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1336a:	1dc2      	adds	r2, r0, #7
   1336c:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   13370:	1e75      	subs	r5, r6, #1
{
   13372:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   13374:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   13376:	6018      	str	r0, [r3, #0]
{
   13378:	b082      	sub	sp, #8
   1337a:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1337c:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1337e:	2100      	movs	r1, #0
   13380:	2204      	movs	r2, #4
   13382:	fb07 0005 	mla	r0, r7, r5, r0
   13386:	f015 f921 	bl	285cc <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1338a:	b1bd      	cbz	r5, 133bc <mem_init+0x58>
   1338c:	3e02      	subs	r6, #2
   1338e:	b2b6      	uxth	r6, r6
   13390:	fb06 7307 	mla	r3, r6, r7, r7
   13394:	fb06 f807 	mul.w	r8, r6, r7
   13398:	441c      	add	r4, r3
   1339a:	eba8 0803 	sub.w	r8, r8, r3
   1339e:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   133a0:	2204      	movs	r2, #4
   133a2:	eb04 0008 	add.w	r0, r4, r8
   133a6:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   133aa:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   133ac:	f015 f903 	bl	285b6 <memcpy>
	while (mem_count--) {
   133b0:	42b5      	cmp	r5, r6
   133b2:	eba4 0407 	sub.w	r4, r4, r7
   133b6:	f105 0501 	add.w	r5, r5, #1
   133ba:	d1f1      	bne.n	133a0 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   133bc:	b002      	add	sp, #8
   133be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133c2:	bf00      	nop

000133c4 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   133c4:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   133c6:	6805      	ldr	r5, [r0, #0]
{
   133c8:	b082      	sub	sp, #8
	if (*mem_head) {
   133ca:	b195      	cbz	r5, 133f2 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   133cc:	1deb      	adds	r3, r5, #7
   133ce:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   133d2:	2204      	movs	r2, #4
   133d4:	4604      	mov	r4, r0
   133d6:	4629      	mov	r1, r5
   133d8:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   133dc:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   133de:	f015 f8ea 	bl	285b6 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   133e2:	9b01      	ldr	r3, [sp, #4]
   133e4:	b123      	cbz	r3, 133f0 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   133e6:	1dda      	adds	r2, r3, #7
   133e8:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   133ec:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   133ee:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   133f0:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   133f2:	4628      	mov	r0, r5
   133f4:	b002      	add	sp, #8
   133f6:	bd70      	pop	{r4, r5, r6, pc}

000133f8 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   133f8:	680b      	ldr	r3, [r1, #0]
{
   133fa:	b570      	push	{r4, r5, r6, lr}
   133fc:	460c      	mov	r4, r1
   133fe:	4605      	mov	r5, r0
	if (*mem_head) {
   13400:	b183      	cbz	r3, 13424 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   13402:	3307      	adds	r3, #7
   13404:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   13408:	881e      	ldrh	r6, [r3, #0]
   1340a:	3601      	adds	r6, #1
   1340c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   1340e:	2204      	movs	r2, #4
   13410:	4621      	mov	r1, r4
   13412:	4628      	mov	r0, r5
   13414:	f015 f8cf 	bl	285b6 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   13418:	1deb      	adds	r3, r5, #7
   1341a:	f023 0303 	bic.w	r3, r3, #3
   1341e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   13420:	6025      	str	r5, [r4, #0]
}
   13422:	bd70      	pop	{r4, r5, r6, pc}
   13424:	2601      	movs	r6, #1
   13426:	e7f2      	b.n	1340e <mem_release+0x16>

00013428 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   13428:	fb02 0001 	mla	r0, r2, r1, r0
   1342c:	4770      	bx	lr
   1342e:	bf00      	nop

00013430 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   13430:	1a40      	subs	r0, r0, r1
   13432:	b280      	uxth	r0, r0
}
   13434:	fbb0 f0f2 	udiv	r0, r0, r2
   13438:	4770      	bx	lr
   1343a:	bf00      	nop

0001343c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   1343c:	1e53      	subs	r3, r2, #1
	src += len;
   1343e:	4411      	add	r1, r2
	while (len--) {
   13440:	b29b      	uxth	r3, r3
   13442:	b142      	cbz	r2, 13456 <mem_rcopy+0x1a>
   13444:	43db      	mvns	r3, r3
   13446:	3801      	subs	r0, #1
   13448:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1344a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1344e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   13452:	4291      	cmp	r1, r2
   13454:	d1f9      	bne.n	1344a <mem_rcopy+0xe>
	}
}
   13456:	4770      	bx	lr

00013458 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   13458:	4401      	add	r1, r0
   1345a:	e002      	b.n	13462 <mem_nz+0xa>
		if (*src++) {
   1345c:	f810 3b01 	ldrb.w	r3, [r0], #1
   13460:	b91b      	cbnz	r3, 1346a <mem_nz+0x12>
	while (len--) {
   13462:	4288      	cmp	r0, r1
   13464:	d1fa      	bne.n	1345c <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   13466:	2000      	movs	r0, #0
   13468:	4770      	bx	lr
			return 1;
   1346a:	2001      	movs	r0, #1
}
   1346c:	4770      	bx	lr
   1346e:	bf00      	nop

00013470 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   13470:	6010      	str	r0, [r2, #0]
   13472:	6008      	str	r0, [r1, #0]

	return link;
}
   13474:	4770      	bx	lr
   13476:	bf00      	nop

00013478 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   13478:	680a      	ldr	r2, [r1, #0]
{
   1347a:	4603      	mov	r3, r0
	if (*head != *tail) {
   1347c:	6800      	ldr	r0, [r0, #0]
   1347e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   13480:	bf05      	ittet	eq
   13482:	2200      	moveq	r2, #0
   13484:	600a      	streq	r2, [r1, #0]
		return NULL;
   13486:	2000      	movne	r0, #0
	*head = *tail = NULL;
   13488:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1348a:	4770      	bx	lr

0001348c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1348c:	f8d2 c000 	ldr.w	ip, [r2]
   13490:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   13494:	f8d2 c000 	ldr.w	ip, [r2]
   13498:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1349c:	6010      	str	r0, [r2, #0]

	return link;
}
   1349e:	4770      	bx	lr

000134a0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   134a0:	4288      	cmp	r0, r1
   134a2:	d003      	beq.n	134ac <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   134a4:	b11a      	cbz	r2, 134ae <memq_peek+0xe>
		*mem = head->mem;
   134a6:	6843      	ldr	r3, [r0, #4]
   134a8:	6013      	str	r3, [r2, #0]
   134aa:	4770      	bx	lr
		return NULL;
   134ac:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   134ae:	4770      	bx	lr

000134b0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   134b0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   134b2:	4283      	cmp	r3, r0
   134b4:	d009      	beq.n	134ca <memq_dequeue+0x1a>
	if (mem) {
   134b6:	b12a      	cbz	r2, 134c4 <memq_dequeue+0x14>
		*mem = head->mem;
   134b8:	6858      	ldr	r0, [r3, #4]
   134ba:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   134bc:	681a      	ldr	r2, [r3, #0]
   134be:	600a      	str	r2, [r1, #0]

	return old_head;
}
   134c0:	4618      	mov	r0, r3
   134c2:	4770      	bx	lr
	if (old_head == NULL) {
   134c4:	2b00      	cmp	r3, #0
   134c6:	d1f9      	bne.n	134bc <memq_dequeue+0xc>
   134c8:	e7fa      	b.n	134c0 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   134ca:	2300      	movs	r3, #0
   134cc:	e7f8      	b.n	134c0 <memq_dequeue+0x10>
   134ce:	bf00      	nop

000134d0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   134d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134d4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 13508 <mayfly_init+0x38>
   134d8:	4e0c      	ldr	r6, [pc, #48]	; (1350c <mayfly_init+0x3c>)
   134da:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   134dc:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   134e0:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   134e2:	1d22      	adds	r2, r4, #4
   134e4:	4621      	mov	r1, r4
   134e6:	4628      	mov	r0, r5
		while (caller_id--) {
   134e8:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   134ea:	f7ff ffc1 	bl	13470 <memq_init>
		while (caller_id--) {
   134ee:	42b4      	cmp	r4, r6
   134f0:	f1a5 0508 	sub.w	r5, r5, #8
   134f4:	d1f5      	bne.n	134e2 <mayfly_init+0x12>
	while (callee_id--) {
   134f6:	3f04      	subs	r7, #4
   134f8:	1d3b      	adds	r3, r7, #4
   134fa:	f1a8 0820 	sub.w	r8, r8, #32
   134fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   13502:	d1eb      	bne.n	134dc <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   13504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13508:	20002cf4 	.word	0x20002cf4
   1350c:	20002d84 	.word	0x20002d84

00013510 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   13510:	b410      	push	{r4}
   13512:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   13514:	4c15      	ldr	r4, [pc, #84]	; (1356c <mayfly_enable+0x5c>)
{
   13516:	468c      	mov	ip, r1
	if (enable) {
   13518:	b192      	cbz	r2, 13540 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1351a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1351e:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   13522:	0100      	lsls	r0, r0, #4
   13524:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   13528:	4421      	add	r1, r4
   1352a:	7a48      	ldrb	r0, [r1, #9]
   1352c:	7a0c      	ldrb	r4, [r1, #8]
   1352e:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   13530:	bf04      	itt	eq
   13532:	3001      	addeq	r0, #1
   13534:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   13536:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   13538:	4661      	mov	r1, ip
   1353a:	4618      	mov	r0, r3
   1353c:	f00b bbba 	b.w	1ecb4 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   13540:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   13544:	0112      	lsls	r2, r2, #4
   13546:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1354a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1354e:	4423      	add	r3, r4
   13550:	7a9c      	ldrb	r4, [r3, #10]
   13552:	7ada      	ldrb	r2, [r3, #11]
   13554:	42a2      	cmp	r2, r4
   13556:	d001      	beq.n	1355c <mayfly_enable+0x4c>
}
   13558:	bc10      	pop	{r4}
   1355a:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   1355c:	3201      	adds	r2, #1
   1355e:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <mayfly_enable+0x60>)
   13562:	2201      	movs	r2, #1
   13564:	545a      	strb	r2, [r3, r1]
}
   13566:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   13568:	f00b bbfa 	b.w	1ed60 <mayfly_pend>
   1356c:	20002d00 	.word	0x20002d00
   13570:	20002cfc 	.word	0x20002cfc

00013574 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   13574:	b570      	push	{r4, r5, r6, lr}
   13576:	b082      	sub	sp, #8
   13578:	4606      	mov	r6, r0
   1357a:	9101      	str	r1, [sp, #4]
   1357c:	461c      	mov	r4, r3
   1357e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   13580:	b32a      	cbz	r2, 135ce <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   13582:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   13584:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   13586:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   13588:	f012 0203 	ands.w	r2, r2, #3
   1358c:	d005      	beq.n	1359a <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   1358e:	2a01      	cmp	r2, #1
   13590:	d042      	beq.n	13618 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   13592:	3301      	adds	r3, #1
   13594:	b2db      	uxtb	r3, r3
   13596:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   13598:	e00f      	b.n	135ba <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   1359a:	3301      	adds	r3, #1
   1359c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1359e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   135a0:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   135a2:	2304      	movs	r3, #4
   135a4:	fb11 3105 	smlabb	r1, r1, r5, r3
   135a8:	4a1c      	ldr	r2, [pc, #112]	; (1361c <mayfly_enqueue+0xa8>)
   135aa:	6860      	ldr	r0, [r4, #4]
   135ac:	230c      	movs	r3, #12
   135ae:	fb13 1306 	smlabb	r3, r3, r6, r1
   135b2:	441a      	add	r2, r3
   135b4:	4621      	mov	r1, r4
   135b6:	f7ff ff69 	bl	1348c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   135ba:	4b19      	ldr	r3, [pc, #100]	; (13620 <mayfly_enqueue+0xac>)
   135bc:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   135be:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   135c0:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   135c2:	4629      	mov	r1, r5
   135c4:	f00b fbcc 	bl	1ed60 <mayfly_pend>

	return 0;
   135c8:	2000      	movs	r0, #0
}
   135ca:	b002      	add	sp, #8
   135cc:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   135ce:	f00b fbb1 	bl	1ed34 <mayfly_prio_is_equal>
   135d2:	2800      	cmp	r0, #0
   135d4:	d0d5      	beq.n	13582 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   135d6:	4629      	mov	r1, r5
   135d8:	4630      	mov	r0, r6
   135da:	f00b fb8b 	bl	1ecf4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   135de:	2800      	cmp	r0, #0
   135e0:	d0cf      	beq.n	13582 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   135e2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   135e6:	0112      	lsls	r2, r2, #4
   135e8:	490c      	ldr	r1, [pc, #48]	; (1361c <mayfly_enqueue+0xa8>)
   135ea:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   135ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   135f2:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   135f4:	7a9a      	ldrb	r2, [r3, #10]
   135f6:	7adb      	ldrb	r3, [r3, #11]
   135f8:	429a      	cmp	r2, r3
   135fa:	d1c2      	bne.n	13582 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   135fc:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   135fe:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   13600:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   13602:	0792      	lsls	r2, r2, #30
   13604:	d002      	beq.n	1360c <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   13606:	3302      	adds	r3, #2
   13608:	b2db      	uxtb	r3, r3
   1360a:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   1360c:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   13610:	4798      	blx	r3
		return 0;
   13612:	2000      	movs	r0, #0
}
   13614:	b002      	add	sp, #8
   13616:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   13618:	4610      	mov	r0, r2
   1361a:	e7d6      	b.n	135ca <mayfly_enqueue+0x56>
   1361c:	20002d00 	.word	0x20002d00
   13620:	20002cfc 	.word	0x20002cfc

00013624 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   13624:	4a50      	ldr	r2, [pc, #320]	; (13768 <mayfly_run+0x144>)
   13626:	5c13      	ldrb	r3, [r2, r0]
   13628:	2b00      	cmp	r3, #0
   1362a:	f000 809b 	beq.w	13764 <mayfly_run+0x140>
{
   1362e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   13632:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   13634:	4f4d      	ldr	r7, [pc, #308]	; (1376c <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   13636:	5413      	strb	r3, [r2, r0]
{
   13638:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   1363a:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1363c:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   13640:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   13644:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   13648:	9303      	str	r3, [sp, #12]
   1364a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1364e:	f10b 0804 	add.w	r8, fp, #4
   13652:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   13656:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   1365a:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   1365c:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   13660:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   13662:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   13664:	f7ff ff1c 	bl	134a0 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   13668:	f107 0624 	add.w	r6, r7, #36	; 0x24
   1366c:	4683      	mov	fp, r0
   1366e:	2800      	cmp	r0, #0
   13670:	d034      	beq.n	136dc <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   13672:	9c05      	ldr	r4, [sp, #20]
   13674:	7863      	ldrb	r3, [r4, #1]
   13676:	7825      	ldrb	r5, [r4, #0]
   13678:	1aed      	subs	r5, r5, r3
   1367a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   1367e:	2d01      	cmp	r5, #1
   13680:	d106      	bne.n	13690 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   13682:	3b01      	subs	r3, #1
   13684:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   13686:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   1368a:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   1368c:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   1368e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   13690:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   13692:	1ac3      	subs	r3, r0, r3
   13694:	f003 0303 	and.w	r3, r3, #3
   13698:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   1369a:	f04f 0200 	mov.w	r2, #0
   1369e:	4631      	mov	r1, r6
	req = m->_req;
   136a0:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   136a4:	d00f      	beq.n	136c6 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   136a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   136a8:	f7ff ff02 	bl	134b0 <memq_dequeue>
		ack = m->_ack;
   136ac:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   136b0:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   136b2:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   136b6:	eba3 030c 	sub.w	r3, r3, ip
   136ba:	f003 0303 	and.w	r3, r3, #3
   136be:	2b01      	cmp	r3, #1
		m->_ack = req;
   136c0:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   136c4:	d046      	beq.n	13754 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   136c6:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   136ca:	aa05      	add	r2, sp, #20
   136cc:	f7ff fee8 	bl	134a0 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   136d0:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   136d2:	9000      	str	r0, [sp, #0]
   136d4:	4683      	mov	fp, r0
			if (state == 1U) {
   136d6:	d02b      	beq.n	13730 <mayfly_run+0x10c>
		while (link) {
   136d8:	2800      	cmp	r0, #0
   136da:	d1ca      	bne.n	13672 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   136dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   136e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   136e4:	429a      	cmp	r2, r3
   136e6:	d003      	beq.n	136f0 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   136e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   136ec:	2301      	movs	r3, #1
   136ee:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   136f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   136f4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   136f8:	429a      	cmp	r2, r3
   136fa:	d003      	beq.n	13704 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   136fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   13700:	2301      	movs	r3, #1
   13702:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   13704:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   13708:	fa5f f989 	uxtb.w	r9, r9
   1370c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   13710:	f1a7 070c 	sub.w	r7, r7, #12
   13714:	d1a1      	bne.n	1365a <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   13716:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   1371a:	b1c3      	cbz	r3, 1374e <mayfly_run+0x12a>
   1371c:	9b03      	ldr	r3, [sp, #12]
   1371e:	b9b3      	cbnz	r3, 1374e <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   13720:	461a      	mov	r2, r3
   13722:	4651      	mov	r1, sl
   13724:	4650      	mov	r0, sl
	}
}
   13726:	b007      	add	sp, #28
   13728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   1372c:	f00b bac2 	b.w	1ecb4 <mayfly_enable_cb>
				if (caller_id || link) {
   13730:	f1b9 0f00 	cmp.w	r9, #0
   13734:	d101      	bne.n	1373a <mayfly_run+0x116>
   13736:	2800      	cmp	r0, #0
   13738:	d0d0      	beq.n	136dc <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   1373a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1373e:	4a0a      	ldr	r2, [pc, #40]	; (13768 <mayfly_run+0x144>)
   13740:	2301      	movs	r3, #1
   13742:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   13746:	4651      	mov	r1, sl
   13748:	4650      	mov	r0, sl
   1374a:	f00b fb09 	bl	1ed60 <mayfly_pend>
}
   1374e:	b007      	add	sp, #28
   13750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   13754:	4642      	mov	r2, r8
   13756:	4621      	mov	r1, r4
   13758:	4658      	mov	r0, fp
			m->_ack = ack;
   1375a:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1375e:	f7ff fe95 	bl	1348c <memq_enqueue>
   13762:	e7b0      	b.n	136c6 <mayfly_run+0xa2>
   13764:	4770      	bx	lr
   13766:	bf00      	nop
   13768:	20002cfc 	.word	0x20002cfc
   1376c:	20002d00 	.word	0x20002d00

00013770 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   13770:	1e4b      	subs	r3, r1, #1
   13772:	b2db      	uxtb	r3, r3
   13774:	b171      	cbz	r1, 13794 <util_ones_count_get+0x24>
   13776:	1e41      	subs	r1, r0, #1
   13778:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   1377c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   1377e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   13782:	b123      	cbz	r3, 1378e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   13784:	1e5a      	subs	r2, r3, #1
			one_count++;
   13786:	3001      	adds	r0, #1
		while (bite) {
   13788:	4013      	ands	r3, r2
			one_count++;
   1378a:	b2c0      	uxtb	r0, r0
		while (bite) {
   1378c:	d1fa      	bne.n	13784 <util_ones_count_get+0x14>
	while (octets_len--) {
   1378e:	4561      	cmp	r1, ip
   13790:	d1f5      	bne.n	1377e <util_ones_count_get+0xe>
   13792:	4770      	bx	lr
	uint8_t one_count = 0U;
   13794:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   13796:	4770      	bx	lr

00013798 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   13798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   1379c:	4d48      	ldr	r5, [pc, #288]	; (138c0 <util_aa_le32+0x128>)
{
   1379e:	b083      	sub	sp, #12
   137a0:	4607      	mov	r7, r0
   137a2:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   137a4:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   137a6:	2104      	movs	r1, #4
   137a8:	4638      	mov	r0, r7
   137aa:	f009 f955 	bl	1ca58 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   137ae:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   137b0:	231e      	movs	r3, #30
   137b2:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
   137b6:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   137ba:	f04f 0901 	mov.w	r9, #1
   137be:	e00c      	b.n	137da <util_aa_le32+0x42>
			transitions++;
   137c0:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   137c4:	2b1b      	cmp	r3, #27
			transitions++;
   137c6:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   137c8:	d967      	bls.n	1389a <util_aa_le32+0x102>
				consecutive_cnt = 1U;
   137ca:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   137ce:	2919      	cmp	r1, #25
   137d0:	d04e      	beq.n	13870 <util_aa_le32+0xd8>
   137d2:	468e      	mov	lr, r1
   137d4:	4694      	mov	ip, r2
	while (bit_idx--) {
   137d6:	3b01      	subs	r3, #1
   137d8:	d31e      	bcc.n	13818 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
   137da:	fa20 f203 	lsr.w	r2, r0, r3
   137de:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   137e2:	4594      	cmp	ip, r2
   137e4:	d1ec      	bne.n	137c0 <util_aa_le32+0x28>
			consecutive_cnt++;
   137e6:	f109 0801 	add.w	r8, r9, #1
   137ea:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   137ee:	f1b8 0f06 	cmp.w	r8, #6
   137f2:	d90d      	bls.n	13810 <util_aa_le32+0x78>
   137f4:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
   137f6:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
   137fa:	b3a2      	cbz	r2, 13866 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
   137fc:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
   13800:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   13804:	4571      	cmp	r1, lr
   13806:	d1e6      	bne.n	137d6 <util_aa_le32+0x3e>
				transitions++;
   13808:	3101      	adds	r1, #1
   1380a:	b2c9      	uxtb	r1, r1
   1380c:	4662      	mov	r2, ip
   1380e:	e7dc      	b.n	137ca <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
   13810:	d149      	bne.n	138a6 <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   13812:	46c1      	mov	r9, r8
	while (bit_idx--) {
   13814:	3b01      	subs	r3, #1
   13816:	d2e0      	bcs.n	137da <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   13818:	ea80 0305 	eor.w	r3, r0, r5
   1381c:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   1381e:	f10d 0c04 	add.w	ip, sp, #4
   13822:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   13826:	2200      	movs	r2, #0
		bite = *octets;
   13828:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   1382c:	b123      	cbz	r3, 13838 <util_aa_le32+0xa0>
			bite &= (bite - 1);
   1382e:	1e59      	subs	r1, r3, #1
			one_count++;
   13830:	3201      	adds	r2, #1
		while (bite) {
   13832:	400b      	ands	r3, r1
			one_count++;
   13834:	b2d2      	uxtb	r2, r2
		while (bite) {
   13836:	d1fa      	bne.n	1382e <util_aa_le32+0x96>
	while (octets_len--) {
   13838:	45e6      	cmp	lr, ip
   1383a:	d1f5      	bne.n	13828 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   1383c:	2a01      	cmp	r2, #1
   1383e:	d909      	bls.n	13854 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   13840:	b283      	uxth	r3, r0
   13842:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   13846:	ea4f 4210 	mov.w	r2, r0, lsr #16
   1384a:	d11b      	bne.n	13884 <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   1384c:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   1384e:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   13852:	d117      	bne.n	13884 <util_aa_le32+0xec>
	if (!retry) {
   13854:	3e01      	subs	r6, #1
   13856:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1385a:	d1a4      	bne.n	137a6 <util_aa_le32+0xe>
		return -EFAULT;
   1385c:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   13860:	b003      	add	sp, #12
   13862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   13866:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
   1386a:	f04f 0c01 	mov.w	ip, #1
   1386e:	e7c9      	b.n	13804 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
   13870:	3301      	adds	r3, #1
   13872:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   13876:	b112      	cbz	r2, 1387e <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
   13878:	425b      	negs	r3, r3
   1387a:	4018      	ands	r0, r3
   1387c:	e7cc      	b.n	13818 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
   1387e:	3b01      	subs	r3, #1
   13880:	4318      	orrs	r0, r3
   13882:	e7c9      	b.n	13818 <util_aa_le32+0x80>
	dst[1] = val >> 8;
   13884:	f3c0 2107 	ubfx	r1, r0, #8, #8
   13888:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   1388a:	7038      	strb	r0, [r7, #0]
	return 0;
   1388c:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   1388e:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
   13890:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
   13892:	70fb      	strb	r3, [r7, #3]
}
   13894:	b003      	add	sp, #12
   13896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   1389a:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   1389e:	2901      	cmp	r1, #1
   138a0:	d9a9      	bls.n	137f6 <util_aa_le32+0x5e>
   138a2:	46c1      	mov	r9, r8
   138a4:	e793      	b.n	137ce <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
   138a6:	2b1c      	cmp	r3, #28
   138a8:	d904      	bls.n	138b4 <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
   138aa:	2b1b      	cmp	r3, #27
   138ac:	d906      	bls.n	138bc <util_aa_le32+0x124>
   138ae:	4694      	mov	ip, r2
   138b0:	46c1      	mov	r9, r8
   138b2:	e7af      	b.n	13814 <util_aa_le32+0x7c>
   138b4:	f1be 0f00 	cmp.w	lr, #0
   138b8:	d09c      	beq.n	137f4 <util_aa_le32+0x5c>
   138ba:	e7f6      	b.n	138aa <util_aa_le32+0x112>
   138bc:	4671      	mov	r1, lr
   138be:	e7ee      	b.n	1389e <util_aa_le32+0x106>
   138c0:	8e89bed6 	.word	0x8e89bed6

000138c4 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   138c4:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   138c6:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   138c8:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   138ca:	2bff      	cmp	r3, #255	; 0xff
   138cc:	d014      	beq.n	138f8 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   138ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   138d2:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   138d4:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   138d8:	d028      	beq.n	1392c <ticker_dequeue+0x68>
	total = 0U;
   138da:	f04f 0c00 	mov.w	ip, #0
   138de:	e001      	b.n	138e4 <ticker_dequeue+0x20>
		if (current == id) {
   138e0:	4299      	cmp	r1, r3
   138e2:	d00b      	beq.n	138fc <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   138e4:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   138e6:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   138e8:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   138ea:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   138ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   138f0:	44a4      	add	ip, r4
		ticker_current = &node[current];
   138f2:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   138f6:	d1f3      	bne.n	138e0 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   138f8:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   138fa:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   138fc:	4571      	cmp	r1, lr
   138fe:	d018      	beq.n	13932 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   13900:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   13902:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   13904:	fa0f fe8e 	sxth.w	lr, lr
   13908:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1390c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   13910:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   13914:	7813      	ldrb	r3, [r2, #0]
   13916:	2bff      	cmp	r3, #255	; 0xff
   13918:	d006      	beq.n	13928 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   1391a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1391e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   13922:	68ab      	ldr	r3, [r5, #8]
   13924:	4403      	add	r3, r0
   13926:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   13928:	4460      	add	r0, ip
}
   1392a:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   1392c:	469e      	mov	lr, r3
	total = 0U;
   1392e:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   13932:	7813      	ldrb	r3, [r2, #0]
   13934:	7743      	strb	r3, [r0, #29]
   13936:	e7e4      	b.n	13902 <ticker_dequeue+0x3e>

00013938 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   13938:	eba2 0c01 	sub.w	ip, r2, r1
   1393c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   13940:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   13942:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   13944:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   13946:	d10a      	bne.n	1395e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13948:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1394c:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1394e:	42a3      	cmp	r3, r4
   13950:	d914      	bls.n	1397c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   13952:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   13954:	2100      	movs	r1, #0
}
   13956:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   13958:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1395a:	6141      	str	r1, [r0, #20]
}
   1395c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1395e:	1a89      	subs	r1, r1, r2
   13960:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   13964:	428b      	cmp	r3, r1
   13966:	d806      	bhi.n	13976 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   13968:	4421      	add	r1, r4
   1396a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   1396c:	2300      	movs	r3, #0
}
   1396e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   13970:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   13972:	6141      	str	r1, [r0, #20]
}
   13974:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   13976:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   13978:	42a3      	cmp	r3, r4
   1397a:	d8ea      	bhi.n	13952 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   1397c:	1ae1      	subs	r1, r4, r3
   1397e:	e7f5      	b.n	1396c <ticks_to_expire_prep+0x34>

00013980 <ticker_job_list_insert>:
{
   13980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13984:	b087      	sub	sp, #28
   13986:	4603      	mov	r3, r0
	count_user = instance->count_user;
   13988:	7a42      	ldrb	r2, [r0, #9]
{
   1398a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   1398c:	6800      	ldr	r0, [r0, #0]
   1398e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   13990:	6858      	ldr	r0, [r3, #4]
   13992:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   13994:	2a00      	cmp	r2, #0
   13996:	f000 80f4 	beq.w	13b82 <ticker_job_list_insert+0x202>
   1399a:	1e53      	subs	r3, r2, #1
   1399c:	b2db      	uxtb	r3, r3
   1399e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   139a2:	460f      	mov	r7, r1
   139a4:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   139a6:	9b03      	ldr	r3, [sp, #12]
   139a8:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   139aa:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   139ac:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   139ae:	2fff      	cmp	r7, #255	; 0xff
   139b0:	d05e      	beq.n	13a70 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   139b2:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   139b6:	9b02      	ldr	r3, [sp, #8]
   139b8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   139bc:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   139be:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   139c2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   139c6:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   139c8:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   139ca:	f04f 09ff 	mov.w	r9, #255	; 0xff
   139ce:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   139d2:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   139d6:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   139d8:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   139dc:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   139de:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   139e2:	d10f      	bne.n	13a04 <ticker_job_list_insert+0x84>
   139e4:	e0c8      	b.n	13b78 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   139e6:	1a09      	subs	r1, r1, r0
   139e8:	d106      	bne.n	139f8 <ticker_job_list_insert+0x78>
   139ea:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   139ee:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   139f2:	45e2      	cmp	sl, ip
   139f4:	f200 8086 	bhi.w	13b04 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   139f8:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   139fc:	2bff      	cmp	r3, #255	; 0xff
   139fe:	4691      	mov	r9, r2
   13a00:	d072      	beq.n	13ae8 <ticker_job_list_insert+0x168>
   13a02:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   13a04:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   13a08:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   13a0c:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   13a0e:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13a12:	4288      	cmp	r0, r1
   13a14:	d9e7      	bls.n	139e6 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   13a16:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   13a1a:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   13a1e:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   13a22:	d166      	bne.n	13af2 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   13a24:	9b01      	ldr	r3, [sp, #4]
   13a26:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   13a2a:	2aff      	cmp	r2, #255	; 0xff
   13a2c:	d008      	beq.n	13a40 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   13a2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13a32:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   13a36:	f8de 3008 	ldr.w	r3, [lr, #8]
   13a3a:	1a5b      	subs	r3, r3, r1
   13a3c:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   13a40:	78a3      	ldrb	r3, [r4, #2]
   13a42:	3301      	adds	r3, #1
   13a44:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   13a46:	2d00      	cmp	r5, #0
   13a48:	d0b1      	beq.n	139ae <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13a4a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   13a4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13a50:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   13a52:	2200      	movs	r2, #0
   13a54:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   13a56:	b113      	cbz	r3, 13a5e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13a58:	6b29      	ldr	r1, [r5, #48]	; 0x30
   13a5a:	4610      	mov	r0, r2
   13a5c:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   13a5e:	6863      	ldr	r3, [r4, #4]
   13a60:	2b00      	cmp	r3, #0
   13a62:	d1a4      	bne.n	139ae <ticker_job_list_insert+0x2e>
					ticker->op_context =
   13a64:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   13a68:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   13a6a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   13a6e:	d1a0      	bne.n	139b2 <ticker_job_list_insert+0x32>
   13a70:	9b03      	ldr	r3, [sp, #12]
   13a72:	7898      	ldrb	r0, [r3, #2]
   13a74:	42b0      	cmp	r0, r6
   13a76:	d02f      	beq.n	13ad8 <ticker_job_list_insert+0x158>
   13a78:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   13a7c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   13a80:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   13a84:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13a88:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   13a8c:	3601      	adds	r6, #1
   13a8e:	b2f6      	uxtb	r6, r6
					first = 0U;
   13a90:	42b1      	cmp	r1, r6
   13a92:	bf08      	it	eq
   13a94:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13a96:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   13a98:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13a9c:	d11a      	bne.n	13ad4 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   13a9e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   13aa2:	9902      	ldr	r1, [sp, #8]
   13aa4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   13aa8:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   13aac:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   13ab0:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   13ab2:	7863      	ldrb	r3, [r4, #1]
   13ab4:	1a5b      	subs	r3, r3, r1
   13ab6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   13aba:	d025      	beq.n	13b08 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13abc:	f04f 0300 	mov.w	r3, #0
   13ac0:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   13ac4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13ac6:	2001      	movs	r0, #1
	user_op->status = status;
   13ac8:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   13aca:	b10b      	cbz	r3, 13ad0 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13acc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   13ace:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   13ad0:	f89b 0002 	ldrb.w	r0, [fp, #2]
   13ad4:	42b0      	cmp	r0, r6
   13ad6:	d1d1      	bne.n	13a7c <ticker_job_list_insert+0xfc>
	while (count_user--) {
   13ad8:	9a03      	ldr	r2, [sp, #12]
   13ada:	9905      	ldr	r1, [sp, #20]
   13adc:	4291      	cmp	r1, r2
   13ade:	f1a2 0308 	sub.w	r3, r2, #8
   13ae2:	d04e      	beq.n	13b82 <ticker_job_list_insert+0x202>
   13ae4:	9303      	str	r3, [sp, #12]
   13ae6:	e75e      	b.n	139a6 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   13ae8:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   13aec:	f88b 3000 	strb.w	r3, [fp]
   13af0:	461a      	mov	r2, r3
		node[previous].next = id;
   13af2:	fa0f f989 	sxth.w	r9, r9
   13af6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   13afa:	ea4f 1909 	mov.w	r9, r9, lsl #4
   13afe:	f80e 8009 	strb.w	r8, [lr, r9]
   13b02:	e792      	b.n	13a2a <ticker_job_list_insert+0xaa>
   13b04:	4601      	mov	r1, r0
   13b06:	e786      	b.n	13a16 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   13b08:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   13b0a:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   13b0c:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   13b10:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   13b12:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   13b16:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   13b1a:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   13b1c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   13b20:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   13b24:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   13b28:	d024      	beq.n	13b74 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   13b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13b2e:	1ad3      	subs	r3, r2, r3
   13b30:	fab3 f383 	clz	r3, r3
   13b34:	095b      	lsrs	r3, r3, #5
   13b36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   13b3a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   13b3e:	429a      	cmp	r2, r3
   13b40:	bf88      	it	hi
   13b42:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   13b44:	69ab      	ldr	r3, [r5, #24]
   13b46:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   13b48:	69eb      	ldr	r3, [r5, #28]
   13b4a:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   13b4c:	6a2b      	ldr	r3, [r5, #32]
   13b4e:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   13b50:	68ab      	ldr	r3, [r5, #8]
   13b52:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   13b54:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   13b56:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   13b58:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   13b5a:	686a      	ldr	r2, [r5, #4]
   13b5c:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   13b5e:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   13b60:	f7ff feea 	bl	13938 <ticks_to_expire_prep>
	ticker->force = 1U;
   13b64:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   13b68:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   13b6c:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   13b70:	70e3      	strb	r3, [r4, #3]
}
   13b72:	e729      	b.n	139c8 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   13b74:	461a      	mov	r2, r3
   13b76:	e7e5      	b.n	13b44 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   13b78:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   13b7c:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   13b80:	e75e      	b.n	13a40 <ticker_job_list_insert+0xc0>
}
   13b82:	b007      	add	sp, #28
   13b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013b88 <ticker_worker>:
{
   13b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   13b8c:	7f82      	ldrb	r2, [r0, #30]
{
   13b8e:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   13b90:	2301      	movs	r3, #1
	if (instance->job_guard) {
   13b92:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   13b94:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   13b96:	2a00      	cmp	r2, #0
   13b98:	d15b      	bne.n	13c52 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   13b9a:	7f43      	ldrb	r3, [r0, #29]
   13b9c:	2bff      	cmp	r3, #255	; 0xff
   13b9e:	4681      	mov	r9, r0
   13ba0:	d056      	beq.n	13c50 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   13ba2:	f00a fba7 	bl	1e2f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13ba6:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   13baa:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   13bae:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13bb2:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   13bb4:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13bb6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   13bba:	f000 813c 	beq.w	13e36 <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   13bbe:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   13bc2:	42bb      	cmp	r3, r7
   13bc4:	bf94      	ite	ls
   13bc6:	2300      	movls	r3, #0
   13bc8:	2301      	movhi	r3, #1
   13bca:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   13bcc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   13bd0:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   13bd4:	f000 8145 	beq.w	13e62 <ticker_worker+0x2da>
	ticks_expired = 0U;
   13bd8:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   13bdc:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   13be0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   13be4:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   13be8:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   13bec:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   13bee:	42bb      	cmp	r3, r7
   13bf0:	d837      	bhi.n	13c62 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   13bf2:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   13bf4:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   13bf8:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   13bfa:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   13bfc:	7863      	ldrb	r3, [r4, #1]
   13bfe:	1a5b      	subs	r3, r3, r1
   13c00:	b2db      	uxtb	r3, r3
   13c02:	2b01      	cmp	r3, #1
   13c04:	d12a      	bne.n	13c5c <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   13c06:	69a6      	ldr	r6, [r4, #24]
   13c08:	2e00      	cmp	r6, #0
   13c0a:	d054      	beq.n	13cb6 <ticker_worker+0x12e>
   13c0c:	9b03      	ldr	r3, [sp, #12]
   13c0e:	2b00      	cmp	r3, #0
   13c10:	d04c      	beq.n	13cac <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   13c12:	8be3      	ldrh	r3, [r4, #30]
   13c14:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   13c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   13c18:	b13b      	cbz	r3, 13c2a <ticker_worker+0xa2>
   13c1a:	681a      	ldr	r2, [r3, #0]
   13c1c:	b11a      	cbz	r2, 13c26 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   13c1e:	7a1a      	ldrb	r2, [r3, #8]
   13c20:	2a00      	cmp	r2, #0
   13c22:	f000 80ef 	beq.w	13e04 <ticker_worker+0x27c>
				ext_data->reschedule_state =
   13c26:	2200      	movs	r2, #0
   13c28:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   13c2a:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   13c2c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   13c30:	3201      	adds	r2, #1
   13c32:	b292      	uxth	r2, r2
   13c34:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   13c36:	b178      	cbz	r0, 13c58 <ticker_worker+0xd0>
   13c38:	8ba0      	ldrh	r0, [r4, #28]
   13c3a:	4290      	cmp	r0, r2
   13c3c:	d20c      	bcs.n	13c58 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   13c3e:	2b00      	cmp	r3, #0
   13c40:	f000 80fc 	beq.w	13e3c <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   13c44:	7a1a      	ldrb	r2, [r3, #8]
   13c46:	2a01      	cmp	r2, #1
   13c48:	d006      	beq.n	13c58 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   13c4a:	f04f 0c01 	mov.w	ip, #1
   13c4e:	e036      	b.n	13cbe <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   13c50:	77c2      	strb	r2, [r0, #31]
}
   13c52:	b00f      	add	sp, #60	; 0x3c
   13c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   13c58:	3901      	subs	r1, #1
   13c5a:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   13c5c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   13c60:	d1be      	bne.n	13be0 <ticker_worker+0x58>
   13c62:	f8dd 9010 	ldr.w	r9, [sp, #16]
   13c66:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   13c68:	f899 300b 	ldrb.w	r3, [r9, #11]
   13c6c:	f899 200a 	ldrb.w	r2, [r9, #10]
   13c70:	429a      	cmp	r2, r3
   13c72:	d10a      	bne.n	13c8a <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   13c74:	3201      	adds	r2, #1
   13c76:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   13c78:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   13c7a:	bf1c      	itt	ne
   13c7c:	4613      	movne	r3, r2
   13c7e:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   13c80:	9a06      	ldr	r2, [sp, #24]
   13c82:	f889 200b 	strb.w	r2, [r9, #11]
   13c86:	bf08      	it	eq
   13c88:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   13c8a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   13c8e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   13c92:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   13c94:	2200      	movs	r2, #0
   13c96:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   13c9a:	464b      	mov	r3, r9
   13c9c:	2201      	movs	r2, #1
   13c9e:	2104      	movs	r1, #4
   13ca0:	2003      	movs	r0, #3
   13ca2:	46a4      	mov	ip, r4
}
   13ca4:	b00f      	add	sp, #60	; 0x3c
   13ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   13caa:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   13cac:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   13cb0:	9307      	str	r3, [sp, #28]
   13cb2:	3380      	adds	r3, #128	; 0x80
   13cb4:	d141      	bne.n	13d3a <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   13cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13cb8:	b1f3      	cbz	r3, 13cf8 <ticker_worker+0x170>
   13cba:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   13cbe:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   13cc0:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   13cc2:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   13cc4:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   13cc6:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   13cc8:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   13cca:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   13ccc:	2d00      	cmp	r5, #0
   13cce:	d0c5      	beq.n	13c5c <ticker_worker+0xd4>
					   ticks_expired -
   13cd0:	9b04      	ldr	r3, [sp, #16]
   13cd2:	6960      	ldr	r0, [r4, #20]
   13cd4:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   13cd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13cd8:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   13cda:	ebaa 0000 	sub.w	r0, sl, r0
   13cde:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   13ce0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   13ce4:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   13ce6:	f1bc 0f00 	cmp.w	ip, #0
   13cea:	d016      	beq.n	13d1a <ticker_worker+0x192>
   13cec:	e9cd 3600 	strd	r3, r6, [sp]
   13cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13cf4:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   13cf6:	e7b1      	b.n	13c5c <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   13cf8:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   13cfa:	3901      	subs	r1, #1
   13cfc:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   13cfe:	2d00      	cmp	r5, #0
   13d00:	d0ac      	beq.n	13c5c <ticker_worker+0xd4>
			ticks_drift = 0U;
   13d02:	4619      	mov	r1, r3
					   ticks_expired -
   13d04:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   13d06:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13d08:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   13d0a:	ebaa 0003 	sub.w	r0, sl, r3
   13d0e:	9b04      	ldr	r3, [sp, #16]
   13d10:	695b      	ldr	r3, [r3, #20]
   13d12:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   13d14:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   13d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   13d1a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   13d1e:	e9cd 3600 	strd	r3, r6, [sp]
   13d22:	4663      	mov	r3, ip
   13d24:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   13d26:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   13d28:	2b00      	cmp	r3, #0
   13d2a:	9b03      	ldr	r3, [sp, #12]
   13d2c:	bf18      	it	ne
   13d2e:	2301      	movne	r3, #1
   13d30:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   13d32:	2300      	movs	r3, #0
   13d34:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   13d36:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   13d38:	e790      	b.n	13c5c <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   13d3a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   13d3e:	d0ba      	beq.n	13cb6 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   13d40:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   13d42:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   13d44:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   13d46:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   13d48:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   13d4a:	bf28      	it	cs
   13d4c:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   13d4e:	fb02 5005 	mla	r0, r2, r5, r5
   13d52:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   13d54:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   13d56:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   13d5a:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   13d5c:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   13d60:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   13d62:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   13d64:	46a0      	mov	r8, r4
   13d66:	f04f 0c00 	mov.w	ip, #0
   13d6a:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   13d6c:	b21b      	sxth	r3, r3
   13d6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13d72:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   13d76:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   13d78:	f8d2 e008 	ldr.w	lr, [r2, #8]
   13d7c:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   13d7e:	4566      	cmp	r6, ip
   13d80:	d339      	bcc.n	13df6 <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   13d82:	6991      	ldr	r1, [r2, #24]
   13d84:	b399      	cbz	r1, 13dee <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   13d86:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   13d88:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   13d8a:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   13d8e:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   13d92:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   13d94:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   13d96:	bf28      	it	cs
   13d98:	1a0d      	subcs	r5, r1, r0
					  0U :
   13d9a:	f1b9 0f00 	cmp.w	r9, #0
   13d9e:	d03e      	beq.n	13e1e <ticker_worker+0x296>
   13da0:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   13da4:	b3bc      	cbz	r4, 13e16 <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   13da6:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   13daa:	f8dd 9020 	ldr.w	r9, [sp, #32]
   13dae:	45f1      	cmp	r9, lr
   13db0:	bf8c      	ite	hi
   13db2:	f04f 0e01 	movhi.w	lr, #1
   13db6:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   13dba:	bf34      	ite	cc
   13dbc:	f04f 0901 	movcc.w	r9, #1
   13dc0:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   13dc4:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   13dc6:	f892 a003 	ldrb.w	sl, [r2, #3]
   13dca:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   13dce:	d30e      	bcc.n	13dee <ticker_worker+0x266>
   13dd0:	4592      	cmp	sl, r2
   13dd2:	d829      	bhi.n	13e28 <ticker_worker+0x2a0>
			    (next_force ||
   13dd4:	f117 0f80 	cmn.w	r7, #128	; 0x80
   13dd8:	d026      	beq.n	13e28 <ticker_worker+0x2a0>
			     next_is_critical ||
   13dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   13ddc:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   13dde:	4295      	cmp	r5, r2
   13de0:	dd02      	ble.n	13de8 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   13de2:	f1be 0f00 	cmp.w	lr, #0
   13de6:	d01f      	beq.n	13e28 <ticker_worker+0x2a0>
   13de8:	9a07      	ldr	r2, [sp, #28]
   13dea:	42ba      	cmp	r2, r7
   13dec:	d019      	beq.n	13e22 <ticker_worker+0x29a>
			id_head = ticker_next->next;
   13dee:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   13df2:	2bff      	cmp	r3, #255	; 0xff
   13df4:	d1ba      	bne.n	13d6c <ticker_worker+0x1e4>
   13df6:	4644      	mov	r4, r8
   13df8:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   13dfc:	990a      	ldr	r1, [sp, #40]	; 0x28
   13dfe:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   13e02:	e758      	b.n	13cb6 <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   13e04:	8ba2      	ldrh	r2, [r4, #28]
   13e06:	9805      	ldr	r0, [sp, #20]
   13e08:	4282      	cmp	r2, r0
   13e0a:	f63f af0c 	bhi.w	13c26 <ticker_worker+0x9e>
				ext_data->reschedule_state =
   13e0e:	f04f 0201 	mov.w	r2, #1
   13e12:	721a      	strb	r2, [r3, #8]
   13e14:	e709      	b.n	13c2a <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   13e16:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   13e1a:	46a1      	mov	r9, r4
   13e1c:	e7d2      	b.n	13dc4 <ticker_worker+0x23c>
					  0U :
   13e1e:	46ce      	mov	lr, r9
   13e20:	e7c0      	b.n	13da4 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   13e22:	f1b9 0f00 	cmp.w	r9, #0
   13e26:	d0e2      	beq.n	13dee <ticker_worker+0x266>
   13e28:	4644      	mov	r4, r8
   13e2a:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   13e2e:	990a      	ldr	r1, [sp, #40]	; 0x28
   13e30:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   13e34:	e6ef      	b.n	13c16 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   13e36:	9b06      	ldr	r3, [sp, #24]
   13e38:	9303      	str	r3, [sp, #12]
   13e3a:	e6c7      	b.n	13bcc <ticker_worker+0x44>
		if (ticker->timeout_func) {
   13e3c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   13e3e:	3901      	subs	r1, #1
   13e40:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   13e42:	2d00      	cmp	r5, #0
   13e44:	f43f af0a 	beq.w	13c5c <ticker_worker+0xd4>
			ticks_drift = 0U;
   13e48:	4619      	mov	r1, r3
					   ticks_expired -
   13e4a:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   13e4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13e4e:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   13e50:	ebaa 0003 	sub.w	r0, sl, r3
   13e54:	9b04      	ldr	r3, [sp, #16]
   13e56:	695b      	ldr	r3, [r3, #20]
   13e58:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   13e5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   13e5e:	78e3      	ldrb	r3, [r4, #3]
   13e60:	e744      	b.n	13cec <ticker_worker+0x164>
	ticks_expired = 0U;
   13e62:	2300      	movs	r3, #0
   13e64:	4619      	mov	r1, r3
   13e66:	e6ff      	b.n	13c68 <ticker_worker+0xe0>

00013e68 <ticker_job>:
	if (instance->worker_trigger) {
   13e68:	7fc3      	ldrb	r3, [r0, #31]
   13e6a:	2b00      	cmp	r3, #0
   13e6c:	f040 8431 	bne.w	146d2 <ticker_job+0x86a>
{
   13e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   13e74:	7f82      	ldrb	r2, [r0, #30]
{
   13e76:	b08d      	sub	sp, #52	; 0x34
   13e78:	4683      	mov	fp, r0
	if (instance->job_guard) {
   13e7a:	2a00      	cmp	r2, #0
   13e7c:	f040 808c 	bne.w	13f98 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   13e80:	7a83      	ldrb	r3, [r0, #10]
   13e82:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   13e84:	2001      	movs	r0, #1
   13e86:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   13e8a:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   13e8c:	f8db 0014 	ldr.w	r0, [fp, #20]
   13e90:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   13e92:	f000 8440 	beq.w	14716 <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
   13e96:	3301      	adds	r3, #1
   13e98:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   13e9a:	2b02      	cmp	r3, #2
		idx = 0U;
   13e9c:	bf08      	it	eq
   13e9e:	4613      	moveq	r3, r2
		ticks_elapsed =
   13ea0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   13ea4:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   13ea8:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   13eac:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   13eae:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   13eb0:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   13eb2:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   13eb4:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   13eb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   13eba:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   13ebe:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   13ec2:	f8db 3000 	ldr.w	r3, [fp]
   13ec6:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   13ec8:	f8db 3004 	ldr.w	r3, [fp, #4]
   13ecc:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   13ece:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   13ed0:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   13ed2:	b2db      	uxtb	r3, r3
   13ed4:	2a00      	cmp	r2, #0
   13ed6:	f000 81d5 	beq.w	14284 <ticker_job+0x41c>
		flag_elapsed = 1U;
   13eda:	2201      	movs	r2, #1
   13edc:	920b      	str	r2, [sp, #44]	; 0x2c
   13ede:	9a05      	ldr	r2, [sp, #20]
   13ee0:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   13ee4:	2300      	movs	r3, #0
   13ee6:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   13ee8:	23ff      	movs	r3, #255	; 0xff
   13eea:	9301      	str	r3, [sp, #4]
   13eec:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   13eee:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   13ef2:	f89a c003 	ldrb.w	ip, [sl, #3]
   13ef6:	f89a 7002 	ldrb.w	r7, [sl, #2]
   13efa:	4567      	cmp	r7, ip
   13efc:	d044      	beq.n	13f88 <ticker_job+0x120>
			if (middle == user->count_user_op) {
   13efe:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   13f02:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   13f04:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   13f06:	b2db      	uxtb	r3, r3
				middle = 0U;
   13f08:	429a      	cmp	r2, r3
   13f0a:	bf08      	it	eq
   13f0c:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   13f0e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   13f12:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   13f16:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   13f1a:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   13f1e:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   13f20:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   13f24:	d942      	bls.n	13fac <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   13f26:	2808      	cmp	r0, #8
   13f28:	d842      	bhi.n	13fb0 <ticker_job+0x148>
			ticker = &node[user_op->id];
   13f2a:	7861      	ldrb	r1, [r4, #1]
   13f2c:	9a00      	ldr	r2, [sp, #0]
   13f2e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   13f32:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   13f36:	786a      	ldrb	r2, [r5, #1]
   13f38:	f895 e002 	ldrb.w	lr, [r5, #2]
   13f3c:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   13f40:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   13f44:	d034      	beq.n	13fb0 <ticker_job+0x148>
			    (state == 0U) ||
   13f46:	2805      	cmp	r0, #5
   13f48:	d041      	beq.n	13fce <ticker_job+0x166>
			if (state == 1U) {
   13f4a:	2a01      	cmp	r2, #1
   13f4c:	f040 8118 	bne.w	14180 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   13f50:	2806      	cmp	r0, #6
   13f52:	d006      	beq.n	13f62 <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   13f54:	4658      	mov	r0, fp
   13f56:	f7ff fcb5 	bl	138c4 <ticker_dequeue>
			ticker->req = ticker->ack;
   13f5a:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   13f5c:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   13f5e:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   13f60:	7861      	ldrb	r1, [r4, #1]
   13f62:	f89b 301c 	ldrb.w	r3, [fp, #28]
   13f66:	428b      	cmp	r3, r1
   13f68:	f000 80d9 	beq.w	1411e <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13f6c:	2000      	movs	r0, #0
   13f6e:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   13f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   13f74:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   13f76:	b10b      	cbz	r3, 13f7c <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13f78:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13f7a:	4798      	blx	r3
		while (user->middle != user->last) {
   13f7c:	f89a c003 	ldrb.w	ip, [sl, #3]
   13f80:	f89a 7002 	ldrb.w	r7, [sl, #2]
   13f84:	4567      	cmp	r7, ip
   13f86:	d1ba      	bne.n	13efe <ticker_job+0x96>
	while (count_user--) {
   13f88:	9a05      	ldr	r2, [sp, #20]
   13f8a:	4552      	cmp	r2, sl
   13f8c:	f1aa 0308 	sub.w	r3, sl, #8
   13f90:	f000 8107 	beq.w	141a2 <ticker_job+0x33a>
   13f94:	469a      	mov	sl, r3
   13f96:	e7aa      	b.n	13eee <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   13f98:	6a44      	ldr	r4, [r0, #36]	; 0x24
   13f9a:	2104      	movs	r1, #4
   13f9c:	4603      	mov	r3, r0
   13f9e:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   13fa0:	2004      	movs	r0, #4
   13fa2:	46a4      	mov	ip, r4
}
   13fa4:	b00d      	add	sp, #52	; 0x34
   13fa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   13faa:	4760      	bx	ip
   13fac:	461f      	mov	r7, r3
   13fae:	e7a4      	b.n	13efa <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13fb0:	2200      	movs	r2, #0
   13fb2:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   13fb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   13fb8:	2001      	movs	r0, #1
   13fba:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   13fbc:	2a00      	cmp	r2, #0
   13fbe:	d0f5      	beq.n	13fac <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13fc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13fc2:	4790      	blx	r2
		while (user->middle != user->last) {
   13fc4:	f89a c003 	ldrb.w	ip, [sl, #3]
   13fc8:	f89a 7002 	ldrb.w	r7, [sl, #2]
   13fcc:	e795      	b.n	13efa <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   13fce:	6860      	ldr	r0, [r4, #4]
   13fd0:	b948      	cbnz	r0, 13fe6 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   13fd2:	68a0      	ldr	r0, [r4, #8]
   13fd4:	b938      	cbnz	r0, 13fe6 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   13fd6:	68e0      	ldr	r0, [r4, #12]
   13fd8:	b928      	cbnz	r0, 13fe6 <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   13fda:	6920      	ldr	r0, [r4, #16]
   13fdc:	b918      	cbnz	r0, 13fe6 <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   13fde:	6960      	ldr	r0, [r4, #20]
   13fe0:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   13fe4:	d0e4      	beq.n	13fb0 <ticker_job+0x148>
			if (state == 1U) {
   13fe6:	2a01      	cmp	r2, #1
   13fe8:	f040 80ca 	bne.w	14180 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   13fec:	4658      	mov	r0, fp
   13fee:	f7ff fc69 	bl	138c4 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   13ff2:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   13ff6:	60a8      	str	r0, [r5, #8]
   13ff8:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   13ffa:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   13ffc:	f00a f97a 	bl	1e2f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14000:	9b02      	ldr	r3, [sp, #8]
   14002:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   14004:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14006:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1400a:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   1400c:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   1400e:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   14010:	f240 80af 	bls.w	14172 <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   14014:	696b      	ldr	r3, [r5, #20]
   14016:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   14018:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   1401a:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1401e:	f1bc 0f00 	cmp.w	ip, #0
   14022:	d051      	beq.n	140c8 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   14024:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   14026:	2b00      	cmp	r3, #0
   14028:	d04e      	beq.n	140c8 <ticker_job+0x260>
		user_op->params.update.lazy--;
   1402a:	3b01      	subs	r3, #1
   1402c:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1402e:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   14030:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   14032:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   14034:	d223      	bcs.n	1407e <ticker_job+0x216>
   14036:	f10c 0e01 	add.w	lr, ip, #1
   1403a:	f8cd 8018 	str.w	r8, [sp, #24]
   1403e:	940a      	str	r4, [sp, #40]	; 0x28
   14040:	e018      	b.n	14074 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   14042:	6a69      	ldr	r1, [r5, #36]	; 0x24
   14044:	f8df 8228 	ldr.w	r8, [pc, #552]	; 14270 <ticker_job+0x408>
   14048:	4c8a      	ldr	r4, [pc, #552]	; (14274 <ticker_job+0x40c>)
   1404a:	4488      	add	r8, r1
   1404c:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1404e:	bf84      	itt	hi
   14050:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   14054:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   14058:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   1405a:	6a2c      	ldr	r4, [r5, #32]
   1405c:	bf94      	ite	ls
   1405e:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   14060:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   14064:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   14066:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   14068:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   1406a:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1406c:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   1406e:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   14070:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   14072:	d201      	bcs.n	14078 <ticker_job+0x210>
   14074:	429f      	cmp	r7, r3
   14076:	d3e4      	bcc.n	14042 <ticker_job+0x1da>
   14078:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1407c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1407e:	42bb      	cmp	r3, r7
   14080:	d221      	bcs.n	140c6 <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   14082:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   14086:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   1408a:	9006      	str	r0, [sp, #24]
   1408c:	940a      	str	r4, [sp, #40]	; 0x28
   1408e:	e005      	b.n	1409c <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   14090:	3301      	adds	r3, #1
   14092:	b29b      	uxth	r3, r3
   14094:	4660      	mov	r0, ip
   14096:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   14098:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1409a:	d011      	beq.n	140c0 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   1409c:	4874      	ldr	r0, [pc, #464]	; (14270 <ticker_job+0x408>)
   1409e:	4c75      	ldr	r4, [pc, #468]	; (14274 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   140a0:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   140a2:	1808      	adds	r0, r1, r0
   140a4:	42a0      	cmp	r0, r4
   140a6:	d8f3      	bhi.n	14090 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   140a8:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   140aa:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   140ac:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   140b0:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   140b2:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   140b6:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   140b8:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   140bc:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   140be:	d1ed      	bne.n	1409c <ticker_job+0x234>
   140c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   140c2:	6269      	str	r1, [r5, #36]	; 0x24
   140c4:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   140c6:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   140c8:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   140ca:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   140cc:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   140ce:	440a      	add	r2, r1
   140d0:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   140d2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   140d4:	4403      	add	r3, r0
   140d6:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   140d8:	b11a      	cbz	r2, 140e2 <ticker_job+0x27a>
   140da:	6813      	ldr	r3, [r2, #0]
   140dc:	b10b      	cbz	r3, 140e2 <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   140de:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   140e0:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   140e2:	464a      	mov	r2, r9
   140e4:	9902      	ldr	r1, [sp, #8]
   140e6:	4628      	mov	r0, r5
   140e8:	f7ff fc26 	bl	13938 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   140ec:	68e2      	ldr	r2, [r4, #12]
   140ee:	69ab      	ldr	r3, [r5, #24]
   140f0:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   140f2:	6922      	ldr	r2, [r4, #16]
   140f4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   140f6:	bf8c      	ite	hi
   140f8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   140fa:	2300      	movls	r3, #0
   140fc:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   140fe:	7da3      	ldrb	r3, [r4, #22]
   14100:	b103      	cbz	r3, 14104 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   14102:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   14104:	7de3      	ldrb	r3, [r4, #23]
   14106:	b113      	cbz	r3, 1410e <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   14108:	3b01      	subs	r3, #1
   1410a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   1410e:	9b01      	ldr	r3, [sp, #4]
   14110:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   14112:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   14114:	7862      	ldrb	r2, [r4, #1]
   14116:	9201      	str	r2, [sp, #4]
		ticker->req++;
   14118:	3301      	adds	r3, #1
   1411a:	706b      	strb	r3, [r5, #1]
   1411c:	e726      	b.n	13f6c <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1411e:	23ff      	movs	r3, #255	; 0xff
   14120:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   14124:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   14128:	2b06      	cmp	r3, #6
   1412a:	d013      	beq.n	14154 <ticker_job+0x2ec>
   1412c:	2b08      	cmp	r3, #8
   1412e:	d011      	beq.n	14154 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   14130:	f00a f8e0 	bl	1e2f4 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   14134:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   14138:	1a83      	subs	r3, r0, r2
   1413a:	021d      	lsls	r5, r3, #8
   1413c:	d410      	bmi.n	14160 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   1413e:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   14144:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   14146:	f8db 2018 	ldr.w	r2, [fp, #24]
   1414a:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   1414c:	bf88      	it	hi
   1414e:	f8cb 3018 	strhi.w	r3, [fp, #24]
   14152:	e70b      	b.n	13f6c <ticker_job+0x104>
				ticks_at_yield =
   14154:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   14156:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   1415a:	1a83      	subs	r3, r0, r2
   1415c:	021d      	lsls	r5, r3, #8
   1415e:	d5ee      	bpl.n	1413e <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14160:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   14162:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14164:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   14168:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   1416a:	bf34      	ite	cc
   1416c:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   1416e:	2300      	movcs	r3, #0
   14170:	e7e9      	b.n	14146 <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   14172:	696b      	ldr	r3, [r5, #20]
   14174:	1bda      	subs	r2, r3, r7
   14176:	1853      	adds	r3, r2, r1
   14178:	9304      	str	r3, [sp, #16]
   1417a:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   1417c:	2200      	movs	r2, #0
   1417e:	e74c      	b.n	1401a <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   14180:	2104      	movs	r1, #4
   14182:	465b      	mov	r3, fp
   14184:	2201      	movs	r2, #1
   14186:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   1418a:	4608      	mov	r0, r1
   1418c:	47a0      	blx	r4
	while (count_user--) {
   1418e:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   14190:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   14194:	2301      	movs	r3, #1
	while (count_user--) {
   14196:	4552      	cmp	r2, sl
				pending = 1U;
   14198:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   1419a:	f1aa 0308 	sub.w	r3, sl, #8
   1419e:	f47f aef9 	bne.w	13f94 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   141a2:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   141a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   141a8:	1a9b      	subs	r3, r3, r2
   141aa:	bf18      	it	ne
   141ac:	2301      	movne	r3, #1
   141ae:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   141b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141b2:	2b00      	cmp	r3, #0
   141b4:	d16a      	bne.n	1428c <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   141b6:	9901      	ldr	r1, [sp, #4]
   141b8:	4658      	mov	r0, fp
   141ba:	f7ff fbe1 	bl	13980 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   141be:	f89b 301d 	ldrb.w	r3, [fp, #29]
   141c2:	9300      	str	r3, [sp, #0]
   141c4:	9b00      	ldr	r3, [sp, #0]
   141c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   141c8:	4293      	cmp	r3, r2
   141ca:	f000 826c 	beq.w	146a6 <ticker_job+0x83e>
	if (!pending) {
   141ce:	9b08      	ldr	r3, [sp, #32]
   141d0:	2b00      	cmp	r3, #0
   141d2:	f000 81e6 	beq.w	145a2 <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   141d6:	f89b 301d 	ldrb.w	r3, [fp, #29]
   141da:	9300      	str	r3, [sp, #0]
   141dc:	9b00      	ldr	r3, [sp, #0]
   141de:	2bff      	cmp	r3, #255	; 0xff
   141e0:	f000 82c4 	beq.w	1476c <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
   141e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   141e6:	2bff      	cmp	r3, #255	; 0xff
   141e8:	f000 82cb 	beq.w	14782 <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
   141ec:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   141ee:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   141f2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 14278 <ticker_job+0x410>
   141f6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1427c <ticker_job+0x414>
   141fa:	4f21      	ldr	r7, [pc, #132]	; (14280 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   141fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   14200:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   14204:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   14206:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   14208:	f00a f874 	bl	1e2f4 <cntr_cnt_get>
		cc = instance->ticks_current;
   1420c:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14210:	1b03      	subs	r3, r0, r4
   14212:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   14216:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   14218:	42b3      	cmp	r3, r6
   1421a:	bf2c      	ite	cs
   1421c:	18e4      	addcs	r4, r4, r3
   1421e:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   14220:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   14224:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   14228:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   1422a:	4620      	mov	r0, r4
   1422c:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   1422e:	f00a f861 	bl	1e2f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14232:	eba0 030a 	sub.w	r3, r0, sl
   14236:	eba4 040a 	sub.w	r4, r4, sl
   1423a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1423e:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14240:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   14244:	42a3      	cmp	r3, r4
		i--;
   14246:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   1424a:	f240 8233 	bls.w	146b4 <ticker_job+0x84c>
		LL_ASSERT(i);
   1424e:	2d00      	cmp	r5, #0
   14250:	d1da      	bne.n	14208 <ticker_job+0x3a0>
   14252:	f640 133e 	movw	r3, #2366	; 0x93e
   14256:	464a      	mov	r2, r9
   14258:	4641      	mov	r1, r8
   1425a:	4638      	mov	r0, r7
   1425c:	f010 fcce 	bl	24bfc <printk>
   14260:	4040      	eors	r0, r0
   14262:	f380 8811 	msr	BASEPRI, r0
   14266:	f04f 0003 	mov.w	r0, #3
   1426a:	df02      	svc	2
   1426c:	e7cc      	b.n	14208 <ticker_job+0x3a0>
   1426e:	bf00      	nop
   14270:	ff172b5a 	.word	0xff172b5a
   14274:	7f172b59 	.word	0x7f172b59
   14278:	0002d23c 	.word	0x0002d23c
   1427c:	0002d340 	.word	0x0002d340
   14280:	0002d27c 	.word	0x0002d27c
	pending = 0U;
   14284:	9b06      	ldr	r3, [sp, #24]
   14286:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   14288:	23ff      	movs	r3, #255	; 0xff
   1428a:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   1428c:	f00a f832 	bl	1e2f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14290:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   14292:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14296:	1ac3      	subs	r3, r0, r3
   14298:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   1429c:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   1429e:	f8db 3000 	ldr.w	r3, [fp]
   142a2:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   142a4:	d050      	beq.n	14348 <ticker_job+0x4e0>
	ticks_expired = 0U;
   142a6:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   142a8:	f8df 8290 	ldr.w	r8, [pc, #656]	; 1453c <ticker_job+0x6d4>
   142ac:	f8df 9290 	ldr.w	r9, [pc, #656]	; 14540 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   142b0:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   142b2:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   142b4:	9a00      	ldr	r2, [sp, #0]
   142b6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   142ba:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   142be:	011b      	lsls	r3, r3, #4
   142c0:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   142c2:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   142c4:	429f      	cmp	r7, r3
   142c6:	f0c0 8243 	bcc.w	14750 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
   142ca:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   142cc:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   142d0:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
   142d4:	441a      	add	r2, r3
   142d6:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   142d8:	f8db 2018 	ldr.w	r2, [fp, #24]
   142dc:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   142de:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   142e2:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   142e6:	bf25      	ittet	cs
   142e8:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   142ec:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   142f0:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   142f2:	2300      	movcs	r3, #0
   142f4:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   142f8:	78a2      	ldrb	r2, [r4, #2]
   142fa:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   142fc:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   142fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   14300:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   14302:	1a9b      	subs	r3, r3, r2
   14304:	b2db      	uxtb	r3, r3
   14306:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   14308:	9b00      	ldr	r3, [sp, #0]
   1430a:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1430e:	b118      	cbz	r0, 14318 <ticker_job+0x4b0>
   14310:	9b05      	ldr	r3, [sp, #20]
   14312:	2b02      	cmp	r3, #2
   14314:	f000 8135 	beq.w	14582 <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
   14318:	2300      	movs	r3, #0
   1431a:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1431c:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   14320:	2d00      	cmp	r5, #0
   14322:	f040 80da 	bne.w	144da <ticker_job+0x672>
   14326:	b119      	cbz	r1, 14330 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   14328:	7a09      	ldrb	r1, [r1, #8]
   1432a:	2901      	cmp	r1, #1
   1432c:	f000 8111 	beq.w	14552 <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
   14330:	9b05      	ldr	r3, [sp, #20]
   14332:	b123      	cbz	r3, 1433e <ticker_job+0x4d6>
   14334:	2b01      	cmp	r3, #1
   14336:	d045      	beq.n	143c4 <ticker_job+0x55c>
   14338:	f1be 0f00 	cmp.w	lr, #0
   1433c:	d142      	bne.n	143c4 <ticker_job+0x55c>
			ticker->req = ticker->ack;
   1433e:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   14340:	f89b 601d 	ldrb.w	r6, [fp, #29]
   14344:	2eff      	cmp	r6, #255	; 0xff
   14346:	d1b5      	bne.n	142b4 <ticker_job+0x44c>
			flag_compare_update = 1U;
   14348:	9b06      	ldr	r3, [sp, #24]
   1434a:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   1434c:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   1434e:	4296      	cmp	r6, r2
   14350:	bf18      	it	ne
   14352:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   14354:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   14356:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   14358:	f7ff fb12 	bl	13980 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   1435c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   14360:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   14364:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   14368:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   1436a:	9b00      	ldr	r3, [sp, #0]
   1436c:	2bff      	cmp	r3, #255	; 0xff
   1436e:	d00f      	beq.n	14390 <ticker_job+0x528>
   14370:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   14372:	b233      	sxth	r3, r6
   14374:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14378:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   1437c:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   1437e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   14380:	b117      	cbz	r7, 14388 <ticker_job+0x520>
   14382:	7a39      	ldrb	r1, [r7, #8]
   14384:	2901      	cmp	r1, #1
   14386:	d025      	beq.n	143d4 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
   14388:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   1438c:	2eff      	cmp	r6, #255	; 0xff
   1438e:	d1f0      	bne.n	14372 <ticker_job+0x50a>
	return rescheduled;
   14390:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   14394:	2a00      	cmp	r2, #0
   14396:	f43f af15 	beq.w	141c4 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1439a:	9b00      	ldr	r3, [sp, #0]
   1439c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1439e:	428b      	cmp	r3, r1
   143a0:	f47f af15 	bne.w	141ce <ticker_job+0x366>
	if (!pending) {
   143a4:	9b08      	ldr	r3, [sp, #32]
   143a6:	2b00      	cmp	r3, #0
   143a8:	f47f af18 	bne.w	141dc <ticker_job+0x374>
	users = &instance->users[0];
   143ac:	f8db 3004 	ldr.w	r3, [fp, #4]
   143b0:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   143b2:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   143b6:	1e5f      	subs	r7, r3, #1
   143b8:	b2ff      	uxtb	r7, r7
   143ba:	2b00      	cmp	r3, #0
   143bc:	f43f af0e 	beq.w	141dc <ticker_job+0x374>
			flag_compare_update = 1U;
   143c0:	9206      	str	r2, [sp, #24]
   143c2:	e0fa      	b.n	145ba <ticker_job+0x752>
			    ticker->fp_op_func) {
   143c4:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   143c6:	2b00      	cmp	r3, #0
   143c8:	d0b9      	beq.n	1433e <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   143ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   143cc:	2001      	movs	r0, #1
   143ce:	4798      	blx	r3
			ticker->req = ticker->ack;
   143d0:	78a2      	ldrb	r2, [r4, #2]
   143d2:	e7b4      	b.n	1433e <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   143d4:	9b01      	ldr	r3, [sp, #4]
   143d6:	7f1b      	ldrb	r3, [r3, #28]
   143d8:	2bff      	cmp	r3, #255	; 0xff
   143da:	d04b      	beq.n	14474 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
   143dc:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   143de:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   143e0:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   143e2:	4293      	cmp	r3, r2
   143e4:	d946      	bls.n	14474 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
   143e6:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   143ea:	687a      	ldr	r2, [r7, #4]
   143ec:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   143ee:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   143f2:	1ad3      	subs	r3, r2, r3
   143f4:	9302      	str	r3, [sp, #8]
   143f6:	683b      	ldr	r3, [r7, #0]
   143f8:	429a      	cmp	r2, r3
   143fa:	f080 80bd 	bcs.w	14578 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   143fe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   14402:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   14406:	f000 80b7 	beq.w	14578 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   1440a:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   1440e:	45f0      	cmp	r8, lr
   14410:	f04f 0300 	mov.w	r3, #0
   14414:	d331      	bcc.n	1447a <ticker_job+0x612>
   14416:	46f1      	mov	r9, lr
   14418:	465a      	mov	r2, fp
   1441a:	461c      	mov	r4, r3
   1441c:	e01c      	b.n	14458 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
   1441e:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   14420:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   14422:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   14424:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   14426:	d909      	bls.n	1443c <ticker_job+0x5d4>
				window_end_ticks =
   14428:	4543      	cmp	r3, r8
   1442a:	bf28      	it	cs
   1442c:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   1442e:	4599      	cmp	r9, r3
   14430:	d204      	bcs.n	1443c <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
   14432:	ebb3 030e 	subs.w	r3, r3, lr
   14436:	d001      	beq.n	1443c <ticker_job+0x5d4>
   14438:	459c      	cmp	ip, r3
   1443a:	d91e      	bls.n	1447a <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
   1443c:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   1443e:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   14442:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   14446:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   14448:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   1444c:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   1444e:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   14452:	d012      	beq.n	1447a <ticker_job+0x612>
   14454:	45c8      	cmp	r8, r9
   14456:	d310      	bcc.n	1447a <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
   14458:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1445c:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   14460:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   14462:	6a81      	ldr	r1, [r0, #40]	; 0x28
   14464:	2900      	cmp	r1, #0
   14466:	d0da      	beq.n	1441e <ticker_job+0x5b6>
   14468:	7a09      	ldrb	r1, [r1, #8]
   1446a:	2901      	cmp	r1, #1
   1446c:	d1d7      	bne.n	1441e <ticker_job+0x5b6>
				ticker_id_iter = node->next;
   1446e:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   14472:	e7eb      	b.n	1444c <ticker_job+0x5e4>
		window_start_ticks = 0U;
   14474:	f04f 0c00 	mov.w	ip, #0
   14478:	e7b7      	b.n	143ea <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1447a:	9a02      	ldr	r2, [sp, #8]
   1447c:	441a      	add	r2, r3
   1447e:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   14480:	465c      	mov	r4, fp
   14482:	60ab      	str	r3, [r5, #8]
   14484:	f04f 0eff 	mov.w	lr, #255	; 0xff
   14488:	e000      	b.n	1448c <ticker_job+0x624>
   1448a:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   1448c:	b221      	sxth	r1, r4
   1448e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   14492:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   14496:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   14498:	f8dc 0008 	ldr.w	r0, [ip, #8]
   1449c:	4298      	cmp	r0, r3
   1449e:	f080 814d 	bcs.w	1473c <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
   144a2:	1a1b      	subs	r3, r3, r0
   144a4:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   144a6:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   144aa:	2aff      	cmp	r2, #255	; 0xff
   144ac:	46a6      	mov	lr, r4
   144ae:	d1ec      	bne.n	1448a <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   144b0:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   144b2:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   144b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   144ba:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   144bc:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   144c0:	f81a 3001 	ldrb.w	r3, [sl, r1]
   144c4:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   144c6:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   144ca:	8beb      	ldrh	r3, [r5, #30]
   144cc:	3b01      	subs	r3, #1
   144ce:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   144d0:	f04f 0302 	mov.w	r3, #2
   144d4:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   144d6:	2201      	movs	r2, #1
   144d8:	e747      	b.n	1436a <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   144da:	b111      	cbz	r1, 144e2 <ticker_job+0x67a>
   144dc:	7a0b      	ldrb	r3, [r1, #8]
   144de:	2b01      	cmp	r3, #1
   144e0:	d037      	beq.n	14552 <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
   144e2:	f1be 0f00 	cmp.w	lr, #0
   144e6:	d159      	bne.n	1459c <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   144e8:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   144ec:	4672      	mov	r2, lr
				while (count--) {
   144ee:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   144f0:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   144f4:	2100      	movs	r1, #0
   144f6:	9005      	str	r0, [sp, #20]
   144f8:	e004      	b.n	14504 <ticker_job+0x69c>
   144fa:	4628      	mov	r0, r5
				while (count--) {
   144fc:	3a01      	subs	r2, #1
					ticks_to_expire +=
   144fe:	4401      	add	r1, r0
				while (count--) {
   14500:	1c50      	adds	r0, r2, #1
   14502:	d00f      	beq.n	14524 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
   14504:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   14506:	eb03 0008 	add.w	r0, r3, r8
   1450a:	4548      	cmp	r0, r9
   1450c:	d8f5      	bhi.n	144fa <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1450e:	9805      	ldr	r0, [sp, #20]
   14510:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   14514:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   14516:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   1451a:	4401      	add	r1, r0
				while (count--) {
   1451c:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1451e:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   14522:	d1ef      	bne.n	14504 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
   14524:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   14528:	6263      	str	r3, [r4, #36]	; 0x24
   1452a:	2a00      	cmp	r2, #0
   1452c:	f000 80d2 	beq.w	146d4 <ticker_job+0x86c>
				lazy = 0U;
   14530:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   14532:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   14534:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   14536:	83e2      	strh	r2, [r4, #30]
   14538:	e00d      	b.n	14556 <ticker_job+0x6ee>
   1453a:	bf00      	nop
   1453c:	ff172b5a 	.word	0xff172b5a
   14540:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   14544:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   14548:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1454c:	2d00      	cmp	r5, #0
   1454e:	f43f aeeb 	beq.w	14328 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
   14552:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   14554:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   14556:	9b07      	ldr	r3, [sp, #28]
   14558:	9a02      	ldr	r2, [sp, #8]
   1455a:	f8db 1014 	ldr.w	r1, [fp, #20]
   1455e:	189a      	adds	r2, r3, r2
   14560:	4620      	mov	r0, r4
   14562:	f7ff f9e9 	bl	13938 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   14566:	9a00      	ldr	r2, [sp, #0]
   14568:	9904      	ldr	r1, [sp, #16]
   1456a:	9b01      	ldr	r3, [sp, #4]
   1456c:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   1456e:	7863      	ldrb	r3, [r4, #1]
   14570:	9601      	str	r6, [sp, #4]
   14572:	3301      	adds	r3, #1
   14574:	7063      	strb	r3, [r4, #1]
   14576:	e6e3      	b.n	14340 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   14578:	9b02      	ldr	r3, [sp, #8]
   1457a:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   1457c:	2300      	movs	r3, #0
   1457e:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   14580:	e7a3      	b.n	144ca <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   14582:	f1be 0f00 	cmp.w	lr, #0
   14586:	f47f aec7 	bne.w	14318 <ticker_job+0x4b0>
   1458a:	b111      	cbz	r1, 14592 <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1458c:	7a0b      	ldrb	r3, [r1, #8]
   1458e:	2b01      	cmp	r3, #1
   14590:	d0d8      	beq.n	14544 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
   14592:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   14596:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1459a:	e6bd      	b.n	14318 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
   1459c:	7062      	strb	r2, [r4, #1]
   1459e:	2200      	movs	r2, #0
   145a0:	e7a5      	b.n	144ee <ticker_job+0x686>
	count_user = instance->count_user;
   145a2:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   145a6:	f8db 2004 	ldr.w	r2, [fp, #4]
   145aa:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   145ac:	1e5f      	subs	r7, r3, #1
   145ae:	b2ff      	uxtb	r7, r7
   145b0:	2b00      	cmp	r3, #0
   145b2:	f43f ae10 	beq.w	141d6 <ticker_job+0x36e>
		flag_compare_update = 1U;
   145b6:	2301      	movs	r3, #1
   145b8:	9306      	str	r3, [sp, #24]
   145ba:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   145bc:	2600      	movs	r6, #0
   145be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   145c2:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   145c6:	787b      	ldrb	r3, [r7, #1]
   145c8:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   145ca:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
   145cc:	429a      	cmp	r2, r3
   145ce:	d10c      	bne.n	145ea <ticker_job+0x782>
   145d0:	e05b      	b.n	1468a <ticker_job+0x822>
	switch (uop->op) {
   145d2:	2b01      	cmp	r3, #1
   145d4:	d053      	beq.n	1467e <ticker_job+0x816>
			first = user->first + 1;
   145d6:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   145d8:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   145da:	3301      	adds	r3, #1
   145dc:	b2db      	uxtb	r3, r3
				first = 0U;
   145de:	4299      	cmp	r1, r3
   145e0:	bf08      	it	eq
   145e2:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   145e4:	429a      	cmp	r2, r3
			user->first = first;
   145e6:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   145e8:	d04f      	beq.n	1468a <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   145ea:	b21b      	sxth	r3, r3
   145ec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   145f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   145f4:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
   145f8:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   145fc:	2b02      	cmp	r3, #2
   145fe:	d017      	beq.n	14630 <ticker_job+0x7c8>
   14600:	2b03      	cmp	r3, #3
   14602:	d1e6      	bne.n	145d2 <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
   14604:	7843      	ldrb	r3, [r0, #1]
   14606:	f89b 2008 	ldrb.w	r2, [fp, #8]
   1460a:	429a      	cmp	r2, r3
   1460c:	d93a      	bls.n	14684 <ticker_job+0x81c>
			node[uop->id].priority =
   1460e:	f8db 2000 	ldr.w	r2, [fp]
   14612:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14616:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1461a:	7902      	ldrb	r2, [r0, #4]
   1461c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   14620:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   14622:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   14624:	b113      	cbz	r3, 1462c <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
   14626:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14628:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1462a:	4798      	blx	r3
   1462c:	78fa      	ldrb	r2, [r7, #3]
   1462e:	e7d2      	b.n	145d6 <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
   14630:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   14634:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   14638:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   1463c:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   14640:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   14644:	2aff      	cmp	r2, #255	; 0xff
   14646:	d003      	beq.n	14650 <ticker_job+0x7e8>
   14648:	f8d1 8000 	ldr.w	r8, [r1]
   1464c:	4598      	cmp	r8, r3
   1464e:	d023      	beq.n	14698 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
   14650:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   14654:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   14656:	f04f 0800 	mov.w	r8, #0
   1465a:	e00a      	b.n	14672 <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
   1465c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14660:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   14664:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   14666:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   1466a:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   1466c:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   1466e:	b911      	cbnz	r1, 14676 <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
   14670:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   14672:	2aff      	cmp	r2, #255	; 0xff
   14674:	d1f2      	bne.n	1465c <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
   14676:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   1467a:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   1467e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   14680:	6286      	str	r6, [r0, #40]	; 0x28
		break;
   14682:	e7cf      	b.n	14624 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
   14684:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   14688:	e7cb      	b.n	14622 <ticker_job+0x7ba>
	while (count_user--) {
   1468a:	9a01      	ldr	r2, [sp, #4]
   1468c:	42ba      	cmp	r2, r7
   1468e:	f1a7 0308 	sub.w	r3, r7, #8
   14692:	d00b      	beq.n	146ac <ticker_job+0x844>
   14694:	461f      	mov	r7, r3
   14696:	e796      	b.n	145c6 <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
   14698:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1469c:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   1469e:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   146a2:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   146a4:	e7e5      	b.n	14672 <ticker_job+0x80a>
	if (!pending) {
   146a6:	9b08      	ldr	r3, [sp, #32]
   146a8:	2b00      	cmp	r3, #0
   146aa:	d054      	beq.n	14756 <ticker_job+0x8ee>
	if (flag_compare_update) {
   146ac:	9b06      	ldr	r3, [sp, #24]
   146ae:	2b00      	cmp	r3, #0
   146b0:	f47f ad91 	bne.w	141d6 <ticker_job+0x36e>
	if (instance->worker_trigger) {
   146b4:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   146b8:	2200      	movs	r2, #0
   146ba:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   146be:	b12b      	cbz	r3, 146cc <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   146c0:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   146c4:	465b      	mov	r3, fp
   146c6:	2201      	movs	r2, #1
   146c8:	2103      	movs	r1, #3
   146ca:	e469      	b.n	13fa0 <ticker_job+0x138>
}
   146cc:	b00d      	add	sp, #52	; 0x34
   146ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d2:	4770      	bx	lr
					while (ticks_to_expire <
   146d4:	458a      	cmp	sl, r1
   146d6:	f67f af2c 	bls.w	14532 <ticker_job+0x6ca>
   146da:	1c68      	adds	r0, r5, #1
   146dc:	9405      	str	r4, [sp, #20]
   146de:	4604      	mov	r4, r0
   146e0:	e005      	b.n	146ee <ticker_job+0x886>
   146e2:	4628      	mov	r0, r5
						ticks_to_expire +=
   146e4:	4401      	add	r1, r0
						lazy++;
   146e6:	3201      	adds	r2, #1
					while (ticks_to_expire <
   146e8:	458a      	cmp	sl, r1
						lazy++;
   146ea:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   146ec:	d910      	bls.n	14710 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
   146ee:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   146f0:	eb03 0008 	add.w	r0, r3, r8
   146f4:	4548      	cmp	r0, r9
   146f6:	d8f4      	bhi.n	146e2 <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   146f8:	4620      	mov	r0, r4
   146fa:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   146fe:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   14700:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   14704:	3201      	adds	r2, #1
					while (ticks_to_expire <
   14706:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   14708:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   1470c:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1470e:	d8ee      	bhi.n	146ee <ticker_job+0x886>
   14710:	9c05      	ldr	r4, [sp, #20]
   14712:	6263      	str	r3, [r4, #36]	; 0x24
   14714:	e70d      	b.n	14532 <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
   14716:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   1471a:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1471e:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   14720:	f8db 3000 	ldr.w	r3, [fp]
   14724:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   14726:	f8db 3004 	ldr.w	r3, [fp, #4]
   1472a:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   1472c:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   1472e:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   14730:	b2db      	uxtb	r3, r3
   14732:	b3a1      	cbz	r1, 1479e <ticker_job+0x936>
		flag_elapsed = 0U;
   14734:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   14736:	9203      	str	r2, [sp, #12]
   14738:	f7ff bbd1 	b.w	13ede <ticker_job+0x76>
				node->ticks_to_expire -=
   1473c:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   1473e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   14742:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   14746:	f43f aec0 	beq.w	144ca <ticker_job+0x662>
   1474a:	fa0f f18e 	sxth.w	r1, lr
   1474e:	e6af      	b.n	144b0 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
   14750:	1bdb      	subs	r3, r3, r7
   14752:	60a3      	str	r3, [r4, #8]
			break;
   14754:	e5f8      	b.n	14348 <ticker_job+0x4e0>
	count_user = instance->count_user;
   14756:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1475a:	f8db 2004 	ldr.w	r2, [fp, #4]
   1475e:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   14760:	1e5f      	subs	r7, r3, #1
   14762:	b2ff      	uxtb	r7, r7
   14764:	2b00      	cmp	r3, #0
   14766:	f47f af28 	bne.w	145ba <ticker_job+0x752>
   1476a:	e79f      	b.n	146ac <ticker_job+0x844>
		if (cntr_stop() == 0) {
   1476c:	f009 fd9c 	bl	1e2a8 <cntr_stop>
   14770:	2800      	cmp	r0, #0
   14772:	d19f      	bne.n	146b4 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
   14774:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   14778:	f009 fdbc 	bl	1e2f4 <cntr_cnt_get>
   1477c:	f8cb 0014 	str.w	r0, [fp, #20]
   14780:	e798      	b.n	146b4 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
   14782:	f009 fdb7 	bl	1e2f4 <cntr_cnt_get>
   14786:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   14788:	f009 fd7e 	bl	1e288 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   1478c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   14790:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   14792:	2800      	cmp	r0, #0
   14794:	f47f ad2a 	bne.w	141ec <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   14798:	f8cb 4014 	str.w	r4, [fp, #20]
   1479c:	e526      	b.n	141ec <ticker_job+0x384>
	insert_head = TICKER_NULL;
   1479e:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   147a0:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   147a2:	9301      	str	r3, [sp, #4]
   147a4:	e507      	b.n	141b6 <ticker_job+0x34e>
   147a6:	bf00      	nop

000147a8 <ticker_init>:
{
   147a8:	b4f0      	push	{r4, r5, r6, r7}
   147aa:	9d04      	ldr	r5, [sp, #16]
   147ac:	f89d 7014 	ldrb.w	r7, [sp, #20]
   147b0:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   147b2:	2800      	cmp	r0, #0
   147b4:	d137      	bne.n	14826 <ticker_init+0x7e>
	instance->count_node = count_node;
   147b6:	4e1d      	ldr	r6, [pc, #116]	; (1482c <ticker_init+0x84>)
	while (count_node--) {
   147b8:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   147bc:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   147be:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   147c0:	fa5f fc8c 	uxtb.w	ip, ip
   147c4:	b149      	cbz	r1, 147da <ticker_init+0x32>
   147c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   147ca:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   147ce:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   147d0:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   147d4:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   147d8:	d1f9      	bne.n	147ce <ticker_init+0x26>
	while (count_user--) {
   147da:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   147dc:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   147de:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   147e0:	b2d2      	uxtb	r2, r2
   147e2:	b183      	cbz	r3, 14806 <ticker_init+0x5e>
   147e4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   147e8:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   147ea:	4610      	mov	r0, r2
   147ec:	f812 3908 	ldrb.w	r3, [r2], #-8
   147f0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   147f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   147f8:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   147fa:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   147fe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   14802:	b2df      	uxtb	r7, r3
	while (count_user--) {
   14804:	d1f0      	bne.n	147e8 <ticker_init+0x40>
	if (count_op) {
   14806:	b977      	cbnz	r7, 14826 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   14808:	9a07      	ldr	r2, [sp, #28]
   1480a:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   1480c:	9a08      	ldr	r2, [sp, #32]
   1480e:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   14810:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   14814:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14816:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   14818:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   1481a:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1481e:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   14820:	8177      	strh	r7, [r6, #10]
}
   14822:	bcf0      	pop	{r4, r5, r6, r7}
   14824:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   14826:	2001      	movs	r0, #1
}
   14828:	bcf0      	pop	{r4, r5, r6, r7}
   1482a:	4770      	bx	lr
   1482c:	20002dc0 	.word	0x20002dc0

00014830 <ticker_trigger>:
	if (instance->sched_cb) {
   14830:	4b0a      	ldr	r3, [pc, #40]	; (1485c <ticker_trigger+0x2c>)
   14832:	222c      	movs	r2, #44	; 0x2c
   14834:	fb02 3200 	mla	r2, r2, r0, r3
{
   14838:	b410      	push	{r4}
	if (instance->sched_cb) {
   1483a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   1483c:	b15c      	cbz	r4, 14856 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   1483e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   14842:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   14846:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1484a:	46a4      	mov	ip, r4
   1484c:	2201      	movs	r2, #1
}
   1484e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   14850:	2103      	movs	r1, #3
   14852:	2002      	movs	r0, #2
   14854:	4760      	bx	ip
}
   14856:	bc10      	pop	{r4}
   14858:	4770      	bx	lr
   1485a:	bf00      	nop
   1485c:	20002dc0 	.word	0x20002dc0

00014860 <ticker_start_ext>:
{
   14860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   14864:	4e28      	ldr	r6, [pc, #160]	; (14908 <ticker_start_ext+0xa8>)
{
   14866:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   1486a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1486c:	252c      	movs	r5, #44	; 0x2c
   1486e:	fb05 6504 	mla	r5, r5, r4, r6
{
   14872:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   14874:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   14878:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   1487c:	6869      	ldr	r1, [r5, #4]
   1487e:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   14882:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   14886:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   1488a:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   1488e:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   14890:	f10e 0c01 	add.w	ip, lr, #1
   14894:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   14898:	4564      	cmp	r4, ip
   1489a:	bf98      	it	ls
   1489c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   148a0:	4561      	cmp	r1, ip
   148a2:	d02e      	beq.n	14902 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   148a4:	6879      	ldr	r1, [r7, #4]
   148a6:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   148aa:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   148ae:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   148b2:	f04f 0904 	mov.w	r9, #4
   148b6:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   148ba:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   148bc:	9b08      	ldr	r3, [sp, #32]
   148be:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   148c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   148c2:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   148c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   148c6:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   148c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   148ca:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   148cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   148ce:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   148d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   148d2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   148d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   148d6:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   148d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   148da:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   148dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   148de:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   148e0:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   148e2:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   148e4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   148e6:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   148ea:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   148ee:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   148f2:	4798      	blx	r3
   148f4:	4633      	mov	r3, r6
   148f6:	4649      	mov	r1, r9
   148f8:	2200      	movs	r2, #0
   148fa:	47a8      	blx	r5
	return user_op->status;
   148fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   148fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   14902:	2001      	movs	r0, #1
}
   14904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14908:	20002dc0 	.word	0x20002dc0

0001490c <ticker_start>:
{
   1490c:	b510      	push	{r4, lr}
   1490e:	b08a      	sub	sp, #40	; 0x28
   14910:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14912:	9400      	str	r4, [sp, #0]
{
   14914:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14916:	9401      	str	r4, [sp, #4]
{
   14918:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1491a:	9402      	str	r4, [sp, #8]
{
   1491c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14920:	9403      	str	r4, [sp, #12]
{
   14922:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14924:	9404      	str	r4, [sp, #16]
{
   14926:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14928:	9405      	str	r4, [sp, #20]
{
   1492a:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1492c:	9406      	str	r4, [sp, #24]
{
   1492e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14930:	9407      	str	r4, [sp, #28]
{
   14932:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14934:	9408      	str	r4, [sp, #32]
   14936:	2400      	movs	r4, #0
   14938:	9409      	str	r4, [sp, #36]	; 0x24
   1493a:	f7ff ff91 	bl	14860 <ticker_start_ext>
}
   1493e:	b00a      	add	sp, #40	; 0x28
   14940:	bd10      	pop	{r4, pc}
   14942:	bf00      	nop

00014944 <ticker_update_ext>:
{
   14944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   14948:	4d28      	ldr	r5, [pc, #160]	; (149ec <ticker_update_ext+0xa8>)
{
   1494a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   1494e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   14952:	4604      	mov	r4, r0
   14954:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   14956:	212c      	movs	r1, #44	; 0x2c
   14958:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   1495c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   14960:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   14964:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   14968:	684c      	ldr	r4, [r1, #4]
   1496a:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1496e:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   14972:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   14976:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   14978:	f10e 0c01 	add.w	ip, lr, #1
   1497c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   14980:	45e1      	cmp	r9, ip
   14982:	bf98      	it	ls
   14984:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   14988:	4564      	cmp	r4, ip
{
   1498a:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   1498e:	d02a      	beq.n	149e6 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   14990:	f8d6 a004 	ldr.w	sl, [r6, #4]
   14994:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   14998:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1499c:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   149a0:	f04f 0b05 	mov.w	fp, #5
   149a4:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   149a8:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   149aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   149ac:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   149ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   149b0:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   149b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   149b4:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   149b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   149b8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   149ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   149bc:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   149be:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   149c0:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   149c2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   149c4:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   149c6:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   149ca:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   149ce:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   149d2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   149d6:	4798      	blx	r3
   149d8:	462b      	mov	r3, r5
   149da:	2200      	movs	r2, #0
   149dc:	2104      	movs	r1, #4
   149de:	47b0      	blx	r6
	return user_op->status;
   149e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   149e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   149e6:	2001      	movs	r0, #1
}
   149e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149ec:	20002dc0 	.word	0x20002dc0

000149f0 <ticker_update>:
{
   149f0:	b510      	push	{r4, lr}
   149f2:	b088      	sub	sp, #32
   149f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   149f6:	9400      	str	r4, [sp, #0]
{
   149f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   149fa:	9401      	str	r4, [sp, #4]
{
   149fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   149fe:	9402      	str	r4, [sp, #8]
{
   14a00:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   14a04:	9403      	str	r4, [sp, #12]
{
   14a06:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   14a0a:	9404      	str	r4, [sp, #16]
{
   14a0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   14a0e:	9405      	str	r4, [sp, #20]
{
   14a10:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   14a12:	9406      	str	r4, [sp, #24]
   14a14:	2400      	movs	r4, #0
   14a16:	9407      	str	r4, [sp, #28]
   14a18:	f7ff ff94 	bl	14944 <ticker_update_ext>
}
   14a1c:	b008      	add	sp, #32
   14a1e:	bd10      	pop	{r4, pc}

00014a20 <ticker_stop>:
{
   14a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   14a24:	4c1e      	ldr	r4, [pc, #120]	; (14aa0 <ticker_stop+0x80>)
{
   14a26:	4684      	mov	ip, r0
   14a28:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   14a2a:	212c      	movs	r1, #44	; 0x2c
   14a2c:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   14a30:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   14a34:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   14a38:	684d      	ldr	r5, [r1, #4]
   14a3a:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   14a3e:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   14a42:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   14a46:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   14a48:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   14a4c:	f10e 0c01 	add.w	ip, lr, #1
   14a50:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   14a54:	4567      	cmp	r7, ip
   14a56:	bf98      	it	ls
   14a58:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   14a5c:	4565      	cmp	r5, ip
   14a5e:	d01c      	beq.n	14a9a <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   14a60:	6877      	ldr	r7, [r6, #4]
   14a62:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   14a66:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   14a6a:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   14a6e:	f04f 0807 	mov.w	r8, #7
   14a72:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   14a76:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   14a78:	9b06      	ldr	r3, [sp, #24]
   14a7a:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   14a7c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   14a7e:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   14a80:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   14a82:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   14a86:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   14a8a:	4798      	blx	r3
   14a8c:	4623      	mov	r3, r4
   14a8e:	2200      	movs	r2, #0
   14a90:	2104      	movs	r1, #4
   14a92:	47b0      	blx	r6
	return user_op->status;
   14a94:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   14a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   14a9a:	2001      	movs	r0, #1
}
   14a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14aa0:	20002dc0 	.word	0x20002dc0

00014aa4 <ticker_next_slot_get>:
{
   14aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   14aa8:	4d20      	ldr	r5, [pc, #128]	; (14b2c <ticker_next_slot_get+0x88>)
{
   14aaa:	4684      	mov	ip, r0
   14aac:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   14aae:	212c      	movs	r1, #44	; 0x2c
   14ab0:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   14ab4:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   14ab8:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   14abc:	684c      	ldr	r4, [r1, #4]
   14abe:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   14ac2:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   14ac6:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   14aca:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   14acc:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   14ad0:	f10e 0c01 	add.w	ip, lr, #1
   14ad4:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   14ad8:	4567      	cmp	r7, ip
   14ada:	bf98      	it	ls
   14adc:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   14ae0:	4564      	cmp	r4, ip
   14ae2:	d020      	beq.n	14b26 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   14ae4:	6877      	ldr	r7, [r6, #4]
   14ae6:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   14aea:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   14aee:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   14af2:	f64f 7802 	movw	r8, #65282	; 0xff02
   14af6:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   14afa:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   14afe:	9b06      	ldr	r3, [sp, #24]
   14b00:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   14b02:	9b07      	ldr	r3, [sp, #28]
   14b04:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   14b06:	9b08      	ldr	r3, [sp, #32]
   14b08:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   14b0a:	2302      	movs	r3, #2
   14b0c:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   14b0e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   14b12:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   14b16:	4798      	blx	r3
   14b18:	462b      	mov	r3, r5
   14b1a:	2200      	movs	r2, #0
   14b1c:	2104      	movs	r1, #4
   14b1e:	47b0      	blx	r6
	return user_op->status;
   14b20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   14b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   14b26:	2001      	movs	r0, #1
}
   14b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b2c:	20002dc0 	.word	0x20002dc0

00014b30 <ticker_job_sched>:
{
   14b30:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   14b32:	4d0a      	ldr	r5, [pc, #40]	; (14b5c <ticker_job_sched+0x2c>)
   14b34:	222c      	movs	r2, #44	; 0x2c
   14b36:	fb02 5200 	mla	r2, r2, r0, r5
   14b3a:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   14b3e:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   14b40:	4608      	mov	r0, r1
   14b42:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   14b44:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14b48:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   14b4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   14b50:	46b4      	mov	ip, r6
   14b52:	2200      	movs	r2, #0
}
   14b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   14b58:	2104      	movs	r1, #4
   14b5a:	4760      	bx	ip
   14b5c:	20002dc0 	.word	0x20002dc0

00014b60 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   14b60:	f009 bbc8 	b.w	1e2f4 <cntr_cnt_get>

00014b64 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14b64:	1a40      	subs	r0, r0, r1
}
   14b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14b6a:	4770      	bx	lr

00014b6c <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   14b6c:	b570      	push	{r4, r5, r6, lr}
   14b6e:	4604      	mov	r4, r0
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   14b70:	2000      	movs	r0, #0
{
   14b72:	460e      	mov	r6, r1
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   14b74:	f003 f89a 	bl	17cac <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   14b78:	f010 0506 	ands.w	r5, r0, #6
   14b7c:	d10e      	bne.n	14b9c <ll_addr_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   14b7e:	b134      	cbz	r4, 14b8e <ll_addr_set+0x22>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   14b80:	2206      	movs	r2, #6
   14b82:	4631      	mov	r1, r6
   14b84:	4806      	ldr	r0, [pc, #24]	; (14ba0 <ll_addr_set+0x34>)
   14b86:	f013 fd16 	bl	285b6 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   14b8a:	4628      	mov	r0, r5
}
   14b8c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   14b8e:	2206      	movs	r2, #6
   14b90:	4631      	mov	r1, r6
   14b92:	4804      	ldr	r0, [pc, #16]	; (14ba4 <ll_addr_set+0x38>)
   14b94:	f013 fd0f 	bl	285b6 <memcpy>
	return 0;
   14b98:	4620      	mov	r0, r4
}
   14b9a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14b9c:	200c      	movs	r0, #12
}
   14b9e:	bd70      	pop	{r4, r5, r6, pc}
   14ba0:	20002df4 	.word	0x20002df4
   14ba4:	20002dec 	.word	0x20002dec

00014ba8 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   14ba8:	2801      	cmp	r0, #1
{
   14baa:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   14bac:	d805      	bhi.n	14bba <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   14bae:	4a04      	ldr	r2, [pc, #16]	; (14bc0 <ll_addr_get+0x18>)
   14bb0:	4804      	ldr	r0, [pc, #16]	; (14bc4 <ll_addr_get+0x1c>)
   14bb2:	2b00      	cmp	r3, #0
   14bb4:	bf18      	it	ne
   14bb6:	4610      	movne	r0, r2
   14bb8:	4770      	bx	lr
		return NULL;
   14bba:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   14bbc:	4770      	bx	lr
   14bbe:	bf00      	nop
   14bc0:	20002df4 	.word	0x20002df4
   14bc4:	20002dec 	.word	0x20002dec

00014bc8 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   14bc8:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   14bca:	b510      	push	{r4, lr}
   14bcc:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   14bce:	d80b      	bhi.n	14be8 <ll_addr_read+0x20>
	if (addr_type) {
   14bd0:	4608      	mov	r0, r1
		return rnd_addr;
   14bd2:	4c07      	ldr	r4, [pc, #28]	; (14bf0 <ll_addr_read+0x28>)
   14bd4:	4907      	ldr	r1, [pc, #28]	; (14bf4 <ll_addr_read+0x2c>)
   14bd6:	2b00      	cmp	r3, #0
   14bd8:	bf18      	it	ne
   14bda:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   14bdc:	2206      	movs	r2, #6
   14bde:	4621      	mov	r1, r4
   14be0:	f013 fce9 	bl	285b6 <memcpy>
	}

	return addr;
}
   14be4:	4620      	mov	r0, r4
   14be6:	bd10      	pop	{r4, pc}
		return NULL;
   14be8:	2400      	movs	r4, #0
}
   14bea:	4620      	mov	r0, r4
   14bec:	bd10      	pop	{r4, pc}
   14bee:	bf00      	nop
   14bf0:	20002dec 	.word	0x20002dec
   14bf4:	20002df4 	.word	0x20002df4

00014bf8 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   14bf8:	2802      	cmp	r0, #2
   14bfa:	d001      	beq.n	14c00 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   14bfc:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   14bfe:	4770      	bx	lr
{
   14c00:	b538      	push	{r3, r4, r5, lr}
   14c02:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   14c04:	4608      	mov	r0, r1
   14c06:	461d      	mov	r5, r3
   14c08:	f003 fcbe 	bl	18588 <ll_connected_get>
			if (!conn) {
   14c0c:	b118      	cbz	r0, 14c16 <ll_tx_pwr_lvl_get+0x1e>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   14c0e:	2308      	movs	r3, #8
   14c10:	702b      	strb	r3, [r5, #0]
	return BT_HCI_ERR_SUCCESS;
   14c12:	2000      	movs	r0, #0
}
   14c14:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14c16:	4620      	mov	r0, r4
}
   14c18:	bd38      	pop	{r3, r4, r5, pc}
   14c1a:	bf00      	nop

00014c1c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   14c1c:	2308      	movs	r3, #8
   14c1e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   14c20:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   14c22:	4770      	bx	lr

00014c24 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   14c24:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   14c26:	4802      	ldr	r0, [pc, #8]	; (14c30 <hci_driver_init+0xc>)
   14c28:	f7f8 f856 	bl	ccd8 <bt_hci_driver_register>

	return 0;
}
   14c2c:	2000      	movs	r0, #0
   14c2e:	bd08      	pop	{r3, pc}
   14c30:	0002d36c 	.word	0x0002d36c

00014c34 <hci_driver_send>:
{
   14c34:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   14c36:	8983      	ldrh	r3, [r0, #12]
{
   14c38:	b089      	sub	sp, #36	; 0x24
	if (!buf->len) {
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	d044      	beq.n	14cc8 <hci_driver_send+0x94>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14c3e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   14c40:	4604      	mov	r4, r0
   14c42:	b1e3      	cbz	r3, 14c7e <hci_driver_send+0x4a>
   14c44:	2b02      	cmp	r3, #2
   14c46:	d008      	beq.n	14c5a <hci_driver_send+0x26>
		BT_ERR("Unknown HCI type %u", type);
   14c48:	4828      	ldr	r0, [pc, #160]	; (14cec <hci_driver_send+0xb8>)
   14c4a:	6802      	ldr	r2, [r0, #0]
   14c4c:	0752      	lsls	r2, r2, #29
   14c4e:	d12a      	bne.n	14ca6 <hci_driver_send+0x72>
		return -EINVAL;
   14c50:	f06f 0515 	mvn.w	r5, #21
}
   14c54:	4628      	mov	r0, r5
   14c56:	b009      	add	sp, #36	; 0x24
   14c58:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   14c5a:	a902      	add	r1, sp, #8
   14c5c:	f001 f808 	bl	15c70 <hci_acl_handle>
	if (evt) {
   14c60:	9b02      	ldr	r3, [sp, #8]
	err = hci_acl_handle(buf, &evt);
   14c62:	4605      	mov	r5, r0
	if (evt) {
   14c64:	b113      	cbz	r3, 14c6c <hci_driver_send+0x38>
		bt_recv_prio(evt);
   14c66:	4618      	mov	r0, r3
   14c68:	f7f8 f818 	bl	cc9c <bt_recv_prio>
	if (!err) {
   14c6c:	2d00      	cmp	r5, #0
   14c6e:	d1f1      	bne.n	14c54 <hci_driver_send+0x20>
		net_buf_unref(buf);
   14c70:	4620      	mov	r0, r4
   14c72:	f00a fafb 	bl	1f26c <net_buf_unref>
   14c76:	2500      	movs	r5, #0
}
   14c78:	4628      	mov	r0, r5
   14c7a:	b009      	add	sp, #36	; 0x24
   14c7c:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   14c7e:	a902      	add	r1, sp, #8
	struct node_rx_pdu *node_rx = NULL;
   14c80:	9302      	str	r3, [sp, #8]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   14c82:	f000 fae3 	bl	1524c <hci_cmd_handle>
	if (evt) {
   14c86:	2800      	cmp	r0, #0
   14c88:	d0f2      	beq.n	14c70 <hci_driver_send+0x3c>
		bt_recv_prio(evt);
   14c8a:	f7f8 f807 	bl	cc9c <bt_recv_prio>
		if (node_rx) {
   14c8e:	9d02      	ldr	r5, [sp, #8]
   14c90:	2d00      	cmp	r5, #0
   14c92:	d0ed      	beq.n	14c70 <hci_driver_send+0x3c>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   14c94:	4628      	mov	r0, r5
   14c96:	f001 fd71 	bl	1677c <hci_get_class>
   14c9a:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   14c9c:	9902      	ldr	r1, [sp, #8]
   14c9e:	4814      	ldr	r0, [pc, #80]	; (14cf0 <hci_driver_send+0xbc>)
   14ca0:	f016 fcc8 	bl	2b634 <k_queue_append>
	if (!err) {
   14ca4:	e7e4      	b.n	14c70 <hci_driver_send+0x3c>
		BT_ERR("Unknown HCI type %u", type);
   14ca6:	4913      	ldr	r1, [pc, #76]	; (14cf4 <hci_driver_send+0xc0>)
   14ca8:	2203      	movs	r2, #3
	switch (type) {
   14caa:	e9cd 1306 	strd	r1, r3, [sp, #24]
		BT_ERR("Unknown HCI type %u", type);
   14cae:	9201      	str	r2, [sp, #4]
   14cb0:	9205      	str	r2, [sp, #20]
   14cb2:	2300      	movs	r3, #0
   14cb4:	aa05      	add	r2, sp, #20
   14cb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14cba:	f010 ff91 	bl	25be0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   14cbe:	f06f 0515 	mvn.w	r5, #21
}
   14cc2:	4628      	mov	r0, r5
   14cc4:	b009      	add	sp, #36	; 0x24
   14cc6:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Empty HCI packet");
   14cc8:	4808      	ldr	r0, [pc, #32]	; (14cec <hci_driver_send+0xb8>)
   14cca:	6802      	ldr	r2, [r0, #0]
   14ccc:	0751      	lsls	r1, r2, #29
   14cce:	d0bf      	beq.n	14c50 <hci_driver_send+0x1c>
   14cd0:	2202      	movs	r2, #2
   14cd2:	4909      	ldr	r1, [pc, #36]	; (14cf8 <hci_driver_send+0xc4>)
   14cd4:	9106      	str	r1, [sp, #24]
   14cd6:	9201      	str	r2, [sp, #4]
   14cd8:	9205      	str	r2, [sp, #20]
   14cda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cde:	aa05      	add	r2, sp, #20
   14ce0:	f010 ff7e 	bl	25be0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   14ce4:	f06f 0515 	mvn.w	r5, #21
		BT_ERR("Empty HCI packet");
   14ce8:	e7b4      	b.n	14c54 <hci_driver_send+0x20>
   14cea:	bf00      	nop
   14cec:	200009b0 	.word	0x200009b0
   14cf0:	20000bd0 	.word	0x20000bd0
   14cf4:	0002d2c0 	.word	0x0002d2c0
   14cf8:	0002d2ac 	.word	0x0002d2ac

00014cfc <recv_thread>:
{
   14cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   14cfe:	4e41      	ldr	r6, [pc, #260]	; (14e04 <recv_thread+0x108>)
		LL_ASSERT(0);
   14d00:	4f41      	ldr	r7, [pc, #260]	; (14e08 <recv_thread+0x10c>)
{
   14d02:	b083      	sub	sp, #12
   14d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d0c:	4630      	mov	r0, r6
   14d0e:	f00e fea1 	bl	23a54 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   14d12:	2800      	cmp	r0, #0
   14d14:	d0f6      	beq.n	14d04 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   14d16:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   14d18:	9001      	str	r0, [sp, #4]
	switch (class) {
   14d1a:	2b04      	cmp	r3, #4
   14d1c:	d821      	bhi.n	14d62 <recv_thread+0x66>
   14d1e:	2b00      	cmp	r3, #0
   14d20:	d14b      	bne.n	14dba <recv_thread+0xbe>
		LL_ASSERT(0);
   14d22:	493a      	ldr	r1, [pc, #232]	; (14e0c <recv_thread+0x110>)
   14d24:	483a      	ldr	r0, [pc, #232]	; (14e10 <recv_thread+0x114>)
   14d26:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   14d2a:	463a      	mov	r2, r7
   14d2c:	f00f ff66 	bl	24bfc <printk>
   14d30:	4040      	eors	r0, r0
   14d32:	f380 8811 	msr	BASEPRI, r0
   14d36:	f04f 0003 	mov.w	r0, #3
   14d3a:	df02      	svc	2
	node_rx->hdr.next = NULL;
   14d3c:	9b01      	ldr	r3, [sp, #4]
   14d3e:	2200      	movs	r2, #0
   14d40:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   14d42:	a801      	add	r0, sp, #4
   14d44:	f002 f954 	bl	16ff0 <ll_rx_mem_release>
   14d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d50:	4630      	mov	r0, r6
   14d52:	f00e fe7f 	bl	23a54 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   14d56:	2800      	cmp	r0, #0
   14d58:	d0d4      	beq.n	14d04 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   14d5a:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   14d5c:	9001      	str	r0, [sp, #4]
	switch (class) {
   14d5e:	2b04      	cmp	r3, #4
   14d60:	d9dd      	bls.n	14d1e <recv_thread+0x22>
   14d62:	2b05      	cmp	r3, #5
   14d64:	d1dd      	bne.n	14d22 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   14d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d6e:	2003      	movs	r0, #3
   14d70:	f7f6 fc82 	bl	b678 <bt_buf_get_rx>
   14d74:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   14d76:	4621      	mov	r1, r4
   14d78:	9801      	ldr	r0, [sp, #4]
   14d7a:	f001 f855 	bl	15e28 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   14d7e:	9b01      	ldr	r3, [sp, #4]
   14d80:	2200      	movs	r2, #0
   14d82:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   14d84:	a801      	add	r0, sp, #4
   14d86:	f002 f933 	bl	16ff0 <ll_rx_mem_release>
		while (buf) {
   14d8a:	2c00      	cmp	r4, #0
   14d8c:	d0ba      	beq.n	14d04 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   14d8e:	4620      	mov	r0, r4
   14d90:	f015 fdf9 	bl	2a986 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   14d94:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   14d96:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   14d98:	2000      	movs	r0, #0
   14d9a:	f015 fe1a 	bl	2a9d2 <net_buf_frag_del>
			if (frag->len) {
   14d9e:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   14da0:	4604      	mov	r4, r0
				bt_recv(frag);
   14da2:	4628      	mov	r0, r5
			if (frag->len) {
   14da4:	b133      	cbz	r3, 14db4 <recv_thread+0xb8>
				bt_recv(frag);
   14da6:	f7f7 feb3 	bl	cb10 <bt_recv>
	z_impl_k_yield();
   14daa:	f00f fae3 	bl	24374 <z_impl_k_yield>
		while (buf) {
   14dae:	2c00      	cmp	r4, #0
   14db0:	d1ed      	bne.n	14d8e <recv_thread+0x92>
   14db2:	e7a7      	b.n	14d04 <recv_thread+0x8>
				net_buf_unref(frag);
   14db4:	f00a fa5a 	bl	1f26c <net_buf_unref>
   14db8:	e7f7      	b.n	14daa <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   14dba:	2b02      	cmp	r3, #2
   14dbc:	d013      	beq.n	14de6 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   14dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14dc6:	2001      	movs	r0, #1
   14dc8:	f7f6 fc56 	bl	b678 <bt_buf_get_rx>
   14dcc:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   14dce:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   14dd0:	b19c      	cbz	r4, 14dfa <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   14dd2:	4621      	mov	r1, r4
   14dd4:	f001 f862 	bl	15e9c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	2200      	movs	r2, #0
   14ddc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   14dde:	a801      	add	r0, sp, #4
   14de0:	f002 f906 	bl	16ff0 <ll_rx_mem_release>
		while (buf) {
   14de4:	e7d3      	b.n	14d8e <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   14de6:	2200      	movs	r2, #0
   14de8:	2300      	movs	r3, #0
   14dea:	2101      	movs	r1, #1
   14dec:	2000      	movs	r0, #0
   14dee:	f7f6 fc6d 	bl	b6cc <bt_buf_get_evt>
   14df2:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   14df4:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   14df6:	2c00      	cmp	r4, #0
   14df8:	d1eb      	bne.n	14dd2 <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   14dfa:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   14dfc:	a801      	add	r0, sp, #4
   14dfe:	f002 f8f7 	bl	16ff0 <ll_rx_mem_release>
		while (buf) {
   14e02:	e77f      	b.n	14d04 <recv_thread+0x8>
   14e04:	20000bd0 	.word	0x20000bd0
   14e08:	0002d2d4 	.word	0x0002d2d4
   14e0c:	0002d314 	.word	0x0002d314
   14e10:	0002d27c 	.word	0x0002d27c

00014e14 <prio_recv_thread>:
{
   14e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   14e18:	4f2e      	ldr	r7, [pc, #184]	; (14ed4 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   14e1a:	4e2f      	ldr	r6, [pc, #188]	; (14ed8 <prio_recv_thread+0xc4>)
{
   14e1c:	b082      	sub	sp, #8
   14e1e:	e00c      	b.n	14e3a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   14e20:	f7f6 fc54 	bl	b6cc <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   14e24:	4622      	mov	r2, r4
   14e26:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   14e2a:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   14e2c:	f001 fc8e 	bl	1674c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   14e30:	4620      	mov	r0, r4
   14e32:	f7f7 ff33 	bl	cc9c <bt_recv_prio>
	z_impl_k_yield();
   14e36:	f00f fa9d 	bl	24374 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   14e3a:	f10d 0102 	add.w	r1, sp, #2
   14e3e:	a801      	add	r0, sp, #4
   14e40:	f001 ff80 	bl	16d44 <ll_rx_get>
   14e44:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   14e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e4e:	2100      	movs	r1, #0
   14e50:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   14e52:	2c00      	cmp	r4, #0
   14e54:	d1e4      	bne.n	14e20 <prio_recv_thread+0xc>
		if (node_rx) {
   14e56:	9b01      	ldr	r3, [sp, #4]
   14e58:	b1b3      	cbz	r3, 14e88 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   14e5a:	f002 f855 	bl	16f08 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   14e5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   14e62:	4640      	mov	r0, r8
   14e64:	f001 fc8a 	bl	1677c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   14e68:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   14e6a:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   14e6e:	796b      	ldrb	r3, [r5, #5]
   14e70:	2b03      	cmp	r3, #3
   14e72:	d102      	bne.n	14e7a <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   14e74:	792b      	ldrb	r3, [r5, #4]
   14e76:	2b17      	cmp	r3, #23
   14e78:	d00e      	beq.n	14e98 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   14e7a:	4629      	mov	r1, r5
   14e7c:	4630      	mov	r0, r6
   14e7e:	f016 fbd9 	bl	2b634 <k_queue_append>
		if (iso_received || node_rx) {
   14e82:	9b01      	ldr	r3, [sp, #4]
   14e84:	2b00      	cmp	r3, #0
   14e86:	d1d8      	bne.n	14e3a <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   14e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e90:	4638      	mov	r0, r7
   14e92:	f00e fe39 	bl	23b08 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   14e96:	e7d0      	b.n	14e3a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   14e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e9c:	4621      	mov	r1, r4
   14e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ea2:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   14ea4:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   14ea8:	f7f6 fc10 	bl	b6cc <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   14eac:	4641      	mov	r1, r8
   14eae:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   14eb0:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   14eb2:	f105 001c 	add.w	r0, r5, #28
   14eb6:	f000 ff8f 	bl	15dd8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   14eba:	4640      	mov	r0, r8
   14ebc:	f000 ffac 	bl	15e18 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   14ec0:	4620      	mov	r0, r4
			if (buf) {
   14ec2:	b124      	cbz	r4, 14ece <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   14ec4:	f7f7 feea 	bl	cc9c <bt_recv_prio>
					net_buf_unref(buf);
   14ec8:	4620      	mov	r0, r4
   14eca:	f00a f9cf 	bl	1f26c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   14ece:	9d01      	ldr	r5, [sp, #4]
   14ed0:	e7d3      	b.n	14e7a <prio_recv_thread+0x66>
   14ed2:	bf00      	nop
   14ed4:	20000ba0 	.word	0x20000ba0
   14ed8:	20000bd0 	.word	0x20000bd0

00014edc <hci_driver_open>:
{
   14edc:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   14ede:	4825      	ldr	r0, [pc, #148]	; (14f74 <hci_driver_open+0x98>)
{
   14ee0:	b090      	sub	sp, #64	; 0x40
	err = ll_init(&sem_prio_recv);
   14ee2:	f002 fcb1 	bl	17848 <ll_init>
	if (err) {
   14ee6:	4604      	mov	r4, r0
   14ee8:	b130      	cbz	r0, 14ef8 <hci_driver_open+0x1c>
		BT_ERR("LL initialization failed: %d", err);
   14eea:	4823      	ldr	r0, [pc, #140]	; (14f78 <hci_driver_open+0x9c>)
   14eec:	6803      	ldr	r3, [r0, #0]
   14eee:	075b      	lsls	r3, r3, #29
   14ef0:	d131      	bne.n	14f56 <hci_driver_open+0x7a>
}
   14ef2:	4620      	mov	r0, r4
   14ef4:	b010      	add	sp, #64	; 0x40
   14ef6:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
   14ef8:	f001 fc56 	bl	167a8 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   14efc:	2600      	movs	r6, #0
   14efe:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14f00:	f06f 0209 	mvn.w	r2, #9
   14f04:	e9cd 2403 	strd	r2, r4, [sp, #12]
   14f08:	e9cd 6706 	strd	r6, r7, [sp, #24]
   14f0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14f10:	4b1a      	ldr	r3, [pc, #104]	; (14f7c <hci_driver_open+0xa0>)
   14f12:	491b      	ldr	r1, [pc, #108]	; (14f80 <hci_driver_open+0xa4>)
   14f14:	9400      	str	r4, [sp, #0]
   14f16:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   14f1a:	481a      	ldr	r0, [pc, #104]	; (14f84 <hci_driver_open+0xa8>)
   14f1c:	f00e fc3a 	bl	23794 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14f20:	4919      	ldr	r1, [pc, #100]	; (14f88 <hci_driver_open+0xac>)
   14f22:	4818      	ldr	r0, [pc, #96]	; (14f84 <hci_driver_open+0xa8>)
   14f24:	f00e fb84 	bl	23630 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14f28:	f06f 0207 	mvn.w	r2, #7
   14f2c:	e9cd 2403 	strd	r2, r4, [sp, #12]
   14f30:	e9cd 6706 	strd	r6, r7, [sp, #24]
   14f34:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14f38:	4b14      	ldr	r3, [pc, #80]	; (14f8c <hci_driver_open+0xb0>)
   14f3a:	4915      	ldr	r1, [pc, #84]	; (14f90 <hci_driver_open+0xb4>)
   14f3c:	9400      	str	r4, [sp, #0]
   14f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14f42:	4814      	ldr	r0, [pc, #80]	; (14f94 <hci_driver_open+0xb8>)
   14f44:	f00e fc26 	bl	23794 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14f48:	4913      	ldr	r1, [pc, #76]	; (14f98 <hci_driver_open+0xbc>)
   14f4a:	4812      	ldr	r0, [pc, #72]	; (14f94 <hci_driver_open+0xb8>)
   14f4c:	f00e fb70 	bl	23630 <z_impl_k_thread_name_set>
}
   14f50:	4620      	mov	r0, r4
   14f52:	b010      	add	sp, #64	; 0x40
   14f54:	bdd0      	pop	{r4, r6, r7, pc}
		BT_ERR("LL initialization failed: %d", err);
   14f56:	4a11      	ldr	r2, [pc, #68]	; (14f9c <hci_driver_open+0xc0>)
   14f58:	2303      	movs	r3, #3
   14f5a:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
   14f5e:	9309      	str	r3, [sp, #36]	; 0x24
   14f60:	930d      	str	r3, [sp, #52]	; 0x34
   14f62:	2300      	movs	r3, #0
   14f64:	aa0d      	add	r2, sp, #52	; 0x34
   14f66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f6a:	f010 fe39 	bl	25be0 <z_impl_z_log_msg2_static_create>
}
   14f6e:	4620      	mov	r0, r4
   14f70:	b010      	add	sp, #64	; 0x40
   14f72:	bdd0      	pop	{r4, r6, r7, pc}
   14f74:	20000ba0 	.word	0x20000ba0
   14f78:	200009b0 	.word	0x200009b0
   14f7c:	00014e15 	.word	0x00014e15
   14f80:	20007220 	.word	0x20007220
   14f84:	20001d38 	.word	0x20001d38
   14f88:	0002d338 	.word	0x0002d338
   14f8c:	00014cfd 	.word	0x00014cfd
   14f90:	20007400 	.word	0x20007400
   14f94:	20001df0 	.word	0x20001df0
   14f98:	0002d344 	.word	0x0002d344
   14f9c:	0002d318 	.word	0x0002d318

00014fa0 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   14fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   14fa4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 15050 <dup_found.part.0+0xb0>
   14fa8:	f8d9 3000 	ldr.w	r3, [r9]
   14fac:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   14fae:	4680      	mov	r8, r0
   14fb0:	460f      	mov	r7, r1
   14fb2:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   14fb4:	dd12      	ble.n	14fdc <dup_found.part.0+0x3c>
   14fb6:	4c27      	ldr	r4, [pc, #156]	; (15054 <dup_found.part.0+0xb4>)
   14fb8:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   14fba:	4621      	mov	r1, r4
   14fbc:	2206      	movs	r2, #6
   14fbe:	4630      	mov	r0, r6
   14fc0:	f013 fad0 	bl	28564 <memcmp>
   14fc4:	b918      	cbnz	r0, 14fce <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   14fc6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   14fca:	42bb      	cmp	r3, r7
   14fcc:	d029      	beq.n	15022 <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
   14fce:	f8d9 3000 	ldr.w	r3, [r9]
   14fd2:	3501      	adds	r5, #1
   14fd4:	429d      	cmp	r5, r3
   14fd6:	f104 0408 	add.w	r4, r4, #8
   14fda:	dbee      	blt.n	14fba <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   14fdc:	4d1e      	ldr	r5, [pc, #120]	; (15058 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   14fde:	4c1f      	ldr	r4, [pc, #124]	; (1505c <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
   14fe0:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   14fe4:	4631      	mov	r1, r6
   14fe6:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   14fea:	1c70      	adds	r0, r6, #1
   14fec:	4420      	add	r0, r4
   14fee:	2206      	movs	r2, #6
   14ff0:	f013 fae1 	bl	285b6 <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
   14ff4:	2301      	movs	r3, #1
   14ff6:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   14ffa:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   14ffe:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
   15002:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   15004:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   15006:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1500a:	dc1c      	bgt.n	15046 <dup_found.part.0+0xa6>
			dup_count++;
   1500c:	3301      	adds	r3, #1
			dup_curr = dup_count;
   1500e:	461a      	mov	r2, r3
			dup_count++;
   15010:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
   15014:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
   15016:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   15018:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   1501a:	bf08      	it	eq
   1501c:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
   1501e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   15022:	4b0e      	ldr	r3, [pc, #56]	; (1505c <dup_found.part.0+0xbc>)
   15024:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
   15028:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   1502a:	79ea      	ldrb	r2, [r5, #7]
   1502c:	fa22 f308 	lsr.w	r3, r2, r8
   15030:	f013 0301 	ands.w	r3, r3, #1
   15034:	d1f3      	bne.n	1501e <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
   15036:	fa00 f808 	lsl.w	r8, r0, r8
   1503a:	ea42 0208 	orr.w	r2, r2, r8
   1503e:	71ea      	strb	r2, [r5, #7]
		return false;
   15040:	4618      	mov	r0, r3
}
   15042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
   15046:	682a      	ldr	r2, [r5, #0]
   15048:	3201      	adds	r2, #1
   1504a:	602a      	str	r2, [r5, #0]
   1504c:	e7e3      	b.n	15016 <dup_found.part.0+0x76>
   1504e:	bf00      	nop
   15050:	20002e00 	.word	0x20002e00
   15054:	20002e09 	.word	0x20002e09
   15058:	20002e04 	.word	0x20002e04
   1505c:	20002e08 	.word	0x20002e08

00015060 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   15060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15062:	4c19      	ldr	r4, [pc, #100]	; (150c8 <le_remote_feat_complete+0x68>)
   15064:	6864      	ldr	r4, [r4, #4]
   15066:	00a4      	lsls	r4, r4, #2
   15068:	d504      	bpl.n	15074 <le_remote_feat_complete+0x14>
   1506a:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1506c:	4a17      	ldr	r2, [pc, #92]	; (150cc <le_remote_feat_complete+0x6c>)
   1506e:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15070:	0712      	lsls	r2, r2, #28
   15072:	d400      	bmi.n	15076 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   15074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   15076:	f103 0408 	add.w	r4, r3, #8
   1507a:	4607      	mov	r7, r0
   1507c:	460e      	mov	r6, r1
   1507e:	4620      	mov	r0, r4
   15080:	2102      	movs	r1, #2
   15082:	f015 fcb2 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   15086:	233e      	movs	r3, #62	; 0x3e
   15088:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1508a:	230c      	movs	r3, #12
   1508c:	7043      	strb	r3, [r0, #1]
   1508e:	2101      	movs	r1, #1
   15090:	4620      	mov	r0, r4
   15092:	f015 fcaa 	bl	2a9ea <net_buf_simple_add>
   15096:	4603      	mov	r3, r0
	me->subevent = subevt;
   15098:	2204      	movs	r2, #4
   1509a:	701a      	strb	r2, [r3, #0]
   1509c:	4620      	mov	r0, r4
   1509e:	210b      	movs	r1, #11
   150a0:	f015 fca3 	bl	2a9ea <net_buf_simple_add>
		memcpy(&sep->features[0],
   150a4:	2208      	movs	r2, #8
	sep->status = status;
   150a6:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   150a8:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   150ac:	b92f      	cbnz	r7, 150ba <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   150ae:	1d31      	adds	r1, r6, #4
   150b0:	3003      	adds	r0, #3
}
   150b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   150b6:	f013 ba7e 	b.w	285b6 <memcpy>
}
   150ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   150be:	2100      	movs	r1, #0
   150c0:	3003      	adds	r0, #3
   150c2:	f013 ba83 	b.w	285cc <memset>
   150c6:	bf00      	nop
   150c8:	20000198 	.word	0x20000198
   150cc:	200001a0 	.word	0x200001a0

000150d0 <hci_vendor_cmd_handle_common>:
{
   150d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   150d2:	3801      	subs	r0, #1
{
   150d4:	b087      	sub	sp, #28
   150d6:	4615      	mov	r5, r2
	switch (ocf) {
   150d8:	2809      	cmp	r0, #9
   150da:	d806      	bhi.n	150ea <hci_vendor_cmd_handle_common+0x1a>
   150dc:	e8df f000 	tbb	[pc, r0]
   150e0:	05432609 	.word	0x05432609
   150e4:	6b055705 	.word	0x6b055705
   150e8:	9d88      	.short	0x9d88
   150ea:	f06f 0015 	mvn.w	r0, #21
}
   150ee:	b007      	add	sp, #28
   150f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   150f2:	4b54      	ldr	r3, [pc, #336]	; (15244 <hci_vendor_cmd_handle_common+0x174>)
   150f4:	210d      	movs	r1, #13
   150f6:	8818      	ldrh	r0, [r3, #0]
   150f8:	f013 fc7b 	bl	289f2 <bt_hci_cmd_complete_create>
   150fc:	210d      	movs	r1, #13
   150fe:	6028      	str	r0, [r5, #0]
   15100:	3008      	adds	r0, #8
   15102:	f015 fc72 	bl	2a9ea <net_buf_simple_add>
   15106:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   15108:	2202      	movs	r2, #2
	rp->status = 0x00;
   1510a:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1510c:	2103      	movs	r1, #3
	rp->status = 0x00;
   1510e:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   15110:	705a      	strb	r2, [r3, #1]
   15112:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   15114:	70da      	strb	r2, [r3, #3]
   15116:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   15118:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1511a:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1511c:	71d8      	strb	r0, [r3, #7]
   1511e:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   15120:	7258      	strb	r0, [r3, #9]
   15122:	7298      	strb	r0, [r3, #10]
   15124:	72d8      	strb	r0, [r3, #11]
   15126:	7318      	strb	r0, [r3, #12]
}
   15128:	b007      	add	sp, #28
   1512a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1512c:	4b45      	ldr	r3, [pc, #276]	; (15244 <hci_vendor_cmd_handle_common+0x174>)
   1512e:	2141      	movs	r1, #65	; 0x41
   15130:	8818      	ldrh	r0, [r3, #0]
   15132:	f013 fc5e 	bl	289f2 <bt_hci_cmd_complete_create>
   15136:	2141      	movs	r1, #65	; 0x41
   15138:	6028      	str	r0, [r5, #0]
   1513a:	3008      	adds	r0, #8
   1513c:	f015 fc55 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   15140:	2400      	movs	r4, #0
   15142:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   15144:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   15146:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1514a:	4621      	mov	r1, r4
   1514c:	f013 fa3e 	bl	285cc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   15150:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   15152:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   15154:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   15158:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   1515c:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   1515e:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   15160:	70ab      	strb	r3, [r5, #2]
}
   15162:	b007      	add	sp, #28
   15164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15166:	4b37      	ldr	r3, [pc, #220]	; (15244 <hci_vendor_cmd_handle_common+0x174>)
   15168:	2109      	movs	r1, #9
   1516a:	8818      	ldrh	r0, [r3, #0]
   1516c:	f013 fc41 	bl	289f2 <bt_hci_cmd_complete_create>
   15170:	2109      	movs	r1, #9
   15172:	6028      	str	r0, [r5, #0]
   15174:	3008      	adds	r0, #8
   15176:	f015 fc38 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   1517a:	2400      	movs	r4, #0
   1517c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   15180:	2208      	movs	r2, #8
   15182:	4621      	mov	r1, r4
   15184:	f013 fa22 	bl	285cc <memset>
	return 0;
   15188:	4620      	mov	r0, r4
}
   1518a:	b007      	add	sp, #28
   1518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   1518e:	6889      	ldr	r1, [r1, #8]
   15190:	2000      	movs	r0, #0
   15192:	f7ff fceb 	bl	14b6c <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   15196:	4b2b      	ldr	r3, [pc, #172]	; (15244 <hci_vendor_cmd_handle_common+0x174>)
   15198:	2101      	movs	r1, #1
   1519a:	8818      	ldrh	r0, [r3, #0]
   1519c:	f013 fc29 	bl	289f2 <bt_hci_cmd_complete_create>
   151a0:	2101      	movs	r1, #1
   151a2:	4604      	mov	r4, r0
   151a4:	3008      	adds	r0, #8
   151a6:	f015 fc20 	bl	2a9ea <net_buf_simple_add>
   151aa:	4603      	mov	r3, r0
	ccst->status = status;
   151ac:	2000      	movs	r0, #0
   151ae:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   151b0:	602c      	str	r4, [r5, #0]
}
   151b2:	b007      	add	sp, #28
   151b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   151b6:	4e24      	ldr	r6, [pc, #144]	; (15248 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   151b8:	4f22      	ldr	r7, [pc, #136]	; (15244 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   151ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   151bc:	f10d 0c04 	add.w	ip, sp, #4
   151c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   151c4:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   151c6:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   151c8:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   151cc:	2112      	movs	r1, #18
   151ce:	f013 fc10 	bl	289f2 <bt_hci_cmd_complete_create>
   151d2:	2112      	movs	r1, #18
   151d4:	6028      	str	r0, [r5, #0]
   151d6:	3008      	adds	r0, #8
   151d8:	f015 fc07 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   151dc:	2400      	movs	r4, #0
   151de:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   151e2:	2211      	movs	r2, #17
   151e4:	a901      	add	r1, sp, #4
   151e6:	f013 f9e6 	bl	285b6 <memcpy>
	return 0;
   151ea:	4620      	mov	r0, r4
}
   151ec:	b007      	add	sp, #28
   151ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   151f0:	4b14      	ldr	r3, [pc, #80]	; (15244 <hci_vendor_cmd_handle_common+0x174>)
   151f2:	2118      	movs	r1, #24
   151f4:	8818      	ldrh	r0, [r3, #0]
   151f6:	f013 fbfc 	bl	289f2 <bt_hci_cmd_complete_create>
   151fa:	2118      	movs	r1, #24
   151fc:	6028      	str	r0, [r5, #0]
   151fe:	3008      	adds	r0, #8
   15200:	f015 fbf3 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   15204:	2400      	movs	r4, #0
   15206:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   15208:	2101      	movs	r1, #1
	rp->status = 0x00;
   1520a:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1520e:	f009 fead 	bl	1ef6c <hci_vendor_read_static_addr>
   15212:	7068      	strb	r0, [r5, #1]
	return 0;
   15214:	4620      	mov	r0, r4
}
   15216:	b007      	add	sp, #28
   15218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1521a:	4b0a      	ldr	r3, [pc, #40]	; (15244 <hci_vendor_cmd_handle_common+0x174>)
   1521c:	2121      	movs	r1, #33	; 0x21
   1521e:	8818      	ldrh	r0, [r3, #0]
   15220:	f013 fbe7 	bl	289f2 <bt_hci_cmd_complete_create>
   15224:	2121      	movs	r1, #33	; 0x21
   15226:	6028      	str	r0, [r5, #0]
   15228:	3008      	adds	r0, #8
   1522a:	f015 fbde 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   1522e:	4601      	mov	r1, r0
   15230:	2400      	movs	r4, #0
   15232:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   15236:	3001      	adds	r0, #1
   15238:	f009 ff0c 	bl	1f054 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   1523c:	4620      	mov	r0, r4
}
   1523e:	b007      	add	sp, #28
   15240:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15242:	bf00      	nop
   15244:	20004814 	.word	0x20004814
   15248:	0002d380 	.word	0x0002d380

0001524c <hci_cmd_handle>:
{
   1524c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   1524e:	8983      	ldrh	r3, [r0, #12]
{
   15250:	b091      	sub	sp, #68	; 0x44
	struct net_buf *evt = NULL;
   15252:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   15254:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   15256:	9508      	str	r5, [sp, #32]
	if (cmd->len < sizeof(*chdr)) {
   15258:	d935      	bls.n	152c6 <hci_cmd_handle+0x7a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1525a:	4604      	mov	r4, r0
   1525c:	460e      	mov	r6, r1
   1525e:	3008      	adds	r0, #8
   15260:	2103      	movs	r1, #3
   15262:	f015 fbf3 	bl	2aa4c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   15266:	89a2      	ldrh	r2, [r4, #12]
   15268:	7883      	ldrb	r3, [r0, #2]
   1526a:	429a      	cmp	r2, r3
   1526c:	f0c0 8120 	bcc.w	154b0 <hci_cmd_handle+0x264>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   15270:	8802      	ldrh	r2, [r0, #0]
   15272:	4dc5      	ldr	r5, [pc, #788]	; (15588 <hci_cmd_handle+0x33c>)
	switch (BT_OGF(_opcode)) {
   15274:	f3c2 2385 	ubfx	r3, r2, #10, #6
   15278:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1527a:	b290      	uxth	r0, r2
   1527c:	802a      	strh	r2, [r5, #0]
	ocf = BT_OCF(_opcode);
   1527e:	f3c2 0709 	ubfx	r7, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   15282:	d80d      	bhi.n	152a0 <hci_cmd_handle+0x54>
   15284:	b1c3      	cbz	r3, 152b8 <hci_cmd_handle+0x6c>
   15286:	3b01      	subs	r3, #1
   15288:	2b07      	cmp	r3, #7
   1528a:	d815      	bhi.n	152b8 <hci_cmd_handle+0x6c>
   1528c:	e8df f013 	tbh	[pc, r3, lsl #1]
   15290:	00140024 	.word	0x00140024
   15294:	00f700d6 	.word	0x00f700d6
   15298:	00140014 	.word	0x00140014
   1529c:	00330014 	.word	0x00330014
   152a0:	2b3f      	cmp	r3, #63	; 0x3f
   152a2:	d109      	bne.n	152b8 <hci_cmd_handle+0x6c>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   152a4:	aa08      	add	r2, sp, #32
   152a6:	4621      	mov	r1, r4
   152a8:	4638      	mov	r0, r7
   152aa:	f7ff ff11 	bl	150d0 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   152ae:	3016      	adds	r0, #22
	return evt;
   152b0:	bf18      	it	ne
   152b2:	9d08      	ldrne	r5, [sp, #32]
	if (err == -EINVAL) {
   152b4:	d104      	bne.n	152c0 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   152b6:	8828      	ldrh	r0, [r5, #0]
   152b8:	2101      	movs	r1, #1
   152ba:	f013 fbac 	bl	28a16 <bt_hci_cmd_status_create>
   152be:	4605      	mov	r5, r0
}
   152c0:	4628      	mov	r0, r5
   152c2:	b011      	add	sp, #68	; 0x44
   152c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI Command header");
   152c6:	48b1      	ldr	r0, [pc, #708]	; (1558c <hci_cmd_handle+0x340>)
   152c8:	6803      	ldr	r3, [r0, #0]
   152ca:	075e      	lsls	r6, r3, #29
   152cc:	f040 80f8 	bne.w	154c0 <hci_cmd_handle+0x274>
		return NULL;
   152d0:	2500      	movs	r5, #0
}
   152d2:	4628      	mov	r0, r5
   152d4:	b011      	add	sp, #68	; 0x44
   152d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   152d8:	2f06      	cmp	r7, #6
   152da:	f000 845c 	beq.w	15b96 <hci_cmd_handle+0x94a>
   152de:	2f1d      	cmp	r7, #29
   152e0:	d1ea      	bne.n	152b8 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   152e2:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   152e4:	8818      	ldrh	r0, [r3, #0]
   152e6:	f003 fab7 	bl	18858 <ll_version_ind_send>
   152ea:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   152ec:	8828      	ldrh	r0, [r5, #0]
   152ee:	f013 fb92 	bl	28a16 <bt_hci_cmd_status_create>
   152f2:	4605      	mov	r5, r0
}
   152f4:	e7e4      	b.n	152c0 <hci_cmd_handle+0x74>
	switch (ocf) {
   152f6:	1e7a      	subs	r2, r7, #1
   152f8:	2a4d      	cmp	r2, #77	; 0x4d
   152fa:	d8dd      	bhi.n	152b8 <hci_cmd_handle+0x6c>
   152fc:	a301      	add	r3, pc, #4	; (adr r3, 15304 <hci_cmd_handle+0xb8>)
   152fe:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   15302:	bf00      	nop
   15304:	00015b8b 	.word	0x00015b8b
   15308:	00015b65 	.word	0x00015b65
   1530c:	00015b1b 	.word	0x00015b1b
   15310:	000152b9 	.word	0x000152b9
   15314:	00015b11 	.word	0x00015b11
   15318:	000152b9 	.word	0x000152b9
   1531c:	000152b9 	.word	0x000152b9
   15320:	000152b9 	.word	0x000152b9
   15324:	000152b9 	.word	0x000152b9
   15328:	000152b9 	.word	0x000152b9
   1532c:	00015af9 	.word	0x00015af9
   15330:	00015ac9 	.word	0x00015ac9
   15334:	00015a93 	.word	0x00015a93
   15338:	00015a8b 	.word	0x00015a8b
   1533c:	00015a69 	.word	0x00015a69
   15340:	00015a63 	.word	0x00015a63
   15344:	00015a5b 	.word	0x00015a5b
   15348:	00015a53 	.word	0x00015a53
   1534c:	00015a2d 	.word	0x00015a2d
   15350:	00015a25 	.word	0x00015a25
   15354:	000159fb 	.word	0x000159fb
   15358:	000159e7 	.word	0x000159e7
   1535c:	000159b3 	.word	0x000159b3
   15360:	00015991 	.word	0x00015991
   15364:	00015973 	.word	0x00015973
   15368:	000152b9 	.word	0x000152b9
   1536c:	000152b9 	.word	0x000152b9
   15370:	0001593d 	.word	0x0001593d
   15374:	000152b9 	.word	0x000152b9
   15378:	000152b9 	.word	0x000152b9
   1537c:	000152b9 	.word	0x000152b9
   15380:	00015927 	.word	0x00015927
   15384:	000158ef 	.word	0x000158ef
   15388:	000158df 	.word	0x000158df
   1538c:	000158ab 	.word	0x000158ab
   15390:	0001589f 	.word	0x0001589f
   15394:	000152b9 	.word	0x000152b9
   15398:	000152b9 	.word	0x000152b9
   1539c:	00015891 	.word	0x00015891
   153a0:	00015889 	.word	0x00015889
   153a4:	00015883 	.word	0x00015883
   153a8:	00015861 	.word	0x00015861
   153ac:	00015833 	.word	0x00015833
   153b0:	00015805 	.word	0x00015805
   153b4:	000157fb 	.word	0x000157fb
   153b8:	000157ed 	.word	0x000157ed
   153bc:	000157a3 	.word	0x000157a3
   153c0:	00015749 	.word	0x00015749
   153c4:	0001572b 	.word	0x0001572b
   153c8:	000156cf 	.word	0x000156cf
   153cc:	000152b9 	.word	0x000152b9
   153d0:	000152b9 	.word	0x000152b9
   153d4:	000152b9 	.word	0x000152b9
   153d8:	000152b9 	.word	0x000152b9
   153dc:	000152b9 	.word	0x000152b9
   153e0:	000152b9 	.word	0x000152b9
   153e4:	000152b9 	.word	0x000152b9
   153e8:	000152b9 	.word	0x000152b9
   153ec:	000152b9 	.word	0x000152b9
   153f0:	000152b9 	.word	0x000152b9
   153f4:	000152b9 	.word	0x000152b9
   153f8:	000152b9 	.word	0x000152b9
   153fc:	000152b9 	.word	0x000152b9
   15400:	000152b9 	.word	0x000152b9
   15404:	000152b9 	.word	0x000152b9
   15408:	000152b9 	.word	0x000152b9
   1540c:	000152b9 	.word	0x000152b9
   15410:	000152b9 	.word	0x000152b9
   15414:	000152b9 	.word	0x000152b9
   15418:	000152b9 	.word	0x000152b9
   1541c:	000152b9 	.word	0x000152b9
   15420:	000152b9 	.word	0x000152b9
   15424:	000152b9 	.word	0x000152b9
   15428:	000152b9 	.word	0x000152b9
   1542c:	000156ab 	.word	0x000156ab
   15430:	000152b9 	.word	0x000152b9
   15434:	000152b9 	.word	0x000152b9
   15438:	0001568b 	.word	0x0001568b
	switch (ocf) {
   1543c:	2f63      	cmp	r7, #99	; 0x63
   1543e:	f000 83f7 	beq.w	15c30 <hci_cmd_handle+0x9e4>
   15442:	d85f      	bhi.n	15504 <hci_cmd_handle+0x2b8>
   15444:	2f03      	cmp	r7, #3
   15446:	f000 83b2 	beq.w	15bae <hci_cmd_handle+0x962>
   1544a:	2f2d      	cmp	r7, #45	; 0x2d
   1544c:	d146      	bne.n	154dc <hci_cmd_handle+0x290>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   1544e:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15450:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   15452:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   15454:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15456:	f013 facc 	bl	289f2 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   1545a:	2104      	movs	r1, #4
   1545c:	9008      	str	r0, [sp, #32]
   1545e:	3008      	adds	r0, #8
   15460:	f015 fac3 	bl	2a9ea <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   15464:	b2b5      	uxth	r5, r6
   15466:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   15468:	1cc3      	adds	r3, r0, #3
   1546a:	4629      	mov	r1, r5
   1546c:	463a      	mov	r2, r7
   1546e:	2002      	movs	r0, #2
   15470:	f7ff fbc2 	bl	14bf8 <ll_tx_pwr_lvl_get>
	rp->status = status;
   15474:	7020      	strb	r0, [r4, #0]
	return evt;
   15476:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   15478:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   1547c:	e720      	b.n	152c0 <hci_cmd_handle+0x74>
	switch (ocf) {
   1547e:	1e7a      	subs	r2, r7, #1
   15480:	2a08      	cmp	r2, #8
   15482:	f63f af19 	bhi.w	152b8 <hci_cmd_handle+0x6c>
   15486:	a301      	add	r3, pc, #4	; (adr r3, 1548c <hci_cmd_handle+0x240>)
   15488:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1548c:	00015655 	.word	0x00015655
   15490:	0001559d 	.word	0x0001559d
   15494:	0001555f 	.word	0x0001555f
   15498:	000152b9 	.word	0x000152b9
   1549c:	000152b9 	.word	0x000152b9
   154a0:	000152b9 	.word	0x000152b9
   154a4:	000152b9 	.word	0x000152b9
   154a8:	000152b9 	.word	0x000152b9
   154ac:	0001553d 	.word	0x0001553d
		BT_ERR("Invalid HCI CMD packet length");
   154b0:	4836      	ldr	r0, [pc, #216]	; (1558c <hci_cmd_handle+0x340>)
   154b2:	6803      	ldr	r3, [r0, #0]
   154b4:	075c      	lsls	r4, r3, #29
   154b6:	f43f af0b 	beq.w	152d0 <hci_cmd_handle+0x84>
   154ba:	4a35      	ldr	r2, [pc, #212]	; (15590 <hci_cmd_handle+0x344>)
   154bc:	2302      	movs	r3, #2
   154be:	e001      	b.n	154c4 <hci_cmd_handle+0x278>
		BT_ERR("No HCI Command header");
   154c0:	4a34      	ldr	r2, [pc, #208]	; (15594 <hci_cmd_handle+0x348>)
   154c2:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI CMD packet length");
   154c4:	920e      	str	r2, [sp, #56]	; 0x38
   154c6:	9309      	str	r3, [sp, #36]	; 0x24
   154c8:	930d      	str	r3, [sp, #52]	; 0x34
   154ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154ce:	462b      	mov	r3, r5
   154d0:	aa0d      	add	r2, sp, #52	; 0x34
   154d2:	f010 fb85 	bl	25be0 <z_impl_z_log_msg2_static_create>
}
   154d6:	4628      	mov	r0, r5
   154d8:	b011      	add	sp, #68	; 0x44
   154da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   154dc:	2f01      	cmp	r7, #1
   154de:	f47f aeeb 	bne.w	152b8 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   154e2:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   154e4:	4b2c      	ldr	r3, [pc, #176]	; (15598 <hci_cmd_handle+0x34c>)
   154e6:	6811      	ldr	r1, [r2, #0]
   154e8:	6852      	ldr	r2, [r2, #4]
   154ea:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   154ec:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   154ee:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   154f0:	f013 fa7f 	bl	289f2 <bt_hci_cmd_complete_create>
   154f4:	2101      	movs	r1, #1
   154f6:	4605      	mov	r5, r0
   154f8:	3008      	adds	r0, #8
   154fa:	f015 fa76 	bl	2a9ea <net_buf_simple_add>
	ccst->status = status;
   154fe:	2300      	movs	r3, #0
   15500:	7003      	strb	r3, [r0, #0]
}
   15502:	e6dd      	b.n	152c0 <hci_cmd_handle+0x74>
	switch (ocf) {
   15504:	2f7b      	cmp	r7, #123	; 0x7b
   15506:	f000 8378 	beq.w	15bfa <hci_cmd_handle+0x9ae>
   1550a:	2f7c      	cmp	r7, #124	; 0x7c
   1550c:	f47f aed4 	bne.w	152b8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   15510:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   15512:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   15514:	8859      	ldrh	r1, [r3, #2]
   15516:	b2b0      	uxth	r0, r6
   15518:	f003 faba 	bl	18a90 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1551c:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1551e:	2103      	movs	r1, #3
   15520:	8828      	ldrh	r0, [r5, #0]
   15522:	f013 fa66 	bl	289f2 <bt_hci_cmd_complete_create>
   15526:	2103      	movs	r1, #3
   15528:	4603      	mov	r3, r0
   1552a:	3008      	adds	r0, #8
   1552c:	9308      	str	r3, [sp, #32]
   1552e:	f015 fa5c 	bl	2a9ea <net_buf_simple_add>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   15532:	7004      	strb	r4, [r0, #0]
	return evt;
   15534:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   15536:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
   1553a:	e6c1      	b.n	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1553c:	2107      	movs	r1, #7
   1553e:	f013 fa58 	bl	289f2 <bt_hci_cmd_complete_create>
   15542:	2107      	movs	r1, #7
   15544:	4603      	mov	r3, r0
   15546:	3008      	adds	r0, #8
   15548:	9308      	str	r3, [sp, #32]
   1554a:	f015 fa4e 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   1554e:	4601      	mov	r1, r0
   15550:	2000      	movs	r0, #0
   15552:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   15556:	f7ff fb37 	bl	14bc8 <ll_addr_read>
	return evt;
   1555a:	9d08      	ldr	r5, [sp, #32]
   1555c:	e6b0      	b.n	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1555e:	2109      	movs	r1, #9
   15560:	f013 fa47 	bl	289f2 <bt_hci_cmd_complete_create>
   15564:	2109      	movs	r1, #9
   15566:	4603      	mov	r3, r0
   15568:	3008      	adds	r0, #8
   1556a:	9308      	str	r3, [sp, #32]
   1556c:	f015 fa3d 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   15570:	2100      	movs	r1, #0
   15572:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   15574:	2208      	movs	r2, #8
	rp->status = 0x00;
   15576:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1557a:	f013 f827 	bl	285cc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   1557e:	2360      	movs	r3, #96	; 0x60
	return evt;
   15580:	9d08      	ldr	r5, [sp, #32]
	rp->features[4] = (1 << 5) | (1 << 6);
   15582:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   15584:	e69c      	b.n	152c0 <hci_cmd_handle+0x74>
   15586:	bf00      	nop
   15588:	20004814 	.word	0x20004814
   1558c:	200009ac 	.word	0x200009ac
   15590:	0002d3ac 	.word	0x0002d3ac
   15594:	0002d394 	.word	0x0002d394
   15598:	20000198 	.word	0x20000198
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1559c:	2141      	movs	r1, #65	; 0x41
   1559e:	f013 fa28 	bl	289f2 <bt_hci_cmd_complete_create>
   155a2:	2141      	movs	r1, #65	; 0x41
   155a4:	4603      	mov	r3, r0
   155a6:	3008      	adds	r0, #8
   155a8:	9308      	str	r3, [sp, #32]
   155aa:	f015 fa1e 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   155ae:	2100      	movs	r1, #0
   155b0:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   155b2:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   155b4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   155b8:	f013 f808 	bl	285cc <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   155bc:	79a1      	ldrb	r1, [r4, #6]
	rp->commands[0] |= BIT(5);
   155be:	7860      	ldrb	r0, [r4, #1]
	rp->commands[10] |= BIT(2);
   155c0:	7ae3      	ldrb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   155c2:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[5] |= BIT(6) | BIT(7);
   155c4:	f061 013f 	orn	r1, r1, #63	; 0x3f
   155c8:	71a1      	strb	r1, [r4, #6]
	rp->commands[22] |= BIT(2);
   155ca:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[0] |= BIT(5);
   155cc:	f040 0020 	orr.w	r0, r0, #32
	rp->commands[10] |= BIT(2);
   155d0:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[22] |= BIT(2);
   155d4:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[0] |= BIT(5);
   155d8:	7060      	strb	r0, [r4, #1]
	rp->commands[10] |= BIT(2);
   155da:	72e3      	strb	r3, [r4, #11]
	rp->commands[15] |= BIT(1);
   155dc:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
   155de:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[22] |= BIT(2);
   155e2:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   155e4:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[15] |= BIT(1);
   155e6:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[33] |= BIT(6) | BIT(7);
   155ea:	f063 030f 	orn	r3, r3, #15
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   155ee:	f041 0117 	orr.w	r1, r1, #23
	rp->commands[33] |= BIT(6) | BIT(7);
   155f2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[15] |= BIT(1);
   155f6:	7420      	strb	r0, [r4, #16]
	rp->commands[35] |= BIT(3);
   155f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[28] |= BIT(3);
   155fc:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   155fe:	76a1      	strb	r1, [r4, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   15600:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
	rp->commands[14] |= BIT(3) | BIT(5);
   15604:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   15608:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(0);
   1560c:	f040 0009 	orr.w	r0, r0, #9
	rp->commands[32] |= BIT(4) | BIT(5);
   15610:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	rp->commands[14] |= BIT(3) | BIT(5);
   15614:	73e2      	strb	r2, [r4, #15]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   15616:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   1561a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1561e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(0);
   15622:	7760      	strb	r0, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   15624:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
   15628:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1562a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1562e:	25ff      	movs	r5, #255	; 0xff
	rp->commands[39] |= BIT(2);
   15630:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   15634:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
   15638:	f060 0003 	orn	r0, r0, #3
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1563c:	f061 0106 	orn	r1, r1, #6
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   15640:	7725      	strb	r5, [r4, #28]
	rp->commands[26] |= BIT(4) | BIT(5);
   15642:	76e0      	strb	r0, [r4, #27]
	return evt;
   15644:	9d08      	ldr	r5, [sp, #32]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   15646:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   1564a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1564e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   15652:	e635      	b.n	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15654:	2109      	movs	r1, #9
   15656:	f013 f9cc 	bl	289f2 <bt_hci_cmd_complete_create>
   1565a:	2109      	movs	r1, #9
   1565c:	4603      	mov	r3, r0
   1565e:	3008      	adds	r0, #8
   15660:	9308      	str	r3, [sp, #32]
   15662:	f015 f9c2 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   15666:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   15668:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1566a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   1566e:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   15670:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   15672:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   15676:	7083      	strb	r3, [r0, #2]
   15678:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1567a:	2305      	movs	r3, #5
	return evt;
   1567c:	9d08      	ldr	r5, [sp, #32]
	rp->lmp_version = LL_VERSION_NUMBER;
   1567e:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   15680:	7144      	strb	r4, [r0, #5]
   15682:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   15684:	71c2      	strb	r2, [r0, #7]
   15686:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   15688:	e61a      	b.n	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   1568a:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1568c:	79c1      	ldrb	r1, [r0, #7]
   1568e:	f006 fad1 	bl	1bc34 <ll_priv_mode_set>
   15692:	4604      	mov	r4, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   15694:	8828      	ldrh	r0, [r5, #0]
   15696:	2101      	movs	r1, #1
   15698:	f013 f9ab 	bl	289f2 <bt_hci_cmd_complete_create>
   1569c:	2101      	movs	r1, #1
   1569e:	4605      	mov	r5, r0
   156a0:	3008      	adds	r0, #8
   156a2:	f015 f9a2 	bl	2a9ea <net_buf_simple_add>
	ccst->status = status;
   156a6:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   156a8:	e60a      	b.n	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   156aa:	2103      	movs	r1, #3
   156ac:	f013 f9a1 	bl	289f2 <bt_hci_cmd_complete_create>
   156b0:	2103      	movs	r1, #3
   156b2:	4603      	mov	r3, r0
   156b4:	3008      	adds	r0, #8
   156b6:	9308      	str	r3, [sp, #32]
   156b8:	f015 f997 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   156bc:	4601      	mov	r1, r0
   156be:	2300      	movs	r3, #0
   156c0:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   156c4:	3001      	adds	r0, #1
   156c6:	f7ff faa9 	bl	14c1c <ll_tx_pwr_get>
	return evt;
   156ca:	9d08      	ldr	r5, [sp, #32]
   156cc:	e5f8      	b.n	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   156ce:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   156d0:	7896      	ldrb	r6, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   156d2:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   156d4:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   156d6:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   156da:	07f3      	lsls	r3, r6, #31
		cmd->tx_phys |= mask_phys;
   156dc:	bf48      	it	mi
   156de:	f041 0103 	orrmi.w	r1, r1, #3
   156e2:	7913      	ldrb	r3, [r2, #4]
   156e4:	bf48      	it	mi
   156e6:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   156e8:	07b6      	lsls	r6, r6, #30
		cmd->rx_phys |= mask_phys;
   156ea:	bf44      	itt	mi
   156ec:	f043 0303 	orrmi.w	r3, r3, #3
   156f0:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   156f2:	ea43 0201 	orr.w	r2, r3, r1
   156f6:	f032 0203 	bics.w	r2, r2, #3
   156fa:	f040 82a7 	bne.w	15c4c <hci_cmd_handle+0xa00>
	if (!(cmd->tx_phys & 0x07) ||
   156fe:	074e      	lsls	r6, r1, #29
   15700:	f000 829e 	beq.w	15c40 <hci_cmd_handle+0x9f4>
   15704:	075a      	lsls	r2, r3, #29
   15706:	f000 829b 	beq.w	15c40 <hci_cmd_handle+0x9f4>
	if (phy_opts & 0x03) {
   1570a:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   1570e:	bf1c      	itt	ne
   15710:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   15714:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   15718:	4638      	mov	r0, r7
   1571a:	f003 f94d 	bl	189b8 <ll_phy_req_send>
   1571e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   15720:	8828      	ldrh	r0, [r5, #0]
   15722:	f013 f978 	bl	28a16 <bt_hci_cmd_status_create>
   15726:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   15728:	e5ca      	b.n	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   1572a:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1572c:	781a      	ldrb	r2, [r3, #0]
   1572e:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   15730:	bf4a      	itet	mi
   15732:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   15734:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   15736:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   15738:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1573a:	bf4a      	itet	mi
   1573c:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1573e:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   15740:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   15742:	f003 f92f 	bl	189a4 <ll_phy_default_set>
   15746:	e7a4      	b.n	15692 <hci_cmd_handle+0x446>
	handle = sys_le16_to_cpu(cmd->handle);
   15748:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1574a:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   1574c:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1574e:	f013 f950 	bl	289f2 <bt_hci_cmd_complete_create>
   15752:	2105      	movs	r1, #5
   15754:	4603      	mov	r3, r0
   15756:	3008      	adds	r0, #8
   15758:	9308      	str	r3, [sp, #32]
   1575a:	f015 f946 	bl	2a9ea <net_buf_simple_add>
   1575e:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   15760:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   15762:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   15764:	1ce1      	adds	r1, r4, #3
   15766:	f003 f8ff 	bl	18968 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   1576a:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   1576c:	7020      	strb	r0, [r4, #0]
   1576e:	2b00      	cmp	r3, #0
   15770:	fa93 f2a3 	rbit	r2, r3
   15774:	7923      	ldrb	r3, [r4, #4]
   15776:	fab2 f282 	clz	r2, r2
   1577a:	bf08      	it	eq
   1577c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   15780:	2b00      	cmp	r3, #0
   15782:	fa93 f3a3 	rbit	r3, r3
   15786:	fab3 f383 	clz	r3, r3
   1578a:	f102 0201 	add.w	r2, r2, #1
   1578e:	bf08      	it	eq
   15790:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   15794:	70e2      	strb	r2, [r4, #3]
   15796:	3301      	adds	r3, #1
	return evt;
   15798:	9d08      	ldr	r5, [sp, #32]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   1579a:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   1579c:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   157a0:	e58e      	b.n	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   157a2:	2109      	movs	r1, #9
   157a4:	f013 f925 	bl	289f2 <bt_hci_cmd_complete_create>
   157a8:	2109      	movs	r1, #9
   157aa:	4603      	mov	r3, r0
   157ac:	3008      	adds	r0, #8
   157ae:	9308      	str	r3, [sp, #32]
   157b0:	f015 f91b 	bl	2a9ea <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   157b4:	ab0a      	add	r3, sp, #40	; 0x28
   157b6:	4604      	mov	r4, r0
   157b8:	aa09      	add	r2, sp, #36	; 0x24
   157ba:	f10d 011e 	add.w	r1, sp, #30
   157be:	a807      	add	r0, sp, #28
   157c0:	f003 f8c6 	bl	18950 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   157c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   157c8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   157cc:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   157d0:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   157d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   157d8:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   157dc:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   157de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   157e2:	7022      	strb	r2, [r4, #0]
	return evt;
   157e4:	9d08      	ldr	r5, [sp, #32]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   157e6:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   157ea:	e569      	b.n	152c0 <hci_cmd_handle+0x74>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   157ec:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   157ee:	8818      	ldrh	r0, [r3, #0]
   157f0:	f006 fa16 	bl	1bc20 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   157f4:	8828      	ldrh	r0, [r5, #0]
   157f6:	2101      	movs	r1, #1
   157f8:	e67a      	b.n	154f0 <hci_cmd_handle+0x2a4>
	status = ll_rl_enable(cmd->enable);
   157fa:	68a3      	ldr	r3, [r4, #8]
   157fc:	7818      	ldrb	r0, [r3, #0]
   157fe:	f006 f9f7 	bl	1bbf0 <ll_rl_enable>
   15802:	e746      	b.n	15692 <hci_cmd_handle+0x446>
	memcpy(dst, src, sizeof(*dst));
   15804:	2207      	movs	r2, #7
   15806:	68a1      	ldr	r1, [r4, #8]
   15808:	a80a      	add	r0, sp, #40	; 0x28
   1580a:	f012 fed4 	bl	285b6 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1580e:	8828      	ldrh	r0, [r5, #0]
   15810:	2107      	movs	r1, #7
   15812:	f013 f8ee 	bl	289f2 <bt_hci_cmd_complete_create>
   15816:	2107      	movs	r1, #7
   15818:	4603      	mov	r3, r0
   1581a:	3008      	adds	r0, #8
   1581c:	9308      	str	r3, [sp, #32]
   1581e:	f015 f8e4 	bl	2a9ea <net_buf_simple_add>
   15822:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   15824:	1c41      	adds	r1, r0, #1
   15826:	a80a      	add	r0, sp, #40	; 0x28
   15828:	f006 f9b0 	bl	1bb8c <ll_rl_lrpa_get>
   1582c:	7020      	strb	r0, [r4, #0]
	return evt;
   1582e:	9d08      	ldr	r5, [sp, #32]
   15830:	e546      	b.n	152c0 <hci_cmd_handle+0x74>
   15832:	2207      	movs	r2, #7
   15834:	68a1      	ldr	r1, [r4, #8]
   15836:	a80a      	add	r0, sp, #40	; 0x28
   15838:	f012 febd 	bl	285b6 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1583c:	8828      	ldrh	r0, [r5, #0]
   1583e:	2107      	movs	r1, #7
   15840:	f013 f8d7 	bl	289f2 <bt_hci_cmd_complete_create>
   15844:	2107      	movs	r1, #7
   15846:	4603      	mov	r3, r0
   15848:	3008      	adds	r0, #8
   1584a:	9308      	str	r3, [sp, #32]
   1584c:	f015 f8cd 	bl	2a9ea <net_buf_simple_add>
   15850:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   15852:	1c41      	adds	r1, r0, #1
   15854:	a80a      	add	r0, sp, #40	; 0x28
   15856:	f006 f95f 	bl	1bb18 <ll_rl_crpa_get>
   1585a:	7020      	strb	r0, [r4, #0]
	return evt;
   1585c:	9d08      	ldr	r5, [sp, #32]
   1585e:	e52f      	b.n	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15860:	2102      	movs	r1, #2
   15862:	f013 f8c6 	bl	289f2 <bt_hci_cmd_complete_create>
   15866:	2102      	movs	r1, #2
   15868:	4603      	mov	r3, r0
   1586a:	3008      	adds	r0, #8
   1586c:	9308      	str	r3, [sp, #32]
   1586e:	f015 f8bc 	bl	2a9ea <net_buf_simple_add>
   15872:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   15874:	f006 f80e 	bl	1b894 <ll_rl_size_get>
	rp->status = 0x00;
   15878:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   1587a:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   1587c:	7023      	strb	r3, [r4, #0]
	return evt;
   1587e:	9d08      	ldr	r5, [sp, #32]
   15880:	e51e      	b.n	152c0 <hci_cmd_handle+0x74>
	status = ll_rl_clear();
   15882:	f006 f809 	bl	1b898 <ll_rl_clear>
   15886:	e704      	b.n	15692 <hci_cmd_handle+0x446>
	status = ll_rl_remove(&cmd->peer_id_addr);
   15888:	68a0      	ldr	r0, [r4, #8]
   1588a:	f006 f845 	bl	1b918 <ll_rl_remove>
   1588e:	e700      	b.n	15692 <hci_cmd_handle+0x446>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   15890:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   15892:	f100 0217 	add.w	r2, r0, #23
   15896:	1dc1      	adds	r1, r0, #7
   15898:	f006 fbec 	bl	1c074 <ll_rl_add>
   1589c:	e6f9      	b.n	15692 <hci_cmd_handle+0x446>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   1589e:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   158a0:	8859      	ldrh	r1, [r3, #2]
   158a2:	8818      	ldrh	r0, [r3, #0]
   158a4:	f003 f84a 	bl	1893c <ll_length_default_set>
   158a8:	e6f3      	b.n	15692 <hci_cmd_handle+0x446>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   158aa:	2105      	movs	r1, #5
   158ac:	f013 f8a1 	bl	289f2 <bt_hci_cmd_complete_create>
   158b0:	2105      	movs	r1, #5
   158b2:	4603      	mov	r3, r0
   158b4:	3008      	adds	r0, #8
   158b6:	9308      	str	r3, [sp, #32]
   158b8:	f015 f897 	bl	2a9ea <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   158bc:	a90a      	add	r1, sp, #40	; 0x28
   158be:	4604      	mov	r4, r0
   158c0:	a809      	add	r0, sp, #36	; 0x24
   158c2:	f003 f82f 	bl	18924 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   158c6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   158ca:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   158ce:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   158d0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   158d4:	7022      	strb	r2, [r4, #0]
	return evt;
   158d6:	9d08      	ldr	r5, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   158d8:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   158dc:	e4f0      	b.n	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   158de:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   158e0:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   158e2:	889a      	ldrh	r2, [r3, #4]
   158e4:	8859      	ldrh	r1, [r3, #2]
   158e6:	b2b0      	uxth	r0, r6
   158e8:	f002 ffd2 	bl	18890 <ll_length_req_send>
   158ec:	e616      	b.n	1551c <hci_cmd_handle+0x2d0>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   158ee:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   158f0:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   158f2:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   158f4:	7892      	ldrb	r2, [r2, #2]
   158f6:	9300      	str	r3, [sp, #0]
   158f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   158fc:	2102      	movs	r1, #2
   158fe:	b2a0      	uxth	r0, r4
   15900:	f002 fea2 	bl	18648 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15904:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   15906:	4603      	mov	r3, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15908:	8828      	ldrh	r0, [r5, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1590a:	461d      	mov	r5, r3
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1590c:	f013 f871 	bl	289f2 <bt_hci_cmd_complete_create>
   15910:	2103      	movs	r1, #3
   15912:	4603      	mov	r3, r0
   15914:	3008      	adds	r0, #8
   15916:	9308      	str	r3, [sp, #32]
   15918:	f015 f867 	bl	2a9ea <net_buf_simple_add>
	rp->status = status;
   1591c:	7005      	strb	r5, [r0, #0]
	return evt;
   1591e:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   15920:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   15924:	e4cc      	b.n	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   15926:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   15928:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1592a:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1592c:	8853      	ldrh	r3, [r2, #2]
   1592e:	9102      	str	r1, [sp, #8]
   15930:	88d1      	ldrh	r1, [r2, #6]
   15932:	9101      	str	r1, [sp, #4]
   15934:	8891      	ldrh	r1, [r2, #4]
   15936:	9100      	str	r1, [sp, #0]
   15938:	2200      	movs	r2, #0
   1593a:	e7df      	b.n	158fc <hci_cmd_handle+0x6b0>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1593c:	2109      	movs	r1, #9
   1593e:	f013 f858 	bl	289f2 <bt_hci_cmd_complete_create>
   15942:	2109      	movs	r1, #9
   15944:	4603      	mov	r3, r0
   15946:	3008      	adds	r0, #8
   15948:	9308      	str	r3, [sp, #32]
   1594a:	f015 f84e 	bl	2a9ea <net_buf_simple_add>
	dst[0] = val;
   1594e:	2470      	movs	r4, #112	; 0x70
	rp->status = 0x00;
   15950:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   15952:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
   15954:	220f      	movs	r2, #15
   15956:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   15958:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   1595a:	70c2      	strb	r2, [r0, #3]
   1595c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1595e:	2413      	movs	r4, #19
	dst[0] = val;
   15960:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
   15962:	2202      	movs	r2, #2
	return evt;
   15964:	9d08      	ldr	r5, [sp, #32]
   15966:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   15968:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   1596a:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   1596c:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1596e:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   15970:	e4a6      	b.n	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   15972:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   15974:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   15976:	f102 030c 	add.w	r3, r2, #12
   1597a:	f831 0b02 	ldrh.w	r0, [r1], #2
   1597e:	320a      	adds	r2, #10
   15980:	f005 fa30 	bl	1ade4 <ll_enc_req_send>
   15984:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   15986:	8828      	ldrh	r0, [r5, #0]
   15988:	f013 f845 	bl	28a16 <bt_hci_cmd_status_create>
   1598c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1598e:	e497      	b.n	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15990:	2109      	movs	r1, #9
   15992:	f013 f82e 	bl	289f2 <bt_hci_cmd_complete_create>
   15996:	2109      	movs	r1, #9
   15998:	4603      	mov	r3, r0
   1599a:	3008      	adds	r0, #8
   1599c:	9308      	str	r3, [sp, #32]
   1599e:	f015 f824 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   159a2:	2300      	movs	r3, #0
   159a4:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   159a8:	2108      	movs	r1, #8
   159aa:	f007 f855 	bl	1ca58 <lll_csrand_get>
	return evt;
   159ae:	9d08      	ldr	r5, [sp, #32]
   159b0:	e486      	b.n	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   159b2:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   159b4:	aa0a      	add	r2, sp, #40	; 0x28
   159b6:	2300      	movs	r3, #0
   159b8:	f100 0110 	add.w	r1, r0, #16
   159bc:	f008 fcd0 	bl	1e360 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   159c0:	8828      	ldrh	r0, [r5, #0]
   159c2:	2111      	movs	r1, #17
   159c4:	f013 f815 	bl	289f2 <bt_hci_cmd_complete_create>
   159c8:	2111      	movs	r1, #17
   159ca:	4603      	mov	r3, r0
   159cc:	3008      	adds	r0, #8
   159ce:	9308      	str	r3, [sp, #32]
   159d0:	f015 f80b 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   159d4:	2300      	movs	r3, #0
   159d6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   159da:	2210      	movs	r2, #16
   159dc:	a90a      	add	r1, sp, #40	; 0x28
   159de:	f012 fdea 	bl	285b6 <memcpy>
	return evt;
   159e2:	9d08      	ldr	r5, [sp, #32]
   159e4:	e46c      	b.n	152c0 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   159e6:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   159e8:	8818      	ldrh	r0, [r3, #0]
   159ea:	f002 ff19 	bl	18820 <ll_feature_req_send>
   159ee:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   159f0:	8828      	ldrh	r0, [r5, #0]
   159f2:	f013 f810 	bl	28a16 <bt_hci_cmd_status_create>
   159f6:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   159f8:	e462      	b.n	152c0 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   159fa:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   159fc:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   159fe:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15a00:	f012 fff7 	bl	289f2 <bt_hci_cmd_complete_create>
   15a04:	2108      	movs	r1, #8
   15a06:	4603      	mov	r3, r0
   15a08:	4408      	add	r0, r1
   15a0a:	9308      	str	r3, [sp, #32]
   15a0c:	f014 ffed 	bl	2a9ea <net_buf_simple_add>
   15a10:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   15a12:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   15a14:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   15a16:	f002 fea1 	bl	1875c <ll_chm_get>
	rp->status = status;
   15a1a:	7020      	strb	r0, [r4, #0]
	return evt;
   15a1c:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_le16_to_cpu(handle);
   15a1e:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   15a22:	e44d      	b.n	152c0 <hci_cmd_handle+0x74>
	status = ll_chm_update(&cmd->ch_map[0]);
   15a24:	68a0      	ldr	r0, [r4, #8]
   15a26:	f005 fc8f 	bl	1b348 <ll_chm_update>
   15a2a:	e632      	b.n	15692 <hci_cmd_handle+0x446>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   15a2c:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   15a2e:	890a      	ldrh	r2, [r1, #8]
   15a30:	884b      	ldrh	r3, [r1, #2]
   15a32:	8808      	ldrh	r0, [r1, #0]
   15a34:	9202      	str	r2, [sp, #8]
   15a36:	88ca      	ldrh	r2, [r1, #6]
   15a38:	9201      	str	r2, [sp, #4]
   15a3a:	8889      	ldrh	r1, [r1, #4]
   15a3c:	9100      	str	r1, [sp, #0]
   15a3e:	2200      	movs	r2, #0
   15a40:	4611      	mov	r1, r2
   15a42:	f002 fe01 	bl	18648 <ll_conn_update>
   15a46:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   15a48:	8828      	ldrh	r0, [r5, #0]
   15a4a:	f012 ffe4 	bl	28a16 <bt_hci_cmd_status_create>
   15a4e:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   15a50:	e436      	b.n	152c0 <hci_cmd_handle+0x74>
	status = ll_fal_remove(&cmd->addr);
   15a52:	68a0      	ldr	r0, [r4, #8]
   15a54:	f005 fe8e 	bl	1b774 <ll_fal_remove>
   15a58:	e61b      	b.n	15692 <hci_cmd_handle+0x446>
	status = ll_fal_add(&cmd->addr);
   15a5a:	68a0      	ldr	r0, [r4, #8]
   15a5c:	f005 fdee 	bl	1b63c <ll_fal_add>
   15a60:	e617      	b.n	15692 <hci_cmd_handle+0x446>
	status = ll_fal_clear();
   15a62:	f005 fdc3 	bl	1b5ec <ll_fal_clear>
   15a66:	e614      	b.n	15692 <hci_cmd_handle+0x446>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15a68:	2102      	movs	r1, #2
   15a6a:	f012 ffc2 	bl	289f2 <bt_hci_cmd_complete_create>
   15a6e:	2102      	movs	r1, #2
   15a70:	4603      	mov	r3, r0
   15a72:	3008      	adds	r0, #8
   15a74:	9308      	str	r3, [sp, #32]
   15a76:	f014 ffb8 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   15a7a:	2300      	movs	r3, #0
   15a7c:	7003      	strb	r3, [r0, #0]
   15a7e:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   15a80:	f005 fdb2 	bl	1b5e8 <ll_fal_size_get>
   15a84:	7060      	strb	r0, [r4, #1]
	return evt;
   15a86:	9d08      	ldr	r5, [sp, #32]
   15a88:	e41a      	b.n	152c0 <hci_cmd_handle+0x74>
	status = ll_connect_disable(node_rx);
   15a8a:	4630      	mov	r0, r6
   15a8c:	f005 f95c 	bl	1ad48 <ll_connect_disable>
   15a90:	e5ff      	b.n	15692 <hci_cmd_handle+0x446>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   15a92:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   15a94:	f8b4 6013 	ldrh.w	r6, [r4, #19]
   15a98:	7963      	ldrb	r3, [r4, #5]
   15a9a:	7922      	ldrb	r2, [r4, #4]
   15a9c:	8861      	ldrh	r1, [r4, #2]
   15a9e:	8820      	ldrh	r0, [r4, #0]
   15aa0:	9604      	str	r6, [sp, #16]
   15aa2:	f8b4 6011 	ldrh.w	r6, [r4, #17]
   15aa6:	9603      	str	r6, [sp, #12]
   15aa8:	f8b4 600f 	ldrh.w	r6, [r4, #15]
   15aac:	9602      	str	r6, [sp, #8]
   15aae:	7b26      	ldrb	r6, [r4, #12]
   15ab0:	9601      	str	r6, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   15ab2:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   15ab4:	9400      	str	r4, [sp, #0]
   15ab6:	f7ed fdef 	bl	3698 <ll_create_connection>
   15aba:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   15abc:	8828      	ldrh	r0, [r5, #0]
   15abe:	f012 ffaa 	bl	28a16 <bt_hci_cmd_status_create>
   15ac2:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   15ac4:	f7ff bbfc 	b.w	152c0 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   15ac8:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   15aca:	7818      	ldrb	r0, [r3, #0]
   15acc:	2800      	cmp	r0, #0
   15ace:	f000 80b2 	beq.w	15c36 <hci_cmd_handle+0x9ea>
   15ad2:	785b      	ldrb	r3, [r3, #1]
   15ad4:	2b00      	cmp	r3, #0
   15ad6:	f000 80ae 	beq.w	15c36 <hci_cmd_handle+0x9ea>
			dup_count = 0;
   15ada:	495f      	ldr	r1, [pc, #380]	; (15c58 <hci_cmd_handle+0xa0c>)
			dup_curr = 0U;
   15adc:	4a5f      	ldr	r2, [pc, #380]	; (15c5c <hci_cmd_handle+0xa10>)
			dup_count = 0;
   15ade:	2300      	movs	r3, #0
   15ae0:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   15ae2:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   15ae4:	f002 f83a 	bl	17b5c <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   15ae8:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   15aea:	4604      	mov	r4, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   15aec:	f04f 0101 	mov.w	r1, #1
   15af0:	8828      	ldrh	r0, [r5, #0]
		status = BT_HCI_ERR_SUCCESS;
   15af2:	bf08      	it	eq
   15af4:	2400      	moveq	r4, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   15af6:	e5cf      	b.n	15698 <hci_cmd_handle+0x44c>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   15af8:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   15afa:	7963      	ldrb	r3, [r4, #5]
   15afc:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   15b00:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   15b04:	7820      	ldrb	r0, [r4, #0]
   15b06:	79a4      	ldrb	r4, [r4, #6]
   15b08:	9400      	str	r4, [sp, #0]
   15b0a:	f7eb ff45 	bl	1998 <ll_scan_params_set>
   15b0e:	e5c0      	b.n	15692 <hci_cmd_handle+0x446>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   15b10:	68a1      	ldr	r1, [r4, #8]
   15b12:	2001      	movs	r0, #1
   15b14:	f7ff f82a 	bl	14b6c <ll_addr_set>
   15b18:	e5bb      	b.n	15692 <hci_cmd_handle+0x446>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15b1a:	2109      	movs	r1, #9
   15b1c:	f012 ff69 	bl	289f2 <bt_hci_cmd_complete_create>
   15b20:	2109      	movs	r1, #9
   15b22:	4603      	mov	r3, r0
   15b24:	3008      	adds	r0, #8
   15b26:	9308      	str	r3, [sp, #32]
   15b28:	f014 ff5f 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   15b2c:	2100      	movs	r1, #0
   15b2e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   15b30:	2208      	movs	r2, #8
	rp->status = 0x00;
   15b32:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   15b36:	f012 fd49 	bl	285cc <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   15b3a:	f000 fe63 	bl	16804 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   15b3e:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   15b40:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15b44:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   15b46:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   15b48:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   15b4a:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   15b4c:	70a5      	strb	r5, [r4, #2]
   15b4e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   15b52:	7123      	strb	r3, [r4, #4]
   15b54:	0a13      	lsrs	r3, r2, #8
	return evt;
   15b56:	9d08      	ldr	r5, [sp, #32]
	dst[0] = val;
   15b58:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   15b5a:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   15b5c:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   15b5e:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   15b60:	f7ff bbae 	b.w	152c0 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15b64:	2104      	movs	r1, #4
   15b66:	f012 ff44 	bl	289f2 <bt_hci_cmd_complete_create>
   15b6a:	2104      	movs	r1, #4
   15b6c:	4603      	mov	r3, r0
   15b6e:	3008      	adds	r0, #8
   15b70:	9308      	str	r3, [sp, #32]
   15b72:	f014 ff3a 	bl	2a9ea <net_buf_simple_add>
	rp->status = 0x00;
   15b76:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   15b78:	2103      	movs	r1, #3
	rp->status = 0x00;
   15b7a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   15b7c:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   15b7e:	70c1      	strb	r1, [r0, #3]
	return evt;
   15b80:	9d08      	ldr	r5, [sp, #32]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   15b82:	7042      	strb	r2, [r0, #1]
   15b84:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   15b86:	f7ff bb9b 	b.w	152c0 <hci_cmd_handle+0x74>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   15b8a:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   15b8c:	4b34      	ldr	r3, [pc, #208]	; (15c60 <hci_cmd_handle+0xa14>)
   15b8e:	6811      	ldr	r1, [r2, #0]
   15b90:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   15b92:	6019      	str	r1, [r3, #0]
   15b94:	e4aa      	b.n	154ec <hci_cmd_handle+0x2a0>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   15b96:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   15b98:	7899      	ldrb	r1, [r3, #2]
   15b9a:	8818      	ldrh	r0, [r3, #0]
   15b9c:	f002 fdfe 	bl	1879c <ll_terminate_ind_send>
   15ba0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   15ba2:	8828      	ldrh	r0, [r5, #0]
   15ba4:	f012 ff37 	bl	28a16 <bt_hci_cmd_status_create>
   15ba8:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   15baa:	f7ff bb89 	b.w	152c0 <hci_cmd_handle+0x74>
	dup_count = DUP_FILTER_DISABLED;
   15bae:	482a      	ldr	r0, [pc, #168]	; (15c58 <hci_cmd_handle+0xa0c>)
	event_mask = DEFAULT_EVENT_MASK;
   15bb0:	492c      	ldr	r1, [pc, #176]	; (15c64 <hci_cmd_handle+0xa18>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   15bb2:	4a2d      	ldr	r2, [pc, #180]	; (15c68 <hci_cmd_handle+0xa1c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   15bb4:	4b2a      	ldr	r3, [pc, #168]	; (15c60 <hci_cmd_handle+0xa14>)
	dup_count = DUP_FILTER_DISABLED;
   15bb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	event_mask = DEFAULT_EVENT_MASK;
   15bba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15bbe:	f641 77ff 	movw	r7, #8191	; 0x1fff
   15bc2:	e9c1 6700 	strd	r6, r7, [r1]
	dup_count = DUP_FILTER_DISABLED;
   15bc6:	6004      	str	r4, [r0, #0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   15bc8:	2100      	movs	r1, #0
   15bca:	2000      	movs	r0, #0
   15bcc:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   15bd0:	201f      	movs	r0, #31
   15bd2:	2100      	movs	r1, #0
   15bd4:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   15bd8:	f001 fea4 	bl	17924 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   15bdc:	8828      	ldrh	r0, [r5, #0]
   15bde:	2101      	movs	r1, #1
   15be0:	f012 ff07 	bl	289f2 <bt_hci_cmd_complete_create>
   15be4:	2101      	movs	r1, #1
   15be6:	4605      	mov	r5, r0
   15be8:	3008      	adds	r0, #8
   15bea:	f014 fefe 	bl	2a9ea <net_buf_simple_add>
	conn_count = 0U;
   15bee:	4a1f      	ldr	r2, [pc, #124]	; (15c6c <hci_cmd_handle+0xa20>)
	ccst->status = status;
   15bf0:	2300      	movs	r3, #0
   15bf2:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   15bf4:	6013      	str	r3, [r2, #0]
}
   15bf6:	f7ff bb63 	b.w	152c0 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   15bfa:	68a3      	ldr	r3, [r4, #8]
   15bfc:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   15bfe:	a90a      	add	r1, sp, #40	; 0x28
   15c00:	b2b0      	uxth	r0, r6
   15c02:	f002 ff21 	bl	18a48 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15c06:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   15c08:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   15c0a:	8828      	ldrh	r0, [r5, #0]
   15c0c:	f012 fef1 	bl	289f2 <bt_hci_cmd_complete_create>
   15c10:	2105      	movs	r1, #5
   15c12:	4603      	mov	r3, r0
   15c14:	3008      	adds	r0, #8
   15c16:	9308      	str	r3, [sp, #32]
   15c18:	f014 fee7 	bl	2a9ea <net_buf_simple_add>
	rp->status = status;
   15c1c:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   15c1e:	f8a0 6001 	strh.w	r6, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   15c22:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   15c26:	9d08      	ldr	r5, [sp, #32]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   15c28:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   15c2c:	f7ff bb48 	b.w	152c0 <hci_cmd_handle+0x74>
   15c30:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   15c32:	4b0d      	ldr	r3, [pc, #52]	; (15c68 <hci_cmd_handle+0xa1c>)
   15c34:	e7ab      	b.n	15b8e <hci_cmd_handle+0x942>
		dup_count = DUP_FILTER_DISABLED;
   15c36:	4b08      	ldr	r3, [pc, #32]	; (15c58 <hci_cmd_handle+0xa0c>)
   15c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c3c:	601a      	str	r2, [r3, #0]
   15c3e:	e751      	b.n	15ae4 <hci_cmd_handle+0x898>
	return bt_hci_cmd_status_create(_opcode, status);
   15c40:	2112      	movs	r1, #18
   15c42:	f012 fee8 	bl	28a16 <bt_hci_cmd_status_create>
   15c46:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   15c48:	f7ff bb3a 	b.w	152c0 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   15c4c:	2111      	movs	r1, #17
   15c4e:	f012 fee2 	bl	28a16 <bt_hci_cmd_status_create>
   15c52:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   15c54:	f7ff bb34 	b.w	152c0 <hci_cmd_handle+0x74>
   15c58:	20002e00 	.word	0x20002e00
   15c5c:	20002e04 	.word	0x20002e04
   15c60:	200001a0 	.word	0x200001a0
   15c64:	20000198 	.word	0x20000198
   15c68:	20001ea8 	.word	0x20001ea8
   15c6c:	20002dfc 	.word	0x20002dfc

00015c70 <hci_acl_handle>:
{
   15c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   15c74:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   15c76:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   15c78:	2b03      	cmp	r3, #3
{
   15c7a:	b089      	sub	sp, #36	; 0x24
	*evt = NULL;
   15c7c:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   15c7e:	d93d      	bls.n	15cfc <hci_acl_handle+0x8c>
	return net_buf_simple_pull_mem(&buf->b, len);
   15c80:	4605      	mov	r5, r0
   15c82:	4688      	mov	r8, r1
   15c84:	3008      	adds	r0, #8
   15c86:	2104      	movs	r1, #4
   15c88:	f014 fee0 	bl	2aa4c <net_buf_simple_pull_mem>
	if (buf->len < len) {
   15c8c:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   15c8e:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   15c90:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   15c94:	42b3      	cmp	r3, r6
   15c96:	d34a      	bcc.n	15d2e <hci_acl_handle+0xbe>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   15c98:	2e1b      	cmp	r6, #27
   15c9a:	d841      	bhi.n	15d20 <hci_acl_handle+0xb0>
	node_tx = ll_tx_mem_acquire();
   15c9c:	f002 fc86 	bl	185ac <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   15ca0:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   15ca4:	4604      	mov	r4, r0
   15ca6:	2800      	cmp	r0, #0
   15ca8:	d048      	beq.n	15d3c <hci_acl_handle+0xcc>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   15caa:	08bb      	lsrs	r3, r7, #2
   15cac:	d102      	bne.n	15cb4 <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   15cae:	b1ff      	cbz	r7, 15cf0 <hci_acl_handle+0x80>
   15cb0:	2f01      	cmp	r7, #1
   15cb2:	d004      	beq.n	15cbe <hci_acl_handle+0x4e>
		return -EINVAL;
   15cb4:	f06f 0015 	mvn.w	r0, #21
}
   15cb8:	b009      	add	sp, #36	; 0x24
   15cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   15cbe:	7903      	ldrb	r3, [r0, #4]
   15cc0:	f367 0301 	bfi	r3, r7, #0, #2
   15cc4:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   15cc6:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   15cc8:	68a9      	ldr	r1, [r5, #8]
   15cca:	4632      	mov	r2, r6
   15ccc:	1de0      	adds	r0, r4, #7
   15cce:	f012 fc72 	bl	285b6 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   15cd2:	4621      	mov	r1, r4
   15cd4:	f3c9 000b 	ubfx	r0, r9, #0, #12
   15cd8:	f002 fc74 	bl	185c4 <ll_tx_mem_enqueue>
   15cdc:	2800      	cmp	r0, #0
   15cde:	d0eb      	beq.n	15cb8 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   15ce0:	4836      	ldr	r0, [pc, #216]	; (15dbc <hci_acl_handle+0x14c>)
   15ce2:	6803      	ldr	r3, [r0, #0]
   15ce4:	075b      	lsls	r3, r3, #29
   15ce6:	d134      	bne.n	15d52 <hci_acl_handle+0xe2>
		ll_tx_mem_release(node_tx);
   15ce8:	4620      	mov	r0, r4
   15cea:	f002 fc65 	bl	185b8 <ll_tx_mem_release>
   15cee:	e7e1      	b.n	15cb4 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   15cf0:	7903      	ldrb	r3, [r0, #4]
   15cf2:	2202      	movs	r2, #2
   15cf4:	f362 0301 	bfi	r3, r2, #0, #2
   15cf8:	7103      	strb	r3, [r0, #4]
		break;
   15cfa:	e7e4      	b.n	15cc6 <hci_acl_handle+0x56>
		BT_ERR("No HCI ACL header");
   15cfc:	482f      	ldr	r0, [pc, #188]	; (15dbc <hci_acl_handle+0x14c>)
   15cfe:	6803      	ldr	r3, [r0, #0]
   15d00:	075f      	lsls	r7, r3, #29
   15d02:	d0d7      	beq.n	15cb4 <hci_acl_handle+0x44>
   15d04:	4a2e      	ldr	r2, [pc, #184]	; (15dc0 <hci_acl_handle+0x150>)
   15d06:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI ACL packet length");
   15d08:	9206      	str	r2, [sp, #24]
   15d0a:	9301      	str	r3, [sp, #4]
   15d0c:	9305      	str	r3, [sp, #20]
   15d0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15d12:	4623      	mov	r3, r4
   15d14:	aa05      	add	r2, sp, #20
   15d16:	f00f ff63 	bl	25be0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   15d1a:	f06f 0015 	mvn.w	r0, #21
		BT_ERR("Invalid HCI ACL packet length");
   15d1e:	e7cb      	b.n	15cb8 <hci_acl_handle+0x48>
		BT_ERR("Invalid HCI ACL Data length");
   15d20:	4826      	ldr	r0, [pc, #152]	; (15dbc <hci_acl_handle+0x14c>)
   15d22:	6803      	ldr	r3, [r0, #0]
   15d24:	075d      	lsls	r5, r3, #29
   15d26:	d0c5      	beq.n	15cb4 <hci_acl_handle+0x44>
   15d28:	4a26      	ldr	r2, [pc, #152]	; (15dc4 <hci_acl_handle+0x154>)
   15d2a:	2302      	movs	r3, #2
   15d2c:	e7ec      	b.n	15d08 <hci_acl_handle+0x98>
		BT_ERR("Invalid HCI ACL packet length");
   15d2e:	4823      	ldr	r0, [pc, #140]	; (15dbc <hci_acl_handle+0x14c>)
   15d30:	6803      	ldr	r3, [r0, #0]
   15d32:	075e      	lsls	r6, r3, #29
   15d34:	d0be      	beq.n	15cb4 <hci_acl_handle+0x44>
   15d36:	4a24      	ldr	r2, [pc, #144]	; (15dc8 <hci_acl_handle+0x158>)
   15d38:	2302      	movs	r3, #2
   15d3a:	e7e5      	b.n	15d08 <hci_acl_handle+0x98>
		BT_ERR("Tx Buffer Overflow");
   15d3c:	481f      	ldr	r0, [pc, #124]	; (15dbc <hci_acl_handle+0x14c>)
   15d3e:	6803      	ldr	r3, [r0, #0]
   15d40:	0759      	lsls	r1, r3, #29
   15d42:	d12e      	bne.n	15da2 <hci_acl_handle+0x132>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   15d44:	4b21      	ldr	r3, [pc, #132]	; (15dcc <hci_acl_handle+0x15c>)
   15d46:	681b      	ldr	r3, [r3, #0]
   15d48:	019a      	lsls	r2, r3, #6
   15d4a:	d40e      	bmi.n	15d6a <hci_acl_handle+0xfa>
		return -ENOBUFS;
   15d4c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15d50:	e7b2      	b.n	15cb8 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   15d52:	2302      	movs	r3, #2
   15d54:	4a1e      	ldr	r2, [pc, #120]	; (15dd0 <hci_acl_handle+0x160>)
   15d56:	9206      	str	r2, [sp, #24]
   15d58:	9301      	str	r3, [sp, #4]
   15d5a:	9305      	str	r3, [sp, #20]
   15d5c:	2300      	movs	r3, #0
   15d5e:	aa05      	add	r2, sp, #20
   15d60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15d64:	f00f ff3c 	bl	25be0 <z_impl_z_log_msg2_static_create>
   15d68:	e7be      	b.n	15ce8 <hci_acl_handle+0x78>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d72:	2001      	movs	r0, #1
   15d74:	f7f5 fc80 	bl	b678 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   15d78:	2102      	movs	r1, #2
   15d7a:	f8c8 0000 	str.w	r0, [r8]
   15d7e:	3008      	adds	r0, #8
   15d80:	f014 fe33 	bl	2a9ea <net_buf_simple_add>
	hdr->len = len;
   15d84:	2401      	movs	r4, #1
	hdr->evt = evt;
   15d86:	231a      	movs	r3, #26
   15d88:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   15d8a:	7044      	strb	r4, [r0, #1]
   15d8c:	f8d8 0000 	ldr.w	r0, [r8]
   15d90:	4621      	mov	r1, r4
   15d92:	3008      	adds	r0, #8
   15d94:	f014 fe29 	bl	2a9ea <net_buf_simple_add>
   15d98:	4603      	mov	r3, r0
		return -ENOBUFS;
   15d9a:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   15d9e:	701c      	strb	r4, [r3, #0]
   15da0:	e78a      	b.n	15cb8 <hci_acl_handle+0x48>
		BT_ERR("Tx Buffer Overflow");
   15da2:	2302      	movs	r3, #2
   15da4:	4a0b      	ldr	r2, [pc, #44]	; (15dd4 <hci_acl_handle+0x164>)
   15da6:	9206      	str	r2, [sp, #24]
   15da8:	9301      	str	r3, [sp, #4]
   15daa:	9305      	str	r3, [sp, #20]
   15dac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15db0:	4623      	mov	r3, r4
   15db2:	aa05      	add	r2, sp, #20
   15db4:	f00f ff14 	bl	25be0 <z_impl_z_log_msg2_static_create>
   15db8:	e7c4      	b.n	15d44 <hci_acl_handle+0xd4>
   15dba:	bf00      	nop
   15dbc:	200009ac 	.word	0x200009ac
   15dc0:	0002d3cc 	.word	0x0002d3cc
   15dc4:	0002d400 	.word	0x0002d400
   15dc8:	0002d3e0 	.word	0x0002d3e0
   15dcc:	20000198 	.word	0x20000198
   15dd0:	0002d430 	.word	0x0002d430
   15dd4:	0002d41c 	.word	0x0002d41c

00015dd8 <hci_disconn_complete_encode>:
{
   15dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   15dda:	4b0e      	ldr	r3, [pc, #56]	; (15e14 <hci_disconn_complete_encode+0x3c>)
   15ddc:	681b      	ldr	r3, [r3, #0]
   15dde:	06db      	lsls	r3, r3, #27
   15de0:	d400      	bmi.n	15de4 <hci_disconn_complete_encode+0xc>
}
   15de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15de4:	f102 0408 	add.w	r4, r2, #8
   15de8:	4605      	mov	r5, r0
   15dea:	460e      	mov	r6, r1
   15dec:	4620      	mov	r0, r4
   15dee:	2102      	movs	r1, #2
   15df0:	f014 fdfb 	bl	2a9ea <net_buf_simple_add>
   15df4:	4603      	mov	r3, r0
	hdr->len = len;
   15df6:	2104      	movs	r1, #4
	hdr->evt = evt;
   15df8:	2205      	movs	r2, #5
	hdr->len = len;
   15dfa:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   15dfc:	701a      	strb	r2, [r3, #0]
   15dfe:	4620      	mov	r0, r4
   15e00:	f014 fdf3 	bl	2a9ea <net_buf_simple_add>
   15e04:	2700      	movs	r7, #0
	ep->status = 0x00;
   15e06:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   15e08:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   15e0c:	782b      	ldrb	r3, [r5, #0]
   15e0e:	70c3      	strb	r3, [r0, #3]
}
   15e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e12:	bf00      	nop
   15e14:	20000198 	.word	0x20000198

00015e18 <hci_disconn_complete_process>:
	conn_count--;
   15e18:	4a02      	ldr	r2, [pc, #8]	; (15e24 <hci_disconn_complete_process+0xc>)
   15e1a:	6813      	ldr	r3, [r2, #0]
   15e1c:	3b01      	subs	r3, #1
   15e1e:	6013      	str	r3, [r2, #0]
}
   15e20:	4770      	bx	lr
   15e22:	bf00      	nop
   15e24:	20002dfc 	.word	0x20002dfc

00015e28 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   15e28:	7f03      	ldrb	r3, [r0, #28]
   15e2a:	f003 0303 	and.w	r3, r3, #3
   15e2e:	3b01      	subs	r3, #1
   15e30:	2b01      	cmp	r3, #1
{
   15e32:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   15e34:	d90d      	bls.n	15e52 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   15e36:	4a16      	ldr	r2, [pc, #88]	; (15e90 <hci_acl_encode+0x68>)
   15e38:	4916      	ldr	r1, [pc, #88]	; (15e94 <hci_acl_encode+0x6c>)
   15e3a:	4817      	ldr	r0, [pc, #92]	; (15e98 <hci_acl_encode+0x70>)
   15e3c:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   15e40:	f00e fedc 	bl	24bfc <printk>
   15e44:	4040      	eors	r0, r0
   15e46:	f380 8811 	msr	BASEPRI, r0
   15e4a:	f04f 0003 	mov.w	r0, #3
   15e4e:	df02      	svc	2
		break;
	}
}
   15e50:	bd70      	pop	{r4, r5, r6, pc}
   15e52:	4604      	mov	r4, r0
   15e54:	f101 0508 	add.w	r5, r1, #8
   15e58:	4628      	mov	r0, r5
   15e5a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   15e5c:	88e6      	ldrh	r6, [r4, #6]
   15e5e:	f014 fdc4 	bl	2a9ea <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   15e62:	7f23      	ldrb	r3, [r4, #28]
   15e64:	f003 0303 	and.w	r3, r3, #3
   15e68:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   15e6a:	bf0c      	ite	eq
   15e6c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   15e70:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   15e74:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   15e76:	7f61      	ldrb	r1, [r4, #29]
   15e78:	8041      	strh	r1, [r0, #2]
   15e7a:	4628      	mov	r0, r5
   15e7c:	f014 fdb5 	bl	2a9ea <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   15e80:	7f62      	ldrb	r2, [r4, #29]
   15e82:	f104 011f 	add.w	r1, r4, #31
}
   15e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   15e8a:	f012 bb94 	b.w	285b6 <memcpy>
   15e8e:	bf00      	nop
   15e90:	0002d444 	.word	0x0002d444
   15e94:	0002d314 	.word	0x0002d314
   15e98:	0002d27c 	.word	0x0002d27c

00015e9c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   15e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ea0:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   15ea2:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   15ea6:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   15ea8:	f1bc 0f03 	cmp.w	ip, #3
{
   15eac:	af04      	add	r7, sp, #16
   15eae:	4604      	mov	r4, r0
   15eb0:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   15eb2:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   15eb6:	d01e      	beq.n	15ef6 <hci_evt_encode+0x5a>
	switch (node_rx->hdr.type) {
   15eb8:	f1ac 0c05 	sub.w	ip, ip, #5
   15ebc:	f1bc 0f17 	cmp.w	ip, #23
   15ec0:	d833      	bhi.n	15f2a <hci_evt_encode+0x8e>
   15ec2:	e8df f01c 	tbh	[pc, ip, lsl #1]
   15ec6:	0043      	.short	0x0043
   15ec8:	00320032 	.word	0x00320032
   15ecc:	00320032 	.word	0x00320032
   15ed0:	00320032 	.word	0x00320032
   15ed4:	00320032 	.word	0x00320032
   15ed8:	00320032 	.word	0x00320032
   15edc:	00320032 	.word	0x00320032
   15ee0:	00320032 	.word	0x00320032
   15ee4:	00320032 	.word	0x00320032
   15ee8:	012200bf 	.word	0x012200bf
   15eec:	01580128 	.word	0x01580128
   15ef0:	0182016f 	.word	0x0182016f
   15ef4:	01b5      	.short	0x01b5
	switch (pdu_data->llctrl.opcode) {
   15ef6:	7fc3      	ldrb	r3, [r0, #31]
   15ef8:	3b03      	subs	r3, #3
   15efa:	2b12      	cmp	r3, #18
   15efc:	f200 81ce 	bhi.w	1629c <hci_evt_encode+0x400>
   15f00:	e8df f013 	tbh	[pc, r3, lsl #1]
   15f04:	01cc0231 	.word	0x01cc0231
   15f08:	025e01cc 	.word	0x025e01cc
   15f0c:	01cc0277 	.word	0x01cc0277
   15f10:	01cc0290 	.word	0x01cc0290
   15f14:	01cc01cc 	.word	0x01cc01cc
   15f18:	01cc02cb 	.word	0x01cc02cb
   15f1c:	01cc0297 	.word	0x01cc0297
   15f20:	01cc02bc 	.word	0x01cc02bc
   15f24:	01da01cc 	.word	0x01da01cc
   15f28:	01da      	.short	0x01da
		LL_ASSERT(0);
   15f2a:	4ab8      	ldr	r2, [pc, #736]	; (1620c <hci_evt_encode+0x370>)
   15f2c:	49b8      	ldr	r1, [pc, #736]	; (16210 <hci_evt_encode+0x374>)
   15f2e:	48b9      	ldr	r0, [pc, #740]	; (16214 <hci_evt_encode+0x378>)
   15f30:	f641 43af 	movw	r3, #7343	; 0x1caf
   15f34:	f00e fe62 	bl	24bfc <printk>
   15f38:	4040      	eors	r0, r0
   15f3a:	f380 8811 	msr	BASEPRI, r0
   15f3e:	f04f 0003 	mov.w	r0, #3
   15f42:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   15f44:	372c      	adds	r7, #44	; 0x2c
   15f46:	46bd      	mov	sp, r7
   15f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   15f4c:	4ab2      	ldr	r2, [pc, #712]	; (16218 <hci_evt_encode+0x37c>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   15f4e:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   15f50:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   15f52:	f894 9019 	ldrb.w	r9, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   15f56:	e892 0003 	ldmia.w	r2, {r0, r1}
   15f5a:	0c0a      	lsrs	r2, r1, #16
   15f5c:	75ba      	strb	r2, [r7, #22]
	if (adv->tx_addr) {
   15f5e:	7f22      	ldrb	r2, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   15f60:	6138      	str	r0, [r7, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   15f62:	425b      	negs	r3, r3
	if (adv->tx_addr) {
   15f64:	0652      	lsls	r2, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   15f66:	82b9      	strh	r1, [r7, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   15f68:	fa4f f883 	sxtb.w	r8, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
   15f6c:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   15f70:	f100 82c5 	bmi.w	164fe <hci_evt_encode+0x662>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15f74:	4ba9      	ldr	r3, [pc, #676]	; (1621c <hci_evt_encode+0x380>)
   15f76:	685b      	ldr	r3, [r3, #4]
   15f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   15f7c:	2e00      	cmp	r6, #0
   15f7e:	f040 8303 	bne.w	16588 <hci_evt_encode+0x6ec>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15f82:	2b00      	cmp	r3, #0
   15f84:	d0de      	beq.n	15f44 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   15f86:	4ba6      	ldr	r3, [pc, #664]	; (16220 <hci_evt_encode+0x384>)
   15f88:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15f8a:	079e      	lsls	r6, r3, #30
   15f8c:	d5da      	bpl.n	15f44 <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
   15f8e:	4ba5      	ldr	r3, [pc, #660]	; (16224 <hci_evt_encode+0x388>)
   15f90:	681b      	ldr	r3, [r3, #0]
   15f92:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   15f94:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
   15f98:	db09      	blt.n	15fae <hci_evt_encode+0x112>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   15f9a:	7f20      	ldrb	r0, [r4, #28]
   15f9c:	465a      	mov	r2, fp
   15f9e:	f3c0 1180 	ubfx	r1, r0, #6, #1
   15fa2:	f000 000f 	and.w	r0, r0, #15
   15fa6:	f7fe fffb 	bl	14fa0 <dup_found.part.0>
	if (dup_scan &&
   15faa:	2800      	cmp	r0, #0
   15fac:	d1ca      	bne.n	15f44 <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   15fae:	7f23      	ldrb	r3, [r4, #28]
   15fb0:	f003 030f 	and.w	r3, r3, #15
   15fb4:	2b01      	cmp	r3, #1
   15fb6:	f000 83ac 	beq.w	16712 <hci_evt_encode+0x876>
		data_len = (adv->len - BDADDR_SIZE);
   15fba:	7f63      	ldrb	r3, [r4, #29]
   15fbc:	1f9e      	subs	r6, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   15fbe:	1d9a      	adds	r2, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
   15fc0:	b2f6      	uxtb	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   15fc2:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   15fc4:	b2d2      	uxtb	r2, r2
   15fc6:	603a      	str	r2, [r7, #0]
	return net_buf_add(buf, melen);
   15fc8:	b2db      	uxtb	r3, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   15fca:	46b2      	mov	sl, r6
   15fcc:	3508      	adds	r5, #8
   15fce:	2102      	movs	r1, #2
   15fd0:	4628      	mov	r0, r5
   15fd2:	607b      	str	r3, [r7, #4]
   15fd4:	f014 fd09 	bl	2a9ea <net_buf_simple_add>
	hdr->len = len;
   15fd8:	683b      	ldr	r3, [r7, #0]
   15fda:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   15fdc:	213e      	movs	r1, #62	; 0x3e
   15fde:	7001      	strb	r1, [r0, #0]
   15fe0:	2101      	movs	r1, #1
   15fe2:	4628      	mov	r0, r5
   15fe4:	f014 fd01 	bl	2a9ea <net_buf_simple_add>
   15fe8:	687b      	ldr	r3, [r7, #4]
   15fea:	4684      	mov	ip, r0
   15fec:	4619      	mov	r1, r3
	me->subevent = subevt;
   15fee:	2302      	movs	r3, #2
   15ff0:	f88c 3000 	strb.w	r3, [ip]
   15ff4:	4628      	mov	r0, r5
   15ff6:	f014 fcf8 	bl	2a9ea <net_buf_simple_add>
	sep->num_reports = 1U;
   15ffa:	2301      	movs	r3, #1
   15ffc:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   15ffe:	7f23      	ldrb	r3, [r4, #28]
   16000:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16004:	f003 030f 	and.w	r3, r3, #15
   16008:	4413      	add	r3, r2
   1600a:	4605      	mov	r5, r0
   1600c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
   16010:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   16012:	f005 fc3f 	bl	1b894 <ll_rl_size_get>
   16016:	4581      	cmp	r9, r0
   16018:	f080 8344 	bcs.w	166a4 <hci_evt_encode+0x808>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   1601c:	4648      	mov	r0, r9
   1601e:	1cea      	adds	r2, r5, #3
   16020:	1ca9      	adds	r1, r5, #2
   16022:	f005 fbf1 	bl	1b808 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   16026:	78ab      	ldrb	r3, [r5, #2]
   16028:	3302      	adds	r3, #2
   1602a:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1602c:	f105 090a 	add.w	r9, r5, #10
	adv_info->length = data_len;
   16030:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   16032:	4652      	mov	r2, sl
   16034:	f104 0124 	add.w	r1, r4, #36	; 0x24
   16038:	4648      	mov	r0, r9
   1603a:	f012 fabc 	bl	285b6 <memcpy>
	*prssi = rssi;
   1603e:	f809 800a 	strb.w	r8, [r9, sl]
   16042:	e77f      	b.n	15f44 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   16044:	f018 0f01 	tst.w	r8, #1
   16048:	f040 824b 	bne.w	164e2 <hci_evt_encode+0x646>
	status = cc->status;
   1604c:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   16050:	f1b8 0f00 	cmp.w	r8, #0
   16054:	f000 823c 	beq.w	164d0 <hci_evt_encode+0x634>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16058:	4b70      	ldr	r3, [pc, #448]	; (1621c <hci_evt_encode+0x380>)
   1605a:	685b      	ldr	r3, [r3, #4]
   1605c:	0098      	lsls	r0, r3, #2
   1605e:	f57f af71 	bpl.w	15f44 <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   16062:	4b6f      	ldr	r3, [pc, #444]	; (16220 <hci_evt_encode+0x384>)
   16064:	681b      	ldr	r3, [r3, #0]
   16066:	f240 2201 	movw	r2, #513	; 0x201
   1606a:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1606c:	f403 7900 	and.w	r9, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   16070:	f43f af68 	beq.w	15f44 <hci_evt_encode+0xa8>
   16074:	3508      	adds	r5, #8
	if (!status) {
   16076:	f1b8 0f00 	cmp.w	r8, #0
   1607a:	f040 8267 	bne.w	1654c <hci_evt_encode+0x6b0>
		conn_count++;
   1607e:	4a6a      	ldr	r2, [pc, #424]	; (16228 <hci_evt_encode+0x38c>)
   16080:	6813      	ldr	r3, [r2, #0]
   16082:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   16084:	f104 0a1f 	add.w	sl, r4, #31
		conn_count++;
   16088:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1608a:	f1b9 0f00 	cmp.w	r9, #0
   1608e:	f000 82d9 	beq.w	16644 <hci_evt_encode+0x7a8>
   16092:	2102      	movs	r1, #2
   16094:	4628      	mov	r0, r5
   16096:	f014 fca8 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   1609a:	233e      	movs	r3, #62	; 0x3e
   1609c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1609e:	231f      	movs	r3, #31
   160a0:	7043      	strb	r3, [r0, #1]
   160a2:	2101      	movs	r1, #1
   160a4:	4628      	mov	r0, r5
   160a6:	f014 fca0 	bl	2a9ea <net_buf_simple_add>
   160aa:	4603      	mov	r3, r0
	me->subevent = subevt;
   160ac:	220a      	movs	r2, #10
   160ae:	701a      	strb	r2, [r3, #0]
   160b0:	4628      	mov	r0, r5
   160b2:	211e      	movs	r1, #30
   160b4:	f014 fc99 	bl	2a9ea <net_buf_simple_add>
		leecc->status = 0x00;
   160b8:	f880 8000 	strb.w	r8, [r0]
		leecc->handle = sys_cpu_to_le16(handle);
   160bc:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   160c0:	7f63      	ldrb	r3, [r4, #29]
   160c2:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   160c4:	7fa3      	ldrb	r3, [r4, #30]
   160c6:	7103      	strb	r3, [r0, #4]
   160c8:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   160ca:	2206      	movs	r2, #6
   160cc:	4651      	mov	r1, sl
   160ce:	3005      	adds	r0, #5
   160d0:	f012 fa71 	bl	285b6 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   160d4:	2206      	movs	r2, #6
   160d6:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   160da:	f105 000b 	add.w	r0, r5, #11
   160de:	f012 fa6a 	bl	285b6 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   160e2:	2206      	movs	r2, #6
   160e4:	f104 0125 	add.w	r1, r4, #37	; 0x25
   160e8:	f105 0011 	add.w	r0, r5, #17
   160ec:	f012 fa63 	bl	285b6 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   160f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   160f2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   160f4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   160f6:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   160fa:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   160fe:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   16102:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   16106:	776b      	strb	r3, [r5, #29]
		return;
   16108:	e71c      	b.n	15f44 <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1610a:	460a      	mov	r2, r1
   1610c:	4640      	mov	r0, r8
   1610e:	4631      	mov	r1, r6
   16110:	f7ff fe62 	bl	15dd8 <hci_disconn_complete_encode>
		break;
   16114:	e716      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16116:	4b41      	ldr	r3, [pc, #260]	; (1621c <hci_evt_encode+0x380>)
   16118:	685b      	ldr	r3, [r3, #4]
   1611a:	0099      	lsls	r1, r3, #2
   1611c:	f57f af12 	bpl.w	15f44 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   16120:	4b3f      	ldr	r3, [pc, #252]	; (16220 <hci_evt_encode+0x384>)
   16122:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16124:	075a      	lsls	r2, r3, #29
   16126:	f57f af0d 	bpl.w	15f44 <hci_evt_encode+0xa8>
   1612a:	3508      	adds	r5, #8
   1612c:	2102      	movs	r1, #2
   1612e:	4628      	mov	r0, r5
   16130:	f014 fc5b 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   16134:	233e      	movs	r3, #62	; 0x3e
   16136:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   16138:	230a      	movs	r3, #10
   1613a:	7043      	strb	r3, [r0, #1]
   1613c:	2101      	movs	r1, #1
   1613e:	4628      	mov	r0, r5
   16140:	f014 fc53 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   16144:	2303      	movs	r3, #3
   16146:	7003      	strb	r3, [r0, #0]
   16148:	2109      	movs	r1, #9
   1614a:	4628      	mov	r0, r5
   1614c:	f014 fc4d 	bl	2a9ea <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   16150:	f018 0f01 	tst.w	r8, #1
   16154:	4605      	mov	r5, r0
   16156:	f040 82c7 	bne.w	166e8 <hci_evt_encode+0x84c>
	sep->status = cu->status;
   1615a:	7f23      	ldrb	r3, [r4, #28]
   1615c:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1615e:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   16160:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   16162:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   16164:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   16168:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1616c:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   16170:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   16174:	e6e6      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   16176:	4b29      	ldr	r3, [pc, #164]	; (1621c <hci_evt_encode+0x380>)
   16178:	685b      	ldr	r3, [r3, #4]
   1617a:	041b      	lsls	r3, r3, #16
   1617c:	f04f 0400 	mov.w	r4, #0
   16180:	f57f aee0 	bpl.w	15f44 <hci_evt_encode+0xa8>
   16184:	3508      	adds	r5, #8
   16186:	2102      	movs	r1, #2
   16188:	4628      	mov	r0, r5
   1618a:	f014 fc2e 	bl	2a9ea <net_buf_simple_add>
	hdr->len = len;
   1618e:	2103      	movs	r1, #3
	hdr->evt = evt;
   16190:	2330      	movs	r3, #48	; 0x30
   16192:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   16194:	7041      	strb	r1, [r0, #1]
   16196:	4628      	mov	r0, r5
   16198:	f014 fc27 	bl	2a9ea <net_buf_simple_add>
	ep->status = 0x00;
   1619c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1619e:	f8a0 6001 	strh.w	r6, [r0, #1]
   161a2:	e6cf      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   161a4:	4b21      	ldr	r3, [pc, #132]	; (1622c <hci_evt_encode+0x390>)
   161a6:	681b      	ldr	r3, [r3, #0]
   161a8:	021c      	lsls	r4, r3, #8
   161aa:	f57f aecb 	bpl.w	15f44 <hci_evt_encode+0xa8>
   161ae:	3508      	adds	r5, #8
   161b0:	2102      	movs	r1, #2
   161b2:	4628      	mov	r0, r5
   161b4:	f014 fc19 	bl	2a9ea <net_buf_simple_add>
	hdr->len = len;
   161b8:	2102      	movs	r1, #2
	hdr->evt = evt;
   161ba:	2357      	movs	r3, #87	; 0x57
   161bc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   161be:	7041      	strb	r1, [r0, #1]
   161c0:	4628      	mov	r0, r5
   161c2:	f014 fc12 	bl	2a9ea <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   161c6:	8006      	strh	r6, [r0, #0]
   161c8:	e6bc      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   161ca:	4b14      	ldr	r3, [pc, #80]	; (1621c <hci_evt_encode+0x380>)
   161cc:	685b      	ldr	r3, [r3, #4]
   161ce:	0098      	lsls	r0, r3, #2
   161d0:	f57f aeb8 	bpl.w	15f44 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   161d4:	4b12      	ldr	r3, [pc, #72]	; (16220 <hci_evt_encode+0x384>)
   161d6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   161d8:	0319      	lsls	r1, r3, #12
   161da:	f57f aeb3 	bpl.w	15f44 <hci_evt_encode+0xa8>
   161de:	3508      	adds	r5, #8
   161e0:	2102      	movs	r1, #2
   161e2:	4628      	mov	r0, r5
   161e4:	f014 fc01 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   161e8:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   161ea:	2304      	movs	r3, #4
	hdr->evt = evt;
   161ec:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   161ee:	7043      	strb	r3, [r0, #1]
   161f0:	2101      	movs	r1, #1
   161f2:	4628      	mov	r0, r5
   161f4:	f014 fbf9 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   161f8:	2314      	movs	r3, #20
   161fa:	7003      	strb	r3, [r0, #0]
   161fc:	2103      	movs	r1, #3
   161fe:	4628      	mov	r0, r5
   16200:	f014 fbf3 	bl	2a9ea <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   16204:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   16206:	7f23      	ldrb	r3, [r4, #28]
   16208:	7083      	strb	r3, [r0, #2]
   1620a:	e69b      	b.n	15f44 <hci_evt_encode+0xa8>
   1620c:	0002d444 	.word	0x0002d444
   16210:	0002d314 	.word	0x0002d314
   16214:	0002d27c 	.word	0x0002d27c
   16218:	0002c4e4 	.word	0x0002c4e4
   1621c:	20000198 	.word	0x20000198
   16220:	200001a0 	.word	0x200001a0
   16224:	20002e00 	.word	0x20002e00
   16228:	20002dfc 	.word	0x20002dfc
   1622c:	20001ea8 	.word	0x20001ea8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16230:	4bbc      	ldr	r3, [pc, #752]	; (16524 <hci_evt_encode+0x688>)
   16232:	685b      	ldr	r3, [r3, #4]
   16234:	009a      	lsls	r2, r3, #2
   16236:	d566      	bpl.n	16306 <hci_evt_encode+0x46a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   16238:	4bbb      	ldr	r3, [pc, #748]	; (16528 <hci_evt_encode+0x68c>)
   1623a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1623c:	051b      	lsls	r3, r3, #20
   1623e:	d562      	bpl.n	16306 <hci_evt_encode+0x46a>
   16240:	3508      	adds	r5, #8
   16242:	2102      	movs	r1, #2
   16244:	4628      	mov	r0, r5
   16246:	f014 fbd0 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   1624a:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1624c:	2306      	movs	r3, #6
	hdr->evt = evt;
   1624e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   16250:	7043      	strb	r3, [r0, #1]
   16252:	2101      	movs	r1, #1
   16254:	4628      	mov	r0, r5
   16256:	f014 fbc8 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   1625a:	230c      	movs	r3, #12
   1625c:	7003      	strb	r3, [r0, #0]
   1625e:	2105      	movs	r1, #5
   16260:	4628      	mov	r0, r5
   16262:	f014 fbc2 	bl	2a9ea <net_buf_simple_add>
	sep->status = pu->status;
   16266:	7f23      	ldrb	r3, [r4, #28]
   16268:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1626a:	f8a0 6001 	strh.w	r6, [r0, #1]
   1626e:	7f62      	ldrb	r2, [r4, #29]
   16270:	2a00      	cmp	r2, #0
   16272:	fa92 f3a2 	rbit	r3, r2
   16276:	fab3 f383 	clz	r3, r3
   1627a:	bf08      	it	eq
   1627c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   16280:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   16282:	70c3      	strb	r3, [r0, #3]
   16284:	7fa2      	ldrb	r2, [r4, #30]
   16286:	fa92 f3a2 	rbit	r3, r2
   1628a:	2a00      	cmp	r2, #0
   1628c:	fab3 f383 	clz	r3, r3
   16290:	bf08      	it	eq
   16292:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   16296:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   16298:	7103      	strb	r3, [r0, #4]
   1629a:	e653      	b.n	15f44 <hci_evt_encode+0xa8>
		LL_ASSERT(0);
   1629c:	4aa3      	ldr	r2, [pc, #652]	; (1652c <hci_evt_encode+0x690>)
   1629e:	49a4      	ldr	r1, [pc, #656]	; (16530 <hci_evt_encode+0x694>)
   162a0:	48a4      	ldr	r0, [pc, #656]	; (16534 <hci_evt_encode+0x698>)
   162a2:	f641 538f 	movw	r3, #7567	; 0x1d8f
   162a6:	f00e fca9 	bl	24bfc <printk>
   162aa:	4040      	eors	r0, r0
   162ac:	f380 8811 	msr	BASEPRI, r0
   162b0:	f04f 0003 	mov.w	r0, #3
   162b4:	df02      	svc	2
}
   162b6:	e645      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   162b8:	4b9a      	ldr	r3, [pc, #616]	; (16524 <hci_evt_encode+0x688>)
   162ba:	685b      	ldr	r3, [r3, #4]
   162bc:	009a      	lsls	r2, r3, #2
   162be:	f57f ae41 	bpl.w	15f44 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   162c2:	4b99      	ldr	r3, [pc, #612]	; (16528 <hci_evt_encode+0x68c>)
   162c4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   162c6:	065b      	lsls	r3, r3, #25
   162c8:	f57f ae3c 	bpl.w	15f44 <hci_evt_encode+0xa8>
   162cc:	3508      	adds	r5, #8
   162ce:	2102      	movs	r1, #2
   162d0:	4628      	mov	r0, r5
   162d2:	f014 fb8a 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   162d6:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   162d8:	230b      	movs	r3, #11
	hdr->evt = evt;
   162da:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   162dc:	7043      	strb	r3, [r0, #1]
   162de:	2101      	movs	r1, #1
   162e0:	4628      	mov	r0, r5
   162e2:	f014 fb82 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   162e6:	2307      	movs	r3, #7
   162e8:	7003      	strb	r3, [r0, #0]
   162ea:	210a      	movs	r1, #10
   162ec:	4628      	mov	r0, r5
   162ee:	f014 fb7c 	bl	2a9ea <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   162f2:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   162f4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   162f6:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   162f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   162fa:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   162fc:	8c23      	ldrh	r3, [r4, #32]
   162fe:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   16300:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   16302:	8103      	strh	r3, [r0, #8]
   16304:	e61e      	b.n	15f44 <hci_evt_encode+0xa8>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   16306:	488c      	ldr	r0, [pc, #560]	; (16538 <hci_evt_encode+0x69c>)
   16308:	6803      	ldr	r3, [r0, #0]
   1630a:	f013 0f06 	tst.w	r3, #6
   1630e:	f43f ae19 	beq.w	15f44 <hci_evt_encode+0xa8>
   16312:	7f62      	ldrb	r2, [r4, #29]
   16314:	7fa3      	ldrb	r3, [r4, #30]
   16316:	7f25      	ldrb	r5, [r4, #28]
   16318:	2a00      	cmp	r2, #0
   1631a:	fa92 f2a2 	rbit	r2, r2
   1631e:	fab2 f282 	clz	r2, r2
   16322:	bf08      	it	eq
   16324:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   16328:	2b00      	cmp	r3, #0
   1632a:	fa93 f3a3 	rbit	r3, r3
   1632e:	fab3 f383 	clz	r3, r3
   16332:	466c      	mov	r4, sp
   16334:	bf08      	it	eq
   16336:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1633a:	b08a      	sub	sp, #40	; 0x28
   1633c:	3301      	adds	r3, #1
   1633e:	930c      	str	r3, [sp, #48]	; 0x30
   16340:	3201      	adds	r2, #1
   16342:	ab04      	add	r3, sp, #16
   16344:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
   16348:	461a      	mov	r2, r3
   1634a:	2106      	movs	r1, #6
   1634c:	4d7b      	ldr	r5, [pc, #492]	; (1653c <hci_evt_encode+0x6a0>)
   1634e:	9609      	str	r6, [sp, #36]	; 0x24
   16350:	9508      	str	r5, [sp, #32]
   16352:	6139      	str	r1, [r7, #16]
   16354:	f842 1f0c 	str.w	r1, [r2, #12]!
   16358:	2300      	movs	r3, #0
   1635a:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   1635e:	f00f fc3f 	bl	25be0 <z_impl_z_log_msg2_static_create>
   16362:	46a5      	mov	sp, r4
   16364:	e5ee      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16366:	4b6f      	ldr	r3, [pc, #444]	; (16524 <hci_evt_encode+0x688>)
   16368:	685b      	ldr	r3, [r3, #4]
   1636a:	0098      	lsls	r0, r3, #2
   1636c:	f57f adea 	bpl.w	15f44 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   16370:	4b6d      	ldr	r3, [pc, #436]	; (16528 <hci_evt_encode+0x68c>)
   16372:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16374:	06d9      	lsls	r1, r3, #27
   16376:	f57f ade5 	bpl.w	15f44 <hci_evt_encode+0xa8>
   1637a:	3508      	adds	r5, #8
   1637c:	2102      	movs	r1, #2
   1637e:	4628      	mov	r0, r5
   16380:	f014 fb33 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   16384:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   16386:	230d      	movs	r3, #13
	hdr->evt = evt;
   16388:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1638a:	7043      	strb	r3, [r0, #1]
   1638c:	2101      	movs	r1, #1
   1638e:	4628      	mov	r0, r5
   16390:	f014 fb2b 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   16394:	2305      	movs	r3, #5
   16396:	7003      	strb	r3, [r0, #0]
   16398:	210c      	movs	r1, #12
   1639a:	4628      	mov	r0, r5
   1639c:	f014 fb25 	bl	2a9ea <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   163a0:	f104 0120 	add.w	r1, r4, #32
   163a4:	4605      	mov	r5, r0
   163a6:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   163a8:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   163ac:	f012 f903 	bl	285b6 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   163b0:	2202      	movs	r2, #2
   163b2:	f104 0128 	add.w	r1, r4, #40	; 0x28
   163b6:	f105 000a 	add.w	r0, r5, #10
   163ba:	f012 f8fc 	bl	285b6 <memcpy>
   163be:	e5c1      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   163c0:	4b58      	ldr	r3, [pc, #352]	; (16524 <hci_evt_encode+0x688>)
   163c2:	681b      	ldr	r3, [r3, #0]
   163c4:	061a      	lsls	r2, r3, #24
   163c6:	f04f 0400 	mov.w	r4, #0
   163ca:	f57f adbb 	bpl.w	15f44 <hci_evt_encode+0xa8>
   163ce:	3508      	adds	r5, #8
   163d0:	2102      	movs	r1, #2
   163d2:	4628      	mov	r0, r5
   163d4:	f014 fb09 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   163d8:	2308      	movs	r3, #8
	hdr->len = len;
   163da:	2104      	movs	r1, #4
	hdr->evt = evt;
   163dc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   163de:	7041      	strb	r1, [r0, #1]
   163e0:	4628      	mov	r0, r5
   163e2:	f014 fb02 	bl	2a9ea <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   163e6:	2301      	movs	r3, #1
	ep->status = err;
   163e8:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   163ea:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   163ee:	70c3      	strb	r3, [r0, #3]
   163f0:	e5a8      	b.n	15f44 <hci_evt_encode+0xa8>
		le_unknown_rsp(pdu_data, handle, buf);
   163f2:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   163f6:	2b0e      	cmp	r3, #14
   163f8:	f000 8184 	beq.w	16704 <hci_evt_encode+0x868>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   163fc:	484e      	ldr	r0, [pc, #312]	; (16538 <hci_evt_encode+0x69c>)
   163fe:	6802      	ldr	r2, [r0, #0]
   16400:	f012 0f06 	tst.w	r2, #6
   16404:	f43f ad9e 	beq.w	15f44 <hci_evt_encode+0xa8>
   16408:	494d      	ldr	r1, [pc, #308]	; (16540 <hci_evt_encode+0x6a4>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1640a:	e9c7 1308 	strd	r1, r3, [r7, #32]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1640e:	2203      	movs	r2, #3
   16410:	60fa      	str	r2, [r7, #12]
   16412:	61fa      	str	r2, [r7, #28]
   16414:	2300      	movs	r3, #0
   16416:	f107 021c 	add.w	r2, r7, #28
   1641a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1641e:	f00f fbdf 	bl	25be0 <z_impl_z_log_msg2_static_create>
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   16422:	e58f      	b.n	15f44 <hci_evt_encode+0xa8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   16424:	460b      	mov	r3, r1
   16426:	4632      	mov	r2, r6
   16428:	4641      	mov	r1, r8
   1642a:	2000      	movs	r0, #0
   1642c:	f7fe fe18 	bl	15060 <le_remote_feat_complete>
		break;
   16430:	e588      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16432:	4b3c      	ldr	r3, [pc, #240]	; (16524 <hci_evt_encode+0x688>)
   16434:	685b      	ldr	r3, [r3, #4]
   16436:	0098      	lsls	r0, r3, #2
   16438:	d569      	bpl.n	1650e <hci_evt_encode+0x672>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1643a:	4b3b      	ldr	r3, [pc, #236]	; (16528 <hci_evt_encode+0x68c>)
   1643c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1643e:	0699      	lsls	r1, r3, #26
   16440:	d565      	bpl.n	1650e <hci_evt_encode+0x672>
   16442:	3508      	adds	r5, #8
   16444:	2102      	movs	r1, #2
   16446:	4628      	mov	r0, r5
   16448:	f014 facf 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   1644c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1644e:	230b      	movs	r3, #11
	hdr->evt = evt;
   16450:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   16452:	7043      	strb	r3, [r0, #1]
   16454:	2101      	movs	r1, #1
   16456:	4628      	mov	r0, r5
   16458:	f014 fac7 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   1645c:	2306      	movs	r3, #6
   1645e:	7003      	strb	r3, [r0, #0]
   16460:	210a      	movs	r1, #10
   16462:	4628      	mov	r0, r5
   16464:	f014 fac1 	bl	2a9ea <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   16468:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1646a:	8c23      	ldrh	r3, [r4, #32]
   1646c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1646e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   16470:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   16472:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   16474:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   16476:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   16478:	8103      	strh	r3, [r0, #8]
   1647a:	e563      	b.n	15f44 <hci_evt_encode+0xa8>
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   1647c:	482e      	ldr	r0, [pc, #184]	; (16538 <hci_evt_encode+0x69c>)
   1647e:	6803      	ldr	r3, [r0, #0]
   16480:	f013 0f06 	tst.w	r3, #6
   16484:	f43f ad5e 	beq.w	15f44 <hci_evt_encode+0xa8>
   16488:	f894 2020 	ldrb.w	r2, [r4, #32]
   1648c:	492d      	ldr	r1, [pc, #180]	; (16544 <hci_evt_encode+0x6a8>)
   1648e:	2303      	movs	r3, #3
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   16490:	e9c7 1208 	strd	r1, r2, [r7, #32]
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   16494:	60fb      	str	r3, [r7, #12]
   16496:	61fb      	str	r3, [r7, #28]
   16498:	e7bc      	b.n	16414 <hci_evt_encode+0x578>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1649a:	4b22      	ldr	r3, [pc, #136]	; (16524 <hci_evt_encode+0x688>)
   1649c:	681b      	ldr	r3, [r3, #0]
   1649e:	061b      	lsls	r3, r3, #24
   164a0:	f57f ad50 	bpl.w	15f44 <hci_evt_encode+0xa8>
   164a4:	3508      	adds	r5, #8
   164a6:	2102      	movs	r1, #2
   164a8:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   164aa:	f894 4020 	ldrb.w	r4, [r4, #32]
   164ae:	f014 fa9c 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   164b2:	2308      	movs	r3, #8
	hdr->len = len;
   164b4:	2104      	movs	r1, #4
	hdr->evt = evt;
   164b6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   164b8:	7041      	strb	r1, [r0, #1]
   164ba:	4628      	mov	r0, r5
   164bc:	f014 fa95 	bl	2a9ea <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   164c0:	fab4 f384 	clz	r3, r4
   164c4:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   164c6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   164c8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   164cc:	70c3      	strb	r3, [r0, #3]
   164ce:	e539      	b.n	15f44 <hci_evt_encode+0xa8>
		ll_rl_crpa_set(cc->peer_addr_type,
   164d0:	7fa0      	ldrb	r0, [r4, #30]
   164d2:	f104 0325 	add.w	r3, r4, #37	; 0x25
   164d6:	22ff      	movs	r2, #255	; 0xff
   164d8:	f104 011f 	add.w	r1, r4, #31
   164dc:	f005 fad6 	bl	1ba8c <ll_rl_crpa_set>
   164e0:	e5ba      	b.n	16058 <hci_evt_encode+0x1bc>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   164e2:	4a12      	ldr	r2, [pc, #72]	; (1652c <hci_evt_encode+0x690>)
   164e4:	4918      	ldr	r1, [pc, #96]	; (16548 <hci_evt_encode+0x6ac>)
   164e6:	4813      	ldr	r0, [pc, #76]	; (16534 <hci_evt_encode+0x698>)
   164e8:	f641 23f5 	movw	r3, #6901	; 0x1af5
   164ec:	f00e fb86 	bl	24bfc <printk>
   164f0:	4040      	eors	r0, r0
   164f2:	f380 8811 	msr	BASEPRI, r0
   164f6:	f04f 0003 	mov.w	r0, #3
   164fa:	df02      	svc	2
   164fc:	e5a6      	b.n	1604c <hci_evt_encode+0x1b0>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   164fe:	2100      	movs	r1, #0
   16500:	f104 031e 	add.w	r3, r4, #30
   16504:	464a      	mov	r2, r9
   16506:	4608      	mov	r0, r1
   16508:	f005 fac0 	bl	1ba8c <ll_rl_crpa_set>
   1650c:	e532      	b.n	15f74 <hci_evt_encode+0xd8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1650e:	2300      	movs	r3, #0
   16510:	e9cd 3301 	strd	r3, r3, [sp, #4]
   16514:	9300      	str	r3, [sp, #0]
   16516:	221a      	movs	r2, #26
   16518:	2102      	movs	r1, #2
   1651a:	4630      	mov	r0, r6
   1651c:	f002 f894 	bl	18648 <ll_conn_update>
		return;
   16520:	e510      	b.n	15f44 <hci_evt_encode+0xa8>
   16522:	bf00      	nop
   16524:	20000198 	.word	0x20000198
   16528:	200001a0 	.word	0x200001a0
   1652c:	0002d444 	.word	0x0002d444
   16530:	0002d314 	.word	0x0002d314
   16534:	0002d27c 	.word	0x0002d27c
   16538:	200009ac 	.word	0x200009ac
   1653c:	0002d520 	.word	0x0002d520
   16540:	0002d54c 	.word	0x0002d54c
   16544:	0002d55c 	.word	0x0002d55c
   16548:	0002d4a8 	.word	0x0002d4a8
   1654c:	2102      	movs	r1, #2
   1654e:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   16550:	f1b9 0f00 	cmp.w	r9, #0
   16554:	f040 80b0 	bne.w	166b8 <hci_evt_encode+0x81c>
   16558:	f014 fa47 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   1655c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1655e:	2313      	movs	r3, #19
	hdr->evt = evt;
   16560:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   16562:	7043      	strb	r3, [r0, #1]
   16564:	2101      	movs	r1, #1
   16566:	4628      	mov	r0, r5
   16568:	f014 fa3f 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   1656c:	2301      	movs	r3, #1
   1656e:	7003      	strb	r3, [r0, #0]
   16570:	2112      	movs	r1, #18
   16572:	4628      	mov	r0, r5
   16574:	f014 fa39 	bl	2a9ea <net_buf_simple_add>
   16578:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1657a:	2212      	movs	r2, #18
   1657c:	4649      	mov	r1, r9
   1657e:	f012 f825 	bl	285cc <memset>
		lecc->status = status;
   16582:	f884 8000 	strb.w	r8, [r4]
		return;
   16586:	e4dd      	b.n	15f44 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16588:	2b00      	cmp	r3, #0
   1658a:	f43f acdb 	beq.w	15f44 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   1658e:	4b69      	ldr	r3, [pc, #420]	; (16734 <hci_evt_encode+0x898>)
   16590:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16592:	055b      	lsls	r3, r3, #21
   16594:	f57f acd6 	bpl.w	15f44 <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   16598:	7f23      	ldrb	r3, [r4, #28]
   1659a:	f003 030f 	and.w	r3, r3, #15
   1659e:	2b01      	cmp	r3, #1
   165a0:	d00c      	beq.n	165bc <hci_evt_encode+0x720>
   165a2:	4a65      	ldr	r2, [pc, #404]	; (16738 <hci_evt_encode+0x89c>)
   165a4:	4965      	ldr	r1, [pc, #404]	; (1673c <hci_evt_encode+0x8a0>)
   165a6:	4866      	ldr	r0, [pc, #408]	; (16740 <hci_evt_encode+0x8a4>)
   165a8:	f241 435a 	movw	r3, #5210	; 0x145a
   165ac:	f00e fb26 	bl	24bfc <printk>
   165b0:	4040      	eors	r0, r0
   165b2:	f380 8811 	msr	BASEPRI, r0
   165b6:	f04f 0003 	mov.w	r0, #3
   165ba:	df02      	svc	2
	if (dup_count >= 0) {
   165bc:	4b61      	ldr	r3, [pc, #388]	; (16744 <hci_evt_encode+0x8a8>)
   165be:	681b      	ldr	r3, [r3, #0]
   165c0:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   165c2:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   165c6:	db0a      	blt.n	165de <hci_evt_encode+0x742>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   165c8:	7f20      	ldrb	r0, [r4, #28]
   165ca:	4632      	mov	r2, r6
   165cc:	f3c0 1180 	ubfx	r1, r0, #6, #1
   165d0:	f000 000f 	and.w	r0, r0, #15
   165d4:	f7fe fce4 	bl	14fa0 <dup_found.part.0>
	if (dup_scan &&
   165d8:	2800      	cmp	r0, #0
   165da:	f47f acb3 	bne.w	15f44 <hci_evt_encode+0xa8>
   165de:	3508      	adds	r5, #8
   165e0:	2102      	movs	r1, #2
   165e2:	4628      	mov	r0, r5
   165e4:	f014 fa01 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   165e8:	233e      	movs	r3, #62	; 0x3e
   165ea:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   165ec:	2312      	movs	r3, #18
   165ee:	7043      	strb	r3, [r0, #1]
   165f0:	2101      	movs	r1, #1
   165f2:	4628      	mov	r0, r5
   165f4:	f014 f9f9 	bl	2a9ea <net_buf_simple_add>
   165f8:	4603      	mov	r3, r0
	me->subevent = subevt;
   165fa:	220b      	movs	r2, #11
   165fc:	701a      	strb	r2, [r3, #0]
   165fe:	4628      	mov	r0, r5
   16600:	2111      	movs	r1, #17
   16602:	f014 f9f2 	bl	2a9ea <net_buf_simple_add>
	drp->num_reports = 1U;
   16606:	2301      	movs	r3, #1
   16608:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   1660a:	7043      	strb	r3, [r0, #1]
   1660c:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   1660e:	f005 f941 	bl	1b894 <ll_rl_size_get>
   16612:	4581      	cmp	r9, r0
   16614:	f080 8084 	bcs.w	16720 <hci_evt_encode+0x884>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   16618:	1cea      	adds	r2, r5, #3
   1661a:	1ca9      	adds	r1, r5, #2
   1661c:	4648      	mov	r0, r9
   1661e:	f005 f8f3 	bl	1b808 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   16622:	78ab      	ldrb	r3, [r5, #2]
   16624:	3302      	adds	r3, #2
   16626:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   16628:	7f23      	ldrb	r3, [r4, #28]
   1662a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   1662e:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   16630:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   16632:	f104 0124 	add.w	r1, r4, #36	; 0x24
   16636:	f105 000a 	add.w	r0, r5, #10
   1663a:	f011 ffbc 	bl	285b6 <memcpy>
	dir_info->rssi = rssi;
   1663e:	f885 8010 	strb.w	r8, [r5, #16]
   16642:	e47f      	b.n	15f44 <hci_evt_encode+0xa8>
   16644:	2102      	movs	r1, #2
   16646:	4628      	mov	r0, r5
   16648:	f014 f9cf 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   1664c:	233e      	movs	r3, #62	; 0x3e
   1664e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   16650:	2313      	movs	r3, #19
   16652:	7043      	strb	r3, [r0, #1]
   16654:	2101      	movs	r1, #1
   16656:	4628      	mov	r0, r5
   16658:	f014 f9c7 	bl	2a9ea <net_buf_simple_add>
   1665c:	4603      	mov	r3, r0
	me->subevent = subevt;
   1665e:	2201      	movs	r2, #1
   16660:	701a      	strb	r2, [r3, #0]
   16662:	4628      	mov	r0, r5
   16664:	2112      	movs	r1, #18
   16666:	f014 f9c0 	bl	2a9ea <net_buf_simple_add>
	lecc->status = 0x00;
   1666a:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   1666e:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   16672:	7f63      	ldrb	r3, [r4, #29]
   16674:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   16676:	7fa3      	ldrb	r3, [r4, #30]
   16678:	f003 0301 	and.w	r3, r3, #1
   1667c:	4605      	mov	r5, r0
   1667e:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   16680:	2206      	movs	r2, #6
   16682:	4651      	mov	r1, sl
   16684:	3005      	adds	r0, #5
   16686:	f011 ff96 	bl	285b6 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1668a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1668c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1668e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   16690:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   16694:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   16698:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   1669c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   166a0:	746b      	strb	r3, [r5, #17]
   166a2:	e44f      	b.n	15f44 <hci_evt_encode+0xa8>
		adv_info->addr.type = adv->tx_addr;
   166a4:	7f23      	ldrb	r3, [r4, #28]
   166a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   166aa:	4659      	mov	r1, fp
		adv_info->addr.type = adv->tx_addr;
   166ac:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   166ae:	2206      	movs	r2, #6
   166b0:	1ce8      	adds	r0, r5, #3
   166b2:	f011 ff80 	bl	285b6 <memcpy>
   166b6:	e4b9      	b.n	1602c <hci_evt_encode+0x190>
   166b8:	f014 f997 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   166bc:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   166be:	231f      	movs	r3, #31
	hdr->evt = evt;
   166c0:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   166c2:	7043      	strb	r3, [r0, #1]
   166c4:	2101      	movs	r1, #1
   166c6:	4628      	mov	r0, r5
   166c8:	f014 f98f 	bl	2a9ea <net_buf_simple_add>
	me->subevent = subevt;
   166cc:	230a      	movs	r3, #10
   166ce:	7003      	strb	r3, [r0, #0]
   166d0:	211e      	movs	r1, #30
   166d2:	4628      	mov	r0, r5
   166d4:	f014 f989 	bl	2a9ea <net_buf_simple_add>
   166d8:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   166da:	221e      	movs	r2, #30
   166dc:	2100      	movs	r1, #0
   166de:	f011 ff75 	bl	285cc <memset>
			leecc->status = status;
   166e2:	f884 8000 	strb.w	r8, [r4]
			return;
   166e6:	e42d      	b.n	15f44 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   166e8:	4a13      	ldr	r2, [pc, #76]	; (16738 <hci_evt_encode+0x89c>)
   166ea:	4917      	ldr	r1, [pc, #92]	; (16748 <hci_evt_encode+0x8ac>)
   166ec:	4814      	ldr	r0, [pc, #80]	; (16740 <hci_evt_encode+0x8a4>)
   166ee:	f641 337a 	movw	r3, #7034	; 0x1b7a
   166f2:	f00e fa83 	bl	24bfc <printk>
   166f6:	4040      	eors	r0, r0
   166f8:	f380 8811 	msr	BASEPRI, r0
   166fc:	f04f 0003 	mov.w	r0, #3
   16700:	df02      	svc	2
   16702:	e52a      	b.n	1615a <hci_evt_encode+0x2be>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   16704:	460b      	mov	r3, r1
   16706:	4632      	mov	r2, r6
   16708:	2100      	movs	r1, #0
   1670a:	201a      	movs	r0, #26
   1670c:	f7fe fca8 	bl	15060 <le_remote_feat_complete>
		break;
   16710:	e418      	b.n	15f44 <hci_evt_encode+0xa8>
   16712:	f04f 0a00 	mov.w	sl, #0
   16716:	220c      	movs	r2, #12
   16718:	230b      	movs	r3, #11
   1671a:	603a      	str	r2, [r7, #0]
		data_len = 0U;
   1671c:	4656      	mov	r6, sl
   1671e:	e455      	b.n	15fcc <hci_evt_encode+0x130>
		dir_info->addr.type = adv->tx_addr;
   16720:	7f23      	ldrb	r3, [r4, #28]
   16722:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   16726:	2206      	movs	r2, #6
		dir_info->addr.type = adv->tx_addr;
   16728:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   1672a:	4631      	mov	r1, r6
   1672c:	1ce8      	adds	r0, r5, #3
   1672e:	f011 ff42 	bl	285b6 <memcpy>
   16732:	e779      	b.n	16628 <hci_evt_encode+0x78c>
   16734:	200001a0 	.word	0x200001a0
   16738:	0002d444 	.word	0x0002d444
   1673c:	0002d480 	.word	0x0002d480
   16740:	0002d27c 	.word	0x0002d27c
   16744:	20002e00 	.word	0x20002e00
   16748:	0002d4e4 	.word	0x0002d4e4

0001674c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   1674c:	b570      	push	{r4, r5, r6, lr}
   1674e:	f100 0408 	add.w	r4, r0, #8
   16752:	460e      	mov	r6, r1
   16754:	4620      	mov	r0, r4
   16756:	2102      	movs	r1, #2
   16758:	4615      	mov	r5, r2
   1675a:	f014 f946 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = evt;
   1675e:	2313      	movs	r3, #19
	hdr->len = len;
   16760:	2105      	movs	r1, #5
	hdr->evt = evt;
   16762:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   16764:	7041      	strb	r1, [r0, #1]
   16766:	4620      	mov	r0, r4
   16768:	f014 f93f 	bl	2a9ea <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   1676c:	2301      	movs	r3, #1
   1676e:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   16770:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   16774:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   16778:	bd70      	pop	{r4, r5, r6, pc}
   1677a:	bf00      	nop

0001677c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1677c:	7903      	ldrb	r3, [r0, #4]
   1677e:	2b03      	cmp	r3, #3
   16780:	d008      	beq.n	16794 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   16782:	3b05      	subs	r3, #5
   16784:	b2db      	uxtb	r3, r3
   16786:	2b17      	cmp	r3, #23
   16788:	d901      	bls.n	1678e <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1678a:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   1678c:	4770      	bx	lr
   1678e:	4a05      	ldr	r2, [pc, #20]	; (167a4 <hci_get_class+0x28>)
   16790:	5cd0      	ldrb	r0, [r2, r3]
   16792:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   16794:	7f03      	ldrb	r3, [r0, #28]
   16796:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   1679a:	2b03      	cmp	r3, #3
   1679c:	bf0c      	ite	eq
   1679e:	2004      	moveq	r0, #4
   167a0:	2005      	movne	r0, #5
   167a2:	4770      	bx	lr
   167a4:	0002d580 	.word	0x0002d580

000167a8 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   167a8:	480d      	ldr	r0, [pc, #52]	; (167e0 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   167aa:	4a0e      	ldr	r2, [pc, #56]	; (167e4 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   167ac:	490e      	ldr	r1, [pc, #56]	; (167e8 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   167ae:	4b0f      	ldr	r3, [pc, #60]	; (167ec <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   167b0:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   167b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   167b6:	f641 75ff 	movw	r5, #8191	; 0x1fff
   167ba:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   167be:	2400      	movs	r4, #0
   167c0:	2500      	movs	r5, #0
   167c2:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   167c6:	4a0a      	ldr	r2, [pc, #40]	; (167f0 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   167c8:	241f      	movs	r4, #31
   167ca:	2500      	movs	r5, #0
   167cc:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   167d0:	2100      	movs	r1, #0
   167d2:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   167d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   167d8:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   167da:	601a      	str	r2, [r3, #0]
}
   167dc:	4770      	bx	lr
   167de:	bf00      	nop
   167e0:	20000198 	.word	0x20000198
   167e4:	20001ea8 	.word	0x20001ea8
   167e8:	200001a0 	.word	0x200001a0
   167ec:	20002e00 	.word	0x20002e00
   167f0:	20002dfc 	.word	0x20002dfc

000167f4 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   167f4:	f006 b930 	b.w	1ca58 <lll_csrand_get>

000167f8 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   167f8:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   167fa:	2300      	movs	r3, #0
   167fc:	f007 fdb0 	bl	1e360 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   16800:	2000      	movs	r0, #0
   16802:	bd08      	pop	{r3, pc}

00016804 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   16804:	4801      	ldr	r0, [pc, #4]	; (1680c <ll_feat_get+0x8>)
   16806:	2100      	movs	r1, #0
   16808:	4770      	bx	lr
   1680a:	bf00      	nop
   1680c:	000141ff 	.word	0x000141ff

00016810 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   16810:	b510      	push	{r4, lr}
   16812:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   16814:	f006 f942 	bl	1ca9c <lll_reset>
	LL_ASSERT(!err);
   16818:	b950      	cbnz	r0, 16830 <perform_lll_reset+0x20>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   1681a:	f006 ff7f 	bl	1d71c <lll_scan_reset>
	LL_ASSERT(!err);
   1681e:	b9c0      	cbnz	r0, 16852 <perform_lll_reset+0x42>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   16820:	f007 f896 	bl	1d950 <lll_conn_reset>
	LL_ASSERT(!err);
   16824:	bb30      	cbnz	r0, 16874 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   16826:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   16828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1682c:	f00d b946 	b.w	23abc <z_impl_k_sem_give>
	LL_ASSERT(!err);
   16830:	4a19      	ldr	r2, [pc, #100]	; (16898 <perform_lll_reset+0x88>)
   16832:	491a      	ldr	r1, [pc, #104]	; (1689c <perform_lll_reset+0x8c>)
   16834:	481a      	ldr	r0, [pc, #104]	; (168a0 <perform_lll_reset+0x90>)
   16836:	f640 0324 	movw	r3, #2084	; 0x824
   1683a:	f00e f9df 	bl	24bfc <printk>
   1683e:	4040      	eors	r0, r0
   16840:	f380 8811 	msr	BASEPRI, r0
   16844:	f04f 0003 	mov.w	r0, #3
   16848:	df02      	svc	2
	err = lll_scan_reset();
   1684a:	f006 ff67 	bl	1d71c <lll_scan_reset>
	LL_ASSERT(!err);
   1684e:	2800      	cmp	r0, #0
   16850:	d0e6      	beq.n	16820 <perform_lll_reset+0x10>
   16852:	4a11      	ldr	r2, [pc, #68]	; (16898 <perform_lll_reset+0x88>)
   16854:	4911      	ldr	r1, [pc, #68]	; (1689c <perform_lll_reset+0x8c>)
   16856:	4812      	ldr	r0, [pc, #72]	; (168a0 <perform_lll_reset+0x90>)
   16858:	f640 032f 	movw	r3, #2095	; 0x82f
   1685c:	f00e f9ce 	bl	24bfc <printk>
   16860:	4040      	eors	r0, r0
   16862:	f380 8811 	msr	BASEPRI, r0
   16866:	f04f 0003 	mov.w	r0, #3
   1686a:	df02      	svc	2
	err = lll_conn_reset();
   1686c:	f007 f870 	bl	1d950 <lll_conn_reset>
	LL_ASSERT(!err);
   16870:	2800      	cmp	r0, #0
   16872:	d0d8      	beq.n	16826 <perform_lll_reset+0x16>
   16874:	4a08      	ldr	r2, [pc, #32]	; (16898 <perform_lll_reset+0x88>)
   16876:	4909      	ldr	r1, [pc, #36]	; (1689c <perform_lll_reset+0x8c>)
   16878:	4809      	ldr	r0, [pc, #36]	; (168a0 <perform_lll_reset+0x90>)
   1687a:	f640 0335 	movw	r3, #2101	; 0x835
   1687e:	f00e f9bd 	bl	24bfc <printk>
   16882:	4040      	eors	r0, r0
   16884:	f380 8811 	msr	BASEPRI, r0
   16888:	f04f 0003 	mov.w	r0, #3
   1688c:	df02      	svc	2
   1688e:	4620      	mov	r0, r4
}
   16890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16894:	f00d b912 	b.w	23abc <z_impl_k_sem_give>
   16898:	0002d5b8 	.word	0x0002d5b8
   1689c:	0002d5f4 	.word	0x0002d5f4
   168a0:	0002d27c 	.word	0x0002d27c

000168a4 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   168a4:	6008      	str	r0, [r1, #0]
   168a6:	4801      	ldr	r0, [pc, #4]	; (168ac <ull_ticker_status_give+0x8>)
   168a8:	f00d b908 	b.w	23abc <z_impl_k_sem_give>
   168ac:	20003130 	.word	0x20003130

000168b0 <disabled_cb>:
   168b0:	f00d b904 	b.w	23abc <z_impl_k_sem_give>

000168b4 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   168b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   168b8:	4d2c      	ldr	r5, [pc, #176]	; (1696c <tx_cmplt_get+0xb8>)
{
   168ba:	460c      	mov	r4, r1
   168bc:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   168be:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   168c0:	7822      	ldrb	r2, [r4, #0]
   168c2:	782b      	ldrb	r3, [r5, #0]
   168c4:	4291      	cmp	r1, r2
   168c6:	bf9c      	itt	ls
   168c8:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   168ca:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   168cc:	4591      	cmp	r9, r2
{
   168ce:	4682      	mov	sl, r0
   168d0:	d042      	beq.n	16958 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   168d2:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   168d6:	3201      	adds	r2, #1
   168d8:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   168da:	4f25      	ldr	r7, [pc, #148]	; (16970 <tx_cmplt_get+0xbc>)
		i = 0U;
   168dc:	4291      	cmp	r1, r2
   168de:	bf08      	it	eq
   168e0:	2200      	moveq	r2, #0

	*idx = i;
   168e2:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   168e4:	5afa      	ldrh	r2, [r7, r3]
   168e6:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   168e8:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   168ea:	443b      	add	r3, r7
   168ec:	f04f 0b01 	mov.w	fp, #1
   168f0:	f04f 0802 	mov.w	r8, #2
   168f4:	e021      	b.n	1693a <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   168f6:	b362      	cbz	r2, 16952 <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   168f8:	7902      	ldrb	r2, [r0, #4]
   168fa:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   168fe:	3a01      	subs	r2, #1
   16900:	2a01      	cmp	r2, #1
   16902:	d92d      	bls.n	16960 <tx_cmplt_get+0xac>
   16904:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   16908:	f001 fe56 	bl	185b8 <ll_tx_mem_release>
	if (*idx >= count) {
   1690c:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1690e:	7869      	ldrb	r1, [r5, #1]
   16910:	7828      	ldrb	r0, [r5, #0]
   16912:	4299      	cmp	r1, r3
   16914:	bf9c      	itt	ls
   16916:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   16918:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   1691a:	454b      	cmp	r3, r9
   1691c:	d01d      	beq.n	1695a <tx_cmplt_get+0xa6>
	i = *idx + 1;
   1691e:	1c5a      	adds	r2, r3, #1
   16920:	b2d2      	uxtb	r2, r2
		i = 0U;
   16922:	4291      	cmp	r1, r2
   16924:	bf08      	it	eq
   16926:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   16928:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   1692c:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   1692e:	5af9      	ldrh	r1, [r7, r3]
   16930:	f8ba 2000 	ldrh.w	r2, [sl]
   16934:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   16936:	443b      	add	r3, r7
   16938:	d10f      	bne.n	1695a <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   1693a:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1693c:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   1693e:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   16942:	d8d8      	bhi.n	168f6 <tx_cmplt_get+0x42>
			cmplt++;
   16944:	3601      	adds	r6, #1
   16946:	b2f6      	uxtb	r6, r6
   16948:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   1694c:	2a00      	cmp	r2, #0
   1694e:	d0dd      	beq.n	1690c <tx_cmplt_get+0x58>
   16950:	e7da      	b.n	16908 <tx_cmplt_get+0x54>
   16952:	f8c3 8004 	str.w	r8, [r3, #4]
   16956:	e7d9      	b.n	1690c <tx_cmplt_get+0x58>
		return 0;
   16958:	2600      	movs	r6, #0

	return cmplt;
}
   1695a:	4630      	mov	r0, r6
   1695c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   16960:	3601      	adds	r6, #1
   16962:	f8c3 b004 	str.w	fp, [r3, #4]
   16966:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   16968:	e7ce      	b.n	16908 <tx_cmplt_get+0x54>
   1696a:	bf00      	nop
   1696c:	200005d4 	.word	0x200005d4
   16970:	200005d8 	.word	0x200005d8

00016974 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   16974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16978:	4e3c      	ldr	r6, [pc, #240]	; (16a6c <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   1697a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 16a70 <ull_done+0xfc>
   1697e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 16a74 <ull_done+0x100>
{
   16982:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   16984:	e9d6 0100 	ldrd	r0, r1, [r6]
   16988:	aa01      	add	r2, sp, #4
   1698a:	f7fc fd89 	bl	134a0 <memq_peek>
		if (link) {
   1698e:	4604      	mov	r4, r0
   16990:	2800      	cmp	r0, #0
   16992:	d03e      	beq.n	16a12 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   16994:	6870      	ldr	r0, [r6, #4]
   16996:	2200      	movs	r2, #0
   16998:	4631      	mov	r1, r6
   1699a:	f7fc fd89 	bl	134b0 <memq_dequeue>
			rx_demux_event_done(link, done);
   1699e:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   169a0:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   169a2:	b135      	cbz	r5, 169b2 <ull_done+0x3e>
	return hdr->ref;
   169a4:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   169a6:	2b00      	cmp	r3, #0
   169a8:	d052      	beq.n	16a50 <ull_done+0xdc>
	return hdr->ref--;
   169aa:	782b      	ldrb	r3, [r5, #0]
   169ac:	3b01      	subs	r3, #1
   169ae:	b2db      	uxtb	r3, r3
   169b0:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   169b2:	f897 3020 	ldrb.w	r3, [r7, #32]
   169b6:	b123      	cbz	r3, 169c2 <ull_done+0x4e>
   169b8:	2b01      	cmp	r3, #1
   169ba:	d13b      	bne.n	16a34 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   169bc:	4638      	mov	r0, r7
   169be:	f003 fc79 	bl	1a2b4 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   169c2:	4a2d      	ldr	r2, [pc, #180]	; (16a78 <ull_done+0x104>)
	last = last + 1;
   169c4:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   169c6:	f892 c001 	ldrb.w	ip, [r2, #1]
   169ca:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   169cc:	3301      	adds	r3, #1
	done->extra.type = 0U;
   169ce:	2000      	movs	r0, #0
   169d0:	b2db      	uxtb	r3, r3
		last = 0U;
   169d2:	459c      	cmp	ip, r3
   169d4:	bf08      	it	eq
   169d6:	4603      	moveq	r3, r0
	if (last == first) {
   169d8:	4299      	cmp	r1, r3
   169da:	f887 0020 	strb.w	r0, [r7, #32]
   169de:	d01b      	beq.n	16a18 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   169e0:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   169e2:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   169e4:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   169e6:	fb00 2101 	mla	r1, r0, r1, r2
   169ea:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   169ec:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   169ee:	2d00      	cmp	r5, #0
   169f0:	d0c8      	beq.n	16984 <ull_done+0x10>
	return hdr->ref;
   169f2:	782b      	ldrb	r3, [r5, #0]
   169f4:	2b00      	cmp	r3, #0
   169f6:	d1c5      	bne.n	16984 <ull_done+0x10>
   169f8:	696b      	ldr	r3, [r5, #20]
   169fa:	2b00      	cmp	r3, #0
   169fc:	d0c2      	beq.n	16984 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   169fe:	69a8      	ldr	r0, [r5, #24]
   16a00:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   16a02:	e9d6 0100 	ldrd	r0, r1, [r6]
   16a06:	aa01      	add	r2, sp, #4
   16a08:	f7fc fd4a 	bl	134a0 <memq_peek>
		if (link) {
   16a0c:	4604      	mov	r4, r0
   16a0e:	2800      	cmp	r0, #0
   16a10:	d1c0      	bne.n	16994 <ull_done+0x20>
}
   16a12:	b003      	add	sp, #12
   16a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   16a18:	4918      	ldr	r1, [pc, #96]	; (16a7c <ull_done+0x108>)
   16a1a:	4819      	ldr	r0, [pc, #100]	; (16a80 <ull_done+0x10c>)
   16a1c:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   16a20:	4642      	mov	r2, r8
   16a22:	f00e f8eb 	bl	24bfc <printk>
   16a26:	4040      	eors	r0, r0
   16a28:	f380 8811 	msr	BASEPRI, r0
   16a2c:	f04f 0003 	mov.w	r0, #3
   16a30:	df02      	svc	2
   16a32:	e7dc      	b.n	169ee <ull_done+0x7a>
		LL_ASSERT(0);
   16a34:	4913      	ldr	r1, [pc, #76]	; (16a84 <ull_done+0x110>)
   16a36:	4812      	ldr	r0, [pc, #72]	; (16a80 <ull_done+0x10c>)
   16a38:	f640 2369 	movw	r3, #2665	; 0xa69
   16a3c:	4642      	mov	r2, r8
   16a3e:	f00e f8dd 	bl	24bfc <printk>
   16a42:	4040      	eors	r0, r0
   16a44:	f380 8811 	msr	BASEPRI, r0
   16a48:	f04f 0003 	mov.w	r0, #3
   16a4c:	df02      	svc	2
		break;
   16a4e:	e7b8      	b.n	169c2 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   16a50:	480b      	ldr	r0, [pc, #44]	; (16a80 <ull_done+0x10c>)
   16a52:	f640 2312 	movw	r3, #2578	; 0xa12
   16a56:	4642      	mov	r2, r8
   16a58:	4649      	mov	r1, r9
   16a5a:	f00e f8cf 	bl	24bfc <printk>
   16a5e:	4040      	eors	r0, r0
   16a60:	f380 8811 	msr	BASEPRI, r0
   16a64:	f04f 0003 	mov.w	r0, #3
   16a68:	df02      	svc	2
   16a6a:	e79e      	b.n	169aa <ull_done+0x36>
   16a6c:	2000311c 	.word	0x2000311c
   16a70:	0002d5b8 	.word	0x0002d5b8
   16a74:	0002d5fc 	.word	0x0002d5fc
   16a78:	20000490 	.word	0x20000490
   16a7c:	0002d614 	.word	0x0002d614
   16a80:	0002d27c 	.word	0x0002d27c
   16a84:	0002d314 	.word	0x0002d314

00016a88 <rx_alloc>:
{
   16a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   16a8c:	4f33      	ldr	r7, [pc, #204]	; (16b5c <rx_alloc+0xd4>)
   16a8e:	783e      	ldrb	r6, [r7, #0]
   16a90:	4286      	cmp	r6, r0
   16a92:	bf28      	it	cs
   16a94:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16a96:	b34e      	cbz	r6, 16aec <rx_alloc+0x64>
   16a98:	4d31      	ldr	r5, [pc, #196]	; (16b60 <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   16a9a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 16b64 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16a9e:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   16aa0:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   16aa4:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16aa6:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   16aa8:	3401      	adds	r4, #1
   16aaa:	b2e4      	uxtb	r4, r4
		last = 0U;
   16aac:	42a2      	cmp	r2, r4
   16aae:	bf08      	it	eq
   16ab0:	2400      	moveq	r4, #0
	if (last == first) {
   16ab2:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   16ab4:	4640      	mov	r0, r8
   16ab6:	d01b      	beq.n	16af0 <rx_alloc+0x68>
   16ab8:	f7fc fc84 	bl	133c4 <mem_acquire>
   16abc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   16abe:	4648      	mov	r0, r9
		if (!link) {
   16ac0:	f1ba 0f00 	cmp.w	sl, #0
   16ac4:	d012      	beq.n	16aec <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   16ac6:	f7fc fc7d 	bl	133c4 <mem_acquire>
		if (!rx) {
   16aca:	2800      	cmp	r0, #0
   16acc:	d03f      	beq.n	16b4e <rx_alloc+0xc6>
		rx->link = link;
   16ace:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16ad2:	78ea      	ldrb	r2, [r5, #3]
   16ad4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16ad6:	fb02 5303 	mla	r3, r2, r3, r5
   16ada:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   16adc:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   16ade:	70ec      	strb	r4, [r5, #3]
		max--;
   16ae0:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   16ae2:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16ae4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   16ae8:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16aea:	d1db      	bne.n	16aa4 <rx_alloc+0x1c>
}
   16aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   16af0:	783b      	ldrb	r3, [r7, #0]
   16af2:	2b00      	cmp	r3, #0
   16af4:	d0fa      	beq.n	16aec <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16af6:	4d1c      	ldr	r5, [pc, #112]	; (16b68 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   16af8:	4e1c      	ldr	r6, [pc, #112]	; (16b6c <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16afa:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   16afc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 16b64 <rx_alloc+0xdc>
		link->mem = NULL;
   16b00:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   16b04:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16b06:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   16b08:	3401      	adds	r4, #1
   16b0a:	b2e4      	uxtb	r4, r4
		last = 0U;
   16b0c:	42a2      	cmp	r2, r4
   16b0e:	bf08      	it	eq
   16b10:	2400      	moveq	r4, #0
	if (last == first) {
   16b12:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   16b14:	4630      	mov	r0, r6
   16b16:	d0e9      	beq.n	16aec <rx_alloc+0x64>
   16b18:	f7fc fc54 	bl	133c4 <mem_acquire>
   16b1c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   16b1e:	4640      	mov	r0, r8
		if (!link) {
   16b20:	f1ba 0f00 	cmp.w	sl, #0
   16b24:	d0e2      	beq.n	16aec <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   16b26:	f7fc fc4d 	bl	133c4 <mem_acquire>
		if (!rx) {
   16b2a:	b180      	cbz	r0, 16b4e <rx_alloc+0xc6>
		link->mem = NULL;
   16b2c:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   16b30:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16b34:	78ea      	ldrb	r2, [r5, #3]
   16b36:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16b38:	fb02 5303 	mla	r3, r2, r3, r5
   16b3c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   16b3e:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   16b40:	70ec      	strb	r4, [r5, #3]
   16b42:	3b01      	subs	r3, #1
   16b44:	b2db      	uxtb	r3, r3
   16b46:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   16b48:	2b00      	cmp	r3, #0
   16b4a:	d1db      	bne.n	16b04 <rx_alloc+0x7c>
   16b4c:	e7ce      	b.n	16aec <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   16b4e:	4650      	mov	r0, sl
   16b50:	4906      	ldr	r1, [pc, #24]	; (16b6c <rx_alloc+0xe4>)
}
   16b52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   16b56:	f7fc bc4f 	b.w	133f8 <mem_release>
   16b5a:	bf00      	nop
   16b5c:	20002ee4 	.word	0x20002ee4
   16b60:	200004b8 	.word	0x200004b8
   16b64:	20002f34 	.word	0x20002f34
   16b68:	200004a8 	.word	0x200004a8
   16b6c:	20002ee8 	.word	0x20002ee8

00016b70 <rx_demux>:
{
   16b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b74:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 16d24 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   16b78:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 16d28 <rx_demux+0x1b8>
		LL_ASSERT(0);
   16b7c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 16d2c <rx_demux+0x1bc>
   16b80:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 16d30 <rx_demux+0x1c0>
{
   16b84:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   16b86:	e9d8 0100 	ldrd	r0, r1, [r8]
   16b8a:	aa03      	add	r2, sp, #12
   16b8c:	f7fc fc88 	bl	134a0 <memq_peek>
		if (link) {
   16b90:	4605      	mov	r5, r0
   16b92:	2800      	cmp	r0, #0
   16b94:	d035      	beq.n	16c02 <rx_demux+0x92>
			LL_ASSERT(rx);
   16b96:	9b03      	ldr	r3, [sp, #12]
   16b98:	2b00      	cmp	r3, #0
   16b9a:	f000 80a6 	beq.w	16cea <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   16b9e:	7818      	ldrb	r0, [r3, #0]
   16ba0:	aa04      	add	r2, sp, #16
   16ba2:	a902      	add	r1, sp, #8
   16ba4:	f003 fe18 	bl	1a7d8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   16ba8:	4604      	mov	r4, r0
   16baa:	2800      	cmp	r0, #0
   16bac:	d055      	beq.n	16c5a <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   16bae:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   16bb2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   16bb6:	780f      	ldrb	r7, [r1, #0]
   16bb8:	f8ad 200a 	strh.w	r2, [sp, #10]
   16bbc:	ae05      	add	r6, sp, #20
   16bbe:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   16bc0:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   16bc4:	f003 fe22 	bl	1a80c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   16bc8:	4621      	mov	r1, r4
   16bca:	9a05      	ldr	r2, [sp, #20]
   16bcc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16bd0:	f003 fe66 	bl	1a8a0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   16bd4:	4620      	mov	r0, r4
   16bd6:	f003 fdd7 	bl	1a788 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   16bda:	4632      	mov	r2, r6
   16bdc:	4629      	mov	r1, r5
   16bde:	4638      	mov	r0, r7
   16be0:	f003 fdfa 	bl	1a7d8 <ull_conn_ack_by_last_peek>
	} while (link);
   16be4:	4604      	mov	r4, r0
   16be6:	2800      	cmp	r0, #0
   16be8:	d1ec      	bne.n	16bc4 <rx_demux+0x54>
	k_sem_give(sem_recv);
   16bea:	f8d9 0000 	ldr.w	r0, [r9]
   16bee:	f00c ff65 	bl	23abc <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   16bf2:	e9d8 0100 	ldrd	r0, r1, [r8]
   16bf6:	aa03      	add	r2, sp, #12
   16bf8:	f7fc fc52 	bl	134a0 <memq_peek>
		if (link) {
   16bfc:	4605      	mov	r5, r0
   16bfe:	2800      	cmp	r0, #0
   16c00:	d1c9      	bne.n	16b96 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   16c02:	aa04      	add	r2, sp, #16
   16c04:	a902      	add	r1, sp, #8
   16c06:	f10d 0007 	add.w	r0, sp, #7
   16c0a:	f003 fdc9 	bl	1a7a0 <ull_conn_ack_peek>
			if (link) {
   16c0e:	4604      	mov	r4, r0
   16c10:	2800      	cmp	r0, #0
   16c12:	d067      	beq.n	16ce4 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   16c14:	9b04      	ldr	r3, [sp, #16]
   16c16:	9305      	str	r3, [sp, #20]
   16c18:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   16c1c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   16c20:	f8ad 300a 	strh.w	r3, [sp, #10]
   16c24:	ae05      	add	r6, sp, #20
   16c26:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   16c2a:	f003 fdef 	bl	1a80c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   16c2e:	4621      	mov	r1, r4
   16c30:	9a05      	ldr	r2, [sp, #20]
   16c32:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16c36:	f003 fe33 	bl	1a8a0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   16c3a:	4620      	mov	r0, r4
   16c3c:	f003 fda4 	bl	1a788 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   16c40:	4632      	mov	r2, r6
   16c42:	4629      	mov	r1, r5
   16c44:	4638      	mov	r0, r7
   16c46:	f003 fdc7 	bl	1a7d8 <ull_conn_ack_by_last_peek>
	} while (link);
   16c4a:	4604      	mov	r4, r0
   16c4c:	2800      	cmp	r0, #0
   16c4e:	d1ec      	bne.n	16c2a <rx_demux+0xba>
	k_sem_give(sem_recv);
   16c50:	f8d9 0000 	ldr.w	r0, [r9]
   16c54:	f00c ff32 	bl	23abc <z_impl_k_sem_give>
			if (nack) {
   16c58:	e7cb      	b.n	16bf2 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   16c5a:	9b03      	ldr	r3, [sp, #12]
   16c5c:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   16c5e:	791b      	ldrb	r3, [r3, #4]
   16c60:	3b01      	subs	r3, #1
   16c62:	2b16      	cmp	r3, #22
   16c64:	d80d      	bhi.n	16c82 <rx_demux+0x112>
   16c66:	e8df f003 	tbb	[pc, r3]
   16c6a:	0c1a      	.short	0x0c1a
   16c6c:	0c1a0c38 	.word	0x0c1a0c38
   16c70:	0c0c0c0c 	.word	0x0c0c0c0c
   16c74:	0c0c0c0c 	.word	0x0c0c0c0c
   16c78:	0c0c0c0c 	.word	0x0c0c0c0c
   16c7c:	2d0c0c0c 	.word	0x2d0c0c0c
   16c80:	1a          	.byte	0x1a
   16c81:	00          	.byte	0x00
		LL_ASSERT(0);
   16c82:	482c      	ldr	r0, [pc, #176]	; (16d34 <rx_demux+0x1c4>)
   16c84:	f640 13ff 	movw	r3, #2559	; 0x9ff
   16c88:	4652      	mov	r2, sl
   16c8a:	4659      	mov	r1, fp
   16c8c:	f00d ffb6 	bl	24bfc <printk>
   16c90:	4040      	eors	r0, r0
   16c92:	f380 8811 	msr	BASEPRI, r0
   16c96:	f04f 0003 	mov.w	r0, #3
   16c9a:	df02      	svc	2
			if (nack) {
   16c9c:	e773      	b.n	16b86 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   16c9e:	4921      	ldr	r1, [pc, #132]	; (16d24 <rx_demux+0x1b4>)
   16ca0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   16ca4:	2200      	movs	r2, #0
   16ca6:	f7fc fc03 	bl	134b0 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16caa:	4b23      	ldr	r3, [pc, #140]	; (16d38 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   16cac:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16cae:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   16cb0:	4628      	mov	r0, r5
   16cb2:	4a22      	ldr	r2, [pc, #136]	; (16d3c <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16cb4:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   16cb6:	f7fc fbe9 	bl	1348c <memq_enqueue>
	k_sem_give(sem_recv);
   16cba:	f8d9 0000 	ldr.w	r0, [r9]
   16cbe:	f00c fefd 	bl	23abc <z_impl_k_sem_give>
			if (nack) {
   16cc2:	e796      	b.n	16bf2 <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   16cc4:	4917      	ldr	r1, [pc, #92]	; (16d24 <rx_demux+0x1b4>)
   16cc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   16cca:	2200      	movs	r2, #0
   16ccc:	f7fc fbf0 	bl	134b0 <memq_dequeue>
		ull_conn_setup(link, rx);
   16cd0:	9905      	ldr	r1, [sp, #20]
   16cd2:	4628      	mov	r0, r5
   16cd4:	f001 ff58 	bl	18b88 <ull_conn_setup>
			if (nack) {
   16cd8:	e755      	b.n	16b86 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   16cda:	a905      	add	r1, sp, #20
   16cdc:	4628      	mov	r0, r5
   16cde:	f001 ff7b 	bl	18bd8 <ull_conn_rx>
		if (nack) {
   16ce2:	b188      	cbz	r0, 16d08 <rx_demux+0x198>
}
   16ce4:	b007      	add	sp, #28
   16ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   16cea:	4915      	ldr	r1, [pc, #84]	; (16d40 <rx_demux+0x1d0>)
   16cec:	4811      	ldr	r0, [pc, #68]	; (16d34 <rx_demux+0x1c4>)
   16cee:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   16cf2:	4652      	mov	r2, sl
   16cf4:	f00d ff82 	bl	24bfc <printk>
   16cf8:	4040      	eors	r0, r0
   16cfa:	f380 8811 	msr	BASEPRI, r0
   16cfe:	f04f 0003 	mov.w	r0, #3
   16d02:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   16d04:	9b03      	ldr	r3, [sp, #12]
   16d06:	e74a      	b.n	16b9e <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   16d08:	4906      	ldr	r1, [pc, #24]	; (16d24 <rx_demux+0x1b4>)
   16d0a:	4602      	mov	r2, r0
   16d0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   16d10:	f7fc fbce 	bl	134b0 <memq_dequeue>
		if (rx) {
   16d14:	9905      	ldr	r1, [sp, #20]
   16d16:	2900      	cmp	r1, #0
   16d18:	f43f af35 	beq.w	16b86 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16d1c:	4b06      	ldr	r3, [pc, #24]	; (16d38 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   16d1e:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16d20:	78db      	ldrb	r3, [r3, #3]
   16d22:	e7c6      	b.n	16cb2 <rx_demux+0x142>
   16d24:	20003124 	.word	0x20003124
   16d28:	2000312c 	.word	0x2000312c
   16d2c:	0002d5b8 	.word	0x0002d5b8
   16d30:	0002d314 	.word	0x0002d314
   16d34:	0002d27c 	.word	0x0002d27c
   16d38:	200005d4 	.word	0x200005d4
   16d3c:	20003118 	.word	0x20003118
   16d40:	0002d624 	.word	0x0002d624

00016d44 <ll_rx_get>:
{
   16d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d48:	b085      	sub	sp, #20
   16d4a:	e9cd 0100 	strd	r0, r1, [sp]
   16d4e:	4c63      	ldr	r4, [pc, #396]	; (16edc <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   16d50:	4d63      	ldr	r5, [pc, #396]	; (16ee0 <ll_rx_get+0x19c>)
   16d52:	4e64      	ldr	r6, [pc, #400]	; (16ee4 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   16d54:	9a00      	ldr	r2, [sp, #0]
   16d56:	2300      	movs	r3, #0
   16d58:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   16d5a:	e9d6 0100 	ldrd	r0, r1, [r6]
   16d5e:	aa03      	add	r2, sp, #12
   16d60:	f7fc fb9e 	bl	134a0 <memq_peek>
	if (link) {
   16d64:	4680      	mov	r8, r0
   16d66:	2800      	cmp	r0, #0
   16d68:	f000 809f 	beq.w	16eaa <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   16d6c:	9b03      	ldr	r3, [sp, #12]
   16d6e:	495e      	ldr	r1, [pc, #376]	; (16ee8 <ll_rx_get+0x1a4>)
   16d70:	781a      	ldrb	r2, [r3, #0]
   16d72:	9801      	ldr	r0, [sp, #4]
   16d74:	f7ff fd9e 	bl	168b4 <tx_cmplt_get>
		if (!cmplt) {
   16d78:	2800      	cmp	r0, #0
   16d7a:	f040 809b 	bne.w	16eb4 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   16d7e:	78a3      	ldrb	r3, [r4, #2]
   16d80:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   16d84:	78e2      	ldrb	r2, [r4, #3]
   16d86:	4607      	mov	r7, r0
   16d88:	f10d 0109 	add.w	r1, sp, #9
   16d8c:	f10d 000a 	add.w	r0, sp, #10
   16d90:	f7ff fd90 	bl	168b4 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   16d94:	ea47 0200 	orr.w	r2, r7, r0
   16d98:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   16d9c:	d1f2      	bne.n	16d84 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   16d9e:	9b03      	ldr	r3, [sp, #12]
   16da0:	7919      	ldrb	r1, [r3, #4]
   16da2:	2901      	cmp	r1, #1
   16da4:	f040 8093 	bne.w	16ece <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   16da8:	494e      	ldr	r1, [pc, #312]	; (16ee4 <ll_rx_get+0x1a0>)
   16daa:	6870      	ldr	r0, [r6, #4]
   16dac:	f7fc fb80 	bl	134b0 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   16db0:	494e      	ldr	r1, [pc, #312]	; (16eec <ll_rx_get+0x1a8>)
   16db2:	4640      	mov	r0, r8
   16db4:	f7fc fb20 	bl	133f8 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   16db8:	782b      	ldrb	r3, [r5, #0]
   16dba:	2b05      	cmp	r3, #5
   16dbc:	d866      	bhi.n	16e8c <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   16dbe:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   16dc0:	494b      	ldr	r1, [pc, #300]	; (16ef0 <ll_rx_get+0x1ac>)
   16dc2:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   16dc4:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   16dc6:	f7fc fb17 	bl	133f8 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16dca:	782b      	ldrb	r3, [r5, #0]
   16dcc:	2b00      	cmp	r3, #0
   16dce:	d0c1      	beq.n	16d54 <ll_rx_get+0x10>
   16dd0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 16ef4 <ll_rx_get+0x1b0>
	last = last + 1;
   16dd4:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   16dd8:	f898 2001 	ldrb.w	r2, [r8, #1]
   16ddc:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   16de0:	3701      	adds	r7, #1
   16de2:	b2ff      	uxtb	r7, r7
		last = 0U;
   16de4:	42ba      	cmp	r2, r7
   16de6:	bf08      	it	eq
   16de8:	2700      	moveq	r7, #0
	if (last == first) {
   16dea:	429f      	cmp	r7, r3
   16dec:	d019      	beq.n	16e22 <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   16dee:	483f      	ldr	r0, [pc, #252]	; (16eec <ll_rx_get+0x1a8>)
   16df0:	f7fc fae8 	bl	133c4 <mem_acquire>
		if (!link) {
   16df4:	4681      	mov	r9, r0
   16df6:	2800      	cmp	r0, #0
   16df8:	d0ac      	beq.n	16d54 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   16dfa:	483d      	ldr	r0, [pc, #244]	; (16ef0 <ll_rx_get+0x1ac>)
   16dfc:	f7fc fae2 	bl	133c4 <mem_acquire>
		if (!rx) {
   16e00:	2800      	cmp	r0, #0
   16e02:	d05a      	beq.n	16eba <ll_rx_get+0x176>
		rx->link = link;
   16e04:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16e08:	f898 2003 	ldrb.w	r2, [r8, #3]
   16e0c:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16e10:	fb02 8303 	mla	r3, r2, r3, r8
   16e14:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   16e16:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   16e18:	f888 7003 	strb.w	r7, [r8, #3]
   16e1c:	3b01      	subs	r3, #1
   16e1e:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16e20:	e798      	b.n	16d54 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 16ef8 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   16e26:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 16eec <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16e2a:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   16e2e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 16ef0 <ll_rx_get+0x1ac>
	if (last == count) {
   16e32:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16e36:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   16e3a:	3701      	adds	r7, #1
   16e3c:	b2ff      	uxtb	r7, r7
		last = 0U;
   16e3e:	42ba      	cmp	r2, r7
   16e40:	bf08      	it	eq
   16e42:	2700      	moveq	r7, #0
	if (last == first) {
   16e44:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   16e46:	4648      	mov	r0, r9
   16e48:	d084      	beq.n	16d54 <ll_rx_get+0x10>
   16e4a:	f7fc fabb 	bl	133c4 <mem_acquire>
   16e4e:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   16e50:	4650      	mov	r0, sl
		if (!link) {
   16e52:	f1bb 0f00 	cmp.w	fp, #0
   16e56:	f43f af7d 	beq.w	16d54 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   16e5a:	f7fc fab3 	bl	133c4 <mem_acquire>
		if (!rx) {
   16e5e:	2800      	cmp	r0, #0
   16e60:	d030      	beq.n	16ec4 <ll_rx_get+0x180>
		link->mem = NULL;
   16e62:	2300      	movs	r3, #0
   16e64:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   16e68:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16e6c:	f898 2003 	ldrb.w	r2, [r8, #3]
   16e70:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16e74:	fb02 8303 	mla	r3, r2, r3, r8
   16e78:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   16e7a:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   16e7c:	f888 7003 	strb.w	r7, [r8, #3]
   16e80:	3b01      	subs	r3, #1
   16e82:	b2db      	uxtb	r3, r3
   16e84:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   16e86:	2b00      	cmp	r3, #0
   16e88:	d1d3      	bne.n	16e32 <ll_rx_get+0xee>
   16e8a:	e763      	b.n	16d54 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   16e8c:	4a1b      	ldr	r2, [pc, #108]	; (16efc <ll_rx_get+0x1b8>)
   16e8e:	491c      	ldr	r1, [pc, #112]	; (16f00 <ll_rx_get+0x1bc>)
   16e90:	481c      	ldr	r0, [pc, #112]	; (16f04 <ll_rx_get+0x1c0>)
   16e92:	f240 6306 	movw	r3, #1542	; 0x606
   16e96:	f00d feb1 	bl	24bfc <printk>
   16e9a:	4040      	eors	r0, r0
   16e9c:	f380 8811 	msr	BASEPRI, r0
   16ea0:	f04f 0003 	mov.w	r0, #3
   16ea4:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   16ea6:	782b      	ldrb	r3, [r5, #0]
   16ea8:	e789      	b.n	16dbe <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   16eaa:	78e2      	ldrb	r2, [r4, #3]
   16eac:	490e      	ldr	r1, [pc, #56]	; (16ee8 <ll_rx_get+0x1a4>)
   16eae:	9801      	ldr	r0, [sp, #4]
   16eb0:	f7ff fd00 	bl	168b4 <tx_cmplt_get>
}
   16eb4:	b005      	add	sp, #20
   16eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   16eba:	490c      	ldr	r1, [pc, #48]	; (16eec <ll_rx_get+0x1a8>)
   16ebc:	4648      	mov	r0, r9
   16ebe:	f7fc fa9b 	bl	133f8 <mem_release>
			return;
   16ec2:	e747      	b.n	16d54 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   16ec4:	4909      	ldr	r1, [pc, #36]	; (16eec <ll_rx_get+0x1a8>)
   16ec6:	4658      	mov	r0, fp
   16ec8:	f7fc fa96 	bl	133f8 <mem_release>
			return;
   16ecc:	e742      	b.n	16d54 <ll_rx_get+0x10>
			*node_rx = rx;
   16ece:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   16ed0:	4610      	mov	r0, r2
			*node_rx = rx;
   16ed2:	600b      	str	r3, [r1, #0]
}
   16ed4:	b005      	add	sp, #20
   16ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eda:	bf00      	nop
   16edc:	200005d4 	.word	0x200005d4
   16ee0:	20002ee4 	.word	0x20002ee4
   16ee4:	20003114 	.word	0x20003114
   16ee8:	200005d6 	.word	0x200005d6
   16eec:	20002ee8 	.word	0x20002ee8
   16ef0:	20002f34 	.word	0x20002f34
   16ef4:	200004b8 	.word	0x200004b8
   16ef8:	200004a8 	.word	0x200004a8
   16efc:	0002d5b8 	.word	0x0002d5b8
   16f00:	0002d628 	.word	0x0002d628
   16f04:	0002d27c 	.word	0x0002d27c

00016f08 <ll_rx_dequeue>:
{
   16f08:	b510      	push	{r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   16f0a:	4932      	ldr	r1, [pc, #200]	; (16fd4 <ll_rx_dequeue+0xcc>)
{
   16f0c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   16f0e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   16f10:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   16f12:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   16f14:	aa01      	add	r2, sp, #4
   16f16:	f7fc facb 	bl	134b0 <memq_dequeue>
	LL_ASSERT(link);
   16f1a:	4604      	mov	r4, r0
   16f1c:	2800      	cmp	r0, #0
   16f1e:	d04a      	beq.n	16fb6 <ll_rx_dequeue+0xae>
	mem_release(link, &mem_link_rx.free);
   16f20:	492d      	ldr	r1, [pc, #180]	; (16fd8 <ll_rx_dequeue+0xd0>)
   16f22:	4620      	mov	r0, r4
   16f24:	f7fc fa68 	bl	133f8 <mem_release>
	switch (rx->type) {
   16f28:	9a01      	ldr	r2, [sp, #4]
   16f2a:	7913      	ldrb	r3, [r2, #4]
   16f2c:	2b1c      	cmp	r3, #28
   16f2e:	d810      	bhi.n	16f52 <ll_rx_dequeue+0x4a>
   16f30:	e8df f003 	tbb	[pc, r3]
   16f34:	1e0f0f1e 	.word	0x1e0f0f1e
   16f38:	0f0f1e0f 	.word	0x0f0f1e0f
   16f3c:	0f0f0f0f 	.word	0x0f0f0f0f
   16f40:	0f0f0f0f 	.word	0x0f0f0f0f
   16f44:	0f0f0f0f 	.word	0x0f0f0f0f
   16f48:	1e2f0f0f 	.word	0x1e2f0f0f
   16f4c:	1e1e1e1e 	.word	0x1e1e1e1e
   16f50:	1e          	.byte	0x1e
   16f51:	00          	.byte	0x00
		LL_ASSERT(0);
   16f52:	4a22      	ldr	r2, [pc, #136]	; (16fdc <ll_rx_dequeue+0xd4>)
   16f54:	4922      	ldr	r1, [pc, #136]	; (16fe0 <ll_rx_dequeue+0xd8>)
   16f56:	4823      	ldr	r0, [pc, #140]	; (16fe4 <ll_rx_dequeue+0xdc>)
   16f58:	f240 43c7 	movw	r3, #1223	; 0x4c7
   16f5c:	f00d fe4e 	bl	24bfc <printk>
   16f60:	4040      	eors	r0, r0
   16f62:	f380 8811 	msr	BASEPRI, r0
   16f66:	f04f 0003 	mov.w	r0, #3
   16f6a:	df02      	svc	2
}
   16f6c:	b002      	add	sp, #8
   16f6e:	bd10      	pop	{r4, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   16f70:	2b00      	cmp	r3, #0
   16f72:	d1fb      	bne.n	16f6c <ll_rx_dequeue+0x64>
   16f74:	4a19      	ldr	r2, [pc, #100]	; (16fdc <ll_rx_dequeue+0xd4>)
   16f76:	491c      	ldr	r1, [pc, #112]	; (16fe8 <ll_rx_dequeue+0xe0>)
   16f78:	481a      	ldr	r0, [pc, #104]	; (16fe4 <ll_rx_dequeue+0xdc>)
   16f7a:	f240 43c3 	movw	r3, #1219	; 0x4c3
   16f7e:	f00d fe3d 	bl	24bfc <printk>
   16f82:	4040      	eors	r0, r0
   16f84:	f380 8811 	msr	BASEPRI, r0
   16f88:	f04f 0003 	mov.w	r0, #3
   16f8c:	df02      	svc	2
}
   16f8e:	b002      	add	sp, #8
   16f90:	bd10      	pop	{r4, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   16f92:	6893      	ldr	r3, [r2, #8]
   16f94:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
   16f96:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
			scan->lll.conn = NULL;
   16f9a:	2000      	movs	r0, #0
			scan->is_enabled = 0U;
   16f9c:	f360 0200 	bfi	r2, r0, #0, #1
			scan->lll.conn = NULL;
   16fa0:	6218      	str	r0, [r3, #32]
			scan->is_enabled = 0U;
   16fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			      (ull_scan_is_enabled(0) << 1)) |
   16fa6:	f000 fe81 	bl	17cac <ull_scan_is_enabled>
			if (!bm) {
   16faa:	0040      	lsls	r0, r0, #1
   16fac:	d1de      	bne.n	16f6c <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   16fae:	f004 ff07 	bl	1bdc0 <ull_filter_adv_scan_state_cb>
}
   16fb2:	b002      	add	sp, #8
   16fb4:	bd10      	pop	{r4, pc}
	LL_ASSERT(link);
   16fb6:	4a09      	ldr	r2, [pc, #36]	; (16fdc <ll_rx_dequeue+0xd4>)
   16fb8:	490c      	ldr	r1, [pc, #48]	; (16fec <ll_rx_dequeue+0xe4>)
   16fba:	480a      	ldr	r0, [pc, #40]	; (16fe4 <ll_rx_dequeue+0xdc>)
   16fbc:	f240 33a1 	movw	r3, #929	; 0x3a1
   16fc0:	f00d fe1c 	bl	24bfc <printk>
   16fc4:	4040      	eors	r0, r0
   16fc6:	f380 8811 	msr	BASEPRI, r0
   16fca:	f04f 0003 	mov.w	r0, #3
   16fce:	df02      	svc	2
   16fd0:	e7a6      	b.n	16f20 <ll_rx_dequeue+0x18>
   16fd2:	bf00      	nop
   16fd4:	20003114 	.word	0x20003114
   16fd8:	20002ee8 	.word	0x20002ee8
   16fdc:	0002d5b8 	.word	0x0002d5b8
   16fe0:	0002d314 	.word	0x0002d314
   16fe4:	0002d27c 	.word	0x0002d27c
   16fe8:	0002d668 	.word	0x0002d668
   16fec:	0002d840 	.word	0x0002d840

00016ff0 <ll_rx_mem_release>:
{
   16ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   16ff4:	6804      	ldr	r4, [r0, #0]
{
   16ff6:	4680      	mov	r8, r0
	while (rx) {
   16ff8:	b344      	cbz	r4, 1704c <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   16ffa:	4f57      	ldr	r7, [pc, #348]	; (17158 <ll_rx_mem_release+0x168>)
   16ffc:	f8df 915c 	ldr.w	r9, [pc, #348]	; 1715c <ll_rx_mem_release+0x16c>
   17000:	4e57      	ldr	r6, [pc, #348]	; (17160 <ll_rx_mem_release+0x170>)
		rx = rx->next;
   17002:	4625      	mov	r5, r4
   17004:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   17006:	792b      	ldrb	r3, [r5, #4]
   17008:	2b1c      	cmp	r3, #28
   1700a:	d810      	bhi.n	1702e <ll_rx_mem_release+0x3e>
   1700c:	e8df f003 	tbb	[pc, r3]
   17010:	380f0f38 	.word	0x380f0f38
   17014:	0f0f380f 	.word	0x0f0f380f
   17018:	0f0f0f0f 	.word	0x0f0f0f0f
   1701c:	0f0f0f0f 	.word	0x0f0f0f0f
   17020:	0f0f0f0f 	.word	0x0f0f0f0f
   17024:	56260f0f 	.word	0x56260f0f
   17028:	38383838 	.word	0x38383838
   1702c:	38          	.byte	0x38
   1702d:	00          	.byte	0x00
			LL_ASSERT(0);
   1702e:	f240 53fa 	movw	r3, #1530	; 0x5fa
   17032:	463a      	mov	r2, r7
   17034:	4649      	mov	r1, r9
   17036:	4630      	mov	r0, r6
   17038:	f00d fde0 	bl	24bfc <printk>
   1703c:	4040      	eors	r0, r0
   1703e:	f380 8811 	msr	BASEPRI, r0
   17042:	f04f 0003 	mov.w	r0, #3
   17046:	df02      	svc	2
	while (rx) {
   17048:	2c00      	cmp	r4, #0
   1704a:	d1da      	bne.n	17002 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   1704c:	2300      	movs	r3, #0
   1704e:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   17052:	20ff      	movs	r0, #255	; 0xff
}
   17054:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   17058:	f7ff bd16 	b.w	16a88 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   1705c:	7f2b      	ldrb	r3, [r5, #28]
   1705e:	2b02      	cmp	r3, #2
   17060:	d062      	beq.n	17128 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   17062:	b1db      	cbz	r3, 1709c <ll_rx_mem_release+0xac>
   17064:	493f      	ldr	r1, [pc, #252]	; (17164 <ll_rx_mem_release+0x174>)
   17066:	f240 532b 	movw	r3, #1323	; 0x52b
   1706a:	463a      	mov	r2, r7
   1706c:	4630      	mov	r0, r6
   1706e:	f00d fdc5 	bl	24bfc <printk>
   17072:	4040      	eors	r0, r0
   17074:	f380 8811 	msr	BASEPRI, r0
   17078:	f04f 0003 	mov.w	r0, #3
   1707c:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1707e:	792b      	ldrb	r3, [r5, #4]
   17080:	b963      	cbnz	r3, 1709c <ll_rx_mem_release+0xac>
   17082:	4939      	ldr	r1, [pc, #228]	; (17168 <ll_rx_mem_release+0x178>)
   17084:	f240 537d 	movw	r3, #1405	; 0x57d
   17088:	463a      	mov	r2, r7
   1708a:	4630      	mov	r0, r6
   1708c:	f00d fdb6 	bl	24bfc <printk>
   17090:	4040      	eors	r0, r0
   17092:	f380 8811 	msr	BASEPRI, r0
   17096:	f04f 0003 	mov.w	r0, #3
   1709a:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1709c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1716c <ll_rx_mem_release+0x17c>
   170a0:	f89a 3000 	ldrb.w	r3, [sl]
   170a4:	2b05      	cmp	r3, #5
   170a6:	d82f      	bhi.n	17108 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   170a8:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   170aa:	4931      	ldr	r1, [pc, #196]	; (17170 <ll_rx_mem_release+0x180>)
	mem_link_rx.quota_pdu += delta;
   170ac:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   170b0:	4628      	mov	r0, r5
   170b2:	f7fc f9a1 	bl	133f8 <mem_release>
	while (rx) {
   170b6:	2c00      	cmp	r4, #0
   170b8:	d1a3      	bne.n	17002 <ll_rx_mem_release+0x12>
   170ba:	e7c7      	b.n	1704c <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   170bc:	88e8      	ldrh	r0, [r5, #6]
   170be:	2800      	cmp	r0, #0
   170c0:	d1c2      	bne.n	17048 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   170c2:	f001 fa59 	bl	18578 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   170c6:	6d83      	ldr	r3, [r0, #88]	; 0x58
				conn = ll_conn_get(rx_free->handle);
   170c8:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   170ca:	b163      	cbz	r3, 170e6 <ll_rx_mem_release+0xf6>
   170cc:	4929      	ldr	r1, [pc, #164]	; (17174 <ll_rx_mem_release+0x184>)
   170ce:	f240 53ec 	movw	r3, #1516	; 0x5ec
   170d2:	463a      	mov	r2, r7
   170d4:	4630      	mov	r0, r6
   170d6:	f00d fd91 	bl	24bfc <printk>
   170da:	4040      	eors	r0, r0
   170dc:	f380 8811 	msr	BASEPRI, r0
   170e0:	f04f 0003 	mov.w	r0, #3
   170e4:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   170e6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   170ea:	f105 0048 	add.w	r0, r5, #72	; 0x48
   170ee:	f7fc f9c3 	bl	13478 <memq_deinit>
				LL_ASSERT(link);
   170f2:	4682      	mov	sl, r0
   170f4:	b310      	cbz	r0, 1713c <ll_rx_mem_release+0x14c>
				conn->lll.link_tx_free = link;
   170f6:	f8c5 a058 	str.w	sl, [r5, #88]	; 0x58
				ll_conn_release(conn);
   170fa:	4628      	mov	r0, r5
   170fc:	f001 fa2e 	bl	1855c <ll_conn_release>
	while (rx) {
   17100:	2c00      	cmp	r4, #0
   17102:	f47f af7e 	bne.w	17002 <ll_rx_mem_release+0x12>
   17106:	e7a1      	b.n	1704c <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   17108:	491b      	ldr	r1, [pc, #108]	; (17178 <ll_rx_mem_release+0x188>)
   1710a:	f240 6306 	movw	r3, #1542	; 0x606
   1710e:	463a      	mov	r2, r7
   17110:	4630      	mov	r0, r6
   17112:	f00d fd73 	bl	24bfc <printk>
   17116:	4040      	eors	r0, r0
   17118:	f380 8811 	msr	BASEPRI, r0
   1711c:	f04f 0003 	mov.w	r0, #3
   17120:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   17122:	f89a 3000 	ldrb.w	r3, [sl]
   17126:	e7bf      	b.n	170a8 <ll_rx_mem_release+0xb8>
				ull_central_cleanup(rx_free);
   17128:	4628      	mov	r0, r5
   1712a:	f003 ff01 	bl	1af30 <ull_central_cleanup>
					ull_filter_adv_scan_state_cb(0);
   1712e:	2000      	movs	r0, #0
   17130:	f004 fe46 	bl	1bdc0 <ull_filter_adv_scan_state_cb>
	while (rx) {
   17134:	2c00      	cmp	r4, #0
   17136:	f47f af64 	bne.w	17002 <ll_rx_mem_release+0x12>
   1713a:	e787      	b.n	1704c <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   1713c:	490f      	ldr	r1, [pc, #60]	; (1717c <ll_rx_mem_release+0x18c>)
   1713e:	f240 53ef 	movw	r3, #1519	; 0x5ef
   17142:	463a      	mov	r2, r7
   17144:	4630      	mov	r0, r6
   17146:	f00d fd59 	bl	24bfc <printk>
   1714a:	4040      	eors	r0, r0
   1714c:	f380 8811 	msr	BASEPRI, r0
   17150:	f04f 0003 	mov.w	r0, #3
   17154:	df02      	svc	2
   17156:	e7ce      	b.n	170f6 <ll_rx_mem_release+0x106>
   17158:	0002d5b8 	.word	0x0002d5b8
   1715c:	0002d314 	.word	0x0002d314
   17160:	0002d27c 	.word	0x0002d27c
   17164:	0002d688 	.word	0x0002d688
   17168:	0002d694 	.word	0x0002d694
   1716c:	20002ee4 	.word	0x20002ee4
   17170:	20002f34 	.word	0x20002f34
   17174:	0002d6b8 	.word	0x0002d6b8
   17178:	0002d628 	.word	0x0002d628
   1717c:	0002d840 	.word	0x0002d840

00017180 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   17180:	4801      	ldr	r0, [pc, #4]	; (17188 <ll_rx_link_alloc+0x8>)
   17182:	f7fc b91f 	b.w	133c4 <mem_acquire>
   17186:	bf00      	nop
   17188:	20002ee8 	.word	0x20002ee8

0001718c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   1718c:	4901      	ldr	r1, [pc, #4]	; (17194 <ll_rx_link_release+0x8>)
   1718e:	f7fc b933 	b.w	133f8 <mem_release>
   17192:	bf00      	nop
   17194:	20002ee8 	.word	0x20002ee8

00017198 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   17198:	4b02      	ldr	r3, [pc, #8]	; (171a4 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1719a:	4a03      	ldr	r2, [pc, #12]	; (171a8 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1719c:	78db      	ldrb	r3, [r3, #3]
   1719e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   171a0:	f7fc b974 	b.w	1348c <memq_enqueue>
   171a4:	200005d4 	.word	0x200005d4
   171a8:	20003118 	.word	0x20003118

000171ac <ll_rx_sched>:
	k_sem_give(sem_recv);
   171ac:	4b01      	ldr	r3, [pc, #4]	; (171b4 <ll_rx_sched+0x8>)
   171ae:	6818      	ldr	r0, [r3, #0]
   171b0:	f00c bc84 	b.w	23abc <z_impl_k_sem_give>
   171b4:	2000312c 	.word	0x2000312c

000171b8 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   171b8:	4b0d      	ldr	r3, [pc, #52]	; (171f0 <ll_pdu_rx_alloc_peek+0x38>)
   171ba:	7899      	ldrb	r1, [r3, #2]
   171bc:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   171be:	4291      	cmp	r1, r2
   171c0:	d80a      	bhi.n	171d8 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   171c2:	eba2 0c01 	sub.w	ip, r2, r1
   171c6:	fa5f fc8c 	uxtb.w	ip, ip
   171ca:	4560      	cmp	r0, ip
   171cc:	d802      	bhi.n	171d4 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   171ce:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   171d0:	7818      	ldrb	r0, [r3, #0]
   171d2:	d109      	bne.n	171e8 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   171d4:	2000      	movs	r0, #0
}
   171d6:	4770      	bx	lr
		return count - first + last;
   171d8:	f893 c001 	ldrb.w	ip, [r3, #1]
   171dc:	4462      	add	r2, ip
   171de:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   171e0:	b2d2      	uxtb	r2, r2
   171e2:	4290      	cmp	r0, r2
   171e4:	d8f6      	bhi.n	171d4 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   171e6:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   171e8:	fb01 3300 	mla	r3, r1, r0, r3
   171ec:	6858      	ldr	r0, [r3, #4]
   171ee:	4770      	bx	lr
   171f0:	200004a8 	.word	0x200004a8

000171f4 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   171f4:	4b09      	ldr	r3, [pc, #36]	; (1721c <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   171f6:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   171f8:	78da      	ldrb	r2, [r3, #3]
   171fa:	7818      	ldrb	r0, [r3, #0]
   171fc:	f893 c001 	ldrb.w	ip, [r3, #1]
   17200:	428a      	cmp	r2, r1
   17202:	d009      	beq.n	17218 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   17204:	1c4a      	adds	r2, r1, #1
   17206:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   17208:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   1720c:	4594      	cmp	ip, r2
   1720e:	bf08      	it	eq
   17210:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   17212:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   17214:	709a      	strb	r2, [r3, #2]

	return mem;
   17216:	4770      	bx	lr
		return NULL;
   17218:	2000      	movs	r0, #0
}
   1721a:	4770      	bx	lr
   1721c:	200004a8 	.word	0x200004a8

00017220 <ll_tx_ack_put>:
{
   17220:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   17222:	4a15      	ldr	r2, [pc, #84]	; (17278 <ll_tx_ack_put+0x58>)
   17224:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   17228:	7854      	ldrb	r4, [r2, #1]
   1722a:	f892 e002 	ldrb.w	lr, [r2, #2]
   1722e:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   17230:	f10c 0301 	add.w	r3, ip, #1
   17234:	b2db      	uxtb	r3, r3
		last = 0U;
   17236:	429c      	cmp	r4, r3
   17238:	bf08      	it	eq
   1723a:	2300      	moveq	r3, #0
	if (last == first) {
   1723c:	459e      	cmp	lr, r3
   1723e:	d00a      	beq.n	17256 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17240:	fb1c fc05 	smulbb	ip, ip, r5
   17244:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   17248:	f82e 000c 	strh.w	r0, [lr, ip]
   1724c:	44f4      	add	ip, lr
	tx->node = node_tx;
   1724e:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   17252:	70d3      	strb	r3, [r2, #3]
}
   17254:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   17256:	4a09      	ldr	r2, [pc, #36]	; (1727c <ll_tx_ack_put+0x5c>)
   17258:	4909      	ldr	r1, [pc, #36]	; (17280 <ll_tx_ack_put+0x60>)
   1725a:	480a      	ldr	r0, [pc, #40]	; (17284 <ll_tx_ack_put+0x64>)
   1725c:	f240 634e 	movw	r3, #1614	; 0x64e
   17260:	f00d fccc 	bl	24bfc <printk>
   17264:	4040      	eors	r0, r0
   17266:	f380 8811 	msr	BASEPRI, r0
   1726a:	f04f 0003 	mov.w	r0, #3
   1726e:	df02      	svc	2
	tx->handle = handle;
   17270:	2300      	movs	r3, #0
   17272:	801b      	strh	r3, [r3, #0]
   17274:	deff      	udf	#255	; 0xff
   17276:	bf00      	nop
   17278:	200005d4 	.word	0x200005d4
   1727c:	0002d5b8 	.word	0x0002d5b8
   17280:	0002d834 	.word	0x0002d834
   17284:	0002d27c 	.word	0x0002d27c

00017288 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17288:	f030 0302 	bics.w	r3, r0, #2
{
   1728c:	b510      	push	{r4, lr}
   1728e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17290:	d002      	beq.n	17298 <ull_ticker_status_take+0x10>
   17292:	680b      	ldr	r3, [r1, #0]
   17294:	2b02      	cmp	r3, #2
   17296:	d008      	beq.n	172aa <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   17298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1729c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   172a0:	4809      	ldr	r0, [pc, #36]	; (172c8 <ull_ticker_status_take+0x40>)
   172a2:	f00c fc31 	bl	23b08 <z_impl_k_sem_take>
	return *ret_cb;
   172a6:	6820      	ldr	r0, [r4, #0]
}
   172a8:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   172aa:	4a08      	ldr	r2, [pc, #32]	; (172cc <ull_ticker_status_take+0x44>)
   172ac:	4908      	ldr	r1, [pc, #32]	; (172d0 <ull_ticker_status_take+0x48>)
   172ae:	4809      	ldr	r0, [pc, #36]	; (172d4 <ull_ticker_status_take+0x4c>)
   172b0:	f240 6382 	movw	r3, #1666	; 0x682
   172b4:	f00d fca2 	bl	24bfc <printk>
   172b8:	4040      	eors	r0, r0
   172ba:	f380 8811 	msr	BASEPRI, r0
   172be:	f04f 0003 	mov.w	r0, #3
   172c2:	df02      	svc	2
   172c4:	e7e8      	b.n	17298 <ull_ticker_status_take+0x10>
   172c6:	bf00      	nop
   172c8:	20003130 	.word	0x20003130
   172cc:	0002d5b8 	.word	0x0002d5b8
   172d0:	0002d6d8 	.word	0x0002d6d8
   172d4:	0002d27c 	.word	0x0002d27c

000172d8 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   172d8:	4b01      	ldr	r3, [pc, #4]	; (172e0 <ull_disable_mark_get+0x8>)
}
   172da:	6818      	ldr	r0, [r3, #0]
   172dc:	4770      	bx	lr
   172de:	bf00      	nop
   172e0:	20002eb0 	.word	0x20002eb0

000172e4 <ull_update_mark>:
	if (!*m) {
   172e4:	4a03      	ldr	r2, [pc, #12]	; (172f4 <ull_update_mark+0x10>)
{
   172e6:	4603      	mov	r3, r0
	if (!*m) {
   172e8:	6810      	ldr	r0, [r2, #0]
   172ea:	b100      	cbz	r0, 172ee <ull_update_mark+0xa>
}
   172ec:	4770      	bx	lr
		*m = param;
   172ee:	6013      	str	r3, [r2, #0]
   172f0:	4618      	mov	r0, r3
}
   172f2:	4770      	bx	lr
   172f4:	20002eb4 	.word	0x20002eb4

000172f8 <ull_update_unmark>:
	if (*m && *m == param) {
   172f8:	4a04      	ldr	r2, [pc, #16]	; (1730c <ull_update_unmark+0x14>)
   172fa:	6813      	ldr	r3, [r2, #0]
   172fc:	b123      	cbz	r3, 17308 <ull_update_unmark+0x10>
   172fe:	4298      	cmp	r0, r3
		*m = NULL;
   17300:	bf06      	itte	eq
   17302:	2100      	moveq	r1, #0
   17304:	6011      	streq	r1, [r2, #0]
	return NULL;
   17306:	2300      	movne	r3, #0
}
   17308:	4618      	mov	r0, r3
   1730a:	4770      	bx	lr
   1730c:	20002eb4 	.word	0x20002eb4

00017310 <ull_update_mark_get>:
	return mark_get(mark_update);
   17310:	4b01      	ldr	r3, [pc, #4]	; (17318 <ull_update_mark_get+0x8>)
}
   17312:	6818      	ldr	r0, [r3, #0]
   17314:	4770      	bx	lr
   17316:	bf00      	nop
   17318:	20002eb4 	.word	0x20002eb4

0001731c <ull_disable>:
{
   1731c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   1731e:	6805      	ldr	r5, [r0, #0]
   17320:	782b      	ldrb	r3, [r5, #0]
{
   17322:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   17324:	b353      	cbz	r3, 1737c <ull_disable+0x60>
	compiler_barrier();
   17326:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   17328:	2201      	movs	r2, #1
   1732a:	2100      	movs	r1, #0
   1732c:	4668      	mov	r0, sp
   1732e:	f014 f9d2 	bl	2b6d6 <z_impl_k_sem_init>
   17332:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   17334:	4a13      	ldr	r2, [pc, #76]	; (17384 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   17336:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   1733a:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   1733c:	b1f3      	cbz	r3, 1737c <ull_disable+0x60>
	mfy.param = lll;
   1733e:	4b12      	ldr	r3, [pc, #72]	; (17388 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   17340:	2200      	movs	r2, #0
   17342:	4611      	mov	r1, r2
   17344:	2003      	movs	r0, #3
	mfy.param = lll;
   17346:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   17348:	f7fc f914 	bl	13574 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1734c:	b940      	cbnz	r0, 17360 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   1734e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17356:	4668      	mov	r0, sp
   17358:	f00c fbd6 	bl	23b08 <z_impl_k_sem_take>
}
   1735c:	b007      	add	sp, #28
   1735e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   17360:	4a0a      	ldr	r2, [pc, #40]	; (1738c <ull_disable+0x70>)
   17362:	490b      	ldr	r1, [pc, #44]	; (17390 <ull_disable+0x74>)
   17364:	480b      	ldr	r0, [pc, #44]	; (17394 <ull_disable+0x78>)
   17366:	f240 63ff 	movw	r3, #1791	; 0x6ff
   1736a:	f00d fc47 	bl	24bfc <printk>
   1736e:	4040      	eors	r0, r0
   17370:	f380 8811 	msr	BASEPRI, r0
   17374:	f04f 0003 	mov.w	r0, #3
   17378:	df02      	svc	2
   1737a:	e7e8      	b.n	1734e <ull_disable+0x32>
		return -EALREADY;
   1737c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17380:	e7ec      	b.n	1735c <ull_disable+0x40>
   17382:	bf00      	nop
   17384:	000168b1 	.word	0x000168b1
   17388:	20000638 	.word	0x20000638
   1738c:	0002d5b8 	.word	0x0002d5b8
   17390:	0002d6d0 	.word	0x0002d6d0
   17394:	0002d27c 	.word	0x0002d27c

00017398 <ull_ticker_stop_with_mark>:
{
   17398:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   1739a:	4e20      	ldr	r6, [pc, #128]	; (1741c <ull_ticker_stop_with_mark+0x84>)
   1739c:	6833      	ldr	r3, [r6, #0]
{
   1739e:	b085      	sub	sp, #20
   173a0:	460c      	mov	r4, r1
   173a2:	4617      	mov	r7, r2
	if (!*m) {
   173a4:	b353      	cbz	r3, 173fc <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   173a6:	4299      	cmp	r1, r3
   173a8:	d113      	bne.n	173d2 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   173aa:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   173ac:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   173ae:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   173b0:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   173b2:	9500      	str	r5, [sp, #0]
   173b4:	4b1a      	ldr	r3, [pc, #104]	; (17420 <ull_ticker_stop_with_mark+0x88>)
   173b6:	2103      	movs	r1, #3
   173b8:	2000      	movs	r0, #0
   173ba:	f7fd fb31 	bl	14a20 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   173be:	4629      	mov	r1, r5
   173c0:	f7ff ff62 	bl	17288 <ull_ticker_status_take>
	if (ret) {
   173c4:	4605      	mov	r5, r0
   173c6:	b140      	cbz	r0, 173da <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   173c8:	6833      	ldr	r3, [r6, #0]
   173ca:	b10b      	cbz	r3, 173d0 <ull_ticker_stop_with_mark+0x38>
   173cc:	429c      	cmp	r4, r3
   173ce:	d017      	beq.n	17400 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   173d0:	b304      	cbz	r4, 17414 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   173d2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   173d6:	b005      	add	sp, #20
   173d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   173da:	4638      	mov	r0, r7
   173dc:	f7ff ff9e 	bl	1731c <ull_disable>
	if (*m && *m == param) {
   173e0:	6833      	ldr	r3, [r6, #0]
   173e2:	b10b      	cbz	r3, 173e8 <ull_ticker_stop_with_mark+0x50>
   173e4:	429c      	cmp	r4, r3
   173e6:	d011      	beq.n	1740c <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   173e8:	2c00      	cmp	r4, #0
   173ea:	d1f2      	bne.n	173d2 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   173ec:	2800      	cmp	r0, #0
   173ee:	d0f2      	beq.n	173d6 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   173f0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   173f4:	bf08      	it	eq
   173f6:	2000      	moveq	r0, #0
}
   173f8:	b005      	add	sp, #20
   173fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   173fc:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   173fe:	e7d4      	b.n	173aa <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   17400:	2300      	movs	r3, #0
		return -EALREADY;
   17402:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   17406:	6033      	str	r3, [r6, #0]
}
   17408:	b005      	add	sp, #20
   1740a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   1740c:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   1740e:	2800      	cmp	r0, #0
   17410:	d0e1      	beq.n	173d6 <ull_ticker_stop_with_mark+0x3e>
   17412:	e7ed      	b.n	173f0 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   17414:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17418:	e7dd      	b.n	173d6 <ull_ticker_stop_with_mark+0x3e>
   1741a:	bf00      	nop
   1741c:	20002eb0 	.word	0x20002eb0
   17420:	000168a5 	.word	0x000168a5

00017424 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   17424:	4b0d      	ldr	r3, [pc, #52]	; (1745c <ull_pdu_rx_alloc_peek+0x38>)
   17426:	7899      	ldrb	r1, [r3, #2]
   17428:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   1742a:	4291      	cmp	r1, r2
   1742c:	d80a      	bhi.n	17444 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   1742e:	eba2 0c01 	sub.w	ip, r2, r1
   17432:	fa5f fc8c 	uxtb.w	ip, ip
   17436:	4560      	cmp	r0, ip
   17438:	d802      	bhi.n	17440 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1743a:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1743c:	7818      	ldrb	r0, [r3, #0]
   1743e:	d109      	bne.n	17454 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   17440:	2000      	movs	r0, #0
}
   17442:	4770      	bx	lr
		return count - first + last;
   17444:	f893 c001 	ldrb.w	ip, [r3, #1]
   17448:	4462      	add	r2, ip
   1744a:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1744c:	b2d2      	uxtb	r2, r2
   1744e:	4290      	cmp	r0, r2
   17450:	d8f6      	bhi.n	17440 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   17452:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   17454:	fb01 3300 	mla	r3, r1, r0, r3
   17458:	6858      	ldr	r0, [r3, #4]
   1745a:	4770      	bx	lr
   1745c:	200004b8 	.word	0x200004b8

00017460 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   17460:	4b09      	ldr	r3, [pc, #36]	; (17488 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   17462:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   17464:	78da      	ldrb	r2, [r3, #3]
   17466:	7818      	ldrb	r0, [r3, #0]
   17468:	f893 c001 	ldrb.w	ip, [r3, #1]
   1746c:	428a      	cmp	r2, r1
   1746e:	d009      	beq.n	17484 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   17470:	1c4a      	adds	r2, r1, #1
   17472:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   17474:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   17478:	4594      	cmp	ip, r2
   1747a:	bf08      	it	eq
   1747c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1747e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   17480:	709a      	strb	r2, [r3, #2]
	return mem;
   17482:	4770      	bx	lr
		return NULL;
   17484:	2000      	movs	r0, #0
}
   17486:	4770      	bx	lr
   17488:	200004b8 	.word	0x200004b8

0001748c <ull_rx_put>:
{
   1748c:	b538      	push	{r3, r4, r5, lr}
   1748e:	460c      	mov	r4, r1
   17490:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   17492:	f003 f97f 	bl	1a794 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   17496:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   17498:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1749a:	4a03      	ldr	r2, [pc, #12]	; (174a8 <ull_rx_put+0x1c>)
   1749c:	4628      	mov	r0, r5
}
   1749e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   174a2:	f7fb bff3 	b.w	1348c <memq_enqueue>
   174a6:	bf00      	nop
   174a8:	20003128 	.word	0x20003128

000174ac <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   174ac:	2201      	movs	r2, #1
   174ae:	4b02      	ldr	r3, [pc, #8]	; (174b8 <ull_rx_sched+0xc>)
   174b0:	4611      	mov	r1, r2
   174b2:	2000      	movs	r0, #0
   174b4:	f7fc b85e 	b.w	13574 <mayfly_enqueue>
   174b8:	20000628 	.word	0x20000628

000174bc <ull_prepare_enqueue>:
{
   174bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   174c0:	4e15      	ldr	r6, [pc, #84]	; (17518 <ull_prepare_enqueue+0x5c>)
{
   174c2:	f89d a020 	ldrb.w	sl, [sp, #32]
   174c6:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   174c8:	78f3      	ldrb	r3, [r6, #3]
{
   174ca:	460f      	mov	r7, r1
	last = last + 1;
   174cc:	1c5d      	adds	r5, r3, #1
   174ce:	4611      	mov	r1, r2
	if (last == count) {
   174d0:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   174d2:	b2ed      	uxtb	r5, r5
		last = 0U;
   174d4:	42aa      	cmp	r2, r5
   174d6:	bf08      	it	eq
   174d8:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   174da:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   174dc:	42aa      	cmp	r2, r5
{
   174de:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   174e0:	7830      	ldrb	r0, [r6, #0]
   174e2:	d015      	beq.n	17510 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   174e4:	1d34      	adds	r4, r6, #4
   174e6:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   174ea:	2210      	movs	r2, #16
   174ec:	4620      	mov	r0, r4
   174ee:	f011 f862 	bl	285b6 <memcpy>
	e->is_resume = is_resume;
   174f2:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   174f4:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   174f6:	f00a 0a01 	and.w	sl, sl, #1
   174fa:	f023 0303 	bic.w	r3, r3, #3
   174fe:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   17502:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   17506:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   17508:	70f5      	strb	r5, [r6, #3]
}
   1750a:	4620      	mov	r0, r4
   1750c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   17510:	2400      	movs	r4, #0
}
   17512:	4620      	mov	r0, r4
   17514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17518:	200004d0 	.word	0x200004d0

0001751c <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   1751c:	4b05      	ldr	r3, [pc, #20]	; (17534 <ull_prepare_dequeue_get+0x18>)
   1751e:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   17520:	78da      	ldrb	r2, [r3, #3]
   17522:	7819      	ldrb	r1, [r3, #0]
   17524:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   17526:	bf1a      	itte	ne
   17528:	3304      	addne	r3, #4
   1752a:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   1752e:	2000      	moveq	r0, #0
}
   17530:	4770      	bx	lr
   17532:	bf00      	nop
   17534:	200004d0 	.word	0x200004d0

00017538 <ull_prepare_dequeue_iter>:
{
   17538:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1753a:	4b0d      	ldr	r3, [pc, #52]	; (17570 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   1753c:	7802      	ldrb	r2, [r0, #0]
   1753e:	7859      	ldrb	r1, [r3, #1]
   17540:	f893 c003 	ldrb.w	ip, [r3, #3]
   17544:	f893 e000 	ldrb.w	lr, [r3]
   17548:	4291      	cmp	r1, r2
   1754a:	bf9c      	itt	ls
   1754c:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   1754e:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   17550:	4594      	cmp	ip, r2
   17552:	d00a      	beq.n	1756a <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   17554:	1c53      	adds	r3, r2, #1
   17556:	b2db      	uxtb	r3, r3
		i = 0U;
   17558:	4299      	cmp	r1, r3
   1755a:	bf08      	it	eq
   1755c:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   1755e:	4905      	ldr	r1, [pc, #20]	; (17574 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   17560:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   17562:	fb02 100e 	mla	r0, r2, lr, r1
}
   17566:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1756a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1756c:	e7fb      	b.n	17566 <ull_prepare_dequeue_iter+0x2e>
   1756e:	bf00      	nop
   17570:	200004d0 	.word	0x200004d0
   17574:	200004d4 	.word	0x200004d4

00017578 <ull_prepare_dequeue>:
{
   17578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   1757c:	4c23      	ldr	r4, [pc, #140]	; (1760c <ull_prepare_dequeue+0x94>)
   1757e:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   17580:	78e1      	ldrb	r1, [r4, #3]
   17582:	7823      	ldrb	r3, [r4, #0]
   17584:	4291      	cmp	r1, r2
   17586:	d027      	beq.n	175d8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   17588:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   1758a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 17610 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   1758e:	f8df b084 	ldr.w	fp, [pc, #132]	; 17614 <ull_prepare_dequeue+0x9c>
   17592:	f8df a084 	ldr.w	sl, [pc, #132]	; 17618 <ull_prepare_dequeue+0xa0>
   17596:	4680      	mov	r8, r0
   17598:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   1759c:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   1759e:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   175a0:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   175a4:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   175a8:	d518      	bpl.n	175dc <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   175aa:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   175ac:	78e1      	ldrb	r1, [r4, #3]
   175ae:	7820      	ldrb	r0, [r4, #0]
   175b0:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   175b4:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   175b6:	4291      	cmp	r1, r2
	_first += 1U;
   175b8:	b2db      	uxtb	r3, r3
	if (_first == last) {
   175ba:	d00d      	beq.n	175d8 <ull_prepare_dequeue+0x60>
		_first = 0U;
   175bc:	459c      	cmp	ip, r3
   175be:	bf08      	it	eq
   175c0:	2300      	moveq	r3, #0
	if (first == last) {
   175c2:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   175c4:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   175c6:	d007      	beq.n	175d8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   175c8:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   175cc:	2d00      	cmp	r5, #0
   175ce:	d1e5      	bne.n	1759c <ull_prepare_dequeue+0x24>
   175d0:	b116      	cbz	r6, 175d8 <ull_prepare_dequeue+0x60>
   175d2:	7f03      	ldrb	r3, [r0, #28]
   175d4:	07db      	lsls	r3, r3, #31
   175d6:	d5e1      	bpl.n	1759c <ull_prepare_dequeue+0x24>
}
   175d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   175dc:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   175e0:	4b0b      	ldr	r3, [pc, #44]	; (17610 <ull_prepare_dequeue+0x98>)
   175e2:	462a      	mov	r2, r5
   175e4:	4629      	mov	r1, r5
   175e6:	4640      	mov	r0, r8
   175e8:	f7fb ffc4 	bl	13574 <mayfly_enqueue>
			LL_ASSERT(!ret);
   175ec:	2800      	cmp	r0, #0
   175ee:	d0dc      	beq.n	175aa <ull_prepare_dequeue+0x32>
   175f0:	480a      	ldr	r0, [pc, #40]	; (1761c <ull_prepare_dequeue+0xa4>)
   175f2:	f240 7376 	movw	r3, #1910	; 0x776
   175f6:	465a      	mov	r2, fp
   175f8:	4651      	mov	r1, sl
   175fa:	f00d faff 	bl	24bfc <printk>
   175fe:	4040      	eors	r0, r0
   17600:	f380 8811 	msr	BASEPRI, r0
   17604:	f04f 0003 	mov.w	r0, #3
   17608:	df02      	svc	2
   1760a:	e7ce      	b.n	175aa <ull_prepare_dequeue+0x32>
   1760c:	200004d0 	.word	0x200004d0
   17610:	200005f8 	.word	0x200005f8
   17614:	0002d5b8 	.word	0x0002d5b8
   17618:	0002d6d0 	.word	0x0002d6d0
   1761c:	0002d27c 	.word	0x0002d27c

00017620 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   17620:	4b06      	ldr	r3, [pc, #24]	; (1763c <ull_event_done_extra_get+0x1c>)
   17622:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   17624:	78d9      	ldrb	r1, [r3, #3]
   17626:	7818      	ldrb	r0, [r3, #0]
   17628:	4291      	cmp	r1, r2
   1762a:	d005      	beq.n	17638 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1762c:	fb02 3300 	mla	r3, r2, r0, r3
   17630:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   17632:	b110      	cbz	r0, 1763a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   17634:	3020      	adds	r0, #32
   17636:	4770      	bx	lr
		return NULL;
   17638:	2000      	movs	r0, #0
}
   1763a:	4770      	bx	lr
   1763c:	20000490 	.word	0x20000490

00017640 <ull_event_done>:
{
   17640:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   17642:	4a13      	ldr	r2, [pc, #76]	; (17690 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   17644:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   17646:	78d4      	ldrb	r4, [r2, #3]
   17648:	7811      	ldrb	r1, [r2, #0]
   1764a:	429c      	cmp	r4, r3
{
   1764c:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   1764e:	7850      	ldrb	r0, [r2, #1]
   17650:	d01b      	beq.n	1768a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   17652:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   17656:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   17658:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   1765a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1765c:	4298      	cmp	r0, r3
   1765e:	bf08      	it	eq
   17660:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17662:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   17664:	b17c      	cbz	r4, 17686 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   17666:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   17668:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   1766a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1766c:	4a09      	ldr	r2, [pc, #36]	; (17694 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1766e:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   17670:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   17672:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   17674:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   17676:	f7fb ff09 	bl	1348c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1767a:	2201      	movs	r2, #1
   1767c:	4b06      	ldr	r3, [pc, #24]	; (17698 <ull_event_done+0x58>)
   1767e:	4611      	mov	r1, r2
   17680:	4628      	mov	r0, r5
   17682:	f7fb ff77 	bl	13574 <mayfly_enqueue>
}
   17686:	4620      	mov	r0, r4
   17688:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1768a:	2400      	movs	r4, #0
   1768c:	e7fb      	b.n	17686 <ull_event_done+0x46>
   1768e:	bf00      	nop
   17690:	20000490 	.word	0x20000490
   17694:	20003120 	.word	0x20003120
   17698:	20000618 	.word	0x20000618

0001769c <ull_rxfifo_alloc>:
{
   1769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176a0:	b083      	sub	sp, #12
   176a2:	461d      	mov	r5, r3
   176a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   176a6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   176aa:	e9cd 0400 	strd	r0, r4, [sp]
   176ae:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   176b2:	b33b      	cbz	r3, 17704 <ull_rxfifo_alloc+0x68>
   176b4:	1e5c      	subs	r4, r3, #1
   176b6:	f895 b000 	ldrb.w	fp, [r5]
   176ba:	4688      	mov	r8, r1
   176bc:	4617      	mov	r7, r2
   176be:	b2e4      	uxtb	r4, r4
	last = last + 1;
   176c0:	f10b 0301 	add.w	r3, fp, #1
   176c4:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   176c8:	45d8      	cmp	r8, fp
   176ca:	bf08      	it	eq
   176cc:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   176d0:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   176d2:	4648      	mov	r0, r9
   176d4:	d016      	beq.n	17704 <ull_rxfifo_alloc+0x68>
   176d6:	f7fb fe75 	bl	133c4 <mem_acquire>
   176da:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   176dc:	4650      	mov	r0, sl
		if (!link) {
   176de:	b18e      	cbz	r6, 17704 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   176e0:	f7fb fe70 	bl	133c4 <mem_acquire>
		if (!rx) {
   176e4:	b188      	cbz	r0, 1770a <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   176e6:	2300      	movs	r3, #0
   176e8:	6073      	str	r3, [r6, #4]
		rx->link = link;
   176ea:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   176ec:	782a      	ldrb	r2, [r5, #0]
   176ee:	9b00      	ldr	r3, [sp, #0]
   176f0:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   176f4:	9b01      	ldr	r3, [sp, #4]
   176f6:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   176f8:	3c01      	subs	r4, #1
   176fa:	b2e4      	uxtb	r4, r4
   176fc:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   176fe:	f885 b000 	strb.w	fp, [r5]
   17702:	d1dd      	bne.n	176c0 <ull_rxfifo_alloc+0x24>
}
   17704:	b003      	add	sp, #12
   17706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   1770a:	4649      	mov	r1, r9
   1770c:	4630      	mov	r0, r6
}
   1770e:	b003      	add	sp, #12
   17710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   17714:	f7fb be70 	b.w	133f8 <mem_release>

00017718 <init_reset>:
{
   17718:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   1771a:	4c3f      	ldr	r4, [pc, #252]	; (17818 <init_reset+0x100>)
   1771c:	4d3f      	ldr	r5, [pc, #252]	; (1781c <init_reset+0x104>)
   1771e:	79a2      	ldrb	r2, [r4, #6]
   17720:	88a1      	ldrh	r1, [r4, #4]
   17722:	4e3f      	ldr	r6, [pc, #252]	; (17820 <init_reset+0x108>)
   17724:	2000      	movs	r0, #0
{
   17726:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   17728:	4623      	mov	r3, r4
   1772a:	8068      	strh	r0, [r5, #2]
   1772c:	f104 0008 	add.w	r0, r4, #8
   17730:	f7fb fe18 	bl	13364 <mem_init>
   17734:	79e3      	ldrb	r3, [r4, #7]
   17736:	79a2      	ldrb	r2, [r4, #6]
   17738:	1d30      	adds	r0, r6, #4
   1773a:	441a      	add	r2, r3
   1773c:	2108      	movs	r1, #8
   1773e:	4633      	mov	r3, r6
   17740:	f7fb fe10 	bl	13364 <mem_init>
   17744:	9602      	str	r6, [sp, #8]
   17746:	462e      	mov	r6, r5
   17748:	79a3      	ldrb	r3, [r4, #6]
   1774a:	f816 0b04 	ldrb.w	r0, [r6], #4
   1774e:	78aa      	ldrb	r2, [r5, #2]
   17750:	7869      	ldrb	r1, [r5, #1]
   17752:	9303      	str	r3, [sp, #12]
   17754:	e9cd 6400 	strd	r6, r4, [sp]
   17758:	1ceb      	adds	r3, r5, #3
   1775a:	f7ff ff9f 	bl	1769c <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1775e:	4b31      	ldr	r3, [pc, #196]	; (17824 <init_reset+0x10c>)
   17760:	2207      	movs	r2, #7
   17762:	1d18      	adds	r0, r3, #4
   17764:	2144      	movs	r1, #68	; 0x44
   17766:	f7fb fdfd 	bl	13364 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1776a:	4b2f      	ldr	r3, [pc, #188]	; (17828 <init_reset+0x110>)
   1776c:	2209      	movs	r2, #9
   1776e:	1d18      	adds	r0, r3, #4
   17770:	2108      	movs	r1, #8
   17772:	f7fb fdf7 	bl	13364 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   17776:	482c      	ldr	r0, [pc, #176]	; (17828 <init_reset+0x110>)
   17778:	f7fb fe24 	bl	133c4 <mem_acquire>
	LL_ASSERT(link);
   1777c:	4604      	mov	r4, r0
   1777e:	b308      	cbz	r0, 177c4 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   17780:	4a2a      	ldr	r2, [pc, #168]	; (1782c <init_reset+0x114>)
   17782:	4620      	mov	r0, r4
   17784:	1f11      	subs	r1, r2, #4
   17786:	f7fb fe73 	bl	13470 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   1778a:	4825      	ldr	r0, [pc, #148]	; (17820 <init_reset+0x108>)
   1778c:	f7fb fe1a 	bl	133c4 <mem_acquire>
	LL_ASSERT(link);
   17790:	4604      	mov	r4, r0
   17792:	b328      	cbz	r0, 177e0 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   17794:	4a26      	ldr	r2, [pc, #152]	; (17830 <init_reset+0x118>)
   17796:	4620      	mov	r0, r4
   17798:	1f11      	subs	r1, r2, #4
   1779a:	f7fb fe69 	bl	13470 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1779e:	4822      	ldr	r0, [pc, #136]	; (17828 <init_reset+0x110>)
   177a0:	f7fb fe10 	bl	133c4 <mem_acquire>
	LL_ASSERT(link);
   177a4:	4604      	mov	r4, r0
   177a6:	b348      	cbz	r0, 177fc <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   177a8:	4a22      	ldr	r2, [pc, #136]	; (17834 <init_reset+0x11c>)
   177aa:	4620      	mov	r0, r4
   177ac:	1f11      	subs	r1, r2, #4
   177ae:	f7fb fe5f 	bl	13470 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   177b2:	4b21      	ldr	r3, [pc, #132]	; (17838 <init_reset+0x120>)
   177b4:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   177b6:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   177b8:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   177ba:	f7ff f965 	bl	16a88 <rx_alloc>
}
   177be:	2000      	movs	r0, #0
   177c0:	b004      	add	sp, #16
   177c2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   177c4:	4a1d      	ldr	r2, [pc, #116]	; (1783c <init_reset+0x124>)
   177c6:	491e      	ldr	r1, [pc, #120]	; (17840 <init_reset+0x128>)
   177c8:	481e      	ldr	r0, [pc, #120]	; (17844 <init_reset+0x12c>)
   177ca:	f640 0302 	movw	r3, #2050	; 0x802
   177ce:	f00d fa15 	bl	24bfc <printk>
   177d2:	4040      	eors	r0, r0
   177d4:	f380 8811 	msr	BASEPRI, r0
   177d8:	f04f 0003 	mov.w	r0, #3
   177dc:	df02      	svc	2
   177de:	e7cf      	b.n	17780 <init_reset+0x68>
	LL_ASSERT(link);
   177e0:	4a16      	ldr	r2, [pc, #88]	; (1783c <init_reset+0x124>)
   177e2:	4917      	ldr	r1, [pc, #92]	; (17840 <init_reset+0x128>)
   177e4:	4817      	ldr	r0, [pc, #92]	; (17844 <init_reset+0x12c>)
   177e6:	f640 030a 	movw	r3, #2058	; 0x80a
   177ea:	f00d fa07 	bl	24bfc <printk>
   177ee:	4040      	eors	r0, r0
   177f0:	f380 8811 	msr	BASEPRI, r0
   177f4:	f04f 0003 	mov.w	r0, #3
   177f8:	df02      	svc	2
   177fa:	e7cb      	b.n	17794 <init_reset+0x7c>
	LL_ASSERT(link);
   177fc:	4a0f      	ldr	r2, [pc, #60]	; (1783c <init_reset+0x124>)
   177fe:	4910      	ldr	r1, [pc, #64]	; (17840 <init_reset+0x128>)
   17800:	4810      	ldr	r0, [pc, #64]	; (17844 <init_reset+0x12c>)
   17802:	f640 0312 	movw	r3, #2066	; 0x812
   17806:	f00d f9f9 	bl	24bfc <printk>
   1780a:	4040      	eors	r0, r0
   1780c:	f380 8811 	msr	BASEPRI, r0
   17810:	f04f 0003 	mov.w	r0, #3
   17814:	df02      	svc	2
   17816:	e7c7      	b.n	177a8 <init_reset+0x90>
   17818:	200003e8 	.word	0x200003e8
   1781c:	20000490 	.word	0x20000490
   17820:	20002eb8 	.word	0x20002eb8
   17824:	20002f34 	.word	0x20002f34
   17828:	20002ee8 	.word	0x20002ee8
   1782c:	20003128 	.word	0x20003128
   17830:	20003120 	.word	0x20003120
   17834:	20003118 	.word	0x20003118
   17838:	20002ee4 	.word	0x20002ee4
   1783c:	0002d5b8 	.word	0x0002d5b8
   17840:	0002d840 	.word	0x0002d840
   17844:	0002d27c 	.word	0x0002d27c

00017848 <ll_init>:
{
   17848:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   1784a:	4b2b      	ldr	r3, [pc, #172]	; (178f8 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1784c:	4d2b      	ldr	r5, [pc, #172]	; (178fc <ll_init+0xb4>)
	sem_recv = sem_rx;
   1784e:	6018      	str	r0, [r3, #0]
{
   17850:	b087      	sub	sp, #28
	cntr_init();
   17852:	f006 fd0b 	bl	1e26c <cntr_init>
	mayfly_init();
   17856:	f7fb fe3b 	bl	134d0 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1785a:	4a29      	ldr	r2, [pc, #164]	; (17900 <ll_init+0xb8>)
   1785c:	4929      	ldr	r1, [pc, #164]	; (17904 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1785e:	482a      	ldr	r0, [pc, #168]	; (17908 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   17860:	e9cd 2504 	strd	r2, r5, [sp, #16]
   17864:	4a29      	ldr	r2, [pc, #164]	; (1790c <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   17866:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   17868:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1786c:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1786e:	210c      	movs	r1, #12
   17870:	e9cd 0100 	strd	r0, r1, [sp]
   17874:	4a26      	ldr	r2, [pc, #152]	; (17910 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   17876:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   17878:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1787a:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   1787c:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1787e:	4619      	mov	r1, r3
   17880:	2000      	movs	r0, #0
   17882:	f7fc ff91 	bl	147a8 <ticker_init>
	LL_ASSERT(!err);
   17886:	bb40      	cbnz	r0, 178da <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17888:	2201      	movs	r2, #1
   1788a:	2100      	movs	r1, #0
   1788c:	4821      	ldr	r0, [pc, #132]	; (17914 <ll_init+0xcc>)
   1788e:	f013 ff22 	bl	2b6d6 <z_impl_k_sem_init>
	err = lll_init();
   17892:	f005 f8ad 	bl	1c9f0 <lll_init>
	if (err) {
   17896:	4604      	mov	r4, r0
   17898:	b110      	cbz	r0, 178a0 <ll_init+0x58>
}
   1789a:	4620      	mov	r0, r4
   1789c:	b007      	add	sp, #28
   1789e:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   178a0:	f7ff ff3a 	bl	17718 <init_reset>
	if (err) {
   178a4:	4604      	mov	r4, r0
   178a6:	2800      	cmp	r0, #0
   178a8:	d1f7      	bne.n	1789a <ll_init+0x52>
	err = lll_scan_init();
   178aa:	f005 ff35 	bl	1d718 <lll_scan_init>
	if (err) {
   178ae:	4604      	mov	r4, r0
   178b0:	2800      	cmp	r0, #0
   178b2:	d1f2      	bne.n	1789a <ll_init+0x52>
	err = ull_scan_init();
   178b4:	f000 f92e 	bl	17b14 <ull_scan_init>
	if (err) {
   178b8:	4604      	mov	r4, r0
   178ba:	2800      	cmp	r0, #0
   178bc:	d1ed      	bne.n	1789a <ll_init+0x52>
	err = lll_conn_init();
   178be:	f006 f83b 	bl	1d938 <lll_conn_init>
	if (err) {
   178c2:	4604      	mov	r4, r0
   178c4:	2800      	cmp	r0, #0
   178c6:	d1e8      	bne.n	1789a <ll_init+0x52>
	err = ull_conn_init();
   178c8:	f001 f904 	bl	18ad4 <ull_conn_init>
	if (err) {
   178cc:	4604      	mov	r4, r0
   178ce:	2800      	cmp	r0, #0
   178d0:	d1e3      	bne.n	1789a <ll_init+0x52>
		ull_filter_reset(true);
   178d2:	2001      	movs	r0, #1
   178d4:	f004 f9f4 	bl	1bcc0 <ull_filter_reset>
	return  0;
   178d8:	e7df      	b.n	1789a <ll_init+0x52>
	LL_ASSERT(!err);
   178da:	4a0f      	ldr	r2, [pc, #60]	; (17918 <ll_init+0xd0>)
   178dc:	490f      	ldr	r1, [pc, #60]	; (1791c <ll_init+0xd4>)
   178de:	4810      	ldr	r0, [pc, #64]	; (17920 <ll_init+0xd8>)
   178e0:	f240 230d 	movw	r3, #525	; 0x20d
   178e4:	f00d f98a 	bl	24bfc <printk>
   178e8:	4040      	eors	r0, r0
   178ea:	f380 8811 	msr	BASEPRI, r0
   178ee:	f04f 0003 	mov.w	r0, #3
   178f2:	df02      	svc	2
   178f4:	e7c8      	b.n	17888 <ll_init+0x40>
   178f6:	bf00      	nop
   178f8:	2000312c 	.word	0x2000312c
   178fc:	0001ef65 	.word	0x0001ef65
   17900:	0001ee15 	.word	0x0001ee15
   17904:	0001edb1 	.word	0x0001edb1
   17908:	20003478 	.word	0x20003478
   1790c:	20003208 	.word	0x20003208
   17910:	20003148 	.word	0x20003148
   17914:	20003130 	.word	0x20003130
   17918:	0002d5b8 	.word	0x0002d5b8
   1791c:	0002d5f4 	.word	0x0002d5f4
   17920:	0002d27c 	.word	0x0002d27c

00017924 <ll_reset>:
{
   17924:	b510      	push	{r4, lr}
   17926:	b086      	sub	sp, #24
	err = ull_scan_reset();
   17928:	f000 f970 	bl	17c0c <ull_scan_reset>
	LL_ASSERT(!err);
   1792c:	bb50      	cbnz	r0, 17984 <ll_reset+0x60>
	err = ull_conn_reset();
   1792e:	f001 f8d3 	bl	18ad8 <ull_conn_reset>
	LL_ASSERT(!err);
   17932:	2800      	cmp	r0, #0
   17934:	d137      	bne.n	179a6 <ll_reset+0x82>
	MFIFO_INIT(tx_ack);
   17936:	4b31      	ldr	r3, [pc, #196]	; (179fc <ll_reset+0xd8>)
   17938:	2400      	movs	r4, #0
   1793a:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   1793c:	4620      	mov	r0, r4
   1793e:	f004 f9bf 	bl	1bcc0 <ull_filter_reset>
	MFIFO_INIT(prep);
   17942:	492f      	ldr	r1, [pc, #188]	; (17a00 <ll_reset+0xdc>)
	MFIFO_INIT(pdu_rx_free);
   17944:	4a2f      	ldr	r2, [pc, #188]	; (17a04 <ll_reset+0xe0>)
	MFIFO_INIT(ll_pdu_rx_free);
   17946:	4b30      	ldr	r3, [pc, #192]	; (17a08 <ll_reset+0xe4>)
	MFIFO_INIT(prep);
   17948:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   1794a:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   1794c:	805c      	strh	r4, [r3, #2]
   1794e:	2201      	movs	r2, #1
   17950:	4621      	mov	r1, r4
   17952:	4668      	mov	r0, sp
   17954:	f013 febf 	bl	2b6d6 <z_impl_k_sem_init>
		mfy.param = &sem;
   17958:	4b2c      	ldr	r3, [pc, #176]	; (17a0c <ll_reset+0xe8>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1795a:	4622      	mov	r2, r4
   1795c:	4621      	mov	r1, r4
   1795e:	2003      	movs	r0, #3
		mfy.param = &sem;
   17960:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   17964:	f7fb fe06 	bl	13574 <mayfly_enqueue>
		LL_ASSERT(!retval);
   17968:	2800      	cmp	r0, #0
   1796a:	d139      	bne.n	179e0 <ll_reset+0xbc>
	return z_impl_k_sem_take(sem, timeout);
   1796c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17974:	4668      	mov	r0, sp
   17976:	f00c f8c7 	bl	23b08 <z_impl_k_sem_take>
	err = init_reset();
   1797a:	f7ff fecd 	bl	17718 <init_reset>
	LL_ASSERT(!err);
   1797e:	bb00      	cbnz	r0, 179c2 <ll_reset+0x9e>
}
   17980:	b006      	add	sp, #24
   17982:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   17984:	4a22      	ldr	r2, [pc, #136]	; (17a10 <ll_reset+0xec>)
   17986:	4923      	ldr	r1, [pc, #140]	; (17a14 <ll_reset+0xf0>)
   17988:	4823      	ldr	r0, [pc, #140]	; (17a18 <ll_reset+0xf4>)
   1798a:	f240 23b3 	movw	r3, #691	; 0x2b3
   1798e:	f00d f935 	bl	24bfc <printk>
   17992:	4040      	eors	r0, r0
   17994:	f380 8811 	msr	BASEPRI, r0
   17998:	f04f 0003 	mov.w	r0, #3
   1799c:	df02      	svc	2
	err = ull_conn_reset();
   1799e:	f001 f89b 	bl	18ad8 <ull_conn_reset>
	LL_ASSERT(!err);
   179a2:	2800      	cmp	r0, #0
   179a4:	d0c7      	beq.n	17936 <ll_reset+0x12>
   179a6:	4a1a      	ldr	r2, [pc, #104]	; (17a10 <ll_reset+0xec>)
   179a8:	491a      	ldr	r1, [pc, #104]	; (17a14 <ll_reset+0xf0>)
   179aa:	481b      	ldr	r0, [pc, #108]	; (17a18 <ll_reset+0xf4>)
   179ac:	f240 23de 	movw	r3, #734	; 0x2de
   179b0:	f00d f924 	bl	24bfc <printk>
   179b4:	4040      	eors	r0, r0
   179b6:	f380 8811 	msr	BASEPRI, r0
   179ba:	f04f 0003 	mov.w	r0, #3
   179be:	df02      	svc	2
   179c0:	e7b9      	b.n	17936 <ll_reset+0x12>
	LL_ASSERT(!err);
   179c2:	4a13      	ldr	r2, [pc, #76]	; (17a10 <ll_reset+0xec>)
   179c4:	4913      	ldr	r1, [pc, #76]	; (17a14 <ll_reset+0xf0>)
   179c6:	4814      	ldr	r0, [pc, #80]	; (17a18 <ll_reset+0xf4>)
   179c8:	f240 3327 	movw	r3, #807	; 0x327
   179cc:	f00d f916 	bl	24bfc <printk>
   179d0:	4040      	eors	r0, r0
   179d2:	f380 8811 	msr	BASEPRI, r0
   179d6:	f04f 0003 	mov.w	r0, #3
   179da:	df02      	svc	2
}
   179dc:	b006      	add	sp, #24
   179de:	bd10      	pop	{r4, pc}
		LL_ASSERT(!retval);
   179e0:	4a0b      	ldr	r2, [pc, #44]	; (17a10 <ll_reset+0xec>)
   179e2:	490e      	ldr	r1, [pc, #56]	; (17a1c <ll_reset+0xf8>)
   179e4:	480c      	ldr	r0, [pc, #48]	; (17a18 <ll_reset+0xf4>)
   179e6:	f240 330d 	movw	r3, #781	; 0x30d
   179ea:	f00d f907 	bl	24bfc <printk>
   179ee:	4040      	eors	r0, r0
   179f0:	f380 8811 	msr	BASEPRI, r0
   179f4:	f04f 0003 	mov.w	r0, #3
   179f8:	df02      	svc	2
   179fa:	e7b7      	b.n	1796c <ll_reset+0x48>
   179fc:	200005d4 	.word	0x200005d4
   17a00:	200004d0 	.word	0x200004d0
   17a04:	200004b8 	.word	0x200004b8
   17a08:	200004a8 	.word	0x200004a8
   17a0c:	20000608 	.word	0x20000608
   17a10:	0002d5b8 	.word	0x0002d5b8
   17a14:	0002d5f4 	.word	0x0002d5f4
   17a18:	0002d27c 	.word	0x0002d27c
   17a1c:	0002d6f8 	.word	0x0002d6f8

00017a20 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   17a20:	b510      	push	{r4, lr}
   17a22:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   17a24:	2400      	movs	r4, #0
   17a26:	e9cd 4400 	strd	r4, r4, [sp]
   17a2a:	9b04      	ldr	r3, [sp, #16]
   17a2c:	f005 f9ee 	bl	1ce0c <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   17a30:	b002      	add	sp, #8
   17a32:	bd10      	pop	{r4, pc}

00017a34 <lll_resume>:

void lll_resume(void *param)
{
   17a34:	b510      	push	{r4, lr}
   17a36:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   17a38:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   17a3a:	691a      	ldr	r2, [r3, #16]
   17a3c:	6999      	ldr	r1, [r3, #24]
   17a3e:	2401      	movs	r4, #1
{
   17a40:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   17a42:	4020      	ands	r0, r4
   17a44:	e9cd 0400 	strd	r0, r4, [sp]
   17a48:	6958      	ldr	r0, [r3, #20]
   17a4a:	f005 f9df 	bl	1ce0c <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   17a4e:	b108      	cbz	r0, 17a54 <lll_resume+0x20>
   17a50:	3077      	adds	r0, #119	; 0x77
   17a52:	d101      	bne.n	17a58 <lll_resume+0x24>
}
   17a54:	b002      	add	sp, #8
   17a56:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   17a58:	4a06      	ldr	r2, [pc, #24]	; (17a74 <lll_resume+0x40>)
   17a5a:	4907      	ldr	r1, [pc, #28]	; (17a78 <lll_resume+0x44>)
   17a5c:	4807      	ldr	r0, [pc, #28]	; (17a7c <lll_resume+0x48>)
   17a5e:	234f      	movs	r3, #79	; 0x4f
   17a60:	f00d f8cc 	bl	24bfc <printk>
   17a64:	4040      	eors	r0, r0
   17a66:	f380 8811 	msr	BASEPRI, r0
   17a6a:	f04f 0003 	mov.w	r0, #3
   17a6e:	df02      	svc	2
}
   17a70:	b002      	add	sp, #8
   17a72:	bd10      	pop	{r4, pc}
   17a74:	0002d70c 	.word	0x0002d70c
   17a78:	0002d750 	.word	0x0002d750
   17a7c:	0002d27c 	.word	0x0002d27c

00017a80 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   17a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17a84:	9c09      	ldr	r4, [sp, #36]	; 0x24
   17a86:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   17a8a:	4625      	mov	r5, r4
{
   17a8c:	4680      	mov	r8, r0
	return ++hdr->ref;
   17a8e:	f815 1b1c 	ldrb.w	r1, [r5], #28
   17a92:	3101      	adds	r1, #1
   17a94:	b2c9      	uxtb	r1, r1
   17a96:	4617      	mov	r7, r2
   17a98:	461e      	mov	r6, r3
   17a9a:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   17a9c:	b181      	cbz	r1, 17ac0 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   17a9e:	4c17      	ldr	r4, [pc, #92]	; (17afc <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   17aa0:	4b17      	ldr	r3, [pc, #92]	; (17b00 <ticker_cb+0x80>)
	p.lazy = lazy;
   17aa2:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17aa4:	2200      	movs	r2, #0
   17aa6:	4611      	mov	r1, r2
   17aa8:	2001      	movs	r0, #1
	p.remainder = remainder;
   17aaa:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   17aae:	60e5      	str	r5, [r4, #12]
	p.force = force;
   17ab0:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   17ab4:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17ab6:	f7fb fd5d 	bl	13574 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   17aba:	b978      	cbnz	r0, 17adc <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   17abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   17ac0:	4a10      	ldr	r2, [pc, #64]	; (17b04 <ticker_cb+0x84>)
   17ac2:	4911      	ldr	r1, [pc, #68]	; (17b08 <ticker_cb+0x88>)
   17ac4:	4811      	ldr	r0, [pc, #68]	; (17b0c <ticker_cb+0x8c>)
   17ac6:	f240 23db 	movw	r3, #731	; 0x2db
   17aca:	f00d f897 	bl	24bfc <printk>
   17ace:	4040      	eors	r0, r0
   17ad0:	f380 8811 	msr	BASEPRI, r0
   17ad4:	f04f 0003 	mov.w	r0, #3
   17ad8:	df02      	svc	2
   17ada:	e7e0      	b.n	17a9e <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   17adc:	4a09      	ldr	r2, [pc, #36]	; (17b04 <ticker_cb+0x84>)
   17ade:	490c      	ldr	r1, [pc, #48]	; (17b10 <ticker_cb+0x90>)
   17ae0:	480a      	ldr	r0, [pc, #40]	; (17b0c <ticker_cb+0x8c>)
   17ae2:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   17ae6:	f00d f889 	bl	24bfc <printk>
   17aea:	4040      	eors	r0, r0
   17aec:	f380 8811 	msr	BASEPRI, r0
   17af0:	f04f 0003 	mov.w	r0, #3
   17af4:	df02      	svc	2
}
   17af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17afa:	bf00      	nop
   17afc:	200034e8 	.word	0x200034e8
   17b00:	20000648 	.word	0x20000648
   17b04:	0002d778 	.word	0x0002d778
   17b08:	0002d7b8 	.word	0x0002d7b8
   17b0c:	0002d27c 	.word	0x0002d27c
   17b10:	0002d6d0 	.word	0x0002d6d0

00017b14 <ull_scan_init>:
}
   17b14:	2000      	movs	r0, #0
   17b16:	4770      	bx	lr

00017b18 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   17b18:	3002      	adds	r0, #2
{
   17b1a:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   17b1c:	f101 021c 	add.w	r2, r1, #28
   17b20:	b2c0      	uxtb	r0, r0
   17b22:	f7ff fc39 	bl	17398 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   17b26:	b110      	cbz	r0, 17b2e <ull_scan_disable+0x16>
   17b28:	3078      	adds	r0, #120	; 0x78
   17b2a:	d101      	bne.n	17b30 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17b2c:	200c      	movs	r0, #12
}
   17b2e:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   17b30:	4a07      	ldr	r2, [pc, #28]	; (17b50 <ull_scan_disable+0x38>)
   17b32:	4908      	ldr	r1, [pc, #32]	; (17b54 <ull_scan_disable+0x3c>)
   17b34:	4808      	ldr	r0, [pc, #32]	; (17b58 <ull_scan_disable+0x40>)
   17b36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   17b3a:	f00d f85f 	bl	24bfc <printk>
   17b3e:	4040      	eors	r0, r0
   17b40:	f380 8811 	msr	BASEPRI, r0
   17b44:	f04f 0003 	mov.w	r0, #3
   17b48:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   17b4a:	200c      	movs	r0, #12
}
   17b4c:	bd08      	pop	{r3, pc}
   17b4e:	bf00      	nop
   17b50:	0002d778 	.word	0x0002d778
   17b54:	0002d7bc 	.word	0x0002d7bc
   17b58:	0002d27c 	.word	0x0002d27c

00017b5c <ll_scan_enable>:
{
   17b5c:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   17b5e:	4c2a      	ldr	r4, [pc, #168]	; (17c08 <ll_scan_enable+0xac>)
   17b60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17b64:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   17b68:	b358      	cbz	r0, 17bc2 <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   17b6a:	bb5a      	cbnz	r2, 17bc4 <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   17b6c:	079a      	lsls	r2, r3, #30
   17b6e:	f3c3 0541 	ubfx	r5, r3, #1, #2
   17b72:	d50b      	bpl.n	17b8c <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   17b74:	2001      	movs	r0, #1
   17b76:	f7fd f817 	bl	14ba8 <ll_addr_get>
   17b7a:	2106      	movs	r1, #6
   17b7c:	f7fb fc6c 	bl	13458 <mem_nz>
   17b80:	2800      	cmp	r0, #0
   17b82:	d03e      	beq.n	17c02 <ll_scan_enable+0xa6>
		own_addr_type = scan->own_addr_type;
   17b84:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   17b88:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   17b8c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   17b90:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   17b94:	f004 f932 	bl	1bdfc <ull_filter_scan_update>
	lll->rpa_gen = 0;
   17b98:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   17b9c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   17ba0:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   17ba4:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   17ba6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   17baa:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   17bac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   17bb0:	d502      	bpl.n	17bb8 <ll_scan_enable+0x5c>
   17bb2:	3d02      	subs	r5, #2
   17bb4:	2d01      	cmp	r5, #1
   17bb6:	d91a      	bls.n	17bee <ll_scan_enable+0x92>
}
   17bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   17bbc:	4812      	ldr	r0, [pc, #72]	; (17c08 <ll_scan_enable+0xac>)
   17bbe:	f7e9 bf4f 	b.w	1a60 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   17bc2:	b912      	cbnz	r2, 17bca <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   17bc4:	250c      	movs	r5, #12
}
   17bc6:	4628      	mov	r0, r5
   17bc8:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   17bca:	6a23      	ldr	r3, [r4, #32]
   17bcc:	2b00      	cmp	r3, #0
   17bce:	d1f9      	bne.n	17bc4 <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   17bd0:	4621      	mov	r1, r4
   17bd2:	f7ff ffa1 	bl	17b18 <ull_scan_disable>
	if (ret) {
   17bd6:	4605      	mov	r5, r0
   17bd8:	2800      	cmp	r0, #0
   17bda:	d1f4      	bne.n	17bc6 <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   17bdc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17be0:	f360 0300 	bfi	r3, r0, #0, #1
   17be4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   17be8:	f004 f8ea 	bl	1bdc0 <ull_filter_adv_scan_state_cb>
	}
#endif

	return 0;
   17bec:	e7eb      	b.n	17bc6 <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   17bee:	2000      	movs	r0, #0
   17bf0:	f004 f91e 	bl	1be30 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   17bf4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   17bf8:	f043 0302 	orr.w	r3, r3, #2
   17bfc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   17c00:	e7da      	b.n	17bb8 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   17c02:	2512      	movs	r5, #18
   17c04:	e7df      	b.n	17bc6 <ll_scan_enable+0x6a>
   17c06:	bf00      	nop
   17c08:	200034a0 	.word	0x200034a0

00017c0c <ull_scan_reset>:
{
   17c0c:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   17c0e:	4c0c      	ldr	r4, [pc, #48]	; (17c40 <ull_scan_reset+0x34>)
   17c10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17c14:	07db      	lsls	r3, r3, #31
   17c16:	d501      	bpl.n	17c1c <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   17c18:	6a20      	ldr	r0, [r4, #32]
   17c1a:	b108      	cbz	r0, 17c20 <ull_scan_reset+0x14>
}
   17c1c:	2000      	movs	r0, #0
   17c1e:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   17c20:	4621      	mov	r1, r4
   17c22:	f7ff ff79 	bl	17b18 <ull_scan_disable>
	if (ret) {
   17c26:	2800      	cmp	r0, #0
   17c28:	d1f8      	bne.n	17c1c <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   17c2a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   17c2e:	f360 0200 	bfi	r2, r0, #0, #1
   17c32:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(0);
   17c36:	f004 f8c3 	bl	1bdc0 <ull_filter_adv_scan_state_cb>
}
   17c3a:	2000      	movs	r0, #0
   17c3c:	bd10      	pop	{r4, pc}
   17c3e:	bf00      	nop
   17c40:	200034a0 	.word	0x200034a0

00017c44 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   17c44:	4a03      	ldr	r2, [pc, #12]	; (17c54 <ull_scan_handle_get+0x10>)
   17c46:	4b04      	ldr	r3, [pc, #16]	; (17c58 <ull_scan_handle_get+0x14>)
   17c48:	1a80      	subs	r0, r0, r2
   17c4a:	fba3 3000 	umull	r3, r0, r3, r0
}
   17c4e:	f3c0 1007 	ubfx	r0, r0, #4, #8
   17c52:	4770      	bx	lr
   17c54:	200034a0 	.word	0x200034a0
   17c58:	38e38e39 	.word	0x38e38e39

00017c5c <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   17c5c:	4a04      	ldr	r2, [pc, #16]	; (17c70 <ull_scan_lll_handle_get+0x14>)
   17c5e:	6800      	ldr	r0, [r0, #0]
   17c60:	4b04      	ldr	r3, [pc, #16]	; (17c74 <ull_scan_lll_handle_get+0x18>)
   17c62:	1a80      	subs	r0, r0, r2
   17c64:	fba3 3000 	umull	r3, r0, r3, r0
}
   17c68:	f3c0 1007 	ubfx	r0, r0, #4, #8
   17c6c:	4770      	bx	lr
   17c6e:	bf00      	nop
   17c70:	200034a0 	.word	0x200034a0
   17c74:	38e38e39 	.word	0x38e38e39

00017c78 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   17c78:	b938      	cbnz	r0, 17c8a <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   17c7a:	4805      	ldr	r0, [pc, #20]	; (17c90 <ull_scan_is_enabled_get+0x18>)
   17c7c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   17c80:	f013 0f01 	tst.w	r3, #1
   17c84:	bf08      	it	eq
   17c86:	2000      	moveq	r0, #0
   17c88:	4770      	bx	lr
		return NULL;
   17c8a:	2000      	movs	r0, #0
}
   17c8c:	4770      	bx	lr
   17c8e:	bf00      	nop
   17c90:	200034a0 	.word	0x200034a0

00017c94 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   17c94:	4a04      	ldr	r2, [pc, #16]	; (17ca8 <ull_scan_is_disabled_get+0x14>)
   17c96:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   17c9a:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   17c9e:	4303      	orrs	r3, r0
}
   17ca0:	bf0c      	ite	eq
   17ca2:	4610      	moveq	r0, r2
   17ca4:	2000      	movne	r0, #0
   17ca6:	4770      	bx	lr
   17ca8:	200034a0 	.word	0x200034a0

00017cac <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   17cac:	b990      	cbnz	r0, 17cd4 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   17cae:	4a0a      	ldr	r2, [pc, #40]	; (17cd8 <ull_scan_is_enabled+0x2c>)
   17cb0:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   17cb4:	f013 0001 	ands.w	r0, r3, #1
   17cb8:	d00d      	beq.n	17cd6 <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   17cba:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   17cbe:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   17cc0:	f003 0301 	and.w	r3, r3, #1
   17cc4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17cc8:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   17ccc:	b11a      	cbz	r2, 17cd6 <ull_scan_is_enabled+0x2a>
   17cce:	f040 0004 	orr.w	r0, r0, #4
   17cd2:	4770      	bx	lr
		return 0U;
   17cd4:	2000      	movs	r0, #0
}
   17cd6:	4770      	bx	lr
   17cd8:	200034a0 	.word	0x200034a0

00017cdc <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   17cdc:	b950      	cbnz	r0, 17cf4 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   17cde:	4b06      	ldr	r3, [pc, #24]	; (17cf8 <ull_scan_filter_pol_get+0x1c>)
   17ce0:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   17ce4:	f010 0001 	ands.w	r0, r0, #1
   17ce8:	d005      	beq.n	17cf6 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   17cea:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   17cee:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   17cf2:	4770      	bx	lr
		return 0;
   17cf4:	2000      	movs	r0, #0
}
   17cf6:	4770      	bx	lr
   17cf8:	200034a0 	.word	0x200034a0

00017cfc <init_reset>:
{
   17cfc:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   17cfe:	4b15      	ldr	r3, [pc, #84]	; (17d54 <init_reset+0x58>)
   17d00:	4815      	ldr	r0, [pc, #84]	; (17d58 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   17d02:	4c16      	ldr	r4, [pc, #88]	; (17d5c <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   17d04:	2201      	movs	r2, #1
   17d06:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17d0a:	f7fb fb2b 	bl	13364 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   17d0e:	4b14      	ldr	r3, [pc, #80]	; (17d60 <init_reset+0x64>)
   17d10:	2203      	movs	r2, #3
   17d12:	1d18      	adds	r0, r3, #4
   17d14:	2124      	movs	r1, #36	; 0x24
   17d16:	f7fb fb25 	bl	13364 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   17d1a:	4b12      	ldr	r3, [pc, #72]	; (17d64 <init_reset+0x68>)
   17d1c:	2204      	movs	r2, #4
   17d1e:	1898      	adds	r0, r3, r2
   17d20:	212c      	movs	r1, #44	; 0x2c
   17d22:	f7fb fb1f 	bl	13364 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   17d26:	4b10      	ldr	r3, [pc, #64]	; (17d68 <init_reset+0x6c>)
   17d28:	2207      	movs	r2, #7
   17d2a:	1d18      	adds	r0, r3, #4
   17d2c:	2108      	movs	r1, #8
   17d2e:	f7fb fb19 	bl	13364 <mem_init>
	default_phy_tx |= PHY_2M;
   17d32:	490e      	ldr	r1, [pc, #56]	; (17d6c <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   17d34:	4a0e      	ldr	r2, [pc, #56]	; (17d70 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   17d36:	480f      	ldr	r0, [pc, #60]	; (17d74 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   17d38:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   17d3a:	f04f 0c1b 	mov.w	ip, #27
   17d3e:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   17d42:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   17d44:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   17d48:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   17d4a:	f8a0 c000 	strh.w	ip, [r0]
}
   17d4e:	2000      	movs	r0, #0
   17d50:	bd10      	pop	{r4, pc}
   17d52:	bf00      	nop
   17d54:	200034f8 	.word	0x200034f8
   17d58:	20001eb0 	.word	0x20001eb0
   17d5c:	20004816 	.word	0x20004816
   17d60:	20003520 	.word	0x20003520
   17d64:	20003590 	.word	0x20003590
   17d68:	20003644 	.word	0x20003644
   17d6c:	20004999 	.word	0x20004999
   17d70:	20004998 	.word	0x20004998
   17d74:	20004818 	.word	0x20004818

00017d78 <ctrl_tx_pause_enqueue>:
{
   17d78:	b538      	push	{r3, r4, r5, lr}
   17d7a:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   17d7c:	e9d0 3067 	ldrd	r3, r0, [r0, #412]	; 0x19c
{
   17d80:	460d      	mov	r5, r1
	if (
   17d82:	b11b      	cbz	r3, 17d8c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   17d84:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
   17d88:	0789      	lsls	r1, r1, #30
   17d8a:	d50c      	bpl.n	17da6 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   17d8c:	b340      	cbz	r0, 17de0 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   17d8e:	2a00      	cmp	r2, #0
   17d90:	d130      	bne.n	17df4 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   17d92:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   17d96:	681a      	ldr	r2, [r3, #0]
   17d98:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   17d9a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   17d9c:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   17d9e:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
   17da2:	b1d3      	cbz	r3, 17dda <ctrl_tx_pause_enqueue+0x62>
}
   17da4:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   17da6:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
   17daa:	07c9      	lsls	r1, r1, #31
   17dac:	d4ee      	bmi.n	17d8c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   17dae:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   17db2:	428b      	cmp	r3, r1
   17db4:	d02c      	beq.n	17e10 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   17db6:	2800      	cmp	r0, #0
   17db8:	d036      	beq.n	17e28 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   17dba:	2a00      	cmp	r2, #0
   17dbc:	d0e9      	beq.n	17d92 <ctrl_tx_pause_enqueue+0x1a>
   17dbe:	4a22      	ldr	r2, [pc, #136]	; (17e48 <ctrl_tx_pause_enqueue+0xd0>)
   17dc0:	4922      	ldr	r1, [pc, #136]	; (17e4c <ctrl_tx_pause_enqueue+0xd4>)
   17dc2:	4823      	ldr	r0, [pc, #140]	; (17e50 <ctrl_tx_pause_enqueue+0xd8>)
   17dc4:	f640 236e 	movw	r3, #2670	; 0xa6e
   17dc8:	f00c ff18 	bl	24bfc <printk>
   17dcc:	4040      	eors	r0, r0
   17dce:	f380 8811 	msr	BASEPRI, r0
   17dd2:	f04f 0003 	mov.w	r0, #3
   17dd6:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   17dd8:	e7db      	b.n	17d92 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   17dda:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
   17dde:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   17de0:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   17de2:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			if (!pause) {
   17de6:	2a00      	cmp	r2, #0
   17de8:	d1db      	bne.n	17da2 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   17dea:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
	if (!tx->next) {
   17dee:	2b00      	cmp	r3, #0
   17df0:	d1d8      	bne.n	17da4 <ctrl_tx_pause_enqueue+0x2c>
   17df2:	e7f2      	b.n	17dda <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   17df4:	4a14      	ldr	r2, [pc, #80]	; (17e48 <ctrl_tx_pause_enqueue+0xd0>)
   17df6:	4915      	ldr	r1, [pc, #84]	; (17e4c <ctrl_tx_pause_enqueue+0xd4>)
   17df8:	4815      	ldr	r0, [pc, #84]	; (17e50 <ctrl_tx_pause_enqueue+0xd8>)
   17dfa:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   17dfe:	f00c fefd 	bl	24bfc <printk>
   17e02:	4040      	eors	r0, r0
   17e04:	f380 8811 	msr	BASEPRI, r0
   17e08:	f04f 0003 	mov.w	r0, #3
   17e0c:	df02      	svc	2
   17e0e:	e7c0      	b.n	17d92 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   17e10:	6819      	ldr	r1, [r3, #0]
   17e12:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   17e16:	2800      	cmp	r0, #0
   17e18:	d1cf      	bne.n	17dba <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   17e1a:	6819      	ldr	r1, [r3, #0]
   17e1c:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   17e1e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   17e20:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   17e22:	2a00      	cmp	r2, #0
   17e24:	d0e1      	beq.n	17dea <ctrl_tx_pause_enqueue+0x72>
   17e26:	e7bc      	b.n	17da2 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17e28:	7919      	ldrb	r1, [r3, #4]
   17e2a:	f001 0103 	and.w	r1, r1, #3
   17e2e:	2903      	cmp	r1, #3
   17e30:	d004      	beq.n	17e3c <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17e32:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
   17e36:	2a00      	cmp	r2, #0
   17e38:	d0ab      	beq.n	17d92 <ctrl_tx_pause_enqueue+0x1a>
   17e3a:	e7c0      	b.n	17dbe <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   17e3c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17e3e:	2903      	cmp	r1, #3
   17e40:	d0eb      	beq.n	17e1a <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17e42:	290a      	cmp	r1, #10
   17e44:	d1f5      	bne.n	17e32 <ctrl_tx_pause_enqueue+0xba>
   17e46:	e7e8      	b.n	17e1a <ctrl_tx_pause_enqueue+0xa2>
   17e48:	0002d7e8 	.word	0x0002d7e8
   17e4c:	0002d828 	.word	0x0002d828
   17e50:	0002d27c 	.word	0x0002d27c

00017e54 <tx_lll_flush>:
{
   17e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   17e58:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   17e5c:	4934      	ldr	r1, [pc, #208]	; (17f30 <tx_lll_flush+0xdc>)
{
   17e5e:	b083      	sub	sp, #12
   17e60:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   17e62:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   17e66:	4640      	mov	r0, r8
   17e68:	f7fb fae2 	bl	13430 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   17e6c:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	lll_conn_flush(handle, lll);
   17e70:	4629      	mov	r1, r5
   17e72:	f005 fd6f 	bl	1d954 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   17e76:	6b28      	ldr	r0, [r5, #48]	; 0x30
   17e78:	aa01      	add	r2, sp, #4
   17e7a:	4631      	mov	r1, r6
   17e7c:	f7fb fb18 	bl	134b0 <memq_dequeue>
	while (link) {
   17e80:	b328      	cbz	r0, 17ece <tx_lll_flush+0x7a>
   17e82:	4c2c      	ldr	r4, [pc, #176]	; (17f34 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   17e84:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17e88:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   17e8c:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   17e8e:	f894 c001 	ldrb.w	ip, [r4, #1]
   17e92:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   17e94:	1c53      	adds	r3, r2, #1
   17e96:	b2db      	uxtb	r3, r3
		last = 0U;
   17e98:	459c      	cmp	ip, r3
   17e9a:	bf08      	it	eq
   17e9c:	2300      	moveq	r3, #0
	if (last == first) {
   17e9e:	4299      	cmp	r1, r3
   17ea0:	f894 c000 	ldrb.w	ip, [r4]
   17ea4:	d033      	beq.n	17f0e <tx_lll_flush+0xba>
		lll_tx->node = tx;
   17ea6:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17ea8:	fb12 f20c 	smulbb	r2, r2, ip
   17eac:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   17eb0:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   17eb4:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   17eb6:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   17eba:	6002      	str	r2, [r0, #0]
		tx->next = link;
   17ebc:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   17ebe:	6b28      	ldr	r0, [r5, #48]	; 0x30
	*last = idx; /* Commit: Update write index */
   17ec0:	70e3      	strb	r3, [r4, #3]
   17ec2:	aa01      	add	r2, sp, #4
   17ec4:	4631      	mov	r1, r6
   17ec6:	f7fb faf3 	bl	134b0 <memq_dequeue>
	while (link) {
   17eca:	2800      	cmp	r0, #0
   17ecc:	d1de      	bne.n	17e8c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   17ece:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
	rx = (void *)&conn->llcp_terminate.node_rx;
   17ed2:	f508 748e 	add.w	r4, r8, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
   17ed6:	b150      	cbz	r0, 17eee <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   17ed8:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   17eda:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   17edc:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
	ull_rx_put(link, rx);
   17ee0:	f7ff fad4 	bl	1748c <ull_rx_put>
	ull_rx_sched();
   17ee4:	f7ff fae2 	bl	174ac <ull_rx_sched>
}
   17ee8:	b003      	add	sp, #12
   17eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   17eee:	4a12      	ldr	r2, [pc, #72]	; (17f38 <tx_lll_flush+0xe4>)
   17ef0:	4912      	ldr	r1, [pc, #72]	; (17f3c <tx_lll_flush+0xe8>)
   17ef2:	4813      	ldr	r0, [pc, #76]	; (17f40 <tx_lll_flush+0xec>)
   17ef4:	f640 13da 	movw	r3, #2522	; 0x9da
   17ef8:	f00c fe80 	bl	24bfc <printk>
   17efc:	4040      	eors	r0, r0
   17efe:	f380 8811 	msr	BASEPRI, r0
   17f02:	f04f 0003 	mov.w	r0, #3
   17f06:	df02      	svc	2
	link = rx->hdr.link;
   17f08:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
   17f0c:	e7e4      	b.n	17ed8 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   17f0e:	4a0a      	ldr	r2, [pc, #40]	; (17f38 <tx_lll_flush+0xe4>)
   17f10:	490c      	ldr	r1, [pc, #48]	; (17f44 <tx_lll_flush+0xf0>)
   17f12:	480b      	ldr	r0, [pc, #44]	; (17f40 <tx_lll_flush+0xec>)
   17f14:	f640 13c6 	movw	r3, #2502	; 0x9c6
   17f18:	f00c fe70 	bl	24bfc <printk>
   17f1c:	4040      	eors	r0, r0
   17f1e:	f380 8811 	msr	BASEPRI, r0
   17f22:	f04f 0003 	mov.w	r0, #3
   17f26:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   17f28:	2300      	movs	r3, #0
   17f2a:	801b      	strh	r3, [r3, #0]
   17f2c:	deff      	udf	#255	; 0xff
   17f2e:	bf00      	nop
   17f30:	20001eb0 	.word	0x20001eb0
   17f34:	20000658 	.word	0x20000658
   17f38:	0002d7e8 	.word	0x0002d7e8
   17f3c:	0002d838 	.word	0x0002d838
   17f40:	0002d27c 	.word	0x0002d27c
   17f44:	0002d830 	.word	0x0002d830

00017f48 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   17f48:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
   17f4c:	f012 0202 	ands.w	r2, r2, #2
   17f50:	d00a      	beq.n	17f68 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   17f52:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
   17f56:	b1d3      	cbz	r3, 17f8e <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   17f58:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
   17f5c:	681a      	ldr	r2, [r3, #0]
   17f5e:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   17f60:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   17f62:	680b      	ldr	r3, [r1, #0]
   17f64:	b1d3      	cbz	r3, 17f9c <ctrl_tx_sec_enqueue+0x54>
   17f66:	4770      	bx	lr
		if (conn->tx_head) {
   17f68:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   17f6c:	b1cb      	cbz	r3, 17fa2 <ctrl_tx_sec_enqueue+0x5a>
{
   17f6e:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   17f70:	f890 c0bc 	ldrb.w	ip, [r0, #188]	; 0xbc
   17f74:	f890 e0bb 	ldrb.w	lr, [r0, #187]	; 0xbb
   17f78:	45e6      	cmp	lr, ip
   17f7a:	d004      	beq.n	17f86 <ctrl_tx_sec_enqueue+0x3e>
   17f7c:	f890 c0bd 	ldrb.w	ip, [r0, #189]	; 0xbd
   17f80:	f1bc 0f03 	cmp.w	ip, #3
   17f84:	d010      	beq.n	17fa8 <ctrl_tx_sec_enqueue+0x60>
}
   17f86:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   17f8a:	f7ff bef5 	b.w	17d78 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   17f8e:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   17f92:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   17f94:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
		if (!tx->next) {
   17f98:	2b00      	cmp	r3, #0
   17f9a:	d1e4      	bne.n	17f66 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   17f9c:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
   17fa0:	4770      	bx	lr
	bool pause = false;
   17fa2:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   17fa4:	f7ff bee8 	b.w	17d78 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17fa8:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   17fac:	f00c 0c03 	and.w	ip, ip, #3
   17fb0:	f1bc 0f03 	cmp.w	ip, #3
   17fb4:	d1e7      	bne.n	17f86 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   17fb6:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17fb8:	2a03      	cmp	r2, #3
   17fba:	d005      	beq.n	17fc8 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   17fbc:	f1a2 020a 	sub.w	r2, r2, #10
   17fc0:	fab2 f282 	clz	r2, r2
   17fc4:	0952      	lsrs	r2, r2, #5
   17fc6:	e7de      	b.n	17f86 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   17fc8:	2201      	movs	r2, #1
   17fca:	e7dc      	b.n	17f86 <ctrl_tx_sec_enqueue+0x3e>

00017fcc <ticker_stop_op_cb>:
{
   17fcc:	b510      	push	{r4, lr}
   17fce:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17fd0:	b9b0      	cbnz	r0, 18000 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   17fd2:	4b12      	ldr	r3, [pc, #72]	; (1801c <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   17fd4:	2200      	movs	r2, #0
   17fd6:	2101      	movs	r1, #1
   17fd8:	2002      	movs	r0, #2
	mfy.param = param;
   17fda:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   17fdc:	f7fb faca 	bl	13574 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17fe0:	b900      	cbnz	r0, 17fe4 <ticker_stop_op_cb+0x18>
}
   17fe2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   17fe4:	4a0e      	ldr	r2, [pc, #56]	; (18020 <ticker_stop_op_cb+0x54>)
   17fe6:	490f      	ldr	r1, [pc, #60]	; (18024 <ticker_stop_op_cb+0x58>)
   17fe8:	480f      	ldr	r0, [pc, #60]	; (18028 <ticker_stop_op_cb+0x5c>)
   17fea:	f44f 6318 	mov.w	r3, #2432	; 0x980
   17fee:	f00c fe05 	bl	24bfc <printk>
   17ff2:	4040      	eors	r0, r0
   17ff4:	f380 8811 	msr	BASEPRI, r0
   17ff8:	f04f 0003 	mov.w	r0, #3
   17ffc:	df02      	svc	2
}
   17ffe:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18000:	4a07      	ldr	r2, [pc, #28]	; (18020 <ticker_stop_op_cb+0x54>)
   18002:	490a      	ldr	r1, [pc, #40]	; (1802c <ticker_stop_op_cb+0x60>)
   18004:	4808      	ldr	r0, [pc, #32]	; (18028 <ticker_stop_op_cb+0x5c>)
   18006:	f640 137a 	movw	r3, #2426	; 0x97a
   1800a:	f00c fdf7 	bl	24bfc <printk>
   1800e:	4040      	eors	r0, r0
   18010:	f380 8811 	msr	BASEPRI, r0
   18014:	f04f 0003 	mov.w	r0, #3
   18018:	df02      	svc	2
   1801a:	e7da      	b.n	17fd2 <ticker_stop_op_cb+0x6>
   1801c:	200006f0 	.word	0x200006f0
   18020:	0002d7e8 	.word	0x0002d7e8
   18024:	0002d6d0 	.word	0x0002d6d0
   18028:	0002d27c 	.word	0x0002d27c
   1802c:	0002d848 	.word	0x0002d848

00018030 <disabled_cb>:
{
   18030:	b508      	push	{r3, lr}
	mfy.param = param;
   18032:	4b0b      	ldr	r3, [pc, #44]	; (18060 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   18034:	2200      	movs	r2, #0
	mfy.param = param;
   18036:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   18038:	4611      	mov	r1, r2
   1803a:	2001      	movs	r0, #1
   1803c:	f7fb fa9a 	bl	13574 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18040:	b900      	cbnz	r0, 18044 <disabled_cb+0x14>
}
   18042:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   18044:	4a07      	ldr	r2, [pc, #28]	; (18064 <disabled_cb+0x34>)
   18046:	4908      	ldr	r1, [pc, #32]	; (18068 <disabled_cb+0x38>)
   18048:	4808      	ldr	r0, [pc, #32]	; (1806c <disabled_cb+0x3c>)
   1804a:	f640 13ac 	movw	r3, #2476	; 0x9ac
   1804e:	f00c fdd5 	bl	24bfc <printk>
   18052:	4040      	eors	r0, r0
   18054:	f380 8811 	msr	BASEPRI, r0
   18058:	f04f 0003 	mov.w	r0, #3
   1805c:	df02      	svc	2
}
   1805e:	bd08      	pop	{r3, pc}
   18060:	200006c0 	.word	0x200006c0
   18064:	0002d7e8 	.word	0x0002d7e8
   18068:	0002d6d0 	.word	0x0002d6d0
   1806c:	0002d27c 	.word	0x0002d27c

00018070 <conn_disable>:
{
   18070:	b538      	push	{r3, r4, r5, lr}
   18072:	4604      	mov	r4, r0
	return hdr->ref;
   18074:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   18078:	b353      	cbz	r3, 180d0 <conn_disable+0x60>
		mfy.param = &conn->lll;
   1807a:	4d17      	ldr	r5, [pc, #92]	; (180d8 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1807c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   1807e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   18080:	b16b      	cbz	r3, 1809e <conn_disable+0x2e>
   18082:	4a16      	ldr	r2, [pc, #88]	; (180dc <conn_disable+0x6c>)
   18084:	4916      	ldr	r1, [pc, #88]	; (180e0 <conn_disable+0x70>)
   18086:	4817      	ldr	r0, [pc, #92]	; (180e4 <conn_disable+0x74>)
   18088:	f640 1395 	movw	r3, #2453	; 0x995
   1808c:	f00c fdb6 	bl	24bfc <printk>
   18090:	4040      	eors	r0, r0
   18092:	f380 8811 	msr	BASEPRI, r0
   18096:	f04f 0003 	mov.w	r0, #3
   1809a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1809c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1809e:	4912      	ldr	r1, [pc, #72]	; (180e8 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   180a0:	4b0d      	ldr	r3, [pc, #52]	; (180d8 <conn_disable+0x68>)
   180a2:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   180a4:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   180a8:	4611      	mov	r1, r2
   180aa:	2001      	movs	r0, #1
   180ac:	f7fb fa62 	bl	13574 <mayfly_enqueue>
		LL_ASSERT(!ret);
   180b0:	b900      	cbnz	r0, 180b4 <conn_disable+0x44>
}
   180b2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   180b4:	4a09      	ldr	r2, [pc, #36]	; (180dc <conn_disable+0x6c>)
   180b6:	490d      	ldr	r1, [pc, #52]	; (180ec <conn_disable+0x7c>)
   180b8:	480a      	ldr	r0, [pc, #40]	; (180e4 <conn_disable+0x74>)
   180ba:	f640 139c 	movw	r3, #2460	; 0x99c
   180be:	f00c fd9d 	bl	24bfc <printk>
   180c2:	4040      	eors	r0, r0
   180c4:	f380 8811 	msr	BASEPRI, r0
   180c8:	f04f 0003 	mov.w	r0, #3
   180cc:	df02      	svc	2
}
   180ce:	bd38      	pop	{r3, r4, r5, pc}
   180d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   180d4:	f7ff bfac 	b.w	18030 <disabled_cb>
   180d8:	200006e0 	.word	0x200006e0
   180dc:	0002d7e8 	.word	0x0002d7e8
   180e0:	0002d854 	.word	0x0002d854
   180e4:	0002d27c 	.word	0x0002d27c
   180e8:	00018031 	.word	0x00018031
   180ec:	0002d6d0 	.word	0x0002d6d0

000180f0 <conn_setup_adv_scan_disabled_cb>:
{
   180f0:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   180f2:	6883      	ldr	r3, [r0, #8]
   180f4:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   180f6:	7f53      	ldrb	r3, [r2, #29]
   180f8:	09db      	lsrs	r3, r3, #7
   180fa:	d105      	bne.n	18108 <conn_setup_adv_scan_disabled_cb+0x18>
		ull_central_setup(rx, ftr, lll);
   180fc:	4601      	mov	r1, r0
}
   180fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_central_setup(rx, ftr, lll);
   18102:	3108      	adds	r1, #8
   18104:	f7eb bd00 	b.w	3b08 <ull_central_setup>
		LL_ASSERT(0);
   18108:	4a06      	ldr	r2, [pc, #24]	; (18124 <conn_setup_adv_scan_disabled_cb+0x34>)
   1810a:	4907      	ldr	r1, [pc, #28]	; (18128 <conn_setup_adv_scan_disabled_cb+0x38>)
   1810c:	4807      	ldr	r0, [pc, #28]	; (1812c <conn_setup_adv_scan_disabled_cb+0x3c>)
   1810e:	f640 03d5 	movw	r3, #2261	; 0x8d5
   18112:	f00c fd73 	bl	24bfc <printk>
   18116:	4040      	eors	r0, r0
   18118:	f380 8811 	msr	BASEPRI, r0
   1811c:	f04f 0003 	mov.w	r0, #3
   18120:	df02      	svc	2
}
   18122:	bd08      	pop	{r3, pc}
   18124:	0002d7e8 	.word	0x0002d7e8
   18128:	0002d314 	.word	0x0002d314
   1812c:	0002d27c 	.word	0x0002d27c

00018130 <ticker_start_conn_op_cb>:
{
   18130:	b510      	push	{r4, lr}
   18132:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18134:	b990      	cbnz	r0, 1815c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   18136:	4620      	mov	r0, r4
   18138:	f7ff f8de 	bl	172f8 <ull_update_unmark>
	LL_ASSERT(p == param);
   1813c:	4284      	cmp	r4, r0
   1813e:	d00c      	beq.n	1815a <ticker_start_conn_op_cb+0x2a>
   18140:	4a0d      	ldr	r2, [pc, #52]	; (18178 <ticker_start_conn_op_cb+0x48>)
   18142:	490e      	ldr	r1, [pc, #56]	; (1817c <ticker_start_conn_op_cb+0x4c>)
   18144:	480e      	ldr	r0, [pc, #56]	; (18180 <ticker_start_conn_op_cb+0x50>)
   18146:	f640 03b7 	movw	r3, #2231	; 0x8b7
   1814a:	f00c fd57 	bl	24bfc <printk>
   1814e:	4040      	eors	r0, r0
   18150:	f380 8811 	msr	BASEPRI, r0
   18154:	f04f 0003 	mov.w	r0, #3
   18158:	df02      	svc	2
}
   1815a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1815c:	4a06      	ldr	r2, [pc, #24]	; (18178 <ticker_start_conn_op_cb+0x48>)
   1815e:	4909      	ldr	r1, [pc, #36]	; (18184 <ticker_start_conn_op_cb+0x54>)
   18160:	4807      	ldr	r0, [pc, #28]	; (18180 <ticker_start_conn_op_cb+0x50>)
   18162:	f640 03b4 	movw	r3, #2228	; 0x8b4
   18166:	f00c fd49 	bl	24bfc <printk>
   1816a:	4040      	eors	r0, r0
   1816c:	f380 8811 	msr	BASEPRI, r0
   18170:	f04f 0003 	mov.w	r0, #3
   18174:	df02      	svc	2
   18176:	e7de      	b.n	18136 <ticker_start_conn_op_cb+0x6>
   18178:	0002d7e8 	.word	0x0002d7e8
   1817c:	0002d868 	.word	0x0002d868
   18180:	0002d27c 	.word	0x0002d27c
   18184:	0002d848 	.word	0x0002d848

00018188 <ticker_stop_conn_op_cb>:
{
   18188:	b510      	push	{r4, lr}
   1818a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1818c:	b990      	cbnz	r0, 181b4 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   1818e:	4620      	mov	r0, r4
   18190:	f7ff f8a8 	bl	172e4 <ull_update_mark>
	LL_ASSERT(p == param);
   18194:	4284      	cmp	r4, r0
   18196:	d00c      	beq.n	181b2 <ticker_stop_conn_op_cb+0x2a>
   18198:	4a0d      	ldr	r2, [pc, #52]	; (181d0 <ticker_stop_conn_op_cb+0x48>)
   1819a:	490e      	ldr	r1, [pc, #56]	; (181d4 <ticker_stop_conn_op_cb+0x4c>)
   1819c:	480e      	ldr	r0, [pc, #56]	; (181d8 <ticker_stop_conn_op_cb+0x50>)
   1819e:	f640 03ad 	movw	r3, #2221	; 0x8ad
   181a2:	f00c fd2b 	bl	24bfc <printk>
   181a6:	4040      	eors	r0, r0
   181a8:	f380 8811 	msr	BASEPRI, r0
   181ac:	f04f 0003 	mov.w	r0, #3
   181b0:	df02      	svc	2
}
   181b2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   181b4:	4a06      	ldr	r2, [pc, #24]	; (181d0 <ticker_stop_conn_op_cb+0x48>)
   181b6:	4909      	ldr	r1, [pc, #36]	; (181dc <ticker_stop_conn_op_cb+0x54>)
   181b8:	4807      	ldr	r0, [pc, #28]	; (181d8 <ticker_stop_conn_op_cb+0x50>)
   181ba:	f640 03aa 	movw	r3, #2218	; 0x8aa
   181be:	f00c fd1d 	bl	24bfc <printk>
   181c2:	4040      	eors	r0, r0
   181c4:	f380 8811 	msr	BASEPRI, r0
   181c8:	f04f 0003 	mov.w	r0, #3
   181cc:	df02      	svc	2
   181ce:	e7de      	b.n	1818e <ticker_stop_conn_op_cb+0x6>
   181d0:	0002d7e8 	.word	0x0002d7e8
   181d4:	0002d868 	.word	0x0002d868
   181d8:	0002d27c 	.word	0x0002d27c
   181dc:	0002d848 	.word	0x0002d848

000181e0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   181e0:	b900      	cbnz	r0, 181e4 <ticker_update_conn_op_cb+0x4>
   181e2:	4770      	bx	lr
{
   181e4:	b510      	push	{r4, lr}
   181e6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   181e8:	f7ff f892 	bl	17310 <ull_update_mark_get>
   181ec:	4284      	cmp	r4, r0
   181ee:	d010      	beq.n	18212 <ticker_update_conn_op_cb+0x32>
   181f0:	f7ff f872 	bl	172d8 <ull_disable_mark_get>
   181f4:	4284      	cmp	r4, r0
   181f6:	d00c      	beq.n	18212 <ticker_update_conn_op_cb+0x32>
   181f8:	4a06      	ldr	r2, [pc, #24]	; (18214 <ticker_update_conn_op_cb+0x34>)
   181fa:	4907      	ldr	r1, [pc, #28]	; (18218 <ticker_update_conn_op_cb+0x38>)
   181fc:	4807      	ldr	r0, [pc, #28]	; (1821c <ticker_update_conn_op_cb+0x3c>)
   181fe:	f640 03a1 	movw	r3, #2209	; 0x8a1
   18202:	f00c fcfb 	bl	24bfc <printk>
   18206:	4040      	eors	r0, r0
   18208:	f380 8811 	msr	BASEPRI, r0
   1820c:	f04f 0003 	mov.w	r0, #3
   18210:	df02      	svc	2
}
   18212:	bd10      	pop	{r4, pc}
   18214:	0002d7e8 	.word	0x0002d7e8
   18218:	0002d874 	.word	0x0002d874
   1821c:	0002d27c 	.word	0x0002d27c

00018220 <tx_ull_dequeue>:
{
   18220:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   18222:	e9d0 2467 	ldrd	r2, r4, [r0, #412]	; 0x19c
{
   18226:	4603      	mov	r3, r0
   18228:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1822a:	b164      	cbz	r4, 18246 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   1822c:	4294      	cmp	r4, r2
   1822e:	d021      	beq.n	18274 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   18230:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
		if (conn->tx_head == conn->tx_data) {
   18234:	428a      	cmp	r2, r1
   18236:	d00b      	beq.n	18250 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   18238:	6811      	ldr	r1, [r2, #0]
   1823a:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
		tx->next = NULL;
   1823e:	2200      	movs	r2, #0
}
   18240:	bc10      	pop	{r4}
		tx->next = NULL;
   18242:	6002      	str	r2, [r0, #0]
}
   18244:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   18246:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
   1824a:	4291      	cmp	r1, r2
   1824c:	d104      	bne.n	18258 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   1824e:	b18a      	cbz	r2, 18274 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   18250:	6809      	ldr	r1, [r1, #0]
   18252:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
   18256:	e7ef      	b.n	18238 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18258:	7911      	ldrb	r1, [r2, #4]
   1825a:	f001 0103 	and.w	r1, r1, #3
   1825e:	2903      	cmp	r1, #3
   18260:	d013      	beq.n	1828a <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   18262:	6812      	ldr	r2, [r2, #0]
   18264:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			conn->tx_ctrl = NULL;
   18268:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   1826a:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
}
   1826e:	bc10      	pop	{r4}
		tx->next = tx;
   18270:	6000      	str	r0, [r0, #0]
}
   18272:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   18274:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
		conn->tx_head = conn->tx_head->next;
   18278:	6812      	ldr	r2, [r2, #0]
   1827a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1827e:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   18280:	bf18      	it	ne
   18282:	f8c3 21a0 	strne.w	r2, [r3, #416]	; 0x1a0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   18286:	d1f2      	bne.n	1826e <tx_ull_dequeue+0x4e>
   18288:	e7ee      	b.n	18268 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   1828a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1828c:	2903      	cmp	r1, #3
   1828e:	d0d3      	beq.n	18238 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   18290:	290a      	cmp	r1, #10
   18292:	d1e6      	bne.n	18262 <tx_ull_dequeue+0x42>
   18294:	e7d0      	b.n	18238 <tx_ull_dequeue+0x18>
   18296:	bf00      	nop

00018298 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   18298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1829a:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   1829c:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
   182a0:	0787      	lsls	r7, r0, #30
{
   182a2:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   182a4:	d433      	bmi.n	1830e <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   182a6:	482e      	ldr	r0, [pc, #184]	; (18360 <reject_ext_ind_send+0xc8>)
   182a8:	4617      	mov	r7, r2
   182aa:	461e      	mov	r6, r3
   182ac:	f7fb f88a 	bl	133c4 <mem_acquire>
	if (!tx) {
   182b0:	2800      	cmp	r0, #0
   182b2:	d038      	beq.n	18326 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   182b4:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   182b8:	f043 0302 	orr.w	r3, r3, #2
   182bc:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   182c0:	2303      	movs	r3, #3
   182c2:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   182c4:	2211      	movs	r2, #17
	    conn->tx_head &&
   182c6:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   182ca:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   182cc:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   182ce:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   182d2:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   182d4:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   182d8:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   182da:	7102      	strb	r2, [r0, #4]
	if (
   182dc:	b1db      	cbz	r3, 18316 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   182de:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   182e2:	0796      	lsls	r6, r2, #30
   182e4:	d417      	bmi.n	18316 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   182e6:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   182ea:	07d2      	lsls	r2, r2, #31
   182ec:	d413      	bmi.n	18316 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   182ee:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   182f2:	4293      	cmp	r3, r2
   182f4:	d022      	beq.n	1833c <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   182f6:	b1c9      	cbz	r1, 1832c <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   182f8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   182fc:	681a      	ldr	r2, [r3, #0]
   182fe:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18300:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   18302:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   18304:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   18308:	b90b      	cbnz	r3, 1830e <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   1830a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1830e:	2301      	movs	r3, #1
   18310:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   18312:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   18314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   18316:	2900      	cmp	r1, #0
   18318:	d1ee      	bne.n	182f8 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   1831a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1831c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   18320:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   18324:	e7f0      	b.n	18308 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   18326:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1832c:	791a      	ldrb	r2, [r3, #4]
   1832e:	f002 0203 	and.w	r2, r2, #3
   18332:	2a03      	cmp	r2, #3
   18334:	d00e      	beq.n	18354 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   18336:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   1833a:	e7df      	b.n	182fc <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   1833c:	681a      	ldr	r2, [r3, #0]
   1833e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   18342:	2900      	cmp	r1, #0
   18344:	d1d8      	bne.n	182f8 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   18346:	681a      	ldr	r2, [r3, #0]
   18348:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1834a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1834c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1834e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   18352:	e7d9      	b.n	18308 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   18354:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18356:	2a03      	cmp	r2, #3
   18358:	d0f5      	beq.n	18346 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1835a:	2a0a      	cmp	r2, #10
   1835c:	d1eb      	bne.n	18336 <reject_ext_ind_send+0x9e>
   1835e:	e7f2      	b.n	18346 <reject_ext_ind_send+0xae>
   18360:	20003590 	.word	0x20003590

00018364 <event_len_prep>:
{
   18364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   18366:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   1836a:	f003 0207 	and.w	r2, r3, #7
{
   1836e:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   18370:	2a06      	cmp	r2, #6
   18372:	f200 80d4 	bhi.w	1851e <event_len_prep+0x1ba>
   18376:	e8df f002 	tbb	[pc, r2]
   1837a:	4704      	.short	0x4704
   1837c:	48484747 	.word	0x48484747
   18380:	47          	.byte	0x47
   18381:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18382:	486e      	ldr	r0, [pc, #440]	; (1853c <event_len_prep+0x1d8>)
   18384:	f7fb f81e 	bl	133c4 <mem_acquire>
		if (!tx) {
   18388:	2800      	cmp	r0, #0
   1838a:	d03d      	beq.n	18408 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1838c:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   18390:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
   18394:	f8b4 518e 	ldrh.w	r5, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   18398:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1839c:	2301      	movs	r3, #1
   1839e:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   183a2:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   183a6:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   183aa:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   183ac:	72c3      	strb	r3, [r0, #11]
   183ae:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   183b0:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   183b2:	2309      	movs	r3, #9
   183b4:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   183b6:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   183b8:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   183ba:	2214      	movs	r2, #20
	    conn->tx_head &&
   183bc:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   183c0:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   183c2:	2100      	movs	r1, #0
   183c4:	221b      	movs	r2, #27
   183c6:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   183c8:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   183cc:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   183ce:	7902      	ldrb	r2, [r0, #4]
   183d0:	f042 0203 	orr.w	r2, r2, #3
   183d4:	7102      	strb	r2, [r0, #4]
	if (
   183d6:	b13b      	cbz	r3, 183e8 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   183d8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   183dc:	0795      	lsls	r5, r2, #30
   183de:	d403      	bmi.n	183e8 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   183e0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   183e4:	07d2      	lsls	r2, r2, #31
   183e6:	d573      	bpl.n	184d0 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   183e8:	2900      	cmp	r1, #0
   183ea:	d07f      	beq.n	184ec <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   183ec:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   183f0:	681a      	ldr	r2, [r3, #0]
   183f2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   183f4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   183f6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   183f8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   183fc:	2b00      	cmp	r3, #0
   183fe:	d056      	beq.n	184ae <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   18400:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   18404:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
   18408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1840a:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1840e:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
		lll->max_rx_time = conn->llcp_length.rx_time;
   18412:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
   18416:	f8b0 718a 	ldrh.w	r7, [r0, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
   1841a:	f8b0 618e 	ldrh.w	r6, [r0, #398]	; 0x18e
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1841e:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   18422:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   18424:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   18428:	d024      	beq.n	18474 <event_len_prep+0x110>
			conn->llcp_length.state =
   1842a:	2206      	movs	r2, #6
   1842c:	f362 0302 	bfi	r3, r2, #0, #3
   18430:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		rx = conn->llcp_rx;
   18434:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
   18438:	b335      	cbz	r5, 18488 <event_len_prep+0x124>
   1843a:	6828      	ldr	r0, [r5, #0]
   1843c:	b320      	cbz	r0, 18488 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1843e:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   18440:	6842      	ldr	r2, [r0, #4]
   18442:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   18446:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   1844a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1844c:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   1844e:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   18450:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   18452:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18454:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   18456:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   18458:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1845a:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1845e:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   18460:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   18462:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18464:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   18466:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   18468:	f7fe fe96 	bl	17198 <ll_rx_put>
}
   1846c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   18470:	f7fe be9c 	b.w	171ac <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   18474:	f8b0 2190 	ldrh.w	r2, [r0, #400]	; 0x190
   18478:	b9e2      	cbnz	r2, 184b4 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   1847a:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
				conn->procedure_expire = 0U;
   1847e:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
				conn->llcp_length.ack = conn->llcp_length.req;
   18482:	f880 3185 	strb.w	r3, [r0, #389]	; 0x185
				conn->procedure_expire = 0U;
   18486:	e7d5      	b.n	18434 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   18488:	4a2d      	ldr	r2, [pc, #180]	; (18540 <event_len_prep+0x1dc>)
   1848a:	492e      	ldr	r1, [pc, #184]	; (18544 <event_len_prep+0x1e0>)
   1848c:	482e      	ldr	r0, [pc, #184]	; (18548 <event_len_prep+0x1e4>)
   1848e:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   18492:	f00c fbb3 	bl	24bfc <printk>
   18496:	4040      	eors	r0, r0
   18498:	f380 8811 	msr	BASEPRI, r0
   1849c:	f04f 0003 	mov.w	r0, #3
   184a0:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   184a2:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   184a4:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   184a8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   184ac:	e7c7      	b.n	1843e <event_len_prep+0xda>
		conn->tx_data_last = tx;
   184ae:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
   184b2:	e7a5      	b.n	18400 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   184b4:	f8a0 218a 	strh.w	r2, [r0, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   184b8:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   184ba:	f362 0302 	bfi	r3, r2, #0, #3
   184be:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
				conn->llcp_length.tx_time =
   184c2:	f8b0 3192 	ldrh.w	r3, [r0, #402]	; 0x192
				conn->llcp_length.cache.tx_octets = 0;
   184c6:	f8a0 2190 	strh.w	r2, [r0, #400]	; 0x190
				conn->llcp_length.tx_time =
   184ca:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   184ce:	e7b1      	b.n	18434 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   184d0:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   184d4:	4293      	cmp	r3, r2
   184d6:	d00f      	beq.n	184f8 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   184d8:	2900      	cmp	r1, #0
   184da:	d187      	bne.n	183ec <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   184dc:	791a      	ldrb	r2, [r3, #4]
   184de:	f002 0203 	and.w	r2, r2, #3
   184e2:	2a03      	cmp	r2, #3
   184e4:	d015      	beq.n	18512 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   184e6:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   184ea:	e781      	b.n	183f0 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   184ec:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   184ee:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   184f2:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   184f6:	e781      	b.n	183fc <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   184f8:	681a      	ldr	r2, [r3, #0]
   184fa:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   184fe:	2900      	cmp	r1, #0
   18500:	f47f af74 	bne.w	183ec <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   18504:	681a      	ldr	r2, [r3, #0]
   18506:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   18508:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1850a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1850c:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   18510:	e774      	b.n	183fc <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   18512:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18514:	2a03      	cmp	r2, #3
   18516:	d0f5      	beq.n	18504 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   18518:	2a0a      	cmp	r2, #10
   1851a:	d1e4      	bne.n	184e6 <event_len_prep+0x182>
   1851c:	e7f2      	b.n	18504 <event_len_prep+0x1a0>
		LL_ASSERT(0);
   1851e:	4a08      	ldr	r2, [pc, #32]	; (18540 <event_len_prep+0x1dc>)
   18520:	490a      	ldr	r1, [pc, #40]	; (1854c <event_len_prep+0x1e8>)
   18522:	4809      	ldr	r0, [pc, #36]	; (18548 <event_len_prep+0x1e4>)
   18524:	f241 03ea 	movw	r3, #4330	; 0x10ea
   18528:	f00c fb68 	bl	24bfc <printk>
   1852c:	4040      	eors	r0, r0
   1852e:	f380 8811 	msr	BASEPRI, r0
   18532:	f04f 0003 	mov.w	r0, #3
   18536:	df02      	svc	2
}
   18538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1853a:	bf00      	nop
   1853c:	20003590 	.word	0x20003590
   18540:	0002d7e8 	.word	0x0002d7e8
   18544:	0002d8c8 	.word	0x0002d8c8
   18548:	0002d27c 	.word	0x0002d27c
   1854c:	0002d314 	.word	0x0002d314

00018550 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   18550:	4801      	ldr	r0, [pc, #4]	; (18558 <ll_conn_acquire+0x8>)
   18552:	f7fa bf37 	b.w	133c4 <mem_acquire>
   18556:	bf00      	nop
   18558:	200034f8 	.word	0x200034f8

0001855c <ll_conn_release>:
	mem_release(conn, &conn_free);
   1855c:	4901      	ldr	r1, [pc, #4]	; (18564 <ll_conn_release+0x8>)
   1855e:	f7fa bf4b 	b.w	133f8 <mem_release>
   18562:	bf00      	nop
   18564:	200034f8 	.word	0x200034f8

00018568 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   18568:	4902      	ldr	r1, [pc, #8]	; (18574 <ll_conn_handle_get+0xc>)
   1856a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   1856e:	f7fa bf5f 	b.w	13430 <mem_index_get>
   18572:	bf00      	nop
   18574:	20001eb0 	.word	0x20001eb0

00018578 <ll_conn_get>:
{
   18578:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1857a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1857e:	4801      	ldr	r0, [pc, #4]	; (18584 <ll_conn_get+0xc>)
   18580:	f7fa bf52 	b.w	13428 <mem_get>
   18584:	20001eb0 	.word	0x20001eb0

00018588 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18588:	b958      	cbnz	r0, 185a2 <ll_connected_get+0x1a>
{
   1858a:	b508      	push	{r3, lr}
   1858c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1858e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18592:	4805      	ldr	r0, [pc, #20]	; (185a8 <ll_connected_get+0x20>)
   18594:	f7fa ff48 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   18598:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1859a:	b903      	cbnz	r3, 1859e <ll_connected_get+0x16>
}
   1859c:	bd08      	pop	{r3, pc}
		return NULL;
   1859e:	2000      	movs	r0, #0
}
   185a0:	bd08      	pop	{r3, pc}
		return NULL;
   185a2:	2000      	movs	r0, #0
}
   185a4:	4770      	bx	lr
   185a6:	bf00      	nop
   185a8:	20001eb0 	.word	0x20001eb0

000185ac <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   185ac:	4801      	ldr	r0, [pc, #4]	; (185b4 <ll_tx_mem_acquire+0x8>)
   185ae:	f7fa bf09 	b.w	133c4 <mem_acquire>
   185b2:	bf00      	nop
   185b4:	20003520 	.word	0x20003520

000185b8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   185b8:	4901      	ldr	r1, [pc, #4]	; (185c0 <ll_tx_mem_release+0x8>)
   185ba:	f7fa bf1d 	b.w	133f8 <mem_release>
   185be:	bf00      	nop
   185c0:	20003520 	.word	0x20003520

000185c4 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   185c4:	2800      	cmp	r0, #0
   185c6:	d136      	bne.n	18636 <ll_tx_mem_enqueue+0x72>
{
   185c8:	b570      	push	{r4, r5, r6, lr}
   185ca:	4602      	mov	r2, r0
   185cc:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   185ce:	481b      	ldr	r0, [pc, #108]	; (1863c <ll_tx_mem_enqueue+0x78>)
   185d0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   185d4:	f7fa ff28 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   185d8:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   185da:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   185dc:	bb2e      	cbnz	r6, 1862a <ll_tx_mem_enqueue+0x66>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   185de:	4c18      	ldr	r4, [pc, #96]	; (18640 <ll_tx_mem_enqueue+0x7c>)
   185e0:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   185e4:	7862      	ldrb	r2, [r4, #1]
   185e6:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   185e8:	f10c 0301 	add.w	r3, ip, #1
   185ec:	b2db      	uxtb	r3, r3
		last = 0U;
   185ee:	429a      	cmp	r2, r3
   185f0:	bf08      	it	eq
   185f2:	2300      	moveq	r3, #0
   185f4:	78a2      	ldrb	r2, [r4, #2]
	if (last == first) {
   185f6:	429a      	cmp	r2, r3
   185f8:	d01a      	beq.n	18630 <ll_tx_mem_enqueue+0x6c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   185fa:	fb1c fc00 	smulbb	ip, ip, r0
   185fe:	f104 0e04 	add.w	lr, r4, #4
	lll_tx->handle = handle;
   18602:	f82e 600c 	strh.w	r6, [lr, ip]
   18606:	44f4      	add	ip, lr
	lll_tx->node = tx;
   18608:	f8cc 5004 	str.w	r5, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1860c:	70e3      	strb	r3, [r4, #3]
   1860e:	780b      	ldrb	r3, [r1, #0]
	if (ull_ref_get(&conn->ull)) {
   18610:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   18614:	b903      	cbnz	r3, 18618 <ll_tx_mem_enqueue+0x54>
}
   18616:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   18618:	4b0a      	ldr	r3, [pc, #40]	; (18644 <ll_tx_mem_enqueue+0x80>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1861a:	4632      	mov	r2, r6
		mfy.param = conn;
   1861c:	6099      	str	r1, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1861e:	2003      	movs	r0, #3
   18620:	2101      	movs	r1, #1
   18622:	f7fa ffa7 	bl	13574 <mayfly_enqueue>
	return 0;
   18626:	4630      	mov	r0, r6
}
   18628:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1862a:	f06f 0015 	mvn.w	r0, #21
}
   1862e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   18630:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   18634:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   18636:	f06f 0015 	mvn.w	r0, #21
}
   1863a:	4770      	bx	lr
   1863c:	20001eb0 	.word	0x20001eb0
   18640:	2000069c 	.word	0x2000069c
   18644:	200006d0 	.word	0x200006d0

00018648 <ll_conn_update>:
{
   18648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1864c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   18650:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   18654:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   18658:	2800      	cmp	r0, #0
   1865a:	d151      	bne.n	18700 <ll_conn_update+0xb8>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1865c:	460c      	mov	r4, r1
   1865e:	4615      	mov	r5, r2
   18660:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18664:	4602      	mov	r2, r0
   18666:	483c      	ldr	r0, [pc, #240]	; (18758 <ll_conn_update+0x110>)
   18668:	461e      	mov	r6, r3
   1866a:	f7fa fedd 	bl	13428 <mem_get>
   1866e:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   18670:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   18672:	2800      	cmp	r0, #0
   18674:	d144      	bne.n	18700 <ll_conn_update+0xb8>
	if (!cmd) {
   18676:	bb1c      	cbnz	r4, 186c0 <ll_conn_update+0x78>
		if (!conn->llcp_conn_param.disabled &&
   18678:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
   1867c:	0699      	lsls	r1, r3, #26
   1867e:	d446      	bmi.n	1870e <ll_conn_update+0xc6>
		    (!conn->common.fex_valid ||
   18680:	f89c 30ba 	ldrb.w	r3, [ip, #186]	; 0xba
		if (!conn->llcp_conn_param.disabled &&
   18684:	07da      	lsls	r2, r3, #31
   18686:	d43e      	bmi.n	18706 <ll_conn_update+0xbe>
			if (conn->llcp_conn_param.req !=
   18688:	f89c 215c 	ldrb.w	r2, [ip, #348]	; 0x15c
   1868c:	f89c 315d 	ldrb.w	r3, [ip, #349]	; 0x15d
   18690:	4293      	cmp	r3, r2
   18692:	d132      	bne.n	186fa <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   18694:	f8bc 215e 	ldrh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   18698:	f8ac 6160 	strh.w	r6, [ip, #352]	; 0x160
			conn->llcp_conn_param.state = cmd;
   1869c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   186a0:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   186a2:	f042 0210 	orr.w	r2, r2, #16
   186a6:	f8ac 215e 	strh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.req++;
   186aa:	f88c 315c 	strb.w	r3, [ip, #348]	; 0x15c
			conn->llcp_conn_param.interval_max = interval_max;
   186ae:	f8ac 9162 	strh.w	r9, [ip, #354]	; 0x162
			conn->llcp_conn_param.latency = latency;
   186b2:	f8ac 8164 	strh.w	r8, [ip, #356]	; 0x164
			conn->llcp_conn_param.timeout = timeout;
   186b6:	f8ac 7166 	strh.w	r7, [ip, #358]	; 0x166
	return 0;
   186ba:	2000      	movs	r0, #0
}
   186bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   186c0:	3c01      	subs	r4, #1
		if (cmd) {
   186c2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   186c6:	d0df      	beq.n	18688 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   186c8:	f89c 215d 	ldrb.w	r2, [ip, #349]	; 0x15d
   186cc:	f89c 315c 	ldrb.w	r3, [ip, #348]	; 0x15c
   186d0:	429a      	cmp	r2, r3
   186d2:	d012      	beq.n	186fa <ll_conn_update+0xb2>
			    (conn->llcp_conn_param.state !=
   186d4:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
			     conn->llcp_conn_param.ack) ||
   186d8:	f003 020f 	and.w	r2, r3, #15
   186dc:	2a03      	cmp	r2, #3
   186de:	d10c      	bne.n	186fa <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   186e0:	f004 040f 	and.w	r4, r4, #15
   186e4:	f023 031f 	bic.w	r3, r3, #31
   186e8:	f044 0410 	orr.w	r4, r4, #16
   186ec:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   186ee:	f88c 515f 	strb.w	r5, [ip, #351]	; 0x15f
			conn->llcp_conn_param.state = cmd;
   186f2:	f88c 415e 	strb.w	r4, [ip, #350]	; 0x15e
}
   186f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   186fa:	200c      	movs	r0, #12
}
   186fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18700:	2002      	movs	r0, #2
}
   18702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   18706:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
		    (!conn->common.fex_valid ||
   1870a:	079b      	lsls	r3, r3, #30
   1870c:	d4bc      	bmi.n	18688 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1870e:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   18712:	2b00      	cmp	r3, #0
   18714:	db1e      	blt.n	18754 <ll_conn_update+0x10c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   18716:	f89c 20e4 	ldrb.w	r2, [ip, #228]	; 0xe4
   1871a:	f89c 30e5 	ldrb.w	r3, [ip, #229]	; 0xe5
   1871e:	4293      	cmp	r3, r2
   18720:	d1eb      	bne.n	186fa <ll_conn_update+0xb2>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18722:	f89c 20e6 	ldrb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.interval = interval_max;
   18726:	f8ac 90e8 	strh.w	r9, [ip, #232]	; 0xe8
		conn->llcp_cu.req++;
   1872a:	3301      	adds	r3, #1
   1872c:	f88c 30e4 	strb.w	r3, [ip, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18730:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   18734:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18736:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1873a:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1873c:	f88c 30f4 	strb.w	r3, [ip, #244]	; 0xf4
		conn->llcp_cu.latency = latency;
   18740:	f8ac 80ea 	strh.w	r8, [ip, #234]	; 0xea
		conn->llcp_cu.timeout = timeout;
   18744:	f8ac 70ec 	strh.w	r7, [ip, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18748:	f88c 20e6 	strb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   1874c:	f8cc 00f0 	str.w	r0, [ip, #240]	; 0xf0
}
   18750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18754:	201a      	movs	r0, #26
   18756:	e7d1      	b.n	186fc <ll_conn_update+0xb4>
   18758:	20001eb0 	.word	0x20001eb0

0001875c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1875c:	b9d0      	cbnz	r0, 18794 <ll_chm_get+0x38>
{
   1875e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18760:	4602      	mov	r2, r0
   18762:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18764:	480c      	ldr	r0, [pc, #48]	; (18798 <ll_chm_get+0x3c>)
   18766:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1876a:	f7fa fe5d 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   1876e:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18770:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   18772:	b96e      	cbnz	r6, 18790 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   18774:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   18778:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
   1877c:	2205      	movs	r2, #5
   1877e:	4639      	mov	r1, r7
   18780:	4628      	mov	r0, r5
   18782:	f00f ff18 	bl	285b6 <memcpy>
	} while (conn->chm_updated);
   18786:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
   1878a:	2800      	cmp	r0, #0
   1878c:	d1f4      	bne.n	18778 <ll_chm_get+0x1c>
}
   1878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18790:	2002      	movs	r0, #2
}
   18792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18794:	2002      	movs	r0, #2
}
   18796:	4770      	bx	lr
   18798:	20001eb0 	.word	0x20001eb0

0001879c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1879c:	2800      	cmp	r0, #0
   1879e:	d13a      	bne.n	18816 <ll_terminate_ind_send+0x7a>
{
   187a0:	b510      	push	{r4, lr}
   187a2:	4602      	mov	r2, r0
   187a4:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   187a6:	481d      	ldr	r0, [pc, #116]	; (1881c <ll_terminate_ind_send+0x80>)
   187a8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   187ac:	f7fa fe3c 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   187b0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   187b2:	bb73      	cbnz	r3, 18812 <ll_terminate_ind_send+0x76>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   187b4:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   187b8:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   187bc:	429a      	cmp	r2, r3
   187be:	d126      	bne.n	1880e <ll_terminate_ind_send+0x72>
	switch (reason) {
   187c0:	2c29      	cmp	r4, #41	; 0x29
   187c2:	d819      	bhi.n	187f8 <ll_terminate_ind_send+0x5c>
   187c4:	2c04      	cmp	r4, #4
   187c6:	d919      	bls.n	187fc <ll_terminate_ind_send+0x60>
   187c8:	1f62      	subs	r2, r4, #5
   187ca:	2a24      	cmp	r2, #36	; 0x24
   187cc:	d816      	bhi.n	187fc <ll_terminate_ind_send+0x60>
   187ce:	e8df f002 	tbb	[pc, r2]
   187d2:	1517      	.short	0x1517
   187d4:	15151515 	.word	0x15151515
   187d8:	15151515 	.word	0x15151515
   187dc:	15151515 	.word	0x15151515
   187e0:	15171717 	.word	0x15171717
   187e4:	17151515 	.word	0x17151515
   187e8:	15151515 	.word	0x15151515
   187ec:	15151515 	.word	0x15151515
   187f0:	15151515 	.word	0x15151515
   187f4:	1515      	.short	0x1515
   187f6:	17          	.byte	0x17
   187f7:	00          	.byte	0x00
   187f8:	2c3b      	cmp	r4, #59	; 0x3b
   187fa:	d001      	beq.n	18800 <ll_terminate_ind_send+0x64>
   187fc:	2012      	movs	r0, #18
}
   187fe:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   18800:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   18802:	f880 411a 	strb.w	r4, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   18806:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   1880a:	2000      	movs	r0, #0
}
   1880c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1880e:	200c      	movs	r0, #12
}
   18810:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18812:	2002      	movs	r0, #2
}
   18814:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18816:	2002      	movs	r0, #2
}
   18818:	4770      	bx	lr
   1881a:	bf00      	nop
   1881c:	20001eb0 	.word	0x20001eb0

00018820 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18820:	b9b0      	cbnz	r0, 18850 <ll_feature_req_send+0x30>
{
   18822:	b508      	push	{r3, lr}
   18824:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18826:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1882a:	480a      	ldr	r0, [pc, #40]	; (18854 <ll_feature_req_send+0x34>)
   1882c:	f7fa fdfc 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   18830:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   18832:	b95b      	cbnz	r3, 1884c <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   18834:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
   18838:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
   1883c:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
   1883e:	bf05      	ittet	eq
   18840:	3201      	addeq	r2, #1
   18842:	f880 20f8 	strbeq.w	r2, [r0, #248]	; 0xf8
		return BT_HCI_ERR_CMD_DISALLOWED;
   18846:	200c      	movne	r0, #12
	return 0;
   18848:	4618      	moveq	r0, r3
}
   1884a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1884c:	2002      	movs	r0, #2
}
   1884e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18850:	2002      	movs	r0, #2
}
   18852:	4770      	bx	lr
   18854:	20001eb0 	.word	0x20001eb0

00018858 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18858:	b9b0      	cbnz	r0, 18888 <ll_version_ind_send+0x30>
{
   1885a:	b508      	push	{r3, lr}
   1885c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1885e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18862:	480a      	ldr	r0, [pc, #40]	; (1888c <ll_version_ind_send+0x34>)
   18864:	f7fa fde0 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   18868:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1886a:	b95b      	cbnz	r3, 18884 <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1886c:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
   18870:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
   18874:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
   18876:	bf05      	ittet	eq
   18878:	3201      	addeq	r2, #1
   1887a:	f880 2110 	strbeq.w	r2, [r0, #272]	; 0x110
		return BT_HCI_ERR_CMD_DISALLOWED;
   1887e:	200c      	movne	r0, #12
	return 0;
   18880:	4618      	moveq	r0, r3
}
   18882:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18884:	2002      	movs	r0, #2
}
   18886:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18888:	2002      	movs	r0, #2
}
   1888a:	4770      	bx	lr
   1888c:	20001eb0 	.word	0x20001eb0

00018890 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18890:	2800      	cmp	r0, #0
   18892:	d143      	bne.n	1891c <ll_length_req_send+0x8c>
{
   18894:	b538      	push	{r3, r4, r5, lr}
   18896:	460d      	mov	r5, r1
   18898:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1889a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1889e:	4602      	mov	r2, r0
   188a0:	481f      	ldr	r0, [pc, #124]	; (18920 <ll_length_req_send+0x90>)
   188a2:	f7fa fdc1 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   188a6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   188a8:	bba3      	cbnz	r3, 18914 <ll_length_req_send+0x84>
	if (conn->llcp_length.disabled ||
   188aa:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   188ae:	071a      	lsls	r2, r3, #28
   188b0:	d42e      	bmi.n	18910 <ll_length_req_send+0x80>
	    (conn->common.fex_valid &&
   188b2:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
	if (conn->llcp_length.disabled ||
   188b6:	07d1      	lsls	r1, r2, #31
   188b8:	d503      	bpl.n	188c2 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   188ba:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
	    (conn->common.fex_valid &&
   188be:	0692      	lsls	r2, r2, #26
   188c0:	d526      	bpl.n	18910 <ll_length_req_send+0x80>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   188c2:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
   188c6:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
   188ca:	428a      	cmp	r2, r1
   188cc:	d011      	beq.n	188f2 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   188ce:	f003 0307 	and.w	r3, r3, #7
   188d2:	2b03      	cmp	r3, #3
   188d4:	d004      	beq.n	188e0 <ll_length_req_send+0x50>
   188d6:	3303      	adds	r3, #3
   188d8:	f003 0307 	and.w	r3, r3, #7
   188dc:	2b01      	cmp	r3, #1
   188de:	d81b      	bhi.n	18918 <ll_length_req_send+0x88>
			if (!conn->llcp_length.cache.tx_octets) {
   188e0:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
   188e4:	b9c3      	cbnz	r3, 18918 <ll_length_req_send+0x88>
				conn->llcp_length.cache.tx_octets = tx_octets;
   188e6:	f8a0 5190 	strh.w	r5, [r0, #400]	; 0x190
				conn->llcp_length.cache.tx_time = tx_time;
   188ea:	f8a0 4192 	strh.w	r4, [r0, #402]	; 0x192
				return 0;
   188ee:	4618      	mov	r0, r3
}
   188f0:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   188f2:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_octets = tx_octets;
   188f6:	f8a0 518a 	strh.w	r5, [r0, #394]	; 0x18a
	conn->llcp_length.req++;
   188fa:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   188fc:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   18900:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18904:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_time = tx_time;
   18908:	f8a0 418e 	strh.w	r4, [r0, #398]	; 0x18e
	return 0;
   1890c:	2000      	movs	r0, #0
}
   1890e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18910:	201a      	movs	r0, #26
}
   18912:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18914:	2002      	movs	r0, #2
}
   18916:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   18918:	200c      	movs	r0, #12
}
   1891a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1891c:	2002      	movs	r0, #2
}
   1891e:	4770      	bx	lr
   18920:	20001eb0 	.word	0x20001eb0

00018924 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   18924:	4a03      	ldr	r2, [pc, #12]	; (18934 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   18926:	4b04      	ldr	r3, [pc, #16]	; (18938 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   18928:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1892a:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   1892c:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1892e:	800b      	strh	r3, [r1, #0]
}
   18930:	4770      	bx	lr
   18932:	bf00      	nop
   18934:	20004816 	.word	0x20004816
   18938:	20004818 	.word	0x20004818

0001893c <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   1893c:	4a02      	ldr	r2, [pc, #8]	; (18948 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1893e:	4b03      	ldr	r3, [pc, #12]	; (1894c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   18940:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   18942:	8019      	strh	r1, [r3, #0]
}
   18944:	2000      	movs	r0, #0
   18946:	4770      	bx	lr
   18948:	20004816 	.word	0x20004816
   1894c:	20004818 	.word	0x20004818

00018950 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   18950:	f04f 0c1b 	mov.w	ip, #27
   18954:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   18958:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1895c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   18960:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   18962:	8018      	strh	r0, [r3, #0]
}
   18964:	4770      	bx	lr
   18966:	bf00      	nop

00018968 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18968:	b9c0      	cbnz	r0, 1899c <ll_phy_get+0x34>
{
   1896a:	b538      	push	{r3, r4, r5, lr}
   1896c:	460d      	mov	r5, r1
   1896e:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18970:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18974:	4602      	mov	r2, r0
   18976:	480a      	ldr	r0, [pc, #40]	; (189a0 <ll_phy_get+0x38>)
   18978:	f7fa fd56 	bl	13428 <mem_get>
   1897c:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1897e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   18980:	b950      	cbnz	r0, 18998 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   18982:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   18986:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1898a:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   1898c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   18990:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18994:	7023      	strb	r3, [r4, #0]
}
   18996:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18998:	2002      	movs	r0, #2
}
   1899a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1899c:	2002      	movs	r0, #2
}
   1899e:	4770      	bx	lr
   189a0:	20001eb0 	.word	0x20001eb0

000189a4 <ll_phy_default_set>:
	default_phy_tx = tx;
   189a4:	4a02      	ldr	r2, [pc, #8]	; (189b0 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   189a6:	4b03      	ldr	r3, [pc, #12]	; (189b4 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   189a8:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   189aa:	7019      	strb	r1, [r3, #0]
}
   189ac:	2000      	movs	r0, #0
   189ae:	4770      	bx	lr
   189b0:	20004999 	.word	0x20004999
   189b4:	20004998 	.word	0x20004998

000189b8 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   189b8:	2800      	cmp	r0, #0
   189ba:	d141      	bne.n	18a40 <ll_phy_req_send+0x88>
{
   189bc:	b570      	push	{r4, r5, r6, lr}
   189be:	460c      	mov	r4, r1
   189c0:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   189c2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   189c6:	4602      	mov	r2, r0
   189c8:	481e      	ldr	r0, [pc, #120]	; (18a44 <ll_phy_req_send+0x8c>)
   189ca:	461e      	mov	r6, r3
   189cc:	f7fa fd2c 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   189d0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   189d2:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   189d4:	bb93      	cbnz	r3, 18a3c <ll_phy_req_send+0x84>
	if (conn->llcp_phy.disabled ||
   189d6:	f890 0197 	ldrb.w	r0, [r0, #407]	; 0x197
   189da:	f010 0008 	ands.w	r0, r0, #8
   189de:	d12b      	bne.n	18a38 <ll_phy_req_send+0x80>
	    (conn->common.fex_valid &&
   189e0:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
	if (conn->llcp_phy.disabled ||
   189e4:	07db      	lsls	r3, r3, #31
   189e6:	d504      	bpl.n	189f2 <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   189e8:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   189ec:	f413 6f10 	tst.w	r3, #2304	; 0x900
   189f0:	d022      	beq.n	18a38 <ll_phy_req_send+0x80>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   189f2:	f891 3194 	ldrb.w	r3, [r1, #404]	; 0x194
   189f6:	f891 c195 	ldrb.w	ip, [r1, #405]	; 0x195
   189fa:	459c      	cmp	ip, r3
   189fc:	d11a      	bne.n	18a34 <ll_phy_req_send+0x7c>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   189fe:	f004 0407 	and.w	r4, r4, #7
   18a02:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
   18a06:	00a4      	lsls	r4, r4, #2
   18a08:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   18a0c:	f006 0307 	and.w	r3, r6, #7
   18a10:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   18a14:	f005 0501 	and.w	r5, r5, #1
   18a18:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   18a1c:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
	conn->llcp_phy.req++;
   18a20:	f10c 0c01 	add.w	ip, ip, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18a24:	f022 0207 	bic.w	r2, r2, #7
   18a28:	4313      	orrs	r3, r2
	conn->llcp_phy.req++;
   18a2a:	f881 c194 	strb.w	ip, [r1, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18a2e:	f8a1 3196 	strh.w	r3, [r1, #406]	; 0x196
}
   18a32:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18a34:	200c      	movs	r0, #12
}
   18a36:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18a38:	201a      	movs	r0, #26
}
   18a3a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a3c:	2002      	movs	r0, #2
}
   18a3e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a40:	2002      	movs	r0, #2
}
   18a42:	4770      	bx	lr
   18a44:	20001eb0 	.word	0x20001eb0

00018a48 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18a48:	b9d8      	cbnz	r0, 18a82 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18a4a:	4602      	mov	r2, r0
{
   18a4c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18a4e:	480e      	ldr	r0, [pc, #56]	; (18a88 <ll_apto_get+0x40>)
   18a50:	460c      	mov	r4, r1
   18a52:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18a56:	f7fa fce7 	bl	13428 <mem_get>
   18a5a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   18a5c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   18a5e:	b970      	cbnz	r0, 18a7e <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   18a60:	f8b2 30b2 	ldrh.w	r3, [r2, #178]	; 0xb2
   18a64:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   18a66:	fb02 f303 	mul.w	r3, r2, r3
   18a6a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   18a6e:	4a07      	ldr	r2, [pc, #28]	; (18a8c <ll_apto_get+0x44>)
   18a70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18a74:	fba2 2303 	umull	r2, r3, r2, r3
   18a78:	099b      	lsrs	r3, r3, #6
   18a7a:	8023      	strh	r3, [r4, #0]
}
   18a7c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a7e:	2002      	movs	r0, #2
}
   18a80:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a82:	2002      	movs	r0, #2
}
   18a84:	4770      	bx	lr
   18a86:	bf00      	nop
   18a88:	20001eb0 	.word	0x20001eb0
   18a8c:	10624dd3 	.word	0x10624dd3

00018a90 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18a90:	b9e0      	cbnz	r0, 18acc <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18a92:	4602      	mov	r2, r0
{
   18a94:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18a96:	480e      	ldr	r0, [pc, #56]	; (18ad0 <ll_apto_set+0x40>)
   18a98:	460c      	mov	r4, r1
   18a9a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18a9e:	f7fa fcc3 	bl	13428 <mem_get>
   18aa2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   18aa4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   18aa6:	b978      	cbnz	r0, 18ac8 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   18aa8:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   18aac:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18ab0:	fb03 fc0c 	mul.w	ip, r3, ip
   18ab4:	f242 7310 	movw	r3, #10000	; 0x2710
   18ab8:	fb03 c304 	mla	r3, r3, r4, ip
   18abc:	3b01      	subs	r3, #1
   18abe:	fbb3 f3fc 	udiv	r3, r3, ip
   18ac2:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
}
   18ac6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18ac8:	2002      	movs	r0, #2
}
   18aca:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18acc:	2002      	movs	r0, #2
}
   18ace:	4770      	bx	lr
   18ad0:	20001eb0 	.word	0x20001eb0

00018ad4 <ull_conn_init>:
	err = init_reset();
   18ad4:	f7ff b912 	b.w	17cfc <init_reset>

00018ad8 <ull_conn_reset>:
{
   18ad8:	b510      	push	{r4, lr}
	(void)ull_central_reset();
   18ada:	f002 f9fb 	bl	1aed4 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18ade:	2200      	movs	r2, #0
   18ae0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18ae4:	4815      	ldr	r0, [pc, #84]	; (18b3c <ull_conn_reset+0x64>)
   18ae6:	f7fa fc9f 	bl	13428 <mem_get>
   18aea:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   18aec:	f100 021c 	add.w	r2, r0, #28
   18af0:	4601      	mov	r1, r0
   18af2:	2003      	movs	r0, #3
   18af4:	f7fe fc50 	bl	17398 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   18af8:	b108      	cbz	r0, 18afe <ull_conn_reset+0x26>
   18afa:	3078      	adds	r0, #120	; 0x78
   18afc:	d10f      	bne.n	18b1e <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
   18afe:	4810      	ldr	r0, [pc, #64]	; (18b40 <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
   18b00:	4910      	ldr	r1, [pc, #64]	; (18b44 <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
   18b02:	4a11      	ldr	r2, [pc, #68]	; (18b48 <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
   18b04:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   18b06:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   18b0a:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   18b0c:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   18b0e:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   18b12:	65a3      	str	r3, [r4, #88]	; 0x58
}
   18b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   18b18:	6013      	str	r3, [r2, #0]
	err = init_reset();
   18b1a:	f7ff b8ef 	b.w	17cfc <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   18b1e:	4a0b      	ldr	r2, [pc, #44]	; (18b4c <ull_conn_reset+0x74>)
   18b20:	490b      	ldr	r1, [pc, #44]	; (18b50 <ull_conn_reset+0x78>)
   18b22:	480c      	ldr	r0, [pc, #48]	; (18b54 <ull_conn_reset+0x7c>)
   18b24:	f640 03e3 	movw	r3, #2275	; 0x8e3
   18b28:	f00c f868 	bl	24bfc <printk>
   18b2c:	4040      	eors	r0, r0
   18b2e:	f380 8811 	msr	BASEPRI, r0
   18b32:	f04f 0003 	mov.w	r0, #3
   18b36:	df02      	svc	2
   18b38:	e7e1      	b.n	18afe <ull_conn_reset+0x26>
   18b3a:	bf00      	nop
   18b3c:	20001eb0 	.word	0x20001eb0
   18b40:	2000069c 	.word	0x2000069c
   18b44:	20000658 	.word	0x20000658
   18b48:	200034fc 	.word	0x200034fc
   18b4c:	0002d7e8 	.word	0x0002d7e8
   18b50:	0002d7bc 	.word	0x0002d7bc
   18b54:	0002d27c 	.word	0x0002d27c

00018b58 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   18b58:	4b01      	ldr	r3, [pc, #4]	; (18b60 <ull_conn_default_tx_octets_get+0x8>)
}
   18b5a:	8818      	ldrh	r0, [r3, #0]
   18b5c:	4770      	bx	lr
   18b5e:	bf00      	nop
   18b60:	20004816 	.word	0x20004816

00018b64 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   18b64:	4b01      	ldr	r3, [pc, #4]	; (18b6c <ull_conn_default_tx_time_get+0x8>)
}
   18b66:	8818      	ldrh	r0, [r3, #0]
   18b68:	4770      	bx	lr
   18b6a:	bf00      	nop
   18b6c:	20004818 	.word	0x20004818

00018b70 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   18b70:	4b01      	ldr	r3, [pc, #4]	; (18b78 <ull_conn_default_phy_tx_get+0x8>)
}
   18b72:	7818      	ldrb	r0, [r3, #0]
   18b74:	4770      	bx	lr
   18b76:	bf00      	nop
   18b78:	20004999 	.word	0x20004999

00018b7c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   18b7c:	4b01      	ldr	r3, [pc, #4]	; (18b84 <ull_conn_default_phy_rx_get+0x8>)
}
   18b7e:	7818      	ldrb	r0, [r3, #0]
   18b80:	4770      	bx	lr
   18b82:	bf00      	nop
   18b84:	20004998 	.word	0x20004998

00018b88 <ull_conn_setup>:
{
   18b88:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   18b8a:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   18b8c:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   18b8e:	681d      	ldr	r5, [r3, #0]
   18b90:	782b      	ldrb	r3, [r5, #0]
{
   18b92:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   18b94:	b193      	cbz	r3, 18bbc <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   18b96:	696b      	ldr	r3, [r5, #20]
   18b98:	b163      	cbz	r3, 18bb4 <ull_conn_setup+0x2c>
   18b9a:	4a0b      	ldr	r2, [pc, #44]	; (18bc8 <ull_conn_setup+0x40>)
   18b9c:	490b      	ldr	r1, [pc, #44]	; (18bcc <ull_conn_setup+0x44>)
   18b9e:	480c      	ldr	r0, [pc, #48]	; (18bd0 <ull_conn_setup+0x48>)
   18ba0:	f240 33ed 	movw	r3, #1005	; 0x3ed
   18ba4:	f00c f82a 	bl	24bfc <printk>
   18ba8:	4040      	eors	r0, r0
   18baa:	f380 8811 	msr	BASEPRI, r0
   18bae:	f04f 0003 	mov.w	r0, #3
   18bb2:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   18bb4:	4b07      	ldr	r3, [pc, #28]	; (18bd4 <ull_conn_setup+0x4c>)
   18bb6:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   18bba:	bd38      	pop	{r3, r4, r5, pc}
   18bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   18bc0:	4608      	mov	r0, r1
   18bc2:	f7ff ba95 	b.w	180f0 <conn_setup_adv_scan_disabled_cb>
   18bc6:	bf00      	nop
   18bc8:	0002d7e8 	.word	0x0002d7e8
   18bcc:	0002d854 	.word	0x0002d854
   18bd0:	0002d27c 	.word	0x0002d27c
   18bd4:	000180f1 	.word	0x000180f1

00018bd8 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   18bd8:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   18bda:	88da      	ldrh	r2, [r3, #6]
   18bdc:	2a00      	cmp	r2, #0
   18bde:	f040 80ce 	bne.w	18d7e <ull_conn_rx+0x1a6>
{
   18be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18be6:	460e      	mov	r6, r1
   18be8:	b083      	sub	sp, #12
   18bea:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18bec:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   18bf0:	48a4      	ldr	r0, [pc, #656]	; (18e84 <ull_conn_rx+0x2ac>)
   18bf2:	f7fa fc19 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   18bf6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18bf8:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   18bfa:	2b00      	cmp	r3, #0
   18bfc:	f040 80b8 	bne.w	18d70 <ull_conn_rx+0x198>
	pdu_rx = (void *)(*rx)->pdu;
   18c00:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   18c02:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
	switch (pdu_rx->ll_id) {
   18c06:	7f29      	ldrb	r1, [r5, #28]
   18c08:	f001 0103 	and.w	r1, r1, #3
   18c0c:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   18c0e:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   18c12:	d129      	bne.n	18c68 <ull_conn_rx+0x90>
	opcode = pdu_rx->llctrl.opcode;
   18c14:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   18c18:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   18c1c:	b3d0      	cbz	r0, 18c94 <ull_conn_rx+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   18c1e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18c22:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   18c24:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   18c28:	f2c0 80ad 	blt.w	18d86 <ull_conn_rx+0x1ae>
	return (!conn->lll.role &&
   18c2c:	2900      	cmp	r1, #0
   18c2e:	f040 80be 	bne.w	18dae <ull_conn_rx+0x1d6>
		((!conn->llcp_enc.refresh &&
   18c32:	f1b8 0f02 	cmp.w	r8, #2
   18c36:	f000 80af 	beq.w	18d98 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18c3a:	f1b8 0f05 	cmp.w	r8, #5
   18c3e:	f000 8462 	beq.w	19506 <ull_conn_rx+0x92e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18c42:	f1b8 0f06 	cmp.w	r8, #6
   18c46:	f000 83cd 	beq.w	193e4 <ull_conn_rx+0x80c>
   18c4a:	f1b8 0f0d 	cmp.w	r8, #13
   18c4e:	f000 8190 	beq.w	18f72 <ull_conn_rx+0x39a>
   18c52:	f1b8 0f11 	cmp.w	r8, #17
   18c56:	f000 823b 	beq.w	190d0 <ull_conn_rx+0x4f8>
		conn->llcp_terminate.reason_final =
   18c5a:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18c5c:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   18c5e:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b

		return 0;
   18c62:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18c64:	712b      	strb	r3, [r5, #4]
		return 0;
   18c66:	e007      	b.n	18c78 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   18c68:	b949      	cbnz	r1, 18c7e <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   18c6a:	b110      	cbz	r0, 18c72 <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_final =
   18c6c:	233d      	movs	r3, #61	; 0x3d
   18c6e:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18c72:	2301      	movs	r3, #1
   18c74:	712b      	strb	r3, [r5, #4]
	return 0;
   18c76:	2000      	movs	r0, #0
}
   18c78:	b003      	add	sp, #12
   18c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   18c7e:	2800      	cmp	r0, #0
   18c80:	d0f9      	beq.n	18c76 <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
   18c82:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18c84:	2201      	movs	r2, #1
	return 0;
   18c86:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
   18c88:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18c8c:	712a      	strb	r2, [r5, #4]
}
   18c8e:	b003      	add	sp, #12
   18c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   18c94:	f1a8 0302 	sub.w	r3, r8, #2
   18c98:	2b17      	cmp	r3, #23
   18c9a:	d81d      	bhi.n	18cd8 <ull_conn_rx+0x100>
   18c9c:	e8df f013 	tbh	[pc, r3, lsl #1]
   18ca0:	001c007c 	.word	0x001c007c
   18ca4:	042e0427 	.word	0x042e0427
   18ca8:	037203a2 	.word	0x037203a2
   18cac:	01db001c 	.word	0x01db001c
   18cb0:	044d001c 	.word	0x044d001c
   18cb4:	016901ac 	.word	0x016901ac
   18cb8:	02e002f5 	.word	0x02e002f5
   18cbc:	0218024e 	.word	0x0218024e
   18cc0:	03cd0402 	.word	0x03cd0402
   18cc4:	00b900b9 	.word	0x00b900b9
   18cc8:	012c03d7 	.word	0x012c03d7
   18ccc:	00f6001c 	.word	0x00f6001c
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   18cd0:	7f6b      	ldrb	r3, [r5, #29]
   18cd2:	2b01      	cmp	r3, #1
   18cd4:	f000 843a 	beq.w	1954c <ull_conn_rx+0x974>
	if (conn->common.txn_lock) {
   18cd8:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18cdc:	0798      	lsls	r0, r3, #30
   18cde:	d4c8      	bmi.n	18c72 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18ce0:	4869      	ldr	r0, [pc, #420]	; (18e88 <ull_conn_rx+0x2b0>)
   18ce2:	f7fa fb6f 	bl	133c4 <mem_acquire>
	if (!tx) {
   18ce6:	2800      	cmp	r0, #0
   18ce8:	f000 851b 	beq.w	19722 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   18cec:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   18cf0:	f043 0302 	orr.w	r3, r3, #2
   18cf4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18cf8:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   18cfa:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18cfe:	f043 0303 	orr.w	r3, r3, #3
   18d02:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   18d04:	2302      	movs	r3, #2
   18d06:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   18d08:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   18d0c:	2307      	movs	r3, #7
   18d0e:	71c3      	strb	r3, [r0, #7]
	if (
   18d10:	b1f2      	cbz	r2, 18d50 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   18d12:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
   18d16:	0799      	lsls	r1, r3, #30
   18d18:	d41a      	bmi.n	18d50 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   18d1a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   18d1e:	07db      	lsls	r3, r3, #31
   18d20:	d416      	bmi.n	18d50 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   18d22:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   18d26:	429a      	cmp	r2, r3
   18d28:	f000 84ff 	beq.w	1972a <ull_conn_rx+0xb52>
		} else if (!conn->tx_ctrl) {
   18d2c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   18d30:	2b00      	cmp	r3, #0
   18d32:	f000 8542 	beq.w	197ba <ull_conn_rx+0xbe2>
	tx->next = conn->tx_ctrl_last->next;
   18d36:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
   18d3a:	6813      	ldr	r3, [r2, #0]
   18d3c:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18d3e:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   18d40:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   18d42:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   18d46:	2a00      	cmp	r2, #0
   18d48:	d193      	bne.n	18c72 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   18d4a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18d4e:	e790      	b.n	18c72 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   18d50:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   18d54:	2b00      	cmp	r3, #0
   18d56:	f000 84da 	beq.w	1970e <ull_conn_rx+0xb36>
	tx->next = conn->tx_ctrl_last->next;
   18d5a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   18d5e:	681a      	ldr	r2, [r3, #0]
   18d60:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18d62:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   18d64:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   18d66:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   18d6a:	2a00      	cmp	r2, #0
   18d6c:	d181      	bne.n	18c72 <ull_conn_rx+0x9a>
   18d6e:	e7ec      	b.n	18d4a <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18d70:	6833      	ldr	r3, [r6, #0]
   18d72:	2201      	movs	r2, #1
		return 0;
   18d74:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18d76:	711a      	strb	r2, [r3, #4]
}
   18d78:	b003      	add	sp, #12
   18d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18d7e:	2201      	movs	r2, #1
   18d80:	711a      	strb	r2, [r3, #4]
		return 0;
   18d82:	2000      	movs	r0, #0
}
   18d84:	4770      	bx	lr
	       (conn->lll.role &&
   18d86:	bbc1      	cbnz	r1, 18dfa <ull_conn_rx+0x222>
		((!conn->llcp_enc.refresh &&
   18d88:	f1b8 0f07 	cmp.w	r8, #7
   18d8c:	f000 82fa 	beq.w	19384 <ull_conn_rx+0x7ac>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   18d90:	f1b8 0f02 	cmp.w	r8, #2
   18d94:	f47f af55 	bne.w	18c42 <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   18d98:	7f6b      	ldrb	r3, [r5, #29]
   18d9a:	2b02      	cmp	r3, #2
   18d9c:	d19c      	bne.n	18cd8 <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_final =
   18d9e:	f895 2020 	ldrb.w	r2, [r5, #32]
   18da2:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18da6:	2301      	movs	r3, #1
	int nack = 0;
   18da8:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18daa:	712b      	strb	r3, [r5, #4]
}
   18dac:	e764      	b.n	18c78 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   18dae:	f1b8 0f02 	cmp.w	r8, #2
   18db2:	d0f1      	beq.n	18d98 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   18db4:	f1b8 0f0b 	cmp.w	r8, #11
   18db8:	d08a      	beq.n	18cd0 <ull_conn_rx+0xf8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   18dba:	f1b8 0f04 	cmp.w	r8, #4
   18dbe:	f47f af3c 	bne.w	18c3a <ull_conn_rx+0x62>
		if (conn->lll.role ||
   18dc2:	7f6b      	ldrb	r3, [r5, #29]
   18dc4:	2b0d      	cmp	r3, #13
   18dc6:	d187      	bne.n	18cd8 <ull_conn_rx+0x100>
		memcpy(&conn->llcp.encryption.skd[8],
   18dc8:	2208      	movs	r2, #8
   18dca:	f105 0120 	add.w	r1, r5, #32
   18dce:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
   18dd2:	f00f fbf0 	bl	285b6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   18dd6:	2204      	movs	r2, #4
   18dd8:	f105 0128 	add.w	r1, r5, #40	; 0x28
   18ddc:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   18de0:	f00f fbe9 	bl	285b6 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   18de4:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18de8:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   18dea:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18dee:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   18df0:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	int nack = 0;
   18df4:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18df6:	7111      	strb	r1, [r2, #4]
		break;
   18df8:	e73e      	b.n	18c78 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   18dfa:	f1b8 0f02 	cmp.w	r8, #2
   18dfe:	d0cb      	beq.n	18d98 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   18e00:	f1b8 0f0b 	cmp.w	r8, #11
   18e04:	f000 84a4 	beq.w	19750 <ull_conn_rx+0xb78>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   18e08:	f1b8 0f03 	cmp.w	r8, #3
   18e0c:	f47f af19 	bne.w	18c42 <ull_conn_rx+0x6a>
   18e10:	e762      	b.n	18cd8 <ull_conn_rx+0x100>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   18e12:	7f6b      	ldrb	r3, [r5, #29]
   18e14:	2b09      	cmp	r3, #9
   18e16:	f47f af5f 	bne.w	18cd8 <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   18e1a:	f1b8 0f14 	cmp.w	r8, #20
   18e1e:	f000 84db 	beq.w	197d8 <ull_conn_rx+0xc00>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   18e22:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   18e26:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   18e2a:	4293      	cmp	r3, r2
   18e2c:	f000 87e2 	beq.w	19df4 <ull_conn_rx+0x121c>
	eff_rx_octets = conn->lll.max_rx_octets;
   18e30:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   18e34:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   18e38:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   18e3c:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   18e40:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	struct node_tx *tx = NULL;
   18e44:	2300      	movs	r3, #0
	       tx) ||
   18e46:	f001 0107 	and.w	r1, r1, #7
   18e4a:	2902      	cmp	r1, #2
   18e4c:	f000 84e4 	beq.w	19818 <ull_conn_rx+0xc40>
   18e50:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   18e54:	f1b8 0f15 	cmp.w	r8, #21
   18e58:	f43f af0d 	beq.w	18c76 <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   18e5c:	4618      	mov	r0, r3
   18e5e:	490a      	ldr	r1, [pc, #40]	; (18e88 <ull_conn_rx+0x2b0>)
   18e60:	f7fa faca 	bl	133f8 <mem_release>
			if (conn->llcp_length.state ==
   18e64:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->common.txn_lock = 0U;
   18e68:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   18e6c:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   18e70:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   18e74:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   18e76:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   18e7a:	f47f aefc 	bne.w	18c76 <ull_conn_rx+0x9e>
				return -EBUSY;
   18e7e:	f06f 000f 	mvn.w	r0, #15
   18e82:	e6f9      	b.n	18c78 <ull_conn_rx+0xa0>
   18e84:	20001eb0 	.word	0x20001eb0
   18e88:	20003590 	.word	0x20003590
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   18e8c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18e90:	2b00      	cmp	r3, #0
   18e92:	f6ff af21 	blt.w	18cd8 <ull_conn_rx+0x100>
   18e96:	7f6b      	ldrb	r3, [r5, #29]
   18e98:	2b03      	cmp	r3, #3
   18e9a:	f47f af1d 	bne.w	18cd8 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   18e9e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
					 conn->lll.phy_rx))) {
   18ea2:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
			if (!(p->phys & (conn->lll.phy_tx |
   18ea6:	f895 2020 	ldrb.w	r2, [r5, #32]
   18eaa:	430b      	orrs	r3, r1
   18eac:	f003 0307 	and.w	r3, r3, #7
   18eb0:	4213      	tst	r3, r2
   18eb2:	f43f aee0 	beq.w	18c76 <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   18eb6:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   18eba:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   18ebe:	1a9b      	subs	r3, r3, r2
   18ec0:	f003 0303 	and.w	r3, r3, #3
   18ec4:	2b02      	cmp	r3, #2
   18ec6:	f43f aed6 	beq.w	18c76 <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   18eca:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   18ece:	f002 fa51 	bl	1b374 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   18ed2:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.chan_map.initiate = 1U;
   18ed6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			conn->llcp_type = LLCP_CHAN_MAP;
   18eda:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   18edc:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   18ede:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   18ee2:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18ee6:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   18ee8:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18eec:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   18eee:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	int nack = 0;
   18ef2:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18ef4:	7111      	strb	r1, [r2, #4]

		break;
   18ef6:	e6bf      	b.n	18c78 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   18ef8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18efc:	2b00      	cmp	r3, #0
   18efe:	f6ff aeeb 	blt.w	18cd8 <ull_conn_rx+0x100>
   18f02:	7f6b      	ldrb	r3, [r5, #29]
   18f04:	2b03      	cmp	r3, #3
   18f06:	f47f aee7 	bne.w	18cd8 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   18f0a:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   18f0e:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   18f12:	429a      	cmp	r2, r3
   18f14:	f43f aead 	beq.w	18c72 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   18f18:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   18f1c:	f002 0303 	and.w	r3, r2, #3
   18f20:	2b02      	cmp	r3, #2
   18f22:	f47f aea6 	bne.w	18c72 <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   18f26:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18f2a:	f3c2 0182 	ubfx	r1, r2, #2, #3
   18f2e:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   18f30:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   18f34:	009b      	lsls	r3, r3, #2
   18f36:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   18f3a:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   18f3e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   18f42:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   18f46:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   18f4a:	d002      	beq.n	18f52 <ull_conn_rx+0x37a>
   18f4c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   18f50:	d105      	bne.n	18f5e <ull_conn_rx+0x386>
				conn->llcp_phy.tx = 0;
   18f52:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   18f56:	f003 0303 	and.w	r3, r3, #3
   18f5a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
   18f5e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   18f62:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   18f64:	f043 0301 	orr.w	r3, r3, #1
   18f68:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   18f6c:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18f70:	e67f      	b.n	18c72 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   18f72:	7f6b      	ldrb	r3, [r5, #29]
   18f74:	2b02      	cmp	r3, #2
   18f76:	f47f aeaf 	bne.w	18cd8 <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   18f7a:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   18f7e:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   18f82:	4293      	cmp	r3, r2
   18f84:	d004      	beq.n	18f90 <ull_conn_rx+0x3b8>
   18f86:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   18f8a:	2b03      	cmp	r3, #3
   18f8c:	f000 86de 	beq.w	19d4c <ull_conn_rx+0x1174>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   18f90:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   18f94:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   18f98:	4293      	cmp	r3, r2
   18f9a:	f000 852f 	beq.w	199fc <ull_conn_rx+0xe24>
		rej_ext_ind->error_code = rej_ind->error_code;
   18f9e:	f895 1020 	ldrb.w	r1, [r5, #32]
   18fa2:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   18fa6:	2923      	cmp	r1, #35	; 0x23
   18fa8:	d012      	beq.n	18fd0 <ull_conn_rx+0x3f8>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   18faa:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   18fae:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   18fb2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   18fb6:	f36f 0200 	bfc	r2, #0, #1
   18fba:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   18fbe:	2200      	movs	r2, #0
   18fc0:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   18fc4:	f3c3 0202 	ubfx	r2, r3, #0, #3
   18fc8:	f362 1306 	bfi	r3, r2, #4, #3
   18fcc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   18fd0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   18fd4:	0758      	lsls	r0, r3, #29
   18fd6:	f57f ae4c 	bpl.w	18c72 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   18fda:	231c      	movs	r3, #28
   18fdc:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   18fde:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   18fe0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   18fe4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18fe8:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   18fea:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   18fee:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   18ff2:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   18ff4:	77ab      	strb	r3, [r5, #30]
	if (err) {
   18ff6:	e63f      	b.n	18c78 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   18ff8:	7f6e      	ldrb	r6, [r5, #29]
   18ffa:	2e06      	cmp	r6, #6
   18ffc:	f47f ae6c 	bne.w	18cd8 <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
   19000:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   19004:	07df      	lsls	r7, r3, #31
   19006:	f140 85dc 	bpl.w	19bc2 <ull_conn_rx+0xfea>
	} else if (!conn->llcp_version.rx) {
   1900a:	f013 0302 	ands.w	r3, r3, #2
   1900e:	f47f ae30 	bne.w	18c72 <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   19012:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   19016:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
		conn->procedure_expire = 0U;
   1901a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_version.version_number = v->version_number;
   1901e:	f895 3020 	ldrb.w	r3, [r5, #32]
   19022:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   19026:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   1902a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   1902e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   19032:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19036:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		sys_le16_to_cpu(v->sub_version_number);
   1903a:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   1903e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   19042:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   19046:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   1904a:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
	conn->llcp_version.rx = 1U;
   1904e:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	return 0;
   19052:	2000      	movs	r0, #0
   19054:	e610      	b.n	18c78 <ull_conn_rx+0xa0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   19056:	7f6b      	ldrb	r3, [r5, #29]
   19058:	2b09      	cmp	r3, #9
   1905a:	f47f ae3d 	bne.w	18cd8 <ull_conn_rx+0x100>
   1905e:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   19060:	49dd      	ldr	r1, [pc, #884]	; (193d8 <ull_conn_rx+0x800>)
   19062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19064:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   19066:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1906a:	400a      	ands	r2, r1
   1906c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   19070:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   19074:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   19078:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1907c:	4013      	ands	r3, r2
   1907e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19082:	6a2e      	ldr	r6, [r5, #32]
   19084:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   19086:	f7fd fbbd 	bl	16804 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1908a:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1908e:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   19092:	4ad1      	ldr	r2, [pc, #836]	; (193d8 <ull_conn_rx+0x800>)
	conn->llcp_feature.features_peer =
   19094:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->common.fex_valid = 1U;
   19098:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   1909c:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   1909e:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   190a2:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   190a4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	conn->llcp_feature.ack = conn->llcp_feature.req;
   190a8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   190ac:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	feat_result &= 0xFF;
   190b0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   190b4:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   190b8:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   190ba:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   190be:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   190c0:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   190c4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	conn->procedure_expire = 0U;
   190c8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   190cc:	4618      	mov	r0, r3
}
   190ce:	e5d3      	b.n	18c78 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   190d0:	7f6b      	ldrb	r3, [r5, #29]
   190d2:	2b03      	cmp	r3, #3
   190d4:	f47f ae00 	bne.w	18cd8 <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
   190d8:	f895 3020 	ldrb.w	r3, [r5, #32]
   190dc:	3b03      	subs	r3, #3
   190de:	2b13      	cmp	r3, #19
   190e0:	f63f adc7 	bhi.w	18c72 <ull_conn_rx+0x9a>
   190e4:	a201      	add	r2, pc, #4	; (adr r2, 190ec <ull_conn_rx+0x514>)
   190e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   190ea:	bf00      	nop
   190ec:	000196cf 	.word	0x000196cf
   190f0:	00018c73 	.word	0x00018c73
   190f4:	00018c73 	.word	0x00018c73
   190f8:	00018c73 	.word	0x00018c73
   190fc:	00018c73 	.word	0x00018c73
   19100:	00018c73 	.word	0x00018c73
   19104:	00018c73 	.word	0x00018c73
   19108:	00018c73 	.word	0x00018c73
   1910c:	00018c73 	.word	0x00018c73
   19110:	00018c73 	.word	0x00018c73
   19114:	00018c73 	.word	0x00018c73
   19118:	00018c73 	.word	0x00018c73
   1911c:	00019657 	.word	0x00019657
   19120:	00018c73 	.word	0x00018c73
   19124:	00018c73 	.word	0x00018c73
   19128:	00018c73 	.word	0x00018c73
   1912c:	00018c73 	.word	0x00018c73
   19130:	000195cd 	.word	0x000195cd
   19134:	00018c73 	.word	0x00018c73
   19138:	00019609 	.word	0x00019609
		if (conn->lll.role ||
   1913c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19140:	2b00      	cmp	r3, #0
   19142:	f6ff adc9 	blt.w	18cd8 <ull_conn_rx+0x100>
   19146:	7f6b      	ldrb	r3, [r5, #29]
   19148:	2b18      	cmp	r3, #24
   1914a:	f47f adc5 	bne.w	18cd8 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   1914e:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   19152:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   19156:	429a      	cmp	r2, r3
   19158:	f43f ad8b 	beq.w	18c72 <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   1915c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		     conn->llcp_conn_param.ack) &&
   19160:	f003 030f 	and.w	r3, r3, #15
   19164:	2b04      	cmp	r3, #4
   19166:	f47f ad84 	bne.w	18c72 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1916a:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   1916e:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19172:	2b05      	cmp	r3, #5
   19174:	f240 85ad 	bls.w	19cd2 <ull_conn_rx+0x10fa>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   19178:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   1917a:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1917c:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   19180:	f200 85a7 	bhi.w	19cd2 <ull_conn_rx+0x10fa>
			    (interval_max > 3200) ||
   19184:	428b      	cmp	r3, r1
   19186:	f200 85a4 	bhi.w	19cd2 <ull_conn_rx+0x10fa>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1918a:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   1918c:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   1918e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   19192:	f080 859e 	bcs.w	19cd2 <ull_conn_rx+0x10fa>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   19196:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   19198:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   1919c:	f1ae 020a 	sub.w	r2, lr, #10
   191a0:	f640 4876 	movw	r8, #3190	; 0xc76
   191a4:	b292      	uxth	r2, r2
   191a6:	4542      	cmp	r2, r8
   191a8:	f200 8593 	bhi.w	19cd2 <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
   191ac:	3301      	adds	r3, #1
   191ae:	b29b      	uxth	r3, r3
   191b0:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   191b4:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   191b8:	f080 858b 	bcs.w	19cd2 <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
   191bc:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   191c0:	4291      	cmp	r1, r2
   191c2:	f0c0 8586 	bcc.w	19cd2 <ull_conn_rx+0x10fa>
			conn->llcp_conn_param.preferred_periodicity =
   191c6:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   191ca:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   191ce:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   191d2:	2301      	movs	r3, #1
   191d4:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   191d8:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   191da:	f8a4 7162 	strh.w	r7, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   191de:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   191e2:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   191e6:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   191ea:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   191ee:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   191f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   191f6:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   191fa:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   191fe:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   19202:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   19206:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   1920a:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   1920e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   19212:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   19216:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   1921a:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   1921e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   19222:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   19226:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   1922a:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   1922e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   19232:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   19236:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   1923a:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1923e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   19242:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   19246:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   1924a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1924e:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   19252:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				sys_le16_to_cpu(cpr->offset5);
   19256:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   1925a:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1925e:	e508      	b.n	18c72 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   19260:	7f6b      	ldrb	r3, [r5, #29]
   19262:	2b18      	cmp	r3, #24
   19264:	f47f ad38 	bne.w	18cd8 <ull_conn_rx+0x100>
	return conn_upd_curr && (conn_upd_curr != conn);
   19268:	485c      	ldr	r0, [pc, #368]	; (193dc <ull_conn_rx+0x804>)
   1926a:	6803      	ldr	r3, [r0, #0]
   1926c:	2b00      	cmp	r3, #0
   1926e:	f000 827b 	beq.w	19768 <ull_conn_rx+0xb90>
   19272:	429c      	cmp	r4, r3
   19274:	f000 8278 	beq.w	19768 <ull_conn_rx+0xb90>
			nack = reject_ext_ind_send(conn, *rx,
   19278:	2320      	movs	r3, #32
   1927a:	220f      	movs	r2, #15
   1927c:	4629      	mov	r1, r5
   1927e:	4620      	mov	r0, r4
}
   19280:	b003      	add	sp, #12
   19282:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   19286:	f7ff b807 	b.w	18298 <reject_ext_ind_send>
		if (conn->lll.role ||
   1928a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1928e:	2b00      	cmp	r3, #0
   19290:	f6ff ad22 	blt.w	18cd8 <ull_conn_rx+0x100>
   19294:	f895 901d 	ldrb.w	r9, [r5, #29]
   19298:	f1b9 0f09 	cmp.w	r9, #9
   1929c:	f47f ad1c 	bne.w	18cd8 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   192a0:	f894 00ba 	ldrb.w	r0, [r4, #186]	; 0xba
   192a4:	f010 0602 	ands.w	r6, r0, #2
   192a8:	f47f ace3 	bne.w	18c72 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   192ac:	484c      	ldr	r0, [pc, #304]	; (193e0 <ull_conn_rx+0x808>)
   192ae:	f7fa f889 	bl	133c4 <mem_acquire>
	if (!tx) {
   192b2:	4607      	mov	r7, r0
   192b4:	2800      	cmp	r0, #0
   192b6:	f000 8234 	beq.w	19722 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   192ba:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   192be:	4946      	ldr	r1, [pc, #280]	; (193d8 <ull_conn_rx+0x800>)
	conn->common.txn_lock = 1U;
   192c0:	f043 0302 	orr.w	r3, r3, #2
   192c4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
   192c8:	6a2a      	ldr	r2, [r5, #32]
   192ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   192cc:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   192ce:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   192d2:	400a      	ands	r2, r1
   192d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   192d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   192dc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   192e0:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   192e4:	4013      	ands	r3, r2
   192e6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   192ea:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   192ee:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   192f2:	f7fd fa87 	bl	16804 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   192f6:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   192fa:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   192fe:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	feat &= LL_FEAT_BIT_MASK;
   19302:	4b35      	ldr	r3, [pc, #212]	; (193d8 <ull_conn_rx+0x800>)
   19304:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   19308:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   1930a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1930e:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   19312:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   19316:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   1931a:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1931e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	conn->common.fex_valid = 1U;
   19322:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   19326:	f043 0301 	orr.w	r3, r3, #1
   1932a:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1932e:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   19330:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19334:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   19338:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1933a:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1933c:	18b8      	adds	r0, r7, r2
   1933e:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   19340:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   19344:	f00f f942 	bl	285cc <memset>
	feat = feat_land_octet0(ll_feat_get(),
   19348:	f7fd fa5c 	bl	16804 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1934c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	dst[0] = val;
   19350:	7339      	strb	r1, [r7, #12]
   19352:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   19354:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   19358:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   1935c:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   1935e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   19360:	723b      	strb	r3, [r7, #8]
   19362:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   19364:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19368:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   1936a:	4620      	mov	r0, r4
   1936c:	727b      	strb	r3, [r7, #9]
   1936e:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   19370:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   19372:	73fe      	strb	r6, [r7, #15]
   19374:	72fa      	strb	r2, [r7, #11]
   19376:	4639      	mov	r1, r7
   19378:	f7fe fde6 	bl	17f48 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1937c:	2301      	movs	r3, #1
   1937e:	712b      	strb	r3, [r5, #4]
	return 0;
   19380:	4630      	mov	r0, r6
   19382:	e479      	b.n	18c78 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   19384:	7f6b      	ldrb	r3, [r5, #29]
   19386:	2b02      	cmp	r3, #2
   19388:	f47f aca6 	bne.w	18cd8 <ull_conn_rx+0x100>
			    conn->llcp_conn_param.req) &&
   1938c:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
		} else if ((conn->llcp_conn_param.ack !=
   19390:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
	return ((uint16_t)src[1] << 8) | src[0];
   19394:	f895 3020 	ldrb.w	r3, [r5, #32]
   19398:	4291      	cmp	r1, r2
   1939a:	d002      	beq.n	193a2 <ull_conn_rx+0x7ca>
			    conn->llcp_conn_param.req) &&
   1939c:	2b0f      	cmp	r3, #15
   1939e:	f000 83c5 	beq.w	19b2c <ull_conn_rx+0xf54>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   193a2:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   193a6:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   193aa:	4291      	cmp	r1, r2
   193ac:	d002      	beq.n	193b4 <ull_conn_rx+0x7dc>
   193ae:	2b14      	cmp	r3, #20
   193b0:	f000 8439 	beq.w	19c26 <ull_conn_rx+0x104e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   193b4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   193b8:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
   193bc:	4291      	cmp	r1, r2
   193be:	d002      	beq.n	193c6 <ull_conn_rx+0x7ee>
   193c0:	2b16      	cmp	r3, #22
   193c2:	f000 8498 	beq.w	19cf6 <ull_conn_rx+0x111e>
			switch (llctrl->unknown_rsp.type) {
   193c6:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   193c8:	bf04      	itt	eq
   193ca:	2301      	moveq	r3, #1
   193cc:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
   193ce:	2300      	movs	r3, #0
   193d0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   193d4:	4618      	mov	r0, r3
		break;
   193d6:	e44f      	b.n	18c78 <ull_conn_rx+0xa0>
   193d8:	087830d0 	.word	0x087830d0
   193dc:	200034fc 	.word	0x200034fc
   193e0:	20003590 	.word	0x20003590
		if ((conn->llcp_req == conn->llcp_ack) ||
   193e4:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   193e8:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   193ec:	4299      	cmp	r1, r3
   193ee:	f43f ac73 	beq.w	18cd8 <ull_conn_rx+0x100>
   193f2:	f894 10bd 	ldrb.w	r1, [r4, #189]	; 0xbd
   193f6:	2903      	cmp	r1, #3
   193f8:	f47f ac6e 	bne.w	18cd8 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   193fc:	7f69      	ldrb	r1, [r5, #29]
   193fe:	2901      	cmp	r1, #1
   19400:	f47f ac6a 	bne.w	18cd8 <ull_conn_rx+0x100>
		if (conn->lll.role) {
   19404:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   19408:	2900      	cmp	r1, #0
   1940a:	f2c0 846a 	blt.w	19ce2 <ull_conn_rx+0x110a>
			conn->llcp_enc.pause_rx = 0U;
   1940e:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
			conn->llcp_ack = conn->llcp_req;
   19412:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			conn->procedure_expire = 0U;
   19416:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   19418:	f022 0203 	bic.w	r2, r2, #3
   1941c:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			conn->procedure_expire = 0U;
   19420:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		if (conn->llcp_enc.refresh) {
   19424:	0750      	lsls	r0, r2, #29
   19426:	f57f ac26 	bpl.w	18c76 <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   1942a:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1942e:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   19430:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	int nack = 0;
   19434:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   19436:	712b      	strb	r3, [r5, #4]
   19438:	e41e      	b.n	18c78 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   1943a:	7f6a      	ldrb	r2, [r5, #29]
   1943c:	2a01      	cmp	r2, #1
   1943e:	f47f ac4b 	bne.w	18cd8 <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
   19442:	2300      	movs	r3, #0
   19444:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   19448:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1944a:	712a      	strb	r2, [r5, #4]
		break;
   1944c:	e414      	b.n	18c78 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   1944e:	7f6b      	ldrb	r3, [r5, #29]
   19450:	2b03      	cmp	r3, #3
   19452:	f47f ac41 	bne.w	18cd8 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
   19456:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1945a:	2b00      	cmp	r3, #0
   1945c:	f2c0 82e1 	blt.w	19a22 <ull_conn_rx+0xe4a>
			if ((conn->llcp_phy.ack !=
   19460:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
			     conn->llcp_phy.req) &&
   19464:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
   19468:	4281      	cmp	r1, r0
   1946a:	d007      	beq.n	1947c <ull_conn_rx+0x8a4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1946c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   19470:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   19474:	3a01      	subs	r2, #1
   19476:	2a02      	cmp	r2, #2
   19478:	f240 842f 	bls.w	19cda <ull_conn_rx+0x1102>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1947c:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   19480:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   19484:	1a9b      	subs	r3, r3, r2
   19486:	f003 0303 	and.w	r3, r3, #3
   1948a:	2b02      	cmp	r3, #2
   1948c:	f000 83c2 	beq.w	19c14 <ull_conn_rx+0x103c>
				     LLCP_ENCRYPTION)) ||
   19490:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   19494:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   19498:	429a      	cmp	r2, r3
   1949a:	f000 83d7 	beq.w	19c4c <ull_conn_rx+0x1074>
				nack = reject_ext_ind_send(conn, *rx,
   1949e:	232a      	movs	r3, #42	; 0x2a
   194a0:	2216      	movs	r2, #22
   194a2:	e6eb      	b.n	1927c <ull_conn_rx+0x6a4>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   194a4:	7f6f      	ldrb	r7, [r5, #29]
   194a6:	2f01      	cmp	r7, #1
   194a8:	f47f ac16 	bne.w	18cd8 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   194ac:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   194b0:	f013 0602 	ands.w	r6, r3, #2
   194b4:	f040 83aa 	bne.w	19c0c <ull_conn_rx+0x1034>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   194b8:	48c5      	ldr	r0, [pc, #788]	; (197d0 <ull_conn_rx+0xbf8>)
   194ba:	f7f9 ff83 	bl	133c4 <mem_acquire>
	if (!tx) {
   194be:	4601      	mov	r1, r0
   194c0:	2800      	cmp	r0, #0
   194c2:	f000 812e 	beq.w	19722 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   194c6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   194ca:	f043 0302 	orr.w	r3, r3, #2
   194ce:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   194d2:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   194d4:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   194d6:	f043 0303 	orr.w	r3, r3, #3
   194da:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   194dc:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   194de:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   194e0:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   194e2:	f7fe fd31 	bl	17f48 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   194e6:	712f      	strb	r7, [r5, #4]
	return 0;
   194e8:	4630      	mov	r0, r6
   194ea:	f7ff bbc5 	b.w	18c78 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   194ee:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   194f2:	2b00      	cmp	r3, #0
   194f4:	f6bf ac65 	bge.w	18dc2 <ull_conn_rx+0x1ea>
   194f8:	f7ff bbee 	b.w	18cd8 <ull_conn_rx+0x100>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   194fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19500:	2b00      	cmp	r3, #0
   19502:	f6ff abe9 	blt.w	18cd8 <ull_conn_rx+0x100>
   19506:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   1950a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   1950e:	429a      	cmp	r2, r3
   19510:	f43f abe2 	beq.w	18cd8 <ull_conn_rx+0x100>
   19514:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   19518:	2b03      	cmp	r3, #3
   1951a:	f47f abdd 	bne.w	18cd8 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   1951e:	7f6b      	ldrb	r3, [r5, #29]
   19520:	2b01      	cmp	r3, #1
   19522:	f47f abd9 	bne.w	18cd8 <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19526:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   1952a:	f36f 0201 	bfc	r2, #0, #2
   1952e:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
	int nack = 0;
   19532:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19534:	712b      	strb	r3, [r5, #4]
		break;
   19536:	f7ff bb9f 	b.w	18c78 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1953a:	7f6b      	ldrb	r3, [r5, #29]
   1953c:	2b01      	cmp	r3, #1
   1953e:	f47f abcb 	bne.w	18cd8 <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
   19542:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19546:	2b00      	cmp	r3, #0
   19548:	f2c0 8106 	blt.w	19758 <ull_conn_rx+0xb80>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1954c:	48a0      	ldr	r0, [pc, #640]	; (197d0 <ull_conn_rx+0xbf8>)
   1954e:	f7f9 ff39 	bl	133c4 <mem_acquire>
		if (!tx) {
   19552:	2800      	cmp	r0, #0
   19554:	f000 80e5 	beq.w	19722 <ull_conn_rx+0xb4a>
	conn->lll.enc_rx = 0;
   19558:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   1955c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->lll.enc_rx = 0;
   19560:	f023 0318 	bic.w	r3, r3, #24
   19564:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   19568:	f042 0201 	orr.w	r2, r2, #1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1956c:	7903      	ldrb	r3, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   1956e:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   19572:	2201      	movs	r2, #1
   19574:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19576:	f043 0303 	orr.w	r3, r3, #3
   1957a:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   1957c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   19580:	220b      	movs	r2, #11
   19582:	71c2      	strb	r2, [r0, #7]
	if (
   19584:	2b00      	cmp	r3, #0
   19586:	f000 819f 	beq.w	198c8 <ull_conn_rx+0xcf0>
	    !conn->llcp_enc.pause_tx &&
   1958a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   1958e:	0791      	lsls	r1, r2, #30
   19590:	f100 819a 	bmi.w	198c8 <ull_conn_rx+0xcf0>
	    !conn->llcp_phy.pause_tx &&
   19594:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   19598:	07d2      	lsls	r2, r2, #31
   1959a:	f100 8195 	bmi.w	198c8 <ull_conn_rx+0xcf0>
		if (conn->tx_head == conn->tx_data) {
   1959e:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   195a2:	4293      	cmp	r3, r2
   195a4:	f000 8506 	beq.w	19fb4 <ull_conn_rx+0x13dc>
		} else if (!conn->tx_ctrl) {
   195a8:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   195ac:	2a00      	cmp	r2, #0
   195ae:	f000 8545 	beq.w	1a03c <ull_conn_rx+0x1464>
	tx->next = conn->tx_ctrl_last->next;
   195b2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   195b6:	681a      	ldr	r2, [r3, #0]
   195b8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   195ba:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   195bc:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   195c0:	6803      	ldr	r3, [r0, #0]
   195c2:	2b00      	cmp	r3, #0
   195c4:	f47f ab55 	bne.w	18c72 <ull_conn_rx+0x9a>
   195c8:	f7ff bbbf 	b.w	18d4a <ull_conn_rx+0x172>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   195cc:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   195d0:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   195d4:	4293      	cmp	r3, r2
   195d6:	f43f ab4c 	beq.w	18c72 <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   195da:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   195dc:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   195de:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn->procedure_expire = 0U;
   195e2:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   195e6:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   195e8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   195ec:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   195ee:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   195f0:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   195f2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   195f6:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   195f8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   195fc:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   195fe:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   19600:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   19602:	4618      	mov	r0, r3
   19604:	f7ff bb38 	b.w	18c78 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   19608:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   1960c:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   19610:	428b      	cmp	r3, r1
   19612:	f43f ab2e 	beq.w	18c72 <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   19616:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1961a:	2a23      	cmp	r2, #35	; 0x23
   1961c:	d012      	beq.n	19644 <ull_conn_rx+0xa6c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1961e:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   19622:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   19626:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   1962a:	f36f 0100 	bfc	r1, #0, #1
   1962e:	f884 1197 	strb.w	r1, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   19632:	2100      	movs	r1, #0
   19634:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   19638:	f3c3 0102 	ubfx	r1, r3, #0, #3
   1963c:	f361 1306 	bfi	r3, r1, #4, #3
   19640:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   19644:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   19648:	0759      	lsls	r1, r3, #29
   1964a:	f57f ab12 	bpl.w	18c72 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1964e:	231c      	movs	r3, #28
   19650:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   19652:	772a      	strb	r2, [r5, #28]
   19654:	e4c4      	b.n	18fe0 <ull_conn_rx+0x408>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   19656:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1965a:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   1965e:	4293      	cmp	r3, r2
   19660:	f43f ab07 	beq.w	18c72 <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   19664:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19668:	2b00      	cmp	r3, #0
   1966a:	db04      	blt.n	19676 <ull_conn_rx+0xa9e>
   1966c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   19670:	2b1a      	cmp	r3, #26
   19672:	f000 8510 	beq.w	1a096 <ull_conn_rx+0x14be>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   19676:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1967a:	f003 010f 	and.w	r1, r3, #15
   1967e:	2904      	cmp	r1, #4
   19680:	d106      	bne.n	19690 <ull_conn_rx+0xab8>
	conn_upd_curr = NULL;
   19682:	4954      	ldr	r1, [pc, #336]	; (197d4 <ull_conn_rx+0xbfc>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   19684:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   19688:	2200      	movs	r2, #0
   1968a:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   1968c:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	if (!conn->llcp_conn_param.cmd) {
   19690:	06da      	lsls	r2, r3, #27
   19692:	f57f aaee 	bpl.w	18c72 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   19696:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   19698:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1969c:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1969e:	f040 83ac 	bne.w	19dfa <ull_conn_rx+0x1222>
	cu->status = rej_ext_ind->error_code;
   196a2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   196a6:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   196a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   196aa:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	cu->latency = lll->latency;
   196ae:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   196b0:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   196b2:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   196b4:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   196b8:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   196bc:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   196be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   196c2:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   196c6:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   196c8:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   196ca:	f7ff bad5 	b.w	18c78 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   196ce:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
   196d2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   196d6:	428b      	cmp	r3, r1
   196d8:	f43f aacb 	beq.w	18c72 <ull_conn_rx+0x9a>
   196dc:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   196e0:	2b03      	cmp	r3, #3
   196e2:	f47f aac6 	bne.w	18c72 <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   196e6:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   196ea:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   196ee:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   196f0:	f022 0203 	bic.w	r2, r2, #3
   196f4:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   196f8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   196fc:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   19700:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   19704:	210d      	movs	r1, #13
   19706:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   19708:	4618      	mov	r0, r3
   1970a:	f7ff bab5 	b.w	18c78 <ull_conn_rx+0xa0>
			tx->next = conn->tx_head;
   1970e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   19710:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   19714:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   19718:	2a00      	cmp	r2, #0
   1971a:	f47f aaaa 	bne.w	18c72 <ull_conn_rx+0x9a>
   1971e:	f7ff bb14 	b.w	18d4a <ull_conn_rx+0x172>
		*err = -ENOBUFS;
   19722:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19726:	f7ff baa7 	b.w	18c78 <ull_conn_rx+0xa0>
			conn->tx_data = conn->tx_data->next;
   1972a:	6813      	ldr	r3, [r2, #0]
   1972c:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   19730:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   19734:	2b00      	cmp	r3, #0
   19736:	f47f aafe 	bne.w	18d36 <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
   1973a:	6813      	ldr	r3, [r2, #0]
   1973c:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1973e:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   19740:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   19742:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
   19746:	2a00      	cmp	r2, #0
   19748:	f47f aa93 	bne.w	18c72 <ull_conn_rx+0x9a>
   1974c:	f7ff bafd 	b.w	18d4a <ull_conn_rx+0x172>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   19750:	7f6b      	ldrb	r3, [r5, #29]
   19752:	2b01      	cmp	r3, #1
   19754:	f47f aac0 	bne.w	18cd8 <ull_conn_rx+0x100>
		conn->lll.enc_tx = 0;
   19758:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1975c:	f36f 1304 	bfc	r3, #4, #1
   19760:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		goto pause_enc_rsp_send_exit;
   19764:	f7ff ba85 	b.w	18c72 <ull_conn_rx+0x9a>
		if (!conn->lll.role) {
   19768:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   1976c:	f894 615c 	ldrb.w	r6, [r4, #348]	; 0x15c
					conn->llcp_conn_param.ack) &&
   19770:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
		if (!conn->lll.role) {
   19774:	2f00      	cmp	r7, #0
   19776:	f2c0 80b2 	blt.w	198de <ull_conn_rx+0xd06>
			if ((conn->llcp_conn_param.req !=
   1977a:	42b1      	cmp	r1, r6
   1977c:	d00a      	beq.n	19794 <ull_conn_rx+0xbbc>
			    ((conn->llcp_conn_param.state ==
   1977e:	f894 615e 	ldrb.w	r6, [r4, #350]	; 0x15e
					conn->llcp_conn_param.ack) &&
   19782:	f016 0f0b 	tst.w	r6, #11
   19786:	f000 824b 	beq.w	19c20 <ull_conn_rx+0x1048>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   1978a:	f006 060f 	and.w	r6, r6, #15
   1978e:	2e06      	cmp	r6, #6
   19790:	f000 8246 	beq.w	19c20 <ull_conn_rx+0x1048>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   19794:	f894 60bb 	ldrb.w	r6, [r4, #187]	; 0xbb
   19798:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
   1979c:	1bf6      	subs	r6, r6, r7
   1979e:	f006 0603 	and.w	r6, r6, #3
   197a2:	2e02      	cmp	r6, #2
   197a4:	f000 8320 	beq.w	19de8 <ull_conn_rx+0x1210>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   197a8:	f894 7194 	ldrb.w	r7, [r4, #404]	; 0x194
   197ac:	f894 6195 	ldrb.w	r6, [r4, #405]	; 0x195
   197b0:	42b7      	cmp	r7, r6
   197b2:	f000 835b 	beq.w	19e6c <ull_conn_rx+0x1294>
				nack = reject_ext_ind_send(conn, *rx,
   197b6:	232a      	movs	r3, #42	; 0x2a
   197b8:	e55f      	b.n	1927a <ull_conn_rx+0x6a2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197ba:	7913      	ldrb	r3, [r2, #4]
   197bc:	f003 0303 	and.w	r3, r3, #3
   197c0:	2b03      	cmp	r3, #3
   197c2:	f000 82bb 	beq.w	19d3c <ull_conn_rx+0x1164>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   197c6:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
   197ca:	f7ff bab6 	b.w	18d3a <ull_conn_rx+0x162>
   197ce:	bf00      	nop
   197d0:	20003590 	.word	0x20003590
   197d4:	200034fc 	.word	0x200034fc
	if (conn->common.txn_lock) {
   197d8:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   197dc:	079b      	lsls	r3, r3, #30
   197de:	f53f aa48 	bmi.w	18c72 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   197e2:	48d1      	ldr	r0, [pc, #836]	; (19b28 <ull_conn_rx+0xf50>)
   197e4:	f7f9 fdee 	bl	133c4 <mem_acquire>
	if (!tx) {
   197e8:	4603      	mov	r3, r0
   197ea:	2800      	cmp	r0, #0
   197ec:	d099      	beq.n	19722 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   197ee:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   197f2:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	eff_rx_octets = conn->lll.max_rx_octets;
   197f6:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   197fa:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   197fe:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   19802:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	conn->common.txn_lock = 1U;
   19806:	f042 0202 	orr.w	r2, r2, #2
   1980a:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1980e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   19812:	428a      	cmp	r2, r1
   19814:	f040 8431 	bne.w	1a07a <ull_conn_rx+0x14a2>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   19818:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1981a:	291a      	cmp	r1, #26
   1981c:	f240 8269 	bls.w	19cf2 <ull_conn_rx+0x111a>
			eff_tx_octets = MIN(max_rx_octets,
   19820:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   19824:	4281      	cmp	r1, r0
   19826:	bf28      	it	cs
   19828:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1982a:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   1982c:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   19830:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   19832:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   19834:	bf34      	ite	cc
   19836:	46c6      	movcc	lr, r8
   19838:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1983c:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   19840:	bf34      	ite	cc
   19842:	4658      	movcc	r0, fp
   19844:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   19848:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   1984c:	bf34      	ite	cc
   1984e:	46d4      	movcc	ip, sl
   19850:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   19854:	45c6      	cmp	lr, r8
   19856:	f000 8287 	beq.w	19d68 <ull_conn_rx+0x1190>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1985a:	3a01      	subs	r2, #1
   1985c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.rx_octets = eff_rx_octets;
   19860:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
			conn->llcp_length.tx_octets = eff_tx_octets;
   19864:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
			conn->llcp_length.rx_time = eff_rx_time;
   19868:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_length.tx_time = eff_tx_time;
   1986c:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			if (tx) {
   19870:	2b00      	cmp	r3, #0
   19872:	f000 82ae 	beq.w	19dd2 <ull_conn_rx+0x11fa>
				conn->llcp_length.state =
   19876:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1987a:	2505      	movs	r5, #5
   1987c:	f365 0202 	bfi	r2, r5, #0, #3
   19880:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			link->mem = conn->llcp_rx;
   19884:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   19888:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   1988a:	6832      	ldr	r2, [r6, #0]
   1988c:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   1988e:	6832      	ldr	r2, [r6, #0]
   19890:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
			*rx = NULL;
   19894:	2200      	movs	r2, #0
   19896:	6032      	str	r2, [r6, #0]
	if (tx) {
   19898:	2b00      	cmp	r3, #0
   1989a:	f43f a9ec 	beq.w	18c76 <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1989e:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   198a0:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   198a2:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   198a6:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   198a8:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   198aa:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   198ac:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   198ae:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   198b0:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   198b4:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   198b8:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   198ba:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   198bc:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   198be:	f7fe fb43 	bl	17f48 <ctrl_tx_sec_enqueue>
	return 0;
   198c2:	2000      	movs	r0, #0
}
   198c4:	f7ff b9d8 	b.w	18c78 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   198c8:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   198cc:	2a00      	cmp	r2, #0
   198ce:	f47f ae70 	bne.w	195b2 <ull_conn_rx+0x9da>
			tx->next = conn->tx_head;
   198d2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   198d4:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   198d8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   198dc:	e670      	b.n	195c0 <ull_conn_rx+0x9e8>
		} else if ((conn->llcp_conn_param.req ==
   198de:	42b1      	cmp	r1, r6
   198e0:	d005      	beq.n	198ee <ull_conn_rx+0xd16>
			    conn->llcp_conn_param.ack) ||
   198e2:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   198e6:	f012 0f0b 	tst.w	r2, #11
   198ea:	f47f a9c2 	bne.w	18c72 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   198ee:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   198f2:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   198f6:	2a05      	cmp	r2, #5
   198f8:	f240 8091 	bls.w	19a1e <ull_conn_rx+0xe46>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   198fc:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   19900:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19904:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   19908:	f200 8089 	bhi.w	19a1e <ull_conn_rx+0xe46>
			    (interval_max > 3200) ||
   1990c:	42b2      	cmp	r2, r6
   1990e:	f200 8086 	bhi.w	19a1e <ull_conn_rx+0xe46>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   19912:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   19916:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   1991a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1991e:	d27e      	bcs.n	19a1e <ull_conn_rx+0xe46>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   19920:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   19924:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   19928:	f1a2 070a 	sub.w	r7, r2, #10
   1992c:	f640 4b76 	movw	fp, #3190	; 0xc76
   19930:	b2bf      	uxth	r7, r7
   19932:	455f      	cmp	r7, fp
   19934:	d873      	bhi.n	19a1e <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
   19936:	f10c 0701 	add.w	r7, ip, #1
   1993a:	b2bf      	uxth	r7, r7
   1993c:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   19940:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   19944:	d26b      	bcs.n	19a1e <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
   19946:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1994a:	455e      	cmp	r6, fp
   1994c:	d367      	bcc.n	19a1e <ull_conn_rx+0xe46>
			conn->llcp_conn_param.interval_min = interval_min;
   1994e:	f8a4 a160 	strh.w	sl, [r4, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
   19952:	f8a4 9162 	strh.w	r9, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   19956:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   1995a:	f8a4 e166 	strh.w	lr, [r4, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
   1995e:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   19962:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   19966:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1996a:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1996e:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   19972:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   19976:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1997a:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1997e:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   19982:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   19986:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1998a:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1998e:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   19992:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   19996:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1999a:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1999e:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   199a2:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   199a6:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   199aa:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   199ae:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   199b2:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   199b6:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   199ba:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   199be:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   199c2:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   199c6:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   199ca:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   199ce:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
			     lll->interval) ||
   199d2:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   199d4:	42be      	cmp	r6, r7
   199d6:	f000 833a 	beq.w	1a04e <ull_conn_rx+0x1476>
				conn->llcp_conn_param.state =
   199da:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   199de:	2503      	movs	r5, #3
   199e0:	f365 0203 	bfi	r2, r5, #0, #4
   199e4:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.ack--;
   199e8:	3901      	subs	r1, #1
   199ea:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	if (!conn_upd_curr) {
   199ee:	2b00      	cmp	r3, #0
   199f0:	f47f a941 	bne.w	18c76 <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
   199f4:	6004      	str	r4, [r0, #0]
	int nack = 0;
   199f6:	4618      	mov	r0, r3
   199f8:	f7ff b93e 	b.w	18c78 <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   199fc:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   19a00:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   19a04:	4293      	cmp	r3, r2
   19a06:	f43f ade1 	beq.w	195cc <ull_conn_rx+0x9f4>
		rej_ext_ind->error_code = rej_ind->error_code;
   19a0a:	f895 3020 	ldrb.w	r3, [r5, #32]
   19a0e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   19a12:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   19a16:	2900      	cmp	r1, #0
   19a18:	f6bf ae2a 	bge.w	19670 <ull_conn_rx+0xa98>
   19a1c:	e62b      	b.n	19676 <ull_conn_rx+0xa9e>
				nack = reject_ext_ind_send(conn, *rx,
   19a1e:	231e      	movs	r3, #30
   19a20:	e42b      	b.n	1927a <ull_conn_rx+0x6a2>
	if (conn->common.txn_lock) {
   19a22:	f894 70ba 	ldrb.w	r7, [r4, #186]	; 0xba
   19a26:	f017 0702 	ands.w	r7, r7, #2
   19a2a:	f47f a922 	bne.w	18c72 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19a2e:	483e      	ldr	r0, [pc, #248]	; (19b28 <ull_conn_rx+0xf50>)
   19a30:	f7f9 fcc8 	bl	133c4 <mem_acquire>
	if (!tx) {
   19a34:	4602      	mov	r2, r0
   19a36:	2800      	cmp	r0, #0
   19a38:	f43f ae73 	beq.w	19722 <ull_conn_rx+0xb4a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19a3c:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->common.txn_lock = 1U;
   19a40:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	if (conn->llcp_phy.ack ==
   19a44:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19a48:	2002      	movs	r0, #2
   19a4a:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   19a4e:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19a52:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   19a56:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
	conn->common.txn_lock = 1U;
   19a5a:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
			conn->phy_pref_tx;
   19a5e:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	if (conn->llcp_phy.ack ==
   19a62:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   19a64:	f3c3 0602 	ubfx	r6, r3, #0, #3
   19a68:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   19a6c:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   19a70:	d114      	bne.n	19a9c <ull_conn_rx+0xec4>
		conn->llcp_phy.ack--;
   19a72:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   19a74:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		conn->llcp_phy.ack--;
   19a78:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.tx =
   19a7c:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
		conn->llcp_phy.cmd = 0U;
   19a80:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   19a84:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   19a88:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   19a8c:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		conn->procedure_expire =
   19a90:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
		conn->llcp_phy.rx =
   19a94:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
		conn->procedure_expire =
   19a98:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_phy.rx &= p->tx_phys;
   19a9c:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->llcp_phy.tx &= p->rx_phys;
   19aa0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   19aa4:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   19aa8:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   19aac:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   19ab0:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   19ab4:	009b      	lsls	r3, r3, #2
   19ab6:	f001 0103 	and.w	r1, r1, #3
   19aba:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   19abe:	430b      	orrs	r3, r1
   19ac0:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   19ac4:	2303      	movs	r3, #3
   19ac6:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   19ac8:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19aca:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   19acc:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   19ad0:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   19ad2:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19ad4:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   19ad8:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   19ada:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19ade:	7110      	strb	r0, [r2, #4]
	if (
   19ae0:	2b00      	cmp	r3, #0
   19ae2:	f000 80aa 	beq.w	19c3a <ull_conn_rx+0x1062>
	    !conn->llcp_enc.pause_tx &&
   19ae6:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
   19aea:	0787      	lsls	r7, r0, #30
   19aec:	f100 80a5 	bmi.w	19c3a <ull_conn_rx+0x1062>
	    !conn->llcp_phy.pause_tx &&
   19af0:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
   19af4:	07c6      	lsls	r6, r0, #31
   19af6:	f100 80a0 	bmi.w	19c3a <ull_conn_rx+0x1062>
		if (conn->tx_head == conn->tx_data) {
   19afa:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   19afe:	4283      	cmp	r3, r0
   19b00:	f000 824c 	beq.w	19f9c <ull_conn_rx+0x13c4>
		} else if (!conn->tx_ctrl) {
   19b04:	2900      	cmp	r1, #0
   19b06:	f000 8291 	beq.w	1a02c <ull_conn_rx+0x1454>
	tx->next = conn->tx_ctrl_last->next;
   19b0a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   19b0e:	6819      	ldr	r1, [r3, #0]
   19b10:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   19b12:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   19b14:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
   19b18:	6813      	ldr	r3, [r2, #0]
   19b1a:	2b00      	cmp	r3, #0
   19b1c:	f47f a8a9 	bne.w	18c72 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   19b20:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19b24:	f7ff b8a5 	b.w	18c72 <ull_conn_rx+0x9a>
   19b28:	20003590 	.word	0x20003590
			conn->llcp_conn_param.disabled = 1U;
   19b2c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   19b30:	f043 0320 	orr.w	r3, r3, #32
   19b34:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
			if (!conn->lll.role) {
   19b38:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19b3c:	2b00      	cmp	r3, #0
   19b3e:	f2c0 8139 	blt.w	19db4 <ull_conn_rx+0x11dc>
				LL_ASSERT(conn->llcp_cu.req ==
   19b42:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   19b46:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   19b4a:	429a      	cmp	r2, r3
   19b4c:	d00e      	beq.n	19b6c <ull_conn_rx+0xf94>
   19b4e:	4ac1      	ldr	r2, [pc, #772]	; (19e54 <ull_conn_rx+0x127c>)
   19b50:	49c1      	ldr	r1, [pc, #772]	; (19e58 <ull_conn_rx+0x1280>)
   19b52:	48c2      	ldr	r0, [pc, #776]	; (19e5c <ull_conn_rx+0x1284>)
   19b54:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   19b58:	f00b f850 	bl	24bfc <printk>
   19b5c:	4040      	eors	r0, r0
   19b5e:	f380 8811 	msr	BASEPRI, r0
   19b62:	f04f 0003 	mov.w	r0, #3
   19b66:	df02      	svc	2
   19b68:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_conn_param.state =
   19b6c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   19b70:	2106      	movs	r1, #6
   19b72:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   19b76:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   19b78:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   19b7a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_cu.win_size = 1U;
   19b7e:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19b82:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   19b84:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   19b88:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19b8c:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   19b90:	00db      	lsls	r3, r3, #3
   19b92:	f022 020f 	bic.w	r2, r2, #15
   19b96:	430b      	orrs	r3, r1
   19b98:	4313      	orrs	r3, r2
   19b9a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_cu.latency =
   19b9e:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
				conn->llcp_cu.interval =
   19ba2:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
				conn->llcp_cu.latency =
   19ba6:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
				conn->llcp_cu.win_offset_us = 0U;
   19baa:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   19bac:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
				conn->llcp_cu.interval =
   19bb0:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
				conn->llcp_cu.timeout =
   19bb4:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				conn->llcp_cu.win_offset_us = 0U;
   19bb8:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19bbc:	7129      	strb	r1, [r5, #4]
				break;
   19bbe:	f7ff b85b 	b.w	18c78 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19bc2:	48a7      	ldr	r0, [pc, #668]	; (19e60 <ull_conn_rx+0x1288>)
   19bc4:	f7f9 fbfe 	bl	133c4 <mem_acquire>
		if (!tx) {
   19bc8:	4601      	mov	r1, r0
   19bca:	2800      	cmp	r0, #0
   19bcc:	f43f ada9 	beq.w	19722 <ull_conn_rx+0xb4a>
		conn->llcp_version.tx = 1U;
   19bd0:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   19bd4:	f043 0301 	orr.w	r3, r3, #1
   19bd8:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19bdc:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   19bde:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   19be0:	220c      	movs	r2, #12
   19be2:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   19be4:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19be6:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19bea:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19bee:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19bf0:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   19bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19bf6:	2205      	movs	r2, #5
		v->sub_version_number =
   19bf8:	72c3      	strb	r3, [r0, #11]
   19bfa:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19bfc:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   19bfe:	4620      	mov	r0, r4
   19c00:	f7fe f9a2 	bl	17f48 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19c04:	2301      	movs	r3, #1
   19c06:	712b      	strb	r3, [r5, #4]
   19c08:	f7ff ba09 	b.w	1901e <ull_conn_rx+0x446>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19c0c:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   19c0e:	2000      	movs	r0, #0
   19c10:	f7ff b832 	b.w	18c78 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   19c14:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   19c18:	2b03      	cmp	r3, #3
   19c1a:	f47f ac40 	bne.w	1949e <ull_conn_rx+0x8c6>
   19c1e:	e437      	b.n	19490 <ull_conn_rx+0x8b8>
				nack = reject_ext_ind_send(conn, *rx,
   19c20:	2323      	movs	r3, #35	; 0x23
   19c22:	f7ff bb2a 	b.w	1927a <ull_conn_rx+0x6a2>
			conn->llcp_length.disabled = 1U;
   19c26:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   19c2a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.disabled = 1U;
   19c2e:	f043 0308 	orr.w	r3, r3, #8
   19c32:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   19c36:	f7ff bbca 	b.w	193ce <ull_conn_rx+0x7f6>
		if (!conn->tx_ctrl) {
   19c3a:	2900      	cmp	r1, #0
   19c3c:	f47f af65 	bne.w	19b0a <ull_conn_rx+0xf32>
			tx->next = conn->tx_head;
   19c40:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   19c42:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   19c46:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
   19c4a:	e765      	b.n	19b18 <ull_conn_rx+0xf40>
				conn->llcp_phy.state =
   19c4c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   19c50:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   19c52:	f043 0303 	orr.w	r3, r3, #3
   19c56:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   19c5a:	d111      	bne.n	19c80 <ull_conn_rx+0x10a8>
					conn->llcp_phy.tx =
   19c5c:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
						conn->phy_pref_rx;
   19c60:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
					conn->llcp_phy.ack--;
   19c64:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   19c66:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   19c6a:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
					conn->llcp_phy.tx =
   19c6e:	f240 43fc 	movw	r3, #1276	; 0x4fc
   19c72:	f022 0204 	bic.w	r2, r2, #4
   19c76:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   19c7a:	4313      	orrs	r3, r2
   19c7c:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.rx &= p->tx_phys;
   19c80:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   19c84:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   19c88:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   19c8c:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   19c90:	f003 0203 	and.w	r2, r3, #3
   19c94:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   19c98:	4003      	ands	r3, r0
   19c9a:	009b      	lsls	r3, r3, #2
   19c9c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   19ca0:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   19ca2:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   19ca6:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   19caa:	d002      	beq.n	19cb2 <ull_conn_rx+0x10da>
   19cac:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   19cb0:	d105      	bne.n	19cbe <ull_conn_rx+0x10e6>
					conn->llcp_phy.tx = 0;
   19cb2:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   19cb6:	f003 0303 	and.w	r3, r3, #3
   19cba:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.pause_tx = 1U;
   19cbe:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19cc2:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   19cc4:	4313      	orrs	r3, r2
   19cc6:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
	int nack = 0;
   19cca:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19ccc:	712a      	strb	r2, [r5, #4]
   19cce:	f7fe bfd3 	b.w	18c78 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   19cd2:	231e      	movs	r3, #30
   19cd4:	2210      	movs	r2, #16
   19cd6:	f7ff bad1 	b.w	1927c <ull_conn_rx+0x6a4>
				nack = reject_ext_ind_send(conn, *rx,
   19cda:	2323      	movs	r3, #35	; 0x23
   19cdc:	2216      	movs	r2, #22
   19cde:	f7ff bacd 	b.w	1927c <ull_conn_rx+0x6a4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19ce2:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   19ce6:	f36f 0301 	bfc	r3, #0, #2
   19cea:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   19cee:	f7ff bb99 	b.w	19424 <ull_conn_rx+0x84c>
   19cf2:	4649      	mov	r1, r9
   19cf4:	e599      	b.n	1982a <ull_conn_rx+0xc52>
			lll->phy_tx_time = lll->phy_tx;
   19cf6:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
			conn->llcp_phy.pause_tx = 0U;
   19cfa:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
   19cfe:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
   19d02:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   19d06:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   19d08:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   19d0c:	f361 1206 	bfi	r2, r1, #4, #3
   19d10:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			if (conn->llcp_phy.cmd) {
   19d14:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   19d18:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
   19d1c:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   19d20:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   19d22:	d078      	beq.n	19e16 <ull_conn_rx+0x123e>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   19d24:	221c      	movs	r2, #28
   19d26:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   19d28:	2300      	movs	r3, #0
   19d2a:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   19d2c:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   19d2e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   19d32:	f3c3 0302 	ubfx	r3, r3, #0, #3
   19d36:	77ab      	strb	r3, [r5, #30]
   19d38:	f7ff bb49 	b.w	193ce <ull_conn_rx+0x7f6>
	    ((pdu_data_tx->llctrl.opcode !=
   19d3c:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19d3e:	2b03      	cmp	r3, #3
   19d40:	f43f acfb 	beq.w	1973a <ull_conn_rx+0xb62>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19d44:	2b0a      	cmp	r3, #10
   19d46:	f47f ad3e 	bne.w	197c6 <ull_conn_rx+0xbee>
   19d4a:	e4f6      	b.n	1973a <ull_conn_rx+0xb62>
	conn->llcp_enc.pause_rx = 0U;
   19d4c:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   19d50:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   19d54:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   19d56:	f021 0103 	bic.w	r1, r1, #3
   19d5a:	f884 113e 	strb.w	r1, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   19d5e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   19d62:	4618      	mov	r0, r3
   19d64:	f7fe bf88 	b.w	18c78 <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   19d68:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   19d6a:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   19d6c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   19d70:	f8a4 70ac 	strh.w	r7, [r4, #172]	; 0xac
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   19d74:	f000 8108 	beq.w	19f88 <ull_conn_rx+0x13b0>
			conn->lll.max_rx_time = eff_rx_time;
   19d78:	f8a4 c044 	strh.w	ip, [r4, #68]	; 0x44
			if (tx) {
   19d7c:	2b00      	cmp	r3, #0
   19d7e:	f000 80ff 	beq.w	19f80 <ull_conn_rx+0x13a8>
					(conn->llcp_length.req - 1);
   19d82:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   19d84:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
				conn->llcp_length.state =
   19d88:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->llcp_length.rx_octets = eff_rx_octets;
   19d8c:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
				conn->llcp_length.state =
   19d90:	2603      	movs	r6, #3
   19d92:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   19d96:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
				conn->llcp_length.rx_time = eff_rx_time;
   19d9a:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_length.tx_time = eff_tx_time;
   19d9e:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_length.state =
   19da2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   19da6:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   19daa:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   19dac:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   19db0:	84e8      	strh	r0, [r5, #38]	; 0x26
   19db2:	e571      	b.n	19898 <ull_conn_rx+0xcc0>
	conn_upd_curr = NULL;
   19db4:	4b2b      	ldr	r3, [pc, #172]	; (19e64 <ull_conn_rx+0x128c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   19db6:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   19dba:	2200      	movs	r2, #0
   19dbc:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   19dbe:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   19dc2:	f013 0310 	ands.w	r3, r3, #16
   19dc6:	d12a      	bne.n	19e1e <ull_conn_rx+0x1246>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19dc8:	2201      	movs	r2, #1
   19dca:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   19dcc:	4618      	mov	r0, r3
				break;
   19dce:	f7fe bf53 	b.w	18c78 <ull_conn_rx+0xa0>
				conn->llcp_length.state =
   19dd2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->lll.max_tx_octets = eff_tx_octets;
   19dd6:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->llcp_length.state =
   19dd8:	2504      	movs	r5, #4
   19dda:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   19dde:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
				conn->llcp_length.state =
   19de2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   19de6:	e54d      	b.n	19884 <ull_conn_rx+0xcac>
				      0x03) == 0x02) &&
   19de8:	f894 60bd 	ldrb.w	r6, [r4, #189]	; 0xbd
   19dec:	2e03      	cmp	r6, #3
   19dee:	f47f ace2 	bne.w	197b6 <ull_conn_rx+0xbde>
   19df2:	e4d9      	b.n	197a8 <ull_conn_rx+0xbd0>
	struct node_tx *tx = NULL;
   19df4:	2300      	movs	r3, #0
   19df6:	f7ff b82d 	b.w	18e54 <ull_conn_rx+0x27c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   19dfa:	4a16      	ldr	r2, [pc, #88]	; (19e54 <ull_conn_rx+0x127c>)
   19dfc:	491a      	ldr	r1, [pc, #104]	; (19e68 <ull_conn_rx+0x1290>)
   19dfe:	4817      	ldr	r0, [pc, #92]	; (19e5c <ull_conn_rx+0x1284>)
   19e00:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   19e04:	f00a fefa 	bl	24bfc <printk>
   19e08:	4040      	eors	r0, r0
   19e0a:	f380 8811 	msr	BASEPRI, r0
   19e0e:	f04f 0003 	mov.w	r0, #3
   19e12:	df02      	svc	2
   19e14:	e445      	b.n	196a2 <ull_conn_rx+0xaca>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19e16:	2201      	movs	r2, #1
   19e18:	711a      	strb	r2, [r3, #4]
   19e1a:	f7ff bad8 	b.w	193ce <ull_conn_rx+0x7f6>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   19e1e:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   19e20:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   19e24:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   19e26:	f040 80d4 	bne.w	19fd2 <ull_conn_rx+0x13fa>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   19e2a:	231a      	movs	r3, #26
   19e2c:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   19e2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   19e30:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			cu->latency = lll->latency;
   19e34:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   19e36:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   19e38:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   19e3c:	227d      	movs	r2, #125	; 0x7d
   19e3e:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   19e42:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   19e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e48:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   19e4c:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   19e4e:	f7ff babe 	b.w	193ce <ull_conn_rx+0x7f6>
   19e52:	bf00      	nop
   19e54:	0002d7e8 	.word	0x0002d7e8
   19e58:	0002d8dc 	.word	0x0002d8dc
   19e5c:	0002d27c 	.word	0x0002d27c
   19e60:	20003590 	.word	0x20003590
   19e64:	200034fc 	.word	0x200034fc
   19e68:	0002d4e4 	.word	0x0002d4e4
				uint16_t interval_min =
   19e6c:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   19e70:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19e74:	2e05      	cmp	r6, #5
   19e76:	f67f add2 	bls.w	19a1e <ull_conn_rx+0xe46>
				uint16_t interval_max =
   19e7a:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   19e7e:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19e82:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   19e86:	f63f adca 	bhi.w	19a1e <ull_conn_rx+0xe46>
				    (interval_max > 3200) ||
   19e8a:	4576      	cmp	r6, lr
   19e8c:	f63f adc7 	bhi.w	19a1e <ull_conn_rx+0xe46>
				uint16_t latency =
   19e90:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   19e92:	f8ad 6006 	strh.w	r6, [sp, #6]
   19e96:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   19e98:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   19e9c:	f4bf adbf 	bcs.w	19a1e <ull_conn_rx+0xe46>
				uint16_t timeout =
   19ea0:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   19ea2:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   19ea6:	f1ac 0a0a 	sub.w	sl, ip, #10
   19eaa:	f640 4b76 	movw	fp, #3190	; 0xc76
   19eae:	fa1f fa8a 	uxth.w	sl, sl
   19eb2:	45da      	cmp	sl, fp
   19eb4:	f63f adb3 	bhi.w	19a1e <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
   19eb8:	f106 0a01 	add.w	sl, r6, #1
   19ebc:	fa1f fa8a 	uxth.w	sl, sl
   19ec0:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   19ec4:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   19ec8:	f4bf ada9 	bcs.w	19a1e <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
   19ecc:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   19ed0:	45de      	cmp	lr, fp
   19ed2:	f4ff ada4 	bcc.w	19a1e <ull_conn_rx+0xe46>
				conn->llcp_conn_param.interval_max =
   19ed6:	f8a4 8162 	strh.w	r8, [r4, #354]	; 0x162
				conn->llcp_conn_param.latency =	latency;
   19eda:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   19ede:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
				conn->llcp_conn_param.latency =	latency;
   19ee2:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
				conn->llcp_conn_param.timeout =	timeout;
   19ee6:	f8a4 7166 	strh.w	r7, [r4, #358]	; 0x166
				conn->llcp_conn_param.preferred_periodicity =
   19eea:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   19eee:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   19ef2:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   19ef6:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   19efa:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
					sys_le16_to_cpu(cpr->offset0);
   19efe:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   19f02:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   19f06:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   19f0a:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
					sys_le16_to_cpu(cpr->offset1);
   19f0e:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   19f12:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   19f16:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   19f1a:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset2);
   19f1e:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   19f22:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   19f26:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   19f2a:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset3);
   19f2e:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   19f32:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   19f36:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   19f3a:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset4);
   19f3e:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   19f42:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   19f46:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   19f4a:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset5);
   19f4e:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   19f52:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   19f56:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   19f5a:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
				     lll->interval) ||
   19f5e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   19f60:	45be      	cmp	lr, r7
   19f62:	d044      	beq.n	19fee <ull_conn_rx+0x1416>
					if (conn->llcp_enc.pause_tx) {
   19f64:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   19f68:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
					if (conn->llcp_enc.pause_tx) {
   19f6c:	f43f ad37 	beq.w	199de <ull_conn_rx+0xe06>
						conn->llcp_conn_param.state =
   19f70:	2602      	movs	r6, #2
   19f72:	f366 0203 	bfi	r2, r6, #0, #4
   19f76:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
						(*rx)->hdr.type =
   19f7a:	2201      	movs	r2, #1
   19f7c:	712a      	strb	r2, [r5, #4]
   19f7e:	e533      	b.n	199e8 <ull_conn_rx+0xe10>
				conn->lll.max_tx_octets = eff_tx_octets;
   19f80:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
   19f82:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
   19f86:	e70e      	b.n	19da6 <ull_conn_rx+0x11ce>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   19f88:	4558      	cmp	r0, fp
   19f8a:	f47f aef5 	bne.w	19d78 <ull_conn_rx+0x11a0>
			    eff_rx_time == conn->lll.max_rx_time &&
   19f8e:	45d4      	cmp	ip, sl
   19f90:	f47f aef2 	bne.w	19d78 <ull_conn_rx+0x11a0>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19f94:	6832      	ldr	r2, [r6, #0]
   19f96:	2501      	movs	r5, #1
   19f98:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   19f9a:	e47d      	b.n	19898 <ull_conn_rx+0xcc0>
			conn->tx_data = conn->tx_data->next;
   19f9c:	6818      	ldr	r0, [r3, #0]
   19f9e:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   19fa2:	2900      	cmp	r1, #0
   19fa4:	f47f adb1 	bne.w	19b0a <ull_conn_rx+0xf32>
			tx->next = conn->tx_head->next;
   19fa8:	6819      	ldr	r1, [r3, #0]
   19faa:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   19fac:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   19fae:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
   19fb2:	e5b1      	b.n	19b18 <ull_conn_rx+0xf40>
			conn->tx_data = conn->tx_data->next;
   19fb4:	681a      	ldr	r2, [r3, #0]
   19fb6:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   19fba:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   19fbe:	2a00      	cmp	r2, #0
   19fc0:	f47f aaf7 	bne.w	195b2 <ull_conn_rx+0x9da>
			tx->next = conn->tx_head->next;
   19fc4:	681a      	ldr	r2, [r3, #0]
   19fc6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19fc8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   19fca:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   19fce:	f7ff baf7 	b.w	195c0 <ull_conn_rx+0x9e8>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   19fd2:	4a53      	ldr	r2, [pc, #332]	; (1a120 <ull_conn_rx+0x1548>)
   19fd4:	4953      	ldr	r1, [pc, #332]	; (1a124 <ull_conn_rx+0x154c>)
   19fd6:	4854      	ldr	r0, [pc, #336]	; (1a128 <ull_conn_rx+0x1550>)
   19fd8:	f641 4322 	movw	r3, #7202	; 0x1c22
   19fdc:	f00a fe0e 	bl	24bfc <printk>
   19fe0:	4040      	eors	r0, r0
   19fe2:	f380 8811 	msr	BASEPRI, r0
   19fe6:	f04f 0003 	mov.w	r0, #3
   19fea:	df02      	svc	2
   19fec:	e71d      	b.n	19e2a <ull_conn_rx+0x1252>
				     lll->interval) ||
   19fee:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   19ff2:	45b6      	cmp	lr, r6
   19ff4:	d1b6      	bne.n	19f64 <ull_conn_rx+0x138c>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   19ff6:	f240 46e2 	movw	r6, #1250	; 0x4e2
   19ffa:	fb06 f707 	mul.w	r7, r6, r7
   19ffe:	f242 7610 	movw	r6, #10000	; 0x2710
   1a002:	fb06 760c 	mla	r6, r6, ip, r7
   1a006:	3e01      	subs	r6, #1
   1a008:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   1a00c:	f8b4 70a6 	ldrh.w	r7, [r4, #166]	; 0xa6
   1a010:	b2b6      	uxth	r6, r6
   1a012:	42b7      	cmp	r7, r6
   1a014:	d1a6      	bne.n	19f64 <ull_conn_rx+0x138c>
				conn->llcp_conn_param.state =
   1a016:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
   1a01a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1a01e:	f042 0201 	orr.w	r2, r2, #1
   1a022:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a026:	2201      	movs	r2, #1
   1a028:	712a      	strb	r2, [r5, #4]
   1a02a:	e4dd      	b.n	199e8 <ull_conn_rx+0xe10>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a02c:	7919      	ldrb	r1, [r3, #4]
   1a02e:	f001 0103 	and.w	r1, r1, #3
   1a032:	2903      	cmp	r1, #3
   1a034:	d029      	beq.n	1a08a <ull_conn_rx+0x14b2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a036:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   1a03a:	e566      	b.n	19b0a <ull_conn_rx+0xf32>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a03c:	791a      	ldrb	r2, [r3, #4]
   1a03e:	f002 0203 	and.w	r2, r2, #3
   1a042:	2a03      	cmp	r2, #3
   1a044:	d065      	beq.n	1a112 <ull_conn_rx+0x153a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a046:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   1a04a:	f7ff bab2 	b.w	195b2 <ull_conn_rx+0x9da>
			     lll->interval) ||
   1a04e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   1a050:	4567      	cmp	r7, ip
   1a052:	f47f acc2 	bne.w	199da <ull_conn_rx+0xe02>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a056:	f240 47e2 	movw	r7, #1250	; 0x4e2
   1a05a:	fb07 f606 	mul.w	r6, r7, r6
   1a05e:	f242 7710 	movw	r7, #10000	; 0x2710
   1a062:	fb07 6202 	mla	r2, r7, r2, r6
   1a066:	3a01      	subs	r2, #1
   1a068:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1a06c:	f8b4 60a6 	ldrh.w	r6, [r4, #166]	; 0xa6
   1a070:	b292      	uxth	r2, r2
   1a072:	4296      	cmp	r6, r2
   1a074:	f47f acb1 	bne.w	199da <ull_conn_rx+0xe02>
   1a078:	e7cd      	b.n	1a016 <ull_conn_rx+0x143e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1a07a:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1a07e:	f011 0f06 	tst.w	r1, #6
   1a082:	f43f abc9 	beq.w	19818 <ull_conn_rx+0xc40>
   1a086:	f7fe bede 	b.w	18e46 <ull_conn_rx+0x26e>
	    ((pdu_data_tx->llctrl.opcode !=
   1a08a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a08c:	2903      	cmp	r1, #3
   1a08e:	d08b      	beq.n	19fa8 <ull_conn_rx+0x13d0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a090:	290a      	cmp	r1, #10
   1a092:	d1d0      	bne.n	1a036 <ull_conn_rx+0x145e>
   1a094:	e788      	b.n	19fa8 <ull_conn_rx+0x13d0>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1a096:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1a09a:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1a09e:	429a      	cmp	r2, r3
   1a0a0:	d00e      	beq.n	1a0c0 <ull_conn_rx+0x14e8>
   1a0a2:	4a1f      	ldr	r2, [pc, #124]	; (1a120 <ull_conn_rx+0x1548>)
   1a0a4:	4921      	ldr	r1, [pc, #132]	; (1a12c <ull_conn_rx+0x1554>)
   1a0a6:	4820      	ldr	r0, [pc, #128]	; (1a128 <ull_conn_rx+0x1550>)
   1a0a8:	f241 43af 	movw	r3, #5295	; 0x14af
   1a0ac:	f00a fda6 	bl	24bfc <printk>
   1a0b0:	4040      	eors	r0, r0
   1a0b2:	f380 8811 	msr	BASEPRI, r0
   1a0b6:	f04f 0003 	mov.w	r0, #3
   1a0ba:	df02      	svc	2
   1a0bc:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a0c0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1a0c4:	2106      	movs	r1, #6
   1a0c6:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   1a0ca:	3b01      	subs	r3, #1
   1a0cc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a0d0:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1a0d4:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a0d8:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.win_size = 1U;
   1a0dc:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a0de:	00db      	lsls	r3, r3, #3
   1a0e0:	430b      	orrs	r3, r1
   1a0e2:	f022 020f 	bic.w	r2, r2, #15
   1a0e6:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   1a0e8:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1a0ec:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1a0f0:	f8b4 1162 	ldrh.w	r1, [r4, #354]	; 0x162
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a0f4:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   1a0f8:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1a0fa:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
		conn->llcp_cu.win_offset_us = 0U;
   1a0fe:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1a102:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1a106:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1a10a:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
	if (err) {
   1a10e:	f7fe bdb0 	b.w	18c72 <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   1a112:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a114:	2a03      	cmp	r2, #3
   1a116:	f43f af55 	beq.w	19fc4 <ull_conn_rx+0x13ec>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a11a:	2a0a      	cmp	r2, #10
   1a11c:	d193      	bne.n	1a046 <ull_conn_rx+0x146e>
   1a11e:	e751      	b.n	19fc4 <ull_conn_rx+0x13ec>
   1a120:	0002d7e8 	.word	0x0002d7e8
   1a124:	0002d4e4 	.word	0x0002d4e4
   1a128:	0002d27c 	.word	0x0002d27c
   1a12c:	0002d8dc 	.word	0x0002d8dc

0001a130 <ull_conn_tx_demux>:
{
   1a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a134:	4c24      	ldr	r4, [pc, #144]	; (1a1c8 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a136:	4f25      	ldr	r7, [pc, #148]	; (1a1cc <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a138:	78e2      	ldrb	r2, [r4, #3]
{
   1a13a:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   1a13c:	1d26      	adds	r6, r4, #4
   1a13e:	e021      	b.n	1a184 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a140:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a144:	4638      	mov	r0, r7
   1a146:	f7f9 f96f 	bl	13428 <mem_get>
	if (conn->lll.handle != handle) {
   1a14a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   1a14c:	bb2a      	cbnz	r2, 1a19a <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   1a14e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1a152:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
			tx->next = NULL;
   1a156:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   1a158:	b351      	cbz	r1, 1a1b0 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   1a15a:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
   1a15e:	b102      	cbz	r2, 1a162 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   1a160:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1a162:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		MFIFO_DEQUEUE(conn_tx);
   1a166:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   1a168:	78a3      	ldrb	r3, [r4, #2]
   1a16a:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   1a16c:	429a      	cmp	r2, r3
   1a16e:	d005      	beq.n	1a17c <ull_conn_tx_demux+0x4c>
	_first += 1U;
   1a170:	3301      	adds	r3, #1
   1a172:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a174:	4299      	cmp	r1, r3
   1a176:	bf08      	it	eq
   1a178:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a17a:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   1a17c:	3d01      	subs	r5, #1
   1a17e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1a182:	d01e      	beq.n	1a1c2 <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a184:	78a3      	ldrb	r3, [r4, #2]
   1a186:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   1a188:	4293      	cmp	r3, r2
   1a18a:	d01a      	beq.n	1a1c2 <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   1a18c:	fb13 f301 	smulbb	r3, r3, r1
   1a190:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a194:	5af2      	ldrh	r2, [r6, r3]
   1a196:	2a00      	cmp	r2, #0
   1a198:	d0d2      	beq.n	1a140 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   1a19a:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   1a19e:	790b      	ldrb	r3, [r1, #4]
   1a1a0:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1a1a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1a1a8:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1a1aa:	f7fd f839 	bl	17220 <ll_tx_ack_put>
   1a1ae:	e7da      	b.n	1a166 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   1a1b0:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
				conn->tx_data = tx;
   1a1b4:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
   1a1b8:	2a00      	cmp	r2, #0
   1a1ba:	d1ce      	bne.n	1a15a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   1a1bc:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			if (conn->tx_data_last) {
   1a1c0:	e7cf      	b.n	1a162 <ull_conn_tx_demux+0x32>
}
   1a1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1c6:	bf00      	nop
   1a1c8:	2000069c 	.word	0x2000069c
   1a1cc:	20001eb0 	.word	0x20001eb0

0001a1d0 <conn_cleanup_finalize>:
{
   1a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   1a1d4:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
{
   1a1d8:	b082      	sub	sp, #8
   1a1da:	4606      	mov	r6, r0
	while (rx) {
   1a1dc:	b144      	cbz	r4, 1a1f0 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   1a1de:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   1a1e0:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1a1e2:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1a1e4:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1a1e6:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1a1e8:	f7fc ffd6 	bl	17198 <ll_rx_put>
	while (rx) {
   1a1ec:	2c00      	cmp	r4, #0
   1a1ee:	d1f7      	bne.n	1a1e0 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   1a1f0:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1a1f4:	b381      	cbz	r1, 1a258 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   1a1f6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1a29c <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   1a1fa:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1a2a0 <conn_cleanup_finalize+0xd0>
   1a1fe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1a2a4 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a202:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   1a206:	e007      	b.n	1a218 <conn_cleanup_finalize+0x48>
   1a208:	4629      	mov	r1, r5
   1a20a:	463a      	mov	r2, r7
   1a20c:	4620      	mov	r0, r4
   1a20e:	f7f9 f93d 	bl	1348c <memq_enqueue>
	while (conn->tx_head) {
   1a212:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1a216:	b1f9      	cbz	r1, 1a258 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1a218:	4630      	mov	r0, r6
   1a21a:	f7fe f801 	bl	18220 <tx_ull_dequeue>
   1a21e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   1a220:	4640      	mov	r0, r8
   1a222:	f7f9 f8cf 	bl	133c4 <mem_acquire>
		LL_ASSERT(link);
   1a226:	4604      	mov	r4, r0
   1a228:	2800      	cmp	r0, #0
   1a22a:	d1ed      	bne.n	1a208 <conn_cleanup_finalize+0x38>
   1a22c:	481e      	ldr	r0, [pc, #120]	; (1a2a8 <conn_cleanup_finalize+0xd8>)
   1a22e:	f640 135e 	movw	r3, #2398	; 0x95e
   1a232:	4652      	mov	r2, sl
   1a234:	4649      	mov	r1, r9
   1a236:	f00a fce1 	bl	24bfc <printk>
   1a23a:	4040      	eors	r0, r0
   1a23c:	f380 8811 	msr	BASEPRI, r0
   1a240:	f04f 0003 	mov.w	r0, #3
   1a244:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a246:	4629      	mov	r1, r5
   1a248:	463a      	mov	r2, r7
   1a24a:	4620      	mov	r0, r4
   1a24c:	f7f9 f91e 	bl	1348c <memq_enqueue>
	while (conn->tx_head) {
   1a250:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1a254:	2900      	cmp	r1, #0
   1a256:	d1df      	bne.n	1a218 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a258:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   1a25a:	4b14      	ldr	r3, [pc, #80]	; (1a2ac <conn_cleanup_finalize+0xdc>)
   1a25c:	9600      	str	r6, [sp, #0]
   1a25e:	3203      	adds	r2, #3
   1a260:	b2d2      	uxtb	r2, r2
   1a262:	2101      	movs	r1, #1
   1a264:	2000      	movs	r0, #0
   1a266:	f7fa fbdb 	bl	14a20 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a26a:	f030 0302 	bics.w	r3, r0, #2
   1a26e:	d00c      	beq.n	1a28a <conn_cleanup_finalize+0xba>
   1a270:	4a0b      	ldr	r2, [pc, #44]	; (1a2a0 <conn_cleanup_finalize+0xd0>)
   1a272:	490f      	ldr	r1, [pc, #60]	; (1a2b0 <conn_cleanup_finalize+0xe0>)
   1a274:	480c      	ldr	r0, [pc, #48]	; (1a2a8 <conn_cleanup_finalize+0xd8>)
   1a276:	f640 1323 	movw	r3, #2339	; 0x923
   1a27a:	f00a fcbf 	bl	24bfc <printk>
   1a27e:	4040      	eors	r0, r0
   1a280:	f380 8811 	msr	BASEPRI, r0
   1a284:	f04f 0003 	mov.w	r0, #3
   1a288:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   1a28a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1a28e:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   1a290:	8533      	strh	r3, [r6, #40]	; 0x28
}
   1a292:	b002      	add	sp, #8
   1a294:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1a298:	f7ff bf4a 	b.w	1a130 <ull_conn_tx_demux>
   1a29c:	20003644 	.word	0x20003644
   1a2a0:	0002d7e8 	.word	0x0002d7e8
   1a2a4:	0002d840 	.word	0x0002d840
   1a2a8:	0002d27c 	.word	0x0002d27c
   1a2ac:	00017fcd 	.word	0x00017fcd
   1a2b0:	0002d904 	.word	0x0002d904

0001a2b4 <ull_conn_done>:
{
   1a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   1a2b6:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1a2b8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   1a2ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a2be:	4299      	cmp	r1, r3
{
   1a2c0:	b089      	sub	sp, #36	; 0x24
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1a2c2:	d054      	beq.n	1a36e <ull_conn_done+0xba>
	switch (done->extra.mic_state) {
   1a2c4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   1a2c8:	2b01      	cmp	r3, #1
   1a2ca:	f000 80e0 	beq.w	1a48e <ull_conn_done+0x1da>
   1a2ce:	2b02      	cmp	r3, #2
   1a2d0:	d04f      	beq.n	1a372 <ull_conn_done+0xbe>
   1a2d2:	2b00      	cmp	r3, #0
   1a2d4:	f000 80c1 	beq.w	1a45a <ull_conn_done+0x1a6>
	reason_final = conn->llcp_terminate.reason_final;
   1a2d8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
	if (reason_final && (
   1a2dc:	2b00      	cmp	r3, #0
   1a2de:	d14b      	bne.n	1a378 <ull_conn_done+0xc4>
	latency_event = lll->latency_event;
   1a2e0:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1a2e2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   1a2e4:	1c77      	adds	r7, r6, #1
   1a2e6:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1a2e8:	2b00      	cmp	r3, #0
   1a2ea:	d15d      	bne.n	1a3a8 <ull_conn_done+0xf4>
	if (done->extra.crc_valid) {
   1a2ec:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a2f0:	f013 0301 	ands.w	r3, r3, #1
   1a2f4:	f000 80d1 	beq.w	1a49a <ull_conn_done+0x1e6>
		conn->supervision_expire = 0U;
   1a2f8:	2500      	movs	r5, #0
   1a2fa:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->procedure_expire != 0U) {
   1a2fe:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   1a302:	b12b      	cbz	r3, 1a310 <ull_conn_done+0x5c>
		if (conn->procedure_expire > elapsed_event) {
   1a304:	429f      	cmp	r7, r3
   1a306:	f080 810f 	bcs.w	1a528 <ull_conn_done+0x274>
			conn->procedure_expire -= elapsed_event;
   1a30a:	1bdb      	subs	r3, r3, r7
   1a30c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	if (conn->apto_expire != 0U) {
   1a310:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
   1a314:	b12b      	cbz	r3, 1a322 <ull_conn_done+0x6e>
		if (conn->apto_expire > elapsed_event) {
   1a316:	429f      	cmp	r7, r3
   1a318:	f080 80e1 	bcs.w	1a4de <ull_conn_done+0x22a>
			conn->apto_expire -= elapsed_event;
   1a31c:	1bdb      	subs	r3, r3, r7
   1a31e:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	if (conn->appto_expire != 0U) {
   1a322:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
			    (conn->llcp_req == conn->llcp_ack)) {
   1a326:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   1a32a:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
	if (conn->appto_expire != 0U) {
   1a32e:	b15a      	cbz	r2, 1a348 <ull_conn_done+0x94>
		if (conn->appto_expire > elapsed_event) {
   1a330:	4297      	cmp	r7, r2
   1a332:	f0c0 80be 	bcc.w	1a4b2 <ull_conn_done+0x1fe>
			if ((conn->procedure_expire == 0U) &&
   1a336:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
			conn->appto_expire = 0U;
   1a33a:	2000      	movs	r0, #0
   1a33c:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
			if ((conn->procedure_expire == 0U) &&
   1a340:	b912      	cbnz	r2, 1a348 <ull_conn_done+0x94>
   1a342:	428b      	cmp	r3, r1
   1a344:	f000 80fd 	beq.w	1a542 <ull_conn_done+0x28e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a348:	1a5b      	subs	r3, r3, r1
   1a34a:	f003 0303 	and.w	r3, r3, #3
   1a34e:	2b02      	cmp	r3, #2
   1a350:	f000 80b8 	beq.w	1a4c4 <ull_conn_done+0x210>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1a354:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1a358:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1a35c:	429a      	cmp	r2, r3
   1a35e:	f000 80cf 	beq.w	1a500 <ull_conn_done+0x24c>
		lll->latency_event = 0U;
   1a362:	2300      	movs	r3, #0
   1a364:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   1a366:	2d00      	cmp	r5, #0
   1a368:	d13d      	bne.n	1a3e6 <ull_conn_done+0x132>
   1a36a:	2e00      	cmp	r6, #0
   1a36c:	d13b      	bne.n	1a3e6 <ull_conn_done+0x132>
}
   1a36e:	b009      	add	sp, #36	; 0x24
   1a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   1a372:	233d      	movs	r3, #61	; 0x3d
   1a374:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
			       conn->llcp_terminate.ack) & 0xFF) ==
   1a378:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1a37c:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
   1a380:	1b52      	subs	r2, r2, r5
	if (reason_final && (
   1a382:	b2d2      	uxtb	r2, r2
   1a384:	2a03      	cmp	r2, #3
   1a386:	d055      	beq.n	1a434 <ull_conn_done+0x180>
			     TERM_ACKED) ||
   1a388:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
   1a38c:	0755      	lsls	r5, r2, #29
   1a38e:	d451      	bmi.n	1a434 <ull_conn_done+0x180>
			    conn->central.terminate_ack ||
   1a390:	2b3d      	cmp	r3, #61	; 0x3d
   1a392:	d04f      	beq.n	1a434 <ull_conn_done+0x180>
	latency_event = lll->latency_event;
   1a394:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1a396:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   1a398:	1c77      	adds	r7, r6, #1
   1a39a:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1a39c:	2b00      	cmp	r3, #0
   1a39e:	d0a5      	beq.n	1a2ec <ull_conn_done+0x38>
			conn->central.terminate_ack = 1;
   1a3a0:	f042 0204 	orr.w	r2, r2, #4
   1a3a4:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	if (done->extra.crc_valid) {
   1a3a8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
		conn->connect_expire = 0U;
   1a3ac:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   1a3ae:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   1a3b0:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	if (done->extra.crc_valid) {
   1a3b4:	d4a0      	bmi.n	1a2f8 <ull_conn_done+0x44>
		if (!conn->supervision_expire) {
   1a3b6:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
   1a3ba:	b92d      	cbnz	r5, 1a3c8 <ull_conn_done+0x114>
			conn->supervision_expire = conn->supervision_reload;
   1a3bc:	f8b4 50a6 	ldrh.w	r5, [r4, #166]	; 0xa6
   1a3c0:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->supervision_expire) {
   1a3c4:	2d00      	cmp	r5, #0
   1a3c6:	d09a      	beq.n	1a2fe <ull_conn_done+0x4a>
		if (conn->supervision_expire > elapsed_event) {
   1a3c8:	42bd      	cmp	r5, r7
   1a3ca:	f240 80a4 	bls.w	1a516 <ull_conn_done+0x262>
			conn->supervision_expire -= elapsed_event;
   1a3ce:	1bed      	subs	r5, r5, r7
   1a3d0:	b2ad      	uxth	r5, r5
	force = 0U;
   1a3d2:	2d06      	cmp	r5, #6
			lll->latency_event = 0U;
   1a3d4:	f04f 0300 	mov.w	r3, #0
			conn->supervision_expire -= elapsed_event;
   1a3d8:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
			lll->latency_event = 0U;
   1a3dc:	8623      	strh	r3, [r4, #48]	; 0x30
	force = 0U;
   1a3de:	bf8c      	ite	hi
   1a3e0:	2500      	movhi	r5, #0
   1a3e2:	2501      	movls	r5, #1
   1a3e4:	e78b      	b.n	1a2fe <ull_conn_done+0x4a>
		lazy = lll->latency_event + 1U;
   1a3e6:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1a3e8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a3ea:	4b62      	ldr	r3, [pc, #392]	; (1a574 <ull_conn_done+0x2c0>)
		struct ll_conn *conn = lll->hdr.parent;
   1a3ec:	69e4      	ldr	r4, [r4, #28]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1a3ee:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a3f0:	e9cd 3405 	strd	r3, r4, [sp, #20]
   1a3f4:	2300      	movs	r3, #0
   1a3f6:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1a3fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a3fe:	9300      	str	r3, [sp, #0]
   1a400:	4618      	mov	r0, r3
   1a402:	b2d2      	uxtb	r2, r2
   1a404:	2101      	movs	r1, #1
   1a406:	f7fa faf3 	bl	149f0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a40a:	f030 0302 	bics.w	r3, r0, #2
   1a40e:	d0ae      	beq.n	1a36e <ull_conn_done+0xba>
   1a410:	f7fc ff62 	bl	172d8 <ull_disable_mark_get>
   1a414:	4284      	cmp	r4, r0
   1a416:	d0aa      	beq.n	1a36e <ull_conn_done+0xba>
   1a418:	4a57      	ldr	r2, [pc, #348]	; (1a578 <ull_conn_done+0x2c4>)
   1a41a:	4958      	ldr	r1, [pc, #352]	; (1a57c <ull_conn_done+0x2c8>)
   1a41c:	4858      	ldr	r0, [pc, #352]	; (1a580 <ull_conn_done+0x2cc>)
   1a41e:	f240 63cd 	movw	r3, #1741	; 0x6cd
   1a422:	f00a fbeb 	bl	24bfc <printk>
   1a426:	4040      	eors	r0, r0
   1a428:	f380 8811 	msr	BASEPRI, r0
   1a42c:	f04f 0003 	mov.w	r0, #3
   1a430:	df02      	svc	2
   1a432:	e79c      	b.n	1a36e <ull_conn_done+0xba>
	if (conn == conn_upd_curr) {
   1a434:	4a53      	ldr	r2, [pc, #332]	; (1a584 <ull_conn_done+0x2d0>)
   1a436:	6810      	ldr	r0, [r2, #0]
   1a438:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1a43a:	bf04      	itt	eq
   1a43c:	2000      	moveq	r0, #0
   1a43e:	6010      	streq	r0, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a440:	2217      	movs	r2, #23
	conn_cleanup_finalize(conn);
   1a442:	4620      	mov	r0, r4
	rx->hdr.handle = conn->lll.handle;
   1a444:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a448:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
	*((uint8_t *)rx->pdu) = reason;
   1a44c:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
}
   1a450:	b009      	add	sp, #36	; 0x24
   1a452:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   1a456:	f7ff bebb 	b.w	1a1d0 <conn_cleanup_finalize>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1a45a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1a45e:	071f      	lsls	r7, r3, #28
   1a460:	d537      	bpl.n	1a4d2 <ull_conn_done+0x21e>
					    (lll->latency + 6)) ?
   1a462:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   1a464:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
					    (lll->latency + 6)) ?
   1a468:	1dab      	adds	r3, r5, #6
			appto_reload_new = (conn->apto_reload >
   1a46a:	429a      	cmp	r2, r3
   1a46c:	bfc4      	itt	gt
   1a46e:	1f93      	subgt	r3, r2, #6
   1a470:	1b5b      	subgt	r3, r3, r5
			if (conn->appto_reload != appto_reload_new) {
   1a472:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
			appto_reload_new = (conn->apto_reload >
   1a476:	bfcc      	ite	gt
   1a478:	b29b      	uxthgt	r3, r3
   1a47a:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1a47c:	429d      	cmp	r5, r3
   1a47e:	d044      	beq.n	1a50a <ull_conn_done+0x256>
				conn->appto_reload = appto_reload_new;
   1a480:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
				conn->appto_expire = conn->appto_reload;
   1a484:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				conn->apto_expire = conn->apto_reload;
   1a488:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
   1a48c:	e724      	b.n	1a2d8 <ull_conn_done+0x24>
		conn->appto_expire = conn->apto_expire = 0U;
   1a48e:	2300      	movs	r3, #0
   1a490:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   1a494:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
		break;
   1a498:	e71e      	b.n	1a2d8 <ull_conn_done+0x24>
	else if (conn->connect_expire) {
   1a49a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1a49e:	2a00      	cmp	r2, #0
   1a4a0:	d089      	beq.n	1a3b6 <ull_conn_done+0x102>
		if (conn->connect_expire > elapsed_event) {
   1a4a2:	42ba      	cmp	r2, r7
   1a4a4:	d954      	bls.n	1a550 <ull_conn_done+0x29c>
			conn->connect_expire -= elapsed_event;
   1a4a6:	1bd2      	subs	r2, r2, r7
	if (conn->supervision_expire) {
   1a4a8:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
			conn->connect_expire -= elapsed_event;
   1a4ac:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
   1a4b0:	e788      	b.n	1a3c4 <ull_conn_done+0x110>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a4b2:	1a5b      	subs	r3, r3, r1
   1a4b4:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   1a4b8:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a4ba:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   1a4bc:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a4c0:	f47f af48 	bne.w	1a354 <ull_conn_done+0xa0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1a4c4:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a4c8:	3b01      	subs	r3, #1
   1a4ca:	2b01      	cmp	r3, #1
   1a4cc:	f63f af42 	bhi.w	1a354 <ull_conn_done+0xa0>
   1a4d0:	e747      	b.n	1a362 <ull_conn_done+0xae>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1a4d2:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   1a4d6:	07de      	lsls	r6, r3, #31
   1a4d8:	f57f aefe 	bpl.w	1a2d8 <ull_conn_done+0x24>
   1a4dc:	e7c1      	b.n	1a462 <ull_conn_done+0x1ae>
			rx = ll_pdu_rx_alloc();
   1a4de:	f7fc fe89 	bl	171f4 <ll_pdu_rx_alloc>
			if (rx) {
   1a4e2:	4601      	mov	r1, r0
   1a4e4:	b348      	cbz	r0, 1a53a <ull_conn_done+0x286>
				rx->handle = lll->handle;
   1a4e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   1a4e8:	2200      	movs	r2, #0
   1a4ea:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
				rx->handle = lll->handle;
   1a4ee:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1a4f0:	231a      	movs	r3, #26
   1a4f2:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1a4f4:	6800      	ldr	r0, [r0, #0]
   1a4f6:	f7fc fe4f 	bl	17198 <ll_rx_put>
				ll_rx_sched();
   1a4fa:	f7fc fe57 	bl	171ac <ll_rx_sched>
   1a4fe:	e710      	b.n	1a322 <ull_conn_done+0x6e>
	if ((force) || (latency_event != lll->latency_event)) {
   1a500:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1a502:	b36d      	cbz	r5, 1a560 <ull_conn_done+0x2ac>
		lazy = lll->latency_event + 1U;
   1a504:	3101      	adds	r1, #1
   1a506:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1a508:	e76e      	b.n	1a3e8 <ull_conn_done+0x134>
			if (conn->apto_expire == 0U) {
   1a50a:	f8b4 50b4 	ldrh.w	r5, [r4, #180]	; 0xb4
   1a50e:	2d00      	cmp	r5, #0
   1a510:	f47f aee2 	bne.w	1a2d8 <ull_conn_done+0x24>
   1a514:	e7b6      	b.n	1a484 <ull_conn_done+0x1d0>
	if (conn == conn_upd_curr) {
   1a516:	4b1b      	ldr	r3, [pc, #108]	; (1a584 <ull_conn_done+0x2d0>)
   1a518:	681a      	ldr	r2, [r3, #0]
   1a51a:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1a51c:	bf04      	itt	eq
   1a51e:	2200      	moveq	r2, #0
   1a520:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a522:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1a524:	2308      	movs	r3, #8
   1a526:	e78c      	b.n	1a442 <ull_conn_done+0x18e>
	if (conn == conn_upd_curr) {
   1a528:	4b16      	ldr	r3, [pc, #88]	; (1a584 <ull_conn_done+0x2d0>)
   1a52a:	681a      	ldr	r2, [r3, #0]
   1a52c:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1a52e:	bf04      	itt	eq
   1a530:	2200      	moveq	r2, #0
   1a532:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a534:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1a536:	2322      	movs	r3, #34	; 0x22
   1a538:	e783      	b.n	1a442 <ull_conn_done+0x18e>
				conn->apto_expire = 1U;
   1a53a:	2301      	movs	r3, #1
   1a53c:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   1a540:	e6ef      	b.n	1a322 <ull_conn_done+0x6e>
				conn->llcp_type = LLCP_PING;
   1a542:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1a544:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   1a546:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
				conn->llcp_ack -= 2U;
   1a54a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a54e:	e701      	b.n	1a354 <ull_conn_done+0xa0>
	if (conn == conn_upd_curr) {
   1a550:	4a0c      	ldr	r2, [pc, #48]	; (1a584 <ull_conn_done+0x2d0>)
   1a552:	6810      	ldr	r0, [r2, #0]
   1a554:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1a556:	bf08      	it	eq
   1a558:	6013      	streq	r3, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a55a:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1a55c:	233e      	movs	r3, #62	; 0x3e
   1a55e:	e770      	b.n	1a442 <ull_conn_done+0x18e>
	if ((force) || (latency_event != lll->latency_event)) {
   1a560:	42b1      	cmp	r1, r6
   1a562:	f43f af04 	beq.w	1a36e <ull_conn_done+0xba>
		lazy = lll->latency_event + 1U;
   1a566:	3101      	adds	r1, #1
   1a568:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1a56a:	2900      	cmp	r1, #0
   1a56c:	f43f aeff 	beq.w	1a36e <ull_conn_done+0xba>
   1a570:	e73a      	b.n	1a3e8 <ull_conn_done+0x134>
   1a572:	bf00      	nop
   1a574:	000181e1 	.word	0x000181e1
   1a578:	0002d7e8 	.word	0x0002d7e8
   1a57c:	0002d934 	.word	0x0002d934
   1a580:	0002d27c 	.word	0x0002d27c
   1a584:	200034fc 	.word	0x200034fc

0001a588 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1a588:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   1a58c:	2b00      	cmp	r3, #0
   1a58e:	f000 80e5 	beq.w	1a75c <ull_conn_tx_lll_enqueue+0x1d4>
   1a592:	3901      	subs	r1, #1
{
   1a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1a598:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 1a760 <ull_conn_tx_lll_enqueue+0x1d8>
		LL_ASSERT(link);
   1a59c:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 1a764 <ull_conn_tx_lll_enqueue+0x1dc>
   1a5a0:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 1a768 <ull_conn_tx_lll_enqueue+0x1e0>
   1a5a4:	4604      	mov	r4, r0
   1a5a6:	b2cd      	uxtb	r5, r1
   1a5a8:	e012      	b.n	1a5d0 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1a5aa:	4640      	mov	r0, r8
   1a5ac:	f7f8 ff0a 	bl	133c4 <mem_acquire>
		LL_ASSERT(link);
   1a5b0:	4607      	mov	r7, r0
   1a5b2:	2800      	cmp	r0, #0
   1a5b4:	d064      	beq.n	1a680 <ull_conn_tx_lll_enqueue+0xf8>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a5b6:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   1a5ba:	4631      	mov	r1, r6
   1a5bc:	4638      	mov	r0, r7
   1a5be:	f7f8 ff65 	bl	1348c <memq_enqueue>
	while (conn->tx_head &&
   1a5c2:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   1a5c6:	3d01      	subs	r5, #1
   1a5c8:	b2ed      	uxtb	r5, r5
   1a5ca:	2b00      	cmp	r3, #0
   1a5cc:	f000 8080 	beq.w	1a6d0 <ull_conn_tx_lll_enqueue+0x148>
		 !conn->llcp_phy.pause_tx &&
   1a5d0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
	while (conn->tx_head &&
   1a5d4:	07d1      	lsls	r1, r2, #31
   1a5d6:	d403      	bmi.n	1a5e0 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   1a5d8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
		 !conn->llcp_phy.pause_tx &&
   1a5dc:	0792      	lsls	r2, r2, #30
   1a5de:	d55d      	bpl.n	1a69c <ull_conn_tx_lll_enqueue+0x114>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1a5e0:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   1a5e4:	4293      	cmp	r3, r2
   1a5e6:	d173      	bne.n	1a6d0 <ull_conn_tx_lll_enqueue+0x148>
   1a5e8:	2dff      	cmp	r5, #255	; 0xff
   1a5ea:	d071      	beq.n	1a6d0 <ull_conn_tx_lll_enqueue+0x148>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1a5ec:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   1a5f0:	4620      	mov	r0, r4
   1a5f2:	f7fd fe15 	bl	18220 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1a5f6:	7903      	ldrb	r3, [r0, #4]
   1a5f8:	f003 0303 	and.w	r3, r3, #3
   1a5fc:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1a5fe:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1a600:	d1d3      	bne.n	1a5aa <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   1a602:	79c3      	ldrb	r3, [r0, #7]
   1a604:	3b03      	subs	r3, #3
   1a606:	2b13      	cmp	r3, #19
   1a608:	d8cf      	bhi.n	1a5aa <ull_conn_tx_lll_enqueue+0x22>
   1a60a:	a201      	add	r2, pc, #4	; (adr r2, 1a610 <ull_conn_tx_lll_enqueue+0x88>)
   1a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a610:	0001a669 	.word	0x0001a669
   1a614:	0001a5ab 	.word	0x0001a5ab
   1a618:	0001a5ab 	.word	0x0001a5ab
   1a61c:	0001a5ab 	.word	0x0001a5ab
   1a620:	0001a5ab 	.word	0x0001a5ab
   1a624:	0001a5ab 	.word	0x0001a5ab
   1a628:	0001a5ab 	.word	0x0001a5ab
   1a62c:	0001a669 	.word	0x0001a669
   1a630:	0001a661 	.word	0x0001a661
   1a634:	0001a5ab 	.word	0x0001a5ab
   1a638:	0001a5ab 	.word	0x0001a5ab
   1a63c:	0001a5ab 	.word	0x0001a5ab
   1a640:	0001a5ab 	.word	0x0001a5ab
   1a644:	0001a5ab 	.word	0x0001a5ab
   1a648:	0001a5ab 	.word	0x0001a5ab
   1a64c:	0001a5ab 	.word	0x0001a5ab
   1a650:	0001a5ab 	.word	0x0001a5ab
   1a654:	0001a5ab 	.word	0x0001a5ab
   1a658:	0001a5ab 	.word	0x0001a5ab
   1a65c:	0001a6d5 	.word	0x0001a6d5
		if (!conn->lll.role) {
   1a660:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a664:	2b00      	cmp	r3, #0
   1a666:	daa0      	bge.n	1a5aa <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1a668:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   1a66c:	f043 0302 	orr.w	r3, r3, #2
   1a670:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
		link = mem_acquire(&mem_link_tx.free);
   1a674:	4640      	mov	r0, r8
   1a676:	f7f8 fea5 	bl	133c4 <mem_acquire>
		LL_ASSERT(link);
   1a67a:	4607      	mov	r7, r0
   1a67c:	2800      	cmp	r0, #0
   1a67e:	d19a      	bne.n	1a5b6 <ull_conn_tx_lll_enqueue+0x2e>
   1a680:	483a      	ldr	r0, [pc, #232]	; (1a76c <ull_conn_tx_lll_enqueue+0x1e4>)
   1a682:	f240 7326 	movw	r3, #1830	; 0x726
   1a686:	4652      	mov	r2, sl
   1a688:	4649      	mov	r1, r9
   1a68a:	f00a fab7 	bl	24bfc <printk>
   1a68e:	4040      	eors	r0, r0
   1a690:	f380 8811 	msr	BASEPRI, r0
   1a694:	f04f 0003 	mov.w	r0, #3
   1a698:	df02      	svc	2
   1a69a:	e78c      	b.n	1a5b6 <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1a69c:	791a      	ldrb	r2, [r3, #4]
   1a69e:	f002 0203 	and.w	r2, r2, #3
   1a6a2:	2a03      	cmp	r2, #3
   1a6a4:	d1a0      	bne.n	1a5e8 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   1a6a6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1a6a8:	2a03      	cmp	r2, #3
   1a6aa:	d001      	beq.n	1a6b0 <ull_conn_tx_lll_enqueue+0x128>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1a6ac:	2a0a      	cmp	r2, #10
   1a6ae:	d19b      	bne.n	1a5e8 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1a6b0:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   1a6b4:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   1a6b8:	428a      	cmp	r2, r1
   1a6ba:	d012      	beq.n	1a6e2 <ull_conn_tx_lll_enqueue+0x15a>
   1a6bc:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
   1a6c0:	2a03      	cmp	r2, #3
   1a6c2:	d091      	beq.n	1a5e8 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1a6c4:	681a      	ldr	r2, [r3, #0]
   1a6c6:	b11a      	cbz	r2, 1a6d0 <ull_conn_tx_lll_enqueue+0x148>
   1a6c8:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   1a6cc:	428a      	cmp	r2, r1
   1a6ce:	d034      	beq.n	1a73a <ull_conn_tx_lll_enqueue+0x1b2>
}
   1a6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   1a6d4:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   1a6d8:	f043 0301 	orr.w	r3, r3, #1
   1a6dc:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
   1a6e0:	e763      	b.n	1a5aa <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   1a6e2:	f894 00f9 	ldrb.w	r0, [r4, #249]	; 0xf9
   1a6e6:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   1a6ea:	4288      	cmp	r0, r1
   1a6ec:	d1ea      	bne.n	1a6c4 <ull_conn_tx_lll_enqueue+0x13c>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1a6ee:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
   1a6f2:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
   1a6f6:	4288      	cmp	r0, r1
   1a6f8:	d1e4      	bne.n	1a6c4 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   1a6fa:	f894 015d 	ldrb.w	r0, [r4, #349]	; 0x15d
   1a6fe:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
   1a702:	4288      	cmp	r0, r1
   1a704:	d1de      	bne.n	1a6c4 <ull_conn_tx_lll_enqueue+0x13c>
		       conn->llcp_conn_param.req) ||
   1a706:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   1a70a:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1a70e:	4288      	cmp	r0, r1
   1a710:	d1d8      	bne.n	1a6c4 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1a712:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   1a716:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   1a71a:	4288      	cmp	r0, r1
   1a71c:	d1d2      	bne.n	1a6c4 <ull_conn_tx_lll_enqueue+0x13c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1a71e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_ack -= 2U;
   1a722:	3a02      	subs	r2, #2
   1a724:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1a728:	2201      	movs	r2, #1
   1a72a:	f362 0301 	bfi	r3, r2, #0, #2
   1a72e:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_type = LLCP_ENCRYPTION;
   1a732:	2303      	movs	r3, #3
   1a734:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   1a738:	e756      	b.n	1a5e8 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   1a73a:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
   1a73e:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
				if (!conn->tx_data_last) {
   1a742:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
				tx->next = conn->tx_ctrl_last->next;
   1a746:	6810      	ldr	r0, [r2, #0]
   1a748:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1a74a:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   1a74c:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
   1a750:	2900      	cmp	r1, #0
   1a752:	f47f af49 	bne.w	1a5e8 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   1a756:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   1a75a:	e745      	b.n	1a5e8 <ull_conn_tx_lll_enqueue+0x60>
   1a75c:	4770      	bx	lr
   1a75e:	bf00      	nop
   1a760:	20003644 	.word	0x20003644
   1a764:	0002d7e8 	.word	0x0002d7e8
   1a768:	0002d840 	.word	0x0002d840
   1a76c:	0002d27c 	.word	0x0002d27c

0001a770 <tx_demux>:
{
   1a770:	b510      	push	{r4, lr}
   1a772:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1a774:	2001      	movs	r0, #1
   1a776:	f7ff fcdb 	bl	1a130 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1a77a:	4620      	mov	r0, r4
   1a77c:	2101      	movs	r1, #1
}
   1a77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1a782:	f7ff bf01 	b.w	1a588 <ull_conn_tx_lll_enqueue>
   1a786:	bf00      	nop

0001a788 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1a788:	4901      	ldr	r1, [pc, #4]	; (1a790 <ull_conn_link_tx_release+0x8>)
   1a78a:	f7f8 be35 	b.w	133f8 <mem_release>
   1a78e:	bf00      	nop
   1a790:	20003644 	.word	0x20003644

0001a794 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   1a794:	4b01      	ldr	r3, [pc, #4]	; (1a79c <ull_conn_ack_last_idx_get+0x8>)
}
   1a796:	78d8      	ldrb	r0, [r3, #3]
   1a798:	4770      	bx	lr
   1a79a:	bf00      	nop
   1a79c:	20000658 	.word	0x20000658

0001a7a0 <ull_conn_ack_peek>:
{
   1a7a0:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1a7a2:	4b0c      	ldr	r3, [pc, #48]	; (1a7d4 <ull_conn_ack_peek+0x34>)
   1a7a4:	f893 c002 	ldrb.w	ip, [r3, #2]
   1a7a8:	f893 e003 	ldrb.w	lr, [r3, #3]
   1a7ac:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   1a7ae:	45f4      	cmp	ip, lr
   1a7b0:	d00d      	beq.n	1a7ce <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   1a7b2:	fb1c fc04 	smulbb	ip, ip, r4
   1a7b6:	3304      	adds	r3, #4
   1a7b8:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   1a7bc:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   1a7c0:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1a7c4:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   1a7c6:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1a7c8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1a7ca:	6818      	ldr	r0, [r3, #0]
}
   1a7cc:	bd10      	pop	{r4, pc}
		return NULL;
   1a7ce:	2000      	movs	r0, #0
}
   1a7d0:	bd10      	pop	{r4, pc}
   1a7d2:	bf00      	nop
   1a7d4:	20000658 	.word	0x20000658

0001a7d8 <ull_conn_ack_by_last_peek>:
{
   1a7d8:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1a7da:	4b0b      	ldr	r3, [pc, #44]	; (1a808 <ull_conn_ack_by_last_peek+0x30>)
   1a7dc:	f893 c002 	ldrb.w	ip, [r3, #2]
   1a7e0:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   1a7e4:	4584      	cmp	ip, r0
   1a7e6:	d00d      	beq.n	1a804 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   1a7e8:	3304      	adds	r3, #4
   1a7ea:	fb1c fc0e 	smulbb	ip, ip, lr
   1a7ee:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   1a7f2:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1a7f6:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   1a7fa:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1a7fc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1a7fe:	6818      	ldr	r0, [r3, #0]
}
   1a800:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1a804:	2000      	movs	r0, #0
   1a806:	e7fb      	b.n	1a800 <ull_conn_ack_by_last_peek+0x28>
   1a808:	20000658 	.word	0x20000658

0001a80c <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   1a80c:	4b09      	ldr	r3, [pc, #36]	; (1a834 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1a80e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1a810:	78da      	ldrb	r2, [r3, #3]
   1a812:	7818      	ldrb	r0, [r3, #0]
   1a814:	f893 c001 	ldrb.w	ip, [r3, #1]
   1a818:	428a      	cmp	r2, r1
   1a81a:	d009      	beq.n	1a830 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   1a81c:	1c4a      	adds	r2, r1, #1
   1a81e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1a820:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1a824:	4594      	cmp	ip, r2
   1a826:	bf08      	it	eq
   1a828:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1a82a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1a82c:	709a      	strb	r2, [r3, #2]
	return mem;
   1a82e:	4770      	bx	lr
		return NULL;
   1a830:	2000      	movs	r0, #0
}
   1a832:	4770      	bx	lr
   1a834:	20000658 	.word	0x20000658

0001a838 <ull_conn_lll_ack_enqueue>:
{
   1a838:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1a83a:	4a15      	ldr	r2, [pc, #84]	; (1a890 <ull_conn_lll_ack_enqueue+0x58>)
   1a83c:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   1a840:	7854      	ldrb	r4, [r2, #1]
   1a842:	f892 e002 	ldrb.w	lr, [r2, #2]
   1a846:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1a848:	f10c 0301 	add.w	r3, ip, #1
   1a84c:	b2db      	uxtb	r3, r3
		last = 0U;
   1a84e:	429c      	cmp	r4, r3
   1a850:	bf08      	it	eq
   1a852:	2300      	moveq	r3, #0
	if (last == first) {
   1a854:	459e      	cmp	lr, r3
   1a856:	d00a      	beq.n	1a86e <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a858:	fb1c fc05 	smulbb	ip, ip, r5
   1a85c:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   1a860:	f82e 000c 	strh.w	r0, [lr, ip]
   1a864:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1a866:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1a86a:	70d3      	strb	r3, [r2, #3]
}
   1a86c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   1a86e:	4a09      	ldr	r2, [pc, #36]	; (1a894 <ull_conn_lll_ack_enqueue+0x5c>)
   1a870:	4909      	ldr	r1, [pc, #36]	; (1a898 <ull_conn_lll_ack_enqueue+0x60>)
   1a872:	480a      	ldr	r0, [pc, #40]	; (1a89c <ull_conn_lll_ack_enqueue+0x64>)
   1a874:	f240 7376 	movw	r3, #1910	; 0x776
   1a878:	f00a f9c0 	bl	24bfc <printk>
   1a87c:	4040      	eors	r0, r0
   1a87e:	f380 8811 	msr	BASEPRI, r0
   1a882:	f04f 0003 	mov.w	r0, #3
   1a886:	df02      	svc	2
	lll_tx->handle = handle;
   1a888:	2300      	movs	r3, #0
   1a88a:	801b      	strh	r3, [r3, #0]
   1a88c:	deff      	udf	#255	; 0xff
   1a88e:	bf00      	nop
   1a890:	20000658 	.word	0x20000658
   1a894:	0002d7e8 	.word	0x0002d7e8
   1a898:	0002d830 	.word	0x0002d830
   1a89c:	0002d27c 	.word	0x0002d27c

0001a8a0 <ull_conn_tx_ack>:
{
   1a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   1a8a2:	7953      	ldrb	r3, [r2, #5]
{
   1a8a4:	4614      	mov	r4, r2
   1a8a6:	4605      	mov	r5, r0
   1a8a8:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1a8aa:	b36b      	cbz	r3, 1a908 <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1a8ac:	7923      	ldrb	r3, [r4, #4]
   1a8ae:	f003 0203 	and.w	r2, r3, #3
   1a8b2:	2a03      	cmp	r2, #3
   1a8b4:	d00c      	beq.n	1a8d0 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
   1a8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a8ba:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1a8bc:	bf04      	itt	eq
   1a8be:	f36f 0301 	bfceq	r3, #0, #2
   1a8c2:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1a8c4:	4621      	mov	r1, r4
   1a8c6:	4628      	mov	r0, r5
}
   1a8c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1a8cc:	f7fc bca8 	b.w	17220 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   1a8d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a8d4:	429d      	cmp	r5, r3
   1a8d6:	d125      	bne.n	1a924 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
   1a8d8:	6830      	ldr	r0, [r6, #0]
   1a8da:	4284      	cmp	r4, r0
   1a8dc:	d049      	beq.n	1a972 <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   1a8de:	2800      	cmp	r0, #0
   1a8e0:	d0f0      	beq.n	1a8c4 <ull_conn_tx_ack+0x24>
   1a8e2:	4ab3      	ldr	r2, [pc, #716]	; (1abb0 <ull_conn_tx_ack+0x310>)
   1a8e4:	49b3      	ldr	r1, [pc, #716]	; (1abb4 <ull_conn_tx_ack+0x314>)
   1a8e6:	48b4      	ldr	r0, [pc, #720]	; (1abb8 <ull_conn_tx_ack+0x318>)
   1a8e8:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   1a8ec:	f00a f986 	bl	24bfc <printk>
   1a8f0:	4040      	eors	r0, r0
   1a8f2:	f380 8811 	msr	BASEPRI, r0
   1a8f6:	f04f 0003 	mov.w	r0, #3
   1a8fa:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1a8fc:	4621      	mov	r1, r4
   1a8fe:	4628      	mov	r0, r5
}
   1a900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1a904:	f7fc bc8c 	b.w	17220 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1a908:	4aa9      	ldr	r2, [pc, #676]	; (1abb0 <ull_conn_tx_ack+0x310>)
   1a90a:	49ac      	ldr	r1, [pc, #688]	; (1abbc <ull_conn_tx_ack+0x31c>)
   1a90c:	48aa      	ldr	r0, [pc, #680]	; (1abb8 <ull_conn_tx_ack+0x318>)
   1a90e:	f240 7383 	movw	r3, #1923	; 0x783
   1a912:	f00a f973 	bl	24bfc <printk>
   1a916:	4040      	eors	r0, r0
   1a918:	f380 8811 	msr	BASEPRI, r0
   1a91c:	f04f 0003 	mov.w	r0, #3
   1a920:	df02      	svc	2
   1a922:	e7c3      	b.n	1a8ac <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a924:	48a6      	ldr	r0, [pc, #664]	; (1abc0 <ull_conn_tx_ack+0x320>)
   1a926:	462a      	mov	r2, r5
   1a928:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a92c:	f7f8 fd7c 	bl	13428 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   1a930:	79e3      	ldrb	r3, [r4, #7]
   1a932:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a934:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   1a936:	2b16      	cmp	r3, #22
   1a938:	d820      	bhi.n	1a97c <ull_conn_tx_ack+0xdc>
   1a93a:	e8df f003 	tbb	[pc, r3]
   1a93e:	516d      	.short	0x516d
   1a940:	288b1f1f 	.word	0x288b1f1f
   1a944:	7984281f 	.word	0x7984281f
   1a948:	1f1f471f 	.word	0x1f1f471f
   1a94c:	281f251f 	.word	0x281f251f
   1a950:	1f2f96c3 	.word	0x1f2f96c3
   1a954:	36          	.byte	0x36
   1a955:	00          	.byte	0x00
			LL_ASSERT(link->next);
   1a956:	4a96      	ldr	r2, [pc, #600]	; (1abb0 <ull_conn_tx_ack+0x310>)
   1a958:	499a      	ldr	r1, [pc, #616]	; (1abc4 <ull_conn_tx_ack+0x324>)
   1a95a:	4897      	ldr	r0, [pc, #604]	; (1abb8 <ull_conn_tx_ack+0x318>)
   1a95c:	f240 7392 	movw	r3, #1938	; 0x792
   1a960:	f00a f94c 	bl	24bfc <printk>
   1a964:	4040      	eors	r0, r0
   1a966:	f380 8811 	msr	BASEPRI, r0
   1a96a:	f04f 0003 	mov.w	r0, #3
   1a96e:	df02      	svc	2
   1a970:	2000      	movs	r0, #0
}
   1a972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1a976:	4994      	ldr	r1, [pc, #592]	; (1abc8 <ull_conn_tx_ack+0x328>)
   1a978:	f7f8 bd3e 	b.w	133f8 <mem_release>
		if (link->next == (void *)tx) {
   1a97c:	6830      	ldr	r0, [r6, #0]
   1a97e:	42a0      	cmp	r0, r4
   1a980:	d0f7      	beq.n	1a972 <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   1a982:	2800      	cmp	r0, #0
   1a984:	d1ad      	bne.n	1a8e2 <ull_conn_tx_ack+0x42>
   1a986:	e79d      	b.n	1a8c4 <ull_conn_tx_ack+0x24>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1a988:	7a23      	ldrb	r3, [r4, #8]
   1a98a:	2b03      	cmp	r3, #3
   1a98c:	d01e      	beq.n	1a9cc <ull_conn_tx_ack+0x12c>
			conn->common.txn_lock = 0U;
   1a98e:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
   1a992:	f36f 0341 	bfc	r3, #1, #1
   1a996:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			break;
   1a99a:	e79d      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1a99c:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   1a9a0:	2202      	movs	r2, #2
   1a9a2:	f362 0301 	bfi	r3, r2, #0, #2
   1a9a6:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1a9aa:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
   1a9ae:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   1a9b2:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1a9b6:	f363 1206 	bfi	r2, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1a9ba:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1a9be:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   1a9c2:	f36f 0300 	bfc	r3, #0, #1
   1a9c6:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		break;
   1a9ca:	e785      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_rx = 0U;
   1a9cc:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1a9d0:	f023 0303 	bic.w	r3, r3, #3
   1a9d4:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
   1a9d8:	2300      	movs	r3, #0
   1a9da:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		break;
   1a9de:	e77b      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		memcpy(&conn->llcp.encryption.skd[0],
   1a9e0:	2208      	movs	r2, #8
   1a9e2:	f104 0112 	add.w	r1, r4, #18
   1a9e6:	30ce      	adds	r0, #206	; 0xce
   1a9e8:	f00d fde5 	bl	285b6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1a9ec:	2204      	movs	r2, #4
   1a9ee:	f104 011a 	add.w	r1, r4, #26
   1a9f2:	f107 0078 	add.w	r0, r7, #120	; 0x78
   1a9f6:	f00d fdde 	bl	285b6 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   1a9fa:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1a9fe:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   1aa02:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
   1aa06:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
   1aa0a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1aa0e:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
   1aa12:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		break;
   1aa16:	e75f      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   1aa18:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   1aa1a:	2b13      	cmp	r3, #19
   1aa1c:	bf08      	it	eq
   1aa1e:	2316      	moveq	r3, #22
   1aa20:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
		conn->llcp_terminate.ack--;
   1aa24:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   1aa28:	3b01      	subs	r3, #1
   1aa2a:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	break;
   1aa2e:	e753      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		if (!conn->lll.role) {
   1aa30:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1aa34:	2b00      	cmp	r3, #0
   1aa36:	da52      	bge.n	1aade <ull_conn_tx_ack+0x23e>
			conn->llcp_enc.pause_tx = 1U;
   1aa38:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1aa3c:	f043 0302 	orr.w	r3, r3, #2
   1aa40:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
   1aa44:	e748      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_tx = 1U;
   1aa46:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1aa4a:	f023 0306 	bic.w	r3, r3, #6
   1aa4e:	f043 0306 	orr.w	r3, r3, #6
   1aa52:	e7d6      	b.n	1aa02 <ull_conn_tx_ack+0x162>
		if (conn->lll.role) {
   1aa54:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1aa58:	2b00      	cmp	r3, #0
   1aa5a:	db7d      	blt.n	1ab58 <ull_conn_tx_ack+0x2b8>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1aa5c:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
   1aa60:	f043 0303 	orr.w	r3, r3, #3
   1aa64:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
   1aa68:	e736      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		conn->common.txn_lock = 0U;
   1aa6a:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1aa6e:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
		conn->common.txn_lock = 0U;
   1aa72:	f36f 0341 	bfc	r3, #1, #1
   1aa76:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1aa7a:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
   1aa7e:	428b      	cmp	r3, r1
   1aa80:	f43f af2a 	beq.w	1a8d8 <ull_conn_tx_ack+0x38>
			switch (conn->llcp_length.state) {
   1aa84:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
   1aa88:	f002 0307 	and.w	r3, r2, #7
   1aa8c:	2b03      	cmp	r3, #3
   1aa8e:	d005      	beq.n	1aa9c <ull_conn_tx_ack+0x1fc>
   1aa90:	3303      	adds	r3, #3
   1aa92:	f003 0307 	and.w	r3, r3, #7
   1aa96:	2b01      	cmp	r3, #1
   1aa98:	f63f af70 	bhi.w	1a97c <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
   1aa9c:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
   1aaa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
				conn->lll.max_tx_time =
   1aaa2:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
   1aaa6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				if (conn->llcp_length.state ==
   1aaaa:	f002 0307 	and.w	r3, r2, #7
   1aaae:	2b05      	cmp	r3, #5
   1aab0:	d078      	beq.n	1aba4 <ull_conn_tx_ack+0x304>
				if (!conn->llcp_length.cache.tx_octets) {
   1aab2:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
   1aab6:	2b00      	cmp	r3, #0
   1aab8:	d166      	bne.n	1ab88 <ull_conn_tx_ack+0x2e8>
					conn->llcp_length.ack =
   1aaba:	f887 1185 	strb.w	r1, [r7, #389]	; 0x185
					conn->procedure_expire = 0U;
   1aabe:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
   1aac2:	e709      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   1aac4:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   1aac8:	f003 0207 	and.w	r2, r3, #7
   1aacc:	2a01      	cmp	r2, #1
   1aace:	f47f af03 	bne.w	1a8d8 <ull_conn_tx_ack+0x38>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1aad2:	2202      	movs	r2, #2
   1aad4:	f362 0302 	bfi	r3, r2, #0, #3
   1aad8:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
   1aadc:	e6fc      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1aade:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1aae0:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1aae2:	f043 0303 	orr.w	r3, r3, #3
   1aae6:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1aae8:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1aaea:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1aaec:	2208      	movs	r2, #8
   1aaee:	f200 1141 	addw	r1, r0, #321	; 0x141
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1aaf2:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1aaf4:	18a0      	adds	r0, r4, r2
   1aaf6:	f00d fd5e 	bl	285b6 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1aafa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
   1aafe:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1ab00:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
   1ab04:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1ab06:	210c      	movs	r1, #12
   1ab08:	f104 0012 	add.w	r0, r4, #18
   1ab0c:	f001 ffb2 	bl	1ca74 <lll_csrand_isr_get>
	    conn->tx_head &&
   1ab10:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
	if (
   1ab14:	b373      	cbz	r3, 1ab74 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_enc.pause_tx &&
   1ab16:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
	    conn->tx_head &&
   1ab1a:	0791      	lsls	r1, r2, #30
   1ab1c:	d42a      	bmi.n	1ab74 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_phy.pause_tx &&
   1ab1e:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
   1ab22:	07d2      	lsls	r2, r2, #31
   1ab24:	d426      	bmi.n	1ab74 <ull_conn_tx_ack+0x2d4>
		if (conn->tx_head == conn->tx_data) {
   1ab26:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1ab2a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
   1ab2e:	428b      	cmp	r3, r1
   1ab30:	d04c      	beq.n	1abcc <ull_conn_tx_ack+0x32c>
		} else if (!conn->tx_ctrl) {
   1ab32:	2a00      	cmp	r2, #0
   1ab34:	d056      	beq.n	1abe4 <ull_conn_tx_ack+0x344>
	tx->next = conn->tx_ctrl_last->next;
   1ab36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
   1ab3a:	681a      	ldr	r2, [r3, #0]
   1ab3c:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1ab3e:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1ab40:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   1ab42:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
		if (link->next == (void *)tx) {
   1ab46:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   1ab48:	b11b      	cbz	r3, 1ab52 <ull_conn_tx_ack+0x2b2>
		if (link->next == (void *)tx) {
   1ab4a:	2a00      	cmp	r2, #0
   1ab4c:	f43f af03 	beq.w	1a956 <ull_conn_tx_ack+0xb6>
}
   1ab50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		conn->tx_data_last = tx;
   1ab52:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
   1ab56:	e7f8      	b.n	1ab4a <ull_conn_tx_ack+0x2aa>
			conn->llcp_enc.pause_rx = 0U;
   1ab58:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1ab5c:	f023 0303 	bic.w	r3, r3, #3
   1ab60:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
			conn->procedure_expire = 0U;
   1ab64:	2300      	movs	r3, #0
   1ab66:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
			conn->llcp_ack = conn->llcp_req;
   1ab6a:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   1ab6e:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
   1ab72:	e6b1      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
		if (!conn->tx_ctrl) {
   1ab74:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
   1ab78:	2a00      	cmp	r2, #0
   1ab7a:	d1dc      	bne.n	1ab36 <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head;
   1ab7c:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1ab7e:	e9c7 4467 	strd	r4, r4, [r7, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1ab82:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
   1ab86:	e7de      	b.n	1ab46 <ull_conn_tx_ack+0x2a6>
				conn->llcp_length.tx_octets =
   1ab88:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   1ab8c:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1ab8e:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1ab92:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
				conn->llcp_length.tx_time =
   1ab96:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1ab9a:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
				conn->llcp_length.tx_time =
   1ab9e:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
				break;
   1aba2:	e699      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
					conn->llcp_length.state =
   1aba4:	2304      	movs	r3, #4
   1aba6:	f363 0202 	bfi	r2, r3, #0, #3
   1abaa:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
					break;
   1abae:	e693      	b.n	1a8d8 <ull_conn_tx_ack+0x38>
   1abb0:	0002d7e8 	.word	0x0002d7e8
   1abb4:	0002d99c 	.word	0x0002d99c
   1abb8:	0002d27c 	.word	0x0002d27c
   1abbc:	0002d990 	.word	0x0002d990
   1abc0:	20001eb0 	.word	0x20001eb0
   1abc4:	0002d9a8 	.word	0x0002d9a8
   1abc8:	20003590 	.word	0x20003590
			conn->tx_data = conn->tx_data->next;
   1abcc:	6819      	ldr	r1, [r3, #0]
   1abce:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1abd2:	2a00      	cmp	r2, #0
   1abd4:	d1af      	bne.n	1ab36 <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head->next;
   1abd6:	681a      	ldr	r2, [r3, #0]
   1abd8:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   1abda:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1abdc:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1abde:	e9c7 4468 	strd	r4, r4, [r7, #416]	; 0x1a0
   1abe2:	e7b0      	b.n	1ab46 <ull_conn_tx_ack+0x2a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1abe4:	791a      	ldrb	r2, [r3, #4]
   1abe6:	f002 0203 	and.w	r2, r2, #3
   1abea:	2a03      	cmp	r2, #3
   1abec:	d002      	beq.n	1abf4 <ull_conn_tx_ack+0x354>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1abee:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
   1abf2:	e7a0      	b.n	1ab36 <ull_conn_tx_ack+0x296>
	    ((pdu_data_tx->llctrl.opcode !=
   1abf4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1abf6:	2a03      	cmp	r2, #3
   1abf8:	d0ed      	beq.n	1abd6 <ull_conn_tx_ack+0x336>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1abfa:	2a0a      	cmp	r2, #10
   1abfc:	d1f7      	bne.n	1abee <ull_conn_tx_ack+0x34e>
   1abfe:	e7ea      	b.n	1abd6 <ull_conn_tx_ack+0x336>

0001ac00 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   1ac00:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   1ac04:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   1ac08:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   1ac0a:	bf03      	ittte	eq
   1ac0c:	3301      	addeq	r3, #1
   1ac0e:	f880 30bb 	strbeq.w	r3, [r0, #187]	; 0xbb
	return 0;
   1ac12:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ac14:	200c      	movne	r0, #12
}
   1ac16:	4770      	bx	lr

0001ac18 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1ac18:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1ac1c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
	switch (lll->phy_tx_time) {
   1ac1e:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1ac22:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1ac24:	bf14      	ite	ne
   1ac26:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1ac28:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1ac2a:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
	return max_tx_octets;
   1ac2e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1ac30:	bf14      	ite	ne
   1ac32:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1ac34:	3b0b      	subeq	r3, #11
   1ac36:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1ac38:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1ac3a:	bf44      	itt	mi
   1ac3c:	3b04      	submi	r3, #4
   1ac3e:	b29b      	uxthmi	r3, r3
}
   1ac40:	4298      	cmp	r0, r3
   1ac42:	bf28      	it	cs
   1ac44:	4618      	movcs	r0, r3
   1ac46:	4770      	bx	lr

0001ac48 <ull_pdu_data_init>:
}
   1ac48:	4770      	bx	lr
   1ac4a:	bf00      	nop

0001ac4c <ticker_op_stop_scan_cb>:
}
   1ac4c:	4770      	bx	lr
   1ac4e:	bf00      	nop

0001ac50 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1ac50:	b900      	cbnz	r0, 1ac54 <ticker_op_cb+0x4>
   1ac52:	4770      	bx	lr
{
   1ac54:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1ac56:	4a07      	ldr	r2, [pc, #28]	; (1ac74 <ticker_op_cb+0x24>)
   1ac58:	4907      	ldr	r1, [pc, #28]	; (1ac78 <ticker_op_cb+0x28>)
   1ac5a:	4808      	ldr	r0, [pc, #32]	; (1ac7c <ticker_op_cb+0x2c>)
   1ac5c:	f240 43ad 	movw	r3, #1197	; 0x4ad
   1ac60:	f009 ffcc 	bl	24bfc <printk>
   1ac64:	4040      	eors	r0, r0
   1ac66:	f380 8811 	msr	BASEPRI, r0
   1ac6a:	f04f 0003 	mov.w	r0, #3
   1ac6e:	df02      	svc	2
}
   1ac70:	bd08      	pop	{r3, pc}
   1ac72:	bf00      	nop
   1ac74:	0002d9c8 	.word	0x0002d9c8
   1ac78:	0002d848 	.word	0x0002d848
   1ac7c:	0002d27c 	.word	0x0002d27c

0001ac80 <ull_central_ticker_cb>:
{
   1ac80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac84:	9c07      	ldr	r4, [sp, #28]
   1ac86:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1ac8a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1ac8c:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1ac8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ac92:	4299      	cmp	r1, r3
   1ac94:	d02d      	beq.n	1acf2 <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1ac96:	4606      	mov	r6, r0
   1ac98:	4617      	mov	r7, r2
   1ac9a:	4601      	mov	r1, r0
   1ac9c:	462a      	mov	r2, r5
   1ac9e:	4620      	mov	r0, r4
   1aca0:	f7e6 ff92 	bl	1bc8 <ull_conn_llcp>
		if (ret) {
   1aca4:	bb28      	cbnz	r0, 1acf2 <ull_central_ticker_cb+0x72>
	return ++hdr->ref;
   1aca6:	7823      	ldrb	r3, [r4, #0]
   1aca8:	3301      	adds	r3, #1
   1acaa:	b2db      	uxtb	r3, r3
   1acac:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1acae:	b383      	cbz	r3, 1ad12 <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   1acb0:	2002      	movs	r0, #2
   1acb2:	f7ff fa3d 	bl	1a130 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   1acb6:	2102      	movs	r1, #2
   1acb8:	4620      	mov	r0, r4
   1acba:	f7ff fc65 	bl	1a588 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   1acbe:	491c      	ldr	r1, [pc, #112]	; (1ad30 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   1acc0:	4b1c      	ldr	r3, [pc, #112]	; (1ad34 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   1acc2:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1acc4:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1acc8:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1acca:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1accc:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1acd0:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1acd4:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1acd6:	2001      	movs	r0, #1
   1acd8:	4611      	mov	r1, r2
   1acda:	f7f8 fc4b 	bl	13574 <mayfly_enqueue>
	LL_ASSERT(!err);
   1acde:	b950      	cbnz	r0, 1acf6 <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   1ace0:	20ff      	movs	r0, #255	; 0xff
   1ace2:	f7ff fa25 	bl	1a130 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1ace6:	4620      	mov	r0, r4
   1ace8:	21ff      	movs	r1, #255	; 0xff
}
   1acea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1acee:	f7ff bc4b 	b.w	1a588 <ull_conn_tx_lll_enqueue>
}
   1acf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1acf6:	4a10      	ldr	r2, [pc, #64]	; (1ad38 <ull_central_ticker_cb+0xb8>)
   1acf8:	4910      	ldr	r1, [pc, #64]	; (1ad3c <ull_central_ticker_cb+0xbc>)
   1acfa:	4811      	ldr	r0, [pc, #68]	; (1ad40 <ull_central_ticker_cb+0xc0>)
   1acfc:	f240 434d 	movw	r3, #1101	; 0x44d
   1ad00:	f009 ff7c 	bl	24bfc <printk>
   1ad04:	4040      	eors	r0, r0
   1ad06:	f380 8811 	msr	BASEPRI, r0
   1ad0a:	f04f 0003 	mov.w	r0, #3
   1ad0e:	df02      	svc	2
   1ad10:	e7e6      	b.n	1ace0 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   1ad12:	4a09      	ldr	r2, [pc, #36]	; (1ad38 <ull_central_ticker_cb+0xb8>)
   1ad14:	490b      	ldr	r1, [pc, #44]	; (1ad44 <ull_central_ticker_cb+0xc4>)
   1ad16:	480a      	ldr	r0, [pc, #40]	; (1ad40 <ull_central_ticker_cb+0xc0>)
   1ad18:	f240 433a 	movw	r3, #1082	; 0x43a
   1ad1c:	f009 ff6e 	bl	24bfc <printk>
   1ad20:	4040      	eors	r0, r0
   1ad22:	f380 8811 	msr	BASEPRI, r0
   1ad26:	f04f 0003 	mov.w	r0, #3
   1ad2a:	df02      	svc	2
   1ad2c:	e7c0      	b.n	1acb0 <ull_central_ticker_cb+0x30>
   1ad2e:	bf00      	nop
   1ad30:	20003698 	.word	0x20003698
   1ad34:	20000720 	.word	0x20000720
   1ad38:	0002d9c8 	.word	0x0002d9c8
   1ad3c:	0002d5f4 	.word	0x0002d5f4
   1ad40:	0002d27c 	.word	0x0002d27c
   1ad44:	0002d7b8 	.word	0x0002d7b8

0001ad48 <ll_connect_disable>:
{
   1ad48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ad4c:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1ad4e:	2000      	movs	r0, #0
   1ad50:	f7fc ff92 	bl	17c78 <ull_scan_is_enabled_get>
	if (!scan) {
   1ad54:	b368      	cbz	r0, 1adb2 <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   1ad56:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   1ad58:	4604      	mov	r4, r0
   1ad5a:	b353      	cbz	r3, 1adb2 <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   1ad5c:	f893 2020 	ldrb.w	r2, [r3, #32]
   1ad60:	f042 0202 	orr.w	r2, r2, #2
   1ad64:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   1ad68:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   1ad6a:	b317      	cbz	r7, 1adb2 <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   1ad6c:	4601      	mov	r1, r0
   1ad6e:	2000      	movs	r0, #0
   1ad70:	f7fc fed2 	bl	17b18 <ull_scan_disable>
	if (!err) {
   1ad74:	4605      	mov	r5, r0
   1ad76:	b9c8      	cbnz	r0, 1adac <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   1ad78:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   1ad7a:	f8d7 811c 	ldr.w	r8, [r7, #284]	; 0x11c
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   1ad7e:	f507 798e 	add.w	r9, r7, #284	; 0x11c
		LL_ASSERT(link);
   1ad82:	f1b8 0f00 	cmp.w	r8, #0
   1ad86:	d018      	beq.n	1adba <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   1ad88:	4640      	mov	r0, r8
   1ad8a:	f7fc f9ff 	bl	1718c <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ad8e:	2316      	movs	r3, #22
   1ad90:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		node_rx->hdr.handle = 0xffff;
   1ad94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ad98:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		scan_lll = &scan->lll;
   1ad9c:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ad9e:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   1ada0:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ada4:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		*rx = node_rx;
   1ada8:	f8c6 9000 	str.w	r9, [r6]
}
   1adac:	4628      	mov	r0, r5
   1adae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1adb2:	250c      	movs	r5, #12
}
   1adb4:	4628      	mov	r0, r5
   1adb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1adba:	4a07      	ldr	r2, [pc, #28]	; (1add8 <ll_connect_disable+0x90>)
   1adbc:	4907      	ldr	r1, [pc, #28]	; (1addc <ll_connect_disable+0x94>)
   1adbe:	4808      	ldr	r0, [pc, #32]	; (1ade0 <ll_connect_disable+0x98>)
   1adc0:	f240 235b 	movw	r3, #603	; 0x25b
   1adc4:	f009 ff1a 	bl	24bfc <printk>
   1adc8:	4040      	eors	r0, r0
   1adca:	f380 8811 	msr	BASEPRI, r0
   1adce:	f04f 0003 	mov.w	r0, #3
   1add2:	df02      	svc	2
   1add4:	e7d8      	b.n	1ad88 <ll_connect_disable+0x40>
   1add6:	bf00      	nop
   1add8:	0002d9c8 	.word	0x0002d9c8
   1addc:	0002d840 	.word	0x0002d840
   1ade0:	0002d27c 	.word	0x0002d27c

0001ade4 <ll_enc_req_send>:
{
   1ade4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ade8:	4607      	mov	r7, r0
   1adea:	4688      	mov	r8, r1
   1adec:	4691      	mov	r9, r2
   1adee:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1adf0:	f7fd fbca 	bl	18588 <ll_connected_get>
	if (!conn) {
   1adf4:	2800      	cmp	r0, #0
   1adf6:	d06a      	beq.n	1aece <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   1adf8:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
   1adfc:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
   1ae00:	429a      	cmp	r2, r3
   1ae02:	4604      	mov	r4, r0
   1ae04:	d142      	bne.n	1ae8c <ll_enc_req_send+0xa8>
   1ae06:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   1ae0a:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   1ae0e:	429a      	cmp	r2, r3
   1ae10:	d003      	beq.n	1ae1a <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   1ae12:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
   1ae16:	2b03      	cmp	r3, #3
   1ae18:	d038      	beq.n	1ae8c <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   1ae1a:	f7fd fbc7 	bl	185ac <ll_tx_mem_acquire>
	if (tx) {
   1ae1e:	4605      	mov	r5, r0
   1ae20:	b3a0      	cbz	r0, 1ae8c <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   1ae22:	3004      	adds	r0, #4
   1ae24:	f7ff ff10 	bl	1ac48 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   1ae28:	4631      	mov	r1, r6
   1ae2a:	2210      	movs	r2, #16
   1ae2c:	f204 1049 	addw	r0, r4, #329	; 0x149
   1ae30:	f00d fbc1 	bl	285b6 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   1ae34:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1ae38:	f013 0318 	ands.w	r3, r3, #24
   1ae3c:	d029      	beq.n	1ae92 <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1ae3e:	2b18      	cmp	r3, #24
   1ae40:	d121      	bne.n	1ae86 <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   1ae42:	2208      	movs	r2, #8
   1ae44:	4641      	mov	r1, r8
   1ae46:	f204 1041 	addw	r0, r4, #321	; 0x141
   1ae4a:	f00d fbb4 	bl	285b6 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   1ae4e:	f899 3000 	ldrb.w	r3, [r9]
   1ae52:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
			conn->llcp_enc.ediv[1] = ediv[1];
   1ae56:	f899 3001 	ldrb.w	r3, [r9, #1]
   1ae5a:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ae5e:	792b      	ldrb	r3, [r5, #4]
   1ae60:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1ae64:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ae66:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   1ae68:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1ae6a:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1ae6c:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   1ae6e:	4629      	mov	r1, r5
   1ae70:	4638      	mov	r0, r7
   1ae72:	f7fd fba7 	bl	185c4 <ll_tx_mem_enqueue>
   1ae76:	b930      	cbnz	r0, 1ae86 <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   1ae78:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
   1ae7c:	3301      	adds	r3, #1
   1ae7e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
}
   1ae82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   1ae86:	4628      	mov	r0, r5
   1ae88:	f7fd fb96 	bl	185b8 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1ae8c:	200c      	movs	r0, #12
}
   1ae8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ae92:	792b      	ldrb	r3, [r5, #4]
   1ae94:	f043 0303 	orr.w	r3, r3, #3
   1ae98:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   1ae9a:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1ae9c:	2208      	movs	r2, #8
			pdu_data_tx->len =
   1ae9e:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1aea0:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1aea2:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   1aea4:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1aea6:	18a8      	adds	r0, r5, r2
   1aea8:	f00d fb85 	bl	285b6 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1aeac:	f899 3000 	ldrb.w	r3, [r9]
   1aeb0:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   1aeb2:	f899 3001 	ldrb.w	r3, [r9, #1]
   1aeb6:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   1aeb8:	2108      	movs	r1, #8
   1aeba:	f105 0012 	add.w	r0, r5, #18
   1aebe:	f001 fdcb 	bl	1ca58 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   1aec2:	2104      	movs	r1, #4
   1aec4:	f105 001a 	add.w	r0, r5, #26
   1aec8:	f001 fdc6 	bl	1ca58 <lll_csrand_get>
   1aecc:	e7cf      	b.n	1ae6e <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aece:	2002      	movs	r0, #2
}
   1aed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001aed4 <ull_central_reset>:
{
   1aed4:	b530      	push	{r4, r5, lr}
   1aed6:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   1aed8:	a801      	add	r0, sp, #4
   1aeda:	f7ff ff35 	bl	1ad48 <ll_connect_disable>
	if (!err) {
   1aede:	4604      	mov	r4, r0
   1aee0:	b110      	cbz	r0, 1aee8 <ull_central_reset+0x14>
}
   1aee2:	4620      	mov	r0, r4
   1aee4:	b003      	add	sp, #12
   1aee6:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1aee8:	f7fc fec6 	bl	17c78 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   1aeec:	4605      	mov	r5, r0
   1aeee:	b150      	cbz	r0, 1af06 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   1aef0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1aef4:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   1aef6:	f36f 0300 	bfc	r3, #0, #1
}
   1aefa:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   1aefc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1af00:	622a      	str	r2, [r5, #32]
}
   1af02:	b003      	add	sp, #12
   1af04:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   1af06:	4a07      	ldr	r2, [pc, #28]	; (1af24 <ull_central_reset+0x50>)
   1af08:	4907      	ldr	r1, [pc, #28]	; (1af28 <ull_central_reset+0x54>)
   1af0a:	4808      	ldr	r0, [pc, #32]	; (1af2c <ull_central_reset+0x58>)
   1af0c:	f240 23e9 	movw	r3, #745	; 0x2e9
   1af10:	f009 fe74 	bl	24bfc <printk>
   1af14:	4040      	eors	r0, r0
   1af16:	f380 8811 	msr	BASEPRI, r0
   1af1a:	f04f 0003 	mov.w	r0, #3
   1af1e:	df02      	svc	2
   1af20:	e7e6      	b.n	1aef0 <ull_central_reset+0x1c>
   1af22:	bf00      	nop
   1af24:	0002d9c8 	.word	0x0002d9c8
   1af28:	0002defc 	.word	0x0002defc
   1af2c:	0002d27c 	.word	0x0002d27c

0001af30 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1af30:	6883      	ldr	r3, [r0, #8]
{
   1af32:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1af34:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   1af36:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   1af38:	b31c      	cbz	r4, 1af82 <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   1af3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->lll.conn = NULL;
   1af3c:	2200      	movs	r2, #0
   1af3e:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   1af40:	b163      	cbz	r3, 1af5c <ull_central_cleanup+0x2c>
   1af42:	4a1e      	ldr	r2, [pc, #120]	; (1afbc <ull_central_cleanup+0x8c>)
   1af44:	491e      	ldr	r1, [pc, #120]	; (1afc0 <ull_central_cleanup+0x90>)
   1af46:	481f      	ldr	r0, [pc, #124]	; (1afc4 <ull_central_cleanup+0x94>)
   1af48:	f240 3305 	movw	r3, #773	; 0x305
   1af4c:	f009 fe56 	bl	24bfc <printk>
   1af50:	4040      	eors	r0, r0
   1af52:	f380 8811 	msr	BASEPRI, r0
   1af56:	f04f 0003 	mov.w	r0, #3
   1af5a:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   1af5c:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1af60:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1af64:	f7f8 fa88 	bl	13478 <memq_deinit>
	LL_ASSERT(link);
   1af68:	4606      	mov	r6, r0
   1af6a:	b1c0      	cbz	r0, 1af9e <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   1af6c:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   1af6e:	63e6      	str	r6, [r4, #60]	; 0x3c
	ll_conn_release(conn);
   1af70:	f7fd faf4 	bl	1855c <ll_conn_release>
	scan->is_enabled = 0U;
   1af74:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1af78:	f36f 0300 	bfc	r3, #0, #1
   1af7c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   1af80:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   1af82:	4a0e      	ldr	r2, [pc, #56]	; (1afbc <ull_central_cleanup+0x8c>)
   1af84:	4910      	ldr	r1, [pc, #64]	; (1afc8 <ull_central_cleanup+0x98>)
   1af86:	480f      	ldr	r0, [pc, #60]	; (1afc4 <ull_central_cleanup+0x94>)
   1af88:	f240 3302 	movw	r3, #770	; 0x302
   1af8c:	f009 fe36 	bl	24bfc <printk>
   1af90:	4040      	eors	r0, r0
   1af92:	f380 8811 	msr	BASEPRI, r0
   1af96:	f04f 0003 	mov.w	r0, #3
   1af9a:	df02      	svc	2
   1af9c:	e7cd      	b.n	1af3a <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   1af9e:	4a07      	ldr	r2, [pc, #28]	; (1afbc <ull_central_cleanup+0x8c>)
   1afa0:	490a      	ldr	r1, [pc, #40]	; (1afcc <ull_central_cleanup+0x9c>)
   1afa2:	4808      	ldr	r0, [pc, #32]	; (1afc4 <ull_central_cleanup+0x94>)
   1afa4:	f44f 7342 	mov.w	r3, #776	; 0x308
   1afa8:	f009 fe28 	bl	24bfc <printk>
   1afac:	4040      	eors	r0, r0
   1afae:	f380 8811 	msr	BASEPRI, r0
   1afb2:	f04f 0003 	mov.w	r0, #3
   1afb6:	df02      	svc	2
   1afb8:	e7d8      	b.n	1af6c <ull_central_cleanup+0x3c>
   1afba:	bf00      	nop
   1afbc:	0002d9c8 	.word	0x0002d9c8
   1afc0:	0002da2c 	.word	0x0002da2c
   1afc4:	0002d27c 	.word	0x0002d27c
   1afc8:	0002da20 	.word	0x0002da20
   1afcc:	0002d840 	.word	0x0002d840

0001afd0 <ull_central_chm_update>:
{
   1afd0:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   1afd2:	2000      	movs	r0, #0
   1afd4:	f7fd fad8 	bl	18588 <ll_connected_get>
		if (!conn || conn->lll.role) {
   1afd8:	4604      	mov	r4, r0
   1afda:	b1d8      	cbz	r0, 1b014 <ull_central_chm_update+0x44>
   1afdc:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1afe0:	2b00      	cmp	r3, #0
   1afe2:	db17      	blt.n	1b014 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   1afe4:	f7ff fe0c 	bl	1ac00 <ull_conn_llcp_req>
		if (ret) {
   1afe8:	4605      	mov	r5, r0
   1afea:	b988      	cbnz	r0, 1b010 <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   1afec:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   1aff0:	f000 f9c0 	bl	1b374 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   1aff4:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
   1aff8:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
		conn->llcp.chan_map.initiate = 1U;
   1affc:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1b000:	2102      	movs	r1, #2
		conn->llcp_req++;
   1b002:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   1b004:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_CHAN_MAP;
   1b008:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		conn->llcp_req++;
   1b00c:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
}
   1b010:	4628      	mov	r0, r5
   1b012:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1b014:	2500      	movs	r5, #0
}
   1b016:	4628      	mov	r0, r5
   1b018:	bd38      	pop	{r3, r4, r5, pc}
   1b01a:	bf00      	nop

0001b01c <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   1b01c:	6008      	str	r0, [r1, #0]
}
   1b01e:	4770      	bx	lr

0001b020 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b024:	b091      	sub	sp, #68	; 0x44
   1b026:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   1b02a:	9305      	str	r3, [sp, #20]
	if (conn_curr->lll.role) {
   1b02c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1b030:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1b032:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1b034:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   1b038:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   1b03a:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1b03c:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   1b03e:	da02      	bge.n	1b046 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   1b040:	4613      	mov	r3, r2
   1b042:	3314      	adds	r3, #20
   1b044:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1b046:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1b048:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1b04c:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   1b050:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1b2a0 <win_offset_calc.constprop.0+0x280>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1b054:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   1b058:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1b05a:	f8cd 9018 	str.w	r9, [sp, #24]
		ticks_anchor_prev = offset_index = offset = 0U;
   1b05e:	46b3      	mov	fp, r6
	ticks_slot_abs_prev = 0U;
   1b060:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1b062:	4635      	mov	r5, r6
   1b064:	e044      	b.n	1b0f0 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   1b066:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b06a:	2bff      	cmp	r3, #255	; 0xff
   1b06c:	d064      	beq.n	1b138 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   1b06e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1b072:	d011      	beq.n	1b098 <win_offset_calc.constprop.0+0x78>
   1b074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b076:	455a      	cmp	r2, fp
   1b078:	d00e      	beq.n	1b098 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   1b07a:	498a      	ldr	r1, [pc, #552]	; (1b2a4 <win_offset_calc.constprop.0+0x284>)
   1b07c:	488a      	ldr	r0, [pc, #552]	; (1b2a8 <win_offset_calc.constprop.0+0x288>)
   1b07e:	f240 13c3 	movw	r3, #451	; 0x1c3
   1b082:	4652      	mov	r2, sl
   1b084:	f009 fdba 	bl	24bfc <printk>
   1b088:	4040      	eors	r0, r0
   1b08a:	f380 8811 	msr	BASEPRI, r0
   1b08e:	f04f 0003 	mov.w	r0, #3
   1b092:	df02      	svc	2
		if ((ticker_id < TICKER_ID_SCAN_BASE) ||
   1b094:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b098:	1e9a      	subs	r2, r3, #2
   1b09a:	2a01      	cmp	r2, #1
   1b09c:	d824      	bhi.n	1b0e8 <win_offset_calc.constprop.0+0xc8>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   1b09e:	2b02      	cmp	r3, #2
   1b0a0:	f000 80da 	beq.w	1b258 <win_offset_calc.constprop.0+0x238>
		if (ticker_id_other != 0xff) {
   1b0a4:	9b06      	ldr	r3, [sp, #24]
   1b0a6:	2bff      	cmp	r3, #255	; 0xff
   1b0a8:	d176      	bne.n	1b198 <win_offset_calc.constprop.0+0x178>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   1b0aa:	2000      	movs	r0, #0
   1b0ac:	f7fd fa64 	bl	18578 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   1b0b0:	9b07      	ldr	r3, [sp, #28]
   1b0b2:	4283      	cmp	r3, r0
   1b0b4:	d018      	beq.n	1b0e8 <win_offset_calc.constprop.0+0xc8>
   1b0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b0b8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1b0bc:	2a00      	cmp	r2, #0
   1b0be:	d17a      	bne.n	1b1b6 <win_offset_calc.constprop.0+0x196>
   1b0c0:	2b00      	cmp	r3, #0
   1b0c2:	db11      	blt.n	1b0e8 <win_offset_calc.constprop.0+0xc8>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1b0c4:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1b0c6:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   1b0ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1b0ce:	3328      	adds	r3, #40	; 0x28
   1b0d0:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1b0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b0d4:	681b      	ldr	r3, [r3, #0]
   1b0d6:	454b      	cmp	r3, r9
   1b0d8:	d37b      	bcc.n	1b1d2 <win_offset_calc.constprop.0+0x1b2>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1b0da:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   1b0dc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1b0e0:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   1b0e2:	464d      	mov	r5, r9
   1b0e4:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   1b0e8:	783b      	ldrb	r3, [r7, #0]
   1b0ea:	42a3      	cmp	r3, r4
   1b0ec:	f240 80b9 	bls.w	1b262 <win_offset_calc.constprop.0+0x242>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1b0f0:	ab0f      	add	r3, sp, #60	; 0x3c
   1b0f2:	9302      	str	r3, [sp, #8]
   1b0f4:	4b6d      	ldr	r3, [pc, #436]	; (1b2ac <win_offset_calc.constprop.0+0x28c>)
   1b0f6:	9301      	str	r3, [sp, #4]
   1b0f8:	ab0d      	add	r3, sp, #52	; 0x34
   1b0fa:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   1b0fc:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1b0fe:	ab0e      	add	r3, sp, #56	; 0x38
   1b100:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1b104:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   1b106:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1b108:	f7f9 fccc 	bl	14aa4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1b10c:	2802      	cmp	r0, #2
   1b10e:	d047      	beq.n	1b1a0 <win_offset_calc.constprop.0+0x180>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   1b110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   1b112:	2b00      	cmp	r3, #0
   1b114:	d0a7      	beq.n	1b066 <win_offset_calc.constprop.0+0x46>
   1b116:	4966      	ldr	r1, [pc, #408]	; (1b2b0 <win_offset_calc.constprop.0+0x290>)
   1b118:	4863      	ldr	r0, [pc, #396]	; (1b2a8 <win_offset_calc.constprop.0+0x288>)
   1b11a:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   1b11e:	4652      	mov	r2, sl
   1b120:	f009 fd6c 	bl	24bfc <printk>
   1b124:	4040      	eors	r0, r0
   1b126:	f380 8811 	msr	BASEPRI, r0
   1b12a:	f04f 0003 	mov.w	r0, #3
   1b12e:	df02      	svc	2
		if (ticker_id == 0xff) {
   1b130:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b134:	2bff      	cmp	r3, #255	; 0xff
   1b136:	d19a      	bne.n	1b06e <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1b138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b13a:	681b      	ldr	r3, [r3, #0]
   1b13c:	429d      	cmp	r5, r3
   1b13e:	bf38      	it	cc
   1b140:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1b142:	783b      	ldrb	r3, [r7, #0]
   1b144:	42a3      	cmp	r3, r4
   1b146:	d925      	bls.n	1b194 <win_offset_calc.constprop.0+0x174>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b148:	9b04      	ldr	r3, [sp, #16]
   1b14a:	495a      	ldr	r1, [pc, #360]	; (1b2b4 <win_offset_calc.constprop.0+0x294>)
			if (offset >= conn_interval) {
   1b14c:	9805      	ldr	r0, [sp, #20]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b14e:	442b      	add	r3, r5
   1b150:	fba1 2303 	umull	r2, r3, r1, r3
   1b154:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   1b158:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b15a:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   1b15e:	f240 8096 	bls.w	1b28e <win_offset_calc.constprop.0+0x26e>
   1b162:	e9dd 6c04 	ldrd	r6, ip, [sp, #16]
   1b166:	e002      	b.n	1b16e <win_offset_calc.constprop.0+0x14e>
   1b168:	4594      	cmp	ip, r2
   1b16a:	f240 8090 	bls.w	1b28e <win_offset_calc.constprop.0+0x26e>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   1b16e:	eb08 0044 	add.w	r0, r8, r4, lsl #1
	dst[0] = val;
   1b172:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   1b176:	0a12      	lsrs	r2, r2, #8
   1b178:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   1b17a:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   1b17c:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   1b17e:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   1b180:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b182:	1973      	adds	r3, r6, r5
   1b184:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   1b188:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b18a:	f3c3 124f 	ubfx	r2, r3, #5, #16
   1b18e:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   1b192:	d8e9      	bhi.n	1b168 <win_offset_calc.constprop.0+0x148>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1b194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b196:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   1b198:	703c      	strb	r4, [r7, #0]
}
   1b19a:	b011      	add	sp, #68	; 0x44
   1b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (ret_cb == TICKER_STATUS_BUSY) {
   1b1a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b1a2:	2b02      	cmp	r3, #2
   1b1a4:	d1b4      	bne.n	1b110 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   1b1a6:	2102      	movs	r1, #2
   1b1a8:	2000      	movs	r0, #0
   1b1aa:	f7f9 fcc1 	bl	14b30 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1b1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b1b0:	2b02      	cmp	r3, #2
   1b1b2:	d0f8      	beq.n	1b1a6 <win_offset_calc.constprop.0+0x186>
   1b1b4:	e7ac      	b.n	1b110 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   1b1b6:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1b1b8:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1b1ba:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			if (conn->lll.role) {
   1b1be:	da5a      	bge.n	1b276 <win_offset_calc.constprop.0+0x256>
				ticks_slot_abs_curr += ticks_slot_margin;
   1b1c0:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   1b1c4:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1b1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b1c8:	681b      	ldr	r3, [r3, #0]
   1b1ca:	454b      	cmp	r3, r9
				ticks_slot_margin =
   1b1cc:	f04f 0b14 	mov.w	fp, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1b1d0:	d283      	bcs.n	1b0da <win_offset_calc.constprop.0+0xba>
				if (ticks_to_expire_prev <
   1b1d2:	429d      	cmp	r5, r3
   1b1d4:	bf38      	it	cc
   1b1d6:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   1b1d8:	783b      	ldrb	r3, [r7, #0]
   1b1da:	42a3      	cmp	r3, r4
   1b1dc:	d931      	bls.n	1b242 <win_offset_calc.constprop.0+0x222>
					(ticks_slot_abs_prev + ticks_slot_abs +
   1b1de:	9b04      	ldr	r3, [sp, #16]
   1b1e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b1e2:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
   1b1e6:	4413      	add	r3, r2
   1b1e8:	449b      	add	fp, r3
   1b1ea:	46b0      	mov	r8, r6
   1b1ec:	462e      	mov	r6, r5
   1b1ee:	465d      	mov	r5, fp
   1b1f0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   1b1f4:	e013      	b.n	1b21e <win_offset_calc.constprop.0+0x1fe>
					if (offset >= conn_interval) {
   1b1f6:	9a05      	ldr	r2, [sp, #20]
					offset = (ticks_to_expire_prev +
   1b1f8:	f3c3 184f 	ubfx	r8, r3, #5, #16
					if (offset >= conn_interval) {
   1b1fc:	4590      	cmp	r8, r2
					ticks_to_expire_prev +=
   1b1fe:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b202:	ea4f 2018 	mov.w	r0, r8, lsr #8
						  ticks_slot_abs_prev) /
   1b206:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   1b20a:	d244      	bcs.n	1b296 <win_offset_calc.constprop.0+0x276>
	dst[0] = val;
   1b20c:	f80b 3014 	strb.w	r3, [fp, r4, lsl #1]
	dst[1] = val >> 8;
   1b210:	f88c 0001 	strb.w	r0, [ip, #1]
				while ((offset_index < *offset_max) &&
   1b214:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   1b216:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
   1b21a:	42a3      	cmp	r3, r4
   1b21c:	d931      	bls.n	1b282 <win_offset_calc.constprop.0+0x262>
				       (ticker_ticks_diff_get(
   1b21e:	4631      	mov	r1, r6
   1b220:	4648      	mov	r0, r9
   1b222:	f7f9 fc9f 	bl	14b64 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   1b226:	9b04      	ldr	r3, [sp, #16]
   1b228:	4a22      	ldr	r2, [pc, #136]	; (1b2b4 <win_offset_calc.constprop.0+0x294>)
   1b22a:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   1b22c:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   1b22e:	eb0b 0c44 	add.w	ip, fp, r4, lsl #1
						  ticks_slot_abs_prev) /
   1b232:	fba2 2303 	umull	r2, r3, r2, r3
					offset_index++;
   1b236:	f104 0e01 	add.w	lr, r4, #1
				while ((offset_index < *offset_max) &&
   1b23a:	d2dc      	bcs.n	1b1f6 <win_offset_calc.constprop.0+0x1d6>
   1b23c:	4635      	mov	r5, r6
   1b23e:	4646      	mov	r6, r8
   1b240:	46d8      	mov	r8, fp
				*ticks_to_offset_next = ticks_to_expire_prev;
   1b242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b244:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1b246:	9b05      	ldr	r3, [sp, #20]
   1b248:	42b3      	cmp	r3, r6
   1b24a:	f63f af46 	bhi.w	1b0da <win_offset_calc.constprop.0+0xba>
	if (ticker_id == 0xff) {
   1b24e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b252:	2bff      	cmp	r3, #255	; 0xff
   1b254:	d1a0      	bne.n	1b198 <win_offset_calc.constprop.0+0x178>
   1b256:	e76f      	b.n	1b138 <win_offset_calc.constprop.0+0x118>
			ticker_id_other = ticker_id;
   1b258:	9306      	str	r3, [sp, #24]
	} while (offset_index < *offset_max);
   1b25a:	783b      	ldrb	r3, [r7, #0]
   1b25c:	42a3      	cmp	r3, r4
   1b25e:	f63f af47 	bhi.w	1b0f0 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   1b262:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b266:	2bff      	cmp	r3, #255	; 0xff
   1b268:	d196      	bne.n	1b198 <win_offset_calc.constprop.0+0x178>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1b26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b26c:	681b      	ldr	r3, [r3, #0]
   1b26e:	429d      	cmp	r5, r3
   1b270:	bf38      	it	cc
   1b272:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1b274:	e78e      	b.n	1b194 <win_offset_calc.constprop.0+0x174>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1b276:	f101 0328 	add.w	r3, r1, #40	; 0x28
   1b27a:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   1b27c:	f04f 0b00 	mov.w	fp, #0
   1b280:	e727      	b.n	1b0d2 <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1b282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b284:	4635      	mov	r5, r6
   1b286:	601d      	str	r5, [r3, #0]
   1b288:	4646      	mov	r6, r8
   1b28a:	46d8      	mov	r8, fp
				if (offset >= conn_interval) {
   1b28c:	e725      	b.n	1b0da <win_offset_calc.constprop.0+0xba>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1b28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   1b290:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1b292:	601d      	str	r5, [r3, #0]
   1b294:	e780      	b.n	1b198 <win_offset_calc.constprop.0+0x178>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1b296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b298:	2500      	movs	r5, #0
   1b29a:	46d8      	mov	r8, fp
   1b29c:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1b29e:	e7d6      	b.n	1b24e <win_offset_calc.constprop.0+0x22e>
   1b2a0:	0002da58 	.word	0x0002da58
   1b2a4:	0002d314 	.word	0x0002d314
   1b2a8:	0002d27c 	.word	0x0002d27c
   1b2ac:	0001b01d 	.word	0x0001b01d
   1b2b0:	0002da9c 	.word	0x0002da9c
   1b2b4:	cccccccd 	.word	0xcccccccd

0001b2b8 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1b2b8:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1b2ba:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   1b2bc:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   1b2be:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   1b2c0:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   1b2c2:	89c0      	ldrh	r0, [r0, #14]
   1b2c4:	6909      	ldr	r1, [r1, #16]
   1b2c6:	3310      	adds	r3, #16
   1b2c8:	f7e8 be02 	b.w	3ed0 <after_mstr_offset_get>

0001b2cc <ull_sched_mfy_win_offset_use>:
{
   1b2cc:	b510      	push	{r4, lr}
   1b2ce:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   1b2d0:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
   1b2d4:	6901      	ldr	r1, [r0, #16]
   1b2d6:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1b2da:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   1b2dc:	f7e8 fdf8 	bl	3ed0 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1b2e0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1b2e4:	4908      	ldr	r1, [pc, #32]	; (1b308 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   1b2e6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1b2ea:	fba1 1303 	umull	r1, r3, r1, r3
   1b2ee:	0a9b      	lsrs	r3, r3, #10
   1b2f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   1b2f4:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   1b2f6:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   1b2f8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1b2fc:	2204      	movs	r2, #4
   1b2fe:	f362 0302 	bfi	r3, r2, #0, #3
   1b302:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
   1b306:	bd10      	pop	{r4, pc}
   1b308:	d1b71759 	.word	0xd1b71759

0001b30c <ull_sched_mfy_free_win_offset_calc>:
{
   1b30c:	b510      	push	{r4, lr}
   1b30e:	b084      	sub	sp, #16
   1b310:	4604      	mov	r4, r0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1b312:	f8d0 c178 	ldr.w	ip, [r0, #376]	; 0x178
   1b316:	f8cd c004 	str.w	ip, [sp, #4]
   1b31a:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   1b31e:	2206      	movs	r2, #6
	uint32_t ticks_to_offset_default = 0U;
   1b320:	2100      	movs	r1, #0
	uint8_t offset_max = 6U;
   1b322:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1b326:	9300      	str	r3, [sp, #0]
   1b328:	aa03      	add	r2, sp, #12
   1b32a:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
	uint32_t ticks_to_offset_default = 0U;
   1b32e:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1b330:	f7ff fe76 	bl	1b020 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   1b334:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1b338:	2208      	movs	r2, #8
   1b33a:	f362 0303 	bfi	r3, r2, #0, #4
   1b33e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
}
   1b342:	b004      	add	sp, #16
   1b344:	bd10      	pop	{r4, pc}
   1b346:	bf00      	nop

0001b348 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   1b348:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   1b34a:	4c08      	ldr	r4, [pc, #32]	; (1b36c <ll_chm_update+0x24>)
   1b34c:	2205      	movs	r2, #5
{
   1b34e:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   1b350:	4620      	mov	r0, r4
   1b352:	f00d f930 	bl	285b6 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   1b356:	2105      	movs	r1, #5
   1b358:	4620      	mov	r0, r4
   1b35a:	f7f8 fa09 	bl	13770 <util_ones_count_get>
   1b35e:	4b04      	ldr	r3, [pc, #16]	; (1b370 <ll_chm_update+0x28>)
   1b360:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   1b362:	f7ff fe35 	bl	1afd0 <ull_central_chm_update>
}
   1b366:	2000      	movs	r0, #0
   1b368:	bd10      	pop	{r4, pc}
   1b36a:	bf00      	nop
   1b36c:	20000730 	.word	0x20000730
   1b370:	20000962 	.word	0x20000962

0001b374 <ull_chan_map_get>:
{
   1b374:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   1b376:	4903      	ldr	r1, [pc, #12]	; (1b384 <ull_chan_map_get+0x10>)
   1b378:	2205      	movs	r2, #5
   1b37a:	f00d f91c 	bl	285b6 <memcpy>
	return count;
   1b37e:	4b02      	ldr	r3, [pc, #8]	; (1b388 <ull_chan_map_get+0x14>)
}
   1b380:	7818      	ldrb	r0, [r3, #0]
   1b382:	bd08      	pop	{r3, pc}
   1b384:	20000730 	.word	0x20000730
   1b388:	20000962 	.word	0x20000962

0001b38c <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1b38c:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1b38e:	fb02 1c01 	mla	ip, r2, r1, r1
   1b392:	7802      	ldrb	r2, [r0, #0]
   1b394:	491c      	ldr	r1, [pc, #112]	; (1b408 <lll_chan_sel_1+0x7c>)
{
   1b396:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1b39a:	4494      	add	ip, r2
   1b39c:	fb81 210c 	smull	r2, r1, r1, ip
   1b3a0:	4461      	add	r1, ip
   1b3a2:	1149      	asrs	r1, r1, #5
   1b3a4:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1b3a8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   1b3ac:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1b3ae:	ebac 0101 	sub.w	r1, ip, r1
   1b3b2:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   1b3b4:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b3b6:	08c4      	lsrs	r4, r0, #3
   1b3b8:	f001 0107 	and.w	r1, r1, #7
   1b3bc:	f813 c004 	ldrb.w	ip, [r3, r4]
   1b3c0:	fa4c f101 	asr.w	r1, ip, r1
   1b3c4:	f011 0101 	ands.w	r1, r1, #1
   1b3c8:	d11d      	bne.n	1b406 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1b3ca:	fbb0 f2f5 	udiv	r2, r0, r5
   1b3ce:	fb05 0212 	mls	r2, r5, r2, r0
   1b3d2:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1b3d4:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1b3d8:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1b3da:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1b3dc:	f100 0c08 	add.w	ip, r0, #8
   1b3e0:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1b3e4:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1b3e8:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1b3ec:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1b3f0:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1b3f4:	d002      	beq.n	1b3fc <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1b3f6:	b132      	cbz	r2, 1b406 <lll_chan_sel_1+0x7a>
				chan_index--;
   1b3f8:	3a01      	subs	r2, #1
   1b3fa:	b2d2      	uxtb	r2, r2
			chan_next++;
   1b3fc:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1b3fe:	4584      	cmp	ip, r0
   1b400:	d1f2      	bne.n	1b3e8 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1b402:	45a6      	cmp	lr, r4
   1b404:	d1ea      	bne.n	1b3dc <lll_chan_sel_1+0x50>
}
   1b406:	bd30      	pop	{r4, r5, pc}
   1b408:	dd67c8a7 	.word	0xdd67c8a7

0001b40c <lll_chan_id>:
	return aa_ms ^ aa_ls;
   1b40c:	8842      	ldrh	r2, [r0, #2]
   1b40e:	8800      	ldrh	r0, [r0, #0]
}
   1b410:	4050      	eors	r0, r2
   1b412:	4770      	bx	lr

0001b414 <lll_chan_sel_2>:
{
   1b414:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1b416:	4d2f      	ldr	r5, [pc, #188]	; (1b4d4 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1b418:	4c2f      	ldr	r4, [pc, #188]	; (1b4d8 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1b41a:	4048      	eors	r0, r1
   1b41c:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1b420:	0a07      	lsrs	r7, r0, #8
   1b422:	b2c0      	uxtb	r0, r0
   1b424:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   1b428:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1b42c:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1b430:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1b434:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   1b438:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1b43c:	433e      	orrs	r6, r7
   1b43e:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1b442:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1b446:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1b44a:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1b44e:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1b452:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1b454:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1b458:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b45c:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1b460:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b464:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1b466:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b46a:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1b46c:	d1d8      	bne.n	1b420 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1b46e:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1b470:	481a      	ldr	r0, [pc, #104]	; (1b4dc <lll_chan_sel_2+0xc8>)
   1b472:	fba0 4001 	umull	r4, r0, r0, r1
   1b476:	1a0c      	subs	r4, r1, r0
   1b478:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1b47c:	0940      	lsrs	r0, r0, #5
   1b47e:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1b482:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1b486:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b488:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1b48c:	f000 0507 	and.w	r5, r0, #7
   1b490:	5d14      	ldrb	r4, [r2, r4]
   1b492:	412c      	asrs	r4, r5
   1b494:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   1b496:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b498:	d41a      	bmi.n	1b4d0 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1b49a:	fb01 f303 	mul.w	r3, r1, r3
   1b49e:	1e56      	subs	r6, r2, #1
   1b4a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1b4a4:	3204      	adds	r2, #4
	chan_next = 0U;
   1b4a6:	4660      	mov	r0, ip
		bite = *chan_map;
   1b4a8:	f100 0508 	add.w	r5, r0, #8
   1b4ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1b4b0:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1b4b2:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1b4b6:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1b4ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1b4be:	d002      	beq.n	1b4c6 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1b4c0:	b133      	cbz	r3, 1b4d0 <lll_chan_sel_2+0xbc>
				chan_index--;
   1b4c2:	3b01      	subs	r3, #1
   1b4c4:	b2db      	uxtb	r3, r3
			chan_next++;
   1b4c6:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   1b4c8:	42a8      	cmp	r0, r5
   1b4ca:	d1f2      	bne.n	1b4b2 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1b4cc:	42b2      	cmp	r2, r6
   1b4ce:	d1eb      	bne.n	1b4a8 <lll_chan_sel_2+0x94>
}
   1b4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b4d2:	bf00      	nop
   1b4d4:	00022110 	.word	0x00022110
   1b4d8:	00088440 	.word	0x00088440
   1b4dc:	bacf914d 	.word	0xbacf914d

0001b4e0 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   1b4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b4e4:	4d18      	ldr	r5, [pc, #96]	; (1b548 <rl_update+0x68>)
   1b4e6:	4e19      	ldr	r6, [pc, #100]	; (1b54c <rl_update+0x6c>)
   1b4e8:	2400      	movs	r4, #0
   1b4ea:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1b4ee:	1eaf      	subs	r7, r5, #2
   1b4f0:	f04f 0801 	mov.w	r8, #1
   1b4f4:	e006      	b.n	1b504 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b4f6:	3401      	adds	r4, #1
   1b4f8:	2c08      	cmp	r4, #8
   1b4fa:	f105 0506 	add.w	r5, r5, #6
   1b4fe:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b502:	d01e      	beq.n	1b542 <rl_update+0x62>
		if (rl[i].taken) {
   1b504:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b508:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   1b50c:	07da      	lsls	r2, r3, #31
   1b50e:	d5f2      	bpl.n	1b4f6 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1b510:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b512:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1b514:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1b518:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b51c:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1b51e:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b522:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b524:	4631      	mov	r1, r6
   1b526:	4628      	mov	r0, r5
   1b528:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b52a:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   1b52c:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b530:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b532:	f00d f840 	bl	285b6 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b536:	2c08      	cmp	r4, #8
   1b538:	f105 0506 	add.w	r5, r5, #6
   1b53c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b540:	d1e0      	bne.n	1b504 <rl_update+0x24>
}
   1b542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b546:	bf00      	nop
   1b548:	20003916 	.word	0x20003916
   1b54c:	200037d5 	.word	0x200037d5

0001b550 <fal_update>:
{
   1b550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b554:	4e20      	ldr	r6, [pc, #128]	; (1b5d8 <fal_update+0x88>)
   1b556:	4d21      	ldr	r5, [pc, #132]	; (1b5dc <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b558:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1b5e0 <fal_update+0x90>
   1b55c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1b5e4 <fal_update+0x94>
{
   1b560:	2400      	movs	r4, #0
   1b562:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   1b566:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   1b568:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1b56c:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   1b570:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b574:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   1b576:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b57a:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   1b57c:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b580:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   1b584:	d021      	beq.n	1b5ca <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b586:	f898 3000 	ldrb.w	r3, [r8]
   1b58a:	b163      	cbz	r3, 1b5a6 <fal_update+0x56>
		j = fal[i].rl_idx;
   1b58c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b590:	2b07      	cmp	r3, #7
   1b592:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   1b596:	d806      	bhi.n	1b5a6 <fal_update+0x56>
   1b598:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   1b59c:	f013 0f04 	tst.w	r3, #4
   1b5a0:	d001      	beq.n	1b5a6 <fal_update+0x56>
   1b5a2:	06db      	lsls	r3, r3, #27
   1b5a4:	d511      	bpl.n	1b5ca <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1b5a6:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1b5aa:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1b5ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   1b5b2:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b5b6:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   1b5ba:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b5be:	40a3      	lsls	r3, r4
   1b5c0:	ea4e 0303 	orr.w	r3, lr, r3
   1b5c4:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b5c6:	f00c fff6 	bl	285b6 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   1b5ca:	3401      	adds	r4, #1
   1b5cc:	2c08      	cmp	r4, #8
   1b5ce:	f105 0508 	add.w	r5, r5, #8
   1b5d2:	d1c9      	bne.n	1b568 <fal_update+0x18>
}
   1b5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b5d8:	200036ea 	.word	0x200036ea
   1b5dc:	200036aa 	.word	0x200036aa
   1b5e0:	2000499b 	.word	0x2000499b
   1b5e4:	200037d4 	.word	0x200037d4

0001b5e8 <ll_fal_size_get>:
}
   1b5e8:	2008      	movs	r0, #8
   1b5ea:	4770      	bx	lr

0001b5ec <ll_fal_clear>:
{
   1b5ec:	b510      	push	{r4, lr}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b5ee:	2000      	movs	r0, #0
   1b5f0:	f7fc fb74 	bl	17cdc <ull_scan_filter_pol_get>
   1b5f4:	f010 0001 	ands.w	r0, r0, #1
   1b5f8:	d119      	bne.n	1b62e <ll_fal_clear+0x42>
   1b5fa:	4a0e      	ldr	r2, [pc, #56]	; (1b634 <ll_fal_clear+0x48>)
			rl[j].fal = 0U;
   1b5fc:	4c0e      	ldr	r4, [pc, #56]	; (1b638 <ll_fal_clear+0x4c>)
		uint8_t j = fal[i].rl_idx;
   1b5fe:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1b602:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b604:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   1b606:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1b60a:	d805      	bhi.n	1b618 <ll_fal_clear+0x2c>
			rl[j].fal = 0U;
   1b60c:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1b610:	f36f 1345 	bfc	r3, #5, #1
   1b614:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   1b618:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1b61c:	f36f 0300 	bfc	r3, #0, #1
   1b620:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1b624:	3001      	adds	r0, #1
   1b626:	2808      	cmp	r0, #8
   1b628:	d1e9      	bne.n	1b5fe <ll_fal_clear+0x12>
	return 0;
   1b62a:	2000      	movs	r0, #0
}
   1b62c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b62e:	200c      	movs	r0, #12
}
   1b630:	bd10      	pop	{r4, pc}
   1b632:	bf00      	nop
   1b634:	200036a8 	.word	0x200036a8
   1b638:	200037d4 	.word	0x200037d4

0001b63c <ll_fal_add>:
{
   1b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b640:	4681      	mov	r9, r0
   1b642:	b083      	sub	sp, #12
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b644:	2000      	movs	r0, #0
   1b646:	f7fc fb49 	bl	17cdc <ull_scan_filter_pol_get>
   1b64a:	f010 0501 	ands.w	r5, r0, #1
   1b64e:	d170      	bne.n	1b732 <ll_fal_add+0xf6>
	if (addr->type == ADDR_TYPE_ANON) {
   1b650:	f899 a000 	ldrb.w	sl, [r9]
   1b654:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1b658:	d067      	beq.n	1b72a <ll_fal_add+0xee>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1b65a:	4e44      	ldr	r6, [pc, #272]	; (1b76c <ll_fal_add+0x130>)
   1b65c:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b660:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1b664:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1b668:	462c      	mov	r4, r5
   1b66a:	1eb7      	subs	r7, r6, #2
   1b66c:	e009      	b.n	1b682 <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   1b66e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1b672:	d101      	bne.n	1b678 <ll_fal_add+0x3c>
			*free_idx = i;
   1b674:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < FAL_SIZE; i++) {
   1b678:	3401      	adds	r4, #1
   1b67a:	2c08      	cmp	r4, #8
   1b67c:	f106 0608 	add.w	r6, r6, #8
   1b680:	d017      	beq.n	1b6b2 <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b682:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1b686:	07d8      	lsls	r0, r3, #31
   1b688:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b68c:	d5ef      	bpl.n	1b66e <ll_fal_add+0x32>
   1b68e:	4552      	cmp	r2, sl
   1b690:	d1f2      	bne.n	1b678 <ll_fal_add+0x3c>
   1b692:	2206      	movs	r2, #6
   1b694:	4630      	mov	r0, r6
   1b696:	4659      	mov	r1, fp
   1b698:	f00c ff64 	bl	28564 <memcmp>
   1b69c:	2800      	cmp	r0, #0
   1b69e:	d041      	beq.n	1b724 <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   1b6a0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1b6a4:	07d9      	lsls	r1, r3, #31
   1b6a6:	d5e2      	bpl.n	1b66e <ll_fal_add+0x32>
	for (i = 0; i < FAL_SIZE; i++) {
   1b6a8:	3401      	adds	r4, #1
   1b6aa:	2c08      	cmp	r4, #8
   1b6ac:	f106 0608 	add.w	r6, r6, #8
   1b6b0:	d1e7      	bne.n	1b682 <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   1b6b2:	f1b8 0f07 	cmp.w	r8, #7
   1b6b6:	d854      	bhi.n	1b762 <ll_fal_add+0x126>
	fal[i].id_addr_type = id_addr->type & 0x1;
   1b6b8:	f899 2000 	ldrb.w	r2, [r9]
   1b6bc:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1b6c0:	4e2b      	ldr	r6, [pc, #172]	; (1b770 <ll_fal_add+0x134>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1b6c2:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   1b6c4:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1b6c8:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   1b6cc:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   1b6d0:	4438      	add	r0, r7
   1b6d2:	2206      	movs	r2, #6
   1b6d4:	4659      	mov	r1, fp
   1b6d6:	f00c ff6e 	bl	285b6 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b6da:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b6de:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b6e2:	f003 0301 	and.w	r3, r3, #1
   1b6e6:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1b6ea:	fa5f fa85 	uxtb.w	sl, r5
   1b6ee:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   1b6f2:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1b6f6:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b6f8:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b6fc:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1b700:	d501      	bpl.n	1b706 <ll_fal_add+0xca>
   1b702:	4299      	cmp	r1, r3
   1b704:	d019      	beq.n	1b73a <ll_fal_add+0xfe>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b706:	2d08      	cmp	r5, #8
   1b708:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b70c:	d1eb      	bne.n	1b6e6 <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1b70e:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1b712:	22ff      	movs	r2, #255	; 0xff
   1b714:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1b716:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1b71a:	f043 0301 	orr.w	r3, r3, #1
   1b71e:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   1b722:	2000      	movs	r0, #0
}
   1b724:	b003      	add	sp, #12
   1b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   1b72a:	4628      	mov	r0, r5
}
   1b72c:	b003      	add	sp, #12
   1b72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b732:	200c      	movs	r0, #12
}
   1b734:	b003      	add	sp, #12
   1b736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b73a:	4630      	mov	r0, r6
   1b73c:	2206      	movs	r2, #6
   1b73e:	4659      	mov	r1, fp
   1b740:	9301      	str	r3, [sp, #4]
   1b742:	f00c ff0f 	bl	28564 <memcmp>
   1b746:	9b01      	ldr	r3, [sp, #4]
   1b748:	2800      	cmp	r0, #0
   1b74a:	d1dc      	bne.n	1b706 <ll_fal_add+0xca>
		rl[j].fal = 1U;
   1b74c:	f819 3004 	ldrb.w	r3, [r9, r4]
   1b750:	f043 0320 	orr.w	r3, r3, #32
   1b754:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   1b758:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1b75c:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   1b760:	e7d9      	b.n	1b716 <ll_fal_add+0xda>
   1b762:	2007      	movs	r0, #7
}
   1b764:	b003      	add	sp, #12
   1b766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b76a:	bf00      	nop
   1b76c:	200036aa 	.word	0x200036aa
   1b770:	200037d5 	.word	0x200037d5

0001b774 <ll_fal_remove>:
{
   1b774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b778:	4607      	mov	r7, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b77a:	2000      	movs	r0, #0
   1b77c:	f7fc faae 	bl	17cdc <ull_scan_filter_pol_get>
   1b780:	f010 0401 	ands.w	r4, r0, #1
   1b784:	d139      	bne.n	1b7fa <ll_fal_remove+0x86>
	if (addr->type == ADDR_TYPE_ANON) {
   1b786:	783e      	ldrb	r6, [r7, #0]
   1b788:	2eff      	cmp	r6, #255	; 0xff
   1b78a:	d033      	beq.n	1b7f4 <ll_fal_remove+0x80>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   1b78c:	4d1c      	ldr	r5, [pc, #112]	; (1b800 <ll_fal_remove+0x8c>)
   1b78e:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
   1b790:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b794:	f006 0601 	and.w	r6, r6, #1
   1b798:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1b79c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b7a0:	07db      	lsls	r3, r3, #31
   1b7a2:	d501      	bpl.n	1b7a8 <ll_fal_remove+0x34>
   1b7a4:	42b2      	cmp	r2, r6
   1b7a6:	d007      	beq.n	1b7b8 <ll_fal_remove+0x44>
	for (i = 0; i < FAL_SIZE; i++) {
   1b7a8:	3401      	adds	r4, #1
   1b7aa:	2c08      	cmp	r4, #8
   1b7ac:	f105 0508 	add.w	r5, r5, #8
   1b7b0:	d1f2      	bne.n	1b798 <ll_fal_remove+0x24>
   1b7b2:	2002      	movs	r0, #2
}
   1b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b7b8:	2206      	movs	r2, #6
   1b7ba:	4628      	mov	r0, r5
   1b7bc:	4639      	mov	r1, r7
   1b7be:	f00c fed1 	bl	28564 <memcmp>
   1b7c2:	2800      	cmp	r0, #0
   1b7c4:	d1f0      	bne.n	1b7a8 <ll_fal_remove+0x34>
		uint8_t j = fal[i].rl_idx;
   1b7c6:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1b7ca:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b7cc:	2b07      	cmp	r3, #7
   1b7ce:	d808      	bhi.n	1b7e2 <ll_fal_remove+0x6e>
			rl[j].fal = 0U;
   1b7d0:	4a0c      	ldr	r2, [pc, #48]	; (1b804 <ll_fal_remove+0x90>)
   1b7d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b7d6:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1b7da:	f360 1145 	bfi	r1, r0, #5, #1
   1b7de:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   1b7e2:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1b7e6:	f36f 0300 	bfc	r3, #0, #1
   1b7ea:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   1b7ee:	2000      	movs	r0, #0
}
   1b7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1b7f4:	4620      	mov	r0, r4
}
   1b7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b7fa:	200c      	movs	r0, #12
}
   1b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b800:	200036aa 	.word	0x200036aa
   1b804:	200037d4 	.word	0x200037d4

0001b808 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b808:	2807      	cmp	r0, #7
{
   1b80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b80e:	4604      	mov	r4, r0
   1b810:	460e      	mov	r6, r1
   1b812:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b814:	d817      	bhi.n	1b846 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1b816:	4d1a      	ldr	r5, [pc, #104]	; (1b880 <ll_rl_id_addr_get+0x78>)
   1b818:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b81c:	00a7      	lsls	r7, r4, #2
   1b81e:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1b822:	07db      	lsls	r3, r3, #31
   1b824:	d51d      	bpl.n	1b862 <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b826:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b828:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b82a:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   1b82e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b832:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b836:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b838:	4640      	mov	r0, r8
   1b83a:	2206      	movs	r2, #6
}
   1b83c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b840:	3101      	adds	r1, #1
   1b842:	f00c beb8 	b.w	285b6 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b846:	4a0f      	ldr	r2, [pc, #60]	; (1b884 <ll_rl_id_addr_get+0x7c>)
   1b848:	490f      	ldr	r1, [pc, #60]	; (1b888 <ll_rl_id_addr_get+0x80>)
   1b84a:	4810      	ldr	r0, [pc, #64]	; (1b88c <ll_rl_id_addr_get+0x84>)
   1b84c:	f44f 7389 	mov.w	r3, #274	; 0x112
   1b850:	f009 f9d4 	bl	24bfc <printk>
   1b854:	4040      	eors	r0, r0
   1b856:	f380 8811 	msr	BASEPRI, r0
   1b85a:	f04f 0003 	mov.w	r0, #3
   1b85e:	df02      	svc	2
   1b860:	e7d9      	b.n	1b816 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1b862:	4a08      	ldr	r2, [pc, #32]	; (1b884 <ll_rl_id_addr_get+0x7c>)
   1b864:	490a      	ldr	r1, [pc, #40]	; (1b890 <ll_rl_id_addr_get+0x88>)
   1b866:	4809      	ldr	r0, [pc, #36]	; (1b88c <ll_rl_id_addr_get+0x84>)
   1b868:	f240 1313 	movw	r3, #275	; 0x113
   1b86c:	f009 f9c6 	bl	24bfc <printk>
   1b870:	4040      	eors	r0, r0
   1b872:	f380 8811 	msr	BASEPRI, r0
   1b876:	f04f 0003 	mov.w	r0, #3
   1b87a:	df02      	svc	2
   1b87c:	e7d3      	b.n	1b826 <ll_rl_id_addr_get+0x1e>
   1b87e:	bf00      	nop
   1b880:	200037d4 	.word	0x200037d4
   1b884:	0002dacc 	.word	0x0002dacc
   1b888:	0002db10 	.word	0x0002db10
   1b88c:	0002d27c 	.word	0x0002d27c
   1b890:	0002db1c 	.word	0x0002db1c

0001b894 <ll_rl_size_get>:
   1b894:	2008      	movs	r0, #8
   1b896:	4770      	bx	lr

0001b898 <ll_rl_clear>:
{
   1b898:	b510      	push	{r4, lr}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b89a:	2000      	movs	r0, #0
   1b89c:	f7fc fa06 	bl	17cac <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1b8a0:	f030 0001 	bics.w	r0, r0, #1
   1b8a4:	d131      	bne.n	1b90a <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   1b8a6:	4b1a      	ldr	r3, [pc, #104]	; (1b910 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   1b8a8:	4c1a      	ldr	r4, [pc, #104]	; (1b914 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   1b8aa:	7819      	ldrb	r1, [r3, #0]
   1b8ac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1b8b0:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1b8b2:	f360 0100 	bfi	r1, r0, #0, #1
   1b8b6:	f360 0200 	bfi	r2, r0, #0, #1
   1b8ba:	7019      	strb	r1, [r3, #0]
   1b8bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1b8c0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   1b8c4:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1b8c8:	f360 0100 	bfi	r1, r0, #0, #1
   1b8cc:	f360 0200 	bfi	r2, r0, #0, #1
   1b8d0:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   1b8d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1b8d8:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1b8dc:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1b8e0:	f360 0100 	bfi	r1, r0, #0, #1
   1b8e4:	f360 0200 	bfi	r2, r0, #0, #1
   1b8e8:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1b8ec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1b8f0:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1b8f4:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1b8f8:	f360 0100 	bfi	r1, r0, #0, #1
   1b8fc:	f360 0200 	bfi	r2, r0, #0, #1
   1b900:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1b904:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1b908:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b90a:	200c      	movs	r0, #12
}
   1b90c:	bd10      	pop	{r4, pc}
   1b90e:	bf00      	nop
   1b910:	200037d4 	.word	0x200037d4
   1b914:	2000499a 	.word	0x2000499a

0001b918 <ll_rl_remove>:
{
   1b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b91c:	b083      	sub	sp, #12
   1b91e:	4603      	mov	r3, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b920:	2000      	movs	r0, #0
{
   1b922:	461c      	mov	r4, r3
   1b924:	9300      	str	r3, [sp, #0]
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b926:	f7fc f9c1 	bl	17cac <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1b92a:	f030 0901 	bics.w	r9, r0, #1
   1b92e:	f040 8085 	bne.w	1ba3c <ll_rl_remove+0x124>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b932:	4623      	mov	r3, r4
   1b934:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1ba74 <ll_rl_remove+0x15c>
   1b938:	f813 bb01 	ldrb.w	fp, [r3], #1
   1b93c:	464c      	mov	r4, r9
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b93e:	f00b 0b01 	and.w	fp, fp, #1
   1b942:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1b946:	461e      	mov	r6, r3
   1b948:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b94c:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1b950:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b954:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b958:	07db      	lsls	r3, r3, #31
   1b95a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1b95e:	d501      	bpl.n	1b964 <ll_rl_remove+0x4c>
   1b960:	455a      	cmp	r2, fp
   1b962:	d008      	beq.n	1b976 <ll_rl_remove+0x5e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b964:	3401      	adds	r4, #1
   1b966:	2c08      	cmp	r4, #8
   1b968:	f108 0828 	add.w	r8, r8, #40	; 0x28
   1b96c:	d1ec      	bne.n	1b948 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b96e:	2002      	movs	r0, #2
}
   1b970:	b003      	add	sp, #12
   1b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b976:	4640      	mov	r0, r8
   1b978:	2206      	movs	r2, #6
   1b97a:	4631      	mov	r1, r6
   1b97c:	f00c fdf2 	bl	28564 <memcmp>
   1b980:	2800      	cmp	r0, #0
   1b982:	d1ef      	bne.n	1b964 <ll_rl_remove+0x4c>
		if (rl[i].pirk) {
   1b984:	782a      	ldrb	r2, [r5, #0]
   1b986:	0752      	lsls	r2, r2, #29
   1b988:	4633      	mov	r3, r6
   1b98a:	4606      	mov	r6, r0
   1b98c:	d535      	bpl.n	1b9fa <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1b98e:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 1ba78 <ll_rl_remove+0x160>
   1b992:	f89b 8000 	ldrb.w	r8, [fp]
   1b996:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   1b99a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   1b99e:	d02a      	beq.n	1b9f6 <ll_rl_remove+0xde>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1b9a0:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   1b9a2:	4545      	cmp	r5, r8
   1b9a4:	d027      	beq.n	1b9f6 <ll_rl_remove+0xde>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   1b9a6:	4835      	ldr	r0, [pc, #212]	; (1ba7c <ll_rl_remove+0x164>)
   1b9a8:	9301      	str	r3, [sp, #4]
   1b9aa:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1b9ae:	2210      	movs	r2, #16
   1b9b0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   1b9b4:	f00c fdff 	bl	285b6 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   1b9b8:	4831      	ldr	r0, [pc, #196]	; (1ba80 <ll_rl_remove+0x168>)
   1b9ba:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   1b9bc:	eb09 0289 	add.w	r2, r9, r9, lsl #2
   1b9c0:	fa5f fc89 	uxtb.w	ip, r9
   1b9c4:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   1b9c8:	f011 0f01 	tst.w	r1, #1
   1b9cc:	f109 0901 	add.w	r9, r9, #1
   1b9d0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   1b9d4:	d004      	beq.n	1b9e0 <ll_rl_remove+0xc8>
   1b9d6:	0749      	lsls	r1, r1, #29
   1b9d8:	d502      	bpl.n	1b9e0 <ll_rl_remove+0xc8>
   1b9da:	7dc1      	ldrb	r1, [r0, #23]
   1b9dc:	4541      	cmp	r1, r8
   1b9de:	d03d      	beq.n	1ba5c <ll_rl_remove+0x144>
				for (k = 0U;
   1b9e0:	f1b9 0f08 	cmp.w	r9, #8
   1b9e4:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1b9e8:	d1e8      	bne.n	1b9bc <ll_rl_remove+0xa4>
			peer_irk_count--;
   1b9ea:	f89b 8000 	ldrb.w	r8, [fp]
   1b9ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1b9f2:	fa5f f888 	uxtb.w	r8, r8
   1b9f6:	f88b 8000 	strb.w	r8, [fp]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1b9fa:	9a00      	ldr	r2, [sp, #0]
   1b9fc:	4d21      	ldr	r5, [pc, #132]	; (1ba84 <ll_rl_remove+0x16c>)
   1b9fe:	f892 9000 	ldrb.w	r9, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   1ba02:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1ba06:	f009 0901 	and.w	r9, r9, #1
   1ba0a:	469b      	mov	fp, r3
   1ba0c:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   1ba10:	07d1      	lsls	r1, r2, #31
   1ba12:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1ba16:	d501      	bpl.n	1ba1c <ll_rl_remove+0x104>
   1ba18:	4548      	cmp	r0, r9
   1ba1a:	d013      	beq.n	1ba44 <ll_rl_remove+0x12c>
	for (i = 0; i < FAL_SIZE; i++) {
   1ba1c:	3601      	adds	r6, #1
   1ba1e:	2e08      	cmp	r6, #8
   1ba20:	f105 0508 	add.w	r5, r5, #8
   1ba24:	d1f2      	bne.n	1ba0c <ll_rl_remove+0xf4>
		rl[i].taken = 0U;
   1ba26:	4454      	add	r4, sl
		return 0;
   1ba28:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1ba2a:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1ba2e:	f36f 0300 	bfc	r3, #0, #1
   1ba32:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   1ba36:	b003      	add	sp, #12
   1ba38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ba3c:	200c      	movs	r0, #12
}
   1ba3e:	b003      	add	sp, #12
   1ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1ba44:	2206      	movs	r2, #6
   1ba46:	4628      	mov	r0, r5
   1ba48:	4659      	mov	r1, fp
   1ba4a:	f00c fd8b 	bl	28564 <memcmp>
   1ba4e:	2800      	cmp	r0, #0
   1ba50:	d1e4      	bne.n	1ba1c <ll_rl_remove+0x104>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1ba52:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   1ba56:	23ff      	movs	r3, #255	; 0xff
   1ba58:	7073      	strb	r3, [r6, #1]
   1ba5a:	e7e4      	b.n	1ba26 <ll_rl_remove+0x10e>
			peer_irk_count--;
   1ba5c:	f89b 8000 	ldrb.w	r8, [fp]
						rl[k].pirk_idx = pi;
   1ba60:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1ba62:	4a09      	ldr	r2, [pc, #36]	; (1ba88 <ll_rl_remove+0x170>)
			peer_irk_count--;
   1ba64:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   1ba68:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   1ba6c:	fa5f f888 	uxtb.w	r8, r8
						break;
   1ba70:	e7c1      	b.n	1b9f6 <ll_rl_remove+0xde>
   1ba72:	bf00      	nop
   1ba74:	200037d5 	.word	0x200037d5
   1ba78:	2000499a 	.word	0x2000499a
   1ba7c:	20003754 	.word	0x20003754
   1ba80:	200037d4 	.word	0x200037d4
   1ba84:	200036aa 	.word	0x200036aa
   1ba88:	2000374c 	.word	0x2000374c

0001ba8c <ll_rl_crpa_set>:
{
   1ba8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1ba90:	795c      	ldrb	r4, [r3, #5]
   1ba92:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1ba96:	2c40      	cmp	r4, #64	; 0x40
   1ba98:	d001      	beq.n	1ba9e <ll_rl_crpa_set+0x12>
}
   1ba9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1ba9e:	461e      	mov	r6, r3
   1baa0:	460f      	mov	r7, r1
   1baa2:	b301      	cbz	r1, 1bae6 <ll_rl_crpa_set+0x5a>
   1baa4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1bb10 <ll_rl_crpa_set+0x84>
   1baa8:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1baaa:	f000 0a01 	and.w	sl, r0, #1
   1baae:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   1bab2:	e003      	b.n	1babc <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bab4:	2c08      	cmp	r4, #8
   1bab6:	f109 0928 	add.w	r9, r9, #40	; 0x28
   1baba:	d0ee      	beq.n	1ba9a <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1babc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1bac0:	4625      	mov	r5, r4
   1bac2:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1bac6:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1baca:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bacc:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bad0:	d5f0      	bpl.n	1bab4 <ll_rl_crpa_set+0x28>
   1bad2:	4553      	cmp	r3, sl
   1bad4:	d1ee      	bne.n	1bab4 <ll_rl_crpa_set+0x28>
   1bad6:	4648      	mov	r0, r9
   1bad8:	2206      	movs	r2, #6
   1bada:	4639      	mov	r1, r7
   1badc:	f00c fd42 	bl	28564 <memcmp>
   1bae0:	2800      	cmp	r0, #0
   1bae2:	d1e7      	bne.n	1bab4 <ll_rl_crpa_set+0x28>
   1bae4:	e004      	b.n	1baf0 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1bae6:	2a07      	cmp	r2, #7
   1bae8:	d8d7      	bhi.n	1ba9a <ll_rl_crpa_set+0xe>
   1baea:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1bb14 <ll_rl_crpa_set+0x88>
   1baee:	4615      	mov	r5, r2
   1baf0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1baf4:	00e8      	lsls	r0, r5, #3
   1baf6:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1bafa:	07db      	lsls	r3, r3, #31
   1bafc:	d5cd      	bpl.n	1ba9a <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1bafe:	3018      	adds	r0, #24
   1bb00:	4631      	mov	r1, r6
   1bb02:	4440      	add	r0, r8
   1bb04:	2206      	movs	r2, #6
}
   1bb06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1bb0a:	f00c bd54 	b.w	285b6 <memcpy>
   1bb0e:	bf00      	nop
   1bb10:	200037d5 	.word	0x200037d5
   1bb14:	200037d4 	.word	0x200037d4

0001bb18 <ll_rl_crpa_get>:
{
   1bb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bb1c:	4682      	mov	sl, r0
   1bb1e:	4e1a      	ldr	r6, [pc, #104]	; (1bb88 <ll_rl_crpa_get+0x70>)
   1bb20:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1bb24:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bb26:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bb28:	f008 0801 	and.w	r8, r8, #1
   1bb2c:	1e77      	subs	r7, r6, #1
   1bb2e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1bb32:	00d5      	lsls	r5, r2, #3
   1bb34:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1bb38:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1bb3c:	07db      	lsls	r3, r3, #31
   1bb3e:	f104 0401 	add.w	r4, r4, #1
   1bb42:	d501      	bpl.n	1bb48 <ll_rl_crpa_get+0x30>
   1bb44:	4542      	cmp	r2, r8
   1bb46:	d006      	beq.n	1bb56 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bb48:	2c08      	cmp	r4, #8
   1bb4a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1bb4e:	d1ee      	bne.n	1bb2e <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1bb50:	2002      	movs	r0, #2
}
   1bb52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bb56:	4630      	mov	r0, r6
   1bb58:	2206      	movs	r2, #6
   1bb5a:	4651      	mov	r1, sl
   1bb5c:	f00c fd02 	bl	28564 <memcmp>
   1bb60:	4683      	mov	fp, r0
   1bb62:	2800      	cmp	r0, #0
   1bb64:	d1f0      	bne.n	1bb48 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1bb66:	f105 0218 	add.w	r2, r5, #24
   1bb6a:	4417      	add	r7, r2
   1bb6c:	2106      	movs	r1, #6
   1bb6e:	4638      	mov	r0, r7
   1bb70:	f7f7 fc72 	bl	13458 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1bb74:	2800      	cmp	r0, #0
   1bb76:	d0eb      	beq.n	1bb50 <ll_rl_crpa_get+0x38>
   1bb78:	2206      	movs	r2, #6
   1bb7a:	4639      	mov	r1, r7
   1bb7c:	4648      	mov	r0, r9
   1bb7e:	f00c fd1a 	bl	285b6 <memcpy>
		return 0;
   1bb82:	4658      	mov	r0, fp
}
   1bb84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb88:	200037d5 	.word	0x200037d5

0001bb8c <ll_rl_lrpa_get>:
{
   1bb8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bb90:	4681      	mov	r9, r0
   1bb92:	4e16      	ldr	r6, [pc, #88]	; (1bbec <ll_rl_lrpa_get+0x60>)
   1bb94:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1bb98:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bb9a:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bb9c:	f008 0801 	and.w	r8, r8, #1
   1bba0:	1e77      	subs	r7, r6, #1
   1bba2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1bba6:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1bbaa:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1bbae:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1bbb2:	07db      	lsls	r3, r3, #31
   1bbb4:	f104 0401 	add.w	r4, r4, #1
   1bbb8:	d501      	bpl.n	1bbbe <ll_rl_lrpa_get+0x32>
   1bbba:	4542      	cmp	r2, r8
   1bbbc:	d006      	beq.n	1bbcc <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bbbe:	2c08      	cmp	r4, #8
   1bbc0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1bbc4:	d1ed      	bne.n	1bba2 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1bbc6:	2002      	movs	r0, #2
}
   1bbc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bbcc:	4630      	mov	r0, r6
   1bbce:	2206      	movs	r2, #6
   1bbd0:	4649      	mov	r1, r9
   1bbd2:	f00c fcc7 	bl	28564 <memcmp>
   1bbd6:	4683      	mov	fp, r0
   1bbd8:	2800      	cmp	r0, #0
   1bbda:	d1f0      	bne.n	1bbbe <ll_rl_lrpa_get+0x32>
   1bbdc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1bbde:	2206      	movs	r2, #6
   1bbe0:	4650      	mov	r0, sl
   1bbe2:	f00c fce8 	bl	285b6 <memcpy>
		return 0;
   1bbe6:	4658      	mov	r0, fp
}
   1bbe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbec:	200037d5 	.word	0x200037d5

0001bbf0 <ll_rl_enable>:
{
   1bbf0:	b510      	push	{r4, lr}
   1bbf2:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1bbf4:	2000      	movs	r0, #0
   1bbf6:	f7fc f859 	bl	17cac <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1bbfa:	f030 0001 	bics.w	r0, r0, #1
   1bbfe:	d10b      	bne.n	1bc18 <ll_rl_enable+0x28>
	switch (enable) {
   1bc00:	b134      	cbz	r4, 1bc10 <ll_rl_enable+0x20>
   1bc02:	2c01      	cmp	r4, #1
   1bc04:	d001      	beq.n	1bc0a <ll_rl_enable+0x1a>
   1bc06:	2012      	movs	r0, #18
}
   1bc08:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   1bc0a:	4b04      	ldr	r3, [pc, #16]	; (1bc1c <ll_rl_enable+0x2c>)
   1bc0c:	701c      	strb	r4, [r3, #0]
}
   1bc0e:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1bc10:	4b02      	ldr	r3, [pc, #8]	; (1bc1c <ll_rl_enable+0x2c>)
   1bc12:	701c      	strb	r4, [r3, #0]
	return 0;
   1bc14:	4620      	mov	r0, r4
}
   1bc16:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bc18:	200c      	movs	r0, #12
}
   1bc1a:	bd10      	pop	{r4, pc}
   1bc1c:	2000499b 	.word	0x2000499b

0001bc20 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1bc20:	4b03      	ldr	r3, [pc, #12]	; (1bc30 <ll_rl_timeout_set+0x10>)
   1bc22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc26:	fb02 f000 	mul.w	r0, r2, r0
   1bc2a:	6018      	str	r0, [r3, #0]
}
   1bc2c:	4770      	bx	lr
   1bc2e:	bf00      	nop
   1bc30:	20003948 	.word	0x20003948

0001bc34 <ll_priv_mode_set>:
{
   1bc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc38:	4682      	mov	sl, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1bc3a:	2000      	movs	r0, #0
{
   1bc3c:	4688      	mov	r8, r1
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1bc3e:	f7fc f835 	bl	17cac <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1bc42:	f030 0401 	bics.w	r4, r0, #1
   1bc46:	d12c      	bne.n	1bca2 <ll_priv_mode_set+0x6e>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bc48:	4e1c      	ldr	r6, [pc, #112]	; (1bcbc <ll_priv_mode_set+0x88>)
   1bc4a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bc4e:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bc50:	f009 0901 	and.w	r9, r9, #1
   1bc54:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1bc58:	00d5      	lsls	r5, r2, #3
   1bc5a:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1bc5e:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1bc62:	07db      	lsls	r3, r3, #31
   1bc64:	f104 0401 	add.w	r4, r4, #1
   1bc68:	d501      	bpl.n	1bc6e <ll_priv_mode_set+0x3a>
   1bc6a:	454a      	cmp	r2, r9
   1bc6c:	d006      	beq.n	1bc7c <ll_priv_mode_set+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bc6e:	2c08      	cmp	r4, #8
   1bc70:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1bc74:	d1ee      	bne.n	1bc54 <ll_priv_mode_set+0x20>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1bc76:	2002      	movs	r0, #2
}
   1bc78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bc7c:	4630      	mov	r0, r6
   1bc7e:	2206      	movs	r2, #6
   1bc80:	4651      	mov	r1, sl
   1bc82:	f00c fc6f 	bl	28564 <memcmp>
   1bc86:	2800      	cmp	r0, #0
   1bc88:	d1f1      	bne.n	1bc6e <ll_priv_mode_set+0x3a>
		switch (mode) {
   1bc8a:	f1b8 0f00 	cmp.w	r8, #0
   1bc8e:	d00e      	beq.n	1bcae <ll_priv_mode_set+0x7a>
   1bc90:	f1b8 0f01 	cmp.w	r8, #1
   1bc94:	d108      	bne.n	1bca8 <ll_priv_mode_set+0x74>
			rl[i].dev = 1U;
   1bc96:	5d7b      	ldrb	r3, [r7, r5]
   1bc98:	f043 0310 	orr.w	r3, r3, #16
   1bc9c:	557b      	strb	r3, [r7, r5]
}
   1bc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bca2:	200c      	movs	r0, #12
}
   1bca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1bca8:	2012      	movs	r0, #18
}
   1bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1bcae:	5d7b      	ldrb	r3, [r7, r5]
   1bcb0:	f368 1304 	bfi	r3, r8, #4, #1
   1bcb4:	557b      	strb	r3, [r7, r5]
	return 0;
   1bcb6:	4640      	mov	r0, r8
}
   1bcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bcbc:	200037d5 	.word	0x200037d5

0001bcc0 <ull_filter_reset>:
{
   1bcc0:	b4d0      	push	{r4, r6, r7}
   1bcc2:	4930      	ldr	r1, [pc, #192]	; (1bd84 <ull_filter_reset+0xc4>)
   1bcc4:	4c30      	ldr	r4, [pc, #192]	; (1bd88 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   1bcc6:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   1bcc8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1bccc:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1bcce:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   1bcd0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1bcd4:	d805      	bhi.n	1bce2 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   1bcd6:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   1bcda:	f36f 1245 	bfc	r2, #5, #1
   1bcde:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   1bce2:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1bce6:	f36f 0200 	bfc	r2, #0, #1
   1bcea:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1bcee:	3301      	adds	r3, #1
   1bcf0:	2b08      	cmp	r3, #8
   1bcf2:	d1e9      	bne.n	1bcc8 <ull_filter_reset+0x8>
	rl_enable = 0U;
   1bcf4:	4a25      	ldr	r2, [pc, #148]	; (1bd8c <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1bcf6:	4c26      	ldr	r4, [pc, #152]	; (1bd90 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   1bcf8:	2300      	movs	r3, #0
   1bcfa:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   1bcfc:	780a      	ldrb	r2, [r1, #0]
   1bcfe:	f363 0200 	bfi	r2, r3, #0, #1
   1bd02:	700a      	strb	r2, [r1, #0]
   1bd04:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   1bd08:	f363 0200 	bfi	r2, r3, #0, #1
   1bd0c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   1bd10:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   1bd14:	f363 0200 	bfi	r2, r3, #0, #1
   1bd18:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   1bd1c:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1bd20:	f363 0200 	bfi	r2, r3, #0, #1
   1bd24:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1bd28:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   1bd2c:	f363 0200 	bfi	r2, r3, #0, #1
   1bd30:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   1bd34:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   1bd38:	f363 0200 	bfi	r2, r3, #0, #1
   1bd3c:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   1bd40:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   1bd44:	f363 0200 	bfi	r2, r3, #0, #1
   1bd48:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   1bd4c:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   1bd50:	f363 0200 	bfi	r2, r3, #0, #1
   1bd54:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1bd58:	4a0e      	ldr	r2, [pc, #56]	; (1bd94 <ull_filter_reset+0xd4>)
   1bd5a:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   1bd5c:	4b0e      	ldr	r3, [pc, #56]	; (1bd98 <ull_filter_reset+0xd8>)
   1bd5e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1bd62:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1bd66:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1bd6a:	4b0c      	ldr	r3, [pc, #48]	; (1bd9c <ull_filter_reset+0xdc>)
   1bd6c:	6023      	str	r3, [r4, #0]
	if (init) {
   1bd6e:	b120      	cbz	r0, 1bd7a <ull_filter_reset+0xba>
}
   1bd70:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   1bd72:	490b      	ldr	r1, [pc, #44]	; (1bda0 <ull_filter_reset+0xe0>)
   1bd74:	480b      	ldr	r0, [pc, #44]	; (1bda4 <ull_filter_reset+0xe4>)
   1bd76:	f00f bd54 	b.w	2b822 <k_work_init_delayable>
}
   1bd7a:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   1bd7c:	4809      	ldr	r0, [pc, #36]	; (1bda4 <ull_filter_reset+0xe4>)
   1bd7e:	f00f bd5c 	b.w	2b83a <k_work_cancel_delayable>
   1bd82:	bf00      	nop
   1bd84:	200037d4 	.word	0x200037d4
   1bd88:	200036a8 	.word	0x200036a8
   1bd8c:	2000499b 	.word	0x2000499b
   1bd90:	20003948 	.word	0x20003948
   1bd94:	2000499a 	.word	0x2000499a
   1bd98:	20002068 	.word	0x20002068
   1bd9c:	000dbba0 	.word	0x000dbba0
   1bda0:	0001bfb9 	.word	0x0001bfb9
   1bda4:	20002070 	.word	0x20002070

0001bda8 <ull_filter_lll_get>:
		return &fal_filter;
   1bda8:	4a03      	ldr	r2, [pc, #12]	; (1bdb8 <ull_filter_lll_get+0x10>)
   1bdaa:	4b04      	ldr	r3, [pc, #16]	; (1bdbc <ull_filter_lll_get+0x14>)
}
   1bdac:	2800      	cmp	r0, #0
   1bdae:	bf0c      	ite	eq
   1bdb0:	4610      	moveq	r0, r2
   1bdb2:	4618      	movne	r0, r3
   1bdb4:	4770      	bx	lr
   1bdb6:	bf00      	nop
   1bdb8:	20003914 	.word	0x20003914
   1bdbc:	200036e8 	.word	0x200036e8

0001bdc0 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1bdc0:	b1a8      	cbz	r0, 1bdee <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1bdc2:	4a0c      	ldr	r2, [pc, #48]	; (1bdf4 <ull_filter_adv_scan_state_cb+0x34>)
   1bdc4:	6812      	ldr	r2, [r2, #0]
{
   1bdc6:	b510      	push	{r4, lr}
   1bdc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bdcc:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bdd0:	2100      	movs	r1, #0
   1bdd2:	fbe2 0103 	umlal	r0, r1, r2, r3
   1bdd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bdda:	2300      	movs	r3, #0
   1bddc:	f7e5 f990 	bl	1100 <__aeabi_uldivmod>
}
   1bde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bde4:	4602      	mov	r2, r0
   1bde6:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1bde8:	4803      	ldr	r0, [pc, #12]	; (1bdf8 <ull_filter_adv_scan_state_cb+0x38>)
   1bdea:	f008 b83b 	b.w	23e64 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   1bdee:	4802      	ldr	r0, [pc, #8]	; (1bdf8 <ull_filter_adv_scan_state_cb+0x38>)
   1bdf0:	f00f bd23 	b.w	2b83a <k_work_cancel_delayable>
   1bdf4:	20003948 	.word	0x20003948
   1bdf8:	20002070 	.word	0x20002070

0001bdfc <ull_filter_scan_update>:
{
   1bdfc:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1bdfe:	4b09      	ldr	r3, [pc, #36]	; (1be24 <ull_filter_scan_update+0x28>)
   1be00:	2200      	movs	r2, #0
   1be02:	801a      	strh	r2, [r3, #0]
	if ((scan_fp & 0x1) &&
   1be04:	07c3      	lsls	r3, r0, #31
   1be06:	d406      	bmi.n	1be16 <ull_filter_scan_update+0x1a>
	if (rl_enable &&
   1be08:	4b07      	ldr	r3, [pc, #28]	; (1be28 <ull_filter_scan_update+0x2c>)
	filter->enable_bitmask = 0;
   1be0a:	4a08      	ldr	r2, [pc, #32]	; (1be2c <ull_filter_scan_update+0x30>)
	if (rl_enable &&
   1be0c:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1be0e:	2100      	movs	r1, #0
   1be10:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1be12:	b91b      	cbnz	r3, 1be1c <ull_filter_scan_update+0x20>
}
   1be14:	bd08      	pop	{r3, pc}
		fal_update();
   1be16:	f7ff fb9b 	bl	1b550 <fal_update>
   1be1a:	e7f5      	b.n	1be08 <ull_filter_scan_update+0xc>
}
   1be1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1be20:	f7ff bb5e 	b.w	1b4e0 <rl_update>
   1be24:	200036e8 	.word	0x200036e8
   1be28:	2000499b 	.word	0x2000499b
   1be2c:	20003914 	.word	0x20003914

0001be30 <ull_filter_rpa_update>:
{
   1be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be34:	4604      	mov	r4, r0
   1be36:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1be38:	f00f fea5 	bl	2bb86 <z_impl_k_uptime_ticks>
   1be3c:	014b      	lsls	r3, r1, #5
   1be3e:	0142      	lsls	r2, r0, #5
   1be40:	1a12      	subs	r2, r2, r0
   1be42:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1be46:	eb63 0301 	sbc.w	r3, r3, r1
   1be4a:	009b      	lsls	r3, r3, #2
   1be4c:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1be50:	eb19 0900 	adds.w	r9, r9, r0
   1be54:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1be58:	eb41 0103 	adc.w	r1, r1, r3
   1be5c:	00cb      	lsls	r3, r1, #3
   1be5e:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1be62:	0bd8      	lsrs	r0, r3, #15
   1be64:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1be68:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1be6c:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1be6e:	b9bc      	cbnz	r4, 1bea0 <ull_filter_rpa_update+0x70>
   1be70:	4a49      	ldr	r2, [pc, #292]	; (1bf98 <ull_filter_rpa_update+0x168>)
   1be72:	e9d2 3200 	ldrd	r3, r2, [r2]
   1be76:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1be7a:	bf08      	it	eq
   1be7c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1be80:	d00e      	beq.n	1bea0 <ull_filter_rpa_update+0x70>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1be82:	4946      	ldr	r1, [pc, #280]	; (1bf9c <ull_filter_rpa_update+0x16c>)
   1be84:	6809      	ldr	r1, [r1, #0]
   1be86:	ebb9 0303 	subs.w	r3, r9, r3
   1be8a:	eb60 0202 	sbc.w	r2, r0, r2
	bool all = timeout || (rpa_last_ms == -1) ||
   1be8e:	428b      	cmp	r3, r1
   1be90:	f172 0300 	sbcs.w	r3, r2, #0
   1be94:	bfac      	ite	ge
   1be96:	f04f 0a01 	movge.w	sl, #1
   1be9a:	f04f 0a00 	movlt.w	sl, #0
   1be9e:	e001      	b.n	1bea4 <ull_filter_rpa_update+0x74>
   1bea0:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bea4:	4e3e      	ldr	r6, [pc, #248]	; (1bfa0 <ull_filter_rpa_update+0x170>)
   1bea6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1bfa4 <ull_filter_rpa_update+0x174>
				LL_ASSERT(!err);
   1beaa:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1bfa8 <ull_filter_rpa_update+0x178>
	bool all = timeout || (rpa_last_ms == -1) ||
   1beae:	2400      	movs	r4, #0
   1beb0:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1beb4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1beb8:	00a5      	lsls	r5, r4, #2
   1beba:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bebe:	07d8      	lsls	r0, r3, #31
   1bec0:	d515      	bpl.n	1beee <ull_filter_rpa_update+0xbe>
   1bec2:	f1ba 0f00 	cmp.w	sl, #0
   1bec6:	d101      	bne.n	1becc <ull_filter_rpa_update+0x9c>
   1bec8:	0799      	lsls	r1, r3, #30
   1beca:	d410      	bmi.n	1beee <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1becc:	192b      	adds	r3, r5, r4
   1bece:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bed2:	075a      	lsls	r2, r3, #29
   1bed4:	d42e      	bmi.n	1bf34 <ull_filter_rpa_update+0x104>
			if (rl[i].lirk) {
   1bed6:	192b      	adds	r3, r5, r4
   1bed8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bedc:	071b      	lsls	r3, r3, #28
   1bede:	d418      	bmi.n	1bf12 <ull_filter_rpa_update+0xe2>
			rl[i].rpas_ready = 1U;
   1bee0:	4425      	add	r5, r4
   1bee2:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1bee6:	f043 0302 	orr.w	r3, r3, #2
   1beea:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1beee:	3401      	adds	r4, #1
   1bef0:	2c08      	cmp	r4, #8
   1bef2:	f108 0806 	add.w	r8, r8, #6
   1bef6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1befa:	d1db      	bne.n	1beb4 <ull_filter_rpa_update+0x84>
	if (all) {
   1befc:	f1ba 0f00 	cmp.w	sl, #0
   1bf00:	d004      	beq.n	1bf0c <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1bf02:	4b25      	ldr	r3, [pc, #148]	; (1bf98 <ull_filter_rpa_update+0x168>)
   1bf04:	9a01      	ldr	r2, [sp, #4]
   1bf06:	f8c3 9000 	str.w	r9, [r3]
   1bf0a:	605a      	str	r2, [r3, #4]
}
   1bf0c:	b007      	add	sp, #28
   1bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1bf12:	a902      	add	r1, sp, #8
   1bf14:	f1a6 0017 	sub.w	r0, r6, #23
   1bf18:	f00c fbbc 	bl	28694 <bt_rpa_create>
				LL_ASSERT(!err);
   1bf1c:	bb70      	cbnz	r0, 1bf7c <ull_filter_rpa_update+0x14c>
				rl[i].local_rpa = &rpa;
   1bf1e:	ab02      	add	r3, sp, #8
   1bf20:	4619      	mov	r1, r3
   1bf22:	2206      	movs	r2, #6
   1bf24:	4640      	mov	r0, r8
   1bf26:	f8c6 3006 	str.w	r3, [r6, #6]
   1bf2a:	f00c fb44 	bl	285b6 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1bf2e:	f8c6 8006 	str.w	r8, [r6, #6]
   1bf32:	e7d5      	b.n	1bee0 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1bf34:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1bf38:	4a1c      	ldr	r2, [pc, #112]	; (1bfac <ull_filter_rpa_update+0x17c>)
   1bf3a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1bf3e:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1bf40:	f10d 0307 	add.w	r3, sp, #7
   1bf44:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1bf48:	f812 1901 	ldrb.w	r1, [r2], #-1
   1bf4c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1bf50:	4283      	cmp	r3, r0
   1bf52:	d1f9      	bne.n	1bf48 <ull_filter_rpa_update+0x118>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1bf54:	4631      	mov	r1, r6
   1bf56:	a802      	add	r0, sp, #8
   1bf58:	f00c fb9c 	bl	28694 <bt_rpa_create>
				LL_ASSERT(!err);
   1bf5c:	2800      	cmp	r0, #0
   1bf5e:	d0ba      	beq.n	1bed6 <ull_filter_rpa_update+0xa6>
   1bf60:	4913      	ldr	r1, [pc, #76]	; (1bfb0 <ull_filter_rpa_update+0x180>)
   1bf62:	4814      	ldr	r0, [pc, #80]	; (1bfb4 <ull_filter_rpa_update+0x184>)
   1bf64:	f240 23eb 	movw	r3, #747	; 0x2eb
   1bf68:	465a      	mov	r2, fp
   1bf6a:	f008 fe47 	bl	24bfc <printk>
   1bf6e:	4040      	eors	r0, r0
   1bf70:	f380 8811 	msr	BASEPRI, r0
   1bf74:	f04f 0003 	mov.w	r0, #3
   1bf78:	df02      	svc	2
   1bf7a:	e7ac      	b.n	1bed6 <ull_filter_rpa_update+0xa6>
				LL_ASSERT(!err);
   1bf7c:	490c      	ldr	r1, [pc, #48]	; (1bfb0 <ull_filter_rpa_update+0x180>)
   1bf7e:	480d      	ldr	r0, [pc, #52]	; (1bfb4 <ull_filter_rpa_update+0x184>)
   1bf80:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1bf84:	465a      	mov	r2, fp
   1bf86:	f008 fe39 	bl	24bfc <printk>
   1bf8a:	4040      	eors	r0, r0
   1bf8c:	f380 8811 	msr	BASEPRI, r0
   1bf90:	f04f 0003 	mov.w	r0, #3
   1bf94:	df02      	svc	2
   1bf96:	e7c2      	b.n	1bf1e <ull_filter_rpa_update+0xee>
   1bf98:	20002068 	.word	0x20002068
   1bf9c:	20003948 	.word	0x20003948
   1bfa0:	200037f2 	.word	0x200037f2
   1bfa4:	2000371c 	.word	0x2000371c
   1bfa8:	0002dacc 	.word	0x0002dacc
   1bfac:	20003754 	.word	0x20003754
   1bfb0:	0002d5f4 	.word	0x0002d5f4
   1bfb4:	0002d27c 	.word	0x0002d27c

0001bfb8 <rpa_timeout>:
{
   1bfb8:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1bfba:	2001      	movs	r0, #1
   1bfbc:	f7ff ff38 	bl	1be30 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1bfc0:	4a0a      	ldr	r2, [pc, #40]	; (1bfec <rpa_timeout+0x34>)
   1bfc2:	6812      	ldr	r2, [r2, #0]
   1bfc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bfc8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bfcc:	2100      	movs	r1, #0
   1bfce:	fbe2 0103 	umlal	r0, r1, r2, r3
   1bfd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bfd6:	2300      	movs	r3, #0
   1bfd8:	f7e5 f892 	bl	1100 <__aeabi_uldivmod>
}
   1bfdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bfe0:	4602      	mov	r2, r0
   1bfe2:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1bfe4:	4802      	ldr	r0, [pc, #8]	; (1bff0 <rpa_timeout+0x38>)
   1bfe6:	f007 bf3d 	b.w	23e64 <k_work_schedule>
   1bfea:	bf00      	nop
   1bfec:	20003948 	.word	0x20003948
   1bff0:	20002070 	.word	0x20002070

0001bff4 <ull_filter_rl_find>:
{
   1bff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bff8:	468b      	mov	fp, r1
	if (free_idx) {
   1bffa:	4617      	mov	r7, r2
   1bffc:	b10a      	cbz	r2, 1c002 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   1bffe:	23ff      	movs	r3, #255	; 0xff
   1c000:	7013      	strb	r3, [r2, #0]
   1c002:	4d1b      	ldr	r5, [pc, #108]	; (1c070 <ull_filter_rl_find+0x7c>)
{
   1c004:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c006:	f000 0a01 	and.w	sl, r0, #1
   1c00a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1c00e:	e006      	b.n	1c01e <ull_filter_rl_find+0x2a>
   1c010:	4552      	cmp	r2, sl
   1c012:	d01f      	beq.n	1c054 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c014:	3401      	adds	r4, #1
   1c016:	2c08      	cmp	r4, #8
   1c018:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1c01c:	d015      	beq.n	1c04a <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c01e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1c022:	fa5f f884 	uxtb.w	r8, r4
   1c026:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1c02a:	07d9      	lsls	r1, r3, #31
   1c02c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1c030:	d4ee      	bmi.n	1c010 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   1c032:	2f00      	cmp	r7, #0
   1c034:	d0ee      	beq.n	1c014 <ull_filter_rl_find+0x20>
   1c036:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c038:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1c03a:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   1c03c:	bf08      	it	eq
   1c03e:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c042:	2c08      	cmp	r4, #8
   1c044:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1c048:	d1e9      	bne.n	1c01e <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1c04a:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1c04e:	4640      	mov	r0, r8
   1c050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c054:	4628      	mov	r0, r5
   1c056:	2206      	movs	r2, #6
   1c058:	4659      	mov	r1, fp
   1c05a:	f00c fa83 	bl	28564 <memcmp>
   1c05e:	2800      	cmp	r0, #0
   1c060:	d0f5      	beq.n	1c04e <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1c062:	2f00      	cmp	r7, #0
   1c064:	d0d6      	beq.n	1c014 <ull_filter_rl_find+0x20>
   1c066:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1c06a:	07db      	lsls	r3, r3, #31
   1c06c:	d4d2      	bmi.n	1c014 <ull_filter_rl_find+0x20>
   1c06e:	e7e2      	b.n	1c036 <ull_filter_rl_find+0x42>
   1c070:	200037d5 	.word	0x200037d5

0001c074 <ll_rl_add>:
{
   1c074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c078:	4680      	mov	r8, r0
   1c07a:	b085      	sub	sp, #20
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1c07c:	2000      	movs	r0, #0
{
   1c07e:	460c      	mov	r4, r1
   1c080:	4615      	mov	r5, r2
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1c082:	f7fb fe13 	bl	17cac <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1c086:	f030 0301 	bics.w	r3, r0, #1
   1c08a:	d17d      	bne.n	1c188 <ll_rl_add+0x114>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1c08c:	46c1      	mov	r9, r8
   1c08e:	f10d 020f 	add.w	r2, sp, #15
   1c092:	f819 0b01 	ldrb.w	r0, [r9], #1
   1c096:	4649      	mov	r1, r9
   1c098:	f7ff ffac 	bl	1bff4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1c09c:	2807      	cmp	r0, #7
   1c09e:	f240 80b8 	bls.w	1c212 <ll_rl_add+0x19e>
	} else if (j >= ARRAY_SIZE(rl)) {
   1c0a2:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1c0a6:	2f07      	cmp	r7, #7
   1c0a8:	f200 8085 	bhi.w	1c1b6 <ll_rl_add+0x142>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1c0ac:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1c0b0:	4e5a      	ldr	r6, [pc, #360]	; (1c21c <ll_rl_add+0x1a8>)
   1c0b2:	00db      	lsls	r3, r3, #3
   1c0b4:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c0b6:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1c0ba:	2206      	movs	r2, #6
   1c0bc:	4649      	mov	r1, r9
   1c0be:	4430      	add	r0, r6
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1c0c0:	9301      	str	r3, [sp, #4]
   1c0c2:	f00c fa78 	bl	285b6 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c0c6:	f898 1000 	ldrb.w	r1, [r8]
   1c0ca:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   1c0ce:	ea4f 0acb 	mov.w	sl, fp, lsl #3
   1c0d2:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c0d6:	4620      	mov	r0, r4
   1c0d8:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c0da:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c0de:	f7f7 f9bb 	bl	13458 <mem_nz>
   1c0e2:	f816 200a 	ldrb.w	r2, [r6, sl]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c0e6:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c0e8:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c0ec:	4628      	mov	r0, r5
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c0ee:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c0f2:	f7f7 f9b1 	bl	13458 <mem_nz>
   1c0f6:	f816 200a 	ldrb.w	r2, [r6, sl]
	if (rl[i].pirk) {
   1c0fa:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c0fc:	f000 0001 	and.w	r0, r0, #1
   1c100:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   1c104:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c108:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c10c:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   1c110:	ea4f 0a87 	mov.w	sl, r7, lsl #2
	if (rl[i].pirk) {
   1c114:	d153      	bne.n	1c1be <ll_rl_add+0x14a>
	if (rl[i].lirk) {
   1c116:	2800      	cmp	r0, #0
   1c118:	d16c      	bne.n	1c1f4 <ll_rl_add+0x180>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1c11a:	f103 0018 	add.w	r0, r3, #24
   1c11e:	2206      	movs	r2, #6
   1c120:	4430      	add	r0, r6
   1c122:	2100      	movs	r1, #0
   1c124:	f00c fa52 	bl	285cc <memset>
	rl[i].dev = 0U;
   1c128:	eb0a 0307 	add.w	r3, sl, r7
   1c12c:	4d3c      	ldr	r5, [pc, #240]	; (1c220 <ll_rl_add+0x1ac>)
	rl[i].rpas_ready = 0U;
   1c12e:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1c132:	f022 0212 	bic.w	r2, r2, #18
   1c136:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1c13a:	f898 b000 	ldrb.w	fp, [r8]
   1c13e:	2400      	movs	r4, #0
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1c140:	f00b 0b01 	and.w	fp, fp, #1
   1c144:	f1a5 0802 	sub.w	r8, r5, #2
   1c148:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1c14c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1c150:	07db      	lsls	r3, r3, #31
   1c152:	d501      	bpl.n	1c158 <ll_rl_add+0xe4>
   1c154:	455a      	cmp	r2, fp
   1c156:	d01b      	beq.n	1c190 <ll_rl_add+0x11c>
	for (i = 0; i < FAL_SIZE; i++) {
   1c158:	3401      	adds	r4, #1
   1c15a:	2c08      	cmp	r4, #8
   1c15c:	f105 0508 	add.w	r5, r5, #8
   1c160:	d1f2      	bne.n	1c148 <ll_rl_add+0xd4>
		rl[i].fal = 0U;
   1c162:	eb0a 0307 	add.w	r3, sl, r7
   1c166:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1c16a:	f36f 1245 	bfc	r2, #5, #1
   1c16e:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	rl[i].taken = 1U;
   1c172:	4457      	add	r7, sl
	return 0;
   1c174:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1c176:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   1c17a:	f043 0301 	orr.w	r3, r3, #1
   1c17e:	f806 3037 	strb.w	r3, [r6, r7, lsl #3]
}
   1c182:	b005      	add	sp, #20
   1c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c188:	200c      	movs	r0, #12
}
   1c18a:	b005      	add	sp, #20
   1c18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1c190:	2206      	movs	r2, #6
   1c192:	4628      	mov	r0, r5
   1c194:	4649      	mov	r1, r9
   1c196:	f00c f9e5 	bl	28564 <memcmp>
   1c19a:	2800      	cmp	r0, #0
   1c19c:	d1dc      	bne.n	1c158 <ll_rl_add+0xe4>
		rl[i].fal = 1U;
   1c19e:	eb0a 0307 	add.w	r3, sl, r7
		fal[j].rl_idx = i;
   1c1a2:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1c1a6:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
		fal[j].rl_idx = i;
   1c1aa:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   1c1ac:	f042 0220 	orr.w	r2, r2, #32
   1c1b0:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
   1c1b4:	e7dd      	b.n	1c172 <ll_rl_add+0xfe>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1c1b6:	2007      	movs	r0, #7
}
   1c1b8:	b005      	add	sp, #20
   1c1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1c1be:	f8df e064 	ldr.w	lr, [pc, #100]	; 1c224 <ll_rl_add+0x1b0>
		peer_irk_rl_ids[peer_irk_count] = i;
   1c1c2:	4a19      	ldr	r2, [pc, #100]	; (1c228 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   1c1c4:	f89e 1000 	ldrb.w	r1, [lr]
   1c1c8:	f88b 1017 	strb.w	r1, [fp, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1c1cc:	5457      	strb	r7, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1c1ce:	4a17      	ldr	r2, [pc, #92]	; (1c22c <ll_rl_add+0x1b8>)
   1c1d0:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1c1d4:	3101      	adds	r1, #1
	psrc += length - 1;
   1c1d6:	f104 020f 	add.w	r2, r4, #15
   1c1da:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   1c1de:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1c1e2:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1c1e4:	f812 1901 	ldrb.w	r1, [r2], #-1
   1c1e8:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1c1ec:	42a2      	cmp	r2, r4
   1c1ee:	d1f9      	bne.n	1c1e4 <ll_rl_add+0x170>
	if (rl[i].lirk) {
   1c1f0:	2800      	cmp	r0, #0
   1c1f2:	d092      	beq.n	1c11a <ll_rl_add+0xa6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1c1f4:	1dd8      	adds	r0, r3, #7
   1c1f6:	4629      	mov	r1, r5
   1c1f8:	2210      	movs	r2, #16
   1c1fa:	4430      	add	r0, r6
   1c1fc:	9301      	str	r3, [sp, #4]
   1c1fe:	f00c f9da 	bl	285b6 <memcpy>
		rl[i].local_rpa = NULL;
   1c202:	eb0a 0207 	add.w	r2, sl, r7
   1c206:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   1c20a:	2100      	movs	r1, #0
   1c20c:	9b01      	ldr	r3, [sp, #4]
   1c20e:	6251      	str	r1, [r2, #36]	; 0x24
   1c210:	e783      	b.n	1c11a <ll_rl_add+0xa6>
		return BT_HCI_ERR_INVALID_PARAM;
   1c212:	2012      	movs	r0, #18
}
   1c214:	b005      	add	sp, #20
   1c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c21a:	bf00      	nop
   1c21c:	200037d4 	.word	0x200037d4
   1c220:	200036aa 	.word	0x200036aa
   1c224:	2000499a 	.word	0x2000499a
   1c228:	2000374c 	.word	0x2000374c
   1c22c:	20003754 	.word	0x20003754

0001c230 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1c230:	2807      	cmp	r0, #7
   1c232:	d812      	bhi.n	1c25a <ull_filter_lll_lrpa_get+0x2a>
   1c234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c238:	4a09      	ldr	r2, [pc, #36]	; (1c260 <ull_filter_lll_lrpa_get+0x30>)
   1c23a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1c23e:	f013 0f08 	tst.w	r3, #8
   1c242:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   1c246:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1c24a:	d007      	beq.n	1c25c <ull_filter_lll_lrpa_get+0x2c>
   1c24c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1c250:	079b      	lsls	r3, r3, #30
   1c252:	d503      	bpl.n	1c25c <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   1c254:	440a      	add	r2, r1
   1c256:	6a50      	ldr	r0, [r2, #36]	; 0x24
   1c258:	4770      	bx	lr
		return NULL;
   1c25a:	2000      	movs	r0, #0
}
   1c25c:	4770      	bx	lr
   1c25e:	bf00      	nop
   1c260:	200037d4 	.word	0x200037d4

0001c264 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1c264:	4b02      	ldr	r3, [pc, #8]	; (1c270 <ull_filter_lll_irks_get+0xc>)
   1c266:	781b      	ldrb	r3, [r3, #0]
   1c268:	7003      	strb	r3, [r0, #0]
}
   1c26a:	4802      	ldr	r0, [pc, #8]	; (1c274 <ull_filter_lll_irks_get+0x10>)
   1c26c:	4770      	bx	lr
   1c26e:	bf00      	nop
   1c270:	2000499a 	.word	0x2000499a
   1c274:	20003754 	.word	0x20003754

0001c278 <ull_filter_lll_rl_idx>:
{
   1c278:	b538      	push	{r3, r4, r5, lr}
   1c27a:	460c      	mov	r4, r1
	if (filter) {
   1c27c:	b150      	cbz	r0, 1c294 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1c27e:	2907      	cmp	r1, #7
   1c280:	d822      	bhi.n	1c2c8 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   1c282:	4d2a      	ldr	r5, [pc, #168]	; (1c32c <ull_filter_lll_rl_idx+0xb4>)
   1c284:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1c288:	07da      	lsls	r2, r3, #31
   1c28a:	d52f      	bpl.n	1c2ec <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   1c28c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1c290:	7860      	ldrb	r0, [r4, #1]
}
   1c292:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1c294:	2907      	cmp	r1, #7
   1c296:	d83a      	bhi.n	1c30e <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1c298:	4b25      	ldr	r3, [pc, #148]	; (1c330 <ull_filter_lll_rl_idx+0xb8>)
   1c29a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c29e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1c2a2:	07db      	lsls	r3, r3, #31
   1c2a4:	d501      	bpl.n	1c2aa <ull_filter_lll_rl_idx+0x32>
   1c2a6:	4620      	mov	r0, r4
}
   1c2a8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1c2aa:	4a22      	ldr	r2, [pc, #136]	; (1c334 <ull_filter_lll_rl_idx+0xbc>)
   1c2ac:	4922      	ldr	r1, [pc, #136]	; (1c338 <ull_filter_lll_rl_idx+0xc0>)
   1c2ae:	4823      	ldr	r0, [pc, #140]	; (1c33c <ull_filter_lll_rl_idx+0xc4>)
   1c2b0:	f240 3363 	movw	r3, #867	; 0x363
   1c2b4:	f008 fca2 	bl	24bfc <printk>
   1c2b8:	4040      	eors	r0, r0
   1c2ba:	f380 8811 	msr	BASEPRI, r0
   1c2be:	f04f 0003 	mov.w	r0, #3
   1c2c2:	df02      	svc	2
   1c2c4:	4620      	mov	r0, r4
}
   1c2c6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1c2c8:	4a1a      	ldr	r2, [pc, #104]	; (1c334 <ull_filter_lll_rl_idx+0xbc>)
   1c2ca:	491d      	ldr	r1, [pc, #116]	; (1c340 <ull_filter_lll_rl_idx+0xc8>)
   1c2cc:	481b      	ldr	r0, [pc, #108]	; (1c33c <ull_filter_lll_rl_idx+0xc4>)
   1c2ce:	f240 335d 	movw	r3, #861	; 0x35d
   1c2d2:	f008 fc93 	bl	24bfc <printk>
   1c2d6:	4040      	eors	r0, r0
   1c2d8:	f380 8811 	msr	BASEPRI, r0
   1c2dc:	f04f 0003 	mov.w	r0, #3
   1c2e0:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   1c2e2:	4d12      	ldr	r5, [pc, #72]	; (1c32c <ull_filter_lll_rl_idx+0xb4>)
   1c2e4:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1c2e8:	07da      	lsls	r2, r3, #31
   1c2ea:	d4cf      	bmi.n	1c28c <ull_filter_lll_rl_idx+0x14>
   1c2ec:	4a11      	ldr	r2, [pc, #68]	; (1c334 <ull_filter_lll_rl_idx+0xbc>)
   1c2ee:	4915      	ldr	r1, [pc, #84]	; (1c344 <ull_filter_lll_rl_idx+0xcc>)
   1c2f0:	4812      	ldr	r0, [pc, #72]	; (1c33c <ull_filter_lll_rl_idx+0xc4>)
   1c2f2:	f240 335e 	movw	r3, #862	; 0x35e
   1c2f6:	f008 fc81 	bl	24bfc <printk>
   1c2fa:	4040      	eors	r0, r0
   1c2fc:	f380 8811 	msr	BASEPRI, r0
   1c300:	f04f 0003 	mov.w	r0, #3
   1c304:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   1c306:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1c30a:	7860      	ldrb	r0, [r4, #1]
   1c30c:	e7c1      	b.n	1c292 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1c30e:	4a09      	ldr	r2, [pc, #36]	; (1c334 <ull_filter_lll_rl_idx+0xbc>)
   1c310:	490d      	ldr	r1, [pc, #52]	; (1c348 <ull_filter_lll_rl_idx+0xd0>)
   1c312:	480a      	ldr	r0, [pc, #40]	; (1c33c <ull_filter_lll_rl_idx+0xc4>)
   1c314:	f240 3361 	movw	r3, #865	; 0x361
   1c318:	f008 fc70 	bl	24bfc <printk>
   1c31c:	4040      	eors	r0, r0
   1c31e:	f380 8811 	msr	BASEPRI, r0
   1c322:	f04f 0003 	mov.w	r0, #3
   1c326:	df02      	svc	2
   1c328:	e7b6      	b.n	1c298 <ull_filter_lll_rl_idx+0x20>
   1c32a:	bf00      	nop
   1c32c:	200036a8 	.word	0x200036a8
   1c330:	200037d4 	.word	0x200037d4
   1c334:	0002dacc 	.word	0x0002dacc
   1c338:	0002dc94 	.word	0x0002dc94
   1c33c:	0002d27c 	.word	0x0002d27c
   1c340:	0002db30 	.word	0x0002db30
   1c344:	0002dbd8 	.word	0x0002dbd8
   1c348:	0002dbf0 	.word	0x0002dbf0

0001c34c <ull_filter_lll_rl_irk_idx>:
{
   1c34c:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c34e:	4b20      	ldr	r3, [pc, #128]	; (1c3d0 <ull_filter_lll_rl_irk_idx+0x84>)
   1c350:	781b      	ldrb	r3, [r3, #0]
   1c352:	4283      	cmp	r3, r0
{
   1c354:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c356:	d90c      	bls.n	1c372 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1c358:	4b1e      	ldr	r3, [pc, #120]	; (1c3d4 <ull_filter_lll_rl_irk_idx+0x88>)
   1c35a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1c35c:	2c07      	cmp	r4, #7
   1c35e:	d819      	bhi.n	1c394 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1c360:	4b1d      	ldr	r3, [pc, #116]	; (1c3d8 <ull_filter_lll_rl_irk_idx+0x8c>)
   1c362:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c366:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1c36a:	07db      	lsls	r3, r3, #31
   1c36c:	d520      	bpl.n	1c3b0 <ull_filter_lll_rl_irk_idx+0x64>
}
   1c36e:	4620      	mov	r0, r4
   1c370:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c372:	4a1a      	ldr	r2, [pc, #104]	; (1c3dc <ull_filter_lll_rl_irk_idx+0x90>)
   1c374:	491a      	ldr	r1, [pc, #104]	; (1c3e0 <ull_filter_lll_rl_irk_idx+0x94>)
   1c376:	481b      	ldr	r0, [pc, #108]	; (1c3e4 <ull_filter_lll_rl_irk_idx+0x98>)
   1c378:	f240 336d 	movw	r3, #877	; 0x36d
   1c37c:	f008 fc3e 	bl	24bfc <printk>
   1c380:	4040      	eors	r0, r0
   1c382:	f380 8811 	msr	BASEPRI, r0
   1c386:	f04f 0003 	mov.w	r0, #3
   1c38a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1c38c:	4b11      	ldr	r3, [pc, #68]	; (1c3d4 <ull_filter_lll_rl_irk_idx+0x88>)
   1c38e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1c390:	2c07      	cmp	r4, #7
   1c392:	d9e5      	bls.n	1c360 <ull_filter_lll_rl_irk_idx+0x14>
   1c394:	4a11      	ldr	r2, [pc, #68]	; (1c3dc <ull_filter_lll_rl_irk_idx+0x90>)
   1c396:	4914      	ldr	r1, [pc, #80]	; (1c3e8 <ull_filter_lll_rl_irk_idx+0x9c>)
   1c398:	4812      	ldr	r0, [pc, #72]	; (1c3e4 <ull_filter_lll_rl_irk_idx+0x98>)
   1c39a:	f240 336f 	movw	r3, #879	; 0x36f
   1c39e:	f008 fc2d 	bl	24bfc <printk>
   1c3a2:	4040      	eors	r0, r0
   1c3a4:	f380 8811 	msr	BASEPRI, r0
   1c3a8:	f04f 0003 	mov.w	r0, #3
   1c3ac:	df02      	svc	2
   1c3ae:	e7d7      	b.n	1c360 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1c3b0:	4a0a      	ldr	r2, [pc, #40]	; (1c3dc <ull_filter_lll_rl_irk_idx+0x90>)
   1c3b2:	490e      	ldr	r1, [pc, #56]	; (1c3ec <ull_filter_lll_rl_irk_idx+0xa0>)
   1c3b4:	480b      	ldr	r0, [pc, #44]	; (1c3e4 <ull_filter_lll_rl_irk_idx+0x98>)
   1c3b6:	f44f 735c 	mov.w	r3, #880	; 0x370
   1c3ba:	f008 fc1f 	bl	24bfc <printk>
   1c3be:	4040      	eors	r0, r0
   1c3c0:	f380 8811 	msr	BASEPRI, r0
   1c3c4:	f04f 0003 	mov.w	r0, #3
   1c3c8:	df02      	svc	2
}
   1c3ca:	4620      	mov	r0, r4
   1c3cc:	bd10      	pop	{r4, pc}
   1c3ce:	bf00      	nop
   1c3d0:	2000499a 	.word	0x2000499a
   1c3d4:	2000374c 	.word	0x2000374c
   1c3d8:	200037d4 	.word	0x200037d4
   1c3dc:	0002dacc 	.word	0x0002dacc
   1c3e0:	0002dca0 	.word	0x0002dca0
   1c3e4:	0002d27c 	.word	0x0002d27c
   1c3e8:	0002dcc0 	.word	0x0002dcc0
   1c3ec:	0002dc94 	.word	0x0002dc94

0001c3f0 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1c3f0:	2807      	cmp	r0, #7
   1c3f2:	d823      	bhi.n	1c43c <ull_filter_lll_irk_in_fal+0x4c>
{
   1c3f4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1c3f6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c3fa:	4e11      	ldr	r6, [pc, #68]	; (1c440 <ull_filter_lll_irk_in_fal+0x50>)
   1c3fc:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1c400:	07db      	lsls	r3, r3, #31
   1c402:	4604      	mov	r4, r0
   1c404:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1c408:	d505      	bpl.n	1c416 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1c40a:	442c      	add	r4, r5
   1c40c:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c410:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1c414:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1c416:	4a0b      	ldr	r2, [pc, #44]	; (1c444 <ull_filter_lll_irk_in_fal+0x54>)
   1c418:	490b      	ldr	r1, [pc, #44]	; (1c448 <ull_filter_lll_irk_in_fal+0x58>)
   1c41a:	480c      	ldr	r0, [pc, #48]	; (1c44c <ull_filter_lll_irk_in_fal+0x5c>)
   1c41c:	f240 337b 	movw	r3, #891	; 0x37b
   1c420:	f008 fbec 	bl	24bfc <printk>
   1c424:	4040      	eors	r0, r0
   1c426:	f380 8811 	msr	BASEPRI, r0
   1c42a:	f04f 0003 	mov.w	r0, #3
   1c42e:	df02      	svc	2
	return rl[rl_idx].fal;
   1c430:	442c      	add	r4, r5
   1c432:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c436:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1c43a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1c43c:	2000      	movs	r0, #0
}
   1c43e:	4770      	bx	lr
   1c440:	200037d4 	.word	0x200037d4
   1c444:	0002dacc 	.word	0x0002dacc
   1c448:	0002db1c 	.word	0x0002db1c
   1c44c:	0002d27c 	.word	0x0002d27c

0001c450 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1c450:	4b14      	ldr	r3, [pc, #80]	; (1c4a4 <ull_filter_lll_rl_idx_allowed+0x54>)
   1c452:	781b      	ldrb	r3, [r3, #0]
   1c454:	b19b      	cbz	r3, 1c47e <ull_filter_lll_rl_idx_allowed+0x2e>
   1c456:	2907      	cmp	r1, #7
{
   1c458:	b570      	push	{r4, r5, r6, lr}
   1c45a:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1c45c:	d80d      	bhi.n	1c47a <ull_filter_lll_rl_idx_allowed+0x2a>
   1c45e:	b960      	cbnz	r0, 1c47a <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1c460:	4e11      	ldr	r6, [pc, #68]	; (1c4a8 <ull_filter_lll_rl_idx_allowed+0x58>)
   1c462:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1c466:	008d      	lsls	r5, r1, #2
   1c468:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1c46c:	07da      	lsls	r2, r3, #31
   1c46e:	d50b      	bpl.n	1c488 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1c470:	442c      	add	r4, r5
   1c472:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c476:	0743      	lsls	r3, r0, #29
   1c478:	d403      	bmi.n	1c482 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1c47a:	2001      	movs	r0, #1
}
   1c47c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1c47e:	2001      	movs	r0, #1
}
   1c480:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1c482:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1c486:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1c488:	4a08      	ldr	r2, [pc, #32]	; (1c4ac <ull_filter_lll_rl_idx_allowed+0x5c>)
   1c48a:	4909      	ldr	r1, [pc, #36]	; (1c4b0 <ull_filter_lll_rl_idx_allowed+0x60>)
   1c48c:	4809      	ldr	r0, [pc, #36]	; (1c4b4 <ull_filter_lll_rl_idx_allowed+0x64>)
   1c48e:	f44f 7365 	mov.w	r3, #916	; 0x394
   1c492:	f008 fbb3 	bl	24bfc <printk>
   1c496:	4040      	eors	r0, r0
   1c498:	f380 8811 	msr	BASEPRI, r0
   1c49c:	f04f 0003 	mov.w	r0, #3
   1c4a0:	df02      	svc	2
   1c4a2:	e7e5      	b.n	1c470 <ull_filter_lll_rl_idx_allowed+0x20>
   1c4a4:	2000499b 	.word	0x2000499b
   1c4a8:	200037d4 	.word	0x200037d4
   1c4ac:	0002dacc 	.word	0x0002dacc
   1c4b0:	0002db1c 	.word	0x0002db1c
   1c4b4:	0002d27c 	.word	0x0002d27c

0001c4b8 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1c4b8:	7813      	ldrb	r3, [r2, #0]
   1c4ba:	2bff      	cmp	r3, #255	; 0xff
   1c4bc:	d11b      	bne.n	1c4f6 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1c4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4c2:	4d19      	ldr	r5, [pc, #100]	; (1c528 <ull_filter_lll_rl_addr_allowed+0x70>)
   1c4c4:	4604      	mov	r4, r0
   1c4c6:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1c4c8:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1c4ca:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1c4ce:	b2df      	uxtb	r7, r3
   1c4d0:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1c4d4:	f01c 0001 	ands.w	r0, ip, #1
   1c4d8:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1c4dc:	d003      	beq.n	1c4e6 <ull_filter_lll_rl_addr_allowed+0x2e>
   1c4de:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1c4e2:	45a4      	cmp	ip, r4
   1c4e4:	d009      	beq.n	1c4fa <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c4e6:	3301      	adds	r3, #1
   1c4e8:	2b08      	cmp	r3, #8
   1c4ea:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1c4ee:	d1ec      	bne.n	1c4ca <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1c4f0:	2001      	movs	r0, #1
}
   1c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1c4f6:	2001      	movs	r0, #1
}
   1c4f8:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c4fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1c4fe:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c500:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1c504:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1c508:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1c50c:	45ca      	cmp	sl, r9
   1c50e:	d1ea      	bne.n	1c4e6 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c510:	45dc      	cmp	ip, fp
   1c512:	d1f7      	bne.n	1c504 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   1c514:	4433      	add	r3, r6
				*rl_idx = i;
   1c516:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1c518:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1c51c:	075a      	lsls	r2, r3, #29
   1c51e:	d5e8      	bpl.n	1c4f2 <ull_filter_lll_rl_addr_allowed+0x3a>
   1c520:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1c524:	e7e5      	b.n	1c4f2 <ull_filter_lll_rl_addr_allowed+0x3a>
   1c526:	bf00      	nop
   1c528:	200037d4 	.word	0x200037d4

0001c52c <ull_filter_lll_rl_addr_resolve>:
{
   1c52c:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1c52e:	4b0e      	ldr	r3, [pc, #56]	; (1c568 <ull_filter_lll_rl_addr_resolve+0x3c>)
   1c530:	781c      	ldrb	r4, [r3, #0]
   1c532:	b17c      	cbz	r4, 1c554 <ull_filter_lll_rl_addr_resolve+0x28>
   1c534:	2a07      	cmp	r2, #7
   1c536:	d80d      	bhi.n	1c554 <ull_filter_lll_rl_addr_resolve+0x28>
   1c538:	4c0c      	ldr	r4, [pc, #48]	; (1c56c <ull_filter_lll_rl_addr_resolve+0x40>)
   1c53a:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1c53e:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   1c542:	f01c 0f08 	tst.w	ip, #8
   1c546:	d005      	beq.n	1c554 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1c548:	b120      	cbz	r0, 1c554 <ull_filter_lll_rl_addr_resolve+0x28>
   1c54a:	794b      	ldrb	r3, [r1, #5]
   1c54c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c550:	2b40      	cmp	r3, #64	; 0x40
   1c552:	d002      	beq.n	1c55a <ull_filter_lll_rl_addr_resolve+0x2e>
}
   1c554:	2000      	movs	r0, #0
   1c556:	bc10      	pop	{r4}
   1c558:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1c55a:	2028      	movs	r0, #40	; 0x28
   1c55c:	fb00 4002 	mla	r0, r0, r2, r4
   1c560:	3007      	adds	r0, #7
}
   1c562:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1c564:	f00c b883 	b.w	2866e <bt_rpa_irk_matches>
   1c568:	2000499b 	.word	0x2000499b
   1c56c:	200037d4 	.word	0x200037d4

0001c570 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1c570:	4b02      	ldr	r3, [pc, #8]	; (1c57c <ull_filter_lll_rl_enabled+0xc>)
   1c572:	7818      	ldrb	r0, [r3, #0]
}
   1c574:	3800      	subs	r0, #0
   1c576:	bf18      	it	ne
   1c578:	2001      	movne	r0, #1
   1c57a:	4770      	bx	lr
   1c57c:	2000499b 	.word	0x2000499b

0001c580 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c580:	4668      	mov	r0, sp
   1c582:	f020 0107 	bic.w	r1, r0, #7
   1c586:	468d      	mov	sp, r1
   1c588:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1c58a:	f001 ff0b 	bl	1e3a4 <isr_radio>

	ISR_DIRECT_PM();
   1c58e:	f7ed ffff 	bl	a590 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1c592:	f7ee f8f5 	bl	a780 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c596:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c59a:	4685      	mov	sp, r0
   1c59c:	4770      	bx	lr
   1c59e:	bf00      	nop

0001c5a0 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1c5a0:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1c5a2:	4b09      	ldr	r3, [pc, #36]	; (1c5c8 <rtc0_nrf5_isr+0x28>)
   1c5a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1c5a8:	b93a      	cbnz	r2, 1c5ba <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1c5aa:	2001      	movs	r0, #1
   1c5ac:	f7f7 f83a 	bl	13624 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1c5b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1c5b4:	2002      	movs	r0, #2
   1c5b6:	f7f7 b835 	b.w	13624 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1c5ba:	2000      	movs	r0, #0
   1c5bc:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1c5c0:	f7f8 f936 	bl	14830 <ticker_trigger>
   1c5c4:	e7f1      	b.n	1c5aa <rtc0_nrf5_isr+0xa>
   1c5c6:	bf00      	nop
   1c5c8:	4000b000 	.word	0x4000b000

0001c5cc <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1c5cc:	2000      	movs	r0, #0
   1c5ce:	f7f7 b829 	b.w	13624 <mayfly_run>
   1c5d2:	bf00      	nop

0001c5d4 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1c5d4:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1c5d6:	4b0e      	ldr	r3, [pc, #56]	; (1c610 <ticker_stop_op_cb+0x3c>)
   1c5d8:	4c0e      	ldr	r4, [pc, #56]	; (1c614 <ticker_stop_op_cb+0x40>)
   1c5da:	781a      	ldrb	r2, [r3, #0]
   1c5dc:	7823      	ldrb	r3, [r4, #0]
   1c5de:	429a      	cmp	r2, r3
   1c5e0:	d006      	beq.n	1c5f0 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1c5e2:	490d      	ldr	r1, [pc, #52]	; (1c618 <ticker_stop_op_cb+0x44>)
   1c5e4:	4a0d      	ldr	r2, [pc, #52]	; (1c61c <ticker_stop_op_cb+0x48>)
   1c5e6:	7809      	ldrb	r1, [r1, #0]
   1c5e8:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1c5ea:	3301      	adds	r3, #1
   1c5ec:	7023      	strb	r3, [r4, #0]
}
   1c5ee:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1c5f0:	4a0b      	ldr	r2, [pc, #44]	; (1c620 <ticker_stop_op_cb+0x4c>)
   1c5f2:	490c      	ldr	r1, [pc, #48]	; (1c624 <ticker_stop_op_cb+0x50>)
   1c5f4:	480c      	ldr	r0, [pc, #48]	; (1c628 <ticker_stop_op_cb+0x54>)
   1c5f6:	f240 3301 	movw	r3, #769	; 0x301
   1c5fa:	f008 faff 	bl	24bfc <printk>
   1c5fe:	4040      	eors	r0, r0
   1c600:	f380 8811 	msr	BASEPRI, r0
   1c604:	f04f 0003 	mov.w	r0, #3
   1c608:	df02      	svc	2
	preempt_stop_ack++;
   1c60a:	7823      	ldrb	r3, [r4, #0]
   1c60c:	e7e9      	b.n	1c5e2 <ticker_stop_op_cb+0xe>
   1c60e:	bf00      	nop
   1c610:	200049a1 	.word	0x200049a1
   1c614:	200049a0 	.word	0x200049a0
   1c618:	2000499c 	.word	0x2000499c
   1c61c:	2000499d 	.word	0x2000499d
   1c620:	0002dcdc 	.word	0x0002dcdc
   1c624:	0002dd24 	.word	0x0002dd24
   1c628:	0002d27c 	.word	0x0002d27c

0001c62c <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1c62c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c62e:	b9f8      	cbnz	r0, 1c670 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1c630:	4b1e      	ldr	r3, [pc, #120]	; (1c6ac <ticker_start_op_cb+0x80>)
   1c632:	4d1f      	ldr	r5, [pc, #124]	; (1c6b0 <ticker_start_op_cb+0x84>)
   1c634:	781a      	ldrb	r2, [r3, #0]
   1c636:	782b      	ldrb	r3, [r5, #0]
   1c638:	429a      	cmp	r2, r3
   1c63a:	d027      	beq.n	1c68c <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   1c63c:	4a1d      	ldr	r2, [pc, #116]	; (1c6b4 <ticker_start_op_cb+0x88>)
   1c63e:	4c1e      	ldr	r4, [pc, #120]	; (1c6b8 <ticker_start_op_cb+0x8c>)
   1c640:	7812      	ldrb	r2, [r2, #0]
   1c642:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1c644:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1c646:	4291      	cmp	r1, r2
	preempt_start_ack++;
   1c648:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   1c64a:	b2d3      	uxtb	r3, r2
   1c64c:	d00d      	beq.n	1c66a <ticker_start_op_cb+0x3e>
   1c64e:	4a1b      	ldr	r2, [pc, #108]	; (1c6bc <ticker_start_op_cb+0x90>)
   1c650:	491b      	ldr	r1, [pc, #108]	; (1c6c0 <ticker_start_op_cb+0x94>)
   1c652:	481c      	ldr	r0, [pc, #112]	; (1c6c4 <ticker_start_op_cb+0x98>)
   1c654:	f240 330f 	movw	r3, #783	; 0x30f
   1c658:	f008 fad0 	bl	24bfc <printk>
   1c65c:	4040      	eors	r0, r0
   1c65e:	f380 8811 	msr	BASEPRI, r0
   1c662:	f04f 0003 	mov.w	r0, #3
   1c666:	df02      	svc	2
	preempt_req++;
   1c668:	7823      	ldrb	r3, [r4, #0]
   1c66a:	3301      	adds	r3, #1
   1c66c:	7023      	strb	r3, [r4, #0]
}
   1c66e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c670:	4a12      	ldr	r2, [pc, #72]	; (1c6bc <ticker_start_op_cb+0x90>)
   1c672:	4915      	ldr	r1, [pc, #84]	; (1c6c8 <ticker_start_op_cb+0x9c>)
   1c674:	4813      	ldr	r0, [pc, #76]	; (1c6c4 <ticker_start_op_cb+0x98>)
   1c676:	f240 330a 	movw	r3, #778	; 0x30a
   1c67a:	f008 fabf 	bl	24bfc <printk>
   1c67e:	4040      	eors	r0, r0
   1c680:	f380 8811 	msr	BASEPRI, r0
   1c684:	f04f 0003 	mov.w	r0, #3
   1c688:	df02      	svc	2
   1c68a:	e7d1      	b.n	1c630 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1c68c:	4a0b      	ldr	r2, [pc, #44]	; (1c6bc <ticker_start_op_cb+0x90>)
   1c68e:	490f      	ldr	r1, [pc, #60]	; (1c6cc <ticker_start_op_cb+0xa0>)
   1c690:	480c      	ldr	r0, [pc, #48]	; (1c6c4 <ticker_start_op_cb+0x98>)
   1c692:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1c696:	f008 fab1 	bl	24bfc <printk>
   1c69a:	4040      	eors	r0, r0
   1c69c:	f380 8811 	msr	BASEPRI, r0
   1c6a0:	f04f 0003 	mov.w	r0, #3
   1c6a4:	df02      	svc	2
	preempt_start_ack++;
   1c6a6:	782b      	ldrb	r3, [r5, #0]
   1c6a8:	e7c8      	b.n	1c63c <ticker_start_op_cb+0x10>
   1c6aa:	bf00      	nop
   1c6ac:	2000499f 	.word	0x2000499f
   1c6b0:	2000499e 	.word	0x2000499e
   1c6b4:	2000499c 	.word	0x2000499c
   1c6b8:	2000499d 	.word	0x2000499d
   1c6bc:	0002dcdc 	.word	0x0002dcdc
   1c6c0:	0002dd74 	.word	0x0002dd74
   1c6c4:	0002d27c 	.word	0x0002d27c
   1c6c8:	0002d848 	.word	0x0002d848
   1c6cc:	0002dd4c 	.word	0x0002dd4c

0001c6d0 <isr_race>:
	radio_status_reset();
   1c6d0:	f001 bf80 	b.w	1e5d4 <radio_status_reset>

0001c6d4 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1c6d4:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1c6d6:	4a18      	ldr	r2, [pc, #96]	; (1c738 <preempt_ticker_cb+0x64>)
   1c6d8:	4c18      	ldr	r4, [pc, #96]	; (1c73c <preempt_ticker_cb+0x68>)
   1c6da:	7812      	ldrb	r2, [r2, #0]
   1c6dc:	7823      	ldrb	r3, [r4, #0]
   1c6de:	429a      	cmp	r2, r3
   1c6e0:	d01b      	beq.n	1c71a <preempt_ticker_cb+0x46>
	preempt_ack++;
   1c6e2:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1c6e4:	4b16      	ldr	r3, [pc, #88]	; (1c740 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1c6e6:	3101      	adds	r1, #1
   1c6e8:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1c6ea:	2200      	movs	r2, #0
	preempt_ack++;
   1c6ec:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1c6ee:	9903      	ldr	r1, [sp, #12]
   1c6f0:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1c6f2:	2001      	movs	r0, #1
   1c6f4:	4611      	mov	r1, r2
   1c6f6:	f7f6 ff3d 	bl	13574 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1c6fa:	b900      	cbnz	r0, 1c6fe <preempt_ticker_cb+0x2a>
}
   1c6fc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1c6fe:	4a11      	ldr	r2, [pc, #68]	; (1c744 <preempt_ticker_cb+0x70>)
   1c700:	4911      	ldr	r1, [pc, #68]	; (1c748 <preempt_ticker_cb+0x74>)
   1c702:	4812      	ldr	r0, [pc, #72]	; (1c74c <preempt_ticker_cb+0x78>)
   1c704:	f240 3376 	movw	r3, #886	; 0x376
   1c708:	f008 fa78 	bl	24bfc <printk>
   1c70c:	4040      	eors	r0, r0
   1c70e:	f380 8811 	msr	BASEPRI, r0
   1c712:	f04f 0003 	mov.w	r0, #3
   1c716:	df02      	svc	2
}
   1c718:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1c71a:	4a0a      	ldr	r2, [pc, #40]	; (1c744 <preempt_ticker_cb+0x70>)
   1c71c:	490c      	ldr	r1, [pc, #48]	; (1c750 <preempt_ticker_cb+0x7c>)
   1c71e:	480b      	ldr	r0, [pc, #44]	; (1c74c <preempt_ticker_cb+0x78>)
   1c720:	f44f 735c 	mov.w	r3, #880	; 0x370
   1c724:	f008 fa6a 	bl	24bfc <printk>
   1c728:	4040      	eors	r0, r0
   1c72a:	f380 8811 	msr	BASEPRI, r0
   1c72e:	f04f 0003 	mov.w	r0, #3
   1c732:	df02      	svc	2
   1c734:	e7d5      	b.n	1c6e2 <preempt_ticker_cb+0xe>
   1c736:	bf00      	nop
   1c738:	2000499d 	.word	0x2000499d
   1c73c:	2000499c 	.word	0x2000499c
   1c740:	20000738 	.word	0x20000738
   1c744:	0002dcdc 	.word	0x0002dcdc
   1c748:	0002d6d0 	.word	0x0002d6d0
   1c74c:	0002d27c 	.word	0x0002d27c
   1c750:	0002dd90 	.word	0x0002dd90

0001c754 <preempt_ticker_stop>:
{
   1c754:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1c756:	4917      	ldr	r1, [pc, #92]	; (1c7b4 <preempt_ticker_stop+0x60>)
   1c758:	4a17      	ldr	r2, [pc, #92]	; (1c7b8 <preempt_ticker_stop+0x64>)
   1c75a:	780b      	ldrb	r3, [r1, #0]
   1c75c:	7812      	ldrb	r2, [r2, #0]
   1c75e:	429a      	cmp	r2, r3
{
   1c760:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   1c762:	d122      	bne.n	1c7aa <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   1c764:	4b15      	ldr	r3, [pc, #84]	; (1c7bc <preempt_ticker_stop+0x68>)
   1c766:	4a16      	ldr	r2, [pc, #88]	; (1c7c0 <preempt_ticker_stop+0x6c>)
   1c768:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1c76a:	7812      	ldrb	r2, [r2, #0]
   1c76c:	429a      	cmp	r2, r3
   1c76e:	d01c      	beq.n	1c7aa <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   1c770:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c772:	4b14      	ldr	r3, [pc, #80]	; (1c7c4 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   1c774:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c776:	2200      	movs	r2, #0
	preempt_stop_req++;
   1c778:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c77a:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1c77c:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c77e:	4611      	mov	r1, r2
   1c780:	4610      	mov	r0, r2
   1c782:	f7f8 f94d 	bl	14a20 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c786:	4604      	mov	r4, r0
   1c788:	b178      	cbz	r0, 1c7aa <preempt_ticker_stop+0x56>
   1c78a:	2802      	cmp	r0, #2
   1c78c:	d00e      	beq.n	1c7ac <preempt_ticker_stop+0x58>
   1c78e:	4a0e      	ldr	r2, [pc, #56]	; (1c7c8 <preempt_ticker_stop+0x74>)
   1c790:	490e      	ldr	r1, [pc, #56]	; (1c7cc <preempt_ticker_stop+0x78>)
   1c792:	480f      	ldr	r0, [pc, #60]	; (1c7d0 <preempt_ticker_stop+0x7c>)
   1c794:	f240 3362 	movw	r3, #866	; 0x362
   1c798:	f008 fa30 	bl	24bfc <printk>
   1c79c:	4040      	eors	r0, r0
   1c79e:	f380 8811 	msr	BASEPRI, r0
   1c7a2:	f04f 0003 	mov.w	r0, #3
   1c7a6:	df02      	svc	2
   1c7a8:	e000      	b.n	1c7ac <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1c7aa:	2400      	movs	r4, #0
}
   1c7ac:	4620      	mov	r0, r4
   1c7ae:	b002      	add	sp, #8
   1c7b0:	bd10      	pop	{r4, pc}
   1c7b2:	bf00      	nop
   1c7b4:	200049a1 	.word	0x200049a1
   1c7b8:	200049a0 	.word	0x200049a0
   1c7bc:	2000499c 	.word	0x2000499c
   1c7c0:	2000499d 	.word	0x2000499d
   1c7c4:	0001c5d5 	.word	0x0001c5d5
   1c7c8:	0002dcdc 	.word	0x0002dcdc
   1c7cc:	0002ddac 	.word	0x0002ddac
   1c7d0:	0002d27c 	.word	0x0002d27c

0001c7d4 <preempt_ticker_start>:
{
   1c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1c7d8:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1c7da:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1c7de:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1c7e0:	4b2a      	ldr	r3, [pc, #168]	; (1c88c <preempt_ticker_start+0xb8>)
   1c7e2:	4f2b      	ldr	r7, [pc, #172]	; (1c890 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1c7e4:	68d6      	ldr	r6, [r2, #12]
{
   1c7e6:	460d      	mov	r5, r1
   1c7e8:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1c7ea:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   1c7ec:	6890      	ldr	r0, [r2, #8]
   1c7ee:	6853      	ldr	r3, [r2, #4]
   1c7f0:	4298      	cmp	r0, r3
   1c7f2:	bf2c      	ite	cs
   1c7f4:	ebc6 0600 	rsbcs	r6, r6, r0
   1c7f8:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   1c7fc:	783b      	ldrb	r3, [r7, #0]
   1c7fe:	4299      	cmp	r1, r3
{
   1c800:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1c802:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1c806:	d033      	beq.n	1c870 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   1c808:	2c00      	cmp	r4, #0
   1c80a:	d03a      	beq.n	1c882 <preempt_ticker_start+0xae>
   1c80c:	7f23      	ldrb	r3, [r4, #28]
   1c80e:	079b      	lsls	r3, r3, #30
   1c810:	d437      	bmi.n	1c882 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1c812:	f8df a080 	ldr.w	sl, [pc, #128]	; 1c894 <preempt_ticker_start+0xc0>
   1c816:	f8da 0000 	ldr.w	r0, [sl]
   1c81a:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1c81e:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1c822:	d022      	beq.n	1c86a <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1c824:	f7ff ff96 	bl	1c754 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1c828:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1c82a:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1c82c:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   1c830:	f043 0302 	orr.w	r3, r3, #2
   1c834:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1c836:	4620      	mov	r0, r4
   1c838:	69a3      	ldr	r3, [r4, #24]
   1c83a:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c83c:	4b16      	ldr	r3, [pc, #88]	; (1c898 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1c83e:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c840:	9600      	str	r6, [sp, #0]
   1c842:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1c846:	4b15      	ldr	r3, [pc, #84]	; (1c89c <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   1c848:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c84c:	2200      	movs	r2, #0
	preempt_start_req++;
   1c84e:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c850:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1c854:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c856:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1c85a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1c85e:	4643      	mov	r3, r8
   1c860:	4611      	mov	r1, r2
   1c862:	4610      	mov	r0, r2
	preempt_start_req++;
   1c864:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c866:	f7f8 f851 	bl	1490c <ticker_start>
}
   1c86a:	b00a      	add	sp, #40	; 0x28
   1c86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1c870:	4b0b      	ldr	r3, [pc, #44]	; (1c8a0 <preempt_ticker_start+0xcc>)
   1c872:	4a0c      	ldr	r2, [pc, #48]	; (1c8a4 <preempt_ticker_start+0xd0>)
   1c874:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1c876:	7812      	ldrb	r2, [r2, #0]
   1c878:	429a      	cmp	r2, r3
   1c87a:	d1c5      	bne.n	1c808 <preempt_ticker_start+0x34>
   1c87c:	f8df a014 	ldr.w	sl, [pc, #20]	; 1c894 <preempt_ticker_start+0xc0>
   1c880:	e7dc      	b.n	1c83c <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   1c882:	2000      	movs	r0, #0
}
   1c884:	b00a      	add	sp, #40	; 0x28
   1c886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c88a:	bf00      	nop
   1c88c:	2000499e 	.word	0x2000499e
   1c890:	2000499f 	.word	0x2000499f
   1c894:	20003964 	.word	0x20003964
   1c898:	0001c62d 	.word	0x0001c62d
   1c89c:	0001c6d5 	.word	0x0001c6d5
   1c8a0:	2000499c 	.word	0x2000499c
   1c8a4:	2000499d 	.word	0x2000499d

0001c8a8 <preempt>:

static void preempt(void *param)
{
   1c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1c8aa:	4e4b      	ldr	r6, [pc, #300]	; (1c9d8 <preempt+0x130>)
   1c8ac:	68b3      	ldr	r3, [r6, #8]
{
   1c8ae:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1c8b0:	b1b3      	cbz	r3, 1c8e0 <preempt+0x38>
   1c8b2:	6833      	ldr	r3, [r6, #0]
   1c8b4:	b1a3      	cbz	r3, 1c8e0 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1c8b6:	23ff      	movs	r3, #255	; 0xff
   1c8b8:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1c8ba:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1c8be:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1c8c2:	f7fa fe39 	bl	17538 <ull_prepare_dequeue_iter>
	if (!next) {
   1c8c6:	4601      	mov	r1, r0
   1c8c8:	b150      	cbz	r0, 1c8e0 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1c8ca:	7f0b      	ldrb	r3, [r1, #28]
   1c8cc:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1c8d0:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1c8d4:	d006      	beq.n	1c8e4 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1c8d6:	f7fa fe2f 	bl	17538 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1c8da:	4601      	mov	r1, r0
   1c8dc:	2800      	cmp	r0, #0
   1c8de:	d1f4      	bne.n	1c8ca <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1c8e0:	b009      	add	sp, #36	; 0x24
   1c8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1c8e4:	428d      	cmp	r5, r1
   1c8e6:	d126      	bne.n	1c936 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1c8e8:	6873      	ldr	r3, [r6, #4]
   1c8ea:	6831      	ldr	r1, [r6, #0]
   1c8ec:	68e8      	ldr	r0, [r5, #12]
   1c8ee:	aa03      	add	r2, sp, #12
   1c8f0:	4798      	blx	r3
	if (!err) {
   1c8f2:	4607      	mov	r7, r0
   1c8f4:	b1b0      	cbz	r0, 1c924 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1c8f6:	68b3      	ldr	r3, [r6, #8]
   1c8f8:	6831      	ldr	r1, [r6, #0]
   1c8fa:	4620      	mov	r0, r4
   1c8fc:	4798      	blx	r3
	if (err == -EAGAIN) {
   1c8fe:	f117 0f0b 	cmn.w	r7, #11
   1c902:	d02c      	beq.n	1c95e <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1c904:	378c      	adds	r7, #140	; 0x8c
   1c906:	d0eb      	beq.n	1c8e0 <preempt+0x38>
   1c908:	4a34      	ldr	r2, [pc, #208]	; (1c9dc <preempt+0x134>)
   1c90a:	4935      	ldr	r1, [pc, #212]	; (1c9e0 <preempt+0x138>)
   1c90c:	4835      	ldr	r0, [pc, #212]	; (1c9e4 <preempt+0x13c>)
   1c90e:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1c912:	f008 f973 	bl	24bfc <printk>
   1c916:	4040      	eors	r0, r0
   1c918:	f380 8811 	msr	BASEPRI, r0
   1c91c:	f04f 0003 	mov.w	r0, #3
   1c920:	df02      	svc	2
   1c922:	e7dd      	b.n	1c8e0 <preempt+0x38>
		next->is_aborted = 1;
   1c924:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c926:	69aa      	ldr	r2, [r5, #24]
   1c928:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1c92a:	f043 0302 	orr.w	r3, r3, #2
   1c92e:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c930:	4628      	mov	r0, r5
   1c932:	4790      	blx	r2
		return;
   1c934:	e7d4      	b.n	1c8e0 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1c936:	4620      	mov	r0, r4
   1c938:	f7ff ff4c 	bl	1c7d4 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c93c:	f030 0302 	bics.w	r3, r0, #2
   1c940:	d0ce      	beq.n	1c8e0 <preempt+0x38>
   1c942:	4a26      	ldr	r2, [pc, #152]	; (1c9dc <preempt+0x134>)
   1c944:	4928      	ldr	r1, [pc, #160]	; (1c9e8 <preempt+0x140>)
   1c946:	4827      	ldr	r0, [pc, #156]	; (1c9e4 <preempt+0x13c>)
   1c948:	f44f 7367 	mov.w	r3, #924	; 0x39c
   1c94c:	f008 f956 	bl	24bfc <printk>
   1c950:	4040      	eors	r0, r0
   1c952:	f380 8811 	msr	BASEPRI, r0
   1c956:	f04f 0003 	mov.w	r0, #3
   1c95a:	df02      	svc	2
   1c95c:	e7c0      	b.n	1c8e0 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1c95e:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1c960:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1c964:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1c968:	f7fa fde6 	bl	17538 <ull_prepare_dequeue_iter>
		while (iter) {
   1c96c:	b928      	cbnz	r0, 1c97a <preempt+0xd2>
   1c96e:	e013      	b.n	1c998 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1c970:	f10d 000b 	add.w	r0, sp, #11
   1c974:	f7fa fde0 	bl	17538 <ull_prepare_dequeue_iter>
		while (iter) {
   1c978:	b170      	cbz	r0, 1c998 <preempt+0xf0>
			if (!iter->is_aborted &&
   1c97a:	7f03      	ldrb	r3, [r0, #28]
   1c97c:	079a      	lsls	r2, r3, #30
   1c97e:	d4f7      	bmi.n	1c970 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   1c980:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1c982:	6831      	ldr	r1, [r6, #0]
   1c984:	4291      	cmp	r1, r2
   1c986:	d1f3      	bne.n	1c970 <preempt+0xc8>
				iter->is_aborted = 1;
   1c988:	f043 0302 	orr.w	r3, r3, #2
   1c98c:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1c98e:	6983      	ldr	r3, [r0, #24]
   1c990:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   1c992:	f88d 400b 	strb.w	r4, [sp, #11]
   1c996:	e7eb      	b.n	1c970 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1c998:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1c99a:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1c99c:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c99e:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1c9a0:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c9a4:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1c9a6:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1c9a8:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c9aa:	9b03      	ldr	r3, [sp, #12]
   1c9ac:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1c9b0:	aa04      	add	r2, sp, #16
   1c9b2:	f7fa fd83 	bl	174bc <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1c9b6:	2800      	cmp	r0, #0
   1c9b8:	d192      	bne.n	1c8e0 <preempt+0x38>
   1c9ba:	4a08      	ldr	r2, [pc, #32]	; (1c9dc <preempt+0x134>)
   1c9bc:	490b      	ldr	r1, [pc, #44]	; (1c9ec <preempt+0x144>)
   1c9be:	4809      	ldr	r0, [pc, #36]	; (1c9e4 <preempt+0x13c>)
   1c9c0:	f240 33ce 	movw	r3, #974	; 0x3ce
   1c9c4:	f008 f91a 	bl	24bfc <printk>
   1c9c8:	4040      	eors	r0, r0
   1c9ca:	f380 8811 	msr	BASEPRI, r0
   1c9ce:	f04f 0003 	mov.w	r0, #3
   1c9d2:	df02      	svc	2
   1c9d4:	e784      	b.n	1c8e0 <preempt+0x38>
   1c9d6:	bf00      	nop
   1c9d8:	20003950 	.word	0x20003950
   1c9dc:	0002dcdc 	.word	0x0002dcdc
   1c9e0:	0002ddd0 	.word	0x0002ddd0
   1c9e4:	0002d27c 	.word	0x0002d27c
   1c9e8:	0002ddac 	.word	0x0002ddac
   1c9ec:	0002ddc8 	.word	0x0002ddc8

0001c9f0 <lll_init>:
{
   1c9f0:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1c9f2:	4816      	ldr	r0, [pc, #88]	; (1ca4c <lll_init+0x5c>)
   1c9f4:	f006 fbf4 	bl	231e0 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1c9f8:	4b15      	ldr	r3, [pc, #84]	; (1ca50 <lll_init+0x60>)
   1c9fa:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1c9fc:	b310      	cbz	r0, 1ca44 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1c9fe:	4b15      	ldr	r3, [pc, #84]	; (1ca54 <lll_init+0x64>)
   1ca00:	2400      	movs	r4, #0
   1ca02:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1ca04:	f000 faf4 	bl	1cff0 <lll_clock_init>
	if (err < 0) {
   1ca08:	2800      	cmp	r0, #0
   1ca0a:	db1a      	blt.n	1ca42 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1ca0c:	4621      	mov	r1, r4
   1ca0e:	2001      	movs	r0, #1
   1ca10:	4622      	mov	r2, r4
   1ca12:	f7ed fda5 	bl	a560 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1ca16:	4622      	mov	r2, r4
   1ca18:	200b      	movs	r0, #11
   1ca1a:	2101      	movs	r1, #1
   1ca1c:	f7ed fda0 	bl	a560 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1ca20:	4622      	mov	r2, r4
   1ca22:	4621      	mov	r1, r4
   1ca24:	2018      	movs	r0, #24
   1ca26:	f7ed fd9b 	bl	a560 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1ca2a:	2001      	movs	r0, #1
   1ca2c:	f7ed fd66 	bl	a4fc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1ca30:	200b      	movs	r0, #11
   1ca32:	f7ed fd63 	bl	a4fc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1ca36:	2018      	movs	r0, #24
   1ca38:	f7ed fd60 	bl	a4fc <arch_irq_enable>
	radio_setup();
   1ca3c:	f001 fce2 	bl	1e404 <radio_setup>
	return 0;
   1ca40:	4620      	mov	r0, r4
}
   1ca42:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1ca44:	f06f 0012 	mvn.w	r0, #18
}
   1ca48:	bd10      	pop	{r4, pc}
   1ca4a:	bf00      	nop
   1ca4c:	0002dddc 	.word	0x0002dddc
   1ca50:	2000394c 	.word	0x2000394c
   1ca54:	20003950 	.word	0x20003950

0001ca58 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1ca58:	4a05      	ldr	r2, [pc, #20]	; (1ca70 <lll_csrand_get+0x18>)
{
   1ca5a:	b410      	push	{r4}
   1ca5c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1ca5e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1ca60:	6884      	ldr	r4, [r0, #8]
   1ca62:	6824      	ldr	r4, [r4, #0]
   1ca64:	b28a      	uxth	r2, r1
   1ca66:	4619      	mov	r1, r3
   1ca68:	4623      	mov	r3, r4
}
   1ca6a:	bc10      	pop	{r4}
   1ca6c:	4718      	bx	r3
   1ca6e:	bf00      	nop
   1ca70:	2000394c 	.word	0x2000394c

0001ca74 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1ca74:	4b08      	ldr	r3, [pc, #32]	; (1ca98 <lll_csrand_isr_get+0x24>)
{
   1ca76:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1ca78:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ca7a:	68ab      	ldr	r3, [r5, #8]
   1ca7c:	685c      	ldr	r4, [r3, #4]
   1ca7e:	b13c      	cbz	r4, 1ca90 <lll_csrand_isr_get+0x1c>
   1ca80:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ca82:	46a4      	mov	ip, r4
   1ca84:	4601      	mov	r1, r0
   1ca86:	b292      	uxth	r2, r2
   1ca88:	4628      	mov	r0, r5
   1ca8a:	2300      	movs	r3, #0
}
   1ca8c:	bc30      	pop	{r4, r5}
   1ca8e:	4760      	bx	ip
   1ca90:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ca94:	bc30      	pop	{r4, r5}
   1ca96:	4770      	bx	lr
   1ca98:	2000394c 	.word	0x2000394c

0001ca9c <lll_reset>:
}
   1ca9c:	2000      	movs	r0, #0
   1ca9e:	4770      	bx	lr

0001caa0 <lll_disable>:
{
   1caa0:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1caa2:	4604      	mov	r4, r0
{
   1caa4:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1caa6:	b378      	cbz	r0, 1cb08 <lll_disable+0x68>
   1caa8:	4b23      	ldr	r3, [pc, #140]	; (1cb38 <lll_disable+0x98>)
   1caaa:	681a      	ldr	r2, [r3, #0]
   1caac:	4282      	cmp	r2, r0
   1caae:	d025      	beq.n	1cafc <lll_disable+0x5c>
		idx = UINT8_MAX;
   1cab0:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1cab2:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1cab6:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1caba:	f7fa fd3d 	bl	17538 <ull_prepare_dequeue_iter>
		while (next) {
   1cabe:	b938      	cbnz	r0, 1cad0 <lll_disable+0x30>
   1cac0:	e01a      	b.n	1caf8 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1cac2:	428c      	cmp	r4, r1
   1cac4:	d00a      	beq.n	1cadc <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1cac6:	f10d 0007 	add.w	r0, sp, #7
   1caca:	f7fa fd35 	bl	17538 <ull_prepare_dequeue_iter>
		while (next) {
   1cace:	b198      	cbz	r0, 1caf8 <lll_disable+0x58>
			if (!next->is_aborted &&
   1cad0:	7f03      	ldrb	r3, [r0, #28]
   1cad2:	079b      	lsls	r3, r3, #30
   1cad4:	d4f7      	bmi.n	1cac6 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   1cad6:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   1cad8:	2c00      	cmp	r4, #0
   1cada:	d1f2      	bne.n	1cac2 <lll_disable+0x22>
				next->is_aborted = 1;
   1cadc:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1cade:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1cae0:	f043 0302 	orr.w	r3, r3, #2
   1cae4:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1cae6:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1cae8:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1caec:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1caf0:	f7fa fd22 	bl	17538 <ull_prepare_dequeue_iter>
		while (next) {
   1caf4:	2800      	cmp	r0, #0
   1caf6:	d1eb      	bne.n	1cad0 <lll_disable+0x30>
}
   1caf8:	b003      	add	sp, #12
   1cafa:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1cafc:	689b      	ldr	r3, [r3, #8]
   1cafe:	b16b      	cbz	r3, 1cb1c <lll_disable+0x7c>
   1cb00:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1cb02:	2000      	movs	r0, #0
   1cb04:	4798      	blx	r3
   1cb06:	e7d3      	b.n	1cab0 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   1cb08:	4a0b      	ldr	r2, [pc, #44]	; (1cb38 <lll_disable+0x98>)
   1cb0a:	6893      	ldr	r3, [r2, #8]
   1cb0c:	2b00      	cmp	r3, #0
   1cb0e:	d0cf      	beq.n	1cab0 <lll_disable+0x10>
   1cb10:	6811      	ldr	r1, [r2, #0]
   1cb12:	2900      	cmp	r1, #0
   1cb14:	d0cc      	beq.n	1cab0 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1cb16:	2000      	movs	r0, #0
   1cb18:	4798      	blx	r3
   1cb1a:	e7c9      	b.n	1cab0 <lll_disable+0x10>
			LL_ASSERT(!param);
   1cb1c:	4a07      	ldr	r2, [pc, #28]	; (1cb3c <lll_disable+0x9c>)
   1cb1e:	4908      	ldr	r1, [pc, #32]	; (1cb40 <lll_disable+0xa0>)
   1cb20:	4808      	ldr	r0, [pc, #32]	; (1cb44 <lll_disable+0xa4>)
   1cb22:	23fd      	movs	r3, #253	; 0xfd
   1cb24:	f008 f86a 	bl	24bfc <printk>
   1cb28:	4040      	eors	r0, r0
   1cb2a:	f380 8811 	msr	BASEPRI, r0
   1cb2e:	f04f 0003 	mov.w	r0, #3
   1cb32:	df02      	svc	2
   1cb34:	e7bc      	b.n	1cab0 <lll_disable+0x10>
   1cb36:	bf00      	nop
   1cb38:	20003950 	.word	0x20003950
   1cb3c:	0002dcdc 	.word	0x0002dcdc
   1cb40:	0002dde0 	.word	0x0002dde0
   1cb44:	0002d27c 	.word	0x0002d27c

0001cb48 <lll_prepare_done>:
}
   1cb48:	2000      	movs	r0, #0
   1cb4a:	4770      	bx	lr

0001cb4c <lll_done>:
{
   1cb4c:	b538      	push	{r3, r4, r5, lr}
   1cb4e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1cb50:	f7fa fce4 	bl	1751c <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1cb54:	b154      	cbz	r4, 1cb6c <lll_done+0x20>
   1cb56:	b310      	cbz	r0, 1cb9e <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   1cb58:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1cb5a:	2000      	movs	r0, #0
   1cb5c:	f7fa fd0c 	bl	17578 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1cb60:	4620      	mov	r0, r4
   1cb62:	f7fa fd6d 	bl	17640 <ull_event_done>
	LL_ASSERT(evdone);
   1cb66:	b158      	cbz	r0, 1cb80 <lll_done+0x34>
}
   1cb68:	2000      	movs	r0, #0
   1cb6a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1cb6c:	4d1a      	ldr	r5, [pc, #104]	; (1cbd8 <lll_done+0x8c>)
   1cb6e:	68ab      	ldr	r3, [r5, #8]
   1cb70:	b31b      	cbz	r3, 1cbba <lll_done+0x6e>
		param = event.curr.param;
   1cb72:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1cb74:	2300      	movs	r3, #0
   1cb76:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1cb78:	602b      	str	r3, [r5, #0]
		if (param) {
   1cb7a:	2c00      	cmp	r4, #0
   1cb7c:	d1ec      	bne.n	1cb58 <lll_done+0xc>
   1cb7e:	e7ec      	b.n	1cb5a <lll_done+0xe>
	LL_ASSERT(evdone);
   1cb80:	4a16      	ldr	r2, [pc, #88]	; (1cbdc <lll_done+0x90>)
   1cb82:	4917      	ldr	r1, [pc, #92]	; (1cbe0 <lll_done+0x94>)
   1cb84:	4817      	ldr	r0, [pc, #92]	; (1cbe4 <lll_done+0x98>)
   1cb86:	f240 136d 	movw	r3, #365	; 0x16d
   1cb8a:	f008 f837 	bl	24bfc <printk>
   1cb8e:	4040      	eors	r0, r0
   1cb90:	f380 8811 	msr	BASEPRI, r0
   1cb94:	f04f 0003 	mov.w	r0, #3
   1cb98:	df02      	svc	2
}
   1cb9a:	2000      	movs	r0, #0
   1cb9c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1cb9e:	4a0f      	ldr	r2, [pc, #60]	; (1cbdc <lll_done+0x90>)
   1cba0:	4911      	ldr	r1, [pc, #68]	; (1cbe8 <lll_done+0x9c>)
   1cba2:	4810      	ldr	r0, [pc, #64]	; (1cbe4 <lll_done+0x98>)
   1cba4:	f240 1337 	movw	r3, #311	; 0x137
   1cba8:	f008 f828 	bl	24bfc <printk>
   1cbac:	4040      	eors	r0, r0
   1cbae:	f380 8811 	msr	BASEPRI, r0
   1cbb2:	f04f 0003 	mov.w	r0, #3
   1cbb6:	df02      	svc	2
   1cbb8:	e7ce      	b.n	1cb58 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1cbba:	4a08      	ldr	r2, [pc, #32]	; (1cbdc <lll_done+0x90>)
   1cbbc:	490b      	ldr	r1, [pc, #44]	; (1cbec <lll_done+0xa0>)
   1cbbe:	4809      	ldr	r0, [pc, #36]	; (1cbe4 <lll_done+0x98>)
   1cbc0:	f240 133d 	movw	r3, #317	; 0x13d
   1cbc4:	f008 f81a 	bl	24bfc <printk>
   1cbc8:	4040      	eors	r0, r0
   1cbca:	f380 8811 	msr	BASEPRI, r0
   1cbce:	f04f 0003 	mov.w	r0, #3
   1cbd2:	df02      	svc	2
   1cbd4:	e7cd      	b.n	1cb72 <lll_done+0x26>
   1cbd6:	bf00      	nop
   1cbd8:	20003950 	.word	0x20003950
   1cbdc:	0002dcdc 	.word	0x0002dcdc
   1cbe0:	0002de0c 	.word	0x0002de0c
   1cbe4:	0002d27c 	.word	0x0002d27c
   1cbe8:	0002dde8 	.word	0x0002dde8
   1cbec:	0002ddf8 	.word	0x0002ddf8

0001cbf0 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   1cbf0:	4a05      	ldr	r2, [pc, #20]	; (1cc08 <lll_is_done+0x18>)
   1cbf2:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   1cbf4:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   1cbf6:	1a1b      	subs	r3, r3, r0
   1cbf8:	bf18      	it	ne
   1cbfa:	2301      	movne	r3, #1
}
   1cbfc:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   1cc00:	700b      	strb	r3, [r1, #0]
}
   1cc02:	0940      	lsrs	r0, r0, #5
   1cc04:	4770      	bx	lr
   1cc06:	bf00      	nop
   1cc08:	20003950 	.word	0x20003950

0001cc0c <lll_is_abort_cb>:
}
   1cc0c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1cc10:	4770      	bx	lr
   1cc12:	bf00      	nop

0001cc14 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   1cc14:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1cc18:	2a00      	cmp	r2, #0
   1cc1a:	db04      	blt.n	1cc26 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   1cc1c:	429a      	cmp	r2, r3
   1cc1e:	bf38      	it	cc
   1cc20:	461a      	movcc	r2, r3
   1cc22:	4610      	mov	r0, r2
}
   1cc24:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1cc26:	68c0      	ldr	r0, [r0, #12]
   1cc28:	4298      	cmp	r0, r3
   1cc2a:	bf38      	it	cc
   1cc2c:	4618      	movcc	r0, r3
   1cc2e:	4770      	bx	lr

0001cc30 <lll_preempt_calc>:
{
   1cc30:	b510      	push	{r4, lr}
   1cc32:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1cc34:	f7f7 ff94 	bl	14b60 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1cc38:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1cc3a:	0203      	lsls	r3, r0, #8
   1cc3c:	d405      	bmi.n	1cc4a <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1cc3e:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1cc40:	2809      	cmp	r0, #9
   1cc42:	bf94      	ite	ls
   1cc44:	2000      	movls	r0, #0
   1cc46:	2001      	movhi	r0, #1
}
   1cc48:	bd10      	pop	{r4, pc}
		return 0;
   1cc4a:	2000      	movs	r0, #0
}
   1cc4c:	bd10      	pop	{r4, pc}
   1cc4e:	bf00      	nop

0001cc50 <lll_chan_set>:
	switch (chan) {
   1cc50:	2826      	cmp	r0, #38	; 0x26
{
   1cc52:	b510      	push	{r4, lr}
   1cc54:	4604      	mov	r4, r0
	switch (chan) {
   1cc56:	d01c      	beq.n	1cc92 <lll_chan_set+0x42>
   1cc58:	2827      	cmp	r0, #39	; 0x27
   1cc5a:	d012      	beq.n	1cc82 <lll_chan_set+0x32>
   1cc5c:	2825      	cmp	r0, #37	; 0x25
   1cc5e:	d008      	beq.n	1cc72 <lll_chan_set+0x22>
		if (chan < 11) {
   1cc60:	280a      	cmp	r0, #10
   1cc62:	d91e      	bls.n	1cca2 <lll_chan_set+0x52>
		} else if (chan < 40) {
   1cc64:	2827      	cmp	r0, #39	; 0x27
   1cc66:	d821      	bhi.n	1ccac <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1cc68:	3003      	adds	r0, #3
   1cc6a:	0040      	lsls	r0, r0, #1
   1cc6c:	f001 fc26 	bl	1e4bc <radio_freq_chan_set>
   1cc70:	e002      	b.n	1cc78 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1cc72:	2002      	movs	r0, #2
   1cc74:	f001 fc22 	bl	1e4bc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1cc78:	4620      	mov	r0, r4
}
   1cc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1cc7e:	f001 bc23 	b.w	1e4c8 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1cc82:	2050      	movs	r0, #80	; 0x50
   1cc84:	f001 fc1a 	bl	1e4bc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1cc88:	4620      	mov	r0, r4
}
   1cc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1cc8e:	f001 bc1b 	b.w	1e4c8 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1cc92:	201a      	movs	r0, #26
   1cc94:	f001 fc12 	bl	1e4bc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1cc98:	4620      	mov	r0, r4
}
   1cc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1cc9e:	f001 bc13 	b.w	1e4c8 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1cca2:	3002      	adds	r0, #2
   1cca4:	0040      	lsls	r0, r0, #1
   1cca6:	f001 fc09 	bl	1e4bc <radio_freq_chan_set>
   1ccaa:	e7e5      	b.n	1cc78 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1ccac:	4a06      	ldr	r2, [pc, #24]	; (1ccc8 <lll_chan_set+0x78>)
   1ccae:	4907      	ldr	r1, [pc, #28]	; (1cccc <lll_chan_set+0x7c>)
   1ccb0:	4807      	ldr	r0, [pc, #28]	; (1ccd0 <lll_chan_set+0x80>)
   1ccb2:	f240 13df 	movw	r3, #479	; 0x1df
   1ccb6:	f007 ffa1 	bl	24bfc <printk>
   1ccba:	4040      	eors	r0, r0
   1ccbc:	f380 8811 	msr	BASEPRI, r0
   1ccc0:	f04f 0003 	mov.w	r0, #3
   1ccc4:	df02      	svc	2
   1ccc6:	e7d7      	b.n	1cc78 <lll_chan_set+0x28>
   1ccc8:	0002dcdc 	.word	0x0002dcdc
   1cccc:	0002d314 	.word	0x0002d314
   1ccd0:	0002d27c 	.word	0x0002d27c

0001ccd4 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1ccd4:	f001 bc56 	b.w	1e584 <radio_tx_ready_delay_get>

0001ccd8 <lll_isr_tx_status_reset>:
{
   1ccd8:	b508      	push	{r3, lr}
	radio_status_reset();
   1ccda:	f001 fc7b 	bl	1e5d4 <radio_status_reset>
}
   1ccde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1cce2:	f001 bddb 	b.w	1e89c <radio_tmr_status_reset>
   1cce6:	bf00      	nop

0001cce8 <lll_isr_rx_status_reset>:
{
   1cce8:	b508      	push	{r3, lr}
	radio_status_reset();
   1ccea:	f001 fc73 	bl	1e5d4 <radio_status_reset>
	radio_tmr_status_reset();
   1ccee:	f001 fdd5 	bl	1e89c <radio_tmr_status_reset>
}
   1ccf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1ccf6:	f001 bd7d 	b.w	1e7f4 <radio_rssi_status_reset>
   1ccfa:	bf00      	nop

0001ccfc <lll_isr_status_reset>:
{
   1ccfc:	b508      	push	{r3, lr}
	radio_status_reset();
   1ccfe:	f001 fc69 	bl	1e5d4 <radio_status_reset>
	radio_tmr_status_reset();
   1cd02:	f001 fdcb 	bl	1e89c <radio_tmr_status_reset>
	radio_filter_status_reset();
   1cd06:	f001 fdb1 	bl	1e86c <radio_filter_status_reset>
	radio_ar_status_reset();
   1cd0a:	f001 ffa9 	bl	1ec60 <radio_ar_status_reset>
}
   1cd0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1cd12:	f001 bd6f 	b.w	1e7f4 <radio_rssi_status_reset>
   1cd16:	bf00      	nop

0001cd18 <lll_isr_cleanup>:
{
   1cd18:	b508      	push	{r3, lr}
   1cd1a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1cd1c:	4815      	ldr	r0, [pc, #84]	; (1cd74 <lll_isr_cleanup+0x5c>)
   1cd1e:	f001 fb51 	bl	1e3c4 <radio_isr_set>
	if (!radio_is_idle()) {
   1cd22:	f001 fc77 	bl	1e614 <radio_is_idle>
   1cd26:	b150      	cbz	r0, 1cd3e <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1cd28:	f001 fe8e 	bl	1ea48 <radio_tmr_stop>
	err = lll_hfclock_off();
   1cd2c:	f000 f9a4 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cd30:	2800      	cmp	r0, #0
   1cd32:	db0c      	blt.n	1cd4e <lll_isr_cleanup+0x36>
}
   1cd34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cd38:	2000      	movs	r0, #0
   1cd3a:	f7ff bf07 	b.w	1cb4c <lll_done>
		radio_disable();
   1cd3e:	f001 fc35 	bl	1e5ac <radio_disable>
	radio_tmr_stop();
   1cd42:	f001 fe81 	bl	1ea48 <radio_tmr_stop>
	err = lll_hfclock_off();
   1cd46:	f000 f997 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cd4a:	2800      	cmp	r0, #0
   1cd4c:	daf2      	bge.n	1cd34 <lll_isr_cleanup+0x1c>
   1cd4e:	4a0a      	ldr	r2, [pc, #40]	; (1cd78 <lll_isr_cleanup+0x60>)
   1cd50:	490a      	ldr	r1, [pc, #40]	; (1cd7c <lll_isr_cleanup+0x64>)
   1cd52:	480b      	ldr	r0, [pc, #44]	; (1cd80 <lll_isr_cleanup+0x68>)
   1cd54:	f240 2342 	movw	r3, #578	; 0x242
   1cd58:	f007 ff50 	bl	24bfc <printk>
   1cd5c:	4040      	eors	r0, r0
   1cd5e:	f380 8811 	msr	BASEPRI, r0
   1cd62:	f04f 0003 	mov.w	r0, #3
   1cd66:	df02      	svc	2
	lll_done(NULL);
   1cd68:	2000      	movs	r0, #0
}
   1cd6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cd6e:	f7ff beed 	b.w	1cb4c <lll_done>
   1cd72:	bf00      	nop
   1cd74:	0001c6d1 	.word	0x0001c6d1
   1cd78:	0002dcdc 	.word	0x0002dcdc
   1cd7c:	0002de14 	.word	0x0002de14
   1cd80:	0002d27c 	.word	0x0002d27c

0001cd84 <lll_isr_abort>:
{
   1cd84:	b510      	push	{r4, lr}
   1cd86:	4604      	mov	r4, r0
	radio_status_reset();
   1cd88:	f001 fc24 	bl	1e5d4 <radio_status_reset>
	radio_tmr_status_reset();
   1cd8c:	f001 fd86 	bl	1e89c <radio_tmr_status_reset>
	radio_filter_status_reset();
   1cd90:	f001 fd6c 	bl	1e86c <radio_filter_status_reset>
	radio_ar_status_reset();
   1cd94:	f001 ff64 	bl	1ec60 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1cd98:	f001 fd2c 	bl	1e7f4 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1cd9c:	4620      	mov	r0, r4
}
   1cd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1cda2:	f7ff bfb9 	b.w	1cd18 <lll_isr_cleanup>
   1cda6:	bf00      	nop

0001cda8 <lll_isr_early_abort>:
{
   1cda8:	b508      	push	{r3, lr}
   1cdaa:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1cdac:	4813      	ldr	r0, [pc, #76]	; (1cdfc <lll_isr_early_abort+0x54>)
   1cdae:	f001 fb09 	bl	1e3c4 <radio_isr_set>
	if (!radio_is_idle()) {
   1cdb2:	f001 fc2f 	bl	1e614 <radio_is_idle>
   1cdb6:	b140      	cbz	r0, 1cdca <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1cdb8:	f000 f95e 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cdbc:	2800      	cmp	r0, #0
   1cdbe:	db0a      	blt.n	1cdd6 <lll_isr_early_abort+0x2e>
}
   1cdc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cdc4:	2000      	movs	r0, #0
   1cdc6:	f7ff bec1 	b.w	1cb4c <lll_done>
		radio_disable();
   1cdca:	f001 fbef 	bl	1e5ac <radio_disable>
	err = lll_hfclock_off();
   1cdce:	f000 f953 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cdd2:	2800      	cmp	r0, #0
   1cdd4:	daf4      	bge.n	1cdc0 <lll_isr_early_abort+0x18>
   1cdd6:	4a0a      	ldr	r2, [pc, #40]	; (1ce00 <lll_isr_early_abort+0x58>)
   1cdd8:	490a      	ldr	r1, [pc, #40]	; (1ce04 <lll_isr_early_abort+0x5c>)
   1cdda:	480b      	ldr	r0, [pc, #44]	; (1ce08 <lll_isr_early_abort+0x60>)
   1cddc:	f240 2351 	movw	r3, #593	; 0x251
   1cde0:	f007 ff0c 	bl	24bfc <printk>
   1cde4:	4040      	eors	r0, r0
   1cde6:	f380 8811 	msr	BASEPRI, r0
   1cdea:	f04f 0003 	mov.w	r0, #3
   1cdee:	df02      	svc	2
	lll_done(NULL);
   1cdf0:	2000      	movs	r0, #0
}
   1cdf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cdf6:	f7ff bea9 	b.w	1cb4c <lll_done>
   1cdfa:	bf00      	nop
   1cdfc:	0001c6d1 	.word	0x0001c6d1
   1ce00:	0002dcdc 	.word	0x0002dcdc
   1ce04:	0002de14 	.word	0x0002de14
   1ce08:	0002d27c 	.word	0x0002d27c

0001ce0c <lll_prepare_resolve>:
{
   1ce0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce10:	b084      	sub	sp, #16
   1ce12:	4606      	mov	r6, r0
   1ce14:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   1ce16:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1ce1a:	23ff      	movs	r3, #255	; 0xff
{
   1ce1c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1ce20:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1ce24:	460f      	mov	r7, r1
   1ce26:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   1ce28:	f7fa fb86 	bl	17538 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ce2c:	4604      	mov	r4, r0
   1ce2e:	b920      	cbnz	r0, 1ce3a <lll_prepare_resolve+0x2e>
   1ce30:	e032      	b.n	1ce98 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   1ce32:	f7fa fb81 	bl	17538 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ce36:	4604      	mov	r4, r0
   1ce38:	b370      	cbz	r0, 1ce98 <lll_prepare_resolve+0x8c>
   1ce3a:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1ce3e:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   1ce42:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1ce46:	d1f4      	bne.n	1ce32 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1ce48:	f8df a130 	ldr.w	sl, [pc, #304]	; 1cf7c <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1ce4c:	f8da 3008 	ldr.w	r3, [sl, #8]
   1ce50:	bb4b      	cbnz	r3, 1cea6 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   1ce52:	f1b9 0f00 	cmp.w	r9, #0
   1ce56:	d048      	beq.n	1ceea <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1ce58:	f8cd 9000 	str.w	r9, [sp]
   1ce5c:	4643      	mov	r3, r8
   1ce5e:	462a      	mov	r2, r5
   1ce60:	4639      	mov	r1, r7
   1ce62:	4630      	mov	r0, r6
   1ce64:	f7fa fb2a 	bl	174bc <ull_prepare_enqueue>
		LL_ASSERT(next);
   1ce68:	b980      	cbnz	r0, 1ce8c <lll_prepare_resolve+0x80>
   1ce6a:	4a45      	ldr	r2, [pc, #276]	; (1cf80 <lll_prepare_resolve+0x174>)
   1ce6c:	4945      	ldr	r1, [pc, #276]	; (1cf84 <lll_prepare_resolve+0x178>)
   1ce6e:	4846      	ldr	r0, [pc, #280]	; (1cf88 <lll_prepare_resolve+0x17c>)
   1ce70:	f240 238d 	movw	r3, #653	; 0x28d
   1ce74:	f007 fec2 	bl	24bfc <printk>
   1ce78:	4040      	eors	r0, r0
   1ce7a:	f380 8811 	msr	BASEPRI, r0
   1ce7e:	f04f 0003 	mov.w	r0, #3
   1ce82:	df02      	svc	2
   1ce84:	2000      	movs	r0, #0
		if (is_resume) {
   1ce86:	f1b9 0f00 	cmp.w	r9, #0
   1ce8a:	d019      	beq.n	1cec0 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   1ce8c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1ce90:	4620      	mov	r0, r4
   1ce92:	b004      	add	sp, #16
   1ce94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   1ce98:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1cf7c <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1ce9c:	f8da 3008 	ldr.w	r3, [sl, #8]
   1cea0:	2b00      	cmp	r3, #0
   1cea2:	d031      	beq.n	1cf08 <lll_prepare_resolve+0xfc>
   1cea4:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1cea6:	f8cd 9000 	str.w	r9, [sp]
   1ceaa:	4643      	mov	r3, r8
   1ceac:	462a      	mov	r2, r5
   1ceae:	4639      	mov	r1, r7
   1ceb0:	4630      	mov	r0, r6
   1ceb2:	f7fa fb03 	bl	174bc <ull_prepare_enqueue>
		LL_ASSERT(next);
   1ceb6:	2800      	cmp	r0, #0
   1ceb8:	d0d7      	beq.n	1ce6a <lll_prepare_resolve+0x5e>
		if (is_resume) {
   1ceba:	f1b9 0f00 	cmp.w	r9, #0
   1cebe:	d1e5      	bne.n	1ce8c <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   1cec0:	4601      	mov	r1, r0
   1cec2:	4620      	mov	r0, r4
   1cec4:	f7ff fc86 	bl	1c7d4 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cec8:	f030 0302 	bics.w	r3, r0, #2
   1cecc:	d0de      	beq.n	1ce8c <lll_prepare_resolve+0x80>
   1cece:	4a2c      	ldr	r2, [pc, #176]	; (1cf80 <lll_prepare_resolve+0x174>)
   1ced0:	492e      	ldr	r1, [pc, #184]	; (1cf8c <lll_prepare_resolve+0x180>)
   1ced2:	482d      	ldr	r0, [pc, #180]	; (1cf88 <lll_prepare_resolve+0x17c>)
   1ced4:	f44f 7326 	mov.w	r3, #664	; 0x298
   1ced8:	f007 fe90 	bl	24bfc <printk>
   1cedc:	4040      	eors	r0, r0
   1cede:	f380 8811 	msr	BASEPRI, r0
   1cee2:	f04f 0003 	mov.w	r0, #3
   1cee6:	df02      	svc	2
   1cee8:	e7d0      	b.n	1ce8c <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1ceea:	42ac      	cmp	r4, r5
   1ceec:	d00c      	beq.n	1cf08 <lll_prepare_resolve+0xfc>
   1ceee:	4a24      	ldr	r2, [pc, #144]	; (1cf80 <lll_prepare_resolve+0x174>)
   1cef0:	4927      	ldr	r1, [pc, #156]	; (1cf90 <lll_prepare_resolve+0x184>)
   1cef2:	4825      	ldr	r0, [pc, #148]	; (1cf88 <lll_prepare_resolve+0x17c>)
   1cef4:	f240 23be 	movw	r3, #702	; 0x2be
   1cef8:	f007 fe80 	bl	24bfc <printk>
   1cefc:	4040      	eors	r0, r0
   1cefe:	f380 8811 	msr	BASEPRI, r0
   1cf02:	f04f 0003 	mov.w	r0, #3
   1cf06:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1cf08:	68eb      	ldr	r3, [r5, #12]
   1cf0a:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   1cf0e:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   1cf12:	4628      	mov	r0, r5
   1cf14:	47c0      	blx	r8
   1cf16:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   1cf18:	f7ff fc1c 	bl	1c754 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cf1c:	f030 0302 	bics.w	r3, r0, #2
   1cf20:	d11e      	bne.n	1cf60 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   1cf22:	f10d 000f 	add.w	r0, sp, #15
   1cf26:	f7fa fb07 	bl	17538 <ull_prepare_dequeue_iter>
		if (!p) {
   1cf2a:	2800      	cmp	r0, #0
   1cf2c:	d0b0      	beq.n	1ce90 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   1cf2e:	7f03      	ldrb	r3, [r0, #28]
   1cf30:	f013 0303 	ands.w	r3, r3, #3
   1cf34:	d1f5      	bne.n	1cf22 <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   1cf36:	4601      	mov	r1, r0
   1cf38:	4618      	mov	r0, r3
   1cf3a:	f7ff fc4b 	bl	1c7d4 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cf3e:	f030 0302 	bics.w	r3, r0, #2
   1cf42:	d0a5      	beq.n	1ce90 <lll_prepare_resolve+0x84>
   1cf44:	4a0e      	ldr	r2, [pc, #56]	; (1cf80 <lll_prepare_resolve+0x174>)
   1cf46:	4911      	ldr	r1, [pc, #68]	; (1cf8c <lll_prepare_resolve+0x180>)
   1cf48:	480f      	ldr	r0, [pc, #60]	; (1cf88 <lll_prepare_resolve+0x17c>)
   1cf4a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   1cf4e:	f007 fe55 	bl	24bfc <printk>
   1cf52:	4040      	eors	r0, r0
   1cf54:	f380 8811 	msr	BASEPRI, r0
   1cf58:	f04f 0003 	mov.w	r0, #3
   1cf5c:	df02      	svc	2
   1cf5e:	e797      	b.n	1ce90 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cf60:	4a07      	ldr	r2, [pc, #28]	; (1cf80 <lll_prepare_resolve+0x174>)
   1cf62:	490a      	ldr	r1, [pc, #40]	; (1cf8c <lll_prepare_resolve+0x180>)
   1cf64:	4808      	ldr	r0, [pc, #32]	; (1cf88 <lll_prepare_resolve+0x17c>)
   1cf66:	f240 23cb 	movw	r3, #715	; 0x2cb
   1cf6a:	f007 fe47 	bl	24bfc <printk>
   1cf6e:	4040      	eors	r0, r0
   1cf70:	f380 8811 	msr	BASEPRI, r0
   1cf74:	f04f 0003 	mov.w	r0, #3
   1cf78:	df02      	svc	2
   1cf7a:	e7d2      	b.n	1cf22 <lll_prepare_resolve+0x116>
   1cf7c:	20003950 	.word	0x20003950
   1cf80:	0002dcdc 	.word	0x0002dcdc
   1cf84:	0002de20 	.word	0x0002de20
   1cf88:	0002d27c 	.word	0x0002d27c
   1cf8c:	0002ddac 	.word	0x0002ddac
   1cf90:	0002de28 	.word	0x0002de28

0001cf94 <clock_ready>:
	z_impl_k_sem_give(sem);
   1cf94:	f101 0010 	add.w	r0, r1, #16
   1cf98:	f006 bd90 	b.w	23abc <z_impl_k_sem_give>

0001cf9c <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1cf9c:	b570      	push	{r4, r5, r6, lr}
   1cf9e:	4605      	mov	r5, r0
   1cfa0:	b08a      	sub	sp, #40	; 0x28
   1cfa2:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cfa4:	2201      	movs	r2, #1
   1cfa6:	2100      	movs	r1, #0
   1cfa8:	a804      	add	r0, sp, #16
   1cfaa:	f00e fb94 	bl	2b6d6 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1cfae:	4b0f      	ldr	r3, [pc, #60]	; (1cfec <blocking_on+0x50>)
   1cfb0:	9301      	str	r3, [sp, #4]
   1cfb2:	2600      	movs	r6, #0
   1cfb4:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1cfb6:	4669      	mov	r1, sp
   1cfb8:	4628      	mov	r0, r5
   1cfba:	9603      	str	r6, [sp, #12]
   1cfbc:	9302      	str	r3, [sp, #8]
   1cfbe:	f007 feb3 	bl	24d28 <onoff_request>
	if (err < 0) {
   1cfc2:	2800      	cmp	r0, #0
   1cfc4:	db10      	blt.n	1cfe8 <blocking_on+0x4c>
   1cfc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1cfca:	4631      	mov	r1, r6
   1cfcc:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cfd0:	fbe4 0103 	umlal	r0, r1, r4, r3
   1cfd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cfd8:	2300      	movs	r3, #0
   1cfda:	f7e4 f891 	bl	1100 <__aeabi_uldivmod>
   1cfde:	4602      	mov	r2, r0
   1cfe0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1cfe2:	a804      	add	r0, sp, #16
   1cfe4:	f006 fd90 	bl	23b08 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1cfe8:	b00a      	add	sp, #40	; 0x28
   1cfea:	bd70      	pop	{r4, r5, r6, pc}
   1cfec:	0001cf95 	.word	0x0001cf95

0001cff0 <lll_clock_init>:

int lll_clock_init(void)
{
   1cff0:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1cff2:	2001      	movs	r0, #1
   1cff4:	f003 fa60 	bl	204b8 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1cff8:	4904      	ldr	r1, [pc, #16]	; (1d00c <lll_clock_init+0x1c>)
   1cffa:	2300      	movs	r3, #0
   1cffc:	2401      	movs	r4, #1
   1cffe:	608c      	str	r4, [r1, #8]
   1d000:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1d002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d006:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1d008:	f007 be8e 	b.w	24d28 <onoff_request>
   1d00c:	2000396c 	.word	0x2000396c

0001d010 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1d010:	4b0c      	ldr	r3, [pc, #48]	; (1d044 <lll_clock_wait+0x34>)
   1d012:	781a      	ldrb	r2, [r3, #0]
   1d014:	b10a      	cbz	r2, 1d01a <lll_clock_wait+0xa>
		return 0;
   1d016:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1d018:	4770      	bx	lr
{
   1d01a:	b510      	push	{r4, lr}
	done = true;
   1d01c:	2001      	movs	r0, #1
   1d01e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1d020:	f003 fa4a 	bl	204b8 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1d024:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1d028:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1d02a:	f7ff ffb7 	bl	1cf9c <blocking_on>
	if (err) {
   1d02e:	b938      	cbnz	r0, 1d040 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1d030:	4620      	mov	r0, r4
   1d032:	f007 fec2 	bl	24dba <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1d036:	2802      	cmp	r0, #2
		return 0;
   1d038:	bf0c      	ite	eq
   1d03a:	2000      	moveq	r0, #0
		return -EIO;
   1d03c:	f06f 0004 	mvnne.w	r0, #4
}
   1d040:	bd10      	pop	{r4, pc}
   1d042:	bf00      	nop
   1d044:	200049a2 	.word	0x200049a2

0001d048 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1d048:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d04a:	4b0a      	ldr	r3, [pc, #40]	; (1d074 <lll_hfclock_on+0x2c>)
   1d04c:	f3bf 8f5b 	dmb	ish
   1d050:	e853 2f00 	ldrex	r2, [r3]
   1d054:	1c51      	adds	r1, r2, #1
   1d056:	e843 1000 	strex	r0, r1, [r3]
   1d05a:	2800      	cmp	r0, #0
   1d05c:	d1f8      	bne.n	1d050 <lll_hfclock_on+0x8>
   1d05e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1d062:	2a00      	cmp	r2, #0
   1d064:	dd01      	ble.n	1d06a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1d066:	2000      	movs	r0, #0
   1d068:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1d06a:	f003 fa2d 	bl	204c8 <z_nrf_clock_bt_ctlr_hf_request>
}
   1d06e:	2000      	movs	r0, #0
   1d070:	bd08      	pop	{r3, pc}
   1d072:	bf00      	nop
   1d074:	20003968 	.word	0x20003968

0001d078 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1d078:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1d07a:	4b0d      	ldr	r3, [pc, #52]	; (1d0b0 <lll_hfclock_off+0x38>)
   1d07c:	681a      	ldr	r2, [r3, #0]
   1d07e:	2a00      	cmp	r2, #0
   1d080:	dd12      	ble.n	1d0a8 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d082:	f3bf 8f5b 	dmb	ish
   1d086:	e853 2f00 	ldrex	r2, [r3]
   1d08a:	1e51      	subs	r1, r2, #1
   1d08c:	e843 1000 	strex	r0, r1, [r3]
   1d090:	2800      	cmp	r0, #0
   1d092:	d1f8      	bne.n	1d086 <lll_hfclock_off+0xe>
   1d094:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1d098:	2a01      	cmp	r2, #1
   1d09a:	dd01      	ble.n	1d0a0 <lll_hfclock_off+0x28>
		return 0;
   1d09c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1d09e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1d0a0:	f003 fa26 	bl	204f0 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1d0a4:	2000      	movs	r0, #0
}
   1d0a6:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1d0a8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1d0ac:	bd08      	pop	{r3, pc}
   1d0ae:	bf00      	nop
   1d0b0:	20003968 	.word	0x20003968

0001d0b4 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1d0b4:	2005      	movs	r0, #5
   1d0b6:	4770      	bx	lr

0001d0b8 <common_prepare_cb>:
{
   1d0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   1d0bc:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   1d0be:	f994 3016 	ldrsb.w	r3, [r4, #22]
   1d0c2:	2b00      	cmp	r3, #0
{
   1d0c4:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   1d0c6:	f2c0 810e 	blt.w	1d2e6 <common_prepare_cb+0x22e>
   1d0ca:	6863      	ldr	r3, [r4, #4]
   1d0cc:	4605      	mov	r5, r0
   1d0ce:	460f      	mov	r7, r1
   1d0d0:	2b00      	cmp	r3, #0
   1d0d2:	f040 80fd 	bne.w	1d2d0 <common_prepare_cb+0x218>
	lll->state = 0U;
   1d0d6:	7da3      	ldrb	r3, [r4, #22]
   1d0d8:	f36f 0300 	bfc	r3, #0, #1
   1d0dc:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1d0de:	f001 f9b3 	bl	1e448 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d0e2:	2008      	movs	r0, #8
   1d0e4:	f001 f9e4 	bl	1e4b0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d0e8:	2100      	movs	r1, #0
   1d0ea:	4608      	mov	r0, r1
   1d0ec:	f001 f9d0 	bl	1e490 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1d0f0:	2200      	movs	r2, #0
   1d0f2:	2125      	movs	r1, #37	; 0x25
   1d0f4:	2008      	movs	r0, #8
   1d0f6:	f001 fa11 	bl	1e51c <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d0fa:	2001      	movs	r0, #1
   1d0fc:	f7fa f992 	bl	17424 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d100:	4606      	mov	r6, r0
   1d102:	2800      	cmp	r0, #0
   1d104:	f000 80d6 	beq.w	1d2b4 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   1d108:	f106 001c 	add.w	r0, r6, #28
   1d10c:	f001 fa2e 	bl	1e56c <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d110:	4b7a      	ldr	r3, [pc, #488]	; (1d2fc <common_prepare_cb+0x244>)
   1d112:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1d114:	a80b      	add	r0, sp, #44	; 0x2c
   1d116:	f001 f9e9 	bl	1e4ec <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1d11a:	4979      	ldr	r1, [pc, #484]	; (1d300 <common_prepare_cb+0x248>)
   1d11c:	f240 605b 	movw	r0, #1627	; 0x65b
   1d120:	f001 fa82 	bl	1e628 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1d124:	7da0      	ldrb	r0, [r4, #22]
   1d126:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d12a:	3025      	adds	r0, #37	; 0x25
   1d12c:	f7ff fd90 	bl	1cc50 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1d130:	4874      	ldr	r0, [pc, #464]	; (1d304 <common_prepare_cb+0x24c>)
   1d132:	4621      	mov	r1, r4
   1d134:	f001 f946 	bl	1e3c4 <radio_isr_set>
	} else if (lll->type ||
   1d138:	7da3      	ldrb	r3, [r4, #22]
   1d13a:	069b      	lsls	r3, r3, #26
   1d13c:	d403      	bmi.n	1d146 <common_prepare_cb+0x8e>
		   lll->conn) {
   1d13e:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1d140:	2b00      	cmp	r3, #0
   1d142:	f000 8091 	beq.w	1d268 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d146:	2096      	movs	r0, #150	; 0x96
   1d148:	f001 fbb8 	bl	1e8bc <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1d14c:	2300      	movs	r3, #0
   1d14e:	461a      	mov	r2, r3
   1d150:	4619      	mov	r1, r3
   1d152:	4618      	mov	r0, r3
   1d154:	f001 face 	bl	1e6f4 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1d158:	f7ff fa0a 	bl	1c570 <ull_filter_lll_rl_enabled>
   1d15c:	2800      	cmp	r0, #0
   1d15e:	d135      	bne.n	1d1cc <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1d160:	7da3      	ldrb	r3, [r4, #22]
   1d162:	f013 0f18 	tst.w	r3, #24
   1d166:	d152      	bne.n	1d20e <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   1d168:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1d16c:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1d16e:	4640      	mov	r0, r8
   1d170:	f7ff fd50 	bl	1cc14 <lll_event_offset_get>
   1d174:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1d176:	686a      	ldr	r2, [r5, #4]
   1d178:	f106 0109 	add.w	r1, r6, #9
   1d17c:	2000      	movs	r0, #0
   1d17e:	f001 fba9 	bl	1e8d4 <radio_tmr_start>
	radio_tmr_end_capture();
   1d182:	f001 fc8d 	bl	1eaa0 <radio_tmr_end_capture>
	radio_rssi_measure();
   1d186:	f001 fb25 	bl	1e7d4 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1d18a:	4620      	mov	r0, r4
   1d18c:	f7fa fd66 	bl	17c5c <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1d190:	1c81      	adds	r1, r0, #2
   1d192:	b2c9      	uxtb	r1, r1
   1d194:	4640      	mov	r0, r8
   1d196:	4632      	mov	r2, r6
   1d198:	f7ff fd4a 	bl	1cc30 <lll_preempt_calc>
   1d19c:	bb68      	cbnz	r0, 1d1fa <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   1d19e:	b917      	cbnz	r7, 1d1a6 <common_prepare_cb+0xee>
   1d1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d1a2:	2b00      	cmp	r3, #0
   1d1a4:	d163      	bne.n	1d26e <common_prepare_cb+0x1b6>
		if (lll->conn) {
   1d1a6:	6863      	ldr	r3, [r4, #4]
   1d1a8:	b143      	cbz	r3, 1d1bc <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   1d1aa:	4b57      	ldr	r3, [pc, #348]	; (1d308 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1d1ac:	2201      	movs	r2, #1
   1d1ae:	2102      	movs	r1, #2
   1d1b0:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1d1b2:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1d1b4:	f7f6 f9de 	bl	13574 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1d1b8:	2800      	cmp	r0, #0
   1d1ba:	d142      	bne.n	1d242 <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   1d1bc:	4620      	mov	r0, r4
   1d1be:	f7ff fcc3 	bl	1cb48 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d1c2:	bb68      	cbnz	r0, 1d220 <common_prepare_cb+0x168>
}
   1d1c4:	2000      	movs	r0, #0
   1d1c6:	b00c      	add	sp, #48	; 0x30
   1d1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   1d1cc:	7da0      	ldrb	r0, [r4, #22]
   1d1ce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1d1d2:	f7fe fde9 	bl	1bda8 <ull_filter_lll_get>
   1d1d6:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d1d8:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1d1dc:	f7ff f842 	bl	1c264 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1d1e0:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d1e2:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   1d1e4:	1cb2      	adds	r2, r6, #2
   1d1e6:	7830      	ldrb	r0, [r6, #0]
   1d1e8:	f001 fb16 	bl	1e818 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   1d1ec:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1d1f0:	2200      	movs	r2, #0
   1d1f2:	4641      	mov	r1, r8
   1d1f4:	f001 fcfa 	bl	1ebec <radio_ar_configure>
   1d1f8:	e7b6      	b.n	1d168 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   1d1fa:	4844      	ldr	r0, [pc, #272]	; (1d30c <common_prepare_cb+0x254>)
   1d1fc:	4621      	mov	r1, r4
   1d1fe:	f001 f8e1 	bl	1e3c4 <radio_isr_set>
		radio_disable();
   1d202:	f001 f9d3 	bl	1e5ac <radio_disable>
}
   1d206:	2000      	movs	r0, #0
   1d208:	b00c      	add	sp, #48	; 0x30
   1d20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1d20e:	2001      	movs	r0, #1
   1d210:	f7fe fdca 	bl	1bda8 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1d214:	7841      	ldrb	r1, [r0, #1]
   1d216:	1c82      	adds	r2, r0, #2
   1d218:	7800      	ldrb	r0, [r0, #0]
   1d21a:	f001 fafd 	bl	1e818 <radio_filter_configure>
   1d21e:	e7a3      	b.n	1d168 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   1d220:	4a3b      	ldr	r2, [pc, #236]	; (1d310 <common_prepare_cb+0x258>)
   1d222:	493c      	ldr	r1, [pc, #240]	; (1d314 <common_prepare_cb+0x25c>)
   1d224:	483c      	ldr	r0, [pc, #240]	; (1d318 <common_prepare_cb+0x260>)
   1d226:	f44f 7305 	mov.w	r3, #532	; 0x214
   1d22a:	f007 fce7 	bl	24bfc <printk>
   1d22e:	4040      	eors	r0, r0
   1d230:	f380 8811 	msr	BASEPRI, r0
   1d234:	f04f 0003 	mov.w	r0, #3
   1d238:	df02      	svc	2
}
   1d23a:	2000      	movs	r0, #0
   1d23c:	b00c      	add	sp, #48	; 0x30
   1d23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   1d242:	4a33      	ldr	r2, [pc, #204]	; (1d310 <common_prepare_cb+0x258>)
   1d244:	4935      	ldr	r1, [pc, #212]	; (1d31c <common_prepare_cb+0x264>)
   1d246:	4834      	ldr	r0, [pc, #208]	; (1d318 <common_prepare_cb+0x260>)
   1d248:	f240 230f 	movw	r3, #527	; 0x20f
   1d24c:	f007 fcd6 	bl	24bfc <printk>
   1d250:	4040      	eors	r0, r0
   1d252:	f380 8811 	msr	BASEPRI, r0
   1d256:	f04f 0003 	mov.w	r0, #3
   1d25a:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1d25c:	4620      	mov	r0, r4
   1d25e:	f7ff fc73 	bl	1cb48 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d262:	2800      	cmp	r0, #0
   1d264:	d0ae      	beq.n	1d1c4 <common_prepare_cb+0x10c>
   1d266:	e7db      	b.n	1d220 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   1d268:	f001 faa4 	bl	1e7b4 <radio_switch_complete_and_disable>
   1d26c:	e774      	b.n	1d158 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d26e:	4a2c      	ldr	r2, [pc, #176]	; (1d320 <common_prepare_cb+0x268>)
   1d270:	9207      	str	r2, [sp, #28]
   1d272:	4a2c      	ldr	r2, [pc, #176]	; (1d324 <common_prepare_cb+0x26c>)
   1d274:	9205      	str	r2, [sp, #20]
   1d276:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   1d27a:	9300      	str	r3, [sp, #0]
   1d27c:	9208      	str	r2, [sp, #32]
   1d27e:	4633      	mov	r3, r6
   1d280:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1d284:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1d288:	9406      	str	r4, [sp, #24]
   1d28a:	4639      	mov	r1, r7
   1d28c:	2201      	movs	r2, #1
   1d28e:	f7f7 fb3d 	bl	1490c <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d292:	f030 0302 	bics.w	r3, r0, #2
   1d296:	d086      	beq.n	1d1a6 <common_prepare_cb+0xee>
   1d298:	4a1d      	ldr	r2, [pc, #116]	; (1d310 <common_prepare_cb+0x258>)
   1d29a:	4923      	ldr	r1, [pc, #140]	; (1d328 <common_prepare_cb+0x270>)
   1d29c:	481e      	ldr	r0, [pc, #120]	; (1d318 <common_prepare_cb+0x260>)
   1d29e:	f240 13fb 	movw	r3, #507	; 0x1fb
   1d2a2:	f007 fcab 	bl	24bfc <printk>
   1d2a6:	4040      	eors	r0, r0
   1d2a8:	f380 8811 	msr	BASEPRI, r0
   1d2ac:	f04f 0003 	mov.w	r0, #3
   1d2b0:	df02      	svc	2
   1d2b2:	e778      	b.n	1d1a6 <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   1d2b4:	4a16      	ldr	r2, [pc, #88]	; (1d310 <common_prepare_cb+0x258>)
   1d2b6:	491d      	ldr	r1, [pc, #116]	; (1d32c <common_prepare_cb+0x274>)
   1d2b8:	4817      	ldr	r0, [pc, #92]	; (1d318 <common_prepare_cb+0x260>)
   1d2ba:	f240 138d 	movw	r3, #397	; 0x18d
   1d2be:	f007 fc9d 	bl	24bfc <printk>
   1d2c2:	4040      	eors	r0, r0
   1d2c4:	f380 8811 	msr	BASEPRI, r0
   1d2c8:	f04f 0003 	mov.w	r0, #3
   1d2cc:	df02      	svc	2
   1d2ce:	e71b      	b.n	1d108 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   1d2d0:	6863      	ldr	r3, [r4, #4]
   1d2d2:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d2d6:	07d9      	lsls	r1, r3, #31
   1d2d8:	d405      	bmi.n	1d2e6 <common_prepare_cb+0x22e>
   1d2da:	6863      	ldr	r3, [r4, #4]
   1d2dc:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d2e0:	079a      	lsls	r2, r3, #30
   1d2e2:	f57f aef8 	bpl.w	1d0d6 <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   1d2e6:	4812      	ldr	r0, [pc, #72]	; (1d330 <common_prepare_cb+0x278>)
   1d2e8:	4621      	mov	r1, r4
   1d2ea:	f001 f86b 	bl	1e3c4 <radio_isr_set>
		radio_disable();
   1d2ee:	f001 f95d 	bl	1e5ac <radio_disable>
}
   1d2f2:	2000      	movs	r0, #0
   1d2f4:	b00c      	add	sp, #48	; 0x30
   1d2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d2fa:	bf00      	nop
   1d2fc:	8e89bed6 	.word	0x8e89bed6
   1d300:	00555555 	.word	0x00555555
   1d304:	00004141 	.word	0x00004141
   1d308:	20000758 	.word	0x20000758
   1d30c:	0001d3dd 	.word	0x0001d3dd
   1d310:	0002de74 	.word	0x0002de74
   1d314:	0002d6d0 	.word	0x0002d6d0
   1d318:	0002d27c 	.word	0x0002d27c
   1d31c:	0002d6f8 	.word	0x0002d6f8
   1d320:	0001d501 	.word	0x0001d501
   1d324:	0001d5a9 	.word	0x0001d5a9
   1d328:	0002ddac 	.word	0x0002ddac
   1d32c:	0002dec0 	.word	0x0002dec0
   1d330:	0001cda9 	.word	0x0001cda9

0001d334 <prepare_cb>:
	return common_prepare_cb(p, false);
   1d334:	2100      	movs	r1, #0
   1d336:	f7ff bebf 	b.w	1d0b8 <common_prepare_cb>
   1d33a:	bf00      	nop

0001d33c <isr_common_done>:
{
   1d33c:	b530      	push	{r4, r5, lr}
   1d33e:	4604      	mov	r4, r0
   1d340:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1d342:	f7ff fcdb 	bl	1ccfc <lll_isr_status_reset>
	lll->state = 0U;
   1d346:	7da3      	ldrb	r3, [r4, #22]
   1d348:	f36f 0300 	bfc	r3, #0, #1
   1d34c:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   1d34e:	069b      	lsls	r3, r3, #26
   1d350:	d401      	bmi.n	1d356 <isr_common_done+0x1a>
		   lll->conn) {
   1d352:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1d354:	b3b3      	cbz	r3, 1d3c4 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d356:	2096      	movs	r0, #150	; 0x96
   1d358:	f001 fab0 	bl	1e8bc <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1d35c:	2300      	movs	r3, #0
   1d35e:	461a      	mov	r2, r3
   1d360:	4619      	mov	r1, r3
   1d362:	4618      	mov	r0, r3
   1d364:	f001 f9c6 	bl	1e6f4 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d368:	2001      	movs	r0, #1
   1d36a:	f7fa f85b 	bl	17424 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d36e:	4605      	mov	r5, r0
   1d370:	b1d0      	cbz	r0, 1d3a8 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   1d372:	f105 001c 	add.w	r0, r5, #28
   1d376:	f001 f8f9 	bl	1e56c <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1d37a:	f7ff f8f9 	bl	1c570 <ull_filter_lll_rl_enabled>
   1d37e:	b940      	cbnz	r0, 1d392 <isr_common_done+0x56>
	radio_rssi_measure();
   1d380:	f001 fa28 	bl	1e7d4 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1d384:	4811      	ldr	r0, [pc, #68]	; (1d3cc <isr_common_done+0x90>)
   1d386:	4621      	mov	r1, r4
}
   1d388:	b003      	add	sp, #12
   1d38a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1d38e:	f001 b819 	b.w	1e3c4 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d392:	f10d 0007 	add.w	r0, sp, #7
   1d396:	f7fe ff65 	bl	1c264 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1d39a:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d39c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1d39e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d3a2:	f001 fc23 	bl	1ebec <radio_ar_configure>
   1d3a6:	e7eb      	b.n	1d380 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   1d3a8:	4a09      	ldr	r2, [pc, #36]	; (1d3d0 <isr_common_done+0x94>)
   1d3aa:	490a      	ldr	r1, [pc, #40]	; (1d3d4 <isr_common_done+0x98>)
   1d3ac:	480a      	ldr	r0, [pc, #40]	; (1d3d8 <isr_common_done+0x9c>)
   1d3ae:	f44f 7352 	mov.w	r3, #840	; 0x348
   1d3b2:	f007 fc23 	bl	24bfc <printk>
   1d3b6:	4040      	eors	r0, r0
   1d3b8:	f380 8811 	msr	BASEPRI, r0
   1d3bc:	f04f 0003 	mov.w	r0, #3
   1d3c0:	df02      	svc	2
   1d3c2:	e7d6      	b.n	1d372 <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   1d3c4:	f001 f9f6 	bl	1e7b4 <radio_switch_complete_and_disable>
   1d3c8:	e7ce      	b.n	1d368 <isr_common_done+0x2c>
   1d3ca:	bf00      	nop
   1d3cc:	00004141 	.word	0x00004141
   1d3d0:	0002de74 	.word	0x0002de74
   1d3d4:	0002dec0 	.word	0x0002dec0
   1d3d8:	0002d27c 	.word	0x0002d27c

0001d3dc <isr_abort>:
{
   1d3dc:	b510      	push	{r4, lr}
   1d3de:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d3e0:	f7ff fc8c 	bl	1ccfc <lll_isr_status_reset>
	radio_filter_disable();
   1d3e4:	f001 fa38 	bl	1e858 <radio_filter_disable>
	lll_isr_cleanup(param);
   1d3e8:	4620      	mov	r0, r4
}
   1d3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d3ee:	f7ff bc93 	b.w	1cd18 <lll_isr_cleanup>
   1d3f2:	bf00      	nop

0001d3f4 <isr_done>:
{
   1d3f4:	b508      	push	{r3, lr}
	isr_common_done(param);
   1d3f6:	f7ff ffa1 	bl	1d33c <isr_common_done>
	radio_rx_enable();
   1d3fa:	f001 f8d1 	bl	1e5a0 <radio_rx_enable>
}
   1d3fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1d402:	f001 bb4d 	b.w	1eaa0 <radio_tmr_end_capture>
   1d406:	bf00      	nop

0001d408 <isr_tx>:
{
   1d408:	b570      	push	{r4, r5, r6, lr}
   1d40a:	b082      	sub	sp, #8
   1d40c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1d40e:	f7ff fc63 	bl	1ccd8 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   1d412:	f001 f9cf 	bl	1e7b4 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d416:	2001      	movs	r0, #1
   1d418:	f7fa f804 	bl	17424 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d41c:	4604      	mov	r4, r0
   1d41e:	2800      	cmp	r0, #0
   1d420:	d03f      	beq.n	1d4a2 <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   1d422:	f104 001c 	add.w	r0, r4, #28
   1d426:	f001 f8a1 	bl	1e56c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1d42a:	f001 f8df 	bl	1e5ec <radio_is_ready>
   1d42e:	b9e0      	cbnz	r0, 1d46a <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   1d430:	f7ff f89e 	bl	1c570 <ull_filter_lll_rl_enabled>
   1d434:	bb50      	cbnz	r0, 1d48c <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d436:	f001 fb41 	bl	1eabc <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1d43a:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d43c:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d43e:	4608      	mov	r0, r1
   1d440:	f001 f8a8 	bl	1e594 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d444:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d446:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d448:	4608      	mov	r0, r1
   1d44a:	f001 f8a1 	bl	1e590 <radio_tx_chain_delay_get>
   1d44e:	4434      	add	r4, r6
   1d450:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1d452:	1a20      	subs	r0, r4, r0
   1d454:	f001 fb04 	bl	1ea60 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1d458:	f001 f9bc 	bl	1e7d4 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1d45c:	4818      	ldr	r0, [pc, #96]	; (1d4c0 <isr_tx+0xb8>)
   1d45e:	4629      	mov	r1, r5
}
   1d460:	b002      	add	sp, #8
   1d462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1d466:	f000 bfad 	b.w	1e3c4 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   1d46a:	4a16      	ldr	r2, [pc, #88]	; (1d4c4 <isr_tx+0xbc>)
   1d46c:	4916      	ldr	r1, [pc, #88]	; (1d4c8 <isr_tx+0xc0>)
   1d46e:	4817      	ldr	r0, [pc, #92]	; (1d4cc <isr_tx+0xc4>)
   1d470:	f240 3306 	movw	r3, #774	; 0x306
   1d474:	f007 fbc2 	bl	24bfc <printk>
   1d478:	4040      	eors	r0, r0
   1d47a:	f380 8811 	msr	BASEPRI, r0
   1d47e:	f04f 0003 	mov.w	r0, #3
   1d482:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1d484:	f7ff f874 	bl	1c570 <ull_filter_lll_rl_enabled>
   1d488:	2800      	cmp	r0, #0
   1d48a:	d0d4      	beq.n	1d436 <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d48c:	f10d 0007 	add.w	r0, sp, #7
   1d490:	f7fe fee8 	bl	1c264 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1d494:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d496:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1d498:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d49c:	f001 fba6 	bl	1ebec <radio_ar_configure>
   1d4a0:	e7c9      	b.n	1d436 <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   1d4a2:	4a08      	ldr	r2, [pc, #32]	; (1d4c4 <isr_tx+0xbc>)
   1d4a4:	490a      	ldr	r1, [pc, #40]	; (1d4d0 <isr_tx+0xc8>)
   1d4a6:	4809      	ldr	r0, [pc, #36]	; (1d4cc <isr_tx+0xc4>)
   1d4a8:	f240 3302 	movw	r3, #770	; 0x302
   1d4ac:	f007 fba6 	bl	24bfc <printk>
   1d4b0:	4040      	eors	r0, r0
   1d4b2:	f380 8811 	msr	BASEPRI, r0
   1d4b6:	f04f 0003 	mov.w	r0, #3
   1d4ba:	df02      	svc	2
   1d4bc:	e7b1      	b.n	1d422 <isr_tx+0x1a>
   1d4be:	bf00      	nop
   1d4c0:	00004141 	.word	0x00004141
   1d4c4:	0002de74 	.word	0x0002de74
   1d4c8:	0002dec8 	.word	0x0002dec8
   1d4cc:	0002d27c 	.word	0x0002d27c
   1d4d0:	0002dec0 	.word	0x0002dec0

0001d4d4 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1d4d4:	68c3      	ldr	r3, [r0, #12]
{
   1d4d6:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1d4d8:	681e      	ldr	r6, [r3, #0]
{
   1d4da:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d4dc:	f7f7 fb40 	bl	14b60 <ticker_ticks_now_get>
   1d4e0:	4605      	mov	r5, r0
   1d4e2:	4630      	mov	r0, r6
   1d4e4:	f7ff fb96 	bl	1cc14 <lll_event_offset_get>
	p->remainder = 0;
   1d4e8:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d4ea:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1d4ec:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1d4f0:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	2101      	movs	r1, #1
}
   1d4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1d4fa:	f7ff bddd 	b.w	1d0b8 <common_prepare_cb>
   1d4fe:	bf00      	nop

0001d500 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d500:	b900      	cbnz	r0, 1d504 <ticker_op_start_cb+0x4>
   1d502:	4770      	bx	lr
{
   1d504:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d506:	4a07      	ldr	r2, [pc, #28]	; (1d524 <ticker_op_start_cb+0x24>)
   1d508:	4907      	ldr	r1, [pc, #28]	; (1d528 <ticker_op_start_cb+0x28>)
   1d50a:	4808      	ldr	r0, [pc, #32]	; (1d52c <ticker_op_start_cb+0x2c>)
   1d50c:	f44f 7324 	mov.w	r3, #656	; 0x290
   1d510:	f007 fb74 	bl	24bfc <printk>
   1d514:	4040      	eors	r0, r0
   1d516:	f380 8811 	msr	BASEPRI, r0
   1d51a:	f04f 0003 	mov.w	r0, #3
   1d51e:	df02      	svc	2
}
   1d520:	bd08      	pop	{r3, pc}
   1d522:	bf00      	nop
   1d524:	0002de74 	.word	0x0002de74
   1d528:	0002d848 	.word	0x0002d848
   1d52c:	0002d27c 	.word	0x0002d27c

0001d530 <is_abort_cb>:
	if (next != curr) {
   1d530:	4281      	cmp	r1, r0
{
   1d532:	b508      	push	{r3, lr}
	if (next != curr) {
   1d534:	d00d      	beq.n	1d552 <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   1d536:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1d538:	b113      	cbz	r3, 1d540 <is_abort_cb+0x10>
			return -ECANCELED;
   1d53a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1d53e:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   1d540:	4b14      	ldr	r3, [pc, #80]	; (1d594 <is_abort_cb+0x64>)
   1d542:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   1d544:	f7ff fd80 	bl	1d048 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   1d548:	2800      	cmp	r0, #0
   1d54a:	db12      	blt.n	1d572 <is_abort_cb+0x42>
   1d54c:	f06f 000a 	mvn.w	r0, #10
}
   1d550:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   1d552:	684b      	ldr	r3, [r1, #4]
   1d554:	b123      	cbz	r3, 1d560 <is_abort_cb+0x30>
   1d556:	684b      	ldr	r3, [r1, #4]
   1d558:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d55c:	07db      	lsls	r3, r3, #31
   1d55e:	d406      	bmi.n	1d56e <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   1d560:	480d      	ldr	r0, [pc, #52]	; (1d598 <is_abort_cb+0x68>)
   1d562:	f000 ff2f 	bl	1e3c4 <radio_isr_set>
	radio_disable();
   1d566:	f001 f821 	bl	1e5ac <radio_disable>
	return 0;
   1d56a:	2000      	movs	r0, #0
}
   1d56c:	bd08      	pop	{r3, pc}
		return 0;
   1d56e:	2000      	movs	r0, #0
}
   1d570:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   1d572:	4a0a      	ldr	r2, [pc, #40]	; (1d59c <is_abort_cb+0x6c>)
   1d574:	490a      	ldr	r1, [pc, #40]	; (1d5a0 <is_abort_cb+0x70>)
   1d576:	480b      	ldr	r0, [pc, #44]	; (1d5a4 <is_abort_cb+0x74>)
   1d578:	f240 2332 	movw	r3, #562	; 0x232
   1d57c:	f007 fb3e 	bl	24bfc <printk>
   1d580:	4040      	eors	r0, r0
   1d582:	f380 8811 	msr	BASEPRI, r0
   1d586:	f04f 0003 	mov.w	r0, #3
   1d58a:	df02      	svc	2
   1d58c:	f06f 000a 	mvn.w	r0, #10
}
   1d590:	bd08      	pop	{r3, pc}
   1d592:	bf00      	nop
   1d594:	0001d4d5 	.word	0x0001d4d5
   1d598:	000040a1 	.word	0x000040a1
   1d59c:	0002de74 	.word	0x0002de74
   1d5a0:	0002de14 	.word	0x0002de14
   1d5a4:	0002d27c 	.word	0x0002d27c

0001d5a8 <ticker_stop_cb>:
{
   1d5a8:	b508      	push	{r3, lr}
	mfy.param = param;
   1d5aa:	4b0c      	ldr	r3, [pc, #48]	; (1d5dc <ticker_stop_cb+0x34>)
{
   1d5ac:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   1d5ae:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1d5b0:	2200      	movs	r2, #0
   1d5b2:	4611      	mov	r1, r2
   1d5b4:	2001      	movs	r0, #1
   1d5b6:	f7f5 ffdd 	bl	13574 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1d5ba:	b900      	cbnz	r0, 1d5be <ticker_stop_cb+0x16>
}
   1d5bc:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1d5be:	4a08      	ldr	r2, [pc, #32]	; (1d5e0 <ticker_stop_cb+0x38>)
   1d5c0:	4908      	ldr	r1, [pc, #32]	; (1d5e4 <ticker_stop_cb+0x3c>)
   1d5c2:	4809      	ldr	r0, [pc, #36]	; (1d5e8 <ticker_stop_cb+0x40>)
   1d5c4:	f240 2389 	movw	r3, #649	; 0x289
   1d5c8:	f007 fb18 	bl	24bfc <printk>
   1d5cc:	4040      	eors	r0, r0
   1d5ce:	f380 8811 	msr	BASEPRI, r0
   1d5d2:	f04f 0003 	mov.w	r0, #3
   1d5d6:	df02      	svc	2
}
   1d5d8:	bd08      	pop	{r3, pc}
   1d5da:	bf00      	nop
   1d5dc:	20000748 	.word	0x20000748
   1d5e0:	0002de74 	.word	0x0002de74
   1d5e4:	0002d6d0 	.word	0x0002d6d0
   1d5e8:	0002d27c 	.word	0x0002d27c

0001d5ec <isr_done_cleanup>:
{
   1d5ec:	b530      	push	{r4, r5, lr}
   1d5ee:	4604      	mov	r4, r0
   1d5f0:	b085      	sub	sp, #20
	lll_isr_status_reset();
   1d5f2:	f7ff fb83 	bl	1ccfc <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   1d5f6:	f10d 010f 	add.w	r1, sp, #15
   1d5fa:	4620      	mov	r0, r4
   1d5fc:	f7ff faf8 	bl	1cbf0 <lll_is_done>
   1d600:	b9c8      	cbnz	r0, 1d636 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   1d602:	4605      	mov	r5, r0
   1d604:	f001 f928 	bl	1e858 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   1d608:	7da2      	ldrb	r2, [r4, #22]
   1d60a:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1d60e:	3301      	adds	r3, #1
   1d610:	f003 0303 	and.w	r3, r3, #3
   1d614:	2b03      	cmp	r3, #3
   1d616:	bf14      	ite	ne
   1d618:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1d61c:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1d620:	2300      	movs	r3, #0
		lll->chan = 0U;
   1d622:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1d624:	4619      	mov	r1, r3
   1d626:	9300      	str	r3, [sp, #0]
   1d628:	2201      	movs	r2, #1
   1d62a:	4618      	mov	r0, r3
   1d62c:	f7f7 f9f8 	bl	14a20 <ticker_stop>
	lll_isr_cleanup(param);
   1d630:	4620      	mov	r0, r4
   1d632:	f7ff fb71 	bl	1cd18 <lll_isr_cleanup>
}
   1d636:	b005      	add	sp, #20
   1d638:	bd30      	pop	{r4, r5, pc}
   1d63a:	bf00      	nop

0001d63c <isr_scan_tgta_check>:
{
   1d63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d640:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1d644:	4616      	mov	r6, r2
   1d646:	4680      	mov	r8, r0
   1d648:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1d64a:	464a      	mov	r2, r9
   1d64c:	4619      	mov	r1, r3
   1d64e:	4630      	mov	r0, r6
{
   1d650:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1d652:	f7fe ff6b 	bl	1c52c <ull_filter_lll_rl_addr_resolve>
   1d656:	4604      	mov	r4, r0
   1d658:	b9a0      	cbnz	r0, 1d684 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1d65a:	b11d      	cbz	r5, 1d664 <isr_scan_tgta_check+0x28>
   1d65c:	f898 3017 	ldrb.w	r3, [r8, #23]
   1d660:	079a      	lsls	r2, r3, #30
   1d662:	d41c      	bmi.n	1d69e <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   1d664:	f898 5016 	ldrb.w	r5, [r8, #22]
   1d668:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1d66c:	42b3      	cmp	r3, r6
   1d66e:	d00c      	beq.n	1d68a <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1d670:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   1d674:	07ab      	lsls	r3, r5, #30
   1d676:	d505      	bpl.n	1d684 <isr_scan_tgta_check+0x48>
   1d678:	b126      	cbz	r6, 1d684 <isr_scan_tgta_check+0x48>
   1d67a:	797b      	ldrb	r3, [r7, #5]
   1d67c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d680:	2b40      	cmp	r3, #64	; 0x40
   1d682:	d014      	beq.n	1d6ae <isr_scan_tgta_check+0x72>
}
   1d684:	4620      	mov	r0, r4
   1d686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1d68a:	2206      	movs	r2, #6
   1d68c:	4639      	mov	r1, r7
   1d68e:	f108 0019 	add.w	r0, r8, #25
   1d692:	f00a ff67 	bl	28564 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1d696:	b140      	cbz	r0, 1d6aa <isr_scan_tgta_check+0x6e>
   1d698:	f898 5016 	ldrb.w	r5, [r8, #22]
   1d69c:	e7e8      	b.n	1d670 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1d69e:	4648      	mov	r0, r9
   1d6a0:	f7fe fdc6 	bl	1c230 <ull_filter_lll_lrpa_get>
   1d6a4:	2800      	cmp	r0, #0
   1d6a6:	d1ed      	bne.n	1d684 <isr_scan_tgta_check+0x48>
   1d6a8:	e7dc      	b.n	1d664 <isr_scan_tgta_check+0x28>
			*dir_report = true;
   1d6aa:	2401      	movs	r4, #1
   1d6ac:	e7ea      	b.n	1d684 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   1d6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d6b0:	2b00      	cmp	r3, #0
   1d6b2:	d0fa      	beq.n	1d6aa <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   1d6b4:	2401      	movs	r4, #1
   1d6b6:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1d6b8:	e7e4      	b.n	1d684 <isr_scan_tgta_check+0x48>
   1d6ba:	bf00      	nop

0001d6bc <abort_cb>:
{
   1d6bc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1d6be:	b1d8      	cbz	r0, 1d6f8 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1d6c0:	460c      	mov	r4, r1
   1d6c2:	f7ff fcd9 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d6c6:	2800      	cmp	r0, #0
   1d6c8:	db04      	blt.n	1d6d4 <abort_cb+0x18>
	lll_done(param);
   1d6ca:	4620      	mov	r0, r4
}
   1d6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d6d0:	f7ff ba3c 	b.w	1cb4c <lll_done>
	LL_ASSERT(err >= 0);
   1d6d4:	4a0c      	ldr	r2, [pc, #48]	; (1d708 <abort_cb+0x4c>)
   1d6d6:	490d      	ldr	r1, [pc, #52]	; (1d70c <abort_cb+0x50>)
   1d6d8:	480d      	ldr	r0, [pc, #52]	; (1d710 <abort_cb+0x54>)
   1d6da:	f240 2379 	movw	r3, #633	; 0x279
   1d6de:	f007 fa8d 	bl	24bfc <printk>
   1d6e2:	4040      	eors	r0, r0
   1d6e4:	f380 8811 	msr	BASEPRI, r0
   1d6e8:	f04f 0003 	mov.w	r0, #3
   1d6ec:	df02      	svc	2
	lll_done(param);
   1d6ee:	4620      	mov	r0, r4
}
   1d6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d6f4:	f7ff ba2a 	b.w	1cb4c <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   1d6f8:	4806      	ldr	r0, [pc, #24]	; (1d714 <abort_cb+0x58>)
   1d6fa:	f000 fe63 	bl	1e3c4 <radio_isr_set>
}
   1d6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1d702:	f000 bf53 	b.w	1e5ac <radio_disable>
   1d706:	bf00      	nop
   1d708:	0002de74 	.word	0x0002de74
   1d70c:	0002de14 	.word	0x0002de14
   1d710:	0002d27c 	.word	0x0002d27c
   1d714:	0001d5ed 	.word	0x0001d5ed

0001d718 <lll_scan_init>:
}
   1d718:	2000      	movs	r0, #0
   1d71a:	4770      	bx	lr

0001d71c <lll_scan_reset>:
   1d71c:	2000      	movs	r0, #0
   1d71e:	4770      	bx	lr

0001d720 <lll_scan_prepare>:
{
   1d720:	b510      	push	{r4, lr}
   1d722:	b082      	sub	sp, #8
   1d724:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1d726:	f7ff fc8f 	bl	1d048 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1d72a:	2800      	cmp	r0, #0
   1d72c:	db19      	blt.n	1d762 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1d72e:	4a13      	ldr	r2, [pc, #76]	; (1d77c <lll_scan_prepare+0x5c>)
   1d730:	4913      	ldr	r1, [pc, #76]	; (1d780 <lll_scan_prepare+0x60>)
   1d732:	4814      	ldr	r0, [pc, #80]	; (1d784 <lll_scan_prepare+0x64>)
   1d734:	9400      	str	r4, [sp, #0]
   1d736:	2300      	movs	r3, #0
   1d738:	f7fa f972 	bl	17a20 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d73c:	b108      	cbz	r0, 1d742 <lll_scan_prepare+0x22>
   1d73e:	3077      	adds	r0, #119	; 0x77
   1d740:	d101      	bne.n	1d746 <lll_scan_prepare+0x26>
}
   1d742:	b002      	add	sp, #8
   1d744:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d746:	4a10      	ldr	r2, [pc, #64]	; (1d788 <lll_scan_prepare+0x68>)
   1d748:	4910      	ldr	r1, [pc, #64]	; (1d78c <lll_scan_prepare+0x6c>)
   1d74a:	4811      	ldr	r0, [pc, #68]	; (1d790 <lll_scan_prepare+0x70>)
   1d74c:	238b      	movs	r3, #139	; 0x8b
   1d74e:	f007 fa55 	bl	24bfc <printk>
   1d752:	4040      	eors	r0, r0
   1d754:	f380 8811 	msr	BASEPRI, r0
   1d758:	f04f 0003 	mov.w	r0, #3
   1d75c:	df02      	svc	2
}
   1d75e:	b002      	add	sp, #8
   1d760:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1d762:	4a09      	ldr	r2, [pc, #36]	; (1d788 <lll_scan_prepare+0x68>)
   1d764:	490b      	ldr	r1, [pc, #44]	; (1d794 <lll_scan_prepare+0x74>)
   1d766:	480a      	ldr	r0, [pc, #40]	; (1d790 <lll_scan_prepare+0x70>)
   1d768:	2388      	movs	r3, #136	; 0x88
   1d76a:	f007 fa47 	bl	24bfc <printk>
   1d76e:	4040      	eors	r0, r0
   1d770:	f380 8811 	msr	BASEPRI, r0
   1d774:	f04f 0003 	mov.w	r0, #3
   1d778:	df02      	svc	2
   1d77a:	e7d8      	b.n	1d72e <lll_scan_prepare+0xe>
   1d77c:	0001d335 	.word	0x0001d335
   1d780:	0001d6bd 	.word	0x0001d6bd
   1d784:	0001d531 	.word	0x0001d531
   1d788:	0002de74 	.word	0x0002de74
   1d78c:	0002dedc 	.word	0x0002dedc
   1d790:	0002d27c 	.word	0x0002d27c
   1d794:	0002de14 	.word	0x0002de14

0001d798 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1d798:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   1d79c:	f01c 0f08 	tst.w	ip, #8
   1d7a0:	d002      	beq.n	1d7a8 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1d7a2:	b162      	cbz	r2, 1d7be <lll_scan_isr_rx_check+0x26>
{
   1d7a4:	2001      	movs	r0, #1
}
   1d7a6:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1d7a8:	2a00      	cmp	r2, #0
   1d7aa:	d0fb      	beq.n	1d7a4 <lll_scan_isr_rx_check+0xc>
{
   1d7ac:	b510      	push	{r4, lr}
   1d7ae:	4604      	mov	r4, r0
   1d7b0:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1d7b2:	4619      	mov	r1, r3
   1d7b4:	f7fe fe4c 	bl	1c450 <ull_filter_lll_rl_idx_allowed>
   1d7b8:	b120      	cbz	r0, 1d7c4 <lll_scan_isr_rx_check+0x2c>
{
   1d7ba:	2001      	movs	r0, #1
}
   1d7bc:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1d7be:	4618      	mov	r0, r3
   1d7c0:	f7fe be16 	b.w	1c3f0 <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1d7c4:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   1d7c6:	071b      	lsls	r3, r3, #28
   1d7c8:	d4f7      	bmi.n	1d7ba <lll_scan_isr_rx_check+0x22>
}
   1d7ca:	bd10      	pop	{r4, pc}

0001d7cc <lll_scan_prepare_connect_req>:
{
   1d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7d0:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   1d7d4:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1d7d6:	01ad      	lsls	r5, r5, #6
   1d7d8:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1d7dc:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   1d7e0:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   1d7e4:	780b      	ldrb	r3, [r1, #0]
   1d7e6:	f003 0310 	and.w	r3, r3, #16
{
   1d7ea:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1d7ec:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1d7ee:	2322      	movs	r3, #34	; 0x22
   1d7f0:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1d7f2:	700d      	strb	r5, [r1, #0]
{
   1d7f4:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1d7f6:	9908      	ldr	r1, [sp, #32]
   1d7f8:	2206      	movs	r2, #6
{
   1d7fa:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1d7fc:	1ca0      	adds	r0, r4, #2
   1d7fe:	f00a feda 	bl	285b6 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   1d802:	9906      	ldr	r1, [sp, #24]
   1d804:	2206      	movs	r2, #6
   1d806:	f104 0008 	add.w	r0, r4, #8
   1d80a:	f00a fed4 	bl	285b6 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   1d80e:	2204      	movs	r2, #4
   1d810:	18b1      	adds	r1, r6, r2
   1d812:	f104 000e 	add.w	r0, r4, #14
   1d816:	f00a fece 	bl	285b6 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   1d81a:	2203      	movs	r2, #3
   1d81c:	f106 0108 	add.w	r1, r6, #8
   1d820:	f104 0012 	add.w	r0, r4, #18
   1d824:	f00a fec7 	bl	285b6 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   1d828:	2301      	movs	r3, #1
   1d82a:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1d82c:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   1d82e:	f001 f93f 	bl	1eab0 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   1d832:	f1b8 0f00 	cmp.w	r8, #0
   1d836:	d044      	beq.n	1d8c2 <lll_scan_prepare_connect_req+0xf6>
   1d838:	f008 0203 	and.w	r2, r8, #3
   1d83c:	322b      	adds	r2, #43	; 0x2b
   1d83e:	00d2      	lsls	r2, r2, #3
   1d840:	f3c8 0840 	ubfx	r8, r8, #1, #1
   1d844:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   1d848:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   1d84a:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1d84e:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   1d850:	b393      	cbz	r3, 1d8b8 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1d852:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1d856:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   1d85a:	2b00      	cmp	r3, #0
   1d85c:	db01      	blt.n	1d862 <lll_scan_prepare_connect_req+0x96>
   1d85e:	4293      	cmp	r3, r2
   1d860:	d201      	bcs.n	1d866 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   1d862:	442b      	add	r3, r5
   1d864:	e7f9      	b.n	1d85a <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   1d866:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1d868:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   1d86a:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1d86c:	4b16      	ldr	r3, [pc, #88]	; (1d8c8 <lll_scan_prepare_connect_req+0xfc>)
   1d86e:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   1d872:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1d874:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   1d876:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   1d878:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   1d87a:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1d87c:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1d87e:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1d880:	8abb      	ldrh	r3, [r7, #20]
   1d882:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1d884:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1d886:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   1d888:	f106 0118 	add.w	r1, r6, #24
   1d88c:	2205      	movs	r2, #5
   1d88e:	f104 001e 	add.w	r0, r4, #30
   1d892:	f00a fe90 	bl	285b6 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   1d896:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d89a:	7fb2      	ldrb	r2, [r6, #30]
   1d89c:	f362 0304 	bfi	r3, r2, #0, #5
   1d8a0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   1d8a4:	f7ff fc06 	bl	1d0b4 <lll_clock_sca_local_get>
   1d8a8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d8ac:	f360 1347 	bfi	r3, r0, #5, #3
   1d8b0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   1d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   1d8b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d8ba:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   1d8bc:	75a3      	strb	r3, [r4, #22]
   1d8be:	75e3      	strb	r3, [r4, #23]
   1d8c0:	e7dc      	b.n	1d87c <lll_scan_prepare_connect_req+0xb0>
   1d8c2:	f44f 78b0 	mov.w	r8, #352	; 0x160
   1d8c6:	e7bf      	b.n	1d848 <lll_scan_prepare_connect_req+0x7c>
   1d8c8:	d1b71759 	.word	0xd1b71759

0001d8cc <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1d8cc:	b538      	push	{r3, r4, r5, lr}
   1d8ce:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1d8d0:	f7ff fa14 	bl	1ccfc <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1d8d4:	f7f9 fea4 	bl	17620 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1d8d8:	4604      	mov	r4, r0
   1d8da:	b190      	cbz	r0, 1d902 <isr_done+0x36>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1d8dc:	4910      	ldr	r1, [pc, #64]	; (1d920 <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   1d8de:	4a11      	ldr	r2, [pc, #68]	; (1d924 <isr_done+0x58>)
	e->crc_valid = crc_valid;
   1d8e0:	7923      	ldrb	r3, [r4, #4]
   1d8e2:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   1d8e4:	8812      	ldrh	r2, [r2, #0]
   1d8e6:	8062      	strh	r2, [r4, #2]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1d8e8:	4a0f      	ldr	r2, [pc, #60]	; (1d928 <isr_done+0x5c>)
	e->crc_valid = crc_valid;
   1d8ea:	f360 0300 	bfi	r3, r0, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1d8ee:	2101      	movs	r1, #1
	e->crc_valid = crc_valid;
   1d8f0:	7123      	strb	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1d8f2:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   1d8f4:	7813      	ldrb	r3, [r2, #0]
   1d8f6:	7163      	strb	r3, [r4, #5]
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1d8f8:	4628      	mov	r0, r5
}
   1d8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1d8fe:	f7ff ba0b 	b.w	1cd18 <lll_isr_cleanup>
	LL_ASSERT(e);
   1d902:	4a0a      	ldr	r2, [pc, #40]	; (1d92c <isr_done+0x60>)
   1d904:	490a      	ldr	r1, [pc, #40]	; (1d930 <isr_done+0x64>)
   1d906:	480b      	ldr	r0, [pc, #44]	; (1d934 <isr_done+0x68>)
   1d908:	f240 3317 	movw	r3, #791	; 0x317
   1d90c:	f007 f976 	bl	24bfc <printk>
   1d910:	4040      	eors	r0, r0
   1d912:	f380 8811 	msr	BASEPRI, r0
   1d916:	f04f 0003 	mov.w	r0, #3
   1d91a:	df02      	svc	2
   1d91c:	e7de      	b.n	1d8dc <isr_done+0x10>
   1d91e:	bf00      	nop
   1d920:	200049a4 	.word	0x200049a4
   1d924:	2000481a 	.word	0x2000481a
   1d928:	200049a5 	.word	0x200049a5
   1d92c:	0002df04 	.word	0x0002df04
   1d930:	0002df50 	.word	0x0002df50
   1d934:	0002d27c 	.word	0x0002d27c

0001d938 <lll_conn_init>:
{
   1d938:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1d93a:	f000 fe8b 	bl	1e654 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d93e:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1d940:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d942:	2101      	movs	r1, #1
   1d944:	f361 0201 	bfi	r2, r1, #0, #2
}
   1d948:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d94a:	701a      	strb	r2, [r3, #0]
}
   1d94c:	bd08      	pop	{r3, pc}
   1d94e:	bf00      	nop

0001d950 <lll_conn_reset>:
}
   1d950:	2000      	movs	r0, #0
   1d952:	4770      	bx	lr

0001d954 <lll_conn_flush>:
}
   1d954:	4770      	bx	lr
   1d956:	bf00      	nop

0001d958 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1d958:	4805      	ldr	r0, [pc, #20]	; (1d970 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1d95a:	4906      	ldr	r1, [pc, #24]	; (1d974 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1d95c:	4a06      	ldr	r2, [pc, #24]	; (1d978 <lll_conn_prepare_reset+0x20>)
{
   1d95e:	b410      	push	{r4}
	trx_cnt = 0U;
   1d960:	2300      	movs	r3, #0
   1d962:	4c06      	ldr	r4, [pc, #24]	; (1d97c <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1d964:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1d966:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1d968:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1d96a:	8023      	strh	r3, [r4, #0]
}
   1d96c:	bc10      	pop	{r4}
   1d96e:	4770      	bx	lr
   1d970:	200049a4 	.word	0x200049a4
   1d974:	200049a3 	.word	0x200049a3
   1d978:	200049a5 	.word	0x200049a5
   1d97c:	2000481a 	.word	0x2000481a

0001d980 <lll_conn_abort_cb>:
{
   1d980:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1d982:	b1e8      	cbz	r0, 1d9c0 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   1d984:	460d      	mov	r5, r1
   1d986:	4604      	mov	r4, r0
   1d988:	f7ff fb76 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d98c:	2800      	cmp	r0, #0
   1d98e:	db0a      	blt.n	1d9a6 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1d990:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1d992:	8923      	ldrh	r3, [r4, #8]
   1d994:	8a51      	ldrh	r1, [r2, #18]
   1d996:	3301      	adds	r3, #1
   1d998:	440b      	add	r3, r1
   1d99a:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1d99c:	4628      	mov	r0, r5
}
   1d99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1d9a2:	f7ff b8d3 	b.w	1cb4c <lll_done>
	LL_ASSERT(err >= 0);
   1d9a6:	4a0a      	ldr	r2, [pc, #40]	; (1d9d0 <lll_conn_abort_cb+0x50>)
   1d9a8:	490a      	ldr	r1, [pc, #40]	; (1d9d4 <lll_conn_abort_cb+0x54>)
   1d9aa:	480b      	ldr	r0, [pc, #44]	; (1d9d8 <lll_conn_abort_cb+0x58>)
   1d9ac:	23aa      	movs	r3, #170	; 0xaa
   1d9ae:	f007 f925 	bl	24bfc <printk>
   1d9b2:	4040      	eors	r0, r0
   1d9b4:	f380 8811 	msr	BASEPRI, r0
   1d9b8:	f04f 0003 	mov.w	r0, #3
   1d9bc:	df02      	svc	2
   1d9be:	e7e7      	b.n	1d990 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1d9c0:	4806      	ldr	r0, [pc, #24]	; (1d9dc <lll_conn_abort_cb+0x5c>)
   1d9c2:	f000 fcff 	bl	1e3c4 <radio_isr_set>
}
   1d9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1d9ca:	f000 bdef 	b.w	1e5ac <radio_disable>
   1d9ce:	bf00      	nop
   1d9d0:	0002df04 	.word	0x0002df04
   1d9d4:	0002de14 	.word	0x0002de14
   1d9d8:	0002d27c 	.word	0x0002d27c
   1d9dc:	0001d8cd 	.word	0x0001d8cd

0001d9e0 <lll_conn_rx_pkt_set>:
{
   1d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d9e2:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d9e4:	2001      	movs	r0, #1
   1d9e6:	f7f9 fd1d 	bl	17424 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d9ea:	4604      	mov	r4, r0
   1d9ec:	b348      	cbz	r0, 1da42 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1d9ee:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
	max_rx_octets = lll->max_rx_octets;
   1d9f2:	8caf      	ldrh	r7, [r5, #36]	; 0x24
	phy = lll->phy_rx;
   1d9f4:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1d9f8:	2100      	movs	r1, #0
   1d9fa:	4630      	mov	r0, r6
   1d9fc:	f000 fd48 	bl	1e490 <radio_phy_set>
	} else if (lll->enc_rx) {
   1da00:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1da04:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   1da06:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1da08:	b2f9      	uxtb	r1, r7
   1da0a:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   1da0e:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   1da12:	d50e      	bpl.n	1da32 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1da14:	3104      	adds	r1, #4
   1da16:	b2c9      	uxtb	r1, r1
   1da18:	2008      	movs	r0, #8
   1da1a:	f000 fd7f 	bl	1e51c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1da1e:	4622      	mov	r2, r4
   1da20:	4631      	mov	r1, r6
   1da22:	f105 0043 	add.w	r0, r5, #67	; 0x43
   1da26:	f001 f84f 	bl	1eac8 <radio_ccm_rx_pkt_set>
}
   1da2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1da2e:	f000 bd9d 	b.w	1e56c <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   1da32:	2008      	movs	r0, #8
   1da34:	f000 fd72 	bl	1e51c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1da38:	4620      	mov	r0, r4
}
   1da3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1da3e:	f000 bd95 	b.w	1e56c <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1da42:	4a07      	ldr	r2, [pc, #28]	; (1da60 <lll_conn_rx_pkt_set+0x80>)
   1da44:	4907      	ldr	r1, [pc, #28]	; (1da64 <lll_conn_rx_pkt_set+0x84>)
   1da46:	4808      	ldr	r0, [pc, #32]	; (1da68 <lll_conn_rx_pkt_set+0x88>)
   1da48:	f240 235a 	movw	r3, #602	; 0x25a
   1da4c:	f007 f8d6 	bl	24bfc <printk>
   1da50:	4040      	eors	r0, r0
   1da52:	f380 8811 	msr	BASEPRI, r0
   1da56:	f04f 0003 	mov.w	r0, #3
   1da5a:	df02      	svc	2
   1da5c:	e7c7      	b.n	1d9ee <lll_conn_rx_pkt_set+0xe>
   1da5e:	bf00      	nop
   1da60:	0002df04 	.word	0x0002df04
   1da64:	0002dec0 	.word	0x0002dec0
   1da68:	0002d27c 	.word	0x0002d27c

0001da6c <lll_conn_isr_tx>:
{
   1da6c:	b538      	push	{r3, r4, r5, lr}
   1da6e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1da70:	f7ff f932 	bl	1ccd8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1da74:	2096      	movs	r0, #150	; 0x96
   1da76:	f000 ff21 	bl	1e8bc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1da7a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   1da7e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1da82:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1da86:	f000 0007 	and.w	r0, r0, #7
   1da8a:	f002 0207 	and.w	r2, r2, #7
   1da8e:	2100      	movs	r1, #0
   1da90:	f000 fe30 	bl	1e6f4 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1da94:	4620      	mov	r0, r4
   1da96:	f7ff ffa3 	bl	1d9e0 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1da9a:	f000 fda7 	bl	1e5ec <radio_is_ready>
   1da9e:	bb58      	cbnz	r0, 1daf8 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1daa0:	f001 f80c 	bl	1eabc <radio_tmr_tifs_base_get>
   1daa4:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1daa6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1daaa:	2101      	movs	r1, #1
   1daac:	f000 0007 	and.w	r0, r0, #7
   1dab0:	f000 fd70 	bl	1e594 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1dab4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1dab8:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1dabc:	4405      	add	r5, r0
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1dabe:	2b02      	cmp	r3, #2
   1dac0:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1dac4:	d016      	beq.n	1daf4 <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1dac6:	2b04      	cmp	r3, #4
   1dac8:	bf14      	ite	ne
   1daca:	2328      	movne	r3, #40	; 0x28
   1dacc:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1dad0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   1dad4:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1dad8:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1dadc:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1dade:	f000 fd57 	bl	1e590 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1dae2:	1a28      	subs	r0, r5, r0
   1dae4:	f000 ffbc 	bl	1ea60 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1dae8:	4621      	mov	r1, r4
   1daea:	480a      	ldr	r0, [pc, #40]	; (1db14 <lll_conn_isr_tx+0xa8>)
}
   1daec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1daf0:	f000 bc68 	b.w	1e3c4 <radio_isr_set>
	switch (phy) {
   1daf4:	2318      	movs	r3, #24
   1daf6:	e7eb      	b.n	1dad0 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1daf8:	4a07      	ldr	r2, [pc, #28]	; (1db18 <lll_conn_isr_tx+0xac>)
   1dafa:	4908      	ldr	r1, [pc, #32]	; (1db1c <lll_conn_isr_tx+0xb0>)
   1dafc:	4808      	ldr	r0, [pc, #32]	; (1db20 <lll_conn_isr_tx+0xb4>)
   1dafe:	f240 2313 	movw	r3, #531	; 0x213
   1db02:	f007 f87b 	bl	24bfc <printk>
   1db06:	4040      	eors	r0, r0
   1db08:	f380 8811 	msr	BASEPRI, r0
   1db0c:	f04f 0003 	mov.w	r0, #3
   1db10:	df02      	svc	2
   1db12:	e7c5      	b.n	1daa0 <lll_conn_isr_tx+0x34>
   1db14:	0001dc5d 	.word	0x0001dc5d
   1db18:	0002df04 	.word	0x0002df04
   1db1c:	0002dec8 	.word	0x0002dec8
   1db20:	0002d27c 	.word	0x0002d27c

0001db24 <lll_conn_tx_pkt_set>:
{
   1db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db26:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1db28:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
	max_tx_octets = lll->max_tx_octets;
   1db2c:	8c46      	ldrh	r6, [r0, #34]	; 0x22
	phy = lll->phy_tx;
   1db2e:	f001 0407 	and.w	r4, r1, #7
{
   1db32:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1db34:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1db38:	4620      	mov	r0, r4
   1db3a:	f000 fca9 	bl	1e490 <radio_phy_set>
	} else if (lll->enc_tx) {
   1db3e:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1db42:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1db44:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1db46:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1db4a:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   1db4c:	d50d      	bpl.n	1db6a <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1db4e:	3104      	adds	r1, #4
   1db50:	b2c9      	uxtb	r1, r1
   1db52:	2008      	movs	r0, #8
   1db54:	f000 fce2 	bl	1e51c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1db58:	4639      	mov	r1, r7
   1db5a:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1db5e:	f000 fff1 	bl	1eb44 <radio_ccm_tx_pkt_set>
}
   1db62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1db66:	f000 bd07 	b.w	1e578 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1db6a:	2008      	movs	r0, #8
   1db6c:	f000 fcd6 	bl	1e51c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1db70:	4638      	mov	r0, r7
}
   1db72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1db76:	f000 bcff 	b.w	1e578 <radio_pkt_tx_set>
   1db7a:	bf00      	nop

0001db7c <lll_conn_pdu_tx_prep>:
{
   1db7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db80:	4604      	mov	r4, r0
   1db82:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1db84:	aa01      	add	r2, sp, #4
   1db86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1db88:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1db8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1db8c:	f7f5 fc88 	bl	134a0 <memq_peek>
	if (lll->empty || !link) {
   1db90:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1db94:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1db96:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1db98:	d432      	bmi.n	1dc00 <lll_conn_pdu_tx_prep+0x84>
   1db9a:	2800      	cmp	r0, #0
   1db9c:	d04e      	beq.n	1dc3c <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1db9e:	9b01      	ldr	r3, [sp, #4]
   1dba0:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
   1dba4:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1dba8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1dbac:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1dbb0:	b913      	cbnz	r3, 1dbb8 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1dbb2:	786b      	ldrb	r3, [r5, #1]
   1dbb4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if (lll->packet_tx_head_offset) {
   1dbb8:	b137      	cbz	r7, 1dbc8 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1dbba:	f818 2007 	ldrb.w	r2, [r8, r7]
   1dbbe:	2101      	movs	r1, #1
   1dbc0:	f361 0201 	bfi	r2, r1, #0, #2
   1dbc4:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1dbc8:	1bdb      	subs	r3, r3, r7
   1dbca:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1dbcc:	4620      	mov	r0, r4
   1dbce:	f7fd f823 	bl	1ac18 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1dbd2:	786b      	ldrb	r3, [r5, #1]
   1dbd4:	4283      	cmp	r3, r0
   1dbd6:	d924      	bls.n	1dc22 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1dbd8:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1dbda:	f818 3007 	ldrb.w	r3, [r8, r7]
   1dbde:	f043 0310 	orr.w	r3, r3, #16
   1dbe2:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1dbe6:	f818 3007 	ldrb.w	r3, [r8, r7]
   1dbea:	f36f 1347 	bfc	r3, #5, #3
   1dbee:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1dbf2:	2300      	movs	r3, #0
   1dbf4:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1dbf6:	f8c9 5000 	str.w	r5, [r9]
}
   1dbfa:	b003      	add	sp, #12
   1dbfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1dc00:	f043 0304 	orr.w	r3, r3, #4
   1dc04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1dc08:	f000 fd24 	bl	1e654 <radio_pkt_empty_get>
   1dc0c:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1dc0e:	b1e6      	cbz	r6, 1dc4a <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1dc10:	7803      	ldrb	r3, [r0, #0]
   1dc12:	f043 0310 	orr.w	r3, r3, #16
   1dc16:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1dc18:	f8c9 5000 	str.w	r5, [r9]
}
   1dc1c:	b003      	add	sp, #12
   1dc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1dc22:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dc24:	6832      	ldr	r2, [r6, #0]
   1dc26:	429a      	cmp	r2, r3
			p->md = 1U;
   1dc28:	f818 3007 	ldrb.w	r3, [r8, r7]
   1dc2c:	bf14      	ite	ne
   1dc2e:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1dc32:	f36f 1304 	bfceq	r3, #4, #1
   1dc36:	f808 3007 	strb.w	r3, [r8, r7]
   1dc3a:	e7d4      	b.n	1dbe6 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1dc3c:	f043 0304 	orr.w	r3, r3, #4
   1dc40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1dc44:	f000 fd06 	bl	1e654 <radio_pkt_empty_get>
   1dc48:	4605      	mov	r5, r0
			p->md = 0U;
   1dc4a:	782b      	ldrb	r3, [r5, #0]
   1dc4c:	f36f 1304 	bfc	r3, #4, #1
   1dc50:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1dc52:	f8c9 5000 	str.w	r5, [r9]
}
   1dc56:	b003      	add	sp, #12
   1dc58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001dc5c <lll_conn_isr_rx>:
{
   1dc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dc60:	b083      	sub	sp, #12
   1dc62:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1dc64:	f000 fccc 	bl	1e600 <radio_is_done>
	if (trx_done) {
   1dc68:	b2c0      	uxtb	r0, r0
   1dc6a:	b950      	cbnz	r0, 1dc82 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   1dc6c:	f7ff f83c 	bl	1cce8 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1dc70:	48b6      	ldr	r0, [pc, #728]	; (1df4c <lll_conn_isr_rx+0x2f0>)
   1dc72:	4621      	mov	r1, r4
   1dc74:	f000 fba6 	bl	1e3c4 <radio_isr_set>
}
   1dc78:	b003      	add	sp, #12
   1dc7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   1dc7e:	f000 bc95 	b.w	1e5ac <radio_disable>
		crc_ok = radio_crc_is_valid();
   1dc82:	f000 fcdd 	bl	1e640 <radio_crc_is_valid>
   1dc86:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1dc88:	f000 fdbc 	bl	1e804 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1dc8c:	f7ff f82c 	bl	1cce8 <lll_isr_rx_status_reset>
	trx_cnt++;
   1dc90:	4aaf      	ldr	r2, [pc, #700]	; (1df50 <lll_conn_isr_rx+0x2f4>)
   1dc92:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dc94:	2001      	movs	r0, #1
	trx_cnt++;
   1dc96:	4403      	add	r3, r0
   1dc98:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dc9a:	f7f9 fbc3 	bl	17424 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dc9e:	4606      	mov	r6, r0
   1dca0:	2800      	cmp	r0, #0
   1dca2:	f000 80ce 	beq.w	1de42 <lll_conn_isr_rx+0x1e6>
	if (crc_ok) {
   1dca6:	2d00      	cmp	r5, #0
   1dca8:	d148      	bne.n	1dd3c <lll_conn_isr_rx+0xe0>
		if (crc_expire == 0U) {
   1dcaa:	4baa      	ldr	r3, [pc, #680]	; (1df54 <lll_conn_isr_rx+0x2f8>)
   1dcac:	781f      	ldrb	r7, [r3, #0]
   1dcae:	2f00      	cmp	r7, #0
   1dcb0:	f000 80b1 	beq.w	1de16 <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   1dcb4:	3f01      	subs	r7, #1
   1dcb6:	b2ff      	uxtb	r7, r7
   1dcb8:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1dcba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1dcbe:	a901      	add	r1, sp, #4
   1dcc0:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1dcc2:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1dcc6:	f7ff ff59 	bl	1db7c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1dcca:	2f00      	cmp	r7, #0
   1dccc:	f040 813c 	bne.w	1df48 <lll_conn_isr_rx+0x2ec>
		radio_isr_set(isr_done, param);
   1dcd0:	489e      	ldr	r0, [pc, #632]	; (1df4c <lll_conn_isr_rx+0x2f0>)
   1dcd2:	4621      	mov	r1, r4
   1dcd4:	f000 fb76 	bl	1e3c4 <radio_isr_set>
		} else if (!lll->role) {
   1dcd8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1dcdc:	2b00      	cmp	r3, #0
   1dcde:	f280 8104 	bge.w	1deea <lll_conn_isr_rx+0x28e>
	pdu_data_tx->sn = lll->sn;
   1dce2:	9901      	ldr	r1, [sp, #4]
   1dce4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
	pdu_data_tx->nesn = lll->nesn;
   1dce8:	780b      	ldrb	r3, [r1, #0]
   1dcea:	f023 000c 	bic.w	r0, r3, #12
   1dcee:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1dcf2:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1dcf4:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1dcf8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1dcfc:	4303      	orrs	r3, r0
   1dcfe:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1dd00:	4620      	mov	r0, r4
   1dd02:	f7ff ff0f 	bl	1db24 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1dd06:	f000 fc71 	bl	1e5ec <radio_is_ready>
   1dd0a:	2800      	cmp	r0, #0
   1dd0c:	f040 80d0 	bne.w	1deb0 <lll_conn_isr_rx+0x254>
	if (!radio_tmr_aa_restore()) {
   1dd10:	f000 fec0 	bl	1ea94 <radio_tmr_aa_restore>
   1dd14:	2800      	cmp	r0, #0
   1dd16:	d06b      	beq.n	1ddf0 <lll_conn_isr_rx+0x194>
	if (tx_release) {
   1dd18:	2d00      	cmp	r5, #0
   1dd1a:	d06f      	beq.n	1ddfc <lll_conn_isr_rx+0x1a0>
		LL_ASSERT(lll->handle != 0xFFFF);
   1dd1c:	89a0      	ldrh	r0, [r4, #12]
   1dd1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dd22:	4298      	cmp	r0, r3
   1dd24:	f000 80d2 	beq.w	1decc <lll_conn_isr_rx+0x270>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1dd28:	4629      	mov	r1, r5
   1dd2a:	f7fc fd85 	bl	1a838 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1dd2e:	2f00      	cmp	r7, #0
   1dd30:	d166      	bne.n	1de00 <lll_conn_isr_rx+0x1a4>
		ull_rx_sched();
   1dd32:	f7f9 fbbb 	bl	174ac <ull_rx_sched>
}
   1dd36:	b003      	add	sp, #12
   1dd38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (pdu_data_rx->nesn != lll->sn) {
   1dd3c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1dd40:	7f32      	ldrb	r2, [r6, #28]
   1dd42:	f003 0101 	and.w	r1, r3, #1
   1dd46:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1dd4a:	4288      	cmp	r0, r1
   1dd4c:	f000 8089 	beq.w	1de62 <lll_conn_isr_rx+0x206>
		lll->sn++;
   1dd50:	f081 0101 	eor.w	r1, r1, #1
   1dd54:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1dd58:	f013 0804 	ands.w	r8, r3, #4
		lll->sn++;
   1dd5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (!lll->empty) {
   1dd60:	b2da      	uxtb	r2, r3
   1dd62:	f040 80cf 	bne.w	1df04 <lll_conn_isr_rx+0x2a8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1dd66:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
   1dd6a:	aa01      	add	r2, sp, #4
   1dd6c:	f7f5 fb98 	bl	134a0 <memq_peek>
		if (link) {
   1dd70:	4605      	mov	r5, r0
   1dd72:	2800      	cmp	r0, #0
   1dd74:	f000 80dd 	beq.w	1df32 <lll_conn_isr_rx+0x2d6>
			pdu_data_tx = (void *)(tx->pdu +
   1dd78:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   1dd7a:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
			pdu_data_tx = (void *)(tx->pdu +
   1dd7e:	3704      	adds	r7, #4
   1dd80:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   1dd84:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1dd86:	b152      	cbz	r2, 1dd9e <lll_conn_isr_rx+0x142>
				if (lll->enc_tx) {
   1dd88:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1dd8c:	06d9      	lsls	r1, r3, #27
   1dd8e:	d506      	bpl.n	1dd9e <lll_conn_isr_rx+0x142>
					lll->ccm_tx.counter++;
   1dd90:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1dd92:	3301      	adds	r3, #1
   1dd94:	6763      	str	r3, [r4, #116]	; 0x74
   1dd96:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   1dd98:	f143 0300 	adc.w	r3, r3, #0
   1dd9c:	67a3      	str	r3, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   1dd9e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1dda2:	444a      	add	r2, r9
   1dda4:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1dda6:	429a      	cmp	r2, r3
   1dda8:	f0c0 80ca 	bcc.w	1df40 <lll_conn_isr_rx+0x2e4>
			} else if (offset == lll->packet_tx_head_len) {
   1ddac:	f000 810b 	beq.w	1dfc6 <lll_conn_isr_rx+0x36a>
				LL_ASSERT(0);
   1ddb0:	4a69      	ldr	r2, [pc, #420]	; (1df58 <lll_conn_isr_rx+0x2fc>)
   1ddb2:	496a      	ldr	r1, [pc, #424]	; (1df5c <lll_conn_isr_rx+0x300>)
   1ddb4:	486a      	ldr	r0, [pc, #424]	; (1df60 <lll_conn_isr_rx+0x304>)
   1ddb6:	f240 33a3 	movw	r3, #931	; 0x3a3
   1ddba:	f006 ff1f 	bl	24bfc <printk>
   1ddbe:	4040      	eors	r0, r0
   1ddc0:	f380 8811 	msr	BASEPRI, r0
   1ddc4:	f04f 0003 	mov.w	r0, #3
   1ddc8:	df02      	svc	2
	tx_release = NULL;
   1ddca:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1ddcc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1ddd0:	2b00      	cmp	r3, #0
   1ddd2:	f2c0 80f4 	blt.w	1dfbe <lll_conn_isr_rx+0x362>
			    !pdu_data_rx->md) {
   1ddd6:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1ddd8:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1ddda:	bf58      	it	pl
   1dddc:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   1dde0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1dde4:	bf5c      	itt	pl
   1dde6:	f088 0810 	eorpl.w	r8, r8, #16
   1ddea:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   1ddee:	e03b      	b.n	1de68 <lll_conn_isr_rx+0x20c>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1ddf0:	f000 fe44 	bl	1ea7c <radio_tmr_aa_get>
   1ddf4:	f000 fe48 	bl	1ea88 <radio_tmr_aa_save>
	if (tx_release) {
   1ddf8:	2d00      	cmp	r5, #0
   1ddfa:	d18f      	bne.n	1dd1c <lll_conn_isr_rx+0xc0>
	if (is_rx_enqueue) {
   1ddfc:	2f00      	cmp	r7, #0
   1ddfe:	d09a      	beq.n	1dd36 <lll_conn_isr_rx+0xda>
		ull_pdu_rx_alloc();
   1de00:	f7f9 fb2e 	bl	17460 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1de04:	2303      	movs	r3, #3
   1de06:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1de08:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1de0a:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1de0c:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1de0e:	4631      	mov	r1, r6
   1de10:	f7f9 fb3c 	bl	1748c <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   1de14:	e78d      	b.n	1dd32 <lll_conn_isr_rx+0xd6>
		crc_expire--;
   1de16:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1de18:	a901      	add	r1, sp, #4
   1de1a:	4620      	mov	r0, r4
		crc_expire--;
   1de1c:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1de1e:	f7ff fead 	bl	1db7c <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1de22:	2096      	movs	r0, #150	; 0x96
   1de24:	f000 fd4a 	bl	1e8bc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1de28:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1de2c:	f000 0007 	and.w	r0, r0, #7
   1de30:	f000 fc18 	bl	1e664 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1de34:	484b      	ldr	r0, [pc, #300]	; (1df64 <lll_conn_isr_rx+0x308>)
   1de36:	4621      	mov	r1, r4
   1de38:	f000 fac4 	bl	1e3c4 <radio_isr_set>
		radio_tmr_end_capture();
   1de3c:	f000 fe30 	bl	1eaa0 <radio_tmr_end_capture>
   1de40:	e74f      	b.n	1dce2 <lll_conn_isr_rx+0x86>
	LL_ASSERT(node_rx);
   1de42:	4a45      	ldr	r2, [pc, #276]	; (1df58 <lll_conn_isr_rx+0x2fc>)
   1de44:	4948      	ldr	r1, [pc, #288]	; (1df68 <lll_conn_isr_rx+0x30c>)
   1de46:	4846      	ldr	r0, [pc, #280]	; (1df60 <lll_conn_isr_rx+0x304>)
   1de48:	23f2      	movs	r3, #242	; 0xf2
   1de4a:	f006 fed7 	bl	24bfc <printk>
   1de4e:	4040      	eors	r0, r0
   1de50:	f380 8811 	msr	BASEPRI, r0
   1de54:	f04f 0003 	mov.w	r0, #3
   1de58:	df02      	svc	2
	if (crc_ok) {
   1de5a:	2d00      	cmp	r5, #0
   1de5c:	f43f af25 	beq.w	1dcaa <lll_conn_isr_rx+0x4e>
   1de60:	e76c      	b.n	1dd3c <lll_conn_isr_rx+0xe0>
	is_done = 0U;
   1de62:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1de66:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1de68:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1de6c:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1de70:	428a      	cmp	r2, r1
   1de72:	f000 8081 	beq.w	1df78 <lll_conn_isr_rx+0x31c>
	is_rx_enqueue = 0U;
   1de76:	2700      	movs	r7, #0
		crc_expire = 0U;
   1de78:	4a36      	ldr	r2, [pc, #216]	; (1df54 <lll_conn_isr_rx+0x2f8>)
   1de7a:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   1de7c:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   1de80:	4b3a      	ldr	r3, [pc, #232]	; (1df6c <lll_conn_isr_rx+0x310>)
		crc_expire = 0U;
   1de82:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1de84:	4620      	mov	r0, r4
		crc_valid = 1U;
   1de86:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1de88:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1de8a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1de8c:	f7ff fe76 	bl	1db7c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1de90:	f1b8 0f00 	cmp.w	r8, #0
   1de94:	f47f af1c 	bne.w	1dcd0 <lll_conn_isr_rx+0x74>
   1de98:	7f33      	ldrb	r3, [r6, #28]
   1de9a:	06d9      	lsls	r1, r3, #27
   1de9c:	d4c1      	bmi.n	1de22 <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1de9e:	9b01      	ldr	r3, [sp, #4]
   1dea0:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1dea2:	06d2      	lsls	r2, r2, #27
   1dea4:	d4bd      	bmi.n	1de22 <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1dea6:	785b      	ldrb	r3, [r3, #1]
   1dea8:	2b00      	cmp	r3, #0
   1deaa:	f43f af11 	beq.w	1dcd0 <lll_conn_isr_rx+0x74>
   1deae:	e7b8      	b.n	1de22 <lll_conn_isr_rx+0x1c6>
	LL_ASSERT(!radio_is_ready());
   1deb0:	4a29      	ldr	r2, [pc, #164]	; (1df58 <lll_conn_isr_rx+0x2fc>)
   1deb2:	492f      	ldr	r1, [pc, #188]	; (1df70 <lll_conn_isr_rx+0x314>)
   1deb4:	482a      	ldr	r0, [pc, #168]	; (1df60 <lll_conn_isr_rx+0x304>)
   1deb6:	f240 1369 	movw	r3, #361	; 0x169
   1deba:	f006 fe9f 	bl	24bfc <printk>
   1debe:	4040      	eors	r0, r0
   1dec0:	f380 8811 	msr	BASEPRI, r0
   1dec4:	f04f 0003 	mov.w	r0, #3
   1dec8:	df02      	svc	2
   1deca:	e721      	b.n	1dd10 <lll_conn_isr_rx+0xb4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1decc:	4a22      	ldr	r2, [pc, #136]	; (1df58 <lll_conn_isr_rx+0x2fc>)
   1dece:	4929      	ldr	r1, [pc, #164]	; (1df74 <lll_conn_isr_rx+0x318>)
   1ded0:	4823      	ldr	r0, [pc, #140]	; (1df60 <lll_conn_isr_rx+0x304>)
   1ded2:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1ded6:	f006 fe91 	bl	24bfc <printk>
   1deda:	4040      	eors	r0, r0
   1dedc:	f380 8811 	msr	BASEPRI, r0
   1dee0:	f04f 0003 	mov.w	r0, #3
   1dee4:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1dee6:	89a0      	ldrh	r0, [r4, #12]
   1dee8:	e71e      	b.n	1dd28 <lll_conn_isr_rx+0xcc>
			radio_disable();
   1deea:	f000 fb5f 	bl	1e5ac <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1deee:	f000 fb7d 	bl	1e5ec <radio_is_ready>
   1def2:	2800      	cmp	r0, #0
   1def4:	d155      	bne.n	1dfa2 <lll_conn_isr_rx+0x346>
			lll->empty = is_empty_pdu_tx_retry;
   1def6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1defa:	f369 0382 	bfi	r3, r9, #2, #1
   1defe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			goto lll_conn_isr_rx_exit;
   1df02:	e705      	b.n	1dd10 <lll_conn_isr_rx+0xb4>
			lll->empty = 0;
   1df04:	f36f 0282 	bfc	r2, #2, #1
   1df08:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1df0c:	f000 fba2 	bl	1e654 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1df10:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1df14:	2b00      	cmp	r3, #0
   1df16:	db0c      	blt.n	1df32 <lll_conn_isr_rx+0x2d6>
			    !pdu_data_rx->md) {
   1df18:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1df1a:	f012 0510 	ands.w	r5, r2, #16
   1df1e:	d109      	bne.n	1df34 <lll_conn_isr_rx+0x2d8>
				*is_done = !pdu_data_tx->md;
   1df20:	f890 8000 	ldrb.w	r8, [r0]
   1df24:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1df28:	f088 0810 	eor.w	r8, r8, #16
   1df2c:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1df30:	e79a      	b.n	1de68 <lll_conn_isr_rx+0x20c>
   1df32:	7f32      	ldrb	r2, [r6, #28]
   1df34:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	is_done = 0U;
   1df38:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1df3c:	4645      	mov	r5, r8
   1df3e:	e793      	b.n	1de68 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_offset = offset;
   1df40:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	tx_release = NULL;
   1df44:	2500      	movs	r5, #0
   1df46:	e741      	b.n	1ddcc <lll_conn_isr_rx+0x170>
	is_rx_enqueue = 0U;
   1df48:	462f      	mov	r7, r5
   1df4a:	e76a      	b.n	1de22 <lll_conn_isr_rx+0x1c6>
   1df4c:	0001d8cd 	.word	0x0001d8cd
   1df50:	2000481a 	.word	0x2000481a
   1df54:	200049a3 	.word	0x200049a3
   1df58:	0002df04 	.word	0x0002df04
   1df5c:	0002d314 	.word	0x0002d314
   1df60:	0002d27c 	.word	0x0002d27c
   1df64:	0001da6d 	.word	0x0001da6d
   1df68:	0002dec0 	.word	0x0002dec0
   1df6c:	200049a4 	.word	0x200049a4
   1df70:	0002dec8 	.word	0x0002dec8
   1df74:	0002df5c 	.word	0x0002df5c
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1df78:	2003      	movs	r0, #3
   1df7a:	f7f9 fa53 	bl	17424 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1df7e:	b168      	cbz	r0, 1df9c <lll_conn_isr_rx+0x340>
		lll->nesn++;
   1df80:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1df84:	f083 0302 	eor.w	r3, r3, #2
   1df88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (pdu_data_rx->len != 0) {
   1df8c:	7f73      	ldrb	r3, [r6, #29]
   1df8e:	b12b      	cbz	r3, 1df9c <lll_conn_isr_rx+0x340>
			if (lll->enc_rx) {
   1df90:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1df94:	0718      	lsls	r0, r3, #28
   1df96:	d424      	bmi.n	1dfe2 <lll_conn_isr_rx+0x386>
			*is_rx_enqueue = 1U;
   1df98:	2701      	movs	r7, #1
   1df9a:	e76d      	b.n	1de78 <lll_conn_isr_rx+0x21c>
   1df9c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1dfa0:	e769      	b.n	1de76 <lll_conn_isr_rx+0x21a>
			LL_ASSERT(!radio_is_ready());
   1dfa2:	4a37      	ldr	r2, [pc, #220]	; (1e080 <lll_conn_isr_rx+0x424>)
   1dfa4:	4937      	ldr	r1, [pc, #220]	; (1e084 <lll_conn_isr_rx+0x428>)
   1dfa6:	4838      	ldr	r0, [pc, #224]	; (1e088 <lll_conn_isr_rx+0x42c>)
   1dfa8:	f44f 7398 	mov.w	r3, #304	; 0x130
   1dfac:	f006 fe26 	bl	24bfc <printk>
   1dfb0:	4040      	eors	r0, r0
   1dfb2:	f380 8811 	msr	BASEPRI, r0
   1dfb6:	f04f 0003 	mov.w	r0, #3
   1dfba:	df02      	svc	2
   1dfbc:	e79b      	b.n	1def6 <lll_conn_isr_rx+0x29a>
   1dfbe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1dfc2:	7f32      	ldrb	r2, [r6, #28]
   1dfc4:	e750      	b.n	1de68 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_len = 0;
   1dfc6:	2200      	movs	r2, #0
   1dfc8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
				memq_dequeue(lll->memq_tx.tail,
   1dfcc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1dfce:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1dfd2:	f7f5 fa6d 	bl	134b0 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1dfd6:	9b01      	ldr	r3, [sp, #4]
   1dfd8:	681a      	ldr	r2, [r3, #0]
   1dfda:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1dfdc:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1dfde:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   1dfe0:	e6f4      	b.n	1ddcc <lll_conn_isr_rx+0x170>
				done = radio_ccm_is_done();
   1dfe2:	f000 fdd7 	bl	1eb94 <radio_ccm_is_done>
				LL_ASSERT(done);
   1dfe6:	2800      	cmp	r0, #0
   1dfe8:	d03b      	beq.n	1e062 <lll_conn_isr_rx+0x406>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1dfea:	f000 fdf5 	bl	1ebd8 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1dfee:	bb30      	cbnz	r0, 1e03e <lll_conn_isr_rx+0x3e2>
				    lll->ccm_rx.counter == 0 &&
   1dff0:	f8d4 2053 	ldr.w	r2, [r4, #83]	; 0x53
   1dff4:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
				if (mic_failure &&
   1dff8:	4313      	orrs	r3, r2
   1dffa:	d104      	bne.n	1e006 <lll_conn_isr_rx+0x3aa>
				    (pdu_data_rx->ll_id ==
   1dffc:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1dffe:	f003 0303 	and.w	r3, r3, #3
   1e002:	2b03      	cmp	r3, #3
   1e004:	d004      	beq.n	1e010 <lll_conn_isr_rx+0x3b4>
					mic_state = LLL_CONN_MIC_FAIL;
   1e006:	4b21      	ldr	r3, [pc, #132]	; (1e08c <lll_conn_isr_rx+0x430>)
   1e008:	2202      	movs	r2, #2
   1e00a:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1e00c:	2700      	movs	r7, #0
   1e00e:	e67f      	b.n	1dd10 <lll_conn_isr_rx+0xb4>
						radio_pkt_scratch_get();
   1e010:	f000 fb24 	bl	1e65c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1e014:	7843      	ldrb	r3, [r0, #1]
   1e016:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   1e018:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1e01a:	d8f4      	bhi.n	1e006 <lll_conn_isr_rx+0x3aa>
						memcpy(pdu_data_rx,
   1e01c:	3303      	adds	r3, #3
   1e01e:	b2da      	uxtb	r2, r3
   1e020:	f106 001c 	add.w	r0, r6, #28
   1e024:	f00a fac7 	bl	285b6 <memcpy>
						lll->ccm_rx.counter--;
   1e028:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1e02c:	3b01      	subs	r3, #1
   1e02e:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1e032:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1e036:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1e03a:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				lll->ccm_rx.counter++;
   1e03e:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1e042:	3301      	adds	r3, #1
   1e044:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1e048:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
						lll->ccm_rx.counter--;
   1e04c:	f104 0253 	add.w	r2, r4, #83	; 0x53
				lll->ccm_rx.counter++;
   1e050:	f143 0300 	adc.w	r3, r3, #0
   1e054:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1e056:	4b0d      	ldr	r3, [pc, #52]	; (1e08c <lll_conn_isr_rx+0x430>)
   1e058:	2701      	movs	r7, #1
   1e05a:	701f      	strb	r7, [r3, #0]
		if (err) {
   1e05c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1e060:	e70a      	b.n	1de78 <lll_conn_isr_rx+0x21c>
				LL_ASSERT(done);
   1e062:	4a07      	ldr	r2, [pc, #28]	; (1e080 <lll_conn_isr_rx+0x424>)
   1e064:	490a      	ldr	r1, [pc, #40]	; (1e090 <lll_conn_isr_rx+0x434>)
   1e066:	4808      	ldr	r0, [pc, #32]	; (1e088 <lll_conn_isr_rx+0x42c>)
   1e068:	f240 33be 	movw	r3, #958	; 0x3be
   1e06c:	f006 fdc6 	bl	24bfc <printk>
   1e070:	4040      	eors	r0, r0
   1e072:	f380 8811 	msr	BASEPRI, r0
   1e076:	f04f 0003 	mov.w	r0, #3
   1e07a:	df02      	svc	2
   1e07c:	e7b5      	b.n	1dfea <lll_conn_isr_rx+0x38e>
   1e07e:	bf00      	nop
   1e080:	0002df04 	.word	0x0002df04
   1e084:	0002dec8 	.word	0x0002dec8
   1e088:	0002d27c 	.word	0x0002d27c
   1e08c:	200049a5 	.word	0x200049a5
   1e090:	0002df54 	.word	0x0002df54

0001e094 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1e094:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   1e096:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1e098:	89a2      	ldrh	r2, [r4, #12]
   1e09a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e09e:	429a      	cmp	r2, r3
{
   1e0a0:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   1e0a2:	f000 8091 	beq.w	1e1c8 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1e0a6:	4605      	mov	r5, r0
   1e0a8:	f7ff fc56 	bl	1d958 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e0ac:	892b      	ldrh	r3, [r5, #8]
   1e0ae:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1e0b0:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e0b2:	441a      	add	r2, r3
   1e0b4:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1e0b6:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1e0b8:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e0ba:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   1e0bc:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   1e0be:	1c41      	adds	r1, r0, #1
   1e0c0:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1e0c2:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1e0c4:	f04f 0100 	mov.w	r1, #0
   1e0c8:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1e0ca:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   1e0ce:	d45f      	bmi.n	1e190 <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1e0d0:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1e0d4:	460b      	mov	r3, r1
   1e0d6:	7fa1      	ldrb	r1, [r4, #30]
   1e0d8:	9000      	str	r0, [sp, #0]
   1e0da:	f104 001f 	add.w	r0, r4, #31
   1e0de:	f7fd f955 	bl	1b38c <lll_chan_sel_1>
   1e0e2:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e0e4:	4620      	mov	r0, r4
   1e0e6:	a903      	add	r1, sp, #12
   1e0e8:	f7ff fd48 	bl	1db7c <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1e0ec:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   1e0f0:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1e0f2:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1e0f6:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1e0f8:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1e0fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1e100:	780a      	ldrb	r2, [r1, #0]
   1e102:	f022 020c 	bic.w	r2, r2, #12
   1e106:	4313      	orrs	r3, r2
   1e108:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1e10a:	f000 f99d 	bl	1e448 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e10e:	2008      	movs	r0, #8
   1e110:	f000 f9ce 	bl	1e4b0 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1e114:	1d20      	adds	r0, r4, #4
   1e116:	f000 f9e9 	bl	1e4ec <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1e11a:	8923      	ldrh	r3, [r4, #8]
   1e11c:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1e11e:	f240 605b 	movw	r0, #1627	; 0x65b
   1e122:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1e126:	f000 fa7f 	bl	1e628 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   1e12a:	4630      	mov	r0, r6
   1e12c:	f7fe fd90 	bl	1cc50 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1e130:	9903      	ldr	r1, [sp, #12]
   1e132:	4620      	mov	r0, r4
   1e134:	f7ff fcf6 	bl	1db24 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1e138:	4621      	mov	r1, r4
   1e13a:	4828      	ldr	r0, [pc, #160]	; (1e1dc <prepare_cb+0x148>)
   1e13c:	f000 f942 	bl	1e3c4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1e140:	2096      	movs	r0, #150	; 0x96
   1e142:	f000 fbbb 	bl	1e8bc <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1e146:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1e14a:	f000 0007 	and.w	r0, r0, #7
   1e14e:	f000 fa89 	bl	1e664 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1e152:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1e154:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1e156:	4638      	mov	r0, r7
   1e158:	f7fe fd5c 	bl	1cc14 <lll_event_offset_get>
   1e15c:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1e15e:	686a      	ldr	r2, [r5, #4]
   1e160:	f106 0109 	add.w	r1, r6, #9
   1e164:	2001      	movs	r0, #1
   1e166:	f000 fbb5 	bl	1e8d4 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1e16a:	f000 fc99 	bl	1eaa0 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1e16e:	89a1      	ldrh	r1, [r4, #12]
   1e170:	3103      	adds	r1, #3
   1e172:	4632      	mov	r2, r6
   1e174:	b2c9      	uxtb	r1, r1
   1e176:	4638      	mov	r0, r7
   1e178:	f7fe fd5a 	bl	1cc30 <lll_preempt_calc>
   1e17c:	b180      	cbz	r0, 1e1a0 <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1e17e:	4818      	ldr	r0, [pc, #96]	; (1e1e0 <prepare_cb+0x14c>)
   1e180:	4621      	mov	r1, r4
   1e182:	f000 f91f 	bl	1e3c4 <radio_isr_set>
		radio_disable();
   1e186:	f000 fa11 	bl	1e5ac <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1e18a:	2000      	movs	r0, #0
   1e18c:	b005      	add	sp, #20
   1e18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1e190:	460a      	mov	r2, r1
   1e192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e196:	8be1      	ldrh	r1, [r4, #30]
   1e198:	f7fd f93c 	bl	1b414 <lll_chan_sel_2>
   1e19c:	4606      	mov	r6, r0
   1e19e:	e7a1      	b.n	1e0e4 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   1e1a0:	4620      	mov	r0, r4
   1e1a2:	f7fe fcd1 	bl	1cb48 <lll_prepare_done>
		LL_ASSERT(!ret);
   1e1a6:	2800      	cmp	r0, #0
   1e1a8:	d0ef      	beq.n	1e18a <prepare_cb+0xf6>
   1e1aa:	4a0e      	ldr	r2, [pc, #56]	; (1e1e4 <prepare_cb+0x150>)
   1e1ac:	490e      	ldr	r1, [pc, #56]	; (1e1e8 <prepare_cb+0x154>)
   1e1ae:	480f      	ldr	r0, [pc, #60]	; (1e1ec <prepare_cb+0x158>)
   1e1b0:	23fd      	movs	r3, #253	; 0xfd
   1e1b2:	f006 fd23 	bl	24bfc <printk>
   1e1b6:	4040      	eors	r0, r0
   1e1b8:	f380 8811 	msr	BASEPRI, r0
   1e1bc:	f04f 0003 	mov.w	r0, #3
   1e1c0:	df02      	svc	2
}
   1e1c2:	2000      	movs	r0, #0
   1e1c4:	b005      	add	sp, #20
   1e1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   1e1c8:	4809      	ldr	r0, [pc, #36]	; (1e1f0 <prepare_cb+0x15c>)
   1e1ca:	4621      	mov	r1, r4
   1e1cc:	f000 f8fa 	bl	1e3c4 <radio_isr_set>
		radio_disable();
   1e1d0:	f000 f9ec 	bl	1e5ac <radio_disable>
}
   1e1d4:	2000      	movs	r0, #0
   1e1d6:	b005      	add	sp, #20
   1e1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1da:	bf00      	nop
   1e1dc:	0001da6d 	.word	0x0001da6d
   1e1e0:	0001cd85 	.word	0x0001cd85
   1e1e4:	0002df88 	.word	0x0002df88
   1e1e8:	0002d6d0 	.word	0x0002d6d0
   1e1ec:	0002d27c 	.word	0x0002d27c
   1e1f0:	0001cda9 	.word	0x0001cda9

0001e1f4 <lll_central_prepare>:
{
   1e1f4:	b510      	push	{r4, lr}
   1e1f6:	b082      	sub	sp, #8
   1e1f8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1e1fa:	f7fe ff25 	bl	1d048 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1e1fe:	2800      	cmp	r0, #0
   1e200:	db19      	blt.n	1e236 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   1e202:	4a13      	ldr	r2, [pc, #76]	; (1e250 <lll_central_prepare+0x5c>)
   1e204:	4913      	ldr	r1, [pc, #76]	; (1e254 <lll_central_prepare+0x60>)
   1e206:	4814      	ldr	r0, [pc, #80]	; (1e258 <lll_central_prepare+0x64>)
   1e208:	9400      	str	r4, [sp, #0]
   1e20a:	2300      	movs	r3, #0
   1e20c:	f7f9 fc08 	bl	17a20 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e210:	b108      	cbz	r0, 1e216 <lll_central_prepare+0x22>
   1e212:	3077      	adds	r0, #119	; 0x77
   1e214:	d101      	bne.n	1e21a <lll_central_prepare+0x26>
}
   1e216:	b002      	add	sp, #8
   1e218:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e21a:	4a10      	ldr	r2, [pc, #64]	; (1e25c <lll_central_prepare+0x68>)
   1e21c:	4910      	ldr	r1, [pc, #64]	; (1e260 <lll_central_prepare+0x6c>)
   1e21e:	4811      	ldr	r0, [pc, #68]	; (1e264 <lll_central_prepare+0x70>)
   1e220:	2351      	movs	r3, #81	; 0x51
   1e222:	f006 fceb 	bl	24bfc <printk>
   1e226:	4040      	eors	r0, r0
   1e228:	f380 8811 	msr	BASEPRI, r0
   1e22c:	f04f 0003 	mov.w	r0, #3
   1e230:	df02      	svc	2
}
   1e232:	b002      	add	sp, #8
   1e234:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1e236:	4a09      	ldr	r2, [pc, #36]	; (1e25c <lll_central_prepare+0x68>)
   1e238:	490b      	ldr	r1, [pc, #44]	; (1e268 <lll_central_prepare+0x74>)
   1e23a:	480a      	ldr	r0, [pc, #40]	; (1e264 <lll_central_prepare+0x70>)
   1e23c:	234c      	movs	r3, #76	; 0x4c
   1e23e:	f006 fcdd 	bl	24bfc <printk>
   1e242:	4040      	eors	r0, r0
   1e244:	f380 8811 	msr	BASEPRI, r0
   1e248:	f04f 0003 	mov.w	r0, #3
   1e24c:	df02      	svc	2
   1e24e:	e7d8      	b.n	1e202 <lll_central_prepare+0xe>
   1e250:	0001e095 	.word	0x0001e095
   1e254:	0001d981 	.word	0x0001d981
   1e258:	0001cc0d 	.word	0x0001cc0d
   1e25c:	0002df88 	.word	0x0002df88
   1e260:	0002dedc 	.word	0x0002dedc
   1e264:	0002d27c 	.word	0x0002d27c
   1e268:	0002de14 	.word	0x0002de14

0001e26c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1e26c:	4b05      	ldr	r3, [pc, #20]	; (1e284 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e26e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e272:	2100      	movs	r1, #0
   1e274:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1e278:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1e27c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1e280:	4770      	bx	lr
   1e282:	bf00      	nop
   1e284:	4000b000 	.word	0x4000b000

0001e288 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1e288:	4b05      	ldr	r3, [pc, #20]	; (1e2a0 <cntr_start+0x18>)
   1e28a:	7818      	ldrb	r0, [r3, #0]
   1e28c:	1c42      	adds	r2, r0, #1
   1e28e:	701a      	strb	r2, [r3, #0]
   1e290:	b918      	cbnz	r0, 1e29a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e292:	4b04      	ldr	r3, [pc, #16]	; (1e2a4 <cntr_start+0x1c>)
   1e294:	2201      	movs	r2, #1
   1e296:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1e298:	4770      	bx	lr
		return 1;
   1e29a:	2001      	movs	r0, #1
}
   1e29c:	4770      	bx	lr
   1e29e:	bf00      	nop
   1e2a0:	200049a6 	.word	0x200049a6
   1e2a4:	4000b000 	.word	0x4000b000

0001e2a8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1e2a8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1e2aa:	4c0d      	ldr	r4, [pc, #52]	; (1e2e0 <cntr_stop+0x38>)
   1e2ac:	7820      	ldrb	r0, [r4, #0]
   1e2ae:	b148      	cbz	r0, 1e2c4 <cntr_stop+0x1c>

	if (--_refcount) {
   1e2b0:	3801      	subs	r0, #1
   1e2b2:	b2c0      	uxtb	r0, r0
   1e2b4:	7020      	strb	r0, [r4, #0]
   1e2b6:	b918      	cbnz	r0, 1e2c0 <cntr_stop+0x18>
   1e2b8:	4b0a      	ldr	r3, [pc, #40]	; (1e2e4 <cntr_stop+0x3c>)
   1e2ba:	2201      	movs	r2, #1
   1e2bc:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1e2be:	bd10      	pop	{r4, pc}
		return 1;
   1e2c0:	2001      	movs	r0, #1
}
   1e2c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1e2c4:	4a08      	ldr	r2, [pc, #32]	; (1e2e8 <cntr_stop+0x40>)
   1e2c6:	4909      	ldr	r1, [pc, #36]	; (1e2ec <cntr_stop+0x44>)
   1e2c8:	4809      	ldr	r0, [pc, #36]	; (1e2f0 <cntr_stop+0x48>)
   1e2ca:	232d      	movs	r3, #45	; 0x2d
   1e2cc:	f006 fc96 	bl	24bfc <printk>
   1e2d0:	4040      	eors	r0, r0
   1e2d2:	f380 8811 	msr	BASEPRI, r0
   1e2d6:	f04f 0003 	mov.w	r0, #3
   1e2da:	df02      	svc	2
	if (--_refcount) {
   1e2dc:	7820      	ldrb	r0, [r4, #0]
   1e2de:	e7e7      	b.n	1e2b0 <cntr_stop+0x8>
   1e2e0:	200049a6 	.word	0x200049a6
   1e2e4:	4000b000 	.word	0x4000b000
   1e2e8:	0002dfec 	.word	0x0002dfec
   1e2ec:	0002e038 	.word	0x0002e038
   1e2f0:	0002d27c 	.word	0x0002d27c

0001e2f4 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1e2f4:	4b01      	ldr	r3, [pc, #4]	; (1e2fc <cntr_cnt_get+0x8>)
   1e2f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1e2fa:	4770      	bx	lr
   1e2fc:	4000b000 	.word	0x4000b000

0001e300 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1e300:	4b02      	ldr	r3, [pc, #8]	; (1e30c <cntr_cmp_set+0xc>)
   1e302:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e306:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1e30a:	4770      	bx	lr
   1e30c:	4000b000 	.word	0x4000b000

0001e310 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e310:	4b12      	ldr	r3, [pc, #72]	; (1e35c <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1e312:	b430      	push	{r4, r5}
   1e314:	2101      	movs	r1, #1
   1e316:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1e318:	2000      	movs	r0, #0
   1e31a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1e31c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1e320:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1e324:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1e328:	6019      	str	r1, [r3, #0]
}
   1e32a:	e005      	b.n	1e338 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e32c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e330:	b932      	cbnz	r2, 1e340 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1e332:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e336:	b11a      	cbz	r2, 1e340 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e338:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1e33c:	2a00      	cmp	r2, #0
   1e33e:	d0f5      	beq.n	1e32c <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e340:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1e342:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e346:	2a00      	cmp	r2, #0
   1e348:	d1e7      	bne.n	1e31a <do_ecb+0xa>
   1e34a:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1e34e:	2d00      	cmp	r5, #0
   1e350:	d0e3      	beq.n	1e31a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1e352:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1e354:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1e358:	4770      	bx	lr
   1e35a:	bf00      	nop
   1e35c:	4000e000 	.word	0x4000e000

0001e360 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1e360:	b570      	push	{r4, r5, r6, lr}
   1e362:	b08c      	sub	sp, #48	; 0x30
   1e364:	460e      	mov	r6, r1
   1e366:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1e368:	4601      	mov	r1, r0
   1e36a:	2210      	movs	r2, #16
   1e36c:	4668      	mov	r0, sp
{
   1e36e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1e370:	f7f5 f864 	bl	1343c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1e374:	2210      	movs	r2, #16
   1e376:	eb0d 0002 	add.w	r0, sp, r2
   1e37a:	4631      	mov	r1, r6
   1e37c:	f7f5 f85e 	bl	1343c <mem_rcopy>

	do_ecb(&ecb);
   1e380:	4668      	mov	r0, sp
   1e382:	f7ff ffc5 	bl	1e310 <do_ecb>

	if (cipher_text_le) {
   1e386:	b125      	cbz	r5, 1e392 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1e388:	2210      	movs	r2, #16
   1e38a:	a908      	add	r1, sp, #32
   1e38c:	4628      	mov	r0, r5
   1e38e:	f7f5 f855 	bl	1343c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1e392:	b124      	cbz	r4, 1e39e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1e394:	2210      	movs	r2, #16
   1e396:	a908      	add	r1, sp, #32
   1e398:	4620      	mov	r0, r4
   1e39a:	f00a f90c 	bl	285b6 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1e39e:	b00c      	add	sp, #48	; 0x30
   1e3a0:	bd70      	pop	{r4, r5, r6, pc}
   1e3a2:	bf00      	nop

0001e3a4 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1e3a4:	4b04      	ldr	r3, [pc, #16]	; (1e3b8 <isr_radio+0x14>)
   1e3a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1e3aa:	b123      	cbz	r3, 1e3b6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1e3ac:	4a03      	ldr	r2, [pc, #12]	; (1e3bc <isr_radio+0x18>)
   1e3ae:	4b04      	ldr	r3, [pc, #16]	; (1e3c0 <isr_radio+0x1c>)
   1e3b0:	6810      	ldr	r0, [r2, #0]
   1e3b2:	681b      	ldr	r3, [r3, #0]
   1e3b4:	4718      	bx	r3
}
   1e3b6:	4770      	bx	lr
   1e3b8:	40001000 	.word	0x40001000
   1e3bc:	20003ba8 	.word	0x20003ba8
   1e3c0:	20003ba4 	.word	0x20003ba4

0001e3c4 <radio_isr_set>:
{
   1e3c4:	b538      	push	{r3, r4, r5, lr}
   1e3c6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1e3c8:	2001      	movs	r0, #1
{
   1e3ca:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1e3cc:	f7ec f8a6 	bl	a51c <arch_irq_disable>
	isr_cb = cb;
   1e3d0:	4b08      	ldr	r3, [pc, #32]	; (1e3f4 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1e3d2:	4a09      	ldr	r2, [pc, #36]	; (1e3f8 <radio_isr_set+0x34>)
	isr_cb = cb;
   1e3d4:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1e3d6:	4909      	ldr	r1, [pc, #36]	; (1e3fc <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e3d8:	4b09      	ldr	r3, [pc, #36]	; (1e400 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1e3da:	6015      	str	r5, [r2, #0]
   1e3dc:	2010      	movs	r0, #16
   1e3de:	2202      	movs	r2, #2
   1e3e0:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1e3e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1e3e8:	2001      	movs	r0, #1
}
   1e3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1e3ee:	f7ec b885 	b.w	a4fc <arch_irq_enable>
   1e3f2:	bf00      	nop
   1e3f4:	20003ba4 	.word	0x20003ba4
   1e3f8:	20003ba8 	.word	0x20003ba8
   1e3fc:	40001000 	.word	0x40001000
   1e400:	e000e100 	.word	0xe000e100

0001e404 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1e404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1e40c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1e40e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1e412:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1e416:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1e41a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1e41e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1e422:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1e426:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1e42a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1e42e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1e432:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1e436:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1e43a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1e43e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1e442:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1e446:	4770      	bx	lr

0001e448 <radio_reset>:
{
   1e448:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1e44a:	2001      	movs	r0, #1
   1e44c:	f7ec f866 	bl	a51c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   1e450:	4a0d      	ldr	r2, [pc, #52]	; (1e488 <radio_reset+0x40>)
   1e452:	2100      	movs	r1, #0
   1e454:	2301      	movs	r3, #1
   1e456:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1e45a:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1e45e:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1e462:	490a      	ldr	r1, [pc, #40]	; (1e48c <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1e464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e468:	f023 0301 	bic.w	r3, r3, #1
   1e46c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e470:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1e474:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1e478:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1e47c:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1e480:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1e484:	bd10      	pop	{r4, pc}
   1e486:	bf00      	nop
   1e488:	40001000 	.word	0x40001000
   1e48c:	4001f000 	.word	0x4001f000

0001e490 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1e490:	4b06      	ldr	r3, [pc, #24]	; (1e4ac <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1e492:	2802      	cmp	r0, #2
   1e494:	bf14      	ite	ne
   1e496:	2203      	movne	r2, #3
   1e498:	2204      	moveq	r2, #4
   1e49a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1e49e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e4a2:	f042 0201 	orr.w	r2, r2, #1
   1e4a6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1e4aa:	4770      	bx	lr
   1e4ac:	40001000 	.word	0x40001000

0001e4b0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1e4b0:	4b01      	ldr	r3, [pc, #4]	; (1e4b8 <radio_tx_power_set+0x8>)
   1e4b2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1e4b6:	4770      	bx	lr
   1e4b8:	40001000 	.word	0x40001000

0001e4bc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1e4bc:	4b01      	ldr	r3, [pc, #4]	; (1e4c4 <radio_freq_chan_set+0x8>)
   1e4be:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1e4c2:	4770      	bx	lr
   1e4c4:	40001000 	.word	0x40001000

0001e4c8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1e4c8:	4b07      	ldr	r3, [pc, #28]	; (1e4e8 <radio_whiten_iv_set+0x20>)
   1e4ca:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1e4ce:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e4d2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1e4d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1e4da:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e4de:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1e4e2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1e4e6:	4770      	bx	lr
   1e4e8:	40001000 	.word	0x40001000

0001e4ec <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1e4ec:	4a0a      	ldr	r2, [pc, #40]	; (1e518 <radio_aa_set+0x2c>)
   1e4ee:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1e4f0:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1e4f2:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1e4f6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1e4fa:	78c3      	ldrb	r3, [r0, #3]
   1e4fc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1e500:	7843      	ldrb	r3, [r0, #1]
   1e502:	f890 c002 	ldrb.w	ip, [r0, #2]
   1e506:	7801      	ldrb	r1, [r0, #0]
   1e508:	041b      	lsls	r3, r3, #16
   1e50a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1e50e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1e512:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1e516:	4770      	bx	lr
   1e518:	40001000 	.word	0x40001000

0001e51c <radio_pkt_configure>:
	switch (phy) {
   1e51c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1e520:	2b02      	cmp	r3, #2
   1e522:	bf14      	ite	ne
   1e524:	f04f 0c00 	movne.w	ip, #0
   1e528:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1e52c:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1e52e:	bf48      	it	mi
   1e530:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1e534:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   1e538:	4b0a      	ldr	r3, [pc, #40]	; (1e564 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1e53a:	4a0b      	ldr	r2, [pc, #44]	; (1e568 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1e53c:	ea40 000c 	orr.w	r0, r0, ip
   1e540:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1e544:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1e548:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   1e54c:	4002      	ands	r2, r0
   1e54e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1e552:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e556:	4311      	orrs	r1, r2
   1e558:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1e55c:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   1e560:	4770      	bx	lr
   1e562:	bf00      	nop
   1e564:	40001000 	.word	0x40001000
   1e568:	fef80000 	.word	0xfef80000

0001e56c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1e56c:	4b01      	ldr	r3, [pc, #4]	; (1e574 <radio_pkt_rx_set+0x8>)
   1e56e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1e572:	4770      	bx	lr
   1e574:	40001000 	.word	0x40001000

0001e578 <radio_pkt_tx_set>:
   1e578:	4b01      	ldr	r3, [pc, #4]	; (1e580 <radio_pkt_tx_set+0x8>)
   1e57a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1e57e:	4770      	bx	lr
   1e580:	40001000 	.word	0x40001000

0001e584 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   1e584:	2802      	cmp	r0, #2
}
   1e586:	bf14      	ite	ne
   1e588:	2029      	movne	r0, #41	; 0x29
   1e58a:	2028      	moveq	r0, #40	; 0x28
   1e58c:	4770      	bx	lr
   1e58e:	bf00      	nop

0001e590 <radio_tx_chain_delay_get>:
}
   1e590:	2001      	movs	r0, #1
   1e592:	4770      	bx	lr

0001e594 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1e594:	2802      	cmp	r0, #2
}
   1e596:	bf14      	ite	ne
   1e598:	200a      	movne	r0, #10
   1e59a:	2005      	moveq	r0, #5
   1e59c:	4770      	bx	lr
   1e59e:	bf00      	nop

0001e5a0 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e5a0:	4b01      	ldr	r3, [pc, #4]	; (1e5a8 <radio_rx_enable+0x8>)
   1e5a2:	2201      	movs	r2, #1
   1e5a4:	605a      	str	r2, [r3, #4]
}
   1e5a6:	4770      	bx	lr
   1e5a8:	40001000 	.word	0x40001000

0001e5ac <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1e5ac:	4a07      	ldr	r2, [pc, #28]	; (1e5cc <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1e5ae:	4908      	ldr	r1, [pc, #32]	; (1e5d0 <radio_disable+0x24>)
{
   1e5b0:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1e5b2:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1e5b4:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1e5b8:	2000      	movs	r0, #0
   1e5ba:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1e5be:	6053      	str	r3, [r2, #4]
}
   1e5c0:	bc10      	pop	{r4}
   1e5c2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1e5c4:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1e5c8:	610b      	str	r3, [r1, #16]
}
   1e5ca:	4770      	bx	lr
   1e5cc:	4001f000 	.word	0x4001f000
   1e5d0:	40001000 	.word	0x40001000

0001e5d4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1e5d4:	4b04      	ldr	r3, [pc, #16]	; (1e5e8 <radio_status_reset+0x14>)
   1e5d6:	2200      	movs	r2, #0
   1e5d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1e5dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1e5e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1e5e4:	4770      	bx	lr
   1e5e6:	bf00      	nop
   1e5e8:	40001000 	.word	0x40001000

0001e5ec <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1e5ec:	4b03      	ldr	r3, [pc, #12]	; (1e5fc <radio_is_ready+0x10>)
   1e5ee:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1e5f2:	3800      	subs	r0, #0
   1e5f4:	bf18      	it	ne
   1e5f6:	2001      	movne	r0, #1
   1e5f8:	4770      	bx	lr
   1e5fa:	bf00      	nop
   1e5fc:	40001000 	.word	0x40001000

0001e600 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   1e600:	4b03      	ldr	r3, [pc, #12]	; (1e610 <radio_is_done+0x10>)
   1e602:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1e606:	3800      	subs	r0, #0
   1e608:	bf18      	it	ne
   1e60a:	2001      	movne	r0, #1
   1e60c:	4770      	bx	lr
   1e60e:	bf00      	nop
   1e610:	40001000 	.word	0x40001000

0001e614 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1e614:	4b03      	ldr	r3, [pc, #12]	; (1e624 <radio_is_idle+0x10>)
   1e616:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1e61a:	fab0 f080 	clz	r0, r0
   1e61e:	0940      	lsrs	r0, r0, #5
   1e620:	4770      	bx	lr
   1e622:	bf00      	nop
   1e624:	40001000 	.word	0x40001000

0001e628 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1e628:	4b04      	ldr	r3, [pc, #16]	; (1e63c <radio_crc_configure+0x14>)
   1e62a:	f240 1203 	movw	r2, #259	; 0x103
   1e62e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1e632:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1e636:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1e63a:	4770      	bx	lr
   1e63c:	40001000 	.word	0x40001000

0001e640 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1e640:	4b03      	ldr	r3, [pc, #12]	; (1e650 <radio_crc_is_valid+0x10>)
   1e642:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1e646:	3800      	subs	r0, #0
   1e648:	bf18      	it	ne
   1e64a:	2001      	movne	r0, #1
   1e64c:	4770      	bx	lr
   1e64e:	bf00      	nop
   1e650:	40001000 	.word	0x40001000

0001e654 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1e654:	4800      	ldr	r0, [pc, #0]	; (1e658 <radio_pkt_empty_get+0x4>)
   1e656:	4770      	bx	lr
   1e658:	20003a9c 	.word	0x20003a9c

0001e65c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1e65c:	4800      	ldr	r0, [pc, #0]	; (1e660 <radio_pkt_scratch_get+0x4>)
   1e65e:	4770      	bx	lr
   1e660:	20003aa0 	.word	0x20003aa0

0001e664 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e664:	4b1d      	ldr	r3, [pc, #116]	; (1e6dc <radio_switch_complete_and_rx+0x78>)
{
   1e666:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e668:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e66a:	4d1d      	ldr	r5, [pc, #116]	; (1e6e0 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e66c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e670:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e672:	4e1c      	ldr	r6, [pc, #112]	; (1e6e4 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e674:	4c1c      	ldr	r4, [pc, #112]	; (1e6e8 <radio_switch_complete_and_rx+0x84>)
   1e676:	4f1d      	ldr	r7, [pc, #116]	; (1e6ec <radio_switch_complete_and_rx+0x88>)
   1e678:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1e67c:	f102 030c 	add.w	r3, r2, #12
   1e680:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e682:	00d0      	lsls	r0, r2, #3
   1e684:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e686:	0091      	lsls	r1, r2, #2
   1e688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e68c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1e690:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1e694:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e698:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e69c:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1e6a0:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e6a4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e6a8:	4811      	ldr	r0, [pc, #68]	; (1e6f0 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e6aa:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e6ae:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1e6b2:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1e6b6:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1e6b8:	bf8a      	itet	hi
   1e6ba:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1e6be:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1e6c0:	3b2d      	subhi	r3, #45	; 0x2d
   1e6c2:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1e6c6:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1e6c8:	4b06      	ldr	r3, [pc, #24]	; (1e6e4 <radio_switch_complete_and_rx+0x80>)
   1e6ca:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1e6ce:	f002 0201 	and.w	r2, r2, #1
   1e6d2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1e6d6:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e6d8:	bcf0      	pop	{r4, r5, r6, r7}
   1e6da:	4770      	bx	lr
   1e6dc:	40001000 	.word	0x40001000
   1e6e0:	200049a7 	.word	0x200049a7
   1e6e4:	4001f000 	.word	0x4001f000
   1e6e8:	40009140 	.word	0x40009140
   1e6ec:	4000110c 	.word	0x4000110c
   1e6f0:	40001004 	.word	0x40001004

0001e6f4 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1e6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e6f8:	4e28      	ldr	r6, [pc, #160]	; (1e79c <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e6fa:	4c29      	ldr	r4, [pc, #164]	; (1e7a0 <radio_switch_complete_and_tx+0xac>)
   1e6fc:	4f29      	ldr	r7, [pc, #164]	; (1e7a4 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e6fe:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1e7a8 <radio_switch_complete_and_tx+0xb4>
   1e702:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1e7ac <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1e706:	2303      	movs	r3, #3
   1e708:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e70c:	7821      	ldrb	r1, [r4, #0]
   1e70e:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1e712:	f101 030c 	add.w	r3, r1, #12
   1e716:	b2db      	uxtb	r3, r3
   1e718:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e71a:	00cd      	lsls	r5, r1, #3
   1e71c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e720:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1e724:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e728:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e72c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e730:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e734:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1e738:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e73c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1e740:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1e744:	2a02      	cmp	r2, #2
   1e746:	bf08      	it	eq
   1e748:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e74a:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1e74e:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1e752:	f241 3588 	movw	r5, #5000	; 0x1388
   1e756:	2802      	cmp	r0, #2
   1e758:	bf08      	it	eq
   1e75a:	462a      	moveq	r2, r5
   1e75c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1e760:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   1e764:	4413      	add	r3, r2
   1e766:	4a12      	ldr	r2, [pc, #72]	; (1e7b0 <radio_switch_complete_and_tx+0xbc>)
   1e768:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1e76c:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1e770:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1e774:	bf85      	ittet	hi
   1e776:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1e778:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1e77c:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1e77e:	1a1b      	subhi	r3, r3, r0
   1e780:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1e784:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1e786:	4b08      	ldr	r3, [pc, #32]	; (1e7a8 <radio_switch_complete_and_tx+0xb4>)
   1e788:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1e78c:	f001 0101 	and.w	r1, r1, #1
   1e790:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1e794:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e79a:	bf00      	nop
   1e79c:	40001000 	.word	0x40001000
   1e7a0:	200049a7 	.word	0x200049a7
   1e7a4:	40009140 	.word	0x40009140
   1e7a8:	4001f000 	.word	0x4001f000
   1e7ac:	4000110c 	.word	0x4000110c
   1e7b0:	10624dd3 	.word	0x10624dd3

0001e7b4 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   1e7b4:	4904      	ldr	r1, [pc, #16]	; (1e7c8 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1e7b6:	4b05      	ldr	r3, [pc, #20]	; (1e7cc <radio_switch_complete_and_disable+0x18>)
   1e7b8:	2003      	movs	r0, #3
   1e7ba:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1e7be:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1e7c2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e7c6:	4770      	bx	lr
   1e7c8:	40001000 	.word	0x40001000
   1e7cc:	4001f000 	.word	0x4001f000

0001e7d0 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   1e7d0:	2000      	movs	r0, #0
   1e7d2:	4770      	bx	lr

0001e7d4 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1e7d4:	4a03      	ldr	r2, [pc, #12]	; (1e7e4 <radio_rssi_measure+0x10>)
   1e7d6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1e7da:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1e7de:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1e7e2:	4770      	bx	lr
   1e7e4:	40001000 	.word	0x40001000

0001e7e8 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1e7e8:	4b01      	ldr	r3, [pc, #4]	; (1e7f0 <radio_rssi_get+0x8>)
   1e7ea:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1e7ee:	4770      	bx	lr
   1e7f0:	40001000 	.word	0x40001000

0001e7f4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1e7f4:	4b02      	ldr	r3, [pc, #8]	; (1e800 <radio_rssi_status_reset+0xc>)
   1e7f6:	2200      	movs	r2, #0
   1e7f8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1e7fc:	4770      	bx	lr
   1e7fe:	bf00      	nop
   1e800:	40001000 	.word	0x40001000

0001e804 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1e804:	4b03      	ldr	r3, [pc, #12]	; (1e814 <radio_rssi_is_ready+0x10>)
   1e806:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1e80a:	3800      	subs	r0, #0
   1e80c:	bf18      	it	ne
   1e80e:	2001      	movne	r0, #1
   1e810:	4770      	bx	lr
   1e812:	bf00      	nop
   1e814:	40001000 	.word	0x40001000

0001e818 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1e818:	b410      	push	{r4}
   1e81a:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1e81e:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1e822:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1e82a:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1e82c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1e830:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1e834:	8894      	ldrh	r4, [r2, #4]
   1e836:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1e83a:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1e83e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1e842:	d1ec      	bne.n	1e81e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1e844:	4b03      	ldr	r3, [pc, #12]	; (1e854 <radio_filter_configure+0x3c>)
}
   1e846:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1e848:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1e84c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1e850:	4770      	bx	lr
   1e852:	bf00      	nop
   1e854:	40001000 	.word	0x40001000

0001e858 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1e858:	4a03      	ldr	r2, [pc, #12]	; (1e868 <radio_filter_disable+0x10>)
   1e85a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1e85e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1e862:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1e866:	4770      	bx	lr
   1e868:	40001000 	.word	0x40001000

0001e86c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1e86c:	4b02      	ldr	r3, [pc, #8]	; (1e878 <radio_filter_status_reset+0xc>)
   1e86e:	2200      	movs	r2, #0
   1e870:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1e874:	4770      	bx	lr
   1e876:	bf00      	nop
   1e878:	40001000 	.word	0x40001000

0001e87c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1e87c:	4b03      	ldr	r3, [pc, #12]	; (1e88c <radio_filter_has_match+0x10>)
   1e87e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1e882:	3800      	subs	r0, #0
   1e884:	bf18      	it	ne
   1e886:	2001      	movne	r0, #1
   1e888:	4770      	bx	lr
   1e88a:	bf00      	nop
   1e88c:	40001000 	.word	0x40001000

0001e890 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1e890:	4b01      	ldr	r3, [pc, #4]	; (1e898 <radio_filter_match_get+0x8>)
   1e892:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1e896:	4770      	bx	lr
   1e898:	40001000 	.word	0x40001000

0001e89c <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e89c:	4904      	ldr	r1, [pc, #16]	; (1e8b0 <radio_tmr_status_reset+0x14>)
   1e89e:	4b05      	ldr	r3, [pc, #20]	; (1e8b4 <radio_tmr_status_reset+0x18>)
   1e8a0:	4a05      	ldr	r2, [pc, #20]	; (1e8b8 <radio_tmr_status_reset+0x1c>)
   1e8a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1e8a6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1e8aa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1e8ae:	4770      	bx	lr
   1e8b0:	4000b000 	.word	0x4000b000
   1e8b4:	4001f000 	.word	0x4001f000
   1e8b8:	0e7000c0 	.word	0x0e7000c0

0001e8bc <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1e8bc:	4b03      	ldr	r3, [pc, #12]	; (1e8cc <radio_tmr_tifs_set+0x10>)
   1e8be:	4a04      	ldr	r2, [pc, #16]	; (1e8d0 <radio_tmr_tifs_set+0x14>)
   1e8c0:	781b      	ldrb	r3, [r3, #0]
   1e8c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1e8c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e8ca:	4770      	bx	lr
   1e8cc:	200049a7 	.word	0x200049a7
   1e8d0:	40009000 	.word	0x40009000

0001e8d4 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1e8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1e8d8:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1e8dc:	4d31      	ldr	r5, [pc, #196]	; (1e9a4 <radio_tmr_start+0xd0>)
   1e8de:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1e8e2:	42ab      	cmp	r3, r5
{
   1e8e4:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1e8e6:	d906      	bls.n	1e8f6 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1e8e8:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1e8ec:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1e8f0:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1e8f2:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e8f6:	4b2c      	ldr	r3, [pc, #176]	; (1e9a8 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1e8f8:	482c      	ldr	r0, [pc, #176]	; (1e9ac <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1e8fa:	4d2d      	ldr	r5, [pc, #180]	; (1e9b0 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e8fc:	4e2d      	ldr	r6, [pc, #180]	; (1e9b4 <radio_tmr_start+0xe0>)
   1e8fe:	2701      	movs	r7, #1
   1e900:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1e902:	2700      	movs	r7, #0
   1e904:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1e908:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1e90c:	2704      	movs	r7, #4
   1e90e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1e912:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1e914:	2702      	movs	r7, #2
   1e916:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1e91a:	4a27      	ldr	r2, [pc, #156]	; (1e9b8 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1e91c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1e920:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1e924:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1e928:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1e92c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e92e:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e932:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1e936:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1e93a:	bb64      	cbnz	r4, 1e996 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1e93c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1e940:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1e944:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1e948:	4b1b      	ldr	r3, [pc, #108]	; (1e9b8 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e94a:	4a1c      	ldr	r2, [pc, #112]	; (1e9bc <radio_tmr_start+0xe8>)
   1e94c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1e950:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1e952:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e954:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1e9c0 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e958:	f8df e068 	ldr.w	lr, [pc, #104]	; 1e9c4 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e95c:	f8df c068 	ldr.w	ip, [pc, #104]	; 1e9c8 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e960:	4f1a      	ldr	r7, [pc, #104]	; (1e9cc <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e962:	4e1b      	ldr	r6, [pc, #108]	; (1e9d0 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e964:	4d1b      	ldr	r5, [pc, #108]	; (1e9d4 <radio_tmr_start+0x100>)
   1e966:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1e968:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1e96c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1e970:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1e974:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1e978:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e97a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e97e:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e982:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e986:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e98a:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e98e:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1e992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1e996:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1e99a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1e99e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1e9a2:	e7d1      	b.n	1e948 <radio_tmr_start+0x74>
   1e9a4:	7ff0bdbf 	.word	0x7ff0bdbf
   1e9a8:	40008000 	.word	0x40008000
   1e9ac:	431bde83 	.word	0x431bde83
   1e9b0:	4000b000 	.word	0x4000b000
   1e9b4:	4000b148 	.word	0x4000b148
   1e9b8:	4001f000 	.word	0x4001f000
   1e9bc:	40009000 	.word	0x40009000
   1e9c0:	4000110c 	.word	0x4000110c
   1e9c4:	4000900c 	.word	0x4000900c
   1e9c8:	40009140 	.word	0x40009140
   1e9cc:	4001f004 	.word	0x4001f004
   1e9d0:	40009144 	.word	0x40009144
   1e9d4:	4001f00c 	.word	0x4001f00c

0001e9d8 <radio_tmr_start_tick>:
   1e9d8:	4a15      	ldr	r2, [pc, #84]	; (1ea30 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1e9da:	b430      	push	{r4, r5}
   1e9dc:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   1e9de:	4c15      	ldr	r4, [pc, #84]	; (1ea34 <radio_tmr_start_tick+0x5c>)
   1e9e0:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   1e9e2:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1e9e6:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   1e9e8:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e9ec:	4b12      	ldr	r3, [pc, #72]	; (1ea38 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   1e9ee:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1e9f2:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   1e9f6:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e9f8:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   1e9fc:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ea00:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1ea04:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1ea08:	b158      	cbz	r0, 1ea22 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   1ea0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1ea0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1ea12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1ea16:	4a08      	ldr	r2, [pc, #32]	; (1ea38 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1ea18:	2001      	movs	r0, #1
   1ea1a:	bc30      	pop	{r4, r5}
   1ea1c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1ea20:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1ea22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1ea26:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1ea2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1ea2e:	e7f2      	b.n	1ea16 <radio_tmr_start_tick+0x3e>
   1ea30:	40008000 	.word	0x40008000
   1ea34:	4000b000 	.word	0x4000b000
   1ea38:	4001f000 	.word	0x4001f000

0001ea3c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1ea3c:	4b01      	ldr	r3, [pc, #4]	; (1ea44 <radio_tmr_start_get+0x8>)
   1ea3e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1ea42:	4770      	bx	lr
   1ea44:	4000b000 	.word	0x4000b000

0001ea48 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea48:	4903      	ldr	r1, [pc, #12]	; (1ea58 <radio_tmr_stop+0x10>)
   1ea4a:	4a04      	ldr	r2, [pc, #16]	; (1ea5c <radio_tmr_stop+0x14>)
   1ea4c:	2301      	movs	r3, #1
   1ea4e:	604b      	str	r3, [r1, #4]
   1ea50:	610b      	str	r3, [r1, #16]
   1ea52:	6053      	str	r3, [r2, #4]
   1ea54:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ea56:	4770      	bx	lr
   1ea58:	40008000 	.word	0x40008000
   1ea5c:	40009000 	.word	0x40009000

0001ea60 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1ea60:	4904      	ldr	r1, [pc, #16]	; (1ea74 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1ea62:	4b05      	ldr	r3, [pc, #20]	; (1ea78 <radio_tmr_hcto_configure+0x18>)
   1ea64:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1ea68:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1ea6c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1ea70:	4770      	bx	lr
   1ea72:	bf00      	nop
   1ea74:	40008000 	.word	0x40008000
   1ea78:	4001f000 	.word	0x4001f000

0001ea7c <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1ea7c:	4b01      	ldr	r3, [pc, #4]	; (1ea84 <radio_tmr_aa_get+0x8>)
   1ea7e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1ea82:	4770      	bx	lr
   1ea84:	40008000 	.word	0x40008000

0001ea88 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1ea88:	4b01      	ldr	r3, [pc, #4]	; (1ea90 <radio_tmr_aa_save+0x8>)
   1ea8a:	6018      	str	r0, [r3, #0]
}
   1ea8c:	4770      	bx	lr
   1ea8e:	bf00      	nop
   1ea90:	20003bac 	.word	0x20003bac

0001ea94 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1ea94:	4b01      	ldr	r3, [pc, #4]	; (1ea9c <radio_tmr_aa_restore+0x8>)
}
   1ea96:	6818      	ldr	r0, [r3, #0]
   1ea98:	4770      	bx	lr
   1ea9a:	bf00      	nop
   1ea9c:	20003bac 	.word	0x20003bac

0001eaa0 <radio_tmr_end_capture>:
   1eaa0:	4b02      	ldr	r3, [pc, #8]	; (1eaac <radio_tmr_end_capture+0xc>)
   1eaa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1eaa6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1eaaa:	4770      	bx	lr
   1eaac:	4001f000 	.word	0x4001f000

0001eab0 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1eab0:	4b01      	ldr	r3, [pc, #4]	; (1eab8 <radio_tmr_end_get+0x8>)
   1eab2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1eab6:	4770      	bx	lr
   1eab8:	40008000 	.word	0x40008000

0001eabc <radio_tmr_tifs_base_get>:
   1eabc:	4b01      	ldr	r3, [pc, #4]	; (1eac4 <radio_tmr_tifs_base_get+0x8>)
   1eabe:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1eac2:	4770      	bx	lr
   1eac4:	40008000 	.word	0x40008000

0001eac8 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eac8:	4b17      	ldr	r3, [pc, #92]	; (1eb28 <radio_ccm_rx_pkt_set+0x60>)
{
   1eaca:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eacc:	2400      	movs	r4, #0
{
   1eace:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ead0:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1ead2:	4816      	ldr	r0, [pc, #88]	; (1eb2c <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ead4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ead8:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1eadc:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1eae0:	4e13      	ldr	r6, [pc, #76]	; (1eb30 <radio_ccm_rx_pkt_set+0x68>)
   1eae2:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1eae4:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1eae8:	4812      	ldr	r0, [pc, #72]	; (1eb34 <radio_ccm_rx_pkt_set+0x6c>)
   1eaea:	2902      	cmp	r1, #2
   1eaec:	bf08      	it	eq
   1eaee:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1eaf0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1eaf4:	4810      	ldr	r0, [pc, #64]	; (1eb38 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1eaf6:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1eafa:	4910      	ldr	r1, [pc, #64]	; (1eb3c <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1eafc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1eb00:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1eb04:	4a0e      	ldr	r2, [pc, #56]	; (1eb40 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1eb06:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1eb0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1eb0e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1eb12:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1eb16:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1eb1a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eb1e:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1eb20:	bc70      	pop	{r4, r5, r6}
   1eb22:	601a      	str	r2, [r3, #0]
   1eb24:	4770      	bx	lr
   1eb26:	bf00      	nop
   1eb28:	4000f000 	.word	0x4000f000
   1eb2c:	40001000 	.word	0x40001000
   1eb30:	01010001 	.word	0x01010001
   1eb34:	01000001 	.word	0x01000001
   1eb38:	20003aa0 	.word	0x20003aa0
   1eb3c:	20003990 	.word	0x20003990
   1eb40:	4001f000 	.word	0x4001f000

0001eb44 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eb44:	4b0f      	ldr	r3, [pc, #60]	; (1eb84 <radio_ccm_tx_pkt_set+0x40>)
{
   1eb46:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eb48:	2200      	movs	r2, #0
{
   1eb4a:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1eb4c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1eb4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1eb52:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1eb56:	480c      	ldr	r0, [pc, #48]	; (1eb88 <radio_ccm_tx_pkt_set+0x44>)
   1eb58:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1eb5c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1eb60:	480a      	ldr	r0, [pc, #40]	; (1eb8c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1eb62:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1eb66:	4c0a      	ldr	r4, [pc, #40]	; (1eb90 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1eb68:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1eb6c:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1eb6e:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1eb72:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1eb76:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1eb78:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1eb7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1eb80:	6019      	str	r1, [r3, #0]
}
   1eb82:	4770      	bx	lr
   1eb84:	4000f000 	.word	0x4000f000
   1eb88:	01010000 	.word	0x01010000
   1eb8c:	20003aa0 	.word	0x20003aa0
   1eb90:	20003990 	.word	0x20003990

0001eb94 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1eb94:	4a0e      	ldr	r2, [pc, #56]	; (1ebd0 <radio_ccm_is_done+0x3c>)
   1eb96:	2302      	movs	r3, #2
   1eb98:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1eb9c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1eba0:	b933      	cbnz	r3, 1ebb0 <radio_ccm_is_done+0x1c>
		__WFE();
   1eba2:	bf20      	wfe
		__SEV();
   1eba4:	bf40      	sev
		__WFE();
   1eba6:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1eba8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1ebac:	2b00      	cmp	r3, #0
   1ebae:	d0f8      	beq.n	1eba2 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ebb0:	4b07      	ldr	r3, [pc, #28]	; (1ebd0 <radio_ccm_is_done+0x3c>)
   1ebb2:	4a08      	ldr	r2, [pc, #32]	; (1ebd4 <radio_ccm_is_done+0x40>)
   1ebb4:	2002      	movs	r0, #2
   1ebb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1ebba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1ebbe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1ebc2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1ebc6:	fab0 f080 	clz	r0, r0
   1ebca:	0940      	lsrs	r0, r0, #5
   1ebcc:	4770      	bx	lr
   1ebce:	bf00      	nop
   1ebd0:	4000f000 	.word	0x4000f000
   1ebd4:	e000e100 	.word	0xe000e100

0001ebd8 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1ebd8:	4b03      	ldr	r3, [pc, #12]	; (1ebe8 <radio_ccm_mic_is_valid+0x10>)
   1ebda:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1ebde:	3800      	subs	r0, #0
   1ebe0:	bf18      	it	ne
   1ebe2:	2001      	movne	r0, #1
   1ebe4:	4770      	bx	lr
   1ebe6:	bf00      	nop
   1ebe8:	4000f000 	.word	0x4000f000

0001ebec <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ebec:	4a15      	ldr	r2, [pc, #84]	; (1ec44 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1ebee:	4b16      	ldr	r3, [pc, #88]	; (1ec48 <radio_ar_configure+0x5c>)
{
   1ebf0:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ebf2:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1ebf6:	4e15      	ldr	r6, [pc, #84]	; (1ec4c <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1ebf8:	2703      	movs	r7, #3
   1ebfa:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1ebfe:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1ec00:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ec04:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1ec06:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1ec0a:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1ec0c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1ec10:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1ec14:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1ec18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1ec1c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1ec20:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1ec24:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1ec28:	4909      	ldr	r1, [pc, #36]	; (1ec50 <radio_ar_configure+0x64>)
   1ec2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ec2e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1ec32:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1ec36:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1ec3a:	bcf0      	pop	{r4, r5, r6, r7}
   1ec3c:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1ec40:	4770      	bx	lr
   1ec42:	bf00      	nop
   1ec44:	40001000 	.word	0x40001000
   1ec48:	4000f000 	.word	0x4000f000
   1ec4c:	2000398c 	.word	0x2000398c
   1ec50:	4001f000 	.word	0x4001f000

0001ec54 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1ec54:	4b01      	ldr	r3, [pc, #4]	; (1ec5c <radio_ar_match_get+0x8>)
   1ec56:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1ec5a:	4770      	bx	lr
   1ec5c:	4000f000 	.word	0x4000f000

0001ec60 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1ec60:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1ec62:	4807      	ldr	r0, [pc, #28]	; (1ec80 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1ec64:	4c07      	ldr	r4, [pc, #28]	; (1ec84 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1ec66:	4a08      	ldr	r2, [pc, #32]	; (1ec88 <radio_ar_status_reset+0x28>)
   1ec68:	2300      	movs	r3, #0
   1ec6a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1ec6e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1ec72:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1ec76:	bc10      	pop	{r4}
   1ec78:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1ec7c:	4770      	bx	lr
   1ec7e:	bf00      	nop
   1ec80:	4000f000 	.word	0x4000f000
   1ec84:	40001000 	.word	0x40001000
   1ec88:	4001f000 	.word	0x4001f000

0001ec8c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1ec8c:	4b08      	ldr	r3, [pc, #32]	; (1ecb0 <radio_ar_has_match+0x24>)
   1ec8e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1ec92:	b160      	cbz	r0, 1ecae <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1ec94:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1ec98:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1ec9c:	b138      	cbz	r0, 1ecae <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1ec9e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1eca2:	b120      	cbz	r0, 1ecae <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1eca4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1eca8:	fab0 f080 	clz	r0, r0
   1ecac:	0940      	lsrs	r0, r0, #5
}
   1ecae:	4770      	bx	lr
   1ecb0:	40001000 	.word	0x40001000

0001ecb4 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1ecb4:	2902      	cmp	r1, #2
{
   1ecb6:	b510      	push	{r4, lr}
   1ecb8:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1ecba:	d00b      	beq.n	1ecd4 <mayfly_enable_cb+0x20>
   1ecbc:	4a0a      	ldr	r2, [pc, #40]	; (1ece8 <mayfly_enable_cb+0x34>)
   1ecbe:	490b      	ldr	r1, [pc, #44]	; (1ecec <mayfly_enable_cb+0x38>)
   1ecc0:	480b      	ldr	r0, [pc, #44]	; (1ecf0 <mayfly_enable_cb+0x3c>)
   1ecc2:	231e      	movs	r3, #30
   1ecc4:	f005 ff9a 	bl	24bfc <printk>
   1ecc8:	4040      	eors	r0, r0
   1ecca:	f380 8811 	msr	BASEPRI, r0
   1ecce:	f04f 0003 	mov.w	r0, #3
   1ecd2:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1ecd4:	200b      	movs	r0, #11
	if (enable) {
   1ecd6:	b11c      	cbz	r4, 1ece0 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1ecd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1ecdc:	f7eb bc0e 	b.w	a4fc <arch_irq_enable>
}
   1ece0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1ece4:	f7eb bc1a 	b.w	a51c <arch_irq_disable>
   1ece8:	0002e068 	.word	0x0002e068
   1ecec:	0002e0b8 	.word	0x0002e0b8
   1ecf0:	0002d27c 	.word	0x0002d27c

0001ecf4 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1ecf4:	b129      	cbz	r1, 1ed02 <mayfly_is_enabled+0xe>
   1ecf6:	3901      	subs	r1, #1
   1ecf8:	2901      	cmp	r1, #1
   1ecfa:	d805      	bhi.n	1ed08 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1ecfc:	200b      	movs	r0, #11
   1ecfe:	f7eb bc21 	b.w	a544 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1ed02:	2018      	movs	r0, #24
   1ed04:	f7eb bc1e 	b.w	a544 <arch_irq_is_enabled>
{
   1ed08:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1ed0a:	4a07      	ldr	r2, [pc, #28]	; (1ed28 <mayfly_is_enabled+0x34>)
   1ed0c:	4907      	ldr	r1, [pc, #28]	; (1ed2c <mayfly_is_enabled+0x38>)
   1ed0e:	4808      	ldr	r0, [pc, #32]	; (1ed30 <mayfly_is_enabled+0x3c>)
   1ed10:	2336      	movs	r3, #54	; 0x36
   1ed12:	f005 ff73 	bl	24bfc <printk>
   1ed16:	4040      	eors	r0, r0
   1ed18:	f380 8811 	msr	BASEPRI, r0
   1ed1c:	f04f 0003 	mov.w	r0, #3
   1ed20:	df02      	svc	2
		break;
	}

	return 0;
}
   1ed22:	2000      	movs	r0, #0
   1ed24:	bd08      	pop	{r3, pc}
   1ed26:	bf00      	nop
   1ed28:	0002e068 	.word	0x0002e068
   1ed2c:	0002d314 	.word	0x0002d314
   1ed30:	0002d27c 	.word	0x0002d27c

0001ed34 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1ed34:	4288      	cmp	r0, r1
   1ed36:	d00b      	beq.n	1ed50 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1ed38:	2801      	cmp	r0, #1
   1ed3a:	d003      	beq.n	1ed44 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1ed3c:	2802      	cmp	r0, #2
   1ed3e:	d009      	beq.n	1ed54 <mayfly_prio_is_equal+0x20>
   1ed40:	2000      	movs	r0, #0
#endif
	       0;
}
   1ed42:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1ed44:	f1a1 0002 	sub.w	r0, r1, #2
   1ed48:	fab0 f080 	clz	r0, r0
   1ed4c:	0940      	lsrs	r0, r0, #5
   1ed4e:	4770      	bx	lr
   1ed50:	2001      	movs	r0, #1
   1ed52:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1ed54:	f1a1 0001 	sub.w	r0, r1, #1
   1ed58:	fab0 f080 	clz	r0, r0
   1ed5c:	0940      	lsrs	r0, r0, #5
   1ed5e:	4770      	bx	lr

0001ed60 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1ed60:	2901      	cmp	r1, #1
{
   1ed62:	b508      	push	{r3, lr}
	switch (callee_id) {
   1ed64:	d00f      	beq.n	1ed86 <mayfly_pend+0x26>
   1ed66:	2902      	cmp	r1, #2
   1ed68:	d00d      	beq.n	1ed86 <mayfly_pend+0x26>
   1ed6a:	b191      	cbz	r1, 1ed92 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1ed6c:	4a0c      	ldr	r2, [pc, #48]	; (1eda0 <mayfly_pend+0x40>)
   1ed6e:	490d      	ldr	r1, [pc, #52]	; (1eda4 <mayfly_pend+0x44>)
   1ed70:	480d      	ldr	r0, [pc, #52]	; (1eda8 <mayfly_pend+0x48>)
   1ed72:	2367      	movs	r3, #103	; 0x67
   1ed74:	f005 ff42 	bl	24bfc <printk>
   1ed78:	4040      	eors	r0, r0
   1ed7a:	f380 8811 	msr	BASEPRI, r0
   1ed7e:	f04f 0003 	mov.w	r0, #3
   1ed82:	df02      	svc	2
		break;
	}
}
   1ed84:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ed86:	4b09      	ldr	r3, [pc, #36]	; (1edac <mayfly_pend+0x4c>)
   1ed88:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ed8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ed90:	bd08      	pop	{r3, pc}
   1ed92:	4b06      	ldr	r3, [pc, #24]	; (1edac <mayfly_pend+0x4c>)
   1ed94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1ed98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ed9c:	bd08      	pop	{r3, pc}
   1ed9e:	bf00      	nop
   1eda0:	0002e068 	.word	0x0002e068
   1eda4:	0002d314 	.word	0x0002d314
   1eda8:	0002d27c 	.word	0x0002d27c
   1edac:	e000e100 	.word	0xe000e100

0001edb0 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1edb0:	2803      	cmp	r0, #3
{
   1edb2:	b510      	push	{r4, lr}
   1edb4:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1edb6:	d804      	bhi.n	1edc2 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1edb8:	4b11      	ldr	r3, [pc, #68]	; (1ee00 <hal_ticker_instance0_caller_id_get+0x50>)
   1edba:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1edbc:	b18c      	cbz	r4, 1ede2 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1edbe:	4620      	mov	r0, r4
   1edc0:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1edc2:	4a10      	ldr	r2, [pc, #64]	; (1ee04 <hal_ticker_instance0_caller_id_get+0x54>)
   1edc4:	4910      	ldr	r1, [pc, #64]	; (1ee08 <hal_ticker_instance0_caller_id_get+0x58>)
   1edc6:	4811      	ldr	r0, [pc, #68]	; (1ee0c <hal_ticker_instance0_caller_id_get+0x5c>)
   1edc8:	232b      	movs	r3, #43	; 0x2b
   1edca:	f005 ff17 	bl	24bfc <printk>
   1edce:	4040      	eors	r0, r0
   1edd0:	f380 8811 	msr	BASEPRI, r0
   1edd4:	f04f 0003 	mov.w	r0, #3
   1edd8:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1edda:	4b09      	ldr	r3, [pc, #36]	; (1ee00 <hal_ticker_instance0_caller_id_get+0x50>)
   1eddc:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1edde:	2c00      	cmp	r4, #0
   1ede0:	d1ed      	bne.n	1edbe <hal_ticker_instance0_caller_id_get+0xe>
   1ede2:	4a08      	ldr	r2, [pc, #32]	; (1ee04 <hal_ticker_instance0_caller_id_get+0x54>)
   1ede4:	490a      	ldr	r1, [pc, #40]	; (1ee10 <hal_ticker_instance0_caller_id_get+0x60>)
   1ede6:	4809      	ldr	r0, [pc, #36]	; (1ee0c <hal_ticker_instance0_caller_id_get+0x5c>)
   1ede8:	232e      	movs	r3, #46	; 0x2e
   1edea:	f005 ff07 	bl	24bfc <printk>
   1edee:	4040      	eors	r0, r0
   1edf0:	f380 8811 	msr	BASEPRI, r0
   1edf4:	f04f 0003 	mov.w	r0, #3
   1edf8:	df02      	svc	2
}
   1edfa:	4620      	mov	r0, r4
   1edfc:	bd10      	pop	{r4, pc}
   1edfe:	bf00      	nop
   1ee00:	0002e170 	.word	0x0002e170
   1ee04:	0002e0dc 	.word	0x0002e0dc
   1ee08:	0002e12c 	.word	0x0002e12c
   1ee0c:	0002d27c 	.word	0x0002d27c
   1ee10:	0002e14c 	.word	0x0002e14c

0001ee14 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1ee14:	3801      	subs	r0, #1
{
   1ee16:	b510      	push	{r4, lr}
   1ee18:	461c      	mov	r4, r3
	switch (caller_id) {
   1ee1a:	2804      	cmp	r0, #4
   1ee1c:	f200 8082 	bhi.w	1ef24 <hal_ticker_instance0_sched+0x110>
   1ee20:	e8df f000 	tbb	[pc, r0]
   1ee24:	3f302112 	.word	0x3f302112
   1ee28:	03          	.byte	0x03
   1ee29:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1ee2a:	2904      	cmp	r1, #4
   1ee2c:	d04a      	beq.n	1eec4 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1ee2e:	4a44      	ldr	r2, [pc, #272]	; (1ef40 <hal_ticker_instance0_sched+0x12c>)
   1ee30:	4944      	ldr	r1, [pc, #272]	; (1ef44 <hal_ticker_instance0_sched+0x130>)
   1ee32:	4845      	ldr	r0, [pc, #276]	; (1ef48 <hal_ticker_instance0_sched+0x134>)
   1ee34:	23ba      	movs	r3, #186	; 0xba
   1ee36:	f005 fee1 	bl	24bfc <printk>
   1ee3a:	4040      	eors	r0, r0
   1ee3c:	f380 8811 	msr	BASEPRI, r0
   1ee40:	f04f 0003 	mov.w	r0, #3
   1ee44:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1ee46:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ee48:	2904      	cmp	r1, #4
   1ee4a:	d043      	beq.n	1eed4 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1ee4c:	4a3c      	ldr	r2, [pc, #240]	; (1ef40 <hal_ticker_instance0_sched+0x12c>)
   1ee4e:	493d      	ldr	r1, [pc, #244]	; (1ef44 <hal_ticker_instance0_sched+0x130>)
   1ee50:	483d      	ldr	r0, [pc, #244]	; (1ef48 <hal_ticker_instance0_sched+0x134>)
   1ee52:	234e      	movs	r3, #78	; 0x4e
   1ee54:	f005 fed2 	bl	24bfc <printk>
   1ee58:	4040      	eors	r0, r0
   1ee5a:	f380 8811 	msr	BASEPRI, r0
   1ee5e:	f04f 0003 	mov.w	r0, #3
   1ee62:	df02      	svc	2
}
   1ee64:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ee66:	2903      	cmp	r1, #3
   1ee68:	d03c      	beq.n	1eee4 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1ee6a:	4a35      	ldr	r2, [pc, #212]	; (1ef40 <hal_ticker_instance0_sched+0x12c>)
   1ee6c:	4935      	ldr	r1, [pc, #212]	; (1ef44 <hal_ticker_instance0_sched+0x130>)
   1ee6e:	4836      	ldr	r0, [pc, #216]	; (1ef48 <hal_ticker_instance0_sched+0x134>)
   1ee70:	2365      	movs	r3, #101	; 0x65
   1ee72:	f005 fec3 	bl	24bfc <printk>
   1ee76:	4040      	eors	r0, r0
   1ee78:	f380 8811 	msr	BASEPRI, r0
   1ee7c:	f04f 0003 	mov.w	r0, #3
   1ee80:	df02      	svc	2
}
   1ee82:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ee84:	2904      	cmp	r1, #4
   1ee86:	d035      	beq.n	1eef4 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1ee88:	4a2d      	ldr	r2, [pc, #180]	; (1ef40 <hal_ticker_instance0_sched+0x12c>)
   1ee8a:	492e      	ldr	r1, [pc, #184]	; (1ef44 <hal_ticker_instance0_sched+0x130>)
   1ee8c:	482e      	ldr	r0, [pc, #184]	; (1ef48 <hal_ticker_instance0_sched+0x134>)
   1ee8e:	237c      	movs	r3, #124	; 0x7c
   1ee90:	f005 feb4 	bl	24bfc <printk>
   1ee94:	4040      	eors	r0, r0
   1ee96:	f380 8811 	msr	BASEPRI, r0
   1ee9a:	f04f 0003 	mov.w	r0, #3
   1ee9e:	df02      	svc	2
}
   1eea0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1eea2:	2903      	cmp	r1, #3
   1eea4:	d036      	beq.n	1ef14 <hal_ticker_instance0_sched+0x100>
   1eea6:	2904      	cmp	r1, #4
   1eea8:	d02c      	beq.n	1ef04 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1eeaa:	4a25      	ldr	r2, [pc, #148]	; (1ef40 <hal_ticker_instance0_sched+0x12c>)
   1eeac:	4925      	ldr	r1, [pc, #148]	; (1ef44 <hal_ticker_instance0_sched+0x130>)
   1eeae:	4826      	ldr	r0, [pc, #152]	; (1ef48 <hal_ticker_instance0_sched+0x134>)
   1eeb0:	23a2      	movs	r3, #162	; 0xa2
   1eeb2:	f005 fea3 	bl	24bfc <printk>
   1eeb6:	4040      	eors	r0, r0
   1eeb8:	f380 8811 	msr	BASEPRI, r0
   1eebc:	f04f 0003 	mov.w	r0, #3
   1eec0:	df02      	svc	2
}
   1eec2:	bd10      	pop	{r4, pc}
			m.param = instance;
   1eec4:	4b21      	ldr	r3, [pc, #132]	; (1ef4c <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1eec6:	2102      	movs	r1, #2
			m.param = instance;
   1eec8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1eeca:	2003      	movs	r0, #3
}
   1eecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1eed0:	f7f4 bb50 	b.w	13574 <mayfly_enqueue>
			m.param = instance;
   1eed4:	4b1e      	ldr	r3, [pc, #120]	; (1ef50 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1eed6:	2102      	movs	r1, #2
			m.param = instance;
   1eed8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1eeda:	2000      	movs	r0, #0
}
   1eedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1eee0:	f7f4 bb48 	b.w	13574 <mayfly_enqueue>
			m.param = instance;
   1eee4:	4b1b      	ldr	r3, [pc, #108]	; (1ef54 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1eee6:	2101      	movs	r1, #1
			m.param = instance;
   1eee8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1eeea:	4608      	mov	r0, r1
}
   1eeec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1eef0:	f7f4 bb40 	b.w	13574 <mayfly_enqueue>
			m.param = instance;
   1eef4:	4b18      	ldr	r3, [pc, #96]	; (1ef58 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1eef6:	2102      	movs	r1, #2
			m.param = instance;
   1eef8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1eefa:	2001      	movs	r0, #1
}
   1eefc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1ef00:	f7f4 bb38 	b.w	13574 <mayfly_enqueue>
			m.param = instance;
   1ef04:	4b15      	ldr	r3, [pc, #84]	; (1ef5c <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef06:	2102      	movs	r1, #2
			m.param = instance;
   1ef08:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef0a:	4608      	mov	r0, r1
}
   1ef0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef10:	f7f4 bb30 	b.w	13574 <mayfly_enqueue>
			m.param = instance;
   1ef14:	4b12      	ldr	r3, [pc, #72]	; (1ef60 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef16:	2101      	movs	r1, #1
			m.param = instance;
   1ef18:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef1a:	2002      	movs	r0, #2
}
   1ef1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1ef20:	f7f4 bb28 	b.w	13574 <mayfly_enqueue>
		LL_ASSERT(0);
   1ef24:	4a06      	ldr	r2, [pc, #24]	; (1ef40 <hal_ticker_instance0_sched+0x12c>)
   1ef26:	4907      	ldr	r1, [pc, #28]	; (1ef44 <hal_ticker_instance0_sched+0x130>)
   1ef28:	4807      	ldr	r0, [pc, #28]	; (1ef48 <hal_ticker_instance0_sched+0x134>)
   1ef2a:	23c0      	movs	r3, #192	; 0xc0
   1ef2c:	f005 fe66 	bl	24bfc <printk>
   1ef30:	4040      	eors	r0, r0
   1ef32:	f380 8811 	msr	BASEPRI, r0
   1ef36:	f04f 0003 	mov.w	r0, #3
   1ef3a:	df02      	svc	2
}
   1ef3c:	bd10      	pop	{r4, pc}
   1ef3e:	bf00      	nop
   1ef40:	0002e0dc 	.word	0x0002e0dc
   1ef44:	0002d314 	.word	0x0002d314
   1ef48:	0002d27c 	.word	0x0002d27c
   1ef4c:	20000788 	.word	0x20000788
   1ef50:	20000778 	.word	0x20000778
   1ef54:	20000768 	.word	0x20000768
   1ef58:	200007b8 	.word	0x200007b8
   1ef5c:	20000798 	.word	0x20000798
   1ef60:	200007a8 	.word	0x200007a8

0001ef64 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1ef64:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1ef66:	2000      	movs	r0, #0
   1ef68:	f7ff b9ca 	b.w	1e300 <cntr_cmp_set>

0001ef6c <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1ef6c:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1ef6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ef72:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1ef76:	3201      	adds	r2, #1
   1ef78:	d008      	beq.n	1ef8c <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1ef7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ef7e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1ef82:	f013 0301 	ands.w	r3, r3, #1
   1ef86:	d10a      	bne.n	1ef9e <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1ef88:	4618      	mov	r0, r3
}
   1ef8a:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1ef8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1ef90:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ef94:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1ef96:	4293      	cmp	r3, r2
   1ef98:	d1ef      	bne.n	1ef7a <hci_vendor_read_static_addr+0xe>
	return 0;
   1ef9a:	2000      	movs	r0, #0
}
   1ef9c:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1ef9e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1efa2:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1efa4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1efa6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1efaa:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1efae:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1efb0:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1efb2:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1efb6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1efba:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1efbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1efc0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1efc4:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1efc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1efca:	3301      	adds	r3, #1
   1efcc:	d03b      	beq.n	1f046 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1efce:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1efd2:	3301      	adds	r3, #1
   1efd4:	d037      	beq.n	1f046 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1efd6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1efda:	3301      	adds	r3, #1
   1efdc:	d033      	beq.n	1f046 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1efde:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1efe2:	3301      	adds	r3, #1
   1efe4:	d02f      	beq.n	1f046 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1efe6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1efea:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1efec:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1efee:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1eff2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1eff6:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1eff8:	f880 c009 	strb.w	ip, [r0, #9]
   1effc:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1effe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1f002:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1f004:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1f006:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1f00a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1f00e:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1f010:	f880 c00d 	strb.w	ip, [r0, #13]
   1f014:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1f016:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1f01a:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1f01c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1f01e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1f022:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1f026:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1f028:	73c3      	strb	r3, [r0, #15]
   1f02a:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1f02e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1f032:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1f034:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1f036:	0a11      	lsrs	r1, r2, #8
   1f038:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1f03c:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1f03e:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1f040:	7541      	strb	r1, [r0, #21]
		return 1;
   1f042:	2001      	movs	r0, #1
}
   1f044:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1f046:	2210      	movs	r2, #16
   1f048:	2100      	movs	r1, #0
   1f04a:	3006      	adds	r0, #6
   1f04c:	f009 fabe 	bl	285cc <memset>
		return 1;
   1f050:	2001      	movs	r0, #1
}
   1f052:	bd08      	pop	{r3, pc}

0001f054 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1f054:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1f056:	2210      	movs	r2, #16
{
   1f058:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1f05a:	2100      	movs	r1, #0
   1f05c:	f009 fab6 	bl	285cc <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1f060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f064:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1f068:	3201      	adds	r2, #1
   1f06a:	d034      	beq.n	1f0d6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1f06c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1f070:	3201      	adds	r2, #1
   1f072:	d030      	beq.n	1f0d6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1f074:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1f078:	3201      	adds	r2, #1
   1f07a:	d02c      	beq.n	1f0d6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1f07c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1f080:	3201      	adds	r2, #1
   1f082:	d028      	beq.n	1f0d6 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1f084:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1f088:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1f08a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1f08c:	0a08      	lsrs	r0, r1, #8
   1f08e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1f092:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1f094:	70e0      	strb	r0, [r4, #3]
   1f096:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1f098:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1f09c:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1f09e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1f0a0:	0a08      	lsrs	r0, r1, #8
   1f0a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1f0a6:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1f0a8:	71e0      	strb	r0, [r4, #7]
   1f0aa:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1f0ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1f0b0:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1f0b2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1f0b4:	0a08      	lsrs	r0, r1, #8
   1f0b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1f0ba:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1f0bc:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1f0be:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1f0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1f0c4:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1f0c6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1f0c8:	0a11      	lsrs	r1, r2, #8
   1f0ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1f0ce:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   1f0d0:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1f0d2:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1f0d4:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1f0d6:	4620      	mov	r0, r4
   1f0d8:	2210      	movs	r2, #16
}
   1f0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1f0de:	2100      	movs	r1, #0
   1f0e0:	f009 ba74 	b.w	285cc <memset>

0001f0e4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1f0e4:	4b02      	ldr	r3, [pc, #8]	; (1f0f0 <net_buf_pool_get+0xc>)
   1f0e6:	222c      	movs	r2, #44	; 0x2c
   1f0e8:	fb02 3000 	mla	r0, r2, r0, r3
   1f0ec:	4770      	bx	lr
   1f0ee:	bf00      	nop
   1f0f0:	20000c00 	.word	0x20000c00

0001f0f4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f0f4:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f0f6:	4b06      	ldr	r3, [pc, #24]	; (1f110 <net_buf_id+0x1c>)
   1f0f8:	212c      	movs	r1, #44	; 0x2c
   1f0fa:	fb01 3302 	mla	r3, r1, r2, r3
   1f0fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f100:	7f1b      	ldrb	r3, [r3, #28]
   1f102:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f104:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f106:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1f10a:	fbb0 f0f3 	udiv	r0, r0, r3
   1f10e:	4770      	bx	lr
   1f110:	20000c00 	.word	0x20000c00

0001f114 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1f114:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f116:	4b0a      	ldr	r3, [pc, #40]	; (1f140 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f118:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f11a:	242c      	movs	r4, #44	; 0x2c
   1f11c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1f120:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f124:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1f126:	6823      	ldr	r3, [r4, #0]
   1f128:	429a      	cmp	r2, r3
   1f12a:	bf94      	ite	ls
   1f12c:	600a      	strls	r2, [r1, #0]
   1f12e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1f130:	f7ff ffe0 	bl	1f0f4 <net_buf_id>
   1f134:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1f138:	fb02 3000 	mla	r0, r2, r0, r3
   1f13c:	bd10      	pop	{r4, pc}
   1f13e:	bf00      	nop
   1f140:	20000c00 	.word	0x20000c00

0001f144 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1f144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f148:	4605      	mov	r5, r0
   1f14a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f14c:	4610      	mov	r0, r2
   1f14e:	4619      	mov	r1, r3
{
   1f150:	4691      	mov	r9, r2
   1f152:	4698      	mov	r8, r3
   1f154:	4617      	mov	r7, r2
   1f156:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f158:	f00c fd1b 	bl	2bb92 <sys_clock_timeout_end_calc>
   1f15c:	4682      	mov	sl, r0
   1f15e:	468b      	mov	fp, r1
	__asm__ volatile(
   1f160:	f04f 0320 	mov.w	r3, #32
   1f164:	f3ef 8111 	mrs	r1, BASEPRI
   1f168:	f383 8812 	msr	BASEPRI_MAX, r3
   1f16c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1f170:	8b6b      	ldrh	r3, [r5, #26]
   1f172:	2b00      	cmp	r3, #0
   1f174:	d05a      	beq.n	1f22c <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1f176:	8b2a      	ldrh	r2, [r5, #24]
   1f178:	429a      	cmp	r2, r3
   1f17a:	d93e      	bls.n	1f1fa <net_buf_alloc_len+0xb6>
   1f17c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1f17e:	2200      	movs	r2, #0
   1f180:	2300      	movs	r3, #0
   1f182:	4628      	mov	r0, r5
   1f184:	f004 fc66 	bl	23a54 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1f188:	9900      	ldr	r1, [sp, #0]
   1f18a:	4604      	mov	r4, r0
   1f18c:	2800      	cmp	r0, #0
   1f18e:	d034      	beq.n	1f1fa <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1f190:	f381 8811 	msr	BASEPRI, r1
   1f194:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1f198:	9b01      	ldr	r3, [sp, #4]
   1f19a:	2b00      	cmp	r3, #0
   1f19c:	d056      	beq.n	1f24c <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1f19e:	ea58 0309 	orrs.w	r3, r8, r9
   1f1a2:	d00f      	beq.n	1f1c4 <net_buf_alloc_len+0x80>
   1f1a4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1f1a8:	bf08      	it	eq
   1f1aa:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1f1ae:	d009      	beq.n	1f1c4 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1f1b0:	f005 fb60 	bl	24874 <sys_clock_tick_get>
   1f1b4:	ebba 0700 	subs.w	r7, sl, r0
   1f1b8:	eb6b 0601 	sbc.w	r6, fp, r1
   1f1bc:	2e00      	cmp	r6, #0
   1f1be:	bfbc      	itt	lt
   1f1c0:	2700      	movlt	r7, #0
   1f1c2:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f1c4:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1f1c6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1f264 <net_buf_alloc_len+0x120>
   1f1ca:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1f1ce:	fb09 8303 	mla	r3, r9, r3, r8
   1f1d2:	463a      	mov	r2, r7
   1f1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f1d6:	681b      	ldr	r3, [r3, #0]
   1f1d8:	a901      	add	r1, sp, #4
   1f1da:	681d      	ldr	r5, [r3, #0]
   1f1dc:	4620      	mov	r0, r4
   1f1de:	4633      	mov	r3, r6
   1f1e0:	47a8      	blx	r5
   1f1e2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1f1e4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1f1e6:	2800      	cmp	r0, #0
   1f1e8:	d131      	bne.n	1f24e <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1f1ea:	79a0      	ldrb	r0, [r4, #6]
   1f1ec:	4621      	mov	r1, r4
   1f1ee:	fb00 8009 	mla	r0, r0, r9, r8
   1f1f2:	f00c fa2a 	bl	2b64a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1f1f6:	462c      	mov	r4, r5
}
   1f1f8:	e024      	b.n	1f244 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1f1fa:	8b68      	ldrh	r0, [r5, #26]
   1f1fc:	1e43      	subs	r3, r0, #1
   1f1fe:	836b      	strh	r3, [r5, #26]
   1f200:	f381 8811 	msr	BASEPRI, r1
   1f204:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f208:	7f2a      	ldrb	r2, [r5, #28]
   1f20a:	f102 0417 	add.w	r4, r2, #23
   1f20e:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1f212:	8b2c      	ldrh	r4, [r5, #24]
   1f214:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1f216:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1f218:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1f21c:	4811      	ldr	r0, [pc, #68]	; (1f264 <net_buf_alloc_len+0x120>)
   1f21e:	4b12      	ldr	r3, [pc, #72]	; (1f268 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1f220:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1f222:	1a2d      	subs	r5, r5, r0
   1f224:	10ad      	asrs	r5, r5, #2
   1f226:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1f228:	71a5      	strb	r5, [r4, #6]
		goto success;
   1f22a:	e7b5      	b.n	1f198 <net_buf_alloc_len+0x54>
   1f22c:	f381 8811 	msr	BASEPRI, r1
   1f230:	f3bf 8f6f 	isb	sy
   1f234:	464a      	mov	r2, r9
   1f236:	4643      	mov	r3, r8
   1f238:	4628      	mov	r0, r5
   1f23a:	f004 fc0b 	bl	23a54 <z_impl_k_queue_get>
	if (!buf) {
   1f23e:	4604      	mov	r4, r0
   1f240:	2800      	cmp	r0, #0
   1f242:	d1a9      	bne.n	1f198 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1f244:	4620      	mov	r0, r4
   1f246:	b003      	add	sp, #12
   1f248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1f24c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1f24e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1f250:	2201      	movs	r2, #1
	buf->frags = NULL;
   1f252:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1f254:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1f256:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1f258:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1f25a:	6923      	ldr	r3, [r4, #16]
   1f25c:	81e2      	strh	r2, [r4, #14]
   1f25e:	60a3      	str	r3, [r4, #8]
	return buf;
   1f260:	e7f0      	b.n	1f244 <net_buf_alloc_len+0x100>
   1f262:	bf00      	nop
   1f264:	20000c00 	.word	0x20000c00
   1f268:	ba2e8ba3 	.word	0xba2e8ba3

0001f26c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1f26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f270:	4d16      	ldr	r5, [pc, #88]	; (1f2cc <net_buf_unref+0x60>)
   1f272:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1f274:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1f276:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1f278:	b90c      	cbnz	r4, 1f27e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1f27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1f27e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1f280:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1f284:	3b01      	subs	r3, #1
   1f286:	b2db      	uxtb	r3, r3
   1f288:	7123      	strb	r3, [r4, #4]
   1f28a:	2b00      	cmp	r3, #0
   1f28c:	d1f5      	bne.n	1f27a <net_buf_unref+0xe>
		if (buf->__buf) {
   1f28e:	6921      	ldr	r1, [r4, #16]
   1f290:	b159      	cbz	r1, 1f2aa <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1f292:	7963      	ldrb	r3, [r4, #5]
   1f294:	079b      	lsls	r3, r3, #30
   1f296:	d407      	bmi.n	1f2a8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f298:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1f29a:	fb07 5303 	mla	r3, r7, r3, r5
   1f29e:	4620      	mov	r0, r4
   1f2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f2a2:	681b      	ldr	r3, [r3, #0]
   1f2a4:	689b      	ldr	r3, [r3, #8]
   1f2a6:	4798      	blx	r3
			buf->__buf = NULL;
   1f2a8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1f2aa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1f2ac:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1f2ae:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1f2b2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1f2b4:	6a1b      	ldr	r3, [r3, #32]
   1f2b6:	b11b      	cbz	r3, 1f2c0 <net_buf_unref+0x54>
			pool->destroy(buf);
   1f2b8:	4620      	mov	r0, r4
   1f2ba:	4798      	blx	r3
{
   1f2bc:	4644      	mov	r4, r8
   1f2be:	e7db      	b.n	1f278 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1f2c0:	4621      	mov	r1, r4
   1f2c2:	fb00 5007 	mla	r0, r0, r7, r5
   1f2c6:	f00c f9c0 	bl	2b64a <k_queue_prepend>
}
   1f2ca:	e7f7      	b.n	1f2bc <net_buf_unref+0x50>
   1f2cc:	20000c00 	.word	0x20000c00

0001f2d0 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   1f2d0:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1f2d4:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1f2d6:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1f2d8:	d004      	beq.n	1f2e4 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   1f2da:	f010 0f78 	tst.w	r0, #120	; 0x78
   1f2de:	d001      	beq.n	1f2e4 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   1f2e0:	2000      	movs	r0, #0
   1f2e2:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   1f2e4:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   1f2e6:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1f2ea:	f000 0008 	and.w	r0, r0, #8
   1f2ee:	da05      	bge.n	1f2fc <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1f2f0:	b958      	cbnz	r0, 1f30a <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   1f2f2:	4808      	ldr	r0, [pc, #32]	; (1f314 <endpoint_ctx+0x44>)
   1f2f4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1f2f8:	304c      	adds	r0, #76	; 0x4c
   1f2fa:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1f2fc:	b938      	cbnz	r0, 1f30e <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   1f2fe:	4805      	ldr	r0, [pc, #20]	; (1f314 <endpoint_ctx+0x44>)
   1f300:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1f304:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   1f308:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   1f30a:	4803      	ldr	r0, [pc, #12]	; (1f318 <endpoint_ctx+0x48>)
   1f30c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   1f30e:	4803      	ldr	r0, [pc, #12]	; (1f31c <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   1f310:	4770      	bx	lr
   1f312:	bf00      	nop
   1f314:	200041e0 	.word	0x200041e0
   1f318:	2000432c 	.word	0x2000432c
   1f31c:	2000444c 	.word	0x2000444c

0001f320 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   1f320:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   1f322:	4801      	ldr	r0, [pc, #4]	; (1f328 <usbd_evt_put+0x8>)
   1f324:	f00c b986 	b.w	2b634 <k_queue_append>
   1f328:	20000be8 	.word	0x20000be8

0001f32c <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1f32c:	4901      	ldr	r1, [pc, #4]	; (1f334 <usbd_work_schedule+0x8>)
   1f32e:	4802      	ldr	r0, [pc, #8]	; (1f338 <usbd_work_schedule+0xc>)
   1f330:	f00c ba5a 	b.w	2b7e8 <k_work_submit_to_queue>
   1f334:	20004208 	.word	0x20004208
   1f338:	200020a0 	.word	0x200020a0

0001f33c <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   1f33c:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   1f33e:	480b      	ldr	r0, [pc, #44]	; (1f36c <usb_init+0x30>)
   1f340:	f002 fece 	bl	220e0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   1f344:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   1f346:	480a      	ldr	r0, [pc, #40]	; (1f370 <usb_init+0x34>)
   1f348:	f002 ff10 	bl	2216c <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   1f34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f350:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f354:	4907      	ldr	r1, [pc, #28]	; (1f374 <usb_init+0x38>)
   1f356:	4808      	ldr	r0, [pc, #32]	; (1f378 <usb_init+0x3c>)
   1f358:	9400      	str	r4, [sp, #0]
   1f35a:	f004 fd21 	bl	23da0 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   1f35e:	4907      	ldr	r1, [pc, #28]	; (1f37c <usb_init+0x40>)
   1f360:	4807      	ldr	r0, [pc, #28]	; (1f380 <usb_init+0x44>)
   1f362:	f00c fa38 	bl	2b7d6 <k_work_init>

	return 0;
}
   1f366:	4620      	mov	r0, r4
   1f368:	b002      	add	sp, #8
   1f36a:	bd10      	pop	{r4, pc}
   1f36c:	0003199c 	.word	0x0003199c
   1f370:	0002e180 	.word	0x0002e180
   1f374:	20007820 	.word	0x20007820
   1f378:	200020a0 	.word	0x200020a0
   1f37c:	0001f7a5 	.word	0x0001f7a5
   1f380:	20004208 	.word	0x20004208

0001f384 <usbd_evt_get>:
   1f384:	4802      	ldr	r0, [pc, #8]	; (1f390 <usbd_evt_get+0xc>)
   1f386:	2200      	movs	r2, #0
   1f388:	2300      	movs	r3, #0
   1f38a:	f004 bb63 	b.w	23a54 <z_impl_k_queue_get>
   1f38e:	bf00      	nop
   1f390:	20000be8 	.word	0x20000be8

0001f394 <usbd_evt_flush>:
{
   1f394:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f396:	4c05      	ldr	r4, [pc, #20]	; (1f3ac <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   1f398:	f7ff fff4 	bl	1f384 <usbd_evt_get>
		if (ev) {
   1f39c:	b120      	cbz	r0, 1f3a8 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f39e:	1d01      	adds	r1, r0, #4
   1f3a0:	4620      	mov	r0, r4
   1f3a2:	f00c f86f 	bl	2b484 <k_mem_slab_free>
	} while (ev != NULL);
   1f3a6:	e7f7      	b.n	1f398 <usbd_evt_flush+0x4>
}
   1f3a8:	bd10      	pop	{r4, pc}
   1f3aa:	bf00      	nop
   1f3ac:	20000ac4 	.word	0x20000ac4

0001f3b0 <usbd_evt_alloc>:
{
   1f3b0:	b510      	push	{r4, lr}
   1f3b2:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1f3b4:	481e      	ldr	r0, [pc, #120]	; (1f430 <usbd_evt_alloc+0x80>)
   1f3b6:	2200      	movs	r2, #0
   1f3b8:	2300      	movs	r3, #0
   1f3ba:	4669      	mov	r1, sp
   1f3bc:	f004 f8d2 	bl	23564 <k_mem_slab_alloc>
   1f3c0:	2800      	cmp	r0, #0
   1f3c2:	d030      	beq.n	1f426 <usbd_evt_alloc+0x76>
		LOG_ERR("USBD event allocation failed!");
   1f3c4:	4c1b      	ldr	r4, [pc, #108]	; (1f434 <usbd_evt_alloc+0x84>)
   1f3c6:	6823      	ldr	r3, [r4, #0]
   1f3c8:	075a      	lsls	r2, r3, #29
   1f3ca:	d00a      	beq.n	1f3e2 <usbd_evt_alloc+0x32>
   1f3cc:	4b1a      	ldr	r3, [pc, #104]	; (1f438 <usbd_evt_alloc+0x88>)
   1f3ce:	9306      	str	r3, [sp, #24]
   1f3d0:	aa05      	add	r2, sp, #20
   1f3d2:	2302      	movs	r3, #2
   1f3d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f3d8:	4620      	mov	r0, r4
   1f3da:	9301      	str	r3, [sp, #4]
   1f3dc:	9305      	str	r3, [sp, #20]
   1f3de:	f00b fb6c 	bl	2aaba <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
   1f3e2:	f7ff ffd7 	bl	1f394 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1f3e6:	4812      	ldr	r0, [pc, #72]	; (1f430 <usbd_evt_alloc+0x80>)
   1f3e8:	2200      	movs	r2, #0
   1f3ea:	2300      	movs	r3, #0
   1f3ec:	4669      	mov	r1, sp
   1f3ee:	f004 f8b9 	bl	23564 <k_mem_slab_alloc>
   1f3f2:	b178      	cbz	r0, 1f414 <usbd_evt_alloc+0x64>
			LOG_ERR("USBD event memory corrupted");
   1f3f4:	6823      	ldr	r3, [r4, #0]
   1f3f6:	075b      	lsls	r3, r3, #29
   1f3f8:	d00a      	beq.n	1f410 <usbd_evt_alloc+0x60>
   1f3fa:	4b10      	ldr	r3, [pc, #64]	; (1f43c <usbd_evt_alloc+0x8c>)
   1f3fc:	9306      	str	r3, [sp, #24]
   1f3fe:	480d      	ldr	r0, [pc, #52]	; (1f434 <usbd_evt_alloc+0x84>)
   1f400:	2302      	movs	r3, #2
   1f402:	aa05      	add	r2, sp, #20
   1f404:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f408:	9301      	str	r3, [sp, #4]
   1f40a:	9305      	str	r3, [sp, #20]
   1f40c:	f00b fb55 	bl	2aaba <z_log_msg2_static_create.constprop.0>
			return NULL;
   1f410:	2000      	movs	r0, #0
   1f412:	e00a      	b.n	1f42a <usbd_evt_alloc+0x7a>
		ev = (struct usbd_event *)block.data;
   1f414:	9800      	ldr	r0, [sp, #0]
		ev->evt_type = USBD_EVT_REINIT;
   1f416:	2304      	movs	r3, #4
		ev->block = block;
   1f418:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1f41a:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   1f41c:	f7ff ff80 	bl	1f320 <usbd_evt_put>
		usbd_work_schedule();
   1f420:	f7ff ff84 	bl	1f32c <usbd_work_schedule>
		return NULL;
   1f424:	e7f4      	b.n	1f410 <usbd_evt_alloc+0x60>
	ev = (struct usbd_event *)block.data;
   1f426:	9800      	ldr	r0, [sp, #0]
	ev->block = block;
   1f428:	6040      	str	r0, [r0, #4]
}
   1f42a:	b008      	add	sp, #32
   1f42c:	bd10      	pop	{r4, pc}
   1f42e:	bf00      	nop
   1f430:	20000ac4 	.word	0x20000ac4
   1f434:	20000a54 	.word	0x20000a54
   1f438:	0003178b 	.word	0x0003178b
   1f43c:	000317a9 	.word	0x000317a9

0001f440 <usbd_event_transfer_data>:
{
   1f440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f442:	b083      	sub	sp, #12
		endpoint_ctx(p_event->data.eptransfer.ep);
   1f444:	7881      	ldrb	r1, [r0, #2]
{
   1f446:	4606      	mov	r6, r0
   1f448:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
   1f44a:	4608      	mov	r0, r1
   1f44c:	f7ff ff40 	bl	1f2d0 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f450:	060a      	lsls	r2, r1, #24
		switch (p_event->data.eptransfer.status) {
   1f452:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   1f454:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f456:	d528      	bpl.n	1f4aa <usbd_event_transfer_data+0x6a>
		switch (p_event->data.eptransfer.status) {
   1f458:	b1b4      	cbz	r4, 1f488 <usbd_event_transfer_data+0x48>
   1f45a:	2c03      	cmp	r4, #3
   1f45c:	d022      	beq.n	1f4a4 <usbd_event_transfer_data+0x64>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1f45e:	482d      	ldr	r0, [pc, #180]	; (1f514 <usbd_event_transfer_data+0xd4>)
   1f460:	6803      	ldr	r3, [r0, #0]
   1f462:	075b      	lsls	r3, r3, #29
   1f464:	d01e      	beq.n	1f4a4 <usbd_event_transfer_data+0x64>
   1f466:	4b2c      	ldr	r3, [pc, #176]	; (1f518 <usbd_event_transfer_data+0xd8>)
   1f468:	466d      	mov	r5, sp
   1f46a:	b088      	sub	sp, #32
   1f46c:	466a      	mov	r2, sp
   1f46e:	e9c2 3404 	strd	r3, r4, [r2, #16]
   1f472:	2304      	movs	r3, #4
   1f474:	6191      	str	r1, [r2, #24]
   1f476:	607b      	str	r3, [r7, #4]
   1f478:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f47c:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f480:	f00b fb1b 	bl	2aaba <z_log_msg2_static_create.constprop.0>
   1f484:	46ad      	mov	sp, r5
   1f486:	e00d      	b.n	1f4a4 <usbd_event_transfer_data+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   1f488:	f7ff ff92 	bl	1f3b0 <usbd_evt_alloc>
			if (!ev) {
   1f48c:	4603      	mov	r3, r0
   1f48e:	b148      	cbz	r0, 1f4a4 <usbd_event_transfer_data+0x64>
			ev->evt_type = USBD_EVT_EP;
   1f490:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1f492:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1f494:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1f496:	2203      	movs	r2, #3
   1f498:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f49a:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
   1f49c:	f7ff ff40 	bl	1f320 <usbd_evt_put>
			usbd_work_schedule();
   1f4a0:	f7ff ff44 	bl	1f32c <usbd_work_schedule>
}
   1f4a4:	370c      	adds	r7, #12
   1f4a6:	46bd      	mov	sp, r7
   1f4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
   1f4aa:	b154      	cbz	r4, 1f4c2 <usbd_event_transfer_data+0x82>
   1f4ac:	2c01      	cmp	r4, #1
   1f4ae:	d1d6      	bne.n	1f45e <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
   1f4b0:	f7ff ff7e 	bl	1f3b0 <usbd_evt_alloc>
			if (!ev) {
   1f4b4:	4603      	mov	r3, r0
   1f4b6:	2800      	cmp	r0, #0
   1f4b8:	d0f4      	beq.n	1f4a4 <usbd_event_transfer_data+0x64>
			ep_ctx->read_pending = true;
   1f4ba:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1f4bc:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1f4be:	7304      	strb	r4, [r0, #12]
   1f4c0:	e7eb      	b.n	1f49a <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
   1f4c2:	f7ff ff75 	bl	1f3b0 <usbd_evt_alloc>
			if (!ev) {
   1f4c6:	2800      	cmp	r0, #0
   1f4c8:	d0ec      	beq.n	1f4a4 <usbd_event_transfer_data+0x64>
				p_event->data.eptransfer.ep);
   1f4ca:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   1f4cc:	4b13      	ldr	r3, [pc, #76]	; (1f51c <usbd_event_transfer_data+0xdc>)
   1f4ce:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f4d2:	f002 0108 	and.w	r1, r2, #8
   1f4d6:	d011      	beq.n	1f4fc <usbd_event_transfer_data+0xbc>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1f4d8:	b141      	cbz	r1, 1f4ec <usbd_event_transfer_data+0xac>
        {
            ret = p_reg->ISOIN.AMOUNT;
   1f4da:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   1f4de:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   1f4e0:	2301      	movs	r3, #1
   1f4e2:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1f4e4:	2302      	movs	r3, #2
   1f4e6:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f4e8:	6085      	str	r5, [r0, #8]
			usbd_evt_put(ev);
   1f4ea:	e7d7      	b.n	1f49c <usbd_event_transfer_data+0x5c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   1f4ec:	f002 020f 	and.w	r2, r2, #15
   1f4f0:	2114      	movs	r1, #20
   1f4f2:	fb01 3302 	mla	r3, r1, r2, r3
   1f4f6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1f4fa:	e7f0      	b.n	1f4de <usbd_event_transfer_data+0x9e>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1f4fc:	b111      	cbz	r1, 1f504 <usbd_event_transfer_data+0xc4>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   1f4fe:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   1f502:	e7ec      	b.n	1f4de <usbd_event_transfer_data+0x9e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   1f504:	f002 020f 	and.w	r2, r2, #15
   1f508:	2114      	movs	r1, #20
   1f50a:	fb01 3302 	mla	r3, r1, r2, r3
   1f50e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   1f512:	e7e4      	b.n	1f4de <usbd_event_transfer_data+0x9e>
   1f514:	20000a54 	.word	0x20000a54
   1f518:	000317c5 	.word	0x000317c5
   1f51c:	40027000 	.word	0x40027000

0001f520 <usb_dc_power_event_handler>:
{
   1f520:	b510      	push	{r4, lr}
   1f522:	2802      	cmp	r0, #2
   1f524:	b088      	sub	sp, #32
   1f526:	4603      	mov	r3, r0
   1f528:	d812      	bhi.n	1f550 <usb_dc_power_event_handler+0x30>
   1f52a:	4a12      	ldr	r2, [pc, #72]	; (1f574 <usb_dc_power_event_handler+0x54>)
   1f52c:	5c14      	ldrb	r4, [r2, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   1f52e:	f7ff ff3f 	bl	1f3b0 <usbd_evt_alloc>
	if (!ev) {
   1f532:	b1e0      	cbz	r0, 1f56e <usb_dc_power_event_handler+0x4e>
	ev->evt_type = USBD_EVT_POWER;
   1f534:	2200      	movs	r2, #0
   1f536:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   1f538:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   1f53a:	f7ff fef1 	bl	1f320 <usbd_evt_put>
	if (usbd_ctx.attached) {
   1f53e:	4b0e      	ldr	r3, [pc, #56]	; (1f578 <usb_dc_power_event_handler+0x58>)
   1f540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1f544:	b19b      	cbz	r3, 1f56e <usb_dc_power_event_handler+0x4e>
}
   1f546:	b008      	add	sp, #32
   1f548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   1f54c:	f7ff beee 	b.w	1f32c <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
   1f550:	480a      	ldr	r0, [pc, #40]	; (1f57c <usb_dc_power_event_handler+0x5c>)
   1f552:	6802      	ldr	r2, [r0, #0]
   1f554:	0752      	lsls	r2, r2, #29
   1f556:	d00a      	beq.n	1f56e <usb_dc_power_event_handler+0x4e>
   1f558:	4a09      	ldr	r2, [pc, #36]	; (1f580 <usb_dc_power_event_handler+0x60>)
   1f55a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (event) {
   1f55e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		LOG_ERR("Unknown USB power event %d", event);
   1f562:	2303      	movs	r3, #3
   1f564:	aa05      	add	r2, sp, #20
   1f566:	9301      	str	r3, [sp, #4]
   1f568:	9305      	str	r3, [sp, #20]
   1f56a:	f00b faa6 	bl	2aaba <z_log_msg2_static_create.constprop.0>
}
   1f56e:	b008      	add	sp, #32
   1f570:	bd10      	pop	{r4, pc}
   1f572:	bf00      	nop
   1f574:	00031999 	.word	0x00031999
   1f578:	200041e0 	.word	0x200041e0
   1f57c:	20000a54 	.word	0x20000a54
   1f580:	000317f1 	.word	0x000317f1

0001f584 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   1f584:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f586:	490f      	ldr	r1, [pc, #60]	; (1f5c4 <hfxo_stop.constprop.0.isra.0+0x40>)
   1f588:	f3bf 8f5b 	dmb	ish
   1f58c:	f101 0320 	add.w	r3, r1, #32
   1f590:	2200      	movs	r2, #0
   1f592:	e853 0f00 	ldrex	r0, [r3]
   1f596:	2801      	cmp	r0, #1
   1f598:	d103      	bne.n	1f5a2 <hfxo_stop.constprop.0.isra.0+0x1e>
   1f59a:	e843 2400 	strex	r4, r2, [r3]
   1f59e:	2c00      	cmp	r4, #0
   1f5a0:	d1f7      	bne.n	1f592 <hfxo_stop.constprop.0.isra.0+0xe>
   1f5a2:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   1f5a6:	d10b      	bne.n	1f5c0 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1f5a8:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1f5aa:	310c      	adds	r1, #12
   1f5ac:	4620      	mov	r0, r4
   1f5ae:	f005 fc29 	bl	24e04 <onoff_cancel>

	if (rv == -EALREADY) {
   1f5b2:	3078      	adds	r0, #120	; 0x78
   1f5b4:	d104      	bne.n	1f5c0 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   1f5b6:	4620      	mov	r0, r4
}
   1f5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f5bc:	f005 bbfd 	b.w	24dba <onoff_release>
   1f5c0:	bd10      	pop	{r4, pc}
   1f5c2:	bf00      	nop
   1f5c4:	200041e0 	.word	0x200041e0

0001f5c8 <usbd_event_handler>:
{
   1f5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5ca:	b08d      	sub	sp, #52	; 0x34
   1f5cc:	4606      	mov	r6, r0
   1f5ce:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
   1f5d0:	2214      	movs	r2, #20
   1f5d2:	2100      	movs	r1, #0
   1f5d4:	1d38      	adds	r0, r7, #4
   1f5d6:	f008 fff9 	bl	285cc <memset>
	switch (p_event->type) {
   1f5da:	7833      	ldrb	r3, [r6, #0]
   1f5dc:	3b01      	subs	r3, #1
   1f5de:	2b05      	cmp	r3, #5
   1f5e0:	d820      	bhi.n	1f624 <usbd_event_handler+0x5c>
   1f5e2:	e8df f003 	tbb	[pc, r3]
   1f5e6:	039e      	.short	0x039e
   1f5e8:	158f1313 	.word	0x158f1313
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   1f5ec:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1f5ee:	733b      	strb	r3, [r7, #12]
		evt.evt_type = USBD_EVT_POWER;
   1f5f0:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   1f5f2:	f7ff fedd 	bl	1f3b0 <usbd_evt_alloc>
		if (!ev) {
   1f5f6:	4603      	mov	r3, r0
   1f5f8:	b1a0      	cbz	r0, 1f624 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   1f5fa:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   1f5fc:	f100 0208 	add.w	r2, r0, #8
   1f600:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
   1f604:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   1f608:	4618      	mov	r0, r3
   1f60a:	e034      	b.n	1f676 <usbd_event_handler+0xae>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1f60c:	2304      	movs	r3, #4
   1f60e:	e7ee      	b.n	1f5ee <usbd_event_handler+0x26>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1f610:	78b1      	ldrb	r1, [r6, #2]
   1f612:	4608      	mov	r0, r1
   1f614:	f7ff fe5c 	bl	1f2d0 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   1f618:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1f61a:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
   1f61c:	b12b      	cbz	r3, 1f62a <usbd_event_handler+0x62>
   1f61e:	3b01      	subs	r3, #1
   1f620:	2b02      	cmp	r3, #2
   1f622:	d96b      	bls.n	1f6fc <usbd_event_handler+0x134>
}
   1f624:	3734      	adds	r7, #52	; 0x34
   1f626:	46bd      	mov	sp, r7
   1f628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f62a:	0608      	lsls	r0, r1, #24
		switch (p_event->data.eptransfer.status) {
   1f62c:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1f62e:	d527      	bpl.n	1f680 <usbd_event_handler+0xb8>
		switch (p_event->data.eptransfer.status) {
   1f630:	b1b4      	cbz	r4, 1f660 <usbd_event_handler+0x98>
   1f632:	2c03      	cmp	r4, #3
   1f634:	d0f6      	beq.n	1f624 <usbd_event_handler+0x5c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1f636:	483c      	ldr	r0, [pc, #240]	; (1f728 <usbd_event_handler+0x160>)
   1f638:	6803      	ldr	r3, [r0, #0]
   1f63a:	075b      	lsls	r3, r3, #29
   1f63c:	d0f2      	beq.n	1f624 <usbd_event_handler+0x5c>
   1f63e:	4b3b      	ldr	r3, [pc, #236]	; (1f72c <usbd_event_handler+0x164>)
   1f640:	466d      	mov	r5, sp
   1f642:	b088      	sub	sp, #32
   1f644:	466a      	mov	r2, sp
   1f646:	e9c2 3404 	strd	r3, r4, [r2, #16]
   1f64a:	2304      	movs	r3, #4
   1f64c:	6191      	str	r1, [r2, #24]
   1f64e:	61bb      	str	r3, [r7, #24]
   1f650:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f654:	f842 3f0c 	str.w	r3, [r2, #12]!
   1f658:	f00b fa2f 	bl	2aaba <z_log_msg2_static_create.constprop.0>
   1f65c:	46ad      	mov	sp, r5
   1f65e:	e7e1      	b.n	1f624 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   1f660:	f7ff fea6 	bl	1f3b0 <usbd_evt_alloc>
			if (!ev) {
   1f664:	4603      	mov	r3, r0
   1f666:	2800      	cmp	r0, #0
   1f668:	d0dc      	beq.n	1f624 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   1f66a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1f66c:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1f66e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1f670:	2203      	movs	r2, #3
   1f672:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f674:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
   1f676:	f7ff fe53 	bl	1f320 <usbd_evt_put>
		usbd_work_schedule();
   1f67a:	f7ff fe57 	bl	1f32c <usbd_work_schedule>
   1f67e:	e7d1      	b.n	1f624 <usbd_event_handler+0x5c>
		switch (p_event->data.eptransfer.status) {
   1f680:	b154      	cbz	r4, 1f698 <usbd_event_handler+0xd0>
   1f682:	2c01      	cmp	r4, #1
   1f684:	d1d7      	bne.n	1f636 <usbd_event_handler+0x6e>
			struct usbd_event *ev = usbd_evt_alloc();
   1f686:	f7ff fe93 	bl	1f3b0 <usbd_evt_alloc>
			if (!ev) {
   1f68a:	4603      	mov	r3, r0
   1f68c:	2800      	cmp	r0, #0
   1f68e:	d0c9      	beq.n	1f624 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   1f690:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1f692:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1f694:	7304      	strb	r4, [r0, #12]
   1f696:	e7ed      	b.n	1f674 <usbd_event_handler+0xac>
			struct usbd_event *ev = usbd_evt_alloc();
   1f698:	f7ff fe8a 	bl	1f3b0 <usbd_evt_alloc>
			if (!ev) {
   1f69c:	4604      	mov	r4, r0
   1f69e:	2800      	cmp	r0, #0
   1f6a0:	d0c0      	beq.n	1f624 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   1f6a2:	2301      	movs	r3, #1
   1f6a4:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1f6a6:	2302      	movs	r3, #2
   1f6a8:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1f6aa:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   1f6ac:	f105 010c 	add.w	r1, r5, #12
   1f6b0:	78b0      	ldrb	r0, [r6, #2]
   1f6b2:	f00b fe18 	bl	2b2e6 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   1f6b6:	4603      	mov	r3, r0
   1f6b8:	b178      	cbz	r0, 1f6da <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
   1f6ba:	481b      	ldr	r0, [pc, #108]	; (1f728 <usbd_event_handler+0x160>)
   1f6bc:	6802      	ldr	r2, [r0, #0]
   1f6be:	0752      	lsls	r2, r2, #29
   1f6c0:	d00b      	beq.n	1f6da <usbd_event_handler+0x112>
   1f6c2:	4a1b      	ldr	r2, [pc, #108]	; (1f730 <usbd_event_handler+0x168>)
   1f6c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f6c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1f6cc:	2303      	movs	r3, #3
   1f6ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1f6d2:	603b      	str	r3, [r7, #0]
   1f6d4:	627b      	str	r3, [r7, #36]	; 0x24
   1f6d6:	f00b f9f0 	bl	2aaba <z_log_msg2_static_create.constprop.0>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   1f6da:	4a16      	ldr	r2, [pc, #88]	; (1f734 <usbd_event_handler+0x16c>)
   1f6dc:	68e9      	ldr	r1, [r5, #12]
   1f6de:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   1f6e2:	428b      	cmp	r3, r1
   1f6e4:	d906      	bls.n	1f6f4 <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   1f6e6:	1a5b      	subs	r3, r3, r1
   1f6e8:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   1f6ec:	f003 fa9e 	bl	22c2c <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   1f6f0:	4620      	mov	r0, r4
   1f6f2:	e7c0      	b.n	1f676 <usbd_event_handler+0xae>
				ctx->ctrl_read_len = 0U;
   1f6f4:	2300      	movs	r3, #0
   1f6f6:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
   1f6fa:	e7f9      	b.n	1f6f0 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
   1f6fc:	4630      	mov	r0, r6
   1f6fe:	f7ff fe9f 	bl	1f440 <usbd_event_transfer_data>
	if (put_evt) {
   1f702:	e78f      	b.n	1f624 <usbd_event_handler+0x5c>
		nrfx_usbd_setup_get(&drv_setup);
   1f704:	f107 0018 	add.w	r0, r7, #24
   1f708:	f003 fa6a 	bl	22be0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   1f70c:	7e7b      	ldrb	r3, [r7, #25]
   1f70e:	2b05      	cmp	r3, #5
   1f710:	d103      	bne.n	1f71a <usbd_event_handler+0x152>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   1f712:	7e3b      	ldrb	r3, [r7, #24]
   1f714:	f013 0f60 	tst.w	r3, #96	; 0x60
   1f718:	d084      	beq.n	1f624 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   1f71a:	4b07      	ldr	r3, [pc, #28]	; (1f738 <usbd_event_handler+0x170>)
   1f71c:	60fb      	str	r3, [r7, #12]
			evt.evt_type = USBD_EVT_EP;
   1f71e:	2401      	movs	r4, #1
   1f720:	e767      	b.n	1f5f2 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   1f722:	2402      	movs	r4, #2
   1f724:	e765      	b.n	1f5f2 <usbd_event_handler+0x2a>
   1f726:	bf00      	nop
   1f728:	20000a54 	.word	0x20000a54
   1f72c:	000317c5 	.word	0x000317c5
   1f730:	0003180c 	.word	0x0003180c
   1f734:	200041e0 	.word	0x200041e0
   1f738:	2000434c 	.word	0x2000434c

0001f73c <eps_ctx_init>:
{
   1f73c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1f73e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1f740:	f064 007f 	orn	r0, r4, #127	; 0x7f
   1f744:	b2c0      	uxtb	r0, r0
   1f746:	f7ff fdc3 	bl	1f2d0 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1f74a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1f74c:	f00b f9a2 	bl	2aa94 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1f750:	2c08      	cmp	r4, #8
   1f752:	d1f5      	bne.n	1f740 <eps_ctx_init+0x4>
   1f754:	4d0f      	ldr	r5, [pc, #60]	; (1f794 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1f756:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1f758:	b2e0      	uxtb	r0, r4
   1f75a:	f7ff fdb9 	bl	1f2d0 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1f75e:	6903      	ldr	r3, [r0, #16]
   1f760:	b903      	cbnz	r3, 1f764 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   1f762:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1f764:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1f766:	f00b f995 	bl	2aa94 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1f76a:	2c08      	cmp	r4, #8
   1f76c:	f105 0540 	add.w	r5, r5, #64	; 0x40
   1f770:	d1f2      	bne.n	1f758 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   1f772:	4c09      	ldr	r4, [pc, #36]	; (1f798 <eps_ctx_init+0x5c>)
   1f774:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   1f778:	f00b f98c 	bl	2aa94 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   1f77c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   1f780:	b913      	cbnz	r3, 1f788 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   1f782:	4b06      	ldr	r3, [pc, #24]	; (1f79c <eps_ctx_init+0x60>)
   1f784:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   1f788:	4805      	ldr	r0, [pc, #20]	; (1f7a0 <eps_ctx_init+0x64>)
   1f78a:	f00b f983 	bl	2aa94 <ep_ctx_reset>
}
   1f78e:	2000      	movs	r0, #0
   1f790:	bd38      	pop	{r3, r4, r5, pc}
   1f792:	bf00      	nop
   1f794:	20003fe0 	.word	0x20003fe0
   1f798:	200041e0 	.word	0x200041e0
   1f79c:	20003be0 	.word	0x20003be0
   1f7a0:	2000444c 	.word	0x2000444c

0001f7a4 <usbd_work_handler>:
{
   1f7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   1f7a8:	4ca3      	ldr	r4, [pc, #652]	; (1fa38 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f7aa:	f8df 8290 	ldr.w	r8, [pc, #656]	; 1fa3c <usbd_work_handler+0x298>
{
   1f7ae:	b08b      	sub	sp, #44	; 0x2c
   1f7b0:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   1f7b2:	f7ff fde7 	bl	1f384 <usbd_evt_get>
   1f7b6:	4606      	mov	r6, r0
   1f7b8:	b910      	cbnz	r0, 1f7c0 <usbd_work_handler+0x1c>
}
   1f7ba:	b00b      	add	sp, #44	; 0x2c
   1f7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   1f7c0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1f7c4:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f7c6:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1f7ca:	b93a      	cbnz	r2, 1f7dc <usbd_work_handler+0x38>
   1f7cc:	2b00      	cmp	r3, #0
   1f7ce:	f000 80ae 	beq.w	1f92e <usbd_work_handler+0x18a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1f7d2:	4649      	mov	r1, r9
   1f7d4:	4640      	mov	r0, r8
   1f7d6:	f00b fe55 	bl	2b484 <k_mem_slab_free>
}
   1f7da:	e7ea      	b.n	1f7b2 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   1f7dc:	2b04      	cmp	r3, #4
   1f7de:	f200 819d 	bhi.w	1fb1c <usbd_work_handler+0x378>
   1f7e2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f7e6:	00a4      	.short	0x00a4
   1f7e8:	013d0005 	.word	0x013d0005
   1f7ec:	017d0153 	.word	0x017d0153
			if (!ctx->attached) {
   1f7f0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
   1f7f4:	b983      	cbnz	r3, 1f818 <usbd_work_handler+0x74>
				LOG_ERR("not attached, EP 0x%02x event dropped",
   1f7f6:	4892      	ldr	r0, [pc, #584]	; (1fa40 <usbd_work_handler+0x29c>)
   1f7f8:	6803      	ldr	r3, [r0, #0]
   1f7fa:	075b      	lsls	r3, r3, #29
   1f7fc:	d00c      	beq.n	1f818 <usbd_work_handler+0x74>
   1f7fe:	4b91      	ldr	r3, [pc, #580]	; (1fa44 <usbd_work_handler+0x2a0>)
   1f800:	9308      	str	r3, [sp, #32]
   1f802:	68b3      	ldr	r3, [r6, #8]
   1f804:	7a5b      	ldrb	r3, [r3, #9]
   1f806:	9309      	str	r3, [sp, #36]	; 0x24
   1f808:	aa07      	add	r2, sp, #28
   1f80a:	2303      	movs	r3, #3
   1f80c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f810:	9301      	str	r3, [sp, #4]
   1f812:	9307      	str	r3, [sp, #28]
   1f814:	f00b f951 	bl	2aaba <z_log_msg2_static_create.constprop.0>
	switch (ep_evt->evt_type) {
   1f818:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   1f81a:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
   1f81c:	2b03      	cmp	r3, #3
   1f81e:	d8d8      	bhi.n	1f7d2 <usbd_work_handler+0x2e>
   1f820:	e8df f003 	tbb	[pc, r3]
   1f824:	726d3d02 	.word	0x726d3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   1f828:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   1f82a:	2208      	movs	r2, #8
   1f82c:	2100      	movs	r1, #0
   1f82e:	4630      	mov	r0, r6
   1f830:	f008 fecc 	bl	285cc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1f834:	4b84      	ldr	r3, [pc, #528]	; (1fa48 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1f836:	4885      	ldr	r0, [pc, #532]	; (1fa4c <usbd_work_handler+0x2a8>)
   1f838:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   1f83c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1f83e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   1f842:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   1f844:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1f848:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1f84c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1f850:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   1f852:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1f856:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1f85a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   1f85e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1f860:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1f864:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1f868:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1f86c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   1f86e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1f870:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1f872:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1f874:	f008 fe9f 	bl	285b6 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1f878:	682b      	ldr	r3, [r5, #0]
   1f87a:	7a68      	ldrb	r0, [r5, #9]
   1f87c:	2100      	movs	r1, #0
   1f87e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   1f880:	f996 3000 	ldrsb.w	r3, [r6]
   1f884:	2b00      	cmp	r3, #0
   1f886:	db06      	blt.n	1f896 <usbd_work_handler+0xf2>
   1f888:	88f3      	ldrh	r3, [r6, #6]
   1f88a:	b123      	cbz	r3, 1f896 <usbd_work_handler+0xf2>
		ctx->ctrl_read_len = usbd_setup->wLength;
   1f88c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   1f890:	f003 f9cc 	bl	22c2c <nrfx_usbd_setup_data_clear>
   1f894:	e79d      	b.n	1f7d2 <usbd_work_handler+0x2e>
		ctx->ctrl_read_len = 0U;
   1f896:	2300      	movs	r3, #0
   1f898:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   1f89c:	e799      	b.n	1f7d2 <usbd_work_handler+0x2e>
	if (!ep_ctx->read_pending) {
   1f89e:	7f6b      	ldrb	r3, [r5, #29]
   1f8a0:	2b00      	cmp	r3, #0
   1f8a2:	d096      	beq.n	1f7d2 <usbd_work_handler+0x2e>
	if (!ep_ctx->read_complete) {
   1f8a4:	7f2b      	ldrb	r3, [r5, #28]
   1f8a6:	2b00      	cmp	r3, #0
   1f8a8:	d093      	beq.n	1f7d2 <usbd_work_handler+0x2e>
	ep_ctx->read_pending = false;
   1f8aa:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f8ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f8b0:	4867      	ldr	r0, [pc, #412]	; (1fa50 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
   1f8b2:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f8b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
   1f8b8:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f8ba:	f00b f901 	bl	2aac0 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   1f8be:	696b      	ldr	r3, [r5, #20]
   1f8c0:	9301      	str	r3, [sp, #4]
   1f8c2:	686b      	ldr	r3, [r5, #4]
   1f8c4:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1f8c8:	a901      	add	r1, sp, #4
   1f8ca:	7a68      	ldrb	r0, [r5, #9]
   1f8cc:	f002 ffb8 	bl	22840 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   1f8d0:	4a60      	ldr	r2, [pc, #384]	; (1fa54 <usbd_work_handler+0x2b0>)
   1f8d2:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1f8d4:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
   1f8d6:	d00e      	beq.n	1f8f6 <usbd_work_handler+0x152>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   1f8d8:	4859      	ldr	r0, [pc, #356]	; (1fa40 <usbd_work_handler+0x29c>)
   1f8da:	6802      	ldr	r2, [r0, #0]
   1f8dc:	0756      	lsls	r6, r2, #29
   1f8de:	d00a      	beq.n	1f8f6 <usbd_work_handler+0x152>
   1f8e0:	4a5d      	ldr	r2, [pc, #372]	; (1fa58 <usbd_work_handler+0x2b4>)
   1f8e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f8e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f8ea:	2303      	movs	r3, #3
   1f8ec:	aa07      	add	r2, sp, #28
   1f8ee:	9300      	str	r3, [sp, #0]
   1f8f0:	9307      	str	r3, [sp, #28]
   1f8f2:	f00b f8e2 	bl	2aaba <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&ctx->drv_lock);
   1f8f6:	4856      	ldr	r0, [pc, #344]	; (1fa50 <usbd_work_handler+0x2ac>)
   1f8f8:	f00b f8e4 	bl	2aac4 <k_mutex_unlock.isra.0>
   1f8fc:	e769      	b.n	1f7d2 <usbd_work_handler+0x2e>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1f8fe:	682b      	ldr	r3, [r5, #0]
   1f900:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1f902:	7a68      	ldrb	r0, [r5, #9]
   1f904:	4798      	blx	r3
		break;
   1f906:	e764      	b.n	1f7d2 <usbd_work_handler+0x2e>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   1f908:	7aab      	ldrb	r3, [r5, #10]
   1f90a:	b96b      	cbnz	r3, 1f928 <usbd_work_handler+0x184>
   1f90c:	7feb      	ldrb	r3, [r5, #31]
   1f90e:	b95b      	cbnz	r3, 1f928 <usbd_work_handler+0x184>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1f910:	484f      	ldr	r0, [pc, #316]	; (1fa50 <usbd_work_handler+0x2ac>)
   1f912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f91a:	f00b f8d1 	bl	2aac0 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   1f91e:	f003 f9b5 	bl	22c8c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   1f922:	484b      	ldr	r0, [pc, #300]	; (1fa50 <usbd_work_handler+0x2ac>)
   1f924:	f00b f8ce 	bl	2aac4 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1f928:	682b      	ldr	r3, [r5, #0]
   1f92a:	2102      	movs	r1, #2
   1f92c:	e7e9      	b.n	1f902 <usbd_work_handler+0x15e>
	switch (pwr_evt->state) {
   1f92e:	7a33      	ldrb	r3, [r6, #8]
   1f930:	2b04      	cmp	r3, #4
   1f932:	f63f af4e 	bhi.w	1f7d2 <usbd_work_handler+0x2e>
   1f936:	e8df f003 	tbb	[pc, r3]
   1f93a:	035b      	.short	0x035b
   1f93c:	6925      	.short	0x6925
   1f93e:	75          	.byte	0x75
   1f93f:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   1f940:	f002 ff2e 	bl	227a0 <nrfx_usbd_is_enabled>
   1f944:	4605      	mov	r5, r0
   1f946:	2800      	cmp	r0, #0
   1f948:	f47f af43 	bne.w	1f7d2 <usbd_work_handler+0x2e>
			nrfx_usbd_enable();
   1f94c:	f002 fe6c 	bl	22628 <nrfx_usbd_enable>
   1f950:	f3bf 8f5b 	dmb	ish
   1f954:	4941      	ldr	r1, [pc, #260]	; (1fa5c <usbd_work_handler+0x2b8>)
   1f956:	2301      	movs	r3, #1
   1f958:	e851 2f00 	ldrex	r2, [r1]
   1f95c:	2a00      	cmp	r2, #0
   1f95e:	d103      	bne.n	1f968 <usbd_work_handler+0x1c4>
   1f960:	e841 3000 	strex	r0, r3, [r1]
   1f964:	2800      	cmp	r0, #0
   1f966:	d1f7      	bne.n	1f958 <usbd_work_handler+0x1b4>
   1f968:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   1f96c:	f47f af31 	bne.w	1f7d2 <usbd_work_handler+0x2e>
   1f970:	f841 5c10 	str.w	r5, [r1, #-16]
   1f974:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1f978:	69e0      	ldr	r0, [r4, #28]
   1f97a:	6163      	str	r3, [r4, #20]
   1f97c:	3914      	subs	r1, #20
   1f97e:	f005 f9d3 	bl	24d28 <onoff_request>
   1f982:	e726      	b.n	1f7d2 <usbd_work_handler+0x2e>
	switch (pwr_evt->state) {
   1f984:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1f986:	f065 007f 	orn	r0, r5, #127	; 0x7f
   1f98a:	b2c0      	uxtb	r0, r0
   1f98c:	f7ff fca0 	bl	1f2d0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1f990:	7a03      	ldrb	r3, [r0, #8]
   1f992:	b113      	cbz	r3, 1f99a <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1f994:	7a40      	ldrb	r0, [r0, #9]
   1f996:	f003 fb65 	bl	23064 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   1f99a:	3501      	adds	r5, #1
   1f99c:	2d08      	cmp	r5, #8
   1f99e:	d1f2      	bne.n	1f986 <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
   1f9a0:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   1f9a4:	b11b      	cbz	r3, 1f9ae <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1f9a6:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   1f9aa:	f003 fb5b 	bl	23064 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   1f9ae:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1f9b0:	b2e8      	uxtb	r0, r5
   1f9b2:	f7ff fc8d 	bl	1f2d0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1f9b6:	7a03      	ldrb	r3, [r0, #8]
   1f9b8:	b113      	cbz	r3, 1f9c0 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1f9ba:	7a40      	ldrb	r0, [r0, #9]
   1f9bc:	f003 fb52 	bl	23064 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   1f9c0:	3501      	adds	r5, #1
   1f9c2:	2d08      	cmp	r5, #8
   1f9c4:	d1f4      	bne.n	1f9b0 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
   1f9c6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1f9ca:	b11b      	cbz	r3, 1f9d4 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1f9cc:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   1f9d0:	f003 fb48 	bl	23064 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   1f9d4:	2001      	movs	r0, #1
   1f9d6:	f002 fec5 	bl	22764 <nrfx_usbd_start>
		ctx->ready = true;
   1f9da:	2301      	movs	r3, #1
   1f9dc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   1f9e0:	6823      	ldr	r3, [r4, #0]
   1f9e2:	2b00      	cmp	r3, #0
   1f9e4:	f43f aef5 	beq.w	1f7d2 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   1f9e8:	2100      	movs	r1, #0
   1f9ea:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
   1f9ec:	4798      	blx	r3
   1f9ee:	e6f0      	b.n	1f7d2 <usbd_work_handler+0x2e>
		ctx->ready = false;
   1f9f0:	2500      	movs	r5, #0
   1f9f2:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   1f9f6:	f003 fac1 	bl	22f7c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   1f9fa:	f7ff fdc3 	bl	1f584 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   1f9fe:	6823      	ldr	r3, [r4, #0]
   1fa00:	2b00      	cmp	r3, #0
   1fa02:	f43f aee6 	beq.w	1f7d2 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   1fa06:	4629      	mov	r1, r5
   1fa08:	2004      	movs	r0, #4
   1fa0a:	e7ef      	b.n	1f9ec <usbd_work_handler+0x248>
		if (dev_ready()) {
   1fa0c:	2a00      	cmp	r2, #0
   1fa0e:	f43f aee0 	beq.w	1f7d2 <usbd_work_handler+0x2e>
			nrfx_usbd_suspend();
   1fa12:	f003 facb 	bl	22fac <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   1fa16:	6823      	ldr	r3, [r4, #0]
   1fa18:	2b00      	cmp	r3, #0
   1fa1a:	f43f aeda 	beq.w	1f7d2 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   1fa1e:	2100      	movs	r1, #0
   1fa20:	2005      	movs	r0, #5
   1fa22:	e7e3      	b.n	1f9ec <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
   1fa24:	6823      	ldr	r3, [r4, #0]
   1fa26:	2b00      	cmp	r3, #0
   1fa28:	f43f aed3 	beq.w	1f7d2 <usbd_work_handler+0x2e>
   1fa2c:	2a00      	cmp	r2, #0
   1fa2e:	f43f aed0 	beq.w	1f7d2 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_RESUME, NULL);
   1fa32:	2100      	movs	r1, #0
   1fa34:	2006      	movs	r0, #6
   1fa36:	e7d9      	b.n	1f9ec <usbd_work_handler+0x248>
   1fa38:	200041e0 	.word	0x200041e0
   1fa3c:	20000ac4 	.word	0x20000ac4
   1fa40:	20000a54 	.word	0x20000a54
   1fa44:	0003182c 	.word	0x0003182c
   1fa48:	40027000 	.word	0x40027000
   1fa4c:	200041e4 	.word	0x200041e4
   1fa50:	20004218 	.word	0x20004218
   1fa54:	0bad0000 	.word	0x0bad0000
   1fa58:	00031852 	.word	0x00031852
   1fa5c:	20004200 	.word	0x20004200
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1fa60:	f107 0510 	add.w	r5, r7, #16
   1fa64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fa6c:	4628      	mov	r0, r5
   1fa6e:	f00b f827 	bl	2aac0 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   1fa72:	f7ff fe63 	bl	1f73c <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   1fa76:	4628      	mov	r0, r5
   1fa78:	f00b f824 	bl	2aac4 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   1fa7c:	f857 3c28 	ldr.w	r3, [r7, #-40]
   1fa80:	2b00      	cmp	r3, #0
   1fa82:	f43f aea6 	beq.w	1f7d2 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_RESET, NULL);
   1fa86:	2100      	movs	r1, #0
   1fa88:	2001      	movs	r0, #1
   1fa8a:	e7af      	b.n	1f9ec <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
   1fa8c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1fa90:	b1ab      	cbz	r3, 1fabe <usbd_work_handler+0x31a>
		ep_ctx->read_pending = true;
   1fa92:	2501      	movs	r5, #1
   1fa94:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   1fa98:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   1fa9c:	f7ff fc88 	bl	1f3b0 <usbd_evt_alloc>
		if (!ev) {
   1faa0:	b9a8      	cbnz	r0, 1face <usbd_work_handler+0x32a>
			LOG_ERR("Failed to alloc evt");
   1faa2:	4827      	ldr	r0, [pc, #156]	; (1fb40 <usbd_work_handler+0x39c>)
   1faa4:	6803      	ldr	r3, [r0, #0]
   1faa6:	075d      	lsls	r5, r3, #29
   1faa8:	d009      	beq.n	1fabe <usbd_work_handler+0x31a>
   1faaa:	4b26      	ldr	r3, [pc, #152]	; (1fb44 <usbd_work_handler+0x3a0>)
   1faac:	9308      	str	r3, [sp, #32]
   1faae:	aa07      	add	r2, sp, #28
   1fab0:	2302      	movs	r3, #2
   1fab2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fab6:	9301      	str	r3, [sp, #4]
   1fab8:	9307      	str	r3, [sp, #28]
   1faba:	f00a fffe 	bl	2aaba <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
   1fabe:	f857 3c28 	ldr.w	r3, [r7, #-40]
   1fac2:	2b00      	cmp	r3, #0
   1fac4:	f43f ae85 	beq.w	1f7d2 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SOF, NULL);
   1fac8:	2100      	movs	r1, #0
   1faca:	200a      	movs	r0, #10
   1facc:	e78e      	b.n	1f9ec <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
   1face:	4a1e      	ldr	r2, [pc, #120]	; (1fb48 <usbd_work_handler+0x3a4>)
		ev->evt_type = USBD_EVT_EP;
   1fad0:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1fad2:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   1fad4:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   1fad6:	f7ff fc23 	bl	1f320 <usbd_evt_put>
		usbd_work_schedule();
   1fada:	f7ff fc27 	bl	1f32c <usbd_work_schedule>
   1fade:	e7ee      	b.n	1fabe <usbd_work_handler+0x31a>
				LOG_ERR("USBD event queue full!");
   1fae0:	4817      	ldr	r0, [pc, #92]	; (1fb40 <usbd_work_handler+0x39c>)
   1fae2:	6803      	ldr	r3, [r0, #0]
   1fae4:	0759      	lsls	r1, r3, #29
   1fae6:	d009      	beq.n	1fafc <usbd_work_handler+0x358>
   1fae8:	4b18      	ldr	r3, [pc, #96]	; (1fb4c <usbd_work_handler+0x3a8>)
   1faea:	9308      	str	r3, [sp, #32]
   1faec:	aa07      	add	r2, sp, #28
   1faee:	2302      	movs	r3, #2
   1faf0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1faf4:	9301      	str	r3, [sp, #4]
   1faf6:	9307      	str	r3, [sp, #28]
   1faf8:	f00a ffdf 	bl	2aaba <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
   1fafc:	f00b fb60 	bl	2b1c0 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   1fb00:	f003 fa3c 	bl	22f7c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   1fb04:	f002 fd86 	bl	22614 <nrfx_usbd_uninit>
	usbd_evt_flush();
   1fb08:	f7ff fc44 	bl	1f394 <usbd_evt_flush>
	ret = eps_ctx_init();
   1fb0c:	f7ff fe16 	bl	1f73c <eps_ctx_init>
	nrfx_power_usbevt_enable();
   1fb10:	f00b fb4f 	bl	2b1b2 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   1fb14:	480e      	ldr	r0, [pc, #56]	; (1fb50 <usbd_work_handler+0x3ac>)
   1fb16:	f002 fe4d 	bl	227b4 <nrfx_usbd_init>
}
   1fb1a:	e65a      	b.n	1f7d2 <usbd_work_handler+0x2e>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   1fb1c:	4808      	ldr	r0, [pc, #32]	; (1fb40 <usbd_work_handler+0x39c>)
   1fb1e:	6802      	ldr	r2, [r0, #0]
   1fb20:	0752      	lsls	r2, r2, #29
   1fb22:	f43f ae56 	beq.w	1f7d2 <usbd_work_handler+0x2e>
   1fb26:	4a0b      	ldr	r2, [pc, #44]	; (1fb54 <usbd_work_handler+0x3b0>)
   1fb28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		switch (ev->evt_type) {
   1fb2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   1fb30:	2303      	movs	r3, #3
   1fb32:	aa07      	add	r2, sp, #28
   1fb34:	9301      	str	r3, [sp, #4]
   1fb36:	9307      	str	r3, [sp, #28]
   1fb38:	f00a ffbf 	bl	2aaba <z_log_msg2_static_create.constprop.0>
   1fb3c:	e649      	b.n	1f7d2 <usbd_work_handler+0x2e>
   1fb3e:	bf00      	nop
   1fb40:	20000a54 	.word	0x20000a54
   1fb44:	00031878 	.word	0x00031878
   1fb48:	2000444c 	.word	0x2000444c
   1fb4c:	0003188c 	.word	0x0003188c
   1fb50:	0001f5c9 	.word	0x0001f5c9
   1fb54:	000318a3 	.word	0x000318a3

0001fb58 <usb_dc_attach>:
{
   1fb58:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   1fb5a:	4d1a      	ldr	r5, [pc, #104]	; (1fbc4 <usb_dc_attach+0x6c>)
   1fb5c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   1fb60:	bb5c      	cbnz	r4, 1fbba <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   1fb62:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1fb66:	f00b fce1 	bl	2b52c <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1fb6a:	4620      	mov	r0, r4
   1fb6c:	f000 fca4 	bl	204b8 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fb70:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   1fb72:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fb74:	2101      	movs	r1, #1
   1fb76:	2027      	movs	r0, #39	; 0x27
   1fb78:	f7ea fcf2 	bl	a560 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   1fb7c:	4812      	ldr	r0, [pc, #72]	; (1fbc8 <usb_dc_attach+0x70>)
   1fb7e:	f002 fe19 	bl	227b4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   1fb82:	4b12      	ldr	r3, [pc, #72]	; (1fbcc <usb_dc_attach+0x74>)
   1fb84:	4298      	cmp	r0, r3
   1fb86:	d11a      	bne.n	1fbbe <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   1fb88:	f00b fb13 	bl	2b1b2 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   1fb8c:	f7ff fdd6 	bl	1f73c <eps_ctx_init>
	if (ret == 0) {
   1fb90:	4604      	mov	r4, r0
   1fb92:	b910      	cbnz	r0, 1fb9a <usb_dc_attach+0x42>
		ctx->attached = true;
   1fb94:	2301      	movs	r3, #1
   1fb96:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1fb9a:	4b0d      	ldr	r3, [pc, #52]	; (1fbd0 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   1fb9c:	681b      	ldr	r3, [r3, #0]
   1fb9e:	b10b      	cbz	r3, 1fba4 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   1fba0:	f7ff fbc4 	bl	1f32c <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   1fba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fba8:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   1fbac:	07db      	lsls	r3, r3, #31
   1fbae:	d502      	bpl.n	1fbb6 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   1fbb0:	2000      	movs	r0, #0
   1fbb2:	f7ff fcb5 	bl	1f520 <usb_dc_power_event_handler>
}
   1fbb6:	4620      	mov	r0, r4
   1fbb8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1fbba:	2400      	movs	r4, #0
   1fbbc:	e7fb      	b.n	1fbb6 <usb_dc_attach+0x5e>
		return -EIO;
   1fbbe:	f06f 0404 	mvn.w	r4, #4
   1fbc2:	e7f8      	b.n	1fbb6 <usb_dc_attach+0x5e>
   1fbc4:	200041e0 	.word	0x200041e0
   1fbc8:	0001f5c9 	.word	0x0001f5c9
   1fbcc:	0bad0000 	.word	0x0bad0000
   1fbd0:	20000be8 	.word	0x20000be8

0001fbd4 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   1fbd4:	4b07      	ldr	r3, [pc, #28]	; (1fbf4 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   1fbd6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1fbda:	b13a      	cbz	r2, 1fbec <usb_dc_set_address+0x18>
   1fbdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   1fbe0:	2b00      	cmp	r3, #0
   1fbe2:	bf0c      	ite	eq
   1fbe4:	f06f 0012 	mvneq.w	r0, #18
   1fbe8:	2000      	movne	r0, #0
   1fbea:	4770      	bx	lr
		return -ENODEV;
   1fbec:	f06f 0012 	mvn.w	r0, #18
}
   1fbf0:	4770      	bx	lr
   1fbf2:	bf00      	nop
   1fbf4:	200041e0 	.word	0x200041e0

0001fbf8 <usb_dc_ep_check_cap>:
{
   1fbf8:	b500      	push	{lr}
   1fbfa:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1fbfc:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1fbfe:	791b      	ldrb	r3, [r3, #4]
{
   1fc00:	b089      	sub	sp, #36	; 0x24
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1fc02:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1fc06:	b98b      	cbnz	r3, 1fc2c <usb_dc_ep_check_cap+0x34>
   1fc08:	b358      	cbz	r0, 1fc62 <usb_dc_ep_check_cap+0x6a>
		LOG_ERR("invalid endpoint configuration");
   1fc0a:	4817      	ldr	r0, [pc, #92]	; (1fc68 <usb_dc_ep_check_cap+0x70>)
   1fc0c:	6803      	ldr	r3, [r0, #0]
   1fc0e:	0759      	lsls	r1, r3, #29
   1fc10:	d009      	beq.n	1fc26 <usb_dc_ep_check_cap+0x2e>
   1fc12:	4b16      	ldr	r3, [pc, #88]	; (1fc6c <usb_dc_ep_check_cap+0x74>)
		LOG_ERR("invalid endpoint index/address");
   1fc14:	9306      	str	r3, [sp, #24]
   1fc16:	2302      	movs	r3, #2
   1fc18:	9301      	str	r3, [sp, #4]
   1fc1a:	9305      	str	r3, [sp, #20]
   1fc1c:	aa05      	add	r2, sp, #20
   1fc1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fc22:	f00a ff4a 	bl	2aaba <z_log_msg2_static_create.constprop.0>
		return -1;
   1fc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc2a:	e01a      	b.n	1fc62 <usb_dc_ep_check_cap+0x6a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   1fc2c:	2808      	cmp	r0, #8
   1fc2e:	d905      	bls.n	1fc3c <usb_dc_ep_check_cap+0x44>
		LOG_ERR("invalid endpoint index/address");
   1fc30:	480d      	ldr	r0, [pc, #52]	; (1fc68 <usb_dc_ep_check_cap+0x70>)
   1fc32:	6803      	ldr	r3, [r0, #0]
   1fc34:	075a      	lsls	r2, r3, #29
   1fc36:	d0f6      	beq.n	1fc26 <usb_dc_ep_check_cap+0x2e>
   1fc38:	4b0d      	ldr	r3, [pc, #52]	; (1fc70 <usb_dc_ep_check_cap+0x78>)
   1fc3a:	e7eb      	b.n	1fc14 <usb_dc_ep_check_cap+0x1c>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   1fc3c:	2b01      	cmp	r3, #1
   1fc3e:	d10f      	bne.n	1fc60 <usb_dc_ep_check_cap+0x68>
   1fc40:	0713      	lsls	r3, r2, #28
   1fc42:	d40d      	bmi.n	1fc60 <usb_dc_ep_check_cap+0x68>
		LOG_WRN("invalid endpoint type");
   1fc44:	4808      	ldr	r0, [pc, #32]	; (1fc68 <usb_dc_ep_check_cap+0x70>)
   1fc46:	6803      	ldr	r3, [r0, #0]
   1fc48:	f013 0f06 	tst.w	r3, #6
   1fc4c:	d0eb      	beq.n	1fc26 <usb_dc_ep_check_cap+0x2e>
   1fc4e:	4b09      	ldr	r3, [pc, #36]	; (1fc74 <usb_dc_ep_check_cap+0x7c>)
   1fc50:	9306      	str	r3, [sp, #24]
   1fc52:	2302      	movs	r3, #2
   1fc54:	9301      	str	r3, [sp, #4]
   1fc56:	9305      	str	r3, [sp, #20]
   1fc58:	aa05      	add	r2, sp, #20
   1fc5a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fc5e:	e7e0      	b.n	1fc22 <usb_dc_ep_check_cap+0x2a>
	return 0;
   1fc60:	2000      	movs	r0, #0
}
   1fc62:	b009      	add	sp, #36	; 0x24
   1fc64:	f85d fb04 	ldr.w	pc, [sp], #4
   1fc68:	20000a54 	.word	0x20000a54
   1fc6c:	000318ba 	.word	0x000318ba
   1fc70:	000318d9 	.word	0x000318d9
   1fc74:	000318f8 	.word	0x000318f8

0001fc78 <usb_dc_ep_configure>:
{
   1fc78:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   1fc7a:	4b18      	ldr	r3, [pc, #96]	; (1fcdc <usb_dc_ep_configure+0x64>)
	if (!dev_attached()) {
   1fc7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   1fc80:	b088      	sub	sp, #32
   1fc82:	4601      	mov	r1, r0
	if (!dev_attached()) {
   1fc84:	b333      	cbz	r3, 1fcd4 <usb_dc_ep_configure+0x5c>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   1fc86:	7804      	ldrb	r4, [r0, #0]
   1fc88:	4620      	mov	r0, r4
   1fc8a:	f7ff fb21 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1fc8e:	b918      	cbnz	r0, 1fc98 <usb_dc_ep_configure+0x20>
			return -EINVAL;
   1fc90:	f06f 0015 	mvn.w	r0, #21
}
   1fc94:	b008      	add	sp, #32
   1fc96:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   1fc98:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   1fc9a:	790b      	ldrb	r3, [r1, #4]
   1fc9c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   1fc9e:	8849      	ldrh	r1, [r1, #2]
   1fca0:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   1fca2:	0722      	lsls	r2, r4, #28
   1fca4:	d411      	bmi.n	1fcca <usb_dc_ep_configure+0x52>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   1fca6:	1e4b      	subs	r3, r1, #1
   1fca8:	420b      	tst	r3, r1
   1fcaa:	d00e      	beq.n	1fcca <usb_dc_ep_configure+0x52>
			LOG_ERR("EP max packet size must be a power of 2");
   1fcac:	480c      	ldr	r0, [pc, #48]	; (1fce0 <usb_dc_ep_configure+0x68>)
   1fcae:	6803      	ldr	r3, [r0, #0]
   1fcb0:	075b      	lsls	r3, r3, #29
   1fcb2:	d0ed      	beq.n	1fc90 <usb_dc_ep_configure+0x18>
   1fcb4:	4b0b      	ldr	r3, [pc, #44]	; (1fce4 <usb_dc_ep_configure+0x6c>)
   1fcb6:	9306      	str	r3, [sp, #24]
   1fcb8:	aa05      	add	r2, sp, #20
   1fcba:	2302      	movs	r3, #2
   1fcbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fcc0:	9301      	str	r3, [sp, #4]
   1fcc2:	9305      	str	r3, [sp, #20]
   1fcc4:	f00a fef9 	bl	2aaba <z_log_msg2_static_create.constprop.0>
   1fcc8:	e7e2      	b.n	1fc90 <usb_dc_ep_configure+0x18>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   1fcca:	4620      	mov	r0, r4
   1fccc:	f00b fb06 	bl	2b2dc <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   1fcd0:	2000      	movs	r0, #0
   1fcd2:	e7df      	b.n	1fc94 <usb_dc_ep_configure+0x1c>
		return -ENODEV;
   1fcd4:	f06f 0012 	mvn.w	r0, #18
   1fcd8:	e7dc      	b.n	1fc94 <usb_dc_ep_configure+0x1c>
   1fcda:	bf00      	nop
   1fcdc:	200041e0 	.word	0x200041e0
   1fce0:	20000a54 	.word	0x20000a54
   1fce4:	0003190e 	.word	0x0003190e

0001fce8 <usb_dc_ep_set_stall>:
{
   1fce8:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   1fcea:	4b1a      	ldr	r3, [pc, #104]	; (1fd54 <usb_dc_ep_set_stall+0x6c>)
	if (!dev_attached() || !dev_ready()) {
   1fcec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1fcf0:	b088      	sub	sp, #32
   1fcf2:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1fcf4:	b35a      	cbz	r2, 1fd4e <usb_dc_ep_set_stall+0x66>
   1fcf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1fcfa:	b343      	cbz	r3, 1fd4e <usb_dc_ep_set_stall+0x66>
	ep_ctx = endpoint_ctx(ep);
   1fcfc:	f7ff fae8 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1fd00:	4604      	mov	r4, r0
   1fd02:	b308      	cbz	r0, 1fd48 <usb_dc_ep_set_stall+0x60>
	switch (ep_ctx->cfg.type) {
   1fd04:	7a83      	ldrb	r3, [r0, #10]
   1fd06:	2b01      	cmp	r3, #1
   1fd08:	d010      	beq.n	1fd2c <usb_dc_ep_set_stall+0x44>
   1fd0a:	d908      	bls.n	1fd1e <usb_dc_ep_set_stall+0x36>
   1fd0c:	3b02      	subs	r3, #2
   1fd0e:	2b01      	cmp	r3, #1
   1fd10:	d908      	bls.n	1fd24 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   1fd12:	6963      	ldr	r3, [r4, #20]
   1fd14:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   1fd16:	2000      	movs	r0, #0
   1fd18:	60e0      	str	r0, [r4, #12]
}
   1fd1a:	b008      	add	sp, #32
   1fd1c:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   1fd1e:	f002 ffbd 	bl	22c9c <nrfx_usbd_setup_stall>
		break;
   1fd22:	e7f6      	b.n	1fd12 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   1fd24:	4608      	mov	r0, r1
   1fd26:	f002 ff2d 	bl	22b84 <nrfx_usbd_ep_stall>
		break;
   1fd2a:	e7f2      	b.n	1fd12 <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
   1fd2c:	480a      	ldr	r0, [pc, #40]	; (1fd58 <usb_dc_ep_set_stall+0x70>)
   1fd2e:	6803      	ldr	r3, [r0, #0]
   1fd30:	075b      	lsls	r3, r3, #29
   1fd32:	d009      	beq.n	1fd48 <usb_dc_ep_set_stall+0x60>
   1fd34:	4b09      	ldr	r3, [pc, #36]	; (1fd5c <usb_dc_ep_set_stall+0x74>)
   1fd36:	9306      	str	r3, [sp, #24]
   1fd38:	aa05      	add	r2, sp, #20
   1fd3a:	2302      	movs	r3, #2
   1fd3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fd40:	9301      	str	r3, [sp, #4]
   1fd42:	9305      	str	r3, [sp, #20]
   1fd44:	f00a feb9 	bl	2aaba <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1fd48:	f06f 0015 	mvn.w	r0, #21
   1fd4c:	e7e5      	b.n	1fd1a <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
   1fd4e:	f06f 0012 	mvn.w	r0, #18
   1fd52:	e7e2      	b.n	1fd1a <usb_dc_ep_set_stall+0x32>
   1fd54:	200041e0 	.word	0x200041e0
   1fd58:	20000a54 	.word	0x20000a54
   1fd5c:	00031936 	.word	0x00031936

0001fd60 <usb_dc_ep_clear_stall>:
{
   1fd60:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1fd62:	4b0e      	ldr	r3, [pc, #56]	; (1fd9c <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   1fd64:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1fd68:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   1fd6a:	b182      	cbz	r2, 1fd8e <usb_dc_ep_clear_stall+0x2e>
   1fd6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1fd70:	b16b      	cbz	r3, 1fd8e <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   1fd72:	f7ff faad 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1fd76:	b168      	cbz	r0, 1fd94 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   1fd78:	f015 0408 	ands.w	r4, r5, #8
   1fd7c:	d10a      	bne.n	1fd94 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1fd7e:	4628      	mov	r0, r5
   1fd80:	f002 ff22 	bl	22bc8 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1fd84:	4628      	mov	r0, r5
   1fd86:	f003 f9bf 	bl	23108 <nrfx_usbd_ep_stall_clear>
	return 0;
   1fd8a:	4620      	mov	r0, r4
}
   1fd8c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1fd8e:	f06f 0012 	mvn.w	r0, #18
   1fd92:	e7fb      	b.n	1fd8c <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   1fd94:	f06f 0015 	mvn.w	r0, #21
   1fd98:	e7f8      	b.n	1fd8c <usb_dc_ep_clear_stall+0x2c>
   1fd9a:	bf00      	nop
   1fd9c:	200041e0 	.word	0x200041e0

0001fda0 <usb_dc_ep_is_stalled>:
{
   1fda0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1fda2:	4b0c      	ldr	r3, [pc, #48]	; (1fdd4 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   1fda4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1fda8:	4605      	mov	r5, r0
   1fdaa:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   1fdac:	b162      	cbz	r2, 1fdc8 <usb_dc_ep_is_stalled+0x28>
   1fdae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1fdb2:	b14b      	cbz	r3, 1fdc8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   1fdb4:	f7ff fa8c 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1fdb8:	b148      	cbz	r0, 1fdce <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   1fdba:	b141      	cbz	r1, 1fdce <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   1fdbc:	4628      	mov	r0, r5
   1fdbe:	f002 fee9 	bl	22b94 <nrfx_usbd_ep_stall_check>
   1fdc2:	7020      	strb	r0, [r4, #0]
	return 0;
   1fdc4:	2000      	movs	r0, #0
}
   1fdc6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1fdc8:	f06f 0012 	mvn.w	r0, #18
   1fdcc:	e7fb      	b.n	1fdc6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   1fdce:	f06f 0015 	mvn.w	r0, #21
   1fdd2:	e7f8      	b.n	1fdc6 <usb_dc_ep_is_stalled+0x26>
   1fdd4:	200041e0 	.word	0x200041e0

0001fdd8 <usb_dc_ep_enable>:
{
   1fdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   1fdda:	4f13      	ldr	r7, [pc, #76]	; (1fe28 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   1fddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   1fde0:	4604      	mov	r4, r0
	if (!dev_attached()) {
   1fde2:	b1bb      	cbz	r3, 1fe14 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   1fde4:	f7ff fa74 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1fde8:	4605      	mov	r5, r0
   1fdea:	b1b0      	cbz	r0, 1fe1a <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   1fdec:	0723      	lsls	r3, r4, #28
   1fdee:	d405      	bmi.n	1fdfc <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1fdf0:	4620      	mov	r0, r4
   1fdf2:	f002 fee9 	bl	22bc8 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1fdf6:	4620      	mov	r0, r4
   1fdf8:	f003 f986 	bl	23108 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   1fdfc:	7a2e      	ldrb	r6, [r5, #8]
   1fdfe:	b97e      	cbnz	r6, 1fe20 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   1fe00:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   1fe04:	2301      	movs	r3, #1
   1fe06:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   1fe08:	b118      	cbz	r0, 1fe12 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   1fe0a:	4620      	mov	r0, r4
   1fe0c:	f003 f92a 	bl	23064 <nrfx_usbd_ep_enable>
	return 0;
   1fe10:	4630      	mov	r0, r6
}
   1fe12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1fe14:	f06f 0012 	mvn.w	r0, #18
   1fe18:	e7fb      	b.n	1fe12 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   1fe1a:	f06f 0015 	mvn.w	r0, #21
   1fe1e:	e7f8      	b.n	1fe12 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   1fe20:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1fe24:	e7f5      	b.n	1fe12 <usb_dc_ep_enable+0x3a>
   1fe26:	bf00      	nop
   1fe28:	200041e0 	.word	0x200041e0

0001fe2c <usb_dc_ep_disable>:
{
   1fe2c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1fe2e:	4b11      	ldr	r3, [pc, #68]	; (1fe74 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   1fe30:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1fe34:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1fe36:	b19a      	cbz	r2, 1fe60 <usb_dc_ep_disable+0x34>
   1fe38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1fe3c:	b183      	cbz	r3, 1fe60 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   1fe3e:	f7ff fa47 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1fe42:	4605      	mov	r5, r0
   1fe44:	b178      	cbz	r0, 1fe66 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   1fe46:	7a03      	ldrb	r3, [r0, #8]
   1fe48:	b183      	cbz	r3, 1fe6c <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1fe4a:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   1fe4c:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1fe4e:	f003 f8dd 	bl	2300c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   1fe52:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   1fe54:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   1fe56:	f00a fe1d 	bl	2aa94 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   1fe5a:	722c      	strb	r4, [r5, #8]
	return 0;
   1fe5c:	4620      	mov	r0, r4
}
   1fe5e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1fe60:	f06f 0012 	mvn.w	r0, #18
   1fe64:	e7fb      	b.n	1fe5e <usb_dc_ep_disable+0x32>
		return -EINVAL;
   1fe66:	f06f 0015 	mvn.w	r0, #21
   1fe6a:	e7f8      	b.n	1fe5e <usb_dc_ep_disable+0x32>
		return -EALREADY;
   1fe6c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1fe70:	e7f5      	b.n	1fe5e <usb_dc_ep_disable+0x32>
   1fe72:	bf00      	nop
   1fe74:	200041e0 	.word	0x200041e0

0001fe78 <usb_dc_ep_write>:
{
   1fe78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   1fe7c:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1ff94 <usb_dc_ep_write+0x11c>
{
   1fe80:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   1fe82:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   1fe86:	b08b      	sub	sp, #44	; 0x2c
   1fe88:	4607      	mov	r7, r0
   1fe8a:	4689      	mov	r9, r1
   1fe8c:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   1fe8e:	2b00      	cmp	r3, #0
   1fe90:	d07d      	beq.n	1ff8e <usb_dc_ep_write+0x116>
   1fe92:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   1fe96:	2b00      	cmp	r3, #0
   1fe98:	d079      	beq.n	1ff8e <usb_dc_ep_write+0x116>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   1fe9a:	0605      	lsls	r5, r0, #24
   1fe9c:	d514      	bpl.n	1fec8 <usb_dc_ep_write+0x50>
	ep_ctx = endpoint_ctx(ep);
   1fe9e:	f7ff fa17 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1fea2:	4605      	mov	r5, r0
   1fea4:	b180      	cbz	r0, 1fec8 <usb_dc_ep_write+0x50>
	if (!ep_ctx->cfg.en) {
   1fea6:	7a03      	ldrb	r3, [r0, #8]
   1fea8:	b98b      	cbnz	r3, 1fece <usb_dc_ep_write+0x56>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1feaa:	483b      	ldr	r0, [pc, #236]	; (1ff98 <usb_dc_ep_write+0x120>)
   1feac:	6803      	ldr	r3, [r0, #0]
   1feae:	0759      	lsls	r1, r3, #29
   1feb0:	d00a      	beq.n	1fec8 <usb_dc_ep_write+0x50>
   1feb2:	4b3a      	ldr	r3, [pc, #232]	; (1ff9c <usb_dc_ep_write+0x124>)
   1feb4:	aa07      	add	r2, sp, #28
   1feb6:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1feba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1febe:	2303      	movs	r3, #3
   1fec0:	9301      	str	r3, [sp, #4]
   1fec2:	9307      	str	r3, [sp, #28]
   1fec4:	f00a fdf9 	bl	2aaba <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1fec8:	f06f 0415 	mvn.w	r4, #21
   1fecc:	e00f      	b.n	1feee <usb_dc_ep_write+0x76>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1fece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fed6:	f108 0038 	add.w	r0, r8, #56	; 0x38
   1feda:	f00a fdf1 	bl	2aac0 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   1fede:	7fab      	ldrb	r3, [r5, #30]
   1fee0:	b14b      	cbz	r3, 1fef6 <usb_dc_ep_write+0x7e>
		k_mutex_unlock(&ctx->drv_lock);
   1fee2:	f108 0038 	add.w	r0, r8, #56	; 0x38
   1fee6:	f00a fded 	bl	2aac4 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   1feea:	f06f 040a 	mvn.w	r4, #10
}
   1feee:	4620      	mov	r0, r4
   1fef0:	b00b      	add	sp, #44	; 0x2c
   1fef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   1fef6:	b916      	cbnz	r6, 1fefe <usb_dc_ep_write+0x86>
   1fef8:	7feb      	ldrb	r3, [r5, #31]
   1fefa:	b103      	cbz	r3, 1fefe <usb_dc_ep_write+0x86>
		ep_ctx->trans_zlp = false;
   1fefc:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   1fefe:	7aab      	ldrb	r3, [r5, #10]
   1ff00:	b9bb      	cbnz	r3, 1ff32 <usb_dc_ep_write+0xba>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1ff02:	b15e      	cbz	r6, 1ff1c <usb_dc_ep_write+0xa4>
   1ff04:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1ff08:	429e      	cmp	r6, r3
   1ff0a:	d207      	bcs.n	1ff1c <usb_dc_ep_write+0xa4>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   1ff0c:	686a      	ldr	r2, [r5, #4]
   1ff0e:	fbb6 f3f2 	udiv	r3, r6, r2
   1ff12:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1ff16:	b90b      	cbnz	r3, 1ff1c <usb_dc_ep_write+0xa4>
			ep_ctx->trans_zlp = true;
   1ff18:	2301      	movs	r3, #1
   1ff1a:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   1ff1c:	f002 fec6 	bl	22cac <nrfx_usbd_last_setup_dir_get>
   1ff20:	4287      	cmp	r7, r0
   1ff22:	d006      	beq.n	1ff32 <usb_dc_ep_write+0xba>
		nrfx_usbd_setup_clear();
   1ff24:	f002 feb2 	bl	22c8c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   1ff28:	481d      	ldr	r0, [pc, #116]	; (1ffa0 <usb_dc_ep_write+0x128>)
   1ff2a:	f00a fdcb 	bl	2aac4 <k_mutex_unlock.isra.0>
		return 0;
   1ff2e:	2400      	movs	r4, #0
   1ff30:	e7dd      	b.n	1feee <usb_dc_ep_write+0x76>
	ep_ctx->write_in_progress = true;
   1ff32:	2301      	movs	r3, #1
   1ff34:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1ff36:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1ff3a:	a901      	add	r1, sp, #4
   1ff3c:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1ff3e:	e9cd 9601 	strd	r9, r6, [sp, #4]
   1ff42:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1ff46:	f002 fc7b 	bl	22840 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   1ff4a:	4a16      	ldr	r2, [pc, #88]	; (1ffa4 <usb_dc_ep_write+0x12c>)
   1ff4c:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1ff4e:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
   1ff50:	d016      	beq.n	1ff80 <usb_dc_ep_write+0x108>
		ep_ctx->write_in_progress = false;
   1ff52:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   1ff56:	b10c      	cbz	r4, 1ff5c <usb_dc_ep_write+0xe4>
			*ret_bytes = 0;
   1ff58:	f8c4 8000 	str.w	r8, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   1ff5c:	480e      	ldr	r0, [pc, #56]	; (1ff98 <usb_dc_ep_write+0x120>)
   1ff5e:	6802      	ldr	r2, [r0, #0]
   1ff60:	0752      	lsls	r2, r2, #29
   1ff62:	d00a      	beq.n	1ff7a <usb_dc_ep_write+0x102>
   1ff64:	4a10      	ldr	r2, [pc, #64]	; (1ffa8 <usb_dc_ep_write+0x130>)
   1ff66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ff6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1ff6e:	2303      	movs	r3, #3
   1ff70:	aa07      	add	r2, sp, #28
   1ff72:	9300      	str	r3, [sp, #0]
   1ff74:	9307      	str	r3, [sp, #28]
   1ff76:	f00a fda0 	bl	2aaba <z_log_msg2_static_create.constprop.0>
		result = -EIO;
   1ff7a:	f06f 0404 	mvn.w	r4, #4
   1ff7e:	e002      	b.n	1ff86 <usb_dc_ep_write+0x10e>
		if (ret_bytes) {
   1ff80:	b10c      	cbz	r4, 1ff86 <usb_dc_ep_write+0x10e>
			*ret_bytes = data_len;
   1ff82:	6026      	str	r6, [r4, #0]
	int result = 0;
   1ff84:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   1ff86:	4806      	ldr	r0, [pc, #24]	; (1ffa0 <usb_dc_ep_write+0x128>)
   1ff88:	f00a fd9c 	bl	2aac4 <k_mutex_unlock.isra.0>
	return result;
   1ff8c:	e7af      	b.n	1feee <usb_dc_ep_write+0x76>
		return -ENODEV;
   1ff8e:	f06f 0412 	mvn.w	r4, #18
   1ff92:	e7ac      	b.n	1feee <usb_dc_ep_write+0x76>
   1ff94:	200041e0 	.word	0x200041e0
   1ff98:	20000a54 	.word	0x20000a54
   1ff9c:	00031958 	.word	0x00031958
   1ffa0:	20004218 	.word	0x20004218
   1ffa4:	0bad0000 	.word	0x0bad0000
   1ffa8:	00031977 	.word	0x00031977

0001ffac <usb_dc_ep_read_wait>:
{
   1ffac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffb0:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   1ffb2:	4b2b      	ldr	r3, [pc, #172]	; (20060 <usb_dc_ep_read_wait+0xb4>)
{
   1ffb4:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   1ffb6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1ffba:	b088      	sub	sp, #32
   1ffbc:	4680      	mov	r8, r0
   1ffbe:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   1ffc0:	2a00      	cmp	r2, #0
   1ffc2:	d049      	beq.n	20058 <usb_dc_ep_read_wait+0xac>
   1ffc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1ffc8:	2b00      	cmp	r3, #0
   1ffca:	d045      	beq.n	20058 <usb_dc_ep_read_wait+0xac>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1ffcc:	f010 0f80 	tst.w	r0, #128	; 0x80
   1ffd0:	d117      	bne.n	20002 <usb_dc_ep_read_wait+0x56>
	if (!data && max_data_len) {
   1ffd2:	b901      	cbnz	r1, 1ffd6 <usb_dc_ep_read_wait+0x2a>
   1ffd4:	b9af      	cbnz	r7, 20002 <usb_dc_ep_read_wait+0x56>
	ep_ctx = endpoint_ctx(ep);
   1ffd6:	4640      	mov	r0, r8
   1ffd8:	f7ff f97a 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   1ffdc:	4604      	mov	r4, r0
   1ffde:	b180      	cbz	r0, 20002 <usb_dc_ep_read_wait+0x56>
	if (!ep_ctx->cfg.en) {
   1ffe0:	7a03      	ldrb	r3, [r0, #8]
   1ffe2:	b98b      	cbnz	r3, 20008 <usb_dc_ep_read_wait+0x5c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1ffe4:	481f      	ldr	r0, [pc, #124]	; (20064 <usb_dc_ep_read_wait+0xb8>)
   1ffe6:	6803      	ldr	r3, [r0, #0]
   1ffe8:	075b      	lsls	r3, r3, #29
   1ffea:	d00a      	beq.n	20002 <usb_dc_ep_read_wait+0x56>
   1ffec:	4b1e      	ldr	r3, [pc, #120]	; (20068 <usb_dc_ep_read_wait+0xbc>)
   1ffee:	aa05      	add	r2, sp, #20
   1fff0:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1fff4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fff8:	2303      	movs	r3, #3
   1fffa:	9301      	str	r3, [sp, #4]
   1fffc:	9305      	str	r3, [sp, #20]
   1fffe:	f00a fd5c 	bl	2aaba <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   20002:	f06f 0015 	mvn.w	r0, #21
   20006:	e013      	b.n	20030 <usb_dc_ep_read_wait+0x84>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   20008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2000c:	4817      	ldr	r0, [pc, #92]	; (2006c <usb_dc_ep_read_wait+0xc0>)
   2000e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20012:	f00a fd55 	bl	2aac0 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   20016:	68e3      	ldr	r3, [r4, #12]
   20018:	42bb      	cmp	r3, r7
   2001a:	4698      	mov	r8, r3
   2001c:	bf28      	it	cs
   2001e:	46b8      	movcs	r8, r7
	if (!data && !max_data_len) {
   20020:	b94e      	cbnz	r6, 20036 <usb_dc_ep_read_wait+0x8a>
   20022:	b947      	cbnz	r7, 20036 <usb_dc_ep_read_wait+0x8a>
		if (read_bytes) {
   20024:	b105      	cbz	r5, 20028 <usb_dc_ep_read_wait+0x7c>
			*read_bytes = ep_ctx->buf.len;
   20026:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   20028:	4810      	ldr	r0, [pc, #64]	; (2006c <usb_dc_ep_read_wait+0xc0>)
   2002a:	f00a fd4b 	bl	2aac4 <k_mutex_unlock.isra.0>
		return 0;
   2002e:	2000      	movs	r0, #0
}
   20030:	b008      	add	sp, #32
   20032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   20036:	69a1      	ldr	r1, [r4, #24]
   20038:	4642      	mov	r2, r8
   2003a:	4630      	mov	r0, r6
   2003c:	f008 fabb 	bl	285b6 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   20040:	69a3      	ldr	r3, [r4, #24]
   20042:	4443      	add	r3, r8
   20044:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   20046:	68e3      	ldr	r3, [r4, #12]
   20048:	eba3 0308 	sub.w	r3, r3, r8
   2004c:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   2004e:	2d00      	cmp	r5, #0
   20050:	d0ea      	beq.n	20028 <usb_dc_ep_read_wait+0x7c>
		*read_bytes = bytes_to_copy;
   20052:	f8c5 8000 	str.w	r8, [r5]
   20056:	e7e7      	b.n	20028 <usb_dc_ep_read_wait+0x7c>
		return -ENODEV;
   20058:	f06f 0012 	mvn.w	r0, #18
   2005c:	e7e8      	b.n	20030 <usb_dc_ep_read_wait+0x84>
   2005e:	bf00      	nop
   20060:	200041e0 	.word	0x200041e0
   20064:	20000a54 	.word	0x20000a54
   20068:	00031958 	.word	0x00031958
   2006c:	20004218 	.word	0x20004218

00020070 <usb_dc_ep_read_continue>:
{
   20070:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   20072:	4d27      	ldr	r5, [pc, #156]	; (20110 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
   20074:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
   20078:	b088      	sub	sp, #32
   2007a:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   2007c:	2b00      	cmp	r3, #0
   2007e:	d044      	beq.n	2010a <usb_dc_ep_read_continue+0x9a>
   20080:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   20084:	2b00      	cmp	r3, #0
   20086:	d040      	beq.n	2010a <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   20088:	0602      	lsls	r2, r0, #24
   2008a:	d414      	bmi.n	200b6 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
   2008c:	f7ff f920 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   20090:	4604      	mov	r4, r0
   20092:	b180      	cbz	r0, 200b6 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
   20094:	7a03      	ldrb	r3, [r0, #8]
   20096:	b98b      	cbnz	r3, 200bc <usb_dc_ep_read_continue+0x4c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   20098:	481e      	ldr	r0, [pc, #120]	; (20114 <usb_dc_ep_read_continue+0xa4>)
   2009a:	6803      	ldr	r3, [r0, #0]
   2009c:	075b      	lsls	r3, r3, #29
   2009e:	d00a      	beq.n	200b6 <usb_dc_ep_read_continue+0x46>
   200a0:	4b1d      	ldr	r3, [pc, #116]	; (20118 <usb_dc_ep_read_continue+0xa8>)
   200a2:	aa05      	add	r2, sp, #20
   200a4:	e9cd 3106 	strd	r3, r1, [sp, #24]
   200a8:	2303      	movs	r3, #3
   200aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   200ae:	9301      	str	r3, [sp, #4]
   200b0:	9305      	str	r3, [sp, #20]
   200b2:	f00a fd02 	bl	2aaba <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   200b6:	f06f 0015 	mvn.w	r0, #21
   200ba:	e018      	b.n	200ee <usb_dc_ep_read_continue+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   200bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   200c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   200c4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   200c8:	f00a fcfa 	bl	2aac0 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   200cc:	68e3      	ldr	r3, [r4, #12]
   200ce:	b9bb      	cbnz	r3, 20100 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
   200d0:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   200d2:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   200d4:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   200d6:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   200d8:	7f63      	ldrb	r3, [r4, #29]
   200da:	b18b      	cbz	r3, 20100 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
   200dc:	f7ff f968 	bl	1f3b0 <usbd_evt_alloc>
			if (!ev) {
   200e0:	b938      	cbnz	r0, 200f2 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
   200e2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   200e6:	f00a fced 	bl	2aac4 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   200ea:	f06f 000b 	mvn.w	r0, #11
}
   200ee:	b008      	add	sp, #32
   200f0:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   200f2:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   200f4:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   200f6:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   200f8:	f7ff f912 	bl	1f320 <usbd_evt_put>
			usbd_work_schedule();
   200fc:	f7ff f916 	bl	1f32c <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   20100:	4806      	ldr	r0, [pc, #24]	; (2011c <usb_dc_ep_read_continue+0xac>)
   20102:	f00a fcdf 	bl	2aac4 <k_mutex_unlock.isra.0>
	return 0;
   20106:	2000      	movs	r0, #0
   20108:	e7f1      	b.n	200ee <usb_dc_ep_read_continue+0x7e>
		return -ENODEV;
   2010a:	f06f 0012 	mvn.w	r0, #18
   2010e:	e7ee      	b.n	200ee <usb_dc_ep_read_continue+0x7e>
   20110:	200041e0 	.word	0x200041e0
   20114:	20000a54 	.word	0x20000a54
   20118:	00031958 	.word	0x00031958
   2011c:	20004218 	.word	0x20004218

00020120 <usb_dc_ep_set_callback>:
{
   20120:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   20122:	4b08      	ldr	r3, [pc, #32]	; (20144 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   20124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   20128:	b12b      	cbz	r3, 20136 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   2012a:	f7ff f8d1 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   2012e:	b128      	cbz	r0, 2013c <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   20130:	6001      	str	r1, [r0, #0]
	return 0;
   20132:	2000      	movs	r0, #0
}
   20134:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20136:	f06f 0012 	mvn.w	r0, #18
   2013a:	e7fb      	b.n	20134 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   2013c:	f06f 0015 	mvn.w	r0, #21
   20140:	e7f8      	b.n	20134 <usb_dc_ep_set_callback+0x14>
   20142:	bf00      	nop
   20144:	200041e0 	.word	0x200041e0

00020148 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   20148:	4b01      	ldr	r3, [pc, #4]	; (20150 <usb_dc_set_status_callback+0x8>)
   2014a:	6018      	str	r0, [r3, #0]
}
   2014c:	4770      	bx	lr
   2014e:	bf00      	nop
   20150:	200041e0 	.word	0x200041e0

00020154 <usb_dc_ep_mps>:
{
   20154:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   20156:	4b07      	ldr	r3, [pc, #28]	; (20174 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   20158:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2015c:	b123      	cbz	r3, 20168 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   2015e:	f7ff f8b7 	bl	1f2d0 <endpoint_ctx>
	if (!ep_ctx) {
   20162:	b120      	cbz	r0, 2016e <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   20164:	6840      	ldr	r0, [r0, #4]
}
   20166:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20168:	f06f 0012 	mvn.w	r0, #18
   2016c:	e7fb      	b.n	20166 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   2016e:	f06f 0015 	mvn.w	r0, #21
   20172:	e7f8      	b.n	20166 <usb_dc_ep_mps+0x12>
   20174:	200041e0 	.word	0x200041e0

00020178 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20178:	4b08      	ldr	r3, [pc, #32]	; (2019c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2017a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2017c:	1ac3      	subs	r3, r0, r3
{
   2017e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20180:	4907      	ldr	r1, [pc, #28]	; (201a0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   20182:	109b      	asrs	r3, r3, #2
{
   20184:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20186:	4359      	muls	r1, r3
   20188:	4806      	ldr	r0, [pc, #24]	; (201a4 <onoff_stop+0x2c>)
   2018a:	2240      	movs	r2, #64	; 0x40
   2018c:	f00a fcc7 	bl	2ab1e <stop>
	notify(mgr, res);
   20190:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20192:	4601      	mov	r1, r0
	notify(mgr, res);
   20194:	4620      	mov	r0, r4
}
   20196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2019a:	4718      	bx	r3
   2019c:	20004480 	.word	0x20004480
   201a0:	b6db6db7 	.word	0xb6db6db7
   201a4:	0002bf98 	.word	0x0002bf98

000201a8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   201a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   201aa:	4c0c      	ldr	r4, [pc, #48]	; (201dc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   201ac:	4a0c      	ldr	r2, [pc, #48]	; (201e0 <onoff_start+0x38>)
   201ae:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   201b0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   201b2:	9300      	str	r3, [sp, #0]
{
   201b4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   201b6:	460b      	mov	r3, r1
   201b8:	490a      	ldr	r1, [pc, #40]	; (201e4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   201ba:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   201bc:	4361      	muls	r1, r4
{
   201be:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   201c0:	4809      	ldr	r0, [pc, #36]	; (201e8 <onoff_start+0x40>)
   201c2:	f00a fcd9 	bl	2ab78 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   201c6:	1e01      	subs	r1, r0, #0
   201c8:	da05      	bge.n	201d6 <onoff_start+0x2e>
		notify(mgr, err);
   201ca:	4630      	mov	r0, r6
   201cc:	462b      	mov	r3, r5
	}
}
   201ce:	b002      	add	sp, #8
   201d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   201d4:	4718      	bx	r3
}
   201d6:	b002      	add	sp, #8
   201d8:	bd70      	pop	{r4, r5, r6, pc}
   201da:	bf00      	nop
   201dc:	20004480 	.word	0x20004480
   201e0:	0002abe7 	.word	0x0002abe7
   201e4:	b6db6db7 	.word	0xb6db6db7
   201e8:	0002bf98 	.word	0x0002bf98

000201ec <hfclk_start>:
{
   201ec:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   201ee:	f00b fcca 	bl	2bb86 <z_impl_k_uptime_ticks>
   201f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   201f6:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
   201fa:	4c07      	ldr	r4, [pc, #28]	; (20218 <hfclk_start+0x2c>)
   201fc:	fb02 3101 	mla	r1, r2, r1, r3
   20200:	0bc0      	lsrs	r0, r0, #15
   20202:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   20206:	0bc9      	lsrs	r1, r1, #15
   20208:	e9c4 0100 	strd	r0, r1, [r4]
}
   2020c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20210:	2001      	movs	r0, #1
   20212:	f00a bf40 	b.w	2b096 <nrfx_clock_start>
   20216:	bf00      	nop
   20218:	20002178 	.word	0x20002178

0002021c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2021c:	2200      	movs	r2, #0
{
   2021e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20220:	2101      	movs	r1, #1
{
   20222:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20224:	4610      	mov	r0, r2
   20226:	f7ea f99b 	bl	a560 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   2022a:	2000      	movs	r0, #0
   2022c:	f7ea f966 	bl	a4fc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20230:	480f      	ldr	r0, [pc, #60]	; (20270 <clk_init+0x54>)
   20232:	f001 fb67 	bl	21904 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20236:	4b0f      	ldr	r3, [pc, #60]	; (20274 <clk_init+0x58>)
   20238:	4298      	cmp	r0, r3
   2023a:	d115      	bne.n	20268 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2023c:	f001 fb72 	bl	21924 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   20240:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   20242:	490d      	ldr	r1, [pc, #52]	; (20278 <clk_init+0x5c>)
   20244:	4630      	mov	r0, r6
   20246:	f004 fd5c 	bl	24d02 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2024a:	2800      	cmp	r0, #0
   2024c:	db0b      	blt.n	20266 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   2024e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20250:	4909      	ldr	r1, [pc, #36]	; (20278 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20252:	2501      	movs	r5, #1
   20254:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20256:	f104 001c 	add.w	r0, r4, #28
   2025a:	f004 fd52 	bl	24d02 <onoff_manager_init>
		if (err < 0) {
   2025e:	2800      	cmp	r0, #0
   20260:	db01      	blt.n	20266 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20262:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   20264:	2000      	movs	r0, #0
}
   20266:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   20268:	f06f 0004 	mvn.w	r0, #4
   2026c:	e7fb      	b.n	20266 <clk_init+0x4a>
   2026e:	bf00      	nop
   20270:	000202b1 	.word	0x000202b1
   20274:	0bad0000 	.word	0x0bad0000
   20278:	0002e1f8 	.word	0x0002e1f8

0002027c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2027c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2027e:	230c      	movs	r3, #12
   20280:	4809      	ldr	r0, [pc, #36]	; (202a8 <clkstarted_handle.constprop.0+0x2c>)
   20282:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   20284:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   20286:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   20288:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   2028c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2028e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   20290:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   20292:	4418      	add	r0, r3
   20294:	f00a fc30 	bl	2aaf8 <set_on_state>
	if (callback) {
   20298:	b12d      	cbz	r5, 202a6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2029a:	4632      	mov	r2, r6
   2029c:	462b      	mov	r3, r5
   2029e:	4803      	ldr	r0, [pc, #12]	; (202ac <clkstarted_handle.constprop.0+0x30>)
}
   202a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   202a4:	4718      	bx	r3
}
   202a6:	bd70      	pop	{r4, r5, r6, pc}
   202a8:	20004480 	.word	0x20004480
   202ac:	0002bf98 	.word	0x0002bf98

000202b0 <clock_event_handler>:
	switch (event) {
   202b0:	b110      	cbz	r0, 202b8 <clock_event_handler+0x8>
   202b2:	2801      	cmp	r0, #1
   202b4:	d004      	beq.n	202c0 <clock_event_handler+0x10>
   202b6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   202b8:	4b03      	ldr	r3, [pc, #12]	; (202c8 <clock_event_handler+0x18>)
   202ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   202bc:	075b      	lsls	r3, r3, #29
   202be:	d101      	bne.n	202c4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   202c0:	f7ff bfdc 	b.w	2027c <clkstarted_handle.constprop.0>
}
   202c4:	4770      	bx	lr
   202c6:	bf00      	nop
   202c8:	20004480 	.word	0x20004480

000202cc <generic_hfclk_start>:
{
   202cc:	b508      	push	{r3, lr}
	__asm__ volatile(
   202ce:	f04f 0320 	mov.w	r3, #32
   202d2:	f3ef 8111 	mrs	r1, BASEPRI
   202d6:	f383 8812 	msr	BASEPRI_MAX, r3
   202da:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   202de:	4a11      	ldr	r2, [pc, #68]	; (20324 <generic_hfclk_start+0x58>)
   202e0:	6813      	ldr	r3, [r2, #0]
   202e2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   202e6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   202ea:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   202ec:	d00c      	beq.n	20308 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   202ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   202f2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   202f6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   202fa:	f013 0301 	ands.w	r3, r3, #1
   202fe:	d003      	beq.n	20308 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   20300:	4809      	ldr	r0, [pc, #36]	; (20328 <generic_hfclk_start+0x5c>)
   20302:	f00a fbf9 	bl	2aaf8 <set_on_state>
			already_started = true;
   20306:	2301      	movs	r3, #1
	__asm__ volatile(
   20308:	f381 8811 	msr	BASEPRI, r1
   2030c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   20310:	b123      	cbz	r3, 2031c <generic_hfclk_start+0x50>
}
   20312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   20316:	2000      	movs	r0, #0
   20318:	f7ff bfb0 	b.w	2027c <clkstarted_handle.constprop.0>
}
   2031c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   20320:	f7ff bf64 	b.w	201ec <hfclk_start>
   20324:	200044d0 	.word	0x200044d0
   20328:	200044c0 	.word	0x200044c0

0002032c <api_blocking_start>:
{
   2032c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2032e:	2200      	movs	r2, #0
   20330:	2301      	movs	r3, #1
   20332:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20336:	ab04      	add	r3, sp, #16
   20338:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2033c:	4a09      	ldr	r2, [pc, #36]	; (20364 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2033e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20342:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20344:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20348:	f00a fc46 	bl	2abd8 <api_start>
	if (err < 0) {
   2034c:	2800      	cmp	r0, #0
   2034e:	db05      	blt.n	2035c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20354:	2300      	movs	r3, #0
   20356:	4668      	mov	r0, sp
   20358:	f003 fbd6 	bl	23b08 <z_impl_k_sem_take>
}
   2035c:	b007      	add	sp, #28
   2035e:	f85d fb04 	ldr.w	pc, [sp], #4
   20362:	bf00      	nop
   20364:	0002ac05 	.word	0x0002ac05

00020368 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   20368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2036c:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   20370:	4605      	mov	r5, r0
   20372:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
   20376:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   2037a:	f04f 0320 	mov.w	r3, #32
   2037e:	f3ef 8711 	mrs	r7, BASEPRI
   20382:	f383 8812 	msr	BASEPRI_MAX, r3
   20386:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   2038a:	f00b fbfc 	bl	2bb86 <z_impl_k_uptime_ticks>
   2038e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20392:	fba0 4003 	umull	r4, r0, r0, r3
   20396:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2039a:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2039e:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   203a2:	4b25      	ldr	r3, [pc, #148]	; (20438 <cmd_status+0xd0>)
   203a4:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   203a8:	4b24      	ldr	r3, [pc, #144]	; (2043c <cmd_status+0xd4>)
   203aa:	0be4      	lsrs	r4, r4, #15
   203ac:	f8d3 a000 	ldr.w	sl, [r3]
   203b0:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
   203b4:	f387 8811 	msr	BASEPRI, r7
   203b8:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   203bc:	4a20      	ldr	r2, [pc, #128]	; (20440 <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
   203be:	f8df 8084 	ldr.w	r8, [pc, #132]	; 20444 <cmd_status+0xdc>
   203c2:	4f21      	ldr	r7, [pc, #132]	; (20448 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
   203c4:	4628      	mov	r0, r5
   203c6:	2108      	movs	r1, #8
   203c8:	f005 fe05 	bl	25fd6 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   203cc:	f019 0f01 	tst.w	r9, #1
   203d0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2044c <cmd_status+0xe4>
   203d4:	4a1e      	ldr	r2, [pc, #120]	; (20450 <cmd_status+0xe8>)
   203d6:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   203da:	9300      	str	r3, [sp, #0]
   203dc:	4628      	mov	r0, r5
   203de:	bf14      	ite	ne
   203e0:	4643      	movne	r3, r8
   203e2:	463b      	moveq	r3, r7
   203e4:	2108      	movs	r1, #8
   203e6:	f005 fdf6 	bl	25fd6 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   203ea:	eba4 030b 	sub.w	r3, r4, fp
   203ee:	9300      	str	r3, [sp, #0]
   203f0:	4628      	mov	r0, r5
   203f2:	465b      	mov	r3, fp
   203f4:	4a17      	ldr	r2, [pc, #92]	; (20454 <cmd_status+0xec>)
   203f6:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   203f8:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   203fc:	f005 fdeb 	bl	25fd6 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   20400:	4653      	mov	r3, sl
   20402:	4628      	mov	r0, r5
   20404:	4a14      	ldr	r2, [pc, #80]	; (20458 <cmd_status+0xf0>)
   20406:	9400      	str	r4, [sp, #0]
   20408:	2108      	movs	r1, #8
   2040a:	f005 fde4 	bl	25fd6 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   2040e:	4628      	mov	r0, r5
   20410:	4a12      	ldr	r2, [pc, #72]	; (2045c <cmd_status+0xf4>)
   20412:	2108      	movs	r1, #8
   20414:	f005 fddf 	bl	25fd6 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   20418:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   2041c:	9300      	str	r3, [sp, #0]
   2041e:	4628      	mov	r0, r5
   20420:	4a0b      	ldr	r2, [pc, #44]	; (20450 <cmd_status+0xe8>)
   20422:	2e00      	cmp	r6, #0
   20424:	bf14      	ite	ne
   20426:	4643      	movne	r3, r8
   20428:	463b      	moveq	r3, r7
   2042a:	2108      	movs	r1, #8
   2042c:	f005 fdd3 	bl	25fd6 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   20430:	2000      	movs	r0, #0
   20432:	b003      	add	sp, #12
   20434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20438:	20002178 	.word	0x20002178
   2043c:	20002180 	.word	0x20002180
   20440:	000319a2 	.word	0x000319a2
   20444:	0002eae4 	.word	0x0002eae4
   20448:	0003199d 	.word	0x0003199d
   2044c:	20004480 	.word	0x20004480
   20450:	000319ad 	.word	0x000319ad
   20454:	000319c7 	.word	0x000319c7
   20458:	000319e9 	.word	0x000319e9
   2045c:	00031a0a 	.word	0x00031a0a

00020460 <hfclk_stop>:
{
   20460:	b510      	push	{r4, lr}
   20462:	f00b fb90 	bl	2bb86 <z_impl_k_uptime_ticks>
   20466:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2046a:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
   2046e:	4c07      	ldr	r4, [pc, #28]	; (2048c <hfclk_stop+0x2c>)
   20470:	fb02 3101 	mla	r1, r2, r1, r3
   20474:	0bc0      	lsrs	r0, r0, #15
   20476:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2047a:	0bc9      	lsrs	r1, r1, #15
   2047c:	e9c4 0100 	strd	r0, r1, [r4]
}
   20480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20484:	2001      	movs	r0, #1
   20486:	f001 ba5b 	b.w	21940 <nrfx_clock_stop>
   2048a:	bf00      	nop
   2048c:	20002180 	.word	0x20002180

00020490 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20490:	4b08      	ldr	r3, [pc, #32]	; (204b4 <generic_hfclk_stop+0x24>)
   20492:	f3bf 8f5b 	dmb	ish
   20496:	e853 2f00 	ldrex	r2, [r3]
   2049a:	f022 0102 	bic.w	r1, r2, #2
   2049e:	e843 1000 	strex	r0, r1, [r3]
   204a2:	2800      	cmp	r0, #0
   204a4:	d1f7      	bne.n	20496 <generic_hfclk_stop+0x6>
   204a6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   204aa:	07d3      	lsls	r3, r2, #31
   204ac:	d401      	bmi.n	204b2 <generic_hfclk_stop+0x22>
	hfclk_stop();
   204ae:	f7ff bfd7 	b.w	20460 <hfclk_stop>
}
   204b2:	4770      	bx	lr
   204b4:	200044d0 	.word	0x200044d0

000204b8 <z_nrf_clock_control_get_onoff>:
}
   204b8:	4a02      	ldr	r2, [pc, #8]	; (204c4 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   204ba:	b2c3      	uxtb	r3, r0
}
   204bc:	201c      	movs	r0, #28
   204be:	fb03 2000 	mla	r0, r3, r0, r2
   204c2:	4770      	bx	lr
   204c4:	20004480 	.word	0x20004480

000204c8 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   204c8:	4b08      	ldr	r3, [pc, #32]	; (204ec <z_nrf_clock_bt_ctlr_hf_request+0x24>)
   204ca:	f3bf 8f5b 	dmb	ish
   204ce:	e853 2f00 	ldrex	r2, [r3]
   204d2:	f042 0101 	orr.w	r1, r2, #1
   204d6:	e843 1000 	strex	r0, r1, [r3]
   204da:	2800      	cmp	r0, #0
   204dc:	d1f7      	bne.n	204ce <z_nrf_clock_bt_ctlr_hf_request+0x6>
   204de:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   204e2:	0793      	lsls	r3, r2, #30
   204e4:	d401      	bmi.n	204ea <z_nrf_clock_bt_ctlr_hf_request+0x22>
	hfclk_start();
   204e6:	f7ff be81 	b.w	201ec <hfclk_start>
}
   204ea:	4770      	bx	lr
   204ec:	200044d0 	.word	0x200044d0

000204f0 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   204f0:	4b08      	ldr	r3, [pc, #32]	; (20514 <z_nrf_clock_bt_ctlr_hf_release+0x24>)
   204f2:	f3bf 8f5b 	dmb	ish
   204f6:	e853 2f00 	ldrex	r2, [r3]
   204fa:	f022 0101 	bic.w	r1, r2, #1
   204fe:	e843 1000 	strex	r0, r1, [r3]
   20502:	2800      	cmp	r0, #0
   20504:	d1f7      	bne.n	204f6 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   20506:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   2050a:	0793      	lsls	r3, r2, #30
   2050c:	d401      	bmi.n	20512 <z_nrf_clock_bt_ctlr_hf_release+0x22>
	hfclk_stop();
   2050e:	f7ff bfa7 	b.w	20460 <hfclk_stop>
}
   20512:	4770      	bx	lr
   20514:	200044d0 	.word	0x200044d0

00020518 <z_nrf_clock_control_lf_on>:
{
   20518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2051c:	4939      	ldr	r1, [pc, #228]	; (20604 <z_nrf_clock_control_lf_on+0xec>)
   2051e:	f3bf 8f5b 	dmb	ish
   20522:	4607      	mov	r7, r0
   20524:	2201      	movs	r2, #1
   20526:	e851 3f00 	ldrex	r3, [r1]
   2052a:	e841 2000 	strex	r0, r2, [r1]
   2052e:	2800      	cmp	r0, #0
   20530:	d1f9      	bne.n	20526 <z_nrf_clock_control_lf_on+0xe>
   20532:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   20536:	b933      	cbnz	r3, 20546 <z_nrf_clock_control_lf_on+0x2e>
   20538:	4933      	ldr	r1, [pc, #204]	; (20608 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   2053a:	4834      	ldr	r0, [pc, #208]	; (2060c <z_nrf_clock_control_lf_on+0xf4>)
   2053c:	604b      	str	r3, [r1, #4]
   2053e:	60cb      	str	r3, [r1, #12]
   20540:	608a      	str	r2, [r1, #8]
   20542:	f004 fbf1 	bl	24d28 <onoff_request>
	switch (start_mode) {
   20546:	1e7b      	subs	r3, r7, #1
   20548:	2b01      	cmp	r3, #1
   2054a:	d82f      	bhi.n	205ac <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2054c:	2f01      	cmp	r7, #1
   2054e:	d107      	bne.n	20560 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20554:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   20558:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2055c:	2b01      	cmp	r3, #1
   2055e:	d025      	beq.n	205ac <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20560:	f00a ffba 	bl	2b4d8 <k_is_in_isr>
   20564:	4604      	mov	r4, r0
   20566:	b918      	cbnz	r0, 20570 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   20568:	4b29      	ldr	r3, [pc, #164]	; (20610 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   2056a:	781b      	ldrb	r3, [r3, #0]
   2056c:	2b00      	cmp	r3, #0
   2056e:	d141      	bne.n	205f4 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   20570:	f04f 0320 	mov.w	r3, #32
   20574:	f3ef 8611 	mrs	r6, BASEPRI
   20578:	f383 8812 	msr	BASEPRI_MAX, r3
   2057c:	f3bf 8f6f 	isb	sy
   20580:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20582:	f8df 8090 	ldr.w	r8, [pc, #144]	; 20614 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20586:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   2058a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2058e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   20592:	03d2      	lsls	r2, r2, #15
   20594:	d50c      	bpl.n	205b0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   20596:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2059a:	2b01      	cmp	r3, #1
   2059c:	d001      	beq.n	205a2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2059e:	2f01      	cmp	r7, #1
   205a0:	d106      	bne.n	205b0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   205a2:	b30c      	cbz	r4, 205e8 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   205a4:	f386 8811 	msr	BASEPRI, r6
   205a8:	f3bf 8f6f 	isb	sy
}
   205ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   205b0:	b1ac      	cbz	r4, 205de <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   205b2:	4630      	mov	r0, r6
   205b4:	f7e9 ff2a 	bl	a40c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   205b8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   205bc:	2b00      	cmp	r3, #0
   205be:	d1e4      	bne.n	2058a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   205c0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   205c4:	2a00      	cmp	r2, #0
   205c6:	d0e0      	beq.n	2058a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   205c8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   205cc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   205d0:	2301      	movs	r3, #1
   205d2:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   205d6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   205da:	60ab      	str	r3, [r5, #8]
}
   205dc:	e7d5      	b.n	2058a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   205de:	2100      	movs	r1, #0
   205e0:	2021      	movs	r0, #33	; 0x21
   205e2:	f003 ff4f 	bl	24484 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   205e6:	e7e7      	b.n	205b8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   205e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   205ec:	2202      	movs	r2, #2
   205ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   205f2:	e7db      	b.n	205ac <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   205f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   205f8:	2202      	movs	r2, #2
   205fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   205fe:	4606      	mov	r6, r0
}
   20600:	e7bf      	b.n	20582 <z_nrf_clock_control_lf_on+0x6a>
   20602:	bf00      	nop
   20604:	200044d4 	.word	0x200044d4
   20608:	20004470 	.word	0x20004470
   2060c:	2000449c 	.word	0x2000449c
   20610:	200049ce 	.word	0x200049ce
   20614:	e000e100 	.word	0xe000e100

00020618 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   20618:	b530      	push	{r4, r5, lr}
	return port->config;
   2061a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2061c:	7b04      	ldrb	r4, [r0, #12]
   2061e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   20622:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20626:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   2062a:	b085      	sub	sp, #20
   2062c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   20630:	d104      	bne.n	2063c <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   20632:	4628      	mov	r0, r5
   20634:	f001 fc32 	bl	21e9c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   20638:	2000      	movs	r0, #0
   2063a:	e032      	b.n	206a2 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   2063c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20640:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   20644:	d12f      	bne.n	206a6 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   20646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   2064a:	bf0c      	ite	eq
   2064c:	2304      	moveq	r3, #4
   2064e:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   20650:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   20654:	6883      	ldr	r3, [r0, #8]
   20656:	fa23 f101 	lsr.w	r1, r3, r1
   2065a:	07c9      	lsls	r1, r1, #31
   2065c:	d42f      	bmi.n	206be <gpio_nrfx_pin_interrupt_configure+0xa6>
   2065e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   20662:	d12c      	bne.n	206be <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   20664:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   20666:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   20668:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   2066c:	4a1c      	ldr	r2, [pc, #112]	; (206e0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2066e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   20672:	bf18      	it	ne
   20674:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2067c:	07db      	lsls	r3, r3, #31
   2067e:	d41e      	bmi.n	206be <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20680:	f10d 0407 	add.w	r4, sp, #7
   20684:	4621      	mov	r1, r4
   20686:	4628      	mov	r0, r5
   20688:	f001 fb6c 	bl	21d64 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2068c:	4b15      	ldr	r3, [pc, #84]	; (206e4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   2068e:	4298      	cmp	r0, r3
   20690:	d114      	bne.n	206bc <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   20692:	4620      	mov	r0, r4
   20694:	f001 fbb4 	bl	21e00 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20698:	4b13      	ldr	r3, [pc, #76]	; (206e8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   2069a:	4298      	cmp	r0, r3
   2069c:	d00e      	beq.n	206bc <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   2069e:	f06f 000b 	mvn.w	r0, #11
}
   206a2:	b005      	add	sp, #20
   206a4:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   206a6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   206aa:	d005      	beq.n	206b8 <gpio_nrfx_pin_interrupt_configure+0xa0>
   206ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   206b0:	bf0c      	ite	eq
   206b2:	2302      	moveq	r3, #2
   206b4:	2301      	movne	r3, #1
   206b6:	e7cb      	b.n	20650 <gpio_nrfx_pin_interrupt_configure+0x38>
   206b8:	2303      	movs	r3, #3
   206ba:	e7c9      	b.n	20650 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   206bc:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   206be:	2300      	movs	r3, #0
   206c0:	4619      	mov	r1, r3
   206c2:	aa02      	add	r2, sp, #8
   206c4:	4628      	mov	r0, r5
   206c6:	f001 fa27 	bl	21b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   206ca:	4b07      	ldr	r3, [pc, #28]	; (206e8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   206cc:	4298      	cmp	r0, r3
   206ce:	d104      	bne.n	206da <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   206d0:	2101      	movs	r1, #1
   206d2:	4628      	mov	r0, r5
   206d4:	f001 fb9a 	bl	21e0c <nrfx_gpiote_trigger_enable>
   206d8:	e7ae      	b.n	20638 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   206da:	f06f 0004 	mvn.w	r0, #4
   206de:	e7e0      	b.n	206a2 <gpio_nrfx_pin_interrupt_configure+0x8a>
   206e0:	50000300 	.word	0x50000300
   206e4:	0bad0004 	.word	0x0bad0004
   206e8:	0bad0000 	.word	0x0bad0000

000206ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   206ec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   206ee:	f001 fb77 	bl	21de0 <nrfx_gpiote_is_init>
   206f2:	4604      	mov	r4, r0
   206f4:	b968      	cbnz	r0, 20712 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   206f6:	f001 fb4b 	bl	21d90 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   206fa:	4b08      	ldr	r3, [pc, #32]	; (2071c <gpio_nrfx_init+0x30>)
   206fc:	4298      	cmp	r0, r3
   206fe:	d10a      	bne.n	20716 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   20700:	4807      	ldr	r0, [pc, #28]	; (20720 <gpio_nrfx_init+0x34>)
   20702:	4621      	mov	r1, r4
   20704:	f001 fb28 	bl	21d58 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20708:	4622      	mov	r2, r4
   2070a:	2105      	movs	r1, #5
   2070c:	2006      	movs	r0, #6
   2070e:	f7e9 ff27 	bl	a560 <z_arm_irq_priority_set>
		return 0;
   20712:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   20714:	bd10      	pop	{r4, pc}
		return -EIO;
   20716:	f06f 0004 	mvn.w	r0, #4
   2071a:	e7fb      	b.n	20714 <gpio_nrfx_init+0x28>
   2071c:	0bad0000 	.word	0x0bad0000
   20720:	00020725 	.word	0x00020725

00020724 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20724:	0942      	lsrs	r2, r0, #5
{
   20726:	b570      	push	{r4, r5, r6, lr}
   20728:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2072a:	d002      	beq.n	20732 <nrfx_gpio_handler+0xe>
   2072c:	2a01      	cmp	r2, #1
   2072e:	d015      	beq.n	2075c <nrfx_gpio_handler+0x38>
}
   20730:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20732:	4e0b      	ldr	r6, [pc, #44]	; (20760 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   20734:	6932      	ldr	r2, [r6, #16]
   20736:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20738:	2900      	cmp	r1, #0
   2073a:	d0f9      	beq.n	20730 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   2073c:	f003 031f 	and.w	r3, r3, #31
   20740:	2501      	movs	r5, #1
   20742:	680c      	ldr	r4, [r1, #0]
   20744:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   20746:	688a      	ldr	r2, [r1, #8]
   20748:	402a      	ands	r2, r5
   2074a:	d002      	beq.n	20752 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2074c:	684b      	ldr	r3, [r1, #4]
   2074e:	4630      	mov	r0, r6
   20750:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20752:	2c00      	cmp	r4, #0
   20754:	d0ec      	beq.n	20730 <nrfx_gpio_handler+0xc>
   20756:	4621      	mov	r1, r4
   20758:	6824      	ldr	r4, [r4, #0]
   2075a:	e7f4      	b.n	20746 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2075c:	4e01      	ldr	r6, [pc, #4]	; (20764 <nrfx_gpio_handler+0x40>)
   2075e:	e7e9      	b.n	20734 <nrfx_gpio_handler+0x10>
   20760:	0002bfb0 	.word	0x0002bfb0
   20764:	0002bfc8 	.word	0x0002bfc8

00020768 <gpio_nrfx_pin_configure>:
{
   20768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   2076c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2076e:	7b3b      	ldrb	r3, [r7, #12]
   20770:	f001 051f 	and.w	r5, r1, #31
{
   20774:	b085      	sub	sp, #20
   20776:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20778:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   2077c:	4614      	mov	r4, r2
   2077e:	b9ca      	cbnz	r2, 207b4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   20780:	a902      	add	r1, sp, #8
   20782:	4628      	mov	r0, r5
   20784:	f001 faee 	bl	21d64 <nrfx_gpiote_channel_get>
   20788:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   2078a:	4628      	mov	r0, r5
   2078c:	f001 fbae 	bl	21eec <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   20790:	4b48      	ldr	r3, [pc, #288]	; (208b4 <gpio_nrfx_pin_configure+0x14c>)
   20792:	4298      	cmp	r0, r3
   20794:	d004      	beq.n	207a0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   20796:	f06f 0004 	mvn.w	r0, #4
}
   2079a:	b005      	add	sp, #20
   2079c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   207a0:	4284      	cmp	r4, r0
   207a2:	d105      	bne.n	207b0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   207a4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   207a8:	f001 fb24 	bl	21df4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   207ac:	42a0      	cmp	r0, r4
   207ae:	d1f2      	bne.n	20796 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   207b0:	2000      	movs	r0, #0
   207b2:	e7f2      	b.n	2079a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   207b4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   207b8:	f10d 0103 	add.w	r1, sp, #3
   207bc:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   207be:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   207c2:	f001 facf 	bl	21d64 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   207c6:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   207c8:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   207ca:	aa02      	add	r2, sp, #8
   207cc:	4649      	mov	r1, r9
   207ce:	4628      	mov	r0, r5
   207d0:	f001 f9a2 	bl	21b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   207d4:	4b37      	ldr	r3, [pc, #220]	; (208b4 <gpio_nrfx_pin_configure+0x14c>)
   207d6:	4298      	cmp	r0, r3
   207d8:	d002      	beq.n	207e0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   207da:	f06f 0015 	mvn.w	r0, #21
   207de:	e7dc      	b.n	2079a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   207e0:	4580      	cmp	r8, r0
   207e2:	d103      	bne.n	207ec <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   207e4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   207e8:	f001 fb04 	bl	21df4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   207ec:	05a3      	lsls	r3, r4, #22
   207ee:	d54e      	bpl.n	2088e <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   207f0:	4b31      	ldr	r3, [pc, #196]	; (208b8 <gpio_nrfx_pin_configure+0x150>)
   207f2:	4a32      	ldr	r2, [pc, #200]	; (208bc <gpio_nrfx_pin_configure+0x154>)
   207f4:	4023      	ands	r3, r4
   207f6:	4293      	cmp	r3, r2
   207f8:	d03a      	beq.n	20870 <gpio_nrfx_pin_configure+0x108>
   207fa:	d80c      	bhi.n	20816 <gpio_nrfx_pin_configure+0xae>
   207fc:	2b06      	cmp	r3, #6
   207fe:	d014      	beq.n	2082a <gpio_nrfx_pin_configure+0xc2>
   20800:	d804      	bhi.n	2080c <gpio_nrfx_pin_configure+0xa4>
   20802:	b193      	cbz	r3, 2082a <gpio_nrfx_pin_configure+0xc2>
   20804:	2b02      	cmp	r3, #2
   20806:	d1e8      	bne.n	207da <gpio_nrfx_pin_configure+0x72>
   20808:	2304      	movs	r3, #4
   2080a:	e00e      	b.n	2082a <gpio_nrfx_pin_configure+0xc2>
   2080c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20810:	d1e3      	bne.n	207da <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   20812:	2301      	movs	r3, #1
   20814:	e009      	b.n	2082a <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20816:	4a2a      	ldr	r2, [pc, #168]	; (208c0 <gpio_nrfx_pin_configure+0x158>)
   20818:	4293      	cmp	r3, r2
   2081a:	d02b      	beq.n	20874 <gpio_nrfx_pin_configure+0x10c>
   2081c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   20820:	d02a      	beq.n	20878 <gpio_nrfx_pin_configure+0x110>
   20822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   20826:	d1d8      	bne.n	207da <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   20828:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   2082a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2082e:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   20832:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   20836:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   20838:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   2083c:	bf54      	ite	pl
   2083e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   20842:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20844:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   20846:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2084a:	d517      	bpl.n	2087c <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2084c:	687b      	ldr	r3, [r7, #4]
   2084e:	2101      	movs	r1, #1
   20850:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   20854:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20858:	2200      	movs	r2, #0
   2085a:	a901      	add	r1, sp, #4
   2085c:	4628      	mov	r0, r5
   2085e:	f001 fa09 	bl	21c74 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20862:	4b14      	ldr	r3, [pc, #80]	; (208b4 <gpio_nrfx_pin_configure+0x14c>)
   20864:	4298      	cmp	r0, r3
   20866:	bf14      	ite	ne
   20868:	f06f 0015 	mvnne.w	r0, #21
   2086c:	2000      	moveq	r0, #0
   2086e:	e794      	b.n	2079a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   20870:	2307      	movs	r3, #7
   20872:	e7da      	b.n	2082a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   20874:	2305      	movs	r3, #5
   20876:	e7d8      	b.n	2082a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   20878:	2303      	movs	r3, #3
   2087a:	e7d6      	b.n	2082a <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2087c:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2087e:	bf41      	itttt	mi
   20880:	687b      	ldrmi	r3, [r7, #4]
   20882:	2101      	movmi	r1, #1
   20884:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   20888:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   2088c:	e7e4      	b.n	20858 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   2088e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20890:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   20894:	bf54      	ite	pl
   20896:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   2089a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2089c:	461a      	mov	r2, r3
   2089e:	a901      	add	r1, sp, #4
   208a0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   208a2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   208a6:	f001 f937 	bl	21b18 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   208aa:	4b02      	ldr	r3, [pc, #8]	; (208b4 <gpio_nrfx_pin_configure+0x14c>)
   208ac:	4298      	cmp	r0, r3
   208ae:	f43f af7f 	beq.w	207b0 <gpio_nrfx_pin_configure+0x48>
   208b2:	e792      	b.n	207da <gpio_nrfx_pin_configure+0x72>
   208b4:	0bad0000 	.word	0x0bad0000
   208b8:	00f00006 	.word	0x00f00006
   208bc:	00100006 	.word	0x00100006
   208c0:	00400002 	.word	0x00400002

000208c4 <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
   208c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
   208c8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 20978 <print_all_reset_causes+0xb4>
		return "security";
   208cc:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2097c <print_all_reset_causes+0xb8>
		return "parity error";
   208d0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 20980 <print_all_reset_causes+0xbc>
{
   208d4:	4607      	mov	r7, r0
   208d6:	460d      	mov	r5, r1
   208d8:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
   208da:	2401      	movs	r4, #1
		if (cause & cause_mask) {
   208dc:	ea15 0204 	ands.w	r2, r5, r4
   208e0:	d013      	beq.n	2090a <print_all_reset_causes+0x46>
	switch (cause) {
   208e2:	2a40      	cmp	r2, #64	; 0x40
   208e4:	d03c      	beq.n	20960 <print_all_reset_causes+0x9c>
   208e6:	d81e      	bhi.n	20926 <print_all_reset_causes+0x62>
   208e8:	2a08      	cmp	r2, #8
   208ea:	d814      	bhi.n	20916 <print_all_reset_causes+0x52>
   208ec:	3a01      	subs	r2, #1
   208ee:	2a07      	cmp	r2, #7
   208f0:	d834      	bhi.n	2095c <print_all_reset_causes+0x98>
   208f2:	e8df f002 	tbb	[pc, r2]
   208f6:	0437      	.short	0x0437
   208f8:	33332f33 	.word	0x33332f33
   208fc:	3133      	.short	0x3133
   208fe:	4b21      	ldr	r3, [pc, #132]	; (20984 <print_all_reset_causes+0xc0>)
			shell_print(sh, "- %s",
   20900:	4652      	mov	r2, sl
   20902:	2108      	movs	r1, #8
   20904:	4638      	mov	r0, r7
   20906:	f005 fb66 	bl	25fd6 <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
   2090a:	3e01      	subs	r6, #1
   2090c:	ea4f 0444 	mov.w	r4, r4, lsl #1
   20910:	d1e4      	bne.n	208dc <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
   20912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
   20916:	2a10      	cmp	r2, #16
   20918:	d026      	beq.n	20968 <print_all_reset_causes+0xa4>
		return "debug";
   2091a:	4b1b      	ldr	r3, [pc, #108]	; (20988 <print_all_reset_causes+0xc4>)
   2091c:	491b      	ldr	r1, [pc, #108]	; (2098c <print_all_reset_causes+0xc8>)
   2091e:	2a20      	cmp	r2, #32
   20920:	bf08      	it	eq
   20922:	460b      	moveq	r3, r1
   20924:	e7ec      	b.n	20900 <print_all_reset_causes+0x3c>
	switch (cause) {
   20926:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2092a:	d01f      	beq.n	2096c <print_all_reset_causes+0xa8>
   2092c:	d808      	bhi.n	20940 <print_all_reset_causes+0x7c>
   2092e:	2a80      	cmp	r2, #128	; 0x80
   20930:	d01e      	beq.n	20970 <print_all_reset_causes+0xac>
		return "CPU lockup";
   20932:	4b15      	ldr	r3, [pc, #84]	; (20988 <print_all_reset_causes+0xc4>)
   20934:	4916      	ldr	r1, [pc, #88]	; (20990 <print_all_reset_causes+0xcc>)
   20936:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   2093a:	bf08      	it	eq
   2093c:	460b      	moveq	r3, r1
   2093e:	e7df      	b.n	20900 <print_all_reset_causes+0x3c>
	switch (cause) {
   20940:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   20944:	d016      	beq.n	20974 <print_all_reset_causes+0xb0>
		return "clock";
   20946:	4b10      	ldr	r3, [pc, #64]	; (20988 <print_all_reset_causes+0xc4>)
   20948:	4912      	ldr	r1, [pc, #72]	; (20994 <print_all_reset_causes+0xd0>)
   2094a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2094e:	bf08      	it	eq
   20950:	460b      	moveq	r3, r1
   20952:	e7d5      	b.n	20900 <print_all_reset_causes+0x3c>
		return "brownout";
   20954:	4b10      	ldr	r3, [pc, #64]	; (20998 <print_all_reset_causes+0xd4>)
   20956:	e7d3      	b.n	20900 <print_all_reset_causes+0x3c>
		return "power-on reset";
   20958:	4b10      	ldr	r3, [pc, #64]	; (2099c <print_all_reset_causes+0xd8>)
   2095a:	e7d1      	b.n	20900 <print_all_reset_causes+0x3c>
		return "unknown";
   2095c:	4b0a      	ldr	r3, [pc, #40]	; (20988 <print_all_reset_causes+0xc4>)
   2095e:	e7cf      	b.n	20900 <print_all_reset_causes+0x3c>
		return "security";
   20960:	4643      	mov	r3, r8
   20962:	e7cd      	b.n	20900 <print_all_reset_causes+0x3c>
		return "pin";
   20964:	4b0e      	ldr	r3, [pc, #56]	; (209a0 <print_all_reset_causes+0xdc>)
   20966:	e7cb      	b.n	20900 <print_all_reset_causes+0x3c>
		return "watchdog";
   20968:	4b0e      	ldr	r3, [pc, #56]	; (209a4 <print_all_reset_causes+0xe0>)
   2096a:	e7c9      	b.n	20900 <print_all_reset_causes+0x3c>
		return "parity error";
   2096c:	464b      	mov	r3, r9
   2096e:	e7c7      	b.n	20900 <print_all_reset_causes+0x3c>
		return "low power wake-up";
   20970:	4b0d      	ldr	r3, [pc, #52]	; (209a8 <print_all_reset_causes+0xe4>)
   20972:	e7c5      	b.n	20900 <print_all_reset_causes+0x3c>
		return "PLL error";
   20974:	4b0d      	ldr	r3, [pc, #52]	; (209ac <print_all_reset_causes+0xe8>)
   20976:	e7c3      	b.n	20900 <print_all_reset_causes+0x3c>
   20978:	0002ec0c 	.word	0x0002ec0c
   2097c:	00031a94 	.word	0x00031a94
   20980:	00031a9d 	.word	0x00031a9d
   20984:	00031a82 	.word	0x00031a82
   20988:	000301ee 	.word	0x000301ee
   2098c:	00031abc 	.word	0x00031abc
   20990:	00031ac2 	.word	0x00031ac2
   20994:	00031ad7 	.word	0x00031ad7
   20998:	00031a6a 	.word	0x00031a6a
   2099c:	00031a73 	.word	0x00031a73
   209a0:	00031a66 	.word	0x00031a66
   209a4:	00031a8b 	.word	0x00031a8b
   209a8:	00031aaa 	.word	0x00031aaa
   209ac:	00031acd 	.word	0x00031acd

000209b0 <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
   209b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   209b2:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&supported, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
   209b4:	a801      	add	r0, sp, #4
   209b6:	f00a f9d5 	bl	2ad64 <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
   209ba:	f110 0f86 	cmn.w	r0, #134	; 0x86
   209be:	4604      	mov	r4, r0
   209c0:	d111      	bne.n	209e6 <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
   209c2:	4a11      	ldr	r2, [pc, #68]	; (20a08 <cmd_supported_reset_cause+0x58>)
   209c4:	2101      	movs	r1, #1
   209c6:	4628      	mov	r0, r5
   209c8:	f005 fb05 	bl	25fd6 <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
   209cc:	9c01      	ldr	r4, [sp, #4]
   209ce:	b1ac      	cbz	r4, 209fc <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
   209d0:	4a0e      	ldr	r2, [pc, #56]	; (20a0c <cmd_supported_reset_cause+0x5c>)
   209d2:	2108      	movs	r1, #8
   209d4:	4628      	mov	r0, r5
   209d6:	f005 fafe 	bl	25fd6 <shell_fprintf>
		print_all_reset_causes(sh, cause);
   209da:	9901      	ldr	r1, [sp, #4]
   209dc:	4628      	mov	r0, r5
   209de:	f7ff ff71 	bl	208c4 <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supporte");
	}

	return 0;
   209e2:	2400      	movs	r4, #0
   209e4:	e007      	b.n	209f6 <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
   209e6:	2800      	cmp	r0, #0
   209e8:	d0f0      	beq.n	209cc <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
   209ea:	4603      	mov	r3, r0
   209ec:	4a08      	ldr	r2, [pc, #32]	; (20a10 <cmd_supported_reset_cause+0x60>)
   209ee:	2101      	movs	r1, #1
   209f0:	4628      	mov	r0, r5
   209f2:	f005 faf0 	bl	25fd6 <shell_fprintf>
}
   209f6:	4620      	mov	r0, r4
   209f8:	b003      	add	sp, #12
   209fa:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supporte");
   209fc:	4a05      	ldr	r2, [pc, #20]	; (20a14 <cmd_supported_reset_cause+0x64>)
   209fe:	2108      	movs	r1, #8
   20a00:	4628      	mov	r0, r5
   20a02:	f005 fae8 	bl	25fd6 <shell_fprintf>
   20a06:	e7f6      	b.n	209f6 <cmd_supported_reset_cause+0x46>
   20a08:	00031add 	.word	0x00031add
   20a0c:	00031b27 	.word	0x00031b27
   20a10:	00031af8 	.word	0x00031af8
   20a14:	00031b40 	.word	0x00031b40

00020a18 <cmd_show_reset_cause>:
{
   20a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20a1a:	4604      	mov	r4, r0
	return z_impl_hwinfo_get_reset_cause(cause);
   20a1c:	a801      	add	r0, sp, #4
   20a1e:	f00a f97c 	bl	2ad1a <z_impl_hwinfo_get_reset_cause>
	if (res == -ENOTSUP) {
   20a22:	f110 0f86 	cmn.w	r0, #134	; 0x86
   20a26:	4605      	mov	r5, r0
   20a28:	d105      	bne.n	20a36 <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
   20a2a:	4a0f      	ldr	r2, [pc, #60]	; (20a68 <cmd_show_reset_cause+0x50>)
   20a2c:	2101      	movs	r1, #1
		shell_print(sh, "No reset cause set");
   20a2e:	4620      	mov	r0, r4
   20a30:	f005 fad1 	bl	25fd6 <shell_fprintf>
   20a34:	e006      	b.n	20a44 <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
   20a36:	b140      	cbz	r0, 20a4a <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
   20a38:	4603      	mov	r3, r0
   20a3a:	4a0c      	ldr	r2, [pc, #48]	; (20a6c <cmd_show_reset_cause+0x54>)
   20a3c:	2101      	movs	r1, #1
   20a3e:	4620      	mov	r0, r4
   20a40:	f005 fac9 	bl	25fd6 <shell_fprintf>
}
   20a44:	4628      	mov	r0, r5
   20a46:	b003      	add	sp, #12
   20a48:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
   20a4a:	9b01      	ldr	r3, [sp, #4]
   20a4c:	b14b      	cbz	r3, 20a62 <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
   20a4e:	4620      	mov	r0, r4
   20a50:	4a07      	ldr	r2, [pc, #28]	; (20a70 <cmd_show_reset_cause+0x58>)
   20a52:	2108      	movs	r1, #8
   20a54:	f005 fabf 	bl	25fd6 <shell_fprintf>
		print_all_reset_causes(sh, cause);
   20a58:	9901      	ldr	r1, [sp, #4]
   20a5a:	4620      	mov	r0, r4
   20a5c:	f7ff ff32 	bl	208c4 <print_all_reset_causes>
   20a60:	e7f0      	b.n	20a44 <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
   20a62:	4a04      	ldr	r2, [pc, #16]	; (20a74 <cmd_show_reset_cause+0x5c>)
   20a64:	2108      	movs	r1, #8
   20a66:	e7e2      	b.n	20a2e <cmd_show_reset_cause+0x16>
   20a68:	00031add 	.word	0x00031add
   20a6c:	00031b54 	.word	0x00031b54
   20a70:	00031b72 	.word	0x00031b72
   20a74:	00031b84 	.word	0x00031b84

00020a78 <cmd_clear_reset_cause>:
{
   20a78:	b538      	push	{r3, r4, r5, lr}
   20a7a:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
   20a7c:	f00a f96a 	bl	2ad54 <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
   20a80:	f110 0f86 	cmn.w	r0, #134	; 0x86
   20a84:	4604      	mov	r4, r0
   20a86:	d107      	bne.n	20a98 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
   20a88:	4a08      	ldr	r2, [pc, #32]	; (20aac <cmd_clear_reset_cause+0x34>)
   20a8a:	2101      	movs	r1, #1
   20a8c:	4628      	mov	r0, r5
   20a8e:	f005 faa2 	bl	25fd6 <shell_fprintf>
   20a92:	2400      	movs	r4, #0
}
   20a94:	4620      	mov	r0, r4
   20a96:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
   20a98:	2800      	cmp	r0, #0
   20a9a:	d0fb      	beq.n	20a94 <cmd_clear_reset_cause+0x1c>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
   20a9c:	4603      	mov	r3, r0
   20a9e:	4a04      	ldr	r2, [pc, #16]	; (20ab0 <cmd_clear_reset_cause+0x38>)
   20aa0:	2101      	movs	r1, #1
   20aa2:	4628      	mov	r0, r5
   20aa4:	f005 fa97 	bl	25fd6 <shell_fprintf>
		return res;
   20aa8:	e7f4      	b.n	20a94 <cmd_clear_reset_cause+0x1c>
   20aaa:	bf00      	nop
   20aac:	00031add 	.word	0x00031add
   20ab0:	00031b98 	.word	0x00031b98

00020ab4 <cmd_get_device_id>:
{
   20ab4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20ab8:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
   20aba:	2110      	movs	r1, #16
   20abc:	4668      	mov	r0, sp
   20abe:	f00a f8f5 	bl	2acac <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
   20ac2:	f110 0f86 	cmn.w	r0, #134	; 0x86
   20ac6:	4604      	mov	r4, r0
   20ac8:	d108      	bne.n	20adc <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
   20aca:	4a19      	ldr	r2, [pc, #100]	; (20b30 <cmd_get_device_id+0x7c>)
   20acc:	2101      	movs	r1, #1
   20ace:	4628      	mov	r0, r5
   20ad0:	f005 fa81 	bl	25fd6 <shell_fprintf>
}
   20ad4:	4620      	mov	r0, r4
   20ad6:	b004      	add	sp, #16
   20ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
   20adc:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
   20ade:	4603      	mov	r3, r0
	} else if (length < 0) {
   20ae0:	da05      	bge.n	20aee <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
   20ae2:	4a14      	ldr	r2, [pc, #80]	; (20b34 <cmd_get_device_id+0x80>)
   20ae4:	2101      	movs	r1, #1
   20ae6:	4628      	mov	r0, r5
   20ae8:	f005 fa75 	bl	25fd6 <shell_fprintf>
		return length;
   20aec:	e7f2      	b.n	20ad4 <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
   20aee:	4a12      	ldr	r2, [pc, #72]	; (20b38 <cmd_get_device_id+0x84>)
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
   20af0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 20b3c <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
   20af4:	2108      	movs	r1, #8
   20af6:	4628      	mov	r0, r5
   20af8:	f005 fa6d 	bl	25fd6 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
   20afc:	4a10      	ldr	r2, [pc, #64]	; (20b40 <cmd_get_device_id+0x8c>)
   20afe:	2108      	movs	r1, #8
   20b00:	4628      	mov	r0, r5
   20b02:	f005 fa68 	bl	25fd6 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
   20b06:	466e      	mov	r6, sp
   20b08:	2700      	movs	r7, #0
   20b0a:	42a7      	cmp	r7, r4
   20b0c:	d106      	bne.n	20b1c <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
   20b0e:	4a0d      	ldr	r2, [pc, #52]	; (20b44 <cmd_get_device_id+0x90>)
   20b10:	2108      	movs	r1, #8
   20b12:	4628      	mov	r0, r5
   20b14:	f005 fa5f 	bl	25fd6 <shell_fprintf>
	return 0;
   20b18:	2400      	movs	r4, #0
   20b1a:	e7db      	b.n	20ad4 <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
   20b1c:	f816 3b01 	ldrb.w	r3, [r6], #1
   20b20:	4642      	mov	r2, r8
   20b22:	2108      	movs	r1, #8
   20b24:	4628      	mov	r0, r5
   20b26:	f005 fa56 	bl	25fd6 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
   20b2a:	3701      	adds	r7, #1
   20b2c:	e7ed      	b.n	20b0a <cmd_get_device_id+0x56>
   20b2e:	bf00      	nop
   20b30:	00031add 	.word	0x00031add
   20b34:	00031bbe 	.word	0x00031bbe
   20b38:	00031bca 	.word	0x00031bca
   20b3c:	00031873 	.word	0x00031873
   20b40:	00031bd7 	.word	0x00031bd7
   20b44:	0002eae3 	.word	0x0002eae3

00020b48 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   20b48:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   20b4a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   20b4e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   20b50:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   20b52:	6002      	str	r2, [r0, #0]
}
   20b54:	4802      	ldr	r0, [pc, #8]	; (20b60 <nrf_gpio_pin_port_decode+0x18>)
   20b56:	bf18      	it	ne
   20b58:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   20b5c:	4770      	bx	lr
   20b5e:	bf00      	nop
   20b60:	50000300 	.word	0x50000300

00020b64 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   20b64:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   20b66:	794b      	ldrb	r3, [r1, #5]
   20b68:	2b01      	cmp	r3, #1
   20b6a:	d026      	beq.n	20bba <uarte_nrfx_configure+0x56>
   20b6c:	2b03      	cmp	r3, #3
   20b6e:	d121      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   20b70:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   20b72:	798b      	ldrb	r3, [r1, #6]
   20b74:	2b03      	cmp	r3, #3
   20b76:	d11d      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20b78:	79cc      	ldrb	r4, [r1, #7]
   20b7a:	b10c      	cbz	r4, 20b80 <uarte_nrfx_configure+0x1c>
   20b7c:	2c01      	cmp	r4, #1
   20b7e:	d119      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20b80:	790a      	ldrb	r2, [r1, #4]
   20b82:	b112      	cbz	r2, 20b8a <uarte_nrfx_configure+0x26>
   20b84:	2a02      	cmp	r2, #2
   20b86:	d115      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20b88:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20b8a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20b8c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   20b8e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   20b92:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   20b94:	d065      	beq.n	20c62 <uarte_nrfx_configure+0xfe>
   20b96:	d82d      	bhi.n	20bf4 <uarte_nrfx_configure+0x90>
   20b98:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20b9c:	d064      	beq.n	20c68 <uarte_nrfx_configure+0x104>
   20b9e:	d816      	bhi.n	20bce <uarte_nrfx_configure+0x6a>
   20ba0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20ba4:	d062      	beq.n	20c6c <uarte_nrfx_configure+0x108>
   20ba6:	d80a      	bhi.n	20bbe <uarte_nrfx_configure+0x5a>
   20ba8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20bac:	d061      	beq.n	20c72 <uarte_nrfx_configure+0x10e>
   20bae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   20bb2:	d061      	beq.n	20c78 <uarte_nrfx_configure+0x114>
   20bb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20bb8:	e052      	b.n	20c60 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   20bba:	2600      	movs	r6, #0
   20bbc:	e7d9      	b.n	20b72 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   20bbe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   20bc2:	d05c      	beq.n	20c7e <uarte_nrfx_configure+0x11a>
   20bc4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20bc8:	d1f4      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20bca:	4b37      	ldr	r3, [pc, #220]	; (20ca8 <uarte_nrfx_configure+0x144>)
   20bcc:	e03c      	b.n	20c48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20bce:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   20bd2:	d057      	beq.n	20c84 <uarte_nrfx_configure+0x120>
   20bd4:	d807      	bhi.n	20be6 <uarte_nrfx_configure+0x82>
   20bd6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20bda:	d055      	beq.n	20c88 <uarte_nrfx_configure+0x124>
   20bdc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20be0:	d1e8      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20be2:	4b32      	ldr	r3, [pc, #200]	; (20cac <uarte_nrfx_configure+0x148>)
   20be4:	e030      	b.n	20c48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20be6:	f647 2712 	movw	r7, #31250	; 0x7a12
   20bea:	42bb      	cmp	r3, r7
   20bec:	d1e2      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20bee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20bf2:	e029      	b.n	20c48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20bf4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20bf8:	d048      	beq.n	20c8c <uarte_nrfx_configure+0x128>
   20bfa:	d813      	bhi.n	20c24 <uarte_nrfx_configure+0xc0>
   20bfc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20c00:	d047      	beq.n	20c92 <uarte_nrfx_configure+0x12e>
   20c02:	d809      	bhi.n	20c18 <uarte_nrfx_configure+0xb4>
   20c04:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   20c08:	42bb      	cmp	r3, r7
   20c0a:	d044      	beq.n	20c96 <uarte_nrfx_configure+0x132>
   20c0c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20c10:	d1d0      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20c12:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20c16:	e017      	b.n	20c48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20c18:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   20c1c:	d1ca      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   20c1e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   20c22:	e011      	b.n	20c48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20c24:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   20c28:	d038      	beq.n	20c9c <uarte_nrfx_configure+0x138>
   20c2a:	d808      	bhi.n	20c3e <uarte_nrfx_configure+0xda>
   20c2c:	4f20      	ldr	r7, [pc, #128]	; (20cb0 <uarte_nrfx_configure+0x14c>)
   20c2e:	42bb      	cmp	r3, r7
   20c30:	d037      	beq.n	20ca2 <uarte_nrfx_configure+0x13e>
   20c32:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   20c36:	d1bd      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   20c38:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20c3c:	e004      	b.n	20c48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20c3e:	4f1d      	ldr	r7, [pc, #116]	; (20cb4 <uarte_nrfx_configure+0x150>)
   20c40:	42bb      	cmp	r3, r7
   20c42:	d1b7      	bne.n	20bb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   20c44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   20c48:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20c4a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   20c4e:	1d03      	adds	r3, r0, #4
   20c50:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   20c52:	4334      	orrs	r4, r6
   20c54:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   20c56:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   20c5a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   20c5e:	2000      	movs	r0, #0
}
   20c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   20c62:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20c66:	e7ef      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20c68:	4b13      	ldr	r3, [pc, #76]	; (20cb8 <uarte_nrfx_configure+0x154>)
   20c6a:	e7ed      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   20c6c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20c70:	e7ea      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   20c72:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20c76:	e7e7      	b.n	20c48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20c78:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20c7c:	e7e4      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20c7e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20c82:	e7e1      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20c84:	4b0d      	ldr	r3, [pc, #52]	; (20cbc <uarte_nrfx_configure+0x158>)
   20c86:	e7df      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20c88:	4b0d      	ldr	r3, [pc, #52]	; (20cc0 <uarte_nrfx_configure+0x15c>)
   20c8a:	e7dd      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20c8c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20c90:	e7da      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20c92:	4b0c      	ldr	r3, [pc, #48]	; (20cc4 <uarte_nrfx_configure+0x160>)
   20c94:	e7d8      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20c96:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20c9a:	e7d5      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20c9c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20ca0:	e7d2      	b.n	20c48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20ca2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20ca6:	e7cf      	b.n	20c48 <uarte_nrfx_configure+0xe4>
   20ca8:	0013b000 	.word	0x0013b000
   20cac:	004ea000 	.word	0x004ea000
   20cb0:	0003d090 	.word	0x0003d090
   20cb4:	000f4240 	.word	0x000f4240
   20cb8:	00275000 	.word	0x00275000
   20cbc:	0075c000 	.word	0x0075c000
   20cc0:	003af000 	.word	0x003af000
   20cc4:	013a9000 	.word	0x013a9000

00020cc8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   20cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   20cca:	6906      	ldr	r6, [r0, #16]
{
   20ccc:	4605      	mov	r5, r0
   20cce:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20cd0:	f00a fc02 	bl	2b4d8 <k_is_in_isr>
   20cd4:	b910      	cbnz	r0, 20cdc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   20cd6:	4b20      	ldr	r3, [pc, #128]	; (20d58 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   20cd8:	781b      	ldrb	r3, [r3, #0]
   20cda:	b983      	cbnz	r3, 20cfe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   20cdc:	f04f 0320 	mov.w	r3, #32
   20ce0:	f3ef 8411 	mrs	r4, BASEPRI
   20ce4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ce8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   20cec:	6868      	ldr	r0, [r5, #4]
   20cee:	f00a f914 	bl	2af1a <is_tx_ready.isra.0>
   20cf2:	bb28      	cbnz	r0, 20d40 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   20cf4:	f384 8811 	msr	BASEPRI, r4
   20cf8:	f3bf 8f6f 	isb	sy
}
   20cfc:	e7ee      	b.n	20cdc <uarte_nrfx_poll_out+0x14>
{
   20cfe:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   20d00:	6868      	ldr	r0, [r5, #4]
   20d02:	f00a f90a 	bl	2af1a <is_tx_ready.isra.0>
   20d06:	b970      	cbnz	r0, 20d26 <uarte_nrfx_poll_out+0x5e>
   20d08:	2001      	movs	r0, #1
   20d0a:	f00a f9c2 	bl	2b092 <nrfx_busy_wait>
   20d0e:	3c01      	subs	r4, #1
   20d10:	d1f6      	bne.n	20d00 <uarte_nrfx_poll_out+0x38>
   20d12:	2100      	movs	r1, #0
   20d14:	2021      	movs	r0, #33	; 0x21
   20d16:	f003 fbb5 	bl	24484 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20d1a:	e7f0      	b.n	20cfe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   20d1c:	f384 8811 	msr	BASEPRI, r4
   20d20:	f3bf 8f6f 	isb	sy
}
   20d24:	e7f5      	b.n	20d12 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   20d26:	f04f 0320 	mov.w	r3, #32
   20d2a:	f3ef 8411 	mrs	r4, BASEPRI
   20d2e:	f383 8812 	msr	BASEPRI_MAX, r3
   20d32:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20d36:	6868      	ldr	r0, [r5, #4]
   20d38:	f00a f8ef 	bl	2af1a <is_tx_ready.isra.0>
   20d3c:	2800      	cmp	r0, #0
   20d3e:	d0ed      	beq.n	20d1c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   20d40:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   20d42:	2201      	movs	r2, #1
	data->char_out = c;
   20d44:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   20d48:	6868      	ldr	r0, [r5, #4]
   20d4a:	f00a f8cb 	bl	2aee4 <tx_start.isra.0>
	__asm__ volatile(
   20d4e:	f384 8811 	msr	BASEPRI, r4
   20d52:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   20d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d58:	200049ce 	.word	0x200049ce

00020d5c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   20d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d60:	2200      	movs	r2, #0
   20d62:	4607      	mov	r7, r0
   20d64:	b088      	sub	sp, #32
   20d66:	2101      	movs	r1, #1
   20d68:	2002      	movs	r0, #2
   20d6a:	f7e9 fbf9 	bl	a560 <z_arm_irq_priority_set>
   20d6e:	2002      	movs	r0, #2
   20d70:	f7e9 fbc4 	bl	a4fc <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   20d74:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   20d78:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   20d7a:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   20d7e:	2300      	movs	r3, #0
   20d80:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   20d84:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   20d86:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   20d88:	68eb      	ldr	r3, [r5, #12]
   20d8a:	1c5a      	adds	r2, r3, #1
   20d8c:	d013      	beq.n	20db6 <uarte_0_init+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20d8e:	a802      	add	r0, sp, #8
   20d90:	9302      	str	r3, [sp, #8]
   20d92:	f7ff fed9 	bl	20b48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20d96:	9a02      	ldr	r2, [sp, #8]
   20d98:	2301      	movs	r3, #1
   20d9a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   20d9c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   20da0:	68eb      	ldr	r3, [r5, #12]
   20da2:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20da4:	a802      	add	r0, sp, #8
   20da6:	f7ff fecf 	bl	20b48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20daa:	9b02      	ldr	r3, [sp, #8]
   20dac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20db0:	2203      	movs	r2, #3
   20db2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   20db6:	6928      	ldr	r0, [r5, #16]
   20db8:	1c43      	adds	r3, r0, #1
   20dba:	d006      	beq.n	20dca <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   20dbc:	7f2b      	ldrb	r3, [r5, #28]
   20dbe:	2b00      	cmp	r3, #0
   20dc0:	bf14      	ite	ne
   20dc2:	2103      	movne	r1, #3
   20dc4:	2100      	moveq	r1, #0
   20dc6:	f00a f87f 	bl	2aec8 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   20dca:	696b      	ldr	r3, [r5, #20]
   20dcc:	1c5a      	adds	r2, r3, #1
   20dce:	d013      	beq.n	20df8 <uarte_0_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20dd0:	a802      	add	r0, sp, #8
   20dd2:	9302      	str	r3, [sp, #8]
   20dd4:	f7ff feb8 	bl	20b48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20dd8:	9a02      	ldr	r2, [sp, #8]
   20dda:	2301      	movs	r3, #1
   20ddc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   20dde:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   20de2:	696b      	ldr	r3, [r5, #20]
   20de4:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20de6:	a802      	add	r0, sp, #8
   20de8:	f7ff feae 	bl	20b48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20dec:	9b02      	ldr	r3, [sp, #8]
   20dee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20df2:	2203      	movs	r2, #3
   20df4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   20df8:	69a8      	ldr	r0, [r5, #24]
   20dfa:	1c43      	adds	r3, r0, #1
   20dfc:	d006      	beq.n	20e0c <uarte_0_init+0xb0>
			nrf_gpio_cfg_input(cfg->cts_pin,
   20dfe:	7f6b      	ldrb	r3, [r5, #29]
   20e00:	2b00      	cmp	r3, #0
   20e02:	bf14      	ite	ne
   20e04:	2103      	movne	r1, #3
   20e06:	2100      	moveq	r1, #0
   20e08:	f00a f85e 	bl	2aec8 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   20e0c:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   20e10:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   20e12:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   20e16:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   20e1a:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   20e1e:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   20e20:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   20e24:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   20e28:	1d31      	adds	r1, r6, #4
   20e2a:	f7ff fe9b 	bl	20b64 <uarte_nrfx_configure>
	if (err) {
   20e2e:	4605      	mov	r5, r0
   20e30:	2800      	cmp	r0, #0
   20e32:	d158      	bne.n	20ee6 <uarte_0_init+0x18a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   20e34:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   20e38:	0798      	lsls	r0, r3, #30
   20e3a:	d52b      	bpl.n	20e94 <uarte_0_init+0x138>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   20e3c:	f106 0016 	add.w	r0, r6, #22
   20e40:	f001 f9ee 	bl	22220 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   20e44:	4b2a      	ldr	r3, [pc, #168]	; (20ef0 <uarte_0_init+0x194>)
   20e46:	4298      	cmp	r0, r3
   20e48:	d011      	beq.n	20e6e <uarte_0_init+0x112>
		LOG_ERR("Failed to allocate PPI Channel");
   20e4a:	482a      	ldr	r0, [pc, #168]	; (20ef4 <uarte_0_init+0x198>)
   20e4c:	6803      	ldr	r3, [r0, #0]
   20e4e:	0759      	lsls	r1, r3, #29
   20e50:	d00a      	beq.n	20e68 <uarte_0_init+0x10c>
   20e52:	4b29      	ldr	r3, [pc, #164]	; (20ef8 <uarte_0_init+0x19c>)
   20e54:	9306      	str	r3, [sp, #24]
   20e56:	2302      	movs	r3, #2
   20e58:	9301      	str	r3, [sp, #4]
   20e5a:	9305      	str	r3, [sp, #20]
   20e5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20e60:	462b      	mov	r3, r5
   20e62:	aa05      	add	r2, sp, #20
   20e64:	f004 febc 	bl	25be0 <z_impl_z_log_msg2_static_create>
		return -EIO;
   20e68:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   20e6c:	e03b      	b.n	20ee6 <uarte_0_init+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   20e6e:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   20e70:	00c3      	lsls	r3, r0, #3
   20e72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20e76:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   20e7a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   20e7e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20e82:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20e86:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   20e8a:	4a1c      	ldr	r2, [pc, #112]	; (20efc <uarte_0_init+0x1a0>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   20e8c:	2301      	movs	r3, #1
   20e8e:	4083      	lsls	r3, r0
   20e90:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20e94:	2308      	movs	r3, #8
   20e96:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   20e9a:	f898 3008 	ldrb.w	r3, [r8, #8]
   20e9e:	b95b      	cbnz	r3, 20eb8 <uarte_0_init+0x15c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ea0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   20ea4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   20ea8:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   20eac:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20eb0:	2301      	movs	r3, #1
   20eb2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20eb6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   20eb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20ebc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   20ebe:	bf5c      	itt	pl
   20ec0:	f44f 7280 	movpl.w	r2, #256	; 0x100
   20ec4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20ec8:	06db      	lsls	r3, r3, #27
   20eca:	bf44      	itt	mi
   20ecc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   20ed0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   20ed4:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
   20ed6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20ed8:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20edc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ee0:	2301      	movs	r3, #1
   20ee2:	60a3      	str	r3, [r4, #8]
   20ee4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   20ee6:	4628      	mov	r0, r5
   20ee8:	b008      	add	sp, #32
   20eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20eee:	bf00      	nop
   20ef0:	0bad0000 	.word	0x0bad0000
   20ef4:	20000a44 	.word	0x20000a44
   20ef8:	00031c93 	.word	0x00031c93
   20efc:	4001f000 	.word	0x4001f000

00020f00 <random_byte_get>:
	__asm__ volatile(
   20f00:	f04f 0320 	mov.w	r3, #32
   20f04:	f3ef 8211 	mrs	r2, BASEPRI
   20f08:	f383 8812 	msr	BASEPRI_MAX, r3
   20f0c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20f10:	4b09      	ldr	r3, [pc, #36]	; (20f38 <random_byte_get+0x38>)
   20f12:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   20f16:	b161      	cbz	r1, 20f32 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20f18:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   20f1a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20f1e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   20f22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   20f26:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   20f28:	f382 8811 	msr	BASEPRI, r2
   20f2c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   20f30:	4770      	bx	lr
	int retval = -EAGAIN;
   20f32:	f06f 000a 	mvn.w	r0, #10
   20f36:	e7f7      	b.n	20f28 <random_byte_get+0x28>
   20f38:	4000d000 	.word	0x4000d000

00020f3c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   20f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f3e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   20f40:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   20f42:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   20f44:	f04f 0020 	mov.w	r0, #32
   20f48:	f3ef 8e11 	mrs	lr, BASEPRI
   20f4c:	f380 8812 	msr	BASEPRI_MAX, r0
   20f50:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   20f54:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   20f56:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   20f5a:	1ba4      	subs	r4, r4, r6
   20f5c:	403c      	ands	r4, r7
	if (available < len) {
   20f5e:	42a2      	cmp	r2, r4
		len = available;
   20f60:	bf88      	it	hi
   20f62:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   20f64:	18b0      	adds	r0, r6, r2
   20f66:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   20f68:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   20f6a:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   20f6c:	f38e 8811 	msr	BASEPRI, lr
   20f70:	f3bf 8f6f 	isb	sy
   20f74:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   20f76:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   20f78:	4290      	cmp	r0, r2
   20f7a:	d119      	bne.n	20fb0 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   20f7c:	4566      	cmp	r6, ip
   20f7e:	d10d      	bne.n	20f9c <rng_pool_get+0x60>
	__asm__ volatile(
   20f80:	f04f 0520 	mov.w	r5, #32
   20f84:	f3ef 8011 	mrs	r0, BASEPRI
   20f88:	f385 8812 	msr	BASEPRI_MAX, r5
   20f8c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   20f90:	781d      	ldrb	r5, [r3, #0]
   20f92:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   20f94:	f380 8811 	msr	BASEPRI, r0
   20f98:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   20f9c:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   20f9e:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   20fa0:	b290      	uxth	r0, r2
	available = available - len;
   20fa2:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   20fa4:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20fa6:	bf22      	ittt	cs
   20fa8:	4b06      	ldrcs	r3, [pc, #24]	; (20fc4 <rng_pool_get+0x88>)
   20faa:	2201      	movcs	r2, #1
   20fac:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   20fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   20fb0:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   20fb4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   20fb6:	f89e e005 	ldrb.w	lr, [lr, #5]
   20fba:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   20fbe:	403d      	ands	r5, r7
   20fc0:	e7da      	b.n	20f78 <rng_pool_get+0x3c>
   20fc2:	bf00      	nop
   20fc4:	4000d000 	.word	0x4000d000

00020fc8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20fc8:	43db      	mvns	r3, r3
{
   20fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20fce:	f013 0501 	ands.w	r5, r3, #1
{
   20fd2:	460e      	mov	r6, r1
   20fd4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20fd6:	d004      	beq.n	20fe2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   20fd8:	4821      	ldr	r0, [pc, #132]	; (21060 <entropy_nrf5_get_entropy_isr+0x98>)
   20fda:	f7ff ffaf 	bl	20f3c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   20fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   20fe2:	b3a2      	cbz	r2, 2104e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   20fe4:	f04f 0320 	mov.w	r3, #32
   20fe8:	f3ef 8811 	mrs	r8, BASEPRI
   20fec:	f383 8812 	msr	BASEPRI_MAX, r3
   20ff0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   20ff4:	200d      	movs	r0, #13
   20ff6:	f7e9 faa5 	bl	a544 <arch_irq_is_enabled>
   20ffa:	4607      	mov	r7, r0
		irq_disable(IRQN);
   20ffc:	200d      	movs	r0, #13
   20ffe:	f7e9 fa8d 	bl	a51c <arch_irq_disable>
	__asm__ volatile(
   21002:	f388 8811 	msr	BASEPRI, r8
   21006:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2100a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 21064 <entropy_nrf5_get_entropy_isr+0x9c>
   2100e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 21068 <entropy_nrf5_get_entropy_isr+0xa0>
   21012:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   21016:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   2101a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2101e:	2301      	movs	r3, #1
   21020:	f8c8 3000 	str.w	r3, [r8]
   21024:	4625      	mov	r5, r4
   21026:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2102a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   2102e:	b183      	cbz	r3, 21052 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   21030:	f7ff ff66 	bl	20f00 <random_byte_get>
			if (byte < 0) {
   21034:	1e03      	subs	r3, r0, #0
   21036:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   2103a:	dbf6      	blt.n	2102a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   2103c:	3d01      	subs	r5, #1
   2103e:	b2ad      	uxth	r5, r5
   21040:	5573      	strb	r3, [r6, r5]
		} while (len);
   21042:	2d00      	cmp	r5, #0
   21044:	d1f1      	bne.n	2102a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   21046:	b117      	cbz	r7, 2104e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   21048:	200d      	movs	r0, #13
   2104a:	f7e9 fa57 	bl	a4fc <arch_irq_enable>
	return cnt;
   2104e:	4620      	mov	r0, r4
   21050:	e7c5      	b.n	20fde <entropy_nrf5_get_entropy_isr+0x16>
   21052:	f3bf 8f4f 	dsb	sy
				__WFE();
   21056:	bf20      	wfe
				__SEV();
   21058:	bf40      	sev
				__WFE();
   2105a:	bf20      	wfe
   2105c:	e7e5      	b.n	2102a <entropy_nrf5_get_entropy_isr+0x62>
   2105e:	bf00      	nop
   21060:	20004520 	.word	0x20004520
   21064:	4000d000 	.word	0x4000d000
   21068:	e000e100 	.word	0xe000e100

0002106c <entropy_nrf5_get_entropy>:
{
   2106c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   21070:	4f13      	ldr	r7, [pc, #76]	; (210c0 <entropy_nrf5_get_entropy+0x54>)
   21072:	460d      	mov	r5, r1
   21074:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21076:	f107 0845 	add.w	r8, r7, #69	; 0x45
   2107a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   2107e:	b914      	cbnz	r4, 21086 <entropy_nrf5_get_entropy+0x1a>
}
   21080:	4620      	mov	r0, r4
   21082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2108a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2108e:	4638      	mov	r0, r7
   21090:	f002 fd3a 	bl	23b08 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21094:	4622      	mov	r2, r4
   21096:	4629      	mov	r1, r5
   21098:	4640      	mov	r0, r8
   2109a:	f7ff ff4f 	bl	20f3c <rng_pool_get>
   2109e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   210a0:	4638      	mov	r0, r7
   210a2:	f002 fd0b 	bl	23abc <z_impl_k_sem_give>
		if (bytes == 0U) {
   210a6:	b93e      	cbnz	r6, 210b8 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   210a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   210ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   210b0:	4648      	mov	r0, r9
   210b2:	f002 fd29 	bl	23b08 <z_impl_k_sem_take>
			continue;
   210b6:	e7e2      	b.n	2107e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   210b8:	1ba4      	subs	r4, r4, r6
   210ba:	b2a4      	uxth	r4, r4
		buf += bytes;
   210bc:	4435      	add	r5, r6
   210be:	e7de      	b.n	2107e <entropy_nrf5_get_entropy+0x12>
   210c0:	200044f0 	.word	0x200044f0

000210c4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   210c4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   210c6:	4c19      	ldr	r4, [pc, #100]	; (2112c <entropy_nrf5_init+0x68>)
   210c8:	2201      	movs	r2, #1
   210ca:	4611      	mov	r1, r2
   210cc:	4620      	mov	r0, r4
   210ce:	f00a fb02 	bl	2b6d6 <z_impl_k_sem_init>
   210d2:	2201      	movs	r2, #1
   210d4:	2100      	movs	r1, #0
   210d6:	f104 0018 	add.w	r0, r4, #24
   210da:	f00a fafc 	bl	2b6d6 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   210de:	f240 4307 	movw	r3, #1031	; 0x407
   210e2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   210e6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   210ea:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   210ec:	230c      	movs	r3, #12
   210ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   210f2:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   210f4:	4b0e      	ldr	r3, [pc, #56]	; (21130 <entropy_nrf5_init+0x6c>)
   210f6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   210fa:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   210fe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   21102:	f042 0201 	orr.w	r2, r2, #1
   21106:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   2110a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2110c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   21110:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   21114:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   21118:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2111a:	6019      	str	r1, [r3, #0]
   2111c:	200d      	movs	r0, #13
   2111e:	f7e9 fa1f 	bl	a560 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   21122:	200d      	movs	r0, #13
   21124:	f7e9 f9ea 	bl	a4fc <arch_irq_enable>

	return 0;
}
   21128:	4628      	mov	r0, r5
   2112a:	bd38      	pop	{r3, r4, r5, pc}
   2112c:	200044f0 	.word	0x200044f0
   21130:	4000d000 	.word	0x4000d000

00021134 <isr>:
{
   21134:	b510      	push	{r4, lr}
	byte = random_byte_get();
   21136:	f7ff fee3 	bl	20f00 <random_byte_get>
	if (byte < 0) {
   2113a:	2800      	cmp	r0, #0
   2113c:	db20      	blt.n	21180 <isr+0x4c>
	uint8_t last  = rngp->last;
   2113e:	4b17      	ldr	r3, [pc, #92]	; (2119c <isr+0x68>)
   21140:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   21144:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   21148:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   2114c:	1a51      	subs	r1, r2, r1
   2114e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   21152:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   21154:	d10d      	bne.n	21172 <isr+0x3e>
	uint8_t last  = rngp->last;
   21156:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2115a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   2115e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   21162:	1a51      	subs	r1, r2, r1
   21164:	ea34 0101 	bics.w	r1, r4, r1
   21168:	d10b      	bne.n	21182 <isr+0x4e>
   2116a:	4b0d      	ldr	r3, [pc, #52]	; (211a0 <isr+0x6c>)
   2116c:	2201      	movs	r2, #1
   2116e:	605a      	str	r2, [r3, #4]
}
   21170:	e00e      	b.n	21190 <isr+0x5c>
	rngp->buffer[last] = byte;
   21172:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   21174:	3201      	adds	r2, #1
   21176:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   21178:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   2117c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   21180:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   21182:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   21184:	3201      	adds	r2, #1
   21186:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   21188:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   2118c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   21190:	4804      	ldr	r0, [pc, #16]	; (211a4 <isr+0x70>)
}
   21192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21196:	f002 bc91 	b.w	23abc <z_impl_k_sem_give>
   2119a:	bf00      	nop
   2119c:	200044f0 	.word	0x200044f0
   211a0:	4000d000 	.word	0x4000d000
   211a4:	20004508 	.word	0x20004508

000211a8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   211a8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   211aa:	2301      	movs	r3, #1
   211ac:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   211ae:	4a11      	ldr	r2, [pc, #68]	; (211f4 <compare_int_lock+0x4c>)
   211b0:	f3bf 8f5b 	dmb	ish
   211b4:	43dc      	mvns	r4, r3
   211b6:	e852 1f00 	ldrex	r1, [r2]
   211ba:	ea01 0c04 	and.w	ip, r1, r4
   211be:	e842 ce00 	strex	lr, ip, [r2]
   211c2:	f1be 0f00 	cmp.w	lr, #0
   211c6:	d1f6      	bne.n	211b6 <compare_int_lock+0xe>
   211c8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   211cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   211d0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   211d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   211d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   211dc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   211e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   211e4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   211e8:	420b      	tst	r3, r1
}
   211ea:	bf14      	ite	ne
   211ec:	2001      	movne	r0, #1
   211ee:	2000      	moveq	r0, #0
   211f0:	bd10      	pop	{r4, pc}
   211f2:	bf00      	nop
   211f4:	20004548 	.word	0x20004548

000211f8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   211f8:	4919      	ldr	r1, [pc, #100]	; (21260 <sys_clock_timeout_handler+0x68>)
{
   211fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211fc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   211fe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   21202:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   21204:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   21208:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2120c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   2120e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   21212:	d222      	bcs.n	2125a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   21214:	4b13      	ldr	r3, [pc, #76]	; (21264 <sys_clock_timeout_handler+0x6c>)
   21216:	681b      	ldr	r3, [r3, #0]
   21218:	0a1a      	lsrs	r2, r3, #8
   2121a:	061b      	lsls	r3, r3, #24
   2121c:	195e      	adds	r6, r3, r5
   2121e:	4b12      	ldr	r3, [pc, #72]	; (21268 <sys_clock_timeout_handler+0x70>)
   21220:	f142 0700 	adc.w	r7, r2, #0
   21224:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   21228:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2122a:	f003 fac7 	bl	247bc <sys_clock_announce>
    return p_reg->CC[ch];
   2122e:	00a3      	lsls	r3, r4, #2
   21230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21234:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   21238:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   2123c:	42aa      	cmp	r2, r5
   2123e:	d10b      	bne.n	21258 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   21240:	b91e      	cbnz	r6, 2124a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   21242:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21246:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   2124a:	4b08      	ldr	r3, [pc, #32]	; (2126c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2124c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   21250:	fa00 f404 	lsl.w	r4, r0, r4
   21254:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   21258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   2125a:	2600      	movs	r6, #0
   2125c:	e7e5      	b.n	2122a <sys_clock_timeout_handler+0x32>
   2125e:	bf00      	nop
   21260:	200021a0 	.word	0x200021a0
   21264:	2000454c 	.word	0x2000454c
   21268:	20002188 	.word	0x20002188
   2126c:	40011000 	.word	0x40011000

00021270 <compare_int_unlock>:
	if (key) {
   21270:	b319      	cbz	r1, 212ba <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21272:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   21276:	2301      	movs	r3, #1
   21278:	4a10      	ldr	r2, [pc, #64]	; (212bc <compare_int_unlock+0x4c>)
   2127a:	4083      	lsls	r3, r0
   2127c:	e852 1f00 	ldrex	r1, [r2]
   21280:	4319      	orrs	r1, r3
   21282:	e842 1c00 	strex	ip, r1, [r2]
   21286:	f1bc 0f00 	cmp.w	ip, #0
   2128a:	d1f7      	bne.n	2127c <compare_int_unlock+0xc>
   2128c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   21290:	4a0b      	ldr	r2, [pc, #44]	; (212c0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21296:	4083      	lsls	r3, r0
   21298:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2129c:	4b09      	ldr	r3, [pc, #36]	; (212c4 <compare_int_unlock+0x54>)
   2129e:	f3bf 8f5b 	dmb	ish
   212a2:	681b      	ldr	r3, [r3, #0]
   212a4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   212a8:	fa23 f000 	lsr.w	r0, r3, r0
   212ac:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   212ae:	bf42      	ittt	mi
   212b0:	4b05      	ldrmi	r3, [pc, #20]	; (212c8 <compare_int_unlock+0x58>)
   212b2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   212b6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   212ba:	4770      	bx	lr
   212bc:	20004548 	.word	0x20004548
   212c0:	40011000 	.word	0x40011000
   212c4:	20004544 	.word	0x20004544
   212c8:	e000e100 	.word	0xe000e100

000212cc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   212cc:	4b0d      	ldr	r3, [pc, #52]	; (21304 <z_nrf_rtc_timer_read+0x38>)
   212ce:	6818      	ldr	r0, [r3, #0]
   212d0:	0a01      	lsrs	r1, r0, #8
   212d2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   212d4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   212d8:	4b0b      	ldr	r3, [pc, #44]	; (21308 <z_nrf_rtc_timer_read+0x3c>)
   212da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   212de:	1818      	adds	r0, r3, r0
   212e0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   212e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   212e8:	d20a      	bcs.n	21300 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   212ea:	4b08      	ldr	r3, [pc, #32]	; (2130c <z_nrf_rtc_timer_read+0x40>)
   212ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   212f0:	4290      	cmp	r0, r2
   212f2:	eb71 0303 	sbcs.w	r3, r1, r3
   212f6:	d203      	bcs.n	21300 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   212f8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   212fc:	f141 0100 	adc.w	r1, r1, #0
}
   21300:	4770      	bx	lr
   21302:	bf00      	nop
   21304:	2000454c 	.word	0x2000454c
   21308:	40011000 	.word	0x40011000
   2130c:	20002188 	.word	0x20002188

00021310 <compare_set>:
{
   21310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21314:	b085      	sub	sp, #20
   21316:	4616      	mov	r6, r2
   21318:	4698      	mov	r8, r3
   2131a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   2131c:	f7ff ff44 	bl	211a8 <compare_int_lock>
   21320:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21322:	f7ff ffd3 	bl	212cc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   21326:	42b0      	cmp	r0, r6
   21328:	eb71 0308 	sbcs.w	r3, r1, r8
   2132c:	d278      	bcs.n	21420 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   2132e:	4b46      	ldr	r3, [pc, #280]	; (21448 <compare_set+0x138>)
   21330:	1a30      	subs	r0, r6, r0
   21332:	eb68 0101 	sbc.w	r1, r8, r1
   21336:	4298      	cmp	r0, r3
   21338:	f171 0300 	sbcs.w	r3, r1, #0
   2133c:	f080 8081 	bcs.w	21442 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   21340:	4b42      	ldr	r3, [pc, #264]	; (2144c <compare_set+0x13c>)
   21342:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   21346:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   2134a:	45d8      	cmp	r8, fp
   2134c:	bf08      	it	eq
   2134e:	4556      	cmpeq	r6, sl
   21350:	d051      	beq.n	213f6 <compare_set+0xe6>
   21352:	ea4f 0985 	mov.w	r9, r5, lsl #2
   21356:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2135a:	f105 0750 	add.w	r7, r5, #80	; 0x50
   2135e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   21362:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21364:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   21368:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2136c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   2136e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   21372:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21376:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   21378:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2137c:	4b34      	ldr	r3, [pc, #208]	; (21450 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2137e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   21382:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   21384:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   21388:	1a40      	subs	r0, r0, r1
   2138a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2138e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   21392:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   21394:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   21398:	d107      	bne.n	213aa <compare_set+0x9a>
   2139a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   2139e:	2013      	movs	r0, #19
   213a0:	f00a fbf3 	bl	2bb8a <z_impl_k_busy_wait>
   213a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   213a8:	4b29      	ldr	r3, [pc, #164]	; (21450 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   213aa:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   213ae:	eba4 000c 	sub.w	r0, r4, ip
   213b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   213b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   213ba:	bf88      	it	hi
   213bc:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   213be:	2000      	movs	r0, #0
   213c0:	6038      	str	r0, [r7, #0]
   213c2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   213c4:	9801      	ldr	r0, [sp, #4]
   213c6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   213ca:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   213ce:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   213d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   213d6:	4281      	cmp	r1, r0
   213d8:	d006      	beq.n	213e8 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   213da:	1a20      	subs	r0, r4, r0
   213dc:	3802      	subs	r0, #2
   213de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   213e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   213e6:	d819      	bhi.n	2141c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   213e8:	1aa4      	subs	r4, r4, r2
   213ea:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   213ee:	eb14 0a06 	adds.w	sl, r4, r6
   213f2:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   213f6:	4915      	ldr	r1, [pc, #84]	; (2144c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   213f8:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   213fa:	012b      	lsls	r3, r5, #4
   213fc:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   21400:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   21404:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   21406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21408:	6053      	str	r3, [r2, #4]
	return ret;
   2140a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   2140c:	4628      	mov	r0, r5
   2140e:	9900      	ldr	r1, [sp, #0]
   21410:	f7ff ff2e 	bl	21270 <compare_int_unlock>
}
   21414:	4620      	mov	r0, r4
   21416:	b005      	add	sp, #20
   21418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2141c:	4620      	mov	r0, r4
   2141e:	e7b1      	b.n	21384 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   21420:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21422:	4a0c      	ldr	r2, [pc, #48]	; (21454 <compare_set+0x144>)
   21424:	f3bf 8f5b 	dmb	ish
   21428:	40ab      	lsls	r3, r5
   2142a:	e852 1f00 	ldrex	r1, [r2]
   2142e:	4319      	orrs	r1, r3
   21430:	e842 1000 	strex	r0, r1, [r2]
   21434:	2800      	cmp	r0, #0
   21436:	d1f8      	bne.n	2142a <compare_set+0x11a>
   21438:	f3bf 8f5b 	dmb	ish
   2143c:	46b2      	mov	sl, r6
   2143e:	46c3      	mov	fp, r8
   21440:	e7d9      	b.n	213f6 <compare_set+0xe6>
			return -EINVAL;
   21442:	f06f 0415 	mvn.w	r4, #21
   21446:	e7e1      	b.n	2140c <compare_set+0xfc>
   21448:	01000001 	.word	0x01000001
   2144c:	20002190 	.word	0x20002190
   21450:	40011000 	.word	0x40011000
   21454:	20004544 	.word	0x20004544

00021458 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   21458:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2145a:	4b19      	ldr	r3, [pc, #100]	; (214c0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   2145c:	4d19      	ldr	r5, [pc, #100]	; (214c4 <sys_clock_driver_init+0x6c>)
   2145e:	2400      	movs	r4, #0
   21460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21468:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   2146c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   21470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21474:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21478:	4b13      	ldr	r3, [pc, #76]	; (214c8 <sys_clock_driver_init+0x70>)
   2147a:	2602      	movs	r6, #2
   2147c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   21480:	2101      	movs	r1, #1
   21482:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   21486:	2011      	movs	r0, #17
   21488:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2148c:	4622      	mov	r2, r4
   2148e:	f7e9 f867 	bl	a560 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   21492:	2011      	movs	r0, #17
   21494:	f7e9 f832 	bl	a4fc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   21498:	4a0c      	ldr	r2, [pc, #48]	; (214cc <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2149a:	2301      	movs	r3, #1
   2149c:	60ab      	str	r3, [r5, #8]
   2149e:	602b      	str	r3, [r5, #0]
   214a0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   214a2:	4b0b      	ldr	r3, [pc, #44]	; (214d0 <sys_clock_driver_init+0x78>)
   214a4:	4a0b      	ldr	r2, [pc, #44]	; (214d4 <sys_clock_driver_init+0x7c>)
   214a6:	9300      	str	r3, [sp, #0]
   214a8:	9401      	str	r4, [sp, #4]
   214aa:	2300      	movs	r3, #0
   214ac:	4620      	mov	r0, r4
   214ae:	f7ff ff2f 	bl	21310 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   214b2:	4630      	mov	r0, r6
   214b4:	f7ff f830 	bl	20518 <z_nrf_clock_control_lf_on>

	return 0;
}
   214b8:	4620      	mov	r0, r4
   214ba:	b002      	add	sp, #8
   214bc:	bd70      	pop	{r4, r5, r6, pc}
   214be:	bf00      	nop
   214c0:	20002190 	.word	0x20002190
   214c4:	40011000 	.word	0x40011000
   214c8:	e000e100 	.word	0xe000e100
   214cc:	20004548 	.word	0x20004548
   214d0:	000211f9 	.word	0x000211f9
   214d4:	007fffff 	.word	0x007fffff

000214d8 <rtc_nrf_isr>:
{
   214d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   214dc:	4c35      	ldr	r4, [pc, #212]	; (215b4 <rtc_nrf_isr+0xdc>)
   214de:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   214e2:	079a      	lsls	r2, r3, #30
   214e4:	d50b      	bpl.n	214fe <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   214e6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   214ea:	b143      	cbz	r3, 214fe <rtc_nrf_isr+0x26>
		overflow_cnt++;
   214ec:	4a32      	ldr	r2, [pc, #200]	; (215b8 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   214ee:	2300      	movs	r3, #0
   214f0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   214f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   214f8:	6813      	ldr	r3, [r2, #0]
   214fa:	3301      	adds	r3, #1
   214fc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   214fe:	f04f 0320 	mov.w	r3, #32
   21502:	f3ef 8211 	mrs	r2, BASEPRI
   21506:	f383 8812 	msr	BASEPRI_MAX, r3
   2150a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   2150e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   21512:	03db      	lsls	r3, r3, #15
   21514:	d512      	bpl.n	2153c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21516:	f3bf 8f5b 	dmb	ish
   2151a:	4b28      	ldr	r3, [pc, #160]	; (215bc <rtc_nrf_isr+0xe4>)
   2151c:	e853 1f00 	ldrex	r1, [r3]
   21520:	f021 0001 	bic.w	r0, r1, #1
   21524:	e843 0600 	strex	r6, r0, [r3]
   21528:	2e00      	cmp	r6, #0
   2152a:	d1f7      	bne.n	2151c <rtc_nrf_isr+0x44>
   2152c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21530:	2900      	cmp	r1, #0
   21532:	d136      	bne.n	215a2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21534:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   21538:	2b00      	cmp	r3, #0
   2153a:	d132      	bne.n	215a2 <rtc_nrf_isr+0xca>
{
   2153c:	2300      	movs	r3, #0
	__asm__ volatile(
   2153e:	f382 8811 	msr	BASEPRI, r2
   21542:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   21546:	b34b      	cbz	r3, 2159c <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   21548:	f7ff fec0 	bl	212cc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   2154c:	f04f 0320 	mov.w	r3, #32
   21550:	f3ef 8c11 	mrs	ip, BASEPRI
   21554:	f383 8812 	msr	BASEPRI_MAX, r3
   21558:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   2155c:	4b18      	ldr	r3, [pc, #96]	; (215c0 <rtc_nrf_isr+0xe8>)
   2155e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   21562:	42b0      	cmp	r0, r6
   21564:	eb71 0207 	sbcs.w	r2, r1, r7
   21568:	f04f 0200 	mov.w	r2, #0
   2156c:	d320      	bcc.n	215b0 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2156e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21572:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   21576:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2157a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   2157e:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   21580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21584:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   21588:	f38c 8811 	msr	BASEPRI, ip
   2158c:	f3bf 8f6f 	isb	sy
		if (handler) {
   21590:	b121      	cbz	r1, 2159c <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   21592:	9500      	str	r5, [sp, #0]
   21594:	4632      	mov	r2, r6
   21596:	463b      	mov	r3, r7
   21598:	2000      	movs	r0, #0
   2159a:	4788      	blx	r1
}
   2159c:	b003      	add	sp, #12
   2159e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   215a2:	2300      	movs	r3, #0
   215a4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   215a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   215ac:	2301      	movs	r3, #1
}
   215ae:	e7c6      	b.n	2153e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   215b0:	4611      	mov	r1, r2
   215b2:	e7e9      	b.n	21588 <rtc_nrf_isr+0xb0>
   215b4:	40011000 	.word	0x40011000
   215b8:	2000454c 	.word	0x2000454c
   215bc:	20004544 	.word	0x20004544
   215c0:	20002190 	.word	0x20002190

000215c4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   215c4:	1c43      	adds	r3, r0, #1
{
   215c6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   215c8:	d021      	beq.n	2160e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   215ca:	2801      	cmp	r0, #1
   215cc:	dd21      	ble.n	21612 <sys_clock_set_timeout+0x4e>
   215ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   215d2:	da20      	bge.n	21616 <sys_clock_set_timeout+0x52>
   215d4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   215d6:	f7ff fe79 	bl	212cc <z_nrf_rtc_timer_read>
   215da:	4b10      	ldr	r3, [pc, #64]	; (2161c <sys_clock_set_timeout+0x58>)
   215dc:	e9d3 1300 	ldrd	r1, r3, [r3]
   215e0:	1a40      	subs	r0, r0, r1
		ticks = 0;
   215e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   215e6:	bf28      	it	cs
   215e8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   215ea:	3001      	adds	r0, #1
   215ec:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   215ee:	480c      	ldr	r0, [pc, #48]	; (21620 <sys_clock_set_timeout+0x5c>)
   215f0:	4282      	cmp	r2, r0
   215f2:	bf28      	it	cs
   215f4:	4602      	movcs	r2, r0
   215f6:	1852      	adds	r2, r2, r1
   215f8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   215fc:	4909      	ldr	r1, [pc, #36]	; (21624 <sys_clock_set_timeout+0x60>)
   215fe:	9001      	str	r0, [sp, #4]
   21600:	9100      	str	r1, [sp, #0]
   21602:	f143 0300 	adc.w	r3, r3, #0
   21606:	f7ff fe83 	bl	21310 <compare_set>
}
   2160a:	b002      	add	sp, #8
   2160c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2160e:	4804      	ldr	r0, [pc, #16]	; (21620 <sys_clock_set_timeout+0x5c>)
   21610:	e7e0      	b.n	215d4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21612:	2400      	movs	r4, #0
   21614:	e7df      	b.n	215d6 <sys_clock_set_timeout+0x12>
   21616:	4c02      	ldr	r4, [pc, #8]	; (21620 <sys_clock_set_timeout+0x5c>)
   21618:	e7dd      	b.n	215d6 <sys_clock_set_timeout+0x12>
   2161a:	bf00      	nop
   2161c:	200021a0 	.word	0x200021a0
   21620:	007fffff 	.word	0x007fffff
   21624:	000211f9 	.word	0x000211f9

00021628 <sys_clock_elapsed>:
{
   21628:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2162a:	f7ff fe4f 	bl	212cc <z_nrf_rtc_timer_read>
   2162e:	4b02      	ldr	r3, [pc, #8]	; (21638 <sys_clock_elapsed+0x10>)
   21630:	681b      	ldr	r3, [r3, #0]
}
   21632:	1ac0      	subs	r0, r0, r3
   21634:	bd08      	pop	{r3, pc}
   21636:	bf00      	nop
   21638:	200021a0 	.word	0x200021a0

0002163c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   2163c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   21640:	4905      	ldr	r1, [pc, #20]	; (21658 <__NVIC_SystemReset+0x1c>)
   21642:	4b06      	ldr	r3, [pc, #24]	; (2165c <__NVIC_SystemReset+0x20>)
   21644:	68ca      	ldr	r2, [r1, #12]
   21646:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2164a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2164c:	60cb      	str	r3, [r1, #12]
   2164e:	f3bf 8f4f 	dsb	sy
    __NOP();
   21652:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   21654:	e7fd      	b.n	21652 <__NVIC_SystemReset+0x16>
   21656:	bf00      	nop
   21658:	e000ed00 	.word	0xe000ed00
   2165c:	05fa0004 	.word	0x05fa0004

00021660 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21660:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   21664:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21668:	2a08      	cmp	r2, #8
   2166a:	d106      	bne.n	2167a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2166c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   21670:	2b05      	cmp	r3, #5
   21672:	d802      	bhi.n	2167a <nrf52_errata_103+0x1a>
   21674:	4a02      	ldr	r2, [pc, #8]	; (21680 <nrf52_errata_103+0x20>)
   21676:	5cd0      	ldrb	r0, [r2, r3]
   21678:	4770      	bx	lr
        return false;
   2167a:	2000      	movs	r0, #0
}
   2167c:	4770      	bx	lr
   2167e:	bf00      	nop
   21680:	00031cd3 	.word	0x00031cd3

00021684 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21684:	4a02      	ldr	r2, [pc, #8]	; (21690 <nvmc_wait+0xc>)
   21686:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2168a:	2b00      	cmp	r3, #0
   2168c:	d0fb      	beq.n	21686 <nvmc_wait+0x2>
}
   2168e:	4770      	bx	lr
   21690:	4001e000 	.word	0x4001e000

00021694 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   21694:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   21696:	f009 fcf2 	bl	2b07e <nrf52_errata_136>
   2169a:	b140      	cbz	r0, 216ae <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   2169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   216a0:	2200      	movs	r2, #0
   216a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   216a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   216aa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   216ae:	f009 fce6 	bl	2b07e <nrf52_errata_136>
   216b2:	2800      	cmp	r0, #0
   216b4:	d046      	beq.n	21744 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   216b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   216ba:	4b65      	ldr	r3, [pc, #404]	; (21850 <SystemInit+0x1bc>)
   216bc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   216c0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   216c4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   216c8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   216cc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   216d0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   216d4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   216d8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   216dc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   216e0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   216e4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   216e8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   216ec:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   216f0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   216f4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   216f8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   216fc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   21700:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   21704:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   21708:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2170c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   21710:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   21714:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   21718:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2171c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   21720:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   21724:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   21728:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2172c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   21730:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   21734:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   21738:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2173c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   21740:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   21744:	f7ff ff8c 	bl	21660 <nrf52_errata_103>
   21748:	b118      	cbz	r0, 21752 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2174a:	4b42      	ldr	r3, [pc, #264]	; (21854 <SystemInit+0x1c0>)
   2174c:	4a42      	ldr	r2, [pc, #264]	; (21858 <SystemInit+0x1c4>)
   2174e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   21752:	f7ff ff85 	bl	21660 <nrf52_errata_103>
   21756:	b118      	cbz	r0, 21760 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   21758:	4b40      	ldr	r3, [pc, #256]	; (2185c <SystemInit+0x1c8>)
   2175a:	22fb      	movs	r2, #251	; 0xfb
   2175c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   21760:	f7ff ff7e 	bl	21660 <nrf52_errata_103>
   21764:	b170      	cbz	r0, 21784 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   21766:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2176a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2176e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   21772:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   21776:	f022 020f 	bic.w	r2, r2, #15
   2177a:	f003 030f 	and.w	r3, r3, #15
   2177e:	4313      	orrs	r3, r2
   21780:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   21784:	f7ff ff6c 	bl	21660 <nrf52_errata_103>
   21788:	b120      	cbz	r0, 21794 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2178a:	4b35      	ldr	r3, [pc, #212]	; (21860 <SystemInit+0x1cc>)
   2178c:	f44f 7200 	mov.w	r2, #512	; 0x200
   21790:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   21794:	f009 fc73 	bl	2b07e <nrf52_errata_136>
   21798:	b148      	cbz	r0, 217ae <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2179a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2179e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   217a2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   217a4:	bf44      	itt	mi
   217a6:	f06f 0201 	mvnmi.w	r2, #1
   217aa:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   217ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   217b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   217b6:	2a08      	cmp	r2, #8
   217b8:	d10e      	bne.n	217d8 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   217ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   217be:	2b05      	cmp	r3, #5
   217c0:	d802      	bhi.n	217c8 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   217c2:	4a28      	ldr	r2, [pc, #160]	; (21864 <SystemInit+0x1d0>)
   217c4:	5cd3      	ldrb	r3, [r2, r3]
   217c6:	b13b      	cbz	r3, 217d8 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   217c8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   217cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   217d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   217d4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   217d8:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   217dc:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   217e0:	07db      	lsls	r3, r3, #31
   217e2:	d514      	bpl.n	2180e <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   217e4:	4820      	ldr	r0, [pc, #128]	; (21868 <SystemInit+0x1d4>)
   217e6:	2301      	movs	r3, #1
   217e8:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   217ec:	f7ff ff4a 	bl	21684 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   217f0:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   217f4:	f023 0301 	bic.w	r3, r3, #1
   217f8:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   217fc:	f7ff ff42 	bl	21684 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21800:	2300      	movs	r3, #0
   21802:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   21806:	f7ff ff3d 	bl	21684 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   2180a:	f7ff ff17 	bl	2163c <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2180e:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   21812:	2b00      	cmp	r3, #0
   21814:	db03      	blt.n	2181e <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   21816:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2181a:	2b00      	cmp	r3, #0
   2181c:	da14      	bge.n	21848 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2181e:	4912      	ldr	r1, [pc, #72]	; (21868 <SystemInit+0x1d4>)
   21820:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   21822:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21826:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2182a:	2412      	movs	r4, #18
    nvmc_wait();
   2182c:	f7ff ff2a 	bl	21684 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   21830:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   21834:	f7ff ff26 	bl	21684 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   21838:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2183c:	f7ff ff22 	bl	21684 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21840:	2300      	movs	r3, #0
   21842:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   21846:	e7de      	b.n	21806 <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   21848:	4b08      	ldr	r3, [pc, #32]	; (2186c <SystemInit+0x1d8>)
   2184a:	4a09      	ldr	r2, [pc, #36]	; (21870 <SystemInit+0x1dc>)
   2184c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2184e:	bd10      	pop	{r4, pc}
   21850:	4000c000 	.word	0x4000c000
   21854:	40005000 	.word	0x40005000
   21858:	00038148 	.word	0x00038148
   2185c:	4000f000 	.word	0x4000f000
   21860:	40029000 	.word	0x40029000
   21864:	00031ccd 	.word	0x00031ccd
   21868:	4001e000 	.word	0x4001e000
   2186c:	200007f4 	.word	0x200007f4
   21870:	03d09000 	.word	0x03d09000

00021874 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   21874:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   21876:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   21878:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2187a:	fab2 f382 	clz	r3, r2
   2187e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   21882:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   21884:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   21886:	d014      	beq.n	218b2 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21888:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2188c:	fa05 f303 	lsl.w	r3, r5, r3
   21890:	ea22 0303 	bic.w	r3, r2, r3
   21894:	e850 6f00 	ldrex	r6, [r0]
   21898:	4296      	cmp	r6, r2
   2189a:	d104      	bne.n	218a6 <nrfx_flag32_alloc+0x32>
   2189c:	e840 3c00 	strex	ip, r3, [r0]
   218a0:	f1bc 0f00 	cmp.w	ip, #0
   218a4:	d1f6      	bne.n	21894 <nrfx_flag32_alloc+0x20>
   218a6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   218aa:	d1e5      	bne.n	21878 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   218ac:	4802      	ldr	r0, [pc, #8]	; (218b8 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   218ae:	700c      	strb	r4, [r1, #0]
}
   218b0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   218b2:	4802      	ldr	r0, [pc, #8]	; (218bc <nrfx_flag32_alloc+0x48>)
   218b4:	e7fc      	b.n	218b0 <nrfx_flag32_alloc+0x3c>
   218b6:	bf00      	nop
   218b8:	0bad0000 	.word	0x0bad0000
   218bc:	0bad0002 	.word	0x0bad0002

000218c0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   218c0:	6803      	ldr	r3, [r0, #0]
   218c2:	40cb      	lsrs	r3, r1
   218c4:	07db      	lsls	r3, r3, #31
{
   218c6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   218c8:	d415      	bmi.n	218f6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   218ca:	2301      	movs	r3, #1
   218cc:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   218d0:	6803      	ldr	r3, [r0, #0]
   218d2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   218d6:	ea41 0203 	orr.w	r2, r1, r3
   218da:	e850 4f00 	ldrex	r4, [r0]
   218de:	429c      	cmp	r4, r3
   218e0:	d104      	bne.n	218ec <nrfx_flag32_free+0x2c>
   218e2:	e840 2c00 	strex	ip, r2, [r0]
   218e6:	f1bc 0f00 	cmp.w	ip, #0
   218ea:	d1f6      	bne.n	218da <nrfx_flag32_free+0x1a>
   218ec:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   218f0:	d1ee      	bne.n	218d0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   218f2:	4802      	ldr	r0, [pc, #8]	; (218fc <nrfx_flag32_free+0x3c>)
}
   218f4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   218f6:	4802      	ldr	r0, [pc, #8]	; (21900 <nrfx_flag32_free+0x40>)
   218f8:	e7fc      	b.n	218f4 <nrfx_flag32_free+0x34>
   218fa:	bf00      	nop
   218fc:	0bad0000 	.word	0x0bad0000
   21900:	0bad0004 	.word	0x0bad0004

00021904 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21904:	4b04      	ldr	r3, [pc, #16]	; (21918 <nrfx_clock_init+0x14>)
   21906:	791a      	ldrb	r2, [r3, #4]
   21908:	b922      	cbnz	r2, 21914 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2190a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   2190c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2190e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   21910:	4802      	ldr	r0, [pc, #8]	; (2191c <nrfx_clock_init+0x18>)
   21912:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21914:	4802      	ldr	r0, [pc, #8]	; (21920 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21916:	4770      	bx	lr
   21918:	20004550 	.word	0x20004550
   2191c:	0bad0000 	.word	0x0bad0000
   21920:	0bad000c 	.word	0x0bad000c

00021924 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21924:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21926:	2000      	movs	r0, #0
   21928:	f7e8 fe0c 	bl	a544 <arch_irq_is_enabled>
   2192c:	b908      	cbnz	r0, 21932 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2192e:	f7e8 fde5 	bl	a4fc <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   21932:	4b02      	ldr	r3, [pc, #8]	; (2193c <nrfx_clock_enable+0x18>)
   21934:	2201      	movs	r2, #1
   21936:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21938:	bd08      	pop	{r3, pc}
   2193a:	bf00      	nop
   2193c:	200049c8 	.word	0x200049c8

00021940 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   21940:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   21942:	b110      	cbz	r0, 2194a <nrfx_clock_stop+0xa>
   21944:	2801      	cmp	r0, #1
   21946:	d017      	beq.n	21978 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   21948:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   2194a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2194e:	2302      	movs	r3, #2
   21950:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21954:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   21958:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2195c:	2301      	movs	r3, #1
   2195e:	60e3      	str	r3, [r4, #12]
   21960:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21964:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   21968:	03db      	lsls	r3, r3, #15
   2196a:	d5ed      	bpl.n	21948 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   2196c:	2001      	movs	r0, #1
   2196e:	f009 fb90 	bl	2b092 <nrfx_busy_wait>
   21972:	3d01      	subs	r5, #1
   21974:	d1f6      	bne.n	21964 <nrfx_clock_stop+0x24>
   21976:	e7e7      	b.n	21948 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   21978:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2197c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   2197e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21982:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   21986:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2198a:	6060      	str	r0, [r4, #4]
   2198c:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21990:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21994:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   21998:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2199a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2199e:	d505      	bpl.n	219ac <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   219a0:	b123      	cbz	r3, 219ac <nrfx_clock_stop+0x6c>
   219a2:	2001      	movs	r0, #1
   219a4:	f009 fb75 	bl	2b092 <nrfx_busy_wait>
   219a8:	3d01      	subs	r5, #1
   219aa:	d1f1      	bne.n	21990 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   219ac:	4b01      	ldr	r3, [pc, #4]	; (219b4 <nrfx_clock_stop+0x74>)
   219ae:	2200      	movs	r2, #0
   219b0:	715a      	strb	r2, [r3, #5]
   219b2:	e7c9      	b.n	21948 <nrfx_clock_stop+0x8>
   219b4:	20004550 	.word	0x20004550

000219b8 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   219b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   219bc:	b510      	push	{r4, lr}
   219be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   219c2:	b16a      	cbz	r2, 219e0 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   219c4:	2200      	movs	r2, #0
   219c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   219ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   219ce:	2201      	movs	r2, #1
   219d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   219d4:	4b11      	ldr	r3, [pc, #68]	; (21a1c <nrfx_clock_irq_handler+0x64>)
   219d6:	7958      	ldrb	r0, [r3, #5]
   219d8:	b910      	cbnz	r0, 219e0 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   219da:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   219dc:	681b      	ldr	r3, [r3, #0]
   219de:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   219e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   219e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   219e8:	b172      	cbz	r2, 21a08 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   219ea:	2200      	movs	r2, #0
   219ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   219f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   219f4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   219f8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   219fc:	0792      	lsls	r2, r2, #30
   219fe:	d104      	bne.n	21a0a <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21a00:	2201      	movs	r2, #1
   21a02:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21a06:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   21a08:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   21a0a:	2202      	movs	r2, #2
   21a0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21a10:	4b02      	ldr	r3, [pc, #8]	; (21a1c <nrfx_clock_irq_handler+0x64>)
}
   21a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21a16:	681b      	ldr	r3, [r3, #0]
   21a18:	2001      	movs	r0, #1
   21a1a:	4718      	bx	r3
   21a1c:	20004550 	.word	0x20004550

00021a20 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   21a20:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   21a22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21a26:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   21a28:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   21a2a:	6002      	str	r2, [r0, #0]
}
   21a2c:	4802      	ldr	r0, [pc, #8]	; (21a38 <nrf_gpio_pin_port_decode+0x18>)
   21a2e:	bf18      	it	ne
   21a30:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   21a34:	4770      	bx	lr
   21a36:	bf00      	nop
   21a38:	50000300 	.word	0x50000300

00021a3c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21a3c:	4b03      	ldr	r3, [pc, #12]	; (21a4c <pin_in_use_by_te+0x10>)
   21a3e:	3008      	adds	r0, #8
   21a40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21a44:	f3c0 1040 	ubfx	r0, r0, #5, #1
   21a48:	4770      	bx	lr
   21a4a:	bf00      	nop
   21a4c:	200007f8 	.word	0x200007f8

00021a50 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   21a50:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21a52:	f100 0308 	add.w	r3, r0, #8
   21a56:	4c0c      	ldr	r4, [pc, #48]	; (21a88 <call_handler+0x38>)
   21a58:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   21a5c:	05da      	lsls	r2, r3, #23
{
   21a5e:	4605      	mov	r5, r0
   21a60:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21a62:	d507      	bpl.n	21a74 <call_handler+0x24>
   21a64:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   21a68:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   21a6c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   21a70:	6852      	ldr	r2, [r2, #4]
   21a72:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   21a74:	68a3      	ldr	r3, [r4, #8]
   21a76:	b12b      	cbz	r3, 21a84 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   21a78:	68e2      	ldr	r2, [r4, #12]
   21a7a:	4631      	mov	r1, r6
   21a7c:	4628      	mov	r0, r5
    }
}
   21a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   21a82:	4718      	bx	r3
}
   21a84:	bd70      	pop	{r4, r5, r6, pc}
   21a86:	bf00      	nop
   21a88:	200007f8 	.word	0x200007f8

00021a8c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21a8c:	4a12      	ldr	r2, [pc, #72]	; (21ad8 <release_handler+0x4c>)
   21a8e:	3008      	adds	r0, #8
{
   21a90:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21a92:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   21a96:	05d9      	lsls	r1, r3, #23
   21a98:	d51b      	bpl.n	21ad2 <release_handler+0x46>
   21a9a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   21a9e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21aa2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21aa6:	f102 0410 	add.w	r4, r2, #16
   21aaa:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   21aac:	f834 3b02 	ldrh.w	r3, [r4], #2
   21ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
   21ab4:	d003      	beq.n	21abe <release_handler+0x32>
   21ab6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   21aba:	4299      	cmp	r1, r3
   21abc:	d009      	beq.n	21ad2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21abe:	3001      	adds	r0, #1
   21ac0:	2830      	cmp	r0, #48	; 0x30
   21ac2:	d1f3      	bne.n	21aac <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   21ac4:	2300      	movs	r3, #0
   21ac6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21aca:	4804      	ldr	r0, [pc, #16]	; (21adc <release_handler+0x50>)
}
   21acc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21ace:	f7ff bef7 	b.w	218c0 <nrfx_flag32_free>
}
   21ad2:	bc10      	pop	{r4}
   21ad4:	4770      	bx	lr
   21ad6:	bf00      	nop
   21ad8:	200007f8 	.word	0x200007f8
   21adc:	2000086c 	.word	0x2000086c

00021ae0 <pin_handler_trigger_uninit>:
{
   21ae0:	b538      	push	{r3, r4, r5, lr}
   21ae2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21ae4:	f7ff ffaa 	bl	21a3c <pin_in_use_by_te>
   21ae8:	4c09      	ldr	r4, [pc, #36]	; (21b10 <pin_handler_trigger_uninit+0x30>)
   21aea:	f102 0508 	add.w	r5, r2, #8
   21aee:	b140      	cbz	r0, 21b02 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21af0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21af4:	4907      	ldr	r1, [pc, #28]	; (21b14 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   21af6:	0b5b      	lsrs	r3, r3, #13
   21af8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   21afc:	2000      	movs	r0, #0
   21afe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   21b02:	4610      	mov	r0, r2
   21b04:	f7ff ffc2 	bl	21a8c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   21b08:	2300      	movs	r3, #0
   21b0a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   21b0e:	bd38      	pop	{r3, r4, r5, pc}
   21b10:	200007f8 	.word	0x200007f8
   21b14:	40006000 	.word	0x40006000

00021b18 <nrfx_gpiote_input_configure>:
{
   21b18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21b1c:	4604      	mov	r4, r0
   21b1e:	4617      	mov	r7, r2
   21b20:	461d      	mov	r5, r3
    if (p_input_config)
   21b22:	b321      	cbz	r1, 21b6e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21b24:	4e4e      	ldr	r6, [pc, #312]	; (21c60 <nrfx_gpiote_input_configure+0x148>)
   21b26:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   21b2a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   21b2e:	079b      	lsls	r3, r3, #30
   21b30:	d506      	bpl.n	21b40 <nrfx_gpiote_input_configure+0x28>
   21b32:	f7ff ff83 	bl	21a3c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   21b36:	b118      	cbz	r0, 21b40 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   21b38:	484a      	ldr	r0, [pc, #296]	; (21c64 <nrfx_gpiote_input_configure+0x14c>)
}
   21b3a:	b004      	add	sp, #16
   21b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21b40:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   21b42:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21b46:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   21b4a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   21b4e:	f10d 020f 	add.w	r2, sp, #15
   21b52:	460b      	mov	r3, r1
   21b54:	4620      	mov	r0, r4
   21b56:	f10d 010e 	add.w	r1, sp, #14
   21b5a:	f009 fac8 	bl	2b0ee <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   21b5e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   21b62:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21b66:	f043 0301 	orr.w	r3, r3, #1
   21b6a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   21b6e:	b197      	cbz	r7, 21b96 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21b70:	4b3b      	ldr	r3, [pc, #236]	; (21c60 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21b72:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21b74:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21b76:	f104 0008 	add.w	r0, r4, #8
   21b7a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   21b7e:	078f      	lsls	r7, r1, #30
   21b80:	d50c      	bpl.n	21b9c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   21b82:	2a00      	cmp	r2, #0
   21b84:	d1d8      	bne.n	21b38 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   21b86:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   21b8a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   21b8e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   21b92:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   21b96:	bbcd      	cbnz	r5, 21c0c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   21b98:	4833      	ldr	r0, [pc, #204]	; (21c68 <nrfx_gpiote_input_configure+0x150>)
   21b9a:	e7ce      	b.n	21b3a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   21b9c:	f021 0120 	bic.w	r1, r1, #32
   21ba0:	04c9      	lsls	r1, r1, #19
   21ba2:	0cc9      	lsrs	r1, r1, #19
   21ba4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   21ba8:	2a00      	cmp	r2, #0
   21baa:	d0ec      	beq.n	21b86 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   21bac:	2e03      	cmp	r6, #3
   21bae:	d8c3      	bhi.n	21b38 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21bb0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   21bb2:	b92e      	cbnz	r6, 21bc0 <nrfx_gpiote_input_configure+0xa8>
   21bb4:	4a2d      	ldr	r2, [pc, #180]	; (21c6c <nrfx_gpiote_input_configure+0x154>)
   21bb6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   21bba:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   21bbe:	e7e2      	b.n	21b86 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21bc0:	00ba      	lsls	r2, r7, #2
   21bc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21bc6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21bca:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   21bce:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   21bd2:	f02c 0c03 	bic.w	ip, ip, #3
   21bd6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   21bda:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   21bde:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   21be2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   21be6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21bea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   21bee:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   21bf2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   21bf6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   21bfa:	ea4c 0c0e 	orr.w	ip, ip, lr
   21bfe:	f041 0120 	orr.w	r1, r1, #32
   21c02:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   21c06:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   21c0a:	e7bc      	b.n	21b86 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   21c0c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   21c10:	4620      	mov	r0, r4
   21c12:	f7ff ff3b 	bl	21a8c <release_handler>
    if (!handler)
   21c16:	2e00      	cmp	r6, #0
   21c18:	d0be      	beq.n	21b98 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   21c1a:	4d11      	ldr	r5, [pc, #68]	; (21c60 <nrfx_gpiote_input_configure+0x148>)
   21c1c:	682b      	ldr	r3, [r5, #0]
   21c1e:	429e      	cmp	r6, r3
   21c20:	d104      	bne.n	21c2c <nrfx_gpiote_input_configure+0x114>
   21c22:	686b      	ldr	r3, [r5, #4]
   21c24:	429f      	cmp	r7, r3
   21c26:	d101      	bne.n	21c2c <nrfx_gpiote_input_configure+0x114>
   21c28:	2200      	movs	r2, #0
   21c2a:	e00a      	b.n	21c42 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   21c2c:	4810      	ldr	r0, [pc, #64]	; (21c70 <nrfx_gpiote_input_configure+0x158>)
   21c2e:	f10d 010f 	add.w	r1, sp, #15
   21c32:	f7ff fe1f 	bl	21874 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21c36:	4b0c      	ldr	r3, [pc, #48]	; (21c68 <nrfx_gpiote_input_configure+0x150>)
   21c38:	4298      	cmp	r0, r3
   21c3a:	f47f af7e 	bne.w	21b3a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   21c3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   21c42:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   21c46:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21c4a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   21c4c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21c4e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   21c52:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   21c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21c5a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   21c5e:	e79b      	b.n	21b98 <nrfx_gpiote_input_configure+0x80>
   21c60:	200007f8 	.word	0x200007f8
   21c64:	0bad0004 	.word	0x0bad0004
   21c68:	0bad0000 	.word	0x0bad0000
   21c6c:	40006000 	.word	0x40006000
   21c70:	2000086c 	.word	0x2000086c

00021c74 <nrfx_gpiote_output_configure>:
{
   21c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c76:	4604      	mov	r4, r0
   21c78:	b085      	sub	sp, #20
   21c7a:	4615      	mov	r5, r2
    if (p_config)
   21c7c:	b319      	cbz	r1, 21cc6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21c7e:	4e33      	ldr	r6, [pc, #204]	; (21d4c <nrfx_gpiote_output_configure+0xd8>)
   21c80:	f100 0708 	add.w	r7, r0, #8
   21c84:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21c88:	0793      	lsls	r3, r2, #30
   21c8a:	d403      	bmi.n	21c94 <nrfx_gpiote_output_configure+0x20>
   21c8c:	f7ff fed6 	bl	21a3c <pin_in_use_by_te>
   21c90:	2800      	cmp	r0, #0
   21c92:	d158      	bne.n	21d46 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21c94:	f012 0f1c 	tst.w	r2, #28
   21c98:	d002      	beq.n	21ca0 <nrfx_gpiote_output_configure+0x2c>
   21c9a:	784b      	ldrb	r3, [r1, #1]
   21c9c:	2b01      	cmp	r3, #1
   21c9e:	d052      	beq.n	21d46 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21ca0:	2301      	movs	r3, #1
   21ca2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   21ca6:	2300      	movs	r3, #0
   21ca8:	e9cd 1300 	strd	r1, r3, [sp]
   21cac:	1c4a      	adds	r2, r1, #1
   21cae:	1c8b      	adds	r3, r1, #2
   21cb0:	4620      	mov	r0, r4
   21cb2:	f10d 010f 	add.w	r1, sp, #15
   21cb6:	f009 fa1a 	bl	2b0ee <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   21cba:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   21cbe:	f043 0303 	orr.w	r3, r3, #3
   21cc2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   21cc6:	b915      	cbnz	r5, 21cce <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   21cc8:	4821      	ldr	r0, [pc, #132]	; (21d50 <nrfx_gpiote_output_configure+0xdc>)
}
   21cca:	b005      	add	sp, #20
   21ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21cce:	4e1f      	ldr	r6, [pc, #124]	; (21d4c <nrfx_gpiote_output_configure+0xd8>)
   21cd0:	f104 0708 	add.w	r7, r4, #8
   21cd4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   21cd8:	0783      	lsls	r3, r0, #30
   21cda:	d534      	bpl.n	21d46 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   21cdc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   21ce0:	4661      	mov	r1, ip
   21ce2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   21ce4:	f020 0020 	bic.w	r0, r0, #32
   21ce8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   21cec:	04c0      	lsls	r0, r0, #19
   21cee:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   21cf2:	0cc0      	lsrs	r0, r0, #19
   21cf4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   21cf8:	2300      	movs	r3, #0
   21cfa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   21cfe:	786a      	ldrb	r2, [r5, #1]
   21d00:	2a00      	cmp	r2, #0
   21d02:	d0e1      	beq.n	21cc8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   21d04:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   21d08:	78ad      	ldrb	r5, [r5, #2]
   21d0a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   21d0e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21d12:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21d16:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   21d1a:	0223      	lsls	r3, r4, #8
   21d1c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21d20:	0412      	lsls	r2, r2, #16
   21d22:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21d26:	ea43 030e 	orr.w	r3, r3, lr
   21d2a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   21d2c:	052a      	lsls	r2, r5, #20
   21d2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21d32:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21d36:	4313      	orrs	r3, r2
   21d38:	f040 0020 	orr.w	r0, r0, #32
   21d3c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   21d40:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21d44:	e7c0      	b.n	21cc8 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   21d46:	4803      	ldr	r0, [pc, #12]	; (21d54 <nrfx_gpiote_output_configure+0xe0>)
   21d48:	e7bf      	b.n	21cca <nrfx_gpiote_output_configure+0x56>
   21d4a:	bf00      	nop
   21d4c:	200007f8 	.word	0x200007f8
   21d50:	0bad0000 	.word	0x0bad0000
   21d54:	0bad0004 	.word	0x0bad0004

00021d58 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   21d58:	4b01      	ldr	r3, [pc, #4]	; (21d60 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   21d5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   21d5e:	4770      	bx	lr
   21d60:	200007f8 	.word	0x200007f8

00021d64 <nrfx_gpiote_channel_get>:
{
   21d64:	b508      	push	{r3, lr}
   21d66:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21d68:	f7ff fe68 	bl	21a3c <pin_in_use_by_te>
   21d6c:	b138      	cbz	r0, 21d7e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21d6e:	4b05      	ldr	r3, [pc, #20]	; (21d84 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   21d70:	4805      	ldr	r0, [pc, #20]	; (21d88 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21d72:	3208      	adds	r2, #8
   21d74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   21d78:	0b5b      	lsrs	r3, r3, #13
   21d7a:	700b      	strb	r3, [r1, #0]
}
   21d7c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21d7e:	4803      	ldr	r0, [pc, #12]	; (21d8c <nrfx_gpiote_channel_get+0x28>)
   21d80:	e7fc      	b.n	21d7c <nrfx_gpiote_channel_get+0x18>
   21d82:	bf00      	nop
   21d84:	200007f8 	.word	0x200007f8
   21d88:	0bad0000 	.word	0x0bad0000
   21d8c:	0bad0004 	.word	0x0bad0004

00021d90 <nrfx_gpiote_init>:
{
   21d90:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21d92:	4c0f      	ldr	r4, [pc, #60]	; (21dd0 <nrfx_gpiote_init+0x40>)
   21d94:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   21d98:	b9bd      	cbnz	r5, 21dca <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   21d9a:	2260      	movs	r2, #96	; 0x60
   21d9c:	4629      	mov	r1, r5
   21d9e:	f104 0010 	add.w	r0, r4, #16
   21da2:	f006 fc13 	bl	285cc <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   21da6:	2006      	movs	r0, #6
   21da8:	f7e8 fba8 	bl	a4fc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21dac:	4b09      	ldr	r3, [pc, #36]	; (21dd4 <nrfx_gpiote_init+0x44>)
    return err_code;
   21dae:	480a      	ldr	r0, [pc, #40]	; (21dd8 <nrfx_gpiote_init+0x48>)
   21db0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   21db4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   21db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21dbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21dc0:	2301      	movs	r3, #1
   21dc2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   21dc6:	6763      	str	r3, [r4, #116]	; 0x74
}
   21dc8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   21dca:	4804      	ldr	r0, [pc, #16]	; (21ddc <nrfx_gpiote_init+0x4c>)
   21dcc:	e7fc      	b.n	21dc8 <nrfx_gpiote_init+0x38>
   21dce:	bf00      	nop
   21dd0:	200007f8 	.word	0x200007f8
   21dd4:	40006000 	.word	0x40006000
   21dd8:	0bad0000 	.word	0x0bad0000
   21ddc:	0bad0005 	.word	0x0bad0005

00021de0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   21de0:	4b03      	ldr	r3, [pc, #12]	; (21df0 <nrfx_gpiote_is_init+0x10>)
   21de2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   21de6:	3800      	subs	r0, #0
   21de8:	bf18      	it	ne
   21dea:	2001      	movne	r0, #1
   21dec:	4770      	bx	lr
   21dee:	bf00      	nop
   21df0:	200007f8 	.word	0x200007f8

00021df4 <nrfx_gpiote_channel_free>:
{
   21df4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   21df6:	4801      	ldr	r0, [pc, #4]	; (21dfc <nrfx_gpiote_channel_free+0x8>)
   21df8:	f7ff bd62 	b.w	218c0 <nrfx_flag32_free>
   21dfc:	20000868 	.word	0x20000868

00021e00 <nrfx_gpiote_channel_alloc>:
{
   21e00:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   21e02:	4801      	ldr	r0, [pc, #4]	; (21e08 <nrfx_gpiote_channel_alloc+0x8>)
   21e04:	f7ff bd36 	b.w	21874 <nrfx_flag32_alloc>
   21e08:	20000868 	.word	0x20000868

00021e0c <nrfx_gpiote_trigger_enable>:
{
   21e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21e0e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21e10:	f7ff fe14 	bl	21a3c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21e14:	f104 0208 	add.w	r2, r4, #8
   21e18:	4b1e      	ldr	r3, [pc, #120]	; (21e94 <nrfx_gpiote_trigger_enable+0x88>)
   21e1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21e1e:	b1e8      	cbz	r0, 21e5c <nrfx_gpiote_trigger_enable+0x50>
   21e20:	f013 0502 	ands.w	r5, r3, #2
   21e24:	d11a      	bne.n	21e5c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21e26:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   21e28:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   21e2a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   21e2e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   21e32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21e36:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21e3a:	6005      	str	r5, [r0, #0]
   21e3c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21e3e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   21e42:	f040 0001 	orr.w	r0, r0, #1
   21e46:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   21e4a:	b129      	cbz	r1, 21e58 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21e4c:	2201      	movs	r2, #1
   21e4e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   21e52:	4a11      	ldr	r2, [pc, #68]	; (21e98 <nrfx_gpiote_trigger_enable+0x8c>)
   21e54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21e58:	b003      	add	sp, #12
   21e5a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21e5c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   21e60:	2b04      	cmp	r3, #4
   21e62:	d012      	beq.n	21e8a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   21e64:	2b05      	cmp	r3, #5
   21e66:	d012      	beq.n	21e8e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21e68:	a801      	add	r0, sp, #4
   21e6a:	9401      	str	r4, [sp, #4]
   21e6c:	f7ff fdd8 	bl	21a20 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21e70:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   21e72:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21e76:	40d9      	lsrs	r1, r3
   21e78:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21e7c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21e7e:	4620      	mov	r0, r4
}
   21e80:	b003      	add	sp, #12
   21e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21e86:	f009 b979 	b.w	2b17c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   21e8a:	2103      	movs	r1, #3
   21e8c:	e7f7      	b.n	21e7e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   21e8e:	2102      	movs	r1, #2
   21e90:	e7f5      	b.n	21e7e <nrfx_gpiote_trigger_enable+0x72>
   21e92:	bf00      	nop
   21e94:	200007f8 	.word	0x200007f8
   21e98:	40006000 	.word	0x40006000

00021e9c <nrfx_gpiote_trigger_disable>:
{
   21e9c:	b508      	push	{r3, lr}
   21e9e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21ea0:	f7ff fdcc 	bl	21a3c <pin_in_use_by_te>
   21ea4:	b1c0      	cbz	r0, 21ed8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21ea6:	f102 0108 	add.w	r1, r2, #8
   21eaa:	4b0e      	ldr	r3, [pc, #56]	; (21ee4 <nrfx_gpiote_trigger_disable+0x48>)
   21eac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21eb0:	0799      	lsls	r1, r3, #30
   21eb2:	d411      	bmi.n	21ed8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21eb4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21eb6:	2201      	movs	r2, #1
   21eb8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   21eba:	009b      	lsls	r3, r3, #2
   21ebc:	490a      	ldr	r1, [pc, #40]	; (21ee8 <nrfx_gpiote_trigger_disable+0x4c>)
   21ebe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21ec2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   21ec6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21eca:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21ece:	f022 0203 	bic.w	r2, r2, #3
   21ed2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   21ed6:	bd08      	pop	{r3, pc}
   21ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21edc:	2100      	movs	r1, #0
   21ede:	4610      	mov	r0, r2
   21ee0:	f009 b94c 	b.w	2b17c <nrf_gpio_cfg_sense_set>
   21ee4:	200007f8 	.word	0x200007f8
   21ee8:	40006000 	.word	0x40006000

00021eec <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21eec:	4b0e      	ldr	r3, [pc, #56]	; (21f28 <nrfx_gpiote_pin_uninit+0x3c>)
   21eee:	f100 0208 	add.w	r2, r0, #8
{
   21ef2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21ef4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   21ef8:	07db      	lsls	r3, r3, #31
{
   21efa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21efc:	d511      	bpl.n	21f22 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   21efe:	f7ff ffcd 	bl	21e9c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21f02:	4620      	mov	r0, r4
   21f04:	f7ff fdec 	bl	21ae0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21f08:	a801      	add	r0, sp, #4
   21f0a:	9401      	str	r4, [sp, #4]
   21f0c:	f7ff fd88 	bl	21a20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21f10:	9b01      	ldr	r3, [sp, #4]
   21f12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21f16:	2202      	movs	r2, #2
   21f18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21f1c:	4803      	ldr	r0, [pc, #12]	; (21f2c <nrfx_gpiote_pin_uninit+0x40>)
}
   21f1e:	b002      	add	sp, #8
   21f20:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21f22:	4803      	ldr	r0, [pc, #12]	; (21f30 <nrfx_gpiote_pin_uninit+0x44>)
   21f24:	e7fb      	b.n	21f1e <nrfx_gpiote_pin_uninit+0x32>
   21f26:	bf00      	nop
   21f28:	200007f8 	.word	0x200007f8
   21f2c:	0bad0000 	.word	0x0bad0000
   21f30:	0bad0004 	.word	0x0bad0004

00021f34 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f38:	4b64      	ldr	r3, [pc, #400]	; (220cc <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   21f3a:	4865      	ldr	r0, [pc, #404]	; (220d0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21f3c:	4965      	ldr	r1, [pc, #404]	; (220d4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   21f3e:	2600      	movs	r6, #0
{
   21f40:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21f42:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21f44:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21f46:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   21f48:	b135      	cbz	r5, 21f58 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   21f4a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   21f4e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21f50:	bf1e      	ittt	ne
   21f52:	601c      	strne	r4, [r3, #0]
   21f54:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   21f56:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21f58:	3304      	adds	r3, #4
   21f5a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   21f5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21f60:	d1f1      	bne.n	21f46 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21f62:	f8df 816c 	ldr.w	r8, [pc, #364]	; 220d0 <nrfx_gpiote_irq_handler+0x19c>
   21f66:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   21f6a:	2b00      	cmp	r3, #0
   21f6c:	f000 8091 	beq.w	22092 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   21f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21f74:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   21f78:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   21f7a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   21f7e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   21f82:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   21f84:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   21f88:	2700      	movs	r7, #0
            while (latch[i])
   21f8a:	f10d 0910 	add.w	r9, sp, #16
   21f8e:	017b      	lsls	r3, r7, #5
   21f90:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   21f92:	f04f 0a01 	mov.w	sl, #1
   21f96:	e049      	b.n	2202c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   21f98:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21f9a:	4a4f      	ldr	r2, [pc, #316]	; (220d8 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   21f9c:	fa94 f4a4 	rbit	r4, r4
   21fa0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   21fa4:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21fa6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21faa:	08e0      	lsrs	r0, r4, #3
   21fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   21fb0:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   21fb2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   21fb6:	fa0a fc02 	lsl.w	ip, sl, r2
   21fba:	f819 2000 	ldrb.w	r2, [r9, r0]
   21fbe:	ea22 020c 	bic.w	r2, r2, ip
   21fc2:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21fc6:	a803      	add	r0, sp, #12
   21fc8:	f3c3 0582 	ubfx	r5, r3, #2, #3
   21fcc:	0899      	lsrs	r1, r3, #2
   21fce:	f7ff fd27 	bl	21a20 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21fd2:	9a03      	ldr	r2, [sp, #12]
   21fd4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   21fd8:	074b      	lsls	r3, r1, #29
   21fda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21fde:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   21fe0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   21fe4:	d529      	bpl.n	2203a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   21fe6:	4620      	mov	r0, r4
   21fe8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21fea:	b2d5      	uxtb	r5, r2
   21fec:	f7ff fd30 	bl	21a50 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21ff0:	a803      	add	r0, sp, #12
   21ff2:	9403      	str	r4, [sp, #12]
   21ff4:	f7ff fd14 	bl	21a20 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21ff8:	9b03      	ldr	r3, [sp, #12]
   21ffa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21ffe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   22002:	f3c3 4301 	ubfx	r3, r3, #16, #2
   22006:	429d      	cmp	r5, r3
   22008:	d107      	bne.n	2201a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2200a:	2100      	movs	r1, #0
   2200c:	4620      	mov	r0, r4
   2200e:	f009 f8b5 	bl	2b17c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   22012:	4629      	mov	r1, r5
   22014:	4620      	mov	r0, r4
   22016:	f009 f8b1 	bl	2b17c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2201a:	a803      	add	r0, sp, #12
   2201c:	9403      	str	r4, [sp, #12]
   2201e:	f7ff fcff 	bl	21a20 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   22022:	9b03      	ldr	r3, [sp, #12]
   22024:	fa0a f303 	lsl.w	r3, sl, r3
   22028:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   2202c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   22030:	2c00      	cmp	r4, #0
   22032:	d1b1      	bne.n	21f98 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22034:	b9cf      	cbnz	r7, 2206a <nrfx_gpiote_irq_handler+0x136>
   22036:	2701      	movs	r7, #1
   22038:	e7a9      	b.n	21f8e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2203a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2203c:	bf0c      	ite	eq
   2203e:	2103      	moveq	r1, #3
   22040:	2102      	movne	r1, #2
   22042:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22044:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22046:	f009 f899 	bl	2b17c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2204a:	2d03      	cmp	r5, #3
   2204c:	d004      	beq.n	22058 <nrfx_gpiote_irq_handler+0x124>
   2204e:	9a01      	ldr	r2, [sp, #4]
   22050:	2a02      	cmp	r2, #2
   22052:	d106      	bne.n	22062 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22054:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22056:	d1e0      	bne.n	2201a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   22058:	4659      	mov	r1, fp
   2205a:	4620      	mov	r0, r4
   2205c:	f7ff fcf8 	bl	21a50 <call_handler>
   22060:	e7db      	b.n	2201a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22062:	2a03      	cmp	r2, #3
   22064:	d1d9      	bne.n	2201a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22066:	2d02      	cmp	r5, #2
   22068:	e7f5      	b.n	22056 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2206a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   2206e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   22072:	491a      	ldr	r1, [pc, #104]	; (220dc <nrfx_gpiote_irq_handler+0x1a8>)
   22074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22078:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2207c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2207e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   22082:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   22086:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   22088:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   2208c:	4313      	orrs	r3, r2
   2208e:	f47f af7b 	bne.w	21f88 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   22092:	2401      	movs	r4, #1
    while (mask)
   22094:	b916      	cbnz	r6, 2209c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   22096:	b007      	add	sp, #28
   22098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   2209c:	fa96 f3a6 	rbit	r3, r6
   220a0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   220a4:	fa04 f203 	lsl.w	r2, r4, r3
   220a8:	009b      	lsls	r3, r3, #2
   220aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   220ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   220b2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   220b6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   220ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   220be:	f3c0 2005 	ubfx	r0, r0, #8, #6
   220c2:	f3c1 4101 	ubfx	r1, r1, #16, #2
   220c6:	f7ff fcc3 	bl	21a50 <call_handler>
   220ca:	e7e3      	b.n	22094 <nrfx_gpiote_irq_handler+0x160>
   220cc:	40006100 	.word	0x40006100
   220d0:	40006000 	.word	0x40006000
   220d4:	40006120 	.word	0x40006120
   220d8:	200007f8 	.word	0x200007f8
   220dc:	50000300 	.word	0x50000300

000220e0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   220e0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   220e2:	4c18      	ldr	r4, [pc, #96]	; (22144 <nrfx_power_init+0x64>)
   220e4:	7823      	ldrb	r3, [r4, #0]
   220e6:	bb53      	cbnz	r3, 2213e <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   220e8:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   220ea:	0791      	lsls	r1, r2, #30
   220ec:	f3c2 0340 	ubfx	r3, r2, #1, #1
   220f0:	d511      	bpl.n	22116 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   220f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   220f6:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   220fa:	2908      	cmp	r1, #8
   220fc:	d11d      	bne.n	2213a <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   220fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   22102:	2b05      	cmp	r3, #5
   22104:	d819      	bhi.n	2213a <nrfx_power_init+0x5a>
   22106:	4910      	ldr	r1, [pc, #64]	; (22148 <nrfx_power_init+0x68>)
   22108:	5cc9      	ldrb	r1, [r1, r3]
   2210a:	2301      	movs	r3, #1
   2210c:	b119      	cbz	r1, 22116 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   2210e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   22112:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   22116:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2211a:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   2211e:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   22122:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   22124:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   22128:	f7e8 fa0c 	bl	a544 <arch_irq_is_enabled>
   2212c:	b908      	cbnz	r0, 22132 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2212e:	f7e8 f9e5 	bl	a4fc <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   22132:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   22134:	4805      	ldr	r0, [pc, #20]	; (2214c <nrfx_power_init+0x6c>)
    m_initialized = true;
   22136:	7023      	strb	r3, [r4, #0]
}
   22138:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   2213a:	2301      	movs	r3, #1
   2213c:	e7eb      	b.n	22116 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2213e:	4804      	ldr	r0, [pc, #16]	; (22150 <nrfx_power_init+0x70>)
   22140:	e7fa      	b.n	22138 <nrfx_power_init+0x58>
   22142:	bf00      	nop
   22144:	200049c9 	.word	0x200049c9
   22148:	00031cd9 	.word	0x00031cd9
   2214c:	0bad0000 	.word	0x0bad0000
   22150:	0bad000c 	.word	0x0bad000c

00022154 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   22154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22158:	f44f 7260 	mov.w	r2, #896	; 0x380
   2215c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   22160:	4b01      	ldr	r3, [pc, #4]	; (22168 <nrfx_power_usbevt_uninit+0x14>)
   22162:	2200      	movs	r2, #0
   22164:	601a      	str	r2, [r3, #0]
}
   22166:	4770      	bx	lr
   22168:	20004560 	.word	0x20004560

0002216c <nrfx_power_usbevt_init>:
{
   2216c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   2216e:	f7ff fff1 	bl	22154 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   22172:	6803      	ldr	r3, [r0, #0]
   22174:	b10b      	cbz	r3, 2217a <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   22176:	4a01      	ldr	r2, [pc, #4]	; (2217c <nrfx_power_usbevt_init+0x10>)
   22178:	6013      	str	r3, [r2, #0]
}
   2217a:	bd08      	pop	{r3, pc}
   2217c:	20004560 	.word	0x20004560

00022180 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   22180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   22184:	b510      	push	{r4, lr}
   22186:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   2218a:	0762      	lsls	r2, r4, #29
   2218c:	d507      	bpl.n	2219e <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   2218e:	f44f 7084 	mov.w	r0, #264	; 0x108
   22192:	f009 f802 	bl	2b19a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   22196:	b110      	cbz	r0, 2219e <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   22198:	4b1e      	ldr	r3, [pc, #120]	; (22214 <nrfx_power_irq_handler+0x94>)
   2219a:	681b      	ldr	r3, [r3, #0]
   2219c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   2219e:	06a3      	lsls	r3, r4, #26
   221a0:	d508      	bpl.n	221b4 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   221a2:	f44f 708a 	mov.w	r0, #276	; 0x114
   221a6:	f008 fff8 	bl	2b19a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   221aa:	b118      	cbz	r0, 221b4 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   221ac:	4b1a      	ldr	r3, [pc, #104]	; (22218 <nrfx_power_irq_handler+0x98>)
   221ae:	2000      	movs	r0, #0
   221b0:	681b      	ldr	r3, [r3, #0]
   221b2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   221b4:	0660      	lsls	r0, r4, #25
   221b6:	d508      	bpl.n	221ca <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   221b8:	f44f 708c 	mov.w	r0, #280	; 0x118
   221bc:	f008 ffed 	bl	2b19a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   221c0:	b118      	cbz	r0, 221ca <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   221c2:	4b15      	ldr	r3, [pc, #84]	; (22218 <nrfx_power_irq_handler+0x98>)
   221c4:	2001      	movs	r0, #1
   221c6:	681b      	ldr	r3, [r3, #0]
   221c8:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   221ca:	0621      	lsls	r1, r4, #24
   221cc:	d508      	bpl.n	221e0 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   221ce:	f44f 708e 	mov.w	r0, #284	; 0x11c
   221d2:	f008 ffe2 	bl	2b19a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   221d6:	b118      	cbz	r0, 221e0 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   221d8:	4b10      	ldr	r3, [pc, #64]	; (2221c <nrfx_power_irq_handler+0x9c>)
   221da:	2000      	movs	r0, #0
   221dc:	681b      	ldr	r3, [r3, #0]
   221de:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   221e0:	05e2      	lsls	r2, r4, #23
   221e2:	d508      	bpl.n	221f6 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   221e4:	f44f 7090 	mov.w	r0, #288	; 0x120
   221e8:	f008 ffd7 	bl	2b19a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   221ec:	b118      	cbz	r0, 221f6 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   221ee:	4b0b      	ldr	r3, [pc, #44]	; (2221c <nrfx_power_irq_handler+0x9c>)
   221f0:	2001      	movs	r0, #1
   221f2:	681b      	ldr	r3, [r3, #0]
   221f4:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   221f6:	05a3      	lsls	r3, r4, #22
   221f8:	d50a      	bpl.n	22210 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   221fa:	f44f 7092 	mov.w	r0, #292	; 0x124
   221fe:	f008 ffcc 	bl	2b19a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   22202:	b128      	cbz	r0, 22210 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   22204:	4b05      	ldr	r3, [pc, #20]	; (2221c <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   22206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   2220a:	681b      	ldr	r3, [r3, #0]
   2220c:	2002      	movs	r0, #2
   2220e:	4718      	bx	r3
}
   22210:	bd10      	pop	{r4, pc}
   22212:	bf00      	nop
   22214:	20004558 	.word	0x20004558
   22218:	2000455c 	.word	0x2000455c
   2221c:	20004560 	.word	0x20004560

00022220 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   22220:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   22222:	4801      	ldr	r0, [pc, #4]	; (22228 <nrfx_ppi_channel_alloc+0x8>)
   22224:	f7ff bb26 	b.w	21874 <nrfx_flag32_alloc>
   22228:	20000874 	.word	0x20000874

0002222c <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2222c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22230:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   22234:	2a08      	cmp	r2, #8
   22236:	d106      	bne.n	22246 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22238:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2223c:	2b05      	cmp	r3, #5
   2223e:	d804      	bhi.n	2224a <nrf52_errata_187+0x1e>
   22240:	4a03      	ldr	r2, [pc, #12]	; (22250 <nrf52_errata_187+0x24>)
   22242:	5cd0      	ldrb	r0, [r2, r3]
   22244:	4770      	bx	lr
        return false;
   22246:	2000      	movs	r0, #0
   22248:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2224a:	2001      	movs	r0, #1
}
   2224c:	4770      	bx	lr
   2224e:	bf00      	nop
   22250:	00031cdf 	.word	0x00031cdf

00022254 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   22254:	4b05      	ldr	r3, [pc, #20]	; (2226c <ep_state_access+0x18>)
   22256:	f010 0f80 	tst.w	r0, #128	; 0x80
   2225a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   2225e:	bf08      	it	eq
   22260:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   22262:	f000 000f 	and.w	r0, r0, #15
}
   22266:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2226a:	4770      	bx	lr
   2226c:	200046d4 	.word	0x200046d4

00022270 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   22270:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   22272:	f008 ffb3 	bl	2b1dc <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   22276:	b118      	cbz	r0, 22280 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   22278:	4b03      	ldr	r3, [pc, #12]	; (22288 <usbd_dma_pending_clear+0x18>)
   2227a:	2200      	movs	r2, #0
   2227c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   22280:	4b02      	ldr	r3, [pc, #8]	; (2228c <usbd_dma_pending_clear+0x1c>)
   22282:	2200      	movs	r2, #0
   22284:	701a      	strb	r2, [r3, #0]
}
   22286:	bd08      	pop	{r3, pc}
   22288:	40027000 	.word	0x40027000
   2228c:	200049cb 	.word	0x200049cb

00022290 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   22290:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   22292:	4a09      	ldr	r2, [pc, #36]	; (222b8 <ev_usbreset_handler+0x28>)
   22294:	2300      	movs	r3, #0
   22296:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   22298:	4a08      	ldr	r2, [pc, #32]	; (222bc <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   2229a:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2229e:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   222a0:	f88d 3007 	strb.w	r3, [sp, #7]
   222a4:	2301      	movs	r3, #1
   222a6:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   222aa:	4b05      	ldr	r3, [pc, #20]	; (222c0 <ev_usbreset_handler+0x30>)
   222ac:	a801      	add	r0, sp, #4
   222ae:	681b      	ldr	r3, [r3, #0]
   222b0:	4798      	blx	r3
}
   222b2:	b003      	add	sp, #12
   222b4:	f85d fb04 	ldr.w	pc, [sp], #4
   222b8:	200049ca 	.word	0x200049ca
   222bc:	200049cd 	.word	0x200049cd
   222c0:	20004764 	.word	0x20004764

000222c4 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   222c4:	4b21      	ldr	r3, [pc, #132]	; (2234c <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   222c6:	b513      	push	{r0, r1, r4, lr}
   222c8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   222cc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   222d0:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   222d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   222d6:	d50e      	bpl.n	222f6 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   222d8:	4b1d      	ldr	r3, [pc, #116]	; (22350 <ev_usbevent_handler+0x8c>)
   222da:	2201      	movs	r2, #1
   222dc:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   222de:	2300      	movs	r3, #0
   222e0:	f8ad 3005 	strh.w	r3, [sp, #5]
   222e4:	f88d 3007 	strb.w	r3, [sp, #7]
   222e8:	2302      	movs	r3, #2
   222ea:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   222ee:	4b19      	ldr	r3, [pc, #100]	; (22354 <ev_usbevent_handler+0x90>)
   222f0:	a801      	add	r0, sp, #4
   222f2:	681b      	ldr	r3, [r3, #0]
   222f4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   222f6:	05a2      	lsls	r2, r4, #22
   222f8:	d50d      	bpl.n	22316 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   222fa:	4a15      	ldr	r2, [pc, #84]	; (22350 <ev_usbevent_handler+0x8c>)
   222fc:	2300      	movs	r3, #0
   222fe:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   22300:	f8ad 3005 	strh.w	r3, [sp, #5]
   22304:	f88d 3007 	strb.w	r3, [sp, #7]
   22308:	2303      	movs	r3, #3
   2230a:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   2230e:	4b11      	ldr	r3, [pc, #68]	; (22354 <ev_usbevent_handler+0x90>)
   22310:	a801      	add	r0, sp, #4
   22312:	681b      	ldr	r3, [r3, #0]
   22314:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   22316:	0563      	lsls	r3, r4, #21
   22318:	d515      	bpl.n	22346 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   2231a:	4a0d      	ldr	r2, [pc, #52]	; (22350 <ev_usbevent_handler+0x8c>)
   2231c:	7813      	ldrb	r3, [r2, #0]
   2231e:	b193      	cbz	r3, 22346 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   22320:	2300      	movs	r3, #0
   22322:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   22324:	4a09      	ldr	r2, [pc, #36]	; (2234c <ev_usbevent_handler+0x88>)
   22326:	2101      	movs	r1, #1
   22328:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2232c:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2232e:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   22330:	f8ad 3005 	strh.w	r3, [sp, #5]
   22334:	f88d 3007 	strb.w	r3, [sp, #7]
   22338:	2304      	movs	r3, #4
   2233a:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   2233e:	4b05      	ldr	r3, [pc, #20]	; (22354 <ev_usbevent_handler+0x90>)
   22340:	a801      	add	r0, sp, #4
   22342:	681b      	ldr	r3, [r3, #0]
   22344:	4798      	blx	r3
        }
    }
}
   22346:	b002      	add	sp, #8
   22348:	bd10      	pop	{r4, pc}
   2234a:	bf00      	nop
   2234c:	40027000 	.word	0x40027000
   22350:	200049ca 	.word	0x200049ca
   22354:	20004764 	.word	0x20004764

00022358 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   22358:	f04f 0320 	mov.w	r3, #32
   2235c:	f3ef 8011 	mrs	r0, BASEPRI
   22360:	f383 8812 	msr	BASEPRI_MAX, r3
   22364:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   22368:	4b0a      	ldr	r3, [pc, #40]	; (22394 <usbd_errata_187_211_begin+0x3c>)
   2236a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2236e:	2203      	movs	r2, #3
   22370:	b961      	cbnz	r1, 2238c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   22372:	f249 3175 	movw	r1, #37749	; 0x9375
   22376:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2237a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2237e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   22382:	f380 8811 	msr	BASEPRI, r0
   22386:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2238a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2238c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   22390:	e7f7      	b.n	22382 <usbd_errata_187_211_begin+0x2a>
   22392:	bf00      	nop
   22394:	4006e000 	.word	0x4006e000

00022398 <usbd_errata_187_211_end>:
	__asm__ volatile(
   22398:	f04f 0320 	mov.w	r3, #32
   2239c:	f3ef 8011 	mrs	r0, BASEPRI
   223a0:	f383 8812 	msr	BASEPRI_MAX, r3
   223a4:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   223a8:	4b0a      	ldr	r3, [pc, #40]	; (223d4 <usbd_errata_187_211_end+0x3c>)
   223aa:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   223ae:	b961      	cbnz	r1, 223ca <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   223b0:	f249 3275 	movw	r2, #37749	; 0x9375
   223b4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   223b8:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   223bc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   223c0:	f380 8811 	msr	BASEPRI, r0
   223c4:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   223c8:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   223ca:	2200      	movs	r2, #0
   223cc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   223d0:	e7f6      	b.n	223c0 <usbd_errata_187_211_end+0x28>
   223d2:	bf00      	nop
   223d4:	4006e000 	.word	0x4006e000

000223d8 <nrfx_usbd_feeder_flash>:
{
   223d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   223da:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   223dc:	4f0b      	ldr	r7, [pc, #44]	; (2240c <nrfx_usbd_feeder_flash+0x34>)
   223de:	4295      	cmp	r5, r2
   223e0:	bf28      	it	cs
   223e2:	4615      	movcs	r5, r2
{
   223e4:	460c      	mov	r4, r1
   223e6:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   223e8:	462a      	mov	r2, r5
   223ea:	6809      	ldr	r1, [r1, #0]
   223ec:	4638      	mov	r0, r7
   223ee:	f006 f8e2 	bl	285b6 <memcpy>
    p_transfer->size -= tx_size;
   223f2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   223f4:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   223f6:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   223f8:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   223fc:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   223fe:	6060      	str	r0, [r4, #4]
}
   22400:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   22402:	6022      	str	r2, [r4, #0]
}
   22404:	bf18      	it	ne
   22406:	2001      	movne	r0, #1
   22408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2240a:	bf00      	nop
   2240c:	20004768 	.word	0x20004768

00022410 <nrfx_usbd_feeder_flash_zlp>:
{
   22410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   22412:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   22414:	4294      	cmp	r4, r2
   22416:	bf28      	it	cs
   22418:	4614      	movcs	r4, r2
{
   2241a:	4606      	mov	r6, r0
   2241c:	460d      	mov	r5, r1
    if (tx_size != 0)
   2241e:	b18c      	cbz	r4, 22444 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   22420:	4f09      	ldr	r7, [pc, #36]	; (22448 <nrfx_usbd_feeder_flash_zlp+0x38>)
   22422:	6809      	ldr	r1, [r1, #0]
   22424:	4622      	mov	r2, r4
   22426:	4638      	mov	r0, r7
   22428:	f006 f8c5 	bl	285b6 <memcpy>
        p_next->p_data.tx = p_buffer;
   2242c:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   2242e:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   22430:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   22432:	1b1b      	subs	r3, r3, r4
   22434:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   22436:	682b      	ldr	r3, [r5, #0]
}
   22438:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   2243a:	4423      	add	r3, r4
   2243c:	602b      	str	r3, [r5, #0]
}
   2243e:	bf18      	it	ne
   22440:	2001      	movne	r0, #1
   22442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   22444:	6004      	str	r4, [r0, #0]
   22446:	e7f2      	b.n	2242e <nrfx_usbd_feeder_flash_zlp+0x1e>
   22448:	20004768 	.word	0x20004768

0002244c <ev_sof_handler>:
{
   2244c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   2244e:	2300      	movs	r3, #0
   22450:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   22454:	4b0b      	ldr	r3, [pc, #44]	; (22484 <ev_sof_handler+0x38>)
   22456:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   2245a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   2245e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   22462:	4a09      	ldr	r2, [pc, #36]	; (22488 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   22464:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   22466:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   22468:	bf0c      	ite	eq
   2246a:	f44f 7180 	moveq.w	r1, #256	; 0x100
   2246e:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   22472:	430b      	orrs	r3, r1
   22474:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   22476:	4b05      	ldr	r3, [pc, #20]	; (2248c <ev_sof_handler+0x40>)
   22478:	a801      	add	r0, sp, #4
   2247a:	681b      	ldr	r3, [r3, #0]
   2247c:	4798      	blx	r3
}
   2247e:	b003      	add	sp, #12
   22480:	f85d fb04 	ldr.w	pc, [sp], #4
   22484:	40027000 	.word	0x40027000
   22488:	20004640 	.word	0x20004640
   2248c:	20004764 	.word	0x20004764

00022490 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22490:	4b06      	ldr	r3, [pc, #24]	; (224ac <atomic_and.constprop.0.isra.0+0x1c>)
   22492:	f3bf 8f5b 	dmb	ish
   22496:	e853 2f00 	ldrex	r2, [r3]
   2249a:	4002      	ands	r2, r0
   2249c:	e843 2100 	strex	r1, r2, [r3]
   224a0:	2900      	cmp	r1, #0
   224a2:	d1f8      	bne.n	22496 <atomic_and.constprop.0.isra.0+0x6>
   224a4:	f3bf 8f5b 	dmb	ish
}
   224a8:	4770      	bx	lr
   224aa:	bf00      	nop
   224ac:	200045d0 	.word	0x200045d0

000224b0 <nrf_usbd_ep0in_dma_handler>:
{
   224b0:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   224b2:	f7ff fedd 	bl	22270 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   224b6:	4b08      	ldr	r3, [pc, #32]	; (224d8 <nrf_usbd_ep0in_dma_handler+0x28>)
   224b8:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   224bc:	2a03      	cmp	r2, #3
   224be:	d105      	bne.n	224cc <nrf_usbd_ep0in_dma_handler+0x1c>
}
   224c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   224c4:	f06f 0001 	mvn.w	r0, #1
   224c8:	f7ff bfe2 	b.w	22490 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   224cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   224d0:	2b00      	cmp	r3, #0
   224d2:	d0f5      	beq.n	224c0 <nrf_usbd_ep0in_dma_handler+0x10>
}
   224d4:	bd08      	pop	{r3, pc}
   224d6:	bf00      	nop
   224d8:	20004644 	.word	0x20004644

000224dc <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   224dc:	2201      	movs	r2, #1
{
   224de:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   224e0:	fa02 f501 	lsl.w	r5, r2, r1
   224e4:	491c      	ldr	r1, [pc, #112]	; (22558 <usbd_ep_data_handler+0x7c>)
   224e6:	4e1d      	ldr	r6, [pc, #116]	; (2255c <usbd_ep_data_handler+0x80>)
   224e8:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   224ea:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   224ee:	ea43 0305 	orr.w	r3, r3, r5
{
   224f2:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   224f4:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   224f6:	d024      	beq.n	22542 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   224f8:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   224fc:	4b18      	ldr	r3, [pc, #96]	; (22560 <usbd_ep_data_handler+0x84>)
   224fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   22502:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22506:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2250a:	681a      	ldr	r2, [r3, #0]
    if (ret)
   2250c:	b132      	cbz	r2, 2251c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2250e:	2200      	movs	r2, #0
   22510:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   22512:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   22514:	681b      	ldr	r3, [r3, #0]
   22516:	d011      	beq.n	2253c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   22518:	f008 feb0 	bl	2b27c <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2251c:	6831      	ldr	r1, [r6, #0]
   2251e:	4029      	ands	r1, r5
   22520:	d10a      	bne.n	22538 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   22522:	2306      	movs	r3, #6
   22524:	f88d 3004 	strb.w	r3, [sp, #4]
   22528:	f88d 4006 	strb.w	r4, [sp, #6]
   2252c:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   22530:	4b0c      	ldr	r3, [pc, #48]	; (22564 <usbd_ep_data_handler+0x88>)
   22532:	a801      	add	r0, sp, #4
   22534:	681b      	ldr	r3, [r3, #0]
   22536:	4798      	blx	r3
}
   22538:	b002      	add	sp, #8
   2253a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   2253c:	f7ff ffb8 	bl	224b0 <nrf_usbd_ep0in_dma_handler>
   22540:	e7ec      	b.n	2251c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   22542:	6833      	ldr	r3, [r6, #0]
   22544:	421d      	tst	r5, r3
   22546:	d1f7      	bne.n	22538 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   22548:	2306      	movs	r3, #6
   2254a:	f88d 3004 	strb.w	r3, [sp, #4]
   2254e:	f88d 0006 	strb.w	r0, [sp, #6]
   22552:	f88d 2007 	strb.w	r2, [sp, #7]
   22556:	e7eb      	b.n	22530 <usbd_ep_data_handler+0x54>
   22558:	20004640 	.word	0x20004640
   2255c:	200045d0 	.word	0x200045d0
   22560:	0002e404 	.word	0x0002e404
   22564:	20004764 	.word	0x20004764

00022568 <ev_setup_data_handler>:
{
   22568:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   2256a:	4b05      	ldr	r3, [pc, #20]	; (22580 <ev_setup_data_handler+0x18>)
   2256c:	781a      	ldrb	r2, [r3, #0]
   2256e:	4610      	mov	r0, r2
   22570:	f008 fe7a 	bl	2b268 <ep2bit>
}
   22574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   22578:	4601      	mov	r1, r0
   2257a:	4610      	mov	r0, r2
   2257c:	f7ff bfae 	b.w	224dc <usbd_ep_data_handler>
   22580:	200049cd 	.word	0x200049cd

00022584 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   22584:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   22586:	f7ff fe73 	bl	22270 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2258a:	4b0c      	ldr	r3, [pc, #48]	; (225bc <ev_dma_epout8_handler+0x38>)
   2258c:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   22590:	2a03      	cmp	r2, #3
   22592:	d010      	beq.n	225b6 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   22594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   22598:	b96b      	cbnz	r3, 225b6 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2259a:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   2259e:	f7ff ff77 	bl	22490 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   225a2:	2306      	movs	r3, #6
   225a4:	f88d 3004 	strb.w	r3, [sp, #4]
   225a8:	2308      	movs	r3, #8
   225aa:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   225ae:	4b04      	ldr	r3, [pc, #16]	; (225c0 <ev_dma_epout8_handler+0x3c>)
   225b0:	a801      	add	r0, sp, #4
   225b2:	681b      	ldr	r3, [r3, #0]
   225b4:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   225b6:	b003      	add	sp, #12
   225b8:	f85d fb04 	ldr.w	pc, [sp], #4
   225bc:	20004644 	.word	0x20004644
   225c0:	20004764 	.word	0x20004764

000225c4 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   225c4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   225c6:	f7ff fe53 	bl	22270 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   225ca:	4b10      	ldr	r3, [pc, #64]	; (2260c <ev_dma_epin8_handler+0x48>)
   225cc:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   225d0:	2a03      	cmp	r2, #3
   225d2:	d106      	bne.n	225e2 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   225d4:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   225d8:	b003      	add	sp, #12
   225da:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   225de:	f7ff bf57 	b.w	22490 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   225e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   225e6:	b96b      	cbnz	r3, 22604 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   225e8:	f46f 7080 	mvn.w	r0, #256	; 0x100
   225ec:	f7ff ff50 	bl	22490 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   225f0:	2306      	movs	r3, #6
   225f2:	f88d 3004 	strb.w	r3, [sp, #4]
   225f6:	2388      	movs	r3, #136	; 0x88
   225f8:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   225fc:	4b04      	ldr	r3, [pc, #16]	; (22610 <ev_dma_epin8_handler+0x4c>)
   225fe:	a801      	add	r0, sp, #4
   22600:	681b      	ldr	r3, [r3, #0]
   22602:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   22604:	b003      	add	sp, #12
   22606:	f85d fb04 	ldr.w	pc, [sp], #4
   2260a:	bf00      	nop
   2260c:	20004644 	.word	0x20004644
   22610:	20004764 	.word	0x20004764

00022614 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   22614:	4a02      	ldr	r2, [pc, #8]	; (22620 <nrfx_usbd_uninit+0xc>)
   22616:	2300      	movs	r3, #0
   22618:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   2261a:	4a02      	ldr	r2, [pc, #8]	; (22624 <nrfx_usbd_uninit+0x10>)
   2261c:	7013      	strb	r3, [r2, #0]
    return;
}
   2261e:	4770      	bx	lr
   22620:	20004764 	.word	0x20004764
   22624:	200049cc 	.word	0x200049cc

00022628 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   22628:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   2262a:	4b48      	ldr	r3, [pc, #288]	; (2274c <nrfx_usbd_enable+0x124>)
   2262c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22630:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   22634:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   22638:	f7ff fdf8 	bl	2222c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   2263c:	b108      	cbz	r0, 22642 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   2263e:	f7ff fe8b 	bl	22358 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   22642:	f008 fdcb 	bl	2b1dc <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   22646:	b1c8      	cbz	r0, 2267c <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   22648:	f04f 0320 	mov.w	r3, #32
   2264c:	f3ef 8011 	mrs	r0, BASEPRI
   22650:	f383 8812 	msr	BASEPRI_MAX, r3
   22654:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   22658:	4b3d      	ldr	r3, [pc, #244]	; (22750 <nrfx_usbd_enable+0x128>)
   2265a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2265e:	22c0      	movs	r2, #192	; 0xc0
   22660:	2900      	cmp	r1, #0
   22662:	d16a      	bne.n	2273a <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   22664:	f249 3175 	movw	r1, #37749	; 0x9375
   22668:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2266c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   22670:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   22674:	f380 8811 	msr	BASEPRI, r0
   22678:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   2267c:	4b33      	ldr	r3, [pc, #204]	; (2274c <nrfx_usbd_enable+0x124>)
   2267e:	2201      	movs	r2, #1
   22680:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   22684:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   22688:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   2268c:	0512      	lsls	r2, r2, #20
   2268e:	d5fb      	bpl.n	22688 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   22690:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22694:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   22698:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2269c:	f008 fd9e 	bl	2b1dc <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   226a0:	b1c0      	cbz	r0, 226d4 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   226a2:	f04f 0320 	mov.w	r3, #32
   226a6:	f3ef 8011 	mrs	r0, BASEPRI
   226aa:	f383 8812 	msr	BASEPRI_MAX, r3
   226ae:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   226b2:	4b27      	ldr	r3, [pc, #156]	; (22750 <nrfx_usbd_enable+0x128>)
   226b4:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   226b8:	2900      	cmp	r1, #0
   226ba:	d141      	bne.n	22740 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   226bc:	f249 3275 	movw	r2, #37749	; 0x9375
   226c0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   226c4:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   226c8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   226cc:	f380 8811 	msr	BASEPRI, r0
   226d0:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   226d4:	f7ff fdaa 	bl	2222c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   226d8:	b130      	cbz	r0, 226e8 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   226da:	f7ff fe5d 	bl	22398 <usbd_errata_187_211_end>
   226de:	f7ff fda5 	bl	2222c <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   226e2:	b108      	cbz	r0, 226e8 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   226e4:	f7ff fe38 	bl	22358 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   226e8:	f008 fd78 	bl	2b1dc <nrf52_errata_166>
   226ec:	4b17      	ldr	r3, [pc, #92]	; (2274c <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   226ee:	b150      	cbz	r0, 22706 <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   226f0:	f240 72e3 	movw	r2, #2019	; 0x7e3
   226f4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   226f8:	2240      	movs	r2, #64	; 0x40
   226fa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   226fe:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   22702:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   22706:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   22708:	2280      	movs	r2, #128	; 0x80
   2270a:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2270e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   22712:	4b10      	ldr	r3, [pc, #64]	; (22754 <nrfx_usbd_enable+0x12c>)
   22714:	f240 12ff 	movw	r2, #511	; 0x1ff
   22718:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   2271a:	4b0f      	ldr	r3, [pc, #60]	; (22758 <nrfx_usbd_enable+0x130>)
   2271c:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   2271e:	f7ff fda7 	bl	22270 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   22722:	4b0e      	ldr	r3, [pc, #56]	; (2275c <nrfx_usbd_enable+0x134>)
   22724:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   22726:	4b0e      	ldr	r3, [pc, #56]	; (22760 <nrfx_usbd_enable+0x138>)
   22728:	2202      	movs	r2, #2
   2272a:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   2272c:	f7ff fd7e 	bl	2222c <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   22730:	b150      	cbz	r0, 22748 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   22732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   22736:	f7ff be2f 	b.w	22398 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2273a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2273e:	e799      	b.n	22674 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   22740:	2200      	movs	r2, #0
   22742:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   22746:	e7c1      	b.n	226cc <nrfx_usbd_enable+0xa4>
}
   22748:	bd08      	pop	{r3, pc}
   2274a:	bf00      	nop
   2274c:	40027000 	.word	0x40027000
   22750:	4006e000 	.word	0x4006e000
   22754:	20004640 	.word	0x20004640
   22758:	200045d0 	.word	0x200045d0
   2275c:	200049cd 	.word	0x200049cd
   22760:	200049cc 	.word	0x200049cc

00022764 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   22764:	4b0a      	ldr	r3, [pc, #40]	; (22790 <nrfx_usbd_start+0x2c>)
   22766:	2200      	movs	r2, #0
{
   22768:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   2276a:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   2276c:	4a09      	ldr	r2, [pc, #36]	; (22794 <nrfx_usbd_start+0x30>)
   2276e:	4b0a      	ldr	r3, [pc, #40]	; (22798 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   22770:	4c0a      	ldr	r4, [pc, #40]	; (2279c <nrfx_usbd_start+0x38>)
   22772:	2800      	cmp	r0, #0
   22774:	bf18      	it	ne
   22776:	4613      	movne	r3, r2
   22778:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   2277c:	2027      	movs	r0, #39	; 0x27
   2277e:	f7e7 febd 	bl	a4fc <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   22782:	2301      	movs	r3, #1
   22784:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   22788:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   2278c:	bd10      	pop	{r4, pc}
   2278e:	bf00      	nop
   22790:	200049ca 	.word	0x200049ca
   22794:	01e01407 	.word	0x01e01407
   22798:	01c01407 	.word	0x01c01407
   2279c:	40027000 	.word	0x40027000

000227a0 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   227a0:	4b03      	ldr	r3, [pc, #12]	; (227b0 <nrfx_usbd_is_enabled+0x10>)
   227a2:	7818      	ldrb	r0, [r3, #0]
}
   227a4:	2801      	cmp	r0, #1
   227a6:	bf94      	ite	ls
   227a8:	2000      	movls	r0, #0
   227aa:	2001      	movhi	r0, #1
   227ac:	4770      	bx	lr
   227ae:	bf00      	nop
   227b0:	200049cc 	.word	0x200049cc

000227b4 <nrfx_usbd_init>:
{
   227b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   227b8:	4b1d      	ldr	r3, [pc, #116]	; (22830 <nrfx_usbd_init+0x7c>)
   227ba:	781c      	ldrb	r4, [r3, #0]
   227bc:	2c00      	cmp	r4, #0
   227be:	d135      	bne.n	2282c <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   227c0:	4a1c      	ldr	r2, [pc, #112]	; (22834 <nrfx_usbd_init+0x80>)
   227c2:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   227c4:	2201      	movs	r2, #1
   227c6:	701a      	strb	r2, [r3, #0]
   227c8:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   227ca:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   227ce:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   227d0:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   227d4:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   227d8:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   227da:	bf14      	ite	ne
   227dc:	4641      	movne	r1, r8
   227de:	2140      	moveq	r1, #64	; 0x40
   227e0:	4630      	mov	r0, r6
   227e2:	f008 fd7b 	bl	2b2dc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   227e6:	4630      	mov	r0, r6
   227e8:	f7ff fd34 	bl	22254 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   227ec:	3501      	adds	r5, #1
   227ee:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   227f0:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   227f2:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   227f4:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   227f6:	d1eb      	bne.n	227d0 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   227f8:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   227fa:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   227fc:	f240 16ff 	movw	r6, #511	; 0x1ff
   22800:	4620      	mov	r0, r4
   22802:	f008 fd6b 	bl	2b2dc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   22806:	4620      	mov	r0, r4
   22808:	f7ff fd24 	bl	22254 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   2280c:	3401      	adds	r4, #1
   2280e:	b2e4      	uxtb	r4, r4
   22810:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   22812:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   22814:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   22816:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   22818:	d102      	bne.n	22820 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   2281a:	4807      	ldr	r0, [pc, #28]	; (22838 <nrfx_usbd_init+0x84>)
}
   2281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   22820:	f014 0f08 	tst.w	r4, #8
   22824:	bf14      	ite	ne
   22826:	4631      	movne	r1, r6
   22828:	2140      	moveq	r1, #64	; 0x40
   2282a:	e7e9      	b.n	22800 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   2282c:	4803      	ldr	r0, [pc, #12]	; (2283c <nrfx_usbd_init+0x88>)
   2282e:	e7f5      	b.n	2281c <nrfx_usbd_init+0x68>
   22830:	200049cc 	.word	0x200049cc
   22834:	20004764 	.word	0x20004764
   22838:	0bad0000 	.word	0x0bad0000
   2283c:	0bad0005 	.word	0x0bad0005

00022840 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   22840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22844:	4605      	mov	r5, r0
	__asm__ volatile(
   22846:	f04f 0320 	mov.w	r3, #32
   2284a:	f3ef 8811 	mrs	r8, BASEPRI
   2284e:	f383 8812 	msr	BASEPRI_MAX, r3
   22852:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   22856:	f010 040f 	ands.w	r4, r0, #15
   2285a:	d103      	bne.n	22864 <nrfx_usbd_ep_transfer+0x24>
   2285c:	4b27      	ldr	r3, [pc, #156]	; (228fc <nrfx_usbd_ep_transfer+0xbc>)
   2285e:	781b      	ldrb	r3, [r3, #0]
   22860:	4283      	cmp	r3, r0
   22862:	d146      	bne.n	228f2 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   22864:	4b26      	ldr	r3, [pc, #152]	; (22900 <nrfx_usbd_ep_transfer+0xc0>)
   22866:	4f27      	ldr	r7, [pc, #156]	; (22904 <nrfx_usbd_ep_transfer+0xc4>)
   22868:	681a      	ldr	r2, [r3, #0]
   2286a:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   2286c:	4628      	mov	r0, r5
   2286e:	f008 fcfb 	bl	2b268 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   22872:	43d2      	mvns	r2, r2
   22874:	b292      	uxth	r2, r2
   22876:	f04f 0901 	mov.w	r9, #1
   2287a:	4332      	orrs	r2, r6
   2287c:	fa09 f900 	lsl.w	r9, r9, r0
   22880:	ea12 0f09 	tst.w	r2, r9
   22884:	d137      	bne.n	228f6 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   22886:	4628      	mov	r0, r5
   22888:	f7ff fce4 	bl	22254 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2288c:	220c      	movs	r2, #12
   2288e:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   22890:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   22892:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   22894:	d529      	bpl.n	228ea <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   22896:	4a1c      	ldr	r2, [pc, #112]	; (22908 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   22898:	6808      	ldr	r0, [r1, #0]
   2289a:	4414      	add	r4, r2
   2289c:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   228a0:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   228a2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   228a6:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   228aa:	d119      	bne.n	228e0 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   228ac:	b9b2      	cbnz	r2, 228dc <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   228ae:	4a17      	ldr	r2, [pc, #92]	; (2290c <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   228b0:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   228b2:	c907      	ldmia	r1, {r0, r1, r2}
   228b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   228b8:	2200      	movs	r2, #0
   228ba:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   228bc:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   228be:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   228c0:	4b13      	ldr	r3, [pc, #76]	; (22910 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   228c2:	4814      	ldr	r0, [pc, #80]	; (22914 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   228c4:	ea46 0609 	orr.w	r6, r6, r9
   228c8:	2280      	movs	r2, #128	; 0x80
   228ca:	603e      	str	r6, [r7, #0]
   228cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   228d0:	f388 8811 	msr	BASEPRI, r8
   228d4:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   228d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   228dc:	4a0e      	ldr	r2, [pc, #56]	; (22918 <nrfx_usbd_ep_transfer+0xd8>)
   228de:	e7e7      	b.n	228b0 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   228e0:	b90a      	cbnz	r2, 228e6 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   228e2:	4a0e      	ldr	r2, [pc, #56]	; (2291c <nrfx_usbd_ep_transfer+0xdc>)
   228e4:	e7e4      	b.n	228b0 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   228e6:	4a0e      	ldr	r2, [pc, #56]	; (22920 <nrfx_usbd_ep_transfer+0xe0>)
   228e8:	e7e2      	b.n	228b0 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   228ea:	4a0e      	ldr	r2, [pc, #56]	; (22924 <nrfx_usbd_ep_transfer+0xe4>)
   228ec:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   228ee:	4a0e      	ldr	r2, [pc, #56]	; (22928 <nrfx_usbd_ep_transfer+0xe8>)
   228f0:	e7de      	b.n	228b0 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   228f2:	480e      	ldr	r0, [pc, #56]	; (2292c <nrfx_usbd_ep_transfer+0xec>)
   228f4:	e7ec      	b.n	228d0 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   228f6:	480e      	ldr	r0, [pc, #56]	; (22930 <nrfx_usbd_ep_transfer+0xf0>)
   228f8:	e7ea      	b.n	228d0 <nrfx_usbd_ep_transfer+0x90>
   228fa:	bf00      	nop
   228fc:	200049cd 	.word	0x200049cd
   22900:	20004640 	.word	0x20004640
   22904:	200045d0 	.word	0x200045d0
   22908:	200045d4 	.word	0x200045d4
   2290c:	0002b21d 	.word	0x0002b21d
   22910:	e000e100 	.word	0xe000e100
   22914:	0bad0000 	.word	0x0bad0000
   22918:	0002b23f 	.word	0x0002b23f
   2291c:	000223d9 	.word	0x000223d9
   22920:	00022411 	.word	0x00022411
   22924:	20004564 	.word	0x20004564
   22928:	0002b1ef 	.word	0x0002b1ef
   2292c:	0bad000a 	.word	0x0bad000a
   22930:	0bad000b 	.word	0x0bad000b

00022934 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   22934:	f010 0f08 	tst.w	r0, #8
   22938:	4b07      	ldr	r3, [pc, #28]	; (22958 <nrfx_usbd_epout_size_get+0x24>)
   2293a:	d006      	beq.n	2294a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   2293c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   22940:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   22944:	bf18      	it	ne
   22946:	2000      	movne	r0, #0
   22948:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   2294a:	f000 000f 	and.w	r0, r0, #15
   2294e:	f500 7094 	add.w	r0, r0, #296	; 0x128
   22952:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   22956:	4770      	bx	lr
   22958:	40027000 	.word	0x40027000

0002295c <usbd_dmareq_process>:
{
   2295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   22960:	f8df 815c 	ldr.w	r8, [pc, #348]	; 22ac0 <usbd_dmareq_process+0x164>
   22964:	f898 3000 	ldrb.w	r3, [r8]
{
   22968:	b085      	sub	sp, #20
    if (!m_dma_pending)
   2296a:	2b00      	cmp	r3, #0
   2296c:	d16b      	bne.n	22a46 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   2296e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 22ac4 <usbd_dmareq_process+0x168>
   22972:	4e55      	ldr	r6, [pc, #340]	; (22ac8 <usbd_dmareq_process+0x16c>)
   22974:	f8d9 1000 	ldr.w	r1, [r9]
   22978:	6833      	ldr	r3, [r6, #0]
   2297a:	4019      	ands	r1, r3
   2297c:	d063      	beq.n	22a46 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   2297e:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   22982:	bf14      	ite	ne
   22984:	fa93 f1a3 	rbitne	r1, r3
   22988:	fa91 f1a1 	rbiteq	r1, r1
   2298c:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   22990:	290f      	cmp	r1, #15
   22992:	bf8a      	itet	hi
   22994:	f1a1 0410 	subhi.w	r4, r1, #16
   22998:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   2299c:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2299e:	4620      	mov	r0, r4
   229a0:	f7ff fc58 	bl	22254 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   229a4:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   229a8:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   229ac:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   229b0:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   229b4:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   229b6:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   229ba:	da47      	bge.n	22a4c <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   229bc:	6803      	ldr	r3, [r0, #0]
   229be:	8982      	ldrh	r2, [r0, #12]
   229c0:	6841      	ldr	r1, [r0, #4]
   229c2:	a802      	add	r0, sp, #8
   229c4:	4798      	blx	r3
                if (!continue_transfer)
   229c6:	b900      	cbnz	r0, 229ca <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   229c8:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   229ca:	f008 fc07 	bl	2b1dc <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   229ce:	b118      	cbz	r0, 229d8 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   229d0:	4b3e      	ldr	r3, [pc, #248]	; (22acc <usbd_dmareq_process+0x170>)
   229d2:	2282      	movs	r2, #130	; 0x82
   229d4:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   229d8:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   229da:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   229dc:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   229de:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   229e2:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   229e4:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   229e8:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   229ea:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   229ee:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   229f0:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   229f2:	f004 0008 	and.w	r0, r4, #8
   229f6:	9902      	ldr	r1, [sp, #8]
   229f8:	4b34      	ldr	r3, [pc, #208]	; (22acc <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   229fa:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   229fe:	da4f      	bge.n	22aa0 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   22a00:	2800      	cmp	r0, #0
   22a02:	d045      	beq.n	22a90 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   22a04:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   22a08:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   22a0c:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   22a0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   22a12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22a16:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   22a1a:	2201      	movs	r2, #1
   22a1c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   22a1e:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   22a20:	4a2b      	ldr	r2, [pc, #172]	; (22ad0 <usbd_dmareq_process+0x174>)
   22a22:	4b2c      	ldr	r3, [pc, #176]	; (22ad4 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   22a24:	4929      	ldr	r1, [pc, #164]	; (22acc <usbd_dmareq_process+0x170>)
   22a26:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   22a2a:	bf38      	it	cc
   22a2c:	4613      	movcc	r3, r2
   22a2e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   22a32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22a36:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   22a3a:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   22a3c:	b91a      	cbnz	r2, 22a46 <usbd_dmareq_process+0xea>
   22a3e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   22a42:	2a00      	cmp	r2, #0
   22a44:	d0f9      	beq.n	22a3a <usbd_dmareq_process+0xde>
}
   22a46:	b005      	add	sp, #20
   22a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   22a4c:	4620      	mov	r0, r4
   22a4e:	f7ff ff71 	bl	22934 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   22a52:	89aa      	ldrh	r2, [r5, #12]
   22a54:	6869      	ldr	r1, [r5, #4]
   22a56:	f8d5 c000 	ldr.w	ip, [r5]
   22a5a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   22a5c:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   22a5e:	a802      	add	r0, sp, #8
   22a60:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   22a62:	9a02      	ldr	r2, [sp, #8]
   22a64:	2a00      	cmp	r2, #0
   22a66:	d0ae      	beq.n	229c6 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   22a68:	9a03      	ldr	r2, [sp, #12]
   22a6a:	4297      	cmp	r7, r2
   22a6c:	d9ab      	bls.n	229c6 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   22a6e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   22a70:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   22a72:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   22a74:	f7ff fd0c 	bl	22490 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   22a78:	2306      	movs	r3, #6
   22a7a:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   22a7e:	4b16      	ldr	r3, [pc, #88]	; (22ad8 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   22a80:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   22a84:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   22a86:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   22a8a:	a801      	add	r0, sp, #4
   22a8c:	4798      	blx	r3
                    continue;
   22a8e:	e771      	b.n	22974 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   22a90:	2014      	movs	r0, #20
   22a92:	fb00 3304 	mla	r3, r0, r4, r3
   22a96:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   22a9a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   22a9e:	e7b5      	b.n	22a0c <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   22aa0:	b128      	cbz	r0, 22aae <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   22aa2:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   22aa6:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   22aaa:	2328      	movs	r3, #40	; 0x28
   22aac:	e7af      	b.n	22a0e <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   22aae:	2014      	movs	r0, #20
   22ab0:	fb00 3304 	mla	r3, r0, r4, r3
   22ab4:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   22ab8:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   22abc:	e7f5      	b.n	22aaa <usbd_dmareq_process+0x14e>
   22abe:	bf00      	nop
   22ac0:	200049cb 	.word	0x200049cb
   22ac4:	200045d0 	.word	0x200045d0
   22ac8:	20004640 	.word	0x20004640
   22acc:	40027000 	.word	0x40027000
   22ad0:	0002e416 	.word	0x0002e416
   22ad4:	0002e404 	.word	0x0002e404
   22ad8:	20004764 	.word	0x20004764

00022adc <ev_epdata_handler>:
{
   22adc:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   22ade:	4b0f      	ldr	r3, [pc, #60]	; (22b1c <ev_epdata_handler+0x40>)
   22ae0:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   22ae4:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   22ae8:	2501      	movs	r5, #1
    while (dataepstatus)
   22aea:	b91c      	cbnz	r4, 22af4 <ev_epdata_handler+0x18>
}
   22aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   22af0:	f7ff bf34 	b.w	2295c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   22af4:	fa94 f3a4 	rbit	r3, r4
   22af8:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   22afc:	2b0f      	cmp	r3, #15
   22afe:	bfc8      	it	gt
   22b00:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   22b04:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   22b06:	bfd4      	ite	le
   22b08:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   22b0c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   22b0e:	fa05 f303 	lsl.w	r3, r5, r3
   22b12:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   22b16:	f7ff fce1 	bl	224dc <usbd_ep_data_handler>
   22b1a:	e7e6      	b.n	22aea <ev_epdata_handler+0xe>
   22b1c:	40027000 	.word	0x40027000

00022b20 <nrf_usbd_epout_dma_handler>:
{
   22b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22b22:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   22b24:	f7ff fba4 	bl	22270 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   22b28:	4620      	mov	r0, r4
   22b2a:	f7ff fb93 	bl	22254 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   22b2e:	7b83      	ldrb	r3, [r0, #14]
   22b30:	2b03      	cmp	r3, #3
   22b32:	d10d      	bne.n	22b50 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   22b34:	4620      	mov	r0, r4
   22b36:	f008 fb97 	bl	2b268 <ep2bit>
   22b3a:	2301      	movs	r3, #1
   22b3c:	fa03 f000 	lsl.w	r0, r3, r0
   22b40:	43c0      	mvns	r0, r0
   22b42:	f7ff fca5 	bl	22490 <atomic_and.constprop.0.isra.0>
}
   22b46:	b003      	add	sp, #12
   22b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   22b4c:	f7ff bf06 	b.w	2295c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   22b50:	6805      	ldr	r5, [r0, #0]
   22b52:	2d00      	cmp	r5, #0
   22b54:	d1f7      	bne.n	22b46 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   22b56:	4620      	mov	r0, r4
   22b58:	f008 fb86 	bl	2b268 <ep2bit>
   22b5c:	2301      	movs	r3, #1
   22b5e:	fa03 f000 	lsl.w	r0, r3, r0
   22b62:	43c0      	mvns	r0, r0
   22b64:	f7ff fc94 	bl	22490 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   22b68:	2306      	movs	r3, #6
   22b6a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   22b6e:	4b04      	ldr	r3, [pc, #16]	; (22b80 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   22b70:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   22b74:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   22b76:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   22b7a:	a801      	add	r0, sp, #4
   22b7c:	4798      	blx	r3
   22b7e:	e7e2      	b.n	22b46 <nrf_usbd_epout_dma_handler+0x26>
   22b80:	20004764 	.word	0x20004764

00022b84 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   22b84:	4b02      	ldr	r3, [pc, #8]	; (22b90 <nrfx_usbd_ep_stall+0xc>)
   22b86:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   22b8a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   22b8e:	4770      	bx	lr
   22b90:	40027000 	.word	0x40027000

00022b94 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   22b94:	0702      	lsls	r2, r0, #28
   22b96:	d413      	bmi.n	22bc0 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   22b98:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   22b9c:	f010 0f80 	tst.w	r0, #128	; 0x80
   22ba0:	4a08      	ldr	r2, [pc, #32]	; (22bc4 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   22ba2:	bf0b      	itete	eq
   22ba4:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   22ba8:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   22bac:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   22bb0:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   22bb4:	bf08      	it	eq
   22bb6:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   22bb8:	1e43      	subs	r3, r0, #1
   22bba:	4258      	negs	r0, r3
   22bbc:	4158      	adcs	r0, r3
   22bbe:	4770      	bx	lr
        return false;
   22bc0:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   22bc2:	4770      	bx	lr
   22bc4:	40027000 	.word	0x40027000

00022bc8 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   22bc8:	4b04      	ldr	r3, [pc, #16]	; (22bdc <nrfx_usbd_ep_dtoggle_clear+0x14>)
   22bca:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   22bce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   22bd2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   22bd6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   22bda:	4770      	bx	lr
   22bdc:	40027000 	.word	0x40027000

00022be0 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   22be0:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   22be2:	2208      	movs	r2, #8
   22be4:	2100      	movs	r1, #0
{
   22be6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   22be8:	f005 fcf0 	bl	285cc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   22bec:	4b0e      	ldr	r3, [pc, #56]	; (22c28 <nrfx_usbd_setup_get+0x48>)
   22bee:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   22bf2:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   22bf4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   22bf8:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   22bfa:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   22bfe:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   22c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   22c06:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   22c08:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   22c0c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   22c10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   22c14:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   22c16:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   22c1a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   22c1e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   22c22:	80e3      	strh	r3, [r4, #6]
}
   22c24:	bd10      	pop	{r4, pc}
   22c26:	bf00      	nop
   22c28:	40027000 	.word	0x40027000

00022c2c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   22c2c:	4b02      	ldr	r3, [pc, #8]	; (22c38 <nrfx_usbd_setup_data_clear+0xc>)
   22c2e:	2201      	movs	r2, #1
   22c30:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   22c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   22c34:	4770      	bx	lr
   22c36:	bf00      	nop
   22c38:	40027000 	.word	0x40027000

00022c3c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   22c3c:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   22c3e:	f7ff fb17 	bl	22270 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   22c42:	4b10      	ldr	r3, [pc, #64]	; (22c84 <ev_dma_epout0_handler+0x48>)
   22c44:	7b9a      	ldrb	r2, [r3, #14]
   22c46:	2a03      	cmp	r2, #3
   22c48:	d106      	bne.n	22c58 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   22c4a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   22c4e:	b002      	add	sp, #8
   22c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   22c54:	f7ff bc1c 	b.w	22490 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   22c58:	681c      	ldr	r4, [r3, #0]
   22c5a:	b974      	cbnz	r4, 22c7a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   22c5c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   22c60:	f7ff fc16 	bl	22490 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   22c64:	2306      	movs	r3, #6
   22c66:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   22c6a:	4b07      	ldr	r3, [pc, #28]	; (22c88 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   22c6c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   22c70:	681b      	ldr	r3, [r3, #0]
   22c72:	a801      	add	r0, sp, #4
   22c74:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   22c76:	b002      	add	sp, #8
   22c78:	bd10      	pop	{r4, pc}
   22c7a:	b002      	add	sp, #8
   22c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   22c80:	f7ff bfd4 	b.w	22c2c <nrfx_usbd_setup_data_clear>
   22c84:	20004644 	.word	0x20004644
   22c88:	20004764 	.word	0x20004764

00022c8c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   22c8c:	4b02      	ldr	r3, [pc, #8]	; (22c98 <nrfx_usbd_setup_clear+0xc>)
   22c8e:	2201      	movs	r2, #1
   22c90:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   22c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   22c94:	4770      	bx	lr
   22c96:	bf00      	nop
   22c98:	40027000 	.word	0x40027000

00022c9c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   22c9c:	4b02      	ldr	r3, [pc, #8]	; (22ca8 <nrfx_usbd_setup_stall+0xc>)
   22c9e:	2201      	movs	r2, #1
   22ca0:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   22ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   22ca4:	4770      	bx	lr
   22ca6:	bf00      	nop
   22ca8:	40027000 	.word	0x40027000

00022cac <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   22cac:	4b01      	ldr	r3, [pc, #4]	; (22cb4 <nrfx_usbd_last_setup_dir_get+0x8>)
   22cae:	7818      	ldrb	r0, [r3, #0]
   22cb0:	4770      	bx	lr
   22cb2:	bf00      	nop
   22cb4:	200049cd 	.word	0x200049cd

00022cb8 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   22cb8:	b510      	push	{r4, lr}
   22cba:	4602      	mov	r2, r0
	__asm__ volatile(
   22cbc:	f04f 0320 	mov.w	r3, #32
   22cc0:	f3ef 8411 	mrs	r4, BASEPRI
   22cc4:	f383 8812 	msr	BASEPRI_MAX, r3
   22cc8:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   22ccc:	f008 facc 	bl	2b268 <ep2bit>
   22cd0:	490d      	ldr	r1, [pc, #52]	; (22d08 <nrfx_usbd_transfer_out_drop+0x50>)
   22cd2:	2301      	movs	r3, #1
   22cd4:	fa03 f000 	lsl.w	r0, r3, r0
   22cd8:	680b      	ldr	r3, [r1, #0]
   22cda:	ea23 0300 	bic.w	r3, r3, r0
   22cde:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   22ce0:	f012 0108 	ands.w	r1, r2, #8
   22ce4:	d10a      	bne.n	22cfc <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   22ce6:	f002 030f 	and.w	r3, r2, #15
   22cea:	009b      	lsls	r3, r3, #2
   22cec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22cf0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   22cf4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   22cf8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   22cfc:	f384 8811 	msr	BASEPRI, r4
   22d00:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   22d04:	bd10      	pop	{r4, pc}
   22d06:	bf00      	nop
   22d08:	20004640 	.word	0x20004640

00022d0c <usbd_ep_abort>:
{
   22d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22d0e:	4601      	mov	r1, r0
	__asm__ volatile(
   22d10:	f04f 0320 	mov.w	r3, #32
   22d14:	f3ef 8511 	mrs	r5, BASEPRI
   22d18:	f383 8812 	msr	BASEPRI_MAX, r3
   22d1c:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   22d20:	f7ff fa98 	bl	22254 <ep_state_access>
   22d24:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   22d26:	4608      	mov	r0, r1
   22d28:	f008 fa9e 	bl	2b268 <ep2bit>
   22d2c:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   22d2e:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   22d32:	fa02 f200 	lsl.w	r2, r2, r0
   22d36:	482e      	ldr	r0, [pc, #184]	; (22df0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   22d38:	d118      	bne.n	22d6c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   22d3a:	6803      	ldr	r3, [r0, #0]
   22d3c:	ea32 0403 	bics.w	r4, r2, r3
   22d40:	d00a      	beq.n	22d58 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   22d42:	4608      	mov	r0, r1
   22d44:	f7ff ffb8 	bl	22cb8 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   22d48:	2303      	movs	r3, #3
   22d4a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   22d4c:	f385 8811 	msr	BASEPRI, r5
   22d50:	f3bf 8f6f 	isb	sy
}
   22d54:	b003      	add	sp, #12
   22d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   22d58:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   22d5c:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   22d5e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   22d60:	4b24      	ldr	r3, [pc, #144]	; (22df4 <usbd_ep_abort+0xe8>)
   22d62:	6818      	ldr	r0, [r3, #0]
   22d64:	ea20 0002 	bic.w	r0, r0, r2
   22d68:	6018      	str	r0, [r3, #0]
   22d6a:	e7ed      	b.n	22d48 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   22d6c:	070b      	lsls	r3, r1, #28
   22d6e:	d415      	bmi.n	22d9c <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   22d70:	2980      	cmp	r1, #128	; 0x80
   22d72:	4b21      	ldr	r3, [pc, #132]	; (22df8 <usbd_ep_abort+0xec>)
   22d74:	d02f      	beq.n	22dd6 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   22d76:	f001 040f 	and.w	r4, r1, #15
   22d7a:	f204 34da 	addw	r4, r4, #986	; 0x3da
   22d7e:	0064      	lsls	r4, r4, #1
   22d80:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   22d84:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   22d88:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   22d8c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   22d8e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   22d92:	433c      	orrs	r4, r7
   22d94:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   22d98:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   22d9c:	4f15      	ldr	r7, [pc, #84]	; (22df4 <usbd_ep_abort+0xe8>)
   22d9e:	6804      	ldr	r4, [r0, #0]
   22da0:	683b      	ldr	r3, [r7, #0]
   22da2:	ea64 0c03 	orn	ip, r4, r3
   22da6:	ea1c 0f02 	tst.w	ip, r2
   22daa:	d0cf      	beq.n	22d4c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   22dac:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   22dae:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   22db2:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   22db4:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   22db6:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   22db8:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   22dba:	2303      	movs	r3, #3
   22dbc:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   22dbe:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   22dc2:	4b0e      	ldr	r3, [pc, #56]	; (22dfc <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   22dc4:	f88d 1006 	strb.w	r1, [sp, #6]
   22dc8:	2206      	movs	r2, #6
            m_event_handler(&evt);
   22dca:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   22dcc:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   22dd0:	a801      	add	r0, sp, #4
   22dd2:	4798      	blx	r3
   22dd4:	e7ba      	b.n	22d4c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   22dd6:	f240 74b4 	movw	r4, #1972	; 0x7b4
   22dda:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   22dde:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   22de2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   22de6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   22de8:	f044 0404 	orr.w	r4, r4, #4
   22dec:	e7d1      	b.n	22d92 <usbd_ep_abort+0x86>
   22dee:	bf00      	nop
   22df0:	200045d0 	.word	0x200045d0
   22df4:	20004640 	.word	0x20004640
   22df8:	40027000 	.word	0x40027000
   22dfc:	20004764 	.word	0x20004764

00022e00 <ev_setup_handler>:
{
   22e00:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   22e02:	4b17      	ldr	r3, [pc, #92]	; (22e60 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   22e04:	4c17      	ldr	r4, [pc, #92]	; (22e64 <ev_setup_handler+0x64>)
   22e06:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   22e0a:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   22e0c:	4e16      	ldr	r6, [pc, #88]	; (22e68 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   22e0e:	43da      	mvns	r2, r3
   22e10:	4b16      	ldr	r3, [pc, #88]	; (22e6c <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   22e12:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   22e14:	681b      	ldr	r3, [r3, #0]
   22e16:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   22e18:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   22e1a:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   22e1c:	f008 fa24 	bl	2b268 <ep2bit>
   22e20:	2301      	movs	r3, #1
   22e22:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   22e24:	4213      	tst	r3, r2
   22e26:	d002      	beq.n	22e2e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   22e28:	4608      	mov	r0, r1
   22e2a:	f7ff ff6f 	bl	22d0c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   22e2e:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   22e32:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   22e36:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   22e38:	f7ff fb2a 	bl	22490 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   22e3c:	6823      	ldr	r3, [r4, #0]
   22e3e:	f043 0301 	orr.w	r3, r3, #1
   22e42:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   22e44:	2300      	movs	r3, #0
   22e46:	f8ad 3005 	strh.w	r3, [sp, #5]
   22e4a:	f88d 3007 	strb.w	r3, [sp, #7]
   22e4e:	2305      	movs	r3, #5
   22e50:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   22e54:	4b06      	ldr	r3, [pc, #24]	; (22e70 <ev_setup_handler+0x70>)
   22e56:	a801      	add	r0, sp, #4
   22e58:	681b      	ldr	r3, [r3, #0]
   22e5a:	4798      	blx	r3
}
   22e5c:	b002      	add	sp, #8
   22e5e:	bd70      	pop	{r4, r5, r6, pc}
   22e60:	40027000 	.word	0x40027000
   22e64:	20004640 	.word	0x20004640
   22e68:	200049cd 	.word	0x200049cd
   22e6c:	200045d0 	.word	0x200045d0
   22e70:	20004764 	.word	0x20004764

00022e74 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   22e74:	4b1b      	ldr	r3, [pc, #108]	; (22ee4 <nrfx_usbd_irq_handler+0x70>)
   22e76:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   22e7a:	2300      	movs	r3, #0
{
   22e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   22e80:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   22e82:	461d      	mov	r5, r3
    while (to_process)
   22e84:	b970      	cbnz	r0, 22ea4 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   22e86:	4f18      	ldr	r7, [pc, #96]	; (22ee8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   22e88:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   22e8c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   22e90:	f04f 0801 	mov.w	r8, #1
    while (active)
   22e94:	b9bc      	cbnz	r4, 22ec6 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   22e96:	f7ff fd61 	bl	2295c <usbd_dmareq_process>
    if (setup_active)
   22e9a:	b306      	cbz	r6, 22ede <nrfx_usbd_irq_handler+0x6a>
}
   22e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   22ea0:	f7ff bfae 	b.w	22e00 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   22ea4:	fa90 f2a0 	rbit	r2, r0
   22ea8:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   22eac:	490f      	ldr	r1, [pc, #60]	; (22eec <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   22eae:	0096      	lsls	r6, r2, #2
   22eb0:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   22eb2:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   22eb6:	680e      	ldr	r6, [r1, #0]
    if (ret)
   22eb8:	b116      	cbz	r6, 22ec0 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   22eba:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   22ebc:	6809      	ldr	r1, [r1, #0]
   22ebe:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   22ec0:	ea20 0002 	bic.w	r0, r0, r2
   22ec4:	e7de      	b.n	22e84 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   22ec6:	fa94 f5a4 	rbit	r5, r4
   22eca:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   22ece:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   22ed2:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   22ed6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   22ed8:	ea24 0405 	bic.w	r4, r4, r5
   22edc:	e7da      	b.n	22e94 <nrfx_usbd_irq_handler+0x20>
}
   22ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22ee2:	bf00      	nop
   22ee4:	40027000 	.word	0x40027000
   22ee8:	0002e374 	.word	0x0002e374
   22eec:	40027100 	.word	0x40027100

00022ef0 <usbd_ep_abort_all>:
{
   22ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   22ef2:	4e11      	ldr	r6, [pc, #68]	; (22f38 <usbd_ep_abort_all+0x48>)
   22ef4:	4b11      	ldr	r3, [pc, #68]	; (22f3c <usbd_ep_abort_all+0x4c>)
   22ef6:	6834      	ldr	r4, [r6, #0]
   22ef8:	681b      	ldr	r3, [r3, #0]
   22efa:	0c24      	lsrs	r4, r4, #16
   22efc:	0424      	lsls	r4, r4, #16
   22efe:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   22f00:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   22f02:	b91c      	cbnz	r4, 22f0c <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   22f04:	f240 13ff 	movw	r3, #511	; 0x1ff
   22f08:	6033      	str	r3, [r6, #0]
}
   22f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   22f0c:	fa94 f5a4 	rbit	r5, r4
   22f10:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   22f14:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   22f16:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   22f18:	bfc6      	itte	gt
   22f1a:	f1a5 0010 	subgt.w	r0, r5, #16
   22f1e:	b2c0      	uxtbgt	r0, r0
   22f20:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   22f24:	0703      	lsls	r3, r0, #28
   22f26:	d401      	bmi.n	22f2c <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   22f28:	f7ff fef0 	bl	22d0c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   22f2c:	fa07 f505 	lsl.w	r5, r7, r5
   22f30:	ea24 0405 	bic.w	r4, r4, r5
   22f34:	e7e5      	b.n	22f02 <usbd_ep_abort_all+0x12>
   22f36:	bf00      	nop
   22f38:	20004640 	.word	0x20004640
   22f3c:	200045d0 	.word	0x200045d0

00022f40 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22f40:	4b0c      	ldr	r3, [pc, #48]	; (22f74 <nrfx_usbd_stop+0x34>)
   22f42:	2280      	movs	r2, #128	; 0x80
{
   22f44:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   22f46:	2027      	movs	r0, #39	; 0x27
   22f48:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   22f4c:	f7e7 fafa 	bl	a544 <arch_irq_is_enabled>
   22f50:	b170      	cbz	r0, 22f70 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   22f52:	4c09      	ldr	r4, [pc, #36]	; (22f78 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   22f54:	f7ff ffcc 	bl	22ef0 <usbd_ep_abort_all>
   22f58:	2300      	movs	r3, #0
   22f5a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   22f5e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   22f60:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   22f64:	f7e7 fada 	bl	a51c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   22f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22f6c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   22f70:	bd10      	pop	{r4, pc}
   22f72:	bf00      	nop
   22f74:	e000e100 	.word	0xe000e100
   22f78:	40027000 	.word	0x40027000

00022f7c <nrfx_usbd_disable>:
{
   22f7c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   22f7e:	f7ff ffdf 	bl	22f40 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   22f82:	4b08      	ldr	r3, [pc, #32]	; (22fa4 <nrfx_usbd_disable+0x28>)
   22f84:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   22f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   22f8c:	2200      	movs	r2, #0
   22f8e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   22f92:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   22f96:	f7ff f96b 	bl	22270 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   22f9a:	4b03      	ldr	r3, [pc, #12]	; (22fa8 <nrfx_usbd_disable+0x2c>)
   22f9c:	2201      	movs	r2, #1
   22f9e:	701a      	strb	r2, [r3, #0]
}
   22fa0:	bd08      	pop	{r3, pc}
   22fa2:	bf00      	nop
   22fa4:	40027000 	.word	0x40027000
   22fa8:	200049cc 	.word	0x200049cc

00022fac <nrfx_usbd_suspend>:
{
   22fac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22fae:	f04f 0320 	mov.w	r3, #32
   22fb2:	f3ef 8511 	mrs	r5, BASEPRI
   22fb6:	f383 8812 	msr	BASEPRI_MAX, r3
   22fba:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   22fbe:	4b11      	ldr	r3, [pc, #68]	; (23004 <nrfx_usbd_suspend+0x58>)
   22fc0:	781b      	ldrb	r3, [r3, #0]
   22fc2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   22fc6:	b933      	cbnz	r3, 22fd6 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   22fc8:	2400      	movs	r4, #0
	__asm__ volatile(
   22fca:	f385 8811 	msr	BASEPRI, r5
   22fce:	f3bf 8f6f 	isb	sy
}
   22fd2:	4620      	mov	r0, r4
   22fd4:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   22fd6:	f7ff ff8b 	bl	22ef0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   22fda:	4b0b      	ldr	r3, [pc, #44]	; (23008 <nrfx_usbd_suspend+0x5c>)
   22fdc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   22fe0:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   22fe4:	d1f0      	bne.n	22fc8 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   22fe6:	2101      	movs	r1, #1
   22fe8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   22fec:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   22ff0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   22ff4:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   22ff6:	bf42      	ittt	mi
   22ff8:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   22ffc:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   23000:	4614      	movmi	r4, r2
}
   23002:	e7e2      	b.n	22fca <nrfx_usbd_suspend+0x1e>
   23004:	200049ca 	.word	0x200049ca
   23008:	40027000 	.word	0x40027000

0002300c <nrfx_usbd_ep_disable>:
{
   2300c:	b510      	push	{r4, lr}
   2300e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   23010:	f7ff fe7c 	bl	22d0c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   23014:	4a10      	ldr	r2, [pc, #64]	; (23058 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   23016:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2301a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   2301e:	f04f 0301 	mov.w	r3, #1
   23022:	bf14      	ite	ne
   23024:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   23028:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   2302c:	fa03 f300 	lsl.w	r3, r3, r0
   23030:	ea6f 0303 	mvn.w	r3, r3
   23034:	bf15      	itete	ne
   23036:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   23038:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   2303a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2303e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   23042:	bf14      	ite	ne
   23044:	4b05      	ldrne	r3, [pc, #20]	; (2305c <nrfx_usbd_ep_disable+0x50>)
   23046:	4b06      	ldreq	r3, [pc, #24]	; (23060 <nrfx_usbd_ep_disable+0x54>)
   23048:	5c1a      	ldrb	r2, [r3, r0]
   2304a:	2301      	movs	r3, #1
   2304c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   2304e:	4a02      	ldr	r2, [pc, #8]	; (23058 <nrfx_usbd_ep_disable+0x4c>)
   23050:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   23054:	bd10      	pop	{r4, pc}
   23056:	bf00      	nop
   23058:	40027000 	.word	0x40027000
   2305c:	00031ce5 	.word	0x00031ce5
   23060:	00031cee 	.word	0x00031cee

00023064 <nrfx_usbd_ep_enable>:
{
   23064:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   23066:	b243      	sxtb	r3, r0
   23068:	2b00      	cmp	r3, #0
   2306a:	4b23      	ldr	r3, [pc, #140]	; (230f8 <nrfx_usbd_ep_enable+0x94>)
   2306c:	4a23      	ldr	r2, [pc, #140]	; (230fc <nrfx_usbd_ep_enable+0x98>)
   2306e:	bfa8      	it	ge
   23070:	461a      	movge	r2, r3
   23072:	f000 030f 	and.w	r3, r0, #15
   23076:	f04f 0401 	mov.w	r4, #1
   2307a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   2307c:	4a20      	ldr	r2, [pc, #128]	; (23100 <nrfx_usbd_ep_enable+0x9c>)
   2307e:	fa04 f101 	lsl.w	r1, r4, r1
{
   23082:	4605      	mov	r5, r0
   23084:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   23088:	da0c      	bge.n	230a4 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   2308a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   2308e:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   23090:	07c8      	lsls	r0, r1, #31
   23092:	d406      	bmi.n	230a2 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   23094:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23098:	fa04 f303 	lsl.w	r3, r4, r3
   2309c:	4303      	orrs	r3, r0
   2309e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   230a2:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   230a4:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   230a8:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   230aa:	07c9      	lsls	r1, r1, #31
   230ac:	d4f9      	bmi.n	230a2 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   230ae:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   230b2:	fa04 f103 	lsl.w	r1, r4, r3
   230b6:	4331      	orrs	r1, r6
   230b8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   230bc:	2b00      	cmp	r3, #0
   230be:	d0f0      	beq.n	230a2 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   230c0:	0703      	lsls	r3, r0, #28
   230c2:	d4ee      	bmi.n	230a2 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   230c4:	f04f 0320 	mov.w	r3, #32
   230c8:	f3ef 8611 	mrs	r6, BASEPRI
   230cc:	f383 8812 	msr	BASEPRI_MAX, r3
   230d0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   230d4:	f7ff fdf0 	bl	22cb8 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   230d8:	4628      	mov	r0, r5
   230da:	f008 f8c5 	bl	2b268 <ep2bit>
   230de:	4a09      	ldr	r2, [pc, #36]	; (23104 <nrfx_usbd_ep_enable+0xa0>)
   230e0:	6813      	ldr	r3, [r2, #0]
   230e2:	fa04 f000 	lsl.w	r0, r4, r0
   230e6:	ea23 0000 	bic.w	r0, r3, r0
   230ea:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   230ec:	f386 8811 	msr	BASEPRI, r6
   230f0:	f3bf 8f6f 	isb	sy
}
   230f4:	e7d5      	b.n	230a2 <nrfx_usbd_ep_enable+0x3e>
   230f6:	bf00      	nop
   230f8:	00031cee 	.word	0x00031cee
   230fc:	00031ce5 	.word	0x00031ce5
   23100:	40027000 	.word	0x40027000
   23104:	200045d0 	.word	0x200045d0

00023108 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   23108:	0603      	lsls	r3, r0, #24
{
   2310a:	b510      	push	{r4, lr}
   2310c:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   2310e:	d405      	bmi.n	2311c <nrfx_usbd_ep_stall_clear+0x14>
   23110:	f7ff fd40 	bl	22b94 <nrfx_usbd_ep_stall_check>
   23114:	b110      	cbz	r0, 2311c <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   23116:	4620      	mov	r0, r4
   23118:	f7ff fdce 	bl	22cb8 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   2311c:	4b01      	ldr	r3, [pc, #4]	; (23124 <nrfx_usbd_ep_stall_clear+0x1c>)
   2311e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   23122:	bd10      	pop	{r4, pc}
   23124:	40027000 	.word	0x40027000

00023128 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
   23128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
   2312c:	f8df a048 	ldr.w	sl, [pc, #72]	; 23178 <device_visitor+0x50>
   23130:	4d12      	ldr	r5, [pc, #72]	; (2317c <device_visitor+0x54>)
   23132:	469b      	mov	fp, r3
   23134:	eba5 050a 	sub.w	r5, r5, sl
   23138:	4b11      	ldr	r3, [pc, #68]	; (23180 <device_visitor+0x58>)
   2313a:	10ed      	asrs	r5, r5, #3
   2313c:	4680      	mov	r8, r0
   2313e:	460f      	mov	r7, r1
   23140:	4691      	mov	r9, r2
   23142:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
   23144:	2600      	movs	r6, #0
   23146:	42be      	cmp	r6, r7
   23148:	d102      	bne.n	23150 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   2314a:	4630      	mov	r0, r6
}
   2314c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
   23150:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
   23154:	2c00      	cmp	r4, #0
   23156:	dd0d      	ble.n	23174 <device_visitor+0x4c>
   23158:	42a5      	cmp	r5, r4
   2315a:	d30b      	bcc.n	23174 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
   2315c:	3c01      	subs	r4, #1
   2315e:	b224      	sxth	r4, r4
   23160:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23164:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
   23168:	4659      	mov	r1, fp
   2316a:	47c8      	blx	r9
		if (rc < 0) {
   2316c:	2800      	cmp	r0, #0
   2316e:	dbed      	blt.n	2314c <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
   23170:	3601      	adds	r6, #1
   23172:	e7e8      	b.n	23146 <device_visitor+0x1e>
	const struct device *dev = NULL;
   23174:	2000      	movs	r0, #0
   23176:	e7f7      	b.n	23168 <device_visitor+0x40>
   23178:	0002bf98 	.word	0x0002bf98
   2317c:	0002c028 	.word	0x0002c028
   23180:	aaaaaaab 	.word	0xaaaaaaab

00023184 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23184:	4b0e      	ldr	r3, [pc, #56]	; (231c0 <z_sys_init_run_level+0x3c>)
{
   23186:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23188:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2318c:	3001      	adds	r0, #1
   2318e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   23192:	42a6      	cmp	r6, r4
   23194:	d800      	bhi.n	23198 <z_sys_init_run_level+0x14>
}
   23196:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   23198:	e9d4 3500 	ldrd	r3, r5, [r4]
   2319c:	4628      	mov	r0, r5
   2319e:	4798      	blx	r3
		if (dev != NULL) {
   231a0:	b165      	cbz	r5, 231bc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   231a2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   231a4:	b130      	cbz	r0, 231b4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   231a6:	2800      	cmp	r0, #0
   231a8:	bfb8      	it	lt
   231aa:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   231ac:	28ff      	cmp	r0, #255	; 0xff
   231ae:	bfa8      	it	ge
   231b0:	20ff      	movge	r0, #255	; 0xff
   231b2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   231b4:	785a      	ldrb	r2, [r3, #1]
   231b6:	f042 0201 	orr.w	r2, r2, #1
   231ba:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   231bc:	3408      	adds	r4, #8
   231be:	e7e8      	b.n	23192 <z_sys_init_run_level+0xe>
   231c0:	0002e3d8 	.word	0x0002e3d8

000231c4 <z_device_get_all_static>:
	*devices = __device_start;
   231c4:	4a03      	ldr	r2, [pc, #12]	; (231d4 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   231c6:	4b04      	ldr	r3, [pc, #16]	; (231d8 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   231c8:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   231ca:	1a9b      	subs	r3, r3, r2
}
   231cc:	4803      	ldr	r0, [pc, #12]	; (231dc <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   231ce:	10db      	asrs	r3, r3, #3
}
   231d0:	4358      	muls	r0, r3
   231d2:	4770      	bx	lr
   231d4:	0002bf98 	.word	0x0002bf98
   231d8:	0002c028 	.word	0x0002c028
   231dc:	aaaaaaab 	.word	0xaaaaaaab

000231e0 <z_impl_device_get_binding>:
{
   231e0:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   231e2:	4605      	mov	r5, r0
   231e4:	b910      	cbnz	r0, 231ec <z_impl_device_get_binding+0xc>
		return NULL;
   231e6:	2400      	movs	r4, #0
}
   231e8:	4620      	mov	r0, r4
   231ea:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   231ec:	7803      	ldrb	r3, [r0, #0]
   231ee:	2b00      	cmp	r3, #0
   231f0:	d0f9      	beq.n	231e6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   231f2:	4c0e      	ldr	r4, [pc, #56]	; (2322c <z_impl_device_get_binding+0x4c>)
   231f4:	4e0e      	ldr	r6, [pc, #56]	; (23230 <z_impl_device_get_binding+0x50>)
   231f6:	42b4      	cmp	r4, r6
   231f8:	d108      	bne.n	2320c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   231fa:	4c0c      	ldr	r4, [pc, #48]	; (2322c <z_impl_device_get_binding+0x4c>)
   231fc:	42b4      	cmp	r4, r6
   231fe:	d0f2      	beq.n	231e6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   23200:	4620      	mov	r0, r4
   23202:	f008 f89f 	bl	2b344 <z_device_is_ready>
   23206:	b950      	cbnz	r0, 2321e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   23208:	3418      	adds	r4, #24
   2320a:	e7f7      	b.n	231fc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   2320c:	4620      	mov	r0, r4
   2320e:	f008 f899 	bl	2b344 <z_device_is_ready>
   23212:	b110      	cbz	r0, 2321a <z_impl_device_get_binding+0x3a>
   23214:	6823      	ldr	r3, [r4, #0]
   23216:	42ab      	cmp	r3, r5
   23218:	d0e6      	beq.n	231e8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   2321a:	3418      	adds	r4, #24
   2321c:	e7eb      	b.n	231f6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2321e:	6821      	ldr	r1, [r4, #0]
   23220:	4628      	mov	r0, r5
   23222:	f005 f982 	bl	2852a <strcmp>
   23226:	2800      	cmp	r0, #0
   23228:	d1ee      	bne.n	23208 <z_impl_device_get_binding+0x28>
   2322a:	e7dd      	b.n	231e8 <z_impl_device_get_binding+0x8>
   2322c:	0002bf98 	.word	0x0002bf98
   23230:	0002c028 	.word	0x0002c028

00023234 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   23234:	4b01      	ldr	r3, [pc, #4]	; (2323c <z_impl_z_errno+0x8>)
   23236:	6898      	ldr	r0, [r3, #8]
}
   23238:	3098      	adds	r0, #152	; 0x98
   2323a:	4770      	bx	lr
   2323c:	200047a8 	.word	0x200047a8

00023240 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   23240:	b510      	push	{r4, lr}
   23242:	4604      	mov	r4, r0
   23244:	b088      	sub	sp, #32
	z_impl_log_panic();
   23246:	f7e2 fe9b 	bl	5f80 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   2324a:	4809      	ldr	r0, [pc, #36]	; (23270 <k_sys_fatal_error_handler+0x30>)
   2324c:	6803      	ldr	r3, [r0, #0]
   2324e:	075b      	lsls	r3, r3, #29
   23250:	d00a      	beq.n	23268 <k_sys_fatal_error_handler+0x28>
   23252:	4b08      	ldr	r3, [pc, #32]	; (23274 <k_sys_fatal_error_handler+0x34>)
   23254:	9306      	str	r3, [sp, #24]
   23256:	2302      	movs	r3, #2
   23258:	9301      	str	r3, [sp, #4]
   2325a:	9305      	str	r3, [sp, #20]
   2325c:	2300      	movs	r3, #0
   2325e:	aa05      	add	r2, sp, #20
   23260:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23264:	f002 fcbc 	bl	25be0 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
   23268:	4620      	mov	r0, r4
   2326a:	f008 f89c 	bl	2b3a6 <arch_system_halt>
   2326e:	bf00      	nop
   23270:	20000a30 	.word	0x20000a30
   23274:	00031cf7 	.word	0x00031cf7

00023278 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2327c:	4605      	mov	r5, r0
   2327e:	b08e      	sub	sp, #56	; 0x38
   23280:	460e      	mov	r6, r1
	__asm__ volatile(
   23282:	f04f 0320 	mov.w	r3, #32
   23286:	f3ef 8811 	mrs	r8, BASEPRI
   2328a:	f383 8812 	msr	BASEPRI_MAX, r3
   2328e:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   23292:	4f2b      	ldr	r7, [pc, #172]	; (23340 <z_fatal_error+0xc8>)
	return z_impl_z_current_get();
   23294:	f001 f910 	bl	244b8 <z_impl_z_current_get>
   23298:	683b      	ldr	r3, [r7, #0]
   2329a:	0759      	lsls	r1, r3, #29
   2329c:	4604      	mov	r4, r0
   2329e:	d04c      	beq.n	2333a <z_fatal_error+0xc2>
	switch (reason) {
   232a0:	2d04      	cmp	r5, #4
   232a2:	bf96      	itet	ls
   232a4:	4b27      	ldrls	r3, [pc, #156]	; (23344 <z_fatal_error+0xcc>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   232a6:	4a28      	ldrhi	r2, [pc, #160]	; (23348 <z_fatal_error+0xd0>)
	return 0;
   232a8:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   232ac:	4924      	ldr	r1, [pc, #144]	; (23340 <z_fatal_error+0xc8>)
   232ae:	9502      	str	r5, [sp, #8]
   232b0:	2300      	movs	r3, #0
   232b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   232b6:	4a25      	ldr	r2, [pc, #148]	; (2334c <z_fatal_error+0xd4>)
   232b8:	4618      	mov	r0, r3
   232ba:	e9cd 3200 	strd	r3, r2, [sp]
   232be:	2201      	movs	r2, #1
   232c0:	f008 f862 	bl	2b388 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   232c4:	b196      	cbz	r6, 232ec <z_fatal_error+0x74>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   232c6:	69f3      	ldr	r3, [r6, #28]
   232c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   232cc:	b173      	cbz	r3, 232ec <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
   232ce:	683b      	ldr	r3, [r7, #0]
   232d0:	075a      	lsls	r2, r3, #29
   232d2:	d01b      	beq.n	2330c <z_fatal_error+0x94>
   232d4:	4b1e      	ldr	r3, [pc, #120]	; (23350 <z_fatal_error+0xd8>)
   232d6:	930c      	str	r3, [sp, #48]	; 0x30
   232d8:	2302      	movs	r3, #2
   232da:	9307      	str	r3, [sp, #28]
   232dc:	930b      	str	r3, [sp, #44]	; 0x2c
   232de:	4818      	ldr	r0, [pc, #96]	; (23340 <z_fatal_error+0xc8>)
   232e0:	2300      	movs	r3, #0
   232e2:	aa0b      	add	r2, sp, #44	; 0x2c
   232e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   232e8:	f002 fc7a 	bl	25be0 <z_impl_z_log_msg2_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   232ec:	683b      	ldr	r3, [r7, #0]
   232ee:	075b      	lsls	r3, r3, #29
   232f0:	d00c      	beq.n	2330c <z_fatal_error+0x94>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   232f2:	b9cc      	cbnz	r4, 23328 <z_fatal_error+0xb0>
		thread_name = "unknown";
   232f4:	4817      	ldr	r0, [pc, #92]	; (23354 <z_fatal_error+0xdc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   232f6:	4b18      	ldr	r3, [pc, #96]	; (23358 <z_fatal_error+0xe0>)
   232f8:	9301      	str	r3, [sp, #4]
   232fa:	2300      	movs	r3, #0
   232fc:	e9cd 4002 	strd	r4, r0, [sp, #8]
   23300:	490f      	ldr	r1, [pc, #60]	; (23340 <z_fatal_error+0xc8>)
   23302:	9300      	str	r3, [sp, #0]
   23304:	2201      	movs	r2, #1
   23306:	4618      	mov	r0, r3
   23308:	f008 f83e 	bl	2b388 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2330c:	4631      	mov	r1, r6
   2330e:	4628      	mov	r0, r5
   23310:	f7ff ff96 	bl	23240 <k_sys_fatal_error_handler>
	__asm__ volatile(
   23314:	f388 8811 	msr	BASEPRI, r8
   23318:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2331c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2331e:	b00e      	add	sp, #56	; 0x38
   23320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23324:	f7e7 bdb0 	b.w	ae88 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23328:	4620      	mov	r0, r4
   2332a:	f008 f8db 	bl	2b4e4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2332e:	2800      	cmp	r0, #0
   23330:	d0e0      	beq.n	232f4 <z_fatal_error+0x7c>
   23332:	7803      	ldrb	r3, [r0, #0]
   23334:	2b00      	cmp	r3, #0
   23336:	d0dd      	beq.n	232f4 <z_fatal_error+0x7c>
   23338:	e7dd      	b.n	232f6 <z_fatal_error+0x7e>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2333a:	2e00      	cmp	r6, #0
   2333c:	d1c3      	bne.n	232c6 <z_fatal_error+0x4e>
   2333e:	e7e5      	b.n	2330c <z_fatal_error+0x94>
   23340:	20000a30 	.word	0x20000a30
   23344:	0002e3f0 	.word	0x0002e3f0
   23348:	00031d06 	.word	0x00031d06
   2334c:	00031d14 	.word	0x00031d14
   23350:	00031d3c 	.word	0x00031d3c
   23354:	000301ee 	.word	0x000301ee
   23358:	00031d5d 	.word	0x00031d5d

0002335c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   2335c:	b570      	push	{r4, r5, r6, lr}
   2335e:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   23360:	ae06      	add	r6, sp, #24
{
   23362:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
   23364:	4603      	mov	r3, r0
   23366:	4a13      	ldr	r2, [pc, #76]	; (233b4 <init_idle_thread+0x58>)
	struct k_thread *thread = &z_idle_threads[i];
   23368:	4d13      	ldr	r5, [pc, #76]	; (233b8 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
   2336a:	2108      	movs	r1, #8
   2336c:	4630      	mov	r0, r6
   2336e:	f001 fc52 	bl	24c16 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
   23372:	23b8      	movs	r3, #184	; 0xb8
   23374:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   23378:	2201      	movs	r2, #1
   2337a:	230f      	movs	r3, #15
   2337c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   23380:	2300      	movs	r3, #0
   23382:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23386:	4b0d      	ldr	r3, [pc, #52]	; (233bc <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
   23388:	490d      	ldr	r1, [pc, #52]	; (233c0 <init_idle_thread+0x64>)
   2338a:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2338c:	2218      	movs	r2, #24
   2338e:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
   23392:	f44f 70b0 	mov.w	r0, #352	; 0x160
   23396:	9300      	str	r3, [sp, #0]
   23398:	fb00 1104 	mla	r1, r0, r4, r1
   2339c:	4b09      	ldr	r3, [pc, #36]	; (233c4 <init_idle_thread+0x68>)
   2339e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   233a2:	4628      	mov	r0, r5
   233a4:	f000 f98e 	bl	236c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   233a8:	7b6b      	ldrb	r3, [r5, #13]
   233aa:	f023 0304 	bic.w	r3, r3, #4
   233ae:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   233b0:	b008      	add	sp, #32
   233b2:	bd70      	pop	{r4, r5, r6, pc}
   233b4:	00031dbf 	.word	0x00031dbf
   233b8:	200021a8 	.word	0x200021a8
   233bc:	200047a8 	.word	0x200047a8
   233c0:	20008060 	.word	0x20008060
   233c4:	000238a5 	.word	0x000238a5

000233c8 <bg_thread_main>:
{
   233c8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   233ca:	4b0a      	ldr	r3, [pc, #40]	; (233f4 <bg_thread_main+0x2c>)
   233cc:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   233ce:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   233d0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   233d2:	f7ff fed7 	bl	23184 <z_sys_init_run_level>
	boot_banner();
   233d6:	f008 fd90 	bl	2befa <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   233da:	2003      	movs	r0, #3
   233dc:	f7ff fed2 	bl	23184 <z_sys_init_run_level>
	z_init_static_threads();
   233e0:	f000 fa04 	bl	237ec <z_init_static_threads>
	main();
   233e4:	f001 fb9d 	bl	24b22 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   233e8:	4a03      	ldr	r2, [pc, #12]	; (233f8 <bg_thread_main+0x30>)
   233ea:	7b13      	ldrb	r3, [r2, #12]
   233ec:	f023 0301 	bic.w	r3, r3, #1
   233f0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   233f2:	bd08      	pop	{r3, pc}
   233f4:	200049ce 	.word	0x200049ce
   233f8:	20002260 	.word	0x20002260

000233fc <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   233fc:	4802      	ldr	r0, [pc, #8]	; (23408 <z_bss_zero+0xc>)
   233fe:	4a03      	ldr	r2, [pc, #12]	; (2340c <z_bss_zero+0x10>)
   23400:	2100      	movs	r1, #0
   23402:	1a12      	subs	r2, r2, r0
   23404:	f005 b8e2 	b.w	285cc <memset>
   23408:	20000e20 	.word	0x20000e20
   2340c:	200049d0 	.word	0x200049d0

00023410 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   23410:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   23412:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 234dc <z_cstart+0xcc>
   23416:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   23418:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2341c:	4d30      	ldr	r5, [pc, #192]	; (234e0 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   2341e:	4e31      	ldr	r6, [pc, #196]	; (234e4 <z_cstart+0xd4>)
   23420:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23422:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 234e8 <z_cstart+0xd8>
   23426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2342a:	2400      	movs	r4, #0
   2342c:	616b      	str	r3, [r5, #20]
   2342e:	23e0      	movs	r3, #224	; 0xe0
   23430:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   23434:	77ec      	strb	r4, [r5, #31]
   23436:	762c      	strb	r4, [r5, #24]
   23438:	766c      	strb	r4, [r5, #25]
   2343a:	76ac      	strb	r4, [r5, #26]
   2343c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   23440:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23442:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   23446:	626b      	str	r3, [r5, #36]	; 0x24
   23448:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2344c:	f7e7 fce0 	bl	ae10 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   23450:	f7e6 ffc8 	bl	a3e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   23454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23458:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2345a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2345c:	f7e7 fde0 	bl	b020 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   23460:	f7e7 fd24 	bl	aeac <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   23464:	f7e2 fc78 	bl	5d58 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   23468:	f240 1301 	movw	r3, #257	; 0x101
   2346c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   23470:	ab06      	add	r3, sp, #24
   23472:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   23474:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
   23478:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2347a:	f007 ff62 	bl	2b342 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2347e:	4620      	mov	r0, r4
   23480:	f7ff fe80 	bl	23184 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   23484:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   23486:	4d19      	ldr	r5, [pc, #100]	; (234ec <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   23488:	f7ff fe7c 	bl	23184 <z_sys_init_run_level>
	z_sched_init();
   2348c:	f000 ff66 	bl	2435c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23490:	4b17      	ldr	r3, [pc, #92]	; (234f0 <z_cstart+0xe0>)
   23492:	9305      	str	r3, [sp, #20]
   23494:	2301      	movs	r3, #1
   23496:	4917      	ldr	r1, [pc, #92]	; (234f4 <z_cstart+0xe4>)
   23498:	9400      	str	r4, [sp, #0]
   2349a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2349e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   234a2:	464b      	mov	r3, r9
   234a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   234a8:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   234aa:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   234ac:	f000 f90a 	bl	236c4 <z_setup_new_thread>
   234b0:	7b6a      	ldrb	r2, [r5, #13]
   234b2:	4607      	mov	r7, r0
   234b4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   234b8:	4628      	mov	r0, r5
   234ba:	736a      	strb	r2, [r5, #13]
   234bc:	f008 fa58 	bl	2b970 <z_ready_thread>
		init_idle_thread(i);
   234c0:	4620      	mov	r0, r4
   234c2:	f7ff ff4b 	bl	2335c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   234c6:	4b0c      	ldr	r3, [pc, #48]	; (234f8 <z_cstart+0xe8>)
   234c8:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   234ca:	464a      	mov	r2, r9
   234cc:	4639      	mov	r1, r7
   234ce:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   234d0:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   234d2:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   234d6:	f7e7 f91d 	bl	a714 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   234da:	bf00      	nop
   234dc:	200089e0 	.word	0x200089e0
   234e0:	e000ed00 	.word	0xe000ed00
   234e4:	200047a8 	.word	0x200047a8
   234e8:	000233c9 	.word	0x000233c9
   234ec:	20002260 	.word	0x20002260
   234f0:	0002e58c 	.word	0x0002e58c
   234f4:	20007c40 	.word	0x20007c40
   234f8:	200021a8 	.word	0x200021a8

000234fc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   234fc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   234fe:	4c06      	ldr	r4, [pc, #24]	; (23518 <statics_init+0x1c>)
   23500:	4d06      	ldr	r5, [pc, #24]	; (2351c <statics_init+0x20>)
   23502:	42ac      	cmp	r4, r5
   23504:	d301      	bcc.n	2350a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   23506:	2000      	movs	r0, #0
   23508:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2350a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2350e:	4620      	mov	r0, r4
   23510:	f007 ff52 	bl	2b3b8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23514:	3414      	adds	r4, #20
   23516:	e7f4      	b.n	23502 <statics_init+0x6>
   23518:	20000afc 	.word	0x20000afc
   2351c:	20000afc 	.word	0x20000afc

00023520 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   23520:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23522:	4b0e      	ldr	r3, [pc, #56]	; (2355c <init_mem_slab_module+0x3c>)
   23524:	4c0e      	ldr	r4, [pc, #56]	; (23560 <init_mem_slab_module+0x40>)
   23526:	42a3      	cmp	r3, r4
   23528:	d301      	bcc.n	2352e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   2352a:	2000      	movs	r0, #0
	return rc;
}
   2352c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2352e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   23532:	ea41 0200 	orr.w	r2, r1, r0
   23536:	f012 0203 	ands.w	r2, r2, #3
   2353a:	d10b      	bne.n	23554 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   2353c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2353e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23540:	42aa      	cmp	r2, r5
   23542:	d101      	bne.n	23548 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23544:	331c      	adds	r3, #28
   23546:	e7ee      	b.n	23526 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   23548:	695e      	ldr	r6, [r3, #20]
   2354a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2354c:	3201      	adds	r2, #1
		slab->free_list = p;
   2354e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   23550:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   23552:	e7f5      	b.n	23540 <init_mem_slab_module+0x20>
	return rc;
   23554:	f06f 0015 	mvn.w	r0, #21
   23558:	e7e8      	b.n	2352c <init_mem_slab_module+0xc>
   2355a:	bf00      	nop
   2355c:	20000a8c 	.word	0x20000a8c
   23560:	20000afc 	.word	0x20000afc

00023564 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23564:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23566:	460c      	mov	r4, r1
	__asm__ volatile(
   23568:	f04f 0520 	mov.w	r5, #32
   2356c:	f3ef 8111 	mrs	r1, BASEPRI
   23570:	f385 8812 	msr	BASEPRI_MAX, r5
   23574:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   23578:	6945      	ldr	r5, [r0, #20]
   2357a:	b15d      	cbz	r5, 23594 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   2357c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2357e:	682b      	ldr	r3, [r5, #0]
   23580:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   23582:	6983      	ldr	r3, [r0, #24]
   23584:	3301      	adds	r3, #1
   23586:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23588:	2000      	movs	r0, #0
	__asm__ volatile(
   2358a:	f381 8811 	msr	BASEPRI, r1
   2358e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   23592:	e011      	b.n	235b8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   23594:	ea52 0c03 	orrs.w	ip, r2, r3
   23598:	d103      	bne.n	235a2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2359a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   2359c:	f06f 000b 	mvn.w	r0, #11
   235a0:	e7f3      	b.n	2358a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   235a2:	e9cd 2300 	strd	r2, r3, [sp]
   235a6:	4602      	mov	r2, r0
   235a8:	3008      	adds	r0, #8
   235aa:	f000 fe2d 	bl	24208 <z_pend_curr>
		if (result == 0) {
   235ae:	b918      	cbnz	r0, 235b8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   235b0:	4b02      	ldr	r3, [pc, #8]	; (235bc <k_mem_slab_alloc+0x58>)
   235b2:	689b      	ldr	r3, [r3, #8]
   235b4:	695b      	ldr	r3, [r3, #20]
   235b6:	6023      	str	r3, [r4, #0]
}
   235b8:	b003      	add	sp, #12
   235ba:	bd30      	pop	{r4, r5, pc}
   235bc:	200047a8 	.word	0x200047a8

000235c0 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   235c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235c2:	4605      	mov	r5, r0
   235c4:	460e      	mov	r6, r1
	__asm__ volatile(
   235c6:	f04f 0320 	mov.w	r3, #32
   235ca:	f3ef 8711 	mrs	r7, BASEPRI
   235ce:	f383 8812 	msr	BASEPRI_MAX, r3
   235d2:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   235d6:	4b06      	ldr	r3, [pc, #24]	; (235f0 <k_thread_foreach+0x30>)
   235d8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   235da:	b924      	cbnz	r4, 235e6 <k_thread_foreach+0x26>
	__asm__ volatile(
   235dc:	f387 8811 	msr	BASEPRI, r7
   235e0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   235e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   235e6:	4620      	mov	r0, r4
   235e8:	4631      	mov	r1, r6
   235ea:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   235ec:	6f64      	ldr	r4, [r4, #116]	; 0x74
   235ee:	e7f4      	b.n	235da <k_thread_foreach+0x1a>
   235f0:	200047a8 	.word	0x200047a8

000235f4 <z_thread_monitor_exit>:
	__asm__ volatile(
   235f4:	f04f 0320 	mov.w	r3, #32
   235f8:	f3ef 8111 	mrs	r1, BASEPRI
   235fc:	f383 8812 	msr	BASEPRI_MAX, r3
   23600:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   23604:	4a09      	ldr	r2, [pc, #36]	; (2362c <z_thread_monitor_exit+0x38>)
   23606:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23608:	4283      	cmp	r3, r0
   2360a:	d107      	bne.n	2361c <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   2360c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   2360e:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
   23610:	f381 8811 	msr	BASEPRI, r1
   23614:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   23618:	4770      	bx	lr
   2361a:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   2361c:	2b00      	cmp	r3, #0
   2361e:	d0f7      	beq.n	23610 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   23620:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   23622:	4282      	cmp	r2, r0
   23624:	d1f9      	bne.n	2361a <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   23626:	6f42      	ldr	r2, [r0, #116]	; 0x74
   23628:	675a      	str	r2, [r3, #116]	; 0x74
   2362a:	e7f1      	b.n	23610 <z_thread_monitor_exit+0x1c>
   2362c:	200047a8 	.word	0x200047a8

00023630 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   23630:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   23632:	4604      	mov	r4, r0
   23634:	b908      	cbnz	r0, 2363a <z_impl_k_thread_name_set+0xa>
		thread = _current;
   23636:	4b05      	ldr	r3, [pc, #20]	; (2364c <z_impl_k_thread_name_set+0x1c>)
   23638:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   2363a:	2220      	movs	r2, #32
   2363c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   23640:	f004 ff43 	bl	284ca <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23644:	2000      	movs	r0, #0
   23646:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   2364a:	bd10      	pop	{r4, pc}
   2364c:	200047a8 	.word	0x200047a8

00023650 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   23650:	7b43      	ldrb	r3, [r0, #13]
   23652:	2b10      	cmp	r3, #16
   23654:	d80e      	bhi.n	23674 <k_thread_state_str+0x24>
   23656:	2b10      	cmp	r3, #16
   23658:	d81c      	bhi.n	23694 <k_thread_state_str+0x44>
   2365a:	e8df f003 	tbb	[pc, r3]
   2365e:	091d      	.short	0x091d
   23660:	1b151b13 	.word	0x1b151b13
   23664:	1b171b1b 	.word	0x1b171b1b
   23668:	1b1b1b1b 	.word	0x1b1b1b1b
   2366c:	1b1b      	.short	0x1b1b
   2366e:	19          	.byte	0x19
   2366f:	00          	.byte	0x00
   23670:	480b      	ldr	r0, [pc, #44]	; (236a0 <k_thread_state_str+0x50>)
   23672:	4770      	bx	lr
   23674:	2b20      	cmp	r3, #32
   23676:	d011      	beq.n	2369c <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
   23678:	4a0a      	ldr	r2, [pc, #40]	; (236a4 <k_thread_state_str+0x54>)
   2367a:	480b      	ldr	r0, [pc, #44]	; (236a8 <k_thread_state_str+0x58>)
   2367c:	2b80      	cmp	r3, #128	; 0x80
   2367e:	bf08      	it	eq
   23680:	4610      	moveq	r0, r2
   23682:	4770      	bx	lr
		return "pending";
   23684:	4809      	ldr	r0, [pc, #36]	; (236ac <k_thread_state_str+0x5c>)
   23686:	4770      	bx	lr
		return "prestart";
   23688:	4809      	ldr	r0, [pc, #36]	; (236b0 <k_thread_state_str+0x60>)
   2368a:	4770      	bx	lr
		return "dead";
   2368c:	4809      	ldr	r0, [pc, #36]	; (236b4 <k_thread_state_str+0x64>)
   2368e:	4770      	bx	lr
		return "suspended";
   23690:	4809      	ldr	r0, [pc, #36]	; (236b8 <k_thread_state_str+0x68>)
   23692:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
   23694:	4804      	ldr	r0, [pc, #16]	; (236a8 <k_thread_state_str+0x58>)
   23696:	4770      	bx	lr
		return "";
   23698:	4808      	ldr	r0, [pc, #32]	; (236bc <k_thread_state_str+0x6c>)
   2369a:	4770      	bx	lr
		return "aborting";
   2369c:	4808      	ldr	r0, [pc, #32]	; (236c0 <k_thread_state_str+0x70>)
}
   2369e:	4770      	bx	lr
   236a0:	00031de2 	.word	0x00031de2
   236a4:	00031df1 	.word	0x00031df1
   236a8:	000301ee 	.word	0x000301ee
   236ac:	00031dcc 	.word	0x00031dcc
   236b0:	00031dd4 	.word	0x00031dd4
   236b4:	00031ddd 	.word	0x00031ddd
   236b8:	0002fa08 	.word	0x0002fa08
   236bc:	0002eae4 	.word	0x0002eae4
   236c0:	00031de8 	.word	0x00031de8

000236c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   236c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236c8:	b085      	sub	sp, #20
   236ca:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   236cc:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   236d0:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   236d4:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   236d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   236d8:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   236da:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   236de:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   236e0:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   236e2:	f101 0b20 	add.w	fp, r1, #32
	thread_base->thread_state = (uint8_t)initial_state;
   236e6:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   236e8:	f10a 0720 	add.w	r7, sl, #32

	thread_base->prio = priority;
   236ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
   236ee:	6085      	str	r5, [r0, #8]
{
   236f0:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   236f2:	e9c0 5506 	strd	r5, r5, [r0, #24]
   236f6:	460e      	mov	r6, r1
	thread_base->prio = priority;
   236f8:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
   236fa:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
   236fc:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
   236fe:	4652      	mov	r2, sl
   23700:	21aa      	movs	r1, #170	; 0xaa
   23702:	4658      	mov	r0, fp
{
   23704:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   23708:	f004 ff60 	bl	285cc <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2370c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2370e:	9302      	str	r3, [sp, #8]
   23710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23712:	9301      	str	r3, [sp, #4]
   23714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23716:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
   23718:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2371c:	4643      	mov	r3, r8
	new_thread->stack_info.delta = delta;
   2371e:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23722:	463a      	mov	r2, r7
   23724:	4631      	mov	r1, r6
   23726:	4620      	mov	r0, r4
   23728:	f7e6 ffc0 	bl	a6ac <arch_new_thread>
	new_thread->entry.parameter1 = p1;
   2372c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2372e:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   23730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23732:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   23734:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   23736:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   23738:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
   2373c:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   2373e:	f04f 0220 	mov.w	r2, #32
   23742:	f3ef 8311 	mrs	r3, BASEPRI
   23746:	f382 8812 	msr	BASEPRI_MAX, r2
   2374a:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   2374e:	4e10      	ldr	r6, [pc, #64]	; (23790 <z_setup_new_thread+0xcc>)
   23750:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   23752:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   23754:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
   23756:	f383 8811 	msr	BASEPRI, r3
   2375a:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   2375e:	f1b9 0f00 	cmp.w	r9, #0
   23762:	d011      	beq.n	23788 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
   23764:	221f      	movs	r2, #31
   23766:	4649      	mov	r1, r9
   23768:	f104 0078 	add.w	r0, r4, #120	; 0x78
   2376c:	f004 fead 	bl	284ca <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23770:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
   23774:	68b3      	ldr	r3, [r6, #8]
   23776:	b10b      	cbz	r3, 2377c <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
   23778:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
   2377c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   23780:	4638      	mov	r0, r7
   23782:	b005      	add	sp, #20
   23784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   23788:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
   2378c:	e7f2      	b.n	23774 <z_setup_new_thread+0xb0>
   2378e:	bf00      	nop
   23790:	200047a8 	.word	0x200047a8

00023794 <z_impl_k_thread_create>:
{
   23794:	b5f0      	push	{r4, r5, r6, r7, lr}
   23796:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23798:	2700      	movs	r7, #0
   2379a:	9705      	str	r7, [sp, #20]
   2379c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2379e:	9704      	str	r7, [sp, #16]
   237a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   237a2:	9703      	str	r7, [sp, #12]
   237a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   237a6:	9702      	str	r7, [sp, #8]
{
   237a8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   237ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   237ae:	9701      	str	r7, [sp, #4]
   237b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   237b2:	9700      	str	r7, [sp, #0]
{
   237b4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   237b6:	f7ff ff85 	bl	236c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   237ba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   237be:	bf08      	it	eq
   237c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   237c4:	d005      	beq.n	237d2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   237c6:	ea55 0306 	orrs.w	r3, r5, r6
   237ca:	d105      	bne.n	237d8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   237cc:	4620      	mov	r0, r4
   237ce:	f000 fcbf 	bl	24150 <z_sched_start>
}
   237d2:	4620      	mov	r0, r4
   237d4:	b007      	add	sp, #28
   237d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   237d8:	4903      	ldr	r1, [pc, #12]	; (237e8 <z_impl_k_thread_create+0x54>)
   237da:	4632      	mov	r2, r6
   237dc:	462b      	mov	r3, r5
   237de:	f104 0018 	add.w	r0, r4, #24
   237e2:	f000 ff71 	bl	246c8 <z_add_timeout>
   237e6:	e7f4      	b.n	237d2 <z_impl_k_thread_create+0x3e>
   237e8:	0002b991 	.word	0x0002b991

000237ec <z_init_static_threads>:
{
   237ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   237f0:	4c29      	ldr	r4, [pc, #164]	; (23898 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   237f2:	4d2a      	ldr	r5, [pc, #168]	; (2389c <z_init_static_threads+0xb0>)
{
   237f4:	b087      	sub	sp, #28
   237f6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   237f8:	42ae      	cmp	r6, r5
   237fa:	f104 0430 	add.w	r4, r4, #48	; 0x30
   237fe:	d30f      	bcc.n	23820 <z_init_static_threads+0x34>
	k_sched_lock();
   23800:	f000 fbc2 	bl	23f88 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23804:	4c24      	ldr	r4, [pc, #144]	; (23898 <z_init_static_threads+0xac>)
   23806:	f8df 9098 	ldr.w	r9, [pc, #152]	; 238a0 <z_init_static_threads+0xb4>
   2380a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2380e:	f240 37e7 	movw	r7, #999	; 0x3e7
   23812:	42ac      	cmp	r4, r5
   23814:	d320      	bcc.n	23858 <z_init_static_threads+0x6c>
}
   23816:	b007      	add	sp, #28
   23818:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2381c:	f000 bd82 	b.w	24324 <k_sched_unlock>
		z_setup_new_thread(
   23820:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23824:	9305      	str	r3, [sp, #20]
   23826:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2382a:	9304      	str	r3, [sp, #16]
   2382c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23830:	9303      	str	r3, [sp, #12]
   23832:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23836:	9302      	str	r3, [sp, #8]
   23838:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2383c:	9301      	str	r3, [sp, #4]
   2383e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23842:	9300      	str	r3, [sp, #0]
   23844:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23848:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2384c:	f7ff ff3a 	bl	236c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23850:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23854:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   23856:	e7ce      	b.n	237f6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23858:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2385a:	1c5a      	adds	r2, r3, #1
   2385c:	d00d      	beq.n	2387a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2385e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23862:	2100      	movs	r1, #0
   23864:	4638      	mov	r0, r7
   23866:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2386a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2386e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23872:	d104      	bne.n	2387e <z_init_static_threads+0x92>
	z_sched_start(thread);
   23874:	4640      	mov	r0, r8
   23876:	f000 fc6b 	bl	24150 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2387a:	3430      	adds	r4, #48	; 0x30
   2387c:	e7c9      	b.n	23812 <z_init_static_threads+0x26>
   2387e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23882:	2300      	movs	r3, #0
   23884:	f7dd fc3c 	bl	1100 <__aeabi_uldivmod>
   23888:	4602      	mov	r2, r0
   2388a:	460b      	mov	r3, r1
   2388c:	f108 0018 	add.w	r0, r8, #24
   23890:	4649      	mov	r1, r9
   23892:	f000 ff19 	bl	246c8 <z_add_timeout>
   23896:	e7f0      	b.n	2387a <z_init_static_threads+0x8e>
   23898:	20000a5c 	.word	0x20000a5c
   2389c:	20000a8c 	.word	0x20000a8c
   238a0:	0002b991 	.word	0x0002b991

000238a4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   238a4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   238a6:	4c0b      	ldr	r4, [pc, #44]	; (238d4 <idle+0x30>)
	return !z_sys_post_kernel;
   238a8:	4d0b      	ldr	r5, [pc, #44]	; (238d8 <idle+0x34>)
	__asm__ volatile(
   238aa:	f04f 0220 	mov.w	r2, #32
   238ae:	f3ef 8311 	mrs	r3, BASEPRI
   238b2:	f382 8812 	msr	BASEPRI_MAX, r2
   238b6:	f3bf 8f6f 	isb	sy
   238ba:	f008 f936 	bl	2bb2a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   238be:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   238c0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   238c2:	b913      	cbnz	r3, 238ca <idle+0x26>
	arch_cpu_idle();
   238c4:	f7e6 fd94 	bl	a3f0 <arch_cpu_idle>
}
   238c8:	e7ef      	b.n	238aa <idle+0x6>
   238ca:	f7e6 fb8b 	bl	9fe4 <pm_system_suspend>
   238ce:	2800      	cmp	r0, #0
   238d0:	d1eb      	bne.n	238aa <idle+0x6>
   238d2:	e7f7      	b.n	238c4 <idle+0x20>
   238d4:	200047a8 	.word	0x200047a8
   238d8:	200049ce 	.word	0x200049ce

000238dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   238dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   238e0:	4604      	mov	r4, r0
   238e2:	4617      	mov	r7, r2
   238e4:	461e      	mov	r6, r3
   238e6:	f04f 0320 	mov.w	r3, #32
   238ea:	f3ef 8811 	mrs	r8, BASEPRI
   238ee:	f383 8812 	msr	BASEPRI_MAX, r3
   238f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   238f6:	68c3      	ldr	r3, [r0, #12]
   238f8:	4a32      	ldr	r2, [pc, #200]	; (239c4 <z_impl_k_mutex_lock+0xe8>)
   238fa:	b16b      	cbz	r3, 23918 <z_impl_k_mutex_lock+0x3c>
   238fc:	6880      	ldr	r0, [r0, #8]
   238fe:	6891      	ldr	r1, [r2, #8]
   23900:	4288      	cmp	r0, r1
   23902:	d019      	beq.n	23938 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23904:	ea57 0306 	orrs.w	r3, r7, r6
   23908:	d118      	bne.n	2393c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2390a:	f388 8811 	msr	BASEPRI, r8
   2390e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23912:	f06f 000f 	mvn.w	r0, #15
   23916:	e00c      	b.n	23932 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   23918:	6891      	ldr	r1, [r2, #8]
   2391a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2391e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   23920:	3301      	adds	r3, #1
   23922:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23924:	6893      	ldr	r3, [r2, #8]
   23926:	60a3      	str	r3, [r4, #8]
   23928:	f388 8811 	msr	BASEPRI, r8
   2392c:	f3bf 8f6f 	isb	sy
		return 0;
   23930:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   23932:	b002      	add	sp, #8
   23934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23938:	6921      	ldr	r1, [r4, #16]
   2393a:	e7f0      	b.n	2391e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2393c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23940:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   23944:	4299      	cmp	r1, r3
   23946:	bfa8      	it	ge
   23948:	4619      	movge	r1, r3
   2394a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2394e:	4291      	cmp	r1, r2
   23950:	bfb8      	it	lt
   23952:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23954:	428b      	cmp	r3, r1
   23956:	dd2e      	ble.n	239b6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   23958:	f007 fde0 	bl	2b51c <adjust_owner_prio.isra.0>
   2395c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2395e:	e9cd 7600 	strd	r7, r6, [sp]
   23962:	4819      	ldr	r0, [pc, #100]	; (239c8 <z_impl_k_mutex_lock+0xec>)
   23964:	4622      	mov	r2, r4
   23966:	4641      	mov	r1, r8
   23968:	f000 fc4e 	bl	24208 <z_pend_curr>
	if (got_mutex == 0) {
   2396c:	2800      	cmp	r0, #0
   2396e:	d0e0      	beq.n	23932 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   23970:	f04f 0320 	mov.w	r3, #32
   23974:	f3ef 8611 	mrs	r6, BASEPRI
   23978:	f383 8812 	msr	BASEPRI_MAX, r3
   2397c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23980:	6823      	ldr	r3, [r4, #0]
   23982:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23984:	429c      	cmp	r4, r3
   23986:	d00a      	beq.n	2399e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23988:	b14b      	cbz	r3, 2399e <z_impl_k_mutex_lock+0xc2>
   2398a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2398e:	4299      	cmp	r1, r3
   23990:	bfa8      	it	ge
   23992:	4619      	movge	r1, r3
   23994:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   23998:	4299      	cmp	r1, r3
   2399a:	bfb8      	it	lt
   2399c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2399e:	68a0      	ldr	r0, [r4, #8]
   239a0:	f007 fdbc 	bl	2b51c <adjust_owner_prio.isra.0>
   239a4:	b900      	cbnz	r0, 239a8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   239a6:	b145      	cbz	r5, 239ba <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   239a8:	4807      	ldr	r0, [pc, #28]	; (239c8 <z_impl_k_mutex_lock+0xec>)
   239aa:	4631      	mov	r1, r6
   239ac:	f000 fada 	bl	23f64 <z_reschedule>
	return -EAGAIN;
   239b0:	f06f 000a 	mvn.w	r0, #10
   239b4:	e7bd      	b.n	23932 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   239b6:	2500      	movs	r5, #0
   239b8:	e7d1      	b.n	2395e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   239ba:	f386 8811 	msr	BASEPRI, r6
   239be:	f3bf 8f6f 	isb	sy
   239c2:	e7f5      	b.n	239b0 <z_impl_k_mutex_lock+0xd4>
   239c4:	200047a8 	.word	0x200047a8
   239c8:	200049cf 	.word	0x200049cf

000239cc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   239cc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   239ce:	6883      	ldr	r3, [r0, #8]
{
   239d0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   239d2:	2b00      	cmp	r3, #0
   239d4:	d033      	beq.n	23a3e <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   239d6:	4a1d      	ldr	r2, [pc, #116]	; (23a4c <z_impl_k_mutex_unlock+0x80>)
   239d8:	6892      	ldr	r2, [r2, #8]
   239da:	4293      	cmp	r3, r2
   239dc:	d132      	bne.n	23a44 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   239de:	7bda      	ldrb	r2, [r3, #15]
   239e0:	3a01      	subs	r2, #1
   239e2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   239e4:	68c3      	ldr	r3, [r0, #12]
   239e6:	2b01      	cmp	r3, #1
   239e8:	d905      	bls.n	239f6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   239ea:	3b01      	subs	r3, #1
   239ec:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   239ee:	f000 fc99 	bl	24324 <k_sched_unlock>

	return 0;
   239f2:	2000      	movs	r0, #0
}
   239f4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   239f6:	f04f 0320 	mov.w	r3, #32
   239fa:	f3ef 8511 	mrs	r5, BASEPRI
   239fe:	f383 8812 	msr	BASEPRI_MAX, r3
   23a02:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23a06:	6901      	ldr	r1, [r0, #16]
   23a08:	6880      	ldr	r0, [r0, #8]
   23a0a:	f007 fd87 	bl	2b51c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23a0e:	4620      	mov	r0, r4
   23a10:	f008 f81f 	bl	2ba52 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23a14:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23a16:	b160      	cbz	r0, 23a32 <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
   23a18:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23a1c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23a1e:	2200      	movs	r2, #0
   23a20:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   23a24:	f007 ffa4 	bl	2b970 <z_ready_thread>
		z_reschedule(&lock, key);
   23a28:	4809      	ldr	r0, [pc, #36]	; (23a50 <z_impl_k_mutex_unlock+0x84>)
   23a2a:	4629      	mov	r1, r5
   23a2c:	f000 fa9a 	bl	23f64 <z_reschedule>
   23a30:	e7dd      	b.n	239ee <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   23a32:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   23a34:	f385 8811 	msr	BASEPRI, r5
   23a38:	f3bf 8f6f 	isb	sy
   23a3c:	e7d7      	b.n	239ee <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   23a3e:	f06f 0015 	mvn.w	r0, #21
   23a42:	e7d7      	b.n	239f4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   23a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23a48:	e7d4      	b.n	239f4 <z_impl_k_mutex_unlock+0x28>
   23a4a:	bf00      	nop
   23a4c:	200047a8 	.word	0x200047a8
   23a50:	200049cf 	.word	0x200049cf

00023a54 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23a56:	4611      	mov	r1, r2
	__asm__ volatile(
   23a58:	f04f 0220 	mov.w	r2, #32
   23a5c:	f3ef 8511 	mrs	r5, BASEPRI
   23a60:	f382 8812 	msr	BASEPRI_MAX, r2
   23a64:	f3bf 8f6f 	isb	sy
   23a68:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   23a6a:	b19c      	cbz	r4, 23a94 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23a6c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23a6e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23a70:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23a74:	4294      	cmp	r4, r2
	list->head = node;
   23a76:	6003      	str	r3, [r0, #0]
	list->tail = node;
   23a78:	bf08      	it	eq
   23a7a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   23a7c:	2101      	movs	r1, #1
   23a7e:	4620      	mov	r0, r4
   23a80:	f007 fdc0 	bl	2b604 <z_queue_node_peek>
   23a84:	4604      	mov	r4, r0
	__asm__ volatile(
   23a86:	f385 8811 	msr	BASEPRI, r5
   23a8a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23a8e:	4620      	mov	r0, r4
   23a90:	b003      	add	sp, #12
   23a92:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23a94:	ea51 0203 	orrs.w	r2, r1, r3
   23a98:	d0f5      	beq.n	23a86 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23a9a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23a9e:	e9cd 1300 	strd	r1, r3, [sp]
   23aa2:	4610      	mov	r0, r2
   23aa4:	4629      	mov	r1, r5
   23aa6:	f000 fbaf 	bl	24208 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23aaa:	2800      	cmp	r0, #0
   23aac:	d1ef      	bne.n	23a8e <z_impl_k_queue_get+0x3a>
   23aae:	4b02      	ldr	r3, [pc, #8]	; (23ab8 <z_impl_k_queue_get+0x64>)
   23ab0:	689b      	ldr	r3, [r3, #8]
   23ab2:	695c      	ldr	r4, [r3, #20]
   23ab4:	e7eb      	b.n	23a8e <z_impl_k_queue_get+0x3a>
   23ab6:	bf00      	nop
   23ab8:	200047a8 	.word	0x200047a8

00023abc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23abc:	b538      	push	{r3, r4, r5, lr}
   23abe:	4604      	mov	r4, r0
	__asm__ volatile(
   23ac0:	f04f 0320 	mov.w	r3, #32
   23ac4:	f3ef 8511 	mrs	r5, BASEPRI
   23ac8:	f383 8812 	msr	BASEPRI_MAX, r3
   23acc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   23ad0:	f007 ffbf 	bl	2ba52 <z_unpend_first_thread>

	if (thread != NULL) {
   23ad4:	b150      	cbz	r0, 23aec <z_impl_k_sem_give+0x30>
   23ad6:	2200      	movs	r2, #0
   23ad8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   23adc:	f007 ff48 	bl	2b970 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23ae0:	4629      	mov	r1, r5
   23ae2:	4808      	ldr	r0, [pc, #32]	; (23b04 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   23ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   23ae8:	f000 ba3c 	b.w	23f64 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23aec:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23af0:	429a      	cmp	r2, r3
   23af2:	bf18      	it	ne
   23af4:	3301      	addne	r3, #1
   23af6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23af8:	2102      	movs	r1, #2
   23afa:	f104 0010 	add.w	r0, r4, #16
   23afe:	f008 f9da 	bl	2beb6 <z_handle_obj_poll_events>
}
   23b02:	e7ed      	b.n	23ae0 <z_impl_k_sem_give+0x24>
   23b04:	200049cf 	.word	0x200049cf

00023b08 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23b08:	b513      	push	{r0, r1, r4, lr}
   23b0a:	f04f 0420 	mov.w	r4, #32
   23b0e:	f3ef 8111 	mrs	r1, BASEPRI
   23b12:	f384 8812 	msr	BASEPRI_MAX, r4
   23b16:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   23b1a:	6884      	ldr	r4, [r0, #8]
   23b1c:	b144      	cbz	r4, 23b30 <z_impl_k_sem_take+0x28>
		sem->count--;
   23b1e:	3c01      	subs	r4, #1
   23b20:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   23b22:	f381 8811 	msr	BASEPRI, r1
   23b26:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23b2a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   23b2c:	b002      	add	sp, #8
   23b2e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23b30:	ea52 0403 	orrs.w	r4, r2, r3
   23b34:	d106      	bne.n	23b44 <z_impl_k_sem_take+0x3c>
   23b36:	f381 8811 	msr	BASEPRI, r1
   23b3a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23b3e:	f06f 000f 	mvn.w	r0, #15
   23b42:	e7f3      	b.n	23b2c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   23b44:	e9cd 2300 	strd	r2, r3, [sp]
   23b48:	4602      	mov	r2, r0
   23b4a:	4802      	ldr	r0, [pc, #8]	; (23b54 <z_impl_k_sem_take+0x4c>)
   23b4c:	f000 fb5c 	bl	24208 <z_pend_curr>
	return ret;
   23b50:	e7ec      	b.n	23b2c <z_impl_k_sem_take+0x24>
   23b52:	bf00      	nop
   23b54:	200049cf 	.word	0x200049cf

00023b58 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   23b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   23b5a:	4b09      	ldr	r3, [pc, #36]	; (23b80 <k_sys_work_q_init+0x28>)
   23b5c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   23b5e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   23b60:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   23b62:	9300      	str	r3, [sp, #0]
   23b64:	4907      	ldr	r1, [pc, #28]	; (23b84 <k_sys_work_q_init+0x2c>)
   23b66:	4808      	ldr	r0, [pc, #32]	; (23b88 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   23b68:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   23b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23b74:	f000 f914 	bl	23da0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   23b78:	4620      	mov	r0, r4
   23b7a:	b004      	add	sp, #16
   23b7c:	bd10      	pop	{r4, pc}
   23b7e:	bf00      	nop
   23b80:	00031df8 	.word	0x00031df8
   23b84:	200089e0 	.word	0x200089e0
   23b88:	20002318 	.word	0x20002318

00023b8c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   23b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   23b90:	4e47      	ldr	r6, [pc, #284]	; (23cb0 <work_queue_main+0x124>)
   23b92:	b085      	sub	sp, #20
   23b94:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   23b96:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   23b9a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   23b9e:	f04f 0320 	mov.w	r3, #32
   23ba2:	f3ef 8711 	mrs	r7, BASEPRI
   23ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   23baa:	f3bf 8f6f 	isb	sy
   23bae:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   23bb2:	b98d      	cbnz	r5, 23bd8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   23bb4:	2102      	movs	r1, #2
   23bb6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   23bba:	f007 fd9c 	bl	2b6f6 <flag_test_and_clear>
   23bbe:	2800      	cmp	r0, #0
   23bc0:	d135      	bne.n	23c2e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   23bc2:	2300      	movs	r3, #0
   23bc4:	e9cd 8900 	strd	r8, r9, [sp]
   23bc8:	9302      	str	r3, [sp, #8]
   23bca:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   23bce:	4639      	mov	r1, r7
   23bd0:	4838      	ldr	r0, [pc, #224]	; (23cb4 <work_queue_main+0x128>)
   23bd2:	f000 fcdd 	bl	24590 <z_sched_wait>
			continue;
   23bd6:	e7e2      	b.n	23b9e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23bd8:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
   23bdc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   23bde:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23be2:	4295      	cmp	r5, r2
   23be4:	d101      	bne.n	23bea <work_queue_main+0x5e>
	list->tail = node;
   23be6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
   23bea:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   23bee:	f043 0302 	orr.w	r3, r3, #2
   23bf2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   23bf6:	68eb      	ldr	r3, [r5, #12]
   23bf8:	f023 0304 	bic.w	r3, r3, #4
   23bfc:	f043 0301 	orr.w	r3, r3, #1
   23c00:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   23c02:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   23c04:	f387 8811 	msr	BASEPRI, r7
   23c08:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   23c0c:	4628      	mov	r0, r5
   23c0e:	4798      	blx	r3
	__asm__ volatile(
   23c10:	f04f 0320 	mov.w	r3, #32
   23c14:	f3ef 8b11 	mrs	fp, BASEPRI
   23c18:	f383 8812 	msr	BASEPRI_MAX, r3
   23c1c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   23c20:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23c22:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   23c24:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23c28:	d40b      	bmi.n	23c42 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   23c2a:	60ea      	str	r2, [r5, #12]
   23c2c:	e00e      	b.n	23c4c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   23c2e:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   23c32:	2200      	movs	r2, #0
   23c34:	2101      	movs	r1, #1
   23c36:	4628      	mov	r0, r5
   23c38:	f007 ff33 	bl	2baa2 <z_sched_wake>
   23c3c:	2800      	cmp	r0, #0
   23c3e:	d1f8      	bne.n	23c32 <work_queue_main+0xa6>
   23c40:	e7bf      	b.n	23bc2 <work_queue_main+0x36>
	return list->head;
   23c42:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   23c44:	f023 0303 	bic.w	r3, r3, #3
   23c48:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23c4a:	b970      	cbnz	r0, 23c6a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   23c4c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   23c50:	f023 0302 	bic.w	r3, r3, #2
   23c54:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
   23c58:	f38b 8811 	msr	BASEPRI, fp
   23c5c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   23c60:	05d8      	lsls	r0, r3, #23
   23c62:	d49c      	bmi.n	23b9e <work_queue_main+0x12>
	z_impl_k_yield();
   23c64:	f000 fb86 	bl	24374 <z_impl_k_yield>
}
   23c68:	e799      	b.n	23b9e <work_queue_main+0x12>
	return node->next;
   23c6a:	2700      	movs	r7, #0
   23c6c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   23c70:	463b      	mov	r3, r7
		if (wc->work == work) {
   23c72:	6842      	ldr	r2, [r0, #4]
   23c74:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   23c76:	4601      	mov	r1, r0
		if (wc->work == work) {
   23c78:	d10c      	bne.n	23c94 <work_queue_main+0x108>
	return node->next;
   23c7a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   23c7c:	b997      	cbnz	r7, 23ca4 <work_queue_main+0x118>
   23c7e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   23c80:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   23c82:	4282      	cmp	r2, r0
   23c84:	d100      	bne.n	23c88 <work_queue_main+0xfc>
	list->tail = node;
   23c86:	6071      	str	r1, [r6, #4]
	parent->next = child;
   23c88:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   23c8c:	f7ff ff16 	bl	23abc <z_impl_k_sem_give>
}
   23c90:	4639      	mov	r1, r7
   23c92:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23c94:	f1ba 0f00 	cmp.w	sl, #0
   23c98:	d0d8      	beq.n	23c4c <work_queue_main+0xc0>
	return node->next;
   23c9a:	4650      	mov	r0, sl
   23c9c:	460f      	mov	r7, r1
   23c9e:	f8da a000 	ldr.w	sl, [sl]
   23ca2:	e7e6      	b.n	23c72 <work_queue_main+0xe6>
	return list->tail;
   23ca4:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   23ca6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   23ca8:	4290      	cmp	r0, r2
	list->tail = node;
   23caa:	bf08      	it	eq
   23cac:	6077      	streq	r7, [r6, #4]
}
   23cae:	e7eb      	b.n	23c88 <work_queue_main+0xfc>
   23cb0:	200047d4 	.word	0x200047d4
   23cb4:	200049cf 	.word	0x200049cf

00023cb8 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   23cb8:	68c3      	ldr	r3, [r0, #12]
{
   23cba:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   23cbc:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   23cc0:	079b      	lsls	r3, r3, #30
{
   23cc2:	4605      	mov	r5, r0
   23cc4:	460c      	mov	r4, r1
	if (ret) {
   23cc6:	d50d      	bpl.n	23ce4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   23cc8:	2201      	movs	r2, #1
   23cca:	2100      	movs	r1, #0
   23ccc:	f104 0008 	add.w	r0, r4, #8
   23cd0:	f007 fd01 	bl	2b6d6 <z_impl_k_sem_init>
	parent->next = child;
   23cd4:	2300      	movs	r3, #0
   23cd6:	6023      	str	r3, [r4, #0]
	return list->tail;
   23cd8:	4b05      	ldr	r3, [pc, #20]	; (23cf0 <cancel_sync_locked+0x38>)
	canceler->work = work;
   23cda:	6065      	str	r5, [r4, #4]
   23cdc:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   23cde:	b91a      	cbnz	r2, 23ce8 <cancel_sync_locked+0x30>
	list->head = node;
   23ce0:	e9c3 4400 	strd	r4, r4, [r3]
}
   23ce4:	4630      	mov	r0, r6
   23ce6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   23ce8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23cea:	605c      	str	r4, [r3, #4]
}
   23cec:	e7fa      	b.n	23ce4 <cancel_sync_locked+0x2c>
   23cee:	bf00      	nop
   23cf0:	200047d4 	.word	0x200047d4

00023cf4 <submit_to_queue_locked>:
{
   23cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   23cf6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23cf8:	079a      	lsls	r2, r3, #30
{
   23cfa:	4604      	mov	r4, r0
   23cfc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23cfe:	f3c3 0540 	ubfx	r5, r3, #1, #1
   23d02:	d41f      	bmi.n	23d44 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   23d04:	075f      	lsls	r7, r3, #29
   23d06:	d41f      	bmi.n	23d48 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   23d08:	680a      	ldr	r2, [r1, #0]
   23d0a:	b90a      	cbnz	r2, 23d10 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   23d0c:	6882      	ldr	r2, [r0, #8]
   23d0e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   23d10:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   23d12:	bf44      	itt	mi
   23d14:	68a3      	ldrmi	r3, [r4, #8]
   23d16:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   23d18:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   23d1a:	bf4c      	ite	mi
   23d1c:	2502      	movmi	r5, #2
		ret = 1;
   23d1e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   23d20:	b37f      	cbz	r7, 23d82 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23d22:	4b1b      	ldr	r3, [pc, #108]	; (23d90 <submit_to_queue_locked+0x9c>)
   23d24:	689b      	ldr	r3, [r3, #8]
   23d26:	42bb      	cmp	r3, r7
   23d28:	d111      	bne.n	23d4e <submit_to_queue_locked+0x5a>
   23d2a:	f007 fbd5 	bl	2b4d8 <k_is_in_isr>
   23d2e:	f080 0001 	eor.w	r0, r0, #1
   23d32:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   23d34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23d38:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   23d3a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23d3e:	d523      	bpl.n	23d88 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   23d40:	b13a      	cbz	r2, 23d52 <submit_to_queue_locked+0x5e>
   23d42:	b940      	cbnz	r0, 23d56 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   23d44:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   23d48:	2300      	movs	r3, #0
   23d4a:	6033      	str	r3, [r6, #0]
	return ret;
   23d4c:	e013      	b.n	23d76 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23d4e:	2000      	movs	r0, #0
   23d50:	e7f0      	b.n	23d34 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   23d52:	071b      	lsls	r3, r3, #28
   23d54:	d4f6      	bmi.n	23d44 <submit_to_queue_locked+0x50>
	parent->next = child;
   23d56:	2300      	movs	r3, #0
   23d58:	6023      	str	r3, [r4, #0]
	return list->tail;
   23d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   23d5e:	b963      	cbnz	r3, 23d7a <submit_to_queue_locked+0x86>
	list->head = node;
   23d60:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
   23d64:	4638      	mov	r0, r7
   23d66:	f007 fcdf 	bl	2b728 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   23d6a:	68e3      	ldr	r3, [r4, #12]
   23d6c:	f043 0304 	orr.w	r3, r3, #4
   23d70:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   23d72:	6833      	ldr	r3, [r6, #0]
   23d74:	60a3      	str	r3, [r4, #8]
}
   23d76:	4628      	mov	r0, r5
   23d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   23d7a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23d7c:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
   23d80:	e7f0      	b.n	23d64 <submit_to_queue_locked+0x70>
		return -EINVAL;
   23d82:	f06f 0515 	mvn.w	r5, #21
   23d86:	e7df      	b.n	23d48 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   23d88:	f06f 0512 	mvn.w	r5, #18
   23d8c:	e7dc      	b.n	23d48 <submit_to_queue_locked+0x54>
   23d8e:	bf00      	nop
   23d90:	200047a8 	.word	0x200047a8

00023d94 <k_work_submit>:
{
   23d94:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   23d96:	4801      	ldr	r0, [pc, #4]	; (23d9c <k_work_submit+0x8>)
   23d98:	f007 bd26 	b.w	2b7e8 <k_work_submit_to_queue>
   23d9c:	20002318 	.word	0x20002318

00023da0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   23da0:	b5f0      	push	{r4, r5, r6, r7, lr}
   23da2:	b089      	sub	sp, #36	; 0x24
   23da4:	4604      	mov	r4, r0
	list->head = NULL;
   23da6:	2000      	movs	r0, #0
	list->tail = NULL;
   23da8:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
   23dac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23dae:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
   23db2:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
   23db6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   23dba:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   23dbe:	b31d      	cbz	r5, 23e08 <k_work_queue_start+0x68>
   23dc0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   23dc2:	2800      	cmp	r0, #0
   23dc4:	f240 1001 	movw	r0, #257	; 0x101
   23dc8:	bf08      	it	eq
   23dca:	2001      	moveq	r0, #1
	*flagp = flags;
   23dcc:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23dd0:	2000      	movs	r0, #0
   23dd2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23dd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   23dda:	e9cd 3003 	strd	r3, r0, [sp, #12]
   23dde:	e9cd 0001 	strd	r0, r0, [sp, #4]
   23de2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   23de6:	4b09      	ldr	r3, [pc, #36]	; (23e0c <k_work_queue_start+0x6c>)
   23de8:	9400      	str	r4, [sp, #0]
   23dea:	4620      	mov	r0, r4
   23dec:	f7ff fcd2 	bl	23794 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   23df0:	b125      	cbz	r5, 23dfc <k_work_queue_start+0x5c>
   23df2:	6829      	ldr	r1, [r5, #0]
   23df4:	b111      	cbz	r1, 23dfc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   23df6:	4620      	mov	r0, r4
   23df8:	f7ff fc1a 	bl	23630 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   23dfc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   23dfe:	b009      	add	sp, #36	; 0x24
   23e00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23e04:	f007 bb70 	b.w	2b4e8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   23e08:	2001      	movs	r0, #1
   23e0a:	e7df      	b.n	23dcc <k_work_queue_start+0x2c>
   23e0c:	00023b8d 	.word	0x00023b8d

00023e10 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   23e10:	b513      	push	{r0, r1, r4, lr}
   23e12:	9001      	str	r0, [sp, #4]
   23e14:	4608      	mov	r0, r1
	__asm__ volatile(
   23e16:	f04f 0120 	mov.w	r1, #32
   23e1a:	f3ef 8411 	mrs	r4, BASEPRI
   23e1e:	f381 8812 	msr	BASEPRI_MAX, r1
   23e22:	f3bf 8f6f 	isb	sy
	return *flagp;
   23e26:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   23e28:	f011 0f0e 	tst.w	r1, #14
   23e2c:	d116      	bne.n	23e5c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23e2e:	ea53 0c02 	orrs.w	ip, r3, r2
   23e32:	d108      	bne.n	23e46 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   23e34:	a901      	add	r1, sp, #4
   23e36:	f7ff ff5d 	bl	23cf4 <submit_to_queue_locked>
	__asm__ volatile(
   23e3a:	f384 8811 	msr	BASEPRI, r4
   23e3e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23e42:	b002      	add	sp, #8
   23e44:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   23e46:	f041 0108 	orr.w	r1, r1, #8
   23e4a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   23e4c:	9901      	ldr	r1, [sp, #4]
   23e4e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23e50:	3010      	adds	r0, #16
   23e52:	4903      	ldr	r1, [pc, #12]	; (23e60 <k_work_schedule_for_queue+0x50>)
   23e54:	f000 fc38 	bl	246c8 <z_add_timeout>
	return ret;
   23e58:	2001      	movs	r0, #1
   23e5a:	e7ee      	b.n	23e3a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   23e5c:	2000      	movs	r0, #0
   23e5e:	e7ec      	b.n	23e3a <k_work_schedule_for_queue+0x2a>
   23e60:	0002b799 	.word	0x0002b799

00023e64 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   23e64:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   23e66:	4801      	ldr	r0, [pc, #4]	; (23e6c <k_work_schedule+0x8>)
   23e68:	f7ff bfd2 	b.w	23e10 <k_work_schedule_for_queue>
   23e6c:	20002318 	.word	0x20002318

00023e70 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   23e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23e72:	460c      	mov	r4, r1
   23e74:	9001      	str	r0, [sp, #4]
   23e76:	4616      	mov	r6, r2
   23e78:	461d      	mov	r5, r3
	__asm__ volatile(
   23e7a:	f04f 0320 	mov.w	r3, #32
   23e7e:	f3ef 8711 	mrs	r7, BASEPRI
   23e82:	f383 8812 	msr	BASEPRI_MAX, r3
   23e86:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   23e8a:	4608      	mov	r0, r1
   23e8c:	f007 fc3e 	bl	2b70c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23e90:	ea55 0306 	orrs.w	r3, r5, r6
   23e94:	d109      	bne.n	23eaa <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   23e96:	a901      	add	r1, sp, #4
   23e98:	4620      	mov	r0, r4
   23e9a:	f7ff ff2b 	bl	23cf4 <submit_to_queue_locked>
	__asm__ volatile(
   23e9e:	f387 8811 	msr	BASEPRI, r7
   23ea2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23ea6:	b003      	add	sp, #12
   23ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23eaa:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23eac:	4906      	ldr	r1, [pc, #24]	; (23ec8 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   23eae:	f043 0308 	orr.w	r3, r3, #8
   23eb2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23eb4:	9b01      	ldr	r3, [sp, #4]
   23eb6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23eb8:	f104 0010 	add.w	r0, r4, #16
   23ebc:	4632      	mov	r2, r6
   23ebe:	462b      	mov	r3, r5
   23ec0:	f000 fc02 	bl	246c8 <z_add_timeout>
	return ret;
   23ec4:	2001      	movs	r0, #1
   23ec6:	e7ea      	b.n	23e9e <k_work_reschedule_for_queue+0x2e>
   23ec8:	0002b799 	.word	0x0002b799

00023ecc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   23ecc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   23ece:	4801      	ldr	r0, [pc, #4]	; (23ed4 <k_work_reschedule+0x8>)
   23ed0:	f7ff bfce 	b.w	23e70 <k_work_reschedule_for_queue>
   23ed4:	20002318 	.word	0x20002318

00023ed8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   23ed8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   23eda:	4c08      	ldr	r4, [pc, #32]	; (23efc <z_reset_time_slice+0x24>)
   23edc:	6823      	ldr	r3, [r4, #0]
   23ede:	b15b      	cbz	r3, 23ef8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   23ee0:	f7fd fba2 	bl	21628 <sys_clock_elapsed>
   23ee4:	4603      	mov	r3, r0
   23ee6:	6820      	ldr	r0, [r4, #0]
   23ee8:	4a05      	ldr	r2, [pc, #20]	; (23f00 <z_reset_time_slice+0x28>)
   23eea:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   23eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   23ef0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   23ef2:	2100      	movs	r1, #0
   23ef4:	f007 be29 	b.w	2bb4a <z_set_timeout_expiry>
}
   23ef8:	bd10      	pop	{r4, pc}
   23efa:	bf00      	nop
   23efc:	200047e4 	.word	0x200047e4
   23f00:	200047a8 	.word	0x200047a8

00023f04 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   23f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f06:	4604      	mov	r4, r0
   23f08:	460d      	mov	r5, r1
	__asm__ volatile(
   23f0a:	f04f 0320 	mov.w	r3, #32
   23f0e:	f3ef 8611 	mrs	r6, BASEPRI
   23f12:	f383 8812 	msr	BASEPRI_MAX, r3
   23f16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   23f1a:	4b0f      	ldr	r3, [pc, #60]	; (23f58 <k_sched_time_slice_set+0x54>)
   23f1c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   23f1e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   23f22:	f240 30e7 	movw	r0, #999	; 0x3e7
   23f26:	6119      	str	r1, [r3, #16]
   23f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23f2c:	2300      	movs	r3, #0
   23f2e:	fbe4 0107 	umlal	r0, r1, r4, r7
   23f32:	f7dd f8e5 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   23f36:	2c00      	cmp	r4, #0
   23f38:	4b08      	ldr	r3, [pc, #32]	; (23f5c <k_sched_time_slice_set+0x58>)
   23f3a:	dc09      	bgt.n	23f50 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   23f3c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   23f3e:	4b08      	ldr	r3, [pc, #32]	; (23f60 <k_sched_time_slice_set+0x5c>)
   23f40:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   23f42:	f7ff ffc9 	bl	23ed8 <z_reset_time_slice>
	__asm__ volatile(
   23f46:	f386 8811 	msr	BASEPRI, r6
   23f4a:	f3bf 8f6f 	isb	sy
	}
}
   23f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   23f50:	2802      	cmp	r0, #2
   23f52:	bfb8      	it	lt
   23f54:	2002      	movlt	r0, #2
   23f56:	e7f1      	b.n	23f3c <k_sched_time_slice_set+0x38>
   23f58:	200047a8 	.word	0x200047a8
   23f5c:	200047e4 	.word	0x200047e4
   23f60:	200047e0 	.word	0x200047e0

00023f64 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23f64:	b949      	cbnz	r1, 23f7a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23f66:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   23f6a:	b930      	cbnz	r0, 23f7a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   23f6c:	4b05      	ldr	r3, [pc, #20]	; (23f84 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   23f6e:	69da      	ldr	r2, [r3, #28]
   23f70:	689b      	ldr	r3, [r3, #8]
   23f72:	429a      	cmp	r2, r3
   23f74:	d001      	beq.n	23f7a <z_reschedule+0x16>
	ret = arch_swap(key);
   23f76:	f7e6 bb41 	b.w	a5fc <arch_swap>
   23f7a:	f381 8811 	msr	BASEPRI, r1
   23f7e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   23f82:	4770      	bx	lr
   23f84:	200047a8 	.word	0x200047a8

00023f88 <k_sched_lock>:
	__asm__ volatile(
   23f88:	f04f 0320 	mov.w	r3, #32
   23f8c:	f3ef 8111 	mrs	r1, BASEPRI
   23f90:	f383 8812 	msr	BASEPRI_MAX, r3
   23f94:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   23f98:	4b04      	ldr	r3, [pc, #16]	; (23fac <k_sched_lock+0x24>)
   23f9a:	689a      	ldr	r2, [r3, #8]
   23f9c:	7bd3      	ldrb	r3, [r2, #15]
   23f9e:	3b01      	subs	r3, #1
   23fa0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   23fa2:	f381 8811 	msr	BASEPRI, r1
   23fa6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   23faa:	4770      	bx	lr
   23fac:	200047a8 	.word	0x200047a8

00023fb0 <update_cache>:
{
   23fb0:	b538      	push	{r3, r4, r5, lr}
   23fb2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   23fb4:	480c      	ldr	r0, [pc, #48]	; (23fe8 <update_cache+0x38>)
   23fb6:	4d0d      	ldr	r5, [pc, #52]	; (23fec <update_cache+0x3c>)
   23fb8:	f007 fcd4 	bl	2b964 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   23fbc:	4604      	mov	r4, r0
   23fbe:	b900      	cbnz	r0, 23fc2 <update_cache+0x12>
   23fc0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   23fc2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   23fc4:	b94a      	cbnz	r2, 23fda <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   23fc6:	7b5a      	ldrb	r2, [r3, #13]
   23fc8:	06d2      	lsls	r2, r2, #27
   23fca:	d106      	bne.n	23fda <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23fcc:	69a2      	ldr	r2, [r4, #24]
   23fce:	b922      	cbnz	r2, 23fda <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   23fd0:	89da      	ldrh	r2, [r3, #14]
   23fd2:	2a7f      	cmp	r2, #127	; 0x7f
   23fd4:	d901      	bls.n	23fda <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   23fd6:	61eb      	str	r3, [r5, #28]
}
   23fd8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   23fda:	429c      	cmp	r4, r3
   23fdc:	d001      	beq.n	23fe2 <update_cache+0x32>
			z_reset_time_slice();
   23fde:	f7ff ff7b 	bl	23ed8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23fe2:	61ec      	str	r4, [r5, #28]
}
   23fe4:	e7f8      	b.n	23fd8 <update_cache+0x28>
   23fe6:	bf00      	nop
   23fe8:	200047c8 	.word	0x200047c8
   23fec:	200047a8 	.word	0x200047a8

00023ff0 <move_thread_to_end_of_prio_q>:
{
   23ff0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23ff2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   23ff6:	7b43      	ldrb	r3, [r0, #13]
   23ff8:	2a00      	cmp	r2, #0
{
   23ffa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23ffc:	da04      	bge.n	24008 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24002:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   24004:	f007 fc59 	bl	2b8ba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   24008:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2400a:	4a15      	ldr	r2, [pc, #84]	; (24060 <move_thread_to_end_of_prio_q+0x70>)
   2400c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24010:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   24012:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24016:	f102 0520 	add.w	r5, r2, #32
   2401a:	42ab      	cmp	r3, r5
   2401c:	d01b      	beq.n	24056 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2401e:	b1d3      	cbz	r3, 24056 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   24020:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   24024:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   24028:	4286      	cmp	r6, r0
   2402a:	d00f      	beq.n	2404c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   2402c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2402e:	2800      	cmp	r0, #0
   24030:	dd0c      	ble.n	2404c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   24032:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   24034:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   24038:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2403a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2403c:	6890      	ldr	r0, [r2, #8]
   2403e:	1a43      	subs	r3, r0, r1
   24040:	4258      	negs	r0, r3
}
   24042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   24046:	4158      	adcs	r0, r3
   24048:	f7ff bfb2 	b.w	23fb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2404c:	42a3      	cmp	r3, r4
   2404e:	d002      	beq.n	24056 <move_thread_to_end_of_prio_q+0x66>
   24050:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24052:	2b00      	cmp	r3, #0
   24054:	d1e6      	bne.n	24024 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   24056:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   2405a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2405c:	6251      	str	r1, [r2, #36]	; 0x24
}
   2405e:	e7ed      	b.n	2403c <move_thread_to_end_of_prio_q+0x4c>
   24060:	200047a8 	.word	0x200047a8

00024064 <z_time_slice>:
{
   24064:	b538      	push	{r3, r4, r5, lr}
   24066:	4601      	mov	r1, r0
	__asm__ volatile(
   24068:	f04f 0320 	mov.w	r3, #32
   2406c:	f3ef 8411 	mrs	r4, BASEPRI
   24070:	f383 8812 	msr	BASEPRI_MAX, r3
   24074:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   24078:	4b15      	ldr	r3, [pc, #84]	; (240d0 <z_time_slice+0x6c>)
   2407a:	4a16      	ldr	r2, [pc, #88]	; (240d4 <z_time_slice+0x70>)
   2407c:	6898      	ldr	r0, [r3, #8]
   2407e:	6815      	ldr	r5, [r2, #0]
   24080:	42a8      	cmp	r0, r5
   24082:	d106      	bne.n	24092 <z_time_slice+0x2e>
			z_reset_time_slice();
   24084:	f7ff ff28 	bl	23ed8 <z_reset_time_slice>
	__asm__ volatile(
   24088:	f384 8811 	msr	BASEPRI, r4
   2408c:	f3bf 8f6f 	isb	sy
}
   24090:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   24092:	2500      	movs	r5, #0
   24094:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   24096:	4a10      	ldr	r2, [pc, #64]	; (240d8 <z_time_slice+0x74>)
   24098:	6812      	ldr	r2, [r2, #0]
   2409a:	b1ba      	cbz	r2, 240cc <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   2409c:	89c2      	ldrh	r2, [r0, #14]
   2409e:	2a7f      	cmp	r2, #127	; 0x7f
   240a0:	d814      	bhi.n	240cc <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   240a2:	7b42      	ldrb	r2, [r0, #13]
   240a4:	06d2      	lsls	r2, r2, #27
   240a6:	d111      	bne.n	240cc <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   240a8:	4a0c      	ldr	r2, [pc, #48]	; (240dc <z_time_slice+0x78>)
   240aa:	f990 500e 	ldrsb.w	r5, [r0, #14]
   240ae:	6812      	ldr	r2, [r2, #0]
   240b0:	4295      	cmp	r5, r2
   240b2:	db0b      	blt.n	240cc <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   240b4:	4a0a      	ldr	r2, [pc, #40]	; (240e0 <z_time_slice+0x7c>)
   240b6:	4290      	cmp	r0, r2
   240b8:	d008      	beq.n	240cc <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   240ba:	691a      	ldr	r2, [r3, #16]
   240bc:	428a      	cmp	r2, r1
   240be:	dc02      	bgt.n	240c6 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   240c0:	f7ff ff96 	bl	23ff0 <move_thread_to_end_of_prio_q>
   240c4:	e7de      	b.n	24084 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   240c6:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   240c8:	611a      	str	r2, [r3, #16]
   240ca:	e7dd      	b.n	24088 <z_time_slice+0x24>
   240cc:	2200      	movs	r2, #0
   240ce:	e7fb      	b.n	240c8 <z_time_slice+0x64>
   240d0:	200047a8 	.word	0x200047a8
   240d4:	200047dc 	.word	0x200047dc
   240d8:	200047e4 	.word	0x200047e4
   240dc:	200047e0 	.word	0x200047e0
   240e0:	200021a8 	.word	0x200021a8

000240e4 <ready_thread>:
{
   240e4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   240e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   240ea:	7b43      	ldrb	r3, [r0, #13]
   240ec:	2a00      	cmp	r2, #0
   240ee:	db2a      	blt.n	24146 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   240f0:	06da      	lsls	r2, r3, #27
   240f2:	d128      	bne.n	24146 <ready_thread+0x62>
   240f4:	6982      	ldr	r2, [r0, #24]
   240f6:	bb32      	cbnz	r2, 24146 <ready_thread+0x62>
	return list->head == list;
   240f8:	4a14      	ldr	r2, [pc, #80]	; (2414c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   240fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   240fe:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   24100:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24104:	f102 0520 	add.w	r5, r2, #32
   24108:	42ab      	cmp	r3, r5
   2410a:	d017      	beq.n	2413c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2410c:	b1b3      	cbz	r3, 2413c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   2410e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24112:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   24116:	428e      	cmp	r6, r1
   24118:	d00b      	beq.n	24132 <ready_thread+0x4e>
		return b2 - b1;
   2411a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2411c:	2900      	cmp	r1, #0
   2411e:	dd08      	ble.n	24132 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   24120:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24122:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   24126:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   24128:	6058      	str	r0, [r3, #4]
}
   2412a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2412c:	2000      	movs	r0, #0
   2412e:	f7ff bf3f 	b.w	23fb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24132:	42a3      	cmp	r3, r4
   24134:	d002      	beq.n	2413c <ready_thread+0x58>
   24136:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24138:	2b00      	cmp	r3, #0
   2413a:	d1ea      	bne.n	24112 <ready_thread+0x2e>
	node->prev = tail;
   2413c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   24140:	6020      	str	r0, [r4, #0]
	list->tail = node;
   24142:	6250      	str	r0, [r2, #36]	; 0x24
}
   24144:	e7f1      	b.n	2412a <ready_thread+0x46>
}
   24146:	bc70      	pop	{r4, r5, r6}
   24148:	4770      	bx	lr
   2414a:	bf00      	nop
   2414c:	200047a8 	.word	0x200047a8

00024150 <z_sched_start>:
{
   24150:	b510      	push	{r4, lr}
	__asm__ volatile(
   24152:	f04f 0220 	mov.w	r2, #32
   24156:	f3ef 8411 	mrs	r4, BASEPRI
   2415a:	f382 8812 	msr	BASEPRI_MAX, r2
   2415e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   24162:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   24164:	0751      	lsls	r1, r2, #29
   24166:	d404      	bmi.n	24172 <z_sched_start+0x22>
	__asm__ volatile(
   24168:	f384 8811 	msr	BASEPRI, r4
   2416c:	f3bf 8f6f 	isb	sy
}
   24170:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24172:	f022 0204 	bic.w	r2, r2, #4
   24176:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   24178:	f7ff ffb4 	bl	240e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2417c:	4621      	mov	r1, r4
   2417e:	4802      	ldr	r0, [pc, #8]	; (24188 <z_sched_start+0x38>)
}
   24180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   24184:	f7ff beee 	b.w	23f64 <z_reschedule>
   24188:	200049cf 	.word	0x200049cf

0002418c <unready_thread>:
{
   2418c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2418e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   24192:	7b43      	ldrb	r3, [r0, #13]
   24194:	2a00      	cmp	r2, #0
{
   24196:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24198:	da04      	bge.n	241a4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2419a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2419e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   241a0:	f007 fb8b 	bl	2b8ba <sys_dlist_remove>
	update_cache(thread == _current);
   241a4:	4b04      	ldr	r3, [pc, #16]	; (241b8 <unready_thread+0x2c>)
   241a6:	6898      	ldr	r0, [r3, #8]
   241a8:	1a43      	subs	r3, r0, r1
   241aa:	4258      	negs	r0, r3
   241ac:	4158      	adcs	r0, r3
}
   241ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   241b2:	f7ff befd 	b.w	23fb0 <update_cache>
   241b6:	bf00      	nop
   241b8:	200047a8 	.word	0x200047a8

000241bc <pend>:
{
   241bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   241c0:	4606      	mov	r6, r0
   241c2:	4615      	mov	r5, r2
   241c4:	461c      	mov	r4, r3
	__asm__ volatile(
   241c6:	f04f 0320 	mov.w	r3, #32
   241ca:	f3ef 8711 	mrs	r7, BASEPRI
   241ce:	f383 8812 	msr	BASEPRI_MAX, r3
   241d2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   241d6:	f007 fbfd 	bl	2b9d4 <add_to_waitq_locked>
	__asm__ volatile(
   241da:	f387 8811 	msr	BASEPRI, r7
   241de:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   241e2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   241e6:	bf08      	it	eq
   241e8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   241ec:	d008      	beq.n	24200 <pend+0x44>
   241ee:	462a      	mov	r2, r5
   241f0:	4623      	mov	r3, r4
   241f2:	f106 0018 	add.w	r0, r6, #24
   241f6:	4903      	ldr	r1, [pc, #12]	; (24204 <pend+0x48>)
}
   241f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   241fc:	f000 ba64 	b.w	246c8 <z_add_timeout>
   24200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24204:	0002b991 	.word	0x0002b991

00024208 <z_pend_curr>:
{
   24208:	b510      	push	{r4, lr}
	pending_current = _current;
   2420a:	4b07      	ldr	r3, [pc, #28]	; (24228 <z_pend_curr+0x20>)
   2420c:	6898      	ldr	r0, [r3, #8]
   2420e:	4b07      	ldr	r3, [pc, #28]	; (2422c <z_pend_curr+0x24>)
{
   24210:	460c      	mov	r4, r1
	pending_current = _current;
   24212:	6018      	str	r0, [r3, #0]
{
   24214:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   24216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2421a:	f7ff ffcf 	bl	241bc <pend>
   2421e:	4620      	mov	r0, r4
}
   24220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24224:	f7e6 b9ea 	b.w	a5fc <arch_swap>
   24228:	200047a8 	.word	0x200047a8
   2422c:	200047dc 	.word	0x200047dc

00024230 <z_set_prio>:
{
   24230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24232:	4604      	mov	r4, r0
	__asm__ volatile(
   24234:	f04f 0320 	mov.w	r3, #32
   24238:	f3ef 8611 	mrs	r6, BASEPRI
   2423c:	f383 8812 	msr	BASEPRI_MAX, r3
   24240:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   24244:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24246:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   24248:	b249      	sxtb	r1, r1
   2424a:	d133      	bne.n	242b4 <z_set_prio+0x84>
		if (need_sched) {
   2424c:	6982      	ldr	r2, [r0, #24]
   2424e:	bb8a      	cbnz	r2, 242b4 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24254:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24256:	f007 fb30 	bl	2b8ba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2425a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2425c:	4a17      	ldr	r2, [pc, #92]	; (242bc <z_set_prio+0x8c>)
				thread->base.prio = prio;
   2425e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   24260:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24264:	7343      	strb	r3, [r0, #13]
   24266:	4610      	mov	r0, r2
   24268:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2426c:	4283      	cmp	r3, r0
   2426e:	d01b      	beq.n	242a8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24270:	b1d3      	cbz	r3, 242a8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   24272:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   24274:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   24278:	42a9      	cmp	r1, r5
   2427a:	d010      	beq.n	2429e <z_set_prio+0x6e>
		return b2 - b1;
   2427c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2427e:	2d00      	cmp	r5, #0
   24280:	dd0d      	ble.n	2429e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   24282:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24284:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24288:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2428a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2428c:	2001      	movs	r0, #1
   2428e:	f7ff fe8f 	bl	23fb0 <update_cache>
   24292:	2001      	movs	r0, #1
	__asm__ volatile(
   24294:	f386 8811 	msr	BASEPRI, r6
   24298:	f3bf 8f6f 	isb	sy
}
   2429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2429e:	42bb      	cmp	r3, r7
   242a0:	d002      	beq.n	242a8 <z_set_prio+0x78>
   242a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   242a4:	2b00      	cmp	r3, #0
   242a6:	d1e5      	bne.n	24274 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   242a8:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   242aa:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   242ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
   242b0:	6254      	str	r4, [r2, #36]	; 0x24
}
   242b2:	e7eb      	b.n	2428c <z_set_prio+0x5c>
			thread->base.prio = prio;
   242b4:	73a1      	strb	r1, [r4, #14]
   242b6:	2000      	movs	r0, #0
   242b8:	e7ec      	b.n	24294 <z_set_prio+0x64>
   242ba:	bf00      	nop
   242bc:	200047a8 	.word	0x200047a8

000242c0 <z_impl_k_thread_suspend>:
{
   242c0:	b570      	push	{r4, r5, r6, lr}
   242c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   242c4:	3018      	adds	r0, #24
   242c6:	f007 fc0a 	bl	2bade <z_abort_timeout>
	__asm__ volatile(
   242ca:	f04f 0320 	mov.w	r3, #32
   242ce:	f3ef 8611 	mrs	r6, BASEPRI
   242d2:	f383 8812 	msr	BASEPRI_MAX, r3
   242d6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   242da:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   242de:	7b63      	ldrb	r3, [r4, #13]
   242e0:	2a00      	cmp	r2, #0
   242e2:	da05      	bge.n	242f0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   242e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   242e8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   242ea:	4620      	mov	r0, r4
   242ec:	f007 fae5 	bl	2b8ba <sys_dlist_remove>
		update_cache(thread == _current);
   242f0:	4d0b      	ldr	r5, [pc, #44]	; (24320 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   242f2:	7b63      	ldrb	r3, [r4, #13]
   242f4:	68a8      	ldr	r0, [r5, #8]
   242f6:	f043 0310 	orr.w	r3, r3, #16
   242fa:	7363      	strb	r3, [r4, #13]
   242fc:	1b03      	subs	r3, r0, r4
   242fe:	4258      	negs	r0, r3
   24300:	4158      	adcs	r0, r3
   24302:	f7ff fe55 	bl	23fb0 <update_cache>
	__asm__ volatile(
   24306:	f386 8811 	msr	BASEPRI, r6
   2430a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2430e:	68ab      	ldr	r3, [r5, #8]
   24310:	42a3      	cmp	r3, r4
   24312:	d103      	bne.n	2431c <z_impl_k_thread_suspend+0x5c>
}
   24314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24318:	f007 bb1a 	b.w	2b950 <z_reschedule_unlocked>
}
   2431c:	bd70      	pop	{r4, r5, r6, pc}
   2431e:	bf00      	nop
   24320:	200047a8 	.word	0x200047a8

00024324 <k_sched_unlock>:
{
   24324:	b510      	push	{r4, lr}
	__asm__ volatile(
   24326:	f04f 0320 	mov.w	r3, #32
   2432a:	f3ef 8411 	mrs	r4, BASEPRI
   2432e:	f383 8812 	msr	BASEPRI_MAX, r3
   24332:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   24336:	4b08      	ldr	r3, [pc, #32]	; (24358 <k_sched_unlock+0x34>)
   24338:	689a      	ldr	r2, [r3, #8]
   2433a:	7bd3      	ldrb	r3, [r2, #15]
   2433c:	3301      	adds	r3, #1
   2433e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   24340:	2000      	movs	r0, #0
   24342:	f7ff fe35 	bl	23fb0 <update_cache>
	__asm__ volatile(
   24346:	f384 8811 	msr	BASEPRI, r4
   2434a:	f3bf 8f6f 	isb	sy
}
   2434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   24352:	f007 bafd 	b.w	2b950 <z_reschedule_unlocked>
   24356:	bf00      	nop
   24358:	200047a8 	.word	0x200047a8

0002435c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2435c:	4b04      	ldr	r3, [pc, #16]	; (24370 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2435e:	2100      	movs	r1, #0
   24360:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   24364:	e9c3 2208 	strd	r2, r2, [r3, #32]
   24368:	4608      	mov	r0, r1
   2436a:	f7ff bdcb 	b.w	23f04 <k_sched_time_slice_set>
   2436e:	bf00      	nop
   24370:	200047a8 	.word	0x200047a8

00024374 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   24374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   24376:	f04f 0320 	mov.w	r3, #32
   2437a:	f3ef 8511 	mrs	r5, BASEPRI
   2437e:	f383 8812 	msr	BASEPRI_MAX, r3
   24382:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   24386:	491a      	ldr	r1, [pc, #104]	; (243f0 <z_impl_k_yield+0x7c>)
   24388:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2438a:	7b43      	ldrb	r3, [r0, #13]
   2438c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24390:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24392:	f007 fa92 	bl	2b8ba <sys_dlist_remove>
	}
	queue_thread(_current);
   24396:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   24398:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2439a:	4608      	mov	r0, r1
   2439c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   243a0:	735a      	strb	r2, [r3, #13]
   243a2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243a6:	4282      	cmp	r2, r0
   243a8:	d01c      	beq.n	243e4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243aa:	b1da      	cbz	r2, 243e4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   243ac:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   243ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   243b2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   243b6:	42a6      	cmp	r6, r4
   243b8:	d00f      	beq.n	243da <z_impl_k_yield+0x66>
		return b2 - b1;
   243ba:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   243bc:	2c00      	cmp	r4, #0
   243be:	dd0c      	ble.n	243da <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   243c0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   243c2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   243c6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   243c8:	6053      	str	r3, [r2, #4]
	update_cache(1);
   243ca:	2001      	movs	r0, #1
   243cc:	f7ff fdf0 	bl	23fb0 <update_cache>
   243d0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   243d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   243d6:	f7e6 b911 	b.w	a5fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   243da:	42ba      	cmp	r2, r7
   243dc:	d002      	beq.n	243e4 <z_impl_k_yield+0x70>
   243de:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243e0:	2a00      	cmp	r2, #0
   243e2:	d1e6      	bne.n	243b2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   243e4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   243e6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   243ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
   243ec:	624b      	str	r3, [r1, #36]	; 0x24
}
   243ee:	e7ec      	b.n	243ca <z_impl_k_yield+0x56>
   243f0:	200047a8 	.word	0x200047a8

000243f4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   243f4:	ea50 0301 	orrs.w	r3, r0, r1
{
   243f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243fc:	4605      	mov	r5, r0
   243fe:	460e      	mov	r6, r1
	if (ticks == 0) {
   24400:	d103      	bne.n	2440a <z_tick_sleep+0x16>
	z_impl_k_yield();
   24402:	f7ff ffb7 	bl	24374 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   24406:	2000      	movs	r0, #0
   24408:	e033      	b.n	24472 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   2440a:	f06f 0401 	mvn.w	r4, #1
   2440e:	1a24      	subs	r4, r4, r0
   24410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24414:	eb63 0301 	sbc.w	r3, r3, r1
   24418:	2c01      	cmp	r4, #1
   2441a:	f173 0300 	sbcs.w	r3, r3, #0
   2441e:	da02      	bge.n	24426 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   24420:	f007 fbad 	bl	2bb7e <sys_clock_tick_get_32>
   24424:	1944      	adds	r4, r0, r5
   24426:	f04f 0320 	mov.w	r3, #32
   2442a:	f3ef 8811 	mrs	r8, BASEPRI
   2442e:	f383 8812 	msr	BASEPRI_MAX, r3
   24432:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   24436:	4f10      	ldr	r7, [pc, #64]	; (24478 <z_tick_sleep+0x84>)
   24438:	4b10      	ldr	r3, [pc, #64]	; (2447c <z_tick_sleep+0x88>)
   2443a:	68b8      	ldr	r0, [r7, #8]
   2443c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2443e:	f7ff fea5 	bl	2418c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   24442:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24444:	490e      	ldr	r1, [pc, #56]	; (24480 <z_tick_sleep+0x8c>)
   24446:	462a      	mov	r2, r5
   24448:	4633      	mov	r3, r6
   2444a:	3018      	adds	r0, #24
   2444c:	f000 f93c 	bl	246c8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24450:	68ba      	ldr	r2, [r7, #8]
   24452:	7b53      	ldrb	r3, [r2, #13]
   24454:	f043 0310 	orr.w	r3, r3, #16
   24458:	7353      	strb	r3, [r2, #13]
   2445a:	4640      	mov	r0, r8
   2445c:	f7e6 f8ce 	bl	a5fc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   24460:	f007 fb8d 	bl	2bb7e <sys_clock_tick_get_32>
   24464:	1a20      	subs	r0, r4, r0
   24466:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2446a:	2801      	cmp	r0, #1
   2446c:	f173 0300 	sbcs.w	r3, r3, #0
   24470:	dbc9      	blt.n	24406 <z_tick_sleep+0x12>
}
   24472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24476:	bf00      	nop
   24478:	200047a8 	.word	0x200047a8
   2447c:	200047dc 	.word	0x200047dc
   24480:	0002b991 	.word	0x0002b991

00024484 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24484:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   24488:	bf08      	it	eq
   2448a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2448e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24490:	d106      	bne.n	244a0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   24492:	4b08      	ldr	r3, [pc, #32]	; (244b4 <z_impl_k_sleep+0x30>)
   24494:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24496:	f7ff ff13 	bl	242c0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2449a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2449e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   244a0:	f7ff ffa8 	bl	243f4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   244a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   244a8:	fb80 0303 	smull	r0, r3, r0, r3
   244ac:	0bc0      	lsrs	r0, r0, #15
   244ae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   244b2:	e7f4      	b.n	2449e <z_impl_k_sleep+0x1a>
   244b4:	200047a8 	.word	0x200047a8

000244b8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   244b8:	4b01      	ldr	r3, [pc, #4]	; (244c0 <z_impl_z_current_get+0x8>)
   244ba:	6898      	ldr	r0, [r3, #8]
   244bc:	4770      	bx	lr
   244be:	bf00      	nop
   244c0:	200047a8 	.word	0x200047a8

000244c4 <z_impl_k_is_preempt_thread>:
   244c4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   244c8:	b93b      	cbnz	r3, 244da <z_impl_k_is_preempt_thread+0x16>
   244ca:	4b05      	ldr	r3, [pc, #20]	; (244e0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   244cc:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   244ce:	89d8      	ldrh	r0, [r3, #14]
   244d0:	287f      	cmp	r0, #127	; 0x7f
   244d2:	bf8c      	ite	hi
   244d4:	2000      	movhi	r0, #0
   244d6:	2001      	movls	r0, #1
   244d8:	4770      	bx	lr
   244da:	2000      	movs	r0, #0
}
   244dc:	4770      	bx	lr
   244de:	bf00      	nop
   244e0:	200047a8 	.word	0x200047a8

000244e4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   244e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   244e8:	4604      	mov	r4, r0
   244ea:	f04f 0320 	mov.w	r3, #32
   244ee:	f3ef 8611 	mrs	r6, BASEPRI
   244f2:	f383 8812 	msr	BASEPRI_MAX, r3
   244f6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   244fa:	7b43      	ldrb	r3, [r0, #13]
   244fc:	071a      	lsls	r2, r3, #28
   244fe:	d505      	bpl.n	2450c <z_thread_abort+0x28>
	__asm__ volatile(
   24500:	f386 8811 	msr	BASEPRI, r6
   24504:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2450c:	f023 0220 	bic.w	r2, r3, #32
   24510:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   24514:	09d2      	lsrs	r2, r2, #7
   24516:	d123      	bne.n	24560 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24518:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2451a:	68a3      	ldr	r3, [r4, #8]
   2451c:	b113      	cbz	r3, 24524 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   2451e:	4620      	mov	r0, r4
   24520:	f007 f9d3 	bl	2b8ca <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   24524:	f104 0018 	add.w	r0, r4, #24
   24528:	f007 fad9 	bl	2bade <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2452c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   24530:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   24534:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24536:	42bd      	cmp	r5, r7
   24538:	d000      	beq.n	2453c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2453a:	b9cd      	cbnz	r5, 24570 <z_thread_abort+0x8c>
		update_cache(1);
   2453c:	2001      	movs	r0, #1
   2453e:	f7ff fd37 	bl	23fb0 <update_cache>
		z_thread_monitor_exit(thread);
   24542:	4620      	mov	r0, r4
   24544:	f7ff f856 	bl	235f4 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   24548:	4b10      	ldr	r3, [pc, #64]	; (2458c <z_thread_abort+0xa8>)
   2454a:	689b      	ldr	r3, [r3, #8]
   2454c:	42a3      	cmp	r3, r4
   2454e:	d1d7      	bne.n	24500 <z_thread_abort+0x1c>
   24550:	f3ef 8305 	mrs	r3, IPSR
   24554:	2b00      	cmp	r3, #0
   24556:	d1d3      	bne.n	24500 <z_thread_abort+0x1c>
   24558:	4630      	mov	r0, r6
   2455a:	f7e6 f84f 	bl	a5fc <arch_swap>
	return ret;
   2455e:	e7cf      	b.n	24500 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24560:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   24564:	f043 0308 	orr.w	r3, r3, #8
   24568:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2456a:	f007 f9a6 	bl	2b8ba <sys_dlist_remove>
}
   2456e:	e7d4      	b.n	2451a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   24570:	4628      	mov	r0, r5
   24572:	f007 f9aa 	bl	2b8ca <unpend_thread_no_timeout>
   24576:	f105 0018 	add.w	r0, r5, #24
   2457a:	f007 fab0 	bl	2bade <z_abort_timeout>
   2457e:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
   24582:	4628      	mov	r0, r5
   24584:	f7ff fdae 	bl	240e4 <ready_thread>
   24588:	e7d4      	b.n	24534 <z_thread_abort+0x50>
   2458a:	bf00      	nop
   2458c:	200047a8 	.word	0x200047a8

00024590 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   24590:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24592:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   24596:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24598:	e9cd 6700 	strd	r6, r7, [sp]
   2459c:	f7ff fe34 	bl	24208 <z_pend_curr>

	if (data != NULL) {
   245a0:	b11c      	cbz	r4, 245aa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   245a2:	4b03      	ldr	r3, [pc, #12]	; (245b0 <z_sched_wait+0x20>)
   245a4:	689b      	ldr	r3, [r3, #8]
   245a6:	695b      	ldr	r3, [r3, #20]
   245a8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   245aa:	b002      	add	sp, #8
   245ac:	bdd0      	pop	{r4, r6, r7, pc}
   245ae:	bf00      	nop
   245b0:	200047a8 	.word	0x200047a8

000245b4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   245b4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   245b6:	4806      	ldr	r0, [pc, #24]	; (245d0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   245b8:	4a06      	ldr	r2, [pc, #24]	; (245d4 <z_data_copy+0x20>)
   245ba:	4907      	ldr	r1, [pc, #28]	; (245d8 <z_data_copy+0x24>)
   245bc:	1a12      	subs	r2, r2, r0
   245be:	f003 fffa 	bl	285b6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   245c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   245c6:	4a05      	ldr	r2, [pc, #20]	; (245dc <z_data_copy+0x28>)
   245c8:	4905      	ldr	r1, [pc, #20]	; (245e0 <z_data_copy+0x2c>)
   245ca:	4806      	ldr	r0, [pc, #24]	; (245e4 <z_data_copy+0x30>)
   245cc:	f003 bff3 	b.w	285b6 <memcpy>
   245d0:	20000000 	.word	0x20000000
   245d4:	20000e1c 	.word	0x20000e1c
   245d8:	00031e04 	.word	0x00031e04
   245dc:	00000000 	.word	0x00000000
   245e0:	00031e04 	.word	0x00031e04
   245e4:	20000000 	.word	0x20000000

000245e8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   245e8:	4b03      	ldr	r3, [pc, #12]	; (245f8 <elapsed+0x10>)
   245ea:	681b      	ldr	r3, [r3, #0]
   245ec:	b90b      	cbnz	r3, 245f2 <elapsed+0xa>
   245ee:	f7fd b81b 	b.w	21628 <sys_clock_elapsed>
}
   245f2:	2000      	movs	r0, #0
   245f4:	4770      	bx	lr
   245f6:	bf00      	nop
   245f8:	200047e8 	.word	0x200047e8

000245fc <next_timeout>:
	return list->head == list;
   245fc:	4b10      	ldr	r3, [pc, #64]	; (24640 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   245fe:	b510      	push	{r4, lr}
   24600:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24602:	429c      	cmp	r4, r3
   24604:	bf08      	it	eq
   24606:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24608:	f7ff ffee 	bl	245e8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   2460c:	b1a4      	cbz	r4, 24638 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2460e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   24612:	1a1b      	subs	r3, r3, r0
   24614:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   24618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2461c:	f170 0200 	sbcs.w	r2, r0, #0
   24620:	da0a      	bge.n	24638 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   24622:	2800      	cmp	r0, #0
   24624:	bfac      	ite	ge
   24626:	4618      	movge	r0, r3
   24628:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2462a:	4b06      	ldr	r3, [pc, #24]	; (24644 <next_timeout+0x48>)
   2462c:	691b      	ldr	r3, [r3, #16]
   2462e:	b113      	cbz	r3, 24636 <next_timeout+0x3a>
   24630:	4298      	cmp	r0, r3
   24632:	bfa8      	it	ge
   24634:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24636:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   24638:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2463c:	e7f5      	b.n	2462a <next_timeout+0x2e>
   2463e:	bf00      	nop
   24640:	20000878 	.word	0x20000878
   24644:	200047a8 	.word	0x200047a8

00024648 <remove_timeout>:
{
   24648:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2464a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2464c:	b168      	cbz	r0, 2466a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2464e:	4a0a      	ldr	r2, [pc, #40]	; (24678 <remove_timeout+0x30>)
   24650:	6852      	ldr	r2, [r2, #4]
   24652:	4290      	cmp	r0, r2
   24654:	d009      	beq.n	2466a <remove_timeout+0x22>
	if (next(t) != NULL) {
   24656:	b143      	cbz	r3, 2466a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24658:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2465c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24660:	1912      	adds	r2, r2, r4
   24662:	eb41 0105 	adc.w	r1, r1, r5
   24666:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2466a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   2466c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2466e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24670:	2300      	movs	r3, #0
	node->prev = NULL;
   24672:	e9c0 3300 	strd	r3, r3, [r0]
}
   24676:	bd30      	pop	{r4, r5, pc}
   24678:	20000878 	.word	0x20000878

0002467c <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   2467c:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   2467e:	6804      	ldr	r4, [r0, #0]
   24680:	b1e4      	cbz	r4, 246bc <timeout_rem+0x40>
	return list->head == list;
   24682:	4a10      	ldr	r2, [pc, #64]	; (246c4 <timeout_rem+0x48>)
   24684:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24686:	4293      	cmp	r3, r2
   24688:	d015      	beq.n	246b6 <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   2468a:	2400      	movs	r4, #0
   2468c:	6851      	ldr	r1, [r2, #4]
   2468e:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   24690:	b933      	cbnz	r3, 246a0 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   24692:	f7ff ffa9 	bl	245e8 <elapsed>
   24696:	4601      	mov	r1, r0
   24698:	1a20      	subs	r0, r4, r0
   2469a:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   2469e:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   246a0:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   246a4:	18a4      	adds	r4, r4, r2
   246a6:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   246aa:	4283      	cmp	r3, r0
   246ac:	d0f1      	beq.n	24692 <timeout_rem+0x16>
   246ae:	428b      	cmp	r3, r1
   246b0:	d0ef      	beq.n	24692 <timeout_rem+0x16>
   246b2:	681b      	ldr	r3, [r3, #0]
   246b4:	e7ec      	b.n	24690 <timeout_rem+0x14>
   246b6:	2400      	movs	r4, #0
   246b8:	4625      	mov	r5, r4
   246ba:	e7ea      	b.n	24692 <timeout_rem+0x16>
		return 0;
   246bc:	4620      	mov	r0, r4
   246be:	4621      	mov	r1, r4
   246c0:	e7ed      	b.n	2469e <timeout_rem+0x22>
   246c2:	bf00      	nop
   246c4:	20000878 	.word	0x20000878

000246c8 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   246c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   246cc:	bf08      	it	eq
   246ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   246d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246d4:	4604      	mov	r4, r0
   246d6:	461f      	mov	r7, r3
   246d8:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   246da:	d067      	beq.n	247ac <z_add_timeout+0xe4>
	to->fn = fn;
   246dc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   246de:	f04f 0320 	mov.w	r3, #32
   246e2:	f3ef 8611 	mrs	r6, BASEPRI
   246e6:	f383 8812 	msr	BASEPRI_MAX, r3
   246ea:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   246ee:	f06f 0201 	mvn.w	r2, #1
   246f2:	1b53      	subs	r3, r2, r5
   246f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   246f8:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   246fc:	2b00      	cmp	r3, #0
   246fe:	db1b      	blt.n	24738 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24700:	4b2b      	ldr	r3, [pc, #172]	; (247b0 <z_add_timeout+0xe8>)
   24702:	e9d3 1300 	ldrd	r1, r3, [r3]
   24706:	1a52      	subs	r2, r2, r1
   24708:	eb6c 0303 	sbc.w	r3, ip, r3
   2470c:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   2470e:	eb63 0307 	sbc.w	r3, r3, r7
   24712:	2d01      	cmp	r5, #1
   24714:	f173 0200 	sbcs.w	r2, r3, #0
   24718:	bfbc      	itt	lt
   2471a:	2501      	movlt	r5, #1
   2471c:	2300      	movlt	r3, #0
   2471e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   24722:	4824      	ldr	r0, [pc, #144]	; (247b4 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   24724:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24728:	4283      	cmp	r3, r0
   2472a:	d118      	bne.n	2475e <z_add_timeout+0x96>
	node->prev = tail;
   2472c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   24730:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   24734:	6044      	str	r4, [r0, #4]
}
   24736:	e026      	b.n	24786 <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
   24738:	f7ff ff56 	bl	245e8 <elapsed>
   2473c:	3501      	adds	r5, #1
   2473e:	f147 0700 	adc.w	r7, r7, #0
   24742:	182d      	adds	r5, r5, r0
   24744:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   24748:	e9c4 5704 	strd	r5, r7, [r4, #16]
   2474c:	e7e9      	b.n	24722 <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
   2474e:	1a52      	subs	r2, r2, r1
   24750:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   24754:	459c      	cmp	ip, r3
   24756:	e9c4 2504 	strd	r2, r5, [r4, #16]
   2475a:	d0e7      	beq.n	2472c <z_add_timeout+0x64>
   2475c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   2475e:	2b00      	cmp	r3, #0
   24760:	d0e4      	beq.n	2472c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   24762:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   24766:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   2476a:	428a      	cmp	r2, r1
   2476c:	eb75 0e07 	sbcs.w	lr, r5, r7
   24770:	daed      	bge.n	2474e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   24772:	1a8a      	subs	r2, r1, r2
   24774:	eb67 0505 	sbc.w	r5, r7, r5
   24778:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2477c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2477e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24782:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24784:	605c      	str	r4, [r3, #4]
	return list->head == list;
   24786:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24788:	4283      	cmp	r3, r0
   2478a:	d00b      	beq.n	247a4 <z_add_timeout+0xdc>
		if (to == first()) {
   2478c:	429c      	cmp	r4, r3
   2478e:	d109      	bne.n	247a4 <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
   24790:	f7ff ff34 	bl	245fc <next_timeout>
			if (next_time == 0 ||
   24794:	b118      	cbz	r0, 2479e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   24796:	4b08      	ldr	r3, [pc, #32]	; (247b8 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   24798:	691b      	ldr	r3, [r3, #16]
   2479a:	4283      	cmp	r3, r0
   2479c:	d002      	beq.n	247a4 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   2479e:	2100      	movs	r1, #0
   247a0:	f7fc ff10 	bl	215c4 <sys_clock_set_timeout>
	__asm__ volatile(
   247a4:	f386 8811 	msr	BASEPRI, r6
   247a8:	f3bf 8f6f 	isb	sy
}
   247ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   247ae:	bf00      	nop
   247b0:	200023f0 	.word	0x200023f0
   247b4:	20000878 	.word	0x20000878
   247b8:	200047a8 	.word	0x200047a8

000247bc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   247bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   247c0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   247c2:	f7ff fc4f 	bl	24064 <z_time_slice>
	__asm__ volatile(
   247c6:	f04f 0320 	mov.w	r3, #32
   247ca:	f3ef 8411 	mrs	r4, BASEPRI
   247ce:	f383 8812 	msr	BASEPRI_MAX, r3
   247d2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   247d6:	4e24      	ldr	r6, [pc, #144]	; (24868 <sys_clock_announce+0xac>)
	return list->head == list;
   247d8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2486c <sys_clock_announce+0xb0>
   247dc:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   247de:	4d24      	ldr	r5, [pc, #144]	; (24870 <sys_clock_announce+0xb4>)
   247e0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   247e4:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   247e6:	4540      	cmp	r0, r8
		curr_tick += dt;
   247e8:	e9d5 1e00 	ldrd	r1, lr, [r5]
   247ec:	ea4f 77e2 	mov.w	r7, r2, asr #31
   247f0:	d00b      	beq.n	2480a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   247f2:	b150      	cbz	r0, 2480a <sys_clock_announce+0x4e>
   247f4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   247f8:	429a      	cmp	r2, r3
   247fa:	eb77 090c 	sbcs.w	r9, r7, ip
   247fe:	da16      	bge.n	2482e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24800:	1a9b      	subs	r3, r3, r2
   24802:	eb6c 0c07 	sbc.w	ip, ip, r7
   24806:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2480a:	1852      	adds	r2, r2, r1
   2480c:	eb4e 0707 	adc.w	r7, lr, r7
   24810:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   24814:	2500      	movs	r5, #0
   24816:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   24818:	f7ff fef0 	bl	245fc <next_timeout>
   2481c:	4629      	mov	r1, r5
   2481e:	f7fc fed1 	bl	215c4 <sys_clock_set_timeout>
	__asm__ volatile(
   24822:	f384 8811 	msr	BASEPRI, r4
   24826:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2482a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2482e:	1859      	adds	r1, r3, r1
   24830:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   24834:	1ad3      	subs	r3, r2, r3
   24836:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   24838:	2200      	movs	r2, #0
   2483a:	2300      	movs	r3, #0
   2483c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   24840:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   24844:	f7ff ff00 	bl	24648 <remove_timeout>
   24848:	f384 8811 	msr	BASEPRI, r4
   2484c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24850:	6883      	ldr	r3, [r0, #8]
   24852:	4798      	blx	r3
	__asm__ volatile(
   24854:	f04f 0320 	mov.w	r3, #32
   24858:	f3ef 8411 	mrs	r4, BASEPRI
   2485c:	f383 8812 	msr	BASEPRI_MAX, r3
   24860:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   24864:	e7bc      	b.n	247e0 <sys_clock_announce+0x24>
   24866:	bf00      	nop
   24868:	200047e8 	.word	0x200047e8
   2486c:	20000878 	.word	0x20000878
   24870:	200023f0 	.word	0x200023f0

00024874 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24874:	b510      	push	{r4, lr}
   24876:	f04f 0320 	mov.w	r3, #32
   2487a:	f3ef 8411 	mrs	r4, BASEPRI
   2487e:	f383 8812 	msr	BASEPRI_MAX, r3
   24882:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   24886:	f7fc fecf 	bl	21628 <sys_clock_elapsed>
   2488a:	4a05      	ldr	r2, [pc, #20]	; (248a0 <sys_clock_tick_get+0x2c>)
   2488c:	e9d2 3100 	ldrd	r3, r1, [r2]
   24890:	18c0      	adds	r0, r0, r3
   24892:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   24896:	f384 8811 	msr	BASEPRI, r4
   2489a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2489e:	bd10      	pop	{r4, pc}
   248a0:	200023f0 	.word	0x200023f0

000248a4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   248a4:	b570      	push	{r4, r5, r6, lr}
   248a6:	4604      	mov	r4, r0
	__asm__ volatile(
   248a8:	f04f 0320 	mov.w	r3, #32
   248ac:	f3ef 8511 	mrs	r5, BASEPRI
   248b0:	f383 8812 	msr	BASEPRI_MAX, r3
   248b4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   248b8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   248bc:	3301      	adds	r3, #1
   248be:	f142 0200 	adc.w	r2, r2, #0
   248c2:	2b02      	cmp	r3, #2
   248c4:	f172 0300 	sbcs.w	r3, r2, #0
   248c8:	d304      	bcc.n	248d4 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   248ca:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   248ce:	4918      	ldr	r1, [pc, #96]	; (24930 <z_timer_expiration_handler+0x8c>)
   248d0:	f7ff fefa 	bl	246c8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   248d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   248d6:	3301      	adds	r3, #1
   248d8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   248da:	6a23      	ldr	r3, [r4, #32]
   248dc:	b173      	cbz	r3, 248fc <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   248de:	f385 8811 	msr	BASEPRI, r5
   248e2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   248e6:	6a23      	ldr	r3, [r4, #32]
   248e8:	4620      	mov	r0, r4
   248ea:	4798      	blx	r3
	__asm__ volatile(
   248ec:	f04f 0320 	mov.w	r3, #32
   248f0:	f3ef 8511 	mrs	r5, BASEPRI
   248f4:	f383 8812 	msr	BASEPRI_MAX, r3
   248f8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   248fc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24900:	42a6      	cmp	r6, r4
   24902:	d000      	beq.n	24906 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24904:	b926      	cbnz	r6, 24910 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   24906:	f385 8811 	msr	BASEPRI, r5
   2490a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   2490e:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   24910:	4630      	mov	r0, r6
   24912:	f006 ffed 	bl	2b8f0 <z_unpend_thread_no_timeout>
   24916:	2300      	movs	r3, #0
   24918:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
   2491c:	f385 8811 	msr	BASEPRI, r5
   24920:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   24924:	4630      	mov	r0, r6
}
   24926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   2492a:	f007 b821 	b.w	2b970 <z_ready_thread>
   2492e:	bf00      	nop
   24930:	000248a5 	.word	0x000248a5

00024934 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   24934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24938:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2493a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2493e:	bf08      	it	eq
   24940:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   24944:	4606      	mov	r6, r0
   24946:	461c      	mov	r4, r3
   24948:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   2494c:	4689      	mov	r9, r1
   2494e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24950:	d03e      	beq.n	249d0 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24952:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   24956:	bf08      	it	eq
   24958:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2495c:	4615      	mov	r5, r2
   2495e:	4607      	mov	r7, r0
   24960:	d014      	beq.n	2498c <z_impl_k_timer_start+0x58>
   24962:	ea50 0302 	orrs.w	r3, r0, r2
   24966:	d011      	beq.n	2498c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   24968:	f06f 0301 	mvn.w	r3, #1
   2496c:	1a9b      	subs	r3, r3, r2
   2496e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24972:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24976:	2b00      	cmp	r3, #0
   24978:	da08      	bge.n	2498c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   2497a:	2a02      	cmp	r2, #2
   2497c:	f170 0300 	sbcs.w	r3, r0, #0
   24980:	bfbc      	itt	lt
   24982:	2502      	movlt	r5, #2
   24984:	2700      	movlt	r7, #0
   24986:	3d01      	subs	r5, #1
   24988:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2498c:	f06f 0301 	mvn.w	r3, #1
   24990:	1a5b      	subs	r3, r3, r1
   24992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24996:	eb63 0304 	sbc.w	r3, r3, r4
   2499a:	2b00      	cmp	r3, #0
   2499c:	da09      	bge.n	249b2 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2499e:	2901      	cmp	r1, #1
   249a0:	f174 0300 	sbcs.w	r3, r4, #0
   249a4:	bfbc      	itt	lt
   249a6:	2101      	movlt	r1, #1
   249a8:	2400      	movlt	r4, #0
   249aa:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   249ae:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   249b2:	4630      	mov	r0, r6
   249b4:	f007 f893 	bl	2bade <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   249b8:	2300      	movs	r3, #0
   249ba:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   249bc:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   249c0:	464a      	mov	r2, r9
   249c2:	4643      	mov	r3, r8
   249c4:	4630      	mov	r0, r6
   249c6:	4903      	ldr	r1, [pc, #12]	; (249d4 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   249c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   249cc:	f7ff be7c 	b.w	246c8 <z_add_timeout>
}
   249d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   249d4:	000248a5 	.word	0x000248a5

000249d8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   249d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   249dc:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   249de:	4b29      	ldr	r3, [pc, #164]	; (24a84 <z_impl_k_poll+0xac>)
   249e0:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   249e2:	2301      	movs	r3, #1
   249e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   249e8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   249ec:	ea52 0305 	orrs.w	r3, r2, r5
{
   249f0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   249f2:	bf0c      	ite	eq
   249f4:	2301      	moveq	r3, #1
   249f6:	2300      	movne	r3, #0
   249f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   249fc:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   249fe:	f007 f94b 	bl	2bc98 <register_events>
   24a02:	4681      	mov	r9, r0
	__asm__ volatile(
   24a04:	f04f 0320 	mov.w	r3, #32
   24a08:	f3ef 8a11 	mrs	sl, BASEPRI
   24a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   24a10:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24a14:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   24a18:	b964      	cbnz	r4, 24a34 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   24a1a:	4601      	mov	r1, r0
   24a1c:	4652      	mov	r2, sl
   24a1e:	4640      	mov	r0, r8
   24a20:	f007 fa0b 	bl	2be3a <clear_event_registrations>
	__asm__ volatile(
   24a24:	f38a 8811 	msr	BASEPRI, sl
   24a28:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24a2c:	4620      	mov	r0, r4
   24a2e:	b002      	add	sp, #8
   24a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   24a34:	2300      	movs	r3, #0
   24a36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a3a:	ea56 0305 	orrs.w	r3, r6, r5
   24a3e:	d106      	bne.n	24a4e <z_impl_k_poll+0x76>
   24a40:	f38a 8811 	msr	BASEPRI, sl
   24a44:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24a48:	f06f 040a 	mvn.w	r4, #10
   24a4c:	e7ee      	b.n	24a2c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24a4e:	e9cd 6500 	strd	r6, r5, [sp]
   24a52:	4a0d      	ldr	r2, [pc, #52]	; (24a88 <z_impl_k_poll+0xb0>)
   24a54:	480d      	ldr	r0, [pc, #52]	; (24a8c <z_impl_k_poll+0xb4>)
   24a56:	4651      	mov	r1, sl
   24a58:	f7ff fbd6 	bl	24208 <z_pend_curr>
   24a5c:	4604      	mov	r4, r0
	__asm__ volatile(
   24a5e:	f04f 0320 	mov.w	r3, #32
   24a62:	f3ef 8511 	mrs	r5, BASEPRI
   24a66:	f383 8812 	msr	BASEPRI_MAX, r3
   24a6a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   24a6e:	462a      	mov	r2, r5
   24a70:	4649      	mov	r1, r9
   24a72:	4640      	mov	r0, r8
   24a74:	f007 f9e1 	bl	2be3a <clear_event_registrations>
	__asm__ volatile(
   24a78:	f385 8811 	msr	BASEPRI, r5
   24a7c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24a80:	e7d4      	b.n	24a2c <z_impl_k_poll+0x54>
   24a82:	bf00      	nop
   24a84:	200047a8 	.word	0x200047a8
   24a88:	20000880 	.word	0x20000880
   24a8c:	200049cf 	.word	0x200049cf

00024a90 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24a90:	b538      	push	{r3, r4, r5, lr}
   24a92:	4603      	mov	r3, r0
	__asm__ volatile(
   24a94:	f04f 0220 	mov.w	r2, #32
   24a98:	f3ef 8511 	mrs	r5, BASEPRI
   24a9c:	f382 8812 	msr	BASEPRI_MAX, r2
   24aa0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24aa4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   24aa6:	2101      	movs	r1, #1
   24aa8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   24aaa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24aac:	4283      	cmp	r3, r0
   24aae:	d106      	bne.n	24abe <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24ab0:	f385 8811 	msr	BASEPRI, r5
   24ab4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24ab8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   24aba:	4620      	mov	r0, r4
   24abc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24abe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24ac2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24ac4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24ac6:	2300      	movs	r3, #0
	node->prev = NULL;
   24ac8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24acc:	f007 f95b 	bl	2bd86 <signal_poll_event>
	z_reschedule(&lock, key);
   24ad0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24ad2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24ad4:	4801      	ldr	r0, [pc, #4]	; (24adc <z_impl_k_poll_signal_raise+0x4c>)
   24ad6:	f7ff fa45 	bl	23f64 <z_reschedule>
	return rc;
   24ada:	e7ee      	b.n	24aba <z_impl_k_poll_signal_raise+0x2a>
   24adc:	200049cf 	.word	0x200049cf

00024ae0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24ae2:	4606      	mov	r6, r0
   24ae4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24ae6:	f006 fcf7 	bl	2b4d8 <k_is_in_isr>
   24aea:	b980      	cbnz	r0, 24b0e <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24aec:	4b0b      	ldr	r3, [pc, #44]	; (24b1c <z_thread_aligned_alloc+0x3c>)
   24aee:	689b      	ldr	r3, [r3, #8]
   24af0:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   24af4:	b17c      	cbz	r4, 24b16 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24af6:	1d2a      	adds	r2, r5, #4
   24af8:	d209      	bcs.n	24b0e <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   24afa:	2000      	movs	r0, #0
   24afc:	2100      	movs	r1, #0
   24afe:	e9cd 0100 	strd	r0, r1, [sp]
   24b02:	f046 0104 	orr.w	r1, r6, #4
   24b06:	4620      	mov	r0, r4
   24b08:	f006 fc5e 	bl	2b3c8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24b0c:	b908      	cbnz	r0, 24b12 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   24b0e:	2400      	movs	r4, #0
	}

	return ret;
   24b10:	e001      	b.n	24b16 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   24b12:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   24b14:	1d04      	adds	r4, r0, #4
}
   24b16:	4620      	mov	r0, r4
   24b18:	b002      	add	sp, #8
   24b1a:	bd70      	pop	{r4, r5, r6, pc}
   24b1c:	200047a8 	.word	0x200047a8

00024b20 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   24b20:	4770      	bx	lr

00024b22 <main>:
   24b22:	f7df bea3 	b.w	486c <begin_shell>

00024b26 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
   24b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24b2a:	4607      	mov	r7, r0
   24b2c:	460e      	mov	r6, r1
   24b2e:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
   24b30:	461d      	mov	r5, r3
   24b32:	b1fb      	cbz	r3, 24b74 <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
   24b34:	7818      	ldrb	r0, [r3, #0]
   24b36:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   24b38:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
   24b3c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   24b40:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   24b42:	f04f 0900 	mov.w	r9, #0
   24b46:	45d1      	cmp	r9, sl
   24b48:	d308      	bcc.n	24b5c <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
   24b4a:	686a      	ldr	r2, [r5, #4]
   24b4c:	f105 0308 	add.w	r3, r5, #8
   24b50:	4641      	mov	r1, r8
   24b52:	4638      	mov	r0, r7
   24b54:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
   24b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   24b5a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   24b5c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   24b60:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   24b64:	4620      	mov	r0, r4
   24b66:	f003 fcd0 	bl	2850a <strlen>
   24b6a:	3001      	adds	r0, #1
   24b6c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   24b6e:	f109 0901 	add.w	r9, r9, #1
   24b72:	e7e8      	b.n	24b46 <cbpprintf_external+0x20>
}
   24b74:	f06f 0015 	mvn.w	r0, #21
   24b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024b7c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   24b7c:	4603      	mov	r3, r0
   24b7e:	b140      	cbz	r0, 24b92 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24b80:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24b82:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   24b86:	2a02      	cmp	r2, #2
   24b88:	d006      	beq.n	24b98 <sys_notify_validate+0x1c>
   24b8a:	2a03      	cmp	r2, #3
   24b8c:	d004      	beq.n	24b98 <sys_notify_validate+0x1c>
   24b8e:	2a01      	cmp	r2, #1
   24b90:	d005      	beq.n	24b9e <sys_notify_validate+0x22>
		return -EINVAL;
   24b92:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   24b96:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24b98:	681a      	ldr	r2, [r3, #0]
   24b9a:	2a00      	cmp	r2, #0
   24b9c:	d0f9      	beq.n	24b92 <sys_notify_validate+0x16>
		notify->result = 0;
   24b9e:	2000      	movs	r0, #0
   24ba0:	6098      	str	r0, [r3, #8]
   24ba2:	4770      	bx	lr

00024ba4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24ba4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24ba6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   24baa:	2a02      	cmp	r2, #2
{
   24bac:	b510      	push	{r4, lr}
   24bae:	4603      	mov	r3, r0
	notify->result = res;
   24bb0:	6081      	str	r1, [r0, #8]
	switch (method) {
   24bb2:	d00a      	beq.n	24bca <sys_notify_finalize+0x26>
   24bb4:	2a03      	cmp	r2, #3
   24bb6:	d10b      	bne.n	24bd0 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   24bb8:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   24bba:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24bbc:	2200      	movs	r2, #0
   24bbe:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24bc0:	b108      	cbz	r0, 24bc6 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   24bc2:	f7ff ff65 	bl	24a90 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   24bc6:	4620      	mov	r0, r4
   24bc8:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   24bca:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   24bcc:	2400      	movs	r4, #0
		break;
   24bce:	e7f5      	b.n	24bbc <sys_notify_finalize+0x18>
	switch (method) {
   24bd0:	2400      	movs	r4, #0
   24bd2:	4620      	mov	r0, r4
   24bd4:	e7f2      	b.n	24bbc <sys_notify_finalize+0x18>

00024bd6 <str_out>:
{
   24bd6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24bd8:	688a      	ldr	r2, [r1, #8]
   24bda:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   24bdc:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24bde:	b114      	cbz	r4, 24be6 <str_out+0x10>
   24be0:	684b      	ldr	r3, [r1, #4]
   24be2:	4293      	cmp	r3, r2
   24be4:	dc01      	bgt.n	24bea <str_out+0x14>
		ctx->count++;
   24be6:	608d      	str	r5, [r1, #8]
}
   24be8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24bea:	3b01      	subs	r3, #1
   24bec:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   24bee:	bf08      	it	eq
   24bf0:	2200      	moveq	r2, #0
   24bf2:	608d      	str	r5, [r1, #8]
   24bf4:	bf0c      	ite	eq
   24bf6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24bf8:	54a0      	strbne	r0, [r4, r2]
   24bfa:	e7f5      	b.n	24be8 <str_out+0x12>

00024bfc <printk>:
{
   24bfc:	b40f      	push	{r0, r1, r2, r3}
   24bfe:	b507      	push	{r0, r1, r2, lr}
   24c00:	a904      	add	r1, sp, #16
   24c02:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24c06:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   24c08:	f000 ff72 	bl	25af0 <z_log_vprintk>
}
   24c0c:	b003      	add	sp, #12
   24c0e:	f85d eb04 	ldr.w	lr, [sp], #4
   24c12:	b004      	add	sp, #16
   24c14:	4770      	bx	lr

00024c16 <snprintk>:
{
   24c16:	b40c      	push	{r2, r3}
   24c18:	b507      	push	{r0, r1, r2, lr}
   24c1a:	ab04      	add	r3, sp, #16
   24c1c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   24c20:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   24c22:	f7e0 f861 	bl	4ce8 <vsnprintk>
}
   24c26:	b003      	add	sp, #12
   24c28:	f85d eb04 	ldr.w	lr, [sp], #4
   24c2c:	b002      	add	sp, #8
   24c2e:	4770      	bx	lr

00024c30 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c30:	b510      	push	{r4, lr}
   24c32:	4603      	mov	r3, r0
	return list->head;
   24c34:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c36:	2200      	movs	r2, #0
   24c38:	b158      	cbz	r0, 24c52 <sys_slist_find_and_remove+0x22>
   24c3a:	4288      	cmp	r0, r1
   24c3c:	d10f      	bne.n	24c5e <sys_slist_find_and_remove+0x2e>
	return node->next;
   24c3e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   24c40:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   24c42:	b93a      	cbnz	r2, 24c54 <sys_slist_find_and_remove+0x24>
   24c44:	42a1      	cmp	r1, r4
	list->head = node;
   24c46:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   24c48:	d100      	bne.n	24c4c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   24c4a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   24c4c:	2300      	movs	r3, #0
   24c4e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c50:	2001      	movs	r0, #1
   24c52:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   24c54:	42a1      	cmp	r1, r4
	parent->next = child;
   24c56:	6010      	str	r0, [r2, #0]
	list->tail = node;
   24c58:	bf08      	it	eq
   24c5a:	605a      	streq	r2, [r3, #4]
}
   24c5c:	e7f6      	b.n	24c4c <sys_slist_find_and_remove+0x1c>
	return node->next;
   24c5e:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c60:	6800      	ldr	r0, [r0, #0]
   24c62:	e7e9      	b.n	24c38 <sys_slist_find_and_remove+0x8>

00024c64 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24c64:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   24c66:	f013 0307 	ands.w	r3, r3, #7
   24c6a:	d105      	bne.n	24c78 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24c6c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   24c6e:	2b00      	cmp	r3, #0
   24c70:	bf0c      	ite	eq
   24c72:	2000      	moveq	r0, #0
   24c74:	2003      	movne	r0, #3
   24c76:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24c78:	2b02      	cmp	r3, #2
   24c7a:	d105      	bne.n	24c88 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24c7c:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   24c7e:	2b00      	cmp	r3, #0
   24c80:	bf14      	ite	ne
   24c82:	2000      	movne	r0, #0
   24c84:	2004      	moveq	r0, #4
   24c86:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24c88:	2b01      	cmp	r3, #1
   24c8a:	d105      	bne.n	24c98 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24c8c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   24c8e:	2b00      	cmp	r3, #0
   24c90:	bf0c      	ite	eq
   24c92:	2000      	moveq	r0, #0
   24c94:	2005      	movne	r0, #5
   24c96:	4770      	bx	lr
	int evt = EVT_NOP;
   24c98:	2000      	movs	r0, #0
}
   24c9a:	4770      	bx	lr

00024c9c <notify_one>:
{
   24c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ca0:	460d      	mov	r5, r1
   24ca2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24ca4:	4619      	mov	r1, r3
   24ca6:	1d28      	adds	r0, r5, #4
{
   24ca8:	4690      	mov	r8, r2
   24caa:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24cac:	f7ff ff7a 	bl	24ba4 <sys_notify_finalize>
	if (cb) {
   24cb0:	4604      	mov	r4, r0
   24cb2:	b138      	cbz	r0, 24cc4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   24cb4:	4633      	mov	r3, r6
   24cb6:	4642      	mov	r2, r8
   24cb8:	4629      	mov	r1, r5
   24cba:	4638      	mov	r0, r7
   24cbc:	46a4      	mov	ip, r4
}
   24cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24cc2:	4760      	bx	ip
}
   24cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024cc8 <transition_complete>:
{
   24cc8:	b410      	push	{r4}
	__asm__ volatile(
   24cca:	f04f 0420 	mov.w	r4, #32
   24cce:	f3ef 8211 	mrs	r2, BASEPRI
   24cd2:	f384 8812 	msr	BASEPRI_MAX, r4
   24cd6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   24cda:	6141      	str	r1, [r0, #20]
}
   24cdc:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   24cde:	2101      	movs	r1, #1
   24ce0:	f7e0 b816 	b.w	4d10 <process_event>

00024ce4 <validate_args>:
{
   24ce4:	b510      	push	{r4, lr}
   24ce6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24ce8:	b140      	cbz	r0, 24cfc <validate_args+0x18>
   24cea:	b139      	cbz	r1, 24cfc <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   24cec:	1d08      	adds	r0, r1, #4
   24cee:	f7ff ff45 	bl	24b7c <sys_notify_validate>
	if ((rv == 0)
   24cf2:	b928      	cbnz	r0, 24d00 <validate_args+0x1c>
	    && ((cli->notify.flags
   24cf4:	68a3      	ldr	r3, [r4, #8]
   24cf6:	f033 0303 	bics.w	r3, r3, #3
   24cfa:	d001      	beq.n	24d00 <validate_args+0x1c>
		rv = -EINVAL;
   24cfc:	f06f 0015 	mvn.w	r0, #21
}
   24d00:	bd10      	pop	{r4, pc}

00024d02 <onoff_manager_init>:
{
   24d02:	b538      	push	{r3, r4, r5, lr}
   24d04:	460c      	mov	r4, r1
	if ((mgr == NULL)
   24d06:	4605      	mov	r5, r0
   24d08:	b158      	cbz	r0, 24d22 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   24d0a:	b151      	cbz	r1, 24d22 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   24d0c:	680b      	ldr	r3, [r1, #0]
   24d0e:	b143      	cbz	r3, 24d22 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   24d10:	684b      	ldr	r3, [r1, #4]
   24d12:	b133      	cbz	r3, 24d22 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24d14:	221c      	movs	r2, #28
   24d16:	2100      	movs	r1, #0
   24d18:	f003 fc58 	bl	285cc <memset>
   24d1c:	612c      	str	r4, [r5, #16]
	return 0;
   24d1e:	2000      	movs	r0, #0
}
   24d20:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24d22:	f06f 0015 	mvn.w	r0, #21
   24d26:	e7fb      	b.n	24d20 <onoff_manager_init+0x1e>

00024d28 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   24d28:	b570      	push	{r4, r5, r6, lr}
   24d2a:	4604      	mov	r4, r0
   24d2c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   24d2e:	f7ff ffd9 	bl	24ce4 <validate_args>

	if (rv < 0) {
   24d32:	1e05      	subs	r5, r0, #0
   24d34:	db31      	blt.n	24d9a <onoff_request+0x72>
   24d36:	f04f 0320 	mov.w	r3, #32
   24d3a:	f3ef 8111 	mrs	r1, BASEPRI
   24d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   24d42:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   24d46:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24d48:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   24d4a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   24d4e:	42ab      	cmp	r3, r5
   24d50:	f000 0207 	and.w	r2, r0, #7
   24d54:	d02e      	beq.n	24db4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   24d56:	2a02      	cmp	r2, #2
   24d58:	d10e      	bne.n	24d78 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   24d5a:	3301      	adds	r3, #1
   24d5c:	8363      	strh	r3, [r4, #26]
	rv = state;
   24d5e:	4615      	mov	r5, r2
		notify = true;
   24d60:	2301      	movs	r3, #1
	__asm__ volatile(
   24d62:	f381 8811 	msr	BASEPRI, r1
   24d66:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   24d6a:	b1b3      	cbz	r3, 24d9a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   24d6c:	2300      	movs	r3, #0
   24d6e:	4631      	mov	r1, r6
   24d70:	4620      	mov	r0, r4
   24d72:	f7ff ff93 	bl	24c9c <notify_one>
   24d76:	e010      	b.n	24d9a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   24d78:	0783      	lsls	r3, r0, #30
   24d7a:	d001      	beq.n	24d80 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   24d7c:	2a06      	cmp	r2, #6
   24d7e:	d10e      	bne.n	24d9e <onoff_request+0x76>
	parent->next = child;
   24d80:	2300      	movs	r3, #0
   24d82:	6033      	str	r3, [r6, #0]
	return list->tail;
   24d84:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   24d86:	b993      	cbnz	r3, 24dae <onoff_request+0x86>
	list->head = node;
   24d88:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   24d8c:	4615      	mov	r5, r2
   24d8e:	b962      	cbnz	r2, 24daa <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   24d90:	460a      	mov	r2, r1
   24d92:	4620      	mov	r0, r4
   24d94:	2102      	movs	r1, #2
   24d96:	f7df ffbb 	bl	4d10 <process_event>
		}
	}

	return rv;
}
   24d9a:	4628      	mov	r0, r5
   24d9c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   24d9e:	2a05      	cmp	r2, #5
   24da0:	bf0c      	ite	eq
   24da2:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   24da6:	f06f 0504 	mvnne.w	r5, #4
   24daa:	2300      	movs	r3, #0
   24dac:	e7d9      	b.n	24d62 <onoff_request+0x3a>
	parent->next = child;
   24dae:	601e      	str	r6, [r3, #0]
	list->tail = node;
   24db0:	6066      	str	r6, [r4, #4]
}
   24db2:	e7eb      	b.n	24d8c <onoff_request+0x64>
		rv = -EAGAIN;
   24db4:	f06f 050a 	mvn.w	r5, #10
   24db8:	e7f7      	b.n	24daa <onoff_request+0x82>

00024dba <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   24dba:	b510      	push	{r4, lr}
	__asm__ volatile(
   24dbc:	f04f 0320 	mov.w	r3, #32
   24dc0:	f3ef 8211 	mrs	r2, BASEPRI
   24dc4:	f383 8812 	msr	BASEPRI_MAX, r3
   24dc8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24dcc:	8b04      	ldrh	r4, [r0, #24]
   24dce:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   24dd2:	2c02      	cmp	r4, #2
   24dd4:	d00a      	beq.n	24dec <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   24dd6:	2c01      	cmp	r4, #1
   24dd8:	bf0c      	ite	eq
   24dda:	f06f 0004 	mvneq.w	r0, #4
   24dde:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   24de2:	f382 8811 	msr	BASEPRI, r2
   24de6:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   24dea:	e008      	b.n	24dfe <onoff_release+0x44>
	mgr->refs -= 1U;
   24dec:	8b43      	ldrh	r3, [r0, #26]
   24dee:	3b01      	subs	r3, #1
   24df0:	b29b      	uxth	r3, r3
   24df2:	8343      	strh	r3, [r0, #26]
	if (stop) {
   24df4:	b923      	cbnz	r3, 24e00 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   24df6:	4621      	mov	r1, r4
   24df8:	f7df ff8a 	bl	4d10 <process_event>
	int rv = state;
   24dfc:	4620      	mov	r0, r4
}
   24dfe:	bd10      	pop	{r4, pc}
	int rv = state;
   24e00:	4620      	mov	r0, r4
   24e02:	e7ee      	b.n	24de2 <onoff_release+0x28>

00024e04 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   24e04:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   24e06:	b1b0      	cbz	r0, 24e36 <onoff_cancel+0x32>
   24e08:	b1a9      	cbz	r1, 24e36 <onoff_cancel+0x32>
	__asm__ volatile(
   24e0a:	f04f 0220 	mov.w	r2, #32
   24e0e:	f3ef 8511 	mrs	r5, BASEPRI
   24e12:	f382 8812 	msr	BASEPRI_MAX, r2
   24e16:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24e1a:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   24e1c:	f7ff ff08 	bl	24c30 <sys_slist_find_and_remove>
   24e20:	b130      	cbz	r0, 24e30 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   24e22:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   24e26:	f385 8811 	msr	BASEPRI, r5
   24e2a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   24e2e:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   24e30:	f06f 0077 	mvn.w	r0, #119	; 0x77
   24e34:	e7f7      	b.n	24e26 <onoff_cancel+0x22>
		return -EINVAL;
   24e36:	f06f 0015 	mvn.w	r0, #21
   24e3a:	e7f8      	b.n	24e2e <onoff_cancel+0x2a>

00024e3c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   24e3c:	4604      	mov	r4, r0
   24e3e:	b508      	push	{r3, lr}
   24e40:	4608      	mov	r0, r1
   24e42:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   24e44:	461a      	mov	r2, r3
   24e46:	47a0      	blx	r4
	return z_impl_z_current_get();
   24e48:	f7ff fb36 	bl	244b8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   24e4c:	f7e6 f81c 	bl	ae88 <z_impl_k_thread_abort>

00024e50 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   24e50:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   24e54:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   24e56:	0840      	lsrs	r0, r0, #1
   24e58:	4770      	bx	lr

00024e5a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   24e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e5c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   24e5e:	f7ff fff7 	bl	24e50 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   24e62:	fab0 f080 	clz	r0, r0
   24e66:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   24e6a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   24e6e:	00ca      	lsls	r2, r1, #3
   24e70:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   24e74:	1d17      	adds	r7, r2, #4
{
   24e76:	460c      	mov	r4, r1
   24e78:	3206      	adds	r2, #6
   24e7a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   24e7c:	b956      	cbnz	r6, 24e94 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   24e7e:	2101      	movs	r1, #1
   24e80:	fa01 f000 	lsl.w	r0, r1, r0
   24e84:	68d9      	ldr	r1, [r3, #12]
   24e86:	4301      	orrs	r1, r0
   24e88:	60d9      	str	r1, [r3, #12]
		b->next = c;
   24e8a:	f8cc 4010 	str.w	r4, [ip, #16]
   24e8e:	53dd      	strh	r5, [r3, r7]
   24e90:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   24e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   24e94:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   24e96:	3104      	adds	r1, #4
   24e98:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   24e9a:	53d8      	strh	r0, [r3, r7]
   24e9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   24ea0:	529e      	strh	r6, [r3, r2]
   24ea2:	80c5      	strh	r5, [r0, #6]
   24ea4:	525d      	strh	r5, [r3, r1]
   24ea6:	e7f4      	b.n	24e92 <free_list_add+0x38>

00024ea8 <free_list_remove_bidx>:
{
   24ea8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   24eaa:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   24eae:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   24eb0:	4299      	cmp	r1, r3
   24eb2:	f102 0104 	add.w	r1, r2, #4
   24eb6:	d10a      	bne.n	24ece <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   24eb8:	2301      	movs	r3, #1
   24eba:	fa03 f202 	lsl.w	r2, r3, r2
   24ebe:	68c3      	ldr	r3, [r0, #12]
   24ec0:	ea23 0302 	bic.w	r3, r3, r2
   24ec4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   24ec6:	2300      	movs	r3, #0
   24ec8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   24ecc:	bd10      	pop	{r4, pc}
   24ece:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   24ed0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   24ed4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   24ed8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   24edc:	80cb      	strh	r3, [r1, #6]
   24ede:	8082      	strh	r2, [r0, #4]
}
   24ee0:	e7f4      	b.n	24ecc <free_list_remove_bidx+0x24>

00024ee2 <free_list_remove>:
{
   24ee2:	b508      	push	{r3, lr}
   24ee4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   24ee6:	f7ff ffb3 	bl	24e50 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   24eea:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   24eee:	f1c2 021f 	rsb	r2, r2, #31
   24ef2:	4618      	mov	r0, r3
}
   24ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   24ef8:	f7ff bfd6 	b.w	24ea8 <free_list_remove_bidx>

00024efc <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   24efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f00:	fab1 f581 	clz	r5, r1
   24f04:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   24f08:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   24f0c:	4603      	mov	r3, r0
	if (b->next) {
   24f0e:	693a      	ldr	r2, [r7, #16]
{
   24f10:	460e      	mov	r6, r1
	if (b->next) {
   24f12:	b1c2      	cbz	r2, 24f46 <alloc_chunk+0x4a>
   24f14:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   24f18:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   24f1a:	4618      	mov	r0, r3
   24f1c:	4621      	mov	r1, r4
   24f1e:	f7ff ff97 	bl	24e50 <chunk_size>
   24f22:	42b0      	cmp	r0, r6
   24f24:	d306      	bcc.n	24f34 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   24f26:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   24f28:	4618      	mov	r0, r3
   24f2a:	f7ff ffbd 	bl	24ea8 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   24f2e:	4620      	mov	r0, r4
   24f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   24f34:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   24f38:	f1b8 0801 	subs.w	r8, r8, #1
   24f3c:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   24f3e:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   24f40:	d001      	beq.n	24f46 <alloc_chunk+0x4a>
   24f42:	4282      	cmp	r2, r0
   24f44:	d1e8      	bne.n	24f18 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   24f46:	f1c5 0220 	rsb	r2, r5, #32
   24f4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24f4e:	4094      	lsls	r4, r2
   24f50:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   24f52:	4014      	ands	r4, r2
   24f54:	d0eb      	beq.n	24f2e <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   24f56:	fa94 f2a4 	rbit	r2, r4
   24f5a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   24f5e:	1d11      	adds	r1, r2, #4
   24f60:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   24f64:	4621      	mov	r1, r4
   24f66:	e7df      	b.n	24f28 <alloc_chunk+0x2c>

00024f68 <merge_chunks>:
{
   24f68:	b538      	push	{r3, r4, r5, lr}
   24f6a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24f6c:	f7ff ff70 	bl	24e50 <chunk_size>
{
   24f70:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24f72:	4604      	mov	r4, r0
   24f74:	4611      	mov	r1, r2
   24f76:	4618      	mov	r0, r3
   24f78:	f7ff ff6a 	bl	24e50 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   24f7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   24f80:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24f82:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   24f84:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   24f86:	4618      	mov	r0, r3
   24f88:	f7ff ff62 	bl	24e50 <chunk_size>
	void *cmem = &buf[c];
   24f8c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24f8e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   24f92:	bd38      	pop	{r3, r4, r5, pc}

00024f94 <split_chunks>:
{
   24f94:	b538      	push	{r3, r4, r5, lr}
   24f96:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   24f98:	f7ff ff5a 	bl	24e50 <chunk_size>
{
   24f9c:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   24f9e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   24fa0:	1a51      	subs	r1, r2, r1
   24fa2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   24fa6:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24fa8:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   24faa:	8060      	strh	r0, [r4, #2]
   24fac:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24fb0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   24fb2:	8044      	strh	r4, [r0, #2]
   24fb4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   24fb8:	4618      	mov	r0, r3
   24fba:	4611      	mov	r1, r2
   24fbc:	f7ff ff48 	bl	24e50 <chunk_size>
	void *cmem = &buf[c];
   24fc0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24fc2:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   24fc6:	bd38      	pop	{r3, r4, r5, pc}

00024fc8 <free_chunk>:
{
   24fc8:	b538      	push	{r3, r4, r5, lr}
   24fca:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   24fcc:	f7ff ff40 	bl	24e50 <chunk_size>
   24fd0:	460c      	mov	r4, r1
   24fd2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   24fd4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24fd8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   24fda:	07da      	lsls	r2, r3, #31
   24fdc:	d40a      	bmi.n	24ff4 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   24fde:	4628      	mov	r0, r5
   24fe0:	f7ff ff7f 	bl	24ee2 <free_list_remove>
	return c + chunk_size(h, c);
   24fe4:	4621      	mov	r1, r4
   24fe6:	4628      	mov	r0, r5
   24fe8:	f7ff ff32 	bl	24e50 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24fec:	1822      	adds	r2, r4, r0
   24fee:	4628      	mov	r0, r5
   24ff0:	f7ff ffba 	bl	24f68 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   24ff4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24ff8:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   24ffa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24ffe:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25000:	07db      	lsls	r3, r3, #31
   25002:	d40c      	bmi.n	2501e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25004:	4628      	mov	r0, r5
   25006:	f7ff ff6c 	bl	24ee2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2500a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2500e:	4622      	mov	r2, r4
   25010:	1a61      	subs	r1, r4, r1
   25012:	4628      	mov	r0, r5
   25014:	f7ff ffa8 	bl	24f68 <merge_chunks>
   25018:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2501c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2501e:	4621      	mov	r1, r4
   25020:	4628      	mov	r0, r5
}
   25022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25026:	f7ff bf18 	b.w	24e5a <free_list_add>

0002502a <sys_heap_free>:
	if (mem == NULL) {
   2502a:	b161      	cbz	r1, 25046 <sys_heap_free+0x1c>
   2502c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2502e:	3904      	subs	r1, #4
   25030:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   25032:	f021 0307 	bic.w	r3, r1, #7
   25036:	4403      	add	r3, r0
	free_chunk(h, c);
   25038:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2503a:	885a      	ldrh	r2, [r3, #2]
   2503c:	f022 0201 	bic.w	r2, r2, #1
   25040:	805a      	strh	r2, [r3, #2]
   25042:	f7ff bfc1 	b.w	24fc8 <free_chunk>
}
   25046:	4770      	bx	lr

00025048 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25048:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2504a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2504c:	b909      	cbnz	r1, 25052 <sys_heap_alloc+0xa>
		return NULL;
   2504e:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   25050:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25052:	68ab      	ldr	r3, [r5, #8]
   25054:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25058:	d9f9      	bls.n	2504e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2505a:	310b      	adds	r1, #11
   2505c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2505e:	4621      	mov	r1, r4
   25060:	4628      	mov	r0, r5
   25062:	f7ff ff4b 	bl	24efc <alloc_chunk>
	if (c == 0U) {
   25066:	4606      	mov	r6, r0
   25068:	2800      	cmp	r0, #0
   2506a:	d0f0      	beq.n	2504e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2506c:	4601      	mov	r1, r0
   2506e:	4628      	mov	r0, r5
   25070:	f7ff feee 	bl	24e50 <chunk_size>
   25074:	42a0      	cmp	r0, r4
   25076:	d907      	bls.n	25088 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25078:	1932      	adds	r2, r6, r4
   2507a:	4628      	mov	r0, r5
   2507c:	f7ff ff8a 	bl	24f94 <split_chunks>
		free_list_add(h, c + chunk_sz);
   25080:	4611      	mov	r1, r2
   25082:	4628      	mov	r0, r5
   25084:	f7ff fee9 	bl	24e5a <free_list_add>
	void *cmem = &buf[c];
   25088:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2508c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2508e:	8853      	ldrh	r3, [r2, #2]
   25090:	f043 0301 	orr.w	r3, r3, #1
   25094:	8053      	strh	r3, [r2, #2]
   25096:	3004      	adds	r0, #4
	return mem;
   25098:	e7da      	b.n	25050 <sys_heap_alloc+0x8>

0002509a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2509a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2509e:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   250a0:	424a      	negs	r2, r1
   250a2:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   250a6:	ea31 0202 	bics.w	r2, r1, r2
{
   250aa:	4603      	mov	r3, r0
	if (align != rew) {
   250ac:	d00a      	beq.n	250c4 <sys_heap_aligned_alloc+0x2a>
		return false;
   250ae:	2f04      	cmp	r7, #4
   250b0:	463a      	mov	r2, r7
   250b2:	46b9      	mov	r9, r7
   250b4:	bf28      	it	cs
   250b6:	2204      	movcs	r2, #4
		align -= rew;
   250b8:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   250ba:	b974      	cbnz	r4, 250da <sys_heap_aligned_alloc+0x40>
		return NULL;
   250bc:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   250be:	4628      	mov	r0, r5
   250c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   250c4:	2904      	cmp	r1, #4
   250c6:	d804      	bhi.n	250d2 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   250c8:	4621      	mov	r1, r4
}
   250ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   250ce:	f7ff bfbb 	b.w	25048 <sys_heap_alloc>
		rew = 0;
   250d2:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   250d6:	2204      	movs	r2, #4
   250d8:	e7ef      	b.n	250ba <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   250da:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   250dc:	68b3      	ldr	r3, [r6, #8]
   250de:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   250e2:	d9eb      	bls.n	250bc <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   250e4:	f104 010b 	add.w	r1, r4, #11
   250e8:	4439      	add	r1, r7
   250ea:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   250ec:	08c9      	lsrs	r1, r1, #3
   250ee:	4630      	mov	r0, r6
   250f0:	f7ff ff04 	bl	24efc <alloc_chunk>
	if (c0 == 0) {
   250f4:	4680      	mov	r8, r0
   250f6:	2800      	cmp	r0, #0
   250f8:	d0e0      	beq.n	250bc <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   250fa:	f109 0504 	add.w	r5, r9, #4
   250fe:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   25102:	1e7b      	subs	r3, r7, #1
   25104:	4435      	add	r5, r6
   25106:	441d      	add	r5, r3
   25108:	427f      	negs	r7, r7
   2510a:	403d      	ands	r5, r7
   2510c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25110:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25112:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25114:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25116:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25118:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2511c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2511e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25122:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   25126:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2512a:	d208      	bcs.n	2513e <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   2512c:	4601      	mov	r1, r0
   2512e:	463a      	mov	r2, r7
   25130:	4630      	mov	r0, r6
   25132:	f7ff ff2f 	bl	24f94 <split_chunks>
		free_list_add(h, c0);
   25136:	4641      	mov	r1, r8
   25138:	4630      	mov	r0, r6
   2513a:	f7ff fe8e 	bl	24e5a <free_list_add>
	return c + chunk_size(h, c);
   2513e:	4639      	mov	r1, r7
   25140:	4630      	mov	r0, r6
   25142:	f7ff fe85 	bl	24e50 <chunk_size>
   25146:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   25148:	4284      	cmp	r4, r0
   2514a:	d207      	bcs.n	2515c <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   2514c:	4630      	mov	r0, r6
   2514e:	4622      	mov	r2, r4
   25150:	f7ff ff20 	bl	24f94 <split_chunks>
		free_list_add(h, c_end);
   25154:	4621      	mov	r1, r4
   25156:	4630      	mov	r0, r6
   25158:	f7ff fe7f 	bl	24e5a <free_list_add>
	void *cmem = &buf[c];
   2515c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25160:	8873      	ldrh	r3, [r6, #2]
   25162:	f043 0301 	orr.w	r3, r3, #1
   25166:	8073      	strh	r3, [r6, #2]
   25168:	e7a9      	b.n	250be <sys_heap_aligned_alloc+0x24>

0002516a <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2516a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2516c:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2516e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25170:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25174:	f021 0107 	bic.w	r1, r1, #7
{
   25178:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2517a:	1acd      	subs	r5, r1, r3
   2517c:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2517e:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   25180:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   25184:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   25188:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2518a:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   2518c:	2600      	movs	r6, #0
   2518e:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   25190:	f1c0 0020 	rsb	r0, r0, #32
   25194:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   25198:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   2519a:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2519c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   251a0:	4284      	cmp	r4, r0
   251a2:	d118      	bne.n	251d6 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   251a4:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   251a6:	f040 0001 	orr.w	r0, r0, #1
   251aa:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   251ac:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   251b0:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   251b2:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   251b4:	801e      	strh	r6, [r3, #0]
   251b6:	8067      	strh	r7, [r4, #2]
   251b8:	195c      	adds	r4, r3, r5
   251ba:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   251be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   251c2:	8066      	strh	r6, [r4, #2]
   251c4:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   251c6:	8850      	ldrh	r0, [r2, #2]
   251c8:	f040 0001 	orr.w	r0, r0, #1
   251cc:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   251ce:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   251d0:	4618      	mov	r0, r3
   251d2:	f7ff be42 	b.w	24e5a <free_list_add>
		h->buckets[i].next = 0;
   251d6:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   251da:	e7e1      	b.n	251a0 <sys_heap_init+0x36>

000251dc <_ldiv5>:
	uint32_t v_lo = *v;
   251dc:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   251e0:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   251e2:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   251e6:	fba2 2403 	umull	r2, r4, r2, r3
   251ea:	18d5      	adds	r5, r2, r3
   251ec:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   251f0:	fba1 1303 	umull	r1, r3, r1, r3
   251f4:	1852      	adds	r2, r2, r1
   251f6:	eb44 0403 	adc.w	r4, r4, r3
   251fa:	1952      	adds	r2, r2, r5
   251fc:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   25200:	1889      	adds	r1, r1, r2
   25202:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   25206:	e9c0 1300 	strd	r1, r3, [r0]
}
   2520a:	bd30      	pop	{r4, r5, pc}

0002520c <_get_digit>:
	if (*digit_count > 0) {
   2520c:	680a      	ldr	r2, [r1, #0]
   2520e:	2a00      	cmp	r2, #0
{
   25210:	b510      	push	{r4, lr}
   25212:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   25214:	dd0f      	ble.n	25236 <_get_digit+0x2a>
		--*digit_count;
   25216:	3a01      	subs	r2, #1
   25218:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   2521a:	681a      	ldr	r2, [r3, #0]
   2521c:	6844      	ldr	r4, [r0, #4]
   2521e:	200a      	movs	r0, #10
   25220:	fba2 1200 	umull	r1, r2, r2, r0
   25224:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   25228:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   2522a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   2522e:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   25232:	3030      	adds	r0, #48	; 0x30
}
   25234:	bd10      	pop	{r4, pc}
		rval = '0';
   25236:	2030      	movs	r0, #48	; 0x30
   25238:	e7fc      	b.n	25234 <_get_digit+0x28>

0002523a <encode_uint>:
{
   2523a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2523e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   25240:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   25242:	2b6f      	cmp	r3, #111	; 0x6f
{
   25244:	4680      	mov	r8, r0
   25246:	460f      	mov	r7, r1
   25248:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2524a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2524e:	d029      	beq.n	252a4 <encode_uint+0x6a>
   25250:	d824      	bhi.n	2529c <encode_uint+0x62>
		return 16;
   25252:	2b58      	cmp	r3, #88	; 0x58
   25254:	bf14      	ite	ne
   25256:	260a      	movne	r6, #10
   25258:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   2525a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2525e:	4632      	mov	r2, r6
   25260:	2300      	movs	r3, #0
   25262:	4640      	mov	r0, r8
   25264:	4639      	mov	r1, r7
   25266:	f7db ff4b 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2526a:	2a09      	cmp	r2, #9
   2526c:	b2d4      	uxtb	r4, r2
   2526e:	d81e      	bhi.n	252ae <encode_uint+0x74>
   25270:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   25272:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25274:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   25276:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2527a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2527e:	d301      	bcc.n	25284 <encode_uint+0x4a>
   25280:	45d1      	cmp	r9, sl
   25282:	d811      	bhi.n	252a8 <encode_uint+0x6e>
	if (conv->flag_hash) {
   25284:	782b      	ldrb	r3, [r5, #0]
   25286:	069b      	lsls	r3, r3, #26
   25288:	d505      	bpl.n	25296 <encode_uint+0x5c>
		if (radix == 8) {
   2528a:	2e08      	cmp	r6, #8
   2528c:	d115      	bne.n	252ba <encode_uint+0x80>
			conv->altform_0 = true;
   2528e:	78ab      	ldrb	r3, [r5, #2]
   25290:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   25294:	70ab      	strb	r3, [r5, #2]
}
   25296:	4648      	mov	r0, r9
   25298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2529c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   252a0:	2b70      	cmp	r3, #112	; 0x70
   252a2:	e7d7      	b.n	25254 <encode_uint+0x1a>
	switch (specifier) {
   252a4:	2608      	movs	r6, #8
   252a6:	e7d8      	b.n	2525a <encode_uint+0x20>
		value /= radix;
   252a8:	4680      	mov	r8, r0
   252aa:	460f      	mov	r7, r1
   252ac:	e7d7      	b.n	2525e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   252ae:	f1bb 0f19 	cmp.w	fp, #25
   252b2:	bf94      	ite	ls
   252b4:	3437      	addls	r4, #55	; 0x37
   252b6:	3457      	addhi	r4, #87	; 0x57
   252b8:	e7db      	b.n	25272 <encode_uint+0x38>
		} else if (radix == 16) {
   252ba:	2e10      	cmp	r6, #16
   252bc:	d1eb      	bne.n	25296 <encode_uint+0x5c>
			conv->altform_0c = true;
   252be:	78ab      	ldrb	r3, [r5, #2]
   252c0:	f043 0310 	orr.w	r3, r3, #16
   252c4:	e7e6      	b.n	25294 <encode_uint+0x5a>

000252c6 <outs>:
{
   252c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252ca:	4607      	mov	r7, r0
   252cc:	4688      	mov	r8, r1
   252ce:	4615      	mov	r5, r2
   252d0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   252d2:	4614      	mov	r4, r2
   252d4:	42b4      	cmp	r4, r6
   252d6:	eba4 0005 	sub.w	r0, r4, r5
   252da:	d302      	bcc.n	252e2 <outs+0x1c>
   252dc:	b93e      	cbnz	r6, 252ee <outs+0x28>
   252de:	7823      	ldrb	r3, [r4, #0]
   252e0:	b12b      	cbz	r3, 252ee <outs+0x28>
		int rc = out((int)*sp++, ctx);
   252e2:	f814 0b01 	ldrb.w	r0, [r4], #1
   252e6:	4641      	mov	r1, r8
   252e8:	47b8      	blx	r7
		if (rc < 0) {
   252ea:	2800      	cmp	r0, #0
   252ec:	daf2      	bge.n	252d4 <outs+0xe>
}
   252ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000252f2 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   252f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   252f6:	4770      	bx	lr

000252f8 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
   252f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
   252fa:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
   252fe:	42ac      	cmp	r4, r5
   25300:	d207      	bcs.n	25312 <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
   25302:	6906      	ldr	r6, [r0, #16]
   25304:	f7ff fff5 	bl	252f2 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   25308:	fbb0 f0f6 	udiv	r0, r0, r6
   2530c:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
   2530e:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   25312:	1b63      	subs	r3, r4, r5
   25314:	4258      	negs	r0, r3
   25316:	4158      	adcs	r0, r3
   25318:	bd70      	pop	{r4, r5, r6, pc}

0002531a <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2531a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
   2531e:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
   25320:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
   25324:	454c      	cmp	r4, r9
{
   25326:	4605      	mov	r5, r0
   25328:	460e      	mov	r6, r1
   2532a:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
   2532c:	d907      	bls.n	2533e <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   2532e:	6907      	ldr	r7, [r0, #16]
   25330:	f7ff ffdf 	bl	252f2 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   25334:	fbb0 f0f7 	udiv	r0, r0, r7
   25338:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   2533a:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2533e:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   25340:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   25342:	692f      	ldr	r7, [r5, #16]
   25344:	b18b      	cbz	r3, 2536a <ring_buf_put_claim+0x50>
   25346:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
   25348:	443c      	add	r4, r7
   2534a:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   2534e:	4540      	cmp	r0, r8
   25350:	bf28      	it	cs
   25352:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
   25354:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   25356:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
   25358:	42b8      	cmp	r0, r7
   2535a:	bf28      	it	cs
   2535c:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   2535e:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   25360:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   25362:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
   25364:	60a9      	str	r1, [r5, #8]

	return allocated;
}
   25366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2536a:	fbb1 f3f7 	udiv	r3, r1, r7
   2536e:	fb07 1313 	mls	r3, r7, r3, r1
   25372:	e7e9      	b.n	25348 <ring_buf_put_claim+0x2e>

00025374 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   25374:	b570      	push	{r4, r5, r6, lr}
   25376:	4605      	mov	r5, r0
   25378:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   2537a:	f7ff ffba 	bl	252f2 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
   2537e:	686e      	ldr	r6, [r5, #4]
   25380:	692a      	ldr	r2, [r5, #16]
   25382:	682b      	ldr	r3, [r5, #0]
   25384:	1931      	adds	r1, r6, r4
   25386:	4413      	add	r3, r2
   25388:	4299      	cmp	r1, r3
   2538a:	d80c      	bhi.n	253a6 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   2538c:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
   2538e:	bf83      	ittte	hi
   25390:	fbb0 f3f2 	udivhi	r3, r0, r2
   25394:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   25398:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
   2539a:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
   2539c:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   2539e:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
   253a2:	2000      	movs	r0, #0
}
   253a4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   253a6:	f06f 0015 	mvn.w	r0, #21
   253aa:	e7fb      	b.n	253a4 <ring_buf_put_finish+0x30>

000253ac <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   253ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   253b0:	4680      	mov	r8, r0
   253b2:	460e      	mov	r6, r1
   253b4:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   253b6:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   253b8:	462a      	mov	r2, r5
   253ba:	a901      	add	r1, sp, #4
   253bc:	4640      	mov	r0, r8
   253be:	f7ff ffac 	bl	2531a <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   253c2:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   253c4:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   253c6:	4602      	mov	r2, r0
   253c8:	9801      	ldr	r0, [sp, #4]
   253ca:	f003 f8f4 	bl	285b6 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   253ce:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   253d0:	4427      	add	r7, r4
		data += partial_size;
   253d2:	4426      	add	r6, r4
	} while (size && partial_size);
   253d4:	d001      	beq.n	253da <ring_buf_put+0x2e>
   253d6:	2c00      	cmp	r4, #0
   253d8:	d1ee      	bne.n	253b8 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   253da:	4639      	mov	r1, r7
   253dc:	4640      	mov	r0, r8
   253de:	f7ff ffc9 	bl	25374 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   253e2:	4638      	mov	r0, r7
   253e4:	b002      	add	sp, #8
   253e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000253ea <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   253ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   253ee:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   253f0:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   253f2:	42b3      	cmp	r3, r6
{
   253f4:	4604      	mov	r4, r0
   253f6:	460f      	mov	r7, r1
   253f8:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   253fa:	d907      	bls.n	2540c <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
   253fc:	6905      	ldr	r5, [r0, #16]
   253fe:	f7ff ff78 	bl	252f2 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   25402:	fbb0 f1f5 	udiv	r1, r0, r5
   25406:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
   25408:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2540c:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   2540e:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   25410:	6923      	ldr	r3, [r4, #16]
   25412:	b185      	cbz	r5, 25436 <ring_buf_get_claim+0x4c>
   25414:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   25416:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   25418:	4540      	cmp	r0, r8
   2541a:	bf28      	it	cs
   2541c:	4640      	movcs	r0, r8
   2541e:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   25420:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   25422:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
   25424:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   25426:	bf28      	it	cs
   25428:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   2542a:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
   2542c:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   2542e:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   25430:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
   25432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   25436:	fbb1 f5f3 	udiv	r5, r1, r3
   2543a:	fb03 1515 	mls	r5, r3, r5, r1
   2543e:	e7ea      	b.n	25416 <ring_buf_get_claim+0x2c>

00025440 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   25440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   25442:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   25444:	68c3      	ldr	r3, [r0, #12]
   25446:	42b3      	cmp	r3, r6
{
   25448:	4605      	mov	r5, r0
   2544a:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   2544c:	d914      	bls.n	25478 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
   2544e:	6907      	ldr	r7, [r0, #16]
   25450:	f7ff ff4f 	bl	252f2 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   25454:	fbb0 f1f7 	udiv	r1, r0, r7
   25458:	3901      	subs	r1, #1
   2545a:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
   2545e:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
   25460:	6829      	ldr	r1, [r5, #0]
   25462:	4421      	add	r1, r4
   25464:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   25466:	bf9f      	itttt	ls
   25468:	1ac9      	subls	r1, r1, r3
   2546a:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   2546c:	60e9      	strls	r1, [r5, #12]

	return 0;
   2546e:	2000      	movls	r0, #0
		return -EINVAL;
   25470:	bf88      	it	hi
   25472:	f06f 0015 	mvnhi.w	r0, #21
}
   25476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   25478:	2300      	movs	r3, #0
   2547a:	e7f1      	b.n	25460 <ring_buf_get_finish+0x20>

0002547c <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   2547c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25480:	4680      	mov	r8, r0
   25482:	460d      	mov	r5, r1
   25484:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   25486:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   25488:	4632      	mov	r2, r6
   2548a:	a901      	add	r1, sp, #4
   2548c:	4640      	mov	r0, r8
   2548e:	f7ff ffac 	bl	253ea <ring_buf_get_claim>
   25492:	4604      	mov	r4, r0
		if (data) {
   25494:	b12d      	cbz	r5, 254a2 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   25496:	4602      	mov	r2, r0
   25498:	9901      	ldr	r1, [sp, #4]
   2549a:	4628      	mov	r0, r5
   2549c:	f003 f88b 	bl	285b6 <memcpy>
			data += partial_size;
   254a0:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   254a2:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   254a4:	4427      	add	r7, r4
	} while (size && partial_size);
   254a6:	d001      	beq.n	254ac <ring_buf_get+0x30>
   254a8:	2c00      	cmp	r4, #0
   254aa:	d1ed      	bne.n	25488 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   254ac:	4639      	mov	r1, r7
   254ae:	4640      	mov	r0, r8
   254b0:	f7ff ffc6 	bl	25440 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   254b4:	4638      	mov	r0, r7
   254b6:	b002      	add	sp, #8
   254b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000254bc <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   254bc:	4602      	mov	r2, r0
   254be:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   254c0:	68c0      	ldr	r0, [r0, #12]
   254c2:	6814      	ldr	r4, [r2, #0]
   254c4:	42a0      	cmp	r0, r4
   254c6:	d904      	bls.n	254d2 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   254c8:	3801      	subs	r0, #1
   254ca:	1b00      	subs	r0, r0, r4
   254cc:	6008      	str	r0, [r1, #0]

		return false;
   254ce:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   254d0:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   254d2:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   254d4:	b918      	cbnz	r0, 254de <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   254d6:	3b01      	subs	r3, #1
   254d8:	1b1b      	subs	r3, r3, r4
   254da:	600b      	str	r3, [r1, #0]
		return false;
   254dc:	e7f8      	b.n	254d0 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   254de:	1b1b      	subs	r3, r3, r4
   254e0:	600b      	str	r3, [r1, #0]
	return true;
   254e2:	2001      	movs	r0, #1
   254e4:	e7f4      	b.n	254d0 <free_space+0x14>

000254e6 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   254e6:	b510      	push	{r4, lr}
   254e8:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   254ea:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   254ec:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   254ee:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   254f0:	07d2      	lsls	r2, r2, #31
   254f2:	d502      	bpl.n	254fa <idx_inc+0x14>
		return i & (buffer->size - 1);
   254f4:	3b01      	subs	r3, #1
   254f6:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   254f8:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   254fa:	4298      	cmp	r0, r3
   254fc:	bf28      	it	cs
   254fe:	1ac0      	subcs	r0, r0, r3
   25500:	e7fa      	b.n	254f8 <idx_inc+0x12>

00025502 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   25502:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25504:	69c2      	ldr	r2, [r0, #28]
{
   25506:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   25508:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2550a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2550c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25510:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25514:	462a      	mov	r2, r5
   25516:	6801      	ldr	r1, [r0, #0]
{
   25518:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2551a:	f7ff ffe4 	bl	254e6 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2551e:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25520:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25522:	462a      	mov	r2, r5
   25524:	4620      	mov	r0, r4
   25526:	f7ff ffde 	bl	254e6 <idx_inc>
   2552a:	6060      	str	r0, [r4, #4]
}
   2552c:	bd38      	pop	{r3, r4, r5, pc}

0002552e <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   2552e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25532:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   25536:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   2553a:	461f      	mov	r7, r3
	*user_packet = false;
   2553c:	2300      	movs	r3, #0
   2553e:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   25540:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   25544:	f003 0303 	and.w	r3, r3, #3
   25548:	2b02      	cmp	r3, #2
{
   2554a:	4604      	mov	r4, r0
   2554c:	468b      	mov	fp, r1
   2554e:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25550:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   25554:	d103      	bne.n	2555e <drop_item_locked+0x30>
		return item->skip.len;
   25556:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2555a:	08ad      	lsrs	r5, r5, #2
   2555c:	d12e      	bne.n	255bc <drop_item_locked+0x8e>
   2555e:	69a3      	ldr	r3, [r4, #24]
   25560:	4630      	mov	r0, r6
   25562:	4798      	blx	r3
   25564:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   25566:	f1b8 0f00 	cmp.w	r8, #0
   2556a:	d036      	beq.n	255da <drop_item_locked+0xac>
		if (item->hdr.busy) {
   2556c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   25570:	079b      	lsls	r3, r3, #30
   25572:	d52f      	bpl.n	255d4 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   25574:	f10b 0101 	add.w	r1, fp, #1
   25578:	4620      	mov	r0, r4
   2557a:	f7ff ffc2 	bl	25502 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2557e:	6861      	ldr	r1, [r4, #4]
   25580:	462a      	mov	r2, r5
   25582:	4620      	mov	r0, r4
   25584:	f7ff ffaf 	bl	254e6 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25588:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2558a:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2558c:	462a      	mov	r2, r5
   2558e:	4620      	mov	r0, r4
   25590:	f7ff ffa9 	bl	254e6 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25594:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25596:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25598:	68e1      	ldr	r1, [r4, #12]
   2559a:	4620      	mov	r0, r4
   2559c:	f7ff ffa3 	bl	254e6 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   255a0:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   255a2:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   255a6:	f002 0203 	and.w	r2, r2, #3
   255aa:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   255ac:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   255b0:	d10c      	bne.n	255cc <drop_item_locked+0x9e>
		return item->skip.len;
   255b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   255b6:	089b      	lsrs	r3, r3, #2
   255b8:	d008      	beq.n	255cc <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   255ba:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   255bc:	68e1      	ldr	r1, [r4, #12]
   255be:	462a      	mov	r2, r5
   255c0:	4620      	mov	r0, r4
   255c2:	f7ff ff90 	bl	254e6 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   255c6:	e9c4 0002 	strd	r0, r0, [r4, #8]
   255ca:	e007      	b.n	255dc <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   255cc:	69a3      	ldr	r3, [r4, #24]
   255ce:	4630      	mov	r0, r6
   255d0:	4798      	blx	r3
   255d2:	4405      	add	r5, r0
			*user_packet = true;
   255d4:	2301      	movs	r3, #1
   255d6:	703b      	strb	r3, [r7, #0]
   255d8:	e7f0      	b.n	255bc <drop_item_locked+0x8e>
		item = NULL;
   255da:	4646      	mov	r6, r8
	}

	return item;
}
   255dc:	4630      	mov	r0, r6
   255de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000255e2 <mpsc_pbuf_init>:
{
   255e2:	b538      	push	{r3, r4, r5, lr}
   255e4:	460d      	mov	r5, r1
   255e6:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   255e8:	221c      	movs	r2, #28
   255ea:	2100      	movs	r1, #0
   255ec:	f002 ffee 	bl	285cc <memset>
	buffer->get_wlen = cfg->get_wlen;
   255f0:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
   255f2:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
   255f4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   255f6:	68ab      	ldr	r3, [r5, #8]
   255f8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   255fa:	682b      	ldr	r3, [r5, #0]
   255fc:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   255fe:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   25600:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   25602:	b122      	cbz	r2, 2560e <mpsc_pbuf_init+0x2c>
   25604:	1e51      	subs	r1, r2, #1
   25606:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   25608:	bf08      	it	eq
   2560a:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   2560e:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25610:	2201      	movs	r2, #1
   25612:	f104 0024 	add.w	r0, r4, #36	; 0x24
   25616:	2100      	movs	r1, #0
}
   25618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2561c:	f006 b85b 	b.w	2b6d6 <z_impl_k_sem_init>

00025620 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   25620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25624:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   25626:	6a03      	ldr	r3, [r0, #32]
   25628:	3b01      	subs	r3, #1
   2562a:	428b      	cmp	r3, r1
{
   2562c:	b085      	sub	sp, #20
   2562e:	4604      	mov	r4, r0
   25630:	460f      	mov	r7, r1
   25632:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   25634:	d364      	bcc.n	25700 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
   25636:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   25638:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   2563a:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
   2563e:	f04f 0320 	mov.w	r3, #32
   25642:	f3ef 8611 	mrs	r6, BASEPRI
   25646:	f383 8812 	msr	BASEPRI_MAX, r3
   2564a:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   2564e:	a903      	add	r1, sp, #12
   25650:	4620      	mov	r0, r4
   25652:	f7ff ff33 	bl	254bc <free_space>
		if (free_wlen >= wlen) {
   25656:	9903      	ldr	r1, [sp, #12]
   25658:	42b9      	cmp	r1, r7
   2565a:	d321      	bcc.n	256a0 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2565c:	6821      	ldr	r1, [r4, #0]
			item =
   2565e:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   25660:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   25664:	f022 0203 	bic.w	r2, r2, #3
   25668:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   2566c:	4620      	mov	r0, r4
   2566e:	463a      	mov	r2, r7
			item =
   25670:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   25674:	f7ff ff37 	bl	254e6 <idx_inc>
		cont = false;
   25678:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   2567a:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   2567c:	f386 8811 	msr	BASEPRI, r6
   25680:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   25684:	2b00      	cmp	r3, #0
   25686:	d03d      	beq.n	25704 <mpsc_pbuf_alloc+0xe4>
   25688:	2d00      	cmp	r5, #0
   2568a:	d0d8      	beq.n	2563e <mpsc_pbuf_alloc+0x1e>
   2568c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   25690:	2b00      	cmp	r3, #0
   25692:	d0d4      	beq.n	2563e <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
   25694:	4629      	mov	r1, r5
   25696:	6963      	ldr	r3, [r4, #20]
   25698:	4620      	mov	r0, r4
   2569a:	4798      	blx	r3
			dropped_item = NULL;
   2569c:	2500      	movs	r5, #0
   2569e:	e7ce      	b.n	2563e <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   256a0:	b128      	cbz	r0, 256ae <mpsc_pbuf_alloc+0x8e>
   256a2:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   256a4:	4620      	mov	r0, r4
   256a6:	f7ff ff2c 	bl	25502 <add_skip_item>
			cont = true;
   256aa:	9b01      	ldr	r3, [sp, #4]
   256ac:	e7e6      	b.n	2567c <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   256ae:	ea58 0309 	orrs.w	r3, r8, r9
   256b2:	d017      	beq.n	256e4 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
   256b4:	f005 ff10 	bl	2b4d8 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   256b8:	b9a0      	cbnz	r0, 256e4 <mpsc_pbuf_alloc+0xc4>
   256ba:	f386 8811 	msr	BASEPRI, r6
   256be:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   256c2:	4642      	mov	r2, r8
   256c4:	464b      	mov	r3, r9
   256c6:	4658      	mov	r0, fp
   256c8:	f7fe fa1e 	bl	23b08 <z_impl_k_sem_take>
	__asm__ volatile(
   256cc:	f04f 0320 	mov.w	r3, #32
   256d0:	f3ef 8611 	mrs	r6, BASEPRI
   256d4:	f383 8812 	msr	BASEPRI_MAX, r3
   256d8:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   256dc:	fab0 f380 	clz	r3, r0
   256e0:	095b      	lsrs	r3, r3, #5
   256e2:	e7cb      	b.n	2567c <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   256e4:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   256e6:	9903      	ldr	r1, [sp, #12]
   256e8:	f10d 030b 	add.w	r3, sp, #11
   256ec:	f3c2 0240 	ubfx	r2, r2, #1, #1
   256f0:	4620      	mov	r0, r4
   256f2:	f7ff ff1c 	bl	2552e <drop_item_locked>
			cont = dropped_item != NULL;
   256f6:	1e03      	subs	r3, r0, #0
   256f8:	4605      	mov	r5, r0
   256fa:	bf18      	it	ne
   256fc:	2301      	movne	r3, #1
   256fe:	e7bd      	b.n	2567c <mpsc_pbuf_alloc+0x5c>
		return NULL;
   25700:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   25704:	4650      	mov	r0, sl
   25706:	b005      	add	sp, #20
   25708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002570c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2570c:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   2570e:	6983      	ldr	r3, [r0, #24]
{
   25710:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   25712:	4608      	mov	r0, r1
{
   25714:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   25716:	4798      	blx	r3
   25718:	4602      	mov	r2, r0
   2571a:	f04f 0320 	mov.w	r3, #32
   2571e:	f3ef 8611 	mrs	r6, BASEPRI
   25722:	f383 8812 	msr	BASEPRI_MAX, r3
   25726:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2572a:	782b      	ldrb	r3, [r5, #0]
   2572c:	f043 0301 	orr.w	r3, r3, #1
   25730:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25732:	6861      	ldr	r1, [r4, #4]
   25734:	4620      	mov	r0, r4
   25736:	f7ff fed6 	bl	254e6 <idx_inc>
   2573a:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
   2573c:	f386 8811 	msr	BASEPRI, r6
   25740:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   25744:	bd70      	pop	{r4, r5, r6, pc}

00025746 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   25746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2574a:	4604      	mov	r4, r0
	__asm__ volatile(
   2574c:	f04f 0320 	mov.w	r3, #32
   25750:	f3ef 8611 	mrs	r6, BASEPRI
   25754:	f383 8812 	msr	BASEPRI_MAX, r3
   25758:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2575c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   25760:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   25762:	bf88      	it	hi
   25764:	6a23      	ldrhi	r3, [r4, #32]
   25766:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   25768:	b1f3      	cbz	r3, 257a8 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   2576a:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   2576c:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   25770:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   25774:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   25778:	d016      	beq.n	257a8 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   2577a:	2b02      	cmp	r3, #2
   2577c:	d103      	bne.n	25786 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   2577e:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   25782:	08ad      	lsrs	r5, r5, #2
   25784:	d115      	bne.n	257b2 <mpsc_pbuf_claim+0x6c>
   25786:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   25788:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   2578a:	d50f      	bpl.n	257ac <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   2578c:	f042 0202 	orr.w	r2, r2, #2
   25790:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   25794:	4640      	mov	r0, r8
   25796:	4798      	blx	r3
   25798:	4639      	mov	r1, r7
   2579a:	4602      	mov	r2, r0
   2579c:	4620      	mov	r0, r4
   2579e:	f7ff fea2 	bl	254e6 <idx_inc>
		cont = false;
   257a2:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   257a4:	60a0      	str	r0, [r4, #8]
   257a6:	e011      	b.n	257cc <mpsc_pbuf_claim+0x86>
			item = NULL;
   257a8:	4698      	mov	r8, r3
   257aa:	e00f      	b.n	257cc <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   257ac:	4640      	mov	r0, r8
   257ae:	4798      	blx	r3
   257b0:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   257b2:	68a1      	ldr	r1, [r4, #8]
   257b4:	462a      	mov	r2, r5
   257b6:	4620      	mov	r0, r4
   257b8:	f7ff fe95 	bl	254e6 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   257bc:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   257be:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   257c0:	462a      	mov	r2, r5
   257c2:	4620      	mov	r0, r4
   257c4:	f7ff fe8f 	bl	254e6 <idx_inc>
				cont = true;
   257c8:	2301      	movs	r3, #1
				buffer->rd_idx =
   257ca:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   257cc:	f386 8811 	msr	BASEPRI, r6
   257d0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   257d4:	2b00      	cmp	r3, #0
   257d6:	d1b9      	bne.n	2574c <mpsc_pbuf_claim+0x6>

	return item;
}
   257d8:	4640      	mov	r0, r8
   257da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000257de <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   257de:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   257e0:	6983      	ldr	r3, [r0, #24]
{
   257e2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   257e4:	4608      	mov	r0, r1
{
   257e6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   257e8:	4798      	blx	r3
   257ea:	4602      	mov	r2, r0
	__asm__ volatile(
   257ec:	f04f 0320 	mov.w	r3, #32
   257f0:	f3ef 8611 	mrs	r6, BASEPRI
   257f4:	f383 8812 	msr	BASEPRI_MAX, r3
   257f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   257fc:	782b      	ldrb	r3, [r5, #0]
   257fe:	f36f 0300 	bfc	r3, #0, #1
   25802:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   25804:	6923      	ldr	r3, [r4, #16]
   25806:	079b      	lsls	r3, r3, #30
   25808:	d505      	bpl.n	25816 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2580a:	68e1      	ldr	r1, [r4, #12]
   2580c:	69e3      	ldr	r3, [r4, #28]
   2580e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   25812:	429d      	cmp	r5, r3
   25814:	d112      	bne.n	2583c <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   25816:	782b      	ldrb	r3, [r5, #0]
   25818:	f36f 0341 	bfc	r3, #1, #1
   2581c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2581e:	68e1      	ldr	r1, [r4, #12]
   25820:	4620      	mov	r0, r4
   25822:	f7ff fe60 	bl	254e6 <idx_inc>
   25826:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25828:	f386 8811 	msr	BASEPRI, r6
   2582c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   25830:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   25834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25838:	f7fe b940 	b.w	23abc <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2583c:	682b      	ldr	r3, [r5, #0]
   2583e:	f360 039f 	bfi	r3, r0, #2, #30
   25842:	602b      	str	r3, [r5, #0]
   25844:	e7f0      	b.n	25828 <mpsc_pbuf_free+0x4a>

00025846 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   25846:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2584a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2584c:	bf8a      	itet	hi
   2584e:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   25850:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   25852:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   25854:	1e18      	subs	r0, r3, #0
   25856:	bf18      	it	ne
   25858:	2001      	movne	r0, #1
   2585a:	4770      	bx	lr

0002585c <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   2585c:	070b      	lsls	r3, r1, #28
   2585e:	d504      	bpl.n	2586a <foldcase+0xe>
   25860:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   25864:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   25866:	bf98      	it	ls
   25868:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   2586a:	4770      	bx	lr

0002586c <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   2586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25870:	b087      	sub	sp, #28
   25872:	468a      	mov	sl, r1
   25874:	4614      	mov	r4, r2
   25876:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   25878:	4605      	mov	r5, r0
   2587a:	b918      	cbnz	r0, 25884 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   2587c:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   2587e:	b007      	add	sp, #28
   25880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   25884:	2900      	cmp	r1, #0
   25886:	d0f9      	beq.n	2587c <fnmatchx+0x10>
    if (recursion-- == 0)
   25888:	9b02      	ldr	r3, [sp, #8]
   2588a:	2b00      	cmp	r3, #0
   2588c:	f000 8113 	beq.w	25ab6 <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   25890:	f004 0304 	and.w	r3, r4, #4
   25894:	460a      	mov	r2, r1
   25896:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   25898:	46a9      	mov	r9, r5
   2589a:	4621      	mov	r1, r4
   2589c:	f819 0b01 	ldrb.w	r0, [r9], #1
   258a0:	f7ff ffdc 	bl	2585c <foldcase>
   258a4:	4603      	mov	r3, r0
   258a6:	b2c0      	uxtb	r0, r0
   258a8:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   258aa:	7817      	ldrb	r7, [r2, #0]
   258ac:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
   258ae:	d025      	beq.n	258fc <fnmatchx+0x90>
   258b0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   258b4:	d10b      	bne.n	258ce <fnmatchx+0x62>
   258b6:	b1c8      	cbz	r0, 258ec <fnmatchx+0x80>
   258b8:	282a      	cmp	r0, #42	; 0x2a
   258ba:	d036      	beq.n	2592a <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
   258bc:	4621      	mov	r1, r4
   258be:	4638      	mov	r0, r7
   258c0:	f7ff ffcc 	bl	2585c <foldcase>
   258c4:	4286      	cmp	r6, r0
   258c6:	f102 0201 	add.w	r2, r2, #1
   258ca:	d01e      	beq.n	2590a <fnmatchx+0x9e>
   258cc:	e7d6      	b.n	2587c <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   258ce:	285b      	cmp	r0, #91	; 0x5b
   258d0:	d07b      	beq.n	259ca <fnmatchx+0x15e>
   258d2:	285c      	cmp	r0, #92	; 0x5c
   258d4:	d1f2      	bne.n	258bc <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   258d6:	07e0      	lsls	r0, r4, #31
   258d8:	d4f0      	bmi.n	258bc <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   258da:	7868      	ldrb	r0, [r5, #1]
   258dc:	f7ff ffbe 	bl	2585c <foldcase>
   258e0:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   258e4:	bf18      	it	ne
   258e6:	f105 0902 	addne.w	r9, r5, #2
   258ea:	e7e7      	b.n	258bc <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   258ec:	06e3      	lsls	r3, r4, #27
   258ee:	d501      	bpl.n	258f4 <fnmatchx+0x88>
   258f0:	2f2f      	cmp	r7, #47	; 0x2f
   258f2:	d0c4      	beq.n	2587e <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   258f4:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   258f6:	bf18      	it	ne
   258f8:	2001      	movne	r0, #1
   258fa:	e7c0      	b.n	2587e <fnmatchx+0x12>
            if (*string == EOS)
   258fc:	2f00      	cmp	r7, #0
   258fe:	d0bd      	beq.n	2587c <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   25900:	2f2f      	cmp	r7, #47	; 0x2f
   25902:	d104      	bne.n	2590e <fnmatchx+0xa2>
   25904:	07a6      	lsls	r6, r4, #30
   25906:	d4b9      	bmi.n	2587c <fnmatchx+0x10>
            ++string;
   25908:	3201      	adds	r2, #1
            break;
   2590a:	464d      	mov	r5, r9
   2590c:	e7c4      	b.n	25898 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   2590e:	2f2e      	cmp	r7, #46	; 0x2e
   25910:	d1fa      	bne.n	25908 <fnmatchx+0x9c>
   25912:	9b04      	ldr	r3, [sp, #16]
   25914:	2b00      	cmp	r3, #0
   25916:	d0f7      	beq.n	25908 <fnmatchx+0x9c>
   25918:	4552      	cmp	r2, sl
   2591a:	d0af      	beq.n	2587c <fnmatchx+0x10>
                (string == stringstart ||
   2591c:	07a5      	lsls	r5, r4, #30
   2591e:	d5f3      	bpl.n	25908 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   25920:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   25924:	2b2f      	cmp	r3, #47	; 0x2f
   25926:	d1ef      	bne.n	25908 <fnmatchx+0x9c>
   25928:	e7a8      	b.n	2587c <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   2592a:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   2592c:	f7ff ff96 	bl	2585c <foldcase>
   25930:	b2c1      	uxtb	r1, r0
            while (c == '*')
   25932:	292a      	cmp	r1, #42	; 0x2a
   25934:	d018      	beq.n	25968 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   25936:	2f2e      	cmp	r7, #46	; 0x2e
   25938:	d109      	bne.n	2594e <fnmatchx+0xe2>
   2593a:	9b04      	ldr	r3, [sp, #16]
   2593c:	b13b      	cbz	r3, 2594e <fnmatchx+0xe2>
   2593e:	4552      	cmp	r2, sl
   25940:	d09c      	beq.n	2587c <fnmatchx+0x10>
                (string == stringstart ||
   25942:	07a0      	lsls	r0, r4, #30
   25944:	d503      	bpl.n	2594e <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   25946:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   2594a:	2b2f      	cmp	r3, #47	; 0x2f
   2594c:	d096      	beq.n	2587c <fnmatchx+0x10>
            if (c == EOS) {
   2594e:	b979      	cbnz	r1, 25970 <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
   25950:	f014 0002 	ands.w	r0, r4, #2
   25954:	d093      	beq.n	2587e <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   25956:	06e3      	lsls	r3, r4, #27
   25958:	f100 80af 	bmi.w	25aba <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
   2595c:	212f      	movs	r1, #47	; 0x2f
   2595e:	4610      	mov	r0, r2
   25960:	f002 fdc5 	bl	284ee <strchr>
                        0 : FNM_NOMATCH;
   25964:	3800      	subs	r0, #0
   25966:	e7c6      	b.n	258f6 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
   25968:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   2596c:	4621      	mov	r1, r4
   2596e:	e7dd      	b.n	2592c <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   25970:	292f      	cmp	r1, #47	; 0x2f
   25972:	d021      	beq.n	259b8 <fnmatchx+0x14c>
    if (recursion-- == 0)
   25974:	9b02      	ldr	r3, [sp, #8]
   25976:	4616      	mov	r6, r2
   25978:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   2597a:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   2597e:	f004 0a02 	and.w	sl, r4, #2
   25982:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   25984:	4621      	mov	r1, r4
   25986:	f89b 0000 	ldrb.w	r0, [fp]
   2598a:	f7ff ff67 	bl	2585c <foldcase>
   2598e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   25992:	f106 0601 	add.w	r6, r6, #1
   25996:	f43f af71 	beq.w	2587c <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   2599a:	463b      	mov	r3, r7
   2599c:	4642      	mov	r2, r8
   2599e:	4659      	mov	r1, fp
   259a0:	4648      	mov	r0, r9
   259a2:	f7ff ff63 	bl	2586c <fnmatchx>
   259a6:	2801      	cmp	r0, #1
   259a8:	f47f af69 	bne.w	2587e <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   259ac:	2d2f      	cmp	r5, #47	; 0x2f
   259ae:	d1e8      	bne.n	25982 <fnmatchx+0x116>
   259b0:	f1ba 0f00 	cmp.w	sl, #0
   259b4:	d0e5      	beq.n	25982 <fnmatchx+0x116>
   259b6:	e761      	b.n	2587c <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   259b8:	07a7      	lsls	r7, r4, #30
   259ba:	d5db      	bpl.n	25974 <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
   259bc:	4610      	mov	r0, r2
   259be:	f002 fd96 	bl	284ee <strchr>
   259c2:	4602      	mov	r2, r0
   259c4:	2800      	cmp	r0, #0
   259c6:	d1a0      	bne.n	2590a <fnmatchx+0x9e>
   259c8:	e758      	b.n	2587c <fnmatchx+0x10>
            if (*string == EOS)
   259ca:	2f00      	cmp	r7, #0
   259cc:	f43f af56 	beq.w	2587c <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   259d0:	2f2f      	cmp	r7, #47	; 0x2f
   259d2:	d102      	bne.n	259da <fnmatchx+0x16e>
   259d4:	07a6      	lsls	r6, r4, #30
   259d6:	f53f af51 	bmi.w	2587c <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   259da:	4621      	mov	r1, r4
   259dc:	4638      	mov	r0, r7
   259de:	f7ff ff3d 	bl	2585c <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   259e2:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
   259e4:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   259e6:	2b21      	cmp	r3, #33	; 0x21
   259e8:	d001      	beq.n	259ee <fnmatchx+0x182>
   259ea:	2b5e      	cmp	r3, #94	; 0x5e
   259ec:	d123      	bne.n	25a36 <fnmatchx+0x1ca>
        ++pattern;
   259ee:	3502      	adds	r5, #2
   259f0:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   259f2:	9301      	str	r3, [sp, #4]
    need = 1;
   259f4:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   259f6:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   259fa:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   259fe:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   25a00:	462e      	mov	r6, r5
   25a02:	4621      	mov	r1, r4
   25a04:	f816 0b01 	ldrb.w	r0, [r6], #1
   25a08:	9305      	str	r3, [sp, #20]
   25a0a:	f7ff ff27 	bl	2585c <foldcase>
   25a0e:	fa5f f880 	uxtb.w	r8, r0
   25a12:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   25a16:	9b05      	ldr	r3, [sp, #20]
   25a18:	d110      	bne.n	25a3c <fnmatchx+0x1d0>
   25a1a:	bb0b      	cbnz	r3, 25a60 <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
   25a1c:	9b01      	ldr	r3, [sp, #4]
   25a1e:	455b      	cmp	r3, fp
   25a20:	f43f af2c 	beq.w	2587c <fnmatchx+0x10>
            if (r == (void *)-1) {
   25a24:	1c73      	adds	r3, r6, #1
   25a26:	d103      	bne.n	25a30 <fnmatchx+0x1c4>
                if (*string != '[')
   25a28:	2f5b      	cmp	r7, #91	; 0x5b
   25a2a:	f47f af27 	bne.w	2587c <fnmatchx+0x10>
   25a2e:	464e      	mov	r6, r9
            ++string;
   25a30:	3201      	adds	r2, #1
            break;
   25a32:	46b1      	mov	r9, r6
   25a34:	e769      	b.n	2590a <fnmatchx+0x9e>
   25a36:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   25a38:	2300      	movs	r3, #0
   25a3a:	e7da      	b.n	259f2 <fnmatchx+0x186>
        if (c == '/')
   25a3c:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
   25a40:	d0f2      	beq.n	25a28 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   25a42:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
   25a46:	d107      	bne.n	25a58 <fnmatchx+0x1ec>
   25a48:	9b03      	ldr	r3, [sp, #12]
   25a4a:	b94b      	cbnz	r3, 25a60 <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
   25a4c:	7868      	ldrb	r0, [r5, #1]
   25a4e:	f7ff ff05 	bl	2585c <foldcase>
   25a52:	1cae      	adds	r6, r5, #2
   25a54:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
   25a58:	f1b8 0f00 	cmp.w	r8, #0
   25a5c:	f43f af0e 	beq.w	2587c <fnmatchx+0x10>
        if (*pattern == '-' 
   25a60:	7833      	ldrb	r3, [r6, #0]
   25a62:	2b2d      	cmp	r3, #45	; 0x2d
   25a64:	d120      	bne.n	25aa8 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   25a66:	7870      	ldrb	r0, [r6, #1]
   25a68:	4621      	mov	r1, r4
   25a6a:	f7ff fef7 	bl	2585c <foldcase>
   25a6e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   25a72:	d019      	beq.n	25aa8 <fnmatchx+0x23c>
   25a74:	285d      	cmp	r0, #93	; 0x5d
   25a76:	d017      	beq.n	25aa8 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   25a78:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   25a7a:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   25a7e:	d10a      	bne.n	25a96 <fnmatchx+0x22a>
   25a80:	9b03      	ldr	r3, [sp, #12]
   25a82:	b943      	cbnz	r3, 25a96 <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
   25a84:	78b0      	ldrb	r0, [r6, #2]
   25a86:	f7ff fee9 	bl	2585c <foldcase>
            if (c2 == EOS)
   25a8a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   25a8e:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   25a92:	f43f aef3 	beq.w	2587c <fnmatchx+0x10>
            if (c <= test && test <= c2)
   25a96:	9b00      	ldr	r3, [sp, #0]
   25a98:	4543      	cmp	r3, r8
   25a9a:	db03      	blt.n	25aa4 <fnmatchx+0x238>
                ok = 1;
   25a9c:	4283      	cmp	r3, r0
   25a9e:	bfd8      	it	le
   25aa0:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   25aa4:	2300      	movs	r3, #0
   25aa6:	e7ab      	b.n	25a00 <fnmatchx+0x194>
        } else if (c == test)
   25aa8:	9b00      	ldr	r3, [sp, #0]
   25aaa:	4635      	mov	r5, r6
   25aac:	4543      	cmp	r3, r8
   25aae:	bf08      	it	eq
   25ab0:	f04f 0b01 	moveq.w	fp, #1
   25ab4:	e7f6      	b.n	25aa4 <fnmatchx+0x238>
        return FNM_NORES;
   25ab6:	2003      	movs	r0, #3
   25ab8:	e6e1      	b.n	2587e <fnmatchx+0x12>
                return 0;
   25aba:	4608      	mov	r0, r1
   25abc:	e6df      	b.n	2587e <fnmatchx+0x12>

00025abe <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   25abe:	2340      	movs	r3, #64	; 0x40
   25ac0:	f7ff bed4 	b.w	2586c <fnmatchx>

00025ac4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   25ac4:	4770      	bx	lr

00025ac6 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   25ac6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   25ac8:	075b      	lsls	r3, r3, #29
   25aca:	d40b      	bmi.n	25ae4 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   25acc:	6803      	ldr	r3, [r0, #0]
   25ace:	8840      	ldrh	r0, [r0, #2]
   25ad0:	f3c3 2349 	ubfx	r3, r3, #9, #10
   25ad4:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   25ad8:	4418      	add	r0, r3
   25ada:	3013      	adds	r0, #19
   25adc:	f020 0007 	bic.w	r0, r0, #7
   25ae0:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   25ae2:	4770      	bx	lr
	return 0;
   25ae4:	2000      	movs	r0, #0
}
   25ae6:	4770      	bx	lr

00025ae8 <default_get_timestamp>:
   25ae8:	f005 bac5 	b.w	2b076 <sys_clock_cycle_get_32>

00025aec <dummy_timestamp>:
   25aec:	2000      	movs	r0, #0
   25aee:	4770      	bx	lr

00025af0 <z_log_vprintk>:
{
   25af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   25af2:	2300      	movs	r3, #0
   25af4:	e9cd 0101 	strd	r0, r1, [sp, #4]
   25af8:	9300      	str	r3, [sp, #0]
   25afa:	461a      	mov	r2, r3
   25afc:	4619      	mov	r1, r3
   25afe:	4618      	mov	r0, r3
   25b00:	f7e0 fd20 	bl	6544 <z_impl_z_log_msg2_runtime_vcreate>
}
   25b04:	b005      	add	sp, #20
   25b06:	f85d fb04 	ldr.w	pc, [sp], #4

00025b0a <notify_drop>:
	z_log_dropped(true);
   25b0a:	2001      	movs	r0, #1
   25b0c:	f7e0 b8d2 	b.w	5cb4 <z_log_dropped>

00025b10 <get_msg>:
{
   25b10:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   25b12:	f7e0 f945 	bl	5da0 <z_log_msg2_claim>
}
   25b16:	bd08      	pop	{r3, pc}

00025b18 <z_log_get_tag>:
}
   25b18:	2000      	movs	r0, #0
   25b1a:	4770      	bx	lr

00025b1c <log_backend_disable>:
	backend->cb->active = false;
   25b1c:	6843      	ldr	r3, [r0, #4]
   25b1e:	2100      	movs	r1, #0
   25b20:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   25b22:	f7e0 bacf 	b.w	60c4 <backend_filter_set>

00025b26 <buffer_write>:
{
   25b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b28:	4606      	mov	r6, r0
   25b2a:	460d      	mov	r5, r1
   25b2c:	4614      	mov	r4, r2
   25b2e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   25b30:	4621      	mov	r1, r4
   25b32:	4628      	mov	r0, r5
   25b34:	463a      	mov	r2, r7
   25b36:	47b0      	blx	r6
	} while (len != 0);
   25b38:	1a24      	subs	r4, r4, r0
		buf += processed;
   25b3a:	4405      	add	r5, r0
	} while (len != 0);
   25b3c:	d1f8      	bne.n	25b30 <buffer_write+0xa>
}
   25b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025b40 <log_output_flush>:
		     output->control_block->offset,
   25b40:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   25b42:	6881      	ldr	r1, [r0, #8]
{
   25b44:	b510      	push	{r4, lr}
   25b46:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   25b48:	e9d2 2300 	ldrd	r2, r3, [r2]
   25b4c:	6800      	ldr	r0, [r0, #0]
   25b4e:	f7ff ffea 	bl	25b26 <buffer_write>
	output->control_block->offset = 0;
   25b52:	6863      	ldr	r3, [r4, #4]
   25b54:	2200      	movs	r2, #0
   25b56:	601a      	str	r2, [r3, #0]
}
   25b58:	bd10      	pop	{r4, pc}

00025b5a <out_func>:
{
   25b5a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   25b5c:	684b      	ldr	r3, [r1, #4]
   25b5e:	681a      	ldr	r2, [r3, #0]
   25b60:	68cb      	ldr	r3, [r1, #12]
   25b62:	429a      	cmp	r2, r3
{
   25b64:	4605      	mov	r5, r0
   25b66:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   25b68:	d102      	bne.n	25b70 <out_func+0x16>
		log_output_flush(out_ctx);
   25b6a:	4608      	mov	r0, r1
   25b6c:	f7ff ffe8 	bl	25b40 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25b70:	6863      	ldr	r3, [r4, #4]
   25b72:	f3bf 8f5b 	dmb	ish
   25b76:	e853 2f00 	ldrex	r2, [r3]
   25b7a:	1c51      	adds	r1, r2, #1
   25b7c:	e843 1000 	strex	r0, r1, [r3]
   25b80:	2800      	cmp	r0, #0
   25b82:	d1f8      	bne.n	25b76 <out_func+0x1c>
   25b84:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   25b88:	68a3      	ldr	r3, [r4, #8]
   25b8a:	549d      	strb	r5, [r3, r2]
}
   25b8c:	2000      	movs	r0, #0
   25b8e:	bd38      	pop	{r3, r4, r5, pc}

00025b90 <cr_out_func>:
{
   25b90:	b538      	push	{r3, r4, r5, lr}
   25b92:	4605      	mov	r5, r0
   25b94:	460c      	mov	r4, r1
	out_func(c, ctx);
   25b96:	f7ff ffe0 	bl	25b5a <out_func>
	if (c == '\n') {
   25b9a:	2d0a      	cmp	r5, #10
   25b9c:	d103      	bne.n	25ba6 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   25b9e:	4621      	mov	r1, r4
   25ba0:	200d      	movs	r0, #13
   25ba2:	f7ff ffda 	bl	25b5a <out_func>
}
   25ba6:	2000      	movs	r0, #0
   25ba8:	bd38      	pop	{r3, r4, r5, pc}

00025baa <z_log_msg2_finalize>:
{
   25baa:	b570      	push	{r4, r5, r6, lr}
   25bac:	460e      	mov	r6, r1
   25bae:	4615      	mov	r5, r2
   25bb0:	4619      	mov	r1, r3
	if (!msg) {
   25bb2:	4604      	mov	r4, r0
   25bb4:	b918      	cbnz	r0, 25bbe <z_log_msg2_finalize+0x14>
}
   25bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   25bba:	f7e0 b87b 	b.w	5cb4 <z_log_dropped>
	if (data) {
   25bbe:	b143      	cbz	r3, 25bd2 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   25bc0:	f100 030c 	add.w	r3, r0, #12
   25bc4:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   25bc8:	4418      	add	r0, r3
   25bca:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   25bce:	f002 fcf2 	bl	285b6 <memcpy>
	msg->hdr.source = source;
   25bd2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   25bd6:	4620      	mov	r0, r4
}
   25bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
   25bdc:	f7e0 b9be 	b.w	5f5c <z_log_msg2_commit>

00025be0 <z_impl_z_log_msg2_static_create>:
{
   25be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   25be4:	f3c1 2949 	ubfx	r9, r1, #9, #10
   25be8:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   25bec:	444c      	add	r4, r9
   25bee:	3413      	adds	r4, #19
   25bf0:	f024 0407 	bic.w	r4, r4, #7
   25bf4:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   25bf6:	08a0      	lsrs	r0, r4, #2
{
   25bf8:	460d      	mov	r5, r1
   25bfa:	4690      	mov	r8, r2
   25bfc:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   25bfe:	f7e0 f8c7 	bl	5d90 <z_log_msg2_alloc>
	if (msg) {
   25c02:	4604      	mov	r4, r0
   25c04:	b120      	cbz	r0, 25c10 <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
   25c06:	464a      	mov	r2, r9
   25c08:	4641      	mov	r1, r8
   25c0a:	300c      	adds	r0, #12
   25c0c:	f002 fcd3 	bl	285b6 <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
   25c10:	463b      	mov	r3, r7
   25c12:	462a      	mov	r2, r5
   25c14:	4631      	mov	r1, r6
   25c16:	4620      	mov	r0, r4
}
   25c18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
   25c1c:	f7ff bfc5 	b.w	25baa <z_log_msg2_finalize>

00025c20 <log_halt>:
   25c20:	684b      	ldr	r3, [r1, #4]
   25c22:	2000      	movs	r0, #0
   25c24:	7158      	strb	r0, [r3, #5]
}
   25c26:	4770      	bx	lr

00025c28 <log_go>:
	backend->cb->active = true;
   25c28:	684b      	ldr	r3, [r1, #4]
   25c2a:	2201      	movs	r2, #1
   25c2c:	715a      	strb	r2, [r3, #5]
}
   25c2e:	2000      	movs	r0, #0
   25c30:	4770      	bx	lr

00025c32 <cmd_log_self_status>:
{
   25c32:	b570      	push	{r4, r5, r6, lr}
   25c34:	4604      	mov	r4, r0
   25c36:	460d      	mov	r5, r1
   25c38:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   25c3a:	f7e0 fe11 	bl	6860 <shell_state_precheck>
   25c3e:	b130      	cbz	r0, 25c4e <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   25c40:	69e1      	ldr	r1, [r4, #28]
   25c42:	4633      	mov	r3, r6
   25c44:	6809      	ldr	r1, [r1, #0]
   25c46:	462a      	mov	r2, r5
   25c48:	4620      	mov	r0, r4
   25c4a:	f7e0 fd41 	bl	66d0 <log_status>
}
   25c4e:	2000      	movs	r0, #0
   25c50:	bd70      	pop	{r4, r5, r6, pc}

00025c52 <cmd_log_self_enable>:
{
   25c52:	b570      	push	{r4, r5, r6, lr}
   25c54:	4604      	mov	r4, r0
   25c56:	460d      	mov	r5, r1
   25c58:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   25c5a:	f7e0 fe01 	bl	6860 <shell_state_precheck>
   25c5e:	b140      	cbz	r0, 25c72 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   25c60:	69e1      	ldr	r1, [r4, #28]
   25c62:	4633      	mov	r3, r6
   25c64:	462a      	mov	r2, r5
   25c66:	4620      	mov	r0, r4
   25c68:	6809      	ldr	r1, [r1, #0]
}
   25c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   25c6e:	f7e0 be6f 	b.w	6950 <log_enable>
}
   25c72:	bd70      	pop	{r4, r5, r6, pc}

00025c74 <log_disable>:
{
   25c74:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   25c76:	2400      	movs	r4, #0
   25c78:	9400      	str	r4, [sp, #0]
   25c7a:	3304      	adds	r3, #4
   25c7c:	3a01      	subs	r2, #1
   25c7e:	f7e0 fdff 	bl	6880 <filters_set>
}
   25c82:	4620      	mov	r0, r4
   25c84:	b002      	add	sp, #8
   25c86:	bd10      	pop	{r4, pc}

00025c88 <cmd_log_self_disable>:
{
   25c88:	b570      	push	{r4, r5, r6, lr}
   25c8a:	4604      	mov	r4, r0
   25c8c:	460d      	mov	r5, r1
   25c8e:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   25c90:	f7e0 fde6 	bl	6860 <shell_state_precheck>
   25c94:	b140      	cbz	r0, 25ca8 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   25c96:	69e1      	ldr	r1, [r4, #28]
   25c98:	4633      	mov	r3, r6
   25c9a:	462a      	mov	r2, r5
   25c9c:	4620      	mov	r0, r4
   25c9e:	6809      	ldr	r1, [r1, #0]
}
   25ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   25ca4:	f7ff bfe6 	b.w	25c74 <log_disable>
}
   25ca8:	bd70      	pop	{r4, r5, r6, pc}

00025caa <cmd_log_self_go>:
{
   25caa:	b510      	push	{r4, lr}
   25cac:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   25cae:	f7e0 fdd7 	bl	6860 <shell_state_precheck>
   25cb2:	b120      	cbz	r0, 25cbe <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   25cb4:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   25cb6:	681b      	ldr	r3, [r3, #0]
   25cb8:	685b      	ldr	r3, [r3, #4]
   25cba:	2201      	movs	r2, #1
   25cbc:	715a      	strb	r2, [r3, #5]
}
   25cbe:	2000      	movs	r0, #0
   25cc0:	bd10      	pop	{r4, pc}

00025cc2 <cmd_log_self_halt>:
{
   25cc2:	b510      	push	{r4, lr}
   25cc4:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   25cc6:	f7e0 fdcb 	bl	6860 <shell_state_precheck>
   25cca:	b120      	cbz	r0, 25cd6 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   25ccc:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
   25cce:	681b      	ldr	r3, [r3, #0]
   25cd0:	685b      	ldr	r3, [r3, #4]
   25cd2:	2200      	movs	r2, #0
   25cd4:	715a      	strb	r2, [r3, #5]
}
   25cd6:	2000      	movs	r0, #0
   25cd8:	bd10      	pop	{r4, pc}

00025cda <read_str>:
{
   25cda:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   25cde:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   25ce2:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   25ce4:	4640      	mov	r0, r8
{
   25ce6:	461f      	mov	r7, r3
   25ce8:	460c      	mov	r4, r1
   25cea:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   25cec:	f002 fc0d 	bl	2850a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   25cf0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   25cf4:	9300      	str	r3, [sp, #0]
   25cf6:	b280      	uxth	r0, r0
   25cf8:	e9cd 8001 	strd	r8, r0, [sp, #4]
   25cfc:	463b      	mov	r3, r7
   25cfe:	4632      	mov	r2, r6
   25d00:	4621      	mov	r1, r4
   25d02:	4628      	mov	r0, r5
   25d04:	f004 f836 	bl	29d74 <bt_gatt_attr_read>
}
   25d08:	b004      	add	sp, #16
   25d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025d0e <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   25d0e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   25d10:	075b      	lsls	r3, r3, #29
   25d12:	d40b      	bmi.n	25d2c <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   25d14:	6803      	ldr	r3, [r0, #0]
   25d16:	8840      	ldrh	r0, [r0, #2]
   25d18:	f3c3 2349 	ubfx	r3, r3, #9, #10
   25d1c:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   25d20:	4418      	add	r0, r3
   25d22:	3013      	adds	r0, #19
   25d24:	f020 0007 	bic.w	r0, r0, #7
   25d28:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   25d2a:	4770      	bx	lr
	return 0;
   25d2c:	2000      	movs	r0, #0
}
   25d2e:	4770      	bx	lr

00025d30 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   25d30:	6883      	ldr	r3, [r0, #8]
   25d32:	6a1b      	ldr	r3, [r3, #32]
   25d34:	b103      	cbz	r3, 25d38 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   25d36:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   25d38:	4770      	bx	lr

00025d3a <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   25d3a:	6843      	ldr	r3, [r0, #4]
   25d3c:	681b      	ldr	r3, [r3, #0]
{
   25d3e:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   25d40:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
   25d42:	4620      	mov	r0, r4
   25d44:	f7ff fff4 	bl	25d30 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   25d48:	68a3      	ldr	r3, [r4, #8]
   25d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25d4c:	b10b      	cbz	r3, 25d52 <uninit+0x18>
		api->irq_rx_disable(dev);
   25d4e:	4620      	mov	r0, r4
   25d50:	4798      	blx	r3
}
   25d52:	2000      	movs	r0, #0
   25d54:	bd10      	pop	{r4, pc}

00025d56 <enable>:
{
   25d56:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   25d58:	6843      	ldr	r3, [r0, #4]
   25d5a:	681b      	ldr	r3, [r3, #0]
   25d5c:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   25d5e:	b111      	cbz	r1, 25d66 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   25d60:	6818      	ldr	r0, [r3, #0]
   25d62:	f7ff ffe5 	bl	25d30 <uart_irq_tx_disable>
}
   25d66:	2000      	movs	r0, #0
   25d68:	bd08      	pop	{r3, pc}

00025d6a <read>:
{
   25d6a:	b510      	push	{r4, lr}
   25d6c:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   25d6e:	6843      	ldr	r3, [r0, #4]
   25d70:	68d8      	ldr	r0, [r3, #12]
   25d72:	f7ff fb83 	bl	2547c <ring_buf_get>
   25d76:	6020      	str	r0, [r4, #0]
}
   25d78:	2000      	movs	r0, #0
   25d7a:	bd10      	pop	{r4, pc}

00025d7c <write>:
{
   25d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   25d80:	6845      	ldr	r5, [r0, #4]
{
   25d82:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   25d84:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   25d86:	7c1b      	ldrb	r3, [r3, #16]
{
   25d88:	460c      	mov	r4, r1
   25d8a:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   25d8c:	b153      	cbz	r3, 25da4 <write+0x28>
   25d8e:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   25d92:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   25d94:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
   25d96:	d120      	bne.n	25dda <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   25d98:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
   25d9c:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   25d9e:	2001      	movs	r0, #1
   25da0:	4790      	blx	r2
   25da2:	e017      	b.n	25dd4 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   25da4:	68a8      	ldr	r0, [r5, #8]
   25da6:	f7ff fb01 	bl	253ac <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25daa:	682b      	ldr	r3, [r5, #0]
   25dac:	6030      	str	r0, [r6, #0]
   25dae:	330c      	adds	r3, #12
   25db0:	2101      	movs	r1, #1
   25db2:	f3bf 8f5b 	dmb	ish
   25db6:	e853 2f00 	ldrex	r2, [r3]
   25dba:	e843 1000 	strex	r0, r1, [r3]
   25dbe:	2800      	cmp	r0, #0
   25dc0:	d1f9      	bne.n	25db6 <write+0x3a>
   25dc2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   25dc6:	b92a      	cbnz	r2, 25dd4 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   25dc8:	682b      	ldr	r3, [r5, #0]
   25dca:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   25dcc:	6883      	ldr	r3, [r0, #8]
   25dce:	69db      	ldr	r3, [r3, #28]
   25dd0:	b103      	cbz	r3, 25dd4 <write+0x58>
		api->irq_tx_enable(dev);
   25dd2:	4798      	blx	r3
}
   25dd4:	2000      	movs	r0, #0
   25dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   25dda:	6818      	ldr	r0, [r3, #0]
   25ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   25de0:	6883      	ldr	r3, [r0, #8]
   25de2:	685b      	ldr	r3, [r3, #4]
   25de4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   25de6:	e7d4      	b.n	25d92 <write+0x16>

00025de8 <atomic_or>:
{
   25de8:	4603      	mov	r3, r0
}
   25dea:	f3bf 8f5b 	dmb	ish
   25dee:	e853 0f00 	ldrex	r0, [r3]
   25df2:	ea40 0201 	orr.w	r2, r0, r1
   25df6:	e843 2c00 	strex	ip, r2, [r3]
   25dfa:	f1bc 0f00 	cmp.w	ip, #0
   25dfe:	d1f6      	bne.n	25dee <atomic_or+0x6>
   25e00:	f3bf 8f5b 	dmb	ish
   25e04:	4770      	bx	lr

00025e06 <atomic_and>:
{
   25e06:	4603      	mov	r3, r0
}
   25e08:	f3bf 8f5b 	dmb	ish
   25e0c:	e853 0f00 	ldrex	r0, [r3]
   25e10:	ea00 0201 	and.w	r2, r0, r1
   25e14:	e843 2c00 	strex	ip, r2, [r3]
   25e18:	f1bc 0f00 	cmp.w	ip, #0
   25e1c:	d1f6      	bne.n	25e0c <atomic_and+0x6>
   25e1e:	f3bf 8f5b 	dmb	ish
   25e22:	4770      	bx	lr

00025e24 <shell_signal_handle>:
{
   25e24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   25e26:	6885      	ldr	r5, [r0, #8]
   25e28:	0109      	lsls	r1, r1, #4
   25e2a:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
   25e2e:	4604      	mov	r4, r0
   25e30:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   25e32:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   25e34:	aa01      	add	r2, sp, #4
   25e36:	4669      	mov	r1, sp
   25e38:	4628      	mov	r0, r5
   25e3a:	f006 f852 	bl	2bee2 <z_impl_k_poll_signal_check>
	if (set) {
   25e3e:	9b00      	ldr	r3, [sp, #0]
   25e40:	b123      	cbz	r3, 25e4c <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
   25e42:	4628      	mov	r0, r5
   25e44:	f006 f84a 	bl	2bedc <z_impl_k_poll_signal_reset>
		handler(shell);
   25e48:	4620      	mov	r0, r4
   25e4a:	47b0      	blx	r6
}
   25e4c:	b002      	add	sp, #8
   25e4e:	bd70      	pop	{r4, r5, r6, pc}

00025e50 <z_shell_strlen>:
{
   25e50:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   25e52:	b110      	cbz	r0, 25e5a <z_shell_strlen+0xa>
   25e54:	f002 fb59 	bl	2850a <strlen>
   25e58:	b280      	uxth	r0, r0
}
   25e5a:	bd08      	pop	{r3, pc}

00025e5c <z_shell_raw_fprintf>:
{
   25e5c:	b40e      	push	{r1, r2, r3}
   25e5e:	b503      	push	{r0, r1, lr}
   25e60:	aa03      	add	r2, sp, #12
   25e62:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   25e66:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   25e68:	f7e2 f86c 	bl	7f44 <z_shell_fprintf_fmt>
}
   25e6c:	b002      	add	sp, #8
   25e6e:	f85d eb04 	ldr.w	lr, [sp], #4
   25e72:	b003      	add	sp, #12
   25e74:	4770      	bx	lr

00025e76 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   25e76:	f7fd bd31 	b.w	238dc <z_impl_k_mutex_lock>

00025e7a <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   25e7a:	688b      	ldr	r3, [r1, #8]
   25e7c:	b920      	cbnz	r0, 25e88 <transport_evt_handler+0xe>
   25e7e:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   25e82:	2100      	movs	r1, #0
   25e84:	f7fe be04 	b.w	24a90 <z_impl_k_poll_signal_raise>
   25e88:	f503 7026 	add.w	r0, r3, #664	; 0x298
   25e8c:	e7f9      	b.n	25e82 <transport_evt_handler+0x8>

00025e8e <kill_handler>:
{
   25e8e:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
   25e90:	6883      	ldr	r3, [r0, #8]
   25e92:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
   25e96:	07db      	lsls	r3, r3, #31
{
   25e98:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
   25e9a:	d41d      	bmi.n	25ed8 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
   25e9c:	69c0      	ldr	r0, [r0, #28]
   25e9e:	f000 fd6f 	bl	26980 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   25ea2:	6860      	ldr	r0, [r4, #4]
   25ea4:	6803      	ldr	r3, [r0, #0]
   25ea6:	685b      	ldr	r3, [r3, #4]
   25ea8:	4798      	blx	r3
	if (err != 0) {
   25eaa:	4605      	mov	r5, r0
   25eac:	b920      	cbnz	r0, 25eb8 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
   25eae:	68e0      	ldr	r0, [r4, #12]
   25eb0:	f000 ff0f 	bl	26cd2 <z_shell_history_purge>
	shell->ctx->state = state;
   25eb4:	68a3      	ldr	r3, [r4, #8]
   25eb6:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
   25eb8:	68a3      	ldr	r3, [r4, #8]
   25eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   25ebc:	b113      	cbz	r3, 25ec4 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
   25ebe:	4629      	mov	r1, r5
   25ec0:	4620      	mov	r0, r4
   25ec2:	4798      	blx	r3
	shell->ctx->tid = NULL;
   25ec4:	68a3      	ldr	r3, [r4, #8]
   25ec6:	2200      	movs	r2, #0
   25ec8:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   25ecc:	f7fe faf4 	bl	244b8 <z_impl_z_current_get>
}
   25ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   25ed4:	f7e4 bfd8 	b.w	ae88 <z_impl_k_thread_abort>
		return -EBUSY;
   25ed8:	f06f 050f 	mvn.w	r5, #15
   25edc:	e7ec      	b.n	25eb8 <kill_handler+0x2a>

00025ede <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   25ede:	f500 7019 	add.w	r0, r0, #612	; 0x264
   25ee2:	b111      	cbz	r1, 25eea <z_flag_history_exit_set.isra.0+0xc>
   25ee4:	2104      	movs	r1, #4
   25ee6:	f7ff bf7f 	b.w	25de8 <atomic_or>
   25eea:	f06f 0104 	mvn.w	r1, #4
   25eee:	f7ff bf8a 	b.w	25e06 <atomic_and>

00025ef2 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
   25ef2:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   25ef4:	f500 7018 	add.w	r0, r0, #608	; 0x260
   25ef8:	b129      	cbz	r1, 25f06 <z_flag_insert_mode_set.isra.0+0x14>
   25efa:	2101      	movs	r1, #1
   25efc:	f7ff ff74 	bl	25de8 <atomic_or>
}
   25f00:	f000 0001 	and.w	r0, r0, #1
   25f04:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   25f06:	f06f 0101 	mvn.w	r1, #1
   25f0a:	f7ff ff7c 	bl	25e06 <atomic_and>
   25f0e:	e7f7      	b.n	25f00 <z_flag_insert_mode_set.isra.0+0xe>

00025f10 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   25f10:	f7fd bd5c 	b.w	239cc <z_impl_k_mutex_unlock>

00025f14 <shell_log_process>:
{
   25f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   25f16:	2300      	movs	r3, #0
{
   25f18:	4604      	mov	r4, r0
	int signaled = 0;
   25f1a:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   25f1c:	4620      	mov	r0, r4
   25f1e:	f000 fb5f 	bl	265e0 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   25f22:	69e0      	ldr	r0, [r4, #28]
   25f24:	f000 fd6d 	bl	26a02 <z_shell_log_backend_process>
   25f28:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   25f2a:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   25f2c:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   25f2e:	f7e2 f993 	bl	8258 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   25f32:	68a3      	ldr	r3, [r4, #8]
   25f34:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
   25f36:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
   25f3a:	b123      	cbz	r3, 25f46 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   25f3c:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   25f40:	2100      	movs	r1, #0
   25f42:	f7fe fa9f 	bl	24484 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   25f46:	aa01      	add	r2, sp, #4
   25f48:	4669      	mov	r1, sp
   25f4a:	4630      	mov	r0, r6
   25f4c:	f005 ffc9 	bl	2bee2 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   25f50:	b115      	cbz	r5, 25f58 <shell_log_process+0x44>
   25f52:	9b00      	ldr	r3, [sp, #0]
   25f54:	2b00      	cmp	r3, #0
   25f56:	d0e1      	beq.n	25f1c <shell_log_process+0x8>
}
   25f58:	b002      	add	sp, #8
   25f5a:	bd70      	pop	{r4, r5, r6, pc}

00025f5c <shell_vfprintf>:
{
   25f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25f5e:	4604      	mov	r4, r0
	return shell->ctx->state;
   25f60:	6880      	ldr	r0, [r0, #8]
{
   25f62:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   25f64:	7903      	ldrb	r3, [r0, #4]
   25f66:	2b02      	cmp	r3, #2
{
   25f68:	460d      	mov	r5, r1
   25f6a:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   25f6c:	d007      	beq.n	25f7e <shell_vfprintf+0x22>
}
   25f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   25f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   25f76:	f500 7019 	add.w	r0, r0, #612	; 0x264
   25f7a:	f7ff bf35 	b.w	25de8 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   25f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25f86:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   25f8a:	f7ff ff74 	bl	25e76 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   25f8e:	68a3      	ldr	r3, [r4, #8]
   25f90:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   25f94:	0511      	lsls	r1, r2, #20
   25f96:	d404      	bmi.n	25fa2 <shell_vfprintf+0x46>
   25f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   25f9a:	b913      	cbnz	r3, 25fa2 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
   25f9c:	4620      	mov	r0, r4
   25f9e:	f000 fb1f 	bl	265e0 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
   25fa2:	463b      	mov	r3, r7
   25fa4:	4632      	mov	r2, r6
   25fa6:	4629      	mov	r1, r5
   25fa8:	4620      	mov	r0, r4
   25faa:	f000 fb7a 	bl	266a2 <z_shell_vfprintf>
   25fae:	68a3      	ldr	r3, [r4, #8]
   25fb0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   25fb4:	0512      	lsls	r2, r2, #20
   25fb6:	d404      	bmi.n	25fc2 <shell_vfprintf+0x66>
   25fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   25fba:	b913      	cbnz	r3, 25fc2 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
   25fbc:	4620      	mov	r0, r4
   25fbe:	f7e2 f94b 	bl	8258 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   25fc2:	6960      	ldr	r0, [r4, #20]
   25fc4:	f000 f817 	bl	25ff6 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   25fc8:	68a0      	ldr	r0, [r4, #8]
}
   25fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
   25fce:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   25fd2:	f7ff bf9d 	b.w	25f10 <k_mutex_unlock.isra.0>

00025fd6 <shell_fprintf>:
{
   25fd6:	b40c      	push	{r2, r3}
   25fd8:	b507      	push	{r0, r1, r2, lr}
   25fda:	ab04      	add	r3, sp, #16
   25fdc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   25fe0:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   25fe2:	f7ff ffbb 	bl	25f5c <shell_vfprintf>
}
   25fe6:	b003      	add	sp, #12
   25fe8:	f85d eb04 	ldr.w	lr, [sp], #4
   25fec:	b002      	add	sp, #8
   25fee:	4770      	bx	lr

00025ff0 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
   25ff0:	6883      	ldr	r3, [r0, #8]
   25ff2:	6399      	str	r1, [r3, #56]	; 0x38
}
   25ff4:	4770      	bx	lr

00025ff6 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   25ff6:	6902      	ldr	r2, [r0, #16]
   25ff8:	6883      	ldr	r3, [r0, #8]
   25ffa:	6812      	ldr	r2, [r2, #0]
   25ffc:	6801      	ldr	r1, [r0, #0]
{
   25ffe:	b510      	push	{r4, lr}
   26000:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   26002:	68c0      	ldr	r0, [r0, #12]
   26004:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   26006:	6923      	ldr	r3, [r4, #16]
   26008:	2200      	movs	r2, #0
   2600a:	601a      	str	r2, [r3, #0]
}
   2600c:	bd10      	pop	{r4, pc}

0002600e <out_func>:
{
   2600e:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   26010:	68cb      	ldr	r3, [r1, #12]
   26012:	7c1b      	ldrb	r3, [r3, #16]
   26014:	2b02      	cmp	r3, #2
{
   26016:	4605      	mov	r5, r0
   26018:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   2601a:	d104      	bne.n	26026 <out_func+0x18>
   2601c:	280a      	cmp	r0, #10
   2601e:	d102      	bne.n	26026 <out_func+0x18>
		(void)out_func('\r', ctx);
   26020:	200d      	movs	r0, #13
   26022:	f7ff fff4 	bl	2600e <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   26026:	6923      	ldr	r3, [r4, #16]
   26028:	6822      	ldr	r2, [r4, #0]
   2602a:	681b      	ldr	r3, [r3, #0]
   2602c:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   2602e:	6922      	ldr	r2, [r4, #16]
   26030:	6813      	ldr	r3, [r2, #0]
   26032:	3301      	adds	r3, #1
   26034:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   26036:	6862      	ldr	r2, [r4, #4]
   26038:	4293      	cmp	r3, r2
   2603a:	d102      	bne.n	26042 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   2603c:	4620      	mov	r0, r4
   2603e:	f7ff ffda 	bl	25ff6 <z_shell_fprintf_buffer_flush>
}
   26042:	2000      	movs	r0, #0
   26044:	bd38      	pop	{r3, r4, r5, pc}

00026046 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   26046:	2820      	cmp	r0, #32
   26048:	d005      	beq.n	26056 <isspace+0x10>
   2604a:	3809      	subs	r0, #9
   2604c:	2804      	cmp	r0, #4
   2604e:	bf8c      	ite	hi
   26050:	2000      	movhi	r0, #0
   26052:	2001      	movls	r0, #1
   26054:	4770      	bx	lr
   26056:	2001      	movs	r0, #1
}
   26058:	4770      	bx	lr

0002605a <z_shell_strlen>:
{
   2605a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   2605c:	b110      	cbz	r0, 26064 <z_shell_strlen+0xa>
   2605e:	f002 fa54 	bl	2850a <strlen>
   26062:	b280      	uxth	r0, r0
}
   26064:	bd08      	pop	{r3, pc}

00026066 <z_column_span_with_buffer_offsets_get>:
{
   26066:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   26068:	7b03      	ldrb	r3, [r0, #12]
   2606a:	8940      	ldrh	r0, [r0, #10]
   2606c:	441a      	add	r2, r3
   2606e:	4419      	add	r1, r3
   26070:	fbb2 f4f0 	udiv	r4, r2, r0
   26074:	fbb1 f3f0 	udiv	r3, r1, r0
   26078:	fb00 2214 	mls	r2, r0, r4, r2
   2607c:	fb00 1013 	mls	r0, r0, r3, r1
}
   26080:	1a10      	subs	r0, r2, r0
   26082:	bd10      	pop	{r4, pc}

00026084 <z_row_span_with_buffer_offsets_get>:
{
   26084:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   26086:	7b04      	ldrb	r4, [r0, #12]
   26088:	8943      	ldrh	r3, [r0, #10]
   2608a:	4421      	add	r1, r4
   2608c:	1910      	adds	r0, r2, r4
   2608e:	fbb1 f1f3 	udiv	r1, r1, r3
   26092:	fbb0 f0f3 	udiv	r0, r0, r3
}
   26096:	1a40      	subs	r0, r0, r1
   26098:	bd10      	pop	{r4, pc}

0002609a <z_shell_multiline_data_calc>:
{
   2609a:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   2609c:	7b05      	ldrb	r5, [r0, #12]
   2609e:	8943      	ldrh	r3, [r0, #10]
   260a0:	4429      	add	r1, r5
   260a2:	fbb1 f4f3 	udiv	r4, r1, r3
   260a6:	fb03 1114 	mls	r1, r3, r4, r1
   260aa:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   260ac:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   260ae:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   260b0:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   260b2:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   260b6:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   260ba:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   260bc:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   260be:	1c4c      	adds	r4, r1, #1
   260c0:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   260c2:	8042      	strh	r2, [r0, #2]
}
   260c4:	bd30      	pop	{r4, r5, pc}

000260c6 <z_shell_make_argv>:
{
   260c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   260ca:	2500      	movs	r5, #0
{
   260cc:	4606      	mov	r6, r0
   260ce:	460f      	mov	r7, r1
   260d0:	4614      	mov	r4, r2
   260d2:	4698      	mov	r8, r3
	*argc = 0;
   260d4:	6005      	str	r5, [r0, #0]
		c = *cmd;
   260d6:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   260d8:	2800      	cmp	r0, #0
   260da:	f000 80b5 	beq.w	26248 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   260de:	f7ff ffb2 	bl	26046 <isspace>
   260e2:	b118      	cbz	r0, 260ec <z_shell_make_argv+0x26>
			*cmd++ = '\0';
   260e4:	2300      	movs	r3, #0
   260e6:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   260ea:	e7f4      	b.n	260d6 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   260ec:	6832      	ldr	r2, [r6, #0]
   260ee:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   260f0:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   260f2:	6033      	str	r3, [r6, #0]
   260f4:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   260f8:	f000 80a6 	beq.w	26248 <z_shell_make_argv+0x182>
	char quote = 0;
   260fc:	4605      	mov	r5, r0
		c = *cmd;
   260fe:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   26102:	f1b9 0f00 	cmp.w	r9, #0
   26106:	d0e6      	beq.n	260d6 <z_shell_make_argv+0x10>
		if (!quote) {
   26108:	2d00      	cmp	r5, #0
   2610a:	f040 8089 	bne.w	26220 <z_shell_make_argv+0x15a>
			switch (c) {
   2610e:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   26112:	d006      	beq.n	26122 <z_shell_make_argv+0x5c>
   26114:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   26118:	f000 808a 	beq.w	26230 <z_shell_make_argv+0x16a>
   2611c:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   26120:	d176      	bne.n	26210 <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
   26122:	4620      	mov	r0, r4
   26124:	f7ff ff99 	bl	2605a <z_shell_strlen>
				memmove(cmd, cmd + 1,
   26128:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
   2612a:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   2612c:	4620      	mov	r0, r4
   2612e:	f002 fa2a 	bl	28586 <memmove>
				continue;
   26132:	464d      	mov	r5, r9
   26134:	e7e3      	b.n	260fe <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   26136:	4620      	mov	r0, r4
   26138:	f7ff ff8f 	bl	2605a <z_shell_strlen>
   2613c:	1c61      	adds	r1, r4, #1
   2613e:	4602      	mov	r2, r0
   26140:	4620      	mov	r0, r4
   26142:	f002 fa20 	bl	28586 <memmove>
			quote = 0;
   26146:	2500      	movs	r5, #0
			continue;
   26148:	e7d9      	b.n	260fe <z_shell_make_argv+0x38>
			if (t == '0') {
   2614a:	2930      	cmp	r1, #48	; 0x30
   2614c:	d126      	bne.n	2619c <z_shell_make_argv+0xd6>
   2614e:	2302      	movs	r3, #2
				uint8_t v = 0U;
   26150:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   26154:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
   26156:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2615a:	b2d2      	uxtb	r2, r2
   2615c:	2a07      	cmp	r2, #7
   2615e:	fa5f f983 	uxtb.w	r9, r3
   26162:	d818      	bhi.n	26196 <z_shell_make_argv+0xd0>
				for (i = 2U; i < (2 + 3); i++) {
   26164:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
   26166:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   2616a:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   2616c:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   26170:	d1f0      	bne.n	26154 <z_shell_make_argv+0x8e>
   26172:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
   26174:	4620      	mov	r0, r4
   26176:	f7ff ff70 	bl	2605a <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   2617a:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2617e:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   26180:	f1a9 0902 	sub.w	r9, r9, #2
					memmove(cmd, cmd + (i - 1),
   26184:	eba0 0209 	sub.w	r2, r0, r9
   26188:	4659      	mov	r1, fp
   2618a:	4620      	mov	r0, r4
   2618c:	f002 f9fb 	bl	28586 <memmove>
					*cmd++ = v;
   26190:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   26194:	e7b3      	b.n	260fe <z_shell_make_argv+0x38>
				if (i > 2) {
   26196:	f1b9 0f02 	cmp.w	r9, #2
   2619a:	d1eb      	bne.n	26174 <z_shell_make_argv+0xae>
			if (t == 'x') {
   2619c:	2978      	cmp	r1, #120	; 0x78
   2619e:	d13d      	bne.n	2621c <z_shell_make_argv+0x156>
   261a0:	2102      	movs	r1, #2
				uint8_t v = 0U;
   261a2:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   261a6:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
   261a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   261ac:	b2db      	uxtb	r3, r3
   261ae:	2b09      	cmp	r3, #9
   261b0:	b2c8      	uxtb	r0, r1
   261b2:	d81a      	bhi.n	261ea <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   261b4:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   261b8:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
   261ba:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   261be:	d112      	bne.n	261e6 <z_shell_make_argv+0x120>
   261c0:	f04f 0a04 	mov.w	sl, #4
						z_shell_strlen(cmd) - (i - 2));
   261c4:	4620      	mov	r0, r4
   261c6:	f7ff ff48 	bl	2605a <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   261ca:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
   261ce:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   261d0:	f1aa 0a02 	sub.w	sl, sl, #2
					memmove(cmd, cmd + (i - 1),
   261d4:	eba0 020a 	sub.w	r2, r0, sl
   261d8:	4659      	mov	r1, fp
   261da:	4620      	mov	r0, r4
   261dc:	f002 f9d3 	bl	28586 <memmove>
					*cmd++ = v;
   261e0:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   261e4:	e78b      	b.n	260fe <z_shell_make_argv+0x38>
   261e6:	2103      	movs	r1, #3
   261e8:	e7dd      	b.n	261a6 <z_shell_make_argv+0xe0>
					} else if ((t >= 'a') &&
   261ea:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   261ee:	2b05      	cmp	r3, #5
   261f0:	d803      	bhi.n	261fa <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   261f2:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   261f4:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   261f8:	e7de      	b.n	261b8 <z_shell_make_argv+0xf2>
					} else if ((t >= 'A') && (t <= 'F')) {
   261fa:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   261fe:	2b05      	cmp	r3, #5
   26200:	d801      	bhi.n	26206 <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   26202:	3a37      	subs	r2, #55	; 0x37
   26204:	e7f6      	b.n	261f4 <z_shell_make_argv+0x12e>
				if (i > 2) {
   26206:	2802      	cmp	r0, #2
   26208:	d008      	beq.n	2621c <z_shell_make_argv+0x156>
   2620a:	f04f 0a03 	mov.w	sl, #3
   2620e:	e7d9      	b.n	261c4 <z_shell_make_argv+0xfe>
		if (!quote && isspace((int) c)) {
   26210:	4648      	mov	r0, r9
   26212:	f7ff ff18 	bl	26046 <isspace>
   26216:	2800      	cmp	r0, #0
   26218:	f47f af5d 	bne.w	260d6 <z_shell_make_argv+0x10>
		cmd += 1;
   2621c:	3401      	adds	r4, #1
   2621e:	e76e      	b.n	260fe <z_shell_make_argv+0x38>
		if (quote == c) {
   26220:	45a9      	cmp	r9, r5
   26222:	d088      	beq.n	26136 <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
   26224:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   26228:	d1f8      	bne.n	2621c <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
   2622a:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   2622c:	428d      	cmp	r5, r1
   2622e:	d18c      	bne.n	2614a <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
   26230:	4620      	mov	r0, r4
   26232:	f7ff ff12 	bl	2605a <z_shell_strlen>
				memmove(cmd, cmd + 1,
   26236:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
   2623a:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   2623c:	4649      	mov	r1, r9
   2623e:	4620      	mov	r0, r4
   26240:	f002 f9a1 	bl	28586 <memmove>
				cmd += 1;
   26244:	464c      	mov	r4, r9
				continue;
   26246:	e75a      	b.n	260fe <z_shell_make_argv+0x38>
}
   26248:	4628      	mov	r0, r5
   2624a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002624e <z_shell_pattern_remove>:
{
   2624e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26250:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   26252:	4611      	mov	r1, r2
{
   26254:	4615      	mov	r5, r2
   26256:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   26258:	f002 f90d 	bl	28476 <strstr>
   2625c:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   2625e:	4628      	mov	r0, r5
   26260:	f7ff fefb 	bl	2605a <z_shell_strlen>
   26264:	4605      	mov	r5, r0
	if (!pattern_addr) {
   26266:	b1c4      	cbz	r4, 2629a <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   26268:	42a7      	cmp	r7, r4
   2626a:	d207      	bcs.n	2627c <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   2626c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   26270:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   26272:	bf02      	ittt	eq
   26274:	3501      	addeq	r5, #1
   26276:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   26278:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   2627c:	4620      	mov	r0, r4
   2627e:	f7ff feec 	bl	2605a <z_shell_strlen>
	*buff_len -= pattern_len;
   26282:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   26284:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
   26286:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   26288:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
   2628a:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   2628c:	1961      	adds	r1, r4, r5
   2628e:	4620      	mov	r0, r4
   26290:	b292      	uxth	r2, r2
}
   26292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   26296:	f002 b976 	b.w	28586 <memmove>
}
   2629a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002629c <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   2629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   262a0:	4688      	mov	r8, r1
   262a2:	b086      	sub	sp, #24
   262a4:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
   262a6:	4604      	mov	r4, r0
   262a8:	b128      	cbz	r0, 262b6 <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   262aa:	4601      	mov	r1, r0
   262ac:	2214      	movs	r2, #20
   262ae:	a801      	add	r0, sp, #4
   262b0:	f002 f981 	bl	285b6 <memcpy>
		parent = &parent_cpy;
   262b4:	ac01      	add	r4, sp, #4
   262b6:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   262b8:	4631      	mov	r1, r6
   262ba:	463a      	mov	r2, r7
   262bc:	4620      	mov	r0, r4
   262be:	f7e1 fe55 	bl	7f6c <z_shell_cmd_get>
   262c2:	3601      	adds	r6, #1
   262c4:	4605      	mov	r5, r0
   262c6:	b128      	cbz	r0, 262d4 <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   262c8:	6829      	ldr	r1, [r5, #0]
   262ca:	4640      	mov	r0, r8
   262cc:	f002 f92d 	bl	2852a <strcmp>
   262d0:	2800      	cmp	r0, #0
   262d2:	d1f1      	bne.n	262b8 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
   262d4:	4628      	mov	r0, r5
   262d6:	b006      	add	sp, #24
   262d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000262dc <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   262dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   262e0:	461c      	mov	r4, r3
   262e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   262e6:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   262ea:	2300      	movs	r3, #0
{
   262ec:	460f      	mov	r7, r1
   262ee:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   262f0:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   262f2:	6823      	ldr	r3, [r4, #0]
   262f4:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   262f6:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   262f8:	d21b      	bcs.n	26332 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   262fa:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   262fe:	f000 fd66 	bl	26dce <z_shell_has_wildcard>
   26302:	6823      	ldr	r3, [r4, #0]
   26304:	4682      	mov	sl, r0
   26306:	b118      	cbz	r0, 26310 <z_shell_get_last_command+0x34>
				(*match_arg)++;
   26308:	3301      	adds	r3, #1
   2630a:	6023      	str	r3, [r4, #0]
				continue;
   2630c:	4628      	mov	r0, r5
   2630e:	e7f0      	b.n	262f2 <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   26310:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   26314:	4642      	mov	r2, r8
   26316:	4628      	mov	r0, r5
   26318:	f7ff ffc0 	bl	2629c <z_shell_find_cmd>
		if (entry) {
   2631c:	b148      	cbz	r0, 26332 <z_shell_get_last_command+0x56>
			(*match_arg)++;
   2631e:	6823      	ldr	r3, [r4, #0]
   26320:	1c5a      	adds	r2, r3, #1
   26322:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   26324:	f1b9 0f00 	cmp.w	r9, #0
   26328:	d0e3      	beq.n	262f2 <z_shell_get_last_command+0x16>
   2632a:	4580      	cmp	r8, r0
   2632c:	d1e1      	bne.n	262f2 <z_shell_get_last_command+0x16>
			(*match_arg)--;
   2632e:	6023      	str	r3, [r4, #0]
			return NULL;
   26330:	4655      	mov	r5, sl
		}
	}

	return entry;
}
   26332:	4628      	mov	r0, r5
   26334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026338 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   26338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2633c:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
   2633e:	f7ff fe8c 	bl	2605a <z_shell_strlen>
   26342:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
   26344:	bb47      	cbnz	r7, 26398 <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
   26346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
   2634a:	b14c      	cbz	r4, 26360 <z_shell_spaces_trim+0x28>
						len - j + 1);
   2634c:	b292      	uxth	r2, r2
   2634e:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
   26350:	1c58      	adds	r0, r3, #1
   26352:	3201      	adds	r2, #1
   26354:	4438      	add	r0, r7
   26356:	f002 f916 	bl	28586 <memmove>
					len -= shift;
   2635a:	1b36      	subs	r6, r6, r4
   2635c:	b2b6      	uxth	r6, r6
					shift = 0U;
   2635e:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
   26360:	1e73      	subs	r3, r6, #1
   26362:	429d      	cmp	r5, r3
   26364:	daef      	bge.n	26346 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   26366:	5d78      	ldrb	r0, [r7, r5]
   26368:	f7ff fe6d 	bl	26046 <isspace>
   2636c:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
   2636e:	3501      	adds	r5, #1
   26370:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
   26372:	2800      	cmp	r0, #0
   26374:	d0f4      	beq.n	26360 <z_shell_spaces_trim+0x28>
   26376:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
   26378:	b291      	uxth	r1, r2
   2637a:	428e      	cmp	r6, r1
   2637c:	d9f0      	bls.n	26360 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   2637e:	5cb8      	ldrb	r0, [r7, r2]
   26380:	f7ff fe61 	bl	26046 <isspace>
   26384:	18b9      	adds	r1, r7, r2
   26386:	f102 0c01 	add.w	ip, r2, #1
   2638a:	4680      	mov	r8, r0
   2638c:	2800      	cmp	r0, #0
   2638e:	d0dc      	beq.n	2634a <z_shell_spaces_trim+0x12>
					shift++;
   26390:	3401      	adds	r4, #1
   26392:	b2a4      	uxth	r4, r4
   26394:	4662      	mov	r2, ip
   26396:	e7ef      	b.n	26378 <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
   26398:	2500      	movs	r5, #0
	uint16_t shift = 0U;
   2639a:	462c      	mov	r4, r5
   2639c:	e7e0      	b.n	26360 <z_shell_spaces_trim+0x28>

0002639e <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   2639e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   263a0:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   263a2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
   263a6:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   263a8:	b953      	cbnz	r3, 263c0 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   263aa:	68ab      	ldr	r3, [r5, #8]
   263ac:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   263ae:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   263b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   263b2:	3a01      	subs	r2, #1
   263b4:	b292      	uxth	r2, r2
   263b6:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
   263b8:	b922      	cbnz	r2, 263c4 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
   263ba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
   263be:	e7f4      	b.n	263aa <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   263c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
   263c4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   263c6:	18b3      	adds	r3, r6, r2
   263c8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   263cc:	f7ff fe3b 	bl	26046 <isspace>
   263d0:	4603      	mov	r3, r0
   263d2:	2800      	cmp	r0, #0
   263d4:	d1ed      	bne.n	263b2 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   263d6:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   263d8:	b29f      	uxth	r7, r3
   263da:	fa16 f183 	uxtah	r1, r6, r3
   263de:	5df0      	ldrb	r0, [r6, r7]
   263e0:	f7ff fe31 	bl	26046 <isspace>
   263e4:	3301      	adds	r3, #1
   263e6:	2800      	cmp	r0, #0
   263e8:	d1f6      	bne.n	263d8 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
   263ea:	2f00      	cmp	r7, #0
   263ec:	d0dd      	beq.n	263aa <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   263ee:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   263f0:	3301      	adds	r3, #1
   263f2:	1bda      	subs	r2, r3, r7
   263f4:	4630      	mov	r0, r6
   263f6:	f002 f8c6 	bl	28586 <memmove>
		*buff_len = *buff_len - i;
   263fa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   263fc:	1bdb      	subs	r3, r3, r7
   263fe:	87a3      	strh	r3, [r4, #60]	; 0x3c
   26400:	e7d3      	b.n	263aa <z_shell_cmd_trim+0xc>

00026402 <z_shell_raw_fprintf>:
{
   26402:	b40e      	push	{r1, r2, r3}
   26404:	b503      	push	{r0, r1, lr}
   26406:	aa03      	add	r2, sp, #12
   26408:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2640c:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2640e:	f7e1 fd99 	bl	7f44 <z_shell_fprintf_fmt>
}
   26412:	b002      	add	sp, #8
   26414:	f85d eb04 	ldr.w	lr, [sp], #4
   26418:	b003      	add	sp, #12
   2641a:	4770      	bx	lr

0002641c <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2641c:	6882      	ldr	r2, [r0, #8]
{
   2641e:	b538      	push	{r3, r4, r5, lr}
   26420:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   26422:	6810      	ldr	r0, [r2, #0]
   26424:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
   26426:	b110      	cbz	r0, 2642e <full_line_cmd+0x12>
   26428:	f002 f86f 	bl	2850a <strlen>
   2642c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2642e:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   26430:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   26432:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
   26434:	fbb3 f2f0 	udiv	r2, r3, r0
   26438:	fb00 3012 	mls	r0, r0, r2, r3
}
   2643c:	fab0 f080 	clz	r0, r0
   26440:	0940      	lsrs	r0, r0, #5
   26442:	bd38      	pop	{r3, r4, r5, pc}

00026444 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   26444:	6882      	ldr	r2, [r0, #8]
{
   26446:	b538      	push	{r3, r4, r5, lr}
   26448:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   2644a:	6810      	ldr	r0, [r2, #0]
   2644c:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
   2644e:	b110      	cbz	r0, 26456 <z_shell_cursor_in_empty_line+0x12>
   26450:	f002 f85b 	bl	2850a <strlen>
   26454:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   26456:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   26458:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2645a:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
   2645c:	fbb3 f2f0 	udiv	r2, r3, r0
   26460:	fb00 3012 	mls	r0, r0, r2, r3
}
   26464:	fab0 f080 	clz	r0, r0
   26468:	0940      	lsrs	r0, r0, #5
   2646a:	bd38      	pop	{r3, r4, r5, pc}

0002646c <z_shell_op_cond_next_line>:
{
   2646c:	b510      	push	{r4, lr}
   2646e:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   26470:	f7ff ffe8 	bl	26444 <z_shell_cursor_in_empty_line>
   26474:	b120      	cbz	r0, 26480 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
   26476:	6960      	ldr	r0, [r4, #20]
}
   26478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
   2647c:	f7e1 bda8 	b.w	7fd0 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   26480:	4620      	mov	r0, r4
   26482:	f7ff ffcb 	bl	2641c <full_line_cmd>
   26486:	2800      	cmp	r0, #0
   26488:	d1f5      	bne.n	26476 <z_shell_op_cond_next_line+0xa>
}
   2648a:	bd10      	pop	{r4, pc}

0002648c <z_shell_op_cursor_position_synchronize>:
{
   2648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   2648e:	6884      	ldr	r4, [r0, #8]
{
   26490:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   26492:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   26494:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   26496:	f104 0020 	add.w	r0, r4, #32
   2649a:	f7ff fdfe 	bl	2609a <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
   2649e:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
   264a0:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
   264a2:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   264a4:	f7ff ffba 	bl	2641c <full_line_cmd>
   264a8:	b110      	cbz	r0, 264b0 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
   264aa:	6968      	ldr	r0, [r5, #20]
   264ac:	f7e1 fd90 	bl	7fd0 <z_cursor_next_line_move.isra.0>
	if (last_line) {
   264b0:	42b7      	cmp	r7, r6
   264b2:	d107      	bne.n	264c4 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   264b4:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   264b6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   264b8:	4628      	mov	r0, r5
   264ba:	1ac9      	subs	r1, r1, r3
}
   264bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   264c0:	f7e1 bda2 	b.w	8008 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   264c4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   264c6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   264c8:	4628      	mov	r0, r5
   264ca:	1ac9      	subs	r1, r1, r3
   264cc:	f7e1 fd86 	bl	7fdc <z_shell_op_cursor_vert_move>
   264d0:	e7f0      	b.n	264b4 <z_shell_op_cursor_position_synchronize+0x28>

000264d2 <z_shell_op_cursor_move>:
{
   264d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264d4:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   264d6:	6880      	ldr	r0, [r0, #8]
{
   264d8:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   264da:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   264dc:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   264de:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   264e0:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   264e2:	f7ff fdda 	bl	2609a <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   264e6:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   264e8:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   264ea:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   264ec:	462a      	mov	r2, r5
   264ee:	3020      	adds	r0, #32
   264f0:	f7ff fdc8 	bl	26084 <z_row_span_with_buffer_offsets_get>
   264f4:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   264f6:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   264f8:	462a      	mov	r2, r5
   264fa:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   264fc:	3020      	adds	r0, #32
   264fe:	f7ff fdb2 	bl	26066 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
   26502:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
   26504:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   26506:	4620      	mov	r0, r4
   26508:	f7e1 fd68 	bl	7fdc <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   2650c:	4631      	mov	r1, r6
   2650e:	4620      	mov	r0, r4
   26510:	f7e1 fd7a 	bl	8008 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   26514:	68a3      	ldr	r3, [r4, #8]
   26516:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   26518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002651a <z_shell_op_cursor_word_move>:
{
   2651a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   2651e:	1e0c      	subs	r4, r1, #0
{
   26520:	4606      	mov	r6, r0
	if (val < 0) {
   26522:	da34      	bge.n	2658e <z_shell_op_cursor_word_move+0x74>
		val = -val;
   26524:	4264      	negs	r4, r4
   26526:	b224      	sxth	r4, r4
		sign = -1;
   26528:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2652c:	b2a4      	uxth	r4, r4
   2652e:	b2af      	uxth	r7, r5
   26530:	e025      	b.n	2657e <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(shell->ctx->cmd_buff,
   26532:	68b3      	ldr	r3, [r6, #8]
   26534:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
   26538:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
   2653c:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
   26540:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   26542:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   26544:	eba3 010e 	sub.w	r1, r3, lr
   26548:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   2654a:	b90b      	cbnz	r3, 26550 <z_shell_op_cursor_word_move+0x36>
   2654c:	1c6a      	adds	r2, r5, #1
   2654e:	d010      	beq.n	26572 <z_shell_op_cursor_word_move+0x58>
   26550:	4599      	cmp	r9, r3
   26552:	d101      	bne.n	26558 <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
   26554:	2d01      	cmp	r5, #1
   26556:	d00c      	beq.n	26572 <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
   26558:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2655c:	f042 0c20 	orr.w	ip, r2, #32
   26560:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   26564:	f1bc 0f19 	cmp.w	ip, #25
   26568:	d90d      	bls.n	26586 <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2656a:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   2656c:	2a09      	cmp	r2, #9
   2656e:	d90a      	bls.n	26586 <z_shell_op_cursor_word_move+0x6c>
			if (found) {
   26570:	b150      	cbz	r0, 26588 <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(shell, sign * shift);
   26572:	b209      	sxth	r1, r1
   26574:	4630      	mov	r0, r6
   26576:	f7ff ffac 	bl	264d2 <z_shell_op_cursor_move>
   2657a:	3c01      	subs	r4, #1
   2657c:	b2a4      	uxth	r4, r4
	while (val--) {
   2657e:	2c00      	cmp	r4, #0
   26580:	d1d7      	bne.n	26532 <z_shell_op_cursor_word_move+0x18>
}
   26582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   26586:	2001      	movs	r0, #1
	while (1) {
   26588:	443b      	add	r3, r7
   2658a:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   2658c:	e7da      	b.n	26544 <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
   2658e:	2501      	movs	r5, #1
   26590:	e7cc      	b.n	2652c <z_shell_op_cursor_word_move+0x12>

00026592 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   26592:	6883      	ldr	r3, [r0, #8]
   26594:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   26596:	4249      	negs	r1, r1
   26598:	b209      	sxth	r1, r1
   2659a:	f7ff bf9a 	b.w	264d2 <z_shell_op_cursor_move>

0002659e <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   2659e:	6883      	ldr	r3, [r0, #8]
   265a0:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   265a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   265a4:	1ac9      	subs	r1, r1, r3
   265a6:	b209      	sxth	r1, r1
   265a8:	f7ff bf93 	b.w	264d2 <z_shell_op_cursor_move>

000265ac <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   265ac:	6883      	ldr	r3, [r0, #8]
   265ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   265b0:	b11b      	cbz	r3, 265ba <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   265b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   265b6:	f7ff bf8c 	b.w	264d2 <z_shell_op_cursor_move>
}
   265ba:	4770      	bx	lr

000265bc <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   265bc:	6883      	ldr	r3, [r0, #8]
   265be:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   265c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   265c2:	429a      	cmp	r2, r3
   265c4:	d202      	bcs.n	265cc <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   265c6:	2101      	movs	r1, #1
   265c8:	f7ff bf83 	b.w	264d2 <z_shell_op_cursor_move>
}
   265cc:	4770      	bx	lr

000265ce <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   265ce:	6883      	ldr	r3, [r0, #8]
   265d0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   265d2:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   265d4:	4413      	add	r3, r2
   265d6:	2200      	movs	r2, #0
   265d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
   265dc:	f7e1 bcec 	b.w	7fb8 <z_clear_eos>

000265e0 <z_shell_cmd_line_erase>:
{
   265e0:	b510      	push	{r4, lr}
   265e2:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   265e4:	6880      	ldr	r0, [r0, #8]
   265e6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   265e8:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   265ea:	3020      	adds	r0, #32
   265ec:	f7ff fd55 	bl	2609a <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   265f0:	68a3      	ldr	r3, [r4, #8]
   265f2:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   265f4:	4620      	mov	r0, r4
   265f6:	f1c1 0101 	rsb	r1, r1, #1
   265fa:	f7e1 fd05 	bl	8008 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   265fe:	68a3      	ldr	r3, [r4, #8]
   26600:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   26602:	4620      	mov	r0, r4
   26604:	3901      	subs	r1, #1
   26606:	f7e1 fce9 	bl	7fdc <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   2660a:	4620      	mov	r0, r4
}
   2660c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   26610:	f7e1 bcd2 	b.w	7fb8 <z_clear_eos>

00026614 <z_shell_write>:
{
   26614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26618:	4605      	mov	r5, r0
   2661a:	b086      	sub	sp, #24
   2661c:	460f      	mov	r7, r1
   2661e:	4614      	mov	r4, r2
	size_t offset = 0;
   26620:	2600      	movs	r6, #0
	while (length) {
   26622:	b914      	cbnz	r4, 2662a <z_shell_write+0x16>
}
   26624:	b006      	add	sp, #24
   26626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   2662a:	6868      	ldr	r0, [r5, #4]
   2662c:	6803      	ldr	r3, [r0, #0]
   2662e:	4622      	mov	r2, r4
   26630:	f8d3 800c 	ldr.w	r8, [r3, #12]
   26634:	19b9      	adds	r1, r7, r6
   26636:	466b      	mov	r3, sp
   26638:	47c0      	blx	r8
		offset += tmp_cnt;
   2663a:	9a00      	ldr	r2, [sp, #0]
   2663c:	4416      	add	r6, r2
		length -= tmp_cnt;
   2663e:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
   26640:	2a00      	cmp	r2, #0
   26642:	d1ee      	bne.n	26622 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   26644:	68ab      	ldr	r3, [r5, #8]
   26646:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
   26648:	2903      	cmp	r1, #3
   2664a:	d0ea      	beq.n	26622 <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   2664c:	2902      	cmp	r1, #2
   2664e:	d813      	bhi.n	26678 <z_shell_write+0x64>
		k_poll_event_init(&event,
   26650:	f503 7326 	add.w	r3, r3, #664	; 0x298
   26654:	2101      	movs	r1, #1
   26656:	a801      	add	r0, sp, #4
   26658:	f005 fc1e 	bl	2be98 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   2665c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26664:	2101      	movs	r1, #1
   26666:	a801      	add	r0, sp, #4
   26668:	f7fe f9b6 	bl	249d8 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   2666c:	68a8      	ldr	r0, [r5, #8]
   2666e:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   26672:	f005 fc33 	bl	2bedc <z_impl_k_poll_signal_reset>
   26676:	e7d4      	b.n	26622 <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
   26678:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
   2667c:	0792      	lsls	r2, r2, #30
   2667e:	d5fb      	bpl.n	26678 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26680:	f3bf 8f5b 	dmb	ish
   26684:	f503 7319 	add.w	r3, r3, #612	; 0x264
   26688:	e853 2f00 	ldrex	r2, [r3]
   2668c:	f022 0202 	bic.w	r2, r2, #2
   26690:	e843 2100 	strex	r1, r2, [r3]
   26694:	2900      	cmp	r1, #0
   26696:	d1f7      	bne.n	26688 <z_shell_write+0x74>
   26698:	f3bf 8f5b 	dmb	ish
	return ret;
   2669c:	e7c1      	b.n	26622 <z_shell_write+0xe>

0002669e <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   2669e:	f7ff bfb9 	b.w	26614 <z_shell_write>

000266a2 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   266a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   266a4:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
   266a6:	6881      	ldr	r1, [r0, #8]
   266a8:	461e      	mov	r6, r3
   266aa:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   266ae:	06db      	lsls	r3, r3, #27
{
   266b0:	4604      	mov	r4, r0
   266b2:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   266b4:	d517      	bpl.n	266e6 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
   266b6:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   266ba:	42bb      	cmp	r3, r7
   266bc:	d013      	beq.n	266e6 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   266be:	2202      	movs	r2, #2
   266c0:	312e      	adds	r1, #46	; 0x2e
   266c2:	a801      	add	r0, sp, #4
   266c4:	f001 ff77 	bl	285b6 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
   266c8:	4639      	mov	r1, r7
   266ca:	4620      	mov	r0, r4
   266cc:	f7e1 fcba 	bl	8044 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   266d0:	6960      	ldr	r0, [r4, #20]
   266d2:	4632      	mov	r2, r6
   266d4:	4629      	mov	r1, r5
   266d6:	f7e1 fc35 	bl	7f44 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
   266da:	a901      	add	r1, sp, #4
   266dc:	4620      	mov	r0, r4
   266de:	f7e1 fcd1 	bl	8084 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   266e2:	b003      	add	sp, #12
   266e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   266e6:	6960      	ldr	r0, [r4, #20]
   266e8:	4632      	mov	r2, r6
   266ea:	4629      	mov	r1, r5
}
   266ec:	b003      	add	sp, #12
   266ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   266f2:	f7e1 bc27 	b.w	7f44 <z_shell_fprintf_fmt>

000266f6 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   266f6:	b40c      	push	{r2, r3}
   266f8:	b507      	push	{r0, r1, r2, lr}
   266fa:	ab04      	add	r3, sp, #16
   266fc:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   26700:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   26702:	f7ff ffce 	bl	266a2 <z_shell_vfprintf>
	va_end(args);
}
   26706:	b003      	add	sp, #12
   26708:	f85d eb04 	ldr.w	lr, [sp], #4
   2670c:	b002      	add	sp, #8
   2670e:	4770      	bx	lr

00026710 <data_insert>:
{
   26710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26714:	6886      	ldr	r6, [r0, #8]
   26716:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   26718:	18ab      	adds	r3, r5, r2
   2671a:	2bff      	cmp	r3, #255	; 0xff
{
   2671c:	4607      	mov	r7, r0
   2671e:	4688      	mov	r8, r1
   26720:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   26722:	dc1e      	bgt.n	26762 <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26724:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
   26726:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   26728:	3342      	adds	r3, #66	; 0x42
   2672a:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2672c:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   2672e:	462a      	mov	r2, r5
   26730:	4631      	mov	r1, r6
   26732:	1930      	adds	r0, r6, r4
   26734:	f001 ff27 	bl	28586 <memmove>
	memcpy(curr_pos, data, len);
   26738:	4622      	mov	r2, r4
   2673a:	4641      	mov	r1, r8
   2673c:	4630      	mov	r0, r6
   2673e:	f001 ff3a 	bl	285b6 <memcpy>
	shell->ctx->cmd_buff_len += len;
   26742:	68b9      	ldr	r1, [r7, #8]
   26744:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
   26746:	4423      	add	r3, r4
   26748:	b29b      	uxth	r3, r3
   2674a:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   2674c:	440b      	add	r3, r1
   2674e:	2200      	movs	r2, #0
   26750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
   26754:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
   26758:	079b      	lsls	r3, r3, #30
   2675a:	d404      	bmi.n	26766 <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
   2675c:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
   2675e:	4414      	add	r4, r2
   26760:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
   26762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   26766:	4629      	mov	r1, r5
   26768:	4638      	mov	r0, r7
}
   2676a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   2676e:	f7e1 bd03 	b.w	8178 <reprint_from_cursor>

00026772 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   26772:	f7ff bfcd 	b.w	26710 <data_insert>

00026776 <z_shell_op_char_delete>:
{
   26776:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26778:	6883      	ldr	r3, [r0, #8]
{
   2677a:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2677c:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   2677e:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   26780:	1a24      	subs	r4, r4, r0
   26782:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   26784:	b18c      	cbz	r4, 267aa <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   26786:	3042      	adds	r0, #66	; 0x42
   26788:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   2678a:	4622      	mov	r2, r4
   2678c:	1c41      	adds	r1, r0, #1
   2678e:	f001 fefa 	bl	28586 <memmove>
	--shell->ctx->cmd_buff_len;
   26792:	68aa      	ldr	r2, [r5, #8]
   26794:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   26796:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   26798:	3b01      	subs	r3, #1
   2679a:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   2679c:	4628      	mov	r0, r5
   2679e:	2201      	movs	r2, #1
}
   267a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   267a4:	b289      	uxth	r1, r1
   267a6:	f7e1 bce7 	b.w	8178 <reprint_from_cursor>
}
   267aa:	bd38      	pop	{r3, r4, r5, pc}

000267ac <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   267ac:	6883      	ldr	r3, [r0, #8]
   267ae:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   267b0:	b510      	push	{r4, lr}
   267b2:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   267b4:	b152      	cbz	r2, 267cc <z_shell_op_char_backspace+0x20>
   267b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   267b8:	b143      	cbz	r3, 267cc <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   267ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   267be:	f7ff fe88 	bl	264d2 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   267c2:	4620      	mov	r0, r4
}
   267c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   267c8:	f7ff bfd5 	b.w	26776 <z_shell_op_char_delete>
}
   267cc:	bd10      	pop	{r4, pc}

000267ce <process_msg2_from_buffer>:
		irq_unlock(key);
	}
}

static bool process_msg2_from_buffer(const struct shell *shell)
{
   267ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = shell->log_backend;
   267d0:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   267d2:	699e      	ldr	r6, [r3, #24]
	const struct log_output *log_output = log_backend->log_output;
   267d4:	689f      	ldr	r7, [r3, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
   267d6:	6883      	ldr	r3, [r0, #8]
	union log_msg2_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);

	msg = (union log_msg2_generic *)mpsc_pbuf_claim(mpsc_buffer);
   267d8:	4630      	mov	r0, r6
   267da:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
   267de:	f7fe ffb2 	bl	25746 <mpsc_pbuf_claim>
   267e2:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
   267e6:	4604      	mov	r4, r0
   267e8:	b160      	cbz	r0, 26804 <process_msg2_from_buffer+0x36>
		flags |= LOG_OUTPUT_FLAG_COLORS;
   267ea:	2d00      	cmp	r5, #0
	log_output_msg2_process(log_output, &msg->log, flags);
   267ec:	4601      	mov	r1, r0
   267ee:	bf0c      	ite	eq
   267f0:	220e      	moveq	r2, #14
   267f2:	220f      	movne	r2, #15
   267f4:	4638      	mov	r0, r7
   267f6:	f7df fdfd 	bl	63f4 <log_output_msg2_process>
		return false;
	}

	process_log_msg2(shell, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
   267fa:	4630      	mov	r0, r6
   267fc:	4621      	mov	r1, r4
   267fe:	f7fe ffee 	bl	257de <mpsc_pbuf_free>

	return true;
   26802:	2001      	movs	r0, #1
}
   26804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026806 <log2_process>:

static void log2_process(const struct log_backend *const backend,
		    union log_msg2_generic *msg)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   26806:	6843      	ldr	r3, [r0, #4]
{
   26808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2680c:	681e      	ldr	r6, [r3, #0]
   2680e:	68b2      	ldr	r2, [r6, #8]
	const struct shell_log_backend *log_backend = shell->log_backend;
   26810:	69f3      	ldr	r3, [r6, #28]
   26812:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
	struct k_poll_signal *signal;

	switch (shell->log_backend->control_block->state) {
   26816:	68da      	ldr	r2, [r3, #12]
   26818:	7912      	ldrb	r2, [r2, #4]
   2681a:	2a01      	cmp	r2, #1
{
   2681c:	460d      	mov	r5, r1
   2681e:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (shell->log_backend->control_block->state) {
   26822:	d003      	beq.n	2682c <log2_process+0x26>
   26824:	2a03      	cmp	r2, #3
   26826:	d042      	beq.n	268ae <log2_process+0xa8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
   26828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   2682c:	699f      	ldr	r7, [r3, #24]
			copy_to_pbuffer(mpsc_buffer, msg,
   2682e:	6918      	ldr	r0, [r3, #16]
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26830:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
   26832:	0759      	lsls	r1, r3, #29
   26834:	d439      	bmi.n	268aa <log2_process+0xa4>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26836:	682b      	ldr	r3, [r5, #0]
   26838:	f3c3 2449 	ubfx	r4, r3, #9, #10
   2683c:	886b      	ldrh	r3, [r5, #2]
   2683e:	f3c3 03cb 	ubfx	r3, r3, #3, #12
   26842:	441c      	add	r4, r3
   26844:	3413      	adds	r4, #19
   26846:	f024 0407 	bic.w	r4, r4, #7
   2684a:	08a4      	lsrs	r4, r4, #2
   2684c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   26850:	f240 3ce7 	movw	ip, #999	; 0x3e7
   26854:	2100      	movs	r1, #0
   26856:	fbe0 c10e 	umlal	ip, r1, r0, lr
   2685a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2685e:	2300      	movs	r3, #0
   26860:	4660      	mov	r0, ip
   26862:	f7da fc4d 	bl	1100 <__aeabi_uldivmod>
   26866:	4602      	mov	r2, r0
   26868:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
   2686a:	4638      	mov	r0, r7
   2686c:	4621      	mov	r1, r4
   2686e:	f7fe fed7 	bl	25620 <mpsc_pbuf_alloc>
	if (!dst) {
   26872:	4680      	mov	r8, r0
   26874:	b188      	cbz	r0, 2689a <log2_process+0x94>
	dst->hdr.data = msg->buf.hdr.data;
   26876:	4629      	mov	r1, r5
   26878:	6802      	ldr	r2, [r0, #0]
   2687a:	f851 3b04 	ldr.w	r3, [r1], #4
   2687e:	f3c3 039d 	ubfx	r3, r3, #2, #30
   26882:	f363 029f 	bfi	r2, r3, #2, #30
   26886:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
   2688a:	1e62      	subs	r2, r4, #1
   2688c:	0092      	lsls	r2, r2, #2
   2688e:	f001 fe92 	bl	285b6 <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
   26892:	4641      	mov	r1, r8
   26894:	4638      	mov	r0, r7
   26896:	f7fe ff39 	bl	2570c <mpsc_pbuf_commit>
				signal =
   2689a:	68b0      	ldr	r0, [r6, #8]
   2689c:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   268a0:	2100      	movs	r1, #0
}
   268a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   268a6:	f7fe b8f3 	b.w	24a90 <z_impl_k_poll_signal_raise>
	return 0;
   268aa:	2400      	movs	r4, #0
   268ac:	e7ce      	b.n	2684c <log2_process+0x46>
		z_shell_cmd_line_erase(shell);
   268ae:	4630      	mov	r0, r6
	const struct log_output *log_output = log_backend->log_output;
   268b0:	689f      	ldr	r7, [r3, #8]
		z_shell_cmd_line_erase(shell);
   268b2:	f7ff fe95 	bl	265e0 <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
   268b6:	2c00      	cmp	r4, #0
   268b8:	bf0c      	ite	eq
   268ba:	f04f 080e 	moveq.w	r8, #14
   268be:	f04f 080f 	movne.w	r8, #15
	__asm__ volatile(
   268c2:	f04f 0320 	mov.w	r3, #32
   268c6:	f3ef 8411 	mrs	r4, BASEPRI
   268ca:	f383 8812 	msr	BASEPRI_MAX, r3
   268ce:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   268d2:	68b3      	ldr	r3, [r6, #8]
   268d4:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
   268d8:	051a      	lsls	r2, r3, #20
   268da:	d402      	bmi.n	268e2 <log2_process+0xdc>
			z_shell_cmd_line_erase(shell);
   268dc:	4630      	mov	r0, r6
   268de:	f7ff fe7f 	bl	265e0 <z_shell_cmd_line_erase>
	log_output_msg2_process(log_output, &msg->log, flags);
   268e2:	4642      	mov	r2, r8
   268e4:	4629      	mov	r1, r5
   268e6:	4638      	mov	r0, r7
   268e8:	f7df fd84 	bl	63f4 <log_output_msg2_process>
   268ec:	68b3      	ldr	r3, [r6, #8]
   268ee:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
   268f2:	051b      	lsls	r3, r3, #20
   268f4:	d402      	bmi.n	268fc <log2_process+0xf6>
			z_shell_print_prompt_and_cmd(shell);
   268f6:	4630      	mov	r0, r6
   268f8:	f7e1 fcae 	bl	8258 <z_shell_print_prompt_and_cmd>
	__asm__ volatile(
   268fc:	f384 8811 	msr	BASEPRI, r4
   26900:	f3bf 8f6f 	isb	sy
}
   26904:	e790      	b.n	26828 <log2_process+0x22>

00026906 <dropped>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   26906:	6843      	ldr	r3, [r0, #4]
   26908:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2690a:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   2690e:	f3bf 8f5b 	dmb	ish
   26912:	e853 0f00 	ldrex	r0, [r3]
   26916:	4408      	add	r0, r1
   26918:	e843 0c00 	strex	ip, r0, [r3]
   2691c:	f1bc 0f00 	cmp.w	ip, #0
   26920:	d1f7      	bne.n	26912 <dropped+0xc>
   26922:	f3bf 8f5b 	dmb	ish
   26926:	68d3      	ldr	r3, [r2, #12]
   26928:	f3bf 8f5b 	dmb	ish
   2692c:	e853 2f00 	ldrex	r2, [r3]
   26930:	440a      	add	r2, r1
   26932:	e843 2000 	strex	r0, r2, [r3]
   26936:	2800      	cmp	r0, #0
   26938:	d1f8      	bne.n	2692c <dropped+0x26>
   2693a:	f3bf 8f5b 	dmb	ish
}
   2693e:	4770      	bx	lr

00026940 <z_shell_log_backend_output_func>:
{
   26940:	b510      	push	{r4, lr}
   26942:	4613      	mov	r3, r2
   26944:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   26946:	460a      	mov	r2, r1
   26948:	4601      	mov	r1, r0
   2694a:	4618      	mov	r0, r3
   2694c:	f7ff fea7 	bl	2669e <z_shell_print_stream>
}
   26950:	4620      	mov	r0, r4
   26952:	bd10      	pop	{r4, pc}

00026954 <z_shell_log_backend_enable>:
{
   26954:	b570      	push	{r4, r5, r6, lr}
   26956:	4604      	mov	r4, r0
   26958:	460d      	mov	r5, r1
   2695a:	4616      	mov	r6, r2
		mpsc_pbuf_init(backend->mpsc_buffer,
   2695c:	e9d0 1005 	ldrd	r1, r0, [r0, #20]
   26960:	f7fe fe3f 	bl	255e2 <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
   26964:	4632      	mov	r2, r6
   26966:	6820      	ldr	r0, [r4, #0]
   26968:	4629      	mov	r1, r5
   2696a:	f7df fbc3 	bl	60f4 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   2696e:	68a3      	ldr	r3, [r4, #8]
   26970:	685b      	ldr	r3, [r3, #4]
   26972:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   26974:	68e3      	ldr	r3, [r4, #12]
   26976:	2200      	movs	r2, #0
   26978:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   2697a:	2201      	movs	r2, #1
   2697c:	711a      	strb	r2, [r3, #4]
}
   2697e:	bd70      	pop	{r4, r5, r6, pc}

00026980 <z_shell_log_backend_disable>:
{
   26980:	b510      	push	{r4, lr}
   26982:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   26984:	6800      	ldr	r0, [r0, #0]
   26986:	f7ff f8c9 	bl	25b1c <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   2698a:	68e3      	ldr	r3, [r4, #12]
   2698c:	2202      	movs	r2, #2
   2698e:	711a      	strb	r2, [r3, #4]
}
   26990:	bd10      	pop	{r4, pc}

00026992 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   26992:	6843      	ldr	r3, [r0, #4]
{
   26994:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   26996:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   26998:	6860      	ldr	r0, [r4, #4]
   2699a:	6803      	ldr	r3, [r0, #0]
   2699c:	2101      	movs	r1, #1
   2699e:	689b      	ldr	r3, [r3, #8]
   269a0:	4798      	blx	r3
	if (err == 0) {
   269a2:	bb48      	cbnz	r0, 269f8 <panic+0x66>
		shell->log_backend->control_block->state =
   269a4:	69e3      	ldr	r3, [r4, #28]
   269a6:	68db      	ldr	r3, [r3, #12]
   269a8:	2203      	movs	r2, #3
   269aa:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   269ac:	68a3      	ldr	r3, [r4, #8]
   269ae:	f3bf 8f5b 	dmb	ish
   269b2:	f503 7319 	add.w	r3, r3, #612	; 0x264
   269b6:	e853 2f00 	ldrex	r2, [r3]
   269ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   269be:	e843 2100 	strex	r1, r2, [r3]
   269c2:	2900      	cmp	r1, #0
   269c4:	d1f7      	bne.n	269b6 <panic+0x24>
   269c6:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   269ca:	68a0      	ldr	r0, [r4, #8]
   269cc:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   269ce:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   269d0:	3020      	adds	r0, #32
   269d2:	f7ff fb62 	bl	2609a <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   269d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   269da:	4620      	mov	r0, r4
   269dc:	f7e1 fafe 	bl	7fdc <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   269e0:	68a3      	ldr	r3, [r4, #8]
   269e2:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   269e4:	4620      	mov	r0, r4
   269e6:	4249      	negs	r1, r1
   269e8:	f7e1 fb0e 	bl	8008 <z_shell_op_cursor_horiz_move>
			while (process_msg2_from_buffer(shell)) {
   269ec:	4620      	mov	r0, r4
   269ee:	f7ff feee 	bl	267ce <process_msg2_from_buffer>
   269f2:	2800      	cmp	r0, #0
   269f4:	d1fa      	bne.n	269ec <panic+0x5a>
}
   269f6:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   269f8:	69e0      	ldr	r0, [r4, #28]
}
   269fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   269fe:	f7ff bfbf 	b.w	26980 <z_shell_log_backend_disable>

00026a02 <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   26a02:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   26a04:	685b      	ldr	r3, [r3, #4]
{
   26a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
   26a08:	681c      	ldr	r4, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
   26a0a:	68a3      	ldr	r3, [r4, #8]
   26a0c:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26a10:	68c3      	ldr	r3, [r0, #12]
   26a12:	f3bf 8f5b 	dmb	ish
{
   26a16:	4605      	mov	r5, r0
   26a18:	f3c6 1600 	ubfx	r6, r6, #4, #1
   26a1c:	2200      	movs	r2, #0
   26a1e:	e853 7f00 	ldrex	r7, [r3]
   26a22:	e843 2100 	strex	r1, r2, [r3]
   26a26:	2900      	cmp	r1, #0
   26a28:	d1f9      	bne.n	26a1e <z_shell_log_backend_process+0x1c>
   26a2a:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   26a2e:	b19f      	cbz	r7, 26a58 <z_shell_log_backend_process+0x56>
		if (colors) {
   26a30:	b14e      	cbz	r6, 26a46 <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   26a32:	68a1      	ldr	r1, [r4, #8]
   26a34:	2202      	movs	r2, #2
   26a36:	312e      	adds	r1, #46	; 0x2e
   26a38:	a801      	add	r0, sp, #4
   26a3a:	f001 fdbc 	bl	285b6 <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   26a3e:	2101      	movs	r1, #1
   26a40:	4620      	mov	r0, r4
   26a42:	f7e1 faff 	bl	8044 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   26a46:	68a8      	ldr	r0, [r5, #8]
   26a48:	4639      	mov	r1, r7
   26a4a:	f7df fd37 	bl	64bc <log_output_dropped_process>
		if (colors) {
   26a4e:	b11e      	cbz	r6, 26a58 <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
   26a50:	a901      	add	r1, sp, #4
   26a52:	4620      	mov	r0, r4
   26a54:	f7e1 fb16 	bl	8084 <z_shell_vt100_colors_restore>
		return process_msg2_from_buffer(shell);
   26a58:	4620      	mov	r0, r4
}
   26a5a:	b003      	add	sp, #12
   26a5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return process_msg2_from_buffer(shell);
   26a60:	f7ff beb5 	b.w	267ce <process_msg2_from_buffer>

00026a64 <z_shell_raw_fprintf>:
{
   26a64:	b40e      	push	{r1, r2, r3}
   26a66:	b503      	push	{r0, r1, lr}
   26a68:	aa03      	add	r2, sp, #12
   26a6a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   26a6e:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   26a70:	f7e1 fa68 	bl	7f44 <z_shell_fprintf_fmt>
}
   26a74:	b002      	add	sp, #8
   26a76:	f85d eb04 	ldr.w	lr, [sp], #4
   26a7a:	b003      	add	sp, #12
   26a7c:	4770      	bx	lr

00026a7e <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
   26a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26a82:	4604      	mov	r4, r0
   26a84:	4690      	mov	r8, r2
	if (str == NULL) {
   26a86:	460e      	mov	r6, r1
   26a88:	2900      	cmp	r1, #0
   26a8a:	d069      	beq.n	26b60 <formatted_text_print.constprop.0+0xe2>
   26a8c:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset))) {
   26a8e:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   26a90:	2b20      	cmp	r3, #32
   26a92:	d023      	beq.n	26adc <formatted_text_print.constprop.0+0x5e>
   26a94:	3b09      	subs	r3, #9
   26a96:	2b04      	cmp	r3, #4
   26a98:	d920      	bls.n	26adc <formatted_text_print.constprop.0+0x5e>
   26a9a:	4630      	mov	r0, r6
   26a9c:	f001 fd35 	bl	2850a <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   26aa0:	68a3      	ldr	r3, [r4, #8]
   26aa2:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   26aa4:	b280      	uxth	r0, r0
   26aa6:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   26aa8:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   26aac:	4298      	cmp	r0, r3
   26aae:	eb06 0905 	add.w	r9, r6, r5
   26ab2:	d915      	bls.n	26ae0 <formatted_text_print.constprop.0+0x62>
   26ab4:	4648      	mov	r0, r9
		size_t idx = 0;
   26ab6:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
   26ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
   26abc:	2a20      	cmp	r2, #32
   26abe:	d006      	beq.n	26ace <formatted_text_print.constprop.0+0x50>
   26ac0:	f1a2 0c09 	sub.w	ip, r2, #9
   26ac4:	f1bc 0f04 	cmp.w	ip, #4
   26ac8:	d802      	bhi.n	26ad0 <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
   26aca:	2a0a      	cmp	r2, #10
   26acc:	d02f      	beq.n	26b2e <formatted_text_print.constprop.0+0xb0>
   26ace:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
   26ad0:	eb08 0207 	add.w	r2, r8, r7
   26ad4:	4291      	cmp	r1, r2
   26ad6:	d929      	bls.n	26b2c <formatted_text_print.constprop.0+0xae>
			++idx;
   26ad8:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   26ada:	e7ed      	b.n	26ab8 <formatted_text_print.constprop.0+0x3a>
		++offset;
   26adc:	3501      	adds	r5, #1
   26ade:	e7d6      	b.n	26a8e <formatted_text_print.constprop.0+0x10>
   26ae0:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
   26ae2:	2700      	movs	r7, #0
   26ae4:	42b8      	cmp	r0, r7
   26ae6:	d016      	beq.n	26b16 <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
   26ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
   26aec:	2a0a      	cmp	r2, #10
   26aee:	eb05 0a07 	add.w	sl, r5, r7
   26af2:	d119      	bne.n	26b28 <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   26af4:	6960      	ldr	r0, [r4, #20]
   26af6:	f7ff fa7e 	bl	25ff6 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   26afa:	4649      	mov	r1, r9
   26afc:	463a      	mov	r2, r7
   26afe:	4620      	mov	r0, r4
   26b00:	f7ff fd88 	bl	26614 <z_shell_write>
					z_cursor_next_line_move(shell);
   26b04:	6960      	ldr	r0, [r4, #20]
   26b06:	f7e1 fbbf 	bl	8288 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
   26b0a:	4641      	mov	r1, r8
   26b0c:	4620      	mov	r0, r4
					offset += idx + 1;
   26b0e:	f10a 0501 	add.w	r5, sl, #1
					z_shell_op_cursor_horiz_move(shell,
   26b12:	f7e1 fa79 	bl	8008 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   26b16:	6960      	ldr	r0, [r4, #20]
   26b18:	1971      	adds	r1, r6, r5
   26b1a:	f7ff ffa3 	bl	26a64 <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
   26b1e:	6960      	ldr	r0, [r4, #20]
}
   26b20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
   26b24:	f7e1 bbb0 	b.w	8288 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
   26b28:	3701      	adds	r7, #1
   26b2a:	e7db      	b.n	26ae4 <formatted_text_print.constprop.0+0x66>
   26b2c:	461f      	mov	r7, r3
   26b2e:	6960      	ldr	r0, [r4, #20]
   26b30:	f7ff fa61 	bl	25ff6 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   26b34:	463a      	mov	r2, r7
   26b36:	4649      	mov	r1, r9
   26b38:	4620      	mov	r0, r4
   26b3a:	f7ff fd6b 	bl	26614 <z_shell_write>
		offset += length;
   26b3e:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   26b40:	5d73      	ldrb	r3, [r6, r5]
   26b42:	2b20      	cmp	r3, #32
   26b44:	d00a      	beq.n	26b5c <formatted_text_print.constprop.0+0xde>
   26b46:	3b09      	subs	r3, #9
   26b48:	2b04      	cmp	r3, #4
   26b4a:	d907      	bls.n	26b5c <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(shell);
   26b4c:	6960      	ldr	r0, [r4, #20]
   26b4e:	f7e1 fb9b 	bl	8288 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   26b52:	4641      	mov	r1, r8
   26b54:	4620      	mov	r0, r4
   26b56:	f7e1 fa57 	bl	8008 <z_shell_op_cursor_horiz_move>
	while (true) {
   26b5a:	e79e      	b.n	26a9a <formatted_text_print.constprop.0+0x1c>
			++offset;
   26b5c:	3501      	adds	r5, #1
   26b5e:	e7ef      	b.n	26b40 <formatted_text_print.constprop.0+0xc2>
}
   26b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026b64 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   26b64:	6983      	ldr	r3, [r0, #24]
   26b66:	2000      	movs	r0, #0
   26b68:	6018      	str	r0, [r3, #0]
}
   26b6a:	4770      	bx	lr

00026b6c <z_shell_raw_fprintf>:
{
   26b6c:	b40e      	push	{r1, r2, r3}
   26b6e:	b503      	push	{r0, r1, lr}
   26b70:	aa03      	add	r2, sp, #12
   26b72:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   26b76:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   26b78:	f7e1 f9e4 	bl	7f44 <z_shell_fprintf_fmt>
}
   26b7c:	b002      	add	sp, #8
   26b7e:	f85d eb04 	ldr.w	lr, [sp], #4
   26b82:	b003      	add	sp, #12
   26b84:	4770      	bx	lr

00026b86 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26b86:	6883      	ldr	r3, [r0, #8]
   26b88:	f3bf 8f5b 	dmb	ish
   26b8c:	f503 7318 	add.w	r3, r3, #608	; 0x260
   26b90:	e853 2f00 	ldrex	r2, [r3]
   26b94:	f022 0208 	bic.w	r2, r2, #8
   26b98:	e843 2100 	strex	r1, r2, [r3]
   26b9c:	2900      	cmp	r1, #0
   26b9e:	d1f7      	bne.n	26b90 <cmd_bacskpace_mode_backspace+0xa>
   26ba0:	f3bf 8f5b 	dmb	ish
}
   26ba4:	2000      	movs	r0, #0
   26ba6:	4770      	bx	lr

00026ba8 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26ba8:	6883      	ldr	r3, [r0, #8]
   26baa:	f3bf 8f5b 	dmb	ish
   26bae:	f503 7318 	add.w	r3, r3, #608	; 0x260
   26bb2:	e853 2f00 	ldrex	r2, [r3]
   26bb6:	f042 0208 	orr.w	r2, r2, #8
   26bba:	e843 2100 	strex	r1, r2, [r3]
   26bbe:	2900      	cmp	r1, #0
   26bc0:	d1f7      	bne.n	26bb2 <cmd_bacskpace_mode_delete+0xa>
   26bc2:	f3bf 8f5b 	dmb	ish
}
   26bc6:	2000      	movs	r0, #0
   26bc8:	4770      	bx	lr

00026bca <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26bca:	6883      	ldr	r3, [r0, #8]
   26bcc:	f3bf 8f5b 	dmb	ish
   26bd0:	f503 7318 	add.w	r3, r3, #608	; 0x260
   26bd4:	e853 2f00 	ldrex	r2, [r3]
   26bd8:	f022 0202 	bic.w	r2, r2, #2
   26bdc:	e843 2100 	strex	r1, r2, [r3]
   26be0:	2900      	cmp	r1, #0
   26be2:	d1f7      	bne.n	26bd4 <cmd_echo_off+0xa>
   26be4:	f3bf 8f5b 	dmb	ish
}
   26be8:	2000      	movs	r0, #0
   26bea:	4770      	bx	lr

00026bec <cmd_colors_off>:
   26bec:	6883      	ldr	r3, [r0, #8]
   26bee:	f3bf 8f5b 	dmb	ish
   26bf2:	f503 7318 	add.w	r3, r3, #608	; 0x260
   26bf6:	e853 2f00 	ldrex	r2, [r3]
   26bfa:	f022 0210 	bic.w	r2, r2, #16
   26bfe:	e843 2100 	strex	r1, r2, [r3]
   26c02:	2900      	cmp	r1, #0
   26c04:	d1f7      	bne.n	26bf6 <cmd_colors_off+0xa>
   26c06:	f3bf 8f5b 	dmb	ish
}
   26c0a:	2000      	movs	r0, #0
   26c0c:	4770      	bx	lr

00026c0e <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26c0e:	6883      	ldr	r3, [r0, #8]
   26c10:	f3bf 8f5b 	dmb	ish
   26c14:	f503 7318 	add.w	r3, r3, #608	; 0x260
   26c18:	e853 2f00 	ldrex	r2, [r3]
   26c1c:	f042 0210 	orr.w	r2, r2, #16
   26c20:	e843 2100 	strex	r1, r2, [r3]
   26c24:	2900      	cmp	r1, #0
   26c26:	d1f7      	bne.n	26c18 <cmd_colors_on+0xa>
   26c28:	f3bf 8f5b 	dmb	ish
}
   26c2c:	2000      	movs	r0, #0
   26c2e:	4770      	bx	lr

00026c30 <cmd_echo_on>:
   26c30:	6883      	ldr	r3, [r0, #8]
   26c32:	f3bf 8f5b 	dmb	ish
   26c36:	f503 7318 	add.w	r3, r3, #608	; 0x260
   26c3a:	e853 2f00 	ldrex	r2, [r3]
   26c3e:	f042 0202 	orr.w	r2, r2, #2
   26c42:	e843 2100 	strex	r1, r2, [r3]
   26c46:	2900      	cmp	r1, #0
   26c48:	d1f7      	bne.n	26c3a <cmd_echo_on+0xa>
   26c4a:	f3bf 8f5b 	dmb	ish
}
   26c4e:	2000      	movs	r0, #0
   26c50:	4770      	bx	lr

00026c52 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   26c52:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26c54:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   26c56:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   26c58:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   26c5c:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   26c5e:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   26c60:	2200      	movs	r2, #0
	node->prev = NULL;
   26c62:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
   26c66:	8919      	ldrh	r1, [r3, #8]
   26c68:	895b      	ldrh	r3, [r3, #10]
   26c6a:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   26c6c:	310c      	adds	r1, #12
   26c6e:	f7fe fbe7 	bl	25440 <ring_buf_get_finish>

	return true;
}
   26c72:	2001      	movs	r0, #1
   26c74:	bd08      	pop	{r3, pc}

00026c76 <z_shell_history_mode_exit>:
	history->current = NULL;
   26c76:	2300      	movs	r3, #0
   26c78:	60c3      	str	r3, [r0, #12]
}
   26c7a:	4770      	bx	lr

00026c7c <z_shell_history_get>:
{
   26c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c7e:	461f      	mov	r7, r3
	return list->head == list;
   26c80:	4603      	mov	r3, r0
   26c82:	4616      	mov	r6, r2
   26c84:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   26c88:	429c      	cmp	r4, r3
   26c8a:	d102      	bne.n	26c92 <z_shell_history_get+0x16>
		*len = 0U;
   26c8c:	2000      	movs	r0, #0
   26c8e:	8038      	strh	r0, [r7, #0]
}
   26c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
   26c92:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
   26c94:	b9b1      	cbnz	r1, 26cc4 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   26c96:	2d00      	cmp	r5, #0
   26c98:	d0f8      	beq.n	26c8c <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   26c9a:	42ac      	cmp	r4, r5
   26c9c:	d102      	bne.n	26ca4 <z_shell_history_get+0x28>
	history->current = l_item;
   26c9e:	2300      	movs	r3, #0
   26ca0:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   26ca2:	e7f3      	b.n	26c8c <z_shell_history_get+0x10>
   26ca4:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   26ca6:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   26ca8:	2c00      	cmp	r4, #0
   26caa:	d0ef      	beq.n	26c8c <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   26cac:	8922      	ldrh	r2, [r4, #8]
   26cae:	f104 010c 	add.w	r1, r4, #12
   26cb2:	4630      	mov	r0, r6
   26cb4:	f001 fc7f 	bl	285b6 <memcpy>
		*len = h_item->len;
   26cb8:	8923      	ldrh	r3, [r4, #8]
   26cba:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   26cbc:	2200      	movs	r2, #0
   26cbe:	54f2      	strb	r2, [r6, r3]
		return true;
   26cc0:	2001      	movs	r0, #1
   26cc2:	e7e5      	b.n	26c90 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   26cc4:	2d00      	cmp	r5, #0
   26cc6:	d0ee      	beq.n	26ca6 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   26cc8:	6883      	ldr	r3, [r0, #8]
   26cca:	42ab      	cmp	r3, r5
   26ccc:	d0e7      	beq.n	26c9e <z_shell_history_get+0x22>
   26cce:	682c      	ldr	r4, [r5, #0]
   26cd0:	e7e9      	b.n	26ca6 <z_shell_history_get+0x2a>

00026cd2 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   26cd2:	b538      	push	{r3, r4, r5, lr}
   26cd4:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   26cd6:	1d05      	adds	r5, r0, #4
   26cd8:	6863      	ldr	r3, [r4, #4]
   26cda:	42ab      	cmp	r3, r5
   26cdc:	d004      	beq.n	26ce8 <z_shell_history_purge+0x16>
   26cde:	4620      	mov	r0, r4
   26ce0:	f7ff ffb7 	bl	26c52 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   26ce4:	2800      	cmp	r0, #0
   26ce6:	d1f7      	bne.n	26cd8 <z_shell_history_purge+0x6>
	}
}
   26ce8:	bd38      	pop	{r3, r4, r5, pc}

00026cea <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   26cea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
   26cee:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   26cf0:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   26cf4:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   26cf8:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   26cfa:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   26cfe:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   26d00:	429d      	cmp	r5, r3
{
   26d02:	4604      	mov	r4, r0
   26d04:	468a      	mov	sl, r1
   26d06:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   26d08:	d841      	bhi.n	26d8e <z_shell_history_put+0xa4>
	history->current = NULL;
   26d0a:	2300      	movs	r3, #0
   26d0c:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   26d0e:	2a00      	cmp	r2, #0
   26d10:	d03d      	beq.n	26d8e <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   26d12:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   26d16:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26d18:	4581      	cmp	r9, r0
   26d1a:	d12d      	bne.n	26d78 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   26d1c:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   26d1e:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   26d22:	6820      	ldr	r0, [r4, #0]
   26d24:	462a      	mov	r2, r5
   26d26:	a901      	add	r1, sp, #4
   26d28:	f7fe faf7 	bl	2531a <ring_buf_put_claim>
		if (claim_len < total_len) {
   26d2c:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   26d2e:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   26d30:	d930      	bls.n	26d94 <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   26d32:	6820      	ldr	r0, [r4, #0]
   26d34:	462a      	mov	r2, r5
   26d36:	a901      	add	r1, sp, #4
   26d38:	f7fe faef 	bl	2531a <ring_buf_put_claim>
			if (claim2_len == total_len) {
   26d3c:	4285      	cmp	r5, r0
   26d3e:	d12a      	bne.n	26d96 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   26d40:	4631      	mov	r1, r6
   26d42:	6820      	ldr	r0, [r4, #0]
   26d44:	f7fe fb16 	bl	25374 <ring_buf_put_finish>
				padding += claim_len;
   26d48:	44b0      	add	r8, r6
   26d4a:	fa1f f888 	uxth.w	r8, r8
   26d4e:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
   26d50:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   26d52:	4651      	mov	r1, sl
	item->len = len;
   26d54:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   26d56:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   26d5a:	463a      	mov	r2, r7
   26d5c:	f105 000c 	add.w	r0, r5, #12
   26d60:	f001 fc29 	bl	285b6 <memcpy>
	sys_dnode_t *const head = list->head;
   26d64:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   26d66:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
   26d68:	e9c5 3900 	strd	r3, r9, [r5]
   26d6c:	4631      	mov	r1, r6
	head->prev = node;
   26d6e:	605d      	str	r5, [r3, #4]
	list->head = node;
   26d70:	6065      	str	r5, [r4, #4]
   26d72:	f7fe faff 	bl	25374 <ring_buf_put_finish>
			break;
   26d76:	e00a      	b.n	26d8e <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   26d78:	9001      	str	r0, [sp, #4]
	if (l_item &&
   26d7a:	2800      	cmp	r0, #0
   26d7c:	d0cf      	beq.n	26d1e <z_shell_history_put+0x34>
	   (h_item->len == len) &&
   26d7e:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   26d80:	4293      	cmp	r3, r2
   26d82:	d1cc      	bne.n	26d1e <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   26d84:	300c      	adds	r0, #12
   26d86:	f001 fbed 	bl	28564 <memcmp>
	   (h_item->len == len) &&
   26d8a:	2800      	cmp	r0, #0
   26d8c:	d1c7      	bne.n	26d1e <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   26d8e:	b003      	add	sp, #12
   26d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   26d94:	d0dc      	beq.n	26d50 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   26d96:	6820      	ldr	r0, [r4, #0]
   26d98:	2100      	movs	r1, #0
   26d9a:	f7fe faeb 	bl	25374 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   26d9e:	6863      	ldr	r3, [r4, #4]
   26da0:	4599      	cmp	r9, r3
   26da2:	d108      	bne.n	26db6 <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
   26da4:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   26da6:	2208      	movs	r2, #8
	buf->tail = 0;
   26da8:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   26dac:	2100      	movs	r1, #0
   26dae:	4410      	add	r0, r2
   26db0:	f001 fc0c 	bl	285cc <memset>
}
   26db4:	e7b5      	b.n	26d22 <z_shell_history_put+0x38>
   26db6:	4620      	mov	r0, r4
   26db8:	f7ff ff4b 	bl	26c52 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   26dbc:	2800      	cmp	r0, #0
   26dbe:	d1b0      	bne.n	26d22 <z_shell_history_put+0x38>
   26dc0:	e7f0      	b.n	26da4 <z_shell_history_put+0xba>

00026dc2 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   26dc2:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   26dc4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   26dc8:	2300      	movs	r3, #0
   26dca:	60c3      	str	r3, [r0, #12]
}
   26dcc:	4770      	bx	lr

00026dce <z_shell_has_wildcard>:
{
   26dce:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   26dd0:	4604      	mov	r4, r0
   26dd2:	b908      	cbnz	r0, 26dd8 <z_shell_has_wildcard+0xa>
	return false;
   26dd4:	2000      	movs	r0, #0
}
   26dd6:	bd10      	pop	{r4, pc}
   26dd8:	f001 fb97 	bl	2850a <strlen>
	for (size_t i = 0; i < str_len; i++) {
   26ddc:	2300      	movs	r3, #0
   26dde:	b280      	uxth	r0, r0
   26de0:	4283      	cmp	r3, r0
   26de2:	d2f7      	bcs.n	26dd4 <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   26de4:	5ce2      	ldrb	r2, [r4, r3]
   26de6:	2a3f      	cmp	r2, #63	; 0x3f
   26de8:	d003      	beq.n	26df2 <z_shell_has_wildcard+0x24>
   26dea:	2a2a      	cmp	r2, #42	; 0x2a
   26dec:	d001      	beq.n	26df2 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   26dee:	3301      	adds	r3, #1
   26df0:	e7f6      	b.n	26de0 <z_shell_has_wildcard+0x12>
			return true;
   26df2:	2001      	movs	r0, #1
   26df4:	e7ef      	b.n	26dd6 <z_shell_has_wildcard+0x8>

00026df6 <z_shell_wildcard_prepare>:
{
   26df6:	b510      	push	{r4, lr}
   26df8:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   26dfa:	6880      	ldr	r0, [r0, #8]
   26dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
   26e00:	2100      	movs	r1, #0
   26e02:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   26e06:	f001 fbe1 	bl	285cc <memset>
	memcpy(shell->ctx->temp_buff,
   26e0a:	68a0      	ldr	r0, [r4, #8]
   26e0c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   26e0e:	f100 0142 	add.w	r1, r0, #66	; 0x42
   26e12:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   26e16:	f001 fbce 	bl	285b6 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   26e1a:	68a0      	ldr	r0, [r4, #8]
   26e1c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   26e20:	f7ff fa8a 	bl	26338 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   26e24:	68a0      	ldr	r0, [r4, #8]
   26e26:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   26e2a:	f001 fb6e 	bl	2850a <strlen>
   26e2e:	68a3      	ldr	r3, [r4, #8]
   26e30:	3001      	adds	r0, #1
   26e32:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
   26e36:	bd10      	pop	{r4, pc}

00026e38 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   26e38:	b510      	push	{r4, lr}
   26e3a:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   26e3c:	6880      	ldr	r0, [r0, #8]
   26e3e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   26e42:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   26e46:	3042      	adds	r0, #66	; 0x42
   26e48:	f001 fbb5 	bl	285b6 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   26e4c:	68a3      	ldr	r3, [r4, #8]
   26e4e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   26e52:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   26e54:	bd10      	pop	{r4, pc}

00026e56 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   26e56:	2300      	movs	r3, #0
   26e58:	f7fe bec2 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00026e5c <usb_get_dev_data_by_cfg>:
	return list->head;
   26e5c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   26e5e:	b140      	cbz	r0, 26e72 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   26e60:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   26e64:	685b      	ldr	r3, [r3, #4]
   26e66:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   26e68:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   26e6c:	d001      	beq.n	26e72 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   26e6e:	6840      	ldr	r0, [r0, #4]
   26e70:	e7f5      	b.n	26e5e <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   26e72:	4770      	bx	lr

00026e74 <usb_get_dev_data_by_iface>:
	return list->head;
   26e74:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   26e76:	b150      	cbz	r0, 26e8e <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   26e78:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   26e7c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   26e7e:	685b      	ldr	r3, [r3, #4]
   26e80:	789b      	ldrb	r3, [r3, #2]
   26e82:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   26e84:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   26e88:	d001      	beq.n	26e8e <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   26e8a:	6840      	ldr	r0, [r0, #4]
   26e8c:	e7f3      	b.n	26e76 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   26e8e:	4770      	bx	lr

00026e90 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   26e90:	b530      	push	{r4, r5, lr}
	return list->head;
   26e92:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   26e94:	b188      	cbz	r0, 26eba <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   26e96:	f850 3c04 	ldr.w	r3, [r0, #-4]
   26e9a:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   26e9c:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   26e9e:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   26ea0:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   26ea2:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   26ea4:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   26ea6:	b2dc      	uxtb	r4, r3
   26ea8:	42a5      	cmp	r5, r4
   26eaa:	d801      	bhi.n	26eb0 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   26eac:	6840      	ldr	r0, [r0, #4]
   26eae:	e7f1      	b.n	26e94 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   26eb0:	3301      	adds	r3, #1
   26eb2:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   26eb6:	428c      	cmp	r4, r1
   26eb8:	d1f5      	bne.n	26ea6 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   26eba:	bd30      	pop	{r4, r5, pc}

00026ebc <usb_transfer_is_busy>:
{
   26ebc:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   26ebe:	f7e2 fae1 	bl	9484 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   26ec2:	b128      	cbz	r0, 26ed0 <usb_transfer_is_busy+0x14>
   26ec4:	6840      	ldr	r0, [r0, #4]
   26ec6:	f110 0f10 	cmn.w	r0, #16
   26eca:	bf14      	ite	ne
   26ecc:	2000      	movne	r0, #0
   26ece:	2001      	moveq	r0, #1
}
   26ed0:	bd08      	pop	{r3, pc}

00026ed2 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   26ed2:	1c4b      	adds	r3, r1, #1
   26ed4:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   26ed6:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   26ed8:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   26eda:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   26ede:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   26ee0:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   26ee4:	4770      	bx	lr

00026ee6 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   26ee6:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   26eea:	6f80      	ldr	r0, [r0, #120]	; 0x78
   26eec:	4718      	bx	r3

00026eee <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   26eee:	6903      	ldr	r3, [r0, #16]
   26ef0:	2200      	movs	r2, #0
   26ef2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   26ef6:	4770      	bx	lr

00026ef8 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   26ef8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   26efa:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   26efe:	b108      	cbz	r0, 26f04 <cdc_acm_irq_tx_ready+0xc>
		return 1;
   26f00:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   26f04:	4770      	bx	lr

00026f06 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   26f06:	6903      	ldr	r3, [r0, #16]
   26f08:	2200      	movs	r2, #0
   26f0a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   26f0e:	4770      	bx	lr

00026f10 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   26f10:	6903      	ldr	r3, [r0, #16]
}
   26f12:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   26f16:	4770      	bx	lr

00026f18 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   26f18:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   26f1a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   26f1e:	b112      	cbz	r2, 26f26 <cdc_acm_irq_is_pending+0xe>
   26f20:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   26f24:	b92a      	cbnz	r2, 26f32 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   26f26:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   26f2a:	b118      	cbz	r0, 26f34 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   26f2c:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
   26f30:	4770      	bx	lr
		return 1;
   26f32:	2001      	movs	r0, #1
}
   26f34:	4770      	bx	lr

00026f36 <cdc_acm_irq_update>:
}
   26f36:	2001      	movs	r0, #1
   26f38:	4770      	bx	lr

00026f3a <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   26f3a:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   26f3c:	e9c3 1200 	strd	r1, r2, [r3]
}
   26f40:	4770      	bx	lr

00026f42 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
   26f42:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   26f44:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   26f46:	d007      	beq.n	26f58 <cdc_acm_line_ctrl_get+0x16>
   26f48:	2904      	cmp	r1, #4
   26f4a:	d00a      	beq.n	26f62 <cdc_acm_line_ctrl_get+0x20>
   26f4c:	2901      	cmp	r1, #1
   26f4e:	d10d      	bne.n	26f6c <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   26f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
   26f52:	6013      	str	r3, [r2, #0]
		return 0;
   26f54:	2000      	movs	r0, #0
   26f56:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   26f58:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   26f5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   26f60:	e7f7      	b.n	26f52 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   26f62:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   26f66:	f003 0301 	and.w	r3, r3, #1
   26f6a:	e7f2      	b.n	26f52 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
   26f6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   26f70:	4770      	bx	lr

00026f72 <cdc_acm_fifo_read>:
{
   26f72:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   26f74:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   26f76:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   26f78:	f7fe fa80 	bl	2547c <ring_buf_get>
   26f7c:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   26f7e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   26f80:	f7fe f9ba 	bl	252f8 <ring_buf_is_empty>
   26f84:	b110      	cbz	r0, 26f8c <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   26f86:	2300      	movs	r3, #0
   26f88:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   26f8c:	4620      	mov	r0, r4
   26f8e:	bd38      	pop	{r3, r4, r5, pc}

00026f90 <cdc_acm_poll_in>:
{
   26f90:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   26f92:	2201      	movs	r2, #1
   26f94:	f7ff ffed 	bl	26f72 <cdc_acm_fifo_read>
}
   26f98:	3801      	subs	r0, #1
   26f9a:	bf18      	it	ne
   26f9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26fa0:	bd08      	pop	{r3, pc}

00026fa2 <z_log_msg2_static_create.constprop.0>:
   26fa2:	2300      	movs	r3, #0
   26fa4:	f7fe be1c 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00026fa8 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   26fa8:	2940      	cmp	r1, #64	; 0x40
{
   26faa:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   26fac:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   26fae:	d042      	beq.n	27036 <cdc_acm_line_ctrl_set+0x8e>
   26fb0:	d813      	bhi.n	26fda <cdc_acm_line_ctrl_set+0x32>
   26fb2:	2910      	cmp	r1, #16
   26fb4:	d032      	beq.n	2701c <cdc_acm_line_ctrl_set+0x74>
   26fb6:	d806      	bhi.n	26fc6 <cdc_acm_line_ctrl_set+0x1e>
   26fb8:	2901      	cmp	r1, #1
   26fba:	d01e      	beq.n	26ffa <cdc_acm_line_ctrl_set+0x52>
   26fbc:	2908      	cmp	r1, #8
   26fbe:	d01f      	beq.n	27000 <cdc_acm_line_ctrl_set+0x58>
   26fc0:	f06f 0012 	mvn.w	r0, #18
}
   26fc4:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   26fc6:	2920      	cmp	r1, #32
   26fc8:	d1fa      	bne.n	26fc0 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   26fca:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   26fce:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   26fd2:	b342      	cbz	r2, 27026 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   26fd4:	f041 0104 	orr.w	r1, r1, #4
   26fd8:	e025      	b.n	27026 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
   26fda:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   26fde:	d033      	beq.n	27048 <cdc_acm_line_ctrl_set+0xa0>
   26fe0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   26fe4:	d039      	beq.n	2705a <cdc_acm_line_ctrl_set+0xb2>
   26fe6:	2980      	cmp	r1, #128	; 0x80
   26fe8:	d1ea      	bne.n	26fc0 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   26fea:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   26fee:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   26ff2:	b1c2      	cbz	r2, 27026 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   26ff4:	f041 0110 	orr.w	r1, r1, #16
   26ff8:	e015      	b.n	27026 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   26ffa:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
   26ffc:	2000      	movs	r0, #0
   26ffe:	e7e1      	b.n	26fc4 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   27000:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27004:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   27008:	b92a      	cbnz	r2, 27016 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   2700a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   2700e:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   27010:	f7e2 ff1a 	bl	9e48 <cdc_acm_send_notification.isra.0>
   27014:	e7f2      	b.n	26ffc <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   27016:	f041 0101 	orr.w	r1, r1, #1
   2701a:	e7f6      	b.n	2700a <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   2701c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   27020:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   27024:	b922      	cbnz	r2, 27030 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   27026:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2702a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   2702e:	e7ef      	b.n	27010 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   27030:	f041 0102 	orr.w	r1, r1, #2
   27034:	e7f7      	b.n	27026 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   27036:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   2703a:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   2703e:	2a00      	cmp	r2, #0
   27040:	d0f1      	beq.n	27026 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   27042:	f041 0108 	orr.w	r1, r1, #8
   27046:	e7ee      	b.n	27026 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   27048:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   2704c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   27050:	2a00      	cmp	r2, #0
   27052:	d0e8      	beq.n	27026 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   27054:	f041 0120 	orr.w	r1, r1, #32
   27058:	e7e5      	b.n	27026 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   2705a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   2705e:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   27062:	2a00      	cmp	r2, #0
   27064:	d0df      	beq.n	27026 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   27066:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   2706a:	e7dc      	b.n	27026 <cdc_acm_line_ctrl_set+0x7e>

0002706c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2706c:	b538      	push	{r3, r4, r5, lr}
   2706e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   27070:	42ab      	cmp	r3, r5
{
   27072:	4611      	mov	r1, r2
   27074:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27076:	d804      	bhi.n	27082 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   27078:	461a      	mov	r2, r3
   2707a:	f001 fa9c 	bl	285b6 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2707e:	4620      	mov	r0, r4
   27080:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27082:	2400      	movs	r4, #0
   27084:	e7fb      	b.n	2707e <_copy+0x12>

00027086 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   27086:	f001 baa1 	b.w	285cc <memset>

0002708a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2708a:	09c3      	lsrs	r3, r0, #7
   2708c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27090:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27094:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27098:	b2c0      	uxtb	r0, r0
   2709a:	4770      	bx	lr

0002709c <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   2709c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   270a0:	4606      	mov	r6, r0
   270a2:	b0a9      	sub	sp, #164	; 0xa4
   270a4:	4688      	mov	r8, r1
   270a6:	4614      	mov	r4, r2
   270a8:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   270aa:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   270ae:	f7e3 f871 	bl	a194 <uECC_get_rng>
		if (!rng_function ||
   270b2:	4603      	mov	r3, r0
   270b4:	2800      	cmp	r0, #0
   270b6:	d03e      	beq.n	27136 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   270b8:	2140      	movs	r1, #64	; 0x40
   270ba:	a808      	add	r0, sp, #32
   270bc:	4798      	blx	r3
		if (!rng_function ||
   270be:	b3d0      	cbz	r0, 27136 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   270c0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   270c4:	f112 031f 	adds.w	r3, r2, #31
   270c8:	bf48      	it	mi
   270ca:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   270ce:	466d      	mov	r5, sp
   270d0:	464a      	mov	r2, r9
   270d2:	a908      	add	r1, sp, #32
   270d4:	4628      	mov	r0, r5
   270d6:	f343 1347 	sbfx	r3, r3, #5, #8
   270da:	f000 f9ee 	bl	274ba <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   270de:	4622      	mov	r2, r4
   270e0:	4629      	mov	r1, r5
   270e2:	a818      	add	r0, sp, #96	; 0x60
   270e4:	f000 fe03 	bl	27cee <EccPoint_compute_public_key>
   270e8:	b318      	cbz	r0, 27132 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   270ea:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   270ee:	1dd9      	adds	r1, r3, #7
   270f0:	bf48      	it	mi
   270f2:	f103 010e 	addmi.w	r1, r3, #14
   270f6:	462a      	mov	r2, r5
   270f8:	4640      	mov	r0, r8
   270fa:	10c9      	asrs	r1, r1, #3
   270fc:	f000 fe1f 	bl	27d3e <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   27100:	f994 1001 	ldrsb.w	r1, [r4, #1]
   27104:	aa18      	add	r2, sp, #96	; 0x60
   27106:	4630      	mov	r0, r6
   27108:	f000 fe19 	bl	27d3e <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2710c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   27110:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   27114:	ab18      	add	r3, sp, #96	; 0x60
   27116:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2711a:	1870      	adds	r0, r6, r1
   2711c:	f000 fe0f 	bl	27d3e <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   27120:	2220      	movs	r2, #32
   27122:	2100      	movs	r1, #0
   27124:	4628      	mov	r0, r5
   27126:	f001 fa51 	bl	285cc <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   2712a:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2712c:	b029      	add	sp, #164	; 0xa4
   2712e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   27132:	3f01      	subs	r7, #1
   27134:	d1bb      	bne.n	270ae <uECC_make_key+0x12>
        		return 0;
   27136:	2000      	movs	r0, #0
   27138:	e7f8      	b.n	2712c <uECC_make_key+0x90>

0002713a <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2713a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2713e:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   27140:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   27144:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   27148:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2714c:	b0a4      	sub	sp, #144	; 0x90
   2714e:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   27150:	1dda      	adds	r2, r3, #7
   27152:	bf48      	it	mi
   27154:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   27158:	ad04      	add	r5, sp, #16
{
   2715a:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   2715c:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2715e:	4628      	mov	r0, r5
   27160:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   27162:	9502      	str	r5, [sp, #8]
   27164:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   27166:	f000 fdfe 	bl	27d66 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2716a:	463a      	mov	r2, r7
   2716c:	4649      	mov	r1, r9
   2716e:	a814      	add	r0, sp, #80	; 0x50
   27170:	f000 fdf9 	bl	27d66 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   27174:	ab14      	add	r3, sp, #80	; 0x50
   27176:	eb09 0107 	add.w	r1, r9, r7
   2717a:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2717e:	463a      	mov	r2, r7
   27180:	f000 fdf1 	bl	27d66 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   27184:	4623      	mov	r3, r4
   27186:	4632      	mov	r2, r6
   27188:	4629      	mov	r1, r5
   2718a:	4628      	mov	r0, r5
   2718c:	f000 fd83 	bl	27c96 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   27190:	fab0 f380 	clz	r3, r0
   27194:	9401      	str	r4, [sp, #4]
   27196:	aa24      	add	r2, sp, #144	; 0x90
   27198:	095b      	lsrs	r3, r3, #5
   2719a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   2719e:	8863      	ldrh	r3, [r4, #2]
   271a0:	3301      	adds	r3, #1
   271a2:	b21b      	sxth	r3, r3
   271a4:	9300      	str	r3, [sp, #0]
   271a6:	f851 2c88 	ldr.w	r2, [r1, #-136]
   271aa:	a914      	add	r1, sp, #80	; 0x50
   271ac:	2300      	movs	r3, #0
   271ae:	4608      	mov	r0, r1
   271b0:	f000 fca4 	bl	27afc <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   271b4:	aa14      	add	r2, sp, #80	; 0x50
   271b6:	4639      	mov	r1, r7
   271b8:	4640      	mov	r0, r8
   271ba:	f000 fdc0 	bl	27d3e <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   271be:	4621      	mov	r1, r4
   271c0:	a814      	add	r0, sp, #80	; 0x50
   271c2:	f000 fc10 	bl	279e6 <EccPoint_isZero>
   271c6:	af02      	add	r7, sp, #8
   271c8:	4604      	mov	r4, r0
   271ca:	2208      	movs	r2, #8
   271cc:	2100      	movs	r1, #0
   271ce:	4638      	mov	r0, r7
   271d0:	f001 f9fc 	bl	285cc <memset>
   271d4:	2220      	movs	r2, #32
   271d6:	2100      	movs	r1, #0
   271d8:	4630      	mov	r0, r6
   271da:	f001 f9f7 	bl	285cc <memset>
   271de:	2220      	movs	r2, #32
   271e0:	2100      	movs	r1, #0
   271e2:	4628      	mov	r0, r5
   271e4:	f001 f9f2 	bl	285cc <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   271e8:	fab4 f084 	clz	r0, r4
   271ec:	0940      	lsrs	r0, r0, #5
   271ee:	b024      	add	sp, #144	; 0x90
   271f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000271f4 <uECC_vli_add>:
{
   271f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   271f6:	2400      	movs	r4, #0
{
   271f8:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   271fa:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   271fc:	b265      	sxtb	r5, r4
   271fe:	42ab      	cmp	r3, r5
   27200:	dc00      	bgt.n	27204 <uECC_vli_add+0x10>
}
   27202:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   27204:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   27208:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2720c:	443d      	add	r5, r7
   2720e:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   27210:	42af      	cmp	r7, r5
   27212:	f000 0001 	and.w	r0, r0, #1
   27216:	bf18      	it	ne
   27218:	2000      	movne	r0, #0
		result[i] = sum;
   2721a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2721e:	bf88      	it	hi
   27220:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   27224:	3401      	adds	r4, #1
   27226:	e7e9      	b.n	271fc <uECC_vli_add+0x8>

00027228 <uECC_vli_rshift1>:
	vli += num_words;
   27228:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2722c:	2300      	movs	r3, #0
	while (vli-- > end) {
   2722e:	4288      	cmp	r0, r1
   27230:	d300      	bcc.n	27234 <uECC_vli_rshift1+0xc>
}
   27232:	4770      	bx	lr
		uECC_word_t temp = *vli;
   27234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   27238:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2723c:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2723e:	07d3      	lsls	r3, r2, #31
   27240:	e7f5      	b.n	2722e <uECC_vli_rshift1+0x6>

00027242 <vli_modInv_update>:
	if (!EVEN(uv)) {
   27242:	6803      	ldr	r3, [r0, #0]
{
   27244:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   27246:	f013 0601 	ands.w	r6, r3, #1
{
   2724a:	4605      	mov	r5, r0
   2724c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2724e:	d005      	beq.n	2725c <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   27250:	4613      	mov	r3, r2
   27252:	460a      	mov	r2, r1
   27254:	4601      	mov	r1, r0
   27256:	f7ff ffcd 	bl	271f4 <uECC_vli_add>
   2725a:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2725c:	4621      	mov	r1, r4
   2725e:	4628      	mov	r0, r5
   27260:	f7ff ffe2 	bl	27228 <uECC_vli_rshift1>
	if (carry) {
   27264:	b146      	cbz	r6, 27278 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   27266:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2726a:	3a01      	subs	r2, #1
   2726c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   27270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   27274:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   27278:	bd70      	pop	{r4, r5, r6, pc}

0002727a <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   2727a:	f04f 0c00 	mov.w	ip, #0
{
   2727e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   27282:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   27284:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   27286:	fa4f f98c 	sxtb.w	r9, ip
   2728a:	454b      	cmp	r3, r9
   2728c:	dc16      	bgt.n	272bc <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2728e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   27292:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   27296:	9601      	str	r6, [sp, #4]
   27298:	f04f 0800 	mov.w	r8, #0
   2729c:	9f01      	ldr	r7, [sp, #4]
   2729e:	fa53 fe88 	uxtab	lr, r3, r8
   272a2:	fa4f fe8e 	sxtb.w	lr, lr
   272a6:	45be      	cmp	lr, r7
   272a8:	fa5f f688 	uxtb.w	r6, r8
   272ac:	db26      	blt.n	272fc <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   272ae:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   272b2:	f840 4c04 	str.w	r4, [r0, #-4]
}
   272b6:	b003      	add	sp, #12
   272b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   272bc:	f04f 0e00 	mov.w	lr, #0
   272c0:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   272c4:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   272c6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   272ca:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   272ce:	fba6 6707 	umull	r6, r7, r6, r7
   272d2:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   272d4:	f10e 0e01 	add.w	lr, lr, #1
   272d8:	417d      	adcs	r5, r7
   272da:	fa4f f68e 	sxtb.w	r6, lr
   272de:	f04f 0b00 	mov.w	fp, #0
   272e2:	bf28      	it	cs
   272e4:	f04f 0b01 	movcs.w	fp, #1
   272e8:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   272ea:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   272ec:	ddeb      	ble.n	272c6 <uECC_vli_mult+0x4c>
		result[k] = r0;
   272ee:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   272f2:	462c      	mov	r4, r5
   272f4:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   272f8:	4645      	mov	r5, r8
   272fa:	e7c4      	b.n	27286 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   272fc:	3601      	adds	r6, #1
   272fe:	46a9      	mov	r9, r5
   27300:	b276      	sxtb	r6, r6
   27302:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   27306:	2500      	movs	r5, #0
   27308:	b277      	sxtb	r7, r6
   2730a:	42bb      	cmp	r3, r7
   2730c:	dc05      	bgt.n	2731a <uECC_vli_mult+0xa0>
		result[k] = r0;
   2730e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   27312:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   27316:	464c      	mov	r4, r9
   27318:	e7c0      	b.n	2729c <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2731a:	f06f 0703 	mvn.w	r7, #3
   2731e:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   27320:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   27324:	f85a 7007 	ldr.w	r7, [sl, r7]
   27328:	fba7 7c0c 	umull	r7, ip, r7, ip
   2732c:	193c      	adds	r4, r7, r4
   2732e:	eb5c 0909 	adcs.w	r9, ip, r9
   27332:	f04f 0b00 	mov.w	fp, #0
   27336:	bf28      	it	cs
   27338:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   2733c:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2733e:	3601      	adds	r6, #1
   27340:	e7e2      	b.n	27308 <uECC_vli_mult+0x8e>

00027342 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   27342:	2300      	movs	r3, #0
{
   27344:	b510      	push	{r4, lr}
		 vli[i] = 0;
   27346:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   27348:	b25a      	sxtb	r2, r3
   2734a:	4291      	cmp	r1, r2
   2734c:	dc00      	bgt.n	27350 <uECC_vli_clear+0xe>
}
   2734e:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   27350:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   27354:	3301      	adds	r3, #1
   27356:	e7f7      	b.n	27348 <uECC_vli_clear+0x6>

00027358 <uECC_vli_isZero>:
{
   27358:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2735a:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2735c:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2735e:	b25c      	sxtb	r4, r3
   27360:	42a1      	cmp	r1, r4
   27362:	dc03      	bgt.n	2736c <uECC_vli_isZero+0x14>
}
   27364:	fab2 f082 	clz	r0, r2
   27368:	0940      	lsrs	r0, r0, #5
   2736a:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2736c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   27370:	3301      	adds	r3, #1
   27372:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   27374:	e7f3      	b.n	2735e <uECC_vli_isZero+0x6>

00027376 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   27376:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   27378:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2737a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2737e:	f001 011f 	and.w	r1, r1, #31
   27382:	fa03 f101 	lsl.w	r1, r3, r1
}
   27386:	4008      	ands	r0, r1
   27388:	4770      	bx	lr

0002738a <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2738a:	3901      	subs	r1, #1
{
   2738c:	b510      	push	{r4, lr}
   2738e:	4602      	mov	r2, r0
   27390:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   27392:	1d04      	adds	r4, r0, #4
   27394:	0608      	lsls	r0, r1, #24
   27396:	b2cb      	uxtb	r3, r1
   27398:	d404      	bmi.n	273a4 <uECC_vli_numBits+0x1a>
   2739a:	3901      	subs	r1, #1
   2739c:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   273a0:	2800      	cmp	r0, #0
   273a2:	d0f7      	beq.n	27394 <uECC_vli_numBits+0xa>
	return (i + 1);
   273a4:	3301      	adds	r3, #1
   273a6:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   273a8:	b150      	cbz	r0, 273c0 <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   273aa:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   273ae:	3b01      	subs	r3, #1
   273b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   273b4:	2300      	movs	r3, #0
   273b6:	b922      	cbnz	r2, 273c2 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   273b8:	3801      	subs	r0, #1
   273ba:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   273be:	b200      	sxth	r0, r0
}
   273c0:	bd10      	pop	{r4, pc}
		digit >>= 1;
   273c2:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   273c4:	3301      	adds	r3, #1
   273c6:	e7f6      	b.n	273b6 <uECC_vli_numBits+0x2c>

000273c8 <uECC_vli_set>:
{
   273c8:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   273ca:	2300      	movs	r3, #0
   273cc:	b25c      	sxtb	r4, r3
   273ce:	42a2      	cmp	r2, r4
   273d0:	dc00      	bgt.n	273d4 <uECC_vli_set+0xc>
}
   273d2:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   273d4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   273d8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   273dc:	3301      	adds	r3, #1
   273de:	e7f5      	b.n	273cc <uECC_vli_set+0x4>

000273e0 <uECC_vli_cmp_unsafe>:
{
   273e0:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   273e2:	3a01      	subs	r2, #1
   273e4:	b252      	sxtb	r2, r2
   273e6:	0613      	lsls	r3, r2, #24
   273e8:	d501      	bpl.n	273ee <uECC_vli_cmp_unsafe+0xe>
	return 0;
   273ea:	2000      	movs	r0, #0
}
   273ec:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   273ee:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   273f2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   273f6:	429c      	cmp	r4, r3
   273f8:	d805      	bhi.n	27406 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   273fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   273fe:	d2f2      	bcs.n	273e6 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   27400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27404:	e7f2      	b.n	273ec <uECC_vli_cmp_unsafe+0xc>
			return 1;
   27406:	2001      	movs	r0, #1
   27408:	e7f0      	b.n	273ec <uECC_vli_cmp_unsafe+0xc>

0002740a <uECC_vli_equal>:
{
   2740a:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2740c:	3a01      	subs	r2, #1
   2740e:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   27410:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   27412:	0614      	lsls	r4, r2, #24
   27414:	d503      	bpl.n	2741e <uECC_vli_equal+0x14>
}
   27416:	1e18      	subs	r0, r3, #0
   27418:	bf18      	it	ne
   2741a:	2001      	movne	r0, #1
   2741c:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   2741e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   27422:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   27426:	406c      	eors	r4, r5
   27428:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   2742a:	3a01      	subs	r2, #1
   2742c:	e7f1      	b.n	27412 <uECC_vli_equal+0x8>

0002742e <uECC_vli_sub>:
{
   2742e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   27430:	2400      	movs	r4, #0
{
   27432:	4606      	mov	r6, r0
   27434:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   27436:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   27438:	b265      	sxtb	r5, r4
   2743a:	4565      	cmp	r5, ip
   2743c:	db00      	blt.n	27440 <uECC_vli_sub+0x12>
}
   2743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   27440:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   27444:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   27448:	1a3d      	subs	r5, r7, r0
   2744a:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   2744c:	42af      	cmp	r7, r5
   2744e:	f000 0001 	and.w	r0, r0, #1
   27452:	bf18      	it	ne
   27454:	2000      	movne	r0, #0
		result[i] = diff;
   27456:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2745a:	bf38      	it	cc
   2745c:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   27460:	3401      	adds	r4, #1
   27462:	e7e9      	b.n	27438 <uECC_vli_sub+0xa>

00027464 <uECC_vli_modAdd>:
{
   27464:	b570      	push	{r4, r5, r6, lr}
   27466:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2746a:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2746c:	4633      	mov	r3, r6
{
   2746e:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   27470:	f7ff fec0 	bl	271f4 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   27474:	b930      	cbnz	r0, 27484 <uECC_vli_modAdd+0x20>
   27476:	4632      	mov	r2, r6
   27478:	4621      	mov	r1, r4
   2747a:	4628      	mov	r0, r5
   2747c:	f7ff ffb0 	bl	273e0 <uECC_vli_cmp_unsafe>
   27480:	2801      	cmp	r0, #1
   27482:	d007      	beq.n	27494 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   27484:	4633      	mov	r3, r6
   27486:	462a      	mov	r2, r5
   27488:	4621      	mov	r1, r4
   2748a:	4620      	mov	r0, r4
}
   2748c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   27490:	f7ff bfcd 	b.w	2742e <uECC_vli_sub>
}
   27494:	bd70      	pop	{r4, r5, r6, pc}

00027496 <uECC_vli_modSub>:
{
   27496:	b570      	push	{r4, r5, r6, lr}
   27498:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2749c:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2749e:	4633      	mov	r3, r6
{
   274a0:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   274a2:	f7ff ffc4 	bl	2742e <uECC_vli_sub>
	if (l_borrow) {
   274a6:	b138      	cbz	r0, 274b8 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   274a8:	4633      	mov	r3, r6
   274aa:	462a      	mov	r2, r5
   274ac:	4621      	mov	r1, r4
   274ae:	4620      	mov	r0, r4
}
   274b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   274b4:	f7ff be9e 	b.w	271f4 <uECC_vli_add>
}
   274b8:	bd70      	pop	{r4, r5, r6, pc}

000274ba <uECC_vli_mmod>:
{
   274ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274be:	b0a5      	sub	sp, #148	; 0x94
   274c0:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   274c2:	ab14      	add	r3, sp, #80	; 0x50
   274c4:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   274c8:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   274ca:	4629      	mov	r1, r5
   274cc:	4610      	mov	r0, r2
{
   274ce:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   274d0:	f7ff ff5b 	bl	2738a <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   274d4:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   274d8:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   274da:	2c00      	cmp	r4, #0
   274dc:	4621      	mov	r1, r4
   274de:	bfb8      	it	lt
   274e0:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   274e4:	4263      	negs	r3, r4
   274e6:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   274ea:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   274ee:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   274f2:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   274f4:	bf58      	it	pl
   274f6:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   274f8:	f7ff ff23 	bl	27342 <uECC_vli_clear>
	if (bit_shift > 0) {
   274fc:	2e00      	cmp	r6, #0
   274fe:	b208      	sxth	r0, r1
   27500:	dd2b      	ble.n	2755a <uECC_vli_mmod+0xa0>
   27502:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   27504:	2200      	movs	r2, #0
   27506:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2750a:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2750e:	4613      	mov	r3, r2
   27510:	429d      	cmp	r5, r3
   27512:	d817      	bhi.n	27544 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   27514:	006b      	lsls	r3, r5, #1
   27516:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   27518:	ab04      	add	r3, sp, #16
   2751a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2751e:	1e6f      	subs	r7, r5, #1
   27520:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   27522:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   27524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   27528:	2c00      	cmp	r4, #0
   2752a:	da54      	bge.n	275d6 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   2752c:	ab24      	add	r3, sp, #144	; 0x90
   2752e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   27532:	462a      	mov	r2, r5
   27534:	f856 1c88 	ldr.w	r1, [r6, #-136]
   27538:	4640      	mov	r0, r8
   2753a:	f7ff ff45 	bl	273c8 <uECC_vli_set>
}
   2753e:	b025      	add	sp, #148	; 0x94
   27540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   27544:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   27548:	fa0c f106 	lsl.w	r1, ip, r6
   2754c:	430a      	orrs	r2, r1
   2754e:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   27552:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   27554:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   27558:	e7da      	b.n	27510 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2755a:	ab04      	add	r3, sp, #16
   2755c:	462a      	mov	r2, r5
   2755e:	4639      	mov	r1, r7
   27560:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27564:	f7ff ff30 	bl	273c8 <uECC_vli_set>
   27568:	e7d4      	b.n	27514 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2756a:	fa0f fe82 	sxth.w	lr, r2
   2756e:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   27572:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   27576:	ab24      	add	r3, sp, #144	; 0x90
   27578:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2757c:	3001      	adds	r0, #1
   2757e:	f852 3c80 	ldr.w	r3, [r2, #-128]
   27582:	440b      	add	r3, r1
   27584:	ebbb 0303 	subs.w	r3, fp, r3
   27588:	bf34      	ite	cc
   2758a:	2201      	movcc	r2, #1
   2758c:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   2758e:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   27590:	bf18      	it	ne
   27592:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   27594:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   27598:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   2759c:	9b01      	ldr	r3, [sp, #4]
   2759e:	b242      	sxtb	r2, r0
   275a0:	429a      	cmp	r2, r3
   275a2:	dbe2      	blt.n	2756a <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   275a4:	1a73      	subs	r3, r6, r1
   275a6:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   275a8:	4629      	mov	r1, r5
   275aa:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   275ac:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   275ae:	f7ff fe3b 	bl	27228 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   275b2:	ab24      	add	r3, sp, #144	; 0x90
   275b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   275b8:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   275ba:	f853 2c80 	ldr.w	r2, [r3, #-128]
   275be:	f857 3c80 	ldr.w	r3, [r7, #-128]
   275c2:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   275c6:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   275ca:	4648      	mov	r0, r9
   275cc:	3c01      	subs	r4, #1
   275ce:	f7ff fe2b 	bl	27228 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   275d2:	b224      	sxth	r4, r4
   275d4:	e7a8      	b.n	27528 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   275d6:	ab24      	add	r3, sp, #144	; 0x90
   275d8:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   275da:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   275de:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   275e0:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   275e4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   275e8:	e7d8      	b.n	2759c <uECC_vli_mmod+0xe2>

000275ea <uECC_vli_modMult_fast>:
{
   275ea:	b530      	push	{r4, r5, lr}
   275ec:	461c      	mov	r4, r3
   275ee:	b091      	sub	sp, #68	; 0x44
   275f0:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   275f2:	f993 3000 	ldrsb.w	r3, [r3]
   275f6:	4668      	mov	r0, sp
   275f8:	f7ff fe3f 	bl	2727a <uECC_vli_mult>
	curve->mmod_fast(result, product);
   275fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   27600:	4669      	mov	r1, sp
   27602:	4628      	mov	r0, r5
   27604:	4798      	blx	r3
}
   27606:	b011      	add	sp, #68	; 0x44
   27608:	bd30      	pop	{r4, r5, pc}

0002760a <uECC_vli_modSquare_fast>:
{
   2760a:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   2760c:	460a      	mov	r2, r1
   2760e:	f7ff bfec 	b.w	275ea <uECC_vli_modMult_fast>

00027612 <double_jacobian_default>:
{
   27612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   27616:	f993 6000 	ldrsb.w	r6, [r3]
{
   2761a:	b092      	sub	sp, #72	; 0x48
   2761c:	4604      	mov	r4, r0
   2761e:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   27620:	4610      	mov	r0, r2
   27622:	4631      	mov	r1, r6
{
   27624:	4615      	mov	r5, r2
   27626:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   27628:	f7ff fe96 	bl	27358 <uECC_vli_isZero>
   2762c:	2800      	cmp	r0, #0
   2762e:	f040 8091 	bne.w	27754 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   27632:	463a      	mov	r2, r7
   27634:	4649      	mov	r1, r9
   27636:	a802      	add	r0, sp, #8
   27638:	f7ff ffe7 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2763c:	463b      	mov	r3, r7
   2763e:	aa02      	add	r2, sp, #8
   27640:	4621      	mov	r1, r4
   27642:	a80a      	add	r0, sp, #40	; 0x28
   27644:	f7ff ffd1 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   27648:	a902      	add	r1, sp, #8
   2764a:	4608      	mov	r0, r1
   2764c:	463a      	mov	r2, r7
   2764e:	f7ff ffdc 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   27652:	463b      	mov	r3, r7
   27654:	462a      	mov	r2, r5
   27656:	4649      	mov	r1, r9
   27658:	4648      	mov	r0, r9
   2765a:	f7ff ffc6 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2765e:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   27662:	463a      	mov	r2, r7
   27664:	4629      	mov	r1, r5
   27666:	4628      	mov	r0, r5
   27668:	f7ff ffcf 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2766c:	4643      	mov	r3, r8
   2766e:	462a      	mov	r2, r5
   27670:	4621      	mov	r1, r4
   27672:	4620      	mov	r0, r4
   27674:	9600      	str	r6, [sp, #0]
   27676:	f7ff fef5 	bl	27464 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2767a:	4643      	mov	r3, r8
   2767c:	462a      	mov	r2, r5
   2767e:	4629      	mov	r1, r5
   27680:	4628      	mov	r0, r5
   27682:	9600      	str	r6, [sp, #0]
   27684:	f7ff feee 	bl	27464 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   27688:	4643      	mov	r3, r8
   2768a:	462a      	mov	r2, r5
   2768c:	4621      	mov	r1, r4
   2768e:	4628      	mov	r0, r5
   27690:	9600      	str	r6, [sp, #0]
   27692:	f7ff ff00 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   27696:	463b      	mov	r3, r7
   27698:	462a      	mov	r2, r5
   2769a:	4621      	mov	r1, r4
   2769c:	4620      	mov	r0, r4
   2769e:	f7ff ffa4 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   276a2:	4643      	mov	r3, r8
   276a4:	4622      	mov	r2, r4
   276a6:	4621      	mov	r1, r4
   276a8:	4628      	mov	r0, r5
   276aa:	9600      	str	r6, [sp, #0]
   276ac:	f7ff feda 	bl	27464 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   276b0:	4643      	mov	r3, r8
   276b2:	9600      	str	r6, [sp, #0]
   276b4:	462a      	mov	r2, r5
   276b6:	4621      	mov	r1, r4
   276b8:	4620      	mov	r0, r4
   276ba:	f7ff fed3 	bl	27464 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   276be:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   276c0:	07db      	lsls	r3, r3, #31
   276c2:	d54a      	bpl.n	2775a <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   276c4:	4633      	mov	r3, r6
   276c6:	4642      	mov	r2, r8
   276c8:	4621      	mov	r1, r4
   276ca:	4620      	mov	r0, r4
   276cc:	f7ff fd92 	bl	271f4 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   276d0:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   276d2:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   276d4:	4620      	mov	r0, r4
   276d6:	f7ff fda7 	bl	27228 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   276da:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   276de:	3b01      	subs	r3, #1
   276e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   276e4:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   276e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   276ec:	463a      	mov	r2, r7
   276ee:	4621      	mov	r1, r4
   276f0:	4628      	mov	r0, r5
   276f2:	f7ff ff8a 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   276f6:	4643      	mov	r3, r8
   276f8:	aa0a      	add	r2, sp, #40	; 0x28
   276fa:	4629      	mov	r1, r5
   276fc:	4628      	mov	r0, r5
   276fe:	9600      	str	r6, [sp, #0]
   27700:	f7ff fec9 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   27704:	4643      	mov	r3, r8
   27706:	aa0a      	add	r2, sp, #40	; 0x28
   27708:	4629      	mov	r1, r5
   2770a:	4628      	mov	r0, r5
   2770c:	9600      	str	r6, [sp, #0]
   2770e:	f7ff fec2 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   27712:	a90a      	add	r1, sp, #40	; 0x28
   27714:	4608      	mov	r0, r1
   27716:	4643      	mov	r3, r8
   27718:	462a      	mov	r2, r5
   2771a:	9600      	str	r6, [sp, #0]
   2771c:	f7ff febb 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   27720:	463b      	mov	r3, r7
   27722:	aa0a      	add	r2, sp, #40	; 0x28
   27724:	4621      	mov	r1, r4
   27726:	4620      	mov	r0, r4
   27728:	f7ff ff5f 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2772c:	aa02      	add	r2, sp, #8
   2772e:	4643      	mov	r3, r8
   27730:	4610      	mov	r0, r2
   27732:	4621      	mov	r1, r4
   27734:	9600      	str	r6, [sp, #0]
   27736:	f7ff feae 	bl	27496 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2773a:	4632      	mov	r2, r6
   2773c:	4629      	mov	r1, r5
   2773e:	4620      	mov	r0, r4
   27740:	f7ff fe42 	bl	273c8 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   27744:	4649      	mov	r1, r9
   27746:	4628      	mov	r0, r5
   27748:	f7ff fe3e 	bl	273c8 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2774c:	a902      	add	r1, sp, #8
   2774e:	4648      	mov	r0, r9
   27750:	f7ff fe3a 	bl	273c8 <uECC_vli_set>
}
   27754:	b012      	add	sp, #72	; 0x48
   27756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2775a:	4631      	mov	r1, r6
   2775c:	4620      	mov	r0, r4
   2775e:	f7ff fd63 	bl	27228 <uECC_vli_rshift1>
   27762:	e7c3      	b.n	276ec <double_jacobian_default+0xda>

00027764 <x_side_default>:
{
   27764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27768:	4615      	mov	r5, r2
   2776a:	b08a      	sub	sp, #40	; 0x28
   2776c:	4604      	mov	r4, r0
   2776e:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   27770:	221c      	movs	r2, #28
   27772:	2100      	movs	r1, #0
   27774:	a803      	add	r0, sp, #12
   27776:	f000 ff29 	bl	285cc <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2777a:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   2777c:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   27780:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   27782:	462a      	mov	r2, r5
   27784:	4631      	mov	r1, r6
   27786:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   27788:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2778a:	f7ff ff3e 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2778e:	463b      	mov	r3, r7
   27790:	aa02      	add	r2, sp, #8
   27792:	4621      	mov	r1, r4
   27794:	4620      	mov	r0, r4
   27796:	f8cd 8000 	str.w	r8, [sp]
   2779a:	f7ff fe7c 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2779e:	462b      	mov	r3, r5
   277a0:	4632      	mov	r2, r6
   277a2:	4621      	mov	r1, r4
   277a4:	4620      	mov	r0, r4
   277a6:	f7ff ff20 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   277aa:	f8cd 8000 	str.w	r8, [sp]
   277ae:	463b      	mov	r3, r7
   277b0:	f105 0284 	add.w	r2, r5, #132	; 0x84
   277b4:	4621      	mov	r1, r4
   277b6:	4620      	mov	r0, r4
   277b8:	f7ff fe54 	bl	27464 <uECC_vli_modAdd>
}
   277bc:	b00a      	add	sp, #40	; 0x28
   277be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000277c2 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   277c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   277c6:	b09a      	sub	sp, #104	; 0x68
   277c8:	4616      	mov	r6, r2
   277ca:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   277ce:	4644      	mov	r4, r8
{
   277d0:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   277d2:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   277d6:	9500      	str	r5, [sp, #0]
{
   277d8:	4607      	mov	r7, r0
   277da:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   277dc:	4623      	mov	r3, r4
   277de:	4602      	mov	r2, r0
   277e0:	4631      	mov	r1, r6
   277e2:	a802      	add	r0, sp, #8
   277e4:	f7ff fe57 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   277e8:	a902      	add	r1, sp, #8
   277ea:	4642      	mov	r2, r8
   277ec:	4608      	mov	r0, r1
   277ee:	f7ff ff0c 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   277f2:	4643      	mov	r3, r8
   277f4:	aa02      	add	r2, sp, #8
   277f6:	4639      	mov	r1, r7
   277f8:	4638      	mov	r0, r7
   277fa:	f7ff fef6 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   277fe:	4643      	mov	r3, r8
   27800:	aa02      	add	r2, sp, #8
   27802:	4631      	mov	r1, r6
   27804:	4630      	mov	r0, r6
   27806:	f7ff fef0 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2780a:	4623      	mov	r3, r4
   2780c:	4652      	mov	r2, sl
   2780e:	4649      	mov	r1, r9
   27810:	a802      	add	r0, sp, #8
   27812:	9500      	str	r5, [sp, #0]
   27814:	f7ff fe26 	bl	27464 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   27818:	4623      	mov	r3, r4
   2781a:	4652      	mov	r2, sl
   2781c:	4649      	mov	r1, r9
   2781e:	4648      	mov	r0, r9
   27820:	9500      	str	r5, [sp, #0]
   27822:	f7ff fe38 	bl	27496 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   27826:	4623      	mov	r3, r4
   27828:	463a      	mov	r2, r7
   2782a:	4631      	mov	r1, r6
   2782c:	a80a      	add	r0, sp, #40	; 0x28
   2782e:	9500      	str	r5, [sp, #0]
   27830:	f7ff fe31 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   27834:	4643      	mov	r3, r8
   27836:	aa0a      	add	r2, sp, #40	; 0x28
   27838:	4651      	mov	r1, sl
   2783a:	4650      	mov	r0, sl
   2783c:	f7ff fed5 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   27840:	4623      	mov	r3, r4
   27842:	4632      	mov	r2, r6
   27844:	4639      	mov	r1, r7
   27846:	a80a      	add	r0, sp, #40	; 0x28
   27848:	9500      	str	r5, [sp, #0]
   2784a:	f7ff fe0b 	bl	27464 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2784e:	4642      	mov	r2, r8
   27850:	4649      	mov	r1, r9
   27852:	4630      	mov	r0, r6
   27854:	f7ff fed9 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   27858:	4623      	mov	r3, r4
   2785a:	aa0a      	add	r2, sp, #40	; 0x28
   2785c:	4631      	mov	r1, r6
   2785e:	4630      	mov	r0, r6
   27860:	9500      	str	r5, [sp, #0]
   27862:	f7ff fe18 	bl	27496 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   27866:	4623      	mov	r3, r4
   27868:	4632      	mov	r2, r6
   2786a:	4639      	mov	r1, r7
   2786c:	a812      	add	r0, sp, #72	; 0x48
   2786e:	9500      	str	r5, [sp, #0]
   27870:	f7ff fe11 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   27874:	4643      	mov	r3, r8
   27876:	aa12      	add	r2, sp, #72	; 0x48
   27878:	4649      	mov	r1, r9
   2787a:	4648      	mov	r0, r9
   2787c:	f7ff feb5 	bl	275ea <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   27880:	4623      	mov	r3, r4
   27882:	4652      	mov	r2, sl
   27884:	4649      	mov	r1, r9
   27886:	4648      	mov	r0, r9
   27888:	9500      	str	r5, [sp, #0]
   2788a:	f7ff fe04 	bl	27496 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2788e:	4642      	mov	r2, r8
   27890:	a902      	add	r1, sp, #8
   27892:	a812      	add	r0, sp, #72	; 0x48
   27894:	f7ff feb9 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   27898:	a912      	add	r1, sp, #72	; 0x48
   2789a:	4623      	mov	r3, r4
   2789c:	aa0a      	add	r2, sp, #40	; 0x28
   2789e:	4608      	mov	r0, r1
   278a0:	9500      	str	r5, [sp, #0]
   278a2:	f7ff fdf8 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   278a6:	4623      	mov	r3, r4
   278a8:	463a      	mov	r2, r7
   278aa:	a912      	add	r1, sp, #72	; 0x48
   278ac:	a80a      	add	r0, sp, #40	; 0x28
   278ae:	9500      	str	r5, [sp, #0]
   278b0:	f7ff fdf1 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   278b4:	a90a      	add	r1, sp, #40	; 0x28
   278b6:	4643      	mov	r3, r8
   278b8:	aa02      	add	r2, sp, #8
   278ba:	4608      	mov	r0, r1
   278bc:	f7ff fe95 	bl	275ea <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   278c0:	4623      	mov	r3, r4
   278c2:	4652      	mov	r2, sl
   278c4:	a90a      	add	r1, sp, #40	; 0x28
   278c6:	4650      	mov	r0, sl
   278c8:	9500      	str	r5, [sp, #0]
   278ca:	f7ff fde4 	bl	27496 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   278ce:	462a      	mov	r2, r5
   278d0:	a912      	add	r1, sp, #72	; 0x48
   278d2:	4638      	mov	r0, r7
   278d4:	f7ff fd78 	bl	273c8 <uECC_vli_set>
}
   278d8:	b01a      	add	sp, #104	; 0x68
   278da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000278de <uECC_vli_modInv>:
{
   278de:	b5f0      	push	{r4, r5, r6, r7, lr}
   278e0:	460f      	mov	r7, r1
   278e2:	b0a1      	sub	sp, #132	; 0x84
   278e4:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   278e6:	4619      	mov	r1, r3
   278e8:	4638      	mov	r0, r7
{
   278ea:	4615      	mov	r5, r2
   278ec:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   278ee:	f7ff fd33 	bl	27358 <uECC_vli_isZero>
   278f2:	b128      	cbz	r0, 27900 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   278f4:	4630      	mov	r0, r6
}
   278f6:	b021      	add	sp, #132	; 0x84
   278f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   278fc:	f7ff bd21 	b.w	27342 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   27900:	4622      	mov	r2, r4
   27902:	4639      	mov	r1, r7
   27904:	4668      	mov	r0, sp
   27906:	f7ff fd5f 	bl	273c8 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2790a:	4629      	mov	r1, r5
   2790c:	a808      	add	r0, sp, #32
   2790e:	f7ff fd5b 	bl	273c8 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   27912:	a810      	add	r0, sp, #64	; 0x40
   27914:	4621      	mov	r1, r4
   27916:	f7ff fd14 	bl	27342 <uECC_vli_clear>
	u[0] = 1;
   2791a:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2791c:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2791e:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   27920:	f7ff fd0f 	bl	27342 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   27924:	4622      	mov	r2, r4
   27926:	a908      	add	r1, sp, #32
   27928:	4668      	mov	r0, sp
   2792a:	f7ff fd59 	bl	273e0 <uECC_vli_cmp_unsafe>
   2792e:	b930      	cbnz	r0, 2793e <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   27930:	4622      	mov	r2, r4
   27932:	a910      	add	r1, sp, #64	; 0x40
   27934:	4630      	mov	r0, r6
   27936:	f7ff fd47 	bl	273c8 <uECC_vli_set>
}
   2793a:	b021      	add	sp, #132	; 0x84
   2793c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   2793e:	9b00      	ldr	r3, [sp, #0]
   27940:	07da      	lsls	r2, r3, #31
   27942:	d409      	bmi.n	27958 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   27944:	4621      	mov	r1, r4
   27946:	4668      	mov	r0, sp
   27948:	f7ff fc6e 	bl	27228 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2794c:	4622      	mov	r2, r4
   2794e:	4629      	mov	r1, r5
   27950:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   27952:	f7ff fc76 	bl	27242 <vli_modInv_update>
   27956:	e7e5      	b.n	27924 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   27958:	9b08      	ldr	r3, [sp, #32]
   2795a:	07db      	lsls	r3, r3, #31
   2795c:	d407      	bmi.n	2796e <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   2795e:	4621      	mov	r1, r4
   27960:	a808      	add	r0, sp, #32
   27962:	f7ff fc61 	bl	27228 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   27966:	4622      	mov	r2, r4
   27968:	4629      	mov	r1, r5
   2796a:	a818      	add	r0, sp, #96	; 0x60
   2796c:	e7f1      	b.n	27952 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   2796e:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   27970:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   27972:	dd1c      	ble.n	279ae <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   27974:	aa08      	add	r2, sp, #32
   27976:	4669      	mov	r1, sp
   27978:	4668      	mov	r0, sp
   2797a:	f7ff fd58 	bl	2742e <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2797e:	4621      	mov	r1, r4
   27980:	4668      	mov	r0, sp
   27982:	f7ff fc51 	bl	27228 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   27986:	4622      	mov	r2, r4
   27988:	a918      	add	r1, sp, #96	; 0x60
   2798a:	a810      	add	r0, sp, #64	; 0x40
   2798c:	f7ff fd28 	bl	273e0 <uECC_vli_cmp_unsafe>
   27990:	2800      	cmp	r0, #0
   27992:	da05      	bge.n	279a0 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   27994:	a910      	add	r1, sp, #64	; 0x40
   27996:	4623      	mov	r3, r4
   27998:	462a      	mov	r2, r5
   2799a:	4608      	mov	r0, r1
   2799c:	f7ff fc2a 	bl	271f4 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   279a0:	a910      	add	r1, sp, #64	; 0x40
   279a2:	4623      	mov	r3, r4
   279a4:	aa18      	add	r2, sp, #96	; 0x60
   279a6:	4608      	mov	r0, r1
   279a8:	f7ff fd41 	bl	2742e <uECC_vli_sub>
   279ac:	e7ce      	b.n	2794c <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   279ae:	466a      	mov	r2, sp
   279b0:	a808      	add	r0, sp, #32
   279b2:	f7ff fd3c 	bl	2742e <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   279b6:	4621      	mov	r1, r4
   279b8:	a808      	add	r0, sp, #32
   279ba:	f7ff fc35 	bl	27228 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   279be:	4622      	mov	r2, r4
   279c0:	a910      	add	r1, sp, #64	; 0x40
   279c2:	a818      	add	r0, sp, #96	; 0x60
   279c4:	f7ff fd0c 	bl	273e0 <uECC_vli_cmp_unsafe>
   279c8:	2800      	cmp	r0, #0
   279ca:	da05      	bge.n	279d8 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   279cc:	a918      	add	r1, sp, #96	; 0x60
   279ce:	4623      	mov	r3, r4
   279d0:	462a      	mov	r2, r5
   279d2:	4608      	mov	r0, r1
   279d4:	f7ff fc0e 	bl	271f4 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   279d8:	a918      	add	r1, sp, #96	; 0x60
   279da:	4623      	mov	r3, r4
   279dc:	aa10      	add	r2, sp, #64	; 0x40
   279de:	4608      	mov	r0, r1
   279e0:	f7ff fd25 	bl	2742e <uECC_vli_sub>
   279e4:	e7bf      	b.n	27966 <uECC_vli_modInv+0x88>

000279e6 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   279e6:	7809      	ldrb	r1, [r1, #0]
   279e8:	0049      	lsls	r1, r1, #1
   279ea:	b249      	sxtb	r1, r1
   279ec:	f7ff bcb4 	b.w	27358 <uECC_vli_isZero>

000279f0 <apply_z>:
{
   279f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   279f2:	4615      	mov	r5, r2
   279f4:	b089      	sub	sp, #36	; 0x24
   279f6:	461c      	mov	r4, r3
   279f8:	4607      	mov	r7, r0
   279fa:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   279fc:	461a      	mov	r2, r3
   279fe:	4629      	mov	r1, r5
   27a00:	4668      	mov	r0, sp
   27a02:	f7ff fe02 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   27a06:	4623      	mov	r3, r4
   27a08:	466a      	mov	r2, sp
   27a0a:	4639      	mov	r1, r7
   27a0c:	4638      	mov	r0, r7
   27a0e:	f7ff fdec 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   27a12:	4623      	mov	r3, r4
   27a14:	462a      	mov	r2, r5
   27a16:	4669      	mov	r1, sp
   27a18:	4668      	mov	r0, sp
   27a1a:	f7ff fde6 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   27a1e:	4623      	mov	r3, r4
   27a20:	466a      	mov	r2, sp
   27a22:	4631      	mov	r1, r6
   27a24:	4630      	mov	r0, r6
   27a26:	f7ff fde0 	bl	275ea <uECC_vli_modMult_fast>
}
   27a2a:	b009      	add	sp, #36	; 0x24
   27a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027a2e <XYcZ_add>:
{
   27a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27a32:	b08a      	sub	sp, #40	; 0x28
   27a34:	4614      	mov	r4, r2
   27a36:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   27a3a:	4655      	mov	r5, sl
{
   27a3c:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   27a3e:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   27a42:	9600      	str	r6, [sp, #0]
{
   27a44:	4680      	mov	r8, r0
   27a46:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   27a48:	462b      	mov	r3, r5
   27a4a:	4602      	mov	r2, r0
   27a4c:	4621      	mov	r1, r4
   27a4e:	a802      	add	r0, sp, #8
   27a50:	f7ff fd21 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   27a54:	a902      	add	r1, sp, #8
   27a56:	4652      	mov	r2, sl
   27a58:	4608      	mov	r0, r1
   27a5a:	f7ff fdd6 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   27a5e:	4653      	mov	r3, sl
   27a60:	aa02      	add	r2, sp, #8
   27a62:	4641      	mov	r1, r8
   27a64:	4640      	mov	r0, r8
   27a66:	f7ff fdc0 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   27a6a:	4653      	mov	r3, sl
   27a6c:	aa02      	add	r2, sp, #8
   27a6e:	4621      	mov	r1, r4
   27a70:	4620      	mov	r0, r4
   27a72:	f7ff fdba 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   27a76:	462b      	mov	r3, r5
   27a78:	464a      	mov	r2, r9
   27a7a:	4639      	mov	r1, r7
   27a7c:	4638      	mov	r0, r7
   27a7e:	9600      	str	r6, [sp, #0]
   27a80:	f7ff fd09 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   27a84:	4652      	mov	r2, sl
   27a86:	4639      	mov	r1, r7
   27a88:	a802      	add	r0, sp, #8
   27a8a:	f7ff fdbe 	bl	2760a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   27a8e:	a902      	add	r1, sp, #8
   27a90:	462b      	mov	r3, r5
   27a92:	4642      	mov	r2, r8
   27a94:	4608      	mov	r0, r1
   27a96:	9600      	str	r6, [sp, #0]
   27a98:	f7ff fcfd 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   27a9c:	a902      	add	r1, sp, #8
   27a9e:	462b      	mov	r3, r5
   27aa0:	4622      	mov	r2, r4
   27aa2:	4608      	mov	r0, r1
   27aa4:	9600      	str	r6, [sp, #0]
   27aa6:	f7ff fcf6 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   27aaa:	462b      	mov	r3, r5
   27aac:	4642      	mov	r2, r8
   27aae:	4621      	mov	r1, r4
   27ab0:	4620      	mov	r0, r4
   27ab2:	9600      	str	r6, [sp, #0]
   27ab4:	f7ff fcef 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   27ab8:	4653      	mov	r3, sl
   27aba:	4622      	mov	r2, r4
   27abc:	4649      	mov	r1, r9
   27abe:	4648      	mov	r0, r9
   27ac0:	f7ff fd93 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   27ac4:	462b      	mov	r3, r5
   27ac6:	aa02      	add	r2, sp, #8
   27ac8:	4641      	mov	r1, r8
   27aca:	4620      	mov	r0, r4
   27acc:	9600      	str	r6, [sp, #0]
   27ace:	f7ff fce2 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   27ad2:	4653      	mov	r3, sl
   27ad4:	4622      	mov	r2, r4
   27ad6:	4639      	mov	r1, r7
   27ad8:	4638      	mov	r0, r7
   27ada:	f7ff fd86 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   27ade:	462b      	mov	r3, r5
   27ae0:	464a      	mov	r2, r9
   27ae2:	4639      	mov	r1, r7
   27ae4:	4638      	mov	r0, r7
   27ae6:	9600      	str	r6, [sp, #0]
   27ae8:	f7ff fcd5 	bl	27496 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   27aec:	4632      	mov	r2, r6
   27aee:	a902      	add	r1, sp, #8
   27af0:	4620      	mov	r0, r4
   27af2:	f7ff fc69 	bl	273c8 <uECC_vli_set>
}
   27af6:	b00a      	add	sp, #40	; 0x28
   27af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027afc <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   27afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b00:	b0b1      	sub	sp, #196	; 0xc4
   27b02:	e9cd 0103 	strd	r0, r1, [sp, #12]
   27b06:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   27b08:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   27b0c:	a818      	add	r0, sp, #96	; 0x60
{
   27b0e:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   27b10:	463a      	mov	r2, r7
{
   27b12:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   27b14:	f7ff fc58 	bl	273c8 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   27b18:	00bb      	lsls	r3, r7, #2
   27b1a:	9305      	str	r3, [sp, #20]
   27b1c:	9b04      	ldr	r3, [sp, #16]
   27b1e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   27b22:	4619      	mov	r1, r3
   27b24:	a828      	add	r0, sp, #160	; 0xa0
   27b26:	9302      	str	r3, [sp, #8]
   27b28:	f7ff fc4e 	bl	273c8 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   27b2c:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   27b30:	2d00      	cmp	r5, #0
   27b32:	f000 8086 	beq.w	27c42 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   27b36:	4632      	mov	r2, r6
   27b38:	4629      	mov	r1, r5
   27b3a:	a808      	add	r0, sp, #32
   27b3c:	f7ff fc44 	bl	273c8 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   27b40:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   27b44:	4632      	mov	r2, r6
   27b46:	a918      	add	r1, sp, #96	; 0x60
   27b48:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   27b4a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   27b4e:	f7ff fc3b 	bl	273c8 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   27b52:	a928      	add	r1, sp, #160	; 0xa0
   27b54:	4648      	mov	r0, r9
   27b56:	f7ff fc37 	bl	273c8 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   27b5a:	4623      	mov	r3, r4
   27b5c:	aa08      	add	r2, sp, #32
   27b5e:	a818      	add	r0, sp, #96	; 0x60
   27b60:	f7ff ff46 	bl	279f0 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   27b64:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   27b68:	4623      	mov	r3, r4
   27b6a:	aa08      	add	r2, sp, #32
   27b6c:	a928      	add	r1, sp, #160	; 0xa0
   27b6e:	a818      	add	r0, sp, #96	; 0x60
   27b70:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   27b72:	4623      	mov	r3, r4
   27b74:	aa08      	add	r2, sp, #32
   27b76:	4649      	mov	r1, r9
   27b78:	4640      	mov	r0, r8
   27b7a:	f7ff ff39 	bl	279f0 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   27b7e:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   27b82:	3d02      	subs	r5, #2
   27b84:	b22d      	sxth	r5, r5
   27b86:	2d00      	cmp	r5, #0
   27b88:	dc62      	bgt.n	27c50 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   27b8a:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   27b8e:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   27b90:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   27b94:	ab10      	add	r3, sp, #64	; 0x40
   27b96:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   27b9a:	43ed      	mvns	r5, r5
   27b9c:	ab20      	add	r3, sp, #128	; 0x80
   27b9e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   27ba2:	f005 0501 	and.w	r5, r5, #1
   27ba6:	ab10      	add	r3, sp, #64	; 0x40
   27ba8:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   27bac:	ab20      	add	r3, sp, #128	; 0x80
   27bae:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   27bb2:	462b      	mov	r3, r5
   27bb4:	464a      	mov	r2, r9
   27bb6:	4631      	mov	r1, r6
   27bb8:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   27bba:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   27bbe:	f7ff fe00 	bl	277c2 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   27bc2:	4653      	mov	r3, sl
   27bc4:	aa10      	add	r2, sp, #64	; 0x40
   27bc6:	a918      	add	r1, sp, #96	; 0x60
   27bc8:	a808      	add	r0, sp, #32
   27bca:	9700      	str	r7, [sp, #0]
   27bcc:	f7ff fc63 	bl	27496 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   27bd0:	a908      	add	r1, sp, #32
   27bd2:	4623      	mov	r3, r4
   27bd4:	4632      	mov	r2, r6
   27bd6:	4608      	mov	r0, r1
   27bd8:	f7ff fd07 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   27bdc:	a908      	add	r1, sp, #32
   27bde:	9a04      	ldr	r2, [sp, #16]
   27be0:	4623      	mov	r3, r4
   27be2:	4608      	mov	r0, r1
   27be4:	f7ff fd01 	bl	275ea <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   27be8:	a908      	add	r1, sp, #32
   27bea:	463b      	mov	r3, r7
   27bec:	4652      	mov	r2, sl
   27bee:	4608      	mov	r0, r1
   27bf0:	f7ff fe75 	bl	278de <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   27bf4:	a908      	add	r1, sp, #32
   27bf6:	9a02      	ldr	r2, [sp, #8]
   27bf8:	4623      	mov	r3, r4
   27bfa:	4608      	mov	r0, r1
   27bfc:	f7ff fcf5 	bl	275ea <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   27c00:	a908      	add	r1, sp, #32
   27c02:	4623      	mov	r3, r4
   27c04:	4642      	mov	r2, r8
   27c06:	4608      	mov	r0, r1
   27c08:	f7ff fcef 	bl	275ea <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   27c0c:	4633      	mov	r3, r6
   27c0e:	4642      	mov	r2, r8
   27c10:	4629      	mov	r1, r5
   27c12:	4648      	mov	r0, r9
   27c14:	9400      	str	r4, [sp, #0]
   27c16:	f7ff ff0a 	bl	27a2e <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   27c1a:	4623      	mov	r3, r4
   27c1c:	aa08      	add	r2, sp, #32
   27c1e:	a920      	add	r1, sp, #128	; 0x80
   27c20:	a810      	add	r0, sp, #64	; 0x40
   27c22:	f7ff fee5 	bl	279f0 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   27c26:	9803      	ldr	r0, [sp, #12]
   27c28:	463a      	mov	r2, r7
   27c2a:	a910      	add	r1, sp, #64	; 0x40
   27c2c:	f7ff fbcc 	bl	273c8 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   27c30:	9803      	ldr	r0, [sp, #12]
   27c32:	9b05      	ldr	r3, [sp, #20]
   27c34:	a920      	add	r1, sp, #128	; 0x80
   27c36:	4418      	add	r0, r3
   27c38:	f7ff fbc6 	bl	273c8 <uECC_vli_set>
}
   27c3c:	b031      	add	sp, #196	; 0xc4
   27c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   27c42:	4631      	mov	r1, r6
   27c44:	a808      	add	r0, sp, #32
   27c46:	f7ff fb7c 	bl	27342 <uECC_vli_clear>
		z[0] = 1;
   27c4a:	2301      	movs	r3, #1
   27c4c:	9308      	str	r3, [sp, #32]
   27c4e:	e777      	b.n	27b40 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   27c50:	4629      	mov	r1, r5
   27c52:	4650      	mov	r0, sl
   27c54:	f7ff fb8f 	bl	27376 <uECC_vli_testBit>
   27c58:	fab0 f680 	clz	r6, r0
   27c5c:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   27c5e:	f1c6 0101 	rsb	r1, r6, #1
   27c62:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   27c66:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   27c6a:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   27c6e:	4633      	mov	r3, r6
   27c70:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   27c74:	465a      	mov	r2, fp
   27c76:	9400      	str	r4, [sp, #0]
   27c78:	e9cd 0106 	strd	r0, r1, [sp, #24]
   27c7c:	f7ff fda1 	bl	277c2 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   27c80:	9907      	ldr	r1, [sp, #28]
   27c82:	9806      	ldr	r0, [sp, #24]
   27c84:	9400      	str	r4, [sp, #0]
   27c86:	460b      	mov	r3, r1
   27c88:	4602      	mov	r2, r0
   27c8a:	4631      	mov	r1, r6
   27c8c:	4658      	mov	r0, fp
   27c8e:	f7ff fece 	bl	27a2e <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   27c92:	3d01      	subs	r5, #1
   27c94:	e776      	b.n	27b84 <EccPoint_mult+0x88>

00027c96 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   27c96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   27c9a:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   27c9e:	f119 081f 	adds.w	r8, r9, #31
{
   27ca2:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   27ca4:	bf48      	it	mi
   27ca6:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   27caa:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   27cac:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   27cb0:	3524      	adds	r5, #36	; 0x24
   27cb2:	4601      	mov	r1, r0
{
   27cb4:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   27cb6:	4643      	mov	r3, r8
   27cb8:	462a      	mov	r2, r5
   27cba:	4630      	mov	r0, r6
   27cbc:	f7ff fa9a 	bl	271f4 <uECC_vli_add>
   27cc0:	4604      	mov	r4, r0
   27cc2:	b990      	cbnz	r0, 27cea <regularize_k+0x54>
   27cc4:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   27cc8:	da06      	bge.n	27cd8 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   27cca:	4649      	mov	r1, r9
   27ccc:	4630      	mov	r0, r6
   27cce:	f7ff fb52 	bl	27376 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   27cd2:	1e04      	subs	r4, r0, #0
   27cd4:	bf18      	it	ne
   27cd6:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   27cd8:	4643      	mov	r3, r8
   27cda:	462a      	mov	r2, r5
   27cdc:	4631      	mov	r1, r6
   27cde:	4638      	mov	r0, r7
   27ce0:	f7ff fa88 	bl	271f4 <uECC_vli_add>

	return carry;
}
   27ce4:	4620      	mov	r0, r4
   27ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   27cea:	2401      	movs	r4, #1
   27cec:	e7f4      	b.n	27cd8 <regularize_k+0x42>

00027cee <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   27cee:	b530      	push	{r4, r5, lr}
   27cf0:	4614      	mov	r4, r2
   27cf2:	b095      	sub	sp, #84	; 0x54
   27cf4:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   27cf6:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   27cf8:	4623      	mov	r3, r4
{
   27cfa:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   27cfc:	a904      	add	r1, sp, #16
   27cfe:	9102      	str	r1, [sp, #8]
   27d00:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   27d02:	f7ff ffc8 	bl	27c96 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   27d06:	fab0 f380 	clz	r3, r0
   27d0a:	095b      	lsrs	r3, r3, #5
   27d0c:	aa14      	add	r2, sp, #80	; 0x50
   27d0e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   27d12:	8863      	ldrh	r3, [r4, #2]
   27d14:	9401      	str	r4, [sp, #4]
   27d16:	3301      	adds	r3, #1
   27d18:	b21b      	sxth	r3, r3
   27d1a:	9300      	str	r3, [sp, #0]
   27d1c:	f852 2c48 	ldr.w	r2, [r2, #-72]
   27d20:	2300      	movs	r3, #0
   27d22:	f104 0144 	add.w	r1, r4, #68	; 0x44
   27d26:	4628      	mov	r0, r5
   27d28:	f7ff fee8 	bl	27afc <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   27d2c:	4621      	mov	r1, r4
   27d2e:	4628      	mov	r0, r5
   27d30:	f7ff fe59 	bl	279e6 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   27d34:	fab0 f080 	clz	r0, r0
   27d38:	0940      	lsrs	r0, r0, #5
   27d3a:	b015      	add	sp, #84	; 0x54
   27d3c:	bd30      	pop	{r4, r5, pc}

00027d3e <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   27d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   27d40:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   27d42:	1e4f      	subs	r7, r1, #1
   27d44:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   27d46:	428c      	cmp	r4, r1
   27d48:	f105 0501 	add.w	r5, r5, #1
   27d4c:	db00      	blt.n	27d50 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   27d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   27d50:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   27d52:	f023 0603 	bic.w	r6, r3, #3
   27d56:	f003 0303 	and.w	r3, r3, #3
   27d5a:	5996      	ldr	r6, [r2, r6]
   27d5c:	00db      	lsls	r3, r3, #3
   27d5e:	fa26 f303 	lsr.w	r3, r6, r3
   27d62:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   27d64:	e7ee      	b.n	27d44 <uECC_vli_nativeToBytes+0x6>

00027d66 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   27d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d68:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   27d6a:	1cd1      	adds	r1, r2, #3
   27d6c:	bf48      	it	mi
   27d6e:	1d91      	addmi	r1, r2, #6
   27d70:	f341 0187 	sbfx	r1, r1, #2, #8
{
   27d74:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   27d76:	f7ff fae4 	bl	27342 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   27d7a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   27d7c:	1e67      	subs	r7, r4, #1
   27d7e:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   27d80:	42a2      	cmp	r2, r4
   27d82:	f105 0501 	add.w	r5, r5, #1
   27d86:	db00      	blt.n	27d8a <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   27d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   27d8a:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   27d8c:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   27d90:	5cb2      	ldrb	r2, [r6, r2]
   27d92:	f003 0303 	and.w	r3, r3, #3
   27d96:	00db      	lsls	r3, r3, #3
   27d98:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   27d9c:	5842      	ldr	r2, [r0, r1]
   27d9e:	431a      	orrs	r2, r3
   27da0:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   27da2:	e7ec      	b.n	27d7e <uECC_vli_bytesToNative+0x18>

00027da4 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   27da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27da6:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   27da8:	f991 6000 	ldrsb.w	r6, [r1]
{
   27dac:	4605      	mov	r5, r0
   27dae:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   27db0:	f7ff fe19 	bl	279e6 <EccPoint_isZero>
   27db4:	bb28      	cbnz	r0, 27e02 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   27db6:	1d27      	adds	r7, r4, #4
   27db8:	4632      	mov	r2, r6
   27dba:	4629      	mov	r1, r5
   27dbc:	4638      	mov	r0, r7
   27dbe:	f7ff fb0f 	bl	273e0 <uECC_vli_cmp_unsafe>
   27dc2:	2801      	cmp	r0, #1
   27dc4:	d120      	bne.n	27e08 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   27dc6:	4632      	mov	r2, r6
   27dc8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   27dcc:	4638      	mov	r0, r7
   27dce:	f7ff fb07 	bl	273e0 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   27dd2:	2801      	cmp	r0, #1
   27dd4:	d118      	bne.n	27e08 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   27dd6:	4622      	mov	r2, r4
   27dd8:	4668      	mov	r0, sp
   27dda:	f7ff fc16 	bl	2760a <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   27dde:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   27de2:	4622      	mov	r2, r4
   27de4:	4629      	mov	r1, r5
   27de6:	a808      	add	r0, sp, #32
   27de8:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   27dea:	4632      	mov	r2, r6
   27dec:	a908      	add	r1, sp, #32
   27dee:	4668      	mov	r0, sp
   27df0:	f7ff fb0b 	bl	2740a <uECC_vli_equal>
		return -3;
   27df4:	2800      	cmp	r0, #0
   27df6:	bf0c      	ite	eq
   27df8:	2000      	moveq	r0, #0
   27dfa:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   27dfe:	b011      	add	sp, #68	; 0x44
   27e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   27e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27e06:	e7fa      	b.n	27dfe <uECC_valid_point+0x5a>
		return -2;
   27e08:	f06f 0001 	mvn.w	r0, #1
   27e0c:	e7f7      	b.n	27dfe <uECC_valid_point+0x5a>

00027e0e <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   27e0e:	b570      	push	{r4, r5, r6, lr}
   27e10:	460c      	mov	r4, r1
   27e12:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   27e14:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   27e16:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   27e1a:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   27e1c:	4601      	mov	r1, r0
   27e1e:	4668      	mov	r0, sp
   27e20:	f7ff ffa1 	bl	27d66 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   27e24:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   27e28:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   27e2c:	18a9      	adds	r1, r5, r2
   27e2e:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   27e32:	f7ff ff98 	bl	27d66 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   27e36:	2210      	movs	r2, #16
   27e38:	4631      	mov	r1, r6
   27e3a:	4668      	mov	r0, sp
   27e3c:	f7ff fad0 	bl	273e0 <uECC_vli_cmp_unsafe>
   27e40:	b128      	cbz	r0, 27e4e <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   27e42:	4621      	mov	r1, r4
   27e44:	4668      	mov	r0, sp
   27e46:	f7ff ffad 	bl	27da4 <uECC_valid_point>
}
   27e4a:	b010      	add	sp, #64	; 0x40
   27e4c:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   27e4e:	f06f 0003 	mvn.w	r0, #3
   27e52:	e7fa      	b.n	27e4a <uECC_valid_public_key+0x3c>

00027e54 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27e54:	78cb      	ldrb	r3, [r1, #3]
   27e56:	7802      	ldrb	r2, [r0, #0]
   27e58:	4053      	eors	r3, r2
   27e5a:	7003      	strb	r3, [r0, #0]
   27e5c:	884b      	ldrh	r3, [r1, #2]
   27e5e:	7842      	ldrb	r2, [r0, #1]
   27e60:	4053      	eors	r3, r2
   27e62:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27e64:	680a      	ldr	r2, [r1, #0]
   27e66:	7883      	ldrb	r3, [r0, #2]
   27e68:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27e6c:	7083      	strb	r3, [r0, #2]
   27e6e:	680a      	ldr	r2, [r1, #0]
   27e70:	78c3      	ldrb	r3, [r0, #3]
   27e72:	4053      	eors	r3, r2
   27e74:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   27e76:	79cb      	ldrb	r3, [r1, #7]
   27e78:	7902      	ldrb	r2, [r0, #4]
   27e7a:	4053      	eors	r3, r2
   27e7c:	7103      	strb	r3, [r0, #4]
   27e7e:	88cb      	ldrh	r3, [r1, #6]
   27e80:	7942      	ldrb	r2, [r0, #5]
   27e82:	4053      	eors	r3, r2
   27e84:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   27e86:	684a      	ldr	r2, [r1, #4]
   27e88:	7983      	ldrb	r3, [r0, #6]
   27e8a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27e8e:	7183      	strb	r3, [r0, #6]
   27e90:	684a      	ldr	r2, [r1, #4]
   27e92:	79c3      	ldrb	r3, [r0, #7]
   27e94:	4053      	eors	r3, r2
   27e96:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   27e98:	7acb      	ldrb	r3, [r1, #11]
   27e9a:	7a02      	ldrb	r2, [r0, #8]
   27e9c:	4053      	eors	r3, r2
   27e9e:	7203      	strb	r3, [r0, #8]
   27ea0:	7a42      	ldrb	r2, [r0, #9]
   27ea2:	894b      	ldrh	r3, [r1, #10]
   27ea4:	4053      	eors	r3, r2
   27ea6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   27ea8:	688a      	ldr	r2, [r1, #8]
   27eaa:	7a83      	ldrb	r3, [r0, #10]
   27eac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27eb0:	7283      	strb	r3, [r0, #10]
   27eb2:	688a      	ldr	r2, [r1, #8]
   27eb4:	7ac3      	ldrb	r3, [r0, #11]
   27eb6:	4053      	eors	r3, r2
   27eb8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   27eba:	7bcb      	ldrb	r3, [r1, #15]
   27ebc:	7b02      	ldrb	r2, [r0, #12]
   27ebe:	4053      	eors	r3, r2
   27ec0:	7303      	strb	r3, [r0, #12]
   27ec2:	89cb      	ldrh	r3, [r1, #14]
   27ec4:	7b42      	ldrb	r2, [r0, #13]
   27ec6:	4053      	eors	r3, r2
   27ec8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   27eca:	68ca      	ldr	r2, [r1, #12]
   27ecc:	7b83      	ldrb	r3, [r0, #14]
   27ece:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27ed2:	7383      	strb	r3, [r0, #14]
   27ed4:	68ca      	ldr	r2, [r1, #12]
   27ed6:	7bc3      	ldrb	r3, [r0, #15]
   27ed8:	4053      	eors	r3, r2
   27eda:	73c3      	strb	r3, [r0, #15]
}
   27edc:	4770      	bx	lr

00027ede <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   27ede:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27ee0:	7802      	ldrb	r2, [r0, #0]
   27ee2:	f88d 2000 	strb.w	r2, [sp]
   27ee6:	7942      	ldrb	r2, [r0, #5]
   27ee8:	f88d 2001 	strb.w	r2, [sp, #1]
   27eec:	7a82      	ldrb	r2, [r0, #10]
   27eee:	f88d 2002 	strb.w	r2, [sp, #2]
   27ef2:	7bc2      	ldrb	r2, [r0, #15]
   27ef4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   27ef8:	7902      	ldrb	r2, [r0, #4]
   27efa:	f88d 2004 	strb.w	r2, [sp, #4]
   27efe:	7a42      	ldrb	r2, [r0, #9]
   27f00:	f88d 2005 	strb.w	r2, [sp, #5]
   27f04:	7b82      	ldrb	r2, [r0, #14]
   27f06:	f88d 2006 	strb.w	r2, [sp, #6]
   27f0a:	78c2      	ldrb	r2, [r0, #3]
   27f0c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   27f10:	7a02      	ldrb	r2, [r0, #8]
   27f12:	f88d 2008 	strb.w	r2, [sp, #8]
   27f16:	7b42      	ldrb	r2, [r0, #13]
   27f18:	f88d 2009 	strb.w	r2, [sp, #9]
   27f1c:	7882      	ldrb	r2, [r0, #2]
   27f1e:	f88d 200a 	strb.w	r2, [sp, #10]
   27f22:	79c2      	ldrb	r2, [r0, #7]
   27f24:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27f28:	7b02      	ldrb	r2, [r0, #12]
   27f2a:	f88d 200c 	strb.w	r2, [sp, #12]
   27f2e:	7842      	ldrb	r2, [r0, #1]
   27f30:	7ac3      	ldrb	r3, [r0, #11]
   27f32:	f88d 200d 	strb.w	r2, [sp, #13]
   27f36:	7982      	ldrb	r2, [r0, #6]
   27f38:	f88d 200e 	strb.w	r2, [sp, #14]
   27f3c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27f40:	2310      	movs	r3, #16
   27f42:	466a      	mov	r2, sp
   27f44:	4619      	mov	r1, r3
   27f46:	f7ff f891 	bl	2706c <_copy>
}
   27f4a:	b005      	add	sp, #20
   27f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00027f50 <mult_row_column>:
{
   27f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f52:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27f54:	7808      	ldrb	r0, [r1, #0]
{
   27f56:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27f58:	f7ff f897 	bl	2708a <_double_byte>
   27f5c:	4605      	mov	r5, r0
   27f5e:	7860      	ldrb	r0, [r4, #1]
   27f60:	f7ff f893 	bl	2708a <_double_byte>
   27f64:	78a2      	ldrb	r2, [r4, #2]
   27f66:	7863      	ldrb	r3, [r4, #1]
   27f68:	4053      	eors	r3, r2
   27f6a:	78e2      	ldrb	r2, [r4, #3]
   27f6c:	4053      	eors	r3, r2
   27f6e:	405d      	eors	r5, r3
   27f70:	4045      	eors	r5, r0
   27f72:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27f74:	7860      	ldrb	r0, [r4, #1]
   27f76:	7827      	ldrb	r7, [r4, #0]
   27f78:	f7ff f887 	bl	2708a <_double_byte>
   27f7c:	4605      	mov	r5, r0
   27f7e:	78a0      	ldrb	r0, [r4, #2]
   27f80:	f7ff f883 	bl	2708a <_double_byte>
   27f84:	78a3      	ldrb	r3, [r4, #2]
   27f86:	405f      	eors	r7, r3
   27f88:	78e3      	ldrb	r3, [r4, #3]
   27f8a:	405f      	eors	r7, r3
   27f8c:	407d      	eors	r5, r7
   27f8e:	4045      	eors	r5, r0
   27f90:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27f92:	78a0      	ldrb	r0, [r4, #2]
   27f94:	7865      	ldrb	r5, [r4, #1]
   27f96:	7827      	ldrb	r7, [r4, #0]
   27f98:	f7ff f877 	bl	2708a <_double_byte>
   27f9c:	406f      	eors	r7, r5
   27f9e:	4605      	mov	r5, r0
   27fa0:	78e0      	ldrb	r0, [r4, #3]
   27fa2:	f7ff f872 	bl	2708a <_double_byte>
   27fa6:	78e3      	ldrb	r3, [r4, #3]
   27fa8:	405f      	eors	r7, r3
   27faa:	407d      	eors	r5, r7
   27fac:	4045      	eors	r5, r0
   27fae:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27fb0:	7820      	ldrb	r0, [r4, #0]
   27fb2:	f7ff f86a 	bl	2708a <_double_byte>
   27fb6:	7863      	ldrb	r3, [r4, #1]
   27fb8:	7825      	ldrb	r5, [r4, #0]
   27fba:	405d      	eors	r5, r3
   27fbc:	78a3      	ldrb	r3, [r4, #2]
   27fbe:	405d      	eors	r5, r3
   27fc0:	4045      	eors	r5, r0
   27fc2:	78e0      	ldrb	r0, [r4, #3]
   27fc4:	f7ff f861 	bl	2708a <_double_byte>
   27fc8:	b2ed      	uxtb	r5, r5
   27fca:	4045      	eors	r5, r0
   27fcc:	70f5      	strb	r5, [r6, #3]
}
   27fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027fd0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   27fd0:	b570      	push	{r4, r5, r6, lr}
   27fd2:	4614      	mov	r4, r2
   27fd4:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   27fd6:	4605      	mov	r5, r0
   27fd8:	2800      	cmp	r0, #0
   27fda:	d049      	beq.n	28070 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   27fdc:	2900      	cmp	r1, #0
   27fde:	d049      	beq.n	28074 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   27fe0:	2a00      	cmp	r2, #0
   27fe2:	d049      	beq.n	28078 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   27fe4:	2310      	movs	r3, #16
   27fe6:	460a      	mov	r2, r1
   27fe8:	4668      	mov	r0, sp
   27fea:	4619      	mov	r1, r3
   27fec:	f7ff f83e 	bl	2706c <_copy>
	add_round_key(state, s->words);
   27ff0:	4621      	mov	r1, r4
   27ff2:	4668      	mov	r0, sp
   27ff4:	f7ff ff2e 	bl	27e54 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   27ff8:	3410      	adds	r4, #16
   27ffa:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   27ffe:	4668      	mov	r0, sp
   28000:	f7e2 f992 	bl	a328 <sub_bytes>
		shift_rows(state);
   28004:	4668      	mov	r0, sp
   28006:	f7ff ff6a 	bl	27ede <shift_rows>
	mult_row_column(t, s);
   2800a:	4669      	mov	r1, sp
   2800c:	a804      	add	r0, sp, #16
   2800e:	f7ff ff9f 	bl	27f50 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   28012:	a901      	add	r1, sp, #4
   28014:	a805      	add	r0, sp, #20
   28016:	f7ff ff9b 	bl	27f50 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2801a:	a902      	add	r1, sp, #8
   2801c:	a806      	add	r0, sp, #24
   2801e:	f7ff ff97 	bl	27f50 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   28022:	a903      	add	r1, sp, #12
   28024:	a807      	add	r0, sp, #28
   28026:	f7ff ff93 	bl	27f50 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2802a:	2310      	movs	r3, #16
   2802c:	4619      	mov	r1, r3
   2802e:	eb0d 0203 	add.w	r2, sp, r3
   28032:	4668      	mov	r0, sp
   28034:	f7ff f81a 	bl	2706c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   28038:	4621      	mov	r1, r4
   2803a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2803c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2803e:	f7ff ff09 	bl	27e54 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   28042:	42a6      	cmp	r6, r4
   28044:	d1db      	bne.n	27ffe <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   28046:	f7e2 f96f 	bl	a328 <sub_bytes>
	shift_rows(state);
   2804a:	4668      	mov	r0, sp
   2804c:	f7ff ff47 	bl	27ede <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   28050:	4631      	mov	r1, r6
   28052:	4668      	mov	r0, sp
   28054:	f7ff fefe 	bl	27e54 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   28058:	2310      	movs	r3, #16
   2805a:	4619      	mov	r1, r3
   2805c:	466a      	mov	r2, sp
   2805e:	4628      	mov	r0, r5
   28060:	f7ff f804 	bl	2706c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   28064:	4668      	mov	r0, sp
   28066:	2210      	movs	r2, #16
   28068:	2100      	movs	r1, #0
   2806a:	f7ff f80c 	bl	27086 <_set>

	return TC_CRYPTO_SUCCESS;
   2806e:	2001      	movs	r0, #1
}
   28070:	b008      	add	sp, #32
   28072:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28074:	4608      	mov	r0, r1
   28076:	e7fb      	b.n	28070 <tc_aes_encrypt+0xa0>
   28078:	4610      	mov	r0, r2
   2807a:	e7f9      	b.n	28070 <tc_aes_encrypt+0xa0>

0002807c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2807c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2807e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   28080:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28082:	f912 3b10 	ldrsb.w	r3, [r2], #16
   28086:	2b00      	cmp	r3, #0
   28088:	bfb4      	ite	lt
   2808a:	2387      	movlt	r3, #135	; 0x87
   2808c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2808e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28092:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   28096:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   28098:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2809c:	d002      	beq.n	280a4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2809e:	7813      	ldrb	r3, [r2, #0]
   280a0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   280a2:	e7f4      	b.n	2808e <gf_double+0x12>
	}
}
   280a4:	bd10      	pop	{r4, pc}

000280a6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   280a6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   280a8:	b120      	cbz	r0, 280b4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   280aa:	2258      	movs	r2, #88	; 0x58
   280ac:	2100      	movs	r1, #0
   280ae:	f7fe ffea 	bl	27086 <_set>
   280b2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   280b4:	bd08      	pop	{r3, pc}

000280b6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   280b6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   280b8:	4604      	mov	r4, r0
   280ba:	b188      	cbz	r0, 280e0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   280bc:	2210      	movs	r2, #16
   280be:	2100      	movs	r1, #0
   280c0:	f7fe ffe1 	bl	27086 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   280c4:	2210      	movs	r2, #16
   280c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   280ca:	2100      	movs	r1, #0
   280cc:	f7fe ffdb 	bl	27086 <_set>
	s->leftover_offset = 0;
   280d0:	2300      	movs	r3, #0
   280d2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   280d4:	2200      	movs	r2, #0
   280d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   280da:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   280de:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   280e0:	bd10      	pop	{r4, pc}

000280e2 <tc_cmac_setup>:
{
   280e2:	b570      	push	{r4, r5, r6, lr}
   280e4:	460d      	mov	r5, r1
   280e6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   280e8:	4604      	mov	r4, r0
   280ea:	b310      	cbz	r0, 28132 <tc_cmac_setup+0x50>
   280ec:	b311      	cbz	r1, 28134 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   280ee:	2258      	movs	r2, #88	; 0x58
   280f0:	2100      	movs	r1, #0
   280f2:	f7fe ffc8 	bl	27086 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   280f6:	4629      	mov	r1, r5
	s->sched = sched;
   280f8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   280fa:	4630      	mov	r0, r6
   280fc:	f7e2 f920 	bl	a340 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28100:	2210      	movs	r2, #16
   28102:	2100      	movs	r1, #0
   28104:	4620      	mov	r0, r4
   28106:	f7fe ffbe 	bl	27086 <_set>
	gf_double (s->K1, s->iv);
   2810a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2810e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28110:	4621      	mov	r1, r4
   28112:	4620      	mov	r0, r4
   28114:	f7ff ff5c 	bl	27fd0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   28118:	4621      	mov	r1, r4
   2811a:	4628      	mov	r0, r5
   2811c:	f7ff ffae 	bl	2807c <gf_double>
	gf_double (s->K2, s->K1);
   28120:	4629      	mov	r1, r5
   28122:	f104 0020 	add.w	r0, r4, #32
   28126:	f7ff ffa9 	bl	2807c <gf_double>
	tc_cmac_init(s);
   2812a:	4620      	mov	r0, r4
   2812c:	f7ff ffc3 	bl	280b6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   28130:	2001      	movs	r0, #1
}
   28132:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28134:	4608      	mov	r0, r1
   28136:	e7fc      	b.n	28132 <tc_cmac_setup+0x50>

00028138 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   28138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2813c:	460d      	mov	r5, r1
   2813e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28140:	4604      	mov	r4, r0
   28142:	2800      	cmp	r0, #0
   28144:	d061      	beq.n	2820a <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   28146:	b912      	cbnz	r2, 2814e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   28148:	2001      	movs	r0, #1
}
   2814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2814e:	2900      	cmp	r1, #0
   28150:	d05b      	beq.n	2820a <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   28152:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   28156:	ea53 0102 	orrs.w	r1, r3, r2
   2815a:	d056      	beq.n	2820a <tc_cmac_update+0xd2>
	s->countdown--;
   2815c:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2815e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   28162:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   28166:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2816a:	f1b8 0f00 	cmp.w	r8, #0
   2816e:	d02a      	beq.n	281c6 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   28170:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28174:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   28178:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2817a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2817c:	d208      	bcs.n	28190 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2817e:	462a      	mov	r2, r5
   28180:	4633      	mov	r3, r6
   28182:	4631      	mov	r1, r6
   28184:	f7fe ff72 	bl	2706c <_copy>
			s->leftover_offset += data_length;
   28188:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2818a:	4432      	add	r2, r6
   2818c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2818e:	e7db      	b.n	28148 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   28190:	463b      	mov	r3, r7
   28192:	462a      	mov	r2, r5
   28194:	4639      	mov	r1, r7
   28196:	f7fe ff69 	bl	2706c <_copy>
		data_length -= remaining_space;
   2819a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2819c:	2300      	movs	r3, #0
   2819e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   281a0:	4446      	add	r6, r8
		data += remaining_space;
   281a2:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281a4:	1e63      	subs	r3, r4, #1
   281a6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   281aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   281ae:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281b2:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   281b4:	ea82 0200 	eor.w	r2, r2, r0
   281b8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281ba:	d1f6      	bne.n	281aa <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   281bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   281be:	4621      	mov	r1, r4
   281c0:	4620      	mov	r0, r4
   281c2:	f7ff ff05 	bl	27fd0 <tc_aes_encrypt>
   281c6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   281ca:	2e10      	cmp	r6, #16
   281cc:	d80a      	bhi.n	281e4 <tc_cmac_update+0xac>
	if (data_length > 0) {
   281ce:	2e00      	cmp	r6, #0
   281d0:	d0ba      	beq.n	28148 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   281d2:	4633      	mov	r3, r6
   281d4:	462a      	mov	r2, r5
   281d6:	4631      	mov	r1, r6
   281d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   281dc:	f7fe ff46 	bl	2706c <_copy>
		s->leftover_offset = data_length;
   281e0:	6466      	str	r6, [r4, #68]	; 0x44
   281e2:	e7b1      	b.n	28148 <tc_cmac_update+0x10>
   281e4:	1e63      	subs	r3, r4, #1
   281e6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   281e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   281ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281f0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   281f2:	ea82 0200 	eor.w	r2, r2, r0
   281f6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281f8:	d1f6      	bne.n	281e8 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   281fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   281fc:	4621      	mov	r1, r4
   281fe:	4620      	mov	r0, r4
   28200:	f7ff fee6 	bl	27fd0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   28204:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   28206:	3e10      	subs	r6, #16
   28208:	e7df      	b.n	281ca <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   2820a:	2000      	movs	r0, #0
   2820c:	e79d      	b.n	2814a <tc_cmac_update+0x12>

0002820e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2820e:	b570      	push	{r4, r5, r6, lr}
   28210:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   28212:	4605      	mov	r5, r0
   28214:	b1e8      	cbz	r0, 28252 <tc_cmac_final+0x44>
   28216:	b369      	cbz	r1, 28274 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   28218:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2821a:	2a10      	cmp	r2, #16
   2821c:	d11a      	bne.n	28254 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2821e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28220:	1e63      	subs	r3, r4, #1
   28222:	3901      	subs	r1, #1
   28224:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28228:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2822c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   28230:	4072      	eors	r2, r6
   28232:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28236:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28238:	ea82 0206 	eor.w	r2, r2, r6
   2823c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2823e:	d1f3      	bne.n	28228 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   28240:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28242:	4621      	mov	r1, r4
   28244:	4628      	mov	r0, r5
   28246:	f7ff fec3 	bl	27fd0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2824a:	4620      	mov	r0, r4
   2824c:	f7ff ff2b 	bl	280a6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   28250:	2001      	movs	r0, #1
}
   28252:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   28254:	f102 0030 	add.w	r0, r2, #48	; 0x30
   28258:	2100      	movs	r1, #0
   2825a:	f1c2 0210 	rsb	r2, r2, #16
   2825e:	4420      	add	r0, r4
   28260:	f7fe ff11 	bl	27086 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   28264:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28266:	4423      	add	r3, r4
   28268:	2280      	movs	r2, #128	; 0x80
   2826a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2826e:	f104 0120 	add.w	r1, r4, #32
   28272:	e7d5      	b.n	28220 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   28274:	4608      	mov	r0, r1
   28276:	e7ec      	b.n	28252 <tc_cmac_final+0x44>

00028278 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   28278:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2827a:	6800      	ldr	r0, [r0, #0]
   2827c:	f7e2 b8d0 	b.w	a420 <z_arm_fatal_error>

00028280 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28280:	2100      	movs	r1, #0
   28282:	2001      	movs	r0, #1
   28284:	f7e2 b8cc 	b.w	a420 <z_arm_fatal_error>

00028288 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   28288:	b508      	push	{r3, lr}
	handler();
   2828a:	f7e2 f98f 	bl	a5ac <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2828e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   28292:	f7e2 ba75 	b.w	a780 <z_arm_exc_exit>

00028296 <z_log_msg2_static_create.constprop.0>:
   28296:	2300      	movs	r3, #0
   28298:	f7fd bca2 	b.w	25be0 <z_impl_z_log_msg2_static_create>

0002829c <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   2829c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   282a0:	4684      	mov	ip, r0
   282a2:	4688      	mov	r8, r1
	register const char *s = nptr;
   282a4:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   282a6:	4621      	mov	r1, r4
   282a8:	f814 3b01 	ldrb.w	r3, [r4], #1
   282ac:	2b20      	cmp	r3, #32
   282ae:	d0fa      	beq.n	282a6 <strtol+0xa>
   282b0:	f1a3 0009 	sub.w	r0, r3, #9
   282b4:	2804      	cmp	r0, #4
   282b6:	d9f6      	bls.n	282a6 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   282b8:	2b2d      	cmp	r3, #45	; 0x2d
   282ba:	d12d      	bne.n	28318 <strtol+0x7c>
		neg = 1;
		c = *s++;
   282bc:	784b      	ldrb	r3, [r1, #1]
   282be:	1c8c      	adds	r4, r1, #2
		neg = 1;
   282c0:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   282c2:	2a00      	cmp	r2, #0
   282c4:	d05a      	beq.n	2837c <strtol+0xe0>
   282c6:	2a10      	cmp	r2, #16
   282c8:	d109      	bne.n	282de <strtol+0x42>
   282ca:	2b30      	cmp	r3, #48	; 0x30
   282cc:	d107      	bne.n	282de <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   282ce:	7823      	ldrb	r3, [r4, #0]
   282d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   282d4:	2b58      	cmp	r3, #88	; 0x58
   282d6:	d14c      	bne.n	28372 <strtol+0xd6>
		c = s[1];
   282d8:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   282da:	2210      	movs	r2, #16
		s += 2;
   282dc:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   282de:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   282e2:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   282e4:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   282e6:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   282ea:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   282ec:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   282f0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   282f4:	2d09      	cmp	r5, #9
   282f6:	d815      	bhi.n	28324 <strtol+0x88>
			c -= '0';
   282f8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   282fa:	429a      	cmp	r2, r3
   282fc:	dd22      	ble.n	28344 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   282fe:	1c75      	adds	r5, r6, #1
   28300:	d007      	beq.n	28312 <strtol+0x76>
   28302:	4570      	cmp	r0, lr
   28304:	d81b      	bhi.n	2833e <strtol+0xa2>
   28306:	d101      	bne.n	2830c <strtol+0x70>
   28308:	454b      	cmp	r3, r9
   2830a:	dc18      	bgt.n	2833e <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2830c:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   28310:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   28312:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   28316:	e7eb      	b.n	282f0 <strtol+0x54>
	} else if (c == '+') {
   28318:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2831a:	bf04      	itt	eq
   2831c:	784b      	ldrbeq	r3, [r1, #1]
   2831e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   28320:	2100      	movs	r1, #0
   28322:	e7ce      	b.n	282c2 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   28324:	f043 0520 	orr.w	r5, r3, #32
   28328:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2832a:	2d19      	cmp	r5, #25
   2832c:	d80a      	bhi.n	28344 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2832e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   28332:	2d1a      	cmp	r5, #26
   28334:	bf34      	ite	cc
   28336:	2537      	movcc	r5, #55	; 0x37
   28338:	2557      	movcs	r5, #87	; 0x57
   2833a:	1b5b      	subs	r3, r3, r5
   2833c:	e7dd      	b.n	282fa <strtol+0x5e>
			any = -1;
   2833e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28342:	e7e6      	b.n	28312 <strtol+0x76>
		}
	}

	if (any < 0) {
   28344:	1c73      	adds	r3, r6, #1
   28346:	d109      	bne.n	2835c <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   28348:	f7fa ff74 	bl	23234 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2834c:	2322      	movs	r3, #34	; 0x22
   2834e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   28350:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   28352:	f1b8 0f00 	cmp.w	r8, #0
   28356:	d107      	bne.n	28368 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   28358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   2835c:	b101      	cbz	r1, 28360 <strtol+0xc4>
		acc = -acc;
   2835e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   28360:	f1b8 0f00 	cmp.w	r8, #0
   28364:	d0f8      	beq.n	28358 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   28366:	b10e      	cbz	r6, 2836c <strtol+0xd0>
   28368:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   2836c:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   28370:	e7f2      	b.n	28358 <strtol+0xbc>
	if (base == 0) {
   28372:	2330      	movs	r3, #48	; 0x30
   28374:	2a00      	cmp	r2, #0
   28376:	d1b2      	bne.n	282de <strtol+0x42>
		base = c == '0' ? 8 : 10;
   28378:	2208      	movs	r2, #8
   2837a:	e7b0      	b.n	282de <strtol+0x42>
	if ((base == 0 || base == 16) &&
   2837c:	2b30      	cmp	r3, #48	; 0x30
   2837e:	d0a6      	beq.n	282ce <strtol+0x32>
		base = c == '0' ? 8 : 10;
   28380:	220a      	movs	r2, #10
   28382:	e7ac      	b.n	282de <strtol+0x42>

00028384 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   28384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28388:	4607      	mov	r7, r0
   2838a:	4688      	mov	r8, r1
	register const char *s = nptr;
   2838c:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2838e:	4621      	mov	r1, r4
   28390:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   28394:	2b20      	cmp	r3, #32
   28396:	d0fa      	beq.n	2838e <strtoul+0xa>
   28398:	f1a3 0009 	sub.w	r0, r3, #9
   2839c:	2804      	cmp	r0, #4
   2839e:	d9f6      	bls.n	2838e <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   283a0:	2b2d      	cmp	r3, #45	; 0x2d
   283a2:	d12f      	bne.n	28404 <strtoul+0x80>
		neg = 1;
		c = *s++;
   283a4:	784b      	ldrb	r3, [r1, #1]
   283a6:	1c8c      	adds	r4, r1, #2
		neg = 1;
   283a8:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   283ac:	2a00      	cmp	r2, #0
   283ae:	d05e      	beq.n	2846e <strtoul+0xea>
   283b0:	2a10      	cmp	r2, #16
   283b2:	d109      	bne.n	283c8 <strtoul+0x44>
   283b4:	2b30      	cmp	r3, #48	; 0x30
   283b6:	d107      	bne.n	283c8 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   283b8:	7823      	ldrb	r3, [r4, #0]
   283ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   283be:	2b58      	cmp	r3, #88	; 0x58
   283c0:	d150      	bne.n	28464 <strtoul+0xe0>
		c = s[1];
   283c2:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   283c4:	2210      	movs	r2, #16
		s += 2;
   283c6:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   283c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   283cc:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   283ce:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   283d2:	fb02 fe01 	mul.w	lr, r2, r1
   283d6:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   283da:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   283dc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   283e0:	2d09      	cmp	r5, #9
   283e2:	d816      	bhi.n	28412 <strtoul+0x8e>
			c -= '0';
   283e4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   283e6:	429a      	cmp	r2, r3
   283e8:	dd23      	ble.n	28432 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   283ea:	2e00      	cmp	r6, #0
   283ec:	db1e      	blt.n	2842c <strtoul+0xa8>
   283ee:	4288      	cmp	r0, r1
   283f0:	d81c      	bhi.n	2842c <strtoul+0xa8>
   283f2:	d101      	bne.n	283f8 <strtoul+0x74>
   283f4:	4573      	cmp	r3, lr
   283f6:	dc19      	bgt.n	2842c <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   283f8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   283fc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   283fe:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   28402:	e7eb      	b.n	283dc <strtoul+0x58>
	} else if (c == '+') {
   28404:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   28406:	bf04      	itt	eq
   28408:	784b      	ldrbeq	r3, [r1, #1]
   2840a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2840c:	f04f 0c00 	mov.w	ip, #0
   28410:	e7cc      	b.n	283ac <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   28412:	f043 0520 	orr.w	r5, r3, #32
   28416:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   28418:	2d19      	cmp	r5, #25
   2841a:	d80a      	bhi.n	28432 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2841c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   28420:	2d1a      	cmp	r5, #26
   28422:	bf34      	ite	cc
   28424:	2537      	movcc	r5, #55	; 0x37
   28426:	2557      	movcs	r5, #87	; 0x57
   28428:	1b5b      	subs	r3, r3, r5
   2842a:	e7dc      	b.n	283e6 <strtoul+0x62>
			any = -1;
   2842c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28430:	e7e5      	b.n	283fe <strtoul+0x7a>
		}
	}
	if (any < 0) {
   28432:	2e00      	cmp	r6, #0
   28434:	da0a      	bge.n	2844c <strtoul+0xc8>
   28436:	f7fa fefd 	bl	23234 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2843a:	2322      	movs	r3, #34	; 0x22
   2843c:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2843e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   28442:	f1b8 0f00 	cmp.w	r8, #0
   28446:	d109      	bne.n	2845c <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   28448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2844c:	f1bc 0f00 	cmp.w	ip, #0
   28450:	d000      	beq.n	28454 <strtoul+0xd0>
		acc = -acc;
   28452:	4240      	negs	r0, r0
	if (endptr != NULL) {
   28454:	f1b8 0f00 	cmp.w	r8, #0
   28458:	d0f6      	beq.n	28448 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   2845a:	b106      	cbz	r6, 2845e <strtoul+0xda>
   2845c:	1e67      	subs	r7, r4, #1
   2845e:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   28462:	e7f1      	b.n	28448 <strtoul+0xc4>
	if (base == 0) {
   28464:	2330      	movs	r3, #48	; 0x30
   28466:	2a00      	cmp	r2, #0
   28468:	d1ae      	bne.n	283c8 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   2846a:	2208      	movs	r2, #8
   2846c:	e7ac      	b.n	283c8 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   2846e:	2b30      	cmp	r3, #48	; 0x30
   28470:	d0a2      	beq.n	283b8 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   28472:	220a      	movs	r2, #10
   28474:	e7a8      	b.n	283c8 <strtoul+0x44>

00028476 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   28476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   2847a:	f891 8000 	ldrb.w	r8, [r1]
{
   2847e:	4605      	mov	r5, r0
	if (c != 0) {
   28480:	f1b8 0f00 	cmp.w	r8, #0
   28484:	d010      	beq.n	284a8 <strstr+0x32>
	c = *find++;
   28486:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   28488:	4620      	mov	r0, r4
   2848a:	f000 f83e 	bl	2850a <strlen>
   2848e:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   28490:	462e      	mov	r6, r5
   28492:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   28496:	b163      	cbz	r3, 284b2 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   28498:	4598      	cmp	r8, r3
   2849a:	d108      	bne.n	284ae <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   2849c:	463a      	mov	r2, r7
   2849e:	4621      	mov	r1, r4
   284a0:	4630      	mov	r0, r6
   284a2:	f000 f84e 	bl	28542 <strncmp>
   284a6:	b910      	cbnz	r0, 284ae <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   284a8:	4628      	mov	r0, r5
   284aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   284ae:	4635      	mov	r5, r6
   284b0:	e7ee      	b.n	28490 <strstr+0x1a>
					return NULL;
   284b2:	461d      	mov	r5, r3
   284b4:	e7f8      	b.n	284a8 <strstr+0x32>

000284b6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   284b6:	3901      	subs	r1, #1
   284b8:	4603      	mov	r3, r0
   284ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   284be:	b90a      	cbnz	r2, 284c4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   284c0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   284c2:	4770      	bx	lr
		*d = *s;
   284c4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   284c8:	e7f7      	b.n	284ba <strcpy+0x4>

000284ca <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   284ca:	b570      	push	{r4, r5, r6, lr}
   284cc:	4605      	mov	r5, r0
   284ce:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   284d0:	b142      	cbz	r2, 284e4 <strncpy+0x1a>
   284d2:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   284d6:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   284d8:	b92c      	cbnz	r4, 284e6 <strncpy+0x1c>
   284da:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   284dc:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   284e0:	429a      	cmp	r2, r3
   284e2:	d1fb      	bne.n	284dc <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   284e4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   284e6:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   284ea:	4632      	mov	r2, r6
   284ec:	e7ef      	b.n	284ce <strncpy+0x4>

000284ee <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   284ee:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   284f0:	4603      	mov	r3, r0
   284f2:	781a      	ldrb	r2, [r3, #0]
   284f4:	428a      	cmp	r2, r1
   284f6:	4618      	mov	r0, r3
   284f8:	f103 0301 	add.w	r3, r3, #1
   284fc:	d004      	beq.n	28508 <strchr+0x1a>
   284fe:	2a00      	cmp	r2, #0
   28500:	d1f7      	bne.n	284f2 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   28502:	2900      	cmp	r1, #0
   28504:	bf18      	it	ne
   28506:	2000      	movne	r0, #0
}
   28508:	4770      	bx	lr

0002850a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2850a:	4603      	mov	r3, r0
	size_t n = 0;
   2850c:	2000      	movs	r0, #0

	while (*s != '\0') {
   2850e:	5c1a      	ldrb	r2, [r3, r0]
   28510:	b902      	cbnz	r2, 28514 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   28512:	4770      	bx	lr
		n++;
   28514:	3001      	adds	r0, #1
   28516:	e7fa      	b.n	2850e <strlen+0x4>

00028518 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   28518:	4603      	mov	r3, r0
	size_t n = 0;
   2851a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2851c:	5c1a      	ldrb	r2, [r3, r0]
   2851e:	b10a      	cbz	r2, 28524 <strnlen+0xc>
   28520:	4288      	cmp	r0, r1
   28522:	d100      	bne.n	28526 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   28524:	4770      	bx	lr
		n++;
   28526:	3001      	adds	r0, #1
   28528:	e7f8      	b.n	2851c <strnlen+0x4>

0002852a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2852a:	1e43      	subs	r3, r0, #1
   2852c:	3901      	subs	r1, #1
   2852e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28532:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   28536:	4282      	cmp	r2, r0
   28538:	d101      	bne.n	2853e <strcmp+0x14>
   2853a:	2a00      	cmp	r2, #0
   2853c:	d1f7      	bne.n	2852e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2853e:	1a10      	subs	r0, r2, r0
   28540:	4770      	bx	lr

00028542 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   28542:	b510      	push	{r4, lr}
   28544:	3901      	subs	r1, #1
   28546:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   28548:	4282      	cmp	r2, r0
   2854a:	d009      	beq.n	28560 <strncmp+0x1e>
   2854c:	7803      	ldrb	r3, [r0, #0]
   2854e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   28552:	42a3      	cmp	r3, r4
   28554:	d100      	bne.n	28558 <strncmp+0x16>
   28556:	b90b      	cbnz	r3, 2855c <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   28558:	1b18      	subs	r0, r3, r4
   2855a:	e002      	b.n	28562 <strncmp+0x20>
		s1++;
   2855c:	3001      	adds	r0, #1
		n--;
   2855e:	e7f3      	b.n	28548 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   28560:	2000      	movs	r0, #0
}
   28562:	bd10      	pop	{r4, pc}

00028564 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   28564:	b510      	push	{r4, lr}
   28566:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   28568:	b15a      	cbz	r2, 28582 <memcmp+0x1e>
   2856a:	3901      	subs	r1, #1
   2856c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2856e:	f813 0b01 	ldrb.w	r0, [r3], #1
   28572:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   28576:	42a3      	cmp	r3, r4
   28578:	d001      	beq.n	2857e <memcmp+0x1a>
   2857a:	4290      	cmp	r0, r2
   2857c:	d0f7      	beq.n	2856e <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2857e:	1a80      	subs	r0, r0, r2
}
   28580:	bd10      	pop	{r4, pc}
		return 0;
   28582:	4610      	mov	r0, r2
   28584:	e7fc      	b.n	28580 <memcmp+0x1c>

00028586 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   28586:	1a43      	subs	r3, r0, r1
   28588:	4293      	cmp	r3, r2
{
   2858a:	b510      	push	{r4, lr}
   2858c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   28590:	d308      	bcc.n	285a4 <memmove+0x1e>
   28592:	3901      	subs	r1, #1
	char *dest = d;
   28594:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   28596:	429a      	cmp	r2, r3
   28598:	d007      	beq.n	285aa <memmove+0x24>
			*dest = *src;
   2859a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2859e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   285a2:	e7f8      	b.n	28596 <memmove+0x10>
   285a4:	440a      	add	r2, r1
		while (n > 0) {
   285a6:	428a      	cmp	r2, r1
   285a8:	d100      	bne.n	285ac <memmove+0x26>
		}
	}

	return d;
}
   285aa:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   285ac:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   285b0:	f803 4d01 	strb.w	r4, [r3, #-1]!
   285b4:	e7f7      	b.n	285a6 <memmove+0x20>

000285b6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   285b6:	b510      	push	{r4, lr}
   285b8:	1e43      	subs	r3, r0, #1
   285ba:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   285bc:	4291      	cmp	r1, r2
   285be:	d100      	bne.n	285c2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   285c0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   285c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   285c6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   285ca:	e7f7      	b.n	285bc <memcpy+0x6>

000285cc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   285cc:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   285ce:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   285d0:	4603      	mov	r3, r0
	while (n > 0) {
   285d2:	4293      	cmp	r3, r2
   285d4:	d100      	bne.n	285d8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   285d6:	4770      	bx	lr
		*(d_byte++) = c_byte;
   285d8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   285dc:	e7f9      	b.n	285d2 <memset+0x6>

000285de <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   285de:	684b      	ldr	r3, [r1, #4]
   285e0:	2b01      	cmp	r3, #1
   285e2:	dd07      	ble.n	285f4 <sprintf_out+0x16>
		*(p->ptr) = c;
   285e4:	680b      	ldr	r3, [r1, #0]
   285e6:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   285e8:	680b      	ldr	r3, [r1, #0]
   285ea:	3301      	adds	r3, #1
   285ec:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   285ee:	684b      	ldr	r3, [r1, #4]
   285f0:	3b01      	subs	r3, #1
   285f2:	604b      	str	r3, [r1, #4]
}
   285f4:	2000      	movs	r0, #0
   285f6:	4770      	bx	lr

000285f8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   285f8:	b084      	sub	sp, #16
   285fa:	ab04      	add	r3, sp, #16
   285fc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   28600:	f89d 3004 	ldrb.w	r3, [sp, #4]
   28604:	2b06      	cmp	r3, #6
   28606:	d108      	bne.n	2861a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   28608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2860c:	2201      	movs	r2, #1
   2860e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   28612:	f3bf 8f4f 	dsb	sy
        __WFE();
   28616:	bf20      	wfe
    while (true)
   28618:	e7fd      	b.n	28616 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2861a:	b004      	add	sp, #16
   2861c:	4770      	bx	lr

0002861e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2861e:	b084      	sub	sp, #16
   28620:	ab04      	add	r3, sp, #16
   28622:	e903 0007 	stmdb	r3, {r0, r1, r2}
   28626:	2300      	movs	r3, #0
   28628:	f383 8811 	msr	BASEPRI, r3
   2862c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   28630:	b004      	add	sp, #16
   28632:	4770      	bx	lr

00028634 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   28634:	b530      	push	{r4, r5, lr}
   28636:	b085      	sub	sp, #20
   28638:	4604      	mov	r4, r0
   2863a:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2863c:	4668      	mov	r0, sp
   2863e:	2203      	movs	r2, #3
   28640:	f7ff ffb9 	bl	285b6 <memcpy>
	(void)memset(res + 3, 0, 13);
   28644:	220d      	movs	r2, #13
   28646:	2100      	movs	r1, #0
   28648:	f10d 0003 	add.w	r0, sp, #3
   2864c:	f7ff ffbe 	bl	285cc <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   28650:	4620      	mov	r0, r4
   28652:	466a      	mov	r2, sp
   28654:	4669      	mov	r1, sp
   28656:	f7ee f8cf 	bl	167f8 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2865a:	4604      	mov	r4, r0
   2865c:	b920      	cbnz	r0, 28668 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2865e:	2203      	movs	r2, #3
   28660:	4669      	mov	r1, sp
   28662:	4628      	mov	r0, r5
   28664:	f7ff ffa7 	bl	285b6 <memcpy>

	return 0;
}
   28668:	4620      	mov	r0, r4
   2866a:	b005      	add	sp, #20
   2866c:	bd30      	pop	{r4, r5, pc}

0002866e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2866e:	b513      	push	{r0, r1, r4, lr}
   28670:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   28672:	aa01      	add	r2, sp, #4
   28674:	3103      	adds	r1, #3
   28676:	f7ff ffdd 	bl	28634 <ah>
	if (err) {
   2867a:	b948      	cbnz	r0, 28690 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2867c:	2203      	movs	r2, #3
   2867e:	a901      	add	r1, sp, #4
   28680:	4620      	mov	r0, r4
   28682:	f7ff ff6f 	bl	28564 <memcmp>
   28686:	fab0 f080 	clz	r0, r0
   2868a:	0940      	lsrs	r0, r0, #5
}
   2868c:	b002      	add	sp, #8
   2868e:	bd10      	pop	{r4, pc}
		return false;
   28690:	2000      	movs	r0, #0
   28692:	e7fb      	b.n	2868c <bt_rpa_irk_matches+0x1e>

00028694 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   28694:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   28696:	1cce      	adds	r6, r1, #3
{
   28698:	4605      	mov	r5, r0
   2869a:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2869c:	4630      	mov	r0, r6
   2869e:	2103      	movs	r1, #3
   286a0:	f7ee f8a8 	bl	167f4 <bt_rand>
	if (err) {
   286a4:	b960      	cbnz	r0, 286c0 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   286a6:	7963      	ldrb	r3, [r4, #5]
   286a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   286ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   286b0:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   286b2:	4622      	mov	r2, r4
   286b4:	4631      	mov	r1, r6
   286b6:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   286b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   286bc:	f7ff bfba 	b.w	28634 <ah>
}
   286c0:	bd70      	pop	{r4, r5, r6, pc}

000286c2 <send_cmd_status>:
{
   286c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   286c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   286ca:	4606      	mov	r6, r0
   286cc:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   286ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   286d2:	2100      	movs	r1, #0
   286d4:	200f      	movs	r0, #15
   286d6:	f7e2 fff9 	bl	b6cc <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   286da:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   286dc:	f100 0808 	add.w	r8, r0, #8
   286e0:	4604      	mov	r4, r0
   286e2:	7507      	strb	r7, [r0, #20]
   286e4:	2102      	movs	r1, #2
   286e6:	4640      	mov	r0, r8
   286e8:	f002 f97f 	bl	2a9ea <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   286ec:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   286ee:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   286f0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   286f2:	7041      	strb	r1, [r0, #1]
   286f4:	4640      	mov	r0, r8
   286f6:	f002 f978 	bl	2a9ea <net_buf_simple_add>
	evt->ncmd = 1U;
   286fa:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   286fc:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   286fe:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   28700:	4620      	mov	r0, r4
}
   28702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   28706:	f7e4 bac9 	b.w	cc9c <bt_recv_prio>

0002870a <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2870a:	f101 0320 	add.w	r3, r1, #32
   2870e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   28710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   28714:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   28718:	428b      	cmp	r3, r1
   2871a:	d1f9      	bne.n	28710 <sys_memcpy_swap.constprop.0+0x6>
}
   2871c:	4770      	bx	lr

0002871e <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   2871e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   28722:	f043 0306 	orr.w	r3, r3, #6
   28726:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   2872a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   2872e:	f043 0304 	orr.w	r3, r3, #4
   28732:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   28736:	4770      	bx	lr

00028738 <default_CSPRNG>:
{
   28738:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2873a:	f7ee f85b 	bl	167f4 <bt_rand>
}
   2873e:	fab0 f080 	clz	r0, r0
   28742:	0940      	lsrs	r0, r0, #5
   28744:	bd08      	pop	{r3, pc}

00028746 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   28746:	b510      	push	{r4, lr}
   28748:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2874a:	7801      	ldrb	r1, [r0, #0]
   2874c:	7822      	ldrb	r2, [r4, #0]
   2874e:	428a      	cmp	r2, r1
{
   28750:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   28752:	d00f      	beq.n	28774 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   28754:	4669      	mov	r1, sp
   28756:	f7e2 ff59 	bl	b60c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2875a:	a905      	add	r1, sp, #20
   2875c:	4620      	mov	r0, r4
   2875e:	f7e2 ff55 	bl	b60c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   28762:	2210      	movs	r2, #16
   28764:	f10d 0115 	add.w	r1, sp, #21
   28768:	f10d 0001 	add.w	r0, sp, #1
   2876c:	f7ff fefa 	bl	28564 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   28770:	b00a      	add	sp, #40	; 0x28
   28772:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   28774:	2a01      	cmp	r2, #1
   28776:	d006      	beq.n	28786 <bt_uuid_cmp+0x40>
   28778:	2a02      	cmp	r2, #2
   2877a:	d007      	beq.n	2878c <bt_uuid_cmp+0x46>
   2877c:	b972      	cbnz	r2, 2879c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2877e:	8840      	ldrh	r0, [r0, #2]
   28780:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   28782:	1ac0      	subs	r0, r0, r3
   28784:	e7f4      	b.n	28770 <bt_uuid_cmp+0x2a>
   28786:	6840      	ldr	r0, [r0, #4]
   28788:	6863      	ldr	r3, [r4, #4]
   2878a:	e7fa      	b.n	28782 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2878c:	2210      	movs	r2, #16
   2878e:	1c61      	adds	r1, r4, #1
   28790:	3001      	adds	r0, #1
}
   28792:	b00a      	add	sp, #40	; 0x28
   28794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28798:	f7ff bee4 	b.w	28564 <memcmp>
	switch (u1->type) {
   2879c:	f06f 0015 	mvn.w	r0, #21
   287a0:	e7e6      	b.n	28770 <bt_uuid_cmp+0x2a>

000287a2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   287a2:	2a04      	cmp	r2, #4
{
   287a4:	b510      	push	{r4, lr}
	switch (data_len) {
   287a6:	d00a      	beq.n	287be <bt_uuid_create+0x1c>
   287a8:	2a10      	cmp	r2, #16
   287aa:	d00d      	beq.n	287c8 <bt_uuid_create+0x26>
   287ac:	2a02      	cmp	r2, #2
   287ae:	f04f 0300 	mov.w	r3, #0
   287b2:	d10f      	bne.n	287d4 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   287b4:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   287b6:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   287b8:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   287ba:	2001      	movs	r0, #1
}
   287bc:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   287be:	2301      	movs	r3, #1
   287c0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   287c2:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   287c4:	6042      	str	r2, [r0, #4]
		break;
   287c6:	e7f8      	b.n	287ba <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   287c8:	2302      	movs	r3, #2
   287ca:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   287ce:	f7ff fef2 	bl	285b6 <memcpy>
		break;
   287d2:	e7f2      	b.n	287ba <bt_uuid_create+0x18>
	switch (data_len) {
   287d4:	4618      	mov	r0, r3
   287d6:	e7f1      	b.n	287bc <bt_uuid_create+0x1a>

000287d8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   287d8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   287da:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   287dc:	2106      	movs	r1, #6
{
   287de:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   287e0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   287e4:	f7ee f806 	bl	167f4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   287e8:	b918      	cbnz	r0, 287f2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   287ea:	79a3      	ldrb	r3, [r4, #6]
   287ec:	f063 033f 	orn	r3, r3, #63	; 0x3f
   287f0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   287f2:	bd10      	pop	{r4, pc}

000287f4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   287f4:	280f      	cmp	r0, #15
   287f6:	d806      	bhi.n	28806 <bt_hci_evt_get_flags+0x12>
   287f8:	280d      	cmp	r0, #13
   287fa:	d80b      	bhi.n	28814 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   287fc:	2805      	cmp	r0, #5
   287fe:	bf14      	ite	ne
   28800:	2002      	movne	r0, #2
   28802:	2003      	moveq	r0, #3
   28804:	4770      	bx	lr
	switch (evt) {
   28806:	2813      	cmp	r0, #19
   28808:	d004      	beq.n	28814 <bt_hci_evt_get_flags+0x20>
   2880a:	281a      	cmp	r0, #26
   2880c:	bf14      	ite	ne
   2880e:	2002      	movne	r0, #2
   28810:	2001      	moveq	r0, #1
   28812:	4770      	bx	lr
   28814:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   28816:	4770      	bx	lr

00028818 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   28818:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2881c:	b193      	cbz	r3, 28844 <update_sec_level+0x2c>
   2881e:	7b5a      	ldrb	r2, [r3, #13]
   28820:	07d1      	lsls	r1, r2, #31
   28822:	d50f      	bpl.n	28844 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   28824:	06d2      	lsls	r2, r2, #27
   28826:	d50b      	bpl.n	28840 <update_sec_level+0x28>
   28828:	7b1b      	ldrb	r3, [r3, #12]
   2882a:	2b10      	cmp	r3, #16
   2882c:	d108      	bne.n	28840 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2882e:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   28830:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   28832:	7a82      	ldrb	r2, [r0, #10]
   28834:	7a40      	ldrb	r0, [r0, #9]
}
   28836:	4282      	cmp	r2, r0
   28838:	bf8c      	ite	hi
   2883a:	2000      	movhi	r0, #0
   2883c:	2001      	movls	r0, #1
   2883e:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   28840:	2303      	movs	r3, #3
   28842:	e7f5      	b.n	28830 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   28844:	2302      	movs	r3, #2
   28846:	e7f3      	b.n	28830 <update_sec_level+0x18>

00028848 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   28848:	2207      	movs	r2, #7
   2884a:	f7ff beb4 	b.w	285b6 <memcpy>

0002884e <atomic_or>:
{
   2884e:	4603      	mov	r3, r0
}
   28850:	f3bf 8f5b 	dmb	ish
   28854:	e853 0f00 	ldrex	r0, [r3]
   28858:	ea40 0201 	orr.w	r2, r0, r1
   2885c:	e843 2c00 	strex	ip, r2, [r3]
   28860:	f1bc 0f00 	cmp.w	ip, #0
   28864:	d1f6      	bne.n	28854 <atomic_or+0x6>
   28866:	f3bf 8f5b 	dmb	ish
   2886a:	4770      	bx	lr

0002886c <z_log_msg2_static_create.constprop.0>:
   2886c:	2300      	movs	r3, #0
   2886e:	f7fd b9b7 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00028872 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   28872:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28874:	ab0a      	add	r3, sp, #40	; 0x28
   28876:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   28878:	9302      	str	r3, [sp, #8]
   2887a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2887c:	9301      	str	r3, [sp, #4]
   2887e:	2300      	movs	r3, #0
   28880:	9300      	str	r3, [sp, #0]
   28882:	4618      	mov	r0, r3
   28884:	f7dd fe5e 	bl	6544 <z_impl_z_log_msg2_runtime_vcreate>
}
   28888:	b007      	add	sp, #28
   2888a:	f85d fb04 	ldr.w	pc, [sp], #4

0002888e <sys_put_le64>:
	dst[1] = val >> 8;
   2888e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   28892:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   28894:	0e00      	lsrs	r0, r0, #24
   28896:	7053      	strb	r3, [r2, #1]
   28898:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2889a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2889c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   288a0:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   288a2:	7093      	strb	r3, [r2, #2]
   288a4:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   288a6:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   288a8:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   288aa:	71d1      	strb	r1, [r2, #7]
}
   288ac:	4770      	bx	lr

000288ae <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   288ae:	f7e3 bd5d 	b.w	c36c <bt_le_create_conn_legacy>

000288b2 <bt_hci_disconnect>:
{
   288b2:	b570      	push	{r4, r5, r6, lr}
   288b4:	4606      	mov	r6, r0
   288b6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   288b8:	f240 4006 	movw	r0, #1030	; 0x406
   288bc:	2103      	movs	r1, #3
   288be:	f7e3 fb35 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
   288c2:	4604      	mov	r4, r0
   288c4:	b168      	cbz	r0, 288e2 <bt_hci_disconnect+0x30>
   288c6:	2103      	movs	r1, #3
   288c8:	3008      	adds	r0, #8
   288ca:	f002 f88e 	bl	2a9ea <net_buf_simple_add>
	disconn->reason = reason;
   288ce:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   288d0:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   288d2:	4621      	mov	r1, r4
   288d4:	2200      	movs	r2, #0
}
   288d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   288da:	f240 4006 	movw	r0, #1030	; 0x406
   288de:	f7e3 bc95 	b.w	c20c <bt_hci_cmd_send_sync>
}
   288e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   288e6:	bd70      	pop	{r4, r5, r6, pc}

000288e8 <bt_le_set_data_len>:
{
   288e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   288ea:	4607      	mov	r7, r0
   288ec:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   288ee:	f242 0022 	movw	r0, #8226	; 0x2022
   288f2:	2106      	movs	r1, #6
{
   288f4:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   288f6:	f7e3 fb19 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
   288fa:	4604      	mov	r4, r0
   288fc:	b170      	cbz	r0, 2891c <bt_le_set_data_len+0x34>
   288fe:	2106      	movs	r1, #6
   28900:	3008      	adds	r0, #8
   28902:	f002 f872 	bl	2a9ea <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28906:	883b      	ldrh	r3, [r7, #0]
   28908:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2890a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2890c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2890e:	4621      	mov	r1, r4
   28910:	f242 0022 	movw	r0, #8226	; 0x2022
}
   28914:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   28918:	f7e3 bb42 	b.w	bfa0 <bt_hci_cmd_send>
}
   2891c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028922 <bt_le_set_phy>:
{
   28922:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28926:	4680      	mov	r8, r0
   28928:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2892a:	f242 0032 	movw	r0, #8242	; 0x2032
   2892e:	2107      	movs	r1, #7
{
   28930:	f89d 9020 	ldrb.w	r9, [sp, #32]
   28934:	4616      	mov	r6, r2
   28936:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28938:	f7e3 faf8 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
   2893c:	4604      	mov	r4, r0
   2893e:	b190      	cbz	r0, 28966 <bt_le_set_phy+0x44>
   28940:	2107      	movs	r1, #7
   28942:	3008      	adds	r0, #8
   28944:	f002 f851 	bl	2a9ea <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28948:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2894c:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2894e:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   28950:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28952:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   28954:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28958:	4621      	mov	r1, r4
   2895a:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2895e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28962:	f7e3 bb1d 	b.w	bfa0 <bt_hci_cmd_send>
}
   28966:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002896e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2896e:	6880      	ldr	r0, [r0, #8]
   28970:	f7e3 be72 	b.w	c658 <bt_hci_le_enh_conn_complete>

00028974 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   28974:	8803      	ldrh	r3, [r0, #0]
   28976:	8842      	ldrh	r2, [r0, #2]
   28978:	4293      	cmp	r3, r2
{
   2897a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2897c:	d819      	bhi.n	289b2 <bt_le_conn_params_valid+0x3e>
   2897e:	2b05      	cmp	r3, #5
   28980:	d917      	bls.n	289b2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   28982:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   28986:	d814      	bhi.n	289b2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   28988:	8883      	ldrh	r3, [r0, #4]
   2898a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2898e:	d210      	bcs.n	289b2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   28990:	88c0      	ldrh	r0, [r0, #6]
   28992:	f1a0 010a 	sub.w	r1, r0, #10
   28996:	b289      	uxth	r1, r1
   28998:	f640 4476 	movw	r4, #3190	; 0xc76
   2899c:	42a1      	cmp	r1, r4
   2899e:	d808      	bhi.n	289b2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   289a0:	3301      	adds	r3, #1
   289a2:	b29b      	uxth	r3, r3
   289a4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   289a6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   289aa:	bf34      	ite	cc
   289ac:	2001      	movcc	r0, #1
   289ae:	2000      	movcs	r0, #0
}
   289b0:	bd10      	pop	{r4, pc}
		return false;
   289b2:	2000      	movs	r0, #0
   289b4:	e7fc      	b.n	289b0 <bt_le_conn_params_valid+0x3c>

000289b6 <bt_send>:
		return bt_hci_ecc_send(buf);
   289b6:	f7e2 bd97 	b.w	b4e8 <bt_hci_ecc_send>

000289ba <bt_addr_le_is_bonded>:
{
   289ba:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   289bc:	f7ea fcc2 	bl	13344 <bt_keys_find_addr>
		return keys && keys->keys;
   289c0:	b118      	cbz	r0, 289ca <bt_addr_le_is_bonded+0x10>
   289c2:	89c0      	ldrh	r0, [r0, #14]
   289c4:	3800      	subs	r0, #0
   289c6:	bf18      	it	ne
   289c8:	2001      	movne	r0, #1
}
   289ca:	bd08      	pop	{r3, pc}

000289cc <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   289cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   289ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   289d2:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   289d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   289d8:	2100      	movs	r1, #0
{
   289da:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   289dc:	f7e2 fe76 	bl	b6cc <bt_buf_get_evt>
   289e0:	2102      	movs	r1, #2
   289e2:	4604      	mov	r4, r0
   289e4:	3008      	adds	r0, #8
   289e6:	f002 f800 	bl	2a9ea <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   289ea:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   289ec:	7045      	strb	r5, [r0, #1]

	return buf;
}
   289ee:	4620      	mov	r0, r4
   289f0:	bd70      	pop	{r4, r5, r6, pc}

000289f2 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   289f2:	3103      	adds	r1, #3
{
   289f4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   289f6:	b2c9      	uxtb	r1, r1
{
   289f8:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   289fa:	200e      	movs	r0, #14
   289fc:	f7ff ffe6 	bl	289cc <bt_hci_evt_create>
   28a00:	2103      	movs	r1, #3
   28a02:	4604      	mov	r4, r0
   28a04:	3008      	adds	r0, #8
   28a06:	f001 fff0 	bl	2a9ea <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   28a0a:	2301      	movs	r3, #1
   28a0c:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   28a0e:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   28a12:	4620      	mov	r0, r4
   28a14:	bd38      	pop	{r3, r4, r5, pc}

00028a16 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   28a16:	b570      	push	{r4, r5, r6, lr}
   28a18:	4605      	mov	r5, r0
   28a1a:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   28a1c:	200f      	movs	r0, #15
   28a1e:	2104      	movs	r1, #4
   28a20:	f7ff ffd4 	bl	289cc <bt_hci_evt_create>
   28a24:	2104      	movs	r1, #4
   28a26:	4604      	mov	r4, r0
   28a28:	3008      	adds	r0, #8
   28a2a:	f001 ffde 	bl	2a9ea <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   28a2e:	2201      	movs	r2, #1
	cs->status = status;
   28a30:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   28a32:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   28a34:	8045      	strh	r5, [r0, #2]

	return buf;
}
   28a36:	4620      	mov	r0, r4
   28a38:	bd70      	pop	{r4, r5, r6, pc}

00028a3a <bt_addr_le_copy>:
   28a3a:	2207      	movs	r2, #7
   28a3c:	f7ff bdbb 	b.w	285b6 <memcpy>

00028a40 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   28a40:	7a03      	ldrb	r3, [r0, #8]
   28a42:	075b      	lsls	r3, r3, #29
{
   28a44:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   28a46:	d505      	bpl.n	28a54 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   28a48:	4601      	mov	r1, r0
   28a4a:	322a      	adds	r2, #42	; 0x2a
   28a4c:	f811 0b01 	ldrb.w	r0, [r1], #1
   28a50:	f7e4 bac6 	b.w	cfe0 <hci_id_add>
}
   28a54:	4770      	bx	lr

00028a56 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   28a56:	2300      	movs	r3, #0
   28a58:	f7fd b8c2 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00028a5c <addr_res_enable>:
{
   28a5c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   28a5e:	2101      	movs	r1, #1
{
   28a60:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   28a62:	f242 002d 	movw	r0, #8237	; 0x202d
   28a66:	f7e3 fa61 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
   28a6a:	4604      	mov	r4, r0
   28a6c:	b158      	cbz	r0, 28a86 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   28a6e:	4629      	mov	r1, r5
   28a70:	3008      	adds	r0, #8
   28a72:	f001 ffc9 	bl	2aa08 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28a76:	4621      	mov	r1, r4
   28a78:	2200      	movs	r2, #0
}
   28a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28a7e:	f242 002d 	movw	r0, #8237	; 0x202d
   28a82:	f7e3 bbc3 	b.w	c20c <bt_hci_cmd_send_sync>
}
   28a86:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a8a:	bd38      	pop	{r3, r4, r5, pc}

00028a8c <bt_lookup_id_addr>:
{
   28a8c:	b510      	push	{r4, lr}
   28a8e:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   28a90:	f7ea fc20 	bl	132d4 <bt_keys_find_irk>
		if (keys) {
   28a94:	b100      	cbz	r0, 28a98 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   28a96:	1c44      	adds	r4, r0, #1
}
   28a98:	4620      	mov	r0, r4
   28a9a:	bd10      	pop	{r4, pc}

00028a9c <rpa_timeout>:
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   28a9c:	2100      	movs	r1, #0
{
   28a9e:	b508      	push	{r3, lr}
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   28aa0:	2202      	movs	r2, #2
   28aa2:	4608      	mov	r0, r1
   28aa4:	f7e6 f83c 	bl	eb20 <bt_conn_lookup_state_le>
		if (conn) {
   28aa8:	b118      	cbz	r0, 28ab2 <rpa_timeout+0x16>
			bt_conn_unref(conn);
   28aaa:	f000 f8f3 	bl	28c94 <bt_conn_unref>
			bt_le_create_conn_cancel();
   28aae:	f7e3 fcbf 	bl	c430 <bt_le_create_conn_cancel>
	le_rpa_invalidate();
   28ab2:	f7e4 fa85 	bl	cfc0 <le_rpa_invalidate>
   28ab6:	f7e4 fac5 	bl	d044 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   28aba:	0501      	lsls	r1, r0, #20
   28abc:	d503      	bpl.n	28ac6 <rpa_timeout+0x2a>
}
   28abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
   28ac2:	f7e4 bc65 	b.w	d390 <le_update_private_addr>
   28ac6:	f7e4 fabd 	bl	d044 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   28aca:	0682      	lsls	r2, r0, #26
   28acc:	d503      	bpl.n	28ad6 <rpa_timeout+0x3a>
   28ace:	f7e4 fab9 	bl	d044 <atomic_get.constprop.0>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   28ad2:	0603      	lsls	r3, r0, #24
   28ad4:	d4f3      	bmi.n	28abe <rpa_timeout+0x22>
}
   28ad6:	bd08      	pop	{r3, pc}

00028ad8 <bt_id_scan_random_addr_check>:
}
   28ad8:	2001      	movs	r0, #1
   28ada:	4770      	bx	lr

00028adc <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   28adc:	7a03      	ldrb	r3, [r0, #8]
   28ade:	07d9      	lsls	r1, r3, #31
   28ae0:	d504      	bpl.n	28aec <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   28ae2:	f023 0301 	bic.w	r3, r3, #1
   28ae6:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   28ae8:	f7e4 bc9a 	b.w	d420 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   28aec:	0799      	lsls	r1, r3, #30
   28aee:	d504      	bpl.n	28afa <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   28af0:	f023 0302 	bic.w	r3, r3, #2
   28af4:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   28af6:	f7e4 bcab 	b.w	d450 <bt_id_del>
}
   28afa:	4770      	bx	lr

00028afc <atomic_and>:
{
   28afc:	4603      	mov	r3, r0
}
   28afe:	f3bf 8f5b 	dmb	ish
   28b02:	e853 0f00 	ldrex	r0, [r3]
   28b06:	ea00 0201 	and.w	r2, r0, r1
   28b0a:	e843 2c00 	strex	ip, r2, [r3]
   28b0e:	f1bc 0f00 	cmp.w	ip, #0
   28b12:	d1f6      	bne.n	28b02 <atomic_and+0x6>
   28b14:	f3bf 8f5b 	dmb	ish
   28b18:	4770      	bx	lr

00028b1a <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   28b1a:	f7e4 bf71 	b.w	da00 <bt_le_scan_set_enable_legacy>

00028b1e <atomic_and>:
{
   28b1e:	4603      	mov	r3, r0
}
   28b20:	f3bf 8f5b 	dmb	ish
   28b24:	e853 0f00 	ldrex	r0, [r3]
   28b28:	ea00 0201 	and.w	r2, r0, r1
   28b2c:	e843 2c00 	strex	ip, r2, [r3]
   28b30:	f1bc 0f00 	cmp.w	ip, #0
   28b34:	d1f6      	bne.n	28b24 <atomic_and+0x6>
   28b36:	f3bf 8f5b 	dmb	ish
   28b3a:	4770      	bx	lr

00028b3c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b3c:	f3bf 8f5b 	dmb	ish
   28b40:	6800      	ldr	r0, [r0, #0]
   28b42:	f3bf 8f5b 	dmb	ish
}
   28b46:	4770      	bx	lr

00028b48 <z_log_msg2_static_create.constprop.0>:
   28b48:	2300      	movs	r3, #0
   28b4a:	f7fd b849 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00028b4e <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   28b4e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28b50:	ab0a      	add	r3, sp, #40	; 0x28
   28b52:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   28b54:	9302      	str	r3, [sp, #8]
   28b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28b58:	9301      	str	r3, [sp, #4]
   28b5a:	2300      	movs	r3, #0
   28b5c:	9300      	str	r3, [sp, #0]
   28b5e:	2202      	movs	r2, #2
   28b60:	4618      	mov	r0, r3
   28b62:	f7dd fcef 	bl	6544 <z_impl_z_log_msg2_runtime_vcreate>
}
   28b66:	b007      	add	sp, #28
   28b68:	f85d fb04 	ldr.w	pc, [sp], #4

00028b6c <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   28b6c:	f3bf 8f5b 	dmb	ish
   28b70:	e850 3f00 	ldrex	r3, [r0]
   28b74:	3b01      	subs	r3, #1
   28b76:	e840 3200 	strex	r2, r3, [r0]
   28b7a:	2a00      	cmp	r2, #0
   28b7c:	d1f8      	bne.n	28b70 <atomic_dec.isra.0+0x4>
   28b7e:	f3bf 8f5b 	dmb	ish
}
   28b82:	4770      	bx	lr

00028b84 <tx_notify>:
{
   28b84:	b570      	push	{r4, r5, r6, lr}
   28b86:	4604      	mov	r4, r0
	__asm__ volatile(
   28b88:	f04f 0220 	mov.w	r2, #32
   28b8c:	f3ef 8311 	mrs	r3, BASEPRI
   28b90:	f382 8812 	msr	BASEPRI_MAX, r2
   28b94:	f3bf 8f6f 	isb	sy
	return list->head;
   28b98:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   28b9a:	b920      	cbnz	r0, 28ba6 <tx_notify+0x22>
	__asm__ volatile(
   28b9c:	f383 8811 	msr	BASEPRI, r3
   28ba0:	f3bf 8f6f 	isb	sy
}
   28ba4:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28ba6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   28ba8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   28baa:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28bac:	4288      	cmp	r0, r1
	list->tail = node;
   28bae:	bf08      	it	eq
   28bb0:	6262      	streq	r2, [r4, #36]	; 0x24
   28bb2:	f383 8811 	msr	BASEPRI, r3
   28bb6:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   28bba:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   28bbe:	f7e5 faed 	bl	e19c <tx_free>
		cb(conn, user_data);
   28bc2:	4631      	mov	r1, r6
   28bc4:	4620      	mov	r0, r4
   28bc6:	47a8      	blx	r5
	while (1) {
   28bc8:	e7de      	b.n	28b88 <tx_notify+0x4>

00028bca <tx_complete_work>:
	tx_notify(conn);
   28bca:	3828      	subs	r0, #40	; 0x28
   28bcc:	f7ff bfda 	b.w	28b84 <tx_notify>

00028bd0 <bt_conn_reset_rx_state>:
{
   28bd0:	b510      	push	{r4, lr}
   28bd2:	4604      	mov	r4, r0
	if (!conn->rx) {
   28bd4:	6900      	ldr	r0, [r0, #16]
   28bd6:	b118      	cbz	r0, 28be0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28bd8:	f7f6 fb48 	bl	1f26c <net_buf_unref>
	conn->rx = NULL;
   28bdc:	2300      	movs	r3, #0
   28bde:	6123      	str	r3, [r4, #16]
}
   28be0:	bd10      	pop	{r4, pc}

00028be2 <conn_cleanup>:
{
   28be2:	b570      	push	{r4, r5, r6, lr}
   28be4:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   28be6:	f100 0638 	add.w	r6, r0, #56	; 0x38
   28bea:	2200      	movs	r2, #0
   28bec:	2300      	movs	r3, #0
   28bee:	4630      	mov	r0, r6
   28bf0:	f001 fe98 	bl	2a924 <net_buf_get>
   28bf4:	4605      	mov	r5, r0
   28bf6:	b950      	cbnz	r0, 28c0e <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   28bf8:	4620      	mov	r0, r4
   28bfa:	f7ff ffe9 	bl	28bd0 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   28bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   28c02:	2200      	movs	r2, #0
}
   28c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   28c08:	2300      	movs	r3, #0
   28c0a:	f7fb b95f 	b.w	23ecc <k_work_reschedule>
		if (tx_data(buf)->tx) {
   28c0e:	6968      	ldr	r0, [r5, #20]
   28c10:	b108      	cbz	r0, 28c16 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   28c12:	f7e5 fac3 	bl	e19c <tx_free>
		net_buf_unref(buf);
   28c16:	4628      	mov	r0, r5
   28c18:	f7f6 fb28 	bl	1f26c <net_buf_unref>
   28c1c:	e7e5      	b.n	28bea <conn_cleanup+0x8>

00028c1e <bt_conn_ref>:
{
   28c1e:	b510      	push	{r4, lr}
   28c20:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   28c22:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   28c26:	4610      	mov	r0, r2
   28c28:	f7ff ff88 	bl	28b3c <atomic_get>
		if (!old) {
   28c2c:	b180      	cbz	r0, 28c50 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28c2e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   28c32:	1c41      	adds	r1, r0, #1
   28c34:	e852 4f00 	ldrex	r4, [r2]
   28c38:	4284      	cmp	r4, r0
   28c3a:	d104      	bne.n	28c46 <bt_conn_ref+0x28>
   28c3c:	e842 1c00 	strex	ip, r1, [r2]
   28c40:	f1bc 0f00 	cmp.w	ip, #0
   28c44:	d1f6      	bne.n	28c34 <bt_conn_ref+0x16>
   28c46:	f3bf 8f5b 	dmb	ish
   28c4a:	d1ec      	bne.n	28c26 <bt_conn_ref+0x8>
}
   28c4c:	4618      	mov	r0, r3
   28c4e:	bd10      	pop	{r4, pc}
			return NULL;
   28c50:	4603      	mov	r3, r0
   28c52:	e7fb      	b.n	28c4c <bt_conn_ref+0x2e>

00028c54 <conn_lookup_handle>:
{
   28c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c58:	4606      	mov	r6, r0
   28c5a:	460d      	mov	r5, r1
   28c5c:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   28c5e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28c60:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   28c64:	42ac      	cmp	r4, r5
   28c66:	d102      	bne.n	28c6e <conn_lookup_handle+0x1a>
	return NULL;
   28c68:	2000      	movs	r0, #0
}
   28c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28c6e:	fb08 6004 	mla	r0, r8, r4, r6
   28c72:	f7ff ffd4 	bl	28c1e <bt_conn_ref>
		if (!conn) {
   28c76:	b158      	cbz	r0, 28c90 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   28c78:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   28c7a:	2b01      	cmp	r3, #1
   28c7c:	d002      	beq.n	28c84 <conn_lookup_handle+0x30>
   28c7e:	3b07      	subs	r3, #7
   28c80:	2b01      	cmp	r3, #1
   28c82:	d802      	bhi.n	28c8a <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   28c84:	8803      	ldrh	r3, [r0, #0]
   28c86:	42bb      	cmp	r3, r7
   28c88:	d0ef      	beq.n	28c6a <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   28c8a:	30b8      	adds	r0, #184	; 0xb8
   28c8c:	f7ff ff6e 	bl	28b6c <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   28c90:	3401      	adds	r4, #1
   28c92:	e7e7      	b.n	28c64 <conn_lookup_handle+0x10>

00028c94 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   28c94:	30b8      	adds	r0, #184	; 0xb8
   28c96:	f7ff bf69 	b.w	28b6c <atomic_dec.isra.0>

00028c9a <bt_conn_connected>:
{
   28c9a:	b510      	push	{r4, lr}
   28c9c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28c9e:	f7e6 f9ad 	bl	effc <bt_l2cap_connected>
	notify_connected(conn);
   28ca2:	4620      	mov	r0, r4
}
   28ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   28ca8:	f7e5 ba82 	b.w	e1b0 <notify_connected>

00028cac <bt_conn_le_start_encryption>:
{
   28cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28cb0:	4682      	mov	sl, r0
   28cb2:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   28cb4:	f242 0019 	movw	r0, #8217	; 0x2019
   28cb8:	211c      	movs	r1, #28
{
   28cba:	9e08      	ldr	r6, [sp, #32]
   28cbc:	4690      	mov	r8, r2
   28cbe:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   28cc0:	f7e3 f934 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
   28cc4:	4605      	mov	r5, r0
   28cc6:	b340      	cbz	r0, 28d1a <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   28cc8:	211c      	movs	r1, #28
   28cca:	3008      	adds	r0, #8
   28ccc:	f001 fe8d 	bl	2a9ea <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28cd0:	f8ba 3000 	ldrh.w	r3, [sl]
   28cd4:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   28cd6:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   28cd8:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   28cdc:	4649      	mov	r1, r9
   28cde:	f7ff fc6a 	bl	285b6 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   28ce2:	2202      	movs	r2, #2
   28ce4:	4641      	mov	r1, r8
   28ce6:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   28cea:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   28cec:	f7ff fc63 	bl	285b6 <memcpy>
	memcpy(cp->ltk, ltk, len);
   28cf0:	4632      	mov	r2, r6
   28cf2:	4639      	mov	r1, r7
   28cf4:	4620      	mov	r0, r4
   28cf6:	f7ff fc5e 	bl	285b6 <memcpy>
	if (len < sizeof(cp->ltk)) {
   28cfa:	2e0f      	cmp	r6, #15
   28cfc:	d805      	bhi.n	28d0a <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   28cfe:	f1c6 0210 	rsb	r2, r6, #16
   28d02:	2100      	movs	r1, #0
   28d04:	19a0      	adds	r0, r4, r6
   28d06:	f7ff fc61 	bl	285cc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   28d0a:	4629      	mov	r1, r5
   28d0c:	2200      	movs	r2, #0
}
   28d0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   28d12:	f242 0019 	movw	r0, #8217	; 0x2019
   28d16:	f7e3 ba79 	b.w	c20c <bt_hci_cmd_send_sync>
}
   28d1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028d22 <bt_conn_set_security>:
{
   28d22:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28d24:	7b43      	ldrb	r3, [r0, #13]
   28d26:	2b07      	cmp	r3, #7
{
   28d28:	4604      	mov	r4, r0
   28d2a:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   28d2c:	d124      	bne.n	28d78 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   28d2e:	7a43      	ldrb	r3, [r0, #9]
   28d30:	428b      	cmp	r3, r1
   28d32:	d224      	bcs.n	28d7e <bt_conn_set_security+0x5c>
   28d34:	7a83      	ldrb	r3, [r0, #10]
   28d36:	428b      	cmp	r3, r1
   28d38:	d221      	bcs.n	28d7e <bt_conn_set_security+0x5c>
	if (val) {
   28d3a:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   28d3c:	f100 0004 	add.w	r0, r0, #4
   28d40:	d515      	bpl.n	28d6e <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28d42:	f3bf 8f5b 	dmb	ish
   28d46:	e850 3f00 	ldrex	r3, [r0]
   28d4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   28d4e:	e840 3200 	strex	r2, r3, [r0]
   28d52:	2a00      	cmp	r2, #0
   28d54:	d1f7      	bne.n	28d46 <bt_conn_set_security+0x24>
   28d56:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28d5a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   28d5e:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   28d60:	4620      	mov	r0, r4
   28d62:	f001 fc84 	bl	2a66e <bt_smp_start_security>
	if (err) {
   28d66:	b108      	cbz	r0, 28d6c <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   28d68:	7a63      	ldrb	r3, [r4, #9]
   28d6a:	72a3      	strb	r3, [r4, #10]
}
   28d6c:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28d6e:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   28d72:	f7ff fed4 	bl	28b1e <atomic_and>
   28d76:	e7f0      	b.n	28d5a <bt_conn_set_security+0x38>
		return -ENOTCONN;
   28d78:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28d7c:	e7f6      	b.n	28d6c <bt_conn_set_security+0x4a>
		return 0;
   28d7e:	2000      	movs	r0, #0
   28d80:	e7f4      	b.n	28d6c <bt_conn_set_security+0x4a>

00028d82 <bt_conn_get_security>:
}
   28d82:	7a40      	ldrb	r0, [r0, #9]
   28d84:	4770      	bx	lr

00028d86 <bt_conn_is_peer_addr_le>:
{
   28d86:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   28d88:	7a03      	ldrb	r3, [r0, #8]
   28d8a:	428b      	cmp	r3, r1
{
   28d8c:	4604      	mov	r4, r0
   28d8e:	4615      	mov	r5, r2
	if (id != conn->id) {
   28d90:	d115      	bne.n	28dbe <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   28d92:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28d96:	2207      	movs	r2, #7
   28d98:	4628      	mov	r0, r5
   28d9a:	f7ff fbe3 	bl	28564 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   28d9e:	b180      	cbz	r0, 28dc2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28da0:	78e3      	ldrb	r3, [r4, #3]
   28da2:	2207      	movs	r2, #7
   28da4:	b943      	cbnz	r3, 28db8 <bt_conn_is_peer_addr_le+0x32>
   28da6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   28daa:	4628      	mov	r0, r5
   28dac:	f7ff fbda 	bl	28564 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   28db0:	fab0 f080 	clz	r0, r0
   28db4:	0940      	lsrs	r0, r0, #5
}
   28db6:	bd38      	pop	{r3, r4, r5, pc}
   28db8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   28dbc:	e7f5      	b.n	28daa <bt_conn_is_peer_addr_le+0x24>
		return false;
   28dbe:	2000      	movs	r0, #0
   28dc0:	e7f9      	b.n	28db6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   28dc2:	2001      	movs	r0, #1
   28dc4:	e7f7      	b.n	28db6 <bt_conn_is_peer_addr_le+0x30>

00028dc6 <bt_conn_disconnect>:
{
   28dc6:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28dc8:	7883      	ldrb	r3, [r0, #2]
   28dca:	2b01      	cmp	r3, #1
{
   28dcc:	4604      	mov	r4, r0
   28dce:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28dd0:	d103      	bne.n	28dda <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   28dd2:	2100      	movs	r1, #0
   28dd4:	3088      	adds	r0, #136	; 0x88
   28dd6:	f7e5 fec7 	bl	eb68 <bt_le_set_auto_conn>
	switch (conn->state) {
   28dda:	7b63      	ldrb	r3, [r4, #13]
   28ddc:	3b02      	subs	r3, #2
   28dde:	2b06      	cmp	r3, #6
   28de0:	d805      	bhi.n	28dee <bt_conn_disconnect+0x28>
   28de2:	e8df f003 	tbb	[pc, r3]
   28de6:	0408      	.short	0x0408
   28de8:	1a120404 	.word	0x1a120404
   28dec:	10          	.byte	0x10
   28ded:	00          	.byte	0x00
   28dee:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   28df2:	4628      	mov	r0, r5
   28df4:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28df6:	4620      	mov	r0, r4
		conn->err = reason;
   28df8:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28dfa:	2100      	movs	r1, #0
   28dfc:	f7e5 fc28 	bl	e650 <bt_conn_set_state>
			bt_le_scan_update(false);
   28e00:	2000      	movs	r0, #0
   28e02:	f7e4 fe89 	bl	db18 <bt_le_scan_update>
		return 0;
   28e06:	2500      	movs	r5, #0
   28e08:	e7f3      	b.n	28df2 <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   28e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   28e0e:	f002 fd14 	bl	2b83a <k_work_cancel_delayable>
}
   28e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   28e16:	f7e3 bb0b 	b.w	c430 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   28e1a:	4629      	mov	r1, r5
   28e1c:	8820      	ldrh	r0, [r4, #0]
   28e1e:	f7ff fd48 	bl	288b2 <bt_hci_disconnect>
	if (err) {
   28e22:	4605      	mov	r5, r0
   28e24:	2800      	cmp	r0, #0
   28e26:	d1e4      	bne.n	28df2 <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   28e28:	7b63      	ldrb	r3, [r4, #13]
   28e2a:	2b07      	cmp	r3, #7
   28e2c:	d1e1      	bne.n	28df2 <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   28e2e:	2108      	movs	r1, #8
   28e30:	4620      	mov	r0, r4
   28e32:	f7e5 fc0d 	bl	e650 <bt_conn_set_state>
   28e36:	e7dc      	b.n	28df2 <bt_conn_disconnect+0x2c>

00028e38 <bt_conn_le_conn_update>:
{
   28e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e3a:	4607      	mov	r7, r0
   28e3c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   28e3e:	f242 0013 	movw	r0, #8211	; 0x2013
   28e42:	210e      	movs	r1, #14
   28e44:	f7e3 f872 	bl	bf2c <bt_hci_cmd_create>
	if (!buf) {
   28e48:	4606      	mov	r6, r0
   28e4a:	b1d0      	cbz	r0, 28e82 <bt_conn_le_conn_update+0x4a>
   28e4c:	210e      	movs	r1, #14
   28e4e:	3008      	adds	r0, #8
   28e50:	f001 fdcb 	bl	2a9ea <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   28e54:	220e      	movs	r2, #14
   28e56:	4604      	mov	r4, r0
   28e58:	2100      	movs	r1, #0
   28e5a:	f7ff fbb7 	bl	285cc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28e5e:	883b      	ldrh	r3, [r7, #0]
   28e60:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   28e62:	882b      	ldrh	r3, [r5, #0]
   28e64:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28e66:	886b      	ldrh	r3, [r5, #2]
   28e68:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   28e6a:	88ab      	ldrh	r3, [r5, #4]
   28e6c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   28e6e:	88eb      	ldrh	r3, [r5, #6]
   28e70:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28e72:	4631      	mov	r1, r6
   28e74:	2200      	movs	r2, #0
}
   28e76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28e7a:	f242 0013 	movw	r0, #8211	; 0x2013
   28e7e:	f7e3 b9c5 	b.w	c20c <bt_hci_cmd_send_sync>
}
   28e82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028e88 <l2cap_connected>:
}
   28e88:	4770      	bx	lr

00028e8a <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   28e8a:	3010      	adds	r0, #16
   28e8c:	f002 bcd5 	b.w	2b83a <k_work_cancel_delayable>

00028e90 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   28e90:	2300      	movs	r3, #0
   28e92:	f7fc bea5 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00028e96 <bt_l2cap_chan_remove>:
	return list->head;
   28e96:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   28e98:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28e9a:	b173      	cbz	r3, 28eba <bt_l2cap_chan_remove+0x24>
   28e9c:	3b08      	subs	r3, #8
   28e9e:	2500      	movs	r5, #0
	return node->next;
   28ea0:	461a      	mov	r2, r3
		if (chan == ch) {
   28ea2:	4299      	cmp	r1, r3
   28ea4:	f852 4f08 	ldr.w	r4, [r2, #8]!
   28ea8:	d10d      	bne.n	28ec6 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   28eaa:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   28eac:	b935      	cbnz	r5, 28ebc <bt_l2cap_chan_remove+0x26>
   28eae:	4291      	cmp	r1, r2
	list->head = node;
   28eb0:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   28eb2:	d100      	bne.n	28eb6 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   28eb4:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   28eb6:	2200      	movs	r2, #0
   28eb8:	609a      	str	r2, [r3, #8]
}
   28eba:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   28ebc:	4291      	cmp	r1, r2
	parent->next = child;
   28ebe:	602c      	str	r4, [r5, #0]
	list->tail = node;
   28ec0:	bf08      	it	eq
   28ec2:	6545      	streq	r5, [r0, #84]	; 0x54
}
   28ec4:	e7f7      	b.n	28eb6 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28ec6:	2c00      	cmp	r4, #0
   28ec8:	d0f7      	beq.n	28eba <bt_l2cap_chan_remove+0x24>
   28eca:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   28ece:	4615      	mov	r5, r2
   28ed0:	e7e6      	b.n	28ea0 <bt_l2cap_chan_remove+0xa>

00028ed2 <bt_l2cap_chan_del>:
{
   28ed2:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   28ed4:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   28ed8:	4604      	mov	r4, r0
	if (!chan->conn) {
   28eda:	b123      	cbz	r3, 28ee6 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   28edc:	686b      	ldr	r3, [r5, #4]
   28ede:	b103      	cbz	r3, 28ee2 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   28ee0:	4798      	blx	r3
	chan->conn = NULL;
   28ee2:	2300      	movs	r3, #0
   28ee4:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   28ee6:	68e3      	ldr	r3, [r4, #12]
   28ee8:	b10b      	cbz	r3, 28eee <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   28eea:	4620      	mov	r0, r4
   28eec:	4798      	blx	r3
	if (ops->released) {
   28eee:	69eb      	ldr	r3, [r5, #28]
   28ef0:	b11b      	cbz	r3, 28efa <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   28ef2:	4620      	mov	r0, r4
}
   28ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   28ef8:	4718      	bx	r3
}
   28efa:	bd70      	pop	{r4, r5, r6, pc}

00028efc <bt_l2cap_disconnected>:
	return list->head;
   28efc:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   28efe:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28f00:	b160      	cbz	r0, 28f1c <bt_l2cap_disconnected+0x20>
	return node->next;
   28f02:	f850 4908 	ldr.w	r4, [r0], #-8
   28f06:	b104      	cbz	r4, 28f0a <bt_l2cap_disconnected+0xe>
   28f08:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   28f0a:	f7ff ffe2 	bl	28ed2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28f0e:	b12c      	cbz	r4, 28f1c <bt_l2cap_disconnected+0x20>
   28f10:	68a3      	ldr	r3, [r4, #8]
   28f12:	b103      	cbz	r3, 28f16 <bt_l2cap_disconnected+0x1a>
   28f14:	3b08      	subs	r3, #8
{
   28f16:	4620      	mov	r0, r4
   28f18:	461c      	mov	r4, r3
   28f1a:	e7f6      	b.n	28f0a <bt_l2cap_disconnected+0xe>
}
   28f1c:	bd10      	pop	{r4, pc}

00028f1e <bt_l2cap_security_changed>:
	return list->head;
   28f1e:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   28f20:	b538      	push	{r3, r4, r5, lr}
   28f22:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28f24:	b178      	cbz	r0, 28f46 <bt_l2cap_security_changed+0x28>
	return node->next;
   28f26:	f850 4908 	ldr.w	r4, [r0], #-8
   28f2a:	b104      	cbz	r4, 28f2e <bt_l2cap_security_changed+0x10>
   28f2c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   28f2e:	6843      	ldr	r3, [r0, #4]
   28f30:	689b      	ldr	r3, [r3, #8]
   28f32:	b10b      	cbz	r3, 28f38 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   28f34:	4629      	mov	r1, r5
   28f36:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28f38:	b12c      	cbz	r4, 28f46 <bt_l2cap_security_changed+0x28>
   28f3a:	68a3      	ldr	r3, [r4, #8]
   28f3c:	b103      	cbz	r3, 28f40 <bt_l2cap_security_changed+0x22>
   28f3e:	3b08      	subs	r3, #8
{
   28f40:	4620      	mov	r0, r4
   28f42:	461c      	mov	r4, r3
   28f44:	e7f3      	b.n	28f2e <bt_l2cap_security_changed+0x10>
}
   28f46:	bd38      	pop	{r3, r4, r5, pc}

00028f48 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   28f48:	3104      	adds	r1, #4
   28f4a:	f7e5 bcb5 	b.w	e8b8 <bt_conn_create_pdu_timeout>

00028f4e <bt_l2cap_send_cb>:
{
   28f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28f52:	4614      	mov	r4, r2
   28f54:	4605      	mov	r5, r0
   28f56:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   28f58:	f102 0008 	add.w	r0, r2, #8
   28f5c:	2104      	movs	r1, #4
   28f5e:	461e      	mov	r6, r3
   28f60:	f8dd 8018 	ldr.w	r8, [sp, #24]
   28f64:	f001 fd62 	bl	2aa2c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28f68:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   28f6a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28f6c:	3a04      	subs	r2, #4
   28f6e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28f70:	4643      	mov	r3, r8
   28f72:	4632      	mov	r2, r6
   28f74:	4621      	mov	r1, r4
   28f76:	4628      	mov	r0, r5
}
   28f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28f7c:	f7e5 babc 	b.w	e4f8 <bt_conn_send_cb>

00028f80 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   28f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28f82:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   28f84:	2202      	movs	r2, #2
   28f86:	2001      	movs	r0, #1
   28f88:	f7e5 ffc4 	bl	ef14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   28f8c:	4604      	mov	r4, r0
   28f8e:	b198      	cbz	r0, 28fb8 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   28f90:	2102      	movs	r1, #2
   28f92:	3008      	adds	r0, #8
   28f94:	f001 fd29 	bl	2a9ea <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   28f98:	2300      	movs	r3, #0
   28f9a:	7003      	strb	r3, [r0, #0]
   28f9c:	7043      	strb	r3, [r0, #1]
   28f9e:	4622      	mov	r2, r4
   28fa0:	9300      	str	r3, [sp, #0]
   28fa2:	2105      	movs	r1, #5
   28fa4:	4628      	mov	r0, r5
   28fa6:	f7ff ffd2 	bl	28f4e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   28faa:	b128      	cbz	r0, 28fb8 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   28fac:	4620      	mov	r0, r4
}
   28fae:	b003      	add	sp, #12
   28fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   28fb4:	f7f6 b95a 	b.w	1f26c <net_buf_unref>
}
   28fb8:	b003      	add	sp, #12
   28fba:	bd30      	pop	{r4, r5, pc}

00028fbc <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   28fbc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28fbe:	b138      	cbz	r0, 28fd0 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28fc0:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   28fc4:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28fc6:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28fca:	d001      	beq.n	28fd0 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   28fcc:	6880      	ldr	r0, [r0, #8]
   28fce:	e7f6      	b.n	28fbe <bt_l2cap_le_lookup_tx_cid+0x2>
}
   28fd0:	4770      	bx	lr

00028fd2 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   28fd2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28fd4:	b138      	cbz	r0, 28fe6 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28fd6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   28fda:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28fdc:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28fe0:	d001      	beq.n	28fe6 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   28fe2:	6880      	ldr	r0, [r0, #8]
   28fe4:	e7f6      	b.n	28fd4 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   28fe6:	4770      	bx	lr

00028fe8 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   28fe8:	4770      	bx	lr

00028fea <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   28fea:	4603      	mov	r3, r0
	return list->head;
   28fec:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   28fee:	b128      	cbz	r0, 28ffc <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28ff0:	6859      	ldr	r1, [r3, #4]
	return node->next;
   28ff2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   28ff4:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28ff6:	4288      	cmp	r0, r1
	list->tail = node;
   28ff8:	bf08      	it	eq
   28ffa:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   28ffc:	4770      	bx	lr

00028ffe <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   28ffe:	4603      	mov	r3, r0
	size_t bytes = 0;
   29000:	2000      	movs	r0, #0

	while (buf) {
   29002:	b903      	cbnz	r3, 29006 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   29004:	4770      	bx	lr
		bytes += buf->len;
   29006:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   29008:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2900a:	4410      	add	r0, r2
		buf = buf->frags;
   2900c:	e7f9      	b.n	29002 <net_buf_frags_len+0x4>

0002900e <att_sent>:
	if (chan->ops->sent) {
   2900e:	684b      	ldr	r3, [r1, #4]
   29010:	695b      	ldr	r3, [r3, #20]
{
   29012:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   29014:	b103      	cbz	r3, 29018 <att_sent+0xa>
		chan->ops->sent(chan);
   29016:	4718      	bx	r3
}
   29018:	4770      	bx	lr

0002901a <attr_read_type_cb>:
{
   2901a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2901c:	68d4      	ldr	r4, [r2, #12]
   2901e:	7823      	ldrb	r3, [r4, #0]
   29020:	3102      	adds	r1, #2
   29022:	b913      	cbnz	r3, 2902a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   29024:	7021      	strb	r1, [r4, #0]
	return true;
   29026:	2001      	movs	r0, #1
   29028:	e006      	b.n	29038 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2902a:	428b      	cmp	r3, r1
   2902c:	d0fb      	beq.n	29026 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2902e:	8983      	ldrh	r3, [r0, #12]
   29030:	3b02      	subs	r3, #2
   29032:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   29034:	2000      	movs	r0, #0
   29036:	6110      	str	r0, [r2, #16]
}
   29038:	bd10      	pop	{r4, pc}

0002903a <att_prepare_write_req>:
}
   2903a:	2006      	movs	r0, #6
   2903c:	4770      	bx	lr

0002903e <att_op_get_type>:
	switch (op) {
   2903e:	281e      	cmp	r0, #30
   29040:	d816      	bhi.n	29070 <att_op_get_type+0x32>
   29042:	b308      	cbz	r0, 29088 <att_op_get_type+0x4a>
   29044:	1e43      	subs	r3, r0, #1
   29046:	2b1d      	cmp	r3, #29
   29048:	d81e      	bhi.n	29088 <att_op_get_type+0x4a>
   2904a:	e8df f003 	tbb	[pc, r3]
   2904e:	2317      	.short	0x2317
   29050:	23172317 	.word	0x23172317
   29054:	23172317 	.word	0x23172317
   29058:	23172317 	.word	0x23172317
   2905c:	23172317 	.word	0x23172317
   29060:	231d1d17 	.word	0x231d1d17
   29064:	1d172317 	.word	0x1d172317
   29068:	0f1b1d19 	.word	0x0f1b1d19
   2906c:	2004      	movs	r0, #4
   2906e:	4770      	bx	lr
   29070:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   29074:	2b52      	cmp	r3, #82	; 0x52
   29076:	d107      	bne.n	29088 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   29078:	2000      	movs	r0, #0
}
   2907a:	4770      	bx	lr
		return ATT_RESPONSE;
   2907c:	2002      	movs	r0, #2
   2907e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   29080:	2003      	movs	r0, #3
   29082:	4770      	bx	lr
		return ATT_INDICATION;
   29084:	2005      	movs	r0, #5
   29086:	4770      	bx	lr
		return ATT_COMMAND;
   29088:	f010 0f40 	tst.w	r0, #64	; 0x40
   2908c:	bf0c      	ite	eq
   2908e:	2006      	moveq	r0, #6
   29090:	2000      	movne	r0, #0
   29092:	4770      	bx	lr
		return ATT_REQUEST;
   29094:	2001      	movs	r0, #1
   29096:	4770      	bx	lr

00029098 <att_notify_mult>:
{
   29098:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2909a:	6803      	ldr	r3, [r0, #0]
   2909c:	898a      	ldrh	r2, [r1, #12]
   2909e:	6818      	ldr	r0, [r3, #0]
   290a0:	6889      	ldr	r1, [r1, #8]
   290a2:	f7e8 f82b 	bl	110fc <bt_gatt_mult_notification>
}
   290a6:	2000      	movs	r0, #0
   290a8:	bd08      	pop	{r3, pc}

000290aa <att_notify>:
{
   290aa:	b538      	push	{r3, r4, r5, lr}
   290ac:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   290ae:	f101 0008 	add.w	r0, r1, #8
   290b2:	460c      	mov	r4, r1
   290b4:	f001 fcda 	bl	2aa6c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   290b8:	682d      	ldr	r5, [r5, #0]
   290ba:	89a3      	ldrh	r3, [r4, #12]
   290bc:	68a2      	ldr	r2, [r4, #8]
   290be:	4601      	mov	r1, r0
   290c0:	6828      	ldr	r0, [r5, #0]
   290c2:	f000 ff78 	bl	29fb6 <bt_gatt_notification>
}
   290c6:	2000      	movs	r0, #0
   290c8:	bd38      	pop	{r3, r4, r5, pc}

000290ca <att_chan_mtu_updated>:
{
   290ca:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   290cc:	6806      	ldr	r6, [r0, #0]
	return list->head;
   290ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   290d0:	b1e3      	cbz	r3, 2910c <att_chan_mtu_updated+0x42>
	return node->next;
   290d2:	681a      	ldr	r2, [r3, #0]
   290d4:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   290d8:	b10a      	cbz	r2, 290de <att_chan_mtu_updated+0x14>
   290da:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   290de:	2300      	movs	r3, #0
   290e0:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   290e2:	42a8      	cmp	r0, r5
   290e4:	d009      	beq.n	290fa <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   290e6:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   290ea:	42a1      	cmp	r1, r4
   290ec:	bf38      	it	cc
   290ee:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   290f0:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   290f4:	42a3      	cmp	r3, r4
   290f6:	bf38      	it	cc
   290f8:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   290fa:	b142      	cbz	r2, 2910e <att_chan_mtu_updated+0x44>
   290fc:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   29100:	b10c      	cbz	r4, 29106 <att_chan_mtu_updated+0x3c>
   29102:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   29106:	4615      	mov	r5, r2
   29108:	4622      	mov	r2, r4
   2910a:	e7ea      	b.n	290e2 <att_chan_mtu_updated+0x18>
   2910c:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2910e:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   29112:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   29116:	428c      	cmp	r4, r1
   29118:	d801      	bhi.n	2911e <att_chan_mtu_updated+0x54>
   2911a:	429a      	cmp	r2, r3
   2911c:	d909      	bls.n	29132 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2911e:	429a      	cmp	r2, r3
   29120:	bf38      	it	cc
   29122:	461a      	movcc	r2, r3
   29124:	42a1      	cmp	r1, r4
   29126:	6830      	ldr	r0, [r6, #0]
   29128:	bf38      	it	cc
   2912a:	4621      	movcc	r1, r4
}
   2912c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2912e:	f7e8 b897 	b.w	11260 <bt_gatt_att_max_mtu_changed>
}
   29132:	bc70      	pop	{r4, r5, r6}
   29134:	4770      	bx	lr

00029136 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   29136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29138:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2913c:	2300      	movs	r3, #0
   2913e:	9300      	str	r3, [sp, #0]
   29140:	461a      	mov	r2, r3
   29142:	f7e7 fc79 	bl	10a38 <bt_gatt_foreach_attr_type>
				  user_data);
}
   29146:	b005      	add	sp, #20
   29148:	f85d fb04 	ldr.w	pc, [sp], #4

0002914c <find_info_cb>:
{
   2914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2914e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   29150:	6817      	ldr	r7, [r2, #0]
{
   29152:	4605      	mov	r5, r0
   29154:	460e      	mov	r6, r1
   29156:	4614      	mov	r4, r2
	if (!data->rsp) {
   29158:	b963      	cbnz	r3, 29174 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2915a:	6850      	ldr	r0, [r2, #4]
   2915c:	2101      	movs	r1, #1
   2915e:	3008      	adds	r0, #8
   29160:	f001 fc43 	bl	2a9ea <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29164:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   29166:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29168:	781b      	ldrb	r3, [r3, #0]
   2916a:	2b00      	cmp	r3, #0
   2916c:	bf0c      	ite	eq
   2916e:	2301      	moveq	r3, #1
   29170:	2302      	movne	r3, #2
   29172:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   29174:	68a3      	ldr	r3, [r4, #8]
   29176:	781b      	ldrb	r3, [r3, #0]
   29178:	2b01      	cmp	r3, #1
   2917a:	d003      	beq.n	29184 <find_info_cb+0x38>
   2917c:	2b02      	cmp	r3, #2
   2917e:	d019      	beq.n	291b4 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   29180:	2000      	movs	r0, #0
   29182:	e016      	b.n	291b2 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29184:	682b      	ldr	r3, [r5, #0]
   29186:	781b      	ldrb	r3, [r3, #0]
   29188:	2b00      	cmp	r3, #0
   2918a:	d1f9      	bne.n	29180 <find_info_cb+0x34>
   2918c:	6860      	ldr	r0, [r4, #4]
   2918e:	2104      	movs	r1, #4
   29190:	3008      	adds	r0, #8
   29192:	f001 fc2a 	bl	2a9ea <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29196:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   29198:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2919a:	885b      	ldrh	r3, [r3, #2]
   2919c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2919e:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   291a0:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   291a2:	899b      	ldrh	r3, [r3, #12]
   291a4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   291a8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   291aa:	2804      	cmp	r0, #4
   291ac:	bf94      	ite	ls
   291ae:	2000      	movls	r0, #0
   291b0:	2001      	movhi	r0, #1
}
   291b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   291b4:	682b      	ldr	r3, [r5, #0]
   291b6:	781b      	ldrb	r3, [r3, #0]
   291b8:	2b02      	cmp	r3, #2
   291ba:	d1e1      	bne.n	29180 <find_info_cb+0x34>
   291bc:	6860      	ldr	r0, [r4, #4]
   291be:	2112      	movs	r1, #18
   291c0:	3008      	adds	r0, #8
   291c2:	f001 fc12 	bl	2a9ea <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   291c6:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   291c8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   291ca:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   291cc:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   291d0:	3101      	adds	r1, #1
   291d2:	f7ff f9f0 	bl	285b6 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   291d6:	6863      	ldr	r3, [r4, #4]
   291d8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   291dc:	899b      	ldrh	r3, [r3, #12]
   291de:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   291e0:	2812      	cmp	r0, #18
   291e2:	e7e3      	b.n	291ac <find_info_cb+0x60>

000291e4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   291e4:	68d0      	ldr	r0, [r2, #12]
   291e6:	7803      	ldrb	r3, [r0, #0]
   291e8:	3104      	adds	r1, #4
   291ea:	b913      	cbnz	r3, 291f2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   291ec:	7001      	strb	r1, [r0, #0]
	return true;
   291ee:	2001      	movs	r0, #1
}
   291f0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   291f2:	428b      	cmp	r3, r1
   291f4:	d0fb      	beq.n	291ee <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   291f6:	6891      	ldr	r1, [r2, #8]
   291f8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   291fa:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   291fc:	3b04      	subs	r3, #4
   291fe:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   29200:	6110      	str	r0, [r2, #16]
		return false;
   29202:	4770      	bx	lr

00029204 <chan_req_sent>:
	if (chan->req) {
   29204:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   29208:	b133      	cbz	r3, 29218 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2920a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2920e:	2300      	movs	r3, #0
   29210:	f500 7088 	add.w	r0, r0, #272	; 0x110
   29214:	f7fa be5a 	b.w	23ecc <k_work_reschedule>
}
   29218:	4770      	bx	lr

0002921a <write_cb>:
{
   2921a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2921c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2921e:	4601      	mov	r1, r0
{
   29220:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   29222:	222a      	movs	r2, #42	; 0x2a
   29224:	6820      	ldr	r0, [r4, #0]
   29226:	f000 fe17 	bl	29e58 <bt_gatt_check_perm>
   2922a:	4605      	mov	r5, r0
   2922c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2922e:	bb20      	cbnz	r0, 2927a <write_cb+0x60>
	if (!data->req) {
   29230:	7a23      	ldrb	r3, [r4, #8]
   29232:	b1ab      	cbz	r3, 29260 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   29234:	2b18      	cmp	r3, #24
   29236:	bf14      	ite	ne
   29238:	2300      	movne	r3, #0
   2923a:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2923c:	9301      	str	r3, [sp, #4]
   2923e:	8a63      	ldrh	r3, [r4, #18]
   29240:	9300      	str	r3, [sp, #0]
   29242:	68b7      	ldr	r7, [r6, #8]
   29244:	8a23      	ldrh	r3, [r4, #16]
   29246:	68e2      	ldr	r2, [r4, #12]
   29248:	6820      	ldr	r0, [r4, #0]
   2924a:	4631      	mov	r1, r6
   2924c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2924e:	1e03      	subs	r3, r0, #0
   29250:	db08      	blt.n	29264 <write_cb+0x4a>
   29252:	8a22      	ldrh	r2, [r4, #16]
   29254:	4293      	cmp	r3, r2
   29256:	d10e      	bne.n	29276 <write_cb+0x5c>
	data->err = 0U;
   29258:	2300      	movs	r3, #0
   2925a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2925c:	2501      	movs	r5, #1
   2925e:	e007      	b.n	29270 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   29260:	2302      	movs	r3, #2
   29262:	e7eb      	b.n	2923c <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   29264:	f113 0fff 	cmn.w	r3, #255	; 0xff
   29268:	d305      	bcc.n	29276 <write_cb+0x5c>
		return -err;
   2926a:	425b      	negs	r3, r3
   2926c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2926e:	7523      	strb	r3, [r4, #20]
}
   29270:	4628      	mov	r0, r5
   29272:	b003      	add	sp, #12
   29274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   29276:	230e      	movs	r3, #14
   29278:	e7f9      	b.n	2926e <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2927a:	2500      	movs	r5, #0
   2927c:	e7f8      	b.n	29270 <write_cb+0x56>

0002927e <z_log_msg2_static_create.constprop.0>:
   2927e:	2300      	movs	r3, #0
   29280:	f7fc bcae 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00029284 <att_chan_read>:
{
   29284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29288:	4680      	mov	r8, r0
   2928a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2928c:	4610      	mov	r0, r2
{
   2928e:	4699      	mov	r9, r3
   29290:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29292:	f7ff feb4 	bl	28ffe <net_buf_frags_len>
   29296:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2929a:	4283      	cmp	r3, r0
{
   2929c:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2929e:	d97a      	bls.n	29396 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   292a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   292a4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   292a6:	4630      	mov	r0, r6
   292a8:	f001 fb71 	bl	2a98e <net_buf_frag_last>
	size_t len, total = 0;
   292ac:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   292b0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   292b2:	4630      	mov	r0, r6
   292b4:	f7ff fea3 	bl	28ffe <net_buf_frags_len>
   292b8:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   292bc:	f105 0708 	add.w	r7, r5, #8
   292c0:	1a24      	subs	r4, r4, r0
   292c2:	4638      	mov	r0, r7
   292c4:	f001 fbde 	bl	2aa84 <net_buf_simple_tailroom>
   292c8:	4284      	cmp	r4, r0
   292ca:	d211      	bcs.n	292f0 <att_chan_read+0x6c>
   292cc:	4630      	mov	r0, r6
   292ce:	f7ff fe96 	bl	28ffe <net_buf_frags_len>
   292d2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   292d6:	1a24      	subs	r4, r4, r0
		if (!len) {
   292d8:	bb34      	cbnz	r4, 29328 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   292da:	79b0      	ldrb	r0, [r6, #6]
   292dc:	f7f5 ff02 	bl	1f0e4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   292e0:	2200      	movs	r2, #0
   292e2:	2300      	movs	r3, #0
   292e4:	f001 fb19 	bl	2a91a <net_buf_alloc_fixed>
			if (!frag) {
   292e8:	4605      	mov	r5, r0
   292ea:	b930      	cbnz	r0, 292fa <att_chan_read+0x76>
	return total;
   292ec:	4657      	mov	r7, sl
   292ee:	e02c      	b.n	2934a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   292f0:	4638      	mov	r0, r7
   292f2:	f001 fbc7 	bl	2aa84 <net_buf_simple_tailroom>
   292f6:	4604      	mov	r4, r0
   292f8:	e7ee      	b.n	292d8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   292fa:	4601      	mov	r1, r0
   292fc:	4630      	mov	r0, r6
   292fe:	f001 fb57 	bl	2a9b0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29302:	4630      	mov	r0, r6
   29304:	f7ff fe7b 	bl	28ffe <net_buf_frags_len>
   29308:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2930c:	f105 0708 	add.w	r7, r5, #8
   29310:	1a24      	subs	r4, r4, r0
   29312:	4638      	mov	r0, r7
   29314:	f001 fbb6 	bl	2aa84 <net_buf_simple_tailroom>
   29318:	4284      	cmp	r4, r0
   2931a:	d21a      	bcs.n	29352 <att_chan_read+0xce>
   2931c:	4630      	mov	r0, r6
   2931e:	f7ff fe6e 	bl	28ffe <net_buf_frags_len>
   29322:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   29326:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   29328:	68a9      	ldr	r1, [r5, #8]
   2932a:	89aa      	ldrh	r2, [r5, #12]
   2932c:	f8db 7004 	ldr.w	r7, [fp, #4]
   29330:	9803      	ldr	r0, [sp, #12]
   29332:	f8cd 9000 	str.w	r9, [sp]
   29336:	440a      	add	r2, r1
   29338:	b2a3      	uxth	r3, r4
   2933a:	4659      	mov	r1, fp
   2933c:	47b8      	blx	r7
		if (read < 0) {
   2933e:	1e07      	subs	r7, r0, #0
   29340:	da0c      	bge.n	2935c <att_chan_read+0xd8>
				return total;
   29342:	f1ba 0f00 	cmp.w	sl, #0
   29346:	bf18      	it	ne
   29348:	4657      	movne	r7, sl
}
   2934a:	4638      	mov	r0, r7
   2934c:	b005      	add	sp, #20
   2934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29352:	4638      	mov	r0, r7
   29354:	f001 fb96 	bl	2aa84 <net_buf_simple_tailroom>
   29358:	4604      	mov	r4, r0
   2935a:	e7e5      	b.n	29328 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2935c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2935e:	b993      	cbnz	r3, 29386 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   29360:	4639      	mov	r1, r7
   29362:	f105 0008 	add.w	r0, r5, #8
   29366:	f001 fb40 	bl	2a9ea <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2936a:	4630      	mov	r0, r6
   2936c:	f7ff fe47 	bl	28ffe <net_buf_frags_len>
   29370:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   29374:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29376:	4283      	cmp	r3, r0
		total += read;
   29378:	44ba      	add	sl, r7
		offset += read;
   2937a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2937e:	d9b5      	bls.n	292ec <att_chan_read+0x68>
   29380:	42a7      	cmp	r7, r4
   29382:	d096      	beq.n	292b2 <att_chan_read+0x2e>
   29384:	e7b2      	b.n	292ec <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   29386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2938a:	4639      	mov	r1, r7
   2938c:	4628      	mov	r0, r5
   2938e:	4798      	blx	r3
   29390:	2800      	cmp	r0, #0
   29392:	d1e5      	bne.n	29360 <att_chan_read+0xdc>
   29394:	e7aa      	b.n	292ec <att_chan_read+0x68>
		return 0;
   29396:	2700      	movs	r7, #0
   29398:	e7d7      	b.n	2934a <att_chan_read+0xc6>

0002939a <chan_req_send>:
{
   2939a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2939c:	688f      	ldr	r7, [r1, #8]
{
   2939e:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   293a0:	4638      	mov	r0, r7
   293a2:	f7ff fe2c 	bl	28ffe <net_buf_frags_len>
   293a6:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   293aa:	4283      	cmp	r3, r0
{
   293ac:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   293ae:	d30d      	bcc.n	293cc <chan_req_send+0x32>
	req->buf = NULL;
   293b0:	2600      	movs	r6, #0
	chan->req = req;
   293b2:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   293b6:	4632      	mov	r2, r6
	req->buf = NULL;
   293b8:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   293ba:	4620      	mov	r0, r4
   293bc:	4639      	mov	r1, r7
   293be:	f7e6 f997 	bl	f6f0 <chan_send>
	if (err) {
   293c2:	b110      	cbz	r0, 293ca <chan_req_send+0x30>
		req->buf = buf;
   293c4:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   293c6:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   293ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   293cc:	f06f 0079 	mvn.w	r0, #121	; 0x79
   293d0:	e7fb      	b.n	293ca <chan_req_send+0x30>

000293d2 <process_queue>:
{
   293d2:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   293d4:	2200      	movs	r2, #0
{
   293d6:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   293d8:	2300      	movs	r3, #0
   293da:	4608      	mov	r0, r1
{
   293dc:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   293de:	f001 faa1 	bl	2a924 <net_buf_get>
	if (buf) {
   293e2:	4605      	mov	r5, r0
   293e4:	b160      	cbz	r0, 29400 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   293e6:	4601      	mov	r1, r0
   293e8:	2200      	movs	r2, #0
   293ea:	4620      	mov	r0, r4
   293ec:	f7e6 f980 	bl	f6f0 <chan_send>
		if (err) {
   293f0:	4604      	mov	r4, r0
   293f2:	b118      	cbz	r0, 293fc <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   293f4:	4629      	mov	r1, r5
   293f6:	4630      	mov	r0, r6
   293f8:	f002 f927 	bl	2b64a <k_queue_prepend>
}
   293fc:	4620      	mov	r0, r4
   293fe:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   29400:	f06f 0401 	mvn.w	r4, #1
   29404:	e7fa      	b.n	293fc <process_queue+0x2a>

00029406 <bt_att_chan_send_rsp>:
{
   29406:	b538      	push	{r3, r4, r5, lr}
   29408:	4604      	mov	r4, r0
   2940a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2940c:	f7e6 f970 	bl	f6f0 <chan_send>
	if (err) {
   29410:	b130      	cbz	r0, 29420 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   29412:	4629      	mov	r1, r5
   29414:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   29418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2941c:	f001 baa6 	b.w	2a96c <net_buf_put>
}
   29420:	bd38      	pop	{r3, r4, r5, pc}

00029422 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29422:	b510      	push	{r4, lr}
	return list->head;
   29424:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29426:	2200      	movs	r2, #0
   29428:	b153      	cbz	r3, 29440 <sys_slist_find_and_remove.isra.0+0x1e>
   2942a:	428b      	cmp	r3, r1
   2942c:	d10e      	bne.n	2944c <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2942e:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   29430:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   29432:	b932      	cbnz	r2, 29442 <sys_slist_find_and_remove.isra.0+0x20>
   29434:	42a1      	cmp	r1, r4
	list->head = node;
   29436:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29438:	d100      	bne.n	2943c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2943a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2943c:	2300      	movs	r3, #0
   2943e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29440:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   29442:	42a1      	cmp	r1, r4
	parent->next = child;
   29444:	6013      	str	r3, [r2, #0]
	list->tail = node;
   29446:	bf08      	it	eq
   29448:	6042      	streq	r2, [r0, #4]
}
   2944a:	e7f7      	b.n	2943c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2944c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2944e:	681b      	ldr	r3, [r3, #0]
   29450:	e7ea      	b.n	29428 <sys_slist_find_and_remove.isra.0+0x6>

00029452 <att_exec_write_req>:
   29452:	2006      	movs	r0, #6
   29454:	4770      	bx	lr

00029456 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29456:	30f0      	adds	r0, #240	; 0xf0
   29458:	f3bf 8f5b 	dmb	ish
   2945c:	e850 3f00 	ldrex	r3, [r0]
   29460:	f023 0301 	bic.w	r3, r3, #1
   29464:	e840 3200 	strex	r2, r3, [r0]
   29468:	2a00      	cmp	r2, #0
   2946a:	d1f7      	bne.n	2945c <chan_rsp_sent+0x6>
   2946c:	f3bf 8f5b 	dmb	ish
}
   29470:	4770      	bx	lr

00029472 <chan_cfm_sent>:
   29472:	30f0      	adds	r0, #240	; 0xf0
   29474:	f3bf 8f5b 	dmb	ish
   29478:	e850 3f00 	ldrex	r3, [r0]
   2947c:	f023 0302 	bic.w	r3, r3, #2
   29480:	e840 3200 	strex	r2, r3, [r0]
   29484:	2a00      	cmp	r2, #0
   29486:	d1f7      	bne.n	29478 <chan_cfm_sent+0x6>
   29488:	f3bf 8f5b 	dmb	ish
}
   2948c:	4770      	bx	lr

0002948e <read_cb>:
{
   2948e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   29492:	f8d2 8000 	ldr.w	r8, [r2]
{
   29496:	4606      	mov	r6, r0
	data->err = 0x00;
   29498:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2949a:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2949e:	7317      	strb	r7, [r2, #12]
{
   294a0:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   294a2:	4631      	mov	r1, r6
   294a4:	2215      	movs	r2, #21
   294a6:	f000 fcd7 	bl	29e58 <bt_gatt_check_perm>
   294aa:	4604      	mov	r4, r0
   294ac:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   294ae:	b9a0      	cbnz	r0, 294da <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   294b0:	e9cd 0000 	strd	r0, r0, [sp]
   294b4:	88ab      	ldrh	r3, [r5, #4]
   294b6:	68aa      	ldr	r2, [r5, #8]
   294b8:	4631      	mov	r1, r6
   294ba:	4640      	mov	r0, r8
   294bc:	f7ff fee2 	bl	29284 <att_chan_read>
	if (ret < 0) {
   294c0:	1e03      	subs	r3, r0, #0
   294c2:	da0c      	bge.n	294de <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   294c4:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   294c8:	bf26      	itte	cs
   294ca:	425b      	negcs	r3, r3
   294cc:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   294ce:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   294d0:	732b      	strb	r3, [r5, #12]
}
   294d2:	4620      	mov	r0, r4
   294d4:	b002      	add	sp, #8
   294d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   294da:	463c      	mov	r4, r7
   294dc:	e7f9      	b.n	294d2 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   294de:	2401      	movs	r4, #1
   294e0:	e7f7      	b.n	294d2 <read_cb+0x44>

000294e2 <bt_att_sent>:
{
   294e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   294e4:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   294e8:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   294ec:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   294ee:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   294f2:	b10b      	cbz	r3, 294f8 <bt_att_sent+0x16>
		chan->sent(chan);
   294f4:	4638      	mov	r0, r7
   294f6:	4798      	blx	r3
   294f8:	f3bf 8f5b 	dmb	ish
   294fc:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   29500:	e853 2f00 	ldrex	r2, [r3]
   29504:	f022 0210 	bic.w	r2, r2, #16
   29508:	e843 2100 	strex	r1, r2, [r3]
   2950c:	2900      	cmp	r1, #0
   2950e:	d1f7      	bne.n	29500 <bt_att_sent+0x1e>
   29510:	f3bf 8f5b 	dmb	ish
	if (!att) {
   29514:	b30c      	cbz	r4, 2955a <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   29516:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2951a:	b98b      	cbnz	r3, 29540 <bt_att_sent+0x5e>
   2951c:	6863      	ldr	r3, [r4, #4]
   2951e:	b17b      	cbz	r3, 29540 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   29520:	1d20      	adds	r0, r4, #4
   29522:	f7ff fd62 	bl	28fea <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29526:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   29528:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2952a:	4638      	mov	r0, r7
   2952c:	f7ff ff35 	bl	2939a <chan_req_send>
   29530:	2800      	cmp	r0, #0
   29532:	da12      	bge.n	2955a <bt_att_sent+0x78>
	parent->next = child;
   29534:	6863      	ldr	r3, [r4, #4]
   29536:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   29538:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2953a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2953c:	b903      	cbnz	r3, 29540 <bt_att_sent+0x5e>
	list->tail = node;
   2953e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   29540:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   29544:	4638      	mov	r0, r7
   29546:	f7ff ff44 	bl	293d2 <process_queue>
	if (!err) {
   2954a:	b130      	cbz	r0, 2955a <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2954c:	f104 010c 	add.w	r1, r4, #12
   29550:	4638      	mov	r0, r7
}
   29552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   29556:	f7ff bf3c 	b.w	293d2 <process_queue>
}
   2955a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002955c <att_req_send_process>:
{
   2955c:	b570      	push	{r4, r5, r6, lr}
   2955e:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   29560:	3004      	adds	r0, #4
   29562:	f7ff fd42 	bl	28fea <sys_slist_get>
	if (!node) {
   29566:	4605      	mov	r5, r0
   29568:	b1b8      	cbz	r0, 2959a <att_req_send_process+0x3e>
	return list->head;
   2956a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2956c:	b14b      	cbz	r3, 29582 <att_req_send_process+0x26>
	return node->next;
   2956e:	681e      	ldr	r6, [r3, #0]
   29570:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   29574:	b10e      	cbz	r6, 2957a <att_req_send_process+0x1e>
   29576:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   2957a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2957e:	b13b      	cbz	r3, 29590 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29580:	b966      	cbnz	r6, 2959c <att_req_send_process+0x40>
	parent->next = child;
   29582:	6863      	ldr	r3, [r4, #4]
   29584:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   29586:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   29588:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2958a:	b933      	cbnz	r3, 2959a <att_req_send_process+0x3e>
	list->tail = node;
   2958c:	60a5      	str	r5, [r4, #8]
}
   2958e:	e004      	b.n	2959a <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   29590:	4629      	mov	r1, r5
   29592:	f7ff ff02 	bl	2939a <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29596:	2800      	cmp	r0, #0
   29598:	dbf2      	blt.n	29580 <att_req_send_process+0x24>
}
   2959a:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   2959c:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   295a0:	b10b      	cbz	r3, 295a6 <att_req_send_process+0x4a>
   295a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   295a6:	4630      	mov	r0, r6
   295a8:	461e      	mov	r6, r3
   295aa:	e7e6      	b.n	2957a <att_req_send_process+0x1e>

000295ac <bt_att_status>:
{
   295ac:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   295ae:	f3bf 8f5b 	dmb	ish
   295b2:	680b      	ldr	r3, [r1, #0]
   295b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   295b8:	07db      	lsls	r3, r3, #31
{
   295ba:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   295bc:	d519      	bpl.n	295f2 <bt_att_status+0x46>
	if (!chan->att) {
   295be:	f850 0c08 	ldr.w	r0, [r0, #-8]
   295c2:	b1b0      	cbz	r0, 295f2 <bt_att_status+0x46>
	if (chan->req) {
   295c4:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   295c8:	b99b      	cbnz	r3, 295f2 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   295ca:	3004      	adds	r0, #4
   295cc:	f7ff fd0d 	bl	28fea <sys_slist_get>
	if (!node) {
   295d0:	4604      	mov	r4, r0
   295d2:	b170      	cbz	r0, 295f2 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   295d4:	4601      	mov	r1, r0
   295d6:	f1a5 0008 	sub.w	r0, r5, #8
   295da:	f7ff fede 	bl	2939a <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   295de:	2800      	cmp	r0, #0
   295e0:	da07      	bge.n	295f2 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   295e2:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   295e6:	685a      	ldr	r2, [r3, #4]
   295e8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   295ea:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   295ec:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   295ee:	b902      	cbnz	r2, 295f2 <bt_att_status+0x46>
	list->tail = node;
   295f0:	609c      	str	r4, [r3, #8]
}
   295f2:	bd38      	pop	{r3, r4, r5, pc}

000295f4 <att_write_req>:
{
   295f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   295f6:	460c      	mov	r4, r1
   295f8:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   295fa:	f101 0008 	add.w	r0, r1, #8
   295fe:	f001 fa35 	bl	2aa6c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   29602:	89a2      	ldrh	r2, [r4, #12]
   29604:	9201      	str	r2, [sp, #4]
   29606:	68a2      	ldr	r2, [r4, #8]
   29608:	9200      	str	r2, [sp, #0]
   2960a:	4603      	mov	r3, r0
   2960c:	2213      	movs	r2, #19
   2960e:	2112      	movs	r1, #18
   29610:	4628      	mov	r0, r5
   29612:	f7e6 facf 	bl	fbb4 <att_write_rsp.constprop.0>
}
   29616:	b003      	add	sp, #12
   29618:	bd30      	pop	{r4, r5, pc}

0002961a <att_write_cmd>:
{
   2961a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2961c:	460c      	mov	r4, r1
   2961e:	4605      	mov	r5, r0
   29620:	f101 0008 	add.w	r0, r1, #8
   29624:	f001 fa22 	bl	2aa6c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   29628:	89a2      	ldrh	r2, [r4, #12]
   2962a:	9201      	str	r2, [sp, #4]
   2962c:	68a2      	ldr	r2, [r4, #8]
   2962e:	9200      	str	r2, [sp, #0]
   29630:	2200      	movs	r2, #0
   29632:	4603      	mov	r3, r0
   29634:	4611      	mov	r1, r2
   29636:	4628      	mov	r0, r5
   29638:	f7e6 fabc 	bl	fbb4 <att_write_rsp.constprop.0>
}
   2963c:	b003      	add	sp, #12
   2963e:	bd30      	pop	{r4, r5, pc}

00029640 <att_read_blob_req>:
{
   29640:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   29642:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   29644:	8813      	ldrh	r3, [r2, #0]
   29646:	8852      	ldrh	r2, [r2, #2]
   29648:	9200      	str	r2, [sp, #0]
   2964a:	210c      	movs	r1, #12
   2964c:	220d      	movs	r2, #13
   2964e:	f7e6 fc6d 	bl	ff2c <att_read_rsp>
}
   29652:	b003      	add	sp, #12
   29654:	f85d fb04 	ldr.w	pc, [sp], #4

00029658 <att_read_req>:
{
   29658:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2965a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2965c:	2200      	movs	r2, #0
   2965e:	881b      	ldrh	r3, [r3, #0]
   29660:	9200      	str	r2, [sp, #0]
   29662:	210a      	movs	r1, #10
   29664:	220b      	movs	r2, #11
   29666:	f7e6 fc61 	bl	ff2c <att_read_rsp>
}
   2966a:	b003      	add	sp, #12
   2966c:	f85d fb04 	ldr.w	pc, [sp], #4

00029670 <bt_att_init>:
	bt_gatt_init();
   29670:	f7e7 b95c 	b.w	1092c <bt_gatt_init>

00029674 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29674:	898a      	ldrh	r2, [r1, #12]
   29676:	6889      	ldr	r1, [r1, #8]
   29678:	2300      	movs	r3, #0
   2967a:	f7e6 be1b 	b.w	102b4 <att_handle_rsp>

0002967e <att_handle_find_type_rsp>:
   2967e:	f7ff bff9 	b.w	29674 <att_handle_find_info_rsp>

00029682 <att_handle_read_type_rsp>:
   29682:	f7ff bff7 	b.w	29674 <att_handle_find_info_rsp>

00029686 <att_handle_read_rsp>:
   29686:	f7ff bff5 	b.w	29674 <att_handle_find_info_rsp>

0002968a <att_handle_read_blob_rsp>:
   2968a:	f7ff bff3 	b.w	29674 <att_handle_find_info_rsp>

0002968e <att_handle_read_mult_rsp>:
   2968e:	f7ff bff1 	b.w	29674 <att_handle_find_info_rsp>

00029692 <att_handle_read_group_rsp>:
   29692:	f7ff bfef 	b.w	29674 <att_handle_find_info_rsp>

00029696 <att_handle_write_rsp>:
   29696:	f7ff bfed 	b.w	29674 <att_handle_find_info_rsp>

0002969a <att_handle_prepare_write_rsp>:
   2969a:	f7ff bfeb 	b.w	29674 <att_handle_find_info_rsp>

0002969e <att_handle_exec_write_rsp>:
   2969e:	f7ff bfe9 	b.w	29674 <att_handle_find_info_rsp>

000296a2 <att_confirm>:
   296a2:	f7ff bfe7 	b.w	29674 <att_handle_find_info_rsp>

000296a6 <att_mtu_rsp>:
{
   296a6:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   296a8:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   296aa:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   296ac:	2b16      	cmp	r3, #22
{
   296ae:	4604      	mov	r4, r0
   296b0:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   296b2:	d806      	bhi.n	296c2 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   296b4:	2200      	movs	r2, #0
   296b6:	2304      	movs	r3, #4
   296b8:	4611      	mov	r1, r2
}
   296ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   296be:	f7e6 bdf9 	b.w	102b4 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   296c2:	2b41      	cmp	r3, #65	; 0x41
   296c4:	bf28      	it	cs
   296c6:	2341      	movcs	r3, #65	; 0x41
   296c8:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   296cc:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   296d0:	f7ff fcfb 	bl	290ca <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   296d4:	89aa      	ldrh	r2, [r5, #12]
   296d6:	2300      	movs	r3, #0
   296d8:	4631      	mov	r1, r6
   296da:	4620      	mov	r0, r4
   296dc:	e7ed      	b.n	296ba <att_mtu_rsp+0x14>

000296de <bt_att_encrypt_change>:
	if (!att_chan->att) {
   296de:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   296e2:	b570      	push	{r4, r5, r6, lr}
   296e4:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   296e6:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   296ea:	2b00      	cmp	r3, #0
   296ec:	d037      	beq.n	2975e <bt_att_encrypt_change+0x80>
	if (hci_status) {
   296ee:	b171      	cbz	r1, 2970e <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   296f0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   296f4:	2b00      	cmp	r3, #0
   296f6:	d032      	beq.n	2975e <bt_att_encrypt_change+0x80>
   296f8:	7c1b      	ldrb	r3, [r3, #16]
   296fa:	07da      	lsls	r2, r3, #31
   296fc:	d52f      	bpl.n	2975e <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   296fe:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   29700:	2200      	movs	r2, #0
   29702:	4630      	mov	r0, r6
   29704:	4611      	mov	r1, r2
}
   29706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2970a:	f7e6 bdd3 	b.w	102b4 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2970e:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   29710:	4628      	mov	r0, r5
   29712:	f7e7 fdb9 	bl	11288 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   29716:	7a6b      	ldrb	r3, [r5, #9]
   29718:	2b01      	cmp	r3, #1
   2971a:	d020      	beq.n	2975e <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2971c:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   29720:	b1ec      	cbz	r4, 2975e <bt_att_encrypt_change+0x80>
   29722:	7c23      	ldrb	r3, [r4, #16]
   29724:	07db      	lsls	r3, r3, #31
   29726:	d51a      	bpl.n	2975e <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   29728:	68e3      	ldr	r3, [r4, #12]
   2972a:	2b00      	cmp	r3, #0
   2972c:	d0e7      	beq.n	296fe <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2972e:	6962      	ldr	r2, [r4, #20]
   29730:	7c61      	ldrb	r1, [r4, #17]
   29732:	4630      	mov	r0, r6
   29734:	f7e6 f8d4 	bl	f8e0 <bt_att_chan_create_pdu>
	if (!buf) {
   29738:	4605      	mov	r5, r0
   2973a:	b140      	cbz	r0, 2974e <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2973c:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   29740:	68e3      	ldr	r3, [r4, #12]
   29742:	4798      	blx	r3
   29744:	4602      	mov	r2, r0
   29746:	b120      	cbz	r0, 29752 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   29748:	4628      	mov	r0, r5
   2974a:	f7f5 fd8f 	bl	1f26c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2974e:	230e      	movs	r3, #14
   29750:	e7d6      	b.n	29700 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   29752:	4629      	mov	r1, r5
   29754:	4630      	mov	r0, r6
   29756:	f7e5 ffcb 	bl	f6f0 <chan_send>
   2975a:	2800      	cmp	r0, #0
   2975c:	d1f4      	bne.n	29748 <bt_att_encrypt_change+0x6a>
}
   2975e:	bd70      	pop	{r4, r5, r6, pc}

00029760 <bt_att_send>:
{
   29760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29764:	4607      	mov	r7, r0
   29766:	460d      	mov	r5, r1
   29768:	4616      	mov	r6, r2
   2976a:	4698      	mov	r8, r3
	att = att_get(conn);
   2976c:	f7e5 febc 	bl	f4e8 <att_get>
	if (!att) {
   29770:	4604      	mov	r4, r0
   29772:	b938      	cbnz	r0, 29784 <bt_att_send+0x24>
		net_buf_unref(buf);
   29774:	4628      	mov	r0, r5
   29776:	f7f5 fd79 	bl	1f26c <net_buf_unref>
		return -ENOTCONN;
   2977a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2977e:	b002      	add	sp, #8
   29780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   29784:	b146      	cbz	r6, 29798 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   29786:	f8cd 8000 	str.w	r8, [sp]
   2978a:	4633      	mov	r3, r6
   2978c:	462a      	mov	r2, r5
   2978e:	2104      	movs	r1, #4
   29790:	4638      	mov	r0, r7
   29792:	f7ff fbdc 	bl	28f4e <bt_l2cap_send_cb>
   29796:	e7f2      	b.n	2977e <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   29798:	f100 060c 	add.w	r6, r0, #12
   2979c:	4629      	mov	r1, r5
   2979e:	4630      	mov	r0, r6
   297a0:	f001 f8e4 	bl	2a96c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   297a4:	2200      	movs	r2, #0
   297a6:	2300      	movs	r3, #0
   297a8:	4630      	mov	r0, r6
   297aa:	f001 f8bb 	bl	2a924 <net_buf_get>
	if (!buf) {
   297ae:	4605      	mov	r5, r0
   297b0:	b908      	cbnz	r0, 297b6 <bt_att_send+0x56>
	return 0;
   297b2:	2000      	movs	r0, #0
   297b4:	e7e3      	b.n	2977e <bt_att_send+0x1e>
	return list->head;
   297b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   297b8:	b1a3      	cbz	r3, 297e4 <bt_att_send+0x84>
	return node->next;
   297ba:	681c      	ldr	r4, [r3, #0]
   297bc:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   297c0:	b10c      	cbz	r4, 297c6 <bt_att_send+0x66>
   297c2:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   297c6:	2200      	movs	r2, #0
   297c8:	4629      	mov	r1, r5
   297ca:	f7e5 ff91 	bl	f6f0 <chan_send>
		if (err >= 0) {
   297ce:	2800      	cmp	r0, #0
   297d0:	daef      	bge.n	297b2 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   297d2:	b13c      	cbz	r4, 297e4 <bt_att_send+0x84>
   297d4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   297d8:	b10b      	cbz	r3, 297de <bt_att_send+0x7e>
   297da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   297de:	4620      	mov	r0, r4
   297e0:	461c      	mov	r4, r3
   297e2:	e7f0      	b.n	297c6 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   297e4:	4629      	mov	r1, r5
   297e6:	4630      	mov	r0, r6
   297e8:	f001 ff2f 	bl	2b64a <k_queue_prepend>
   297ec:	e7e1      	b.n	297b2 <bt_att_send+0x52>

000297ee <bt_att_req_send>:
{
   297ee:	b510      	push	{r4, lr}
   297f0:	460c      	mov	r4, r1
	att = att_get(conn);
   297f2:	f7e5 fe79 	bl	f4e8 <att_get>
	if (!att) {
   297f6:	b160      	cbz	r0, 29812 <bt_att_req_send+0x24>
	parent->next = child;
   297f8:	2300      	movs	r3, #0
   297fa:	6023      	str	r3, [r4, #0]
	return list->tail;
   297fc:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   297fe:	b92b      	cbnz	r3, 2980c <bt_att_req_send+0x1e>
	list->head = node;
   29800:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   29804:	f7ff feaa 	bl	2955c <att_req_send_process>
	return 0;
   29808:	2000      	movs	r0, #0
}
   2980a:	bd10      	pop	{r4, pc}
	parent->next = child;
   2980c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2980e:	6084      	str	r4, [r0, #8]
}
   29810:	e7f8      	b.n	29804 <bt_att_req_send+0x16>
		return -ENOTCONN;
   29812:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29816:	e7f8      	b.n	2980a <bt_att_req_send+0x1c>

00029818 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   29818:	b510      	push	{r4, lr}
   2981a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2981c:	f7e5 fe64 	bl	f4e8 <att_get>
	if (!att) {
   29820:	b198      	cbz	r0, 2984a <bt_att_find_req_by_user_data+0x32>
	return list->head;
   29822:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   29824:	b14b      	cbz	r3, 2983a <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   29826:	f853 2c50 	ldr.w	r2, [r3, #-80]
   2982a:	6991      	ldr	r1, [r2, #24]
   2982c:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2982e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   29832:	d009      	beq.n	29848 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   29834:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   29838:	e7f4      	b.n	29824 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   2983a:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2983c:	b128      	cbz	r0, 2984a <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   2983e:	6983      	ldr	r3, [r0, #24]
   29840:	42a3      	cmp	r3, r4
   29842:	d002      	beq.n	2984a <bt_att_find_req_by_user_data+0x32>
	return node->next;
   29844:	6800      	ldr	r0, [r0, #0]
   29846:	e7f9      	b.n	2983c <bt_att_find_req_by_user_data+0x24>
   29848:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   2984a:	bd10      	pop	{r4, pc}

0002984c <gatt_ccc_changed>:
{
   2984c:	460b      	mov	r3, r1
   2984e:	8909      	ldrh	r1, [r1, #8]
   29850:	8a5a      	ldrh	r2, [r3, #18]
   29852:	4291      	cmp	r1, r2
   29854:	bf38      	it	cc
   29856:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   29858:	8a9a      	ldrh	r2, [r3, #20]
   2985a:	428a      	cmp	r2, r1
   2985c:	d003      	beq.n	29866 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2985e:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   29860:	699b      	ldr	r3, [r3, #24]
   29862:	b103      	cbz	r3, 29866 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   29864:	4718      	bx	r3
}
   29866:	4770      	bx	lr

00029868 <gatt_indicate_rsp>:
{
   29868:	b510      	push	{r4, lr}
   2986a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2986c:	68a3      	ldr	r3, [r4, #8]
{
   2986e:	460a      	mov	r2, r1
	if (params->func) {
   29870:	b10b      	cbz	r3, 29876 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   29872:	4621      	mov	r1, r4
   29874:	4798      	blx	r3
	params->_ref--;
   29876:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29878:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2987a:	3b01      	subs	r3, #1
   2987c:	b2db      	uxtb	r3, r3
   2987e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29880:	b122      	cbz	r2, 2988c <gatt_indicate_rsp+0x24>
   29882:	b91b      	cbnz	r3, 2988c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   29884:	4620      	mov	r0, r4
}
   29886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2988a:	4710      	bx	r2
}
   2988c:	bd10      	pop	{r4, pc}

0002988e <match_uuid>:
	data->attr = attr;
   2988e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29890:	8091      	strh	r1, [r2, #4]
}
   29892:	2000      	movs	r0, #0
   29894:	4770      	bx	lr

00029896 <atomic_get>:
   29896:	f3bf 8f5b 	dmb	ish
   2989a:	6800      	ldr	r0, [r0, #0]
   2989c:	f3bf 8f5b 	dmb	ish
}
   298a0:	4770      	bx	lr

000298a2 <gen_hash_m>:
{
   298a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   298a4:	6807      	ldr	r7, [r0, #0]
   298a6:	783d      	ldrb	r5, [r7, #0]
{
   298a8:	b089      	sub	sp, #36	; 0x24
   298aa:	4606      	mov	r6, r0
   298ac:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   298ae:	b10d      	cbz	r5, 298b4 <gen_hash_m+0x12>
	switch (u16->val) {
   298b0:	2501      	movs	r5, #1
   298b2:	e014      	b.n	298de <gen_hash_m+0x3c>
   298b4:	887b      	ldrh	r3, [r7, #2]
   298b6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   298ba:	d004      	beq.n	298c6 <gen_hash_m+0x24>
   298bc:	d812      	bhi.n	298e4 <gen_hash_m+0x42>
   298be:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   298c2:	2b03      	cmp	r3, #3
   298c4:	d8f4      	bhi.n	298b0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   298c6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   298ca:	2202      	movs	r2, #2
   298cc:	f10d 010a 	add.w	r1, sp, #10
   298d0:	4620      	mov	r0, r4
   298d2:	f7fe fc31 	bl	28138 <tc_cmac_update>
   298d6:	b9e0      	cbnz	r0, 29912 <gen_hash_m+0x70>
			state->err = -EINVAL;
   298d8:	f06f 0315 	mvn.w	r3, #21
   298dc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   298de:	4628      	mov	r0, r5
   298e0:	b009      	add	sp, #36	; 0x24
   298e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   298e4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   298e8:	33ff      	adds	r3, #255	; 0xff
   298ea:	b29b      	uxth	r3, r3
   298ec:	2b04      	cmp	r3, #4
   298ee:	d8df      	bhi.n	298b0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   298f0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   298f4:	2202      	movs	r2, #2
   298f6:	f10d 010a 	add.w	r1, sp, #10
   298fa:	4620      	mov	r0, r4
   298fc:	f7fe fc1c 	bl	28138 <tc_cmac_update>
   29900:	2800      	cmp	r0, #0
   29902:	d0e9      	beq.n	298d8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   29904:	887b      	ldrh	r3, [r7, #2]
   29906:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2990a:	2202      	movs	r2, #2
   2990c:	f10d 010a 	add.w	r1, sp, #10
   29910:	e016      	b.n	29940 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   29912:	887b      	ldrh	r3, [r7, #2]
   29914:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29918:	2202      	movs	r2, #2
   2991a:	f10d 010a 	add.w	r1, sp, #10
   2991e:	4620      	mov	r0, r4
   29920:	f7fe fc0a 	bl	28138 <tc_cmac_update>
   29924:	2800      	cmp	r0, #0
   29926:	d0d7      	beq.n	298d8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   29928:	2000      	movs	r0, #0
   2992a:	aa03      	add	r2, sp, #12
   2992c:	6877      	ldr	r7, [r6, #4]
   2992e:	9000      	str	r0, [sp, #0]
   29930:	2313      	movs	r3, #19
   29932:	4631      	mov	r1, r6
   29934:	47b8      	blx	r7
		if (len < 0) {
   29936:	1e02      	subs	r2, r0, #0
   29938:	da01      	bge.n	2993e <gen_hash_m+0x9c>
			state->err = len;
   2993a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2993c:	e7cf      	b.n	298de <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2993e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29940:	4620      	mov	r0, r4
   29942:	f7fe fbf9 	bl	28138 <tc_cmac_update>
   29946:	2800      	cmp	r0, #0
   29948:	d1b2      	bne.n	298b0 <gen_hash_m+0xe>
   2994a:	e7c5      	b.n	298d8 <gen_hash_m+0x36>

0002994c <bt_addr_le_cmp>:
   2994c:	2207      	movs	r2, #7
   2994e:	f7fe be09 	b.w	28564 <memcmp>

00029952 <find_ccc_cfg>:
{
   29952:	b573      	push	{r0, r1, r4, r5, r6, lr}
						    &cfg->peer)) {
   29954:	1c4a      	adds	r2, r1, #1
{
   29956:	460c      	mov	r4, r1
		if (conn) {
   29958:	4605      	mov	r5, r0
   2995a:	b948      	cbnz	r0, 29970 <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2995c:	9000      	str	r0, [sp, #0]
   2995e:	4669      	mov	r1, sp
   29960:	f8cd 0003 	str.w	r0, [sp, #3]
   29964:	4610      	mov	r0, r2
   29966:	f7ff fff1 	bl	2994c <bt_addr_le_cmp>
   2996a:	b930      	cbnz	r0, 2997a <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2996c:	4626      	mov	r6, r4
   2996e:	e00e      	b.n	2998e <find_ccc_cfg+0x3c>
   29970:	7809      	ldrb	r1, [r1, #0]
   29972:	f7ff fa08 	bl	28d86 <bt_conn_is_peer_addr_le>
   29976:	2800      	cmp	r0, #0
   29978:	d1f8      	bne.n	2996c <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2997a:	f104 060a 	add.w	r6, r4, #10
						    &cfg->peer)) {
   2997e:	f104 020b 	add.w	r2, r4, #11
		if (conn) {
   29982:	b13d      	cbz	r5, 29994 <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   29984:	7aa1      	ldrb	r1, [r4, #10]
   29986:	4628      	mov	r0, r5
   29988:	f7ff f9fd 	bl	28d86 <bt_conn_is_peer_addr_le>
   2998c:	b158      	cbz	r0, 299a6 <find_ccc_cfg+0x54>
}
   2998e:	4630      	mov	r0, r6
   29990:	b002      	add	sp, #8
   29992:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   29994:	4669      	mov	r1, sp
   29996:	4610      	mov	r0, r2
   29998:	9500      	str	r5, [sp, #0]
   2999a:	f8cd 5003 	str.w	r5, [sp, #3]
   2999e:	f7ff ffd5 	bl	2994c <bt_addr_le_cmp>
   299a2:	2800      	cmp	r0, #0
   299a4:	d0f3      	beq.n	2998e <find_ccc_cfg+0x3c>
	return NULL;
   299a6:	2600      	movs	r6, #0
   299a8:	e7f1      	b.n	2998e <find_ccc_cfg+0x3c>

000299aa <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   299aa:	2207      	movs	r2, #7
   299ac:	f7fe be03 	b.w	285b6 <memcpy>

000299b0 <gatt_sub_free>:
{
   299b0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   299b2:	2300      	movs	r3, #0
   299b4:	4669      	mov	r1, sp
   299b6:	3001      	adds	r0, #1
   299b8:	9300      	str	r3, [sp, #0]
   299ba:	f8cd 3003 	str.w	r3, [sp, #3]
   299be:	f7ff fff4 	bl	299aa <bt_addr_le_copy>
}
   299c2:	b003      	add	sp, #12
   299c4:	f85d fb04 	ldr.w	pc, [sp], #4

000299c8 <gatt_sub_remove>:
{
   299c8:	b570      	push	{r4, r5, r6, lr}
   299ca:	460c      	mov	r4, r1
	if (params) {
   299cc:	4619      	mov	r1, r3
   299ce:	b16b      	cbz	r3, 299ec <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   299d0:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   299d4:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   299d6:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   299d8:	b97a      	cbnz	r2, 299fa <gatt_sub_remove+0x32>
   299da:	42ae      	cmp	r6, r5
	list->head = node;
   299dc:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   299de:	d100      	bne.n	299e2 <gatt_sub_remove+0x1a>
	list->tail = node;
   299e0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   299e2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   299e4:	680d      	ldr	r5, [r1, #0]
   299e6:	614b      	str	r3, [r1, #20]
   299e8:	461a      	mov	r2, r3
   299ea:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   299ec:	68a3      	ldr	r3, [r4, #8]
   299ee:	b94b      	cbnz	r3, 29a04 <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   299f0:	4620      	mov	r0, r4
}
   299f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   299f6:	f7ff bfdb 	b.w	299b0 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   299fa:	42ae      	cmp	r6, r5
	parent->next = child;
   299fc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   299fe:	bf08      	it	eq
   29a00:	60e2      	streq	r2, [r4, #12]
}
   29a02:	e7ee      	b.n	299e2 <gatt_sub_remove+0x1a>
}
   29a04:	bd70      	pop	{r4, r5, r6, pc}

00029a06 <gatt_req_send>:
{
   29a06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29a0a:	4606      	mov	r6, r0
   29a0c:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   29a0e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   29a12:	2100      	movs	r1, #0
{
   29a14:	f89d a020 	ldrb.w	sl, [sp, #32]
   29a18:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   29a1c:	4617      	mov	r7, r2
   29a1e:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   29a20:	f7e6 fc14 	bl	1024c <bt_att_req_alloc>
	if (!req) {
   29a24:	4604      	mov	r4, r0
   29a26:	b920      	cbnz	r0, 29a32 <gatt_req_send+0x2c>
		return -ENOMEM;
   29a28:	f06f 050b 	mvn.w	r5, #11
}
   29a2c:	4628      	mov	r0, r5
   29a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   29a32:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   29a36:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   29a3a:	60c5      	str	r5, [r0, #12]
	req->func = func;
   29a3c:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   29a40:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   29a42:	4642      	mov	r2, r8
   29a44:	4651      	mov	r1, sl
   29a46:	4630      	mov	r0, r6
   29a48:	f7e6 f962 	bl	fd10 <bt_att_create_pdu>
	if (!buf) {
   29a4c:	b918      	cbnz	r0, 29a56 <gatt_req_send+0x50>
		bt_att_req_free(req);
   29a4e:	4620      	mov	r0, r4
   29a50:	f7e6 fc1e 	bl	10290 <bt_att_req_free>
   29a54:	e7e8      	b.n	29a28 <gatt_req_send+0x22>
	req->buf = buf;
   29a56:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   29a58:	463a      	mov	r2, r7
   29a5a:	4641      	mov	r1, r8
   29a5c:	47a8      	blx	r5
	if (err) {
   29a5e:	4605      	mov	r5, r0
   29a60:	b118      	cbz	r0, 29a6a <gatt_req_send+0x64>
		bt_att_req_free(req);
   29a62:	4620      	mov	r0, r4
   29a64:	f7e6 fc14 	bl	10290 <bt_att_req_free>
   29a68:	e7e0      	b.n	29a2c <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   29a6a:	4621      	mov	r1, r4
   29a6c:	4630      	mov	r0, r6
   29a6e:	f7ff febe 	bl	297ee <bt_att_req_send>
	if (err) {
   29a72:	4605      	mov	r5, r0
   29a74:	2800      	cmp	r0, #0
   29a76:	d0d9      	beq.n	29a2c <gatt_req_send+0x26>
   29a78:	e7f3      	b.n	29a62 <gatt_req_send+0x5c>

00029a7a <z_log_msg2_static_create.constprop.0>:
   29a7a:	2300      	movs	r3, #0
   29a7c:	f7fc b8b0 	b.w	25be0 <z_impl_z_log_msg2_static_create>

00029a80 <clear_cf_cfg>:
{
   29a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29a82:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29a84:	2500      	movs	r5, #0
   29a86:	4669      	mov	r1, sp
   29a88:	3001      	adds	r0, #1
   29a8a:	9500      	str	r5, [sp, #0]
   29a8c:	f8cd 5003 	str.w	r5, [sp, #3]
   29a90:	f7ff ff8b 	bl	299aa <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   29a94:	f104 0008 	add.w	r0, r4, #8
   29a98:	2201      	movs	r2, #1
   29a9a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29a9c:	340c      	adds	r4, #12
   29a9e:	f7fe fd95 	bl	285cc <memset>
   29aa2:	f3bf 8f5b 	dmb	ish
   29aa6:	e854 3f00 	ldrex	r3, [r4]
   29aaa:	e844 5200 	strex	r2, r5, [r4]
   29aae:	2a00      	cmp	r2, #0
   29ab0:	d1f9      	bne.n	29aa6 <clear_cf_cfg+0x26>
   29ab2:	f3bf 8f5b 	dmb	ish
}
   29ab6:	b003      	add	sp, #12
   29ab8:	bd30      	pop	{r4, r5, pc}

00029aba <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29aba:	2301      	movs	r3, #1
   29abc:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29abe:	f3bf 8f5b 	dmb	ish
   29ac2:	e850 2f00 	ldrex	r2, [r0]
   29ac6:	431a      	orrs	r2, r3
   29ac8:	e840 2100 	strex	r1, r2, [r0]
   29acc:	2900      	cmp	r1, #0
   29ace:	d1f8      	bne.n	29ac2 <atomic_set_bit+0x8>
   29ad0:	f3bf 8f5b 	dmb	ish
}
   29ad4:	4770      	bx	lr

00029ad6 <sc_restore_rsp>:
{
   29ad6:	b538      	push	{r3, r4, r5, lr}
   29ad8:	4605      	mov	r5, r0
   29ada:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   29adc:	f7e6 fd0e 	bl	104fc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   29ae0:	b130      	cbz	r0, 29af0 <sc_restore_rsp+0x1a>
   29ae2:	7a03      	ldrb	r3, [r0, #8]
   29ae4:	07db      	lsls	r3, r3, #31
   29ae6:	d503      	bpl.n	29af0 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29ae8:	2100      	movs	r1, #0
   29aea:	300c      	adds	r0, #12
   29aec:	f7ff ffe5 	bl	29aba <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   29af0:	b964      	cbnz	r4, 29b0c <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   29af2:	7a28      	ldrb	r0, [r5, #8]
   29af4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   29af8:	f7e6 fd2e 	bl	10558 <find_sc_cfg>
		if (sc_cfg) {
   29afc:	b130      	cbz	r0, 29b0c <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   29afe:	4621      	mov	r1, r4
   29b00:	2204      	movs	r2, #4
}
   29b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   29b06:	3008      	adds	r0, #8
   29b08:	f7fe bd60 	b.w	285cc <memset>
}
   29b0c:	bd38      	pop	{r3, r4, r5, pc}

00029b0e <gatt_write_ccc_buf>:
{
   29b0e:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   29b10:	f100 0508 	add.w	r5, r0, #8
   29b14:	2102      	movs	r1, #2
   29b16:	4628      	mov	r0, r5
   29b18:	4614      	mov	r4, r2
   29b1a:	f000 ff66 	bl	2a9ea <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   29b1e:	8963      	ldrh	r3, [r4, #10]
   29b20:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   29b22:	89a1      	ldrh	r1, [r4, #12]
   29b24:	4628      	mov	r0, r5
   29b26:	f000 ff77 	bl	2aa18 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   29b2a:	f104 0010 	add.w	r0, r4, #16
   29b2e:	2102      	movs	r1, #2
   29b30:	f7ff ffc3 	bl	29aba <atomic_set_bit>
}
   29b34:	2000      	movs	r0, #0
   29b36:	bd38      	pop	{r3, r4, r5, pc}

00029b38 <gatt_write_ccc_rsp>:
{
   29b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b3c:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29b3e:	f3bf 8f5b 	dmb	ish
   29b42:	4606      	mov	r6, r0
   29b44:	460d      	mov	r5, r1
   29b46:	f104 0310 	add.w	r3, r4, #16
   29b4a:	e853 2f00 	ldrex	r2, [r3]
   29b4e:	f022 0204 	bic.w	r2, r2, #4
   29b52:	e843 2100 	strex	r1, r2, [r3]
   29b56:	2900      	cmp	r1, #0
   29b58:	d1f7      	bne.n	29b4a <gatt_write_ccc_rsp+0x12>
   29b5a:	f3bf 8f5b 	dmb	ish
	if (err) {
   29b5e:	b1dd      	cbz	r5, 29b98 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   29b60:	f7e6 fd1a 	bl	10598 <gatt_sub_find>
		if (!sub) {
   29b64:	4601      	mov	r1, r0
   29b66:	b300      	cbz	r0, 29baa <gatt_write_ccc_rsp+0x72>
	return list->head;
   29b68:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   29b6a:	b143      	cbz	r3, 29b7e <gatt_write_ccc_rsp+0x46>
	return node->next;
   29b6c:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   29b6e:	f104 0014 	add.w	r0, r4, #20
   29b72:	4283      	cmp	r3, r0
   29b74:	d10b      	bne.n	29b8e <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   29b76:	4623      	mov	r3, r4
   29b78:	4630      	mov	r0, r6
   29b7a:	f7ff ff25 	bl	299c8 <gatt_sub_remove>
	if (params->write) {
   29b7e:	6863      	ldr	r3, [r4, #4]
   29b80:	b19b      	cbz	r3, 29baa <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   29b82:	4629      	mov	r1, r5
   29b84:	4630      	mov	r0, r6
   29b86:	2200      	movs	r2, #0
}
   29b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   29b8c:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   29b8e:	2a00      	cmp	r2, #0
   29b90:	d0f5      	beq.n	29b7e <gatt_write_ccc_rsp+0x46>
	return node->next;
   29b92:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   29b94:	6812      	ldr	r2, [r2, #0]
   29b96:	e7ec      	b.n	29b72 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   29b98:	89a3      	ldrh	r3, [r4, #12]
   29b9a:	2b00      	cmp	r3, #0
   29b9c:	d1ef      	bne.n	29b7e <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   29b9e:	6827      	ldr	r7, [r4, #0]
   29ba0:	462b      	mov	r3, r5
   29ba2:	462a      	mov	r2, r5
   29ba4:	4621      	mov	r1, r4
   29ba6:	47b8      	blx	r7
   29ba8:	e7e9      	b.n	29b7e <gatt_write_ccc_rsp+0x46>
}
   29baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029bae <sc_clear>:
{
   29bae:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29bb0:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   29bb4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29bb6:	4631      	mov	r1, r6
   29bb8:	7a00      	ldrb	r0, [r0, #8]
   29bba:	f7fe fefe 	bl	289ba <bt_addr_le_is_bonded>
   29bbe:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   29bc0:	4631      	mov	r1, r6
   29bc2:	f7e6 fcc9 	bl	10558 <find_sc_cfg>
	if (!cfg) {
   29bc6:	b128      	cbz	r0, 29bd4 <sc_clear+0x26>
}
   29bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   29bcc:	220c      	movs	r2, #12
   29bce:	2100      	movs	r1, #0
   29bd0:	f7fe bcfc 	b.w	285cc <memset>
}
   29bd4:	bd70      	pop	{r4, r5, r6, pc}

00029bd6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29bd6:	2a02      	cmp	r2, #2
{
   29bd8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29bda:	d108      	bne.n	29bee <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29bdc:	2300      	movs	r3, #0
   29bde:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29be2:	461a      	mov	r2, r3
   29be4:	7a00      	ldrb	r0, [r0, #8]
   29be6:	f7e6 fd81 	bl	106ec <sc_save>
}
   29bea:	2002      	movs	r0, #2
   29bec:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   29bee:	f7ff ffde 	bl	29bae <sc_clear>
   29bf2:	e7fa      	b.n	29bea <sc_ccc_cfg_write+0x14>

00029bf4 <read_central_addr_res>:
{
   29bf4:	b513      	push	{r0, r1, r4, lr}
   29bf6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   29bfa:	4610      	mov	r0, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   29bfc:	2201      	movs	r2, #1
	if (offset > value_len) {
   29bfe:	4291      	cmp	r1, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   29c00:	f88d 2007 	strb.w	r2, [sp, #7]
	if (offset > value_len) {
   29c04:	d80c      	bhi.n	29c20 <read_central_addr_res+0x2c>
	len = MIN(buf_len, value_len - offset);
   29c06:	1a54      	subs	r4, r2, r1
   29c08:	429c      	cmp	r4, r3
   29c0a:	bfa8      	it	ge
   29c0c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   29c0e:	f10d 0307 	add.w	r3, sp, #7
   29c12:	4622      	mov	r2, r4
   29c14:	4419      	add	r1, r3
   29c16:	f7fe fcce 	bl	285b6 <memcpy>
}
   29c1a:	4620      	mov	r0, r4
   29c1c:	b002      	add	sp, #8
   29c1e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29c20:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29c24:	e7f9      	b.n	29c1a <read_central_addr_res+0x26>

00029c26 <read_appearance>:
{
   29c26:	b513      	push	{r0, r1, r4, lr}
   29c28:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   29c2c:	4610      	mov	r0, r2
	if (offset > value_len) {
   29c2e:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   29c30:	f240 3241 	movw	r2, #833	; 0x341
   29c34:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   29c38:	d80d      	bhi.n	29c56 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   29c3a:	f1c1 0402 	rsb	r4, r1, #2
   29c3e:	429c      	cmp	r4, r3
   29c40:	bfa8      	it	ge
   29c42:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   29c44:	f10d 0306 	add.w	r3, sp, #6
   29c48:	4622      	mov	r2, r4
   29c4a:	4419      	add	r1, r3
   29c4c:	f7fe fcb3 	bl	285b6 <memcpy>
}
   29c50:	4620      	mov	r0, r4
   29c52:	b002      	add	sp, #8
   29c54:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29c56:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29c5a:	e7f9      	b.n	29c50 <read_appearance+0x2a>

00029c5c <read_name>:
{
   29c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c60:	4698      	mov	r8, r3
   29c62:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   29c66:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   29c68:	f7e3 f952 	bl	cf10 <bt_get_name>
   29c6c:	4607      	mov	r7, r0
				 strlen(name));
   29c6e:	f7fe fc4c 	bl	2850a <strlen>
	if (offset > value_len) {
   29c72:	b283      	uxth	r3, r0
   29c74:	42b3      	cmp	r3, r6
   29c76:	d30c      	bcc.n	29c92 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   29c78:	1b9c      	subs	r4, r3, r6
   29c7a:	4544      	cmp	r4, r8
   29c7c:	bfa8      	it	ge
   29c7e:	4644      	movge	r4, r8
   29c80:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   29c82:	4622      	mov	r2, r4
   29c84:	19b9      	adds	r1, r7, r6
   29c86:	4628      	mov	r0, r5
   29c88:	f7fe fc95 	bl	285b6 <memcpy>
}
   29c8c:	4620      	mov	r0, r4
   29c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29c92:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29c96:	e7f9      	b.n	29c8c <read_name+0x30>

00029c98 <cf_read>:
{
   29c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29c9a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   29c9c:	2300      	movs	r3, #0
{
   29c9e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   29ca2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   29ca6:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   29ca8:	f7e6 fc28 	bl	104fc <find_cf_cfg>
	if (cfg) {
   29cac:	b128      	cbz	r0, 29cba <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   29cae:	f100 0108 	add.w	r1, r0, #8
   29cb2:	2201      	movs	r2, #1
   29cb4:	a801      	add	r0, sp, #4
   29cb6:	f7fe fc7e 	bl	285b6 <memcpy>
	if (offset > value_len) {
   29cba:	2e01      	cmp	r6, #1
   29cbc:	d80d      	bhi.n	29cda <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   29cbe:	f1c6 0401 	rsb	r4, r6, #1
   29cc2:	42bc      	cmp	r4, r7
   29cc4:	bfa8      	it	ge
   29cc6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   29cc8:	ab01      	add	r3, sp, #4
   29cca:	4622      	mov	r2, r4
   29ccc:	1999      	adds	r1, r3, r6
   29cce:	4628      	mov	r0, r5
   29cd0:	f7fe fc71 	bl	285b6 <memcpy>
}
   29cd4:	4620      	mov	r0, r4
   29cd6:	b003      	add	sp, #12
   29cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29cda:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29cde:	e7f9      	b.n	29cd4 <cf_read+0x3c>

00029ce0 <bt_gatt_attr_read_service>:
{
   29ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   29ce2:	68c9      	ldr	r1, [r1, #12]
{
   29ce4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   29ce8:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   29cea:	780b      	ldrb	r3, [r1, #0]
{
   29cec:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   29cee:	b993      	cbnz	r3, 29d16 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29cf0:	884b      	ldrh	r3, [r1, #2]
   29cf2:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   29cf6:	2d02      	cmp	r5, #2
   29cf8:	d819      	bhi.n	29d2e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29cfa:	f1c5 0202 	rsb	r2, r5, #2
   29cfe:	4294      	cmp	r4, r2
   29d00:	bfa8      	it	ge
   29d02:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29d04:	f10d 0306 	add.w	r3, sp, #6
   29d08:	4622      	mov	r2, r4
   29d0a:	1959      	adds	r1, r3, r5
   29d0c:	f7fe fc53 	bl	285b6 <memcpy>
}
   29d10:	4620      	mov	r0, r4
   29d12:	b003      	add	sp, #12
   29d14:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   29d16:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   29d18:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   29d1c:	d807      	bhi.n	29d2e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29d1e:	f1c5 0210 	rsb	r2, r5, #16
   29d22:	4294      	cmp	r4, r2
   29d24:	bfa8      	it	ge
   29d26:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29d28:	4622      	mov	r2, r4
   29d2a:	4429      	add	r1, r5
   29d2c:	e7ee      	b.n	29d0c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29d2e:	f06f 0406 	mvn.w	r4, #6
   29d32:	e7ed      	b.n	29d10 <bt_gatt_attr_read_service+0x30>

00029d34 <bt_gatt_attr_read_ccc>:
{
   29d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   29d36:	68c9      	ldr	r1, [r1, #12]
{
   29d38:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   29d3c:	4615      	mov	r5, r2
   29d3e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   29d40:	f7ff fe07 	bl	29952 <find_ccc_cfg>
	if (cfg) {
   29d44:	b100      	cbz	r0, 29d48 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   29d46:	8900      	ldrh	r0, [r0, #8]
   29d48:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   29d4c:	2e02      	cmp	r6, #2
   29d4e:	d80e      	bhi.n	29d6e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   29d50:	f1c6 0402 	rsb	r4, r6, #2
   29d54:	42bc      	cmp	r4, r7
   29d56:	bfa8      	it	ge
   29d58:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   29d5a:	f10d 0306 	add.w	r3, sp, #6
   29d5e:	4622      	mov	r2, r4
   29d60:	1999      	adds	r1, r3, r6
   29d62:	4628      	mov	r0, r5
   29d64:	f7fe fc27 	bl	285b6 <memcpy>
}
   29d68:	4620      	mov	r0, r4
   29d6a:	b003      	add	sp, #12
   29d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29d6e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   29d72:	e7f9      	b.n	29d68 <bt_gatt_attr_read_ccc+0x34>

00029d74 <bt_gatt_attr_read>:
{
   29d74:	b538      	push	{r3, r4, r5, lr}
   29d76:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   29d7a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   29d7e:	42a9      	cmp	r1, r5
{
   29d80:	4610      	mov	r0, r2
	if (offset > value_len) {
   29d82:	d80b      	bhi.n	29d9c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   29d84:	1a6d      	subs	r5, r5, r1
   29d86:	429d      	cmp	r5, r3
   29d88:	bfa8      	it	ge
   29d8a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   29d8c:	9b05      	ldr	r3, [sp, #20]
   29d8e:	b2ad      	uxth	r5, r5
   29d90:	462a      	mov	r2, r5
   29d92:	4419      	add	r1, r3
   29d94:	f7fe fc0f 	bl	285b6 <memcpy>
}
   29d98:	4628      	mov	r0, r5
   29d9a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29d9c:	f06f 0506 	mvn.w	r5, #6
   29da0:	e7fa      	b.n	29d98 <bt_gatt_attr_read+0x24>

00029da2 <bt_gatt_attr_value_handle>:
{
   29da2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29da4:	4604      	mov	r4, r0
   29da6:	b910      	cbnz	r0, 29dae <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   29da8:	2000      	movs	r0, #0
}
   29daa:	b002      	add	sp, #8
   29dac:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29dae:	2300      	movs	r3, #0
   29db0:	f88d 3004 	strb.w	r3, [sp, #4]
   29db4:	6800      	ldr	r0, [r0, #0]
   29db6:	f642 0303 	movw	r3, #10243	; 0x2803
   29dba:	a901      	add	r1, sp, #4
   29dbc:	f8ad 3006 	strh.w	r3, [sp, #6]
   29dc0:	f7fe fcc1 	bl	28746 <bt_uuid_cmp>
   29dc4:	2800      	cmp	r0, #0
   29dc6:	d1ef      	bne.n	29da8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   29dc8:	68e3      	ldr	r3, [r4, #12]
   29dca:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29dcc:	2800      	cmp	r0, #0
   29dce:	d1ec      	bne.n	29daa <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   29dd0:	4620      	mov	r0, r4
   29dd2:	f7e6 fe01 	bl	109d8 <bt_gatt_attr_get_handle>
   29dd6:	3001      	adds	r0, #1
   29dd8:	b280      	uxth	r0, r0
	return handle;
   29dda:	e7e6      	b.n	29daa <bt_gatt_attr_value_handle+0x8>

00029ddc <bt_gatt_attr_read_chrc>:
{
   29ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   29dde:	68cf      	ldr	r7, [r1, #12]
{
   29de0:	b087      	sub	sp, #28
   29de2:	4608      	mov	r0, r1
   29de4:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   29de6:	79bb      	ldrb	r3, [r7, #6]
   29de8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   29dec:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   29df0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29df2:	f7ff ffd6 	bl	29da2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29df6:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29df8:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29dfc:	780b      	ldrb	r3, [r1, #0]
   29dfe:	b99b      	cbnz	r3, 29e28 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29e00:	884b      	ldrh	r3, [r1, #2]
   29e02:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   29e06:	2105      	movs	r1, #5
	if (offset > value_len) {
   29e08:	42b1      	cmp	r1, r6
   29e0a:	d315      	bcc.n	29e38 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   29e0c:	1b89      	subs	r1, r1, r6
   29e0e:	42a1      	cmp	r1, r4
   29e10:	bfa8      	it	ge
   29e12:	4621      	movge	r1, r4
   29e14:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   29e16:	ab01      	add	r3, sp, #4
   29e18:	4622      	mov	r2, r4
   29e1a:	1999      	adds	r1, r3, r6
   29e1c:	4628      	mov	r0, r5
   29e1e:	f7fe fbca 	bl	285b6 <memcpy>
}
   29e22:	4620      	mov	r0, r4
   29e24:	b007      	add	sp, #28
   29e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29e28:	3101      	adds	r1, #1
   29e2a:	2210      	movs	r2, #16
   29e2c:	f10d 0007 	add.w	r0, sp, #7
   29e30:	f7fe fbc1 	bl	285b6 <memcpy>
		value_len += 16U;
   29e34:	2113      	movs	r1, #19
   29e36:	e7e7      	b.n	29e08 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29e38:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29e3c:	e7f1      	b.n	29e22 <bt_gatt_attr_read_chrc+0x46>

00029e3e <bt_gatt_foreach_attr>:
{
   29e3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29e40:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29e44:	2300      	movs	r3, #0
   29e46:	9300      	str	r3, [sp, #0]
   29e48:	461a      	mov	r2, r3
   29e4a:	f7e6 fdf5 	bl	10a38 <bt_gatt_foreach_attr_type>
}
   29e4e:	b005      	add	sp, #20
   29e50:	f85d fb04 	ldr.w	pc, [sp], #4

00029e54 <db_hash_process>:
	db_hash_gen(true);
   29e54:	f7e6 be4a 	b.w	10aec <db_hash_gen.constprop.0>

00029e58 <bt_gatt_check_perm>:
{
   29e58:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   29e5a:	07d4      	lsls	r4, r2, #31
{
   29e5c:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29e5e:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   29e60:	d504      	bpl.n	29e6c <bt_gatt_check_perm+0x14>
   29e62:	f010 0f15 	tst.w	r0, #21
   29e66:	d01e      	beq.n	29ea6 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29e68:	684b      	ldr	r3, [r1, #4]
   29e6a:	b1e3      	cbz	r3, 29ea6 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29e6c:	0793      	lsls	r3, r2, #30
   29e6e:	d504      	bpl.n	29e7a <bt_gatt_check_perm+0x22>
   29e70:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   29e74:	d019      	beq.n	29eaa <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29e76:	688b      	ldr	r3, [r1, #8]
   29e78:	b1bb      	cbz	r3, 29eaa <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   29e7a:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29e7e:	f014 0f30 	tst.w	r4, #48	; 0x30
   29e82:	d103      	bne.n	29e8c <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   29e84:	f014 000c 	ands.w	r0, r4, #12
   29e88:	d107      	bne.n	29e9a <bt_gatt_check_perm+0x42>
}
   29e8a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29e8c:	4628      	mov	r0, r5
   29e8e:	f7fe ff78 	bl	28d82 <bt_conn_get_security>
   29e92:	2802      	cmp	r0, #2
   29e94:	d8f6      	bhi.n	29e84 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   29e96:	2005      	movs	r0, #5
   29e98:	e7f7      	b.n	29e8a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   29e9a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   29e9c:	2b00      	cmp	r3, #0
   29e9e:	bf14      	ite	ne
   29ea0:	2000      	movne	r0, #0
   29ea2:	200f      	moveq	r0, #15
   29ea4:	e7f1      	b.n	29e8a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29ea6:	2002      	movs	r0, #2
   29ea8:	e7ef      	b.n	29e8a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29eaa:	2003      	movs	r0, #3
   29eac:	e7ed      	b.n	29e8a <bt_gatt_check_perm+0x32>

00029eae <bt_gatt_cancel>:
{
   29eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29eb0:	4604      	mov	r4, r0
   29eb2:	460d      	mov	r5, r1
	k_sched_lock();
   29eb4:	f7fa f868 	bl	23f88 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   29eb8:	4629      	mov	r1, r5
   29eba:	4620      	mov	r0, r4
   29ebc:	f7ff fcac 	bl	29818 <bt_att_find_req_by_user_data>
	if (req) {
   29ec0:	4601      	mov	r1, r0
   29ec2:	b920      	cbnz	r0, 29ece <bt_gatt_cancel+0x20>
}
   29ec4:	b002      	add	sp, #8
   29ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   29eca:	f7fa ba2b 	b.w	24324 <k_sched_unlock>
		func = req->func;
   29ece:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   29ed0:	4620      	mov	r0, r4
   29ed2:	f7e6 fae5 	bl	104a0 <bt_att_req_cancel>
	k_sched_unlock();
   29ed6:	f7fa fa25 	bl	24324 <k_sched_unlock>
	if (func) {
   29eda:	b12e      	cbz	r6, 29ee8 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   29edc:	2300      	movs	r3, #0
   29ede:	9500      	str	r5, [sp, #0]
   29ee0:	461a      	mov	r2, r3
   29ee2:	210e      	movs	r1, #14
   29ee4:	4620      	mov	r0, r4
   29ee6:	47b0      	blx	r6
}
   29ee8:	b002      	add	sp, #8
   29eea:	bd70      	pop	{r4, r5, r6, pc}

00029eec <bt_gatt_unsubscribe>:
{
   29eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   29ef0:	7b43      	ldrb	r3, [r0, #13]
   29ef2:	2b07      	cmp	r3, #7
{
   29ef4:	4680      	mov	r8, r0
   29ef6:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   29ef8:	d155      	bne.n	29fa6 <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   29efa:	f7e6 fb4d 	bl	10598 <gatt_sub_find>
	if (!sub) {
   29efe:	4606      	mov	r6, r0
   29f00:	2800      	cmp	r0, #0
   29f02:	d053      	beq.n	29fac <bt_gatt_unsubscribe+0xc0>
	return list->head;
   29f04:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   29f06:	b104      	cbz	r4, 29f0a <bt_gatt_unsubscribe+0x1e>
   29f08:	3c14      	subs	r4, #20
			has_subscription = true;
   29f0a:	2300      	movs	r3, #0
   29f0c:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   29f0e:	bb5c      	cbnz	r4, 29f68 <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   29f10:	2b00      	cmp	r3, #0
   29f12:	d04b      	beq.n	29fac <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   29f14:	2f00      	cmp	r7, #0
   29f16:	d035      	beq.n	29f84 <bt_gatt_unsubscribe+0x98>
   29f18:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   29f1a:	f105 0214 	add.w	r2, r5, #20
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29f1e:	b15b      	cbz	r3, 29f38 <bt_gatt_unsubscribe+0x4c>
   29f20:	429a      	cmp	r2, r3
   29f22:	d13d      	bne.n	29fa0 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   29f24:	696b      	ldr	r3, [r5, #20]
	return list->tail;
   29f26:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   29f28:	2c00      	cmp	r4, #0
   29f2a:	d134      	bne.n	29f96 <bt_gatt_unsubscribe+0xaa>
   29f2c:	428a      	cmp	r2, r1
	list->head = node;
   29f2e:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   29f30:	d100      	bne.n	29f34 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   29f32:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   29f34:	2300      	movs	r3, #0
   29f36:	616b      	str	r3, [r5, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29f38:	f105 0010 	add.w	r0, r5, #16
   29f3c:	f7ff fcab 	bl	29896 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   29f40:	0743      	lsls	r3, r0, #29
   29f42:	d503      	bpl.n	29f4c <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   29f44:	4629      	mov	r1, r5
   29f46:	4640      	mov	r0, r8
   29f48:	f7ff ffb1 	bl	29eae <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   29f4c:	68b3      	ldr	r3, [r6, #8]
   29f4e:	b913      	cbnz	r3, 29f56 <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   29f50:	4630      	mov	r0, r6
   29f52:	f7ff fd2d 	bl	299b0 <gatt_sub_free>
	if (has_subscription) {
   29f56:	b367      	cbz	r7, 29fb2 <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   29f58:	2300      	movs	r3, #0
   29f5a:	682c      	ldr	r4, [r5, #0]
   29f5c:	461a      	mov	r2, r3
   29f5e:	4629      	mov	r1, r5
   29f60:	4640      	mov	r0, r8
   29f62:	47a0      	blx	r4
	return 0;
   29f64:	2000      	movs	r0, #0
   29f66:	e014      	b.n	29f92 <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   29f68:	42ac      	cmp	r4, r5
   29f6a:	d009      	beq.n	29f80 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   29f6c:	8921      	ldrh	r1, [r4, #8]
   29f6e:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   29f70:	4291      	cmp	r1, r2
   29f72:	bf08      	it	eq
   29f74:	2701      	moveq	r7, #1
	return node->next;
   29f76:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   29f78:	2c00      	cmp	r4, #0
   29f7a:	d0c9      	beq.n	29f10 <bt_gatt_unsubscribe+0x24>
   29f7c:	3c14      	subs	r4, #20
   29f7e:	e7c6      	b.n	29f0e <bt_gatt_unsubscribe+0x22>
			found = true;
   29f80:	2301      	movs	r3, #1
   29f82:	e7f8      	b.n	29f76 <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   29f84:	81af      	strh	r7, [r5, #12]
		err = gatt_write_ccc(conn, params);
   29f86:	4629      	mov	r1, r5
   29f88:	4640      	mov	r0, r8
   29f8a:	f7e6 fb33 	bl	105f4 <gatt_write_ccc>
		if (err) {
   29f8e:	2800      	cmp	r0, #0
   29f90:	d0c2      	beq.n	29f18 <bt_gatt_unsubscribe+0x2c>
}
   29f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   29f96:	428a      	cmp	r2, r1
	parent->next = child;
   29f98:	6023      	str	r3, [r4, #0]
	list->tail = node;
   29f9a:	bf08      	it	eq
   29f9c:	60f4      	streq	r4, [r6, #12]
}
   29f9e:	e7c9      	b.n	29f34 <bt_gatt_unsubscribe+0x48>
	return node->next;
   29fa0:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29fa2:	681b      	ldr	r3, [r3, #0]
   29fa4:	e7bb      	b.n	29f1e <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   29fa6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29faa:	e7f2      	b.n	29f92 <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   29fac:	f06f 0015 	mvn.w	r0, #21
   29fb0:	e7ef      	b.n	29f92 <bt_gatt_unsubscribe+0xa6>
	return 0;
   29fb2:	4638      	mov	r0, r7
   29fb4:	e7ed      	b.n	29f92 <bt_gatt_unsubscribe+0xa6>

00029fb6 <bt_gatt_notification>:
{
   29fb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29fba:	4606      	mov	r6, r0
   29fbc:	460f      	mov	r7, r1
   29fbe:	4690      	mov	r8, r2
   29fc0:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   29fc2:	f7e6 fae9 	bl	10598 <gatt_sub_find>
	if (!sub) {
   29fc6:	b300      	cbz	r0, 2a00a <bt_gatt_notification+0x54>
	return list->head;
   29fc8:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29fca:	b1f4      	cbz	r4, 2a00a <bt_gatt_notification+0x54>
	return node->next;
   29fcc:	f854 a914 	ldr.w	sl, [r4], #-20
   29fd0:	f1ba 0f00 	cmp.w	sl, #0
   29fd4:	d001      	beq.n	29fda <bt_gatt_notification+0x24>
   29fd6:	f1aa 0a14 	sub.w	sl, sl, #20
		if (handle != params->value_handle) {
   29fda:	8923      	ldrh	r3, [r4, #8]
   29fdc:	42bb      	cmp	r3, r7
   29fde:	d10a      	bne.n	29ff6 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   29fe0:	6825      	ldr	r5, [r4, #0]
   29fe2:	464b      	mov	r3, r9
   29fe4:	4642      	mov	r2, r8
   29fe6:	4621      	mov	r1, r4
   29fe8:	4630      	mov	r0, r6
   29fea:	47a8      	blx	r5
   29fec:	b918      	cbnz	r0, 29ff6 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   29fee:	4621      	mov	r1, r4
   29ff0:	4630      	mov	r0, r6
   29ff2:	f7ff ff7b 	bl	29eec <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29ff6:	f1ba 0f00 	cmp.w	sl, #0
   29ffa:	d006      	beq.n	2a00a <bt_gatt_notification+0x54>
   29ffc:	f8da 5014 	ldr.w	r5, [sl, #20]
   2a000:	b105      	cbz	r5, 2a004 <bt_gatt_notification+0x4e>
   2a002:	3d14      	subs	r5, #20
{
   2a004:	4654      	mov	r4, sl
   2a006:	46aa      	mov	sl, r5
   2a008:	e7e7      	b.n	29fda <bt_gatt_notification+0x24>
}
   2a00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a00e <bt_gatt_change_aware>:
{
   2a00e:	b510      	push	{r4, lr}
   2a010:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2a012:	f7e6 fa73 	bl	104fc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a016:	b910      	cbnz	r0, 2a01e <bt_gatt_change_aware+0x10>
		return true;
   2a018:	2401      	movs	r4, #1
}
   2a01a:	4620      	mov	r0, r4
   2a01c:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a01e:	7a03      	ldrb	r3, [r0, #8]
   2a020:	07d9      	lsls	r1, r3, #31
   2a022:	d5f9      	bpl.n	2a018 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2a024:	f100 030c 	add.w	r3, r0, #12
   2a028:	4618      	mov	r0, r3
   2a02a:	f7ff fc34 	bl	29896 <atomic_get>
   2a02e:	f010 0101 	ands.w	r1, r0, #1
   2a032:	d1f1      	bne.n	2a018 <bt_gatt_change_aware+0xa>
	if (!req) {
   2a034:	2c00      	cmp	r4, #0
   2a036:	d0f0      	beq.n	2a01a <bt_gatt_change_aware+0xc>
   2a038:	4618      	mov	r0, r3
   2a03a:	f7ff fc2c 	bl	29896 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2a03e:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a040:	f3c0 0440 	ubfx	r4, r0, #1, #1
   2a044:	d50f      	bpl.n	2a066 <bt_gatt_change_aware+0x58>
   2a046:	f3bf 8f5b 	dmb	ish
   2a04a:	e853 2f00 	ldrex	r2, [r3]
   2a04e:	f022 0202 	bic.w	r2, r2, #2
   2a052:	e843 2000 	strex	r0, r2, [r3]
   2a056:	2800      	cmp	r0, #0
   2a058:	d1f7      	bne.n	2a04a <bt_gatt_change_aware+0x3c>
   2a05a:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2a05e:	4618      	mov	r0, r3
   2a060:	f7ff fd2b 	bl	29aba <atomic_set_bit>
	return false;
   2a064:	e7d9      	b.n	2a01a <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2a066:	2101      	movs	r1, #1
   2a068:	e7f9      	b.n	2a05e <bt_gatt_change_aware+0x50>

0002a06a <sys_memcpy_swap>:
	psrc += length - 1;
   2a06a:	1e53      	subs	r3, r2, #1
   2a06c:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2a06e:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2a070:	f811 3901 	ldrb.w	r3, [r1], #-1
   2a074:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2a078:	4290      	cmp	r0, r2
   2a07a:	d1f9      	bne.n	2a070 <sys_memcpy_swap+0x6>
}
   2a07c:	4770      	bx	lr

0002a07e <sys_mem_swap>:
{
   2a07e:	b510      	push	{r4, lr}
   2a080:	1843      	adds	r3, r0, r1
   2a082:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   2a08a:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a08c:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2a090:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2a092:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2a094:	d1f7      	bne.n	2a086 <sys_mem_swap+0x8>
	}
}
   2a096:	bd10      	pop	{r4, pc}

0002a098 <smp_pairing_req>:
}
   2a098:	2007      	movs	r0, #7
   2a09a:	4770      	bx	lr

0002a09c <bt_smp_aes_cmac>:
{
   2a09c:	b570      	push	{r4, r5, r6, lr}
   2a09e:	b0c2      	sub	sp, #264	; 0x108
   2a0a0:	460d      	mov	r5, r1
   2a0a2:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a0a4:	4601      	mov	r1, r0
   2a0a6:	aa16      	add	r2, sp, #88	; 0x58
   2a0a8:	4668      	mov	r0, sp
{
   2a0aa:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a0ac:	f7fe f819 	bl	280e2 <tc_cmac_setup>
   2a0b0:	b150      	cbz	r0, 2a0c8 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2a0b2:	4632      	mov	r2, r6
   2a0b4:	4629      	mov	r1, r5
   2a0b6:	4668      	mov	r0, sp
   2a0b8:	f7fe f83e 	bl	28138 <tc_cmac_update>
   2a0bc:	b120      	cbz	r0, 2a0c8 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2a0be:	4669      	mov	r1, sp
   2a0c0:	4620      	mov	r0, r4
   2a0c2:	f7fe f8a4 	bl	2820e <tc_cmac_final>
   2a0c6:	b918      	cbnz	r0, 2a0d0 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2a0c8:	f06f 0004 	mvn.w	r0, #4
}
   2a0cc:	b042      	add	sp, #264	; 0x108
   2a0ce:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2a0d0:	2000      	movs	r0, #0
   2a0d2:	e7fb      	b.n	2a0cc <bt_smp_aes_cmac+0x30>

0002a0d4 <smp_f4>:
{
   2a0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a0d6:	b097      	sub	sp, #92	; 0x5c
   2a0d8:	4614      	mov	r4, r2
   2a0da:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2a0dc:	2220      	movs	r2, #32
   2a0de:	4601      	mov	r1, r0
   2a0e0:	a805      	add	r0, sp, #20
{
   2a0e2:	461d      	mov	r5, r3
   2a0e4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2a0e6:	f7ff ffc0 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2a0ea:	2220      	movs	r2, #32
   2a0ec:	4631      	mov	r1, r6
   2a0ee:	a80d      	add	r0, sp, #52	; 0x34
   2a0f0:	f7ff ffbb 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2a0f4:	4621      	mov	r1, r4
   2a0f6:	2210      	movs	r2, #16
   2a0f8:	a801      	add	r0, sp, #4
	m[64] = z;
   2a0fa:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2a0fe:	f7ff ffb4 	bl	2a06a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2a102:	463b      	mov	r3, r7
   2a104:	2241      	movs	r2, #65	; 0x41
   2a106:	a905      	add	r1, sp, #20
   2a108:	a801      	add	r0, sp, #4
   2a10a:	f7ff ffc7 	bl	2a09c <bt_smp_aes_cmac>
	if (err) {
   2a10e:	4604      	mov	r4, r0
   2a110:	b918      	cbnz	r0, 2a11a <smp_f4+0x46>
	sys_mem_swap(res, 16);
   2a112:	2110      	movs	r1, #16
   2a114:	4638      	mov	r0, r7
   2a116:	f7ff ffb2 	bl	2a07e <sys_mem_swap>
}
   2a11a:	4620      	mov	r0, r4
   2a11c:	b017      	add	sp, #92	; 0x5c
   2a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a120 <smp_f6>:
{
   2a120:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a122:	b097      	sub	sp, #92	; 0x5c
   2a124:	4605      	mov	r5, r0
   2a126:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2a128:	a805      	add	r0, sp, #20
   2a12a:	2210      	movs	r2, #16
{
   2a12c:	461c      	mov	r4, r3
   2a12e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2a130:	f7ff ff9b 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2a134:	2210      	movs	r2, #16
   2a136:	4631      	mov	r1, r6
   2a138:	a809      	add	r0, sp, #36	; 0x24
   2a13a:	f7ff ff96 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2a13e:	4621      	mov	r1, r4
   2a140:	2210      	movs	r2, #16
   2a142:	a80d      	add	r0, sp, #52	; 0x34
   2a144:	f7ff ff91 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2a148:	991c      	ldr	r1, [sp, #112]	; 0x70
   2a14a:	2203      	movs	r2, #3
   2a14c:	a811      	add	r0, sp, #68	; 0x44
   2a14e:	f7ff ff8c 	bl	2a06a <sys_memcpy_swap>
	m[51] = a1->type;
   2a152:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2a154:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a158:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2a15c:	4621      	mov	r1, r4
   2a15e:	2206      	movs	r2, #6
   2a160:	a812      	add	r0, sp, #72	; 0x48
   2a162:	f7fe fa28 	bl	285b6 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a166:	4621      	mov	r1, r4
   2a168:	2206      	movs	r2, #6
   2a16a:	a812      	add	r0, sp, #72	; 0x48
   2a16c:	f7ff ff7d 	bl	2a06a <sys_memcpy_swap>
	m[58] = a2->type;
   2a170:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2a172:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a176:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2a17a:	4621      	mov	r1, r4
   2a17c:	2206      	movs	r2, #6
   2a17e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2a182:	f7fe fa18 	bl	285b6 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a186:	4621      	mov	r1, r4
   2a188:	2206      	movs	r2, #6
   2a18a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2a18e:	f7ff ff6c 	bl	2a06a <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2a192:	2210      	movs	r2, #16
   2a194:	4629      	mov	r1, r5
   2a196:	a801      	add	r0, sp, #4
   2a198:	f7ff ff67 	bl	2a06a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2a19c:	463b      	mov	r3, r7
   2a19e:	2241      	movs	r2, #65	; 0x41
   2a1a0:	a905      	add	r1, sp, #20
   2a1a2:	a801      	add	r0, sp, #4
   2a1a4:	f7ff ff7a 	bl	2a09c <bt_smp_aes_cmac>
	if (err) {
   2a1a8:	4604      	mov	r4, r0
   2a1aa:	b918      	cbnz	r0, 2a1b4 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   2a1ac:	2110      	movs	r1, #16
   2a1ae:	4638      	mov	r0, r7
   2a1b0:	f7ff ff65 	bl	2a07e <sys_mem_swap>
}
   2a1b4:	4620      	mov	r0, r4
   2a1b6:	b017      	add	sp, #92	; 0x5c
   2a1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a1ba <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a1ba:	2301      	movs	r3, #1
   2a1bc:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a1be:	43db      	mvns	r3, r3
   2a1c0:	f3bf 8f5b 	dmb	ish
   2a1c4:	e850 2f00 	ldrex	r2, [r0]
   2a1c8:	401a      	ands	r2, r3
   2a1ca:	e840 2100 	strex	r1, r2, [r0]
   2a1ce:	2900      	cmp	r1, #0
   2a1d0:	d1f8      	bne.n	2a1c4 <atomic_clear_bit+0xa>
   2a1d2:	f3bf 8f5b 	dmb	ish
}
   2a1d6:	4770      	bx	lr

0002a1d8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2a1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a1da:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2a1dc:	2200      	movs	r2, #0
   2a1de:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2a1e0:	4604      	mov	r4, r0
   2a1e2:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2a1e4:	460a      	mov	r2, r1
   2a1e6:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2a1ea:	2106      	movs	r1, #6
   2a1ec:	f7fe feaf 	bl	28f4e <bt_l2cap_send_cb>
   2a1f0:	b128      	cbz	r0, 2a1fe <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2a1f2:	4628      	mov	r0, r5
}
   2a1f4:	b003      	add	sp, #12
   2a1f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2a1fa:	f7f5 b837 	b.w	1f26c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2a1fe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a202:	2300      	movs	r3, #0
   2a204:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   2a208:	b003      	add	sp, #12
   2a20a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2a20e:	f7f9 be5d 	b.w	23ecc <k_work_reschedule>

0002a212 <z_log_msg2_static_create.constprop.0>:
   2a212:	2300      	movs	r3, #0
   2a214:	f7fb bce4 	b.w	25be0 <z_impl_z_log_msg2_static_create>

0002a218 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2a218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a21a:	ab0a      	add	r3, sp, #40	; 0x28
   2a21c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2a21e:	9302      	str	r3, [sp, #8]
   2a220:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a222:	9301      	str	r3, [sp, #4]
   2a224:	2300      	movs	r3, #0
   2a226:	9300      	str	r3, [sp, #0]
   2a228:	2201      	movs	r2, #1
   2a22a:	4618      	mov	r0, r3
   2a22c:	f7dc f98a 	bl	6544 <z_impl_z_log_msg2_runtime_vcreate>
}
   2a230:	b007      	add	sp, #28
   2a232:	f85d fb04 	ldr.w	pc, [sp], #4

0002a236 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a236:	f3bf 8f5b 	dmb	ish
   2a23a:	6800      	ldr	r0, [r0, #0]
   2a23c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a240:	4108      	asrs	r0, r1
}
   2a242:	f000 0001 	and.w	r0, r0, #1
   2a246:	4770      	bx	lr

0002a248 <update_keys_check>:
{
   2a248:	b510      	push	{r4, lr}
   2a24a:	4603      	mov	r3, r0
	if (!keys ||
   2a24c:	b1d9      	cbz	r1, 2a286 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2a24e:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2a250:	f010 0f24 	tst.w	r0, #36	; 0x24
   2a254:	d017      	beq.n	2a286 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2a256:	7d1a      	ldrb	r2, [r3, #20]
   2a258:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2a25a:	7b09      	ldrb	r1, [r1, #12]
   2a25c:	42a2      	cmp	r2, r4
   2a25e:	bf28      	it	cs
   2a260:	4622      	movcs	r2, r4
   2a262:	4291      	cmp	r1, r2
   2a264:	d901      	bls.n	2a26a <update_keys_check+0x22>
		return false;
   2a266:	2000      	movs	r0, #0
}
   2a268:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2a26a:	0682      	lsls	r2, r0, #26
   2a26c:	d404      	bmi.n	2a278 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2a26e:	7a18      	ldrb	r0, [r3, #8]
   2a270:	3800      	subs	r0, #0
   2a272:	bf18      	it	ne
   2a274:	2001      	movne	r0, #1
   2a276:	e7f7      	b.n	2a268 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2a278:	2105      	movs	r1, #5
   2a27a:	1d18      	adds	r0, r3, #4
   2a27c:	f7ff ffdb 	bl	2a236 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2a280:	2800      	cmp	r0, #0
   2a282:	d1f4      	bne.n	2a26e <update_keys_check+0x26>
   2a284:	e7ef      	b.n	2a266 <update_keys_check+0x1e>
		return true;
   2a286:	2001      	movs	r0, #1
   2a288:	e7ee      	b.n	2a268 <update_keys_check+0x20>

0002a28a <atomic_test_and_clear_bit>:
{
   2a28a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a28c:	2301      	movs	r3, #1
   2a28e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a292:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a294:	f3bf 8f5b 	dmb	ish
   2a298:	e850 3f00 	ldrex	r3, [r0]
   2a29c:	ea03 0c02 	and.w	ip, r3, r2
   2a2a0:	e840 ce00 	strex	lr, ip, [r0]
   2a2a4:	f1be 0f00 	cmp.w	lr, #0
   2a2a8:	d1f6      	bne.n	2a298 <atomic_test_and_clear_bit+0xe>
   2a2aa:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a2ae:	420b      	tst	r3, r1
}
   2a2b0:	bf14      	ite	ne
   2a2b2:	2001      	movne	r0, #1
   2a2b4:	2000      	moveq	r0, #0
   2a2b6:	f85d fb04 	ldr.w	pc, [sp], #4

0002a2ba <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a2ba:	2301      	movs	r3, #1
   2a2bc:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a2be:	f3bf 8f5b 	dmb	ish
   2a2c2:	e850 2f00 	ldrex	r2, [r0]
   2a2c6:	431a      	orrs	r2, r3
   2a2c8:	e840 2100 	strex	r1, r2, [r0]
   2a2cc:	2900      	cmp	r1, #0
   2a2ce:	d1f8      	bne.n	2a2c2 <atomic_set_bit+0x8>
   2a2d0:	f3bf 8f5b 	dmb	ish
}
   2a2d4:	4770      	bx	lr

0002a2d6 <smp_keypress_notif>:
{
   2a2d6:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2a2d8:	210e      	movs	r1, #14
   2a2da:	f7ff ffee 	bl	2a2ba <atomic_set_bit>
}
   2a2de:	2000      	movs	r0, #0
   2a2e0:	bd08      	pop	{r3, pc}

0002a2e2 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2a2e2:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2a2e4:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2a2e6:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2a2e8:	4628      	mov	r0, r5
   2a2ea:	2104      	movs	r1, #4
   2a2ec:	f7ff ffa3 	bl	2a236 <atomic_test_bit>
   2a2f0:	b970      	cbnz	r0, 2a310 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2a2f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2a2f6:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2a2f8:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2a2fa:	4608      	mov	r0, r1
   2a2fc:	f7fe fe24 	bl	28f48 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2a300:	4604      	mov	r4, r0
   2a302:	b938      	cbnz	r0, 2a314 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2a304:	2104      	movs	r1, #4
   2a306:	4628      	mov	r0, r5
   2a308:	f7ff ffd7 	bl	2a2ba <atomic_set_bit>
}
   2a30c:	4620      	mov	r0, r4
   2a30e:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2a310:	2200      	movs	r2, #0
   2a312:	e7f0      	b.n	2a2f6 <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   2a314:	2101      	movs	r1, #1
   2a316:	3008      	adds	r0, #8
   2a318:	f000 fb67 	bl	2a9ea <net_buf_simple_add>
	hdr->code = op;
   2a31c:	7006      	strb	r6, [r0, #0]
	return buf;
   2a31e:	e7f5      	b.n	2a30c <smp_create_pdu.constprop.0+0x2a>

0002a320 <smp_send_pairing_random>:
{
   2a320:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a322:	2104      	movs	r1, #4
{
   2a324:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a326:	f7ff ffdc 	bl	2a2e2 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2a32a:	4604      	mov	r4, r0
   2a32c:	b178      	cbz	r0, 2a34e <smp_send_pairing_random+0x2e>
   2a32e:	2110      	movs	r1, #16
   2a330:	3008      	adds	r0, #8
   2a332:	f000 fb5a 	bl	2a9ea <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2a336:	2210      	movs	r2, #16
   2a338:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2a33c:	f7fe f93b 	bl	285b6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2a340:	4628      	mov	r0, r5
   2a342:	2200      	movs	r2, #0
   2a344:	4621      	mov	r1, r4
   2a346:	f7ff ff47 	bl	2a1d8 <smp_send.constprop.0>
	return 0;
   2a34a:	2000      	movs	r0, #0
}
   2a34c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2a34e:	2008      	movs	r0, #8
   2a350:	e7fc      	b.n	2a34c <smp_send_pairing_random+0x2c>

0002a352 <smp_pairing_confirm>:
{
   2a352:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2a354:	688d      	ldr	r5, [r1, #8]
{
   2a356:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2a358:	210b      	movs	r1, #11
   2a35a:	3004      	adds	r0, #4
   2a35c:	f7ff ff2d 	bl	2a1ba <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2a360:	2210      	movs	r2, #16
   2a362:	4629      	mov	r1, r5
   2a364:	f104 0017 	add.w	r0, r4, #23
   2a368:	f7fe f925 	bl	285b6 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2a36c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2a370:	78db      	ldrb	r3, [r3, #3]
   2a372:	b93b      	cbnz	r3, 2a384 <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2a374:	4620      	mov	r0, r4
   2a376:	2104      	movs	r1, #4
   2a378:	f7ff ff9f 	bl	2a2ba <atomic_set_bit>
}
   2a37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   2a380:	f7ff bfce 	b.w	2a320 <smp_send_pairing_random>
}
   2a384:	2000      	movs	r0, #0
   2a386:	bd38      	pop	{r3, r4, r5, pc}

0002a388 <smp_reset>:
{
   2a388:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a38a:	1d03      	adds	r3, r0, #4
   2a38c:	4604      	mov	r4, r0
   2a38e:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2a390:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   2a394:	f3bf 8f5b 	dmb	ish
   2a398:	e853 2f00 	ldrex	r2, [r3]
   2a39c:	e843 5100 	strex	r1, r5, [r3]
   2a3a0:	2900      	cmp	r1, #0
   2a3a2:	d1f9      	bne.n	2a398 <smp_reset+0x10>
   2a3a4:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2a3a8:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   2a3ac:	f001 fa45 	bl	2b83a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2a3b0:	7225      	strb	r5, [r4, #8]
   2a3b2:	f3bf 8f5b 	dmb	ish
   2a3b6:	e854 3f00 	ldrex	r3, [r4]
   2a3ba:	e844 5200 	strex	r2, r5, [r4]
   2a3be:	2a00      	cmp	r2, #0
   2a3c0:	d1f9      	bne.n	2a3b6 <smp_reset+0x2e>
   2a3c2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2a3c6:	78f3      	ldrb	r3, [r6, #3]
   2a3c8:	b92b      	cbnz	r3, 2a3d6 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2a3ca:	4620      	mov	r0, r4
   2a3cc:	210b      	movs	r1, #11
}
   2a3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2a3d2:	f7ff bf72 	b.w	2a2ba <atomic_set_bit>
}
   2a3d6:	bd70      	pop	{r4, r5, r6, pc}

0002a3d8 <smp_c1>:
{
   2a3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a3dc:	b089      	sub	sp, #36	; 0x24
   2a3de:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2a3e2:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2a3e4:	783b      	ldrb	r3, [r7, #0]
{
   2a3e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2a3e8:	f88d 3000 	strb.w	r3, [sp]
{
   2a3ec:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2a3ee:	f898 3000 	ldrb.w	r3, [r8]
   2a3f2:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2a3f6:	4611      	mov	r1, r2
   2a3f8:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2a3fa:	2207      	movs	r2, #7
   2a3fc:	f10d 0002 	add.w	r0, sp, #2
   2a400:	f7fe f8d9 	bl	285b6 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2a404:	2207      	movs	r2, #7
   2a406:	4649      	mov	r1, r9
   2a408:	f10d 0009 	add.w	r0, sp, #9
   2a40c:	f7fe f8d3 	bl	285b6 <memcpy>
	while (len--) {
   2a410:	f104 0010 	add.w	r0, r4, #16
   2a414:	4629      	mov	r1, r5
   2a416:	466a      	mov	r2, sp
   2a418:	42a0      	cmp	r0, r4
   2a41a:	d127      	bne.n	2a46c <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2a41c:	462a      	mov	r2, r5
   2a41e:	4629      	mov	r1, r5
   2a420:	4630      	mov	r0, r6
   2a422:	f7ec f9e9 	bl	167f8 <bt_encrypt_le>
	if (err) {
   2a426:	4604      	mov	r4, r0
   2a428:	b9e0      	cbnz	r0, 2a464 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2a42a:	2206      	movs	r2, #6
   2a42c:	f108 0101 	add.w	r1, r8, #1
   2a430:	a804      	add	r0, sp, #16
   2a432:	f7fe f8c0 	bl	285b6 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2a436:	2206      	movs	r2, #6
   2a438:	1c79      	adds	r1, r7, #1
   2a43a:	f10d 0016 	add.w	r0, sp, #22
   2a43e:	f7fe f8ba 	bl	285b6 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2a442:	2204      	movs	r2, #4
   2a444:	4621      	mov	r1, r4
   2a446:	a807      	add	r0, sp, #28
   2a448:	f7fe f8c0 	bl	285cc <memset>
	while (len--) {
   2a44c:	f105 0010 	add.w	r0, r5, #16
   2a450:	462a      	mov	r2, r5
   2a452:	ab04      	add	r3, sp, #16
   2a454:	4282      	cmp	r2, r0
   2a456:	d112      	bne.n	2a47e <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2a458:	462a      	mov	r2, r5
   2a45a:	4629      	mov	r1, r5
   2a45c:	4630      	mov	r0, r6
   2a45e:	f7ec f9cb 	bl	167f8 <bt_encrypt_le>
   2a462:	4604      	mov	r4, r0
}
   2a464:	4620      	mov	r0, r4
   2a466:	b009      	add	sp, #36	; 0x24
   2a468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2a46c:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a470:	f812 cb01 	ldrb.w	ip, [r2], #1
   2a474:	ea83 030c 	eor.w	r3, r3, ip
   2a478:	f801 3b01 	strb.w	r3, [r1], #1
   2a47c:	e7cc      	b.n	2a418 <smp_c1+0x40>
   2a47e:	f812 1b01 	ldrb.w	r1, [r2], #1
   2a482:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a486:	4061      	eors	r1, r4
   2a488:	f802 1c01 	strb.w	r1, [r2, #-1]
   2a48c:	e7e2      	b.n	2a454 <smp_c1+0x7c>

0002a48e <legacy_send_pairing_confirm>:
{
   2a48e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a490:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2a492:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   2a496:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a498:	f7ff ff23 	bl	2a2e2 <smp_create_pdu.constprop.0>
	if (!buf) {
   2a49c:	4606      	mov	r6, r0
   2a49e:	b1c0      	cbz	r0, 2a4d2 <legacy_send_pairing_confirm+0x44>
   2a4a0:	2110      	movs	r1, #16
   2a4a2:	3008      	adds	r0, #8
   2a4a4:	f000 faa1 	bl	2a9ea <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2a4a8:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2a4ac:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2a4ae:	9002      	str	r0, [sp, #8]
   2a4b0:	9301      	str	r3, [sp, #4]
   2a4b2:	9400      	str	r4, [sp, #0]
   2a4b4:	f105 0310 	add.w	r3, r5, #16
   2a4b8:	f105 0209 	add.w	r2, r5, #9
   2a4bc:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2a4c0:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2a4c4:	f7ff ff88 	bl	2a3d8 <smp_c1>
   2a4c8:	4604      	mov	r4, r0
   2a4ca:	b120      	cbz	r0, 2a4d6 <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   2a4cc:	4630      	mov	r0, r6
   2a4ce:	f7f4 fecd 	bl	1f26c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2a4d2:	2008      	movs	r0, #8
   2a4d4:	e009      	b.n	2a4ea <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   2a4d6:	4602      	mov	r2, r0
   2a4d8:	4631      	mov	r1, r6
   2a4da:	4628      	mov	r0, r5
   2a4dc:	f7ff fe7c 	bl	2a1d8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2a4e0:	1d28      	adds	r0, r5, #4
   2a4e2:	4621      	mov	r1, r4
   2a4e4:	f7ff fe69 	bl	2a1ba <atomic_clear_bit>
	return 0;
   2a4e8:	4620      	mov	r0, r4
}
   2a4ea:	b004      	add	sp, #16
   2a4ec:	bd70      	pop	{r4, r5, r6, pc}

0002a4ee <bt_smp_request_ltk>:
{
   2a4ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a4f2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2a4f6:	e9cd 2300 	strd	r2, r3, [sp]
   2a4fa:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2a4fc:	f7e6 fffa 	bl	114f4 <smp_chan_get>
	if (!smp) {
   2a500:	4605      	mov	r5, r0
   2a502:	2800      	cmp	r0, #0
   2a504:	f000 8090 	beq.w	2a628 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2a508:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a50c:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2a50e:	f1b9 0f00 	cmp.w	r9, #0
   2a512:	d12a      	bne.n	2a56a <bt_smp_request_ltk+0x7c>
   2a514:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a518:	4313      	orrs	r3, r2
   2a51a:	d126      	bne.n	2a56a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a51c:	2103      	movs	r1, #3
   2a51e:	4638      	mov	r0, r7
   2a520:	f7ff fe89 	bl	2a236 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2a524:	b308      	cbz	r0, 2a56a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2a526:	2101      	movs	r1, #1
   2a528:	4638      	mov	r0, r7
   2a52a:	f7ff fe84 	bl	2a236 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a52e:	4606      	mov	r6, r0
   2a530:	b1d8      	cbz	r0, 2a56a <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2a532:	7d2c      	ldrb	r4, [r5, #20]
   2a534:	7b6b      	ldrb	r3, [r5, #13]
   2a536:	429c      	cmp	r4, r3
   2a538:	bf28      	it	cs
   2a53a:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2a53c:	4622      	mov	r2, r4
   2a53e:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2a542:	4640      	mov	r0, r8
   2a544:	f7fe f837 	bl	285b6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2a548:	2c0f      	cmp	r4, #15
   2a54a:	d806      	bhi.n	2a55a <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2a54c:	f1c4 0210 	rsb	r2, r4, #16
   2a550:	4649      	mov	r1, r9
   2a552:	eb08 0004 	add.w	r0, r8, r4
   2a556:	f7fe f839 	bl	285cc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a55a:	2101      	movs	r1, #1
   2a55c:	4638      	mov	r0, r7
   2a55e:	f7ff feac 	bl	2a2ba <atomic_set_bit>
}
   2a562:	4630      	mov	r0, r6
   2a564:	b003      	add	sp, #12
   2a566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2a56a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2a56e:	b983      	cbnz	r3, 2a592 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2a570:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2a574:	7a21      	ldrb	r1, [r4, #8]
   2a576:	4632      	mov	r2, r6
   2a578:	2020      	movs	r0, #32
   2a57a:	f7e8 fe95 	bl	132a8 <bt_keys_find>
   2a57e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2a582:	b930      	cbnz	r0, 2a592 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2a584:	7a21      	ldrb	r1, [r4, #8]
   2a586:	4632      	mov	r2, r6
   2a588:	2001      	movs	r0, #1
   2a58a:	f7e8 fe8d 	bl	132a8 <bt_keys_find>
   2a58e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2a592:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a596:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2a59a:	b9ee      	cbnz	r6, 2a5d8 <bt_smp_request_ltk+0xea>
   2a59c:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a5a0:	4313      	orrs	r3, r2
   2a5a2:	d119      	bne.n	2a5d8 <bt_smp_request_ltk+0xea>
   2a5a4:	b388      	cbz	r0, 2a60a <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a5a6:	89c3      	ldrh	r3, [r0, #14]
   2a5a8:	069a      	lsls	r2, r3, #26
   2a5aa:	d516      	bpl.n	2a5da <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2a5ac:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2a5ae:	f100 011a 	add.w	r1, r0, #26
   2a5b2:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2a5b4:	4640      	mov	r0, r8
   2a5b6:	f7fd fffe 	bl	285b6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2a5ba:	2c0f      	cmp	r4, #15
   2a5bc:	d806      	bhi.n	2a5cc <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   2a5be:	f1c4 0210 	rsb	r2, r4, #16
   2a5c2:	4631      	mov	r1, r6
   2a5c4:	eb08 0004 	add.w	r0, r8, r4
   2a5c8:	f7fe f800 	bl	285cc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a5cc:	2101      	movs	r1, #1
   2a5ce:	4638      	mov	r0, r7
   2a5d0:	f7ff fe73 	bl	2a2ba <atomic_set_bit>
		return true;
   2a5d4:	2601      	movs	r6, #1
   2a5d6:	e7c4      	b.n	2a562 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a5d8:	b1b8      	cbz	r0, 2a60a <bt_smp_request_ltk+0x11c>
   2a5da:	89c3      	ldrh	r3, [r0, #14]
   2a5dc:	07db      	lsls	r3, r3, #31
   2a5de:	d514      	bpl.n	2a60a <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a5e0:	2208      	movs	r2, #8
   2a5e2:	4669      	mov	r1, sp
   2a5e4:	3068      	adds	r0, #104	; 0x68
   2a5e6:	f7fd ffbd 	bl	28564 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a5ea:	b970      	cbnz	r0, 2a60a <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2a5ec:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2a5f0:	2202      	movs	r2, #2
   2a5f2:	a90a      	add	r1, sp, #40	; 0x28
   2a5f4:	3070      	adds	r0, #112	; 0x70
   2a5f6:	f7fd ffb5 	bl	28564 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a5fa:	4606      	mov	r6, r0
   2a5fc:	b928      	cbnz	r0, 2a60a <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2a5fe:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2a602:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2a604:	3172      	adds	r1, #114	; 0x72
   2a606:	4622      	mov	r2, r4
   2a608:	e7d4      	b.n	2a5b4 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a60a:	210f      	movs	r1, #15
   2a60c:	4638      	mov	r0, r7
   2a60e:	f7ff fe12 	bl	2a236 <atomic_test_bit>
   2a612:	b120      	cbz	r0, 2a61e <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2a614:	2202      	movs	r2, #2
   2a616:	2106      	movs	r1, #6
   2a618:	4620      	mov	r0, r4
   2a61a:	f7e4 fa1f 	bl	ea5c <bt_conn_security_changed>
	smp_reset(smp);
   2a61e:	4628      	mov	r0, r5
   2a620:	f7ff feb2 	bl	2a388 <smp_reset>
	return false;
   2a624:	2600      	movs	r6, #0
   2a626:	e79c      	b.n	2a562 <bt_smp_request_ltk+0x74>
		return false;
   2a628:	4606      	mov	r6, r0
   2a62a:	e79a      	b.n	2a562 <bt_smp_request_ltk+0x74>

0002a62c <bt_smp_irk_get>:
{
   2a62c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2a62e:	2500      	movs	r5, #0
{
   2a630:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2a632:	2210      	movs	r2, #16
   2a634:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2a636:	e9cd 5500 	strd	r5, r5, [sp]
   2a63a:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2a63e:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2a640:	f7fd ff90 	bl	28564 <memcmp>
   2a644:	b180      	cbz	r0, 2a668 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2a646:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2a648:	220c      	movs	r2, #12
   2a64a:	4629      	mov	r1, r5
   2a64c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2a64e:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2a650:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2a652:	70e5      	strb	r5, [r4, #3]
   2a654:	1d20      	adds	r0, r4, #4
   2a656:	f7fd ffb9 	bl	285cc <memset>
	err = bt_encrypt_le(key, res, res);
   2a65a:	4622      	mov	r2, r4
   2a65c:	4621      	mov	r1, r4
   2a65e:	4630      	mov	r0, r6
   2a660:	f7ec f8ca 	bl	167f8 <bt_encrypt_le>
}
   2a664:	b004      	add	sp, #16
   2a666:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a668:	f06f 0015 	mvn.w	r0, #21
   2a66c:	e7fa      	b.n	2a664 <bt_smp_irk_get+0x38>

0002a66e <bt_smp_start_security>:
{
   2a66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   2a670:	78c3      	ldrb	r3, [r0, #3]
{
   2a672:	4604      	mov	r4, r0
	switch (conn->role) {
   2a674:	2b00      	cmp	r3, #0
   2a676:	d157      	bne.n	2a728 <bt_smp_start_security+0xba>
		smp = smp_chan_get(conn);
   2a678:	f7e6 ff3c 	bl	114f4 <smp_chan_get>
		if (!smp) {
   2a67c:	4605      	mov	r5, r0
   2a67e:	2800      	cmp	r0, #0
   2a680:	d055      	beq.n	2a72e <bt_smp_start_security+0xc0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2a682:	1d06      	adds	r6, r0, #4
   2a684:	2103      	movs	r1, #3
   2a686:	4630      	mov	r0, r6
   2a688:	f7ff fdd5 	bl	2a236 <atomic_test_bit>
   2a68c:	b120      	cbz	r0, 2a698 <bt_smp_start_security+0x2a>
			return -EBUSY;
   2a68e:	f06f 040f 	mvn.w	r4, #15
}
   2a692:	4620      	mov	r0, r4
   2a694:	b003      	add	sp, #12
   2a696:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2a698:	2101      	movs	r1, #1
   2a69a:	4630      	mov	r0, r6
   2a69c:	f7ff fdcb 	bl	2a236 <atomic_test_bit>
   2a6a0:	2800      	cmp	r0, #0
   2a6a2:	d1f4      	bne.n	2a68e <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2a6a4:	210b      	movs	r1, #11
   2a6a6:	1d20      	adds	r0, r4, #4
   2a6a8:	f7ff fdc5 	bl	2a236 <atomic_test_bit>
   2a6ac:	bb00      	cbnz	r0, 2a6f0 <bt_smp_start_security+0x82>
	if (!conn->le.keys) {
   2a6ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2a6b2:	b983      	cbnz	r3, 2a6d6 <bt_smp_start_security+0x68>
						     conn->id, &conn->le.dst);
   2a6b4:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2a6b8:	7a21      	ldrb	r1, [r4, #8]
   2a6ba:	463a      	mov	r2, r7
   2a6bc:	2020      	movs	r0, #32
   2a6be:	f7e8 fdf3 	bl	132a8 <bt_keys_find>
   2a6c2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2a6c6:	b930      	cbnz	r0, 2a6d6 <bt_smp_start_security+0x68>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2a6c8:	7a21      	ldrb	r1, [r4, #8]
   2a6ca:	463a      	mov	r2, r7
   2a6cc:	2004      	movs	r0, #4
   2a6ce:	f7e8 fdeb 	bl	132a8 <bt_keys_find>
   2a6d2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   2a6d6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2a6da:	b149      	cbz	r1, 2a6f0 <bt_smp_start_security+0x82>
   2a6dc:	89cb      	ldrh	r3, [r1, #14]
   2a6de:	f003 0324 	and.w	r3, r3, #36	; 0x24
   2a6e2:	b12b      	cbz	r3, 2a6f0 <bt_smp_start_security+0x82>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2a6e4:	7aa3      	ldrb	r3, [r4, #10]
   2a6e6:	2b02      	cmp	r3, #2
   2a6e8:	d908      	bls.n	2a6fc <bt_smp_start_security+0x8e>
   2a6ea:	7b4b      	ldrb	r3, [r1, #13]
   2a6ec:	07db      	lsls	r3, r3, #31
   2a6ee:	d405      	bmi.n	2a6fc <bt_smp_start_security+0x8e>
			return smp_send_pairing_req(conn);
   2a6f0:	4620      	mov	r0, r4
}
   2a6f2:	b003      	add	sp, #12
   2a6f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   2a6f8:	f7e7 b990 	b.w	11a1c <smp_send_pairing_req>
		err = bt_conn_le_start_encryption(conn,
   2a6fc:	7b0b      	ldrb	r3, [r1, #12]
   2a6fe:	9300      	str	r3, [sp, #0]
   2a700:	f101 0218 	add.w	r2, r1, #24
   2a704:	f101 031a 	add.w	r3, r1, #26
   2a708:	4620      	mov	r0, r4
   2a70a:	3110      	adds	r1, #16
   2a70c:	f7fe face 	bl	28cac <bt_conn_le_start_encryption>
		if (err) {
   2a710:	4604      	mov	r4, r0
   2a712:	2800      	cmp	r0, #0
   2a714:	d1bd      	bne.n	2a692 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2a716:	4628      	mov	r0, r5
   2a718:	210b      	movs	r1, #11
   2a71a:	f7ff fdce 	bl	2a2ba <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a71e:	2101      	movs	r1, #1
   2a720:	4630      	mov	r0, r6
   2a722:	f7ff fdca 	bl	2a2ba <atomic_set_bit>
		return 0;
   2a726:	e7b4      	b.n	2a692 <bt_smp_start_security+0x24>
		return -EINVAL;
   2a728:	f06f 0415 	mvn.w	r4, #21
   2a72c:	e7b1      	b.n	2a692 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   2a72e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2a732:	e7ae      	b.n	2a692 <bt_smp_start_security+0x24>

0002a734 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a734:	1d03      	adds	r3, r0, #4
{
   2a736:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a738:	4605      	mov	r5, r0
   2a73a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a73c:	4618      	mov	r0, r3
   2a73e:	2103      	movs	r1, #3
   2a740:	f7ff fd79 	bl	2a236 <atomic_test_bit>
   2a744:	b1f0      	cbz	r0, 2a784 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2a746:	4631      	mov	r1, r6
   2a748:	4628      	mov	r0, r5
   2a74a:	f7e8 f921 	bl	12990 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2a74e:	2105      	movs	r1, #5
   2a750:	4628      	mov	r0, r5
   2a752:	f7ff fdc6 	bl	2a2e2 <smp_create_pdu.constprop.0>
	if (!buf) {
   2a756:	4604      	mov	r4, r0
   2a758:	b308      	cbz	r0, 2a79e <smp_error+0x6a>
   2a75a:	2101      	movs	r1, #1
   2a75c:	3008      	adds	r0, #8
   2a75e:	f000 f944 	bl	2a9ea <net_buf_simple_add>
	rsp->reason = reason;
   2a762:	7006      	strb	r6, [r0, #0]
   2a764:	2600      	movs	r6, #0
   2a766:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2a76a:	9600      	str	r6, [sp, #0]
   2a76c:	4633      	mov	r3, r6
   2a76e:	4622      	mov	r2, r4
   2a770:	2106      	movs	r1, #6
   2a772:	f7fe fbec 	bl	28f4e <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2a776:	b118      	cbz	r0, 2a780 <smp_error+0x4c>
		net_buf_unref(buf);
   2a778:	4620      	mov	r0, r4
   2a77a:	f7f4 fd77 	bl	1f26c <net_buf_unref>
	return 0;
   2a77e:	4630      	mov	r0, r6
}
   2a780:	b002      	add	sp, #8
   2a782:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a784:	2101      	movs	r1, #1
   2a786:	4618      	mov	r0, r3
   2a788:	f7ff fd55 	bl	2a236 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a78c:	2800      	cmp	r0, #0
   2a78e:	d1da      	bne.n	2a746 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a790:	210f      	movs	r1, #15
   2a792:	4618      	mov	r0, r3
   2a794:	f7ff fd4f 	bl	2a236 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a798:	2800      	cmp	r0, #0
   2a79a:	d1d4      	bne.n	2a746 <smp_error+0x12>
   2a79c:	e7d7      	b.n	2a74e <smp_error+0x1a>
		return -ENOBUFS;
   2a79e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a7a2:	e7ed      	b.n	2a780 <smp_error+0x4c>

0002a7a4 <bt_smp_dhkey_ready>:
{
   2a7a4:	b570      	push	{r4, r5, r6, lr}
   2a7a6:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2a7a8:	2008      	movs	r0, #8
   2a7aa:	f7e6 fec3 	bl	11534 <smp_find>
	if (smp) {
   2a7ae:	4604      	mov	r4, r0
   2a7b0:	b1b8      	cbz	r0, 2a7e2 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2a7b2:	1d05      	adds	r5, r0, #4
   2a7b4:	2108      	movs	r1, #8
   2a7b6:	4628      	mov	r0, r5
   2a7b8:	f7ff fcff 	bl	2a1ba <atomic_clear_bit>
	if (!dhkey) {
   2a7bc:	b3b6      	cbz	r6, 2a82c <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2a7be:	2107      	movs	r1, #7
   2a7c0:	f7ff fcfb 	bl	2a1ba <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2a7c4:	4631      	mov	r1, r6
   2a7c6:	2220      	movs	r2, #32
   2a7c8:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2a7cc:	f7fd fef3 	bl	285b6 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a7d0:	210a      	movs	r1, #10
   2a7d2:	4628      	mov	r0, r5
   2a7d4:	f7ff fd2f 	bl	2a236 <atomic_test_bit>
   2a7d8:	b168      	cbz	r0, 2a7f6 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a7da:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a7dc:	4628      	mov	r0, r5
   2a7de:	f7ff fd6c 	bl	2a2ba <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2a7e2:	2007      	movs	r0, #7
   2a7e4:	f7e6 fea6 	bl	11534 <smp_find>
		if (smp) {
   2a7e8:	4604      	mov	r4, r0
   2a7ea:	b118      	cbz	r0, 2a7f4 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2a7ec:	f7e6 ff3c 	bl	11668 <smp_dhkey_generate>
			if (err) {
   2a7f0:	4601      	mov	r1, r0
   2a7f2:	b9b8      	cbnz	r0, 2a824 <bt_smp_dhkey_ready+0x80>
}
   2a7f4:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a7f6:	2110      	movs	r1, #16
   2a7f8:	4628      	mov	r0, r5
   2a7fa:	f7ff fd1c 	bl	2a236 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a7fe:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a800:	2800      	cmp	r0, #0
   2a802:	d1eb      	bne.n	2a7dc <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2a804:	4628      	mov	r0, r5
   2a806:	f7ff fd16 	bl	2a236 <atomic_test_bit>
   2a80a:	2800      	cmp	r0, #0
   2a80c:	d0e9      	beq.n	2a7e2 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2a80e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2a812:	78db      	ldrb	r3, [r3, #3]
   2a814:	2b00      	cmp	r3, #0
   2a816:	d1e4      	bne.n	2a7e2 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   2a818:	4620      	mov	r0, r4
   2a81a:	f7e7 fa9f 	bl	11d5c <compute_and_send_central_dhcheck>
		if (err) {
   2a81e:	4601      	mov	r1, r0
   2a820:	2800      	cmp	r0, #0
   2a822:	d0de      	beq.n	2a7e2 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2a824:	4620      	mov	r0, r4
   2a826:	f7ff ff85 	bl	2a734 <smp_error>
   2a82a:	e7da      	b.n	2a7e2 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2a82c:	210b      	movs	r1, #11
   2a82e:	e7f9      	b.n	2a824 <bt_smp_dhkey_ready+0x80>

0002a830 <smp_check_complete>:
{
   2a830:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2a832:	7883      	ldrb	r3, [r0, #2]
   2a834:	2b01      	cmp	r3, #1
{
   2a836:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   2a838:	d110      	bne.n	2a85c <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2a83a:	2106      	movs	r1, #6
   2a83c:	f7fe fbbe 	bl	28fbc <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2a840:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   2a844:	ea23 0104 	bic.w	r1, r3, r4
   2a848:	f800 1c08 	strb.w	r1, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   2a84c:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   2a850:	b921      	cbnz	r1, 2a85c <smp_check_complete+0x2c>
}
   2a852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2a856:	38f0      	subs	r0, #240	; 0xf0
   2a858:	f7e8 b89a 	b.w	12990 <smp_pairing_complete>
}
   2a85c:	bd10      	pop	{r4, pc}

0002a85e <smp_sign_info_sent>:
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
   2a85e:	2104      	movs	r1, #4
   2a860:	f7ff bfe6 	b.w	2a830 <smp_check_complete>

0002a864 <smp_id_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   2a864:	2102      	movs	r1, #2
   2a866:	f7ff bfe3 	b.w	2a830 <smp_check_complete>

0002a86a <smp_ident_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2a86a:	2101      	movs	r1, #1
   2a86c:	f7ff bfe0 	b.w	2a830 <smp_check_complete>

0002a870 <bt_smp_disconnected>:
{
   2a870:	b570      	push	{r4, r5, r6, lr}
   2a872:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2a874:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2a878:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a87c:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2a87e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   2a882:	f000 ffda 	bl	2b83a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a886:	2103      	movs	r1, #3
   2a888:	4620      	mov	r0, r4
   2a88a:	f7ff fcd4 	bl	2a236 <atomic_test_bit>
   2a88e:	b1a0      	cbz	r0, 2a8ba <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2a890:	2108      	movs	r1, #8
   2a892:	4630      	mov	r0, r6
   2a894:	f7e8 f87c 	bl	12990 <smp_pairing_complete>
	if (keys) {
   2a898:	b13d      	cbz	r5, 2a8aa <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2a89a:	89eb      	ldrh	r3, [r5, #14]
   2a89c:	b113      	cbz	r3, 2a8a4 <bt_smp_disconnected+0x34>
   2a89e:	7b6b      	ldrb	r3, [r5, #13]
   2a8a0:	079b      	lsls	r3, r3, #30
   2a8a2:	d502      	bpl.n	2a8aa <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2a8a4:	4628      	mov	r0, r5
   2a8a6:	f000 f829 	bl	2a8fc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2a8aa:	4630      	mov	r0, r6
   2a8ac:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   2a8b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2a8b4:	2100      	movs	r1, #0
   2a8b6:	f7fd be89 	b.w	285cc <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a8ba:	2101      	movs	r1, #1
   2a8bc:	4620      	mov	r0, r4
   2a8be:	f7ff fcba 	bl	2a236 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a8c2:	2800      	cmp	r0, #0
   2a8c4:	d1e4      	bne.n	2a890 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a8c6:	210f      	movs	r1, #15
   2a8c8:	4620      	mov	r0, r4
   2a8ca:	f7ff fcb4 	bl	2a236 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a8ce:	2800      	cmp	r0, #0
   2a8d0:	d1de      	bne.n	2a890 <bt_smp_disconnected+0x20>
   2a8d2:	e7e1      	b.n	2a898 <bt_smp_disconnected+0x28>

0002a8d4 <bt_keys_get_type>:
{
   2a8d4:	b570      	push	{r4, r5, r6, lr}
   2a8d6:	4604      	mov	r4, r0
   2a8d8:	460d      	mov	r5, r1
   2a8da:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2a8dc:	f7e8 fce4 	bl	132a8 <bt_keys_find>
	if (keys) {
   2a8e0:	b938      	cbnz	r0, 2a8f2 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2a8e2:	4631      	mov	r1, r6
   2a8e4:	4628      	mov	r0, r5
   2a8e6:	f7e8 fca9 	bl	1323c <bt_keys_get_addr>
	if (!keys) {
   2a8ea:	b110      	cbz	r0, 2a8f2 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   2a8ec:	89c3      	ldrh	r3, [r0, #14]
   2a8ee:	431c      	orrs	r4, r3
   2a8f0:	81c4      	strh	r4, [r0, #14]
}
   2a8f2:	bd70      	pop	{r4, r5, r6, pc}

0002a8f4 <bt_keys_add_type>:
	keys->keys |= type;
   2a8f4:	89c3      	ldrh	r3, [r0, #14]
   2a8f6:	4319      	orrs	r1, r3
   2a8f8:	81c1      	strh	r1, [r0, #14]
}
   2a8fa:	4770      	bx	lr

0002a8fc <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2a8fc:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2a8fe:	7a03      	ldrb	r3, [r0, #8]
   2a900:	075b      	lsls	r3, r3, #29
{
   2a902:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2a904:	d501      	bpl.n	2a90a <bt_keys_clear+0xe>
		bt_id_del(keys);
   2a906:	f7e2 fda3 	bl	d450 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   2a90a:	4620      	mov	r0, r4
   2a90c:	2284      	movs	r2, #132	; 0x84
}
   2a90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2a912:	2100      	movs	r1, #0
   2a914:	f7fd be5a 	b.w	285cc <memset>

0002a918 <fixed_data_unref>:
}
   2a918:	4770      	bx	lr

0002a91a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2a91a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2a91c:	6849      	ldr	r1, [r1, #4]
   2a91e:	6809      	ldr	r1, [r1, #0]
   2a920:	f7f4 bc10 	b.w	1f144 <net_buf_alloc_len>

0002a924 <net_buf_get>:
{
   2a924:	b570      	push	{r4, r5, r6, lr}
   2a926:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2a928:	f7f9 f894 	bl	23a54 <z_impl_k_queue_get>
	if (!buf) {
   2a92c:	4605      	mov	r5, r0
   2a92e:	b128      	cbz	r0, 2a93c <net_buf_get+0x18>
   2a930:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a932:	7963      	ldrb	r3, [r4, #5]
   2a934:	f013 0301 	ands.w	r3, r3, #1
   2a938:	d102      	bne.n	2a940 <net_buf_get+0x1c>
	frag->frags = NULL;
   2a93a:	6023      	str	r3, [r4, #0]
}
   2a93c:	4628      	mov	r0, r5
   2a93e:	bd70      	pop	{r4, r5, r6, pc}
   2a940:	2300      	movs	r3, #0
   2a942:	2200      	movs	r2, #0
   2a944:	4630      	mov	r0, r6
   2a946:	f7f9 f885 	bl	23a54 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2a94a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2a94c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2a94e:	f023 0301 	bic.w	r3, r3, #1
   2a952:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a954:	4604      	mov	r4, r0
   2a956:	e7ec      	b.n	2a932 <net_buf_get+0xe>

0002a958 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2a958:	b292      	uxth	r2, r2
	buf->__buf = data;
   2a95a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2a95c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2a95e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2a960:	8082      	strh	r2, [r0, #4]
}
   2a962:	4770      	bx	lr

0002a964 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2a964:	6883      	ldr	r3, [r0, #8]
   2a966:	440b      	add	r3, r1
   2a968:	6003      	str	r3, [r0, #0]
}
   2a96a:	4770      	bx	lr

0002a96c <net_buf_put>:
{
   2a96c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2a96e:	460a      	mov	r2, r1
   2a970:	6814      	ldr	r4, [r2, #0]
   2a972:	b914      	cbnz	r4, 2a97a <net_buf_put+0xe>
}
   2a974:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2a976:	f000 be72 	b.w	2b65e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2a97a:	7953      	ldrb	r3, [r2, #5]
   2a97c:	f043 0301 	orr.w	r3, r3, #1
   2a980:	7153      	strb	r3, [r2, #5]
   2a982:	4622      	mov	r2, r4
   2a984:	e7f4      	b.n	2a970 <net_buf_put+0x4>

0002a986 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2a986:	7902      	ldrb	r2, [r0, #4]
   2a988:	3201      	adds	r2, #1
   2a98a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2a98c:	4770      	bx	lr

0002a98e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2a98e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2a990:	4618      	mov	r0, r3
   2a992:	681b      	ldr	r3, [r3, #0]
   2a994:	2b00      	cmp	r3, #0
   2a996:	d1fb      	bne.n	2a990 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2a998:	4770      	bx	lr

0002a99a <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2a99a:	6802      	ldr	r2, [r0, #0]
{
   2a99c:	b510      	push	{r4, lr}
	if (parent->frags) {
   2a99e:	b12a      	cbz	r2, 2a9ac <net_buf_frag_insert+0x12>
   2a9a0:	460b      	mov	r3, r1
	while (buf->frags) {
   2a9a2:	461c      	mov	r4, r3
   2a9a4:	681b      	ldr	r3, [r3, #0]
   2a9a6:	2b00      	cmp	r3, #0
   2a9a8:	d1fb      	bne.n	2a9a2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2a9aa:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2a9ac:	6001      	str	r1, [r0, #0]
}
   2a9ae:	bd10      	pop	{r4, pc}

0002a9b0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2a9b0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2a9b2:	4604      	mov	r4, r0
   2a9b4:	b920      	cbnz	r0, 2a9c0 <net_buf_frag_add+0x10>
	buf->ref++;
   2a9b6:	790b      	ldrb	r3, [r1, #4]
   2a9b8:	3301      	adds	r3, #1
   2a9ba:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2a9bc:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2a9be:	bd10      	pop	{r4, pc}
   2a9c0:	4603      	mov	r3, r0
	while (buf->frags) {
   2a9c2:	4618      	mov	r0, r3
   2a9c4:	681b      	ldr	r3, [r3, #0]
   2a9c6:	2b00      	cmp	r3, #0
   2a9c8:	d1fb      	bne.n	2a9c2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2a9ca:	f7ff ffe6 	bl	2a99a <net_buf_frag_insert>
   2a9ce:	4620      	mov	r0, r4
   2a9d0:	e7f5      	b.n	2a9be <net_buf_frag_add+0xe>

0002a9d2 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   2a9d2:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   2a9d4:	b108      	cbz	r0, 2a9da <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   2a9d6:	680b      	ldr	r3, [r1, #0]
   2a9d8:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   2a9da:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   2a9dc:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   2a9de:	4608      	mov	r0, r1
	frag->frags = NULL;
   2a9e0:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   2a9e2:	f7f4 fc43 	bl	1f26c <net_buf_unref>
#endif

	return next_frag;
}
   2a9e6:	4620      	mov	r0, r4
   2a9e8:	bd10      	pop	{r4, pc}

0002a9ea <net_buf_simple_add>:
	return buf->data + buf->len;
   2a9ea:	8883      	ldrh	r3, [r0, #4]
   2a9ec:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2a9ee:	4419      	add	r1, r3
   2a9f0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2a9f2:	18d0      	adds	r0, r2, r3
   2a9f4:	4770      	bx	lr

0002a9f6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2a9f6:	b430      	push	{r4, r5}
   2a9f8:	8884      	ldrh	r4, [r0, #4]
   2a9fa:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2a9fc:	18a3      	adds	r3, r4, r2
   2a9fe:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2aa00:	1928      	adds	r0, r5, r4
}
   2aa02:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2aa04:	f7fd bdd7 	b.w	285b6 <memcpy>

0002aa08 <net_buf_simple_add_u8>:
   2aa08:	8883      	ldrh	r3, [r0, #4]
   2aa0a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2aa0c:	b510      	push	{r4, lr}
	buf->len += len;
   2aa0e:	1c5c      	adds	r4, r3, #1
   2aa10:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2aa12:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2aa14:	18d0      	adds	r0, r2, r3
   2aa16:	bd10      	pop	{r4, pc}

0002aa18 <net_buf_simple_add_le16>:
   2aa18:	8883      	ldrh	r3, [r0, #4]
   2aa1a:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2aa1c:	b530      	push	{r4, r5, lr}
   2aa1e:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2aa20:	1c9d      	adds	r5, r3, #2
   2aa22:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2aa24:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   2aa26:	0a09      	lsrs	r1, r1, #8
   2aa28:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2aa2a:	bd30      	pop	{r4, r5, pc}

0002aa2c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2aa2c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2aa2e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2aa30:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2aa32:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2aa34:	4411      	add	r1, r2
	buf->data -= len;
   2aa36:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2aa38:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2aa3a:	4770      	bx	lr

0002aa3c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2aa3c:	8882      	ldrh	r2, [r0, #4]
   2aa3e:	1a52      	subs	r2, r2, r1
{
   2aa40:	4603      	mov	r3, r0
	buf->len -= len;
   2aa42:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2aa44:	6800      	ldr	r0, [r0, #0]
   2aa46:	4408      	add	r0, r1
   2aa48:	6018      	str	r0, [r3, #0]
}
   2aa4a:	4770      	bx	lr

0002aa4c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2aa4c:	4603      	mov	r3, r0
	void *data = buf->data;
   2aa4e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2aa50:	889a      	ldrh	r2, [r3, #4]
   2aa52:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2aa54:	4401      	add	r1, r0
	buf->len -= len;
   2aa56:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2aa58:	6019      	str	r1, [r3, #0]

	return data;
}
   2aa5a:	4770      	bx	lr

0002aa5c <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2aa5c:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2aa5e:	6803      	ldr	r3, [r0, #0]
   2aa60:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2aa62:	2101      	movs	r1, #1
   2aa64:	f7ff ffea 	bl	2aa3c <net_buf_simple_pull>

	return val;
}
   2aa68:	4620      	mov	r0, r4
   2aa6a:	bd10      	pop	{r4, pc}

0002aa6c <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2aa6c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2aa6e:	6803      	ldr	r3, [r0, #0]
   2aa70:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2aa72:	2102      	movs	r1, #2
   2aa74:	f7ff ffe2 	bl	2aa3c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2aa78:	4620      	mov	r0, r4
   2aa7a:	bd10      	pop	{r4, pc}

0002aa7c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2aa7c:	6802      	ldr	r2, [r0, #0]
   2aa7e:	6880      	ldr	r0, [r0, #8]
}
   2aa80:	1a10      	subs	r0, r2, r0
   2aa82:	4770      	bx	lr

0002aa84 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2aa84:	8883      	ldrh	r3, [r0, #4]
   2aa86:	88c2      	ldrh	r2, [r0, #6]
   2aa88:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2aa8a:	6803      	ldr	r3, [r0, #0]
   2aa8c:	6880      	ldr	r0, [r0, #8]
   2aa8e:	1a18      	subs	r0, r3, r0
}
   2aa90:	1a10      	subs	r0, r2, r0
   2aa92:	4770      	bx	lr

0002aa94 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2aa94:	6903      	ldr	r3, [r0, #16]
{
   2aa96:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2aa98:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   2aa9c:	2300      	movs	r3, #0
   2aa9e:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2aaa0:	7f83      	ldrb	r3, [r0, #30]
{
   2aaa2:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   2aaa4:	b113      	cbz	r3, 2aaac <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2aaa6:	7a40      	ldrb	r0, [r0, #9]
   2aaa8:	f000 fc49 	bl	2b33e <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   2aaac:	2301      	movs	r3, #1
   2aaae:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2aab0:	2300      	movs	r3, #0
   2aab2:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   2aab4:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   2aab6:	77a3      	strb	r3, [r4, #30]
}
   2aab8:	bd10      	pop	{r4, pc}

0002aaba <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2aaba:	2300      	movs	r3, #0
   2aabc:	f7fb b890 	b.w	25be0 <z_impl_z_log_msg2_static_create>

0002aac0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2aac0:	f7f8 bf0c 	b.w	238dc <z_impl_k_mutex_lock>

0002aac4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2aac4:	f7f8 bf82 	b.w	239cc <z_impl_k_mutex_unlock>

0002aac8 <usb_dc_ep_read>:
{
   2aac8:	b570      	push	{r4, r5, r6, lr}
   2aaca:	4604      	mov	r4, r0
   2aacc:	460e      	mov	r6, r1
   2aace:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2aad0:	f7f5 fa6c 	bl	1ffac <usb_dc_ep_read_wait>
	if (ret) {
   2aad4:	b930      	cbnz	r0, 2aae4 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   2aad6:	b906      	cbnz	r6, 2aada <usb_dc_ep_read+0x12>
   2aad8:	b125      	cbz	r5, 2aae4 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   2aada:	4620      	mov	r0, r4
}
   2aadc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   2aae0:	f7f5 bac6 	b.w	20070 <usb_dc_ep_read_continue>
}
   2aae4:	bd70      	pop	{r4, r5, r6, pc}

0002aae6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2aae6:	6903      	ldr	r3, [r0, #16]
   2aae8:	b2c9      	uxtb	r1, r1
   2aaea:	220c      	movs	r2, #12
   2aaec:	fb01 3302 	mla	r3, r1, r2, r3
   2aaf0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2aaf2:	f000 0007 	and.w	r0, r0, #7
   2aaf6:	4770      	bx	lr

0002aaf8 <set_on_state>:
	__asm__ volatile(
   2aaf8:	f04f 0320 	mov.w	r3, #32
   2aafc:	f3ef 8211 	mrs	r2, BASEPRI
   2ab00:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab04:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2ab08:	6803      	ldr	r3, [r0, #0]
   2ab0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2ab0e:	f043 0302 	orr.w	r3, r3, #2
   2ab12:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2ab14:	f382 8811 	msr	BASEPRI, r2
   2ab18:	f3bf 8f6f 	isb	sy
}
   2ab1c:	4770      	bx	lr

0002ab1e <stop>:
{
   2ab1e:	4603      	mov	r3, r0
   2ab20:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   2ab22:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2ab24:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2ab26:	f04f 0420 	mov.w	r4, #32
   2ab2a:	f3ef 8611 	mrs	r6, BASEPRI
   2ab2e:	f384 8812 	msr	BASEPRI_MAX, r4
   2ab32:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2ab36:	250c      	movs	r5, #12
   2ab38:	fb05 0401 	mla	r4, r5, r1, r0
   2ab3c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2ab3e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2ab42:	d001      	beq.n	2ab48 <stop+0x2a>
   2ab44:	42a2      	cmp	r2, r4
   2ab46:	d111      	bne.n	2ab6c <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2ab48:	fb05 0001 	mla	r0, r5, r1, r0
   2ab4c:	2201      	movs	r2, #1
   2ab4e:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2ab50:	2000      	movs	r0, #0
	__asm__ volatile(
   2ab52:	f386 8811 	msr	BASEPRI, r6
   2ab56:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2ab5a:	b930      	cbnz	r0, 2ab6a <stop+0x4c>
	get_sub_config(dev, type)->stop();
   2ab5c:	685b      	ldr	r3, [r3, #4]
   2ab5e:	220c      	movs	r2, #12
   2ab60:	fb02 3101 	mla	r1, r2, r1, r3
   2ab64:	684b      	ldr	r3, [r1, #4]
   2ab66:	4798      	blx	r3
	return 0;
   2ab68:	2000      	movs	r0, #0
}
   2ab6a:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2ab6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ab70:	e7ef      	b.n	2ab52 <stop+0x34>

0002ab72 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2ab72:	2280      	movs	r2, #128	; 0x80
   2ab74:	f7ff bfd3 	b.w	2ab1e <stop>

0002ab78 <async_start>:
{
   2ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ab7a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2ab7c:	6904      	ldr	r4, [r0, #16]
{
   2ab7e:	4605      	mov	r5, r0
   2ab80:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2ab82:	f04f 0020 	mov.w	r0, #32
   2ab86:	f3ef 8c11 	mrs	ip, BASEPRI
   2ab8a:	f380 8812 	msr	BASEPRI_MAX, r0
   2ab8e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2ab92:	260c      	movs	r6, #12
   2ab94:	fb06 4601 	mla	r6, r6, r1, r4
   2ab98:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2ab9a:	f000 0e07 	and.w	lr, r0, #7
   2ab9e:	f1be 0f01 	cmp.w	lr, #1
   2aba2:	d110      	bne.n	2abc6 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2aba4:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2aba6:	2600      	movs	r6, #0
	__asm__ volatile(
   2aba8:	f38c 8811 	msr	BASEPRI, ip
   2abac:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2abb0:	b93e      	cbnz	r6, 2abc2 <async_start+0x4a>
	subdata->cb = cb;
   2abb2:	200c      	movs	r0, #12
   2abb4:	4341      	muls	r1, r0
   2abb6:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2abb8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2abbc:	686b      	ldr	r3, [r5, #4]
   2abbe:	585b      	ldr	r3, [r3, r1]
   2abc0:	4798      	blx	r3
}
   2abc2:	4630      	mov	r0, r6
   2abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2abc6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2abca:	4287      	cmp	r7, r0
   2abcc:	bf14      	ite	ne
   2abce:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2abd2:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2abd6:	e7e7      	b.n	2aba8 <async_start+0x30>

0002abd8 <api_start>:
{
   2abd8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2abda:	2480      	movs	r4, #128	; 0x80
   2abdc:	9400      	str	r4, [sp, #0]
   2abde:	f7ff ffcb 	bl	2ab78 <async_start>
}
   2abe2:	b002      	add	sp, #8
   2abe4:	bd10      	pop	{r4, pc}

0002abe6 <onoff_started_callback>:
	return &data->mgr[type];
   2abe6:	6900      	ldr	r0, [r0, #16]
{
   2abe8:	b410      	push	{r4}
	return &data->mgr[type];
   2abea:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2abec:	241c      	movs	r4, #28
   2abee:	fb03 0004 	mla	r0, r3, r4, r0
   2abf2:	2100      	movs	r1, #0
}
   2abf4:	bc10      	pop	{r4}
	notify(mgr, 0);
   2abf6:	4710      	bx	r2

0002abf8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2abf8:	2000      	movs	r0, #0
   2abfa:	f000 ba4c 	b.w	2b096 <nrfx_clock_start>

0002abfe <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2abfe:	2000      	movs	r0, #0
   2ac00:	f7f6 be9e 	b.w	21940 <nrfx_clock_stop>

0002ac04 <blocking_start_callback>:
{
   2ac04:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2ac06:	f7f8 bf59 	b.w	23abc <z_impl_k_sem_give>

0002ac0a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac0a:	6843      	ldr	r3, [r0, #4]
   2ac0c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2ac0e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2ac12:	600b      	str	r3, [r1, #0]
}
   2ac14:	2000      	movs	r0, #0
   2ac16:	4770      	bx	lr

0002ac18 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac18:	6843      	ldr	r3, [r0, #4]
   2ac1a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2ac1c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2ac20:	4042      	eors	r2, r0
   2ac22:	400a      	ands	r2, r1
   2ac24:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2ac26:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2ac2a:	2000      	movs	r0, #0
   2ac2c:	4770      	bx	lr

0002ac2e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac2e:	6843      	ldr	r3, [r0, #4]
   2ac30:	685b      	ldr	r3, [r3, #4]
}
   2ac32:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2ac34:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2ac38:	4770      	bx	lr

0002ac3a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac3a:	6843      	ldr	r3, [r0, #4]
   2ac3c:	685b      	ldr	r3, [r3, #4]
}
   2ac3e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2ac40:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2ac44:	4770      	bx	lr

0002ac46 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac46:	6843      	ldr	r3, [r0, #4]
   2ac48:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2ac4a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2ac4e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2ac50:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2ac54:	2000      	movs	r0, #0
   2ac56:	4770      	bx	lr

0002ac58 <gpio_nrfx_manage_callback>:
	return port->data;
   2ac58:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2ac5a:	6858      	ldr	r0, [r3, #4]
{
   2ac5c:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2ac5e:	b158      	cbz	r0, 2ac78 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ac60:	2400      	movs	r4, #0
   2ac62:	4281      	cmp	r1, r0
   2ac64:	d112      	bne.n	2ac8c <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2ac66:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2ac68:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2ac6a:	b954      	cbnz	r4, 2ac82 <gpio_nrfx_manage_callback+0x2a>
   2ac6c:	428d      	cmp	r5, r1
	list->head = node;
   2ac6e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2ac70:	d100      	bne.n	2ac74 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2ac72:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2ac74:	2000      	movs	r0, #0
   2ac76:	6008      	str	r0, [r1, #0]
	if (set) {
   2ac78:	b96a      	cbnz	r2, 2ac96 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2ac7a:	2000      	movs	r0, #0
}
   2ac7c:	bd30      	pop	{r4, r5, pc}
   2ac7e:	4628      	mov	r0, r5
   2ac80:	e7ef      	b.n	2ac62 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2ac82:	428d      	cmp	r5, r1
	parent->next = child;
   2ac84:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2ac86:	bf08      	it	eq
   2ac88:	609c      	streq	r4, [r3, #8]
}
   2ac8a:	e7f3      	b.n	2ac74 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2ac8c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ac8e:	4604      	mov	r4, r0
   2ac90:	2d00      	cmp	r5, #0
   2ac92:	d1f4      	bne.n	2ac7e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2ac94:	b13a      	cbz	r2, 2aca6 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2ac96:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2ac98:	685a      	ldr	r2, [r3, #4]
   2ac9a:	600a      	str	r2, [r1, #0]
	list->head = node;
   2ac9c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ac9e:	2800      	cmp	r0, #0
   2aca0:	d1eb      	bne.n	2ac7a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2aca2:	6099      	str	r1, [r3, #8]
}
   2aca4:	e7ea      	b.n	2ac7c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2aca6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2acaa:	e7e7      	b.n	2ac7c <gpio_nrfx_manage_callback+0x24>

0002acac <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2acac:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2acae:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   2acb2:	2908      	cmp	r1, #8
   2acb4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2acb6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   2acb8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2acba:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   2acbc:	ea4f 2515 	mov.w	r5, r5, lsr #8
   2acc0:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2acc4:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2acc8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   2accc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   2acd0:	ea43 0305 	orr.w	r3, r3, r5
   2acd4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   2acd8:	ea43 0302 	orr.w	r3, r3, r2
   2acdc:	9300      	str	r3, [sp, #0]
   2acde:	6e26      	ldr	r6, [r4, #96]	; 0x60
   2ace0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2ace2:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2ace4:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2ace6:	ea4f 2415 	mov.w	r4, r5, lsr #8
   2acea:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2acee:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2acf2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   2acf6:	ea43 0304 	orr.w	r3, r3, r4
   2acfa:	ea4f 2402 	mov.w	r4, r2, lsl #8
   2acfe:	bf28      	it	cs
   2ad00:	2108      	movcs	r1, #8
   2ad02:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   2ad06:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   2ad08:	460a      	mov	r2, r1
   2ad0a:	460c      	mov	r4, r1
   2ad0c:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2ad0e:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   2ad10:	f7fd fc51 	bl	285b6 <memcpy>

	return length;
}
   2ad14:	4620      	mov	r0, r4
   2ad16:	b002      	add	sp, #8
   2ad18:	bd70      	pop	{r4, r5, r6, pc}

0002ad1a <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
   2ad1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ad1e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
   2ad22:	f002 0301 	and.w	r3, r2, #1
		flags |= RESET_PIN;
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
   2ad26:	0791      	lsls	r1, r2, #30
		flags |= RESET_WATCHDOG;
   2ad28:	bf48      	it	mi
   2ad2a:	f043 0310 	orrmi.w	r3, r3, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
   2ad2e:	0711      	lsls	r1, r2, #28
		flags |= RESET_CPU_LOCKUP;
   2ad30:	bf48      	it	mi
   2ad32:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
   2ad36:	03d1      	lsls	r1, r2, #15
		flags |= RESET_LOW_POWER_WAKE;
   2ad38:	bf48      	it	mi
   2ad3a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
   2ad3e:	0351      	lsls	r1, r2, #13
		flags |= RESET_DEBUG;
   2ad40:	bf48      	it	mi
   2ad42:	f043 0320 	orrmi.w	r3, r3, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
   2ad46:	0752      	lsls	r2, r2, #29
		flags |= RESET_SOFTWARE;
   2ad48:	bf48      	it	mi
   2ad4a:	f043 0302 	orrmi.w	r3, r3, #2
	}
#endif

	*cause = flags;
   2ad4e:	6003      	str	r3, [r0, #0]

	return 0;
}
   2ad50:	2000      	movs	r0, #0
   2ad52:	4770      	bx	lr

0002ad54 <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
   2ad54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ad58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ad5c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
   2ad60:	2000      	movs	r0, #0
   2ad62:	4770      	bx	lr

0002ad64 <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
   2ad64:	f240 13b3 	movw	r3, #435	; 0x1b3
   2ad68:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
   2ad6a:	2000      	movs	r0, #0
   2ad6c:	4770      	bx	lr

0002ad6e <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2ad6e:	6902      	ldr	r2, [r0, #16]
{
   2ad70:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2ad72:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2ad76:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2ad7a:	2000      	movs	r0, #0
   2ad7c:	4770      	bx	lr

0002ad7e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2ad7e:	6843      	ldr	r3, [r0, #4]
   2ad80:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2ad82:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2ad86:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2ad8a:	4770      	bx	lr

0002ad8c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2ad8c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2ad8e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2ad90:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ad92:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ad96:	b148      	cbz	r0, 2adac <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2ad98:	7d52      	ldrb	r2, [r2, #21]
   2ad9a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ad9c:	2000      	movs	r0, #0
   2ad9e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2ada2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ada6:	2201      	movs	r2, #1
   2ada8:	601a      	str	r2, [r3, #0]
	return 0;
   2adaa:	4770      	bx	lr
		return -1;
   2adac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2adb0:	4770      	bx	lr

0002adb2 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2adb2:	2a00      	cmp	r2, #0
{
   2adb4:	b510      	push	{r4, lr}
   2adb6:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2adb8:	dd0f      	ble.n	2adda <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2adba:	6843      	ldr	r3, [r0, #4]
   2adbc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2adbe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2adc2:	b148      	cbz	r0, 2add8 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   2adc4:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2adc6:	2000      	movs	r0, #0
   2adc8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2adcc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2add0:	7d52      	ldrb	r2, [r2, #21]
   2add2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2add4:	2001      	movs	r0, #1
   2add6:	6018      	str	r0, [r3, #0]
}
   2add8:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2adda:	2000      	movs	r0, #0
   2addc:	e7fc      	b.n	2add8 <uarte_nrfx_fifo_read+0x26>

0002adde <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2adde:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2ade0:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2ade2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2ade4:	f04f 0020 	mov.w	r0, #32
   2ade8:	f3ef 8311 	mrs	r3, BASEPRI
   2adec:	f380 8812 	msr	BASEPRI_MAX, r0
   2adf0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2adf4:	68c9      	ldr	r1, [r1, #12]
   2adf6:	2000      	movs	r0, #0
   2adf8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2adfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2adfe:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2ae02:	f383 8811 	msr	BASEPRI, r3
   2ae06:	f3bf 8f6f 	isb	sy
}
   2ae0a:	4770      	bx	lr

0002ae0c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2ae0c:	6903      	ldr	r3, [r0, #16]
   2ae0e:	68db      	ldr	r3, [r3, #12]
   2ae10:	2201      	movs	r2, #1
   2ae12:	739a      	strb	r2, [r3, #14]
}
   2ae14:	4770      	bx	lr

0002ae16 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2ae16:	6903      	ldr	r3, [r0, #16]
   2ae18:	68db      	ldr	r3, [r3, #12]
   2ae1a:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2ae1c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2ae20:	b962      	cbnz	r2, 2ae3c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2ae22:	6842      	ldr	r2, [r0, #4]
   2ae24:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ae26:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2ae2a:	b140      	cbz	r0, 2ae3e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2ae2c:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   2ae30:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2ae34:	d003      	beq.n	2ae3e <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2ae36:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2ae38:	2001      	movs	r0, #1
   2ae3a:	4770      	bx	lr
   2ae3c:	2000      	movs	r0, #0
}
   2ae3e:	4770      	bx	lr

0002ae40 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2ae40:	6843      	ldr	r3, [r0, #4]
   2ae42:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ae44:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2ae48:	3800      	subs	r0, #0
   2ae4a:	bf18      	it	ne
   2ae4c:	2001      	movne	r0, #1
   2ae4e:	4770      	bx	lr

0002ae50 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2ae50:	6843      	ldr	r3, [r0, #4]
   2ae52:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2ae54:	2210      	movs	r2, #16
   2ae56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ae5a:	4770      	bx	lr

0002ae5c <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2ae5c:	6843      	ldr	r3, [r0, #4]
   2ae5e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2ae60:	2210      	movs	r2, #16
   2ae62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2ae66:	4770      	bx	lr

0002ae68 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2ae68:	6843      	ldr	r3, [r0, #4]
   2ae6a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2ae6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ae70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ae74:	4770      	bx	lr

0002ae76 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2ae76:	6843      	ldr	r3, [r0, #4]
   2ae78:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2ae7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ae7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2ae82:	4770      	bx	lr

0002ae84 <uarte_nrfx_irq_update>:
}
   2ae84:	2001      	movs	r0, #1
   2ae86:	4770      	bx	lr

0002ae88 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2ae88:	6903      	ldr	r3, [r0, #16]
   2ae8a:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2ae8c:	e9c3 1200 	strd	r1, r2, [r3]
}
   2ae90:	4770      	bx	lr

0002ae92 <uarte_nrfx_irq_is_pending>:
{
   2ae92:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2ae94:	6843      	ldr	r3, [r0, #4]
   2ae96:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2ae98:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2ae9c:	025b      	lsls	r3, r3, #9
{
   2ae9e:	4604      	mov	r4, r0
		||
   2aea0:	d405      	bmi.n	2aeae <uarte_nrfx_irq_is_pending+0x1c>
   2aea2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2aea6:	f010 0010 	ands.w	r0, r0, #16
   2aeaa:	d106      	bne.n	2aeba <uarte_nrfx_irq_is_pending+0x28>
}
   2aeac:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2aeae:	f7ff ffb2 	bl	2ae16 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2aeb2:	2800      	cmp	r0, #0
   2aeb4:	d0f5      	beq.n	2aea2 <uarte_nrfx_irq_is_pending+0x10>
		||
   2aeb6:	2001      	movs	r0, #1
   2aeb8:	e7f8      	b.n	2aeac <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2aeba:	4620      	mov	r0, r4
   2aebc:	f7ff ffc0 	bl	2ae40 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2aec0:	3800      	subs	r0, #0
   2aec2:	bf18      	it	ne
   2aec4:	2001      	movne	r0, #1
   2aec6:	e7f1      	b.n	2aeac <uarte_nrfx_irq_is_pending+0x1a>

0002aec8 <nrf_gpio_cfg_input>:
{
   2aec8:	b507      	push	{r0, r1, r2, lr}
   2aeca:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aecc:	a801      	add	r0, sp, #4
   2aece:	f7f5 fe3b 	bl	20b48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2aed2:	9b01      	ldr	r3, [sp, #4]
   2aed4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2aed8:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   2aeda:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   2aede:	b003      	add	sp, #12
   2aee0:	f85d fb04 	ldr.w	pc, [sp], #4

0002aee4 <tx_start.isra.0>:
	return config->uarte_regs;
   2aee4:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2aee6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2aeea:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2aeee:	2200      	movs	r2, #0
   2aef0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2aef4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2aef8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2aefc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2af00:	6842      	ldr	r2, [r0, #4]
   2af02:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2af04:	bf41      	itttt	mi
   2af06:	2208      	movmi	r2, #8
   2af08:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2af0c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   2af10:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2af14:	2201      	movs	r2, #1
   2af16:	609a      	str	r2, [r3, #8]
}
   2af18:	4770      	bx	lr

0002af1a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2af1a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2af1c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2af1e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2af22:	b940      	cbnz	r0, 2af36 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2af24:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2af26:	079b      	lsls	r3, r3, #30
   2af28:	d406      	bmi.n	2af38 <is_tx_ready.isra.0+0x1e>
   2af2a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2af2e:	3800      	subs	r0, #0
   2af30:	bf18      	it	ne
   2af32:	2001      	movne	r0, #1
   2af34:	4770      	bx	lr
   2af36:	2001      	movs	r0, #1
}
   2af38:	4770      	bx	lr

0002af3a <uarte_nrfx_fifo_fill>:
{
   2af3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2af3c:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2af3e:	68f3      	ldr	r3, [r6, #12]
   2af40:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2af42:	f3bf 8f5b 	dmb	ish
   2af46:	4294      	cmp	r4, r2
   2af48:	bfa8      	it	ge
   2af4a:	4614      	movge	r4, r2
{
   2af4c:	4605      	mov	r5, r0
   2af4e:	3310      	adds	r3, #16
   2af50:	2201      	movs	r2, #1
   2af52:	e853 0f00 	ldrex	r0, [r3]
   2af56:	2800      	cmp	r0, #0
   2af58:	d103      	bne.n	2af62 <uarte_nrfx_fifo_fill+0x28>
   2af5a:	e843 2700 	strex	r7, r2, [r3]
   2af5e:	2f00      	cmp	r7, #0
   2af60:	d1f7      	bne.n	2af52 <uarte_nrfx_fifo_fill+0x18>
   2af62:	f3bf 8f5b 	dmb	ish
   2af66:	bf0c      	ite	eq
   2af68:	4613      	moveq	r3, r2
   2af6a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2af6c:	d01d      	beq.n	2afaa <uarte_nrfx_fifo_fill+0x70>
		return 0;
   2af6e:	461c      	mov	r4, r3
}
   2af70:	4620      	mov	r0, r4
   2af72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2af74:	68f2      	ldr	r2, [r6, #12]
   2af76:	5cc8      	ldrb	r0, [r1, r3]
   2af78:	6892      	ldr	r2, [r2, #8]
   2af7a:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   2af7c:	3301      	adds	r3, #1
   2af7e:	42a3      	cmp	r3, r4
   2af80:	dbf8      	blt.n	2af74 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   2af82:	f04f 0320 	mov.w	r3, #32
   2af86:	f3ef 8711 	mrs	r7, BASEPRI
   2af8a:	f383 8812 	msr	BASEPRI_MAX, r3
   2af8e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2af92:	6868      	ldr	r0, [r5, #4]
   2af94:	f7ff ffc1 	bl	2af1a <is_tx_ready.isra.0>
   2af98:	68f3      	ldr	r3, [r6, #12]
   2af9a:	b940      	cbnz	r0, 2afae <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   2af9c:	6118      	str	r0, [r3, #16]
		len = 0;
   2af9e:	4604      	mov	r4, r0
	__asm__ volatile(
   2afa0:	f387 8811 	msr	BASEPRI, r7
   2afa4:	f3bf 8f6f 	isb	sy
	return len;
   2afa8:	e7e2      	b.n	2af70 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   2afaa:	2300      	movs	r3, #0
   2afac:	e7e7      	b.n	2af7e <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   2afae:	6899      	ldr	r1, [r3, #8]
   2afb0:	6868      	ldr	r0, [r5, #4]
   2afb2:	4622      	mov	r2, r4
   2afb4:	f7ff ff96 	bl	2aee4 <tx_start.isra.0>
   2afb8:	e7f2      	b.n	2afa0 <uarte_nrfx_fifo_fill+0x66>

0002afba <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2afba:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2afbc:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2afbe:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2afc2:	05c9      	lsls	r1, r1, #23
{
   2afc4:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2afc6:	d518      	bpl.n	2affa <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2afc8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2afcc:	b1a9      	cbz	r1, 2affa <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2afce:	f04f 0420 	mov.w	r4, #32
   2afd2:	f3ef 8111 	mrs	r1, BASEPRI
   2afd6:	f384 8812 	msr	BASEPRI_MAX, r4
   2afda:	f3bf 8f6f 	isb	sy
   2afde:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2afe2:	b134      	cbz	r4, 2aff2 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2afe4:	2400      	movs	r4, #0
   2afe6:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2afea:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2afee:	2401      	movs	r4, #1
   2aff0:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   2aff2:	f381 8811 	msr	BASEPRI, r1
   2aff6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2affa:	6852      	ldr	r2, [r2, #4]
   2affc:	06d2      	lsls	r2, r2, #27
   2affe:	d51a      	bpl.n	2b036 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   2b000:	f04f 0220 	mov.w	r2, #32
   2b004:	f3ef 8111 	mrs	r1, BASEPRI
   2b008:	f382 8812 	msr	BASEPRI_MAX, r2
   2b00c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b010:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2b014:	b112      	cbz	r2, 2b01c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2b016:	2200      	movs	r2, #0
   2b018:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2b01c:	6902      	ldr	r2, [r0, #16]
   2b01e:	68d2      	ldr	r2, [r2, #12]
   2b020:	b10a      	cbz	r2, 2b026 <uarte_nrfx_isr_int+0x6c>
   2b022:	6912      	ldr	r2, [r2, #16]
   2b024:	b91a      	cbnz	r2, 2b02e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   2b026:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2b02a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2b02e:	f381 8811 	msr	BASEPRI, r1
   2b032:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   2b036:	6902      	ldr	r2, [r0, #16]
   2b038:	68d2      	ldr	r2, [r2, #12]
   2b03a:	b15a      	cbz	r2, 2b054 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b03c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2b040:	b151      	cbz	r1, 2b058 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   2b042:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   2b044:	2100      	movs	r1, #0
   2b046:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2b048:	b134      	cbz	r4, 2b058 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   2b04a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2b04e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2b052:	7391      	strb	r1, [r2, #14]
}
   2b054:	bc10      	pop	{r4}
   2b056:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b058:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2b05c:	b121      	cbz	r1, 2b068 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b05e:	2100      	movs	r1, #0
   2b060:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2b064:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2b068:	6813      	ldr	r3, [r2, #0]
   2b06a:	2b00      	cmp	r3, #0
   2b06c:	d0f2      	beq.n	2b054 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2b06e:	6851      	ldr	r1, [r2, #4]
}
   2b070:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2b072:	4718      	bx	r3

0002b074 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2b074:	4770      	bx	lr

0002b076 <sys_clock_cycle_get_32>:
{
   2b076:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2b078:	f7f6 f928 	bl	212cc <z_nrf_rtc_timer_read>
}
   2b07c:	bd08      	pop	{r3, pc}

0002b07e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b07e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b082:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2b086:	f1a0 0308 	sub.w	r3, r0, #8
   2b08a:	4258      	negs	r0, r3
   2b08c:	4158      	adcs	r0, r3
   2b08e:	4770      	bx	lr

0002b090 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2b090:	4700      	bx	r0

0002b092 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2b092:	f000 bd7a 	b.w	2bb8a <z_impl_k_busy_wait>

0002b096 <nrfx_clock_start>:
    switch (domain)
   2b096:	b110      	cbz	r0, 2b09e <nrfx_clock_start+0x8>
   2b098:	2801      	cmp	r0, #1
   2b09a:	d01d      	beq.n	2b0d8 <nrfx_clock_start+0x42>
   2b09c:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2b09e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b0a2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2b0a6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2b0aa:	03c9      	lsls	r1, r1, #15
   2b0ac:	d512      	bpl.n	2b0d4 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2b0ae:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2b0b2:	2a01      	cmp	r2, #1
   2b0b4:	d10e      	bne.n	2b0d4 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2b0b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b0ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b0be:	2200      	movs	r2, #0
   2b0c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2b0c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2b0c8:	2202      	movs	r2, #2
   2b0ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b0ce:	2201      	movs	r2, #1
   2b0d0:	609a      	str	r2, [r3, #8]
}
   2b0d2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   2b0d4:	2200      	movs	r2, #0
   2b0d6:	e7ee      	b.n	2b0b6 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b0d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b0dc:	2200      	movs	r2, #0
   2b0de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2b0e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2b0e6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b0ea:	6018      	str	r0, [r3, #0]
}
   2b0ec:	4770      	bx	lr

0002b0ee <nrf_gpio_reconfigure>:
{
   2b0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b0f0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b0f2:	a801      	add	r0, sp, #4
{
   2b0f4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2b0f8:	4617      	mov	r7, r2
   2b0fa:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b0fc:	f7f6 fc90 	bl	21a20 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b100:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b102:	2f00      	cmp	r7, #0
   2b104:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b108:	bf14      	ite	ne
   2b10a:	2302      	movne	r3, #2
   2b10c:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b10e:	2900      	cmp	r1, #0
   2b110:	bf18      	it	ne
   2b112:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b116:	2d00      	cmp	r5, #0
   2b118:	bf14      	ite	ne
   2b11a:	f04f 0c0c 	movne.w	ip, #12
   2b11e:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b122:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b124:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b128:	bf14      	ite	ne
   2b12a:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2b12e:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b132:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b134:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b138:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b13c:	bf14      	ite	ne
   2b13e:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2b142:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b146:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2b14a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b14e:	b101      	cbz	r1, 2b152 <nrf_gpio_reconfigure+0x64>
   2b150:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2b152:	b10f      	cbz	r7, 2b158 <nrf_gpio_reconfigure+0x6a>
   2b154:	783f      	ldrb	r7, [r7, #0]
   2b156:	007f      	lsls	r7, r7, #1
   2b158:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2b15a:	b10d      	cbz	r5, 2b160 <nrf_gpio_reconfigure+0x72>
   2b15c:	782d      	ldrb	r5, [r5, #0]
   2b15e:	00ad      	lsls	r5, r5, #2
   2b160:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2b162:	b10c      	cbz	r4, 2b168 <nrf_gpio_reconfigure+0x7a>
   2b164:	7822      	ldrb	r2, [r4, #0]
   2b166:	0214      	lsls	r4, r2, #8
   2b168:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2b16a:	b10e      	cbz	r6, 2b170 <nrf_gpio_reconfigure+0x82>
   2b16c:	7836      	ldrb	r6, [r6, #0]
   2b16e:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b170:	432c      	orrs	r4, r5
   2b172:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2b174:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2b178:	b003      	add	sp, #12
   2b17a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b17c <nrf_gpio_cfg_sense_set>:
{
   2b17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b17e:	f10d 030f 	add.w	r3, sp, #15
   2b182:	9301      	str	r3, [sp, #4]
   2b184:	2300      	movs	r3, #0
{
   2b186:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b18a:	9300      	str	r3, [sp, #0]
   2b18c:	461a      	mov	r2, r3
   2b18e:	4619      	mov	r1, r3
   2b190:	f7ff ffad 	bl	2b0ee <nrf_gpio_reconfigure>
}
   2b194:	b005      	add	sp, #20
   2b196:	f85d fb04 	ldr.w	pc, [sp], #4

0002b19a <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b19a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2b19e:	681a      	ldr	r2, [r3, #0]
   2b1a0:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b1a2:	bf1f      	itttt	ne
   2b1a4:	2200      	movne	r2, #0
   2b1a6:	601a      	strne	r2, [r3, #0]
   2b1a8:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b1aa:	2001      	movne	r0, #1
   2b1ac:	bf08      	it	eq
   2b1ae:	2000      	moveq	r0, #0
}
   2b1b0:	4770      	bx	lr

0002b1b2 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2b1b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b1b6:	f44f 7260 	mov.w	r2, #896	; 0x380
   2b1ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2b1be:	4770      	bx	lr

0002b1c0 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2b1c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b1c4:	f44f 7260 	mov.w	r2, #896	; 0x380
   2b1c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2b1cc:	4770      	bx	lr

0002b1ce <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2b1ce:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2b1d0:	f7f6 ffd6 	bl	22180 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   2b1d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2b1d8:	f7f6 bbee 	b.w	219b8 <nrfx_clock_irq_handler>

0002b1dc <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b1dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b1e0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2b1e4:	f1a0 0308 	sub.w	r3, r0, #8
   2b1e8:	4258      	negs	r0, r3
   2b1ea:	4158      	adcs	r0, r3
   2b1ec:	4770      	bx	lr

0002b1ee <nrfx_usbd_consumer>:
{
   2b1ee:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   2b1f0:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   2b1f2:	680d      	ldr	r5, [r1, #0]
   2b1f4:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   2b1f6:	bf97      	itett	ls
   2b1f8:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   2b1fc:	2100      	movhi	r1, #0
        size -= data_size;
   2b1fe:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   2b200:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   2b202:	bf8e      	itee	hi
   2b204:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   2b208:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2b20a:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   2b20c:	429a      	cmp	r2, r3
   2b20e:	d103      	bne.n	2b218 <nrfx_usbd_consumer+0x2a>
   2b210:	1e20      	subs	r0, r4, #0
   2b212:	bf18      	it	ne
   2b214:	2001      	movne	r0, #1
}
   2b216:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   2b218:	2000      	movs	r0, #0
   2b21a:	e7fc      	b.n	2b216 <nrfx_usbd_consumer+0x28>

0002b21c <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   2b21c:	684b      	ldr	r3, [r1, #4]
{
   2b21e:	b510      	push	{r4, lr}
   2b220:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   2b222:	680c      	ldr	r4, [r1, #0]
   2b224:	bf28      	it	cs
   2b226:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   2b228:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   2b22c:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   2b22e:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   2b230:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2b232:	441a      	add	r2, r3
}
   2b234:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2b236:	600a      	str	r2, [r1, #0]
}
   2b238:	bf18      	it	ne
   2b23a:	2001      	movne	r0, #1
   2b23c:	bd10      	pop	{r4, pc}

0002b23e <nrfx_usbd_feeder_ram_zlp>:
{
   2b23e:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   2b240:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2b242:	680b      	ldr	r3, [r1, #0]
   2b244:	42a2      	cmp	r2, r4
   2b246:	bf28      	it	cs
   2b248:	4622      	movcs	r2, r4
   2b24a:	2a00      	cmp	r2, #0
   2b24c:	bf14      	ite	ne
   2b24e:	461d      	movne	r5, r3
   2b250:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   2b252:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   2b256:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   2b25a:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   2b25c:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2b25e:	600a      	str	r2, [r1, #0]
}
   2b260:	bf14      	ite	ne
   2b262:	2001      	movne	r0, #1
   2b264:	2000      	moveq	r0, #0
   2b266:	bd30      	pop	{r4, r5, pc}

0002b268 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   2b268:	f010 0f80 	tst.w	r0, #128	; 0x80
   2b26c:	bf14      	ite	ne
   2b26e:	2300      	movne	r3, #0
   2b270:	2310      	moveq	r3, #16
   2b272:	f000 000f 	and.w	r0, r0, #15
}
   2b276:	4418      	add	r0, r3
   2b278:	4770      	bx	lr

0002b27a <ev_started_handler>:
}
   2b27a:	4770      	bx	lr

0002b27c <nrf_usbd_epin_dma_handler>:
{
   2b27c:	b508      	push	{r3, lr}
   2b27e:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   2b280:	f7f6 fff6 	bl	22270 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2b284:	4608      	mov	r0, r1
   2b286:	f7f6 ffe5 	bl	22254 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2b28a:	7b83      	ldrb	r3, [r0, #14]
   2b28c:	2b03      	cmp	r3, #3
   2b28e:	d10a      	bne.n	2b2a6 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2b290:	4608      	mov	r0, r1
   2b292:	f7ff ffe9 	bl	2b268 <ep2bit>
   2b296:	2301      	movs	r3, #1
   2b298:	fa03 f000 	lsl.w	r0, r3, r0
   2b29c:	43c0      	mvns	r0, r0
}
   2b29e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2b2a2:	f7f7 b8f5 	b.w	22490 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2b2a6:	6803      	ldr	r3, [r0, #0]
   2b2a8:	2b00      	cmp	r3, #0
   2b2aa:	d0f1      	beq.n	2b290 <nrf_usbd_epin_dma_handler+0x14>
}
   2b2ac:	bd08      	pop	{r3, pc}

0002b2ae <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   2b2ae:	2087      	movs	r0, #135	; 0x87
   2b2b0:	f7ff bfe4 	b.w	2b27c <nrf_usbd_epin_dma_handler>

0002b2b4 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   2b2b4:	2086      	movs	r0, #134	; 0x86
   2b2b6:	f7ff bfe1 	b.w	2b27c <nrf_usbd_epin_dma_handler>

0002b2ba <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   2b2ba:	2085      	movs	r0, #133	; 0x85
   2b2bc:	f7ff bfde 	b.w	2b27c <nrf_usbd_epin_dma_handler>

0002b2c0 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   2b2c0:	2084      	movs	r0, #132	; 0x84
   2b2c2:	f7ff bfdb 	b.w	2b27c <nrf_usbd_epin_dma_handler>

0002b2c6 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   2b2c6:	2083      	movs	r0, #131	; 0x83
   2b2c8:	f7ff bfd8 	b.w	2b27c <nrf_usbd_epin_dma_handler>

0002b2cc <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   2b2cc:	2082      	movs	r0, #130	; 0x82
   2b2ce:	f7ff bfd5 	b.w	2b27c <nrf_usbd_epin_dma_handler>

0002b2d2 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   2b2d2:	2081      	movs	r0, #129	; 0x81
   2b2d4:	f7ff bfd2 	b.w	2b27c <nrf_usbd_epin_dma_handler>

0002b2d8 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   2b2d8:	f7f7 b8ea 	b.w	224b0 <nrf_usbd_ep0in_dma_handler>

0002b2dc <nrfx_usbd_ep_max_packet_size_set>:
{
   2b2dc:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2b2de:	f7f6 ffb9 	bl	22254 <ep_state_access>
    p_state->max_packet_size = size;
   2b2e2:	8181      	strh	r1, [r0, #12]
}
   2b2e4:	bd08      	pop	{r3, pc}

0002b2e6 <nrfx_usbd_ep_status_get>:
{
   2b2e6:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   2b2e8:	f7f6 ffb4 	bl	22254 <ep_state_access>
	__asm__ volatile(
   2b2ec:	f04f 0220 	mov.w	r2, #32
   2b2f0:	f3ef 8311 	mrs	r3, BASEPRI
   2b2f4:	f382 8812 	msr	BASEPRI_MAX, r2
   2b2f8:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   2b2fc:	6882      	ldr	r2, [r0, #8]
   2b2fe:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2b300:	6802      	ldr	r2, [r0, #0]
   2b302:	b92a      	cbnz	r2, 2b310 <nrfx_usbd_ep_status_get+0x2a>
   2b304:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   2b306:	f383 8811 	msr	BASEPRI, r3
   2b30a:	f3bf 8f6f 	isb	sy
}
   2b30e:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2b310:	2004      	movs	r0, #4
   2b312:	e7f8      	b.n	2b306 <nrfx_usbd_ep_status_get+0x20>

0002b314 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   2b314:	2007      	movs	r0, #7
   2b316:	f7f7 bc03 	b.w	22b20 <nrf_usbd_epout_dma_handler>

0002b31a <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2b31a:	2006      	movs	r0, #6
   2b31c:	f7f7 bc00 	b.w	22b20 <nrf_usbd_epout_dma_handler>

0002b320 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   2b320:	2005      	movs	r0, #5
   2b322:	f7f7 bbfd 	b.w	22b20 <nrf_usbd_epout_dma_handler>

0002b326 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2b326:	2004      	movs	r0, #4
   2b328:	f7f7 bbfa 	b.w	22b20 <nrf_usbd_epout_dma_handler>

0002b32c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   2b32c:	2003      	movs	r0, #3
   2b32e:	f7f7 bbf7 	b.w	22b20 <nrf_usbd_epout_dma_handler>

0002b332 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   2b332:	2002      	movs	r0, #2
   2b334:	f7f7 bbf4 	b.w	22b20 <nrf_usbd_epout_dma_handler>

0002b338 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   2b338:	2001      	movs	r0, #1
   2b33a:	f7f7 bbf1 	b.w	22b20 <nrf_usbd_epout_dma_handler>

0002b33e <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   2b33e:	f7f7 bce5 	b.w	22d0c <usbd_ep_abort>

0002b342 <z_device_state_init>:
}
   2b342:	4770      	bx	lr

0002b344 <z_device_is_ready>:
	if (dev == NULL) {
   2b344:	b138      	cbz	r0, 2b356 <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
   2b346:	68c3      	ldr	r3, [r0, #12]
   2b348:	8818      	ldrh	r0, [r3, #0]
   2b34a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2b34e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2b352:	4258      	negs	r0, r3
   2b354:	4158      	adcs	r0, r3
}
   2b356:	4770      	bx	lr

0002b358 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
   2b358:	6940      	ldr	r0, [r0, #20]
{
   2b35a:	b470      	push	{r4, r5, r6}
   2b35c:	4613      	mov	r3, r2
   2b35e:	460d      	mov	r5, r1
	if (rv != NULL) {
   2b360:	b960      	cbnz	r0, 2b37c <device_required_foreach+0x24>
	size_t handle_count = 0;
   2b362:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
   2b364:	462a      	mov	r2, r5
}
   2b366:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
   2b368:	f7f7 bede 	b.w	23128 <device_visitor>
			++i;
   2b36c:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2b36e:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
   2b372:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2b374:	b2a4      	uxth	r4, r4
   2b376:	4294      	cmp	r4, r2
   2b378:	d9f8      	bls.n	2b36c <device_required_foreach+0x14>
   2b37a:	e7f3      	b.n	2b364 <device_required_foreach+0xc>
		size_t i = 0;
   2b37c:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2b37e:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2b382:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2b386:	e7f2      	b.n	2b36e <device_required_foreach+0x16>

0002b388 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2b388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b38a:	ab0a      	add	r3, sp, #40	; 0x28
   2b38c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2b38e:	9302      	str	r3, [sp, #8]
   2b390:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b392:	9301      	str	r3, [sp, #4]
   2b394:	2300      	movs	r3, #0
   2b396:	9300      	str	r3, [sp, #0]
   2b398:	2201      	movs	r2, #1
   2b39a:	4618      	mov	r0, r3
   2b39c:	f7db f8d2 	bl	6544 <z_impl_z_log_msg2_runtime_vcreate>
}
   2b3a0:	b007      	add	sp, #28
   2b3a2:	f85d fb04 	ldr.w	pc, [sp], #4

0002b3a6 <arch_system_halt>:
	__asm__ volatile(
   2b3a6:	f04f 0220 	mov.w	r2, #32
   2b3aa:	f3ef 8311 	mrs	r3, BASEPRI
   2b3ae:	f382 8812 	msr	BASEPRI_MAX, r2
   2b3b2:	f3bf 8f6f 	isb	sy
	for (;;) {
   2b3b6:	e7fe      	b.n	2b3b6 <arch_system_halt+0x10>

0002b3b8 <k_heap_init>:
{
   2b3b8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2b3ba:	f100 040c 	add.w	r4, r0, #12
   2b3be:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2b3c2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2b3c4:	f7f9 bed1 	b.w	2516a <sys_heap_init>

0002b3c8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3cc:	b085      	sub	sp, #20
   2b3ce:	4606      	mov	r6, r0
   2b3d0:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2b3d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2b3d6:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2b3d8:	f000 fbdb 	bl	2bb92 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2b3dc:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2b3e0:	4605      	mov	r5, r0
   2b3e2:	460f      	mov	r7, r1
   2b3e4:	f04f 0320 	mov.w	r3, #32
   2b3e8:	f3ef 8411 	mrs	r4, BASEPRI
   2b3ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2b3f0:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2b3f4:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2b3f8:	464a      	mov	r2, r9
   2b3fa:	4641      	mov	r1, r8
   2b3fc:	4630      	mov	r0, r6
   2b3fe:	f7f9 fe4c 	bl	2509a <sys_heap_aligned_alloc>
   2b402:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2b404:	f7f9 fa36 	bl	24874 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2b408:	9b03      	ldr	r3, [sp, #12]
   2b40a:	b13b      	cbz	r3, 2b41c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2b40c:	f384 8811 	msr	BASEPRI, r4
   2b410:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2b414:	4618      	mov	r0, r3
   2b416:	b005      	add	sp, #20
   2b418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2b41c:	1a28      	subs	r0, r5, r0
   2b41e:	eb67 0101 	sbc.w	r1, r7, r1
   2b422:	2801      	cmp	r0, #1
   2b424:	f171 0200 	sbcs.w	r2, r1, #0
   2b428:	dbf0      	blt.n	2b40c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2b42a:	e9cd 0100 	strd	r0, r1, [sp]
   2b42e:	465a      	mov	r2, fp
   2b430:	4621      	mov	r1, r4
   2b432:	4650      	mov	r0, sl
   2b434:	f7f8 fee8 	bl	24208 <z_pend_curr>
	__asm__ volatile(
   2b438:	f04f 0320 	mov.w	r3, #32
   2b43c:	f3ef 8411 	mrs	r4, BASEPRI
   2b440:	f383 8812 	msr	BASEPRI_MAX, r3
   2b444:	f3bf 8f6f 	isb	sy
   2b448:	e7d6      	b.n	2b3f8 <k_heap_aligned_alloc+0x30>

0002b44a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2b44a:	b538      	push	{r3, r4, r5, lr}
   2b44c:	4604      	mov	r4, r0
   2b44e:	f04f 0320 	mov.w	r3, #32
   2b452:	f3ef 8511 	mrs	r5, BASEPRI
   2b456:	f383 8812 	msr	BASEPRI_MAX, r3
   2b45a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2b45e:	f7f9 fde4 	bl	2502a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2b462:	f104 000c 	add.w	r0, r4, #12
   2b466:	f000 fb0c 	bl	2ba82 <z_unpend_all>
   2b46a:	b130      	cbz	r0, 2b47a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2b46c:	4629      	mov	r1, r5
   2b46e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2b472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2b476:	f7f8 bd75 	b.w	23f64 <z_reschedule>
	__asm__ volatile(
   2b47a:	f385 8811 	msr	BASEPRI, r5
   2b47e:	f3bf 8f6f 	isb	sy
}
   2b482:	bd38      	pop	{r3, r4, r5, pc}

0002b484 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b486:	4604      	mov	r4, r0
   2b488:	460d      	mov	r5, r1
	__asm__ volatile(
   2b48a:	f04f 0320 	mov.w	r3, #32
   2b48e:	f3ef 8611 	mrs	r6, BASEPRI
   2b492:	f383 8812 	msr	BASEPRI_MAX, r3
   2b496:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2b49a:	6947      	ldr	r7, [r0, #20]
   2b49c:	b97f      	cbnz	r7, 2b4be <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2b49e:	f000 fad8 	bl	2ba52 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2b4a2:	b160      	cbz	r0, 2b4be <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2b4a4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2b4a6:	6142      	str	r2, [r0, #20]
   2b4a8:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
   2b4ac:	f000 fa60 	bl	2b970 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2b4b0:	4631      	mov	r1, r6
   2b4b2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2b4b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2b4ba:	f7f8 bd53 	b.w	23f64 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2b4be:	682b      	ldr	r3, [r5, #0]
   2b4c0:	6962      	ldr	r2, [r4, #20]
   2b4c2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2b4c4:	682b      	ldr	r3, [r5, #0]
   2b4c6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2b4c8:	69a3      	ldr	r3, [r4, #24]
   2b4ca:	3b01      	subs	r3, #1
   2b4cc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2b4ce:	f386 8811 	msr	BASEPRI, r6
   2b4d2:	f3bf 8f6f 	isb	sy
}
   2b4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b4d8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b4d8:	f3ef 8005 	mrs	r0, IPSR
}
   2b4dc:	3800      	subs	r0, #0
   2b4de:	bf18      	it	ne
   2b4e0:	2001      	movne	r0, #1
   2b4e2:	4770      	bx	lr

0002b4e4 <k_thread_name_get>:
}
   2b4e4:	3078      	adds	r0, #120	; 0x78
   2b4e6:	4770      	bx	lr

0002b4e8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2b4e8:	f7f8 be32 	b.w	24150 <z_sched_start>

0002b4ec <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
   2b4ec:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
   2b4ee:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
   2b4f2:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   2b4f4:	4293      	cmp	r3, r2
   2b4f6:	d102      	bne.n	2b4fe <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
   2b4f8:	600b      	str	r3, [r1, #0]

	return 0;
}
   2b4fa:	2000      	movs	r0, #0
   2b4fc:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   2b4fe:	5ce0      	ldrb	r0, [r4, r3]
   2b500:	28aa      	cmp	r0, #170	; 0xaa
   2b502:	d1f9      	bne.n	2b4f8 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   2b504:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   2b506:	e7f5      	b.n	2b4f4 <z_impl_k_thread_stack_space_get+0x8>

0002b508 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   2b508:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   2b50c:	4770      	bx	lr

0002b50e <z_pm_save_idle_exit>:
{
   2b50e:	b508      	push	{r3, lr}
	pm_system_resume();
   2b510:	f7de fd24 	bl	9f5c <pm_system_resume>
}
   2b514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2b518:	f7ff bdac 	b.w	2b074 <sys_clock_idle_exit>

0002b51c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2b51c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2b520:	428b      	cmp	r3, r1
   2b522:	d001      	beq.n	2b528 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2b524:	f7f8 be84 	b.w	24230 <z_set_prio>
}
   2b528:	2000      	movs	r0, #0
   2b52a:	4770      	bx	lr

0002b52c <z_impl_k_mutex_init>:
{
   2b52c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2b52e:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2b530:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2b534:	e9c3 3300 	strd	r3, r3, [r3]
}
   2b538:	4770      	bx	lr

0002b53a <queue_insert>:
{
   2b53a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b53e:	4699      	mov	r9, r3
   2b540:	4604      	mov	r4, r0
   2b542:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2b546:	460d      	mov	r5, r1
   2b548:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b54a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2b54e:	f04f 0220 	mov.w	r2, #32
   2b552:	f3ef 8711 	mrs	r7, BASEPRI
   2b556:	f382 8812 	msr	BASEPRI_MAX, r2
   2b55a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2b55e:	b103      	cbz	r3, 2b562 <queue_insert+0x28>
	return list->tail;
   2b560:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2b562:	4630      	mov	r0, r6
   2b564:	f000 fa75 	bl	2ba52 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2b568:	b160      	cbz	r0, 2b584 <queue_insert+0x4a>
   2b56a:	2400      	movs	r4, #0
   2b56c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
   2b570:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2b574:	f000 f9fc 	bl	2b970 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2b578:	4630      	mov	r0, r6
   2b57a:	4639      	mov	r1, r7
   2b57c:	f7f8 fcf2 	bl	23f64 <z_reschedule>
	return 0;
   2b580:	2000      	movs	r0, #0
   2b582:	e00c      	b.n	2b59e <queue_insert+0x64>
	if (alloc) {
   2b584:	f1b9 0f00 	cmp.w	r9, #0
   2b588:	d01b      	beq.n	2b5c2 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2b58a:	2108      	movs	r1, #8
   2b58c:	f7f9 faa8 	bl	24ae0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2b590:	b938      	cbnz	r0, 2b5a2 <queue_insert+0x68>
	__asm__ volatile(
   2b592:	f387 8811 	msr	BASEPRI, r7
   2b596:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2b59a:	f06f 000b 	mvn.w	r0, #11
}
   2b59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2b5a2:	2301      	movs	r3, #1
		anode->data = data;
   2b5a4:	f8c0 8004 	str.w	r8, [r0, #4]
   2b5a8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b5aa:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b5ac:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2b5b0:	b95d      	cbnz	r5, 2b5ca <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b5b2:	6823      	ldr	r3, [r4, #0]
   2b5b4:	4313      	orrs	r3, r2
   2b5b6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2b5b8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2b5ba:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2b5bc:	b973      	cbnz	r3, 2b5dc <queue_insert+0xa2>
	list->tail = node;
   2b5be:	6060      	str	r0, [r4, #4]
}
   2b5c0:	e00c      	b.n	2b5dc <queue_insert+0xa2>
	node->next_and_flags = flags;
   2b5c2:	f8c8 9000 	str.w	r9, [r8]
}
   2b5c6:	4640      	mov	r0, r8
   2b5c8:	e7ef      	b.n	2b5aa <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b5ca:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2b5cc:	f033 0303 	bics.w	r3, r3, #3
   2b5d0:	d110      	bne.n	2b5f4 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b5d2:	6002      	str	r2, [r0, #0]
	return list->tail;
   2b5d4:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2b5d6:	b93a      	cbnz	r2, 2b5e8 <queue_insert+0xae>
	list->head = node;
   2b5d8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b5dc:	2104      	movs	r1, #4
   2b5de:	f104 0010 	add.w	r0, r4, #16
   2b5e2:	f000 fc68 	bl	2beb6 <z_handle_obj_poll_events>
   2b5e6:	e7c7      	b.n	2b578 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b5e8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b5ea:	f003 0303 	and.w	r3, r3, #3
   2b5ee:	4303      	orrs	r3, r0
   2b5f0:	6013      	str	r3, [r2, #0]
   2b5f2:	e7e4      	b.n	2b5be <queue_insert+0x84>
   2b5f4:	4313      	orrs	r3, r2
   2b5f6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b5f8:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b5fa:	f003 0303 	and.w	r3, r3, #3
   2b5fe:	4303      	orrs	r3, r0
   2b600:	602b      	str	r3, [r5, #0]
}
   2b602:	e7eb      	b.n	2b5dc <queue_insert+0xa2>

0002b604 <z_queue_node_peek>:
{
   2b604:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2b606:	4604      	mov	r4, r0
   2b608:	b130      	cbz	r0, 2b618 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b60a:	6802      	ldr	r2, [r0, #0]
   2b60c:	0793      	lsls	r3, r2, #30
   2b60e:	d003      	beq.n	2b618 <z_queue_node_peek+0x14>
		ret = anode->data;
   2b610:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2b612:	b109      	cbz	r1, 2b618 <z_queue_node_peek+0x14>
			k_free(anode);
   2b614:	f000 fc6a 	bl	2beec <k_free>
}
   2b618:	4620      	mov	r0, r4
   2b61a:	bd10      	pop	{r4, pc}

0002b61c <z_impl_k_queue_init>:
	list->head = NULL;
   2b61c:	2300      	movs	r3, #0
	list->tail = NULL;
   2b61e:	e9c0 3300 	strd	r3, r3, [r0]
   2b622:	f100 0308 	add.w	r3, r0, #8
   2b626:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2b62a:	f100 0310 	add.w	r3, r0, #16
   2b62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2b632:	4770      	bx	lr

0002b634 <k_queue_append>:
{
   2b634:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2b636:	2301      	movs	r3, #1
   2b638:	9300      	str	r3, [sp, #0]
   2b63a:	2300      	movs	r3, #0
{
   2b63c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2b63e:	4619      	mov	r1, r3
   2b640:	f7ff ff7b 	bl	2b53a <queue_insert>
}
   2b644:	b003      	add	sp, #12
   2b646:	f85d fb04 	ldr.w	pc, [sp], #4

0002b64a <k_queue_prepend>:
{
   2b64a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2b64c:	2300      	movs	r3, #0
{
   2b64e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2b650:	9300      	str	r3, [sp, #0]
   2b652:	4619      	mov	r1, r3
   2b654:	f7ff ff71 	bl	2b53a <queue_insert>
}
   2b658:	b003      	add	sp, #12
   2b65a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b65e <k_queue_append_list>:
{
   2b65e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b662:	4605      	mov	r5, r0
   2b664:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2b666:	460c      	mov	r4, r1
   2b668:	b391      	cbz	r1, 2b6d0 <k_queue_append_list+0x72>
   2b66a:	b38a      	cbz	r2, 2b6d0 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b66c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2b670:	f04f 0320 	mov.w	r3, #32
   2b674:	f3ef 8811 	mrs	r8, BASEPRI
   2b678:	f383 8812 	msr	BASEPRI_MAX, r3
   2b67c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2b680:	4638      	mov	r0, r7
   2b682:	f000 f9e6 	bl	2ba52 <z_unpend_first_thread>
   2b686:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2b68a:	b920      	cbnz	r0, 2b696 <k_queue_append_list+0x38>
	return list->tail;
   2b68c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2b68e:	b9ca      	cbnz	r2, 2b6c4 <k_queue_append_list+0x66>
	list->head = node;
   2b690:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2b692:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2b694:	e00a      	b.n	2b6ac <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2b696:	6144      	str	r4, [r0, #20]
   2b698:	f8c0 90b0 	str.w	r9, [r0, #176]	; 0xb0
	z_ready_thread(thread);
   2b69c:	f000 f968 	bl	2b970 <z_ready_thread>
		head = *(void **)head;
   2b6a0:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2b6a2:	4638      	mov	r0, r7
   2b6a4:	f000 f9d5 	bl	2ba52 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2b6a8:	2c00      	cmp	r4, #0
   2b6aa:	d1ee      	bne.n	2b68a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b6ac:	2104      	movs	r1, #4
   2b6ae:	f105 0010 	add.w	r0, r5, #16
   2b6b2:	f000 fc00 	bl	2beb6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2b6b6:	4638      	mov	r0, r7
   2b6b8:	4641      	mov	r1, r8
   2b6ba:	f7f8 fc53 	bl	23f64 <z_reschedule>
	return 0;
   2b6be:	2000      	movs	r0, #0
}
   2b6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b6c4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b6c6:	f003 0303 	and.w	r3, r3, #3
   2b6ca:	431c      	orrs	r4, r3
   2b6cc:	6014      	str	r4, [r2, #0]
}
   2b6ce:	e7e0      	b.n	2b692 <k_queue_append_list+0x34>
		return -EINVAL;
   2b6d0:	f06f 0015 	mvn.w	r0, #21
   2b6d4:	e7f4      	b.n	2b6c0 <k_queue_append_list+0x62>

0002b6d6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2b6d6:	b15a      	cbz	r2, 2b6f0 <z_impl_k_sem_init+0x1a>
   2b6d8:	428a      	cmp	r2, r1
   2b6da:	d309      	bcc.n	2b6f0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2b6dc:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2b6e0:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2b6e4:	e9c0 0000 	strd	r0, r0, [r0]
   2b6e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2b6ec:	2000      	movs	r0, #0
   2b6ee:	4770      	bx	lr
		return -EINVAL;
   2b6f0:	f06f 0015 	mvn.w	r0, #21
}
   2b6f4:	4770      	bx	lr

0002b6f6 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2b6f6:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2b6f8:	2301      	movs	r3, #1
   2b6fa:	408b      	lsls	r3, r1
   2b6fc:	ea22 0303 	bic.w	r3, r2, r3
   2b700:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2b702:	fa22 f001 	lsr.w	r0, r2, r1
}
   2b706:	f000 0001 	and.w	r0, r0, #1
   2b70a:	4770      	bx	lr

0002b70c <unschedule_locked>:
{
   2b70c:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2b70e:	2103      	movs	r1, #3
{
   2b710:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2b712:	300c      	adds	r0, #12
   2b714:	f7ff ffef 	bl	2b6f6 <flag_test_and_clear>
   2b718:	4604      	mov	r4, r0
   2b71a:	b118      	cbz	r0, 2b724 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2b71c:	f105 0010 	add.w	r0, r5, #16
   2b720:	f000 f9dd 	bl	2bade <z_abort_timeout>
}
   2b724:	4620      	mov	r0, r4
   2b726:	bd38      	pop	{r3, r4, r5, pc}

0002b728 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2b728:	b120      	cbz	r0, 2b734 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2b72a:	2200      	movs	r2, #0
   2b72c:	4611      	mov	r1, r2
   2b72e:	30c0      	adds	r0, #192	; 0xc0
   2b730:	f000 b9b7 	b.w	2baa2 <z_sched_wake>
}
   2b734:	4770      	bx	lr

0002b736 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2b736:	68c3      	ldr	r3, [r0, #12]
{
   2b738:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b73a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2b73e:	079b      	lsls	r3, r3, #30
{
   2b740:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b742:	d416      	bmi.n	2b772 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2b744:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2b746:	2102      	movs	r1, #2
   2b748:	300c      	adds	r0, #12
   2b74a:	f7ff ffd4 	bl	2b6f6 <flag_test_and_clear>
   2b74e:	b180      	cbz	r0, 2b772 <cancel_async_locked+0x3c>
	return list->head;
   2b750:	f8d6 20b8 	ldr.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b754:	b16a      	cbz	r2, 2b772 <cancel_async_locked+0x3c>
   2b756:	4294      	cmp	r4, r2
   2b758:	d11b      	bne.n	2b792 <cancel_async_locked+0x5c>
	return node->next;
   2b75a:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2b75c:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2b760:	b98d      	cbnz	r5, 2b786 <cancel_async_locked+0x50>
   2b762:	428c      	cmp	r4, r1
	list->head = node;
   2b764:	f8c6 20b8 	str.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
   2b768:	d101      	bne.n	2b76e <cancel_async_locked+0x38>
	list->tail = node;
   2b76a:	f8c6 20bc 	str.w	r2, [r6, #188]	; 0xbc
	parent->next = child;
   2b76e:	2300      	movs	r3, #0
   2b770:	6023      	str	r3, [r4, #0]
	return *flagp;
   2b772:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2b774:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2b778:	bf1e      	ittt	ne
   2b77a:	f043 0302 	orrne.w	r3, r3, #2
   2b77e:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2b780:	f003 000f 	andne.w	r0, r3, #15
}
   2b784:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2b786:	428c      	cmp	r4, r1
	parent->next = child;
   2b788:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2b78a:	bf08      	it	eq
   2b78c:	f8c6 50bc 	streq.w	r5, [r6, #188]	; 0xbc
}
   2b790:	e7ed      	b.n	2b76e <cancel_async_locked+0x38>
	return node->next;
   2b792:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b794:	6812      	ldr	r2, [r2, #0]
   2b796:	e7dd      	b.n	2b754 <cancel_async_locked+0x1e>

0002b798 <work_timeout>:
{
   2b798:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b79a:	4604      	mov	r4, r0
   2b79c:	f04f 0320 	mov.w	r3, #32
   2b7a0:	f3ef 8511 	mrs	r5, BASEPRI
   2b7a4:	f383 8812 	msr	BASEPRI_MAX, r3
   2b7a8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2b7ac:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2b7ae:	f1a0 0610 	sub.w	r6, r0, #16
   2b7b2:	2103      	movs	r1, #3
   2b7b4:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2b7b6:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2b7b8:	f7ff ff9d 	bl	2b6f6 <flag_test_and_clear>
   2b7bc:	b128      	cbz	r0, 2b7ca <work_timeout+0x32>
		queue = dw->queue;
   2b7be:	69a3      	ldr	r3, [r4, #24]
   2b7c0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2b7c2:	a901      	add	r1, sp, #4
   2b7c4:	4630      	mov	r0, r6
   2b7c6:	f7f8 fa95 	bl	23cf4 <submit_to_queue_locked>
	__asm__ volatile(
   2b7ca:	f385 8811 	msr	BASEPRI, r5
   2b7ce:	f3bf 8f6f 	isb	sy
}
   2b7d2:	b002      	add	sp, #8
   2b7d4:	bd70      	pop	{r4, r5, r6, pc}

0002b7d6 <k_work_init>:
{
   2b7d6:	b538      	push	{r3, r4, r5, lr}
   2b7d8:	4604      	mov	r4, r0
   2b7da:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b7dc:	2210      	movs	r2, #16
   2b7de:	2100      	movs	r1, #0
   2b7e0:	f7fc fef4 	bl	285cc <memset>
   2b7e4:	6065      	str	r5, [r4, #4]
}
   2b7e6:	bd38      	pop	{r3, r4, r5, pc}

0002b7e8 <k_work_submit_to_queue>:
{
   2b7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b7ea:	9001      	str	r0, [sp, #4]
   2b7ec:	4608      	mov	r0, r1
	__asm__ volatile(
   2b7ee:	f04f 0320 	mov.w	r3, #32
   2b7f2:	f3ef 8511 	mrs	r5, BASEPRI
   2b7f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b7fa:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2b7fe:	a901      	add	r1, sp, #4
   2b800:	f7f8 fa78 	bl	23cf4 <submit_to_queue_locked>
   2b804:	4604      	mov	r4, r0
	__asm__ volatile(
   2b806:	f385 8811 	msr	BASEPRI, r5
   2b80a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2b80e:	2800      	cmp	r0, #0
   2b810:	dd04      	ble.n	2b81c <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2b812:	f7f8 fe57 	bl	244c4 <z_impl_k_is_preempt_thread>
   2b816:	b108      	cbz	r0, 2b81c <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2b818:	f7f8 fdac 	bl	24374 <z_impl_k_yield>
}
   2b81c:	4620      	mov	r0, r4
   2b81e:	b003      	add	sp, #12
   2b820:	bd30      	pop	{r4, r5, pc}

0002b822 <k_work_init_delayable>:
{
   2b822:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2b824:	2230      	movs	r2, #48	; 0x30
{
   2b826:	4604      	mov	r4, r0
   2b828:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2b82a:	2100      	movs	r1, #0
   2b82c:	f7fc fece 	bl	285cc <memset>
   2b830:	f44f 7380 	mov.w	r3, #256	; 0x100
   2b834:	6065      	str	r5, [r4, #4]
   2b836:	60e3      	str	r3, [r4, #12]
}
   2b838:	bd38      	pop	{r3, r4, r5, pc}

0002b83a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2b83a:	b538      	push	{r3, r4, r5, lr}
   2b83c:	4604      	mov	r4, r0
	__asm__ volatile(
   2b83e:	f04f 0320 	mov.w	r3, #32
   2b842:	f3ef 8511 	mrs	r5, BASEPRI
   2b846:	f383 8812 	msr	BASEPRI_MAX, r3
   2b84a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2b84e:	f7ff ff5d 	bl	2b70c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2b852:	4620      	mov	r0, r4
   2b854:	f7ff ff6f 	bl	2b736 <cancel_async_locked>
	__asm__ volatile(
   2b858:	f385 8811 	msr	BASEPRI, r5
   2b85c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2b860:	bd38      	pop	{r3, r4, r5, pc}

0002b862 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2b862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b864:	4604      	mov	r4, r0
   2b866:	460d      	mov	r5, r1
	__asm__ volatile(
   2b868:	f04f 0320 	mov.w	r3, #32
   2b86c:	f3ef 8711 	mrs	r7, BASEPRI
   2b870:	f383 8812 	msr	BASEPRI_MAX, r3
   2b874:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2b878:	68c3      	ldr	r3, [r0, #12]
   2b87a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2b87e:	2b00      	cmp	r3, #0
   2b880:	bf14      	ite	ne
   2b882:	2601      	movne	r6, #1
   2b884:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2b886:	d009      	beq.n	2b89c <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2b888:	f7ff ff40 	bl	2b70c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2b88c:	4620      	mov	r0, r4
   2b88e:	f7ff ff52 	bl	2b736 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2b892:	4629      	mov	r1, r5
   2b894:	4620      	mov	r0, r4
   2b896:	f7f8 fa0f 	bl	23cb8 <cancel_sync_locked>
   2b89a:	4603      	mov	r3, r0
	__asm__ volatile(
   2b89c:	f387 8811 	msr	BASEPRI, r7
   2b8a0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2b8a4:	b13b      	cbz	r3, 2b8b6 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2b8a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b8ae:	f105 0008 	add.w	r0, r5, #8
   2b8b2:	f7f8 f929 	bl	23b08 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2b8b6:	4630      	mov	r0, r6
   2b8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b8ba <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2b8ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b8be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b8c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b8c2:	2300      	movs	r3, #0
	node->prev = NULL;
   2b8c4:	e9c0 3300 	strd	r3, r3, [r0]
}
   2b8c8:	4770      	bx	lr

0002b8ca <unpend_thread_no_timeout>:
{
   2b8ca:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2b8cc:	f7ff fff5 	bl	2b8ba <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b8d0:	7b43      	ldrb	r3, [r0, #13]
   2b8d2:	f023 0302 	bic.w	r3, r3, #2
   2b8d6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2b8d8:	2300      	movs	r3, #0
   2b8da:	6083      	str	r3, [r0, #8]
}
   2b8dc:	bd08      	pop	{r3, pc}

0002b8de <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2b8de:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2b8e2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2b8e6:	4283      	cmp	r3, r0
		return b2 - b1;
   2b8e8:	bf14      	ite	ne
   2b8ea:	1ac0      	subne	r0, r0, r3
	return 0;
   2b8ec:	2000      	moveq	r0, #0
}
   2b8ee:	4770      	bx	lr

0002b8f0 <z_unpend_thread_no_timeout>:
{
   2b8f0:	b508      	push	{r3, lr}
	__asm__ volatile(
   2b8f2:	f04f 0320 	mov.w	r3, #32
   2b8f6:	f3ef 8111 	mrs	r1, BASEPRI
   2b8fa:	f383 8812 	msr	BASEPRI_MAX, r3
   2b8fe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b902:	f7ff ffe2 	bl	2b8ca <unpend_thread_no_timeout>
	__asm__ volatile(
   2b906:	f381 8811 	msr	BASEPRI, r1
   2b90a:	f3bf 8f6f 	isb	sy
}
   2b90e:	bd08      	pop	{r3, pc}

0002b910 <z_unpend_thread>:
{
   2b910:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b912:	f04f 0320 	mov.w	r3, #32
   2b916:	f3ef 8411 	mrs	r4, BASEPRI
   2b91a:	f383 8812 	msr	BASEPRI_MAX, r3
   2b91e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b922:	f7ff ffd2 	bl	2b8ca <unpend_thread_no_timeout>
	__asm__ volatile(
   2b926:	f384 8811 	msr	BASEPRI, r4
   2b92a:	f3bf 8f6f 	isb	sy
}
   2b92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b932:	3018      	adds	r0, #24
   2b934:	f000 b8d3 	b.w	2bade <z_abort_timeout>

0002b938 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2b938:	4603      	mov	r3, r0
   2b93a:	b920      	cbnz	r0, 2b946 <z_reschedule_irqlock+0xe>
   2b93c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2b940:	b90a      	cbnz	r2, 2b946 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2b942:	f7de be5b 	b.w	a5fc <arch_swap>
   2b946:	f383 8811 	msr	BASEPRI, r3
   2b94a:	f3bf 8f6f 	isb	sy
}
   2b94e:	4770      	bx	lr

0002b950 <z_reschedule_unlocked>:
	__asm__ volatile(
   2b950:	f04f 0320 	mov.w	r3, #32
   2b954:	f3ef 8011 	mrs	r0, BASEPRI
   2b958:	f383 8812 	msr	BASEPRI_MAX, r3
   2b95c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b960:	f7ff bfea 	b.w	2b938 <z_reschedule_irqlock>

0002b964 <z_priq_dumb_best>:
{
   2b964:	4603      	mov	r3, r0
	return list->head == list;
   2b966:	6800      	ldr	r0, [r0, #0]
}
   2b968:	4283      	cmp	r3, r0
   2b96a:	bf08      	it	eq
   2b96c:	2000      	moveq	r0, #0
   2b96e:	4770      	bx	lr

0002b970 <z_ready_thread>:
{
   2b970:	b510      	push	{r4, lr}
   2b972:	f04f 0320 	mov.w	r3, #32
   2b976:	f3ef 8411 	mrs	r4, BASEPRI
   2b97a:	f383 8812 	msr	BASEPRI_MAX, r3
   2b97e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2b982:	f7f8 fbaf 	bl	240e4 <ready_thread>
	__asm__ volatile(
   2b986:	f384 8811 	msr	BASEPRI, r4
   2b98a:	f3bf 8f6f 	isb	sy
}
   2b98e:	bd10      	pop	{r4, pc}

0002b990 <z_thread_timeout>:
{
   2b990:	b510      	push	{r4, lr}
   2b992:	4601      	mov	r1, r0
	__asm__ volatile(
   2b994:	f04f 0320 	mov.w	r3, #32
   2b998:	f3ef 8411 	mrs	r4, BASEPRI
   2b99c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b9a0:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2b9a4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2b9a8:	f013 0f28 	tst.w	r3, #40	; 0x28
   2b9ac:	d10d      	bne.n	2b9ca <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2b9ae:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2b9b2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2b9b4:	b10b      	cbz	r3, 2b9ba <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2b9b6:	f7ff ff88 	bl	2b8ca <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2b9ba:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2b9be:	f023 0314 	bic.w	r3, r3, #20
   2b9c2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2b9c6:	f7f8 fb8d 	bl	240e4 <ready_thread>
	__asm__ volatile(
   2b9ca:	f384 8811 	msr	BASEPRI, r4
   2b9ce:	f3bf 8f6f 	isb	sy
}
   2b9d2:	bd10      	pop	{r4, pc}

0002b9d4 <add_to_waitq_locked>:
{
   2b9d4:	b538      	push	{r3, r4, r5, lr}
   2b9d6:	4604      	mov	r4, r0
   2b9d8:	460d      	mov	r5, r1
	unready_thread(thread);
   2b9da:	f7f8 fbd7 	bl	2418c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2b9de:	7b63      	ldrb	r3, [r4, #13]
   2b9e0:	f043 0302 	orr.w	r3, r3, #2
   2b9e4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2b9e6:	b195      	cbz	r5, 2ba0e <add_to_waitq_locked+0x3a>
   2b9e8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2b9ea:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b9ec:	429d      	cmp	r5, r3
   2b9ee:	d015      	beq.n	2ba1c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b9f0:	b1a3      	cbz	r3, 2ba1c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2b9f2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2b9f6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2b9fa:	4291      	cmp	r1, r2
   2b9fc:	d008      	beq.n	2ba10 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2b9fe:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ba00:	2a00      	cmp	r2, #0
   2ba02:	dd05      	ble.n	2ba10 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2ba04:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2ba06:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2ba0a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2ba0c:	605c      	str	r4, [r3, #4]
}
   2ba0e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2ba10:	686a      	ldr	r2, [r5, #4]
   2ba12:	4293      	cmp	r3, r2
   2ba14:	d002      	beq.n	2ba1c <add_to_waitq_locked+0x48>
   2ba16:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ba18:	2b00      	cmp	r3, #0
   2ba1a:	d1ec      	bne.n	2b9f6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2ba1c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2ba1e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2ba22:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2ba24:	606c      	str	r4, [r5, #4]
}
   2ba26:	e7f2      	b.n	2ba0e <add_to_waitq_locked+0x3a>

0002ba28 <z_unpend1_no_timeout>:
{
   2ba28:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ba2a:	f04f 0320 	mov.w	r3, #32
   2ba2e:	f3ef 8411 	mrs	r4, BASEPRI
   2ba32:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba36:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2ba3a:	f7ff ff93 	bl	2b964 <z_priq_dumb_best>
		if (thread != NULL) {
   2ba3e:	4601      	mov	r1, r0
   2ba40:	b108      	cbz	r0, 2ba46 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2ba42:	f7ff ff42 	bl	2b8ca <unpend_thread_no_timeout>
	__asm__ volatile(
   2ba46:	f384 8811 	msr	BASEPRI, r4
   2ba4a:	f3bf 8f6f 	isb	sy
}
   2ba4e:	4608      	mov	r0, r1
   2ba50:	bd10      	pop	{r4, pc}

0002ba52 <z_unpend_first_thread>:
{
   2ba52:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ba54:	f04f 0320 	mov.w	r3, #32
   2ba58:	f3ef 8511 	mrs	r5, BASEPRI
   2ba5c:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba60:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2ba64:	f7ff ff7e 	bl	2b964 <z_priq_dumb_best>
		if (thread != NULL) {
   2ba68:	4604      	mov	r4, r0
   2ba6a:	b120      	cbz	r0, 2ba76 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2ba6c:	f7ff ff2d 	bl	2b8ca <unpend_thread_no_timeout>
   2ba70:	3018      	adds	r0, #24
   2ba72:	f000 f834 	bl	2bade <z_abort_timeout>
	__asm__ volatile(
   2ba76:	f385 8811 	msr	BASEPRI, r5
   2ba7a:	f3bf 8f6f 	isb	sy
}
   2ba7e:	4620      	mov	r0, r4
   2ba80:	bd38      	pop	{r3, r4, r5, pc}

0002ba82 <z_unpend_all>:
{
   2ba82:	b538      	push	{r3, r4, r5, lr}
   2ba84:	4605      	mov	r5, r0
	int need_sched = 0;
   2ba86:	2000      	movs	r0, #0
	return list->head == list;
   2ba88:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ba8a:	42a5      	cmp	r5, r4
   2ba8c:	d000      	beq.n	2ba90 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ba8e:	b904      	cbnz	r4, 2ba92 <z_unpend_all+0x10>
}
   2ba90:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ba92:	4620      	mov	r0, r4
   2ba94:	f7ff ff3c 	bl	2b910 <z_unpend_thread>
		z_ready_thread(thread);
   2ba98:	4620      	mov	r0, r4
   2ba9a:	f7ff ff69 	bl	2b970 <z_ready_thread>
		need_sched = 1;
   2ba9e:	2001      	movs	r0, #1
   2baa0:	e7f2      	b.n	2ba88 <z_unpend_all+0x6>

0002baa2 <z_sched_wake>:
{
   2baa2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2baa4:	f04f 0320 	mov.w	r3, #32
   2baa8:	f3ef 8511 	mrs	r5, BASEPRI
   2baac:	f383 8812 	msr	BASEPRI_MAX, r3
   2bab0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2bab4:	f7ff ff56 	bl	2b964 <z_priq_dumb_best>
		if (thread != NULL) {
   2bab8:	4604      	mov	r4, r0
   2baba:	b158      	cbz	r0, 2bad4 <z_sched_wake+0x32>
   2babc:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
   2bac0:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2bac2:	f7ff ff02 	bl	2b8ca <unpend_thread_no_timeout>
   2bac6:	3018      	adds	r0, #24
   2bac8:	f000 f809 	bl	2bade <z_abort_timeout>
			ready_thread(thread);
   2bacc:	4620      	mov	r0, r4
   2bace:	f7f8 fb09 	bl	240e4 <ready_thread>
			ret = true;
   2bad2:	2001      	movs	r0, #1
	__asm__ volatile(
   2bad4:	f385 8811 	msr	BASEPRI, r5
   2bad8:	f3bf 8f6f 	isb	sy
}
   2badc:	bd38      	pop	{r3, r4, r5, pc}

0002bade <z_abort_timeout>:
{
   2bade:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bae0:	f04f 0220 	mov.w	r2, #32
   2bae4:	f3ef 8411 	mrs	r4, BASEPRI
   2bae8:	f382 8812 	msr	BASEPRI_MAX, r2
   2baec:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2baf0:	6803      	ldr	r3, [r0, #0]
   2baf2:	b13b      	cbz	r3, 2bb04 <z_abort_timeout+0x26>
			remove_timeout(to);
   2baf4:	f7f8 fda8 	bl	24648 <remove_timeout>
			ret = 0;
   2baf8:	2000      	movs	r0, #0
	__asm__ volatile(
   2bafa:	f384 8811 	msr	BASEPRI, r4
   2bafe:	f3bf 8f6f 	isb	sy
}
   2bb02:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2bb04:	f06f 0015 	mvn.w	r0, #21
   2bb08:	e7f7      	b.n	2bafa <z_abort_timeout+0x1c>

0002bb0a <z_timeout_remaining>:
{
   2bb0a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bb0c:	f04f 0320 	mov.w	r3, #32
   2bb10:	f3ef 8411 	mrs	r4, BASEPRI
   2bb14:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb18:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   2bb1c:	f7f8 fdae 	bl	2467c <timeout_rem>
	__asm__ volatile(
   2bb20:	f384 8811 	msr	BASEPRI, r4
   2bb24:	f3bf 8f6f 	isb	sy
}
   2bb28:	bd10      	pop	{r4, pc}

0002bb2a <z_get_next_timeout_expiry>:
{
   2bb2a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bb2c:	f04f 0320 	mov.w	r3, #32
   2bb30:	f3ef 8411 	mrs	r4, BASEPRI
   2bb34:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb38:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2bb3c:	f7f8 fd5e 	bl	245fc <next_timeout>
	__asm__ volatile(
   2bb40:	f384 8811 	msr	BASEPRI, r4
   2bb44:	f3bf 8f6f 	isb	sy
}
   2bb48:	bd10      	pop	{r4, pc}

0002bb4a <z_set_timeout_expiry>:
{
   2bb4a:	b570      	push	{r4, r5, r6, lr}
   2bb4c:	4604      	mov	r4, r0
   2bb4e:	460d      	mov	r5, r1
	__asm__ volatile(
   2bb50:	f04f 0320 	mov.w	r3, #32
   2bb54:	f3ef 8611 	mrs	r6, BASEPRI
   2bb58:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb5c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2bb60:	f7f8 fd4c 	bl	245fc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2bb64:	2801      	cmp	r0, #1
   2bb66:	dd05      	ble.n	2bb74 <z_set_timeout_expiry+0x2a>
   2bb68:	42a0      	cmp	r0, r4
   2bb6a:	db03      	blt.n	2bb74 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2bb6c:	4629      	mov	r1, r5
   2bb6e:	4620      	mov	r0, r4
   2bb70:	f7f5 fd28 	bl	215c4 <sys_clock_set_timeout>
	__asm__ volatile(
   2bb74:	f386 8811 	msr	BASEPRI, r6
   2bb78:	f3bf 8f6f 	isb	sy
}
   2bb7c:	bd70      	pop	{r4, r5, r6, pc}

0002bb7e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2bb7e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2bb80:	f7f8 fe78 	bl	24874 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2bb84:	bd08      	pop	{r3, pc}

0002bb86 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2bb86:	f7f8 be75 	b.w	24874 <sys_clock_tick_get>

0002bb8a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2bb8a:	b108      	cbz	r0, 2bb90 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2bb8c:	f7df bac0 	b.w	b110 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2bb90:	4770      	bx	lr

0002bb92 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bb92:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2bb96:	bf08      	it	eq
   2bb98:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2bb9c:	b538      	push	{r3, r4, r5, lr}
   2bb9e:	4605      	mov	r5, r0
   2bba0:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bba2:	d01d      	beq.n	2bbe0 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bba4:	ea51 0300 	orrs.w	r3, r1, r0
   2bba8:	d103      	bne.n	2bbb2 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2bbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2bbae:	f7f8 be61 	b.w	24874 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2bbb2:	f06f 0301 	mvn.w	r3, #1
   2bbb6:	1a18      	subs	r0, r3, r0
   2bbb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bbbc:	eb63 0101 	sbc.w	r1, r3, r1
   2bbc0:	2900      	cmp	r1, #0
   2bbc2:	da0c      	bge.n	2bbde <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2bbc4:	f7f8 fe56 	bl	24874 <sys_clock_tick_get>
   2bbc8:	2d01      	cmp	r5, #1
   2bbca:	4622      	mov	r2, r4
   2bbcc:	f174 0400 	sbcs.w	r4, r4, #0
   2bbd0:	462b      	mov	r3, r5
   2bbd2:	bfbc      	itt	lt
   2bbd4:	2301      	movlt	r3, #1
   2bbd6:	2200      	movlt	r2, #0
   2bbd8:	1818      	adds	r0, r3, r0
   2bbda:	eb41 0102 	adc.w	r1, r1, r2
}
   2bbde:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2bbe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bbe4:	4601      	mov	r1, r0
   2bbe6:	e7fa      	b.n	2bbde <sys_clock_timeout_end_calc+0x4c>

0002bbe8 <k_timer_init>:
	timer->status = 0U;
   2bbe8:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2bbea:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2bbee:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2bbf2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2bbf6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2bbfa:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2bbfc:	6343      	str	r3, [r0, #52]	; 0x34
}
   2bbfe:	4770      	bx	lr

0002bc00 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2bc00:	b510      	push	{r4, lr}
   2bc02:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2bc04:	f7ff ff6b 	bl	2bade <z_abort_timeout>

	if (inactive) {
   2bc08:	b9b0      	cbnz	r0, 2bc38 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2bc0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2bc0c:	b10b      	cbz	r3, 2bc12 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2bc0e:	4620      	mov	r0, r4
   2bc10:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2bc12:	f104 0018 	add.w	r0, r4, #24
   2bc16:	f7ff ff07 	bl	2ba28 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2bc1a:	b168      	cbz	r0, 2bc38 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2bc1c:	f7ff fea8 	bl	2b970 <z_ready_thread>
	__asm__ volatile(
   2bc20:	f04f 0320 	mov.w	r3, #32
   2bc24:	f3ef 8011 	mrs	r0, BASEPRI
   2bc28:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc2c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2bc30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2bc34:	f7ff be80 	b.w	2b938 <z_reschedule_irqlock>
   2bc38:	bd10      	pop	{r4, pc}

0002bc3a <add_event>:
{
   2bc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc3c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2bc3e:	e9d0 1300 	ldrd	r1, r3, [r0]
   2bc42:	4288      	cmp	r0, r1
   2bc44:	4604      	mov	r4, r0
   2bc46:	d00d      	beq.n	2bc64 <add_event+0x2a>
	if ((pending == NULL) ||
   2bc48:	b163      	cbz	r3, 2bc64 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bc4a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bc4c:	b100      	cbz	r0, 2bc50 <add_event+0x16>
   2bc4e:	3860      	subs	r0, #96	; 0x60
   2bc50:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bc54:	4639      	mov	r1, r7
   2bc56:	f7ff fe42 	bl	2b8de <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2bc5a:	2800      	cmp	r0, #0
   2bc5c:	dc02      	bgt.n	2bc64 <add_event+0x2a>
	return list->head == list;
   2bc5e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bc60:	42b4      	cmp	r4, r6
   2bc62:	d109      	bne.n	2bc78 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2bc64:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2bc66:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2bc6a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2bc6c:	6065      	str	r5, [r4, #4]
}
   2bc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2bc70:	6863      	ldr	r3, [r4, #4]
   2bc72:	42b3      	cmp	r3, r6
   2bc74:	d0f6      	beq.n	2bc64 <add_event+0x2a>
   2bc76:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2bc78:	2e00      	cmp	r6, #0
   2bc7a:	d0f3      	beq.n	2bc64 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2bc7c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bc7e:	b101      	cbz	r1, 2bc82 <add_event+0x48>
   2bc80:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2bc82:	4638      	mov	r0, r7
   2bc84:	f7ff fe2b 	bl	2b8de <z_sched_prio_cmp>
   2bc88:	2800      	cmp	r0, #0
   2bc8a:	ddf1      	ble.n	2bc70 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2bc8c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2bc8e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2bc92:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2bc94:	6075      	str	r5, [r6, #4]
			return;
   2bc96:	e7ea      	b.n	2bc6e <add_event+0x34>

0002bc98 <register_events>:
{
   2bc98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2bc9c:	2500      	movs	r5, #0
{
   2bc9e:	468b      	mov	fp, r1
   2bca0:	4614      	mov	r4, r2
   2bca2:	461f      	mov	r7, r3
   2bca4:	4682      	mov	sl, r0
	int events_registered = 0;
   2bca6:	462e      	mov	r6, r5
	event->poller = NULL;
   2bca8:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2bcaa:	455d      	cmp	r5, fp
   2bcac:	db02      	blt.n	2bcb4 <register_events+0x1c>
}
   2bcae:	4630      	mov	r0, r6
   2bcb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bcb4:	f04f 0320 	mov.w	r3, #32
   2bcb8:	f3ef 8911 	mrs	r9, BASEPRI
   2bcbc:	f383 8812 	msr	BASEPRI_MAX, r3
   2bcc0:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2bcc4:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2bcc8:	f003 031f 	and.w	r3, r3, #31
   2bccc:	3b01      	subs	r3, #1
   2bcce:	2b07      	cmp	r3, #7
   2bcd0:	d80f      	bhi.n	2bcf2 <register_events+0x5a>
   2bcd2:	e8df f003 	tbb	[pc, r3]
   2bcd6:	041e      	.short	0x041e
   2bcd8:	0e0e0a0e 	.word	0x0e0e0a0e
   2bcdc:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2bcde:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bce2:	689b      	ldr	r3, [r3, #8]
   2bce4:	b12b      	cbz	r3, 2bcf2 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2bce6:	2302      	movs	r3, #2
   2bce8:	e020      	b.n	2bd2c <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2bcea:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bcee:	681b      	ldr	r3, [r3, #0]
   2bcf0:	bb8b      	cbnz	r3, 2bd56 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2bcf2:	bb47      	cbnz	r7, 2bd46 <register_events+0xae>
   2bcf4:	7823      	ldrb	r3, [r4, #0]
   2bcf6:	b333      	cbz	r3, 2bd46 <register_events+0xae>
	switch (event->type) {
   2bcf8:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2bcfc:	f003 031f 	and.w	r3, r3, #31
   2bd00:	3b01      	subs	r3, #1
   2bd02:	2b07      	cmp	r3, #7
   2bd04:	d830      	bhi.n	2bd68 <register_events+0xd0>
   2bd06:	e8df f003 	tbb	[pc, r3]
   2bd0a:	2833      	.short	0x2833
   2bd0c:	2f2f282f 	.word	0x2f2f282f
   2bd10:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2bd12:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bd16:	689b      	ldr	r3, [r3, #8]
   2bd18:	2b00      	cmp	r3, #0
   2bd1a:	d0ea      	beq.n	2bcf2 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2bd1c:	2301      	movs	r3, #1
   2bd1e:	e005      	b.n	2bd2c <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2bd20:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bd24:	6a1b      	ldr	r3, [r3, #32]
   2bd26:	2b00      	cmp	r3, #0
   2bd28:	d0e3      	beq.n	2bcf2 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2bd2a:	2310      	movs	r3, #16
	event->state |= state;
   2bd2c:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2bd30:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2bd34:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2bd38:	430b      	orrs	r3, r1
   2bd3a:	f363 3252 	bfi	r2, r3, #13, #6
   2bd3e:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2bd42:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2bd46:	f389 8811 	msr	BASEPRI, r9
   2bd4a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2bd4e:	3501      	adds	r5, #1
   2bd50:	f10a 0a14 	add.w	sl, sl, #20
   2bd54:	e7a9      	b.n	2bcaa <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2bd56:	2304      	movs	r3, #4
   2bd58:	e7e8      	b.n	2bd2c <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2bd5a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2bd5e:	4622      	mov	r2, r4
   2bd60:	4651      	mov	r1, sl
   2bd62:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2bd64:	f7ff ff69 	bl	2bc3a <add_event>
	event->poller = poller;
   2bd68:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2bd6c:	3601      	adds	r6, #1
   2bd6e:	e7ea      	b.n	2bd46 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2bd70:	f8da 0010 	ldr.w	r0, [sl, #16]
   2bd74:	4622      	mov	r2, r4
   2bd76:	4651      	mov	r1, sl
   2bd78:	e7f4      	b.n	2bd64 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2bd7a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2bd7e:	4622      	mov	r2, r4
   2bd80:	4651      	mov	r1, sl
   2bd82:	3024      	adds	r0, #36	; 0x24
   2bd84:	e7ee      	b.n	2bd64 <register_events+0xcc>

0002bd86 <signal_poll_event>:
{
   2bd86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2bd8a:	6884      	ldr	r4, [r0, #8]
{
   2bd8c:	4605      	mov	r5, r0
   2bd8e:	460e      	mov	r6, r1
	if (poller != NULL) {
   2bd90:	b144      	cbz	r4, 2bda4 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2bd92:	7863      	ldrb	r3, [r4, #1]
   2bd94:	2b01      	cmp	r3, #1
   2bd96:	d136      	bne.n	2be06 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2bd98:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2bd9c:	f013 0302 	ands.w	r3, r3, #2
   2bda0:	d10a      	bne.n	2bdb8 <signal_poll_event+0x32>
		poller->is_polling = false;
   2bda2:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2bda4:	68eb      	ldr	r3, [r5, #12]
   2bda6:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2bdaa:	430e      	orrs	r6, r1
	event->poller = NULL;
   2bdac:	2000      	movs	r0, #0
	event->state |= state;
   2bdae:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2bdb2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2bdb4:	60eb      	str	r3, [r5, #12]
	return retcode;
   2bdb6:	e00b      	b.n	2bdd0 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2bdb8:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2bdbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2bdc0:	bf08      	it	eq
   2bdc2:	f112 0f02 	cmneq.w	r2, #2
   2bdc6:	d105      	bne.n	2bdd4 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2bdc8:	2300      	movs	r3, #0
   2bdca:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2bdcc:	f06f 000a 	mvn.w	r0, #10
}
   2bdd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bdd4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2bdd8:	4640      	mov	r0, r8
   2bdda:	f7ff fd99 	bl	2b910 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2bdde:	2e08      	cmp	r6, #8
   2bde0:	bf0c      	ite	eq
   2bde2:	f06f 0303 	mvneq.w	r3, #3
   2bde6:	2300      	movne	r3, #0
   2bde8:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2bdea:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2bdee:	06db      	lsls	r3, r3, #27
   2bdf0:	d102      	bne.n	2bdf8 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2bdf2:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2bdf6:	b10f      	cbz	r7, 2bdfc <signal_poll_event+0x76>
		poller->is_polling = false;
   2bdf8:	2300      	movs	r3, #0
   2bdfa:	e7d2      	b.n	2bda2 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2bdfc:	4640      	mov	r0, r8
   2bdfe:	f7ff fdb7 	bl	2b970 <z_ready_thread>
		poller->is_polling = false;
   2be02:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2be04:	e7ce      	b.n	2bda4 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2be06:	2b02      	cmp	r3, #2
   2be08:	d1f6      	bne.n	2bdf8 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2be0a:	7823      	ldrb	r3, [r4, #0]
   2be0c:	2b00      	cmp	r3, #0
   2be0e:	d0c9      	beq.n	2bda4 <signal_poll_event+0x1e>
   2be10:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2be14:	2f00      	cmp	r7, #0
   2be16:	d0f4      	beq.n	2be02 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2be18:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2be1c:	f1a4 0914 	sub.w	r9, r4, #20
   2be20:	f104 0014 	add.w	r0, r4, #20
   2be24:	f7ff fe5b 	bl	2bade <z_abort_timeout>
		twork->poll_result = 0;
   2be28:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2be2c:	4649      	mov	r1, r9
   2be2e:	4638      	mov	r0, r7
   2be30:	f7ff fcda 	bl	2b7e8 <k_work_submit_to_queue>
		poller->is_polling = false;
   2be34:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2be38:	e7b4      	b.n	2bda4 <signal_poll_event+0x1e>

0002be3a <clear_event_registrations>:
	while (num_events--) {
   2be3a:	2314      	movs	r3, #20
{
   2be3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2be3e:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2be42:	2400      	movs	r4, #0
   2be44:	2601      	movs	r6, #1
	while (num_events--) {
   2be46:	b901      	cbnz	r1, 2be4a <clear_event_registrations+0x10>
}
   2be48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2be4a:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2be4e:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2be52:	f003 031f 	and.w	r3, r3, #31
   2be56:	2b08      	cmp	r3, #8
   2be58:	f1a0 0714 	sub.w	r7, r0, #20
   2be5c:	d80d      	bhi.n	2be7a <clear_event_registrations+0x40>
   2be5e:	fa06 f303 	lsl.w	r3, r6, r3
   2be62:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2be66:	d008      	beq.n	2be7a <clear_event_registrations+0x40>
	return node->next != NULL;
   2be68:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2be6c:	b12b      	cbz	r3, 2be7a <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2be6e:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2be72:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2be74:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2be76:	e940 4405 	strd	r4, r4, [r0, #-20]
   2be7a:	f382 8811 	msr	BASEPRI, r2
   2be7e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2be82:	f04f 0320 	mov.w	r3, #32
   2be86:	f3ef 8211 	mrs	r2, BASEPRI
   2be8a:	f383 8812 	msr	BASEPRI_MAX, r3
   2be8e:	f3bf 8f6f 	isb	sy
   2be92:	3901      	subs	r1, #1
   2be94:	4638      	mov	r0, r7
   2be96:	e7d6      	b.n	2be46 <clear_event_registrations+0xc>

0002be98 <k_poll_event_init>:
{
   2be98:	b510      	push	{r4, lr}
	event->type = type;
   2be9a:	04d2      	lsls	r2, r2, #19
   2be9c:	0209      	lsls	r1, r1, #8
   2be9e:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2bea2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2bea6:	430a      	orrs	r2, r1
   2bea8:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2beaa:	2400      	movs	r4, #0
	event->type = type;
   2beac:	430a      	orrs	r2, r1
	event->obj = obj;
   2beae:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2beb2:	6084      	str	r4, [r0, #8]
}
   2beb4:	bd10      	pop	{r4, pc}

0002beb6 <z_handle_obj_poll_events>:
{
   2beb6:	4603      	mov	r3, r0
	return list->head == list;
   2beb8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2beba:	4283      	cmp	r3, r0
   2bebc:	d008      	beq.n	2bed0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2bebe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2bec2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2bec4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2bec6:	2300      	movs	r3, #0
	node->prev = NULL;
   2bec8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2becc:	f7ff bf5b 	b.w	2bd86 <signal_poll_event>
}
   2bed0:	4770      	bx	lr

0002bed2 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2bed2:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2bed4:	e9c0 0000 	strd	r0, r0, [r0]
   2bed8:	6083      	str	r3, [r0, #8]
}
   2beda:	4770      	bx	lr

0002bedc <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2bedc:	2300      	movs	r3, #0
   2bede:	6083      	str	r3, [r0, #8]
}
   2bee0:	4770      	bx	lr

0002bee2 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   2bee2:	6883      	ldr	r3, [r0, #8]
   2bee4:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   2bee6:	68c3      	ldr	r3, [r0, #12]
   2bee8:	6013      	str	r3, [r2, #0]
}
   2beea:	4770      	bx	lr

0002beec <k_free>:
	if (ptr != NULL) {
   2beec:	b120      	cbz	r0, 2bef8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2beee:	1f01      	subs	r1, r0, #4
   2bef0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2bef4:	f7ff baa9 	b.w	2b44a <k_heap_free>
}
   2bef8:	4770      	bx	lr

0002befa <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2befa:	4770      	bx	lr

0002befc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2befc:	f7f5 bbca 	b.w	21694 <SystemInit>
