
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	e0 a2 00 20 4d bd 00 00 e9 9f 02 00 21 bd 00 00     ... M.......!...
    1010:	21 bd 00 00 21 bd 00 00 21 bd 00 00 00 00 00 00     !...!...!.......
	...
    102c:	8d b5 00 00 21 bd 00 00 00 00 00 00 35 b5 00 00     ....!.......5...
    103c:	21 bd 00 00                                         !...

00001040 <_irq_vector_table>:
    1040:	41 b6 00 00 3d df 01 00 41 b6 00 00 41 b6 00 00     A...=...A...A...
    1050:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    1060:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    1070:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    1080:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    1090:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    10a0:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    10b0:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    10c0:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    10d0:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    10e0:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...
    10f0:	41 b6 00 00 41 b6 00 00 41 b6 00 00 41 b6 00 00     A...A...A...A...

Disassembly of section text:

00001100 <__aeabi_ldivmod>:
    1100:	b97b      	cbnz	r3, 1122 <__aeabi_ldivmod+0x22>
    1102:	b972      	cbnz	r2, 1122 <__aeabi_ldivmod+0x22>
    1104:	2900      	cmp	r1, #0
    1106:	bfbe      	ittt	lt
    1108:	2000      	movlt	r0, #0
    110a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    110e:	e006      	blt.n	111e <__aeabi_ldivmod+0x1e>
    1110:	bf08      	it	eq
    1112:	2800      	cmpeq	r0, #0
    1114:	bf1c      	itt	ne
    1116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    111a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    111e:	f000 b857 	b.w	11d0 <__aeabi_idiv0>
    1122:	f1ad 0c08 	sub.w	ip, sp, #8
    1126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    112a:	2900      	cmp	r1, #0
    112c:	db09      	blt.n	1142 <__aeabi_ldivmod+0x42>
    112e:	2b00      	cmp	r3, #0
    1130:	db1a      	blt.n	1168 <__aeabi_ldivmod+0x68>
    1132:	f000 f84f 	bl	11d4 <__udivmoddi4>
    1136:	f8dd e004 	ldr.w	lr, [sp, #4]
    113a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    113e:	b004      	add	sp, #16
    1140:	4770      	bx	lr
    1142:	4240      	negs	r0, r0
    1144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1148:	2b00      	cmp	r3, #0
    114a:	db1b      	blt.n	1184 <__aeabi_ldivmod+0x84>
    114c:	f000 f842 	bl	11d4 <__udivmoddi4>
    1150:	f8dd e004 	ldr.w	lr, [sp, #4]
    1154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1158:	b004      	add	sp, #16
    115a:	4240      	negs	r0, r0
    115c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1160:	4252      	negs	r2, r2
    1162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1166:	4770      	bx	lr
    1168:	4252      	negs	r2, r2
    116a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    116e:	f000 f831 	bl	11d4 <__udivmoddi4>
    1172:	f8dd e004 	ldr.w	lr, [sp, #4]
    1176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    117a:	b004      	add	sp, #16
    117c:	4240      	negs	r0, r0
    117e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1182:	4770      	bx	lr
    1184:	4252      	negs	r2, r2
    1186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    118a:	f000 f823 	bl	11d4 <__udivmoddi4>
    118e:	f8dd e004 	ldr.w	lr, [sp, #4]
    1192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1196:	b004      	add	sp, #16
    1198:	4252      	negs	r2, r2
    119a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    119e:	4770      	bx	lr

000011a0 <__aeabi_uldivmod>:
    11a0:	b953      	cbnz	r3, 11b8 <__aeabi_uldivmod+0x18>
    11a2:	b94a      	cbnz	r2, 11b8 <__aeabi_uldivmod+0x18>
    11a4:	2900      	cmp	r1, #0
    11a6:	bf08      	it	eq
    11a8:	2800      	cmpeq	r0, #0
    11aa:	bf1c      	itt	ne
    11ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    11b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    11b4:	f000 b80c 	b.w	11d0 <__aeabi_idiv0>
    11b8:	f1ad 0c08 	sub.w	ip, sp, #8
    11bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    11c0:	f000 f808 	bl	11d4 <__udivmoddi4>
    11c4:	f8dd e004 	ldr.w	lr, [sp, #4]
    11c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    11cc:	b004      	add	sp, #16
    11ce:	4770      	bx	lr

000011d0 <__aeabi_idiv0>:
    11d0:	4770      	bx	lr
    11d2:	bf00      	nop

000011d4 <__udivmoddi4>:
    11d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11d8:	4607      	mov	r7, r0
    11da:	468c      	mov	ip, r1
    11dc:	4608      	mov	r0, r1
    11de:	9e09      	ldr	r6, [sp, #36]	; 0x24
    11e0:	4615      	mov	r5, r2
    11e2:	463c      	mov	r4, r7
    11e4:	4619      	mov	r1, r3
    11e6:	2b00      	cmp	r3, #0
    11e8:	f040 80c6 	bne.w	1378 <__udivmoddi4+0x1a4>
    11ec:	4282      	cmp	r2, r0
    11ee:	fab2 f782 	clz	r7, r2
    11f2:	d946      	bls.n	1282 <__udivmoddi4+0xae>
    11f4:	b14f      	cbz	r7, 120a <__udivmoddi4+0x36>
    11f6:	f1c7 0e20 	rsb	lr, r7, #32
    11fa:	fa24 fe0e 	lsr.w	lr, r4, lr
    11fe:	fa00 f307 	lsl.w	r3, r0, r7
    1202:	40bd      	lsls	r5, r7
    1204:	ea4e 0c03 	orr.w	ip, lr, r3
    1208:	40bc      	lsls	r4, r7
    120a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    120e:	fa1f fe85 	uxth.w	lr, r5
    1212:	fbbc f9f8 	udiv	r9, ip, r8
    1216:	0c22      	lsrs	r2, r4, #16
    1218:	fb08 c319 	mls	r3, r8, r9, ip
    121c:	fb09 fa0e 	mul.w	sl, r9, lr
    1220:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1224:	459a      	cmp	sl, r3
    1226:	d928      	bls.n	127a <__udivmoddi4+0xa6>
    1228:	18eb      	adds	r3, r5, r3
    122a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    122e:	d204      	bcs.n	123a <__udivmoddi4+0x66>
    1230:	459a      	cmp	sl, r3
    1232:	d902      	bls.n	123a <__udivmoddi4+0x66>
    1234:	f1a9 0002 	sub.w	r0, r9, #2
    1238:	442b      	add	r3, r5
    123a:	eba3 030a 	sub.w	r3, r3, sl
    123e:	b2a4      	uxth	r4, r4
    1240:	fbb3 f2f8 	udiv	r2, r3, r8
    1244:	fb08 3312 	mls	r3, r8, r2, r3
    1248:	fb02 fe0e 	mul.w	lr, r2, lr
    124c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1250:	45a6      	cmp	lr, r4
    1252:	d914      	bls.n	127e <__udivmoddi4+0xaa>
    1254:	192c      	adds	r4, r5, r4
    1256:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    125a:	d203      	bcs.n	1264 <__udivmoddi4+0x90>
    125c:	45a6      	cmp	lr, r4
    125e:	d901      	bls.n	1264 <__udivmoddi4+0x90>
    1260:	1e93      	subs	r3, r2, #2
    1262:	442c      	add	r4, r5
    1264:	eba4 040e 	sub.w	r4, r4, lr
    1268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    126c:	b11e      	cbz	r6, 1276 <__udivmoddi4+0xa2>
    126e:	40fc      	lsrs	r4, r7
    1270:	2300      	movs	r3, #0
    1272:	6034      	str	r4, [r6, #0]
    1274:	6073      	str	r3, [r6, #4]
    1276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    127a:	4648      	mov	r0, r9
    127c:	e7dd      	b.n	123a <__udivmoddi4+0x66>
    127e:	4613      	mov	r3, r2
    1280:	e7f0      	b.n	1264 <__udivmoddi4+0x90>
    1282:	b902      	cbnz	r2, 1286 <__udivmoddi4+0xb2>
    1284:	deff      	udf	#255	; 0xff
    1286:	bb87      	cbnz	r7, 12ea <__udivmoddi4+0x116>
    1288:	1a83      	subs	r3, r0, r2
    128a:	2101      	movs	r1, #1
    128c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1290:	b2aa      	uxth	r2, r5
    1292:	fbb3 fcfe 	udiv	ip, r3, lr
    1296:	0c20      	lsrs	r0, r4, #16
    1298:	fb0e 331c 	mls	r3, lr, ip, r3
    129c:	fb0c f802 	mul.w	r8, ip, r2
    12a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    12a4:	4598      	cmp	r8, r3
    12a6:	d963      	bls.n	1370 <__udivmoddi4+0x19c>
    12a8:	18eb      	adds	r3, r5, r3
    12aa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    12ae:	d204      	bcs.n	12ba <__udivmoddi4+0xe6>
    12b0:	4598      	cmp	r8, r3
    12b2:	d902      	bls.n	12ba <__udivmoddi4+0xe6>
    12b4:	f1ac 0002 	sub.w	r0, ip, #2
    12b8:	442b      	add	r3, r5
    12ba:	eba3 0308 	sub.w	r3, r3, r8
    12be:	b2a4      	uxth	r4, r4
    12c0:	fbb3 fcfe 	udiv	ip, r3, lr
    12c4:	fb0e 331c 	mls	r3, lr, ip, r3
    12c8:	fb0c f202 	mul.w	r2, ip, r2
    12cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    12d0:	42a2      	cmp	r2, r4
    12d2:	d94f      	bls.n	1374 <__udivmoddi4+0x1a0>
    12d4:	192c      	adds	r4, r5, r4
    12d6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    12da:	d204      	bcs.n	12e6 <__udivmoddi4+0x112>
    12dc:	42a2      	cmp	r2, r4
    12de:	d902      	bls.n	12e6 <__udivmoddi4+0x112>
    12e0:	f1ac 0302 	sub.w	r3, ip, #2
    12e4:	442c      	add	r4, r5
    12e6:	1aa4      	subs	r4, r4, r2
    12e8:	e7be      	b.n	1268 <__udivmoddi4+0x94>
    12ea:	f1c7 0c20 	rsb	ip, r7, #32
    12ee:	fa20 f80c 	lsr.w	r8, r0, ip
    12f2:	fa00 f307 	lsl.w	r3, r0, r7
    12f6:	fa24 fc0c 	lsr.w	ip, r4, ip
    12fa:	40bd      	lsls	r5, r7
    12fc:	ea4c 0203 	orr.w	r2, ip, r3
    1300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1304:	b2ab      	uxth	r3, r5
    1306:	fbb8 fcfe 	udiv	ip, r8, lr
    130a:	0c11      	lsrs	r1, r2, #16
    130c:	fb0e 801c 	mls	r0, lr, ip, r8
    1310:	fb0c f903 	mul.w	r9, ip, r3
    1314:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    1318:	4581      	cmp	r9, r0
    131a:	fa04 f407 	lsl.w	r4, r4, r7
    131e:	d923      	bls.n	1368 <__udivmoddi4+0x194>
    1320:	1828      	adds	r0, r5, r0
    1322:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    1326:	d204      	bcs.n	1332 <__udivmoddi4+0x15e>
    1328:	4581      	cmp	r9, r0
    132a:	d902      	bls.n	1332 <__udivmoddi4+0x15e>
    132c:	f1ac 0102 	sub.w	r1, ip, #2
    1330:	4428      	add	r0, r5
    1332:	eba0 0009 	sub.w	r0, r0, r9
    1336:	b292      	uxth	r2, r2
    1338:	fbb0 fcfe 	udiv	ip, r0, lr
    133c:	fb0e 001c 	mls	r0, lr, ip, r0
    1340:	fb0c f803 	mul.w	r8, ip, r3
    1344:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    1348:	4598      	cmp	r8, r3
    134a:	d90f      	bls.n	136c <__udivmoddi4+0x198>
    134c:	18eb      	adds	r3, r5, r3
    134e:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    1352:	d204      	bcs.n	135e <__udivmoddi4+0x18a>
    1354:	4598      	cmp	r8, r3
    1356:	d902      	bls.n	135e <__udivmoddi4+0x18a>
    1358:	f1ac 0202 	sub.w	r2, ip, #2
    135c:	442b      	add	r3, r5
    135e:	eba3 0308 	sub.w	r3, r3, r8
    1362:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    1366:	e791      	b.n	128c <__udivmoddi4+0xb8>
    1368:	4661      	mov	r1, ip
    136a:	e7e2      	b.n	1332 <__udivmoddi4+0x15e>
    136c:	4662      	mov	r2, ip
    136e:	e7f6      	b.n	135e <__udivmoddi4+0x18a>
    1370:	4660      	mov	r0, ip
    1372:	e7a2      	b.n	12ba <__udivmoddi4+0xe6>
    1374:	4663      	mov	r3, ip
    1376:	e7b6      	b.n	12e6 <__udivmoddi4+0x112>
    1378:	4283      	cmp	r3, r0
    137a:	d905      	bls.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    137c:	b10e      	cbz	r6, 1382 <__udivmoddi4+0x1ae>
    137e:	e9c6 7000 	strd	r7, r0, [r6]
    1382:	2100      	movs	r1, #0
    1384:	4608      	mov	r0, r1
    1386:	e776      	b.n	1276 <__udivmoddi4+0xa2>
    1388:	fab3 f183 	clz	r1, r3
    138c:	b981      	cbnz	r1, 13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    138e:	4283      	cmp	r3, r0
    1390:	d301      	bcc.n	1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
    1392:	42ba      	cmp	r2, r7
    1394:	d80a      	bhi.n	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1396:	1abc      	subs	r4, r7, r2
    1398:	eb60 0303 	sbc.w	r3, r0, r3
    139c:	2001      	movs	r0, #1
    139e:	469c      	mov	ip, r3
    13a0:	2e00      	cmp	r6, #0
    13a2:	d068      	beq.n	1476 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee>
    13a4:	e9c6 4c00 	strd	r4, ip, [r6]
    13a8:	2100      	movs	r1, #0
    13aa:	e764      	b.n	1276 <__udivmoddi4+0xa2>
    13ac:	4608      	mov	r0, r1
    13ae:	e7f7      	b.n	13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>
    13b0:	f1c1 0c20 	rsb	ip, r1, #32
    13b4:	408b      	lsls	r3, r1
    13b6:	fa22 f40c 	lsr.w	r4, r2, ip
    13ba:	431c      	orrs	r4, r3
    13bc:	fa02 f501 	lsl.w	r5, r2, r1
    13c0:	fa00 f301 	lsl.w	r3, r0, r1
    13c4:	fa27 f20c 	lsr.w	r2, r7, ip
    13c8:	fa20 fb0c 	lsr.w	fp, r0, ip
    13cc:	ea4f 4914 	mov.w	r9, r4, lsr #16
    13d0:	4313      	orrs	r3, r2
    13d2:	fbbb f8f9 	udiv	r8, fp, r9
    13d6:	fa1f fe84 	uxth.w	lr, r4
    13da:	fb09 bb18 	mls	fp, r9, r8, fp
    13de:	0c1a      	lsrs	r2, r3, #16
    13e0:	fb08 fa0e 	mul.w	sl, r8, lr
    13e4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    13e8:	4592      	cmp	sl, r2
    13ea:	fa07 f701 	lsl.w	r7, r7, r1
    13ee:	d93e      	bls.n	146e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe6>
    13f0:	18a2      	adds	r2, r4, r2
    13f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    13f6:	d204      	bcs.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
    13f8:	4592      	cmp	sl, r2
    13fa:	d902      	bls.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
    13fc:	f1a8 0002 	sub.w	r0, r8, #2
    1400:	4422      	add	r2, r4
    1402:	eba2 020a 	sub.w	r2, r2, sl
    1406:	b29b      	uxth	r3, r3
    1408:	fbb2 f8f9 	udiv	r8, r2, r9
    140c:	fb09 2218 	mls	r2, r9, r8, r2
    1410:	fb08 fe0e 	mul.w	lr, r8, lr
    1414:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    1418:	4596      	cmp	lr, r2
    141a:	d92a      	bls.n	1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
    141c:	18a2      	adds	r2, r4, r2
    141e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1422:	d204      	bcs.n	142e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa6>
    1424:	4596      	cmp	lr, r2
    1426:	d902      	bls.n	142e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa6>
    1428:	f1a8 0302 	sub.w	r3, r8, #2
    142c:	4422      	add	r2, r4
    142e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1432:	fba0 9305 	umull	r9, r3, r0, r5
    1436:	eba2 020e 	sub.w	r2, r2, lr
    143a:	429a      	cmp	r2, r3
    143c:	46ce      	mov	lr, r9
    143e:	4698      	mov	r8, r3
    1440:	d302      	bcc.n	1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>
    1442:	d106      	bne.n	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
    1444:	454f      	cmp	r7, r9
    1446:	d204      	bcs.n	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
    1448:	ebb9 0e05 	subs.w	lr, r9, r5
    144c:	eb63 0804 	sbc.w	r8, r3, r4
    1450:	3801      	subs	r0, #1
    1452:	b186      	cbz	r6, 1476 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee>
    1454:	ebb7 030e 	subs.w	r3, r7, lr
    1458:	eb62 0708 	sbc.w	r7, r2, r8
    145c:	fa07 fc0c 	lsl.w	ip, r7, ip
    1460:	40cb      	lsrs	r3, r1
    1462:	ea4c 0303 	orr.w	r3, ip, r3
    1466:	40cf      	lsrs	r7, r1
    1468:	e9c6 3700 	strd	r3, r7, [r6]
    146c:	e79c      	b.n	13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    146e:	4640      	mov	r0, r8
    1470:	e7c7      	b.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
    1472:	4643      	mov	r3, r8
    1474:	e7db      	b.n	142e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa6>
    1476:	4631      	mov	r1, r6
    1478:	e6fd      	b.n	1276 <__udivmoddi4+0xa2>
    147a:	0000      	movs	r0, r0
    147c:	0000      	movs	r0, r0
	...

00001480 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    1480:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1482:	4d48      	ldr	r5, [pc, #288]	; (15a4 <bt_init+0x124>)
    1484:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    1488:	6899      	ldr	r1, [r3, #8]
    148a:	f011 0101 	ands.w	r1, r1, #1
{
    148e:	b090      	sub	sp, #64	; 0x40
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1490:	d123      	bne.n	14da <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1492:	aa0a      	add	r2, sp, #40	; 0x28
    1494:	f640 4003 	movw	r0, #3075	; 0xc03
    1498:	f00b fe38 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    149c:	4604      	mov	r4, r0
    149e:	2800      	cmp	r0, #0
    14a0:	d172      	bne.n	1588 <bt_init+0x108>
	uint8_t status = buf->data[0];
    14a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    14a4:	689b      	ldr	r3, [r3, #8]
	if (status) {
    14a6:	781b      	ldrb	r3, [r3, #0]
    14a8:	b9a3      	cbnz	r3, 14d4 <bt_init+0x54>
		bt_scan_reset();
    14aa:	f00d faaf 	bl	ea0c <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    14ae:	f3bf 8f5b 	dmb	ish
    14b2:	462b      	mov	r3, r5
    14b4:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    14b8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    14bc:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    14c0:	f3bf 8f5b 	dmb	ish
    14c4:	e853 1f00 	ldrex	r1, [r3]
    14c8:	e843 2000 	strex	r0, r2, [r3]
    14cc:	2800      	cmp	r0, #0
    14ce:	d1f9      	bne.n	14c4 <bt_init+0x44>
    14d0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    14d4:	980a      	ldr	r0, [sp, #40]	; 0x28
    14d6:	f01f fba7 	bl	20c28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    14da:	aa0a      	add	r2, sp, #40	; 0x28
    14dc:	2100      	movs	r1, #0
    14de:	f241 0003 	movw	r0, #4099	; 0x1003
    14e2:	f00b fe13 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    14e6:	4604      	mov	r4, r0
    14e8:	2800      	cmp	r0, #0
    14ea:	d14d      	bne.n	1588 <bt_init+0x108>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    14ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    14ee:	482e      	ldr	r0, [pc, #184]	; (15a8 <bt_init+0x128>)
    14f0:	6899      	ldr	r1, [r3, #8]
    14f2:	2208      	movs	r2, #8
    14f4:	3101      	adds	r1, #1
    14f6:	f028 ff31 	bl	2a35c <memcpy>
	net_buf_unref(rsp);
    14fa:	980a      	ldr	r0, [sp, #40]	; 0x28
    14fc:	f01f fb94 	bl	20c28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1500:	4621      	mov	r1, r4
    1502:	aa0a      	add	r2, sp, #40	; 0x28
    1504:	f241 0001 	movw	r0, #4097	; 0x1001
    1508:	f00b fe00 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    150c:	4604      	mov	r4, r0
    150e:	2800      	cmp	r0, #0
    1510:	d13a      	bne.n	1588 <bt_init+0x108>
	read_local_ver_complete(rsp);
    1512:	980a      	ldr	r0, [sp, #40]	; 0x28
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    1514:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    1516:	785a      	ldrb	r2, [r3, #1]
    1518:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    151c:	78d9      	ldrb	r1, [r3, #3]
    151e:	789a      	ldrb	r2, [r3, #2]
    1520:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1524:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    1528:	791a      	ldrb	r2, [r3, #4]
    152a:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    152e:	7a19      	ldrb	r1, [r3, #8]
    1530:	79da      	ldrb	r2, [r3, #7]
    1532:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1536:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    153a:	795a      	ldrb	r2, [r3, #5]
    153c:	799b      	ldrb	r3, [r3, #6]
    153e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1542:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    1546:	f01f fb6f 	bl	20c28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    154a:	4621      	mov	r1, r4
    154c:	aa0a      	add	r2, sp, #40	; 0x28
    154e:	f241 0002 	movw	r0, #4098	; 0x1002
    1552:	f00b fddb 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    1556:	4604      	mov	r4, r0
    1558:	b9b0      	cbnz	r0, 1588 <bt_init+0x108>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    155a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	memcpy(bt_dev.supported_commands, rp->commands,
    155c:	4813      	ldr	r0, [pc, #76]	; (15ac <bt_init+0x12c>)
    155e:	6899      	ldr	r1, [r3, #8]
    1560:	2240      	movs	r2, #64	; 0x40
    1562:	3101      	adds	r1, #1
    1564:	f028 fefa 	bl	2a35c <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    1568:	4810      	ldr	r0, [pc, #64]	; (15ac <bt_init+0x12c>)
    156a:	f028 ffab 	bl	2a4c4 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    156e:	980a      	ldr	r0, [sp, #40]	; 0x28
    1570:	f01f fb5a 	bl	20c28 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    1574:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    1578:	0659      	lsls	r1, r3, #25
    157a:	d41d      	bmi.n	15b8 <bt_init+0x138>
		BT_ERR("Non-LE capable controller detected!");
    157c:	480c      	ldr	r0, [pc, #48]	; (15b0 <bt_init+0x130>)
    157e:	6803      	ldr	r3, [r0, #0]
    1580:	075a      	lsls	r2, r3, #29
    1582:	d104      	bne.n	158e <bt_init+0x10e>
		return -ENODEV;
    1584:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    1588:	4620      	mov	r0, r4
    158a:	b010      	add	sp, #64	; 0x40
    158c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Non-LE capable controller detected!");
    158e:	4b09      	ldr	r3, [pc, #36]	; (15b4 <bt_init+0x134>)
    1590:	930e      	str	r3, [sp, #56]	; 0x38
    1592:	aa0d      	add	r2, sp, #52	; 0x34
    1594:	2302      	movs	r3, #2
    1596:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    159a:	9309      	str	r3, [sp, #36]	; 0x24
    159c:	930d      	str	r3, [sp, #52]	; 0x34
    159e:	f029 f838 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    15a2:	e7ef      	b.n	1584 <bt_init+0x104>
    15a4:	20000000 	.word	0x20000000
    15a8:	20000070 	.word	0x20000070
    15ac:	20000078 	.word	0x20000078
    15b0:	20000a48 	.word	0x20000a48
    15b4:	0003327e 	.word	0x0003327e
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    15b8:	4621      	mov	r1, r4
    15ba:	aa0a      	add	r2, sp, #40	; 0x28
    15bc:	f242 0003 	movw	r0, #8195	; 0x2003
    15c0:	f00b fda4 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    15c4:	4604      	mov	r4, r0
    15c6:	2800      	cmp	r0, #0
    15c8:	d1de      	bne.n	1588 <bt_init+0x108>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    15ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    15cc:	48bc      	ldr	r0, [pc, #752]	; (18c0 <bt_init+0x440>)
    15ce:	6899      	ldr	r1, [r3, #8]
    15d0:	2208      	movs	r2, #8
    15d2:	3101      	adds	r1, #1
    15d4:	f028 fec2 	bl	2a35c <memcpy>
	net_buf_unref(rsp);
    15d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    15da:	f01f fb25 	bl	20c28 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    15de:	4621      	mov	r1, r4
    15e0:	aa0a      	add	r2, sp, #40	; 0x28
    15e2:	f242 0002 	movw	r0, #8194	; 0x2002
    15e6:	f00b fd91 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    15ea:	4604      	mov	r4, r0
    15ec:	2800      	cmp	r0, #0
    15ee:	d1cb      	bne.n	1588 <bt_init+0x108>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    15f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    15f2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    15f4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    15f8:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    15fc:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    15fe:	b121      	cbz	r1, 160a <bt_init+0x18a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1600:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1602:	48b0      	ldr	r0, [pc, #704]	; (18c4 <bt_init+0x444>)
    1604:	4611      	mov	r1, r2
    1606:	f02c f888 	bl	2d71a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    160a:	980a      	ldr	r0, [sp, #40]	; 0x28
    160c:	f01f fb0c 	bl	20c28 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1610:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    1614:	f016 0620 	ands.w	r6, r6, #32
    1618:	f000 811a 	beq.w	1850 <bt_init+0x3d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    161c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    1620:	071b      	lsls	r3, r3, #28
    1622:	d512      	bpl.n	164a <bt_init+0x1ca>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1624:	aa0a      	add	r2, sp, #40	; 0x28
    1626:	2100      	movs	r1, #0
    1628:	f242 001c 	movw	r0, #8220	; 0x201c
    162c:	f00b fd6e 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    1630:	4604      	mov	r4, r0
    1632:	2800      	cmp	r0, #0
    1634:	d1a8      	bne.n	1588 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
    1636:	980a      	ldr	r0, [sp, #40]	; 0x28
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1638:	6883      	ldr	r3, [r0, #8]
    163a:	f8d3 2001 	ldr.w	r2, [r3, #1]
    163e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    1642:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    1646:	f01f faef 	bl	20c28 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    164a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    164e:	069e      	lsls	r6, r3, #26
    1650:	d523      	bpl.n	169a <bt_init+0x21a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    1652:	a909      	add	r1, sp, #36	; 0x24
    1654:	a808      	add	r0, sp, #32
    1656:	f00b fddd 	bl	d214 <hci_le_read_max_data_len>
		if (err) {
    165a:	4604      	mov	r4, r0
    165c:	2800      	cmp	r0, #0
    165e:	d193      	bne.n	1588 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1660:	2104      	movs	r1, #4
    1662:	f242 0024 	movw	r0, #8228	; 0x2024
    1666:	f00b fbe1 	bl	ce2c <bt_hci_cmd_create>
		if (!buf) {
    166a:	4606      	mov	r6, r0
    166c:	2800      	cmp	r0, #0
    166e:	f000 80f6 	beq.w	185e <bt_init+0x3de>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    1672:	2104      	movs	r1, #4
    1674:	3008      	adds	r0, #8
    1676:	f02b f9da 	bl	2ca2e <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    167a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    167e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    1680:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    1684:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1686:	4622      	mov	r2, r4
    1688:	4631      	mov	r1, r6
    168a:	f242 0024 	movw	r0, #8228	; 0x2024
    168e:	f00b fd3d 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    1692:	4604      	mov	r4, r0
    1694:	2800      	cmp	r0, #0
    1696:	f47f af77 	bne.w	1588 <bt_init+0x108>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    169a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    169e:	065c      	lsls	r4, r3, #25
    16a0:	d52c      	bpl.n	16fc <bt_init+0x27c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
    16a2:	2102      	movs	r1, #2
    16a4:	f242 002e 	movw	r0, #8238	; 0x202e
    16a8:	f00b fbc0 	bl	ce2c <bt_hci_cmd_create>
		if (!buf) {
    16ac:	4604      	mov	r4, r0
    16ae:	2800      	cmp	r0, #0
    16b0:	f000 80d5 	beq.w	185e <bt_init+0x3de>
    16b4:	2102      	movs	r1, #2
    16b6:	3008      	adds	r0, #8
    16b8:	f02b f9b9 	bl	2ca2e <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
    16bc:	f06f 037b 	mvn.w	r3, #123	; 0x7b
    16c0:	7003      	strb	r3, [r0, #0]
    16c2:	2303      	movs	r3, #3
    16c4:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
    16c6:	4621      	mov	r1, r4
    16c8:	2200      	movs	r2, #0
    16ca:	f242 002e 	movw	r0, #8238	; 0x202e
    16ce:	f00b fd1d 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    16d2:	4604      	mov	r4, r0
    16d4:	2800      	cmp	r0, #0
    16d6:	f47f af57 	bne.w	1588 <bt_init+0x108>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    16da:	4601      	mov	r1, r0
    16dc:	aa0a      	add	r2, sp, #40	; 0x28
    16de:	f242 002a 	movw	r0, #8234	; 0x202a
    16e2:	f00b fd13 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    16e6:	4604      	mov	r4, r0
    16e8:	2800      	cmp	r0, #0
    16ea:	f47f af4d 	bne.w	1588 <bt_init+0x108>
		le_read_resolving_list_size_complete(rsp);
    16ee:	980a      	ldr	r0, [sp, #40]	; 0x28
	bt_dev.le.rl_size = rp->rl_size;
    16f0:	6883      	ldr	r3, [r0, #8]
    16f2:	785b      	ldrb	r3, [r3, #1]
    16f4:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    16f8:	f01f fa96 	bl	20c28 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    16fc:	2108      	movs	r1, #8
    16fe:	f242 0001 	movw	r0, #8193	; 0x2001
    1702:	f00b fb93 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    1706:	4604      	mov	r4, r0
    1708:	2800      	cmp	r0, #0
    170a:	f000 80a8 	beq.w	185e <bt_init+0x3de>
    170e:	2108      	movs	r1, #8
    1710:	4408      	add	r0, r1
    1712:	f02b f98c 	bl	2ca2e <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    1716:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    171a:	f011 0f40 	tst.w	r1, #64	; 0x40
    171e:	4602      	mov	r2, r0
    1720:	f240 2302 	movw	r3, #514	; 0x202
    1724:	bf08      	it	eq
    1726:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    1728:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    172a:	bf4c      	ite	mi
    172c:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    1730:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1734:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    1738:	068e      	lsls	r6, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    173a:	bf48      	it	mi
    173c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1740:	f013 0f09 	tst.w	r3, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    1744:	bf18      	it	ne
    1746:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    174a:	07cb      	lsls	r3, r1, #31
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    174c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
    1750:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    1754:	bf48      	it	mi
    1756:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    175a:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    175c:	bf08      	it	eq
    175e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    1762:	2100      	movs	r1, #0
    1764:	f028 ff66 	bl	2a634 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    1768:	4621      	mov	r1, r4
    176a:	2200      	movs	r2, #0
    176c:	f242 0001 	movw	r0, #8193	; 0x2001
    1770:	f00b fccc 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    1774:	4604      	mov	r4, r0
    1776:	2800      	cmp	r0, #0
    1778:	f47f af06 	bne.w	1588 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    177c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    1780:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1784:	069e      	lsls	r6, r3, #26
    1786:	d47f      	bmi.n	1888 <bt_init+0x408>
	if (bt_dev.le.acl_mtu) {
    1788:	b9d9      	cbnz	r1, 17c2 <bt_init+0x342>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    178a:	aa0a      	add	r2, sp, #40	; 0x28
    178c:	f241 0005 	movw	r0, #4101	; 0x1005
    1790:	f00b fcbc 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    1794:	4604      	mov	r4, r0
    1796:	2800      	cmp	r0, #0
    1798:	f47f aef6 	bne.w	1588 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
    179c:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    17a0:	b963      	cbnz	r3, 17bc <bt_init+0x33c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    17a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17a4:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    17a6:	785a      	ldrb	r2, [r3, #1]
    17a8:	7899      	ldrb	r1, [r3, #2]
    17aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    17ae:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    17b2:	889a      	ldrh	r2, [r3, #4]
    17b4:	4843      	ldr	r0, [pc, #268]	; (18c4 <bt_init+0x444>)
    17b6:	4611      	mov	r1, r2
    17b8:	f02b ffaf 	bl	2d71a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    17bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    17be:	f01f fa33 	bl	20c28 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    17c2:	2108      	movs	r1, #8
    17c4:	f640 4001 	movw	r0, #3073	; 0xc01
    17c8:	f00b fb30 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    17cc:	4604      	mov	r4, r0
    17ce:	2800      	cmp	r0, #0
    17d0:	d045      	beq.n	185e <bt_init+0x3de>
    17d2:	2108      	movs	r1, #8
    17d4:	4408      	add	r0, r1
    17d6:	f02b f92a 	bl	2ca2e <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    17da:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    17de:	07d9      	lsls	r1, r3, #31
    17e0:	4602      	mov	r2, r0
    17e2:	d564      	bpl.n	18ae <bt_init+0x42e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    17e4:	a134      	add	r1, pc, #208	; (adr r1, 18b8 <bt_init+0x438>)
    17e6:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    17ea:	f028 ff23 	bl	2a634 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    17ee:	4621      	mov	r1, r4
    17f0:	2200      	movs	r2, #0
    17f2:	f640 4001 	movw	r0, #3073	; 0xc01
    17f6:	f00b fc89 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    17fa:	4604      	mov	r4, r0
    17fc:	2800      	cmp	r0, #0
    17fe:	f47f aec3 	bne.w	1588 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1802:	4601      	mov	r1, r0
    1804:	aa08      	add	r2, sp, #32
    1806:	f64f 4001 	movw	r0, #64513	; 0xfc01
    180a:	f00b fc7f 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    180e:	4c2e      	ldr	r4, [pc, #184]	; (18c8 <bt_init+0x448>)
		BT_WARN("Vendor HCI extensions not available");
    1810:	6823      	ldr	r3, [r4, #0]
	if (err) {
    1812:	2800      	cmp	r0, #0
    1814:	d060      	beq.n	18d8 <bt_init+0x458>
		BT_WARN("Vendor HCI extensions not available");
    1816:	f013 0f06 	tst.w	r3, #6
    181a:	d00a      	beq.n	1832 <bt_init+0x3b2>
    181c:	4b2b      	ldr	r3, [pc, #172]	; (18cc <bt_init+0x44c>)
    181e:	930e      	str	r3, [sp, #56]	; 0x38
    1820:	2302      	movs	r3, #2
    1822:	9309      	str	r3, [sp, #36]	; 0x24
    1824:	930d      	str	r3, [sp, #52]	; 0x34
    1826:	aa0d      	add	r2, sp, #52	; 0x34
    1828:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    182c:	4620      	mov	r0, r4
			BT_WARN("Failed to read supported vendor features");
    182e:	f028 fef0 	bl	2a612 <z_log_msg2_static_create.constprop.0>
	err = bt_id_init();
    1832:	f00d f827 	bl	e884 <bt_id_init>
	if (err) {
    1836:	4604      	mov	r4, r0
    1838:	2800      	cmp	r0, #0
    183a:	f47f aea5 	bne.w	1588 <bt_init+0x108>
		err = bt_conn_init();
    183e:	f00e fb95 	bl	ff6c <bt_conn_init>
		if (err) {
    1842:	4604      	mov	r4, r0
    1844:	2800      	cmp	r0, #0
    1846:	f47f ae9f 	bne.w	1588 <bt_init+0x108>
	bt_finalize_init();
    184a:	f00c f9d9 	bl	dc00 <bt_finalize_init>
	return 0;
    184e:	e69b      	b.n	1588 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    1850:	2102      	movs	r1, #2
    1852:	f640 406d 	movw	r0, #3181	; 0xc6d
    1856:	f00b fae9 	bl	ce2c <bt_hci_cmd_create>
		if (!buf) {
    185a:	4604      	mov	r4, r0
    185c:	b910      	cbnz	r0, 1864 <bt_init+0x3e4>
		return -ENOBUFS;
    185e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    1862:	e691      	b.n	1588 <bt_init+0x108>
    1864:	2102      	movs	r1, #2
    1866:	3008      	adds	r0, #8
    1868:	f02b f8e1 	bl	2ca2e <net_buf_simple_add>
		cp_le->le = 0x01;
    186c:	2301      	movs	r3, #1
    186e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    1870:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1872:	4621      	mov	r1, r4
    1874:	4632      	mov	r2, r6
    1876:	f640 406d 	movw	r0, #3181	; 0xc6d
    187a:	f00b fc47 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    187e:	4604      	mov	r4, r0
    1880:	2800      	cmp	r0, #0
    1882:	f43f aecb 	beq.w	161c <bt_init+0x19c>
    1886:	e67f      	b.n	1588 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
    1888:	2900      	cmp	r1, #0
    188a:	d19a      	bne.n	17c2 <bt_init+0x342>
		BT_ERR("ACL BR/EDR buffers not initialized");
    188c:	480e      	ldr	r0, [pc, #56]	; (18c8 <bt_init+0x448>)
    188e:	6803      	ldr	r3, [r0, #0]
    1890:	075c      	lsls	r4, r3, #29
    1892:	d009      	beq.n	18a8 <bt_init+0x428>
    1894:	4b0e      	ldr	r3, [pc, #56]	; (18d0 <bt_init+0x450>)
    1896:	930e      	str	r3, [sp, #56]	; 0x38
    1898:	aa0d      	add	r2, sp, #52	; 0x34
    189a:	2302      	movs	r3, #2
    189c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    18a0:	9309      	str	r3, [sp, #36]	; 0x24
    18a2:	930d      	str	r3, [sp, #52]	; 0x34
    18a4:	f028 feb5 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		return -EIO;
    18a8:	f06f 0404 	mvn.w	r4, #4
    18ac:	e66c      	b.n	1588 <bt_init+0x108>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    18ae:	4809      	ldr	r0, [pc, #36]	; (18d4 <bt_init+0x454>)
    18b0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    18b4:	e799      	b.n	17ea <bt_init+0x36a>
    18b6:	bf00      	nop
    18b8:	02008890 	.word	0x02008890
    18bc:	20008000 	.word	0x20008000
    18c0:	200000d0 	.word	0x200000d0
    18c4:	20000100 	.word	0x20000100
    18c8:	20000a48 	.word	0x20000a48
    18cc:	000332c5 	.word	0x000332c5
    18d0:	000332a2 	.word	0x000332a2
    18d4:	02008810 	.word	0x02008810
	BT_INFO("HW Platform: %s (0x%04x)",
    18d8:	f003 0307 	and.w	r3, r3, #7
    18dc:	2b02      	cmp	r3, #2
    18de:	d94e      	bls.n	197e <bt_init+0x4fe>
	rp.info = (void *)rsp->data;
    18e0:	9b08      	ldr	r3, [sp, #32]
	BT_INFO("HW Platform: %s (0x%04x)",
    18e2:	4949      	ldr	r1, [pc, #292]	; (1a08 <bt_init+0x588>)
	rp.info = (void *)rsp->data;
    18e4:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    18e6:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    18ea:	2b03      	cmp	r3, #3
		return plat_str[platform];
    18ec:	bf96      	itet	ls
    18ee:	4a47      	ldrls	r2, [pc, #284]	; (1a0c <bt_init+0x58c>)
	return "unknown";
    18f0:	4a47      	ldrhi	r2, [pc, #284]	; (1a10 <bt_init+0x590>)
		return plat_str[platform];
    18f2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    18f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    18fa:	4b46      	ldr	r3, [pc, #280]	; (1a14 <bt_init+0x594>)
    18fc:	9301      	str	r3, [sp, #4]
    18fe:	2300      	movs	r3, #0
    1900:	9300      	str	r3, [sp, #0]
    1902:	4618      	mov	r0, r3
    1904:	2203      	movs	r2, #3
    1906:	f028 fe87 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
	BT_INFO("HW Variant: %s (0x%04x)",
    190a:	6823      	ldr	r3, [r4, #0]
    190c:	f003 0307 	and.w	r3, r3, #7
    1910:	2b02      	cmp	r3, #2
    1912:	d934      	bls.n	197e <bt_init+0x4fe>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1914:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    1918:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    191c:	2b02      	cmp	r3, #2
    191e:	d148      	bne.n	19b2 <bt_init+0x532>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1920:	2a03      	cmp	r2, #3
    1922:	d846      	bhi.n	19b2 <bt_init+0x532>
		return nordic_str[variant];
    1924:	4b3c      	ldr	r3, [pc, #240]	; (1a18 <bt_init+0x598>)
    1926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    192a:	4937      	ldr	r1, [pc, #220]	; (1a08 <bt_init+0x588>)
    192c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1930:	4b3a      	ldr	r3, [pc, #232]	; (1a1c <bt_init+0x59c>)
    1932:	9301      	str	r3, [sp, #4]
    1934:	2300      	movs	r3, #0
    1936:	9300      	str	r3, [sp, #0]
    1938:	4618      	mov	r0, r3
    193a:	2203      	movs	r2, #3
    193c:	f028 fe6c 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1940:	6823      	ldr	r3, [r4, #0]
    1942:	f003 0307 	and.w	r3, r3, #7
    1946:	2b02      	cmp	r3, #2
    1948:	d919      	bls.n	197e <bt_init+0x4fe>
    194a:	f8d6 1009 	ldr.w	r1, [r6, #9]
    194e:	7973      	ldrb	r3, [r6, #5]
    1950:	9106      	str	r1, [sp, #24]
    1952:	f8b6 1007 	ldrh.w	r1, [r6, #7]
    1956:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    1958:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    195a:	79b1      	ldrb	r1, [r6, #6]
		return var_str[variant];
    195c:	bf96      	itet	ls
    195e:	4a30      	ldrls	r2, [pc, #192]	; (1a20 <bt_init+0x5a0>)
	return "unknown";
    1960:	4a2b      	ldrhi	r2, [pc, #172]	; (1a10 <bt_init+0x590>)
		return var_str[variant];
    1962:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1966:	9202      	str	r2, [sp, #8]
    1968:	e9cd 3103 	strd	r3, r1, [sp, #12]
    196c:	4b2d      	ldr	r3, [pc, #180]	; (1a24 <bt_init+0x5a4>)
    196e:	9301      	str	r3, [sp, #4]
    1970:	2300      	movs	r3, #0
    1972:	4925      	ldr	r1, [pc, #148]	; (1a08 <bt_init+0x588>)
    1974:	9300      	str	r3, [sp, #0]
    1976:	2203      	movs	r2, #3
    1978:	4618      	mov	r0, r3
    197a:	f028 fe4d 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
	net_buf_unref(rsp);
    197e:	9808      	ldr	r0, [sp, #32]
    1980:	f01f f952 	bl	20c28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    1984:	aa08      	add	r2, sp, #32
    1986:	2100      	movs	r1, #0
    1988:	f64f 4002 	movw	r0, #64514	; 0xfc02
    198c:	f00b fbbe 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    1990:	4606      	mov	r6, r0
    1992:	b180      	cbz	r0, 19b6 <bt_init+0x536>
		BT_WARN("Failed to read supported vendor commands");
    1994:	6823      	ldr	r3, [r4, #0]
    1996:	f013 0f06 	tst.w	r3, #6
    199a:	f43f af4a 	beq.w	1832 <bt_init+0x3b2>
    199e:	4b22      	ldr	r3, [pc, #136]	; (1a28 <bt_init+0x5a8>)
			BT_WARN("Failed to read supported vendor features");
    19a0:	930e      	str	r3, [sp, #56]	; 0x38
    19a2:	2302      	movs	r3, #2
    19a4:	4818      	ldr	r0, [pc, #96]	; (1a08 <bt_init+0x588>)
    19a6:	9309      	str	r3, [sp, #36]	; 0x24
    19a8:	930d      	str	r3, [sp, #52]	; 0x34
    19aa:	aa0d      	add	r2, sp, #52	; 0x34
    19ac:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    19b0:	e73d      	b.n	182e <bt_init+0x3ae>
		return "unknown";
    19b2:	4b17      	ldr	r3, [pc, #92]	; (1a10 <bt_init+0x590>)
    19b4:	e7b9      	b.n	192a <bt_init+0x4aa>
	rp.cmds = (void *)rsp->data;
    19b6:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    19b8:	481c      	ldr	r0, [pc, #112]	; (1a2c <bt_init+0x5ac>)
    19ba:	6899      	ldr	r1, [r3, #8]
    19bc:	2202      	movs	r2, #2
    19be:	3101      	adds	r1, #1
    19c0:	f028 fccc 	bl	2a35c <memcpy>
	net_buf_unref(rsp);
    19c4:	9808      	ldr	r0, [sp, #32]
    19c6:	f01f f92f 	bl	20c28 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    19ca:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    19ce:	075b      	lsls	r3, r3, #29
    19d0:	f57f af2f 	bpl.w	1832 <bt_init+0x3b2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    19d4:	aa08      	add	r2, sp, #32
    19d6:	4631      	mov	r1, r6
    19d8:	f64f 4003 	movw	r0, #64515	; 0xfc03
    19dc:	f00b fb96 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    19e0:	b130      	cbz	r0, 19f0 <bt_init+0x570>
			BT_WARN("Failed to read supported vendor features");
    19e2:	6823      	ldr	r3, [r4, #0]
    19e4:	f013 0f06 	tst.w	r3, #6
    19e8:	f43f af23 	beq.w	1832 <bt_init+0x3b2>
    19ec:	4b10      	ldr	r3, [pc, #64]	; (1a30 <bt_init+0x5b0>)
    19ee:	e7d7      	b.n	19a0 <bt_init+0x520>
		rp.feat = (void *)rsp->data;
    19f0:	9b08      	ldr	r3, [sp, #32]
		memcpy(bt_dev.vs_features, rp.feat->features,
    19f2:	4810      	ldr	r0, [pc, #64]	; (1a34 <bt_init+0x5b4>)
    19f4:	6899      	ldr	r1, [r3, #8]
    19f6:	2201      	movs	r2, #1
    19f8:	4411      	add	r1, r2
    19fa:	f028 fcaf 	bl	2a35c <memcpy>
		net_buf_unref(rsp);
    19fe:	9808      	ldr	r0, [sp, #32]
    1a00:	f01f f912 	bl	20c28 <net_buf_unref>
    1a04:	e715      	b.n	1832 <bt_init+0x3b2>
    1a06:	bf00      	nop
    1a08:	20000a48 	.word	0x20000a48
    1a0c:	0002f348 	.word	0x0002f348
    1a10:	00032d85 	.word	0x00032d85
    1a14:	000332e9 	.word	0x000332e9
    1a18:	0002f308 	.word	0x0002f308
    1a1c:	00033302 	.word	0x00033302
    1a20:	0002f380 	.word	0x0002f380
    1a24:	0003331a 	.word	0x0003331a
    1a28:	00033347 	.word	0x00033347
    1a2c:	200000b9 	.word	0x200000b9
    1a30:	00033370 	.word	0x00033370
    1a34:	200000b8 	.word	0x200000b8

00001a38 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1a38:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    1a3a:	4c19      	ldr	r4, [pc, #100]	; (1aa0 <ll_scan_params_set+0x68>)
{
    1a3c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    1a40:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    1a44:	f01c 0501 	ands.w	r5, ip, #1
    1a48:	d122      	bne.n	1a90 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    1a4a:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    1a4e:	0140      	lsls	r0, r0, #5
    1a50:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    1a54:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    1a56:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    1a5a:	f00e 0e18 	and.w	lr, lr, #24
    1a5e:	f000 0020 	and.w	r0, r0, #32
    1a62:	ea40 000e 	orr.w	r0, r0, lr
    1a66:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    1a6a:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a6c:	480d      	ldr	r0, [pc, #52]	; (1aa4 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    1a6e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a72:	fba2 0100 	umull	r0, r1, r2, r0
    1a76:	2391      	movs	r3, #145	; 0x91
    1a78:	fb03 1102 	mla	r1, r3, r2, r1
    1a7c:	a306      	add	r3, pc, #24	; (adr r3, 1a98 <ll_scan_params_set+0x60>)
    1a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    1a82:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1a86:	f7ff fb8b 	bl	11a0 <__aeabi_uldivmod>
    1a8a:	6420      	str	r0, [r4, #64]	; 0x40
}
    1a8c:	4628      	mov	r0, r5
    1a8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1a90:	250c      	movs	r5, #12
}
    1a92:	4628      	mov	r0, r5
    1a94:	bd38      	pop	{r3, r4, r5, pc}
    1a96:	bf00      	nop
    1a98:	1afd498d 	.word	0x1afd498d
    1a9c:	00000007 	.word	0x00000007
    1aa0:	200036f0 	.word	0x200036f0
    1aa4:	84e72a00 	.word	0x84e72a00

00001aa8 <ull_scan_params_set>:
{
    1aa8:	b510      	push	{r4, lr}
    1aaa:	f89d c008 	ldrb.w	ip, [sp, #8]
    1aae:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    1ab0:	0149      	lsls	r1, r1, #5
    1ab2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    1ab6:	f000 0018 	and.w	r0, r0, #24
    1aba:	f001 0c20 	and.w	ip, r1, #32
    1abe:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    1ac0:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    1ac2:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1ac6:	480c      	ldr	r0, [pc, #48]	; (1af8 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    1ac8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    1acc:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1ad0:	2291      	movs	r2, #145	; 0x91
    1ad2:	fba3 0100 	umull	r0, r1, r3, r0
    1ad6:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    1ada:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1ade:	a304      	add	r3, pc, #16	; (adr r3, 1af0 <ull_scan_params_set+0x48>)
    1ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ae4:	f7ff fb5c 	bl	11a0 <__aeabi_uldivmod>
    1ae8:	6260      	str	r0, [r4, #36]	; 0x24
}
    1aea:	bd10      	pop	{r4, pc}
    1aec:	f3af 8000 	nop.w
    1af0:	1afd498d 	.word	0x1afd498d
    1af4:	00000007 	.word	0x00000007
    1af8:	84e72a00 	.word	0x84e72a00
    1afc:	00000000 	.word	0x00000000

00001b00 <ull_scan_enable>:
{
    1b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b04:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1b06:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1b0a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    1b0e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    1b12:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1b16:	f360 1386 	bfi	r3, r0, #6, #1
{
    1b1a:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1b1c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1b20:	f014 fd30 	bl	16584 <ll_addr_read>
	lll->chan = 0U;
    1b24:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b28:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    1b2a:	4849      	ldr	r0, [pc, #292]	; (1c50 <ull_scan_enable+0x150>)

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1b2c:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    1b2e:	f002 0279 	and.w	r2, r2, #121	; 0x79
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
    1b32:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b34:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    1b38:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b3c:	2291      	movs	r2, #145	; 0x91
    1b3e:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1b42:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1b46:	a340      	add	r3, pc, #256	; (adr r3, 1c48 <ull_scan_enable+0x148>)
    1b48:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    1b4c:	7025      	strb	r5, [r4, #0]
    1b4e:	f7ff fb27 	bl	11a0 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    1b52:	2331      	movs	r3, #49	; 0x31
    1b54:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    1b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    1b5a:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    1b5c:	3309      	adds	r3, #9
	    (ticks_interval -
    1b5e:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    1b62:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    1b64:	bf32      	itee	cc
    1b66:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    1b68:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    1b6a:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1b6c:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    1b6e:	f014 fcd5 	bl	1651c <ticker_ticks_now_get>
	if (!lll->conn) {
    1b72:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    1b74:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1b76:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d04b      	beq.n	1c16 <ull_scan_enable+0x116>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1b7e:	4d35      	ldr	r5, [pc, #212]	; (1c54 <ull_scan_enable+0x154>)
    1b80:	4b35      	ldr	r3, [pc, #212]	; (1c58 <ull_scan_enable+0x158>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b82:	f8cd 8020 	str.w	r8, [sp, #32]
    1b86:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1b88:	1b65      	subs	r5, r4, r5
    1b8a:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1b8e:	4830      	ldr	r0, [pc, #192]	; (1c50 <ull_scan_enable+0x150>)
    1b90:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b92:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1b96:	fba3 0100 	umull	r0, r1, r3, r0
    1b9a:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b9c:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1ba0:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ba4:	6923      	ldr	r3, [r4, #16]
    1ba6:	9304      	str	r3, [sp, #16]
    1ba8:	4b2c      	ldr	r3, [pc, #176]	; (1c5c <ull_scan_enable+0x15c>)
    1baa:	9307      	str	r3, [sp, #28]
    1bac:	4b2c      	ldr	r3, [pc, #176]	; (1c60 <ull_scan_enable+0x160>)
    1bae:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    1bb0:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1bb4:	a324      	add	r3, pc, #144	; (adr r3, 1c48 <ull_scan_enable+0x148>)
    1bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    1bba:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1bbe:	f7ff faef 	bl	11a0 <__aeabi_uldivmod>
    1bc2:	4610      	mov	r0, r2
    1bc4:	4619      	mov	r1, r3
    1bc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1bca:	2300      	movs	r3, #0
    1bcc:	f7ff fae8 	bl	11a0 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1bd0:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1bd2:	444d      	add	r5, r9
    1bd4:	b2ed      	uxtb	r5, r5
    1bd6:	462a      	mov	r2, r5
    1bd8:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1bdc:	463b      	mov	r3, r7
    1bde:	2103      	movs	r1, #3
    1be0:	f8cd a000 	str.w	sl, [sp]
    1be4:	4650      	mov	r0, sl
    1be6:	f014 fb6f 	bl	162c8 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1bea:	4641      	mov	r1, r8
    1bec:	f017 f82a 	bl	18c44 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1bf0:	4605      	mov	r5, r0
    1bf2:	b960      	cbnz	r0, 1c0e <ull_scan_enable+0x10e>
	scan->is_enabled = 1U;
    1bf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1bf8:	f043 0301 	orr.w	r3, r3, #1
		ull_filter_adv_scan_state_cb(BIT(1));
    1bfc:	4648      	mov	r0, r9
	scan->is_enabled = 1U;
    1bfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(BIT(1));
    1c02:	f01b fdbb 	bl	1d77c <ull_filter_adv_scan_state_cb>
	return 0;
    1c06:	4628      	mov	r0, r5
}
    1c08:	b00c      	add	sp, #48	; 0x30
    1c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1c0e:	200c      	movs	r0, #12
}
    1c10:	b00c      	add	sp, #48	; 0x30
    1c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    1c16:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1c1a:	6921      	ldr	r1, [r4, #16]
    1c1c:	4643      	mov	r3, r8
    1c1e:	aa0a      	add	r2, sp, #40	; 0x28
    1c20:	2003      	movs	r0, #3
    1c22:	f002 f90d 	bl	3e40 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1c26:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c28:	2900      	cmp	r1, #0
    1c2a:	d0a8      	beq.n	1b7e <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1c2c:	480d      	ldr	r0, [pc, #52]	; (1c64 <ull_scan_enable+0x164>)
    1c2e:	a306      	add	r3, pc, #24	; (adr r3, 1c48 <ull_scan_enable+0x148>)
    1c30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c34:	fba1 0100 	umull	r0, r1, r1, r0
    1c38:	f7ff fab2 	bl	11a0 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1c3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1c42:	4407      	add	r7, r0
    1c44:	e79b      	b.n	1b7e <ull_scan_enable+0x7e>
    1c46:	bf00      	nop
    1c48:	1afd498d 	.word	0x1afd498d
    1c4c:	00000007 	.word	0x00000007
    1c50:	84e72a00 	.word	0x84e72a00
    1c54:	200036f0 	.word	0x200036f0
    1c58:	38e38e39 	.word	0x38e38e39
    1c5c:	00018261 	.word	0x00018261
    1c60:	0001943d 	.word	0x0001943d
    1c64:	3b9aca00 	.word	0x3b9aca00

00001c68 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1c6c:	f890 e0bc 	ldrb.w	lr, [r0, #188]	; 0xbc
    1c70:	f890 c0bb 	ldrb.w	ip, [r0, #187]	; 0xbb
    1c74:	45e6      	cmp	lr, ip
{
    1c76:	b08b      	sub	sp, #44	; 0x2c
    1c78:	4604      	mov	r4, r0
    1c7a:	460e      	mov	r6, r1
    1c7c:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    1c7e:	d02e      	beq.n	1cde <ull_conn_llcp+0x76>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1c80:	ebac 0c0e 	sub.w	ip, ip, lr
    1c84:	f00c 0c03 	and.w	ip, ip, #3
    1c88:	f1bc 0f02 	cmp.w	ip, #2
    1c8c:	d00c      	beq.n	1ca8 <ull_conn_llcp+0x40>
		}
	}
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */

	/* Terminate Procedure Request */
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    1c8e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1c92:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1c96:	1a9b      	subs	r3, r3, r2
    1c98:	b2db      	uxtb	r3, r3
    1c9a:	2b01      	cmp	r3, #1
    1c9c:	f000 817b 	beq.w	1f96 <ull_conn_llcp+0x32e>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1ca0:	2000      	movs	r0, #0
	}

	/* Continue prepare */
	return 0;
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */
}
    1ca2:	b00b      	add	sp, #44	; 0x2c
    1ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1ca8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    1cac:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1cb0:	429a      	cmp	r2, r3
    1cb2:	d006      	beq.n	1cc2 <ull_conn_llcp+0x5a>
			     LLCP_LENGTH_STATE_RESIZE) ||
    1cb4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			if ((conn->llcp_length.state ==
    1cb8:	f003 0306 	and.w	r3, r3, #6
    1cbc:	2b04      	cmp	r3, #4
    1cbe:	f000 83a9 	beq.w	2414 <ull_conn_llcp+0x7ac>
		switch (conn->llcp_type) {
    1cc2:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
    1cc6:	1e7b      	subs	r3, r7, #1
    1cc8:	2b05      	cmp	r3, #5
    1cca:	f200 8352 	bhi.w	2372 <ull_conn_llcp+0x70a>
    1cce:	e8df f013 	tbh	[pc, r3, lsl #1]
    1cd2:	001f      	.short	0x001f
    1cd4:	029c0326 	.word	0x029c0326
    1cd8:	02610350 	.word	0x02610350
    1cdc:	01cb      	.short	0x01cb
	    !conn->llcp_enc.pause_rx) {
    1cde:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
	if ((conn->llcp_ack == conn->llcp_req) &&
    1ce2:	f013 0801 	ands.w	r8, r3, #1
    1ce6:	d1d2      	bne.n	1c8e <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1ce8:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
    1cec:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    1cf0:	428a      	cmp	r2, r1
    1cf2:	f000 834c 	beq.w	238e <ull_conn_llcp+0x726>
			conn->llcp_type = LLCP_CONN_UPD;
    1cf6:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1cf8:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
			conn->llcp_type = LLCP_CONN_UPD;
    1cfc:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d00:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
			conn->llcp_ack -= 2U;
    1d04:	f1ae 0c02 	sub.w	ip, lr, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d08:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
    1d0a:	f880 c0bc 	strb.w	ip, [r0, #188]	; 0xbc
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d0e:	d1d1      	bne.n	1cb4 <ull_conn_llcp+0x4c>
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d10:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1d12:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    1d14:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d16:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d1a:	b2bf      	uxth	r7, r7
    1d1c:	19ea      	adds	r2, r5, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d1e:	f013 0107 	ands.w	r1, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d22:	b292      	uxth	r2, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d24:	f040 83bc 	bne.w	24a0 <ull_conn_llcp+0x838>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1d28:	f8b4 50c0 	ldrh.w	r5, [r4, #192]	; 0xc0
    1d2c:	1b52      	subs	r2, r2, r5
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1d2e:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1d30:	fa1f f982 	uxth.w	r9, r2
	} else if (instant_latency <= 0x7FFF) {
    1d34:	d4ab      	bmi.n	1c8e <ull_conn_llcp+0x26>

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d36:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    1d3a:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			conn->llcp_ack = conn->llcp_req;
    1d3e:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    1d42:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d46:	4293      	cmp	r3, r2
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1d48:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    1d4c:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d50:	d009      	beq.n	1d66 <ull_conn_llcp+0xfe>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1d52:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1d56:	f003 030f 	and.w	r3, r3, #15
    1d5a:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1d5c:	bf04      	itt	eq
    1d5e:	f884 215d 	strbeq.w	r2, [r4, #349]	; 0x15d

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1d62:	f8a4 10ac 	strheq.w	r1, [r4, #172]	; 0xac
	if (conn == conn_upd_curr) {
    1d66:	4bb4      	ldr	r3, [pc, #720]	; (2038 <ull_conn_llcp+0x3d0>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1d68:	f8d4 80e0 	ldr.w	r8, [r4, #224]	; 0xe0
	if (conn == conn_upd_curr) {
    1d6c:	681a      	ldr	r2, [r3, #0]
    1d6e:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1d70:	bf04      	itt	eq
    1d72:	2200      	moveq	r2, #0
    1d74:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1d76:	f1b8 0f00 	cmp.w	r8, #0
    1d7a:	f000 8722 	beq.w	2bc2 <ull_conn_llcp+0xf5a>
    1d7e:	f8d8 0000 	ldr.w	r0, [r8]
    1d82:	2800      	cmp	r0, #0
    1d84:	f000 871d 	beq.w	2bc2 <ull_conn_llcp+0xf5a>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1d88:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    1d8c:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1d90:	6842      	ldr	r2, [r0, #4]
    1d92:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((conn->llcp_cu.interval != lll->interval) ||
    1d96:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1d98:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1d9c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
		if ((conn->llcp_cu.interval != lll->interval) ||
    1da0:	f000 872a 	beq.w	2bf8 <ull_conn_llcp+0xf90>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1da4:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1da8:	f8a8 301e 	strh.w	r3, [r8, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1dac:	2318      	movs	r3, #24
    1dae:	f888 3004 	strb.w	r3, [r8, #4]
			cu->status = 0x00;
    1db2:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1db4:	f8a8 c006 	strh.w	ip, [r8, #6]
			cu->latency = conn->llcp_cu.latency;
    1db8:	f8a8 2020 	strh.w	r2, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1dbc:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			cu->status = 0x00;
    1dc0:	f888 301c 	strb.w	r3, [r8, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1dc4:	4641      	mov	r1, r8
    1dc6:	f016 fec5 	bl	18b54 <ll_rx_put>
		ll_rx_sched();
    1dca:	f016 fecd 	bl	18b68 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1dce:	68a3      	ldr	r3, [r4, #8]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	da09      	bge.n	1de8 <ull_conn_llcp+0x180>
			uint32_t ticks_prepare_to_start =
    1dd4:	68e0      	ldr	r0, [r4, #12]
    1dd6:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1ddc:	4290      	cmp	r0, r2
    1dde:	bf2c      	ite	cs
    1de0:	1831      	addcs	r1, r6, r0
    1de2:	18b1      	addcc	r1, r6, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1de4:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1de6:	1ace      	subs	r6, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1de8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1dea:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
		conn_interval_old = instant_latency * lll->interval;
    1dee:	fb13 f309 	smulbb	r3, r3, r9
    1df2:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1df4:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
    1df8:	fb18 f201 	smulbb	r2, r8, r1
    1dfc:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1dfe:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1e00:	fa1f f981 	uxth.w	r9, r1
		if (conn_interval_new > conn_interval_old) {
    1e04:	f080 86cb 	bcs.w	2b9e <ull_conn_llcp+0xf36>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1e08:	1ad3      	subs	r3, r2, r3
    1e0a:	498c      	ldr	r1, [pc, #560]	; (203c <ull_conn_llcp+0x3d4>)
    1e0c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1e10:	fb02 f303 	mul.w	r3, r2, r3
    1e14:	fba3 0101 	umull	r0, r1, r3, r1
    1e18:	a385      	add	r3, pc, #532	; (adr r3, 2030 <ull_conn_llcp+0x3c8>)
    1e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e1e:	f7ff f9bf 	bl	11a0 <__aeabi_uldivmod>
    1e22:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1e26:	441e      	add	r6, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    1e28:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1e2a:	441d      	add	r5, r3
				CONN_INT_UNIT_US) * CONN_INT_UNIT_US);
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
    1e2c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    1e30:	1bef      	subs	r7, r5, r7
    1e32:	444f      	add	r7, r9
		conn_interval_us = conn->llcp_cu.interval *
    1e34:	f240 45e2 	movw	r5, #1250	; 0x4e2
		} else if (!lll->role) {
    1e38:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1e3a:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1e3c:	fb05 f508 	mul.w	r5, r5, r8
		} else if (!lll->role) {
    1e40:	f2c0 87b9 	blt.w	2db6 <ull_conn_llcp+0x114e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1e44:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    1e48:	487c      	ldr	r0, [pc, #496]	; (203c <ull_conn_llcp+0x3d4>)
    1e4a:	a379      	add	r3, pc, #484	; (adr r3, 2030 <ull_conn_llcp+0x3c8>)
    1e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e50:	fba1 0100 	umull	r0, r1, r1, r0
    1e54:	f7ff f9a4 	bl	11a0 <__aeabi_uldivmod>
    1e58:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    1e5c:	3701      	adds	r7, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1e5e:	4978      	ldr	r1, [pc, #480]	; (2040 <ull_conn_llcp+0x3d8>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e60:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
		lll->latency = conn->llcp_cu.latency;
    1e64:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e68:	4b76      	ldr	r3, [pc, #472]	; (2044 <ull_conn_llcp+0x3dc>)
		lll->interval = conn->llcp_cu.interval;
    1e6a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1e6e:	4429      	add	r1, r5
    1e70:	fbb1 f1f5 	udiv	r1, r1, r5
    1e74:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e78:	f242 7110 	movw	r1, #10000	; 0x2710
    1e7c:	fb01 5202 	mla	r2, r1, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e80:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e82:	3a01      	subs	r2, #1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1e84:	1d81      	adds	r1, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e86:	fbb2 f2f5 	udiv	r2, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e8a:	fbb3 f3f5 	udiv	r3, r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1e8e:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e92:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1e94:	428a      	cmp	r2, r1
		lll->latency = conn->llcp_cu.latency;
    1e96:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1e98:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1e9c:	dd04      	ble.n	1ea8 <ull_conn_llcp+0x240>
    1e9e:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1ea2:	30fa      	adds	r0, #250	; 0xfa
    1ea4:	4402      	add	r2, r0
    1ea6:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1ea8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1eac:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
		if (conn->llcp_cu.cmd) {
    1eb0:	071a      	lsls	r2, r3, #28
			conn->supervision_expire = 0U;
    1eb2:	bf44      	itt	mi
    1eb4:	2300      	movmi	r3, #0
    1eb6:	f8a4 30a8 	strhmi.w	r3, [r4, #168]	; 0xa8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1eba:	2102      	movs	r1, #2
    1ebc:	2001      	movs	r0, #1
    1ebe:	f01e fbf7 	bl	206b0 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1ec2:	2200      	movs	r2, #0
    1ec4:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1ec6:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1ec8:	2001      	movs	r0, #1
    1eca:	f012 ffff 	bl	14ecc <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1ece:	495e      	ldr	r1, [pc, #376]	; (2048 <ull_conn_llcp+0x3e0>)
    1ed0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    1ed4:	4620      	mov	r0, r4
    1ed6:	f012 ff89 	bl	14dec <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1eda:	f100 0803 	add.w	r8, r0, #3
    1ede:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1ee2:	4b5a      	ldr	r3, [pc, #360]	; (204c <ull_conn_llcp+0x3e4>)
    1ee4:	9400      	str	r4, [sp, #0]
    1ee6:	4642      	mov	r2, r8
    1ee8:	2101      	movs	r1, #1
    1eea:	2000      	movs	r0, #0
    1eec:	f014 fa76 	bl	163dc <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1ef0:	f030 0302 	bics.w	r3, r0, #2
    1ef4:	d00c      	beq.n	1f10 <ull_conn_llcp+0x2a8>
    1ef6:	4a56      	ldr	r2, [pc, #344]	; (2050 <ull_conn_llcp+0x3e8>)
    1ef8:	4956      	ldr	r1, [pc, #344]	; (2054 <ull_conn_llcp+0x3ec>)
    1efa:	4857      	ldr	r0, [pc, #348]	; (2058 <ull_conn_llcp+0x3f0>)
    1efc:	f640 43cb 	movw	r3, #3275	; 0xccb
    1f00:	f024 fd2c 	bl	2695c <printk>
    1f04:	4040      	eors	r0, r0
    1f06:	f380 8811 	msr	BASEPRI, r0
    1f0a:	f04f 0003 	mov.w	r0, #3
    1f0e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f10:	9408      	str	r4, [sp, #32]
    1f12:	9406      	str	r4, [sp, #24]
    1f14:	6923      	ldr	r3, [r4, #16]
    1f16:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f18:	4c48      	ldr	r4, [pc, #288]	; (203c <ull_conn_llcp+0x3d4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f1a:	4b50      	ldr	r3, [pc, #320]	; (205c <ull_conn_llcp+0x3f4>)
    1f1c:	9307      	str	r3, [sp, #28]
    1f1e:	4b50      	ldr	r3, [pc, #320]	; (2060 <ull_conn_llcp+0x3f8>)
    1f20:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f22:	fba5 5404 	umull	r5, r4, r5, r4
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f26:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    1f2a:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1f2c:	4628      	mov	r0, r5
    1f2e:	a340      	add	r3, pc, #256	; (adr r3, 2030 <ull_conn_llcp+0x3c8>)
    1f30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f34:	4621      	mov	r1, r4
    1f36:	f7ff f933 	bl	11a0 <__aeabi_uldivmod>
    1f3a:	4610      	mov	r0, r2
    1f3c:	4619      	mov	r1, r3
    1f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1f42:	2300      	movs	r3, #0
    1f44:	f7ff f92c 	bl	11a0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f48:	a339      	add	r3, pc, #228	; (adr r3, 2030 <ull_conn_llcp+0x3c8>)
    1f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f4e:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f50:	4621      	mov	r1, r4
    1f52:	4628      	mov	r0, r5
    1f54:	f7ff f924 	bl	11a0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f58:	4633      	mov	r3, r6
    1f5a:	e9cd 7000 	strd	r7, r0, [sp]
    1f5e:	4642      	mov	r2, r8
    1f60:	2101      	movs	r1, #1
    1f62:	2000      	movs	r0, #0
    1f64:	f014 f9b0 	bl	162c8 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1f68:	f030 0302 	bics.w	r3, r0, #2
    1f6c:	d00c      	beq.n	1f88 <ull_conn_llcp+0x320>
    1f6e:	4a38      	ldr	r2, [pc, #224]	; (2050 <ull_conn_llcp+0x3e8>)
    1f70:	4938      	ldr	r1, [pc, #224]	; (2054 <ull_conn_llcp+0x3ec>)
    1f72:	4839      	ldr	r0, [pc, #228]	; (2058 <ull_conn_llcp+0x3f0>)
    1f74:	f640 43e5 	movw	r3, #3301	; 0xce5
    1f78:	f024 fcf0 	bl	2695c <printk>
    1f7c:	4040      	eors	r0, r0
    1f7e:	f380 8811 	msr	BASEPRI, r0
    1f82:	f04f 0003 	mov.w	r0, #3
    1f86:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1f88:	f1b9 0f00 	cmp.w	r9, #0
    1f8c:	f040 86f4 	bne.w	2d78 <ull_conn_llcp+0x1110>
				return -ECANCELED;
    1f90:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1f94:	e685      	b.n	1ca2 <ull_conn_llcp+0x3a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f96:	4833      	ldr	r0, [pc, #204]	; (2064 <ull_conn_llcp+0x3fc>)
    1f98:	f012 fef2 	bl	14d80 <mem_acquire>
		if (tx) {
    1f9c:	2800      	cmp	r0, #0
    1f9e:	d038      	beq.n	2012 <ull_conn_llcp+0x3aa>
			conn->llcp_terminate.ack--;
    1fa0:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    1fa4:	3b01      	subs	r3, #1
    1fa6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1faa:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1fac:	2202      	movs	r2, #2
    1fae:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fb0:	f043 0303 	orr.w	r3, r3, #3
    1fb4:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    1fb6:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    1fb8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_tx->llctrl.terminate_ind.error_code =
    1fbc:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		if (!conn->tx_ctrl) {
    1fc0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			pdu_tx->llctrl.terminate_ind.error_code =
    1fc4:	7202      	strb	r2, [r0, #8]
	if (
    1fc6:	b1b3      	cbz	r3, 1ff6 <ull_conn_llcp+0x38e>
	    !conn->llcp_enc.pause_tx &&
    1fc8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1fcc:	0795      	lsls	r5, r2, #30
    1fce:	d412      	bmi.n	1ff6 <ull_conn_llcp+0x38e>
	    !conn->llcp_phy.pause_tx &&
    1fd0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1fd4:	07d2      	lsls	r2, r2, #31
    1fd6:	d40e      	bmi.n	1ff6 <ull_conn_llcp+0x38e>
		if (conn->tx_head == conn->tx_data) {
    1fd8:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1fdc:	4293      	cmp	r3, r2
    1fde:	f000 8700 	beq.w	2de2 <ull_conn_llcp+0x117a>
		} else if (!conn->tx_ctrl) {
    1fe2:	b959      	cbnz	r1, 1ffc <ull_conn_llcp+0x394>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1fe4:	791a      	ldrb	r2, [r3, #4]
    1fe6:	f002 0203 	and.w	r2, r2, #3
    1fea:	2a03      	cmp	r2, #3
    1fec:	f001 809c 	beq.w	3128 <ull_conn_llcp+0x14c0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1ff0:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    1ff4:	e004      	b.n	2000 <ull_conn_llcp+0x398>
		if (!conn->tx_ctrl) {
    1ff6:	2900      	cmp	r1, #0
    1ff8:	f000 847f 	beq.w	28fa <ull_conn_llcp+0xc92>
	tx->next = conn->tx_ctrl_last->next;
    1ffc:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2000:	681a      	ldr	r2, [r3, #0]
    2002:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2004:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2006:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2008:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    200c:	2b00      	cmp	r3, #0
    200e:	f000 8205 	beq.w	241c <ull_conn_llcp+0x7b4>
		if (!conn->procedure_expire) {
    2012:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    2016:	2800      	cmp	r0, #0
    2018:	f47f ae42 	bne.w	1ca0 <ull_conn_llcp+0x38>
			conn->procedure_expire = conn->supervision_reload;
    201c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			if (conn->procedure_expire <= 1U) {
    2020:	2b01      	cmp	r3, #1
    2022:	f240 8465 	bls.w	28f0 <ull_conn_llcp+0xc88>
			conn->procedure_expire = conn->supervision_reload;
    2026:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    202a:	e639      	b.n	1ca0 <ull_conn_llcp+0x38>
    202c:	f3af 8000 	nop.w
    2030:	1afd498d 	.word	0x1afd498d
    2034:	00000007 	.word	0x00000007
    2038:	2000374c 	.word	0x2000374c
    203c:	3b9aca00 	.word	0x3b9aca00
    2040:	026259ff 	.word	0x026259ff
    2044:	01c9c37f 	.word	0x01c9c37f
    2048:	200020d0 	.word	0x200020d0
    204c:	00019b45 	.word	0x00019b45
    2050:	0002fc68 	.word	0x0002fc68
    2054:	0002fd84 	.word	0x0002fd84
    2058:	0002f6fc 	.word	0x0002f6fc
    205c:	00019aed 	.word	0x00019aed
    2060:	0001c63d 	.word	0x0001c63d
    2064:	200037e0 	.word	0x200037e0
			event_counter = lll->event_counter +
    2068:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    206a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    206c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    2070:	440a      	add	r2, r1
    2072:	442a      	add	r2, r5
    2074:	b295      	uxth	r5, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    2076:	07da      	lsls	r2, r3, #31
    2078:	4619      	mov	r1, r3
    207a:	f100 8277 	bmi.w	256c <ull_conn_llcp+0x904>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    207e:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    2082:	1aad      	subs	r5, r5, r2
    2084:	0428      	lsls	r0, r5, #16
    2086:	f53f ae02 	bmi.w	1c8e <ull_conn_llcp+0x26>
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
		}

		/* apply new phy */
		old_tx = lll->phy_tx;
    208a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		old_rx = lll->phy_rx;
    208e:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
			conn->llcp_ack = conn->llcp_req;
    2092:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    2096:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			conn->llcp_ack = conn->llcp_req;
    209a:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    209e:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
    20a2:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
    20a6:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
    20aa:	f040 859b 	bne.w	2be4 <ull_conn_llcp+0xf7c>
		uint16_t eff_tx_time = lll->max_tx_time;
    20ae:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    20b2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    20b6:	d008      	beq.n	20ca <ull_conn_llcp+0x462>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    20b8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    20bc:	095b      	lsrs	r3, r3, #5
    20be:	f363 0202 	bfi	r2, r3, #0, #3
    20c2:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    20c6:	f44f 77a4 	mov.w	r7, #328	; 0x148

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    20ca:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    20ce:	2d00      	cmp	r5, #0
    20d0:	f000 85af 	beq.w	2c32 <ull_conn_llcp+0xfca>
    20d4:	6828      	ldr	r0, [r5, #0]
    20d6:	2800      	cmp	r0, #0
    20d8:	f000 85ab 	beq.w	2c32 <ull_conn_llcp+0xfca>
		conn->llcp_rx = rx->hdr.link->mem;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    20dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		    (lll->phy_rx == old_rx)) {
    20e0:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		conn->llcp_rx = rx->hdr.link->mem;
    20e4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    20e8:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    20ec:	0789      	lsls	r1, r1, #30
    20ee:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
    20f2:	f3c2 0e02 	ubfx	lr, r2, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    20f6:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    20fa:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    20fe:	d402      	bmi.n	2106 <ull_conn_llcp+0x49e>
    2100:	4599      	cmp	r9, r3
    2102:	f000 868a 	beq.w	2e1a <ull_conn_llcp+0x11b2>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    2106:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2108:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    210a:	231c      	movs	r3, #28
    210c:	712b      	strb	r3, [r5, #4]

		upd = (void *)rx->pdu;
		upd->status = 0U;
    210e:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    2110:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
    2114:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
    2118:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    211a:	4629      	mov	r1, r5
    211c:	f016 fd1a 	bl	18b54 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    2120:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    2124:	2d00      	cmp	r5, #0
    2126:	f000 8613 	beq.w	2d50 <ull_conn_llcp+0x10e8>
    212a:	6828      	ldr	r0, [r5, #0]
    212c:	2800      	cmp	r0, #0
    212e:	f000 860f 	beq.w	2d50 <ull_conn_llcp+0x10e8>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    2132:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		conn->llcp_rx = rx->hdr.link->mem;
    2136:	6842      	ldr	r2, [r0, #4]
    2138:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((eff_tx_time <= lll->max_tx_time) &&
    213c:	42b3      	cmp	r3, r6
    213e:	d30a      	bcc.n	2156 <ull_conn_llcp+0x4ee>
    2140:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2144:	d807      	bhi.n	2156 <ull_conn_llcp+0x4ee>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    2146:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		    (lll->max_tx_time <= max_tx_time) &&
    214a:	42bb      	cmp	r3, r7
    214c:	d303      	bcc.n	2156 <ull_conn_llcp+0x4ee>
		    (eff_rx_time <= lll->max_rx_time) &&
    214e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2152:	f240 87f1 	bls.w	3138 <ull_conn_llcp+0x14d0>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    2156:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
		lll->max_rx_time = eff_rx_time;
    215a:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    215e:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    2160:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2162:	80ea      	strh	r2, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2164:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    2168:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    216c:	2109      	movs	r1, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    216e:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    2172:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    2174:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2176:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    217a:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    217c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    217e:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2180:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    2182:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2184:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2186:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    2188:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    218a:	f016 fce3 	bl	18b54 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    218e:	f016 fceb 	bl	18b68 <ll_rx_sched>
    2192:	e57c      	b.n	1c8e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2194:	48cb      	ldr	r0, [pc, #812]	; (24c4 <ull_conn_llcp+0x85c>)
    2196:	f012 fdf3 	bl	14d80 <mem_acquire>
	if (tx) {
    219a:	2800      	cmp	r0, #0
    219c:	f43f ad77 	beq.w	1c8e <ull_conn_llcp+0x26>
		conn->llcp_ack = conn->llcp_req;
    21a0:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    21a4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    21a8:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21aa:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    21ac:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    21ae:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21b2:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    21b6:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21b8:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    21ba:	71c1      	strb	r1, [r0, #7]
		if (!conn->tx_ctrl) {
    21bc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	if (
    21c0:	2b00      	cmp	r3, #0
    21c2:	f000 83a3 	beq.w	290c <ull_conn_llcp+0xca4>
	    !conn->llcp_enc.pause_tx &&
    21c6:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    21ca:	078d      	lsls	r5, r1, #30
    21cc:	f100 839e 	bmi.w	290c <ull_conn_llcp+0xca4>
	    !conn->llcp_phy.pause_tx &&
    21d0:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    21d4:	07c9      	lsls	r1, r1, #31
    21d6:	f100 8399 	bmi.w	290c <ull_conn_llcp+0xca4>
		if (conn->tx_head == conn->tx_data) {
    21da:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    21de:	428b      	cmp	r3, r1
    21e0:	f000 8767 	beq.w	30b2 <ull_conn_llcp+0x144a>
		} else if (!conn->tx_ctrl) {
    21e4:	2a00      	cmp	r2, #0
    21e6:	f000 87e0 	beq.w	31aa <ull_conn_llcp+0x1542>
	tx->next = conn->tx_ctrl_last->next;
    21ea:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    21ee:	681a      	ldr	r2, [r3, #0]
    21f0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    21f2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    21f4:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    21f6:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    21fa:	2b00      	cmp	r3, #0
    21fc:	f000 85b8 	beq.w	2d70 <ull_conn_llcp+0x1108>
		conn->procedure_expire = conn->procedure_reload;
    2200:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    2204:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    2208:	e541      	b.n	1c8e <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
    220a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    220e:	f013 0503 	ands.w	r5, r3, #3
    2212:	f47f ad3c 	bne.w	1c8e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2216:	48ab      	ldr	r0, [pc, #684]	; (24c4 <ull_conn_llcp+0x85c>)
    2218:	f012 fdb2 	bl	14d80 <mem_acquire>
	if (!tx) {
    221c:	4606      	mov	r6, r0
    221e:	2800      	cmp	r0, #0
    2220:	f43f ad35 	beq.w	1c8e <ull_conn_llcp+0x26>
	if (!lll->role) {
    2224:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2228:	2b00      	cmp	r3, #0
    222a:	f280 82fd 	bge.w	2828 <ull_conn_llcp+0xbc0>
	else if (!lll->enc_rx) {
    222e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    2232:	0719      	lsls	r1, r3, #28
    2234:	f100 860e 	bmi.w	2e54 <ull_conn_llcp+0x11ec>
		if (conn->llcp.encryption.error_code) {
    2238:	f894 50cd 	ldrb.w	r5, [r4, #205]	; 0xcd
    223c:	2d00      	cmp	r5, #0
    223e:	f040 86c5 	bne.w	2fcc <ull_conn_llcp+0x1364>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    2242:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    2246:	463b      	mov	r3, r7
    2248:	462a      	mov	r2, r5
    224a:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    224e:	f204 1049 	addw	r0, r4, #329	; 0x149
    2252:	f01d fd63 	bl	1fd1c <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    2256:	2210      	movs	r2, #16
    2258:	4639      	mov	r1, r7
    225a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    225e:	f028 f87d 	bl	2a35c <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2262:	2208      	movs	r2, #8
    2264:	f104 0178 	add.w	r1, r4, #120	; 0x78
    2268:	f104 0099 	add.w	r0, r4, #153	; 0x99
    226c:	f028 f876 	bl	2a35c <memcpy>
			lll->ccm_rx.direction = 1U;
    2270:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
    2274:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
			lll->ccm_rx.counter = 0U;
    2278:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
			lll->ccm_rx.direction = 1U;
    227c:	f043 0301 	orr.w	r3, r3, #1
    2280:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
			lll->enc_rx = 1U;
    2284:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
    2288:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
			lll->ccm_tx.direction = 0U;
    228c:	f365 0200 	bfi	r2, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2290:	2101      	movs	r1, #1
			lll->enc_rx = 1U;
    2292:	f043 0308 	orr.w	r3, r3, #8
			lll->ccm_tx.direction = 0U;
    2296:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
    229a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_tx.counter = 0U;
    229e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
			lll->ccm_rx.counter = 0U;
    22a2:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    22a6:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    22aa:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    22ae:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    22b2:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    22b6:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22ba:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    22bc:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    22be:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22c2:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    22c6:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22c8:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    22ca:	71f1      	strb	r1, [r6, #7]
	if (
    22cc:	2b00      	cmp	r3, #0
    22ce:	f000 8326 	beq.w	291e <ull_conn_llcp+0xcb6>
	    !conn->llcp_enc.pause_tx &&
    22d2:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    22d6:	0790      	lsls	r0, r2, #30
    22d8:	f100 8321 	bmi.w	291e <ull_conn_llcp+0xcb6>
	    !conn->llcp_phy.pause_tx &&
    22dc:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    22e0:	07d1      	lsls	r1, r2, #31
    22e2:	f100 831c 	bmi.w	291e <ull_conn_llcp+0xcb6>
		if (conn->tx_head == conn->tx_data) {
    22e6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    22ea:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    22ee:	428b      	cmp	r3, r1
    22f0:	f000 82f1 	beq.w	28d6 <ull_conn_llcp+0xc6e>
		} else if (!conn->tx_ctrl) {
    22f4:	2a00      	cmp	r2, #0
    22f6:	f000 8770 	beq.w	31da <ull_conn_llcp+0x1572>
	tx->next = conn->tx_ctrl_last->next;
    22fa:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    22fe:	681a      	ldr	r2, [r3, #0]
    2300:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2302:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2304:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    2306:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    230a:	2b00      	cmp	r3, #0
    230c:	f000 8565 	beq.w	2dda <ull_conn_llcp+0x1172>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    2310:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    2314:	f043 0303 	orr.w	r3, r3, #3
    2318:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    231c:	e4b7      	b.n	1c8e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    231e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    2320:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    2322:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    2326:	440a      	add	r2, r1
    2328:	442a      	add	r2, r5
	if (conn->llcp.chan_map.initiate) {
    232a:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    232c:	b295      	uxth	r5, r2
	if (conn->llcp.chan_map.initiate) {
    232e:	f100 80d1 	bmi.w	24d4 <ull_conn_llcp+0x86c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    2332:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    2336:	1aad      	subs	r5, r5, r2
    2338:	0428      	lsls	r0, r5, #16
    233a:	f53f aca8 	bmi.w	1c8e <ull_conn_llcp+0x26>
			conn->llcp_ack = conn->llcp_req;
    233e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    2342:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		memcpy(&lll->data_chan_map[0],
    2346:	f104 0534 	add.w	r5, r4, #52	; 0x34
    234a:	2205      	movs	r2, #5
    234c:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    2350:	4628      	mov	r0, r5
    2352:	f028 f803 	bl	2a35c <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    2356:	2105      	movs	r1, #5
    2358:	4628      	mov	r0, r5
    235a:	f012 fee7 	bl	1512c <util_ones_count_get>
		lll->data_chan_count =
    235e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    2362:	2201      	movs	r2, #1
		lll->data_chan_count =
    2364:	f360 0305 	bfi	r3, r0, #0, #6
    2368:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    236c:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
    2370:	e48d      	b.n	1c8e <ull_conn_llcp+0x26>
			LL_ASSERT(0);
    2372:	4a55      	ldr	r2, [pc, #340]	; (24c8 <ull_conn_llcp+0x860>)
    2374:	4955      	ldr	r1, [pc, #340]	; (24cc <ull_conn_llcp+0x864>)
    2376:	4856      	ldr	r0, [pc, #344]	; (24d0 <ull_conn_llcp+0x868>)
    2378:	f240 43e1 	movw	r3, #1249	; 0x4e1
    237c:	f024 faee 	bl	2695c <printk>
    2380:	4040      	eors	r0, r0
    2382:	f380 8811 	msr	BASEPRI, r0
    2386:	f04f 0003 	mov.w	r0, #3
    238a:	df02      	svc	2
			break;
    238c:	e47f      	b.n	1c8e <ull_conn_llcp+0x26>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    238e:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    2392:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
    2396:	42ba      	cmp	r2, r7
    2398:	d143      	bne.n	2422 <ull_conn_llcp+0x7ba>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    239a:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    239e:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
    23a2:	42ba      	cmp	r2, r7
    23a4:	f000 82c6 	beq.w	2934 <ull_conn_llcp+0xccc>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    23a8:	1bd2      	subs	r2, r2, r7
    23aa:	07d0      	lsls	r0, r2, #31
    23ac:	f57f ac6f 	bpl.w	1c8e <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    23b0:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    23b4:	07d9      	lsls	r1, r3, #31
    23b6:	f140 85b5 	bpl.w	2f24 <ull_conn_llcp+0x12bc>
	} else if (conn->llcp_version.rx) {
    23ba:	0798      	lsls	r0, r3, #30
    23bc:	f140 85ad 	bpl.w	2f1a <ull_conn_llcp+0x12b2>
		rx = ll_pdu_rx_alloc();
    23c0:	f016 fbf6 	bl	18bb0 <ll_pdu_rx_alloc>
		if (!rx) {
    23c4:	4601      	mov	r1, r0
    23c6:	b300      	cbz	r0, 240a <ull_conn_llcp+0x7a2>
		conn->llcp_version.ack = conn->llcp_version.req;
    23c8:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    23cc:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		rx->hdr.handle = conn->lll.handle;
    23d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    23d2:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    23d4:	2303      	movs	r3, #3
    23d6:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23d8:	7f03      	ldrb	r3, [r0, #28]
    23da:	f043 0303 	orr.w	r3, r3, #3
    23de:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    23e0:	2306      	movs	r3, #6
    23e2:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    23e4:	230c      	movs	r3, #12
    23e6:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    23e8:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
    23ec:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    23f0:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    23f4:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    23f8:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    23fc:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
    2400:	6808      	ldr	r0, [r1, #0]
    2402:	f016 fba7 	bl	18b54 <ll_rx_put>
	ll_rx_sched();
    2406:	f016 fbaf 	bl	18b68 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    240a:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    240e:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
    2412:	e435      	b.n	1c80 <ull_conn_llcp+0x18>
				event_len_prep(conn);
    2414:	4620      	mov	r0, r4
    2416:	f017 fc83 	bl	19d20 <event_len_prep>
    241a:	e452      	b.n	1cc2 <ull_conn_llcp+0x5a>
		conn->tx_data_last = tx;
    241c:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2420:	e5f7      	b.n	2012 <ull_conn_llcp+0x3aa>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    2422:	1bd2      	subs	r2, r2, r7
    2424:	07d1      	lsls	r1, r2, #31
    2426:	f57f ac32 	bpl.w	1c8e <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    242a:	f890 10ba 	ldrb.w	r1, [r0, #186]	; 0xba
    242e:	f011 0701 	ands.w	r7, r1, #1
    2432:	f000 8425 	beq.w	2c80 <ull_conn_llcp+0x1018>
		rx = ll_pdu_rx_alloc();
    2436:	f016 fbbb 	bl	18bb0 <ll_pdu_rx_alloc>
		if (!rx) {
    243a:	4607      	mov	r7, r0
    243c:	2800      	cmp	r0, #0
    243e:	d0e4      	beq.n	240a <ull_conn_llcp+0x7a2>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    2440:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    2444:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2448:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    244a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    244c:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    244e:	f043 0303 	orr.w	r3, r3, #3
    2452:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    2454:	2309      	movs	r3, #9
    2456:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    2458:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    245a:	2303      	movs	r3, #3
    245c:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    245e:	4641      	mov	r1, r8
    2460:	2208      	movs	r2, #8
    2462:	3020      	adds	r0, #32
    2464:	f027 ff85 	bl	2a372 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    2468:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
	sys_put_le16(val >> 16, &dst[2]);
    246c:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    246e:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    2472:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2476:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    247a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    247c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    2480:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    2484:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2488:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    248a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    248e:	0a12      	lsrs	r2, r2, #8
    2490:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    2494:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    2498:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    249c:	4639      	mov	r1, r7
    249e:	e7af      	b.n	2400 <ull_conn_llcp+0x798>
		switch (conn->llcp_cu.state) {
    24a0:	1e4b      	subs	r3, r1, #1
    24a2:	2b04      	cmp	r3, #4
    24a4:	f201 8126 	bhi.w	36f4 <ull_conn_llcp+0x1a8c>
    24a8:	a101      	add	r1, pc, #4	; (adr r1, 24b0 <ull_conn_llcp+0x848>)
    24aa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    24ae:	bf00      	nop
    24b0:	00002715 	.word	0x00002715
    24b4:	00002635 	.word	0x00002635
    24b8:	00001c8f 	.word	0x00001c8f
    24bc:	0000271b 	.word	0x0000271b
    24c0:	0000278b 	.word	0x0000278b
    24c4:	200037e0 	.word	0x200037e0
    24c8:	0002fc68 	.word	0x0002fc68
    24cc:	0002f794 	.word	0x0002f794
    24d0:	0002f6fc 	.word	0x0002f6fc
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24d4:	48cb      	ldr	r0, [pc, #812]	; (2804 <ull_conn_llcp+0xb9c>)
    24d6:	f012 fc53 	bl	14d80 <mem_acquire>
		if (tx) {
    24da:	4606      	mov	r6, r0
    24dc:	2800      	cmp	r0, #0
    24de:	f43f abd6 	beq.w	1c8e <ull_conn_llcp+0x26>
						      conn->lll.latency + 6;
    24e2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    24e4:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24e8:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    24ea:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
    24ec:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    24f0:	442a      	add	r2, r5
			conn->llcp.chan_map.initiate = 0U;
    24f2:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			conn->llcp.chan_map.instant = event_counter +
    24f6:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24fa:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    24fe:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
    2500:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2502:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2504:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    2506:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    2508:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    250c:	2205      	movs	r2, #5
    250e:	3008      	adds	r0, #8
    2510:	f027 ff24 	bl	2a35c <memcpy>
	    conn->tx_head &&
    2514:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    2518:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    251c:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    2520:	2b00      	cmp	r3, #0
    2522:	f000 8432 	beq.w	2d8a <ull_conn_llcp+0x1122>
	    !conn->llcp_enc.pause_tx &&
    2526:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    252a:	0797      	lsls	r7, r2, #30
    252c:	f100 842d 	bmi.w	2d8a <ull_conn_llcp+0x1122>
	    !conn->llcp_phy.pause_tx &&
    2530:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2534:	07d5      	lsls	r5, r2, #31
    2536:	f100 8428 	bmi.w	2d8a <ull_conn_llcp+0x1122>
		if (conn->tx_head == conn->tx_data) {
    253a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    253e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2542:	428b      	cmp	r3, r1
    2544:	f000 863b 	beq.w	31be <ull_conn_llcp+0x1556>
		} else if (!conn->tx_ctrl) {
    2548:	2a00      	cmp	r2, #0
    254a:	f000 8727 	beq.w	339c <ull_conn_llcp+0x1734>
	tx->next = conn->tx_ctrl_last->next;
    254e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2552:	681a      	ldr	r2, [r3, #0]
    2554:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2556:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2558:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    255a:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    255e:	2b00      	cmp	r3, #0
    2560:	f47f ab95 	bne.w	1c8e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    2564:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2568:	f7ff bb91 	b.w	1c8e <ull_conn_llcp+0x26>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    256c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    2570:	2200      	movs	r2, #0
    2572:	f012 fc73 	bl	14e5c <memq_peek>
    2576:	4606      	mov	r6, r0
    2578:	2800      	cmp	r0, #0
    257a:	f47f ab88 	bne.w	1c8e <ull_conn_llcp+0x26>
		rx = ll_pdu_rx_alloc_peek(2);
    257e:	2002      	movs	r0, #2
    2580:	f016 faf8 	bl	18b74 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2584:	4680      	mov	r8, r0
    2586:	2800      	cmp	r0, #0
    2588:	f43f ab81 	beq.w	1c8e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    258c:	489d      	ldr	r0, [pc, #628]	; (2804 <ull_conn_llcp+0xb9c>)
    258e:	f012 fbf7 	bl	14d80 <mem_acquire>
		if (!tx) {
    2592:	4607      	mov	r7, r0
    2594:	2800      	cmp	r0, #0
    2596:	f43f ab7a 	beq.w	1c8e <ull_conn_llcp+0x26>
		conn->llcp.phy_upd_ind.initiate = 0U;
    259a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    259e:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    25a2:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    25a6:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    25aa:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    25ae:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		if (!((conn->llcp.phy_upd_ind.tx |
    25b2:	b2db      	uxtb	r3, r3
    25b4:	f040 8596 	bne.w	30e4 <ull_conn_llcp+0x147c>
			conn->llcp_ack = conn->llcp_req;
    25b8:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			conn->llcp.phy_upd_ind.instant = 0U;
    25bc:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
			if (conn->llcp.phy_upd_ind.cmd) {
    25c0:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    25c2:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			if (conn->llcp.phy_upd_ind.cmd) {
    25c6:	f100 85c0 	bmi.w	314a <ull_conn_llcp+0x14e2>
    25ca:	4633      	mov	r3, r6
    25cc:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    25ce:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    25d0:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    25d2:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
    25d4:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    25d6:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
    25d8:	2218      	movs	r2, #24
	    conn->tx_head &&
    25da:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		if (!conn->tx_ctrl) {
    25de:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		pdu_ctrl_tx->llctrl.opcode =
    25e2:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25e4:	793a      	ldrb	r2, [r7, #4]
    25e6:	f042 0203 	orr.w	r2, r2, #3
    25ea:	713a      	strb	r2, [r7, #4]
	if (
    25ec:	2b00      	cmp	r3, #0
    25ee:	f000 8527 	beq.w	3040 <ull_conn_llcp+0x13d8>
	    !conn->llcp_enc.pause_tx &&
    25f2:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    25f6:	0796      	lsls	r6, r2, #30
    25f8:	f100 8522 	bmi.w	3040 <ull_conn_llcp+0x13d8>
	    !conn->llcp_phy.pause_tx &&
    25fc:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2600:	07d5      	lsls	r5, r2, #31
    2602:	f100 851d 	bmi.w	3040 <ull_conn_llcp+0x13d8>
		if (conn->tx_head == conn->tx_data) {
    2606:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    260a:	4293      	cmp	r3, r2
    260c:	f000 86a2 	beq.w	3354 <ull_conn_llcp+0x16ec>
		} else if (!conn->tx_ctrl) {
    2610:	2900      	cmp	r1, #0
    2612:	f000 86dd 	beq.w	33d0 <ull_conn_llcp+0x1768>
	tx->next = conn->tx_ctrl_last->next;
    2616:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    261a:	681a      	ldr	r2, [r3, #0]
    261c:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    261e:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    2620:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2624:	683b      	ldr	r3, [r7, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	f47f ab31 	bne.w	1c8e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    262c:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
    2630:	f7ff bb2d 	b.w	1c8e <ull_conn_llcp+0x26>
		switch (conn->llcp_cu.state) {
    2634:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 2808 <ull_conn_llcp+0xba0>
		rx = ll_pdu_rx_alloc_peek(1);
    2638:	2001      	movs	r0, #1
    263a:	f016 fa9b 	bl	18b74 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    263e:	4607      	mov	r7, r0
    2640:	2800      	cmp	r0, #0
    2642:	f43f ab24 	beq.w	1c8e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2646:	486f      	ldr	r0, [pc, #444]	; (2804 <ull_conn_llcp+0xb9c>)
    2648:	f012 fb9a 	bl	14d80 <mem_acquire>
		if (!tx) {
    264c:	4605      	mov	r5, r0
    264e:	2800      	cmp	r0, #0
    2650:	f43f ab1d 	beq.w	1c8e <ull_conn_llcp+0x26>
	if (!conn_upd_curr) {
    2654:	4b6d      	ldr	r3, [pc, #436]	; (280c <ull_conn_llcp+0xba4>)
    2656:	681a      	ldr	r2, [r3, #0]
    2658:	2a00      	cmp	r2, #0
    265a:	f000 845b 	beq.w	2f14 <ull_conn_llcp+0x12ac>
		(void)ll_pdu_rx_alloc();
    265e:	f016 faa7 	bl	18bb0 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    2662:	683b      	ldr	r3, [r7, #0]
    2664:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    2668:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    266a:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    266c:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2670:	f043 0303 	orr.w	r3, r3, #3
    2674:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2676:	230c      	movs	r3, #12
    2678:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    267a:	2300      	movs	r3, #0
    267c:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    267e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    2682:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2684:	4a62      	ldr	r2, [pc, #392]	; (2810 <ull_conn_llcp+0xba8>)
    2686:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    268a:	fba2 2303 	umull	r2, r3, r2, r3
    268e:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2690:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2694:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    2698:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    269c:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
    26a0:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    26a4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    26a8:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    26ac:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    26b0:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    26b4:	2203      	movs	r2, #3
    26b6:	f362 0302 	bfi	r3, r2, #0, #3
    26ba:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    26be:	68a3      	ldr	r3, [r4, #8]
    26c0:	2b00      	cmp	r3, #0
    26c2:	da0a      	bge.n	26da <ull_conn_llcp+0xa72>
			uint32_t ticks_prepare_to_start =
    26c4:	68e0      	ldr	r0, [r4, #12]
    26c6:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    26c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    26cc:	4290      	cmp	r0, r2
    26ce:	bf2c      	ite	cs
    26d0:	1831      	addcs	r1, r6, r0
    26d2:	18b1      	addcc	r1, r6, r2
    26d4:	1acb      	subs	r3, r1, r3
    26d6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    26da:	4b4e      	ldr	r3, [pc, #312]	; (2814 <ull_conn_llcp+0xbac>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    26dc:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    26de:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    26e0:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    26e4:	2102      	movs	r1, #2
    26e6:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    26e8:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    26ec:	f012 fc20 	bl	14f30 <mayfly_enqueue>
		LL_ASSERT(!retval);
    26f0:	2800      	cmp	r0, #0
    26f2:	f43f aacc 	beq.w	1c8e <ull_conn_llcp+0x26>
    26f6:	4a48      	ldr	r2, [pc, #288]	; (2818 <ull_conn_llcp+0xbb0>)
    26f8:	4948      	ldr	r1, [pc, #288]	; (281c <ull_conn_llcp+0xbb4>)
    26fa:	4849      	ldr	r0, [pc, #292]	; (2820 <ull_conn_llcp+0xbb8>)
    26fc:	f640 3373 	movw	r3, #2931	; 0xb73
    2700:	f024 f92c 	bl	2695c <printk>
    2704:	4040      	eors	r0, r0
    2706:	f380 8811 	msr	BASEPRI, r0
    270a:	f04f 0003 	mov.w	r0, #3
    270e:	df02      	svc	2
    2710:	f7ff babd 	b.w	1c8e <ull_conn_llcp+0x26>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    2714:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2824 <ull_conn_llcp+0xbbc>
    2718:	e78e      	b.n	2638 <ull_conn_llcp+0x9d0>
						      conn->lll.latency + 6;
    271a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    271c:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2720:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
	    conn->tx_head &&
    2724:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
						      conn->lll.latency + 6;
    2728:	3306      	adds	r3, #6
    272a:	441a      	add	r2, r3
    272c:	b293      	uxth	r3, r2
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    272e:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    2732:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    2736:	f1a5 0209 	sub.w	r2, r5, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    273a:	812b      	strh	r3, [r5, #8]
		if (!conn->tx_ctrl) {
    273c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2740:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (
    2744:	2900      	cmp	r1, #0
    2746:	f000 83ce 	beq.w	2ee6 <ull_conn_llcp+0x127e>
	    !conn->llcp_enc.pause_tx &&
    274a:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    274e:	0787      	lsls	r7, r0, #30
    2750:	f100 83c9 	bmi.w	2ee6 <ull_conn_llcp+0x127e>
	    !conn->llcp_phy.pause_tx &&
    2754:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    2758:	07c6      	lsls	r6, r0, #31
    275a:	f100 83c4 	bmi.w	2ee6 <ull_conn_llcp+0x127e>
		if (conn->tx_head == conn->tx_data) {
    275e:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    2762:	4281      	cmp	r1, r0
    2764:	f000 859e 	beq.w	32a4 <ull_conn_llcp+0x163c>
		} else if (!conn->tx_ctrl) {
    2768:	2b00      	cmp	r3, #0
    276a:	f000 866e 	beq.w	344a <ull_conn_llcp+0x17e2>
	tx->next = conn->tx_ctrl_last->next;
    276e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2772:	6819      	ldr	r1, [r3, #0]
    2774:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    2778:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    277a:	f855 1c09 	ldr.w	r1, [r5, #-9]
	conn->tx_ctrl_last = tx;
    277e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2782:	2900      	cmp	r1, #0
    2784:	f47f aa83 	bne.w	1c8e <ull_conn_llcp+0x26>
    2788:	e038      	b.n	27fc <ull_conn_llcp+0xb94>
			conn->llcp_ack = conn->llcp_req;
    278a:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
    278e:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
			conn->llcp_cu.ack = conn->llcp_cu.req;
    2792:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
	conn_upd_curr = NULL;
    2796:	4a1d      	ldr	r2, [pc, #116]	; (280c <ull_conn_llcp+0xba4>)
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2798:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
			conn->llcp_cu.ack = conn->llcp_cu.req;
    279c:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	    conn->tx_head &&
    27a0:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    27a4:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    27a8:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    27ac:	2100      	movs	r1, #0
    27ae:	6011      	str	r1, [r2, #0]
		if (!conn->tx_ctrl) {
    27b0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    27b4:	f1a5 0209 	sub.w	r2, r5, #9
	if (
    27b8:	2b00      	cmp	r3, #0
    27ba:	f000 83a1 	beq.w	2f00 <ull_conn_llcp+0x1298>
	    !conn->llcp_enc.pause_tx &&
    27be:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    27c2:	0786      	lsls	r6, r0, #30
    27c4:	f100 839c 	bmi.w	2f00 <ull_conn_llcp+0x1298>
	    !conn->llcp_phy.pause_tx &&
    27c8:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    27cc:	07c0      	lsls	r0, r0, #31
    27ce:	f100 8397 	bmi.w	2f00 <ull_conn_llcp+0x1298>
		if (conn->tx_head == conn->tx_data) {
    27d2:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    27d6:	4283      	cmp	r3, r0
    27d8:	f000 85ea 	beq.w	33b0 <ull_conn_llcp+0x1748>
		} else if (!conn->tx_ctrl) {
    27dc:	2900      	cmp	r1, #0
    27de:	f000 862a 	beq.w	3436 <ull_conn_llcp+0x17ce>
	tx->next = conn->tx_ctrl_last->next;
    27e2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    27e6:	6819      	ldr	r1, [r3, #0]
    27e8:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    27ec:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    27ee:	f855 3c09 	ldr.w	r3, [r5, #-9]
	conn->tx_ctrl_last = tx;
    27f2:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    27f6:	2b00      	cmp	r3, #0
    27f8:	f47f aa49 	bne.w	1c8e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    27fc:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    2800:	f7ff ba45 	b.w	1c8e <ull_conn_llcp+0x26>
    2804:	200037e0 	.word	0x200037e0
    2808:	00004009 	.word	0x00004009
    280c:	2000374c 	.word	0x2000374c
    2810:	d1b71759 	.word	0xd1b71759
    2814:	2000071c 	.word	0x2000071c
    2818:	0002fc68 	.word	0x0002fc68
    281c:	0002fb78 	.word	0x0002fb78
    2820:	0002f6fc 	.word	0x0002f6fc
    2824:	0001cc89 	.word	0x0001cc89
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    2828:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    282c:	463b      	mov	r3, r7
    282e:	462a      	mov	r2, r5
    2830:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    2834:	f204 1049 	addw	r0, r4, #329	; 0x149
    2838:	f01d fa70 	bl	1fd1c <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    283c:	2210      	movs	r2, #16
    283e:	4639      	mov	r1, r7
    2840:	f104 0080 	add.w	r0, r4, #128	; 0x80
    2844:	f027 fd8a 	bl	2a35c <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2848:	2208      	movs	r2, #8
    284a:	f104 0178 	add.w	r1, r4, #120	; 0x78
    284e:	f104 0099 	add.w	r0, r4, #153	; 0x99
    2852:	f027 fd83 	bl	2a35c <memcpy>
		lll->ccm_rx.direction = 0;
    2856:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    285a:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
		lll->enc_rx = 1;
    285e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    2862:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
		lll->ccm_tx.counter = 0;
    2866:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
		lll->enc_rx = 1;
    286a:	f023 0318 	bic.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    286e:	f365 0100 	bfi	r1, r5, #0, #1
		lll->ccm_tx.direction = 1;
    2872:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.counter = 0;
    2876:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    287a:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    287e:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    2882:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    2886:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    288a:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    288e:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		lll->enc_rx = 1;
    2892:	f043 0318 	orr.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    2896:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    289a:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conn->lll.enc_tx = 1;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    289e:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    28a0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28a4:	7932      	ldrb	r2, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    28a6:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    28a8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28ac:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    28b0:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28b2:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    28b4:	71f1      	strb	r1, [r6, #7]
	if (
    28b6:	b393      	cbz	r3, 291e <ull_conn_llcp+0xcb6>
	    !conn->llcp_enc.pause_tx &&
    28b8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    28bc:	0792      	lsls	r2, r2, #30
    28be:	d42e      	bmi.n	291e <ull_conn_llcp+0xcb6>
	    !conn->llcp_phy.pause_tx &&
    28c0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    28c4:	07d7      	lsls	r7, r2, #31
    28c6:	d42a      	bmi.n	291e <ull_conn_llcp+0xcb6>
		if (conn->tx_head == conn->tx_data) {
    28c8:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    28cc:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    28ce:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    28d2:	f47f ad0f 	bne.w	22f4 <ull_conn_llcp+0x68c>
			conn->tx_data = conn->tx_data->next;
    28d6:	6819      	ldr	r1, [r3, #0]
    28d8:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    28dc:	2a00      	cmp	r2, #0
    28de:	f47f ad0c 	bne.w	22fa <ull_conn_llcp+0x692>
			tx->next = conn->tx_head->next;
    28e2:	681a      	ldr	r2, [r3, #0]
    28e4:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    28e6:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    28e8:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    28ea:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    28ee:	e50c      	b.n	230a <ull_conn_llcp+0x6a2>
				conn->procedure_expire++;
    28f0:	3301      	adds	r3, #1
    28f2:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    28f6:	f7ff b9d4 	b.w	1ca2 <ull_conn_llcp+0x3a>
			tx->next = conn->tx_head;
    28fa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    28fc:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2900:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2904:	2b00      	cmp	r3, #0
    2906:	f47f ab84 	bne.w	2012 <ull_conn_llcp+0x3aa>
    290a:	e587      	b.n	241c <ull_conn_llcp+0x7b4>
		if (!conn->tx_ctrl) {
    290c:	2a00      	cmp	r2, #0
    290e:	f47f ac6c 	bne.w	21ea <ull_conn_llcp+0x582>
			tx->next = conn->tx_head;
    2912:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2914:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2918:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    291c:	e46d      	b.n	21fa <ull_conn_llcp+0x592>
		if (!conn->tx_ctrl) {
    291e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2922:	2a00      	cmp	r2, #0
    2924:	f47f ace9 	bne.w	22fa <ull_conn_llcp+0x692>
			tx->next = conn->tx_head;
    2928:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    292a:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    292e:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2932:	e4ea      	b.n	230a <ull_conn_llcp+0x6a2>
		} else if (conn->llcp_conn_param.ack !=
    2934:	f890 715d 	ldrb.w	r7, [r0, #349]	; 0x15d
    2938:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    293c:	4297      	cmp	r7, r2
    293e:	f000 8230 	beq.w	2da2 <ull_conn_llcp+0x113a>
	return conn_upd_curr && (conn_upd_curr != conn);
    2942:	4fc7      	ldr	r7, [pc, #796]	; (2c60 <ull_conn_llcp+0xff8>)
    2944:	683a      	ldr	r2, [r7, #0]
    2946:	2a00      	cmp	r2, #0
    2948:	f000 8393 	beq.w	3072 <ull_conn_llcp+0x140a>
    294c:	4290      	cmp	r0, r2
    294e:	f47f a99e 	bne.w	1c8e <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    2952:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    2956:	f002 020f 	and.w	r2, r2, #15
    295a:	2a08      	cmp	r2, #8
    295c:	f200 86db 	bhi.w	3716 <ull_conn_llcp+0x1aae>
    2960:	a001      	add	r0, pc, #4	; (adr r0, 2968 <ull_conn_llcp+0xd00>)
    2962:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2966:	bf00      	nop
    2968:	00002ad1 	.word	0x00002ad1
    296c:	00002a49 	.word	0x00002a49
    2970:	000029f9 	.word	0x000029f9
    2974:	00001c81 	.word	0x00001c81
    2978:	00001c81 	.word	0x00001c81
    297c:	00001c81 	.word	0x00001c81
    2980:	00001c81 	.word	0x00001c81
    2984:	00001c81 	.word	0x00001c81
    2988:	0000298d 	.word	0x0000298d
			event_counter = lll->event_counter +
    298c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    298e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
    2990:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
			event_counter = lll->event_counter +
    2994:	440a      	add	r2, r1
    2996:	442a      	add	r2, r5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    2998:	f894 515e 	ldrb.w	r5, [r4, #350]	; 0x15e
	    conn->tx_head &&
    299c:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    29a0:	f820 2c02 	strh.w	r2, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    29a4:	2204      	movs	r2, #4
    29a6:	f362 0503 	bfi	r5, r2, #0, #4
    29aa:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    29ae:	f1a0 0213 	sub.w	r2, r0, #19
		if (!conn->tx_ctrl) {
    29b2:	f8d4 51a0 	ldr.w	r5, [r4, #416]	; 0x1a0
	if (
    29b6:	2900      	cmp	r1, #0
    29b8:	f000 83ed 	beq.w	3196 <ull_conn_llcp+0x152e>
	    conn->tx_head &&
    29bc:	079e      	lsls	r6, r3, #30
    29be:	f100 83ea 	bmi.w	3196 <ull_conn_llcp+0x152e>
	    !conn->llcp_phy.pause_tx &&
    29c2:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    29c6:	07db      	lsls	r3, r3, #31
    29c8:	f100 83e5 	bmi.w	3196 <ull_conn_llcp+0x152e>
		if (conn->tx_head == conn->tx_data) {
    29cc:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    29d0:	4299      	cmp	r1, r3
    29d2:	f000 85f9 	beq.w	35c8 <ull_conn_llcp+0x1960>
		} else if (!conn->tx_ctrl) {
    29d6:	2d00      	cmp	r5, #0
    29d8:	f000 864a 	beq.w	3670 <ull_conn_llcp+0x1a08>
	tx->next = conn->tx_ctrl_last->next;
    29dc:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    29e0:	6819      	ldr	r1, [r3, #0]
    29e2:	f840 1c13 	str.w	r1, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
    29e6:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    29e8:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    29ec:	f850 3c13 	ldr.w	r3, [r0, #-19]
    29f0:	2b00      	cmp	r3, #0
    29f2:	f47f a94c 	bne.w	1c8e <ull_conn_llcp+0x26>
    29f6:	e701      	b.n	27fc <ull_conn_llcp+0xb94>
	if (conn->llcp_enc.pause_tx) {
    29f8:	079f      	lsls	r7, r3, #30
    29fa:	f53f a948 	bmi.w	1c8e <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    29fe:	f016 f8d7 	bl	18bb0 <ll_pdu_rx_alloc>
	if (!rx) {
    2a02:	4601      	mov	r1, r0
    2a04:	2800      	cmp	r0, #0
    2a06:	f43f ad00 	beq.w	240a <ull_conn_llcp+0x7a2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a0a:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a0e:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a10:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a12:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a16:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2a1a:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2a1c:	f884 015e 	strb.w	r0, [r4, #350]	; 0x15e
	rx->hdr.handle = conn->lll.handle;
    2a20:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2a22:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a24:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2a26:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2a28:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    2a2c:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2a2e:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2a32:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2a34:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2a38:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2a3a:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    2a3e:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a40:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    2a42:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a44:	77cb      	strb	r3, [r1, #31]
    2a46:	e4db      	b.n	2400 <ull_conn_llcp+0x798>
	if (conn->llcp_conn_param.status) {
    2a48:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	f040 83de 	bne.w	320e <ull_conn_llcp+0x15a6>
	if (!conn->lll.role) {
    2a52:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    2a56:	2a00      	cmp	r2, #0
    2a58:	f2c0 8516 	blt.w	3488 <ull_conn_llcp+0x1820>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a5c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_offset_us = 0U;
    2a60:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a64:	2006      	movs	r0, #6
    2a66:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    2a6a:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a6e:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_size = 1U;
    2a72:	2501      	movs	r5, #1
		interval_max = conn->llcp_conn_param.interval_max;
    2a74:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
		conn->llcp_cu.win_size = 1U;
    2a78:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		if (preferred_periodicity) {
    2a7c:	2800      	cmp	r0, #0
    2a7e:	f000 84f7 	beq.w	3470 <ull_conn_llcp+0x1808>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    2a82:	fbb2 f3f0 	udiv	r3, r2, r0
    2a86:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    2a8a:	f8b4 0160 	ldrh.w	r0, [r4, #352]	; 0x160
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    2a8e:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    2a90:	4298      	cmp	r0, r3
    2a92:	bf98      	it	ls
    2a94:	461a      	movls	r2, r3
    2a96:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2a9a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2a9e:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    2aa2:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    2aa6:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2aaa:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2aae:	00db      	lsls	r3, r3, #3
    2ab0:	f022 020f 	bic.w	r2, r2, #15
    2ab4:	f043 0302 	orr.w	r3, r3, #2
    2ab8:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    2aba:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2abc:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    2ac0:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2ac4:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.ack--;
    2ac8:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		return;
    2acc:	f7ff b8df 	b.w	1c8e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2ad0:	4864      	ldr	r0, [pc, #400]	; (2c64 <ull_conn_llcp+0xffc>)
    2ad2:	f012 f955 	bl	14d80 <mem_acquire>
	if (!tx) {
    2ad6:	4602      	mov	r2, r0
    2ad8:	2800      	cmp	r0, #0
    2ada:	f43f ac96 	beq.w	240a <ull_conn_llcp+0x7a2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ade:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    2ae0:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ae2:	f043 0303 	orr.w	r3, r3, #3
    2ae6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2ae8:	2318      	movs	r3, #24
    2aea:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2aec:	230f      	movs	r3, #15
    2aee:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2af0:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    2af4:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2af6:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2afa:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2afc:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2b00:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2b02:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    2b06:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    2b08:	2300      	movs	r3, #0
    2b0a:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2b0c:	74c3      	strb	r3, [r0, #19]
    2b0e:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b14:	7543      	strb	r3, [r0, #21]
    2b16:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    2b18:	75c3      	strb	r3, [r0, #23]
    2b1a:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2b1c:	7643      	strb	r3, [r0, #25]
    2b1e:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2b20:	76c3      	strb	r3, [r0, #27]
    2b22:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    2b24:	7743      	strb	r3, [r0, #29]
    2b26:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
    2b28:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    2b2c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2b30:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    2b34:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2b38:	2107      	movs	r1, #7
    2b3a:	f361 0303 	bfi	r3, r1, #0, #4
    2b3e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    2b42:	68a3      	ldr	r3, [r4, #8]
    2b44:	2b00      	cmp	r3, #0
    2b46:	da0a      	bge.n	2b5e <ull_conn_llcp+0xef6>
			uint32_t ticks_prepare_to_start =
    2b48:	68e7      	ldr	r7, [r4, #12]
    2b4a:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    2b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    2b50:	4287      	cmp	r7, r0
    2b52:	bf2c      	ite	cs
    2b54:	19f1      	addcs	r1, r6, r7
    2b56:	1831      	addcc	r1, r6, r0
    2b58:	1acb      	subs	r3, r1, r3
    2b5a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		win_offs = &p->offset0;
    2b5e:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
    2b60:	4b41      	ldr	r3, [pc, #260]	; (2c68 <ull_conn_llcp+0x1000>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
    2b62:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2b66:	2201      	movs	r2, #1
    2b68:	2102      	movs	r1, #2
    2b6a:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    2b6c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2b6e:	f012 f9df 	bl	14f30 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2b72:	2800      	cmp	r0, #0
    2b74:	f43f ac49 	beq.w	240a <ull_conn_llcp+0x7a2>
    2b78:	4a3c      	ldr	r2, [pc, #240]	; (2c6c <ull_conn_llcp+0x1004>)
    2b7a:	493d      	ldr	r1, [pc, #244]	; (2c70 <ull_conn_llcp+0x1008>)
    2b7c:	f640 63f6 	movw	r3, #3830	; 0xef6
		LL_ASSERT(0);
    2b80:	483c      	ldr	r0, [pc, #240]	; (2c74 <ull_conn_llcp+0x100c>)
    2b82:	f023 feeb 	bl	2695c <printk>
    2b86:	4040      	eors	r0, r0
    2b88:	f380 8811 	msr	BASEPRI, r0
    2b8c:	f04f 0003 	mov.w	r0, #3
    2b90:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2b92:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2b96:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		break;
    2b9a:	f7ff b871 	b.w	1c80 <ull_conn_llcp+0x18>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2b9e:	fb08 3311 	mls	r3, r8, r1, r3
    2ba2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2ba6:	4934      	ldr	r1, [pc, #208]	; (2c78 <ull_conn_llcp+0x1010>)
    2ba8:	b29b      	uxth	r3, r3
    2baa:	fb02 f303 	mul.w	r3, r2, r3
    2bae:	fba3 0101 	umull	r0, r1, r3, r1
    2bb2:	a329      	add	r3, pc, #164	; (adr r3, 2c58 <ull_conn_llcp+0xff0>)
    2bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bb8:	f7fe faf2 	bl	11a0 <__aeabi_uldivmod>
    2bbc:	1a36      	subs	r6, r6, r0
    2bbe:	f7ff b933 	b.w	1e28 <ull_conn_llcp+0x1c0>
		LL_ASSERT(rx && rx->hdr.link);
    2bc2:	4a2a      	ldr	r2, [pc, #168]	; (2c6c <ull_conn_llcp+0x1004>)
    2bc4:	492d      	ldr	r1, [pc, #180]	; (2c7c <ull_conn_llcp+0x1014>)
    2bc6:	482b      	ldr	r0, [pc, #172]	; (2c74 <ull_conn_llcp+0x100c>)
    2bc8:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    2bcc:	f023 fec6 	bl	2695c <printk>
    2bd0:	4040      	eors	r0, r0
    2bd2:	f380 8811 	msr	BASEPRI, r0
    2bd6:	f04f 0003 	mov.w	r0, #3
    2bda:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2bdc:	f8d8 0000 	ldr.w	r0, [r8]
    2be0:	f7ff b8d2 	b.w	1d88 <ull_conn_llcp+0x120>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2be4:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2be8:	f360 0202 	bfi	r2, r0, #0, #3
    2bec:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2bf0:	f44f 76a4 	mov.w	r6, #328	; 0x148
    2bf4:	f7ff ba5d 	b.w	20b2 <ull_conn_llcp+0x44a>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2bf8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    2bfc:	4594      	cmp	ip, r2
    2bfe:	f47f a8d1 	bne.w	1da4 <ull_conn_llcp+0x13c>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2c02:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    2c06:	fb0c fe03 	mul.w	lr, ip, r3
    2c0a:	f242 7c10 	movw	ip, #10000	; 0x2710
    2c0e:	fb0c ec01 	mla	ip, ip, r1, lr
    2c12:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    2c16:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2c1a:	f8b4 e0a6 	ldrh.w	lr, [r4, #166]	; 0xa6
    2c1e:	fa1f fc8c 	uxth.w	ip, ip
    2c22:	45e6      	cmp	lr, ip
    2c24:	f47f a8be 	bne.w	1da4 <ull_conn_llcp+0x13c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2c28:	2301      	movs	r3, #1
    2c2a:	f888 3004 	strb.w	r3, [r8, #4]
    2c2e:	f7ff b8c9 	b.w	1dc4 <ull_conn_llcp+0x15c>
		LL_ASSERT(rx && rx->hdr.link);
    2c32:	4a0e      	ldr	r2, [pc, #56]	; (2c6c <ull_conn_llcp+0x1004>)
    2c34:	4911      	ldr	r1, [pc, #68]	; (2c7c <ull_conn_llcp+0x1014>)
    2c36:	480f      	ldr	r0, [pc, #60]	; (2c74 <ull_conn_llcp+0x100c>)
    2c38:	f241 231a 	movw	r3, #4634	; 0x121a
    2c3c:	f023 fe8e 	bl	2695c <printk>
    2c40:	4040      	eors	r0, r0
    2c42:	f380 8811 	msr	BASEPRI, r0
    2c46:	f04f 0003 	mov.w	r0, #3
    2c4a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2c4c:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2c4e:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    2c52:	f7ff ba43 	b.w	20dc <ull_conn_llcp+0x474>
    2c56:	bf00      	nop
    2c58:	1afd498d 	.word	0x1afd498d
    2c5c:	00000007 	.word	0x00000007
    2c60:	2000374c 	.word	0x2000374c
    2c64:	200037e0 	.word	0x200037e0
    2c68:	2000072c 	.word	0x2000072c
    2c6c:	0002fc68 	.word	0x0002fc68
    2c70:	0002fb78 	.word	0x0002fb78
    2c74:	0002f6fc 	.word	0x0002f6fc
    2c78:	3b9aca00 	.word	0x3b9aca00
    2c7c:	0002fd48 	.word	0x0002fd48
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2c80:	48cd      	ldr	r0, [pc, #820]	; (2fb8 <ull_conn_llcp+0x1350>)
    2c82:	f012 f87d 	bl	14d80 <mem_acquire>
	if (tx) {
    2c86:	4680      	mov	r8, r0
    2c88:	2800      	cmp	r0, #0
    2c8a:	f43f abbe 	beq.w	240a <ull_conn_llcp+0x7a2>
		conn->llcp_feature.ack--;
    2c8e:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
    2c92:	3b01      	subs	r3, #1
    2c94:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2c98:	2309      	movs	r3, #9
    2c9a:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    2c9c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2ca0:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2ca2:	7903      	ldrb	r3, [r0, #4]
    2ca4:	f043 0303 	orr.w	r3, r3, #3
    2ca8:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2caa:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    2cae:	bfac      	ite	ge
    2cb0:	2308      	movge	r3, #8
    2cb2:	230e      	movlt	r3, #14
    2cb4:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2cb6:	4639      	mov	r1, r7
    2cb8:	4410      	add	r0, r2
    2cba:	f027 fb5a 	bl	2a372 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    2cbe:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
	sys_put_le16(val >> 16, &dst[2]);
    2cc2:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    2cc4:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    2cc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2ccc:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    2cd0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    2cd2:	f888 300c 	strb.w	r3, [r8, #12]
    2cd6:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    2cda:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    2cde:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    2ce2:	0a09      	lsrs	r1, r1, #8
    2ce4:	0a12      	lsrs	r2, r2, #8
    2ce6:	f888 100b 	strb.w	r1, [r8, #11]
    2cea:	f888 300d 	strb.w	r3, [r8, #13]
    2cee:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    2cf2:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	f000 8084 	beq.w	2e04 <ull_conn_llcp+0x119c>
	    !conn->llcp_enc.pause_tx &&
    2cfc:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2d00:	0792      	lsls	r2, r2, #30
    2d02:	d47f      	bmi.n	2e04 <ull_conn_llcp+0x119c>
	    !conn->llcp_phy.pause_tx &&
    2d04:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2d08:	07d7      	lsls	r7, r2, #31
    2d0a:	d47b      	bmi.n	2e04 <ull_conn_llcp+0x119c>
		if (conn->tx_head == conn->tx_data) {
    2d0c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2d10:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2d14:	428b      	cmp	r3, r1
    2d16:	f000 826a 	beq.w	31ee <ull_conn_llcp+0x1586>
		} else if (!conn->tx_ctrl) {
    2d1a:	2a00      	cmp	r2, #0
    2d1c:	f000 836e 	beq.w	33fc <ull_conn_llcp+0x1794>
	tx->next = conn->tx_ctrl_last->next;
    2d20:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2d24:	681a      	ldr	r2, [r3, #0]
    2d26:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    2d2a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    2d2e:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    2d32:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2d36:	2b00      	cmp	r3, #0
    2d38:	f000 81b8 	beq.w	30ac <ull_conn_llcp+0x1444>
		conn->procedure_expire = conn->procedure_reload;
    2d3c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2d40:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2d44:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		conn->procedure_expire = conn->procedure_reload;
    2d48:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	break;
    2d4c:	f7fe bf98 	b.w	1c80 <ull_conn_llcp+0x18>
		LL_ASSERT(rx && rx->hdr.link);
    2d50:	4a9a      	ldr	r2, [pc, #616]	; (2fbc <ull_conn_llcp+0x1354>)
    2d52:	499b      	ldr	r1, [pc, #620]	; (2fc0 <ull_conn_llcp+0x1358>)
    2d54:	489b      	ldr	r0, [pc, #620]	; (2fc4 <ull_conn_llcp+0x135c>)
    2d56:	f241 2349 	movw	r3, #4681	; 0x1249
    2d5a:	f023 fdff 	bl	2695c <printk>
    2d5e:	4040      	eors	r0, r0
    2d60:	f380 8811 	msr	BASEPRI, r0
    2d64:	f04f 0003 	mov.w	r0, #3
    2d68:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2d6a:	6828      	ldr	r0, [r5, #0]
    2d6c:	f7ff b9e1 	b.w	2132 <ull_conn_llcp+0x4ca>
		conn->tx_data_last = tx;
    2d70:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2d74:	f7ff ba44 	b.w	2200 <ull_conn_llcp+0x598>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2d78:	2201      	movs	r2, #1
    2d7a:	4610      	mov	r0, r2
    2d7c:	2102      	movs	r1, #2
    2d7e:	f012 f8a5 	bl	14ecc <mayfly_enable>
				return -ECANCELED;
    2d82:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2d86:	f7fe bf8c 	b.w	1ca2 <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    2d8a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2d8e:	2a00      	cmp	r2, #0
    2d90:	f47f abdd 	bne.w	254e <ull_conn_llcp+0x8e6>
			tx->next = conn->tx_head;
    2d94:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2d96:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2d9a:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2d9e:	f7ff bbde 	b.w	255e <ull_conn_llcp+0x8f6>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2da2:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    2da6:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
    2daa:	429a      	cmp	r2, r3
    2dac:	d055      	beq.n	2e5a <ull_conn_llcp+0x11f2>
			event_len_prep(conn);
    2dae:	f016 ffb7 	bl	19d20 <event_len_prep>
    2db2:	f7ff bb2a 	b.w	240a <ull_conn_llcp+0x7a2>
			LL_ASSERT(0);
    2db6:	4a81      	ldr	r2, [pc, #516]	; (2fbc <ull_conn_llcp+0x1354>)
    2db8:	4983      	ldr	r1, [pc, #524]	; (2fc8 <ull_conn_llcp+0x1360>)
    2dba:	4882      	ldr	r0, [pc, #520]	; (2fc4 <ull_conn_llcp+0x135c>)
    2dbc:	f640 439c 	movw	r3, #3228	; 0xc9c
    2dc0:	f023 fdcc 	bl	2695c <printk>
    2dc4:	4040      	eors	r0, r0
    2dc6:	f380 8811 	msr	BASEPRI, r0
    2dca:	f04f 0003 	mov.w	r0, #3
    2dce:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2dd0:	2700      	movs	r7, #0
		lll->interval = conn->llcp_cu.interval;
    2dd2:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    2dd6:	f7ff b842 	b.w	1e5e <ull_conn_llcp+0x1f6>
		conn->tx_data_last = tx;
    2dda:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2dde:	f7ff ba97 	b.w	2310 <ull_conn_llcp+0x6a8>
			conn->tx_data = conn->tx_data->next;
    2de2:	681a      	ldr	r2, [r3, #0]
    2de4:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2de8:	2900      	cmp	r1, #0
    2dea:	f47f a907 	bne.w	1ffc <ull_conn_llcp+0x394>
			tx->next = conn->tx_head->next;
    2dee:	681a      	ldr	r2, [r3, #0]
    2df0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2df2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2df4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2df6:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	f47f a909 	bne.w	2012 <ull_conn_llcp+0x3aa>
    2e00:	f7ff bb0c 	b.w	241c <ull_conn_llcp+0x7b4>
		if (!conn->tx_ctrl) {
    2e04:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2e08:	2a00      	cmp	r2, #0
    2e0a:	d189      	bne.n	2d20 <ull_conn_llcp+0x10b8>
			tx->next = conn->tx_head;
    2e0c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2e10:	e9c4 8867 	strd	r8, r8, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2e14:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
    2e18:	e78d      	b.n	2d36 <ull_conn_llcp+0x10ce>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2e1a:	4590      	cmp	r8, r2
    2e1c:	f47f a973 	bne.w	2106 <ull_conn_llcp+0x49e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2e20:	2301      	movs	r3, #1
    2e22:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2e24:	4629      	mov	r1, r5
    2e26:	f015 fe95 	bl	18b54 <ll_rx_put>
				rx = conn->llcp_rx;
    2e2a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
				LL_ASSERT(rx && rx->hdr.link);
    2e2e:	2d00      	cmp	r5, #0
    2e30:	f000 829d 	beq.w	336e <ull_conn_llcp+0x1706>
    2e34:	6828      	ldr	r0, [r5, #0]
    2e36:	2800      	cmp	r0, #0
    2e38:	f000 8299 	beq.w	336e <ull_conn_llcp+0x1706>
				conn->llcp_rx = rx->hdr.link->mem;
    2e3c:	6842      	ldr	r2, [r0, #4]
    2e3e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2e42:	2301      	movs	r3, #1
    2e44:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2e46:	4629      	mov	r1, r5
    2e48:	f015 fe84 	bl	18b54 <ll_rx_put>
			ll_rx_sched();
    2e4c:	f015 fe8c 	bl	18b68 <ll_rx_sched>
			return;
    2e50:	f7fe bf1d 	b.w	1c8e <ull_conn_llcp+0x26>
	conn->lll.enc_tx = 1;
    2e54:	f043 0310 	orr.w	r3, r3, #16
    2e58:	e521      	b.n	289e <ull_conn_llcp+0xc36>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2e5a:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    2e5e:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
    2e62:	429a      	cmp	r2, r3
    2e64:	f43e af13 	beq.w	1c8e <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    2e68:	f890 2196 	ldrb.w	r2, [r0, #406]	; 0x196
    2e6c:	f002 0103 	and.w	r1, r2, #3
    2e70:	2903      	cmp	r1, #3
    2e72:	f000 822a 	beq.w	32ca <ull_conn_llcp+0x1662>
    2e76:	2900      	cmp	r1, #0
    2e78:	f47e af09 	bne.w	1c8e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2e7c:	484e      	ldr	r0, [pc, #312]	; (2fb8 <ull_conn_llcp+0x1350>)
    2e7e:	f011 ff7f 	bl	14d80 <mem_acquire>
		if (!tx) {
    2e82:	4601      	mov	r1, r0
    2e84:	2800      	cmp	r0, #0
    2e86:	f43f aac0 	beq.w	240a <ull_conn_llcp+0x7a2>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2e8a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2e8e:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2e92:	2201      	movs	r2, #1
    2e94:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2e98:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2e9c:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2ea0:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2ea4:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2ea8:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
    2eac:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2eb0:	f360 07c3 	bfi	r7, r0, #3, #1
    2eb4:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2eb8:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ebc:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2ebe:	f367 02c5 	bfi	r2, r7, #3, #3
    2ec2:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2ec6:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    2eca:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ecc:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    2ed0:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2ed2:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ed4:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    2ed6:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2ed8:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2eda:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2edc:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2ede:	4620      	mov	r0, r4
    2ee0:	f016 fc28 	bl	19734 <ctrl_tx_pause_enqueue>
    2ee4:	e72a      	b.n	2d3c <ull_conn_llcp+0x10d4>
		if (!conn->tx_ctrl) {
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	f47f ac41 	bne.w	276e <ull_conn_llcp+0xb06>
			tx->next = conn->tx_head;
    2eec:	f845 1c09 	str.w	r1, [r5, #-9]
				conn->tx_ctrl = tx;
    2ef0:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2ef4:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2ef8:	2900      	cmp	r1, #0
    2efa:	f47e aec8 	bne.w	1c8e <ull_conn_llcp+0x26>
    2efe:	e47d      	b.n	27fc <ull_conn_llcp+0xb94>
		if (!conn->tx_ctrl) {
    2f00:	2900      	cmp	r1, #0
    2f02:	f47f ac6e 	bne.w	27e2 <ull_conn_llcp+0xb7a>
			tx->next = conn->tx_head;
    2f06:	f845 3c09 	str.w	r3, [r5, #-9]
				conn->tx_ctrl = tx;
    2f0a:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2f0e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    2f12:	e470      	b.n	27f6 <ull_conn_llcp+0xb8e>
		conn_upd_curr = conn;
    2f14:	601c      	str	r4, [r3, #0]
    2f16:	f7ff bba2 	b.w	265e <ull_conn_llcp+0x9f6>
		LL_ASSERT(0);
    2f1a:	4a28      	ldr	r2, [pc, #160]	; (2fbc <ull_conn_llcp+0x1354>)
    2f1c:	492a      	ldr	r1, [pc, #168]	; (2fc8 <ull_conn_llcp+0x1360>)
    2f1e:	f640 63a1 	movw	r3, #3745	; 0xea1
    2f22:	e62d      	b.n	2b80 <ull_conn_llcp+0xf18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2f24:	4824      	ldr	r0, [pc, #144]	; (2fb8 <ull_conn_llcp+0x1350>)
    2f26:	f011 ff2b 	bl	14d80 <mem_acquire>
		if (tx) {
    2f2a:	2800      	cmp	r0, #0
    2f2c:	f43f aa6d 	beq.w	240a <ull_conn_llcp+0x7a2>
			conn->llcp_version.ack--;
    2f30:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
    2f34:	3b01      	subs	r3, #1
    2f36:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->llcp_version.tx = 1U;
    2f3a:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    2f3e:	f043 0301 	orr.w	r3, r3, #1
    2f42:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f46:	7903      	ldrb	r3, [r0, #4]
    2f48:	f043 0303 	orr.w	r3, r3, #3
    2f4c:	7103      	strb	r3, [r0, #4]
			pdu->len =
    2f4e:	2306      	movs	r3, #6
    2f50:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    2f52:	230c      	movs	r3, #12
    2f54:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    2f56:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2f58:	f06f 030e 	mvn.w	r3, #14
    2f5c:	7243      	strb	r3, [r0, #9]
    2f5e:	2305      	movs	r3, #5
    2f60:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f66:	72c3      	strb	r3, [r0, #11]
    2f68:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    2f6a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2f6e:	2b00      	cmp	r3, #0
    2f70:	f000 80ad 	beq.w	30ce <ull_conn_llcp+0x1466>
	    !conn->llcp_enc.pause_tx &&
    2f74:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2f78:	0792      	lsls	r2, r2, #30
    2f7a:	f100 80a8 	bmi.w	30ce <ull_conn_llcp+0x1466>
	    !conn->llcp_phy.pause_tx &&
    2f7e:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2f82:	07d7      	lsls	r7, r2, #31
    2f84:	f100 80a3 	bmi.w	30ce <ull_conn_llcp+0x1466>
		if (conn->tx_head == conn->tx_data) {
    2f88:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2f8c:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2f8e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2f92:	f000 8227 	beq.w	33e4 <ull_conn_llcp+0x177c>
		} else if (!conn->tx_ctrl) {
    2f96:	2a00      	cmp	r2, #0
    2f98:	f000 8334 	beq.w	3604 <ull_conn_llcp+0x199c>
	tx->next = conn->tx_ctrl_last->next;
    2f9c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2fa0:	681a      	ldr	r2, [r3, #0]
    2fa2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2fa4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2fa6:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2faa:	6803      	ldr	r3, [r0, #0]
    2fac:	2b00      	cmp	r3, #0
    2fae:	f47f aec5 	bne.w	2d3c <ull_conn_llcp+0x10d4>
		conn->tx_data_last = tx;
    2fb2:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
			conn->procedure_expire = conn->procedure_reload;
    2fb6:	e6c1      	b.n	2d3c <ull_conn_llcp+0x10d4>
    2fb8:	200037e0 	.word	0x200037e0
    2fbc:	0002fc68 	.word	0x0002fc68
    2fc0:	0002fd48 	.word	0x0002fd48
    2fc4:	0002f6fc 	.word	0x0002f6fc
    2fc8:	0002f794 	.word	0x0002f794
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2fcc:	7903      	ldrb	r3, [r0, #4]
    2fce:	f043 0303 	orr.w	r3, r3, #3
    2fd2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2fd4:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    2fd8:	07da      	lsls	r2, r3, #31
    2fda:	d545      	bpl.n	3068 <ull_conn_llcp+0x1400>
	    (conn->llcp_feature.features_conn &
    2fdc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	if (conn->common.fex_valid &&
    2fe0:	075b      	lsls	r3, r3, #29
    2fe2:	d541      	bpl.n	3068 <ull_conn_llcp+0x1400>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2fe4:	2311      	movs	r3, #17
    2fe6:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2fe8:	2303      	movs	r3, #3
    2fea:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    2fec:	7245      	strb	r5, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    2fee:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    2ff0:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	conn->llcp.encryption.error_code = 0U;
    2ff4:	2200      	movs	r2, #0
    2ff6:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
	if (
    2ffa:	b35b      	cbz	r3, 3054 <ull_conn_llcp+0x13ec>
	    !conn->llcp_enc.pause_tx &&
    2ffc:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3000:	0797      	lsls	r7, r2, #30
    3002:	d427      	bmi.n	3054 <ull_conn_llcp+0x13ec>
	    !conn->llcp_phy.pause_tx &&
    3004:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    3008:	07d5      	lsls	r5, r2, #31
    300a:	d423      	bmi.n	3054 <ull_conn_llcp+0x13ec>
		if (conn->tx_head == conn->tx_data) {
    300c:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    3010:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    3012:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    3016:	f000 8139 	beq.w	328c <ull_conn_llcp+0x1624>
		} else if (!conn->tx_ctrl) {
    301a:	2a00      	cmp	r2, #0
    301c:	f000 821f 	beq.w	345e <ull_conn_llcp+0x17f6>
	tx->next = conn->tx_ctrl_last->next;
    3020:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    3024:	681a      	ldr	r2, [r3, #0]
    3026:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    3028:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    302a:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    302e:	6833      	ldr	r3, [r6, #0]
    3030:	2b00      	cmp	r3, #0
    3032:	d076      	beq.n	3122 <ull_conn_llcp+0x14ba>
			conn->llcp_ack = conn->llcp_req;
    3034:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    3038:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			return;
    303c:	f7fe be27 	b.w	1c8e <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
    3040:	2900      	cmp	r1, #0
    3042:	f47f aae8 	bne.w	2616 <ull_conn_llcp+0x9ae>
			tx->next = conn->tx_head;
    3046:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    3048:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    304c:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
    3050:	f7ff bae8 	b.w	2624 <ull_conn_llcp+0x9bc>
		if (!conn->tx_ctrl) {
    3054:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    3058:	2a00      	cmp	r2, #0
    305a:	d1e1      	bne.n	3020 <ull_conn_llcp+0x13b8>
			tx->next = conn->tx_head;
    305c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    305e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3062:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    3066:	e7e2      	b.n	302e <ull_conn_llcp+0x13c6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    3068:	230d      	movs	r3, #13
    306a:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    306c:	7235      	strb	r5, [r6, #8]
    306e:	2702      	movs	r7, #2
    3070:	e7bd      	b.n	2fee <ull_conn_llcp+0x1386>
	switch (conn->llcp_conn_param.state) {
    3072:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    3076:	f002 020f 	and.w	r2, r2, #15
    307a:	2a08      	cmp	r2, #8
    307c:	f200 834b 	bhi.w	3716 <ull_conn_llcp+0x1aae>
    3080:	a001      	add	r0, pc, #4	; (adr r0, 3088 <ull_conn_llcp+0x1420>)
    3082:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    3086:	bf00      	nop
    3088:	00002ad1 	.word	0x00002ad1
    308c:	00002a49 	.word	0x00002a49
    3090:	000029f9 	.word	0x000029f9
    3094:	00001c8f 	.word	0x00001c8f
    3098:	00001c8f 	.word	0x00001c8f
    309c:	00001c8f 	.word	0x00001c8f
    30a0:	00001c8f 	.word	0x00001c8f
    30a4:	00001c8f 	.word	0x00001c8f
    30a8:	0000298d 	.word	0x0000298d
		conn->tx_data_last = tx;
    30ac:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
		conn->procedure_expire = conn->procedure_reload;
    30b0:	e644      	b.n	2d3c <ull_conn_llcp+0x10d4>
			conn->tx_data = conn->tx_data->next;
    30b2:	6819      	ldr	r1, [r3, #0]
    30b4:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    30b8:	2a00      	cmp	r2, #0
    30ba:	f47f a896 	bne.w	21ea <ull_conn_llcp+0x582>
			tx->next = conn->tx_head->next;
    30be:	681a      	ldr	r2, [r3, #0]
    30c0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    30c2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    30c4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    30c6:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    30ca:	f7ff b896 	b.w	21fa <ull_conn_llcp+0x592>
		if (!conn->tx_ctrl) {
    30ce:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    30d2:	2a00      	cmp	r2, #0
    30d4:	f47f af62 	bne.w	2f9c <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head;
    30d8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    30da:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    30de:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    30e2:	e762      	b.n	2faa <ull_conn_llcp+0x1342>
							 lll->latency +
    30e4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    30e6:	3206      	adds	r2, #6
    30e8:	442a      	add	r2, r5
			conn->llcp.phy_upd_ind.instant = event_counter +
    30ea:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
			(void)ll_pdu_rx_alloc();
    30ee:	f015 fd5f 	bl	18bb0 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    30f2:	f8d8 3000 	ldr.w	r3, [r8]
    30f6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    30fa:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    30fc:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
				rx = ll_pdu_rx_alloc();
    3100:	f015 fd56 	bl	18bb0 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    3104:	6803      	ldr	r3, [r0, #0]
    3106:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    310a:	6059      	str	r1, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    310c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    3110:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
				conn->llcp_rx = rx;
    3114:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    3118:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    311c:	095b      	lsrs	r3, r3, #5
    311e:	f7ff ba56 	b.w	25ce <ull_conn_llcp+0x966>
		conn->tx_data_last = tx;
    3122:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    3126:	e785      	b.n	3034 <ull_conn_llcp+0x13cc>
	    ((pdu_data_tx->llctrl.opcode !=
    3128:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    312a:	2a03      	cmp	r2, #3
    312c:	f43f ae5f 	beq.w	2dee <ull_conn_llcp+0x1186>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3130:	2a0a      	cmp	r2, #10
    3132:	f47e af5d 	bne.w	1ff0 <ull_conn_llcp+0x388>
    3136:	e65a      	b.n	2dee <ull_conn_llcp+0x1186>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    3138:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
    313a:	4629      	mov	r1, r5
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    313c:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    313e:	f015 fd09 	bl	18b54 <ll_rx_put>
			ll_rx_sched();
    3142:	f015 fd11 	bl	18b68 <ll_rx_sched>
			return;
    3146:	f7fe bda2 	b.w	1c8e <ull_conn_llcp+0x26>
				(void)ll_pdu_rx_alloc();
    314a:	f015 fd31 	bl	18bb0 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    314e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3150:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    3154:	231c      	movs	r3, #28
				upd->status = 0U;
    3156:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    315a:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    315e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
				ll_rx_put(rx->hdr.link, rx);
    3162:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    3166:	f3c3 0302 	ubfx	r3, r3, #0, #3
    316a:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    316e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    3172:	f3c3 0302 	ubfx	r3, r3, #0, #3
    3176:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    317a:	4641      	mov	r1, r8
    317c:	f015 fcea 	bl	18b54 <ll_rx_put>
				ll_rx_sched();
    3180:	f015 fcf2 	bl	18b68 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    3184:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    3188:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    318c:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    3190:	095b      	lsrs	r3, r3, #5
    3192:	f7ff ba1c 	b.w	25ce <ull_conn_llcp+0x966>
		if (!conn->tx_ctrl) {
    3196:	2d00      	cmp	r5, #0
    3198:	f47f ac20 	bne.w	29dc <ull_conn_llcp+0xd74>
			tx->next = conn->tx_head;
    319c:	f840 1c13 	str.w	r1, [r0, #-19]
				conn->tx_ctrl = tx;
    31a0:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    31a4:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    31a8:	e420      	b.n	29ec <ull_conn_llcp+0xd84>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    31aa:	791a      	ldrb	r2, [r3, #4]
    31ac:	f002 0203 	and.w	r2, r2, #3
    31b0:	2a03      	cmp	r2, #3
    31b2:	f000 80eb 	beq.w	338c <ull_conn_llcp+0x1724>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    31b6:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    31ba:	f7ff b816 	b.w	21ea <ull_conn_llcp+0x582>
			conn->tx_data = conn->tx_data->next;
    31be:	6819      	ldr	r1, [r3, #0]
    31c0:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    31c4:	2a00      	cmp	r2, #0
    31c6:	f47f a9c2 	bne.w	254e <ull_conn_llcp+0x8e6>
			tx->next = conn->tx_head->next;
    31ca:	681a      	ldr	r2, [r3, #0]
    31cc:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    31ce:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    31d0:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    31d2:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    31d6:	f7ff b9c2 	b.w	255e <ull_conn_llcp+0x8f6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    31da:	791a      	ldrb	r2, [r3, #4]
    31dc:	f002 0203 	and.w	r2, r2, #3
    31e0:	2a03      	cmp	r2, #3
    31e2:	f000 8114 	beq.w	340e <ull_conn_llcp+0x17a6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    31e6:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    31ea:	f7ff b886 	b.w	22fa <ull_conn_llcp+0x692>
			conn->tx_data = conn->tx_data->next;
    31ee:	6819      	ldr	r1, [r3, #0]
    31f0:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    31f4:	2a00      	cmp	r2, #0
    31f6:	f47f ad93 	bne.w	2d20 <ull_conn_llcp+0x10b8>
			tx->next = conn->tx_head->next;
    31fa:	681a      	ldr	r2, [r3, #0]
    31fc:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    3200:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    3204:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    3208:	e9c4 8868 	strd	r8, r8, [r4, #416]	; 0x1a0
    320c:	e593      	b.n	2d36 <ull_conn_llcp+0x10ce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    320e:	489a      	ldr	r0, [pc, #616]	; (3478 <ull_conn_llcp+0x1810>)
    3210:	f011 fdb6 	bl	14d80 <mem_acquire>
		if (!tx) {
    3214:	2800      	cmp	r0, #0
    3216:	f43f a8f8 	beq.w	240a <ull_conn_llcp+0x7a2>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    321a:	7902      	ldrb	r2, [r0, #4]
    321c:	f042 0203 	orr.w	r2, r2, #3
    3220:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    3222:	2211      	movs	r2, #17
    3224:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    3226:	2203      	movs	r2, #3
    3228:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    322a:	220f      	movs	r2, #15
    322c:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    322e:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
    3232:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    3234:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    3238:	2a00      	cmp	r2, #0
    323a:	f000 80f1 	beq.w	3420 <ull_conn_llcp+0x17b8>
	    !conn->llcp_enc.pause_tx &&
    323e:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3242:	0789      	lsls	r1, r1, #30
    3244:	f100 80ec 	bmi.w	3420 <ull_conn_llcp+0x17b8>
	    !conn->llcp_phy.pause_tx &&
    3248:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    324c:	07cb      	lsls	r3, r1, #31
    324e:	f100 80e7 	bmi.w	3420 <ull_conn_llcp+0x17b8>
		if (conn->tx_head == conn->tx_data) {
    3252:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    3256:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    3258:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    325c:	f000 81f1 	beq.w	3642 <ull_conn_llcp+0x19da>
		} else if (!conn->tx_ctrl) {
    3260:	2900      	cmp	r1, #0
    3262:	f000 81fd 	beq.w	3660 <ull_conn_llcp+0x19f8>
	tx->next = conn->tx_ctrl_last->next;
    3266:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    326a:	6811      	ldr	r1, [r2, #0]
    326c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    326e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    3270:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    3274:	6802      	ldr	r2, [r0, #0]
    3276:	2a00      	cmp	r2, #0
    3278:	f000 81ef 	beq.w	365a <ull_conn_llcp+0x19f2>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    327c:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    3280:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    3284:	2300      	movs	r3, #0
    3286:	603b      	str	r3, [r7, #0]
		return;
    3288:	f7ff b8bf 	b.w	240a <ull_conn_llcp+0x7a2>
			conn->tx_data = conn->tx_data->next;
    328c:	6819      	ldr	r1, [r3, #0]
    328e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3292:	2a00      	cmp	r2, #0
    3294:	f47f aec4 	bne.w	3020 <ull_conn_llcp+0x13b8>
			tx->next = conn->tx_head->next;
    3298:	681a      	ldr	r2, [r3, #0]
    329a:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    329c:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    329e:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    32a2:	e6c4      	b.n	302e <ull_conn_llcp+0x13c6>
			conn->tx_data = conn->tx_data->next;
    32a4:	6808      	ldr	r0, [r1, #0]
    32a6:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    32aa:	2b00      	cmp	r3, #0
    32ac:	f47f aa5f 	bne.w	276e <ull_conn_llcp+0xb06>
			tx->next = conn->tx_head->next;
    32b0:	680b      	ldr	r3, [r1, #0]
    32b2:	f845 3c09 	str.w	r3, [r5, #-9]
			conn->tx_head->next = tx;
    32b6:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
    32b8:	f855 1c09 	ldr.w	r1, [r5, #-9]
				conn->tx_ctrl_last = tx;
    32bc:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
	if (!tx->next) {
    32c0:	2900      	cmp	r1, #0
    32c2:	f47e ace4 	bne.w	1c8e <ull_conn_llcp+0x26>
    32c6:	f7ff ba99 	b.w	27fc <ull_conn_llcp+0xb94>
		if (conn->llcp_phy.tx & PHY_2M) {
    32ca:	0717      	lsls	r7, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    32cc:	f880 3195 	strb.w	r3, [r0, #405]	; 0x195
		if (conn->llcp_phy.tx & PHY_2M) {
    32d0:	f3c2 0382 	ubfx	r3, r2, #2, #3
    32d4:	f140 814f 	bpl.w	3576 <ull_conn_llcp+0x190e>
			conn->llcp_phy.tx = PHY_2M;
    32d8:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    32dc:	2202      	movs	r2, #2
    32de:	f362 0384 	bfi	r3, r2, #2, #3
    32e2:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		if (conn->llcp_phy.rx & PHY_2M) {
    32e6:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    32ea:	0659      	lsls	r1, r3, #25
    32ec:	ea4f 1253 	mov.w	r2, r3, lsr #5
    32f0:	f140 8139 	bpl.w	3566 <ull_conn_llcp+0x18fe>
			conn->llcp_phy.rx = PHY_2M;
    32f4:	2202      	movs	r2, #2
    32f6:	f362 1347 	bfi	r3, r2, #5, #3
    32fa:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    32fe:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    3302:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3306:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    330a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    330e:	f3c2 0182 	ubfx	r1, r2, #2, #3
    3312:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3316:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    331a:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    331e:	428f      	cmp	r7, r1
    3320:	bf08      	it	eq
    3322:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3324:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    3326:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    332a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    332e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    3332:	bf08      	it	eq
    3334:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3336:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    333a:	f1ae 0c02 	sub.w	ip, lr, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    333e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    3342:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    3344:	f884 c0bc 	strb.w	ip, [r4, #188]	; 0xbc
		conn->llcp.phy_upd_ind.initiate = 1U;
    3348:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
    334c:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    3350:	f7fe bcb7 	b.w	1cc2 <ull_conn_llcp+0x5a>
			conn->tx_data = conn->tx_data->next;
    3354:	681a      	ldr	r2, [r3, #0]
    3356:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    335a:	2900      	cmp	r1, #0
    335c:	f47f a95b 	bne.w	2616 <ull_conn_llcp+0x9ae>
			tx->next = conn->tx_head->next;
    3360:	681a      	ldr	r2, [r3, #0]
    3362:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    3364:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    3366:	e9c4 7768 	strd	r7, r7, [r4, #416]	; 0x1a0
    336a:	f7ff b95b 	b.w	2624 <ull_conn_llcp+0x9bc>
				LL_ASSERT(rx && rx->hdr.link);
    336e:	4a43      	ldr	r2, [pc, #268]	; (347c <ull_conn_llcp+0x1814>)
    3370:	4943      	ldr	r1, [pc, #268]	; (3480 <ull_conn_llcp+0x1818>)
    3372:	4844      	ldr	r0, [pc, #272]	; (3484 <ull_conn_llcp+0x181c>)
    3374:	f241 232c 	movw	r3, #4652	; 0x122c
    3378:	f023 faf0 	bl	2695c <printk>
    337c:	4040      	eors	r0, r0
    337e:	f380 8811 	msr	BASEPRI, r0
    3382:	f04f 0003 	mov.w	r0, #3
    3386:	df02      	svc	2
    3388:	6828      	ldr	r0, [r5, #0]
    338a:	e557      	b.n	2e3c <ull_conn_llcp+0x11d4>
	    ((pdu_data_tx->llctrl.opcode !=
    338c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    338e:	2a03      	cmp	r2, #3
    3390:	f43f ae95 	beq.w	30be <ull_conn_llcp+0x1456>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3394:	2a0a      	cmp	r2, #10
    3396:	f47f af0e 	bne.w	31b6 <ull_conn_llcp+0x154e>
    339a:	e690      	b.n	30be <ull_conn_llcp+0x1456>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    339c:	791a      	ldrb	r2, [r3, #4]
    339e:	f002 0203 	and.w	r2, r2, #3
    33a2:	2a03      	cmp	r2, #3
    33a4:	f000 80d7 	beq.w	3556 <ull_conn_llcp+0x18ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    33a8:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    33ac:	f7ff b8cf 	b.w	254e <ull_conn_llcp+0x8e6>
			conn->tx_data = conn->tx_data->next;
    33b0:	6818      	ldr	r0, [r3, #0]
    33b2:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    33b6:	2900      	cmp	r1, #0
    33b8:	f47f aa13 	bne.w	27e2 <ull_conn_llcp+0xb7a>
			tx->next = conn->tx_head->next;
    33bc:	6819      	ldr	r1, [r3, #0]
    33be:	f845 1c09 	str.w	r1, [r5, #-9]
			conn->tx_head->next = tx;
    33c2:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    33c4:	f855 3c09 	ldr.w	r3, [r5, #-9]
				conn->tx_ctrl_last = tx;
    33c8:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    33cc:	f7ff ba13 	b.w	27f6 <ull_conn_llcp+0xb8e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33d0:	791a      	ldrb	r2, [r3, #4]
    33d2:	f002 0203 	and.w	r2, r2, #3
    33d6:	2a03      	cmp	r2, #3
    33d8:	f000 811c 	beq.w	3614 <ull_conn_llcp+0x19ac>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    33dc:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    33e0:	f7ff b919 	b.w	2616 <ull_conn_llcp+0x9ae>
			conn->tx_data = conn->tx_data->next;
    33e4:	6819      	ldr	r1, [r3, #0]
    33e6:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    33ea:	2a00      	cmp	r2, #0
    33ec:	f47f add6 	bne.w	2f9c <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head->next;
    33f0:	681a      	ldr	r2, [r3, #0]
    33f2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    33f4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    33f6:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    33fa:	e5d6      	b.n	2faa <ull_conn_llcp+0x1342>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33fc:	791a      	ldrb	r2, [r3, #4]
    33fe:	f002 0203 	and.w	r2, r2, #3
    3402:	2a03      	cmp	r2, #3
    3404:	f000 8115 	beq.w	3632 <ull_conn_llcp+0x19ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3408:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    340c:	e488      	b.n	2d20 <ull_conn_llcp+0x10b8>
	    ((pdu_data_tx->llctrl.opcode !=
    340e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3410:	2a03      	cmp	r2, #3
    3412:	f43f aa66 	beq.w	28e2 <ull_conn_llcp+0xc7a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3416:	2a0a      	cmp	r2, #10
    3418:	f47f aee5 	bne.w	31e6 <ull_conn_llcp+0x157e>
    341c:	f7ff ba61 	b.w	28e2 <ull_conn_llcp+0xc7a>
		if (!conn->tx_ctrl) {
    3420:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    3424:	2900      	cmp	r1, #0
    3426:	f47f af1e 	bne.w	3266 <ull_conn_llcp+0x15fe>
			tx->next = conn->tx_head;
    342a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    342c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3430:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    3434:	e71e      	b.n	3274 <ull_conn_llcp+0x160c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3436:	7919      	ldrb	r1, [r3, #4]
    3438:	f001 0103 	and.w	r1, r1, #3
    343c:	2903      	cmp	r1, #3
    343e:	f000 80d1 	beq.w	35e4 <ull_conn_llcp+0x197c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3442:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3446:	f7ff b9cc 	b.w	27e2 <ull_conn_llcp+0xb7a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    344a:	790b      	ldrb	r3, [r1, #4]
    344c:	f003 0303 	and.w	r3, r3, #3
    3450:	2b03      	cmp	r3, #3
    3452:	f000 80cf 	beq.w	35f4 <ull_conn_llcp+0x198c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3456:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    345a:	f7ff b988 	b.w	276e <ull_conn_llcp+0xb06>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    345e:	791a      	ldrb	r2, [r3, #4]
    3460:	f002 0203 	and.w	r2, r2, #3
    3464:	2a03      	cmp	r2, #3
    3466:	f000 810f 	beq.w	3688 <ull_conn_llcp+0x1a20>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    346a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    346e:	e5d7      	b.n	3020 <ull_conn_llcp+0x13b8>
			conn->llcp_cu.interval = interval_max;
    3470:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
    3474:	f7ff bb11 	b.w	2a9a <ull_conn_llcp+0xe32>
    3478:	200037e0 	.word	0x200037e0
    347c:	0002fc68 	.word	0x0002fc68
    3480:	0002fd48 	.word	0x0002fd48
    3484:	0002f6fc 	.word	0x0002f6fc
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3488:	48a6      	ldr	r0, [pc, #664]	; (3724 <ull_conn_llcp+0x1abc>)
    348a:	f011 fc79 	bl	14d80 <mem_acquire>
	if (!tx) {
    348e:	2800      	cmp	r0, #0
    3490:	f43e afbb 	beq.w	240a <ull_conn_llcp+0x7a2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    3494:	7902      	ldrb	r2, [r0, #4]
    3496:	f042 0203 	orr.w	r2, r2, #3
    349a:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    349c:	2218      	movs	r2, #24
    349e:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    34a0:	2210      	movs	r2, #16
    34a2:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    34a4:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
    34a8:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    34aa:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
    34ae:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    34b0:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    34b4:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    34b6:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    34ba:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    34bc:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
    34c0:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    34c2:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
    34c6:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    34ca:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
    34ce:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    34d2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
    34d6:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    34da:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
    34de:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    34e2:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
    34e6:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    34ea:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
    34ee:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    34f2:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
    34f6:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    34fa:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    34fe:	2a00      	cmp	r2, #0
    3500:	d043      	beq.n	358a <ull_conn_llcp+0x1922>
	    !conn->llcp_enc.pause_tx &&
    3502:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3506:	0789      	lsls	r1, r1, #30
    3508:	d43f      	bmi.n	358a <ull_conn_llcp+0x1922>
	    !conn->llcp_phy.pause_tx &&
    350a:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    350e:	07cb      	lsls	r3, r1, #31
    3510:	d43b      	bmi.n	358a <ull_conn_llcp+0x1922>
		if (conn->tx_head == conn->tx_data) {
    3512:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    3516:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    3518:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    351c:	f000 80c2 	beq.w	36a4 <ull_conn_llcp+0x1a3c>
		} else if (!conn->tx_ctrl) {
    3520:	2900      	cmp	r1, #0
    3522:	f000 80d2 	beq.w	36ca <ull_conn_llcp+0x1a62>
	tx->next = conn->tx_ctrl_last->next;
    3526:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    352a:	6811      	ldr	r1, [r2, #0]
    352c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    352e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    3530:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    3534:	6802      	ldr	r2, [r0, #0]
    3536:	2a00      	cmp	r2, #0
    3538:	f000 80a3 	beq.w	3682 <ull_conn_llcp+0x1a1a>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    353c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    3540:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    3544:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    3548:	2205      	movs	r2, #5
    354a:	f362 0303 	bfi	r3, r2, #0, #4
    354e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    3552:	f7fe bb95 	b.w	1c80 <ull_conn_llcp+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
    3556:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3558:	2a03      	cmp	r2, #3
    355a:	f43f ae36 	beq.w	31ca <ull_conn_llcp+0x1562>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    355e:	2a0a      	cmp	r2, #10
    3560:	f47f af22 	bne.w	33a8 <ull_conn_llcp+0x1740>
    3564:	e631      	b.n	31ca <ull_conn_llcp+0x1562>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    3566:	07d7      	lsls	r7, r2, #31
    3568:	d519      	bpl.n	359e <ull_conn_llcp+0x1936>
			conn->llcp_phy.rx = PHY_1M;
    356a:	2201      	movs	r2, #1
    356c:	f362 1347 	bfi	r3, r2, #5, #3
    3570:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    3574:	e6c3      	b.n	32fe <ull_conn_llcp+0x1696>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    3576:	07d8      	lsls	r0, r3, #31
    3578:	d51a      	bpl.n	35b0 <ull_conn_llcp+0x1948>
			conn->llcp_phy.tx = PHY_1M;
    357a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    357e:	2201      	movs	r2, #1
    3580:	f362 0384 	bfi	r3, r2, #2, #3
    3584:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    3588:	e6ad      	b.n	32e6 <ull_conn_llcp+0x167e>
		if (!conn->tx_ctrl) {
    358a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    358e:	2900      	cmp	r1, #0
    3590:	d1c9      	bne.n	3526 <ull_conn_llcp+0x18be>
			tx->next = conn->tx_head;
    3592:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    3594:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3598:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    359c:	e7ca      	b.n	3534 <ull_conn_llcp+0x18cc>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    359e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    35a2:	bf18      	it	ne
    35a4:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    35a6:	f362 1347 	bfi	r3, r2, #5, #3
    35aa:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    35ae:	e6a6      	b.n	32fe <ull_conn_llcp+0x1696>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    35b0:	f013 0304 	ands.w	r3, r3, #4
    35b4:	f000 8082 	beq.w	36bc <ull_conn_llcp+0x1a54>
			conn->llcp_phy.tx = PHY_CODED;
    35b8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    35bc:	2204      	movs	r2, #4
    35be:	f362 0384 	bfi	r3, r2, #2, #3
    35c2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    35c6:	e68e      	b.n	32e6 <ull_conn_llcp+0x167e>
			conn->tx_data = conn->tx_data->next;
    35c8:	680b      	ldr	r3, [r1, #0]
    35ca:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    35ce:	2d00      	cmp	r5, #0
    35d0:	f47f aa04 	bne.w	29dc <ull_conn_llcp+0xd74>
			tx->next = conn->tx_head->next;
    35d4:	680b      	ldr	r3, [r1, #0]
    35d6:	f840 3c13 	str.w	r3, [r0, #-19]
			conn->tx_head->next = tx;
    35da:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
    35dc:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    35e0:	f7ff ba04 	b.w	29ec <ull_conn_llcp+0xd84>
	    ((pdu_data_tx->llctrl.opcode !=
    35e4:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    35e6:	2903      	cmp	r1, #3
    35e8:	f43f aee8 	beq.w	33bc <ull_conn_llcp+0x1754>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    35ec:	290a      	cmp	r1, #10
    35ee:	f47f af28 	bne.w	3442 <ull_conn_llcp+0x17da>
    35f2:	e6e3      	b.n	33bc <ull_conn_llcp+0x1754>
	    ((pdu_data_tx->llctrl.opcode !=
    35f4:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    35f6:	2b03      	cmp	r3, #3
    35f8:	f43f ae5a 	beq.w	32b0 <ull_conn_llcp+0x1648>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    35fc:	2b0a      	cmp	r3, #10
    35fe:	f47f af2a 	bne.w	3456 <ull_conn_llcp+0x17ee>
    3602:	e655      	b.n	32b0 <ull_conn_llcp+0x1648>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3604:	791a      	ldrb	r2, [r3, #4]
    3606:	f002 0203 	and.w	r2, r2, #3
    360a:	2a03      	cmp	r2, #3
    360c:	d00a      	beq.n	3624 <ull_conn_llcp+0x19bc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    360e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3612:	e4c3      	b.n	2f9c <ull_conn_llcp+0x1334>
	    ((pdu_data_tx->llctrl.opcode !=
    3614:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3616:	2a03      	cmp	r2, #3
    3618:	f43f aea2 	beq.w	3360 <ull_conn_llcp+0x16f8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    361c:	2a0a      	cmp	r2, #10
    361e:	f47f aedd 	bne.w	33dc <ull_conn_llcp+0x1774>
    3622:	e69d      	b.n	3360 <ull_conn_llcp+0x16f8>
	    ((pdu_data_tx->llctrl.opcode !=
    3624:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3626:	2a03      	cmp	r2, #3
    3628:	f43f aee2 	beq.w	33f0 <ull_conn_llcp+0x1788>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    362c:	2a0a      	cmp	r2, #10
    362e:	d1ee      	bne.n	360e <ull_conn_llcp+0x19a6>
    3630:	e6de      	b.n	33f0 <ull_conn_llcp+0x1788>
	    ((pdu_data_tx->llctrl.opcode !=
    3632:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3634:	2a03      	cmp	r2, #3
    3636:	f43f ade0 	beq.w	31fa <ull_conn_llcp+0x1592>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    363a:	2a0a      	cmp	r2, #10
    363c:	f47f aee4 	bne.w	3408 <ull_conn_llcp+0x17a0>
    3640:	e5db      	b.n	31fa <ull_conn_llcp+0x1592>
			conn->tx_data = conn->tx_data->next;
    3642:	6813      	ldr	r3, [r2, #0]
    3644:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3648:	2900      	cmp	r1, #0
    364a:	f47f ae0c 	bne.w	3266 <ull_conn_llcp+0x15fe>
			tx->next = conn->tx_head->next;
    364e:	6811      	ldr	r1, [r2, #0]
    3650:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    3652:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    3654:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    3658:	e60c      	b.n	3274 <ull_conn_llcp+0x160c>
		conn->tx_data_last = tx;
    365a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    365e:	e60d      	b.n	327c <ull_conn_llcp+0x1614>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3660:	7911      	ldrb	r1, [r2, #4]
    3662:	f001 0103 	and.w	r1, r1, #3
    3666:	2903      	cmp	r1, #3
    3668:	d016      	beq.n	3698 <ull_conn_llcp+0x1a30>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    366a:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    366e:	e5fa      	b.n	3266 <ull_conn_llcp+0x15fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3670:	790b      	ldrb	r3, [r1, #4]
    3672:	f003 0303 	and.w	r3, r3, #3
    3676:	2b03      	cmp	r3, #3
    3678:	d02f      	beq.n	36da <ull_conn_llcp+0x1a72>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    367a:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    367e:	f7ff b9ad 	b.w	29dc <ull_conn_llcp+0xd74>
		conn->tx_data_last = tx;
    3682:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    3686:	e759      	b.n	353c <ull_conn_llcp+0x18d4>
	    ((pdu_data_tx->llctrl.opcode !=
    3688:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    368a:	2a03      	cmp	r2, #3
    368c:	f43f ae04 	beq.w	3298 <ull_conn_llcp+0x1630>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3690:	2a0a      	cmp	r2, #10
    3692:	f47f aeea 	bne.w	346a <ull_conn_llcp+0x1802>
    3696:	e5ff      	b.n	3298 <ull_conn_llcp+0x1630>
	    ((pdu_data_tx->llctrl.opcode !=
    3698:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    369a:	2903      	cmp	r1, #3
    369c:	d0d7      	beq.n	364e <ull_conn_llcp+0x19e6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    369e:	290a      	cmp	r1, #10
    36a0:	d1e3      	bne.n	366a <ull_conn_llcp+0x1a02>
    36a2:	e7d4      	b.n	364e <ull_conn_llcp+0x19e6>
			conn->tx_data = conn->tx_data->next;
    36a4:	6813      	ldr	r3, [r2, #0]
    36a6:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    36aa:	2900      	cmp	r1, #0
    36ac:	f47f af3b 	bne.w	3526 <ull_conn_llcp+0x18be>
			tx->next = conn->tx_head->next;
    36b0:	6811      	ldr	r1, [r2, #0]
    36b2:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    36b4:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    36b6:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    36ba:	e73b      	b.n	3534 <ull_conn_llcp+0x18cc>
			conn->llcp_phy.tx = 0U;
    36bc:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    36c0:	f363 0284 	bfi	r2, r3, #2, #3
    36c4:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    36c8:	e60d      	b.n	32e6 <ull_conn_llcp+0x167e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    36ca:	7911      	ldrb	r1, [r2, #4]
    36cc:	f001 0103 	and.w	r1, r1, #3
    36d0:	2903      	cmp	r1, #3
    36d2:	d009      	beq.n	36e8 <ull_conn_llcp+0x1a80>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    36d4:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    36d8:	e725      	b.n	3526 <ull_conn_llcp+0x18be>
	    ((pdu_data_tx->llctrl.opcode !=
    36da:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    36dc:	2b03      	cmp	r3, #3
    36de:	f43f af79 	beq.w	35d4 <ull_conn_llcp+0x196c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    36e2:	2b0a      	cmp	r3, #10
    36e4:	d1c9      	bne.n	367a <ull_conn_llcp+0x1a12>
    36e6:	e775      	b.n	35d4 <ull_conn_llcp+0x196c>
	    ((pdu_data_tx->llctrl.opcode !=
    36e8:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    36ea:	2903      	cmp	r1, #3
    36ec:	d0e0      	beq.n	36b0 <ull_conn_llcp+0x1a48>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    36ee:	290a      	cmp	r1, #10
    36f0:	d1f0      	bne.n	36d4 <ull_conn_llcp+0x1a6c>
    36f2:	e7dd      	b.n	36b0 <ull_conn_llcp+0x1a48>
			LL_ASSERT(0);
    36f4:	4a0c      	ldr	r2, [pc, #48]	; (3728 <ull_conn_llcp+0x1ac0>)
    36f6:	490d      	ldr	r1, [pc, #52]	; (372c <ull_conn_llcp+0x1ac4>)
    36f8:	480d      	ldr	r0, [pc, #52]	; (3730 <ull_conn_llcp+0x1ac8>)
    36fa:	f640 33c7 	movw	r3, #3015	; 0xbc7
    36fe:	f023 f92d 	bl	2695c <printk>
    3702:	4040      	eors	r0, r0
    3704:	f380 8811 	msr	BASEPRI, r0
    3708:	f04f 0003 	mov.w	r0, #3
    370c:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    370e:	f04f 0800 	mov.w	r8, #0
			break;
    3712:	f7fe bf91 	b.w	2638 <ull_conn_llcp+0x9d0>
		LL_ASSERT(0);
    3716:	4a04      	ldr	r2, [pc, #16]	; (3728 <ull_conn_llcp+0x1ac0>)
    3718:	4904      	ldr	r1, [pc, #16]	; (372c <ull_conn_llcp+0x1ac4>)
    371a:	f640 73e1 	movw	r3, #4065	; 0xfe1
    371e:	f7ff ba2f 	b.w	2b80 <ull_conn_llcp+0xf18>
    3722:	bf00      	nop
    3724:	200037e0 	.word	0x200037e0
    3728:	0002fc68 	.word	0x0002fc68
    372c:	0002f794 	.word	0x0002f794
    3730:	0002f6fc 	.word	0x0002f6fc
    3734:	00000000 	.word	0x00000000

00003738 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    3738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    373c:	b08b      	sub	sp, #44	; 0x2c
    373e:	460f      	mov	r7, r1
    3740:	9304      	str	r3, [sp, #16]
    3742:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    3746:	9005      	str	r0, [sp, #20]
    3748:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    374a:	2000      	movs	r0, #0
{
    374c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    3750:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    3754:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    3758:	9303      	str	r3, [sp, #12]
    375a:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    375c:	f015 ff78 	bl	19650 <ull_scan_is_disabled_get>
	if (!scan) {
    3760:	2800      	cmp	r0, #0
    3762:	f000 8194 	beq.w	3a8e <ll_create_connection+0x356>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    3766:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    376a:	4605      	mov	r5, r0
    376c:	4650      	mov	r0, sl
    376e:	f012 fef9 	bl	16564 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    3772:	f1ba 0f00 	cmp.w	sl, #0
    3776:	d16a      	bne.n	384e <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    3778:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    377a:	f105 021c 	add.w	r2, r5, #28
    377e:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    3780:	2b00      	cmp	r3, #0
    3782:	d06b      	beq.n	385c <ll_create_connection+0x124>
		conn_lll = lll->conn;
    3784:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    3788:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    378c:	f898 002a 	ldrb.w	r0, [r8, #42]	; 0x2a
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    3790:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    3794:	f000 0007 	and.w	r0, r0, #7
    3798:	f01a ff7a 	bl	1e690 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    379c:	f8b8 1026 	ldrh.w	r1, [r8, #38]	; 0x26
    37a0:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    37a4:	4401      	add	r1, r0
    37a6:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
    37aa:	4401      	add	r1, r0
    37ac:	48c2      	ldr	r0, [pc, #776]	; (3ab8 <ll_create_connection+0x380>)
    37ae:	a3c0      	add	r3, pc, #768	; (adr r3, 3ab0 <ll_create_connection+0x378>)
    37b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    37b4:	fba1 0100 	umull	r0, r1, r1, r0
    37b8:	f7fd fcf2 	bl	11a0 <__aeabi_uldivmod>
    37bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    37c0:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    37c2:	4630      	mov	r0, r6
    37c4:	f019 fff8 	bl	1d7b8 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    37c8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    37cc:	f36f 0341 	bfc	r3, #1, #1
    37d0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    37d4:	23ff      	movs	r3, #255	; 0xff
    37d6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    37da:	b366      	cbz	r6, 3836 <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    37dc:	f1a9 0302 	sub.w	r3, r9, #2
    37e0:	2b01      	cmp	r3, #1
    37e2:	f240 8158 	bls.w	3a96 <ll_create_connection+0x35e>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    37e6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    37ea:	9a04      	ldr	r2, [sp, #16]
	scan->own_addr_type = own_addr_type;
    37ec:	f369 0342 	bfi	r3, r9, #1, #2
    37f0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    37f4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    37f8:	f362 0300 	bfi	r3, r2, #0, #1
    37fc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    3800:	9914      	ldr	r1, [sp, #80]	; 0x50
    3802:	2206      	movs	r2, #6
    3804:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3808:	f026 fda8 	bl	2a35c <memcpy>
	lll->conn_timeout = timeout;
    380c:	9b03      	ldr	r3, [sp, #12]
    380e:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    3810:	9a05      	ldr	r2, [sp, #20]
    3812:	9600      	str	r6, [sp, #0]
    3814:	463b      	mov	r3, r7
    3816:	f105 001c 	add.w	r0, r5, #28
    381a:	2100      	movs	r1, #0
    381c:	f7fe f944 	bl	1aa8 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    3820:	f01b f8d4 	bl	1e9cc <lll_clock_wait>
	if (err) {
    3824:	2800      	cmp	r0, #0
    3826:	f040 8157 	bne.w	3ad8 <ll_create_connection+0x3a0>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    382a:	4628      	mov	r0, r5
    382c:	f7fe f968 	bl	1b00 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    3830:	b00b      	add	sp, #44	; 0x2c
    3832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    3836:	f01a fb79 	bl	1df2c <ull_filter_lll_rl_enabled>
    383a:	2800      	cmp	r0, #0
    383c:	d0ce      	beq.n	37dc <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    383e:	9914      	ldr	r1, [sp, #80]	; 0x50
    3840:	9804      	ldr	r0, [sp, #16]
    3842:	4632      	mov	r2, r6
    3844:	f01a f8b4 	bl	1d9b0 <ull_filter_rl_find>
    3848:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    384c:	e7c6      	b.n	37dc <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    384e:	2106      	movs	r1, #6
    3850:	f011 fae0 	bl	14e14 <mem_nz>
    3854:	2800      	cmp	r0, #0
    3856:	d18f      	bne.n	3778 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    3858:	2012      	movs	r0, #18
    385a:	e7e9      	b.n	3830 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    385c:	f015 f96e 	bl	18b3c <ll_rx_link_alloc>
	if (!link) {
    3860:	9007      	str	r0, [sp, #28]
    3862:	2800      	cmp	r0, #0
    3864:	f000 816f 	beq.w	3b46 <ll_create_connection+0x40e>
	conn = ll_conn_acquire();
    3868:	f016 fb50 	bl	19f0c <ll_conn_acquire>
	if (!conn) {
    386c:	4604      	mov	r4, r0
    386e:	2800      	cmp	r0, #0
    3870:	f000 818b 	beq.w	3b8a <ll_create_connection+0x452>
	err = util_aa_le32(conn_lll->access_addr);
    3874:	3020      	adds	r0, #32
    3876:	f011 fc6d 	bl	15154 <util_aa_le32>
	conn_lll = &conn->lll;
    387a:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    387e:	2800      	cmp	r0, #0
    3880:	f040 8154 	bne.w	3b2c <ll_create_connection+0x3f4>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    3884:	2103      	movs	r1, #3
    3886:	f104 0024 	add.w	r0, r4, #36	; 0x24
    388a:	f01a fdc3 	bl	1e414 <lll_csrand_get>
	conn_lll->interval = interval;
    388e:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    3890:	6da0      	ldr	r0, [r4, #88]	; 0x58
	conn_lll->interval = interval;
    3892:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    3894:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    3898:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    389c:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    389e:	2800      	cmp	r0, #0
    38a0:	f000 8153 	beq.w	3b4a <ll_create_connection+0x412>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    38a4:	f104 0148 	add.w	r1, r4, #72	; 0x48
    38a8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    38ac:	f011 fabe 	bl	14e2c <memq_init>
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    38b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    38b2:	4a82      	ldr	r2, [pc, #520]	; (3abc <ll_create_connection+0x384>)
    38b4:	401a      	ands	r2, r3
	conn_lll->sn = 0;
    38b6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    38ba:	f023 0307 	bic.w	r3, r3, #7
    38be:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    38c2:	4b7f      	ldr	r3, [pc, #508]	; (3ac0 <ll_create_connection+0x388>)
    38c4:	4313      	orrs	r3, r2
    38c6:	6463      	str	r3, [r4, #68]	; 0x44
	conn_lll->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    38c8:	4b7e      	ldr	r3, [pc, #504]	; (3ac4 <ll_create_connection+0x38c>)
    38ca:	6423      	str	r3, [r4, #64]	; 0x40
	conn_lll->link_tx_free = NULL;
    38cc:	f04f 0b00 	mov.w	fp, #0
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    38d0:	231b      	movs	r3, #27
    38d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
	conn_lll->link_tx_free = NULL;
    38d4:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	conn_lll->packet_tx_head_len = 0;
    38d8:	f8a4 b05c 	strh.w	fp, [r4, #92]	; 0x5c
	conn_lll->latency_prepare = 0;
    38dc:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    38e0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    38e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    38e8:	f019 fa22 	bl	1cd30 <ull_chan_map_get>
    38ec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    38f0:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    38f4:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    38f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    38fa:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    38fe:	f01a fd89 	bl	1e414 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3902:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3906:	4b70      	ldr	r3, [pc, #448]	; (3ac8 <ll_create_connection+0x390>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    3908:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    390c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    390e:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3912:	fba3 1302 	umull	r1, r3, r3, r2
    3916:	08db      	lsrs	r3, r3, #3
    3918:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    391c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    3920:	3305      	adds	r3, #5
    3922:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    3926:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    392a:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    392c:	f8a4 b0a8 	strh.w	fp, [r4, #168]	; 0xa8
	conn_lll->data_chan_sel = 0;
    3930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3934:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    3938:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    393c:	f8a4 b0ac 	strh.w	fp, [r4, #172]	; 0xac
	conn_lll->central.initiated = 0;
    3940:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    3944:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    3948:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    394c:	4b5f      	ldr	r3, [pc, #380]	; (3acc <ll_create_connection+0x394>)
	conn->apto_expire = 0U;
    394e:	f8a4 b0b4 	strh.w	fp, [r4, #180]	; 0xb4
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    3952:	fb02 f101 	mul.w	r1, r2, r1
    3956:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    3958:	440b      	add	r3, r1
    395a:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    395e:	495c      	ldr	r1, [pc, #368]	; (3ad0 <ll_create_connection+0x398>)
	conn->appto_expire = 0U;
    3960:	f8a4 b0b0 	strh.w	fp, [r4, #176]	; 0xb0
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    3964:	4411      	add	r1, r2
    3966:	fbb1 f1f2 	udiv	r1, r1, r2
    396a:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    396e:	f242 7110 	movw	r1, #10000	; 0x2710
    3972:	fb01 210c 	mla	r1, r1, ip, r2
    3976:	3901      	subs	r1, #1
    3978:	fbb1 f2f2 	udiv	r2, r1, r2
    397c:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    3980:	2206      	movs	r2, #6
    3982:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    3986:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    3988:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    398a:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    398c:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    3990:	dd02      	ble.n	3998 <ll_create_connection+0x260>
    3992:	3a06      	subs	r2, #6
    3994:	1a12      	subs	r2, r2, r0
    3996:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    3998:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    399c:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    39a0:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    39a4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    39a8:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    39ac:	f8a4 b0bc 	strh.w	fp, [r4, #188]	; 0xbc
	conn->llcp_rx = NULL;
    39b0:	f8c4 b0e0 	str.w	fp, [r4, #224]	; 0xe0
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    39b4:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    39b8:	f8a4 b0f8 	strh.w	fp, [r4, #248]	; 0xf8
	conn->llcp_feature.features_conn = ll_feat_get();
    39bc:	f014 fc00 	bl	181c0 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    39c0:	9b07      	ldr	r3, [sp, #28]
    39c2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    39c6:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    39ca:	f8a4 b110 	strh.w	fp, [r4, #272]	; 0x110
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    39ce:	f023 0303 	bic.w	r3, r3, #3
    39d2:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    39d6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    39da:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    39de:	f023 0318 	bic.w	r3, r3, #24
    39e2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    39e6:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_terminate.reason_final = 0U;
    39ea:	f884 b11b 	strb.w	fp, [r4, #283]	; 0x11b
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    39ee:	f023 0307 	bic.w	r3, r3, #7
    39f2:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_conn_param.disabled = 0U;
    39f6:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    39fa:	f8a4 b13c 	strh.w	fp, [r4, #316]	; 0x13c
	conn->llcp_conn_param.disabled = 0U;
    39fe:	f36b 1345 	bfi	r3, fp, #5, #1
    3a02:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_length.disabled = 0U;
    3a06:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_conn_param.req = 0U;
    3a0a:	f8a4 b15c 	strh.w	fp, [r4, #348]	; 0x15c
	conn->llcp_length.disabled = 0U;
    3a0e:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    3a12:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    3a14:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_feature.features_peer = 0;
    3a18:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    3a1a:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
	conn->llcp_feature.features_peer = 0;
    3a1e:	e9c4 2342 	strd	r2, r3, [r4, #264]	; 0x108
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    3a22:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.cache.tx_octets = 0U;
    3a26:	f8a4 b190 	strh.w	fp, [r4, #400]	; 0x190
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    3a2a:	f016 fd73 	bl	1a514 <ull_conn_default_tx_octets_get>
    3a2e:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    3a32:	f016 fd75 	bl	1a520 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    3a36:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    3a3a:	4b26      	ldr	r3, [pc, #152]	; (3ad4 <ll_create_connection+0x39c>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    3a3c:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    3a40:	4013      	ands	r3, r2
    3a42:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    3a46:	f016 fd71 	bl	1a52c <ull_conn_default_phy_tx_get>
    3a4a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    3a4e:	f360 0302 	bfi	r3, r0, #0, #3
    3a52:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    3a56:	f016 fd6f 	bl	1a538 <ull_conn_default_phy_rx_get>
    3a5a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    3a5e:	f8c4 b19c 	str.w	fp, [r4, #412]	; 0x19c
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    3a62:	f360 03c5 	bfi	r3, r0, #3, #3
    3a66:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->ull.ticks_prepare_to_start =
    3a6a:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    3a6c:	e9c4 bb6a 	strd	fp, fp, [r4, #424]	; 0x1a8
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    3a70:	e9c4 bb68 	strd	fp, fp, [r4, #416]	; 0x1a0
	conn->ull.ticks_active_to_start = 0U;
    3a74:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    3a78:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    3a7c:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    3a7e:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    3a82:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    3a86:	f884 b000 	strb.w	fp, [r4]
    3a8a:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    3a8c:	e67e      	b.n	378c <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    3a8e:	200c      	movs	r0, #12
}
    3a90:	b00b      	add	sp, #44	; 0x2c
    3a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    3a96:	2000      	movs	r0, #0
    3a98:	f019 fea8 	bl	1d7ec <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    3a9c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3aa0:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    3aa4:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    3aa6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    3aaa:	e69c      	b.n	37e6 <ll_create_connection+0xae>
    3aac:	f3af 8000 	nop.w
    3ab0:	1afd498d 	.word	0x1afd498d
    3ab4:	00000007 	.word	0x00000007
    3ab8:	3b9aca00 	.word	0x3b9aca00
    3abc:	f8800000 	.word	0xf8800000
    3ac0:	01110148 	.word	0x01110148
    3ac4:	0148001b 	.word	0x0148001b
    3ac8:	aaaaaaab 	.word	0xaaaaaaab
    3acc:	01c9c37f 	.word	0x01c9c37f
    3ad0:	026259ff 	.word	0x026259ff
    3ad4:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    3ad8:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    3ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3adc:	b163      	cbz	r3, 3af8 <ll_create_connection+0x3c0>
    3ade:	4a2d      	ldr	r2, [pc, #180]	; (3b94 <ll_create_connection+0x45c>)
    3ae0:	492d      	ldr	r1, [pc, #180]	; (3b98 <ll_create_connection+0x460>)
    3ae2:	482e      	ldr	r0, [pc, #184]	; (3b9c <ll_create_connection+0x464>)
    3ae4:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    3ae8:	f022 ff38 	bl	2695c <printk>
    3aec:	4040      	eors	r0, r0
    3aee:	f380 8811 	msr	BASEPRI, r0
    3af2:	f04f 0003 	mov.w	r0, #3
    3af6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    3af8:	f104 0130 	add.w	r1, r4, #48	; 0x30
    3afc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3b00:	f011 f998 	bl	14e34 <memq_deinit>
	LL_ASSERT(link);
    3b04:	4606      	mov	r6, r0
    3b06:	2800      	cmp	r0, #0
    3b08:	d031      	beq.n	3b6e <ll_create_connection+0x436>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    3b0a:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    3b0c:	63e6      	str	r6, [r4, #60]	; 0x3c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    3b0e:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	LL_ASSERT(link);
    3b12:	b1f4      	cbz	r4, 3b52 <ll_create_connection+0x41a>

	ll_rx_link_release(link);
    3b14:	4620      	mov	r0, r4
    3b16:	f015 f817 	bl	18b48 <ll_rx_link_release>

	ll_conn_release(conn);
    3b1a:	4638      	mov	r0, r7
    3b1c:	f016 f9fc 	bl	19f18 <ll_conn_release>
	scan->lll.conn = NULL;
    3b20:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    3b22:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    3b24:	622b      	str	r3, [r5, #32]
}
    3b26:	b00b      	add	sp, #44	; 0x2c
    3b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    3b2c:	4a19      	ldr	r2, [pc, #100]	; (3b94 <ll_create_connection+0x45c>)
    3b2e:	491c      	ldr	r1, [pc, #112]	; (3ba0 <ll_create_connection+0x468>)
    3b30:	481a      	ldr	r0, [pc, #104]	; (3b9c <ll_create_connection+0x464>)
    3b32:	23bf      	movs	r3, #191	; 0xbf
    3b34:	f022 ff12 	bl	2695c <printk>
    3b38:	4040      	eors	r0, r0
    3b3a:	f380 8811 	msr	BASEPRI, r0
    3b3e:	f04f 0003 	mov.w	r0, #3
    3b42:	df02      	svc	2
    3b44:	e69e      	b.n	3884 <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3b46:	2007      	movs	r0, #7
    3b48:	e672      	b.n	3830 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    3b4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3b4e:	65a0      	str	r0, [r4, #88]	; 0x58
    3b50:	e6a8      	b.n	38a4 <ll_create_connection+0x16c>
	LL_ASSERT(link);
    3b52:	4a10      	ldr	r2, [pc, #64]	; (3b94 <ll_create_connection+0x45c>)
    3b54:	4913      	ldr	r1, [pc, #76]	; (3ba4 <ll_create_connection+0x46c>)
    3b56:	4811      	ldr	r0, [pc, #68]	; (3b9c <ll_create_connection+0x464>)
    3b58:	f240 43c1 	movw	r3, #1217	; 0x4c1
    3b5c:	f022 fefe 	bl	2695c <printk>
    3b60:	4040      	eors	r0, r0
    3b62:	f380 8811 	msr	BASEPRI, r0
    3b66:	f04f 0003 	mov.w	r0, #3
    3b6a:	df02      	svc	2
    3b6c:	e7d2      	b.n	3b14 <ll_create_connection+0x3dc>
	LL_ASSERT(link);
    3b6e:	4a09      	ldr	r2, [pc, #36]	; (3b94 <ll_create_connection+0x45c>)
    3b70:	490c      	ldr	r1, [pc, #48]	; (3ba4 <ll_create_connection+0x46c>)
    3b72:	480a      	ldr	r0, [pc, #40]	; (3b9c <ll_create_connection+0x464>)
    3b74:	f240 43ba 	movw	r3, #1210	; 0x4ba
    3b78:	f022 fef0 	bl	2695c <printk>
    3b7c:	4040      	eors	r0, r0
    3b7e:	f380 8811 	msr	BASEPRI, r0
    3b82:	f04f 0003 	mov.w	r0, #3
    3b86:	df02      	svc	2
    3b88:	e7bf      	b.n	3b0a <ll_create_connection+0x3d2>
		ll_rx_link_release(link);
    3b8a:	9807      	ldr	r0, [sp, #28]
    3b8c:	f014 ffdc 	bl	18b48 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3b90:	2007      	movs	r0, #7
    3b92:	e64d      	b.n	3830 <ll_create_connection+0xf8>
    3b94:	0002fe48 	.word	0x0002fe48
    3b98:	0002fe8c 	.word	0x0002fe8c
    3b9c:	0002f6fc 	.word	0x0002f6fc
    3ba0:	0002fa74 	.word	0x0002fa74
    3ba4:	0002fcc0 	.word	0x0002fcc0

00003ba8 <ull_central_setup>:
{
    3ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
    3bac:	4680      	mov	r8, r0
{
    3bae:	b08f      	sub	sp, #60	; 0x3c
    3bb0:	4604      	mov	r4, r0
    3bb2:	460f      	mov	r7, r1
    3bb4:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3bb6:	f100 0124 	add.w	r1, r0, #36	; 0x24
    3bba:	2206      	movs	r2, #6
    3bbc:	a80c      	add	r0, sp, #48	; 0x30
	peer_addr_type = pdu_tx->rx_addr;
    3bbe:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3bc2:	f026 fbcb 	bl	2a35c <memcpy>
	chan_sel = pdu_tx->chan_sel;
    3bc6:	f894 901c 	ldrb.w	r9, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3bca:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
    3bce:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
    3bd2:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    3bd6:	46d9      	mov	r9, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3bd8:	f040 8104 	bne.w	3de4 <ull_central_setup+0x23c>
	cc->status = 0U;
    3bdc:	2300      	movs	r3, #0
    3bde:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    3be0:	7cb9      	ldrb	r1, [r7, #18]
	uint8_t rl_idx = ftr->rl_idx;
    3be2:	f897 8011 	ldrb.w	r8, [r7, #17]
	if (ftr->lrpa_used) {
    3be6:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3bea:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    3bee:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    3bf2:	f000 80e1 	beq.w	3db8 <ull_central_setup+0x210>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3bf6:	f104 011e 	add.w	r1, r4, #30
    3bfa:	f026 fbaf 	bl	2a35c <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    3bfe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c02:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3c06:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3c0a:	f000 80df 	beq.w	3dcc <ull_central_setup+0x224>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3c0e:	4652      	mov	r2, sl
    3c10:	4640      	mov	r0, r8
    3c12:	f104 011e 	add.w	r1, r4, #30
    3c16:	930b      	str	r3, [sp, #44]	; 0x2c
    3c18:	f019 fad4 	bl	1d1c4 <ll_rl_id_addr_get>
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3c1e:	4618      	mov	r0, r3
		cc->peer_addr_type += 2;
    3c20:	7fa3      	ldrb	r3, [r4, #30]
    3c22:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c24:	a90c      	add	r1, sp, #48	; 0x30
		cc->peer_addr_type += 2;
    3c26:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3c28:	2206      	movs	r2, #6
    3c2a:	f026 fb97 	bl	2a35c <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    3c2e:	683b      	ldr	r3, [r7, #0]
    3c30:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    3c34:	89eb      	ldrh	r3, [r5, #14]
    3c36:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    3c38:	8a2b      	ldrh	r3, [r5, #16]
    3c3a:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    3c3c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    3c40:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    3c42:	f01a ff15 	bl	1ea70 <lll_clock_sca_local_get>
    3c46:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    3c4a:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    3c4e:	4640      	mov	r0, r8
    3c50:	f016 f968 	bl	19f24 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    3c54:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
    3c56:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    3c58:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    3c5a:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    3c5c:	6820      	ldr	r0, [r4, #0]
    3c5e:	f014 ff79 	bl	18b54 <ll_rx_put>
		rx->handle = lll->handle;
    3c62:	89ab      	ldrh	r3, [r5, #12]
    3c64:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3c66:	231b      	movs	r3, #27
		link = rx->link;
    3c68:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3c6a:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    3c6c:	f1b9 0f00 	cmp.w	r9, #0
    3c70:	f040 80c6 	bne.w	3e00 <ull_central_setup+0x258>
			cs->csa = 0x00;
    3c74:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
    3c78:	4631      	mov	r1, r6
    3c7a:	4620      	mov	r0, r4
    3c7c:	f014 ff6a 	bl	18b54 <ll_rx_put>
	ll_rx_sched();
    3c80:	f014 ff72 	bl	18b68 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3c84:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3c88:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    3c8c:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3c90:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    3c94:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3c96:	429e      	cmp	r6, r3
    3c98:	bf38      	it	cc
    3c9a:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3c9c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3ca0:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3ca4:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3ca8:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3cac:	f01a fcf0 	bl	1e690 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    3cb0:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3cb2:	2200      	movs	r2, #0
    3cb4:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3cb6:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3cb8:	2001      	movs	r0, #1
    3cba:	f011 f907 	bl	14ecc <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    3cbe:	4650      	mov	r0, sl
    3cc0:	f015 fc9e 	bl	19600 <ull_scan_handle_get>
    3cc4:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3cc6:	4b56      	ldr	r3, [pc, #344]	; (3e20 <ull_central_setup+0x278>)
    3cc8:	f8cd a000 	str.w	sl, [sp]
    3ccc:	b2d2      	uxtb	r2, r2
    3cce:	2101      	movs	r1, #1
    3cd0:	2000      	movs	r0, #0
    3cd2:	f012 fb83 	bl	163dc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3cd6:	f030 0302 	bics.w	r3, r0, #2
    3cda:	d00c      	beq.n	3cf6 <ull_central_setup+0x14e>
    3cdc:	4a51      	ldr	r2, [pc, #324]	; (3e24 <ull_central_setup+0x27c>)
    3cde:	4952      	ldr	r1, [pc, #328]	; (3e28 <ull_central_setup+0x280>)
    3ce0:	4852      	ldr	r0, [pc, #328]	; (3e2c <ull_central_setup+0x284>)
    3ce2:	f240 33c9 	movw	r3, #969	; 0x3c9
    3ce6:	f022 fe39 	bl	2695c <printk>
    3cea:	4040      	eors	r0, r0
    3cec:	f380 8811 	msr	BASEPRI, r0
    3cf0:	f04f 0003 	mov.w	r0, #3
    3cf4:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3cf6:	f04f 0a00 	mov.w	sl, #0
    3cfa:	2201      	movs	r2, #1
    3cfc:	4611      	mov	r1, r2
    3cfe:	4653      	mov	r3, sl
    3d00:	f8cd a000 	str.w	sl, [sp]
    3d04:	4650      	mov	r0, sl
    3d06:	f012 fb69 	bl	163dc <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3d0a:	4640      	mov	r0, r8
    3d0c:	f016 f90a 	bl	19f24 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d10:	68bb      	ldr	r3, [r7, #8]
    3d12:	f8cd 8018 	str.w	r8, [sp, #24]
    3d16:	3b09      	subs	r3, #9
    3d18:	1b9e      	subs	r6, r3, r6
    3d1a:	4b45      	ldr	r3, [pc, #276]	; (3e30 <ull_central_setup+0x288>)
    3d1c:	9307      	str	r3, [sp, #28]
    3d1e:	4b45      	ldr	r3, [pc, #276]	; (3e34 <ull_central_setup+0x28c>)
    3d20:	9305      	str	r3, [sp, #20]
    3d22:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d26:	4f44      	ldr	r7, [pc, #272]	; (3e38 <ull_central_setup+0x290>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d28:	9308      	str	r3, [sp, #32]
    3d2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d2e:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d32:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3d36:	1cc5      	adds	r5, r0, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3d38:	a337      	add	r3, pc, #220	; (adr r3, 3e18 <ull_central_setup+0x270>)
    3d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d3e:	4648      	mov	r0, r9
    3d40:	4641      	mov	r1, r8
    3d42:	f7fd fa2d 	bl	11a0 <__aeabi_uldivmod>
    3d46:	4610      	mov	r0, r2
    3d48:	4619      	mov	r1, r3
    3d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d4e:	2300      	movs	r3, #0
    3d50:	f7fd fa26 	bl	11a0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d54:	a330      	add	r3, pc, #192	; (adr r3, 3e18 <ull_central_setup+0x270>)
    3d56:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d5a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d5c:	4641      	mov	r1, r8
    3d5e:	4648      	mov	r0, r9
    3d60:	f7fd fa1e 	bl	11a0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3d64:	a32c      	add	r3, pc, #176	; (adr r3, 3e18 <ull_central_setup+0x270>)
    3d66:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3d6a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3d6c:	fba4 0107 	umull	r0, r1, r4, r7
    3d70:	f7fd fa16 	bl	11a0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3d74:	b2ed      	uxtb	r5, r5
    3d76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d7a:	9000      	str	r0, [sp, #0]
    3d7c:	4633      	mov	r3, r6
    3d7e:	462a      	mov	r2, r5
    3d80:	2101      	movs	r1, #1
    3d82:	4650      	mov	r0, sl
    3d84:	f012 faa0 	bl	162c8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3d88:	f030 0302 	bics.w	r3, r0, #2
    3d8c:	d00c      	beq.n	3da8 <ull_central_setup+0x200>
    3d8e:	4a25      	ldr	r2, [pc, #148]	; (3e24 <ull_central_setup+0x27c>)
    3d90:	4925      	ldr	r1, [pc, #148]	; (3e28 <ull_central_setup+0x280>)
    3d92:	4826      	ldr	r0, [pc, #152]	; (3e2c <ull_central_setup+0x284>)
    3d94:	f240 33fa 	movw	r3, #1018	; 0x3fa
    3d98:	f022 fde0 	bl	2695c <printk>
    3d9c:	4040      	eors	r0, r0
    3d9e:	f380 8811 	msr	BASEPRI, r0
    3da2:	f04f 0003 	mov.w	r0, #3
    3da6:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3da8:	2201      	movs	r2, #1
    3daa:	2102      	movs	r1, #2
    3dac:	4610      	mov	r0, r2
    3dae:	f011 f88d 	bl	14ecc <mayfly_enable>
}
    3db2:	b00f      	add	sp, #60	; 0x3c
    3db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    3db8:	f026 fadb 	bl	2a372 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    3dbc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3dc0:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3dc4:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3dc8:	f47f af21 	bne.w	3c0e <ull_central_setup+0x66>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    3dcc:	4618      	mov	r0, r3
    3dce:	2206      	movs	r2, #6
    3dd0:	2100      	movs	r1, #0
    3dd2:	f026 face 	bl	2a372 <memset>
		cc->peer_addr_type = peer_addr_type;
    3dd6:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    3dd8:	a90c      	add	r1, sp, #48	; 0x30
    3dda:	4650      	mov	r0, sl
    3ddc:	2206      	movs	r2, #6
    3dde:	f026 fabd 	bl	2a35c <memcpy>
    3de2:	e724      	b.n	3c2e <ull_central_setup+0x86>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3de4:	4a0f      	ldr	r2, [pc, #60]	; (3e24 <ull_central_setup+0x27c>)
    3de6:	4915      	ldr	r1, [pc, #84]	; (3e3c <ull_central_setup+0x294>)
    3de8:	4810      	ldr	r0, [pc, #64]	; (3e2c <ull_central_setup+0x284>)
    3dea:	f44f 7352 	mov.w	r3, #840	; 0x348
    3dee:	f022 fdb5 	bl	2695c <printk>
    3df2:	4040      	eors	r0, r0
    3df4:	f380 8811 	msr	BASEPRI, r0
    3df8:	f04f 0003 	mov.w	r0, #3
    3dfc:	df02      	svc	2
    3dfe:	e6ed      	b.n	3bdc <ull_central_setup+0x34>
			lll->data_chan_sel = 1;
    3e00:	7f6b      	ldrb	r3, [r5, #29]
    3e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3e06:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3e08:	1d28      	adds	r0, r5, #4
    3e0a:	f018 ffdd 	bl	1cdc8 <lll_chan_id>
			cs->csa = 0x01;
    3e0e:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3e10:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    3e12:	7733      	strb	r3, [r6, #28]
    3e14:	e730      	b.n	3c78 <ull_central_setup+0xd0>
    3e16:	bf00      	nop
    3e18:	1afd498d 	.word	0x1afd498d
    3e1c:	00000007 	.word	0x00000007
    3e20:	0001c609 	.word	0x0001c609
    3e24:	0002fe48 	.word	0x0002fe48
    3e28:	0002fd84 	.word	0x0002fd84
    3e2c:	0002f6fc 	.word	0x0002f6fc
    3e30:	0001c60d 	.word	0x0001c60d
    3e34:	0001c63d 	.word	0x0001c63d
    3e38:	3b9aca00 	.word	0x3b9aca00
    3e3c:	0002f928 	.word	0x0002f928

00003e40 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    3e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e44:	b08f      	sub	sp, #60	; 0x3c
    3e46:	461e      	mov	r6, r3
    3e48:	9309      	str	r3, [sp, #36]	; 0x24
    3e4a:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    3e4c:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3e4e:	1d0a      	adds	r2, r1, #4
    3e50:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3f58 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    3e54:	f8df b104 	ldr.w	fp, [pc, #260]	; 3f5c <ull_sched_after_mstr_slot_get+0x11c>
    3e58:	f8df a104 	ldr.w	sl, [pc, #260]	; 3f60 <ull_sched_after_mstr_slot_get+0x120>
    3e5c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 3f64 <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3e60:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3e62:	2100      	movs	r1, #0
    3e64:	6031      	str	r1, [r6, #0]
{
    3e66:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    3e68:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    3e6c:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3e6e:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    3e70:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3e72:	9106      	str	r1, [sp, #24]
    3e74:	af0d      	add	r7, sp, #52	; 0x34
    3e76:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    3e78:	2302      	movs	r3, #2
    3e7a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3e7c:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3e80:	9600      	str	r6, [sp, #0]
    3e82:	462b      	mov	r3, r5
    3e84:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3e88:	4621      	mov	r1, r4
    3e8a:	2000      	movs	r0, #0
    3e8c:	f012 fae8 	bl	16460 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3e90:	2802      	cmp	r0, #2
    3e92:	d02d      	beq.n	3ef0 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3e96:	2b00      	cmp	r3, #0
    3e98:	d130      	bne.n	3efc <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    3e9a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3e9e:	2bff      	cmp	r3, #255	; 0xff
    3ea0:	d03c      	beq.n	3f1c <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    3ea2:	2b03      	cmp	r3, #3
    3ea4:	d1e8      	bne.n	3e78 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3ea6:	2000      	movs	r0, #0
    3ea8:	f016 f844 	bl	19f34 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3eac:	2800      	cmp	r0, #0
    3eae:	d0e3      	beq.n	3e78 <ull_sched_after_mstr_slot_get+0x38>
    3eb0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	dbdf      	blt.n	3e78 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    3eb8:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    3eba:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3ebe:	29ff      	cmp	r1, #255	; 0xff
    3ec0:	d00c      	beq.n	3edc <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    3ec2:	9906      	ldr	r1, [sp, #24]
    3ec4:	9207      	str	r2, [sp, #28]
    3ec6:	4618      	mov	r0, r3
    3ec8:	9304      	str	r3, [sp, #16]
    3eca:	f012 fb29 	bl	16520 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3ece:	9b05      	ldr	r3, [sp, #20]
    3ed0:	9a08      	ldr	r2, [sp, #32]
    3ed2:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    3ed4:	4288      	cmp	r0, r1
    3ed6:	9b04      	ldr	r3, [sp, #16]
    3ed8:	9a07      	ldr	r2, [sp, #28]
    3eda:	d822      	bhi.n	3f22 <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    3edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    3ee0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3ee4:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3ee6:	e7c7      	b.n	3e78 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3ee8:	4621      	mov	r1, r4
    3eea:	2000      	movs	r0, #0
    3eec:	f012 fafe 	bl	164ec <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3ef2:	2b02      	cmp	r3, #2
    3ef4:	d0f8      	beq.n	3ee8 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d0ce      	beq.n	3e9a <ull_sched_after_mstr_slot_get+0x5a>
    3efc:	2373      	movs	r3, #115	; 0x73
    3efe:	465a      	mov	r2, fp
    3f00:	4651      	mov	r1, sl
    3f02:	4648      	mov	r0, r9
    3f04:	f022 fd2a 	bl	2695c <printk>
    3f08:	4040      	eors	r0, r0
    3f0a:	f380 8811 	msr	BASEPRI, r0
    3f0e:	f04f 0003 	mov.w	r0, #3
    3f12:	df02      	svc	2
		if (ticker_id == 0xff) {
    3f14:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3f18:	2bff      	cmp	r3, #255	; 0xff
    3f1a:	d1c2      	bne.n	3ea2 <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    3f1c:	9b04      	ldr	r3, [sp, #16]
    3f1e:	2bff      	cmp	r3, #255	; 0xff
    3f20:	d010      	beq.n	3f44 <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3f22:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3f26:	4810      	ldr	r0, [pc, #64]	; (3f68 <ull_sched_after_mstr_slot_get+0x128>)
    3f28:	4413      	add	r3, r2
    3f2a:	fba3 0100 	umull	r0, r1, r3, r0
    3f2e:	2207      	movs	r2, #7
    3f30:	fb02 1103 	mla	r1, r2, r3, r1
    3f34:	a306      	add	r3, pc, #24	; (adr r3, 3f50 <ull_sched_after_mstr_slot_get+0x110>)
    3f36:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f3a:	f7fd f931 	bl	11a0 <__aeabi_uldivmod>
    3f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    3f40:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3f42:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    3f44:	b00f      	add	sp, #60	; 0x3c
    3f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f4a:	bf00      	nop
    3f4c:	f3af 8000 	nop.w
    3f50:	3b9aca00 	.word	0x3b9aca00
    3f54:	00000000 	.word	0x00000000
    3f58:	0001c9d9 	.word	0x0001c9d9
    3f5c:	0002fed8 	.word	0x0002fed8
    3f60:	0002ff1c 	.word	0x0002ff1c
    3f64:	0002f6fc 	.word	0x0002f6fc
    3f68:	1afd498d 	.word	0x1afd498d
    3f6c:	00000000 	.word	0x00000000

00003f70 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    3f70:	b570      	push	{r4, r5, r6, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    3f76:	9201      	str	r2, [sp, #4]
{
    3f78:	4615      	mov	r5, r2
    3f7a:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3f7c:	aa01      	add	r2, sp, #4
    3f7e:	2002      	movs	r0, #2
    3f80:	f7ff ff5e 	bl	3e40 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    3f84:	6823      	ldr	r3, [r4, #0]
    3f86:	b30b      	cbz	r3, 3fcc <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3f88:	9801      	ldr	r0, [sp, #4]
    3f8a:	1b43      	subs	r3, r0, r5
    3f8c:	021b      	lsls	r3, r3, #8
    3f8e:	d41f      	bmi.n	3fd0 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3f90:	4629      	mov	r1, r5
    3f92:	f012 fac5 	bl	16520 <ticker_ticks_diff_get>
    3f96:	4a1a      	ldr	r2, [pc, #104]	; (4000 <after_mstr_offset_get+0x90>)
    3f98:	4603      	mov	r3, r0
    3f9a:	2107      	movs	r1, #7
    3f9c:	fba0 0202 	umull	r0, r2, r0, r2
    3fa0:	fb01 2103 	mla	r1, r1, r3, r2
    3fa4:	a314      	add	r3, pc, #80	; (adr r3, 3ff8 <after_mstr_offset_get+0x88>)
    3fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3faa:	f7fd f8f9 	bl	11a0 <__aeabi_uldivmod>
    3fae:	6822      	ldr	r2, [r4, #0]
    3fb0:	4402      	add	r2, r0
    3fb2:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    3fb4:	2a00      	cmp	r2, #0
    3fb6:	db09      	blt.n	3fcc <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    3fb8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    3fbc:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    3fc0:	4290      	cmp	r0, r2
    3fc2:	d203      	bcs.n	3fcc <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    3fc4:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    3fc6:	4282      	cmp	r2, r0
    3fc8:	d8fc      	bhi.n	3fc4 <after_mstr_offset_get+0x54>
    3fca:	6022      	str	r2, [r4, #0]
		}
	}
}
    3fcc:	b002      	add	sp, #8
    3fce:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3fd0:	4601      	mov	r1, r0
    3fd2:	4628      	mov	r0, r5
    3fd4:	f012 faa4 	bl	16520 <ticker_ticks_diff_get>
    3fd8:	4a09      	ldr	r2, [pc, #36]	; (4000 <after_mstr_offset_get+0x90>)
    3fda:	4603      	mov	r3, r0
    3fdc:	2107      	movs	r1, #7
    3fde:	fba0 0202 	umull	r0, r2, r0, r2
    3fe2:	fb01 2103 	mla	r1, r1, r3, r2
    3fe6:	a304      	add	r3, pc, #16	; (adr r3, 3ff8 <after_mstr_offset_get+0x88>)
    3fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fec:	f7fd f8d8 	bl	11a0 <__aeabi_uldivmod>
    3ff0:	6822      	ldr	r2, [r4, #0]
    3ff2:	1a12      	subs	r2, r2, r0
    3ff4:	6022      	str	r2, [r4, #0]
    3ff6:	e7dd      	b.n	3fb4 <after_mstr_offset_get+0x44>
    3ff8:	3b9aca00 	.word	0x3b9aca00
    3ffc:	00000000 	.word	0x00000000
    4000:	1afd498d 	.word	0x1afd498d
    4004:	00000000 	.word	0x00000000

00004008 <ull_sched_mfy_win_offset_select>:
{
    4008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    400c:	f8b0 116c 	ldrh.w	r1, [r0, #364]	; 0x16c
{
    4010:	b088      	sub	sp, #32
    4012:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    4014:	f240 43e2 	movw	r3, #1250	; 0x4e2
    4018:	4847      	ldr	r0, [pc, #284]	; (4138 <CONFIG_USB_DEVICE_PID+0x127>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    401a:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    401c:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    4020:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    4022:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    4024:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    4028:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    402c:	fba1 0100 	umull	r0, r1, r1, r0
    4030:	a33f      	add	r3, pc, #252	; (adr r3, 4130 <CONFIG_USB_DEVICE_PID+0x11f>)
    4032:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    4036:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    4038:	f7fd f8b2 	bl	11a0 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    403c:	f10d 030f 	add.w	r3, sp, #15
    4040:	9501      	str	r5, [sp, #4]
    4042:	9300      	str	r3, [sp, #0]
    4044:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    4048:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    404a:	aa04      	add	r2, sp, #16
    404c:	4620      	mov	r0, r4
    404e:	2101      	movs	r1, #1
    4050:	f018 fcc4 	bl	1c9dc <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    4054:	f89d 800f 	ldrb.w	r8, [sp, #15]
    4058:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    405c:	fa5f fc8c 	uxtb.w	ip, ip
    4060:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    4064:	4630      	mov	r0, r6
    4066:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
    406a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    406e:	f504 76bc 	add.w	r6, r4, #376	; 0x178
			if (win_offset_s != 0xffff) {
    4072:	f64f 7eff 	movw	lr, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    4076:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    4078:	f1b8 0f00 	cmp.w	r8, #0
    407c:	d00a      	beq.n	4094 <CONFIG_USB_DEVICE_PID+0x83>
    407e:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    4080:	4572      	cmp	r2, lr
    4082:	d004      	beq.n	408e <CONFIG_USB_DEVICE_PID+0x7d>
				if (win_offset_s ==
    4084:	8819      	ldrh	r1, [r3, #0]
    4086:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    4088:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    408c:	d01d      	beq.n	40ca <CONFIG_USB_DEVICE_PID+0xb9>
		while (offset_index_m < offset_m_max) {
    408e:	3302      	adds	r3, #2
    4090:	459c      	cmp	ip, r3
    4092:	d1f5      	bne.n	4080 <CONFIG_USB_DEVICE_PID+0x6f>
	while (offset_index_s < OFFSET_S_MAX) {
    4094:	3702      	adds	r7, #2
    4096:	42be      	cmp	r6, r7
    4098:	d1ed      	bne.n	4076 <CONFIG_USB_DEVICE_PID+0x65>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    409a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	} else if (!has_offset_s) {
    409e:	bb48      	cbnz	r0, 40f4 <CONFIG_USB_DEVICE_PID+0xe3>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    40a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    40a4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    40a8:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
    40ac:	0a10      	lsrs	r0, r2, #8
    40ae:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
	dst[0] = val;
    40b2:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    40b4:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    40b6:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    40ba:	2204      	movs	r2, #4
    40bc:	f362 0302 	bfi	r3, r2, #0, #3
    40c0:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    40c4:	b008      	add	sp, #32
    40c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    40ca:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    40ce:	f240 43e2 	movw	r3, #1250	; 0x4e2
    40d2:	fb02 f303 	mul.w	r3, r2, r3
    40d6:	0a10      	lsrs	r0, r2, #8
    40d8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	dst[0] = val;
    40dc:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    40de:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    40e0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    40e4:	2204      	movs	r2, #4
    40e6:	f362 0302 	bfi	r3, r2, #0, #3
    40ea:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    40ee:	b008      	add	sp, #32
    40f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    40f4:	2203      	movs	r2, #3
    40f6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    40fa:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    40fe:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    4102:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4104:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    4108:	2011      	movs	r0, #17
    410a:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    410e:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    4112:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    4116:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    4118:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    411a:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    411e:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    4120:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
}
    4124:	b008      	add	sp, #32
    4126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    412a:	bf00      	nop
    412c:	f3af 8000 	nop.w
    4130:	1afd498d 	.word	0x1afd498d
    4134:	00000007 	.word	0x00000007
    4138:	3b9aca00 	.word	0x3b9aca00
    413c:	00000000 	.word	0x00000000

00004140 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    4140:	b538      	push	{r3, r4, r5, lr}
    4142:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    4144:	f01a fdd8 	bl	1ecf8 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    4148:	7da2      	ldrb	r2, [r4, #22]
    414a:	f3c2 0341 	ubfx	r3, r2, #1, #2
    414e:	3301      	adds	r3, #1
    4150:	f003 0303 	and.w	r3, r3, #3
    4154:	2b03      	cmp	r3, #3
    4156:	d034      	beq.n	41c2 <isr_window+0x82>
    4158:	f363 0242 	bfi	r2, r3, #1, #2
    415c:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    415e:	f103 0025 	add.w	r0, r3, #37	; 0x25
    4162:	f01a fa53 	bl	1e60c <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    4166:	6863      	ldr	r3, [r4, #4]
    4168:	b30b      	cbz	r3, 41ae <isr_window+0x6e>
    416a:	6923      	ldr	r3, [r4, #16]
    416c:	b1fb      	cbz	r3, 41ae <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    416e:	f01c f943 	bl	203f8 <radio_tmr_start_get>
    4172:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    4174:	f012 f9d2 	bl	1651c <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    4178:	1cc1      	adds	r1, r0, #3
    417a:	2000      	movs	r0, #0
    417c:	f01c f90a 	bl	20394 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    4180:	f01c f96c 	bl	2045c <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    4184:	f01c f938 	bl	203f8 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    4188:	4629      	mov	r1, r5
    418a:	f012 f9c9 	bl	16520 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    418e:	4912      	ldr	r1, [pc, #72]	; (41d8 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    4190:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    4192:	2207      	movs	r2, #7
    4194:	fba0 0101 	umull	r0, r1, r0, r1
    4198:	fb02 1103 	mla	r1, r2, r3, r1
    419c:	a30c      	add	r3, pc, #48	; (adr r3, 41d0 <isr_window+0x90>)
    419e:	e9d3 2300 	ldrd	r2, r3, [r3]
    41a2:	f7fc fffd 	bl	11a0 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    41a6:	6923      	ldr	r3, [r4, #16]
    41a8:	1a1b      	subs	r3, r3, r0
    41aa:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    41ac:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    41ae:	f012 f9b5 	bl	1651c <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    41b2:	1cc1      	adds	r1, r0, #3
    41b4:	2000      	movs	r0, #0
    41b6:	f01c f8ed 	bl	20394 <radio_tmr_start_tick>
}
    41ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    41be:	f01c b94d 	b.w	2045c <radio_tmr_end_capture>
		lll->chan = 0U;
    41c2:	f36f 0242 	bfc	r2, #1, #2
    41c6:	75a2      	strb	r2, [r4, #22]
    41c8:	2025      	movs	r0, #37	; 0x25
    41ca:	e7ca      	b.n	4162 <isr_window+0x22>
    41cc:	f3af 8000 	nop.w
    41d0:	3b9aca00 	.word	0x3b9aca00
    41d4:	00000000 	.word	0x00000000
    41d8:	1afd498d 	.word	0x1afd498d
    41dc:	00000000 	.word	0x00000000

000041e0 <isr_rx>:
{
    41e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41e4:	b087      	sub	sp, #28
    41e6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    41e8:	f01b fee8 	bl	1ffbc <radio_is_done>
	if (trx_done) {
    41ec:	b2c0      	uxtb	r0, r0
    41ee:	b950      	cbnz	r0, 4206 <isr_rx+0x26>
	lll_isr_status_reset();
    41f0:	f01a fa62 	bl	1e6b8 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    41f4:	48b4      	ldr	r0, [pc, #720]	; (44c8 <isr_rx+0x2e8>)
    41f6:	4621      	mov	r1, r4
    41f8:	f01b fdc2 	bl	1fd80 <radio_isr_set>
}
    41fc:	b007      	add	sp, #28
    41fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    4202:	f01b beb1 	b.w	1ff68 <radio_disable>
		crc_ok = radio_crc_is_valid();
    4206:	f01b fef9 	bl	1fffc <radio_crc_is_valid>
    420a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    420c:	f01c f814 	bl	20238 <radio_filter_has_match>
    4210:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    4212:	f01c f81b 	bl	2024c <radio_filter_match_get>
    4216:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    4218:	f01c fa16 	bl	20648 <radio_ar_has_match>
    421c:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    421e:	f01c f9f7 	bl	20610 <radio_ar_match_get>
    4222:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    4224:	f01b ffcc 	bl	201c0 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    4228:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    422a:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    422c:	f01b ffae 	bl	2018c <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    4230:	f01a fa42 	bl	1e6b8 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    4234:	2d00      	cmp	r5, #0
    4236:	d0dd      	beq.n	41f4 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    4238:	2001      	movs	r0, #1
    423a:	f014 fdd1 	bl	18de0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    423e:	4605      	mov	r5, r0
    4240:	2800      	cmp	r0, #0
    4242:	f000 817d 	beq.w	4540 <isr_rx+0x360>
	rl_idx = devmatch_ok ?
    4246:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    424a:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    424c:	f040 816f 	bne.w	452e <isr_rx+0x34e>
    4250:	2e00      	cmp	r6, #0
    4252:	f040 80cc 	bne.w	43ee <isr_rx+0x20e>
    4256:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    4258:	465a      	mov	r2, fp
    425a:	463b      	mov	r3, r7
    425c:	4631      	mov	r1, r6
    425e:	4620      	mov	r0, r4
    4260:	f01a ff78 	bl	1f154 <lll_scan_isr_rx_check>
	if (has_adva &&
    4264:	2800      	cmp	r0, #0
    4266:	d0c5      	beq.n	41f4 <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    4268:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    426a:	6862      	ldr	r2, [r4, #4]
	bool dir_report = false;
    426c:	2100      	movs	r1, #0
    426e:	f88d 1013 	strb.w	r1, [sp, #19]
		rssi_ready = radio_rssi_is_ready();
    4272:	fa5f f888 	uxtb.w	r8, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    4276:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    427a:	2a00      	cmp	r2, #0
    427c:	f000 80d3 	beq.w	4426 <isr_rx+0x246>
    4280:	6862      	ldr	r2, [r4, #4]
    4282:	f892 2020 	ldrb.w	r2, [r2, #32]
    4286:	0790      	lsls	r0, r2, #30
    4288:	f100 80cd 	bmi.w	4426 <isr_rx+0x246>
    428c:	2907      	cmp	r1, #7
    428e:	d0b1      	beq.n	41f4 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    4290:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    4292:	0712      	lsls	r2, r2, #28
    4294:	f140 8162 	bpl.w	455c <isr_rx+0x37c>
    4298:	2900      	cmp	r1, #0
    429a:	f040 80ae 	bne.w	43fa <isr_rx+0x21a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    429e:	7f6b      	ldrb	r3, [r5, #29]
    42a0:	2b25      	cmp	r3, #37	; 0x25
    42a2:	f200 8122 	bhi.w	44ea <isr_rx+0x30a>
			rx = ull_pdu_rx_alloc_peek(4);
    42a6:	2004      	movs	r0, #4
    42a8:	f014 fd9a 	bl	18de0 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    42ac:	2800      	cmp	r0, #0
    42ae:	d0a1      	beq.n	41f4 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    42b0:	f01c f8dc 	bl	2046c <radio_tmr_end_get>
		if (!lll->ticks_window) {
    42b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    42b6:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    42b8:	b943      	cbnz	r3, 42cc <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    42ba:	8c23      	ldrh	r3, [r4, #32]
    42bc:	f240 2271 	movw	r2, #625	; 0x271
    42c0:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    42c4:	fbb0 f2f3 	udiv	r2, r0, r3
    42c8:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    42cc:	6823      	ldr	r3, [r4, #0]
    42ce:	691a      	ldr	r2, [r3, #16]
    42d0:	4b7e      	ldr	r3, [pc, #504]	; (44cc <isr_rx+0x2ec>)
    42d2:	2107      	movs	r1, #7
    42d4:	fba2 0303 	umull	r0, r3, r2, r3
    42d8:	fb01 3102 	mla	r1, r1, r2, r3
    42dc:	a378      	add	r3, pc, #480	; (adr r3, 44c0 <isr_rx+0x2e0>)
    42de:	e9d3 2300 	ldrd	r2, r3, [r3]
    42e2:	f7fc ff5d 	bl	11a0 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    42e6:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    42ea:	4543      	cmp	r3, r8
    42ec:	d382      	bcc.n	41f4 <isr_rx+0x14>
		radio_switch_complete_and_disable();
    42ee:	f01b ff3f 	bl	20170 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    42f2:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    42f4:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    42f6:	f019 fc79 	bl	1dbec <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    42fa:	7de3      	ldrb	r3, [r4, #23]
    42fc:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    42fe:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    4300:	f140 81cf 	bpl.w	46a2 <isr_rx+0x4c2>
    4304:	2800      	cmp	r0, #0
    4306:	f000 81cc 	beq.w	46a2 <isr_rx+0x4c2>
			init_addr = lrpa->val;
    430a:	4683      	mov	fp, r0
			init_tx_addr = 1;
    430c:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    4310:	f01b fe82 	bl	20018 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    4314:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    4316:	aa05      	add	r2, sp, #20
    4318:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    431a:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    431e:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    4320:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    4322:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4326:	9200      	str	r2, [sp, #0]
    4328:	4620      	mov	r0, r4
    432a:	2200      	movs	r2, #0
    432c:	e9cd 8b01 	strd	r8, fp, [sp, #4]
    4330:	f01a ff2a 	bl	1f188 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    4334:	4650      	mov	r0, sl
    4336:	f01b fdfd 	bl	1ff34 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    433a:	f01b fe35 	bl	1ffa8 <radio_is_ready>
    433e:	2800      	cmp	r0, #0
    4340:	f040 81c5 	bne.w	46ce <isr_rx+0x4ee>
		radio_isr_set(isr_done_cleanup, lll);
    4344:	4862      	ldr	r0, [pc, #392]	; (44d0 <isr_rx+0x2f0>)
    4346:	4621      	mov	r1, r4
    4348:	f01b fd1a 	bl	1fd80 <radio_isr_set>
		lll->conn->central.initiated = 1U;
    434c:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    434e:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    4350:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    4354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    4358:	f042 0201 	orr.w	r2, r2, #1
    435c:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    4360:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    4362:	f014 fd5b 	bl	18e1c <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4366:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
    4368:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    436a:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    436c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4370:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    4372:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    4374:	4651      	mov	r1, sl
    4376:	2224      	movs	r2, #36	; 0x24
    4378:	301c      	adds	r0, #28
    437a:	f025 ffef 	bl	2a35c <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    437e:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
    4382:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4386:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    438a:	f365 1345 	bfi	r3, r5, #5, #1
    438e:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    4392:	f01c f831 	bl	203f8 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    4396:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    4398:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    439c:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    439e:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    43a0:	f01b fdd6 	bl	1ff50 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    43a4:	2e00      	cmp	r6, #0
    43a6:	bf08      	it	eq
    43a8:	27ff      	moveq	r7, #255	; 0xff
    43aa:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    43ae:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    43b0:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    43b2:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    43b6:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    43ba:	d003      	beq.n	43c4 <isr_rx+0x1e4>
    43bc:	f1b9 0300 	subs.w	r3, r9, #0
    43c0:	bf18      	it	ne
    43c2:	2301      	movne	r3, #1
    43c4:	f898 201a 	ldrb.w	r2, [r8, #26]
    43c8:	f363 0200 	bfi	r2, r3, #0, #1
    43cc:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
    43d0:	f014 fd24 	bl	18e1c <ull_pdu_rx_alloc>
    43d4:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    43d6:	4641      	mov	r1, r8
    43d8:	f8d8 0000 	ldr.w	r0, [r8]
			ftr->extra = ull_pdu_rx_alloc();
    43dc:	f8c8 300c 	str.w	r3, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
    43e0:	f014 fd32 	bl	18e48 <ull_rx_put>
		ull_rx_sched();
    43e4:	f014 fd40 	bl	18e68 <ull_rx_sched>
}
    43e8:	b007      	add	sp, #28
    43ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    43ee:	fa5f f08a 	uxtb.w	r0, sl
    43f2:	f019 fc89 	bl	1dd08 <ull_filter_lll_rl_irk_idx>
    43f6:	4607      	mov	r7, r0
    43f8:	e72e      	b.n	4258 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    43fa:	2901      	cmp	r1, #1
    43fc:	d115      	bne.n	442a <isr_rx+0x24a>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    43fe:	7f6b      	ldrb	r3, [r5, #29]
    4400:	2b0c      	cmp	r3, #12
    4402:	f47f aef7 	bne.w	41f4 <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    4406:	7f2a      	ldrb	r2, [r5, #28]
    4408:	9700      	str	r7, [sp, #0]
    440a:	2300      	movs	r3, #0
    440c:	9301      	str	r3, [sp, #4]
    440e:	09d2      	lsrs	r2, r2, #7
    4410:	f105 0324 	add.w	r3, r5, #36	; 0x24
    4414:	4620      	mov	r0, r4
    4416:	f01a fdef 	bl	1eff8 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    441a:	2800      	cmp	r0, #0
    441c:	f47f af43 	bne.w	42a6 <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4420:	7f29      	ldrb	r1, [r5, #28]
    4422:	f001 010f 	and.w	r1, r1, #15
    4426:	2900      	cmp	r1, #0
    4428:	d054      	beq.n	44d4 <isr_rx+0x2f4>
    442a:	2906      	cmp	r1, #6
    442c:	d052      	beq.n	44d4 <isr_rx+0x2f4>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    442e:	2902      	cmp	r1, #2
    4430:	f000 80a7 	beq.w	4582 <isr_rx+0x3a2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4434:	2901      	cmp	r1, #1
    4436:	d158      	bne.n	44ea <isr_rx+0x30a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4438:	7f6b      	ldrb	r3, [r5, #29]
    443a:	2b0c      	cmp	r3, #12
    443c:	f47f aeda 	bne.w	41f4 <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    4440:	7f2a      	ldrb	r2, [r5, #28]
    4442:	9700      	str	r7, [sp, #0]
    4444:	f10d 0313 	add.w	r3, sp, #19
    4448:	9301      	str	r3, [sp, #4]
    444a:	09d2      	lsrs	r2, r2, #7
    444c:	f105 0324 	add.w	r3, r5, #36	; 0x24
    4450:	2100      	movs	r1, #0
    4452:	4620      	mov	r0, r4
    4454:	f01a fdd0 	bl	1eff8 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    4458:	2800      	cmp	r0, #0
    445a:	d046      	beq.n	44ea <isr_rx+0x30a>
		 (pdu_adv_rx->len != 0) &&
    445c:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    445e:	2b00      	cmp	r3, #0
    4460:	f43f aec8 	beq.w	41f4 <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    4464:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    4466:	b12b      	cbz	r3, 4474 <isr_rx+0x294>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    4468:	7f2b      	ldrb	r3, [r5, #28]
    446a:	f003 030f 	and.w	r3, r3, #15
    446e:	2b07      	cmp	r3, #7
    4470:	f47f aec0 	bne.w	41f4 <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    4474:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    4476:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    447a:	f014 fcb1 	bl	18de0 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    447e:	4605      	mov	r5, r0
    4480:	2800      	cmp	r0, #0
    4482:	f43f aeb7 	beq.w	41f4 <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    4486:	f014 fcc9 	bl	18e1c <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    448a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    448e:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    4490:	2305      	movs	r3, #5
    4492:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    4494:	f1b8 0f00 	cmp.w	r8, #0
    4498:	d16f      	bne.n	457a <isr_rx+0x39a>
    449a:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    449c:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    449e:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    44a0:	2e00      	cmp	r6, #0
    44a2:	bf08      	it	eq
    44a4:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    44a6:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    44aa:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    44ac:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    44ae:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    44b0:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    44b2:	f014 fcc9 	bl	18e48 <ull_rx_put>
	ull_rx_sched();
    44b6:	f014 fcd7 	bl	18e68 <ull_rx_sched>
	if (!err) {
    44ba:	e69b      	b.n	41f4 <isr_rx+0x14>
    44bc:	f3af 8000 	nop.w
    44c0:	3b9aca00 	.word	0x3b9aca00
    44c4:	00000000 	.word	0x00000000
    44c8:	0001edb1 	.word	0x0001edb1
    44cc:	1afd498d 	.word	0x1afd498d
    44d0:	0001efa9 	.word	0x0001efa9
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    44d4:	7f6b      	ldrb	r3, [r5, #29]
    44d6:	2b25      	cmp	r3, #37	; 0x25
    44d8:	d807      	bhi.n	44ea <isr_rx+0x30a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    44da:	7da2      	ldrb	r2, [r4, #22]
    44dc:	0692      	lsls	r2, r2, #26
    44de:	d502      	bpl.n	44e6 <isr_rx+0x306>
		   !lll->conn) {
    44e0:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    44e2:	2a00      	cmp	r2, #0
    44e4:	d04f      	beq.n	4586 <isr_rx+0x3a6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    44e6:	2b25      	cmp	r3, #37	; 0x25
    44e8:	d9b9      	bls.n	445e <isr_rx+0x27e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    44ea:	7f2b      	ldrb	r3, [r5, #28]
    44ec:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    44f0:	2b04      	cmp	r3, #4
    44f2:	f47f ae7f 	bne.w	41f4 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    44f6:	7f6b      	ldrb	r3, [r5, #29]
    44f8:	2b25      	cmp	r3, #37	; 0x25
    44fa:	f63f ae7b 	bhi.w	41f4 <isr_rx+0x14>
		   (lll->state != 0U) &&
    44fe:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    4500:	07d9      	lsls	r1, r3, #31
    4502:	f57f ae77 	bpl.w	41f4 <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    4506:	f01b fd87 	bl	20018 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    450a:	7f2b      	ldrb	r3, [r5, #28]
    450c:	7802      	ldrb	r2, [r0, #0]
    450e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4512:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4516:	f47f ae6d 	bne.w	41f4 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    451a:	3008      	adds	r0, #8
    451c:	2206      	movs	r2, #6
    451e:	f105 011e 	add.w	r1, r5, #30
    4522:	f025 fef2 	bl	2a30a <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    4526:	2800      	cmp	r0, #0
    4528:	f47f ae64 	bne.w	41f4 <isr_rx+0x14>
    452c:	e796      	b.n	445c <isr_rx+0x27c>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    452e:	7da0      	ldrb	r0, [r4, #22]
    4530:	fa5f f189 	uxtb.w	r1, r9
    4534:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4538:	f019 fb7c 	bl	1dc34 <ull_filter_lll_rl_idx>
    453c:	4607      	mov	r7, r0
    453e:	e68b      	b.n	4258 <isr_rx+0x78>
	LL_ASSERT(node_rx);
    4540:	4a71      	ldr	r2, [pc, #452]	; (4708 <isr_rx+0x528>)
    4542:	4972      	ldr	r1, [pc, #456]	; (470c <isr_rx+0x52c>)
    4544:	4872      	ldr	r0, [pc, #456]	; (4710 <isr_rx+0x530>)
    4546:	f240 23c3 	movw	r3, #707	; 0x2c3
    454a:	f022 fa07 	bl	2695c <printk>
    454e:	4040      	eors	r0, r0
    4550:	f380 8811 	msr	BASEPRI, r0
    4554:	f04f 0003 	mov.w	r0, #3
    4558:	df02      	svc	2
    455a:	e674      	b.n	4246 <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
    455c:	2fff      	cmp	r7, #255	; 0xff
    455e:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    4562:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    4566:	d078      	beq.n	465a <isr_rx+0x47a>
		return (rl_idx == lll->rl_idx);
    4568:	7e23      	ldrb	r3, [r4, #24]
    456a:	1bdb      	subs	r3, r3, r7
    456c:	fab3 f383 	clz	r3, r3
    4570:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    4572:	2b00      	cmp	r3, #0
    4574:	f47f ae90 	bne.w	4298 <isr_rx+0xb8>
    4578:	e755      	b.n	4426 <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    457a:	f01b fe13 	bl	201a4 <radio_rssi_get>
    457e:	b2c0      	uxtb	r0, r0
    4580:	e78c      	b.n	449c <isr_rx+0x2bc>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4582:	7f6b      	ldrb	r3, [r5, #29]
    4584:	e7af      	b.n	44e6 <isr_rx+0x306>
		radio_tmr_tifs_set(EVENT_IFS_US);
    4586:	2096      	movs	r0, #150	; 0x96
    4588:	f01b fe76 	bl	20278 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    458c:	2000      	movs	r0, #0
    458e:	f01b fd47 	bl	20020 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    4592:	2003      	movs	r0, #3
    4594:	f014 fc24 	bl	18de0 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    4598:	4681      	mov	r9, r0
    459a:	2800      	cmp	r0, #0
    459c:	f43f ae2a 	beq.w	41f4 <isr_rx+0x14>
	ull_pdu_rx_alloc();
    45a0:	f014 fc3c 	bl	18e1c <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    45a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    45a8:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    45ac:	2305      	movs	r3, #5
    45ae:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    45b2:	f1b8 0f00 	cmp.w	r8, #0
    45b6:	d170      	bne.n	469a <isr_rx+0x4ba>
    45b8:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    45ba:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    45bc:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    45c0:	bf14      	ite	ne
    45c2:	463b      	movne	r3, r7
    45c4:	23ff      	moveq	r3, #255	; 0xff
    45c6:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    45ca:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    45ce:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    45d2:	f36f 0341 	bfc	r3, #1, #1
    45d6:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    45da:	4649      	mov	r1, r9
    45dc:	f014 fc34 	bl	18e48 <ull_rx_put>
	ull_rx_sched();
    45e0:	f014 fc42 	bl	18e68 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    45e4:	f01b fd18 	bl	20018 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    45e8:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    45ea:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    45ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    45f0:	7832      	ldrb	r2, [r6, #0]
    45f2:	01db      	lsls	r3, r3, #7
    45f4:	f002 0270 	and.w	r2, r2, #112	; 0x70
    45f8:	f043 0303 	orr.w	r3, r3, #3
    45fc:	4313      	orrs	r3, r2
    45fe:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4600:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4602:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4604:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4606:	f019 faf1 	bl	1dbec <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    460a:	7de3      	ldrb	r3, [r4, #23]
    460c:	079f      	lsls	r7, r3, #30
    460e:	d54f      	bpl.n	46b0 <isr_rx+0x4d0>
    4610:	2800      	cmp	r0, #0
    4612:	d04d      	beq.n	46b0 <isr_rx+0x4d0>
			pdu_tx->tx_addr = 1;
    4614:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4616:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
    4618:	4630      	mov	r0, r6
    461a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    461e:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4622:	2206      	movs	r2, #6
    4624:	f025 fe9a 	bl	2a35c <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    4628:	2206      	movs	r2, #6
    462a:	f105 011e 	add.w	r1, r5, #30
    462e:	f106 0008 	add.w	r0, r6, #8
    4632:	f025 fe93 	bl	2a35c <memcpy>
		radio_pkt_tx_set(pdu_tx);
    4636:	4630      	mov	r0, r6
    4638:	f01b fc7c 	bl	1ff34 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    463c:	f01b fcb4 	bl	1ffa8 <radio_is_ready>
    4640:	2800      	cmp	r0, #0
    4642:	d152      	bne.n	46ea <isr_rx+0x50a>
		radio_tmr_end_capture();
    4644:	f01b ff0a 	bl	2045c <radio_tmr_end_capture>
		lll->state = 1U;
    4648:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    464a:	4832      	ldr	r0, [pc, #200]	; (4714 <isr_rx+0x534>)
		lll->state = 1U;
    464c:	f043 0301 	orr.w	r3, r3, #1
    4650:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    4652:	4621      	mov	r1, r4
    4654:	f01b fb94 	bl	1fd80 <radio_isr_set>
	if (!err) {
    4658:	e6c6      	b.n	43e8 <isr_rx+0x208>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    465a:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    465e:	aa05      	add	r2, sp, #20
    4660:	4651      	mov	r1, sl
    4662:	4648      	mov	r0, r9
    4664:	f019 fc06 	bl	1de74 <ull_filter_lll_rl_addr_allowed>
    4668:	2800      	cmp	r0, #0
    466a:	f43f aed9 	beq.w	4420 <isr_rx+0x240>
	return ((lll->adv_addr_type == addr_type) &&
    466e:	7de3      	ldrb	r3, [r4, #23]
    4670:	f003 0301 	and.w	r3, r3, #1
    4674:	454b      	cmp	r3, r9
    4676:	f47f aed3 	bne.w	4420 <isr_rx+0x240>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    467a:	4651      	mov	r1, sl
    467c:	2206      	movs	r2, #6
    467e:	f104 0008 	add.w	r0, r4, #8
    4682:	f025 fe42 	bl	2a30a <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4686:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    4688:	fab0 f380 	clz	r3, r0
    468c:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    468e:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    4692:	2b00      	cmp	r3, #0
    4694:	f47f ae00 	bne.w	4298 <isr_rx+0xb8>
    4698:	e6c5      	b.n	4426 <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    469a:	f01b fd83 	bl	201a4 <radio_rssi_get>
    469e:	b2c3      	uxtb	r3, r0
    46a0:	e78b      	b.n	45ba <isr_rx+0x3da>
			init_tx_addr = lll->init_addr_type;
    46a2:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
    46a6:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    46aa:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
    46ae:	e62f      	b.n	4310 <isr_rx+0x130>
			pdu_tx->tx_addr = lll->init_addr_type;
    46b0:	7da3      	ldrb	r3, [r4, #22]
    46b2:	7832      	ldrb	r2, [r6, #0]
    46b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    46b8:	4630      	mov	r0, r6
    46ba:	f363 1286 	bfi	r2, r3, #6, #1
    46be:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    46c2:	f104 0119 	add.w	r1, r4, #25
    46c6:	2206      	movs	r2, #6
    46c8:	f025 fe48 	bl	2a35c <memcpy>
    46cc:	e7ac      	b.n	4628 <isr_rx+0x448>
		LL_ASSERT(!radio_is_ready());
    46ce:	4a0e      	ldr	r2, [pc, #56]	; (4708 <isr_rx+0x528>)
    46d0:	4911      	ldr	r1, [pc, #68]	; (4718 <isr_rx+0x538>)
    46d2:	480f      	ldr	r0, [pc, #60]	; (4710 <isr_rx+0x530>)
    46d4:	f240 4391 	movw	r3, #1169	; 0x491
    46d8:	f022 f940 	bl	2695c <printk>
    46dc:	4040      	eors	r0, r0
    46de:	f380 8811 	msr	BASEPRI, r0
    46e2:	f04f 0003 	mov.w	r0, #3
    46e6:	df02      	svc	2
    46e8:	e62c      	b.n	4344 <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
    46ea:	4a07      	ldr	r2, [pc, #28]	; (4708 <isr_rx+0x528>)
    46ec:	490a      	ldr	r1, [pc, #40]	; (4718 <isr_rx+0x538>)
    46ee:	4808      	ldr	r0, [pc, #32]	; (4710 <isr_rx+0x530>)
    46f0:	f240 5316 	movw	r3, #1302	; 0x516
    46f4:	f022 f932 	bl	2695c <printk>
    46f8:	4040      	eors	r0, r0
    46fa:	f380 8811 	msr	BASEPRI, r0
    46fe:	f04f 0003 	mov.w	r0, #3
    4702:	df02      	svc	2
    4704:	e79e      	b.n	4644 <isr_rx+0x464>
    4706:	bf00      	nop
    4708:	000302f4 	.word	0x000302f4
    470c:	00030340 	.word	0x00030340
    4710:	0002f6fc 	.word	0x0002f6fc
    4714:	0001edc5 	.word	0x0001edc5
    4718:	00030348 	.word	0x00030348

0000471c <device_found>:
 * @param type Device Type
 * @param ad Adv Data
 */
static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
                         struct net_buf_simple *ad)
{
    471c:	4601      	mov	r1, r0
    471e:	4618      	mov	r0, r3

  if (default_conn)
    4720:	4b04      	ldr	r3, [pc, #16]	; (4734 <device_found+0x18>)
    4722:	681b      	ldr	r3, [r3, #0]
    4724:	b92b      	cbnz	r3, 4732 <device_found+0x16>
  {
    return;
  }

  /* We're only interested in connectable events */
  if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    4726:	2a01      	cmp	r2, #1
    4728:	d803      	bhi.n	4732 <device_found+0x16>
      type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND)
  {
    bt_data_parse(ad, parse_device, (void *)addr);
    472a:	460a      	mov	r2, r1
    472c:	4902      	ldr	r1, [pc, #8]	; (4738 <device_found+0x1c>)
    472e:	f009 bb73 	b.w	de18 <bt_data_parse>
  }
}
    4732:	4770      	bx	lr
    4734:	20002618 	.word	0x20002618
    4738:	00004bcd 	.word	0x00004bcd

0000473c <start_scan>:
/**
 * @brief Starts passive BLE scanning for nearby
 *          devices.
 */
static void start_scan(void)
{
    473c:	b530      	push	{r4, r5, lr}
  int err;

  err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    473e:	4d16      	ldr	r5, [pc, #88]	; (4798 <start_scan+0x5c>)
    4740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    4742:	b08d      	sub	sp, #52	; 0x34
  err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    4744:	ac01      	add	r4, sp, #4
    4746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4748:	682b      	ldr	r3, [r5, #0]
    474a:	4914      	ldr	r1, [pc, #80]	; (479c <start_scan+0x60>)
    474c:	6023      	str	r3, [r4, #0]
    474e:	a801      	add	r0, sp, #4
    4750:	f00a faa6 	bl	eca0 <bt_le_scan_start>
  if (err)
    4754:	4603      	mov	r3, r0
    4756:	4812      	ldr	r0, [pc, #72]	; (47a0 <start_scan+0x64>)
    4758:	b17b      	cbz	r3, 477a <start_scan+0x3e>
  {
    LOG_ERR("Scanning failed to start (err %d)\n", err);
    475a:	6802      	ldr	r2, [r0, #0]
    475c:	0752      	lsls	r2, r2, #29
    475e:	d00a      	beq.n	4776 <start_scan+0x3a>
    4760:	4a10      	ldr	r2, [pc, #64]	; (47a4 <start_scan+0x68>)
    4762:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    4766:	2303      	movs	r3, #3
    4768:	9300      	str	r3, [sp, #0]
    476a:	9309      	str	r3, [sp, #36]	; 0x24
    476c:	aa09      	add	r2, sp, #36	; 0x24
    476e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    return;
  }

  LOG_INF("Scanning successfully started\n");
    4772:	f021 fef2 	bl	2655a <z_log_msg2_static_create.constprop.0>
}
    4776:	b00d      	add	sp, #52	; 0x34
    4778:	bd30      	pop	{r4, r5, pc}
  LOG_INF("Scanning successfully started\n");
    477a:	6803      	ldr	r3, [r0, #0]
    477c:	f003 0307 	and.w	r3, r3, #7
    4780:	2b02      	cmp	r3, #2
    4782:	d9f8      	bls.n	4776 <start_scan+0x3a>
    4784:	4b08      	ldr	r3, [pc, #32]	; (47a8 <start_scan+0x6c>)
    4786:	930a      	str	r3, [sp, #40]	; 0x28
    4788:	2302      	movs	r3, #2
    478a:	9300      	str	r3, [sp, #0]
    478c:	9309      	str	r3, [sp, #36]	; 0x24
    478e:	aa09      	add	r2, sp, #36	; 0x24
    4790:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4794:	e7ed      	b.n	4772 <start_scan+0x36>
    4796:	bf00      	nop
    4798:	0002e530 	.word	0x0002e530
    479c:	0000471d 	.word	0x0000471d
    47a0:	200009bc 	.word	0x200009bc
    47a4:	000308a8 	.word	0x000308a8
    47a8:	000308cb 	.word	0x000308cb

000047ac <discover_func>:
 * @brief Used to parse the GATT service and characteristic data.
 */
static uint8_t discover_func(struct bt_conn *conn,
                             const struct bt_gatt_attr *attr,
                             struct bt_gatt_discover_params *params)
{
    47ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47b0:	4680      	mov	r8, r0
    47b2:	b088      	sub	sp, #32
    47b4:	4614      	mov	r4, r2
  int err;

  if (attr == NULL)
    47b6:	460e      	mov	r6, r1
    47b8:	b9e1      	cbnz	r1, 47f4 <discover_func+0x48>
  {
    if (tx_handle == 0)
    47ba:	4b39      	ldr	r3, [pc, #228]	; (48a0 <discover_func+0xf4>)
    47bc:	881b      	ldrh	r3, [r3, #0]
    47be:	b97b      	cbnz	r3, 47e0 <discover_func+0x34>
    {
      LOG_WRN("Did not discover TX (%x)", tx_handle);
    47c0:	4838      	ldr	r0, [pc, #224]	; (48a4 <discover_func+0xf8>)
    47c2:	6802      	ldr	r2, [r0, #0]
    47c4:	f012 0f06 	tst.w	r2, #6
    47c8:	d00a      	beq.n	47e0 <discover_func+0x34>
    47ca:	4a37      	ldr	r2, [pc, #220]	; (48a8 <discover_func+0xfc>)
    47cc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    47d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    47d4:	2303      	movs	r3, #3
    47d6:	aa05      	add	r2, sp, #20
    47d8:	9301      	str	r3, [sp, #4]
    47da:	9305      	str	r3, [sp, #20]
    47dc:	f021 febd 	bl	2655a <z_log_msg2_static_create.constprop.0>
    }

    (void)memset(params, 0, sizeof(*params));
    47e0:	2214      	movs	r2, #20
    47e2:	2100      	movs	r1, #0
    47e4:	4620      	mov	r0, r4
    47e6:	f025 fdc4 	bl	2a372 <memset>

    return BT_GATT_ITER_STOP;
    47ea:	2500      	movs	r5, #0
      tx_handle = chrc->value_handle;
    }
  }

  return BT_GATT_ITER_CONTINUE;
}
    47ec:	4628      	mov	r0, r5
    47ee:	b008      	add	sp, #32
    47f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    47f4:	7c15      	ldrb	r5, [r2, #16]
    47f6:	2d00      	cmp	r5, #0
    47f8:	d132      	bne.n	4860 <discover_func+0xb4>
      bt_uuid_cmp(params->uuid, &node_scu.uuid) == 0)
    47fa:	492c      	ldr	r1, [pc, #176]	; (48ac <discover_func+0x100>)
    47fc:	6810      	ldr	r0, [r2, #0]
    47fe:	f025 fe75 	bl	2a4ec <bt_uuid_cmp>
  if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    4802:	bb68      	cbnz	r0, 4860 <discover_func+0xb4>
    LOG_INF("Found scu service\n");
    4804:	4f27      	ldr	r7, [pc, #156]	; (48a4 <discover_func+0xf8>)
    4806:	683b      	ldr	r3, [r7, #0]
    4808:	f003 0307 	and.w	r3, r3, #7
    480c:	2b02      	cmp	r3, #2
    480e:	d90a      	bls.n	4826 <discover_func+0x7a>
    4810:	4b27      	ldr	r3, [pc, #156]	; (48b0 <discover_func+0x104>)
    4812:	9306      	str	r3, [sp, #24]
    4814:	aa05      	add	r2, sp, #20
    4816:	2302      	movs	r3, #2
    4818:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    481c:	4638      	mov	r0, r7
    481e:	9301      	str	r3, [sp, #4]
    4820:	9305      	str	r3, [sp, #20]
    4822:	f021 fe9a 	bl	2655a <z_log_msg2_static_create.constprop.0>
    params->uuid = NULL;
    4826:	2300      	movs	r3, #0
    4828:	6023      	str	r3, [r4, #0]
    params->start_handle = attr->handle + 1;
    482a:	8a33      	ldrh	r3, [r6, #16]
    params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    482c:	2603      	movs	r6, #3
    params->start_handle = attr->handle + 1;
    482e:	3301      	adds	r3, #1
    4830:	8123      	strh	r3, [r4, #8]
    params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    4832:	7426      	strb	r6, [r4, #16]
    err = bt_gatt_discover(conn, params);
    4834:	4621      	mov	r1, r4
    4836:	4640      	mov	r0, r8
    4838:	f00d fcbc 	bl	121b4 <bt_gatt_discover>
    if (err != 0)
    483c:	2800      	cmp	r0, #0
    483e:	d0d5      	beq.n	47ec <discover_func+0x40>
      LOG_WRN("Discover failed (err %d)\n", err);
    4840:	683b      	ldr	r3, [r7, #0]
    4842:	f013 0f06 	tst.w	r3, #6
    4846:	d0d1      	beq.n	47ec <discover_func+0x40>
    4848:	4b1a      	ldr	r3, [pc, #104]	; (48b4 <discover_func+0x108>)
    484a:	9601      	str	r6, [sp, #4]
    484c:	e9cd 3006 	strd	r3, r0, [sp, #24]
    4850:	aa05      	add	r2, sp, #20
    4852:	4814      	ldr	r0, [pc, #80]	; (48a4 <discover_func+0xf8>)
    4854:	9605      	str	r6, [sp, #20]
    4856:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    485a:	f021 fe7e 	bl	2655a <z_log_msg2_static_create.constprop.0>
    485e:	e7c5      	b.n	47ec <discover_func+0x40>
  else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC)
    4860:	7c23      	ldrb	r3, [r4, #16]
    4862:	2b03      	cmp	r3, #3
    4864:	d001      	beq.n	486a <discover_func+0xbe>
  return BT_GATT_ITER_CONTINUE;
    4866:	2501      	movs	r5, #1
    4868:	e7c0      	b.n	47ec <discover_func+0x40>
    struct bt_gatt_chrc *chrc = (struct bt_gatt_chrc *)attr->user_data;
    486a:	68f4      	ldr	r4, [r6, #12]
    if (bt_uuid_cmp(chrc->uuid, &node_tx.uuid) == 0)
    486c:	4912      	ldr	r1, [pc, #72]	; (48b8 <discover_func+0x10c>)
    486e:	6820      	ldr	r0, [r4, #0]
    4870:	f025 fe3c 	bl	2a4ec <bt_uuid_cmp>
    4874:	2800      	cmp	r0, #0
    4876:	d1f6      	bne.n	4866 <discover_func+0xba>
      LOG_INF("Found tx\n");
    4878:	480a      	ldr	r0, [pc, #40]	; (48a4 <discover_func+0xf8>)
    487a:	6803      	ldr	r3, [r0, #0]
    487c:	f003 0307 	and.w	r3, r3, #7
    4880:	2b02      	cmp	r3, #2
    4882:	d909      	bls.n	4898 <discover_func+0xec>
    4884:	4b0d      	ldr	r3, [pc, #52]	; (48bc <discover_func+0x110>)
    4886:	9306      	str	r3, [sp, #24]
    4888:	aa05      	add	r2, sp, #20
    488a:	2302      	movs	r3, #2
    488c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4890:	9301      	str	r3, [sp, #4]
    4892:	9305      	str	r3, [sp, #20]
    4894:	f021 fe61 	bl	2655a <z_log_msg2_static_create.constprop.0>
      tx_handle = chrc->value_handle;
    4898:	4b01      	ldr	r3, [pc, #4]	; (48a0 <discover_func+0xf4>)
    489a:	88a2      	ldrh	r2, [r4, #4]
    489c:	801a      	strh	r2, [r3, #0]
    489e:	e7e2      	b.n	4866 <discover_func+0xba>
    48a0:	20004a3c 	.word	0x20004a3c
    48a4:	200009bc 	.word	0x200009bc
    48a8:	000308ea 	.word	0x000308ea
    48ac:	20000976 	.word	0x20000976
    48b0:	00030903 	.word	0x00030903
    48b4:	00030916 	.word	0x00030916
    48b8:	20000987 	.word	0x20000987
    48bc:	00030930 	.word	0x00030930

000048c0 <gatt_write_cb>:
{
    48c0:	b510      	push	{r4, lr}
    48c2:	4614      	mov	r4, r2
    48c4:	b088      	sub	sp, #32
  if (err != BT_ATT_ERR_SUCCESS)
    48c6:	b171      	cbz	r1, 48e6 <gatt_write_cb+0x26>
    LOG_ERR("Write failed: 0x%02X\n", err);
    48c8:	480b      	ldr	r0, [pc, #44]	; (48f8 <gatt_write_cb+0x38>)
    48ca:	6803      	ldr	r3, [r0, #0]
    48cc:	075b      	lsls	r3, r3, #29
    48ce:	d00a      	beq.n	48e6 <gatt_write_cb+0x26>
    48d0:	4b0a      	ldr	r3, [pc, #40]	; (48fc <gatt_write_cb+0x3c>)
    48d2:	aa05      	add	r2, sp, #20
    48d4:	e9cd 3106 	strd	r3, r1, [sp, #24]
    48d8:	2303      	movs	r3, #3
    48da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    48de:	9301      	str	r3, [sp, #4]
    48e0:	9305      	str	r3, [sp, #20]
    48e2:	f021 fe3a 	bl	2655a <z_log_msg2_static_create.constprop.0>
  (void)memset(params, 0, sizeof(*params));
    48e6:	2210      	movs	r2, #16
    48e8:	2100      	movs	r1, #0
    48ea:	4620      	mov	r0, r4
}
    48ec:	b008      	add	sp, #32
    48ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)memset(params, 0, sizeof(*params));
    48f2:	f025 bd3e 	b.w	2a372 <memset>
    48f6:	bf00      	nop
    48f8:	200009bc 	.word	0x200009bc
    48fc:	0003093a 	.word	0x0003093a

00004900 <write_rx>:
 * attribute.
 */
static ssize_t write_rx(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                        const void *buf, uint16_t len, uint16_t offset,
                        uint8_t flags)
{
    4900:	b538      	push	{r3, r4, r5, lr}
    4902:	460c      	mov	r4, r1
    4904:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  uint8_t *value = attr->user_data;
    4908:	68e5      	ldr	r5, [r4, #12]

  if (offset + len > sizeof(rx_buff))
    490a:	461c      	mov	r4, r3
    490c:	18c3      	adds	r3, r0, r3
    490e:	2b0c      	cmp	r3, #12
{
    4910:	4611      	mov	r1, r2
  if (offset + len > sizeof(rx_buff))
    4912:	dc08      	bgt.n	4926 <write_rx+0x26>
  {
    return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
  }

  memcpy(value + offset, buf, len);
    4914:	4622      	mov	r2, r4
    4916:	4428      	add	r0, r5
    4918:	f025 fd20 	bl	2a35c <memcpy>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    491c:	4803      	ldr	r0, [pc, #12]	; (492c <write_rx+0x2c>)
    491e:	f020 fde9 	bl	254f4 <z_impl_k_sem_give>
  k_sem_give(&sem_data_arrived);

  return len;
}
    4922:	4620      	mov	r0, r4
    4924:	bd38      	pop	{r3, r4, r5, pc}
    return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    4926:	f06f 0406 	mvn.w	r4, #6
    492a:	e7fa      	b.n	4922 <write_rx+0x22>
    492c:	20000c38 	.word	0x20000c38

00004930 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4930:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4932:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4934:	b08a      	sub	sp, #40	; 0x28
    4936:	4604      	mov	r4, r0
    4938:	460e      	mov	r6, r1
    493a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    493c:	2b03      	cmp	r3, #3
    493e:	d820      	bhi.n	4982 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    4940:	e8df f003 	tbb	[pc, r3]
    4944:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4948:	4911      	ldr	r1, [pc, #68]	; (4990 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    494a:	4628      	mov	r0, r5
    494c:	f025 fc86 	bl	2a25c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4950:	7863      	ldrb	r3, [r4, #1]
    4952:	9304      	str	r3, [sp, #16]
    4954:	78a3      	ldrb	r3, [r4, #2]
    4956:	9303      	str	r3, [sp, #12]
    4958:	78e3      	ldrb	r3, [r4, #3]
    495a:	9302      	str	r3, [sp, #8]
    495c:	7923      	ldrb	r3, [r4, #4]
    495e:	9301      	str	r3, [sp, #4]
    4960:	7963      	ldrb	r3, [r4, #5]
    4962:	9300      	str	r3, [sp, #0]
    4964:	4a0b      	ldr	r2, [pc, #44]	; (4994 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    4966:	79a3      	ldrb	r3, [r4, #6]
    4968:	9505      	str	r5, [sp, #20]
    496a:	211e      	movs	r1, #30
    496c:	4630      	mov	r0, r6
    496e:	f022 f802 	bl	26976 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    4972:	b00a      	add	sp, #40	; 0x28
    4974:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    4976:	4908      	ldr	r1, [pc, #32]	; (4998 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    4978:	e7e7      	b.n	494a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    497a:	4908      	ldr	r1, [pc, #32]	; (499c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    497c:	e7e5      	b.n	494a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    497e:	4908      	ldr	r1, [pc, #32]	; (49a0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    4980:	e7e3      	b.n	494a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4982:	4a08      	ldr	r2, [pc, #32]	; (49a4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    4984:	210a      	movs	r1, #10
    4986:	4628      	mov	r0, r5
    4988:	f021 fff5 	bl	26976 <snprintk>
		break;
    498c:	e7e0      	b.n	4950 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    498e:	bf00      	nop
    4990:	00030950 	.word	0x00030950
    4994:	00030972 	.word	0x00030972
    4998:	00030957 	.word	0x00030957
    499c:	0003095e 	.word	0x0003095e
    49a0:	00030968 	.word	0x00030968
    49a4:	000344d9 	.word	0x000344d9

000049a8 <disconnected>:
{
    49a8:	b570      	push	{r4, r5, r6, lr}
  if (conn != default_conn)
    49aa:	4c13      	ldr	r4, [pc, #76]	; (49f8 <disconnected+0x50>)
    49ac:	6823      	ldr	r3, [r4, #0]
    49ae:	4283      	cmp	r3, r0
{
    49b0:	b08c      	sub	sp, #48	; 0x30
    49b2:	460d      	mov	r5, r1
  if (conn != default_conn)
    49b4:	d11d      	bne.n	49f2 <disconnected+0x4a>
  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    49b6:	ae04      	add	r6, sp, #16
    49b8:	f026 f8d8 	bl	2ab6c <bt_conn_get_dst>
    49bc:	4631      	mov	r1, r6
    49be:	f7ff ffb7 	bl	4930 <bt_addr_le_to_str.constprop.0.isra.0>
  LOG_WRN("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    49c2:	490e      	ldr	r1, [pc, #56]	; (49fc <disconnected+0x54>)
    49c4:	680b      	ldr	r3, [r1, #0]
    49c6:	f013 0f06 	tst.w	r3, #6
    49ca:	d009      	beq.n	49e0 <disconnected+0x38>
    49cc:	4b0c      	ldr	r3, [pc, #48]	; (4a00 <disconnected+0x58>)
    49ce:	9301      	str	r3, [sp, #4]
    49d0:	2300      	movs	r3, #0
    49d2:	e9cd 6502 	strd	r6, r5, [sp, #8]
    49d6:	9300      	str	r3, [sp, #0]
    49d8:	2202      	movs	r2, #2
    49da:	4618      	mov	r0, r3
    49dc:	f021 fdc0 	bl	26560 <z_log_msg2_runtime_create.constprop.0>
  bt_conn_unref(default_conn);
    49e0:	6820      	ldr	r0, [r4, #0]
    49e2:	f026 f82a 	bl	2aa3a <bt_conn_unref>
  ble_connected = false;
    49e6:	4a07      	ldr	r2, [pc, #28]	; (4a04 <disconnected+0x5c>)
  default_conn = NULL;
    49e8:	2300      	movs	r3, #0
    49ea:	6023      	str	r3, [r4, #0]
  ble_connected = false;
    49ec:	7013      	strb	r3, [r2, #0]
  start_scan();
    49ee:	f7ff fea5 	bl	473c <start_scan>
}
    49f2:	b00c      	add	sp, #48	; 0x30
    49f4:	bd70      	pop	{r4, r5, r6, pc}
    49f6:	bf00      	nop
    49f8:	20002618 	.word	0x20002618
    49fc:	200009bc 	.word	0x200009bc
    4a00:	00030995 	.word	0x00030995
    4a04:	20004a7a 	.word	0x20004a7a

00004a08 <connected>:
{
    4a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a0a:	b095      	sub	sp, #84	; 0x54
  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4a0c:	af0c      	add	r7, sp, #48	; 0x30
{
    4a0e:	460c      	mov	r4, r1
    4a10:	4605      	mov	r5, r0
  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4a12:	f026 f8ab 	bl	2ab6c <bt_conn_get_dst>
    4a16:	4639      	mov	r1, r7
    4a18:	f7ff ff8a 	bl	4930 <bt_addr_le_to_str.constprop.0.isra.0>
  if (err)
    4a1c:	4e2f      	ldr	r6, [pc, #188]	; (4adc <connected+0xd4>)
    4a1e:	b1b4      	cbz	r4, 4a4e <connected+0x46>
    LOG_ERR("Failed to connect to %s (%u)\n", addr, err);
    4a20:	492f      	ldr	r1, [pc, #188]	; (4ae0 <connected+0xd8>)
    4a22:	680b      	ldr	r3, [r1, #0]
    4a24:	075a      	lsls	r2, r3, #29
    4a26:	d009      	beq.n	4a3c <connected+0x34>
    4a28:	4b2e      	ldr	r3, [pc, #184]	; (4ae4 <connected+0xdc>)
    4a2a:	9301      	str	r3, [sp, #4]
    4a2c:	2300      	movs	r3, #0
    4a2e:	e9cd 7402 	strd	r7, r4, [sp, #8]
    4a32:	9300      	str	r3, [sp, #0]
    4a34:	2201      	movs	r2, #1
    4a36:	4618      	mov	r0, r3
    4a38:	f021 fd92 	bl	26560 <z_log_msg2_runtime_create.constprop.0>
    bt_conn_unref(default_conn);
    4a3c:	6830      	ldr	r0, [r6, #0]
    4a3e:	f025 fffc 	bl	2aa3a <bt_conn_unref>
    default_conn = NULL;
    4a42:	2300      	movs	r3, #0
    4a44:	6033      	str	r3, [r6, #0]
    start_scan();
    4a46:	f7ff fe79 	bl	473c <start_scan>
}
    4a4a:	b015      	add	sp, #84	; 0x54
    4a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (conn != default_conn)
    4a4e:	6833      	ldr	r3, [r6, #0]
    4a50:	429d      	cmp	r5, r3
    4a52:	d1fa      	bne.n	4a4a <connected+0x42>
  ble_connected = true;
    4a54:	4b24      	ldr	r3, [pc, #144]	; (4ae8 <connected+0xe0>)
  LOG_INF("Connected: %s\n", addr);
    4a56:	4d22      	ldr	r5, [pc, #136]	; (4ae0 <connected+0xd8>)
  ble_connected = true;
    4a58:	2201      	movs	r2, #1
    4a5a:	701a      	strb	r2, [r3, #0]
  LOG_INF("Connected: %s\n", addr);
    4a5c:	682b      	ldr	r3, [r5, #0]
    4a5e:	f003 0307 	and.w	r3, r3, #7
    4a62:	2b02      	cmp	r3, #2
    4a64:	d919      	bls.n	4a9a <connected+0x92>
    4a66:	4b21      	ldr	r3, [pc, #132]	; (4aec <connected+0xe4>)
    4a68:	9702      	str	r7, [sp, #8]
    4a6a:	e9cd 4300 	strd	r4, r3, [sp]
    4a6e:	2203      	movs	r2, #3
    4a70:	4623      	mov	r3, r4
    4a72:	4629      	mov	r1, r5
    4a74:	4620      	mov	r0, r4
    4a76:	f021 fd73 	bl	26560 <z_log_msg2_runtime_create.constprop.0>
  LOG_INF("Discovering services and characteristics\n");
    4a7a:	682b      	ldr	r3, [r5, #0]
    4a7c:	f003 0307 	and.w	r3, r3, #7
    4a80:	2b02      	cmp	r3, #2
    4a82:	d90a      	bls.n	4a9a <connected+0x92>
    4a84:	4b1a      	ldr	r3, [pc, #104]	; (4af0 <connected+0xe8>)
    4a86:	930a      	str	r3, [sp, #40]	; 0x28
    4a88:	aa09      	add	r2, sp, #36	; 0x24
    4a8a:	2302      	movs	r3, #2
    4a8c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4a90:	4628      	mov	r0, r5
    4a92:	9305      	str	r3, [sp, #20]
    4a94:	9309      	str	r3, [sp, #36]	; 0x24
    4a96:	f021 fd60 	bl	2655a <z_log_msg2_static_create.constprop.0>
  discover_params.uuid = &node_scu.uuid;
    4a9a:	4916      	ldr	r1, [pc, #88]	; (4af4 <connected+0xec>)
    4a9c:	4b16      	ldr	r3, [pc, #88]	; (4af8 <connected+0xf0>)
    4a9e:	600b      	str	r3, [r1, #0]
  discover_params.func = discover_func;
    4aa0:	4b16      	ldr	r3, [pc, #88]	; (4afc <connected+0xf4>)
    4aa2:	604b      	str	r3, [r1, #4]
  discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
    4aa4:	2301      	movs	r3, #1
    4aa6:	810b      	strh	r3, [r1, #8]
  discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
    4aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4aac:	81cb      	strh	r3, [r1, #14]
  err = bt_gatt_discover(default_conn, &discover_params);
    4aae:	6830      	ldr	r0, [r6, #0]
  discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    4ab0:	2300      	movs	r3, #0
    4ab2:	740b      	strb	r3, [r1, #16]
  err = bt_gatt_discover(default_conn, &discover_params);
    4ab4:	f00d fb7e 	bl	121b4 <bt_gatt_discover>
  if (err != 0)
    4ab8:	2800      	cmp	r0, #0
    4aba:	d0c6      	beq.n	4a4a <connected+0x42>
    LOG_ERR("Discover failed(err %d)\n", err);
    4abc:	682b      	ldr	r3, [r5, #0]
    4abe:	075b      	lsls	r3, r3, #29
    4ac0:	d0c3      	beq.n	4a4a <connected+0x42>
    4ac2:	4b0f      	ldr	r3, [pc, #60]	; (4b00 <connected+0xf8>)
    4ac4:	aa09      	add	r2, sp, #36	; 0x24
    4ac6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
    4aca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4ace:	2303      	movs	r3, #3
    4ad0:	4803      	ldr	r0, [pc, #12]	; (4ae0 <connected+0xd8>)
    4ad2:	9305      	str	r3, [sp, #20]
    4ad4:	9309      	str	r3, [sp, #36]	; 0x24
    4ad6:	f021 fd40 	bl	2655a <z_log_msg2_static_create.constprop.0>
    4ada:	e7b6      	b.n	4a4a <connected+0x42>
    4adc:	20002618 	.word	0x20002618
    4ae0:	200009bc 	.word	0x200009bc
    4ae4:	000309b7 	.word	0x000309b7
    4ae8:	20004a7a 	.word	0x20004a7a
    4aec:	000309d5 	.word	0x000309d5
    4af0:	000309e4 	.word	0x000309e4
    4af4:	2000261c 	.word	0x2000261c
    4af8:	20000976 	.word	0x20000976
    4afc:	000047ad 	.word	0x000047ad
    4b00:	00030a0e 	.word	0x00030a0e

00004b04 <parse_device.part.0>:
static bool parse_device(struct bt_data *data, void *user_data)
    4b04:	b570      	push	{r4, r5, r6, lr}
      LOG_INF("Mobile UUID Found, attempting to connect\n");
    4b06:	4d2b      	ldr	r5, [pc, #172]	; (4bb4 <parse_device.part.0+0xb0>)
    4b08:	682b      	ldr	r3, [r5, #0]
    4b0a:	f003 0307 	and.w	r3, r3, #7
    4b0e:	2b02      	cmp	r3, #2
static bool parse_device(struct bt_data *data, void *user_data)
    4b10:	b08e      	sub	sp, #56	; 0x38
    4b12:	4606      	mov	r6, r0
      LOG_INF("Mobile UUID Found, attempting to connect\n");
    4b14:	d90a      	bls.n	4b2c <parse_device.part.0+0x28>
    4b16:	4b28      	ldr	r3, [pc, #160]	; (4bb8 <parse_device.part.0+0xb4>)
    4b18:	930c      	str	r3, [sp, #48]	; 0x30
    4b1a:	aa0b      	add	r2, sp, #44	; 0x2c
    4b1c:	2302      	movs	r3, #2
    4b1e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4b22:	4628      	mov	r0, r5
    4b24:	9304      	str	r3, [sp, #16]
    4b26:	930b      	str	r3, [sp, #44]	; 0x2c
    4b28:	f021 fd17 	bl	2655a <z_log_msg2_static_create.constprop.0>
      int err = bt_le_scan_stop();
    4b2c:	f00a f938 	bl	eda0 <bt_le_scan_stop>
    4b30:	4604      	mov	r4, r0
      k_msleep(10);
    4b32:	200a      	movs	r0, #10
    4b34:	f021 fd22 	bl	2657c <k_msleep.isra.0>
      if (err)
    4b38:	b184      	cbz	r4, 4b5c <parse_device.part.0+0x58>
        LOG_ERR("Stop LE scan failed (err %d)\n", err);
    4b3a:	682b      	ldr	r3, [r5, #0]
    4b3c:	075a      	lsls	r2, r3, #29
    4b3e:	d00b      	beq.n	4b58 <parse_device.part.0+0x54>
    4b40:	4b1e      	ldr	r3, [pc, #120]	; (4bbc <parse_device.part.0+0xb8>)
    4b42:	481c      	ldr	r0, [pc, #112]	; (4bb4 <parse_device.part.0+0xb0>)
    4b44:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    4b48:	aa0b      	add	r2, sp, #44	; 0x2c
    4b4a:	2303      	movs	r3, #3
    4b4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4b50:	9304      	str	r3, [sp, #16]
    4b52:	930b      	str	r3, [sp, #44]	; 0x2c
    4b54:	f021 fd01 	bl	2655a <z_log_msg2_static_create.constprop.0>
        return true;
    4b58:	2001      	movs	r0, #1
    4b5a:	e029      	b.n	4bb0 <parse_device.part.0+0xac>
      struct bt_le_conn_param *param = BT_LE_CONN_PARAM_DEFAULT;
    4b5c:	2318      	movs	r3, #24
    4b5e:	f8ad 3008 	strh.w	r3, [sp, #8]
    4b62:	2328      	movs	r3, #40	; 0x28
    4b64:	f8ad 300a 	strh.w	r3, [sp, #10]
    4b68:	f44f 73c8 	mov.w	r3, #400	; 0x190
    4b6c:	f8ad 300e 	strh.w	r3, [sp, #14]
          bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &default_conn);
    4b70:	4b13      	ldr	r3, [pc, #76]	; (4bc0 <parse_device.part.0+0xbc>)
      struct bt_le_conn_param *param = BT_LE_CONN_PARAM_DEFAULT;
    4b72:	f8ad 400c 	strh.w	r4, [sp, #12]
          bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &default_conn);
    4b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4b78:	ac04      	add	r4, sp, #16
    4b7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    4b7e:	4b11      	ldr	r3, [pc, #68]	; (4bc4 <parse_device.part.0+0xc0>)
    4b80:	aa02      	add	r2, sp, #8
    4b82:	4621      	mov	r1, r4
    4b84:	4630      	mov	r0, r6
    4b86:	f00a ffa1 	bl	facc <bt_conn_le_create>
      if (err)
    4b8a:	b188      	cbz	r0, 4bb0 <parse_device.part.0+0xac>
        LOG_ERR("Create conn failed (err %d)\n", err);
    4b8c:	682b      	ldr	r3, [r5, #0]
    4b8e:	075b      	lsls	r3, r3, #29
    4b90:	d00b      	beq.n	4baa <parse_device.part.0+0xa6>
    4b92:	4b0d      	ldr	r3, [pc, #52]	; (4bc8 <parse_device.part.0+0xc4>)
    4b94:	aa0b      	add	r2, sp, #44	; 0x2c
    4b96:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
    4b9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4b9e:	2303      	movs	r3, #3
    4ba0:	4804      	ldr	r0, [pc, #16]	; (4bb4 <parse_device.part.0+0xb0>)
    4ba2:	9301      	str	r3, [sp, #4]
    4ba4:	930b      	str	r3, [sp, #44]	; 0x2c
    4ba6:	f021 fcd8 	bl	2655a <z_log_msg2_static_create.constprop.0>
        start_scan();
    4baa:	f7ff fdc7 	bl	473c <start_scan>
      return false;
    4bae:	2000      	movs	r0, #0
}
    4bb0:	b00e      	add	sp, #56	; 0x38
    4bb2:	bd70      	pop	{r4, r5, r6, pc}
    4bb4:	200009bc 	.word	0x200009bc
    4bb8:	00030a27 	.word	0x00030a27
    4bbc:	00030a51 	.word	0x00030a51
    4bc0:	0002e544 	.word	0x0002e544
    4bc4:	20002618 	.word	0x20002618
    4bc8:	00030a6f 	.word	0x00030a6f

00004bcc <parse_device>:
{
    4bcc:	4603      	mov	r3, r0
    4bce:	b4f0      	push	{r4, r5, r6, r7}
  if (data->type == BT_DATA_UUID128_ALL)
    4bd0:	781a      	ldrb	r2, [r3, #0]
    4bd2:	2a07      	cmp	r2, #7
{
    4bd4:	4608      	mov	r0, r1
  if (data->type == BT_DATA_UUID128_ALL)
    4bd6:	d113      	bne.n	4c00 <parse_device+0x34>
  int matchedCount = 0;
    4bd8:	2200      	movs	r2, #0
    for (i = 0; i < data->data_len; i++)
    4bda:	785d      	ldrb	r5, [r3, #1]
    4bdc:	490a      	ldr	r1, [pc, #40]	; (4c08 <parse_device+0x3c>)
    4bde:	4614      	mov	r4, r2
    4be0:	42a5      	cmp	r5, r4
    4be2:	dc04      	bgt.n	4bee <parse_device+0x22>
    if (matchedCount == UUID_BUFFER_SIZE)
    4be4:	2a10      	cmp	r2, #16
    4be6:	d10b      	bne.n	4c00 <parse_device+0x34>
}
    4be8:	bcf0      	pop	{r4, r5, r6, r7}
    4bea:	f7ff bf8b 	b.w	4b04 <parse_device.part.0>
      temp = data->data[i];
    4bee:	685f      	ldr	r7, [r3, #4]
      if (temp == ble_uuid[i])
    4bf0:	f831 6b02 	ldrh.w	r6, [r1], #2
    4bf4:	5d3f      	ldrb	r7, [r7, r4]
    4bf6:	42b7      	cmp	r7, r6
        matchedCount++;
    4bf8:	bf08      	it	eq
    4bfa:	3201      	addeq	r2, #1
    for (i = 0; i < data->data_len; i++)
    4bfc:	3401      	adds	r4, #1
    4bfe:	e7ef      	b.n	4be0 <parse_device+0x14>
}
    4c00:	2001      	movs	r0, #1
    4c02:	bcf0      	pop	{r4, r5, r6, r7}
    4c04:	4770      	bx	lr
    4c06:	bf00      	nop
    4c08:	200008ac 	.word	0x200008ac

00004c0c <scu_write>:
  write_params.data = tx_buff;
    4c0c:	4911      	ldr	r1, [pc, #68]	; (4c54 <scu_write+0x48>)
    4c0e:	4b12      	ldr	r3, [pc, #72]	; (4c58 <scu_write+0x4c>)
{
    4c10:	b500      	push	{lr}
  write_params.data = tx_buff;
    4c12:	608b      	str	r3, [r1, #8]
  write_params.length = sizeof(tx_buff);
    4c14:	230c      	movs	r3, #12
    4c16:	818b      	strh	r3, [r1, #12]
  write_params.func = gatt_write_cb;
    4c18:	4b10      	ldr	r3, [pc, #64]	; (4c5c <scu_write+0x50>)
    4c1a:	600b      	str	r3, [r1, #0]
  write_params.handle = tx_handle;
    4c1c:	4b10      	ldr	r3, [pc, #64]	; (4c60 <scu_write+0x54>)
    4c1e:	881b      	ldrh	r3, [r3, #0]
    4c20:	808b      	strh	r3, [r1, #4]
  err = bt_gatt_write(default_conn, &write_params);
    4c22:	4b10      	ldr	r3, [pc, #64]	; (4c64 <scu_write+0x58>)
{
    4c24:	b089      	sub	sp, #36	; 0x24
  err = bt_gatt_write(default_conn, &write_params);
    4c26:	6818      	ldr	r0, [r3, #0]
    4c28:	f00d feac 	bl	12984 <bt_gatt_write>
  if (err != 0)
    4c2c:	4603      	mov	r3, r0
    4c2e:	b170      	cbz	r0, 4c4e <scu_write+0x42>
    LOG_ERR("bt_gatt_write failed: %d\n", err);
    4c30:	480d      	ldr	r0, [pc, #52]	; (4c68 <scu_write+0x5c>)
    4c32:	6802      	ldr	r2, [r0, #0]
    4c34:	0752      	lsls	r2, r2, #29
    4c36:	d00a      	beq.n	4c4e <scu_write+0x42>
    4c38:	4a0c      	ldr	r2, [pc, #48]	; (4c6c <scu_write+0x60>)
    4c3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4c3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4c42:	2303      	movs	r3, #3
    4c44:	aa05      	add	r2, sp, #20
    4c46:	9301      	str	r3, [sp, #4]
    4c48:	9305      	str	r3, [sp, #20]
    4c4a:	f021 fc86 	bl	2655a <z_log_msg2_static_create.constprop.0>
}
    4c4e:	b009      	add	sp, #36	; 0x24
    4c50:	f85d fb04 	ldr.w	pc, [sp], #4
    4c54:	20002630 	.word	0x20002630
    4c58:	20004a4a 	.word	0x20004a4a
    4c5c:	000048c1 	.word	0x000048c1
    4c60:	20004a3c 	.word	0x20004a3c
    4c64:	20002618 	.word	0x20002618
    4c68:	200009bc 	.word	0x200009bc
    4c6c:	00030a8c 	.word	0x00030a8c

00004c70 <thread_ble_base>:
{
    4c70:	b500      	push	{lr}
  err = bt_enable(NULL);
    4c72:	2000      	movs	r0, #0
{
    4c74:	b089      	sub	sp, #36	; 0x24
  err = bt_enable(NULL);
    4c76:	f009 f859 	bl	dd2c <bt_enable>
  default_conn = NULL;
    4c7a:	4b17      	ldr	r3, [pc, #92]	; (4cd8 <thread_ble_base+0x68>)
    4c7c:	2200      	movs	r2, #0
    4c7e:	601a      	str	r2, [r3, #0]
  if (err)
    4c80:	4603      	mov	r3, r0
    4c82:	4816      	ldr	r0, [pc, #88]	; (4cdc <thread_ble_base+0x6c>)
    4c84:	b183      	cbz	r3, 4ca8 <thread_ble_base+0x38>
    LOG_ERR("Bluetooth init failed (err %d)\n", err);
    4c86:	6802      	ldr	r2, [r0, #0]
    4c88:	0752      	lsls	r2, r2, #29
    4c8a:	d00a      	beq.n	4ca2 <thread_ble_base+0x32>
    4c8c:	4a14      	ldr	r2, [pc, #80]	; (4ce0 <thread_ble_base+0x70>)
    4c8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4c92:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4c96:	2303      	movs	r3, #3
    4c98:	aa05      	add	r2, sp, #20
    4c9a:	9301      	str	r3, [sp, #4]
    4c9c:	9305      	str	r3, [sp, #20]
    4c9e:	f021 fc5c 	bl	2655a <z_log_msg2_static_create.constprop.0>
}
    4ca2:	b009      	add	sp, #36	; 0x24
    4ca4:	f85d fb04 	ldr.w	pc, [sp], #4
  LOG_INF("Bluetooth initialized\n");
    4ca8:	6803      	ldr	r3, [r0, #0]
    4caa:	f003 0307 	and.w	r3, r3, #7
    4cae:	2b02      	cmp	r3, #2
    4cb0:	d909      	bls.n	4cc6 <thread_ble_base+0x56>
    4cb2:	4b0c      	ldr	r3, [pc, #48]	; (4ce4 <thread_ble_base+0x74>)
    4cb4:	9306      	str	r3, [sp, #24]
    4cb6:	aa05      	add	r2, sp, #20
    4cb8:	2302      	movs	r3, #2
    4cba:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4cbe:	9301      	str	r3, [sp, #4]
    4cc0:	9305      	str	r3, [sp, #20]
    4cc2:	f021 fc4a 	bl	2655a <z_log_msg2_static_create.constprop.0>
  bt_conn_cb_register(&conn_callbacks);
    4cc6:	4808      	ldr	r0, [pc, #32]	; (4ce8 <thread_ble_base+0x78>)
    4cc8:	f00a fe6e 	bl	f9a8 <bt_conn_cb_register>
}
    4ccc:	b009      	add	sp, #36	; 0x24
    4cce:	f85d eb04 	ldr.w	lr, [sp], #4
  start_scan();
    4cd2:	f7ff bd33 	b.w	473c <start_scan>
    4cd6:	bf00      	nop
    4cd8:	20002618 	.word	0x20002618
    4cdc:	200009bc 	.word	0x200009bc
    4ce0:	00030aa6 	.word	0x00030aa6
    4ce4:	00030ac6 	.word	0x00030ac6
    4ce8:	200001b0 	.word	0x200001b0

00004cec <process_raw_data>:
 *
 */
void process_raw_data(void)
{

    switch (rx_buff[1])
    4cec:	4b1d      	ldr	r3, [pc, #116]	; (4d64 <process_raw_data+0x78>)
    4cee:	885a      	ldrh	r2, [r3, #2]
    4cf0:	3a01      	subs	r2, #1
    4cf2:	2a09      	cmp	r2, #9
    4cf4:	d834      	bhi.n	4d60 <process_raw_data+0x74>
    4cf6:	e8df f002 	tbb	[pc, r2]
    4cfa:	0905      	.short	0x0905
    4cfc:	1915110d 	.word	0x1915110d
    4d00:	2d29211d 	.word	0x2d29211d
    {
    case 0x01:
        ahu_data.temp = rx_buff[2];
    4d04:	889a      	ldrh	r2, [r3, #4]
    4d06:	4b18      	ldr	r3, [pc, #96]	; (4d68 <process_raw_data+0x7c>)
    4d08:	701a      	strb	r2, [r3, #0]
        break;
    4d0a:	4770      	bx	lr
    case 0x02:
        ahu_data.humidity = rx_buff[2];
    4d0c:	889a      	ldrh	r2, [r3, #4]
    4d0e:	4b16      	ldr	r3, [pc, #88]	; (4d68 <process_raw_data+0x7c>)
    4d10:	705a      	strb	r2, [r3, #1]
        break;
    4d12:	4770      	bx	lr
    case 0x03:
        ahu_data.air_pressure = rx_buff[2];
    4d14:	889a      	ldrh	r2, [r3, #4]
    4d16:	4b14      	ldr	r3, [pc, #80]	; (4d68 <process_raw_data+0x7c>)
    4d18:	709a      	strb	r2, [r3, #2]
        break;
    4d1a:	4770      	bx	lr
    case 0x04:
        ahu_data.VOC = rx_buff[2];
    4d1c:	889a      	ldrh	r2, [r3, #4]
    4d1e:	4b12      	ldr	r3, [pc, #72]	; (4d68 <process_raw_data+0x7c>)
    4d20:	70da      	strb	r2, [r3, #3]
        break;
    4d22:	4770      	bx	lr
    case 0x05:
        ahu_data.X = rx_buff[2];
    4d24:	889a      	ldrh	r2, [r3, #4]
    4d26:	4b10      	ldr	r3, [pc, #64]	; (4d68 <process_raw_data+0x7c>)
    4d28:	711a      	strb	r2, [r3, #4]
        break;
    4d2a:	4770      	bx	lr
    case 0x06:
        ahu_data.Y = rx_buff[2];
    4d2c:	889a      	ldrh	r2, [r3, #4]
    4d2e:	4b0e      	ldr	r3, [pc, #56]	; (4d68 <process_raw_data+0x7c>)
    4d30:	715a      	strb	r2, [r3, #5]
        break;
    4d32:	4770      	bx	lr
    case 0x07:
        ahu_data.Z = rx_buff[2];
    4d34:	889a      	ldrh	r2, [r3, #4]
    4d36:	4b0c      	ldr	r3, [pc, #48]	; (4d68 <process_raw_data+0x7c>)
    4d38:	719a      	strb	r2, [r3, #6]
        break;
    4d3a:	4770      	bx	lr
    case 0x08:
        ahu_data.rgb[0] = rx_buff[2];
    4d3c:	4a0a      	ldr	r2, [pc, #40]	; (4d68 <process_raw_data+0x7c>)
    4d3e:	8899      	ldrh	r1, [r3, #4]
    4d40:	71d1      	strb	r1, [r2, #7]
        ahu_data.rgb[1] = rx_buff[3];
    4d42:	88d9      	ldrh	r1, [r3, #6]
        ahu_data.rgb[2] = rx_buff[4];
    4d44:	891b      	ldrh	r3, [r3, #8]
        ahu_data.rgb[1] = rx_buff[3];
    4d46:	7211      	strb	r1, [r2, #8]
        ahu_data.rgb[2] = rx_buff[4];
    4d48:	7253      	strb	r3, [r2, #9]
        break;
    4d4a:	4770      	bx	lr
    case 0x09:
        ahu_data.buzzer = rx_buff[2];
    4d4c:	889a      	ldrh	r2, [r3, #4]
    4d4e:	4b06      	ldr	r3, [pc, #24]	; (4d68 <process_raw_data+0x7c>)
    4d50:	729a      	strb	r2, [r3, #10]
        break;
    4d52:	4770      	bx	lr
    case 0x0A:
        ahu_data.push_button = rx_buff[2];
    4d54:	889b      	ldrh	r3, [r3, #4]
    4d56:	4a04      	ldr	r2, [pc, #16]	; (4d68 <process_raw_data+0x7c>)
    4d58:	3b00      	subs	r3, #0
    4d5a:	bf18      	it	ne
    4d5c:	2301      	movne	r3, #1
    4d5e:	72d3      	strb	r3, [r2, #11]
        break;
    default:
        break;
    }
}
    4d60:	4770      	bx	lr
    4d62:	bf00      	nop
    4d64:	20004a3e 	.word	0x20004a3e
    4d68:	20004a7b 	.word	0x20004a7b

00004d6c <print_scu_response>:
 *
 */
void print_scu_response(void)
{

    switch (rx_buff[1])
    4d6c:	4b1e      	ldr	r3, [pc, #120]	; (4de8 <print_scu_response+0x7c>)
    4d6e:	885b      	ldrh	r3, [r3, #2]
    4d70:	3b01      	subs	r3, #1
    4d72:	2b09      	cmp	r3, #9
    4d74:	d836      	bhi.n	4de4 <print_scu_response+0x78>
    4d76:	e8df f003 	tbb	[pc, r3]
    4d7a:	0a05      	.short	0x0a05
    4d7c:	1a16120e 	.word	0x1a16120e
    4d80:	2d29221e 	.word	0x2d29221e
    {
    case 0x01:
        printk("The temperature is %i Degrees\n", ahu_data.temp);
    4d84:	4b19      	ldr	r3, [pc, #100]	; (4dec <print_scu_response+0x80>)
    4d86:	481a      	ldr	r0, [pc, #104]	; (4df0 <print_scu_response+0x84>)
    4d88:	7819      	ldrb	r1, [r3, #0]
        break;
    case 0x02:
        printk("The humidity is %i Percent\n", ahu_data.humidity);
    4d8a:	f021 bde7 	b.w	2695c <printk>
    4d8e:	4b17      	ldr	r3, [pc, #92]	; (4dec <print_scu_response+0x80>)
    4d90:	4818      	ldr	r0, [pc, #96]	; (4df4 <print_scu_response+0x88>)
    4d92:	7859      	ldrb	r1, [r3, #1]
    4d94:	e7f9      	b.n	4d8a <print_scu_response+0x1e>
        break;
    case 0x03:
        printk("The air pressure is %i mmHg\n", ahu_data.air_pressure);
    4d96:	4b15      	ldr	r3, [pc, #84]	; (4dec <print_scu_response+0x80>)
    4d98:	4817      	ldr	r0, [pc, #92]	; (4df8 <print_scu_response+0x8c>)
    4d9a:	7899      	ldrb	r1, [r3, #2]
    4d9c:	e7f5      	b.n	4d8a <print_scu_response+0x1e>
        break;
    case 0x04:
        printk("The Volatile Organic Compounds are %i ppm\n", ahu_data.VOC);
    4d9e:	4b13      	ldr	r3, [pc, #76]	; (4dec <print_scu_response+0x80>)
    4da0:	4816      	ldr	r0, [pc, #88]	; (4dfc <print_scu_response+0x90>)
    4da2:	78d9      	ldrb	r1, [r3, #3]
    4da4:	e7f1      	b.n	4d8a <print_scu_response+0x1e>
        break;
    case 0x05:
        printk("The X Acceleration is %i N\n", ahu_data.X);
    4da6:	4b11      	ldr	r3, [pc, #68]	; (4dec <print_scu_response+0x80>)
    4da8:	4815      	ldr	r0, [pc, #84]	; (4e00 <print_scu_response+0x94>)
    4daa:	7919      	ldrb	r1, [r3, #4]
    4dac:	e7ed      	b.n	4d8a <print_scu_response+0x1e>
        break;
    case 0x06:
        printk("The Y Acceleration is %i N\n", ahu_data.Y);
    4dae:	4b0f      	ldr	r3, [pc, #60]	; (4dec <print_scu_response+0x80>)
    4db0:	4814      	ldr	r0, [pc, #80]	; (4e04 <print_scu_response+0x98>)
    4db2:	7959      	ldrb	r1, [r3, #5]
    4db4:	e7e9      	b.n	4d8a <print_scu_response+0x1e>
        break;
    case 0x07:
        printk("The Z Acceleration is %i N\n", ahu_data.Z);
    4db6:	4b0d      	ldr	r3, [pc, #52]	; (4dec <print_scu_response+0x80>)
    4db8:	4813      	ldr	r0, [pc, #76]	; (4e08 <print_scu_response+0x9c>)
    4dba:	7999      	ldrb	r1, [r3, #6]
    4dbc:	e7e5      	b.n	4d8a <print_scu_response+0x1e>
        break;
    case 0x08:
        printk("The RGB values are %i, %i, %i\n", ahu_data.rgb[0], ahu_data.rgb[1],
               ahu_data.rgb[2]);
    4dbe:	490b      	ldr	r1, [pc, #44]	; (4dec <print_scu_response+0x80>)
        printk("The RGB values are %i, %i, %i\n", ahu_data.rgb[0], ahu_data.rgb[1],
    4dc0:	4812      	ldr	r0, [pc, #72]	; (4e0c <print_scu_response+0xa0>)
    4dc2:	7a4b      	ldrb	r3, [r1, #9]
    4dc4:	7a0a      	ldrb	r2, [r1, #8]
    4dc6:	79c9      	ldrb	r1, [r1, #7]
    4dc8:	f021 bdc8 	b.w	2695c <printk>
        break;
    case 0x09:
        printk("The buzzer is now set to %i Hz\n", ahu_data.buzzer);
    4dcc:	4b07      	ldr	r3, [pc, #28]	; (4dec <print_scu_response+0x80>)
    4dce:	4810      	ldr	r0, [pc, #64]	; (4e10 <print_scu_response+0xa4>)
    4dd0:	7a99      	ldrb	r1, [r3, #10]
    4dd2:	e7da      	b.n	4d8a <print_scu_response+0x1e>
        break;
    case 0x0A:
        if (ahu_data.push_button)
    4dd4:	4b05      	ldr	r3, [pc, #20]	; (4dec <print_scu_response+0x80>)
    4dd6:	7adb      	ldrb	r3, [r3, #11]
    4dd8:	b113      	cbz	r3, 4de0 <print_scu_response+0x74>
        {
            printk("The push button is pressed\n");
    4dda:	480e      	ldr	r0, [pc, #56]	; (4e14 <print_scu_response+0xa8>)
        }
        else
        {
            printk("The push button is not pressed\n");
    4ddc:	f021 bdbe 	b.w	2695c <printk>
    4de0:	480d      	ldr	r0, [pc, #52]	; (4e18 <print_scu_response+0xac>)
    4de2:	e7fb      	b.n	4ddc <print_scu_response+0x70>
        }
        break;
    default:
        break;
    }
}
    4de4:	4770      	bx	lr
    4de6:	bf00      	nop
    4de8:	20004a3e 	.word	0x20004a3e
    4dec:	20004a7b 	.word	0x20004a7b
    4df0:	00030ae1 	.word	0x00030ae1
    4df4:	00030b00 	.word	0x00030b00
    4df8:	00030b1c 	.word	0x00030b1c
    4dfc:	00030b39 	.word	0x00030b39
    4e00:	00030b64 	.word	0x00030b64
    4e04:	00030b80 	.word	0x00030b80
    4e08:	00030b9c 	.word	0x00030b9c
    4e0c:	00030bb8 	.word	0x00030bb8
    4e10:	00030bd7 	.word	0x00030bd7
    4e14:	00030bf7 	.word	0x00030bf7
    4e18:	00030c13 	.word	0x00030c13

00004e1c <process_rx_data>:
/**
 * @brief Process incoming data from the SCU RX GATT attribute.
 *
 */
void process_rx_data(void)
{
    4e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_take(sem, timeout);
    4e20:	4d1f      	ldr	r5, [pc, #124]	; (4ea0 <process_rx_data+0x84>)
    while (1)
    {

        if (!k_sem_take(&sem_data_arrived, K_FOREVER))
        {
            LOG_DBG("[RAW RX]: 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X\n", rx_buff[0],
    4e22:	4c20      	ldr	r4, [pc, #128]	; (4ea4 <process_rx_data+0x88>)
                    rx_buff[1], rx_buff[2], rx_buff[3], rx_buff[4], rx_buff[5]);
            process_raw_data();
            if (!all_active)
    4e24:	4e20      	ldr	r6, [pc, #128]	; (4ea8 <process_rx_data+0x8c>)
{
    4e26:	b083      	sub	sp, #12
    4e28:	af00      	add	r7, sp, #0
    4e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e32:	4628      	mov	r0, r5
    4e34:	f020 fb84 	bl	25540 <z_impl_k_sem_take>
        if (!k_sem_take(&sem_data_arrived, K_FOREVER))
    4e38:	4603      	mov	r3, r0
    4e3a:	2800      	cmp	r0, #0
    4e3c:	d1f5      	bne.n	4e2a <process_rx_data+0xe>
            LOG_DBG("[RAW RX]: 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X\n", rx_buff[0],
    4e3e:	6822      	ldr	r2, [r4, #0]
    4e40:	0752      	lsls	r2, r2, #29
    4e42:	d524      	bpl.n	4e8e <process_rx_data+0x72>
    4e44:	4a19      	ldr	r2, [pc, #100]	; (4eac <process_rx_data+0x90>)
    4e46:	f8df b068 	ldr.w	fp, [pc, #104]	; 4eb0 <process_rx_data+0x94>
    4e4a:	8951      	ldrh	r1, [r2, #10]
    4e4c:	f8b2 a000 	ldrh.w	sl, [r2]
    4e50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    4e54:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    4e58:	f8b2 c006 	ldrh.w	ip, [r2, #6]
    4e5c:	8910      	ldrh	r0, [r2, #8]
    4e5e:	46e8      	mov	r8, sp
    4e60:	b08c      	sub	sp, #48	; 0x30
    4e62:	466a      	mov	r2, sp
    4e64:	e9c2 9e07 	strd	r9, lr, [r2, #28]
    4e68:	f8c2 b010 	str.w	fp, [r2, #16]
    4e6c:	f8df b044 	ldr.w	fp, [pc, #68]	; 4eb4 <process_rx_data+0x98>
    4e70:	62d1      	str	r1, [r2, #44]	; 0x2c
    4e72:	2109      	movs	r1, #9
    4e74:	e9c2 ba05 	strd	fp, sl, [r2, #20]
    4e78:	e9c2 c009 	strd	ip, r0, [r2, #36]	; 0x24
    4e7c:	6079      	str	r1, [r7, #4]
    4e7e:	f842 1f0c 	str.w	r1, [r2, #12]!
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    4e82:	f44f 4192 	mov.w	r1, #18688	; 0x4900
    4e86:	4620      	mov	r0, r4
    4e88:	f022 fd5a 	bl	27940 <z_impl_z_log_msg2_static_create>
    4e8c:	46c5      	mov	sp, r8
            process_raw_data();
    4e8e:	f7ff ff2d 	bl	4cec <process_raw_data>
            if (!all_active)
    4e92:	7833      	ldrb	r3, [r6, #0]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d1c8      	bne.n	4e2a <process_rx_data+0xe>
            {
                print_scu_response();
    4e98:	f7ff ff68 	bl	4d6c <print_scu_response>
        if (!k_sem_take(&sem_data_arrived, K_FOREVER))
    4e9c:	e7c5      	b.n	4e2a <process_rx_data+0xe>
    4e9e:	bf00      	nop
    4ea0:	20000c38 	.word	0x20000c38
    4ea4:	200009c0 	.word	0x200009c0
    4ea8:	20004a87 	.word	0x20004a87
    4eac:	20004a3e 	.word	0x20004a3e
    4eb0:	00030c33 	.word	0x00030c33
    4eb4:	00030cc4 	.word	0x00030cc4

00004eb8 <JSON_thread>:
/**
 * @brief Print JSON data to the Shell
 *
 */
void JSON_thread(void)
{
    4eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    stream_freq = 1;
    4eba:	4d1b      	ldr	r5, [pc, #108]	; (4f28 <JSON_thread+0x70>)
    while (1)
    {
        if (all_active)
    4ebc:	4e1b      	ldr	r6, [pc, #108]	; (4f2c <JSON_thread+0x74>)
        {
            printk("{ \"1\" :%i, \"2\" :%i, \"3\" :%i, \"4\" :%i, \"5\" :%i, \"6\" "
                   ":%i, \"7\" :%i, \"8\" :%i, \"9\" :%i, \"10\" :%i }\n",
                   ahu_data.temp, ahu_data.humidity, ahu_data.air_pressure,
    4ebe:	4c1c      	ldr	r4, [pc, #112]	; (4f30 <JSON_thread+0x78>)
            printk("{ \"1\" :%i, \"2\" :%i, \"3\" :%i, \"4\" :%i, \"5\" :%i, \"6\" "
    4ec0:	4f1c      	ldr	r7, [pc, #112]	; (4f34 <JSON_thread+0x7c>)
    stream_freq = 1;
    4ec2:	2301      	movs	r3, #1
{
    4ec4:	b089      	sub	sp, #36	; 0x24
    stream_freq = 1;
    4ec6:	702b      	strb	r3, [r5, #0]
        if (all_active)
    4ec8:	7833      	ldrb	r3, [r6, #0]
    4eca:	b19b      	cbz	r3, 4ef4 <JSON_thread+0x3c>
            printk("{ \"1\" :%i, \"2\" :%i, \"3\" :%i, \"4\" :%i, \"5\" :%i, \"6\" "
    4ecc:	7ae3      	ldrb	r3, [r4, #11]
    4ece:	9306      	str	r3, [sp, #24]
    4ed0:	7aa3      	ldrb	r3, [r4, #10]
    4ed2:	9305      	str	r3, [sp, #20]
    4ed4:	79e3      	ldrb	r3, [r4, #7]
    4ed6:	9304      	str	r3, [sp, #16]
    4ed8:	79a3      	ldrb	r3, [r4, #6]
    4eda:	9303      	str	r3, [sp, #12]
    4edc:	7963      	ldrb	r3, [r4, #5]
    4ede:	9302      	str	r3, [sp, #8]
    4ee0:	7923      	ldrb	r3, [r4, #4]
    4ee2:	9301      	str	r3, [sp, #4]
    4ee4:	78e3      	ldrb	r3, [r4, #3]
    4ee6:	9300      	str	r3, [sp, #0]
    4ee8:	7862      	ldrb	r2, [r4, #1]
    4eea:	78a3      	ldrb	r3, [r4, #2]
    4eec:	7821      	ldrb	r1, [r4, #0]
    4eee:	4638      	mov	r0, r7
    4ef0:	f021 fd34 	bl	2695c <printk>
                   ahu_data.VOC, ahu_data.X, ahu_data.Y, ahu_data.Z, ahu_data.rgb[0],
                   ahu_data.buzzer, ahu_data.push_button);
        }

        k_sleep(K_MSEC(stream_freq * 1000));
    4ef4:	7828      	ldrb	r0, [r5, #0]
    4ef6:	b1a8      	cbz	r0, 4f24 <JSON_thread+0x6c>
    4ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4efc:	4358      	muls	r0, r3
    4efe:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4f00:	03c9      	lsls	r1, r1, #15
    4f02:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4f06:	f240 33e7 	movw	r3, #999	; 0x3e7
    4f0a:	03c0      	lsls	r0, r0, #15
    4f0c:	18c0      	adds	r0, r0, r3
    4f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f12:	f04f 0300 	mov.w	r3, #0
    4f16:	f141 0100 	adc.w	r1, r1, #0
    4f1a:	f7fc f941 	bl	11a0 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4f1e:	f020 ffcd 	bl	25ebc <z_impl_k_sleep>
    {
    4f22:	e7d1      	b.n	4ec8 <JSON_thread+0x10>
        k_sleep(K_MSEC(stream_freq * 1000));
    4f24:	4601      	mov	r1, r0
    4f26:	e7eb      	b.n	4f00 <JSON_thread+0x48>
    4f28:	20000998 	.word	0x20000998
    4f2c:	20004a87 	.word	0x20004a87
    4f30:	20004a7b 	.word	0x20004a7b
    4f34:	00030c60 	.word	0x00030c60

00004f38 <begin_shell>:
LOG_MODULE_REGISTER(SHELL_BASE, INITIAL_SHELL_BASE_LOG_LEVEL);

#define NO_USB -1

int begin_shell(void)
{
    4f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const struct device *shell_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_shell_uart));
    uint32_t dtr = 0;
    4f3a:	2000      	movs	r0, #0
    4f3c:	9001      	str	r0, [sp, #4]

    /* Enable the USB Driver */
    if (usb_enable(NULL))
    4f3e:	f005 f80b 	bl	9f58 <usb_enable>
    4f42:	4604      	mov	r4, r0
    4f44:	b9f0      	cbnz	r0, 4f84 <begin_shell+0x4c>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    4f46:	4d11      	ldr	r5, [pc, #68]	; (4f8c <begin_shell+0x54>)

    /* Wait on DTR - 'Data Terminal Ready'
     * Will wait here until a terminal has been attached to the device
     * This is not necessary, however, can be useful for printing boot info etc..
     */
    while (!dtr)
    4f48:	9b01      	ldr	r3, [sp, #4]
    4f4a:	b173      	cbz	r3, 4f6a <begin_shell+0x32>
    {
        uart_line_ctrl_get(shell_dev, UART_LINE_CTRL_DTR, &dtr);
        k_sleep(K_MSEC(100));
    }

    printk("\n=======================================\n");
    4f4c:	4810      	ldr	r0, [pc, #64]	; (4f90 <begin_shell+0x58>)
    4f4e:	f021 fd05 	bl	2695c <printk>
    printk("Welcome to the Weather Station Terminal\n");
    4f52:	4810      	ldr	r0, [pc, #64]	; (4f94 <begin_shell+0x5c>)
    4f54:	f021 fd02 	bl	2695c <printk>
    printk("=======================================\n");
    4f58:	480f      	ldr	r0, [pc, #60]	; (4f98 <begin_shell+0x60>)
    4f5a:	f021 fcff 	bl	2695c <printk>
    printk("\n--Press TAB to see available commands--\n\n");
    4f5e:	480f      	ldr	r0, [pc, #60]	; (4f9c <begin_shell+0x64>)
    4f60:	f021 fcfc 	bl	2695c <printk>
    return 0;
}
    4f64:	4620      	mov	r0, r4
    4f66:	b003      	add	sp, #12
    4f68:	bd30      	pop	{r4, r5, pc}
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    4f6a:	68ab      	ldr	r3, [r5, #8]
    4f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4f6e:	b11b      	cbz	r3, 4f78 <begin_shell+0x40>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    4f70:	aa01      	add	r2, sp, #4
    4f72:	2104      	movs	r1, #4
    4f74:	4628      	mov	r0, r5
    4f76:	4798      	blx	r3
    4f78:	2100      	movs	r1, #0
    4f7a:	f640 40cd 	movw	r0, #3277	; 0xccd
    4f7e:	f020 ff9d 	bl	25ebc <z_impl_k_sleep>
    4f82:	e7e1      	b.n	4f48 <begin_shell+0x10>
        return NO_USB;
    4f84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4f88:	e7ec      	b.n	4f64 <begin_shell+0x2c>
    4f8a:	bf00      	nop
    4f8c:	0002e03c 	.word	0x0002e03c
    4f90:	00030cd4 	.word	0x00030cd4
    4f94:	00030cfe 	.word	0x00030cfe
    4f98:	00030cd5 	.word	0x00030cd5
    4f9c:	00030d27 	.word	0x00030d27

00004fa0 <cmd_disp_time>:
 * @param argv
 * @return Return 0 if the command was successful
 */
int cmd_disp_time(const struct shell *shell, size_t argc,
                  char **argv)
{
    4fa0:	b538      	push	{r3, r4, r5, lr}
    4fa2:	4605      	mov	r5, r0
	return z_impl_k_uptime_ticks();
    4fa4:	f028 fe11 	bl	2dbca <z_impl_k_uptime_ticks>
    4fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4fac:	fba0 4302 	umull	r4, r3, r0, r2
    4fb0:	fb02 3101 	mla	r1, r2, r1, r3
    4fb4:	0be4      	lsrs	r4, r4, #15

        ARG_UNUSED(argc);
        ARG_UNUSED(argv);

        int sec = k_uptime_get() / 1000;
    4fb6:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    4fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4fbe:	2300      	movs	r3, #0
    4fc0:	0bc9      	lsrs	r1, r1, #15
    4fc2:	f7fc f89d 	bl	1100 <__aeabi_ldivmod>

        shell_print(shell, "%us\n", sec);
    4fc6:	4a04      	ldr	r2, [pc, #16]	; (4fd8 <cmd_disp_time+0x38>)
        int sec = k_uptime_get() / 1000;
    4fc8:	4603      	mov	r3, r0
        shell_print(shell, "%us\n", sec);
    4fca:	2108      	movs	r1, #8
    4fcc:	4628      	mov	r0, r5
    4fce:	f022 feb2 	bl	27d36 <shell_fprintf>

        return OK;
}
    4fd2:	2000      	movs	r0, #0
    4fd4:	bd38      	pop	{r3, r4, r5, pc}
    4fd6:	bf00      	nop
    4fd8:	00030d73 	.word	0x00030d73

00004fdc <cmd_disp_format_time>:
 * @param argv
 * @return int
 */
int cmd_disp_format_time(const struct shell *shell, size_t argc,
                         char **argv)
{
    4fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4fde:	4605      	mov	r5, r0
    4fe0:	f028 fdf3 	bl	2dbca <z_impl_k_uptime_ticks>
    4fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4fe8:	fba0 4003 	umull	r4, r0, r0, r3
    4fec:	fb03 0101 	mla	r1, r3, r1, r0
    4ff0:	0be4      	lsrs	r4, r4, #15
        ARG_UNUSED(argc);
        ARG_UNUSED(argv);
        int sec = k_uptime_get() / 1000;
    4ff2:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    4ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4ffa:	2300      	movs	r3, #0
    4ffc:	0bc9      	lsrs	r1, r1, #15
    4ffe:	f7fc f87f 	bl	1100 <__aeabi_ldivmod>
        int min = sec / 60;
    5002:	243c      	movs	r4, #60	; 0x3c
    5004:	fb90 f1f4 	sdiv	r1, r0, r4
        int hr = min / 60;

        shell_print(shell, "%uhrs %umin %us\n", hr, (min % 60), (sec % 60));
    5008:	fb04 0011 	mls	r0, r4, r1, r0
        int hr = min / 60;
    500c:	fb91 f3f4 	sdiv	r3, r1, r4
        shell_print(shell, "%uhrs %umin %us\n", hr, (min % 60), (sec % 60));
    5010:	fb04 1113 	mls	r1, r4, r3, r1
    5014:	9001      	str	r0, [sp, #4]
    5016:	9100      	str	r1, [sp, #0]
    5018:	4628      	mov	r0, r5
    501a:	4a03      	ldr	r2, [pc, #12]	; (5028 <cmd_disp_format_time+0x4c>)
    501c:	2108      	movs	r1, #8
    501e:	f022 fe8a 	bl	27d36 <shell_fprintf>
        return OK;
    5022:	2000      	movs	r0, #0
    5024:	b003      	add	sp, #12
    5026:	bd30      	pop	{r4, r5, pc}
    5028:	00030d67 	.word	0x00030d67

0000502c <cmd_sample_write_sec>:

    return 0;
}

int cmd_sample_write_sec(const struct shell *shell, size_t argc, char **argv)
{
    502c:	b513      	push	{r0, r1, r4, lr}

    stream_freq = atoi(argv[1]);
    502e:	6850      	ldr	r0, [r2, #4]
    5030:	f024 ffe4 	bl	29ffc <atoi>
    5034:	4b08      	ldr	r3, [pc, #32]	; (5058 <cmd_sample_write_sec+0x2c>)
    5036:	b2c2      	uxtb	r2, r0
    package_hci_message(REQUEST, SAMPLE, stream_freq, 0, 0, 0);
    5038:	2400      	movs	r4, #0
    stream_freq = atoi(argv[1]);
    503a:	701a      	strb	r2, [r3, #0]
    package_hci_message(REQUEST, SAMPLE, stream_freq, 0, 0, 0);
    503c:	210c      	movs	r1, #12
    503e:	4623      	mov	r3, r4
    5040:	e9cd 4400 	strd	r4, r4, [sp]
    5044:	2001      	movs	r0, #1
    5046:	f000 fb27 	bl	5698 <package_hci_message>
    scu_write();
    504a:	f7ff fddf 	bl	4c0c <scu_write>
    clear_tx();
    504e:	f000 fb53 	bl	56f8 <clear_tx>

    return 0;
}
    5052:	4620      	mov	r0, r4
    5054:	b002      	add	sp, #8
    5056:	bd10      	pop	{r4, pc}
    5058:	20000998 	.word	0x20000998

0000505c <cmd_all_on>:

int cmd_all_on(const struct shell *shell, size_t argc, char **argv)
{
    505c:	b513      	push	{r0, r1, r4, lr}

    package_hci_message(REQUEST, ALL, 1, 0, 0, 0);
    505e:	2201      	movs	r2, #1
    5060:	2400      	movs	r4, #0
    5062:	4623      	mov	r3, r4
    5064:	210d      	movs	r1, #13
    5066:	4610      	mov	r0, r2
    5068:	e9cd 4400 	strd	r4, r4, [sp]
    506c:	f000 fb14 	bl	5698 <package_hci_message>
    scu_write();
    5070:	f7ff fdcc 	bl	4c0c <scu_write>
    clear_tx();
    5074:	f000 fb40 	bl	56f8 <clear_tx>
    all_active = true;
    5078:	4b02      	ldr	r3, [pc, #8]	; (5084 <cmd_all_on+0x28>)
    507a:	2201      	movs	r2, #1

    return 0;
}
    507c:	4620      	mov	r0, r4
    all_active = true;
    507e:	701a      	strb	r2, [r3, #0]
}
    5080:	b002      	add	sp, #8
    5082:	bd10      	pop	{r4, pc}
    5084:	20004a87 	.word	0x20004a87

00005088 <cmd_all_off>:

int cmd_all_off(const struct shell *shell, size_t argc, char **argv)
{
    5088:	b513      	push	{r0, r1, r4, lr}

    package_hci_message(REQUEST, ALL, 0, 0, 0, 0);
    508a:	2400      	movs	r4, #0
    508c:	4623      	mov	r3, r4
    508e:	4622      	mov	r2, r4
    5090:	210d      	movs	r1, #13
    5092:	e9cd 4400 	strd	r4, r4, [sp]
    5096:	2001      	movs	r0, #1
    5098:	f000 fafe 	bl	5698 <package_hci_message>
    scu_write();
    509c:	f7ff fdb6 	bl	4c0c <scu_write>
    clear_tx();
    50a0:	f000 fb2a 	bl	56f8 <clear_tx>
    all_active = false;
    50a4:	4b02      	ldr	r3, [pc, #8]	; (50b0 <cmd_all_off+0x28>)

    return 0;
    50a6:	4620      	mov	r0, r4
    all_active = false;
    50a8:	701c      	strb	r4, [r3, #0]
    50aa:	b002      	add	sp, #8
    50ac:	bd10      	pop	{r4, pc}
    50ae:	bf00      	nop
    50b0:	20004a87 	.word	0x20004a87

000050b4 <led0_init>:
/* Public Function Definitions -----------------------------------------------*/

/* LED0 Functions */

int led0_init(void)
{
    50b4:	b508      	push	{r3, lr}

    const struct device *dev = device_get_binding(LED0);
    50b6:	4807      	ldr	r0, [pc, #28]	; (50d4 <led0_init+0x20>)
    50b8:	f021 fba6 	bl	26808 <device_get_binding>
    if (dev == NULL)
    50bc:	b130      	cbz	r0, 50cc <led0_init+0x18>
    }

    LOG_DBG("LED0 Initialized");

    return gpio_pin_configure(dev, LED0_PIN, GPIO_OUTPUT_INACTIVE | LED0_FLAGS);
}
    50be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return gpio_pin_configure(dev, LED0_PIN, GPIO_OUTPUT_INACTIVE | LED0_FLAGS);
    50c2:	f241 6201 	movw	r2, #5633	; 0x1601
    50c6:	2106      	movs	r1, #6
    50c8:	f021 bb76 	b.w	267b8 <gpio_pin_configure>
}
    50cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    50d0:	bd08      	pop	{r3, pc}
    50d2:	bf00      	nop
    50d4:	00030d8c 	.word	0x00030d8c

000050d8 <led1_init>:
}

/* LED1 Functions */

int led1_init(void)
{
    50d8:	b508      	push	{r3, lr}

    const struct device *dev = device_get_binding(LED1);
    50da:	4807      	ldr	r0, [pc, #28]	; (50f8 <led1_init+0x20>)
    50dc:	f021 fb94 	bl	26808 <device_get_binding>
    if (dev == NULL)
    50e0:	b130      	cbz	r0, 50f0 <led1_init+0x18>
    }

    LOG_DBG("LED1 Initialized");

    return gpio_pin_configure(dev, LED1_PIN, GPIO_OUTPUT_INACTIVE | LED1_FLAGS);
}
    50e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return gpio_pin_configure(dev, LED1_PIN, GPIO_OUTPUT_INACTIVE | LED1_FLAGS);
    50e6:	f241 6201 	movw	r2, #5633	; 0x1601
    50ea:	2108      	movs	r1, #8
    50ec:	f021 bb64 	b.w	267b8 <gpio_pin_configure>
}
    50f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    50f4:	bd08      	pop	{r3, pc}
    50f6:	bf00      	nop
    50f8:	00030d8c 	.word	0x00030d8c

000050fc <led2_init>:
}

/* LED2 Functions */

int led2_init(void)
{
    50fc:	b508      	push	{r3, lr}

    const struct device *dev = device_get_binding(LED2);
    50fe:	4807      	ldr	r0, [pc, #28]	; (511c <led2_init+0x20>)
    5100:	f021 fb82 	bl	26808 <device_get_binding>
    if (dev == NULL)
    5104:	b130      	cbz	r0, 5114 <led2_init+0x18>
    }

    LOG_DBG("LED2 Initialized");

    return gpio_pin_configure(dev, LED2_PIN, GPIO_OUTPUT_INACTIVE | LED2_FLAGS);
}
    5106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return gpio_pin_configure(dev, LED2_PIN, GPIO_OUTPUT_INACTIVE | LED2_FLAGS);
    510a:	f241 6201 	movw	r2, #5633	; 0x1601
    510e:	2109      	movs	r1, #9
    5110:	f021 bb52 	b.w	267b8 <gpio_pin_configure>
}
    5114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5118:	bd08      	pop	{r3, pc}
    511a:	bf00      	nop
    511c:	00030d93 	.word	0x00030d93

00005120 <led3_init>:
}

/* LED3 Functions */

int led3_init(void)
{
    5120:	b508      	push	{r3, lr}

    const struct device *dev = device_get_binding(LED3);
    5122:	4807      	ldr	r0, [pc, #28]	; (5140 <led3_init+0x20>)
    5124:	f021 fb70 	bl	26808 <device_get_binding>
    if (dev == NULL)
    5128:	b130      	cbz	r0, 5138 <led3_init+0x18>
    }

    LOG_DBG("LED3 Initialized");

    return gpio_pin_configure(dev, LED3_PIN, GPIO_OUTPUT_INACTIVE | LED3_FLAGS);
}
    512a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return gpio_pin_configure(dev, LED3_PIN, GPIO_OUTPUT_INACTIVE | LED3_FLAGS);
    512e:	f241 6201 	movw	r2, #5633	; 0x1601
    5132:	210c      	movs	r1, #12
    5134:	f021 bb40 	b.w	267b8 <gpio_pin_configure>
}
    5138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    513c:	bd08      	pop	{r3, pc}
    513e:	bf00      	nop
    5140:	00030d8c 	.word	0x00030d8c

00005144 <led_status>:

    return gpio_pin_configure(dev, LED3_PIN, GPIO_DISCONNECTED | LED3_FLAGS);
}

bool led_status(int led_no)
{
    5144:	b513      	push	{r0, r1, r4, lr}

    gpio_port_value_t value = 0;
    5146:	2300      	movs	r3, #0
    5148:	9301      	str	r3, [sp, #4]
    const struct device *dev;

    switch (led_no)
    514a:	2803      	cmp	r0, #3
    514c:	d822      	bhi.n	5194 <led_status+0x50>
    514e:	e8df f000 	tbb	[pc, r0]
    5152:	2302      	.short	0x2302
    5154:	533b      	.short	0x533b
    {
    case 0:
        dev = device_get_binding(LED0);
    5156:	4834      	ldr	r0, [pc, #208]	; (5228 <led_status+0xe4>)
    5158:	f021 fb56 	bl	26808 <device_get_binding>
        gpio_pin_configure(dev, LED0_PIN, GPIO_INPUT | LED0_FLAGS);
    515c:	f240 1201 	movw	r2, #257	; 0x101
        dev = device_get_binding(LED0);
    5160:	4604      	mov	r4, r0
        gpio_pin_configure(dev, LED0_PIN, GPIO_INPUT | LED0_FLAGS);
    5162:	2106      	movs	r1, #6
    5164:	f021 fb28 	bl	267b8 <gpio_pin_configure>
        gpio_port_get_raw(dev, &value);
    5168:	4620      	mov	r0, r4
    516a:	a901      	add	r1, sp, #4
    516c:	f021 fb51 	bl	26812 <gpio_port_get_raw.isra.0>
        if (!(value & (1 << LED0_PIN)))
    5170:	9b01      	ldr	r3, [sp, #4]
    5172:	0658      	lsls	r0, r3, #25
    5174:	d408      	bmi.n	5188 <led_status+0x44>
        {
            gpio_pin_configure(dev, LED0_PIN, GPIO_OUTPUT_ACTIVE | LED0_FLAGS);
    5176:	f641 2201 	movw	r2, #6657	; 0x1a01
    517a:	2106      	movs	r1, #6
        dev = device_get_binding(LED3);
        gpio_pin_configure(dev, LED3_PIN, GPIO_INPUT | LED3_FLAGS);
        gpio_port_get_raw(dev, &value);
        if (!(value & (1 << LED3_PIN)))
        {
            gpio_pin_configure(dev, LED3_PIN, GPIO_OUTPUT_ACTIVE | LED3_FLAGS);
    517c:	4620      	mov	r0, r4
    517e:	f021 fb1b 	bl	267b8 <gpio_pin_configure>
            return true;
    5182:	2001      	movs	r0, #1
        break;
    default:
        return false;
        break;
    }
}
    5184:	b002      	add	sp, #8
    5186:	bd10      	pop	{r4, pc}
            gpio_pin_configure(dev, LED0_PIN, GPIO_OUTPUT_INACTIVE | LED0_FLAGS);
    5188:	f241 6201 	movw	r2, #5633	; 0x1601
    518c:	2106      	movs	r1, #6
            gpio_pin_configure(dev, LED3_PIN, GPIO_OUTPUT_INACTIVE | LED3_FLAGS);
    518e:	4620      	mov	r0, r4
    5190:	f021 fb12 	bl	267b8 <gpio_pin_configure>
    switch (led_no)
    5194:	2000      	movs	r0, #0
    5196:	e7f5      	b.n	5184 <led_status+0x40>
        dev = device_get_binding(LED1);
    5198:	4823      	ldr	r0, [pc, #140]	; (5228 <led_status+0xe4>)
    519a:	f021 fb35 	bl	26808 <device_get_binding>
        gpio_pin_configure(dev, LED1_PIN, GPIO_INPUT | LED1_FLAGS);
    519e:	f240 1201 	movw	r2, #257	; 0x101
        dev = device_get_binding(LED1);
    51a2:	4604      	mov	r4, r0
        gpio_pin_configure(dev, LED1_PIN, GPIO_INPUT | LED1_FLAGS);
    51a4:	2108      	movs	r1, #8
    51a6:	f021 fb07 	bl	267b8 <gpio_pin_configure>
        gpio_port_get_raw(dev, &value);
    51aa:	a901      	add	r1, sp, #4
    51ac:	4620      	mov	r0, r4
    51ae:	f021 fb30 	bl	26812 <gpio_port_get_raw.isra.0>
        if (!(value & (1 << LED1_PIN)))
    51b2:	9b01      	ldr	r3, [sp, #4]
    51b4:	05d9      	lsls	r1, r3, #23
    51b6:	d403      	bmi.n	51c0 <led_status+0x7c>
            gpio_pin_configure(dev, LED1_PIN, GPIO_OUTPUT_ACTIVE | LED1_FLAGS);
    51b8:	f641 2201 	movw	r2, #6657	; 0x1a01
    51bc:	2108      	movs	r1, #8
    51be:	e7dd      	b.n	517c <led_status+0x38>
            gpio_pin_configure(dev, LED1_PIN, GPIO_OUTPUT_INACTIVE | LED1_FLAGS);
    51c0:	f241 6201 	movw	r2, #5633	; 0x1601
    51c4:	2108      	movs	r1, #8
    51c6:	e7e2      	b.n	518e <led_status+0x4a>
        dev = device_get_binding(LED2);
    51c8:	4818      	ldr	r0, [pc, #96]	; (522c <led_status+0xe8>)
    51ca:	f021 fb1d 	bl	26808 <device_get_binding>
        gpio_pin_configure(dev, LED2_PIN, GPIO_INPUT | LED2_FLAGS);
    51ce:	f240 1201 	movw	r2, #257	; 0x101
        dev = device_get_binding(LED2);
    51d2:	4604      	mov	r4, r0
        gpio_pin_configure(dev, LED2_PIN, GPIO_INPUT | LED2_FLAGS);
    51d4:	2109      	movs	r1, #9
    51d6:	f021 faef 	bl	267b8 <gpio_pin_configure>
        gpio_port_get_raw(dev, &value);
    51da:	a901      	add	r1, sp, #4
    51dc:	4620      	mov	r0, r4
    51de:	f021 fb18 	bl	26812 <gpio_port_get_raw.isra.0>
        if (!(value & (1 << LED2_PIN)))
    51e2:	9b01      	ldr	r3, [sp, #4]
    51e4:	059a      	lsls	r2, r3, #22
    51e6:	d403      	bmi.n	51f0 <led_status+0xac>
            gpio_pin_configure(dev, LED2_PIN, GPIO_OUTPUT_ACTIVE | LED2_FLAGS);
    51e8:	f641 2201 	movw	r2, #6657	; 0x1a01
    51ec:	2109      	movs	r1, #9
    51ee:	e7c5      	b.n	517c <led_status+0x38>
            gpio_pin_configure(dev, LED2_PIN, GPIO_OUTPUT_INACTIVE | LED2_FLAGS);
    51f0:	f241 6201 	movw	r2, #5633	; 0x1601
    51f4:	2109      	movs	r1, #9
    51f6:	e7ca      	b.n	518e <led_status+0x4a>
        dev = device_get_binding(LED3);
    51f8:	480b      	ldr	r0, [pc, #44]	; (5228 <led_status+0xe4>)
    51fa:	f021 fb05 	bl	26808 <device_get_binding>
        gpio_pin_configure(dev, LED3_PIN, GPIO_INPUT | LED3_FLAGS);
    51fe:	f240 1201 	movw	r2, #257	; 0x101
        dev = device_get_binding(LED3);
    5202:	4604      	mov	r4, r0
        gpio_pin_configure(dev, LED3_PIN, GPIO_INPUT | LED3_FLAGS);
    5204:	210c      	movs	r1, #12
    5206:	f021 fad7 	bl	267b8 <gpio_pin_configure>
        gpio_port_get_raw(dev, &value);
    520a:	a901      	add	r1, sp, #4
    520c:	4620      	mov	r0, r4
    520e:	f021 fb00 	bl	26812 <gpio_port_get_raw.isra.0>
        if (!(value & (1 << LED3_PIN)))
    5212:	9b01      	ldr	r3, [sp, #4]
    5214:	04db      	lsls	r3, r3, #19
    5216:	d403      	bmi.n	5220 <led_status+0xdc>
            gpio_pin_configure(dev, LED3_PIN, GPIO_OUTPUT_ACTIVE | LED3_FLAGS);
    5218:	f641 2201 	movw	r2, #6657	; 0x1a01
    521c:	210c      	movs	r1, #12
    521e:	e7ad      	b.n	517c <led_status+0x38>
            gpio_pin_configure(dev, LED3_PIN, GPIO_OUTPUT_INACTIVE | LED3_FLAGS);
    5220:	f241 6201 	movw	r2, #5633	; 0x1601
    5224:	210c      	movs	r1, #12
    5226:	e7b2      	b.n	518e <led_status+0x4a>
    5228:	00030d8c 	.word	0x00030d8c
    522c:	00030d93 	.word	0x00030d93

00005230 <led1_on>:
{
    5230:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED1);
    5232:	481a      	ldr	r0, [pc, #104]	; (529c <led1_on+0x6c>)
{
    5234:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED1);
    5236:	f021 fae7 	bl	26808 <device_get_binding>
    if (dev == NULL)
    523a:	4604      	mov	r4, r0
    523c:	b348      	cbz	r0, 5292 <led1_on+0x62>
    if (led_status(1))
    523e:	2001      	movs	r0, #1
    5240:	f7ff ff80 	bl	5144 <led_status>
    5244:	4603      	mov	r3, r0
    5246:	4816      	ldr	r0, [pc, #88]	; (52a0 <led1_on+0x70>)
    5248:	b1ab      	cbz	r3, 5276 <led1_on+0x46>
        LOG_WRN("LED1 Already ON");
    524a:	6803      	ldr	r3, [r0, #0]
    524c:	f013 0f06 	tst.w	r3, #6
    5250:	d009      	beq.n	5266 <led1_on+0x36>
    5252:	4b14      	ldr	r3, [pc, #80]	; (52a4 <led1_on+0x74>)
    5254:	9306      	str	r3, [sp, #24]
    5256:	2302      	movs	r3, #2
    5258:	9301      	str	r3, [sp, #4]
    525a:	9305      	str	r3, [sp, #20]
    525c:	aa05      	add	r2, sp, #20
    525e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
        LOG_INF("LED1 is ON");
    5262:	f021 fad3 	bl	2680c <z_log_msg2_static_create.constprop.0>
    return gpio_pin_set(dev, LED1_PIN, ON);
    5266:	2201      	movs	r2, #1
    5268:	2108      	movs	r1, #8
    526a:	4620      	mov	r0, r4
}
    526c:	b008      	add	sp, #32
    526e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return gpio_pin_set(dev, LED1_PIN, ON);
    5272:	f021 bab6 	b.w	267e2 <gpio_pin_set>
        LOG_INF("LED1 is ON");
    5276:	6803      	ldr	r3, [r0, #0]
    5278:	f003 0307 	and.w	r3, r3, #7
    527c:	2b02      	cmp	r3, #2
    527e:	d9f2      	bls.n	5266 <led1_on+0x36>
    5280:	4b09      	ldr	r3, [pc, #36]	; (52a8 <led1_on+0x78>)
    5282:	9306      	str	r3, [sp, #24]
    5284:	2302      	movs	r3, #2
    5286:	9301      	str	r3, [sp, #4]
    5288:	9305      	str	r3, [sp, #20]
    528a:	aa05      	add	r2, sp, #20
    528c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5290:	e7e7      	b.n	5262 <led1_on+0x32>
}
    5292:	f06f 0001 	mvn.w	r0, #1
    5296:	b008      	add	sp, #32
    5298:	bd10      	pop	{r4, pc}
    529a:	bf00      	nop
    529c:	00030d8c 	.word	0x00030d8c
    52a0:	20000a6c 	.word	0x20000a6c
    52a4:	00030d9a 	.word	0x00030d9a
    52a8:	00030daa 	.word	0x00030daa

000052ac <led1_off>:
{
    52ac:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED1);
    52ae:	481a      	ldr	r0, [pc, #104]	; (5318 <led1_off+0x6c>)
{
    52b0:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED1);
    52b2:	f021 faa9 	bl	26808 <device_get_binding>
    if (dev == NULL)
    52b6:	4604      	mov	r4, r0
    52b8:	b348      	cbz	r0, 530e <led1_off+0x62>
    if (led_status(1))
    52ba:	2001      	movs	r0, #1
    52bc:	f7ff ff42 	bl	5144 <led_status>
    52c0:	4603      	mov	r3, r0
    52c2:	4816      	ldr	r0, [pc, #88]	; (531c <led1_off+0x70>)
    52c4:	b1b3      	cbz	r3, 52f4 <led1_off+0x48>
        LOG_INF("LED1 is OFF");
    52c6:	6803      	ldr	r3, [r0, #0]
    52c8:	f003 0307 	and.w	r3, r3, #7
    52cc:	2b02      	cmp	r3, #2
    52ce:	d909      	bls.n	52e4 <led1_off+0x38>
    52d0:	4b13      	ldr	r3, [pc, #76]	; (5320 <led1_off+0x74>)
    52d2:	9306      	str	r3, [sp, #24]
    52d4:	2302      	movs	r3, #2
    52d6:	9301      	str	r3, [sp, #4]
    52d8:	9305      	str	r3, [sp, #20]
    52da:	aa05      	add	r2, sp, #20
    52dc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_WRN("LED1 is Already OFF");
    52e0:	f021 fa94 	bl	2680c <z_log_msg2_static_create.constprop.0>
    return gpio_pin_set(dev, LED1_PIN, OFF);
    52e4:	2200      	movs	r2, #0
    52e6:	2108      	movs	r1, #8
    52e8:	4620      	mov	r0, r4
}
    52ea:	b008      	add	sp, #32
    52ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return gpio_pin_set(dev, LED1_PIN, OFF);
    52f0:	f021 ba77 	b.w	267e2 <gpio_pin_set>
        LOG_WRN("LED1 is Already OFF");
    52f4:	6803      	ldr	r3, [r0, #0]
    52f6:	f013 0f06 	tst.w	r3, #6
    52fa:	d0f3      	beq.n	52e4 <led1_off+0x38>
    52fc:	4b09      	ldr	r3, [pc, #36]	; (5324 <led1_off+0x78>)
    52fe:	9306      	str	r3, [sp, #24]
    5300:	2302      	movs	r3, #2
    5302:	9301      	str	r3, [sp, #4]
    5304:	9305      	str	r3, [sp, #20]
    5306:	aa05      	add	r2, sp, #20
    5308:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    530c:	e7e8      	b.n	52e0 <led1_off+0x34>
}
    530e:	f06f 0001 	mvn.w	r0, #1
    5312:	b008      	add	sp, #32
    5314:	bd10      	pop	{r4, pc}
    5316:	bf00      	nop
    5318:	00030d8c 	.word	0x00030d8c
    531c:	20000a6c 	.word	0x20000a6c
    5320:	00030db5 	.word	0x00030db5
    5324:	00030dc1 	.word	0x00030dc1

00005328 <led1_toggle>:
{
    5328:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED1);
    532a:	4817      	ldr	r0, [pc, #92]	; (5388 <led1_toggle+0x60>)
{
    532c:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED1);
    532e:	f021 fa6b 	bl	26808 <device_get_binding>
    if (dev == NULL)
    5332:	4604      	mov	r4, r0
    5334:	b318      	cbz	r0, 537e <led1_toggle+0x56>
    if (led_status(1))
    5336:	2001      	movs	r0, #1
    5338:	f7ff ff04 	bl	5144 <led_status>
    533c:	4603      	mov	r3, r0
    533e:	4813      	ldr	r0, [pc, #76]	; (538c <led1_toggle+0x64>)
    5340:	b1b3      	cbz	r3, 5370 <led1_toggle+0x48>
        LOG_INF("LED1 is OFF");
    5342:	6803      	ldr	r3, [r0, #0]
    5344:	f003 0307 	and.w	r3, r3, #7
    5348:	2b02      	cmp	r3, #2
    534a:	d909      	bls.n	5360 <led1_toggle+0x38>
    534c:	4b10      	ldr	r3, [pc, #64]	; (5390 <led1_toggle+0x68>)
        LOG_INF("LED1 is ON");
    534e:	9306      	str	r3, [sp, #24]
    5350:	aa05      	add	r2, sp, #20
    5352:	2302      	movs	r3, #2
    5354:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5358:	9301      	str	r3, [sp, #4]
    535a:	9305      	str	r3, [sp, #20]
    535c:	f021 fa56 	bl	2680c <z_log_msg2_static_create.constprop.0>

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    5360:	f44f 7180 	mov.w	r1, #256	; 0x100
    5364:	4620      	mov	r0, r4
}
    5366:	b008      	add	sp, #32
    5368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    536c:	f021 ba49 	b.w	26802 <gpio_port_toggle_bits>
        LOG_INF("LED1 is ON");
    5370:	6803      	ldr	r3, [r0, #0]
    5372:	f003 0307 	and.w	r3, r3, #7
    5376:	2b02      	cmp	r3, #2
    5378:	d9f2      	bls.n	5360 <led1_toggle+0x38>
    537a:	4b06      	ldr	r3, [pc, #24]	; (5394 <led1_toggle+0x6c>)
    537c:	e7e7      	b.n	534e <led1_toggle+0x26>
}
    537e:	f06f 0001 	mvn.w	r0, #1
    5382:	b008      	add	sp, #32
    5384:	bd10      	pop	{r4, pc}
    5386:	bf00      	nop
    5388:	00030d8c 	.word	0x00030d8c
    538c:	20000a6c 	.word	0x20000a6c
    5390:	00030db5 	.word	0x00030db5
    5394:	00030daa 	.word	0x00030daa

00005398 <led2_on>:
{
    5398:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED2);
    539a:	481a      	ldr	r0, [pc, #104]	; (5404 <led2_on+0x6c>)
{
    539c:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED2);
    539e:	f021 fa33 	bl	26808 <device_get_binding>
    if (dev == NULL)
    53a2:	4604      	mov	r4, r0
    53a4:	b348      	cbz	r0, 53fa <led2_on+0x62>
    if (led_status(2))
    53a6:	2002      	movs	r0, #2
    53a8:	f7ff fecc 	bl	5144 <led_status>
    53ac:	4603      	mov	r3, r0
    53ae:	4816      	ldr	r0, [pc, #88]	; (5408 <led2_on+0x70>)
    53b0:	b1ab      	cbz	r3, 53de <led2_on+0x46>
        LOG_WRN("LED2 Already ON");
    53b2:	6803      	ldr	r3, [r0, #0]
    53b4:	f013 0f06 	tst.w	r3, #6
    53b8:	d009      	beq.n	53ce <led2_on+0x36>
    53ba:	4b14      	ldr	r3, [pc, #80]	; (540c <led2_on+0x74>)
    53bc:	9306      	str	r3, [sp, #24]
    53be:	2302      	movs	r3, #2
    53c0:	9301      	str	r3, [sp, #4]
    53c2:	9305      	str	r3, [sp, #20]
    53c4:	aa05      	add	r2, sp, #20
    53c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
        LOG_INF("LED2 is ON");
    53ca:	f021 fa1f 	bl	2680c <z_log_msg2_static_create.constprop.0>
    return gpio_pin_set(dev, LED2_PIN, ON);
    53ce:	2201      	movs	r2, #1
    53d0:	2109      	movs	r1, #9
    53d2:	4620      	mov	r0, r4
}
    53d4:	b008      	add	sp, #32
    53d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return gpio_pin_set(dev, LED2_PIN, ON);
    53da:	f021 ba02 	b.w	267e2 <gpio_pin_set>
        LOG_INF("LED2 is ON");
    53de:	6803      	ldr	r3, [r0, #0]
    53e0:	f003 0307 	and.w	r3, r3, #7
    53e4:	2b02      	cmp	r3, #2
    53e6:	d9f2      	bls.n	53ce <led2_on+0x36>
    53e8:	4b09      	ldr	r3, [pc, #36]	; (5410 <led2_on+0x78>)
    53ea:	9306      	str	r3, [sp, #24]
    53ec:	2302      	movs	r3, #2
    53ee:	9301      	str	r3, [sp, #4]
    53f0:	9305      	str	r3, [sp, #20]
    53f2:	aa05      	add	r2, sp, #20
    53f4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    53f8:	e7e7      	b.n	53ca <led2_on+0x32>
}
    53fa:	f06f 0001 	mvn.w	r0, #1
    53fe:	b008      	add	sp, #32
    5400:	bd10      	pop	{r4, pc}
    5402:	bf00      	nop
    5404:	00030d93 	.word	0x00030d93
    5408:	20000a6c 	.word	0x20000a6c
    540c:	00030dd5 	.word	0x00030dd5
    5410:	00030de5 	.word	0x00030de5

00005414 <led2_off>:
{
    5414:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED2);
    5416:	481a      	ldr	r0, [pc, #104]	; (5480 <led2_off+0x6c>)
{
    5418:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED2);
    541a:	f021 f9f5 	bl	26808 <device_get_binding>
    if (dev == NULL)
    541e:	4604      	mov	r4, r0
    5420:	b348      	cbz	r0, 5476 <led2_off+0x62>
    if (led_status(2))
    5422:	2002      	movs	r0, #2
    5424:	f7ff fe8e 	bl	5144 <led_status>
    5428:	4603      	mov	r3, r0
    542a:	4816      	ldr	r0, [pc, #88]	; (5484 <led2_off+0x70>)
    542c:	b1b3      	cbz	r3, 545c <led2_off+0x48>
        LOG_INF("LED2 is OFF");
    542e:	6803      	ldr	r3, [r0, #0]
    5430:	f003 0307 	and.w	r3, r3, #7
    5434:	2b02      	cmp	r3, #2
    5436:	d909      	bls.n	544c <led2_off+0x38>
    5438:	4b13      	ldr	r3, [pc, #76]	; (5488 <led2_off+0x74>)
    543a:	9306      	str	r3, [sp, #24]
    543c:	2302      	movs	r3, #2
    543e:	9301      	str	r3, [sp, #4]
    5440:	9305      	str	r3, [sp, #20]
    5442:	aa05      	add	r2, sp, #20
    5444:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_WRN("LED2 is Already OFF");
    5448:	f021 f9e0 	bl	2680c <z_log_msg2_static_create.constprop.0>
    return gpio_pin_set(dev, LED2_PIN, OFF);
    544c:	2200      	movs	r2, #0
    544e:	2109      	movs	r1, #9
    5450:	4620      	mov	r0, r4
}
    5452:	b008      	add	sp, #32
    5454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return gpio_pin_set(dev, LED2_PIN, OFF);
    5458:	f021 b9c3 	b.w	267e2 <gpio_pin_set>
        LOG_WRN("LED2 is Already OFF");
    545c:	6803      	ldr	r3, [r0, #0]
    545e:	f013 0f06 	tst.w	r3, #6
    5462:	d0f3      	beq.n	544c <led2_off+0x38>
    5464:	4b09      	ldr	r3, [pc, #36]	; (548c <led2_off+0x78>)
    5466:	9306      	str	r3, [sp, #24]
    5468:	2302      	movs	r3, #2
    546a:	9301      	str	r3, [sp, #4]
    546c:	9305      	str	r3, [sp, #20]
    546e:	aa05      	add	r2, sp, #20
    5470:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    5474:	e7e8      	b.n	5448 <led2_off+0x34>
}
    5476:	f06f 0001 	mvn.w	r0, #1
    547a:	b008      	add	sp, #32
    547c:	bd10      	pop	{r4, pc}
    547e:	bf00      	nop
    5480:	00030d93 	.word	0x00030d93
    5484:	20000a6c 	.word	0x20000a6c
    5488:	00030df0 	.word	0x00030df0
    548c:	00030dfc 	.word	0x00030dfc

00005490 <led2_toggle>:
{
    5490:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED2);
    5492:	4817      	ldr	r0, [pc, #92]	; (54f0 <led2_toggle+0x60>)
{
    5494:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED2);
    5496:	f021 f9b7 	bl	26808 <device_get_binding>
    if (dev == NULL)
    549a:	4604      	mov	r4, r0
    549c:	b318      	cbz	r0, 54e6 <led2_toggle+0x56>
    if (led_status(2))
    549e:	2002      	movs	r0, #2
    54a0:	f7ff fe50 	bl	5144 <led_status>
    54a4:	4603      	mov	r3, r0
    54a6:	4813      	ldr	r0, [pc, #76]	; (54f4 <led2_toggle+0x64>)
    54a8:	b1b3      	cbz	r3, 54d8 <led2_toggle+0x48>
        LOG_INF("LED2 is OFF");
    54aa:	6803      	ldr	r3, [r0, #0]
    54ac:	f003 0307 	and.w	r3, r3, #7
    54b0:	2b02      	cmp	r3, #2
    54b2:	d909      	bls.n	54c8 <led2_toggle+0x38>
    54b4:	4b10      	ldr	r3, [pc, #64]	; (54f8 <led2_toggle+0x68>)
        LOG_INF("LED2 is ON");
    54b6:	9306      	str	r3, [sp, #24]
    54b8:	aa05      	add	r2, sp, #20
    54ba:	2302      	movs	r3, #2
    54bc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    54c0:	9301      	str	r3, [sp, #4]
    54c2:	9305      	str	r3, [sp, #20]
    54c4:	f021 f9a2 	bl	2680c <z_log_msg2_static_create.constprop.0>
    54c8:	f44f 7100 	mov.w	r1, #512	; 0x200
    54cc:	4620      	mov	r0, r4
}
    54ce:	b008      	add	sp, #32
    54d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54d4:	f021 b995 	b.w	26802 <gpio_port_toggle_bits>
        LOG_INF("LED2 is ON");
    54d8:	6803      	ldr	r3, [r0, #0]
    54da:	f003 0307 	and.w	r3, r3, #7
    54de:	2b02      	cmp	r3, #2
    54e0:	d9f2      	bls.n	54c8 <led2_toggle+0x38>
    54e2:	4b06      	ldr	r3, [pc, #24]	; (54fc <led2_toggle+0x6c>)
    54e4:	e7e7      	b.n	54b6 <led2_toggle+0x26>
}
    54e6:	f06f 0001 	mvn.w	r0, #1
    54ea:	b008      	add	sp, #32
    54ec:	bd10      	pop	{r4, pc}
    54ee:	bf00      	nop
    54f0:	00030d93 	.word	0x00030d93
    54f4:	20000a6c 	.word	0x20000a6c
    54f8:	00030df0 	.word	0x00030df0
    54fc:	00030de5 	.word	0x00030de5

00005500 <led3_on>:
{
    5500:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED3);
    5502:	481a      	ldr	r0, [pc, #104]	; (556c <led3_on+0x6c>)
{
    5504:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED3);
    5506:	f021 f97f 	bl	26808 <device_get_binding>
    if (dev == NULL)
    550a:	4604      	mov	r4, r0
    550c:	b348      	cbz	r0, 5562 <led3_on+0x62>
    if (led_status(3))
    550e:	2003      	movs	r0, #3
    5510:	f7ff fe18 	bl	5144 <led_status>
    5514:	4603      	mov	r3, r0
    5516:	4816      	ldr	r0, [pc, #88]	; (5570 <led3_on+0x70>)
    5518:	b1ab      	cbz	r3, 5546 <led3_on+0x46>
        LOG_WRN("LED3 Already ON");
    551a:	6803      	ldr	r3, [r0, #0]
    551c:	f013 0f06 	tst.w	r3, #6
    5520:	d009      	beq.n	5536 <led3_on+0x36>
    5522:	4b14      	ldr	r3, [pc, #80]	; (5574 <led3_on+0x74>)
    5524:	9306      	str	r3, [sp, #24]
    5526:	2302      	movs	r3, #2
    5528:	9301      	str	r3, [sp, #4]
    552a:	9305      	str	r3, [sp, #20]
    552c:	aa05      	add	r2, sp, #20
    552e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
        LOG_INF("LED3 is ON");
    5532:	f021 f96b 	bl	2680c <z_log_msg2_static_create.constprop.0>
    return gpio_pin_set(dev, LED3_PIN, ON);
    5536:	2201      	movs	r2, #1
    5538:	210c      	movs	r1, #12
    553a:	4620      	mov	r0, r4
}
    553c:	b008      	add	sp, #32
    553e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return gpio_pin_set(dev, LED3_PIN, ON);
    5542:	f021 b94e 	b.w	267e2 <gpio_pin_set>
        LOG_INF("LED3 is ON");
    5546:	6803      	ldr	r3, [r0, #0]
    5548:	f003 0307 	and.w	r3, r3, #7
    554c:	2b02      	cmp	r3, #2
    554e:	d9f2      	bls.n	5536 <led3_on+0x36>
    5550:	4b09      	ldr	r3, [pc, #36]	; (5578 <led3_on+0x78>)
    5552:	9306      	str	r3, [sp, #24]
    5554:	2302      	movs	r3, #2
    5556:	9301      	str	r3, [sp, #4]
    5558:	9305      	str	r3, [sp, #20]
    555a:	aa05      	add	r2, sp, #20
    555c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5560:	e7e7      	b.n	5532 <led3_on+0x32>
}
    5562:	f06f 0001 	mvn.w	r0, #1
    5566:	b008      	add	sp, #32
    5568:	bd10      	pop	{r4, pc}
    556a:	bf00      	nop
    556c:	00030d8c 	.word	0x00030d8c
    5570:	20000a6c 	.word	0x20000a6c
    5574:	00030e10 	.word	0x00030e10
    5578:	00030e20 	.word	0x00030e20

0000557c <led3_off>:
{
    557c:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED3);
    557e:	481a      	ldr	r0, [pc, #104]	; (55e8 <led3_off+0x6c>)
{
    5580:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED3);
    5582:	f021 f941 	bl	26808 <device_get_binding>
    if (dev == NULL)
    5586:	4604      	mov	r4, r0
    5588:	b348      	cbz	r0, 55de <led3_off+0x62>
    if (led_status(3))
    558a:	2003      	movs	r0, #3
    558c:	f7ff fdda 	bl	5144 <led_status>
    5590:	4603      	mov	r3, r0
    5592:	4816      	ldr	r0, [pc, #88]	; (55ec <led3_off+0x70>)
    5594:	b1b3      	cbz	r3, 55c4 <led3_off+0x48>
        LOG_INF("LED3 is OFF");
    5596:	6803      	ldr	r3, [r0, #0]
    5598:	f003 0307 	and.w	r3, r3, #7
    559c:	2b02      	cmp	r3, #2
    559e:	d909      	bls.n	55b4 <led3_off+0x38>
    55a0:	4b13      	ldr	r3, [pc, #76]	; (55f0 <led3_off+0x74>)
    55a2:	9306      	str	r3, [sp, #24]
    55a4:	2302      	movs	r3, #2
    55a6:	9301      	str	r3, [sp, #4]
    55a8:	9305      	str	r3, [sp, #20]
    55aa:	aa05      	add	r2, sp, #20
    55ac:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_WRN("LED3 is Already OFF");
    55b0:	f021 f92c 	bl	2680c <z_log_msg2_static_create.constprop.0>
    return gpio_pin_set(dev, LED3_PIN, OFF);
    55b4:	2200      	movs	r2, #0
    55b6:	210c      	movs	r1, #12
    55b8:	4620      	mov	r0, r4
}
    55ba:	b008      	add	sp, #32
    55bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return gpio_pin_set(dev, LED3_PIN, OFF);
    55c0:	f021 b90f 	b.w	267e2 <gpio_pin_set>
        LOG_WRN("LED3 is Already OFF");
    55c4:	6803      	ldr	r3, [r0, #0]
    55c6:	f013 0f06 	tst.w	r3, #6
    55ca:	d0f3      	beq.n	55b4 <led3_off+0x38>
    55cc:	4b09      	ldr	r3, [pc, #36]	; (55f4 <led3_off+0x78>)
    55ce:	9306      	str	r3, [sp, #24]
    55d0:	2302      	movs	r3, #2
    55d2:	9301      	str	r3, [sp, #4]
    55d4:	9305      	str	r3, [sp, #20]
    55d6:	aa05      	add	r2, sp, #20
    55d8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    55dc:	e7e8      	b.n	55b0 <led3_off+0x34>
}
    55de:	f06f 0001 	mvn.w	r0, #1
    55e2:	b008      	add	sp, #32
    55e4:	bd10      	pop	{r4, pc}
    55e6:	bf00      	nop
    55e8:	00030d8c 	.word	0x00030d8c
    55ec:	20000a6c 	.word	0x20000a6c
    55f0:	00030e2b 	.word	0x00030e2b
    55f4:	00030e37 	.word	0x00030e37

000055f8 <led3_toggle>:
{
    55f8:	b510      	push	{r4, lr}
    const struct device *dev = device_get_binding(LED3);
    55fa:	4817      	ldr	r0, [pc, #92]	; (5658 <led3_toggle+0x60>)
{
    55fc:	b088      	sub	sp, #32
    const struct device *dev = device_get_binding(LED3);
    55fe:	f021 f903 	bl	26808 <device_get_binding>
    if (dev == NULL)
    5602:	4604      	mov	r4, r0
    5604:	b318      	cbz	r0, 564e <led3_toggle+0x56>
    if (led_status(3))
    5606:	2003      	movs	r0, #3
    5608:	f7ff fd9c 	bl	5144 <led_status>
    560c:	4603      	mov	r3, r0
    560e:	4813      	ldr	r0, [pc, #76]	; (565c <led3_toggle+0x64>)
    5610:	b1b3      	cbz	r3, 5640 <led3_toggle+0x48>
        LOG_INF("LED3 is OFF");
    5612:	6803      	ldr	r3, [r0, #0]
    5614:	f003 0307 	and.w	r3, r3, #7
    5618:	2b02      	cmp	r3, #2
    561a:	d909      	bls.n	5630 <led3_toggle+0x38>
    561c:	4b10      	ldr	r3, [pc, #64]	; (5660 <led3_toggle+0x68>)
        LOG_INF("LED3 is ON");
    561e:	9306      	str	r3, [sp, #24]
    5620:	aa05      	add	r2, sp, #20
    5622:	2302      	movs	r3, #2
    5624:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5628:	9301      	str	r3, [sp, #4]
    562a:	9305      	str	r3, [sp, #20]
    562c:	f021 f8ee 	bl	2680c <z_log_msg2_static_create.constprop.0>
    5630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5634:	4620      	mov	r0, r4
}
    5636:	b008      	add	sp, #32
    5638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    563c:	f021 b8e1 	b.w	26802 <gpio_port_toggle_bits>
        LOG_INF("LED3 is ON");
    5640:	6803      	ldr	r3, [r0, #0]
    5642:	f003 0307 	and.w	r3, r3, #7
    5646:	2b02      	cmp	r3, #2
    5648:	d9f2      	bls.n	5630 <led3_toggle+0x38>
    564a:	4b06      	ldr	r3, [pc, #24]	; (5664 <led3_toggle+0x6c>)
    564c:	e7e7      	b.n	561e <led3_toggle+0x26>
}
    564e:	f06f 0001 	mvn.w	r0, #1
    5652:	b008      	add	sp, #32
    5654:	bd10      	pop	{r4, pc}
    5656:	bf00      	nop
    5658:	00030d8c 	.word	0x00030d8c
    565c:	20000a6c 	.word	0x20000a6c
    5660:	00030e2b 	.word	0x00030e2b
    5664:	00030e20 	.word	0x00030e20

00005668 <no_command>:

void no_command(void)
{
    5668:	b500      	push	{lr}

    LOG_ERR("invalid command");
    566a:	4809      	ldr	r0, [pc, #36]	; (5690 <no_command+0x28>)
    566c:	6803      	ldr	r3, [r0, #0]
    566e:	075b      	lsls	r3, r3, #29
{
    5670:	b089      	sub	sp, #36	; 0x24
    LOG_ERR("invalid command");
    5672:	d009      	beq.n	5688 <no_command+0x20>
    5674:	4b07      	ldr	r3, [pc, #28]	; (5694 <no_command+0x2c>)
    5676:	9306      	str	r3, [sp, #24]
    5678:	aa05      	add	r2, sp, #20
    567a:	2302      	movs	r3, #2
    567c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5680:	9301      	str	r3, [sp, #4]
    5682:	9305      	str	r3, [sp, #20]
    5684:	f021 f8c2 	bl	2680c <z_log_msg2_static_create.constprop.0>
}
    5688:	b009      	add	sp, #36	; 0x24
    568a:	f85d fb04 	ldr.w	pc, [sp], #4
    568e:	bf00      	nop
    5690:	20000a6c 	.word	0x20000a6c
    5694:	00030e4b 	.word	0x00030e4b

00005698 <package_hci_message>:
        return 0;
    }
}

int package_hci_message(uint8_t type, uint16_t device_id, uint16_t data1, uint16_t data2, uint16_t data3, uint16_t data4)
{
    5698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    569a:	4615      	mov	r5, r2
    569c:	4604      	mov	r4, r0
    569e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    56a2:	460e      	mov	r6, r1

    uint8_t data_length = get_data_length(data1, data2, data3, data4);
    56a4:	4628      	mov	r0, r5
{
    56a6:	4619      	mov	r1, r3
    56a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    uint8_t data_length = get_data_length(data1, data2, data3, data4);
    56ac:	f021 f8bf 	bl	2682e <get_data_length>
    LOG_DBG("data_length: %d", data_length);

    switch (type)
    56b0:	2c01      	cmp	r4, #1
    56b2:	d003      	beq.n	56bc <package_hci_message+0x24>
    56b4:	2c02      	cmp	r4, #2
    56b6:	d00f      	beq.n	56d8 <package_hci_message+0x40>
    default:
        break;
    }

    return 0;
}
    56b8:	2000      	movs	r0, #0
    56ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tx_buff[0] = (PREAMBLE << 8) | (REQUEST << 4) | data_length;
    56bc:	f440 472a 	orr.w	r7, r0, #43520	; 0xaa00
    56c0:	4c0b      	ldr	r4, [pc, #44]	; (56f0 <package_hci_message+0x58>)
    56c2:	f047 0710 	orr.w	r7, r7, #16
        if (data_length > 6)
    56c6:	2806      	cmp	r0, #6
        rx_buff[0] = (PREAMBLE << 8) | (RESPONSE << 4) | data_length;
    56c8:	8027      	strh	r7, [r4, #0]
        rx_buff[1] = device_id;
    56ca:	8066      	strh	r6, [r4, #2]
        rx_buff[2] = data1;
    56cc:	80a5      	strh	r5, [r4, #4]
        if (data_length > 6)
    56ce:	d909      	bls.n	56e4 <package_hci_message+0x4c>
            rx_buff[5] = data4;
    56d0:	8163      	strh	r3, [r4, #10]
            rx_buff[4] = data3;
    56d2:	8122      	strh	r2, [r4, #8]
            rx_buff[3] = data2;
    56d4:	80e1      	strh	r1, [r4, #6]
    56d6:	e7ef      	b.n	56b8 <package_hci_message+0x20>
        rx_buff[0] = (PREAMBLE << 8) | (RESPONSE << 4) | data_length;
    56d8:	f440 472a 	orr.w	r7, r0, #43520	; 0xaa00
    56dc:	4c05      	ldr	r4, [pc, #20]	; (56f4 <package_hci_message+0x5c>)
    56de:	f047 0720 	orr.w	r7, r7, #32
    56e2:	e7f0      	b.n	56c6 <package_hci_message+0x2e>
        if (data_length > 4)
    56e4:	2804      	cmp	r0, #4
    56e6:	d8f4      	bhi.n	56d2 <package_hci_message+0x3a>
        if (data_length > 2)
    56e8:	2802      	cmp	r0, #2
    56ea:	d9e5      	bls.n	56b8 <package_hci_message+0x20>
    56ec:	e7f2      	b.n	56d4 <package_hci_message+0x3c>
    56ee:	bf00      	nop
    56f0:	20004a4a 	.word	0x20004a4a
    56f4:	20004a3e 	.word	0x20004a3e

000056f8 <clear_tx>:

void clear_tx(void)
{
    for (int i = 0; i < 5; i++)
    {
        tx_buff[i] = 0x0000;
    56f8:	4b03      	ldr	r3, [pc, #12]	; (5708 <clear_tx+0x10>)
    56fa:	2200      	movs	r2, #0
    56fc:	801a      	strh	r2, [r3, #0]
    56fe:	805a      	strh	r2, [r3, #2]
    5700:	809a      	strh	r2, [r3, #4]
    5702:	80da      	strh	r2, [r3, #6]
    5704:	811a      	strh	r2, [r3, #8]
    }
}
    5706:	4770      	bx	lr
    5708:	20004a4a 	.word	0x20004a4a

0000570c <button_pressed>:
static struct gpio_callback button_cb_data;

void button_pressed(const struct device *dev, struct gpio_callback *cb,
                    uint32_t pins)
{
  if (all_active)
    570c:	4b05      	ldr	r3, [pc, #20]	; (5724 <button_pressed+0x18>)
    570e:	781a      	ldrb	r2, [r3, #0]
    5710:	b122      	cbz	r2, 571c <button_pressed+0x10>
  {
    cmd_all_off(NULL, 0, NULL);
    5712:	2200      	movs	r2, #0
    5714:	4611      	mov	r1, r2
    5716:	4610      	mov	r0, r2
    5718:	f7ff bcb6 	b.w	5088 <cmd_all_off>
  }
  else
  {
    cmd_all_on(NULL, 0, NULL);
    571c:	4611      	mov	r1, r2
    571e:	4610      	mov	r0, r2
    5720:	f7ff bc9c 	b.w	505c <cmd_all_on>
    5724:	20004a87 	.word	0x20004a87

00005728 <setup_pb>:
  }
}

void setup_pb(void)
{
    5728:	b570      	push	{r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    572a:	4c23      	ldr	r4, [pc, #140]	; (57b8 <setup_pb+0x90>)
    572c:	4620      	mov	r0, r4
    572e:	f027 fe2b 	bl	2d388 <z_device_is_ready>
  int ret;

  if (!device_is_ready(button.port))
    5732:	b928      	cbnz	r0, 5740 <setup_pb+0x18>
  {
    printk("Error: button device %s is not ready\n", button.port->name);
    5734:	6821      	ldr	r1, [r4, #0]
    5736:	4821      	ldr	r0, [pc, #132]	; (57bc <setup_pb+0x94>)
  }

  gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
  gpio_add_callback(button.port, &button_cb_data);
  printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    5738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printk("Error: button device %s is not ready\n", button.port->name);
    573c:	f021 b90e 	b.w	2695c <printk>
	struct gpio_driver_data *data =
    5740:	6926      	ldr	r6, [r4, #16]
	const struct gpio_driver_api *api =
    5742:	68a5      	ldr	r5, [r4, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5744:	6833      	ldr	r3, [r6, #0]
    5746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    574a:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    574c:	2106      	movs	r1, #6
    574e:	682b      	ldr	r3, [r5, #0]
    5750:	f240 1211 	movw	r2, #273	; 0x111
    5754:	4620      	mov	r0, r4
    5756:	4798      	blx	r3
  if (ret != 0)
    5758:	4601      	mov	r1, r0
    575a:	b130      	cbz	r0, 576a <setup_pb+0x42>
    printk("Error %d: failed to configure %s pin %d\n", ret, button.port->name,
    575c:	6822      	ldr	r2, [r4, #0]
    575e:	4818      	ldr	r0, [pc, #96]	; (57c0 <setup_pb+0x98>)
    5760:	2306      	movs	r3, #6
    5762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printk("Error %d: failed to configure interrupt on %s pin %d\n", ret,
    5766:	f021 b8f9 	b.w	2695c <printk>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    576a:	6833      	ldr	r3, [r6, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    576c:	69ae      	ldr	r6, [r5, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    576e:	f013 0f40 	tst.w	r3, #64	; 0x40
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5772:	f04f 0106 	mov.w	r1, #6
    5776:	bf0c      	ite	eq
    5778:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    577c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    5780:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    5784:	4620      	mov	r0, r4
    5786:	47b0      	blx	r6
    5788:	6826      	ldr	r6, [r4, #0]
  if (ret != 0)
    578a:	4601      	mov	r1, r0
    578c:	b118      	cbz	r0, 5796 <setup_pb+0x6e>
    printk("Error %d: failed to configure interrupt on %s pin %d\n", ret,
    578e:	480d      	ldr	r0, [pc, #52]	; (57c4 <setup_pb+0x9c>)
    5790:	2306      	movs	r3, #6
    5792:	4632      	mov	r2, r6
    5794:	e7e5      	b.n	5762 <setup_pb+0x3a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    5796:	490c      	ldr	r1, [pc, #48]	; (57c8 <setup_pb+0xa0>)
    5798:	4b0c      	ldr	r3, [pc, #48]	; (57cc <setup_pb+0xa4>)
    579a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    579c:	2340      	movs	r3, #64	; 0x40
    579e:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    57a0:	69eb      	ldr	r3, [r5, #28]
    57a2:	b113      	cbz	r3, 57aa <setup_pb+0x82>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    57a4:	2201      	movs	r2, #1
    57a6:	4620      	mov	r0, r4
    57a8:	4798      	blx	r3
  printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    57aa:	4631      	mov	r1, r6
    57ac:	4808      	ldr	r0, [pc, #32]	; (57d0 <setup_pb+0xa8>)
    57ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    57b2:	2206      	movs	r2, #6
    57b4:	f021 b8d2 	b.w	2695c <printk>
    57b8:	0002e00c 	.word	0x0002e00c
    57bc:	00030e6a 	.word	0x00030e6a
    57c0:	00030e90 	.word	0x00030e90
    57c4:	00030eb9 	.word	0x00030eb9
    57c8:	20002640 	.word	0x20002640
    57cc:	0000570d 	.word	0x0000570d
    57d0:	00030eef 	.word	0x00030eef

000057d4 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    57d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d8:	4605      	mov	r5, r0
    57da:	b08b      	sub	sp, #44	; 0x2c
    57dc:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    57de:	f015 0303 	ands.w	r3, r5, #3
    57e2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
    57e6:	9203      	str	r2, [sp, #12]
    57e8:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    57ea:	9301      	str	r3, [sp, #4]
    57ec:	f040 81f5 	bne.w	5bda <cbvprintf_package+0x406>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    57f0:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    57f2:	2d00      	cmp	r5, #0
    57f4:	f040 81f4 	bne.w	5be0 <cbvprintf_package+0x40c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    57f8:	f001 0607 	and.w	r6, r1, #7
    57fc:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    57fe:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    5802:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    5806:	2704      	movs	r7, #4
	s = fmt--;
    5808:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    580a:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    580e:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
    5812:	4652      	mov	r2, sl
	size = sizeof(char *);
    5814:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    5816:	b105      	cbz	r5, 581a <cbvprintf_package+0x46>
				*(const char **)buf = s;
    5818:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
    581a:	9b03      	ldr	r3, [sp, #12]
    581c:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
    5820:	4bce      	ldr	r3, [pc, #824]	; (5b5c <cbvprintf_package+0x388>)
    5822:	4298      	cmp	r0, r3
    5824:	f0c0 812a 	bcc.w	5a7c <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
    5828:	4bcd      	ldr	r3, [pc, #820]	; (5b60 <cbvprintf_package+0x38c>)
    582a:	4298      	cmp	r0, r3
    582c:	f080 8126 	bcs.w	5a7c <cbvprintf_package+0x2a8>
    5830:	f1be 0f00 	cmp.w	lr, #0
    5834:	f000 813c 	beq.w	5ab0 <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
    5838:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    583c:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
    5840:	f1be 0f00 	cmp.w	lr, #0
    5844:	f000 811d 	beq.w	5a82 <cbvprintf_package+0x2ae>
    5848:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    584c:	f0c0 8119 	bcc.w	5a82 <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
    5850:	f06f 0015 	mvn.w	r0, #21
    5854:	e0f5      	b.n	5a42 <cbvprintf_package+0x26e>
		if (!parsing) {
    5856:	b932      	cbnz	r2, 5866 <cbvprintf_package+0x92>
			if (*fmt == '%') {
    5858:	2b25      	cmp	r3, #37	; 0x25
    585a:	f040 812c 	bne.w	5ab6 <cbvprintf_package+0x2e2>
				parsing = true;
    585e:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    5860:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
    5862:	46b9      	mov	r9, r7
    5864:	e127      	b.n	5ab6 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    5866:	2b2b      	cmp	r3, #43	; 0x2b
    5868:	d824      	bhi.n	58b4 <cbvprintf_package+0xe0>
    586a:	2b1f      	cmp	r3, #31
    586c:	d801      	bhi.n	5872 <cbvprintf_package+0x9e>
			parsing = false;
    586e:	2200      	movs	r2, #0
    5870:	e121      	b.n	5ab6 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    5872:	f1a3 0020 	sub.w	r0, r3, #32
    5876:	280b      	cmp	r0, #11
    5878:	d8f9      	bhi.n	586e <cbvprintf_package+0x9a>
    587a:	f20f 0c08 	addw	ip, pc, #8
    587e:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    5882:	bf00      	nop
    5884:	00005ab7 	.word	0x00005ab7
    5888:	0000586f 	.word	0x0000586f
    588c:	0000586f 	.word	0x0000586f
    5890:	00005ab7 	.word	0x00005ab7
    5894:	0000586f 	.word	0x0000586f
    5898:	0000586f 	.word	0x0000586f
    589c:	0000586f 	.word	0x0000586f
    58a0:	0000586f 	.word	0x0000586f
    58a4:	0000586f 	.word	0x0000586f
    58a8:	0000586f 	.word	0x0000586f
    58ac:	00005a5b 	.word	0x00005a5b
    58b0:	00005ab7 	.word	0x00005ab7
    58b4:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
    58b8:	fa5f fc80 	uxtb.w	ip, r0
    58bc:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    58c0:	d8d5      	bhi.n	586e <cbvprintf_package+0x9a>
    58c2:	284d      	cmp	r0, #77	; 0x4d
    58c4:	d8d3      	bhi.n	586e <cbvprintf_package+0x9a>
    58c6:	f20f 0c08 	addw	ip, pc, #8
    58ca:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    58ce:	bf00      	nop
    58d0:	00005ab7 	.word	0x00005ab7
    58d4:	00005ab7 	.word	0x00005ab7
    58d8:	0000586f 	.word	0x0000586f
    58dc:	00005ab7 	.word	0x00005ab7
    58e0:	00005ab7 	.word	0x00005ab7
    58e4:	00005ab7 	.word	0x00005ab7
    58e8:	00005ab7 	.word	0x00005ab7
    58ec:	00005ab7 	.word	0x00005ab7
    58f0:	00005ab7 	.word	0x00005ab7
    58f4:	00005ab7 	.word	0x00005ab7
    58f8:	00005ab7 	.word	0x00005ab7
    58fc:	00005ab7 	.word	0x00005ab7
    5900:	00005ab7 	.word	0x00005ab7
    5904:	0000586f 	.word	0x0000586f
    5908:	0000586f 	.word	0x0000586f
    590c:	0000586f 	.word	0x0000586f
    5910:	0000586f 	.word	0x0000586f
    5914:	0000586f 	.word	0x0000586f
    5918:	0000586f 	.word	0x0000586f
    591c:	0000586f 	.word	0x0000586f
    5920:	00005a23 	.word	0x00005a23
    5924:	0000586f 	.word	0x0000586f
    5928:	0000586f 	.word	0x0000586f
    592c:	0000586f 	.word	0x0000586f
    5930:	00005a23 	.word	0x00005a23
    5934:	00005a23 	.word	0x00005a23
    5938:	00005a23 	.word	0x00005a23
    593c:	0000586f 	.word	0x0000586f
    5940:	0000586f 	.word	0x0000586f
    5944:	0000586f 	.word	0x0000586f
    5948:	0000586f 	.word	0x0000586f
    594c:	00005ab7 	.word	0x00005ab7
    5950:	0000586f 	.word	0x0000586f
    5954:	0000586f 	.word	0x0000586f
    5958:	0000586f 	.word	0x0000586f
    595c:	0000586f 	.word	0x0000586f
    5960:	0000586f 	.word	0x0000586f
    5964:	0000586f 	.word	0x0000586f
    5968:	0000586f 	.word	0x0000586f
    596c:	0000586f 	.word	0x0000586f
    5970:	0000586f 	.word	0x0000586f
    5974:	0000586f 	.word	0x0000586f
    5978:	0000586f 	.word	0x0000586f
    597c:	00005a09 	.word	0x00005a09
    5980:	0000586f 	.word	0x0000586f
    5984:	0000586f 	.word	0x0000586f
    5988:	0000586f 	.word	0x0000586f
    598c:	0000586f 	.word	0x0000586f
    5990:	0000586f 	.word	0x0000586f
    5994:	0000586f 	.word	0x0000586f
    5998:	0000586f 	.word	0x0000586f
    599c:	0000586f 	.word	0x0000586f
    59a0:	00005a23 	.word	0x00005a23
    59a4:	0000586f 	.word	0x0000586f
    59a8:	00005a09 	.word	0x00005a09
    59ac:	00005a09 	.word	0x00005a09
    59b0:	00005a23 	.word	0x00005a23
    59b4:	00005a23 	.word	0x00005a23
    59b8:	00005a23 	.word	0x00005a23
    59bc:	00005ab7 	.word	0x00005ab7
    59c0:	00005a09 	.word	0x00005a09
    59c4:	00005a51 	.word	0x00005a51
    59c8:	0000586f 	.word	0x0000586f
    59cc:	00005ab7 	.word	0x00005ab7
    59d0:	0000586f 	.word	0x0000586f
    59d4:	00005a55 	.word	0x00005a55
    59d8:	00005a09 	.word	0x00005a09
    59dc:	00005a55 	.word	0x00005a55
    59e0:	0000586f 	.word	0x0000586f
    59e4:	0000586f 	.word	0x0000586f
    59e8:	00005a55 	.word	0x00005a55
    59ec:	00005861 	.word	0x00005861
    59f0:	00005a09 	.word	0x00005a09
    59f4:	0000586f 	.word	0x0000586f
    59f8:	0000586f 	.word	0x0000586f
    59fc:	00005a09 	.word	0x00005a09
    5a00:	0000586f 	.word	0x0000586f
    5a04:	00005861 	.word	0x00005861
			if (fmt[-1] == 'l') {
    5a08:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    5a0c:	2a6c      	cmp	r2, #108	; 0x6c
    5a0e:	d123      	bne.n	5a58 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
    5a10:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    5a14:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
    5a16:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
    5a1a:	d02d      	beq.n	5a78 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
    5a1c:	2704      	movs	r7, #4
					size = sizeof(long long);
    5a1e:	46b9      	mov	r9, r7
    5a20:	e01b      	b.n	5a5a <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
    5a22:	f108 0807 	add.w	r8, r8, #7
    5a26:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    5a2a:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    5a2c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    5a30:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    5a34:	b155      	cbz	r5, 5a4c <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
    5a36:	eb0e 0004 	add.w	r0, lr, r4
    5a3a:	42b0      	cmp	r0, r6
    5a3c:	d904      	bls.n	5a48 <cbvprintf_package+0x274>
					return -ENOSPC;
    5a3e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    5a42:	b00b      	add	sp, #44	; 0x2c
    5a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    5a48:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
    5a4c:	3408      	adds	r4, #8
			parsing = false;
    5a4e:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
    5a50:	2708      	movs	r7, #8
    5a52:	e706      	b.n	5862 <cbvprintf_package+0x8e>
			parsing = false;
    5a54:	2200      	movs	r2, #0
    5a56:	e7e1      	b.n	5a1c <cbvprintf_package+0x248>
			parsing = false;
    5a58:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
    5a5a:	3c01      	subs	r4, #1
    5a5c:	443c      	add	r4, r7
    5a5e:	4278      	negs	r0, r7
    5a60:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    5a62:	b125      	cbz	r5, 5a6e <cbvprintf_package+0x29a>
    5a64:	eba9 0005 	sub.w	r0, r9, r5
    5a68:	4420      	add	r0, r4
    5a6a:	42b0      	cmp	r0, r6
    5a6c:	d8e7      	bhi.n	5a3e <cbvprintf_package+0x26a>
		if (*fmt == 's') {
    5a6e:	2b73      	cmp	r3, #115	; 0x73
    5a70:	d143      	bne.n	5afa <cbvprintf_package+0x326>
			s = va_arg(ap, char *);
    5a72:	f858 0b04 	ldr.w	r0, [r8], #4
    5a76:	e6ce      	b.n	5816 <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
    5a78:	2708      	movs	r7, #8
    5a7a:	e7d0      	b.n	5a1e <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
    5a7c:	f04f 0c00 	mov.w	ip, #0
    5a80:	e6dc      	b.n	583c <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    5a82:	9b00      	ldr	r3, [sp, #0]
    5a84:	2b0f      	cmp	r3, #15
    5a86:	f63f aee3 	bhi.w	5850 <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
    5a8a:	b345      	cbz	r5, 5ade <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    5a8c:	f8dd e000 	ldr.w	lr, [sp]
    5a90:	a80a      	add	r0, sp, #40	; 0x28
    5a92:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
    5a96:	4470      	add	r0, lr
    5a98:	f1bc 0f00 	cmp.w	ip, #0
    5a9c:	d019      	beq.n	5ad2 <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    5a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5aa2:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
    5aa6:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    5aaa:	9b00      	ldr	r3, [sp, #0]
    5aac:	3301      	adds	r3, #1
    5aae:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
    5ab0:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    5ab2:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
    5ab6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5aba:	2b00      	cmp	r3, #0
    5abc:	f47f aecb 	bne.w	5856 <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
    5ac0:	1b60      	subs	r0, r4, r5
    5ac2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    5ac6:	f4bf aec3 	bcs.w	5850 <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
    5aca:	bb9d      	cbnz	r5, 5b34 <cbvprintf_package+0x360>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    5acc:	3e08      	subs	r6, #8
    5ace:	4430      	add	r0, r6
    5ad0:	e7b7      	b.n	5a42 <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    5ad2:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
    5ad6:	9b02      	ldr	r3, [sp, #8]
    5ad8:	3301      	adds	r3, #1
    5ada:	9302      	str	r3, [sp, #8]
    5adc:	e7e5      	b.n	5aaa <cbvprintf_package+0x2d6>
				} else if (is_ro) {
    5ade:	f1bc 0f00 	cmp.w	ip, #0
    5ae2:	d001      	beq.n	5ae8 <cbvprintf_package+0x314>
					len += 1;
    5ae4:	3601      	adds	r6, #1
    5ae6:	e7e0      	b.n	5aaa <cbvprintf_package+0x2d6>
    5ae8:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
    5aec:	f024 fbe0 	bl	2a2b0 <strlen>
    5af0:	3602      	adds	r6, #2
    5af2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5af6:	4406      	add	r6, r0
    5af8:	e7d7      	b.n	5aaa <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
    5afa:	f1b9 0f04 	cmp.w	r9, #4
    5afe:	d108      	bne.n	5b12 <cbvprintf_package+0x33e>
			int v = va_arg(ap, int);
    5b00:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
    5b04:	b115      	cbz	r5, 5b0c <cbvprintf_package+0x338>
			int v = va_arg(ap, int);
    5b06:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
    5b0a:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    5b0c:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    5b0e:	4680      	mov	r8, r0
    5b10:	e7d1      	b.n	5ab6 <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
    5b12:	f1b9 0f08 	cmp.w	r9, #8
    5b16:	f47f ae9b 	bne.w	5850 <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
    5b1a:	f108 0307 	add.w	r3, r8, #7
    5b1e:	f023 0307 	bic.w	r3, r3, #7
    5b22:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
    5b26:	b11d      	cbz	r5, 5b30 <cbvprintf_package+0x35c>
			long long v = va_arg(ap, long long);
    5b28:	e9d3 bc00 	ldrd	fp, ip, [r3]
    5b2c:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    5b30:	3408      	adds	r4, #8
    5b32:	e7c0      	b.n	5ab6 <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
    5b34:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    5b36:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    5b38:	0880      	lsrs	r0, r0, #2
    5b3a:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
    5b3c:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
    5b3e:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    5b42:	f1ba 0f00 	cmp.w	sl, #0
    5b46:	d005      	beq.n	5b54 <cbvprintf_package+0x380>
    5b48:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
    5b4a:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
    5b4e:	9a00      	ldr	r2, [sp, #0]
    5b50:	429a      	cmp	r2, r3
    5b52:	d107      	bne.n	5b64 <cbvprintf_package+0x390>
		if (BUF_OFFSET + 1 + size > len) {
    5b54:	f1c5 0901 	rsb	r9, r5, #1
    5b58:	e039      	b.n	5bce <cbvprintf_package+0x3fa>
    5b5a:	bf00      	nop
    5b5c:	0002df4c 	.word	0x0002df4c
    5b60:	00034a5c 	.word	0x00034a5c
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    5b64:	f811 2b01 	ldrb.w	r2, [r1], #1
    5b68:	0617      	lsls	r7, r2, #24
    5b6a:	d507      	bpl.n	5b7c <cbvprintf_package+0x3a8>
			if (BUF_OFFSET + 1 > len) {
    5b6c:	1827      	adds	r7, r4, r0
    5b6e:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    5b70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    5b74:	f63f af63 	bhi.w	5a3e <cbvprintf_package+0x26a>
			*buf++ = pos;
    5b78:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
    5b7c:	3301      	adds	r3, #1
    5b7e:	e7e6      	b.n	5b4e <cbvprintf_package+0x37a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    5b80:	9b01      	ldr	r3, [sp, #4]
    5b82:	aa06      	add	r2, sp, #24
    5b84:	f812 8003 	ldrb.w	r8, [r2, r3]
    5b88:	f1ba 0f00 	cmp.w	sl, #0
    5b8c:	d002      	beq.n	5b94 <cbvprintf_package+0x3c0>
    5b8e:	f018 0f80 	tst.w	r8, #128	; 0x80
    5b92:	d119      	bne.n	5bc8 <cbvprintf_package+0x3f4>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    5b94:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    5b98:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    5b9a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    5b9e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
    5ba2:	4608      	mov	r0, r1
    5ba4:	9102      	str	r1, [sp, #8]
    5ba6:	f024 fb83 	bl	2a2b0 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
    5baa:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
    5bae:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    5bb0:	443a      	add	r2, r7
    5bb2:	42b2      	cmp	r2, r6
    5bb4:	f63f af43 	bhi.w	5a3e <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
    5bb8:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
    5bbc:	9902      	ldr	r1, [sp, #8]
    5bbe:	4620      	mov	r0, r4
    5bc0:	463a      	mov	r2, r7
    5bc2:	f024 fbcb 	bl	2a35c <memcpy>
		buf += size;
    5bc6:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	3301      	adds	r3, #1
    5bcc:	9301      	str	r3, [sp, #4]
    5bce:	e9dd 2300 	ldrd	r2, r3, [sp]
    5bd2:	429a      	cmp	r2, r3
    5bd4:	d1d4      	bne.n	5b80 <cbvprintf_package+0x3ac>
	return BUF_OFFSET;
    5bd6:	1b60      	subs	r0, r4, r5
    5bd8:	e733      	b.n	5a42 <cbvprintf_package+0x26e>
		return -EFAULT;
    5bda:	f06f 000d 	mvn.w	r0, #13
    5bde:	e730      	b.n	5a42 <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    5be0:	2907      	cmp	r1, #7
    5be2:	f63f ae0e 	bhi.w	5802 <cbvprintf_package+0x2e>
    5be6:	e72a      	b.n	5a3e <cbvprintf_package+0x26a>

00005be8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    5be8:	b530      	push	{r4, r5, lr}
    5bea:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    5bec:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    5bf0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    5bf2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    5bf4:	a901      	add	r1, sp, #4
    5bf6:	4805      	ldr	r0, [pc, #20]	; (5c0c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    5bf8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    5bfa:	f000 f8e9 	bl	5dd0 <cbvprintf>

	if (ctx.count < ctx.max) {
    5bfe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    5c02:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    5c04:	bfb8      	it	lt
    5c06:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    5c08:	b005      	add	sp, #20
    5c0a:	bd30      	pop	{r4, r5, pc}
    5c0c:	00026937 	.word	0x00026937

00005c10 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    5c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c14:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    5c18:	f019 0808 	ands.w	r8, r9, #8
{
    5c1c:	4604      	mov	r4, r0
    5c1e:	4693      	mov	fp, r2
	if (processing) {
    5c20:	d00d      	beq.n	5c3e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    5c22:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    5c24:	bf0c      	ite	eq
    5c26:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    5c2a:	f049 0920 	orrne.w	r9, r9, #32
    5c2e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    5c32:	f38b 8811 	msr	BASEPRI, fp
    5c36:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    5c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c3e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    5c42:	2902      	cmp	r1, #2
    5c44:	d107      	bne.n	5c56 <process_event+0x46>
			evt = process_recheck(mgr);
    5c46:	4620      	mov	r0, r4
    5c48:	f020 febc 	bl	269c4 <process_recheck>
		if (evt == EVT_NOP) {
    5c4c:	2800      	cmp	r0, #0
    5c4e:	d0f0      	beq.n	5c32 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    5c50:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5c52:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    5c54:	d14e      	bne.n	5cf4 <process_event+0xe4>
			res = mgr->last_res;
    5c56:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c58:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    5c5a:	2f00      	cmp	r7, #0
    5c5c:	da15      	bge.n	5c8a <process_event+0x7a>
		*clients = mgr->clients;
    5c5e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5c60:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    5c64:	e9c4 8800 	strd	r8, r8, [r4]
    5c68:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5c6c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    5c6e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    5c70:	8b21      	ldrh	r1, [r4, #24]
    5c72:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    5c76:	45ca      	cmp	sl, r9
    5c78:	d002      	beq.n	5c80 <process_event+0x70>
		if (do_monitors
    5c7a:	68a3      	ldr	r3, [r4, #8]
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d15a      	bne.n	5d36 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    5c80:	b90d      	cbnz	r5, 5c86 <process_event+0x76>
		    || (transit != NULL)) {
    5c82:	2e00      	cmp	r6, #0
    5c84:	d071      	beq.n	5d6a <process_event+0x15a>
    5c86:	2300      	movs	r3, #0
    5c88:	e056      	b.n	5d38 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c8a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    5c8e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    5c90:	2a01      	cmp	r2, #1
    5c92:	d81e      	bhi.n	5cd2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5c94:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    5c98:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    5c9a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5c9c:	b289      	uxth	r1, r1
    5c9e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    5ca2:	d10a      	bne.n	5cba <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5ca4:	b13d      	cbz	r5, 5cb6 <process_event+0xa6>
    5ca6:	8b63      	ldrh	r3, [r4, #26]
    5ca8:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    5caa:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    5cac:	3301      	adds	r3, #1
    5cae:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5cb0:	2a00      	cmp	r2, #0
    5cb2:	d1fa      	bne.n	5caa <process_event+0x9a>
    5cb4:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5cb6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    5cba:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    5cbc:	4620      	mov	r0, r4
    5cbe:	f020 fe81 	bl	269c4 <process_recheck>
    5cc2:	4606      	mov	r6, r0
    5cc4:	2800      	cmp	r0, #0
    5cc6:	d0d3      	beq.n	5c70 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5cc8:	8b23      	ldrh	r3, [r4, #24]
    5cca:	f043 0320 	orr.w	r3, r3, #32
    5cce:	8323      	strh	r3, [r4, #24]
    5cd0:	e7cd      	b.n	5c6e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    5cd2:	2b04      	cmp	r3, #4
    5cd4:	d10c      	bne.n	5cf0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5cd6:	f021 0107 	bic.w	r1, r1, #7
    5cda:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5cdc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    5cde:	4620      	mov	r0, r4
    5ce0:	f020 fe70 	bl	269c4 <process_recheck>
    5ce4:	4605      	mov	r5, r0
    5ce6:	2800      	cmp	r0, #0
    5ce8:	d0c1      	beq.n	5c6e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5cea:	f041 0120 	orr.w	r1, r1, #32
    5cee:	8321      	strh	r1, [r4, #24]
    5cf0:	2500      	movs	r5, #0
    5cf2:	e7bc      	b.n	5c6e <process_event+0x5e>
		} else if (evt == EVT_START) {
    5cf4:	2803      	cmp	r0, #3
    5cf6:	d109      	bne.n	5d0c <process_event+0xfc>
			transit = mgr->transitions->start;
    5cf8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5cfa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    5cfe:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5d00:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    5d04:	8323      	strh	r3, [r4, #24]
}
    5d06:	2500      	movs	r5, #0
		res = 0;
    5d08:	462f      	mov	r7, r5
    5d0a:	e7b1      	b.n	5c70 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    5d0c:	2804      	cmp	r0, #4
    5d0e:	d106      	bne.n	5d1e <process_event+0x10e>
			transit = mgr->transitions->stop;
    5d10:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5d12:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    5d16:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5d18:	f043 0304 	orr.w	r3, r3, #4
    5d1c:	e7f2      	b.n	5d04 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    5d1e:	2805      	cmp	r0, #5
    5d20:	d106      	bne.n	5d30 <process_event+0x120>
			transit = mgr->transitions->reset;
    5d22:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5d24:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    5d28:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5d2a:	f043 0305 	orr.w	r3, r3, #5
    5d2e:	e7e9      	b.n	5d04 <process_event+0xf4>
    5d30:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    5d32:	462e      	mov	r6, r5
    5d34:	e7e8      	b.n	5d08 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    5d36:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    5d38:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    5d3c:	8321      	strh	r1, [r4, #24]
    5d3e:	f38b 8811 	msr	BASEPRI, fp
    5d42:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    5d46:	b9fb      	cbnz	r3, 5d88 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    5d48:	bb85      	cbnz	r5, 5dac <process_event+0x19c>
			if (transit != NULL) {
    5d4a:	b116      	cbz	r6, 5d52 <process_event+0x142>
				transit(mgr, transition_complete);
    5d4c:	491f      	ldr	r1, [pc, #124]	; (5dcc <process_event+0x1bc>)
    5d4e:	4620      	mov	r0, r4
    5d50:	47b0      	blx	r6
	__asm__ volatile(
    5d52:	f04f 0320 	mov.w	r3, #32
    5d56:	f3ef 8b11 	mrs	fp, BASEPRI
    5d5a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d5e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    5d62:	8b23      	ldrh	r3, [r4, #24]
    5d64:	f023 0308 	bic.w	r3, r3, #8
    5d68:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    5d6a:	8b23      	ldrh	r3, [r4, #24]
    5d6c:	06da      	lsls	r2, r3, #27
    5d6e:	d525      	bpl.n	5dbc <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    5d70:	f023 0310 	bic.w	r3, r3, #16
    5d74:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    5d76:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    5d78:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    5d7c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    5d80:	2900      	cmp	r1, #0
    5d82:	f47f af5e 	bne.w	5c42 <process_event+0x32>
out:
    5d86:	e754      	b.n	5c32 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    5d88:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5d8a:	2900      	cmp	r1, #0
    5d8c:	d0dc      	beq.n	5d48 <process_event+0x138>
	return node->next;
    5d8e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    5d92:	f8d1 b004 	ldr.w	fp, [r1, #4]
    5d96:	463b      	mov	r3, r7
    5d98:	4652      	mov	r2, sl
    5d9a:	4620      	mov	r0, r4
    5d9c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5d9e:	f1b9 0f00 	cmp.w	r9, #0
    5da2:	d0d1      	beq.n	5d48 <process_event+0x138>
    5da4:	4649      	mov	r1, r9
    5da6:	f8d9 9000 	ldr.w	r9, [r9]
    5daa:	e7f2      	b.n	5d92 <process_event+0x182>
    5dac:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    5dae:	463b      	mov	r3, r7
    5db0:	4652      	mov	r2, sl
    5db2:	4620      	mov	r0, r4
    5db4:	682d      	ldr	r5, [r5, #0]
    5db6:	f020 fe21 	bl	269fc <notify_one>
    5dba:	e7c5      	b.n	5d48 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    5dbc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    5dc0:	bf1e      	ittt	ne
    5dc2:	f023 0320 	bicne.w	r3, r3, #32
    5dc6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    5dc8:	2102      	movne	r1, #2
    5dca:	e7d5      	b.n	5d78 <process_event+0x168>
    5dcc:	00026a29 	.word	0x00026a29

00005dd0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    5dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dd4:	4681      	mov	r9, r0
    5dd6:	b09b      	sub	sp, #108	; 0x6c
    5dd8:	468a      	mov	sl, r1
    5dda:	4615      	mov	r5, r2
    5ddc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    5dde:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    5de0:	7828      	ldrb	r0, [r5, #0]
    5de2:	b910      	cbnz	r0, 5dea <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    5de4:	4630      	mov	r0, r6
    5de6:	f000 bdee 	b.w	69c6 <cbvprintf+0xbf6>
			OUTC(*fp++);
    5dea:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    5dec:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    5dee:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    5df0:	d006      	beq.n	5e00 <cbvprintf+0x30>
			OUTC(*fp++);
    5df2:	4651      	mov	r1, sl
			OUTC('%');
    5df4:	47c8      	blx	r9
    5df6:	2800      	cmp	r0, #0
    5df8:	f2c0 85e5 	blt.w	69c6 <cbvprintf+0xbf6>
    5dfc:	3601      	adds	r6, #1
		if (bps == NULL) {
    5dfe:	e24c      	b.n	629a <cbvprintf+0x4ca>
		} state = {
    5e00:	2218      	movs	r2, #24
    5e02:	2100      	movs	r1, #0
    5e04:	a80c      	add	r0, sp, #48	; 0x30
    5e06:	f024 fab4 	bl	2a372 <memset>
	if (*sp == '%') {
    5e0a:	786b      	ldrb	r3, [r5, #1]
    5e0c:	2b25      	cmp	r3, #37	; 0x25
    5e0e:	d07c      	beq.n	5f0a <cbvprintf+0x13a>
    5e10:	2200      	movs	r2, #0
    5e12:	1c68      	adds	r0, r5, #1
    5e14:	4696      	mov	lr, r2
    5e16:	4690      	mov	r8, r2
    5e18:	4694      	mov	ip, r2
    5e1a:	4617      	mov	r7, r2
    5e1c:	4601      	mov	r1, r0
		switch (*sp) {
    5e1e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5e22:	2b2b      	cmp	r3, #43	; 0x2b
    5e24:	f000 80a0 	beq.w	5f68 <cbvprintf+0x198>
    5e28:	f200 8097 	bhi.w	5f5a <cbvprintf+0x18a>
    5e2c:	2b20      	cmp	r3, #32
    5e2e:	f000 809e 	beq.w	5f6e <cbvprintf+0x19e>
    5e32:	2b23      	cmp	r3, #35	; 0x23
    5e34:	f000 809e 	beq.w	5f74 <cbvprintf+0x1a4>
    5e38:	b12f      	cbz	r7, 5e46 <cbvprintf+0x76>
    5e3a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5e3e:	f040 0004 	orr.w	r0, r0, #4
    5e42:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    5e46:	f1bc 0f00 	cmp.w	ip, #0
    5e4a:	d005      	beq.n	5e58 <cbvprintf+0x88>
    5e4c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5e50:	f040 0008 	orr.w	r0, r0, #8
    5e54:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    5e58:	f1b8 0f00 	cmp.w	r8, #0
    5e5c:	d005      	beq.n	5e6a <cbvprintf+0x9a>
    5e5e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5e62:	f040 0010 	orr.w	r0, r0, #16
    5e66:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    5e6a:	f1be 0f00 	cmp.w	lr, #0
    5e6e:	d005      	beq.n	5e7c <cbvprintf+0xac>
    5e70:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5e74:	f040 0020 	orr.w	r0, r0, #32
    5e78:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    5e7c:	b12a      	cbz	r2, 5e8a <cbvprintf+0xba>
    5e7e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5e86:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    5e8a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5e8e:	f002 0044 	and.w	r0, r2, #68	; 0x44
    5e92:	2844      	cmp	r0, #68	; 0x44
    5e94:	d103      	bne.n	5e9e <cbvprintf+0xce>
		conv->flag_zero = false;
    5e96:	f36f 1286 	bfc	r2, #6, #1
    5e9a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    5e9e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    5ea2:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    5ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5ea8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    5eac:	d17e      	bne.n	5fac <cbvprintf+0x1dc>
		conv->width_star = true;
    5eae:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5eb2:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    5eb6:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    5eb8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    5ebc:	781a      	ldrb	r2, [r3, #0]
    5ebe:	2a2e      	cmp	r2, #46	; 0x2e
    5ec0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5ec4:	bf0c      	ite	eq
    5ec6:	2101      	moveq	r1, #1
    5ec8:	2100      	movne	r1, #0
    5eca:	f361 0241 	bfi	r2, r1, #1, #1
    5ece:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    5ed2:	d177      	bne.n	5fc4 <cbvprintf+0x1f4>
	if (*sp == '*') {
    5ed4:	785a      	ldrb	r2, [r3, #1]
    5ed6:	2a2a      	cmp	r2, #42	; 0x2a
    5ed8:	d06d      	beq.n	5fb6 <cbvprintf+0x1e6>
	++sp;
    5eda:	3301      	adds	r3, #1
	size_t val = 0;
    5edc:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    5ede:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5ee2:	4618      	mov	r0, r3
    5ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
    5ee8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5eec:	2f09      	cmp	r7, #9
    5eee:	f240 80ab 	bls.w	6048 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    5ef2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    5ef6:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    5ef8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    5efc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    5f00:	f361 0241 	bfi	r2, r1, #1, #1
    5f04:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    5f08:	e05c      	b.n	5fc4 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    5f0a:	1caa      	adds	r2, r5, #2
    5f0c:	9202      	str	r2, [sp, #8]
    5f0e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    5f12:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5f16:	07df      	lsls	r7, r3, #31
    5f18:	f140 8173 	bpl.w	6202 <cbvprintf+0x432>
			width = va_arg(ap, int);
    5f1c:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    5f20:	f1bb 0f00 	cmp.w	fp, #0
    5f24:	da07      	bge.n	5f36 <cbvprintf+0x166>
				conv->flag_dash = true;
    5f26:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5f2a:	f042 0204 	orr.w	r2, r2, #4
    5f2e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    5f32:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    5f36:	0758      	lsls	r0, r3, #29
    5f38:	f140 816c 	bpl.w	6214 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    5f3c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    5f40:	f1b8 0f00 	cmp.w	r8, #0
    5f44:	f280 816b 	bge.w	621e <cbvprintf+0x44e>
				conv->prec_present = false;
    5f48:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5f4c:	f36f 0341 	bfc	r3, #1, #1
    5f50:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    5f54:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5f58:	e161      	b.n	621e <cbvprintf+0x44e>
		switch (*sp) {
    5f5a:	2b2d      	cmp	r3, #45	; 0x2d
    5f5c:	d00d      	beq.n	5f7a <cbvprintf+0x1aa>
    5f5e:	2b30      	cmp	r3, #48	; 0x30
    5f60:	f47f af6a 	bne.w	5e38 <cbvprintf+0x68>
			conv->flag_zero = true;
    5f64:	2201      	movs	r2, #1
	} while (loop);
    5f66:	e759      	b.n	5e1c <cbvprintf+0x4c>
			conv->flag_plus = true;
    5f68:	f04f 0c01 	mov.w	ip, #1
    5f6c:	e756      	b.n	5e1c <cbvprintf+0x4c>
			conv->flag_space = true;
    5f6e:	f04f 0801 	mov.w	r8, #1
    5f72:	e753      	b.n	5e1c <cbvprintf+0x4c>
			conv->flag_hash = true;
    5f74:	f04f 0e01 	mov.w	lr, #1
    5f78:	e750      	b.n	5e1c <cbvprintf+0x4c>
		switch (*sp) {
    5f7a:	2701      	movs	r7, #1
    5f7c:	e74e      	b.n	5e1c <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    5f7e:	fb0c 7202 	mla	r2, ip, r2, r7
    5f82:	3a30      	subs	r2, #48	; 0x30
    5f84:	4603      	mov	r3, r0
    5f86:	4618      	mov	r0, r3
    5f88:	f810 7b01 	ldrb.w	r7, [r0], #1
    5f8c:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5f90:	f1be 0f09 	cmp.w	lr, #9
    5f94:	d9f3      	bls.n	5f7e <cbvprintf+0x1ae>
	if (sp != wp) {
    5f96:	4299      	cmp	r1, r3
    5f98:	d090      	beq.n	5ebc <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    5f9a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    5f9e:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    5fa0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    5fa2:	f362 0141 	bfi	r1, r2, #1, #1
    5fa6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    5faa:	e787      	b.n	5ebc <cbvprintf+0xec>
    5fac:	460b      	mov	r3, r1
	size_t val = 0;
    5fae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    5fb0:	f04f 0c0a 	mov.w	ip, #10
    5fb4:	e7e7      	b.n	5f86 <cbvprintf+0x1b6>
		conv->prec_star = true;
    5fb6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5fba:	f042 0204 	orr.w	r2, r2, #4
    5fbe:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    5fc2:	3302      	adds	r3, #2
	switch (*sp) {
    5fc4:	4619      	mov	r1, r3
    5fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
    5fca:	2a6c      	cmp	r2, #108	; 0x6c
    5fcc:	d05c      	beq.n	6088 <cbvprintf+0x2b8>
    5fce:	d840      	bhi.n	6052 <cbvprintf+0x282>
    5fd0:	2a68      	cmp	r2, #104	; 0x68
    5fd2:	d046      	beq.n	6062 <cbvprintf+0x292>
    5fd4:	2a6a      	cmp	r2, #106	; 0x6a
    5fd6:	d061      	beq.n	609c <cbvprintf+0x2cc>
    5fd8:	2a4c      	cmp	r2, #76	; 0x4c
    5fda:	d067      	beq.n	60ac <cbvprintf+0x2dc>
    5fdc:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    5fde:	460b      	mov	r3, r1
    5fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
    5fe4:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    5fe6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    5fe8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5fec:	f200 80df 	bhi.w	61ae <cbvprintf+0x3de>
    5ff0:	2a57      	cmp	r2, #87	; 0x57
    5ff2:	d868      	bhi.n	60c6 <cbvprintf+0x2f6>
    5ff4:	2a41      	cmp	r2, #65	; 0x41
    5ff6:	d004      	beq.n	6002 <cbvprintf+0x232>
    5ff8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5ffc:	2b02      	cmp	r3, #2
    5ffe:	f200 80d6 	bhi.w	61ae <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    6002:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    6006:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    600a:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    600c:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    6010:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    6014:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    6018:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    601c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    6020:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    6024:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    6028:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    602a:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    602e:	b2cb      	uxtb	r3, r1
    6030:	f100 80e5 	bmi.w	61fe <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    6034:	f003 0278 	and.w	r2, r3, #120	; 0x78
    6038:	2a18      	cmp	r2, #24
    603a:	f040 80b5 	bne.w	61a8 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    603e:	f36f 03c6 	bfc	r3, #3, #4
    6042:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    6046:	e09c      	b.n	6182 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    6048:	fb0c 2101 	mla	r1, ip, r1, r2
    604c:	3930      	subs	r1, #48	; 0x30
    604e:	4603      	mov	r3, r0
    6050:	e747      	b.n	5ee2 <cbvprintf+0x112>
	switch (*sp) {
    6052:	2a74      	cmp	r2, #116	; 0x74
    6054:	d026      	beq.n	60a4 <cbvprintf+0x2d4>
    6056:	2a7a      	cmp	r2, #122	; 0x7a
    6058:	d1c0      	bne.n	5fdc <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    605a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    605e:	2206      	movs	r2, #6
    6060:	e00d      	b.n	607e <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    6062:	785a      	ldrb	r2, [r3, #1]
    6064:	2a68      	cmp	r2, #104	; 0x68
    6066:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    606a:	d106      	bne.n	607a <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    606c:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    606e:	f361 02c6 	bfi	r2, r1, #3, #4
    6072:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    6076:	1c99      	adds	r1, r3, #2
    6078:	e7b1      	b.n	5fde <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    607a:	4613      	mov	r3, r2
    607c:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    607e:	f362 03c6 	bfi	r3, r2, #3, #4
    6082:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    6086:	e7aa      	b.n	5fde <cbvprintf+0x20e>
		if (*++sp == 'l') {
    6088:	785a      	ldrb	r2, [r3, #1]
    608a:	2a6c      	cmp	r2, #108	; 0x6c
    608c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    6090:	d101      	bne.n	6096 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    6092:	2104      	movs	r1, #4
    6094:	e7eb      	b.n	606e <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    6096:	4613      	mov	r3, r2
    6098:	2203      	movs	r2, #3
    609a:	e7f0      	b.n	607e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    609c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    60a0:	2205      	movs	r2, #5
    60a2:	e7ec      	b.n	607e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    60a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    60a8:	2207      	movs	r2, #7
    60aa:	e7e8      	b.n	607e <cbvprintf+0x2ae>
		conv->unsupported = true;
    60ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    60b0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    60b4:	f023 0302 	bic.w	r3, r3, #2
    60b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    60bc:	f043 0302 	orr.w	r3, r3, #2
    60c0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    60c4:	e78b      	b.n	5fde <cbvprintf+0x20e>
	switch (conv->specifier) {
    60c6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    60ca:	2b20      	cmp	r3, #32
    60cc:	d86f      	bhi.n	61ae <cbvprintf+0x3de>
    60ce:	a101      	add	r1, pc, #4	; (adr r1, 60d4 <cbvprintf+0x304>)
    60d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    60d4:	00006187 	.word	0x00006187
    60d8:	000061af 	.word	0x000061af
    60dc:	000061af 	.word	0x000061af
    60e0:	000061af 	.word	0x000061af
    60e4:	000061af 	.word	0x000061af
    60e8:	000061af 	.word	0x000061af
    60ec:	000061af 	.word	0x000061af
    60f0:	000061af 	.word	0x000061af
    60f4:	000061af 	.word	0x000061af
    60f8:	00006003 	.word	0x00006003
    60fc:	000061af 	.word	0x000061af
    6100:	00006187 	.word	0x00006187
    6104:	00006159 	.word	0x00006159
    6108:	00006003 	.word	0x00006003
    610c:	00006003 	.word	0x00006003
    6110:	00006003 	.word	0x00006003
    6114:	000061af 	.word	0x000061af
    6118:	00006159 	.word	0x00006159
    611c:	000061af 	.word	0x000061af
    6120:	000061af 	.word	0x000061af
    6124:	000061af 	.word	0x000061af
    6128:	000061af 	.word	0x000061af
    612c:	000061bd 	.word	0x000061bd
    6130:	00006187 	.word	0x00006187
    6134:	000061e1 	.word	0x000061e1
    6138:	000061af 	.word	0x000061af
    613c:	000061af 	.word	0x000061af
    6140:	000061e1 	.word	0x000061e1
    6144:	000061af 	.word	0x000061af
    6148:	00006187 	.word	0x00006187
    614c:	000061af 	.word	0x000061af
    6150:	000061af 	.word	0x000061af
    6154:	00006187 	.word	0x00006187
		conv->specifier_cat = SPECIFIER_SINT;
    6158:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    615c:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    615e:	f361 0302 	bfi	r3, r1, #0, #3
    6162:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    6166:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    616a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    616e:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    6170:	bf02      	ittt	eq
    6172:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    6176:	f041 0101 	orreq.w	r1, r1, #1
    617a:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    617e:	2a63      	cmp	r2, #99	; 0x63
    6180:	d005      	beq.n	618e <cbvprintf+0x3be>
	bool unsupported = false;
    6182:	2300      	movs	r3, #0
    6184:	e006      	b.n	6194 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    6186:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    618a:	2102      	movs	r1, #2
    618c:	e7e7      	b.n	615e <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    618e:	3b00      	subs	r3, #0
    6190:	bf18      	it	ne
    6192:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    6194:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    6198:	f3c2 0140 	ubfx	r1, r2, #1, #1
    619c:	430b      	orrs	r3, r1
    619e:	f363 0241 	bfi	r2, r3, #1, #1
    61a2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    61a6:	e6b4      	b.n	5f12 <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    61a8:	f013 0f38 	tst.w	r3, #56	; 0x38
    61ac:	d0e9      	beq.n	6182 <cbvprintf+0x3b2>
			conv->invalid = true;
    61ae:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    61b2:	f043 0301 	orr.w	r3, r3, #1
    61b6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    61ba:	e7e2      	b.n	6182 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    61bc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    61c0:	2203      	movs	r2, #3
    61c2:	f362 0302 	bfi	r3, r2, #0, #3
    61c6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    61ca:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    61ce:	f003 0378 	and.w	r3, r3, #120	; 0x78
    61d2:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    61d6:	f1dc 0300 	rsbs	r3, ip, #0
    61da:	eb43 030c 	adc.w	r3, r3, ip
    61de:	e7d9      	b.n	6194 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    61e0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    61e4:	2203      	movs	r2, #3
    61e6:	f362 0302 	bfi	r3, r2, #0, #3
    61ea:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    61ee:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    61f2:	f013 0f78 	tst.w	r3, #120	; 0x78
    61f6:	bf14      	ite	ne
    61f8:	2301      	movne	r3, #1
    61fa:	2300      	moveq	r3, #0
    61fc:	e7ca      	b.n	6194 <cbvprintf+0x3c4>
			unsupported = true;
    61fe:	2301      	movs	r3, #1
    6200:	e7c8      	b.n	6194 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    6202:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    6206:	2a00      	cmp	r2, #0
			width = conv->width_value;
    6208:	bfb4      	ite	lt
    620a:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    620e:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    6212:	e690      	b.n	5f36 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    6214:	0799      	lsls	r1, r3, #30
    6216:	f57f ae9d 	bpl.w	5f54 <cbvprintf+0x184>
			precision = conv->prec_value;
    621a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    621e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    6222:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    6224:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    6228:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    622c:	f003 0207 	and.w	r2, r3, #7
    6230:	2a04      	cmp	r2, #4
    6232:	d109      	bne.n	6248 <cbvprintf+0x478>
		    && !conv->prec_present) {
    6234:	078a      	lsls	r2, r1, #30
    6236:	d407      	bmi.n	6248 <cbvprintf+0x478>
			if (conv->specifier_a) {
    6238:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    623c:	2a00      	cmp	r2, #0
    623e:	bfb4      	ite	lt
    6240:	f04f 080d 	movlt.w	r8, #13
    6244:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    6248:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    624c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    624e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    6252:	d137      	bne.n	62c4 <cbvprintf+0x4f4>
			switch (length_mod) {
    6254:	1ecb      	subs	r3, r1, #3
    6256:	2b04      	cmp	r3, #4
    6258:	d821      	bhi.n	629e <cbvprintf+0x4ce>
    625a:	e8df f003 	tbb	[pc, r3]
    625e:	0903      	.short	0x0903
    6260:	2009      	.short	0x2009
    6262:	20          	.byte	0x20
    6263:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    6264:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    6268:	17da      	asrs	r2, r3, #31
    626a:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    626e:	e006      	b.n	627e <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    6270:	3407      	adds	r4, #7
    6272:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    6276:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    627a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    627e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    6282:	07bb      	lsls	r3, r7, #30
    6284:	d056      	beq.n	6334 <cbvprintf+0x564>
			OUTS(sp, fp);
    6286:	9b02      	ldr	r3, [sp, #8]
    6288:	462a      	mov	r2, r5
    628a:	4651      	mov	r1, sl
    628c:	4648      	mov	r0, r9
    628e:	f020 feca 	bl	27026 <outs>
    6292:	2800      	cmp	r0, #0
    6294:	f2c0 8397 	blt.w	69c6 <cbvprintf+0xbf6>
    6298:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    629a:	9d02      	ldr	r5, [sp, #8]
    629c:	e5a0      	b.n	5de0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    629e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    62a2:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    62a4:	ea4f 72e3 	mov.w	r2, r3, asr #31
    62a8:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    62ac:	d105      	bne.n	62ba <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    62ae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    62b2:	930c      	str	r3, [sp, #48]	; 0x30
    62b4:	2300      	movs	r3, #0
    62b6:	930d      	str	r3, [sp, #52]	; 0x34
    62b8:	e7e1      	b.n	627e <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    62ba:	2902      	cmp	r1, #2
    62bc:	d1df      	bne.n	627e <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    62be:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    62c2:	e7d1      	b.n	6268 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    62c4:	2b02      	cmp	r3, #2
    62c6:	d123      	bne.n	6310 <cbvprintf+0x540>
			switch (length_mod) {
    62c8:	1ecb      	subs	r3, r1, #3
    62ca:	2b04      	cmp	r3, #4
    62cc:	d813      	bhi.n	62f6 <cbvprintf+0x526>
    62ce:	e8df f003 	tbb	[pc, r3]
    62d2:	0a03      	.short	0x0a03
    62d4:	120a      	.short	0x120a
    62d6:	12          	.byte	0x12
    62d7:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    62d8:	6822      	ldr	r2, [r4, #0]
    62da:	920c      	str	r2, [sp, #48]	; 0x30
    62dc:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    62de:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    62e0:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    62e2:	4604      	mov	r4, r0
    62e4:	e7cb      	b.n	627e <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    62e6:	1de0      	adds	r0, r4, #7
    62e8:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    62ec:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    62f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    62f4:	e7f5      	b.n	62e2 <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    62f6:	f854 3b04 	ldr.w	r3, [r4], #4
    62fa:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    62fc:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    62fe:	f04f 0300 	mov.w	r3, #0
    6302:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    6304:	d0d3      	beq.n	62ae <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    6306:	2902      	cmp	r1, #2
    6308:	d1b9      	bne.n	627e <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    630a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    630e:	e7d0      	b.n	62b2 <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    6310:	2b04      	cmp	r3, #4
    6312:	d109      	bne.n	6328 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    6314:	1de3      	adds	r3, r4, #7
    6316:	f023 0307 	bic.w	r3, r3, #7
    631a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    631e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6322:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    6326:	e7aa      	b.n	627e <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    6328:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    632a:	bf04      	itt	eq
    632c:	f854 3b04 	ldreq.w	r3, [r4], #4
    6330:	930c      	streq	r3, [sp, #48]	; 0x30
    6332:	e7a4      	b.n	627e <cbvprintf+0x4ae>
		switch (conv->specifier) {
    6334:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    6338:	2a78      	cmp	r2, #120	; 0x78
    633a:	d8ae      	bhi.n	629a <cbvprintf+0x4ca>
    633c:	2a57      	cmp	r2, #87	; 0x57
    633e:	f200 808c 	bhi.w	645a <cbvprintf+0x68a>
    6342:	2a25      	cmp	r2, #37	; 0x25
    6344:	f000 80d4 	beq.w	64f0 <cbvprintf+0x720>
    6348:	2a24      	cmp	r2, #36	; 0x24
    634a:	d9a6      	bls.n	629a <cbvprintf+0x4ca>
    634c:	2a41      	cmp	r2, #65	; 0x41
    634e:	d003      	beq.n	6358 <cbvprintf+0x588>
    6350:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    6354:	2b02      	cmp	r3, #2
    6356:	d8a0      	bhi.n	629a <cbvprintf+0x4ca>
	} u = {
    6358:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    635c:	2b00      	cmp	r3, #0
    635e:	f2c0 81be 	blt.w	66de <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    6362:	0738      	lsls	r0, r7, #28
    6364:	f100 81bd 	bmi.w	66e2 <cbvprintf+0x912>
		*sign = ' ';
    6368:	f017 0710 	ands.w	r7, r7, #16
    636c:	bf18      	it	ne
    636e:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    6370:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    6374:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6378:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    637c:	2d00      	cmp	r5, #0
    637e:	f040 81b2 	bne.w	66e6 <cbvprintf+0x916>
    6382:	ea51 0003 	orrs.w	r0, r1, r3
    6386:	bf14      	ite	ne
    6388:	2001      	movne	r0, #1
    638a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    638c:	02db      	lsls	r3, r3, #11
    638e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    6392:	02c9      	lsls	r1, r1, #11
		c = 'f';
    6394:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    6396:	ea45 0e01 	orr.w	lr, r5, r1
    639a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    639e:	bf08      	it	eq
    63a0:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    63a2:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    63a6:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    63aa:	f000 8206 	beq.w	67ba <cbvprintf+0x9ea>
		if (is_subnormal) {
    63ae:	2800      	cmp	r0, #0
    63b0:	f040 81ce 	bne.w	6750 <cbvprintf+0x980>
		fract |= BIT_63;
    63b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    63b8:	f04f 0c00 	mov.w	ip, #0
    63bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    63c0:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    63c4:	9109      	str	r1, [sp, #36]	; 0x24
    63c6:	4663      	mov	r3, ip
		fract *= 5U;
    63c8:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    63cc:	f115 0f02 	cmn.w	r5, #2
    63d0:	f2c0 81c5 	blt.w	675e <cbvprintf+0x98e>
    63d4:	f1bc 0f00 	cmp.w	ip, #0
    63d8:	d001      	beq.n	63de <cbvprintf+0x60e>
    63da:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    63de:	2d00      	cmp	r5, #0
		fract += 2;
    63e0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    63e4:	f300 81d0 	bgt.w	6788 <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    63e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    63ea:	9908      	ldr	r1, [sp, #32]
    63ec:	f1c5 0c04 	rsb	ip, r5, #4
    63f0:	351c      	adds	r5, #28
    63f2:	fa00 f505 	lsl.w	r5, r0, r5
    63f6:	f1ac 0e20 	sub.w	lr, ip, #32
    63fa:	fa21 f10c 	lsr.w	r1, r1, ip
    63fe:	fa20 fe0e 	lsr.w	lr, r0, lr
    6402:	4329      	orrs	r1, r5
    6404:	ea41 010e 	orr.w	r1, r1, lr
    6408:	fa20 f00c 	lsr.w	r0, r0, ip
    640c:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    6410:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    6414:	2947      	cmp	r1, #71	; 0x47
    6416:	f040 81d7 	bne.w	67c8 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    641a:	1cdd      	adds	r5, r3, #3
    641c:	db02      	blt.n	6424 <cbvprintf+0x654>
    641e:	4598      	cmp	r8, r3
    6420:	f280 81ce 	bge.w	67c0 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    6424:	3a02      	subs	r2, #2
			if (precision > 0) {
    6426:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    642a:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    642c:	dd01      	ble.n	6432 <cbvprintf+0x662>
				precision--;
    642e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    6432:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6436:	0688      	lsls	r0, r1, #26
    6438:	f100 81c6 	bmi.w	67c8 <cbvprintf+0x9f8>
    643c:	f1b8 0f00 	cmp.w	r8, #0
    6440:	bfd4      	ite	le
    6442:	2100      	movle	r1, #0
    6444:	2101      	movgt	r1, #1
	if (c == 'f') {
    6446:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    6448:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    644a:	f040 81bf 	bne.w	67cc <cbvprintf+0x9fc>
		if (decimals < 0) {
    644e:	eb18 0503 	adds.w	r5, r8, r3
    6452:	f140 81bd 	bpl.w	67d0 <cbvprintf+0xa00>
			decimals = 0;
    6456:	2500      	movs	r5, #0
    6458:	e1bd      	b.n	67d6 <cbvprintf+0xa06>
		switch (conv->specifier) {
    645a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    645e:	2b20      	cmp	r3, #32
    6460:	f63f af1b 	bhi.w	629a <cbvprintf+0x4ca>
    6464:	a001      	add	r0, pc, #4	; (adr r0, 646c <cbvprintf+0x69c>)
    6466:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    646a:	bf00      	nop
    646c:	00006681 	.word	0x00006681
    6470:	0000629b 	.word	0x0000629b
    6474:	0000629b 	.word	0x0000629b
    6478:	0000629b 	.word	0x0000629b
    647c:	0000629b 	.word	0x0000629b
    6480:	0000629b 	.word	0x0000629b
    6484:	0000629b 	.word	0x0000629b
    6488:	0000629b 	.word	0x0000629b
    648c:	0000629b 	.word	0x0000629b
    6490:	00006359 	.word	0x00006359
    6494:	0000629b 	.word	0x0000629b
    6498:	0000651d 	.word	0x0000651d
    649c:	00006621 	.word	0x00006621
    64a0:	00006359 	.word	0x00006359
    64a4:	00006359 	.word	0x00006359
    64a8:	00006359 	.word	0x00006359
    64ac:	0000629b 	.word	0x0000629b
    64b0:	00006621 	.word	0x00006621
    64b4:	0000629b 	.word	0x0000629b
    64b8:	0000629b 	.word	0x0000629b
    64bc:	0000629b 	.word	0x0000629b
    64c0:	0000629b 	.word	0x0000629b
    64c4:	000066b7 	.word	0x000066b7
    64c8:	00006681 	.word	0x00006681
    64cc:	00006685 	.word	0x00006685
    64d0:	0000629b 	.word	0x0000629b
    64d4:	0000629b 	.word	0x0000629b
    64d8:	000064f7 	.word	0x000064f7
    64dc:	0000629b 	.word	0x0000629b
    64e0:	00006681 	.word	0x00006681
    64e4:	0000629b 	.word	0x0000629b
    64e8:	0000629b 	.word	0x0000629b
    64ec:	00006681 	.word	0x00006681
			OUTC('%');
    64f0:	4651      	mov	r1, sl
    64f2:	4610      	mov	r0, r2
    64f4:	e47e      	b.n	5df4 <cbvprintf+0x24>
			if (precision >= 0) {
    64f6:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    64fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    64fc:	db09      	blt.n	6512 <cbvprintf+0x742>
				len = strnlen(bps, precision);
    64fe:	4641      	mov	r1, r8
    6500:	4610      	mov	r0, r2
    6502:	9203      	str	r2, [sp, #12]
    6504:	f023 fedb 	bl	2a2be <strnlen>
				len = strlen(bps);
    6508:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    650a:	2700      	movs	r7, #0
			bpe = bps + len;
    650c:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    650e:	b962      	cbnz	r2, 652a <cbvprintf+0x75a>
    6510:	e6c3      	b.n	629a <cbvprintf+0x4ca>
				len = strlen(bps);
    6512:	4610      	mov	r0, r2
    6514:	9203      	str	r2, [sp, #12]
    6516:	f023 fecb 	bl	2a2b0 <strlen>
    651a:	e7f5      	b.n	6508 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    651c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    651e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    6522:	2700      	movs	r7, #0
			bpe = buf + 1;
    6524:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    6528:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    652a:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    652c:	b107      	cbz	r7, 6530 <cbvprintf+0x760>
			nj_len += 1U;
    652e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    6530:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    6534:	06c1      	lsls	r1, r0, #27
    6536:	f140 823a 	bpl.w	69ae <cbvprintf+0xbde>
			nj_len += 2U;
    653a:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    653c:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    653e:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    6540:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    6542:	bf44      	itt	mi
    6544:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    6546:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    6548:	f1bb 0f00 	cmp.w	fp, #0
    654c:	dd23      	ble.n	6596 <cbvprintf+0x7c6>
			width -= (int)nj_len;
    654e:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    6552:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    6556:	0759      	lsls	r1, r3, #29
    6558:	f3c3 0880 	ubfx	r8, r3, #2, #1
    655c:	d41b      	bmi.n	6596 <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    655e:	0658      	lsls	r0, r3, #25
    6560:	f140 8234 	bpl.w	69cc <cbvprintf+0xbfc>
					if (sign != 0) {
    6564:	2f00      	cmp	r7, #0
    6566:	f000 8234 	beq.w	69d2 <cbvprintf+0xc02>
						OUTC(sign);
    656a:	4651      	mov	r1, sl
    656c:	4638      	mov	r0, r7
    656e:	9203      	str	r2, [sp, #12]
    6570:	47c8      	blx	r9
    6572:	2800      	cmp	r0, #0
    6574:	f2c0 8227 	blt.w	69c6 <cbvprintf+0xbf6>
    6578:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    657a:	4647      	mov	r7, r8
						OUTC(sign);
    657c:	3601      	adds	r6, #1
					pad = '0';
    657e:	f04f 0830 	mov.w	r8, #48	; 0x30
    6582:	445e      	add	r6, fp
    6584:	465b      	mov	r3, fp
				while (width-- > 0) {
    6586:	2b00      	cmp	r3, #0
    6588:	eba6 000b 	sub.w	r0, r6, fp
    658c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    6590:	f300 8211 	bgt.w	69b6 <cbvprintf+0xbe6>
    6594:	4606      	mov	r6, r0
		if (sign != 0) {
    6596:	b147      	cbz	r7, 65aa <cbvprintf+0x7da>
			OUTC(sign);
    6598:	4651      	mov	r1, sl
    659a:	4638      	mov	r0, r7
    659c:	9203      	str	r2, [sp, #12]
    659e:	47c8      	blx	r9
    65a0:	2800      	cmp	r0, #0
    65a2:	f2c0 8210 	blt.w	69c6 <cbvprintf+0xbf6>
    65a6:	9a03      	ldr	r2, [sp, #12]
    65a8:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    65aa:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    65ae:	0659      	lsls	r1, r3, #25
    65b0:	f140 8265 	bpl.w	6a7e <cbvprintf+0xcae>
			if (conv->specifier_a) {
    65b4:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    65b8:	2b00      	cmp	r3, #0
    65ba:	eba6 0302 	sub.w	r3, r6, r2
    65be:	9303      	str	r3, [sp, #12]
    65c0:	f2c0 820a 	blt.w	69d8 <cbvprintf+0xc08>
    65c4:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    65c6:	7838      	ldrb	r0, [r7, #0]
    65c8:	9b03      	ldr	r3, [sp, #12]
    65ca:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    65ce:	2a09      	cmp	r2, #9
    65d0:	46b8      	mov	r8, r7
    65d2:	eb03 0607 	add.w	r6, r3, r7
    65d6:	f107 0701 	add.w	r7, r7, #1
    65da:	f240 8229 	bls.w	6a30 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    65de:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    65e2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    65e4:	0693      	lsls	r3, r2, #26
    65e6:	d408      	bmi.n	65fa <cbvprintf+0x82a>
    65e8:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    65ea:	2f00      	cmp	r7, #0
    65ec:	eba6 0307 	sub.w	r3, r6, r7
    65f0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    65f4:	f300 8222 	bgt.w	6a3c <cbvprintf+0xc6c>
    65f8:	461e      	mov	r6, r3
				if (*cp == '.') {
    65fa:	f898 0000 	ldrb.w	r0, [r8]
    65fe:	282e      	cmp	r0, #46	; 0x2e
    6600:	d10b      	bne.n	661a <cbvprintf+0x84a>
					OUTC(*cp++);
    6602:	4651      	mov	r1, sl
    6604:	47c8      	blx	r9
						OUTC('0');
    6606:	2800      	cmp	r0, #0
    6608:	f2c0 81dd 	blt.w	69c6 <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    660c:	2f00      	cmp	r7, #0
						OUTC('0');
    660e:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    6612:	f300 821a 	bgt.w	6a4a <cbvprintf+0xc7a>
					OUTC(*cp++);
    6616:	f108 0801 	add.w	r8, r8, #1
    661a:	eba6 0608 	sub.w	r6, r6, r8
    661e:	e21d      	b.n	6a5c <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    6620:	073d      	lsls	r5, r7, #28
    6622:	d42b      	bmi.n	667c <cbvprintf+0x8ac>
				sign = ' ';
    6624:	f017 0710 	ands.w	r7, r7, #16
    6628:	bf18      	it	ne
    662a:	2720      	movne	r7, #32
			sint = value->sint;
    662c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    6630:	2b00      	cmp	r3, #0
    6632:	da05      	bge.n	6640 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    6634:	4252      	negs	r2, r2
    6636:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    663a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    663e:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    6640:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    6644:	9300      	str	r3, [sp, #0]
    6646:	aa0e      	add	r2, sp, #56	; 0x38
    6648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    664c:	ab13      	add	r3, sp, #76	; 0x4c
    664e:	f020 fca4 	bl	26f9a <encode_uint>
    6652:	4602      	mov	r2, r0
			if (precision >= 0) {
    6654:	f1b8 0f00 	cmp.w	r8, #0
    6658:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    665c:	f6ff af57 	blt.w	650e <cbvprintf+0x73e>
				conv->flag_zero = false;
    6660:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    6664:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    6666:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    666a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    666c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    6670:	f67f af4d 	bls.w	650e <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    6674:	eba8 0303 	sub.w	r3, r8, r3
    6678:	930f      	str	r3, [sp, #60]	; 0x3c
    667a:	e748      	b.n	650e <cbvprintf+0x73e>
				sign = '+';
    667c:	272b      	movs	r7, #43	; 0x2b
    667e:	e7d5      	b.n	662c <cbvprintf+0x85c>
		switch (conv->specifier) {
    6680:	2700      	movs	r7, #0
    6682:	e7dd      	b.n	6640 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    6684:	980c      	ldr	r0, [sp, #48]	; 0x30
    6686:	2800      	cmp	r0, #0
    6688:	f000 818d 	beq.w	69a6 <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    668c:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    6690:	9300      	str	r3, [sp, #0]
    6692:	aa0e      	add	r2, sp, #56	; 0x38
    6694:	ab13      	add	r3, sp, #76	; 0x4c
    6696:	2100      	movs	r1, #0
    6698:	f020 fc7f 	bl	26f9a <encode_uint>
				conv->altform_0c = true;
    669c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    66a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    66a4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    66a8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    66ac:	4602      	mov	r2, r0
				conv->altform_0c = true;
    66ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    66b2:	2700      	movs	r7, #0
				goto prec_int_pad0;
    66b4:	e7ce      	b.n	6654 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    66b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    66b8:	2907      	cmp	r1, #7
    66ba:	f63f adee 	bhi.w	629a <cbvprintf+0x4ca>
    66be:	e8df f001 	tbb	[pc, r1]
    66c2:	040c      	.short	0x040c
    66c4:	08080c06 	.word	0x08080c06
    66c8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    66ca:	701e      	strb	r6, [r3, #0]
		break;
    66cc:	e5e5      	b.n	629a <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    66ce:	801e      	strh	r6, [r3, #0]
		break;
    66d0:	e5e3      	b.n	629a <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    66d2:	17f2      	asrs	r2, r6, #31
    66d4:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    66d8:	e5df      	b.n	629a <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    66da:	601e      	str	r6, [r3, #0]
		break;
    66dc:	e5dd      	b.n	629a <cbvprintf+0x4ca>
		*sign = '-';
    66de:	272d      	movs	r7, #45	; 0x2d
    66e0:	e646      	b.n	6370 <cbvprintf+0x5a0>
		*sign = '+';
    66e2:	272b      	movs	r7, #43	; 0x2b
    66e4:	e644      	b.n	6370 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    66e6:	f240 70ff 	movw	r0, #2047	; 0x7ff
    66ea:	4285      	cmp	r5, r0
    66ec:	d12d      	bne.n	674a <cbvprintf+0x97a>
		if (fract == 0) {
    66ee:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    66f0:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    66f4:	d11b      	bne.n	672e <cbvprintf+0x95e>
			if (isupper((int)c)) {
    66f6:	2a19      	cmp	r2, #25
    66f8:	d811      	bhi.n	671e <cbvprintf+0x94e>
				*buf++ = 'I';
    66fa:	2349      	movs	r3, #73	; 0x49
    66fc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    6700:	234e      	movs	r3, #78	; 0x4e
    6702:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    6706:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    6708:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    670c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    6710:	f36f 1386 	bfc	r3, #6, #1
    6714:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    6718:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    671c:	e704      	b.n	6528 <cbvprintf+0x758>
				*buf++ = 'i';
    671e:	2369      	movs	r3, #105	; 0x69
    6720:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    6724:	236e      	movs	r3, #110	; 0x6e
    6726:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    672a:	2366      	movs	r3, #102	; 0x66
    672c:	e7ec      	b.n	6708 <cbvprintf+0x938>
			if (isupper((int)c)) {
    672e:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    6730:	bf99      	ittee	ls
    6732:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    6734:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    6736:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    6738:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    673a:	bf94      	ite	ls
    673c:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    6740:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    6744:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    6748:	e7de      	b.n	6708 <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    674a:	2000      	movs	r0, #0
    674c:	e61e      	b.n	638c <cbvprintf+0x5bc>
				expo--;
    674e:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    6750:	1849      	adds	r1, r1, r1
    6752:	415b      	adcs	r3, r3
    6754:	2b00      	cmp	r3, #0
    6756:	dafa      	bge.n	674e <cbvprintf+0x97e>
    6758:	e9cd 1308 	strd	r1, r3, [sp, #32]
    675c:	e62a      	b.n	63b4 <cbvprintf+0x5e4>
			fract >>= 1;
    675e:	0840      	lsrs	r0, r0, #1
    6760:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    6764:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    6766:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    676a:	46ac      	mov	ip, r5
			expo++;
    676c:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    6770:	d2f5      	bcs.n	675e <cbvprintf+0x98e>
		fract *= 5U;
    6772:	fb0e f501 	mul.w	r5, lr, r1
    6776:	fba0 010e 	umull	r0, r1, r0, lr
    677a:	4429      	add	r1, r5
		decexp--;
    677c:	3b01      	subs	r3, #1
		expo++;
    677e:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    6782:	f04f 0c01 	mov.w	ip, #1
    6786:	e621      	b.n	63cc <cbvprintf+0x5fc>
		fract += 2;
    6788:	3102      	adds	r1, #2
    678a:	f140 0000 	adc.w	r0, r0, #0
    678e:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    6792:	a808      	add	r0, sp, #32
    6794:	e9cd 2303 	strd	r2, r3, [sp, #12]
    6798:	f020 fbd0 	bl	26f3c <_ldiv5>
		decexp++;
    679c:	9b04      	ldr	r3, [sp, #16]
    679e:	9a03      	ldr	r2, [sp, #12]
    67a0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    67a4:	3d01      	subs	r5, #1
		decexp++;
    67a6:	3301      	adds	r3, #1
			fract <<= 1;
    67a8:	1849      	adds	r1, r1, r1
    67aa:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    67ac:	2800      	cmp	r0, #0
			expo--;
    67ae:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    67b2:	daf9      	bge.n	67a8 <cbvprintf+0x9d8>
    67b4:	e9cd 1008 	strd	r1, r0, [sp, #32]
    67b8:	e611      	b.n	63de <cbvprintf+0x60e>
    67ba:	2300      	movs	r3, #0
    67bc:	461d      	mov	r5, r3
    67be:	e613      	b.n	63e8 <cbvprintf+0x618>
			precision -= decexp;
    67c0:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    67c4:	2266      	movs	r2, #102	; 0x66
    67c6:	e634      	b.n	6432 <cbvprintf+0x662>
	bool prune_zero = false;
    67c8:	2100      	movs	r1, #0
    67ca:	e63c      	b.n	6446 <cbvprintf+0x676>
		decimals = precision + 1;
    67cc:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    67d0:	2d10      	cmp	r5, #16
    67d2:	bfa8      	it	ge
    67d4:	2510      	movge	r5, #16
    67d6:	2110      	movs	r1, #16
    67d8:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    67da:	2000      	movs	r0, #0
    67dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    67e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    67e4:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    67e8:	b9a5      	cbnz	r5, 6814 <cbvprintf+0xa44>
	fract += round;
    67ea:	9d08      	ldr	r5, [sp, #32]
    67ec:	1949      	adds	r1, r1, r5
    67ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
    67f0:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    67f4:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    67f8:	d21b      	bcs.n	6832 <cbvprintf+0xa62>
	fract += round;
    67fa:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    67fe:	2a66      	cmp	r2, #102	; 0x66
    6800:	f040 8099 	bne.w	6936 <cbvprintf+0xb66>
		if (decexp > 0) {
    6804:	2b00      	cmp	r3, #0
    6806:	dc23      	bgt.n	6850 <cbvprintf+0xa80>
			*buf++ = '0';
    6808:	2130      	movs	r1, #48	; 0x30
    680a:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    680e:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    6812:	e02f      	b.n	6874 <cbvprintf+0xaa4>
	*v >>= 1;
    6814:	0849      	lsrs	r1, r1, #1
    6816:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    681a:	0840      	lsrs	r0, r0, #1
    681c:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    6820:	a80a      	add	r0, sp, #40	; 0x28
    6822:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6826:	3d01      	subs	r5, #1
    6828:	f020 fb88 	bl	26f3c <_ldiv5>
    682c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    6830:	e7d8      	b.n	67e4 <cbvprintf+0xa14>
	*v >>= 1;
    6832:	0849      	lsrs	r1, r1, #1
    6834:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    6838:	a808      	add	r0, sp, #32
	*v >>= 1;
    683a:	086d      	lsrs	r5, r5, #1
    683c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6840:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    6844:	f020 fb7a 	bl	26f3c <_ldiv5>
		decexp++;
    6848:	9b05      	ldr	r3, [sp, #20]
    684a:	9a04      	ldr	r2, [sp, #16]
    684c:	3301      	adds	r3, #1
    684e:	e7d6      	b.n	67fe <cbvprintf+0xa2e>
	char *buf = bps;
    6850:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    6852:	9907      	ldr	r1, [sp, #28]
    6854:	2900      	cmp	r1, #0
    6856:	dd0b      	ble.n	6870 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    6858:	a907      	add	r1, sp, #28
    685a:	a808      	add	r0, sp, #32
    685c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6860:	f020 fb84 	bl	26f6c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    6864:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    6866:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    686a:	3b01      	subs	r3, #1
    686c:	9a04      	ldr	r2, [sp, #16]
    686e:	d1f0      	bne.n	6852 <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    6870:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    6872:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    6874:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6878:	0689      	lsls	r1, r1, #26
    687a:	d402      	bmi.n	6882 <cbvprintf+0xab2>
    687c:	f1b8 0f00 	cmp.w	r8, #0
    6880:	dd1d      	ble.n	68be <cbvprintf+0xaee>
			*buf++ = '.';
    6882:	212e      	movs	r1, #46	; 0x2e
    6884:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    6888:	b19b      	cbz	r3, 68b2 <cbvprintf+0xae2>
    688a:	f1b8 0f00 	cmp.w	r8, #0
    688e:	dd16      	ble.n	68be <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    6890:	4259      	negs	r1, r3
    6892:	4541      	cmp	r1, r8
    6894:	bfa8      	it	ge
    6896:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    6898:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    689c:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    689e:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    68a0:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    68a4:	bfd4      	ite	le
    68a6:	2100      	movle	r1, #0
    68a8:	2101      	movgt	r1, #1
    68aa:	f361 1045 	bfi	r0, r1, #5, #1
    68ae:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    68b2:	f1b8 0f00 	cmp.w	r8, #0
    68b6:	dd02      	ble.n	68be <cbvprintf+0xaee>
    68b8:	9907      	ldr	r1, [sp, #28]
    68ba:	2900      	cmp	r1, #0
    68bc:	dc56      	bgt.n	696c <cbvprintf+0xb9c>
	if (prune_zero) {
    68be:	9903      	ldr	r1, [sp, #12]
    68c0:	2900      	cmp	r1, #0
    68c2:	d163      	bne.n	698c <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    68c4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    68c8:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    68cc:	2945      	cmp	r1, #69	; 0x45
    68ce:	d121      	bne.n	6914 <cbvprintf+0xb44>
		if (decexp < 0) {
    68d0:	2b00      	cmp	r3, #0
		*buf++ = c;
    68d2:	4629      	mov	r1, r5
			decexp = -decexp;
    68d4:	bfb8      	it	lt
    68d6:	425b      	neglt	r3, r3
		*buf++ = c;
    68d8:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    68dc:	bfb4      	ite	lt
    68de:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    68e0:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    68e2:	2b63      	cmp	r3, #99	; 0x63
    68e4:	706a      	strb	r2, [r5, #1]
    68e6:	dd09      	ble.n	68fc <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    68e8:	2064      	movs	r0, #100	; 0x64
    68ea:	fbb3 f2f0 	udiv	r2, r3, r0
    68ee:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    68f2:	1ce9      	adds	r1, r5, #3
    68f4:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    68f8:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    68fc:	200a      	movs	r0, #10
    68fe:	460d      	mov	r5, r1
    6900:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    6904:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    6908:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    690c:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    690e:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    6912:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    6914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6916:	2b00      	cmp	r3, #0
    6918:	dc43      	bgt.n	69a2 <cbvprintf+0xbd2>
    691a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    691c:	2b00      	cmp	r3, #0
    691e:	bfd4      	ite	le
    6920:	2300      	movle	r3, #0
    6922:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    6924:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    6928:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    692c:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    692e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    6932:	702b      	strb	r3, [r5, #0]
	return bps;
    6934:	e5f8      	b.n	6528 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    6936:	a907      	add	r1, sp, #28
    6938:	a808      	add	r0, sp, #32
    693a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    693e:	f020 fb15 	bl	26f6c <_get_digit>
		if (*buf++ != '0') {
    6942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    6946:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    694a:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    694e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    6950:	bf18      	it	ne
    6952:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    6956:	0688      	lsls	r0, r1, #26
    6958:	d402      	bmi.n	6960 <cbvprintf+0xb90>
    695a:	f1b8 0f00 	cmp.w	r8, #0
    695e:	dd12      	ble.n	6986 <cbvprintf+0xbb6>
			*buf++ = '.';
    6960:	212e      	movs	r1, #46	; 0x2e
    6962:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    6966:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    696a:	e7a2      	b.n	68b2 <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    696c:	a907      	add	r1, sp, #28
    696e:	a808      	add	r0, sp, #32
    6970:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6974:	f020 fafa 	bl	26f6c <_get_digit>
		precision--;
    6978:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    697c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    6980:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    6984:	e795      	b.n	68b2 <cbvprintf+0xae2>
		if (*buf++ != '0') {
    6986:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    698a:	e798      	b.n	68be <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    698c:	2100      	movs	r1, #0
    698e:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    6990:	4628      	mov	r0, r5
    6992:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    6996:	2930      	cmp	r1, #48	; 0x30
    6998:	d0fa      	beq.n	6990 <cbvprintf+0xbc0>
		if (*buf != '.') {
    699a:	292e      	cmp	r1, #46	; 0x2e
    699c:	bf18      	it	ne
    699e:	4605      	movne	r5, r0
    69a0:	e792      	b.n	68c8 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    69a2:	2301      	movs	r3, #1
    69a4:	e7be      	b.n	6924 <cbvprintf+0xb54>
			bpe = bps + 5;
    69a6:	4d4b      	ldr	r5, [pc, #300]	; (6ad4 <cbvprintf+0xd04>)
		char sign = 0;
    69a8:	4607      	mov	r7, r0
			bps = "(nil)";
    69aa:	1f6a      	subs	r2, r5, #5
    69ac:	e5bd      	b.n	652a <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    69ae:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    69b0:	bf48      	it	mi
    69b2:	3301      	addmi	r3, #1
    69b4:	e5c2      	b.n	653c <cbvprintf+0x76c>
					OUTC(pad);
    69b6:	4651      	mov	r1, sl
    69b8:	4640      	mov	r0, r8
    69ba:	9203      	str	r2, [sp, #12]
    69bc:	47c8      	blx	r9
    69be:	2800      	cmp	r0, #0
    69c0:	9a03      	ldr	r2, [sp, #12]
    69c2:	f6bf addf 	bge.w	6584 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    69c6:	b01b      	add	sp, #108	; 0x6c
    69c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    69cc:	f04f 0820 	mov.w	r8, #32
    69d0:	e5d7      	b.n	6582 <cbvprintf+0x7b2>
					pad = '0';
    69d2:	f04f 0830 	mov.w	r8, #48	; 0x30
    69d6:	e5d4      	b.n	6582 <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    69d8:	4690      	mov	r8, r2
    69da:	9b03      	ldr	r3, [sp, #12]
    69dc:	4647      	mov	r7, r8
    69de:	4443      	add	r3, r8
				while (*cp != 'p') {
    69e0:	f818 0b01 	ldrb.w	r0, [r8], #1
    69e4:	2870      	cmp	r0, #112	; 0x70
    69e6:	d11e      	bne.n	6a26 <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    69e8:	461e      	mov	r6, r3
    69ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    69ec:	eb03 0806 	add.w	r8, r3, r6
    69f0:	eba8 0306 	sub.w	r3, r8, r6
    69f4:	2b00      	cmp	r3, #0
    69f6:	dc3b      	bgt.n	6a70 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    69f8:	462b      	mov	r3, r5
    69fa:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    69fc:	4651      	mov	r1, sl
    69fe:	4648      	mov	r0, r9
    6a00:	f020 fb11 	bl	27026 <outs>
    6a04:	2800      	cmp	r0, #0
    6a06:	dbde      	blt.n	69c6 <cbvprintf+0xbf6>
    6a08:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    6a0a:	4606      	mov	r6, r0
    6a0c:	4483      	add	fp, r0
		while (width > 0) {
    6a0e:	ebab 0306 	sub.w	r3, fp, r6
    6a12:	2b00      	cmp	r3, #0
    6a14:	f77f ac41 	ble.w	629a <cbvprintf+0x4ca>
			OUTC(' ');
    6a18:	4651      	mov	r1, sl
    6a1a:	2020      	movs	r0, #32
    6a1c:	47c8      	blx	r9
    6a1e:	2800      	cmp	r0, #0
    6a20:	dbd1      	blt.n	69c6 <cbvprintf+0xbf6>
    6a22:	3601      	adds	r6, #1
			--width;
    6a24:	e7f3      	b.n	6a0e <cbvprintf+0xc3e>
					OUTC(*cp++);
    6a26:	4651      	mov	r1, sl
    6a28:	47c8      	blx	r9
    6a2a:	2800      	cmp	r0, #0
    6a2c:	dad5      	bge.n	69da <cbvprintf+0xc0a>
    6a2e:	e7ca      	b.n	69c6 <cbvprintf+0xbf6>
					OUTC(*cp++);
    6a30:	4651      	mov	r1, sl
    6a32:	47c8      	blx	r9
    6a34:	2800      	cmp	r0, #0
    6a36:	f6bf adc6 	bge.w	65c6 <cbvprintf+0x7f6>
    6a3a:	e7c4      	b.n	69c6 <cbvprintf+0xbf6>
						OUTC('0');
    6a3c:	4651      	mov	r1, sl
    6a3e:	2030      	movs	r0, #48	; 0x30
    6a40:	47c8      	blx	r9
    6a42:	2800      	cmp	r0, #0
    6a44:	f6bf add1 	bge.w	65ea <cbvprintf+0x81a>
    6a48:	e7bd      	b.n	69c6 <cbvprintf+0xbf6>
						OUTC('0');
    6a4a:	4651      	mov	r1, sl
    6a4c:	2030      	movs	r0, #48	; 0x30
    6a4e:	47c8      	blx	r9
    6a50:	3f01      	subs	r7, #1
    6a52:	e5d8      	b.n	6606 <cbvprintf+0x836>
					OUTC(*cp++);
    6a54:	4651      	mov	r1, sl
    6a56:	47c8      	blx	r9
    6a58:	2800      	cmp	r0, #0
    6a5a:	dbb4      	blt.n	69c6 <cbvprintf+0xbf6>
    6a5c:	4647      	mov	r7, r8
    6a5e:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    6a62:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    6a66:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    6a6a:	2a09      	cmp	r2, #9
    6a6c:	d9f2      	bls.n	6a54 <cbvprintf+0xc84>
    6a6e:	e7bb      	b.n	69e8 <cbvprintf+0xc18>
				OUTC('0');
    6a70:	4651      	mov	r1, sl
    6a72:	2030      	movs	r0, #48	; 0x30
    6a74:	47c8      	blx	r9
    6a76:	2800      	cmp	r0, #0
    6a78:	dba5      	blt.n	69c6 <cbvprintf+0xbf6>
    6a7a:	3601      	adds	r6, #1
    6a7c:	e7b8      	b.n	69f0 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    6a7e:	06d8      	lsls	r0, r3, #27
    6a80:	d401      	bmi.n	6a86 <cbvprintf+0xcb6>
    6a82:	0719      	lsls	r1, r3, #28
    6a84:	d507      	bpl.n	6a96 <cbvprintf+0xcc6>
				OUTC('0');
    6a86:	4651      	mov	r1, sl
    6a88:	2030      	movs	r0, #48	; 0x30
    6a8a:	9203      	str	r2, [sp, #12]
    6a8c:	47c8      	blx	r9
    6a8e:	2800      	cmp	r0, #0
    6a90:	db99      	blt.n	69c6 <cbvprintf+0xbf6>
    6a92:	9a03      	ldr	r2, [sp, #12]
    6a94:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    6a96:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    6a9a:	06db      	lsls	r3, r3, #27
    6a9c:	d508      	bpl.n	6ab0 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    6a9e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    6aa2:	9203      	str	r2, [sp, #12]
    6aa4:	4651      	mov	r1, sl
    6aa6:	47c8      	blx	r9
    6aa8:	2800      	cmp	r0, #0
    6aaa:	db8c      	blt.n	69c6 <cbvprintf+0xbf6>
    6aac:	9a03      	ldr	r2, [sp, #12]
    6aae:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    6ab0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    6ab2:	4437      	add	r7, r6
    6ab4:	1bbb      	subs	r3, r7, r6
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	dc01      	bgt.n	6abe <cbvprintf+0xcee>
			OUTS(bps, bpe);
    6aba:	462b      	mov	r3, r5
    6abc:	e79e      	b.n	69fc <cbvprintf+0xc2c>
				OUTC('0');
    6abe:	4651      	mov	r1, sl
    6ac0:	2030      	movs	r0, #48	; 0x30
    6ac2:	9203      	str	r2, [sp, #12]
    6ac4:	47c8      	blx	r9
    6ac6:	2800      	cmp	r0, #0
    6ac8:	f6ff af7d 	blt.w	69c6 <cbvprintf+0xbf6>
    6acc:	9a03      	ldr	r2, [sp, #12]
    6ace:	3601      	adds	r6, #1
    6ad0:	e7f0      	b.n	6ab4 <cbvprintf+0xce4>
    6ad2:	bf00      	nop
    6ad4:	00031172 	.word	0x00031172

00006ad8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    6ad8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    6ada:	4910      	ldr	r1, [pc, #64]	; (6b1c <enable_logger+0x44>)
    6adc:	4810      	ldr	r0, [pc, #64]	; (6b20 <enable_logger+0x48>)
{
    6ade:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    6ae0:	2200      	movs	r2, #0
    6ae2:	f027 f8a3 	bl	2dc2c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6ae6:	4d0f      	ldr	r5, [pc, #60]	; (6b24 <enable_logger+0x4c>)
    6ae8:	490f      	ldr	r1, [pc, #60]	; (6b28 <enable_logger+0x50>)
    6aea:	2200      	movs	r2, #0
    6aec:	2300      	movs	r3, #0
    6aee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6af2:	2400      	movs	r4, #0
    6af4:	230e      	movs	r3, #14
    6af6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    6afa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6afe:	4b0b      	ldr	r3, [pc, #44]	; (6b2c <enable_logger+0x54>)
    6b00:	9400      	str	r4, [sp, #0]
    6b02:	f44f 7240 	mov.w	r2, #768	; 0x300
    6b06:	4628      	mov	r0, r5
    6b08:	f01e fb60 	bl	251cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    6b0c:	4908      	ldr	r1, [pc, #32]	; (6b30 <enable_logger+0x58>)
    6b0e:	4628      	mov	r0, r5
    6b10:	f01e faaa 	bl	25068 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    6b14:	4620      	mov	r0, r4
    6b16:	b009      	add	sp, #36	; 0x24
    6b18:	bd30      	pop	{r4, r5, pc}
    6b1a:	bf00      	nop
    6b1c:	00006b35 	.word	0x00006b35
    6b20:	200014f8 	.word	0x200014f8
    6b24:	20001530 	.word	0x20001530
    6b28:	20007ca0 	.word	0x20007ca0
    6b2c:	00006d89 	.word	0x00006d89
    6b30:	000314ec 	.word	0x000314ec

00006b34 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    6b34:	4801      	ldr	r0, [pc, #4]	; (6b3c <log_process_thread_timer_expiry_fn+0x8>)
    6b36:	f01e bcdd 	b.w	254f4 <z_impl_k_sem_give>
    6b3a:	bf00      	nop
    6b3c:	20000c08 	.word	0x20000c08

00006b40 <log_init>:
{
    6b40:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6b42:	4b12      	ldr	r3, [pc, #72]	; (6b8c <log_init+0x4c>)
    6b44:	f3bf 8f5b 	dmb	ish
    6b48:	e853 5f00 	ldrex	r5, [r3]
    6b4c:	1c6a      	adds	r2, r5, #1
    6b4e:	e843 2100 	strex	r1, r2, [r3]
    6b52:	2900      	cmp	r1, #0
    6b54:	d1f8      	bne.n	6b48 <log_init+0x8>
    6b56:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    6b5a:	b92d      	cbnz	r5, 6b68 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    6b5c:	4c0c      	ldr	r4, [pc, #48]	; (6b90 <log_init+0x50>)
    6b5e:	4e0d      	ldr	r6, [pc, #52]	; (6b94 <log_init+0x54>)
    6b60:	1b36      	subs	r6, r6, r4
    6b62:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    6b64:	42b5      	cmp	r5, r6
    6b66:	db00      	blt.n	6b6a <log_init+0x2a>
}
    6b68:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    6b6a:	7b23      	ldrb	r3, [r4, #12]
    6b6c:	b153      	cbz	r3, 6b84 <log_init+0x44>
			if (backend->api->init != NULL) {
    6b6e:	6823      	ldr	r3, [r4, #0]
    6b70:	699b      	ldr	r3, [r3, #24]
    6b72:	b10b      	cbz	r3, 6b78 <log_init+0x38>
				backend->api->init(backend);
    6b74:	4620      	mov	r0, r4
    6b76:	4798      	blx	r3
			log_backend_enable(backend,
    6b78:	6863      	ldr	r3, [r4, #4]
    6b7a:	2204      	movs	r2, #4
    6b7c:	6819      	ldr	r1, [r3, #0]
    6b7e:	4620      	mov	r0, r4
    6b80:	f000 fa38 	bl	6ff4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    6b84:	3501      	adds	r5, #1
    6b86:	3410      	adds	r4, #16
    6b88:	e7ec      	b.n	6b64 <log_init+0x24>
    6b8a:	bf00      	nop
    6b8c:	20002654 	.word	0x20002654
    6b90:	0002e410 	.word	0x0002e410
    6b94:	0002e420 	.word	0x0002e420

00006b98 <z_log_notify_backend_enabled>:
{
    6b98:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    6b9a:	4c04      	ldr	r4, [pc, #16]	; (6bac <z_log_notify_backend_enabled+0x14>)
    6b9c:	7823      	ldrb	r3, [r4, #0]
    6b9e:	b913      	cbnz	r3, 6ba6 <z_log_notify_backend_enabled+0xe>
    6ba0:	4803      	ldr	r0, [pc, #12]	; (6bb0 <z_log_notify_backend_enabled+0x18>)
    6ba2:	f01e fca7 	bl	254f4 <z_impl_k_sem_give>
	backend_attached = true;
    6ba6:	2301      	movs	r3, #1
    6ba8:	7023      	strb	r3, [r4, #0]
}
    6baa:	bd10      	pop	{r4, pc}
    6bac:	20004a88 	.word	0x20004a88
    6bb0:	20000c08 	.word	0x20000c08

00006bb4 <z_log_dropped>:
    6bb4:	4b0c      	ldr	r3, [pc, #48]	; (6be8 <z_log_dropped+0x34>)
    6bb6:	f3bf 8f5b 	dmb	ish
    6bba:	e853 2f00 	ldrex	r2, [r3]
    6bbe:	3201      	adds	r2, #1
    6bc0:	e843 2100 	strex	r1, r2, [r3]
    6bc4:	2900      	cmp	r1, #0
    6bc6:	d1f8      	bne.n	6bba <z_log_dropped+0x6>
    6bc8:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    6bcc:	b158      	cbz	r0, 6be6 <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6bce:	f3bf 8f5b 	dmb	ish
    6bd2:	4b06      	ldr	r3, [pc, #24]	; (6bec <z_log_dropped+0x38>)
    6bd4:	e853 2f00 	ldrex	r2, [r3]
    6bd8:	3a01      	subs	r2, #1
    6bda:	e843 2100 	strex	r1, r2, [r3]
    6bde:	2900      	cmp	r1, #0
    6be0:	d1f8      	bne.n	6bd4 <z_log_dropped+0x20>
    6be2:	f3bf 8f5b 	dmb	ish
}
    6be6:	4770      	bx	lr
    6be8:	20002650 	.word	0x20002650
    6bec:	2000264c 	.word	0x2000264c

00006bf0 <z_log_dropped_read_and_clear>:
}
    6bf0:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6bf2:	4b06      	ldr	r3, [pc, #24]	; (6c0c <z_log_dropped_read_and_clear+0x1c>)
    6bf4:	f3bf 8f5b 	dmb	ish
    6bf8:	4602      	mov	r2, r0
    6bfa:	e853 0f00 	ldrex	r0, [r3]
    6bfe:	e843 2100 	strex	r1, r2, [r3]
    6c02:	2900      	cmp	r1, #0
    6c04:	d1f9      	bne.n	6bfa <z_log_dropped_read_and_clear+0xa>
    6c06:	f3bf 8f5b 	dmb	ish
    6c0a:	4770      	bx	lr
    6c0c:	20002650 	.word	0x20002650

00006c10 <dropped_notify>:
{
    6c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    6c12:	f7ff ffed 	bl	6bf0 <z_log_dropped_read_and_clear>
    6c16:	4c0a      	ldr	r4, [pc, #40]	; (6c40 <dropped_notify+0x30>)
    6c18:	4d0a      	ldr	r5, [pc, #40]	; (6c44 <dropped_notify+0x34>)
    6c1a:	1b2d      	subs	r5, r5, r4
    6c1c:	4607      	mov	r7, r0
    6c1e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    6c20:	2600      	movs	r6, #0
    6c22:	42ae      	cmp	r6, r5
    6c24:	db00      	blt.n	6c28 <dropped_notify+0x18>
}
    6c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    6c28:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    6c2a:	795b      	ldrb	r3, [r3, #5]
    6c2c:	b12b      	cbz	r3, 6c3a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    6c2e:	6823      	ldr	r3, [r4, #0]
    6c30:	691b      	ldr	r3, [r3, #16]
    6c32:	b113      	cbz	r3, 6c3a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    6c34:	4639      	mov	r1, r7
    6c36:	4620      	mov	r0, r4
    6c38:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    6c3a:	3601      	adds	r6, #1
    6c3c:	3410      	adds	r4, #16
    6c3e:	e7f0      	b.n	6c22 <dropped_notify+0x12>
    6c40:	0002e410 	.word	0x0002e410
    6c44:	0002e420 	.word	0x0002e420

00006c48 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    6c48:	4901      	ldr	r1, [pc, #4]	; (6c50 <z_log_msg2_init+0x8>)
    6c4a:	4802      	ldr	r0, [pc, #8]	; (6c54 <z_log_msg2_init+0xc>)
    6c4c:	f020 bb79 	b.w	27342 <mpsc_pbuf_init>
    6c50:	0002ea34 	.word	0x0002ea34
    6c54:	20002658 	.word	0x20002658

00006c58 <log_core_init>:
	panic_mode = false;
    6c58:	4a09      	ldr	r2, [pc, #36]	; (6c80 <log_core_init+0x28>)
{
    6c5a:	b508      	push	{r3, lr}
	panic_mode = false;
    6c5c:	2300      	movs	r3, #0
    6c5e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    6c60:	4a08      	ldr	r2, [pc, #32]	; (6c84 <log_core_init+0x2c>)
    6c62:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    6c64:	4b08      	ldr	r3, [pc, #32]	; (6c88 <log_core_init+0x30>)
    6c66:	4a09      	ldr	r2, [pc, #36]	; (6c8c <log_core_init+0x34>)
    6c68:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    6c6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6c6e:	f000 fbd1 	bl	7414 <log_output_timestamp_freq_set>
		z_log_msg2_init();
    6c72:	f7ff ffe9 	bl	6c48 <z_log_msg2_init>
}
    6c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    6c7a:	f000 b925 	b.w	6ec8 <z_log_runtime_filters_init>
    6c7e:	bf00      	nop
    6c80:	20004a89 	.word	0x20004a89
    6c84:	20002650 	.word	0x20002650
    6c88:	200001cc 	.word	0x200001cc
    6c8c:	00027849 	.word	0x00027849

00006c90 <z_log_msg2_alloc>:
{
    6c90:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    6c92:	2200      	movs	r2, #0
    6c94:	4801      	ldr	r0, [pc, #4]	; (6c9c <z_log_msg2_alloc+0xc>)
    6c96:	2300      	movs	r3, #0
    6c98:	f020 bb72 	b.w	27380 <mpsc_pbuf_alloc>
    6c9c:	20002658 	.word	0x20002658

00006ca0 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    6ca0:	4801      	ldr	r0, [pc, #4]	; (6ca8 <z_log_msg2_claim+0x8>)
    6ca2:	f020 bc00 	b.w	274a6 <mpsc_pbuf_claim>
    6ca6:	bf00      	nop
    6ca8:	20002658 	.word	0x20002658

00006cac <z_log_msg2_free>:
{
    6cac:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    6cae:	4801      	ldr	r0, [pc, #4]	; (6cb4 <z_log_msg2_free+0x8>)
    6cb0:	f020 bc45 	b.w	2753e <mpsc_pbuf_free>
    6cb4:	20002658 	.word	0x20002658

00006cb8 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    6cb8:	4801      	ldr	r0, [pc, #4]	; (6cc0 <z_log_msg2_pending+0x8>)
    6cba:	f020 bc74 	b.w	275a6 <mpsc_pbuf_is_pending>
    6cbe:	bf00      	nop
    6cc0:	20002658 	.word	0x20002658

00006cc4 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    6cc4:	4b2a      	ldr	r3, [pc, #168]	; (6d70 <z_impl_log_process+0xac>)
    6cc6:	781b      	ldrb	r3, [r3, #0]
{
    6cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ccc:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
    6cce:	b90b      	cbnz	r3, 6cd4 <z_impl_log_process+0x10>
    6cd0:	2800      	cmp	r0, #0
    6cd2:	d04b      	beq.n	6d6c <z_impl_log_process+0xa8>
	msg = get_msg();
    6cd4:	f020 fdcc 	bl	27870 <get_msg>
	if (msg.msg) {
    6cd8:	4605      	mov	r5, r0
    6cda:	b118      	cbz	r0, 6ce4 <z_impl_log_process+0x20>
		if (!bypass) {
    6cdc:	b16e      	cbz	r6, 6cfa <z_impl_log_process+0x36>
		z_log_msg2_free(msg.msg2);
    6cde:	4628      	mov	r0, r5
    6ce0:	f7ff ffe4 	bl	6cac <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    6ce4:	b92e      	cbnz	r6, 6cf2 <z_impl_log_process+0x2e>
	return dropped_cnt > 0;
    6ce6:	4b23      	ldr	r3, [pc, #140]	; (6d74 <z_impl_log_process+0xb0>)
	if (!bypass && z_log_dropped_pending()) {
    6ce8:	681b      	ldr	r3, [r3, #0]
    6cea:	2b00      	cmp	r3, #0
    6cec:	dd01      	ble.n	6cf2 <z_impl_log_process+0x2e>
		dropped_notify();
    6cee:	f7ff ff8f 	bl	6c10 <dropped_notify>
}
    6cf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return z_log_msg2_pending();
    6cf6:	f7ff bfdf 	b.w	6cb8 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6cfa:	4b1f      	ldr	r3, [pc, #124]	; (6d78 <z_impl_log_process+0xb4>)
    6cfc:	f3bf 8f5b 	dmb	ish
    6d00:	e853 2f00 	ldrex	r2, [r3]
    6d04:	3a01      	subs	r2, #1
    6d06:	e843 2100 	strex	r1, r2, [r3]
    6d0a:	2900      	cmp	r1, #0
    6d0c:	d1f8      	bne.n	6d00 <z_impl_log_process+0x3c>
    6d0e:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    6d12:	4c1a      	ldr	r4, [pc, #104]	; (6d7c <z_impl_log_process+0xb8>)
    6d14:	4f1a      	ldr	r7, [pc, #104]	; (6d80 <z_impl_log_process+0xbc>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    6d16:	f8df a06c 	ldr.w	sl, [pc, #108]	; 6d84 <z_impl_log_process+0xc0>
    6d1a:	1b3f      	subs	r7, r7, r4
    6d1c:	113f      	asrs	r7, r7, #4
    6d1e:	46b0      	mov	r8, r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    6d20:	45b8      	cmp	r8, r7
    6d22:	dadc      	bge.n	6cde <z_impl_log_process+0x1a>
	return backend->cb->active;
    6d24:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    6d26:	795b      	ldrb	r3, [r3, #5]
    6d28:	b1cb      	cbz	r3, 6d5e <z_impl_log_process+0x9a>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    6d2a:	7829      	ldrb	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    6d2c:	074b      	lsls	r3, r1, #29
    6d2e:	d411      	bmi.n	6d54 <z_impl_log_process+0x90>
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    6d30:	f8b5 9000 	ldrh.w	r9, [r5]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    6d34:	686a      	ldr	r2, [r5, #4]
	return msg->hdr.desc.level;
    6d36:	f3c9 1982 	ubfx	r9, r9, #6, #3
	return msg->hdr.desc.domain;
    6d3a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		source_id = source ? log_dynamic_source_id(source) : -1;
    6d3e:	b192      	cbz	r2, 6d66 <z_impl_log_process+0xa2>
    6d40:	eba2 020a 	sub.w	r2, r2, sl
    6d44:	f342 028f 	sbfx	r2, r2, #2, #16
	backend_level = log_filter_get(backend, domain_id,
    6d48:	2301      	movs	r3, #1
    6d4a:	4620      	mov	r0, r4
    6d4c:	f000 f968 	bl	7020 <log_filter_get>
			if (log_backend_is_active(backend) &&
    6d50:	4548      	cmp	r0, r9
    6d52:	d304      	bcc.n	6d5e <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
    6d54:	6823      	ldr	r3, [r4, #0]
    6d56:	4629      	mov	r1, r5
    6d58:	681b      	ldr	r3, [r3, #0]
    6d5a:	4620      	mov	r0, r4
    6d5c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    6d5e:	f108 0801 	add.w	r8, r8, #1
    6d62:	3410      	adds	r4, #16
    6d64:	e7dc      	b.n	6d20 <z_impl_log_process+0x5c>
		source_id = source ? log_dynamic_source_id(source) : -1;
    6d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6d6a:	e7ed      	b.n	6d48 <z_impl_log_process+0x84>
}
    6d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d70:	20004a88 	.word	0x20004a88
    6d74:	20002650 	.word	0x20002650
    6d78:	2000264c 	.word	0x2000264c
    6d7c:	0002e410 	.word	0x0002e410
    6d80:	0002e420 	.word	0x0002e420
    6d84:	200009bc 	.word	0x200009bc

00006d88 <log_process_thread_func>:
{
    6d88:	b510      	push	{r4, lr}
	log_init();
    6d8a:	f7ff fed9 	bl	6b40 <log_init>
	return z_impl_z_current_get();
    6d8e:	f01f f8af 	bl	25ef0 <z_impl_z_current_get>
	proc_tid = process_tid;
    6d92:	4b0c      	ldr	r3, [pc, #48]	; (6dc4 <log_process_thread_func+0x3c>)
    6d94:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    6d96:	b130      	cbz	r0, 6da6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    6d98:	4b0b      	ldr	r3, [pc, #44]	; (6dc8 <log_process_thread_func+0x40>)
	    process_tid &&
    6d9a:	681b      	ldr	r3, [r3, #0]
    6d9c:	2b09      	cmp	r3, #9
    6d9e:	dd02      	ble.n	6da6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    6da0:	480a      	ldr	r0, [pc, #40]	; (6dcc <log_process_thread_func+0x44>)
    6da2:	f01e fba7 	bl	254f4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    6da6:	4c09      	ldr	r4, [pc, #36]	; (6dcc <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    6da8:	2000      	movs	r0, #0
    6daa:	f7ff ff8b 	bl	6cc4 <z_impl_log_process>
		if (log_process(false) == false) {
    6dae:	2800      	cmp	r0, #0
    6db0:	d1fa      	bne.n	6da8 <log_process_thread_func+0x20>
    6db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6dba:	4620      	mov	r0, r4
    6dbc:	f01e fbc0 	bl	25540 <z_impl_k_sem_take>
    6dc0:	e7f2      	b.n	6da8 <log_process_thread_func+0x20>
    6dc2:	bf00      	nop
    6dc4:	20002694 	.word	0x20002694
    6dc8:	2000264c 	.word	0x2000264c
    6dcc:	20000c08 	.word	0x20000c08

00006dd0 <z_log_msg_post_finalize>:
{
    6dd0:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6dd2:	4b1d      	ldr	r3, [pc, #116]	; (6e48 <z_log_msg_post_finalize+0x78>)
    6dd4:	f3bf 8f5b 	dmb	ish
    6dd8:	e853 2f00 	ldrex	r2, [r3]
    6ddc:	1c51      	adds	r1, r2, #1
    6dde:	e843 1000 	strex	r0, r1, [r3]
    6de2:	2800      	cmp	r0, #0
    6de4:	d1f8      	bne.n	6dd8 <z_log_msg_post_finalize+0x8>
    6de6:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    6dea:	4b18      	ldr	r3, [pc, #96]	; (6e4c <z_log_msg_post_finalize+0x7c>)
    6dec:	781b      	ldrb	r3, [r3, #0]
    6dee:	b183      	cbz	r3, 6e12 <z_log_msg_post_finalize+0x42>
    6df0:	f04f 0320 	mov.w	r3, #32
    6df4:	f3ef 8411 	mrs	r4, BASEPRI
    6df8:	f383 8812 	msr	BASEPRI_MAX, r3
    6dfc:	f3bf 8f6f 	isb	sy
    6e00:	2000      	movs	r0, #0
    6e02:	f7ff ff5f 	bl	6cc4 <z_impl_log_process>
	__asm__ volatile(
    6e06:	f384 8811 	msr	BASEPRI, r4
    6e0a:	f3bf 8f6f 	isb	sy
}
    6e0e:	b002      	add	sp, #8
    6e10:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    6e12:	4b0f      	ldr	r3, [pc, #60]	; (6e50 <z_log_msg_post_finalize+0x80>)
    6e14:	681b      	ldr	r3, [r3, #0]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d0f9      	beq.n	6e0e <z_log_msg_post_finalize+0x3e>
    6e1a:	b952      	cbnz	r2, 6e32 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    6e1c:	2200      	movs	r2, #0
    6e1e:	2300      	movs	r3, #0
    6e20:	e9cd 2300 	strd	r2, r3, [sp]
    6e24:	480b      	ldr	r0, [pc, #44]	; (6e54 <z_log_msg_post_finalize+0x84>)
    6e26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6e2a:	2300      	movs	r3, #0
    6e2c:	f01f fa9e 	bl	2636c <z_impl_k_timer_start>
    6e30:	e7ed      	b.n	6e0e <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    6e32:	2a0a      	cmp	r2, #10
    6e34:	d1eb      	bne.n	6e0e <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    6e36:	4807      	ldr	r0, [pc, #28]	; (6e54 <z_log_msg_post_finalize+0x84>)
    6e38:	f026 ff04 	bl	2dc44 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    6e3c:	4806      	ldr	r0, [pc, #24]	; (6e58 <z_log_msg_post_finalize+0x88>)
}
    6e3e:	b002      	add	sp, #8
    6e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e44:	f01e bb56 	b.w	254f4 <z_impl_k_sem_give>
    6e48:	2000264c 	.word	0x2000264c
    6e4c:	20004a89 	.word	0x20004a89
    6e50:	20002694 	.word	0x20002694
    6e54:	200014f8 	.word	0x200014f8
    6e58:	20000c08 	.word	0x20000c08

00006e5c <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    6e5c:	4b06      	ldr	r3, [pc, #24]	; (6e78 <z_log_msg2_commit+0x1c>)
{
    6e5e:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    6e60:	681b      	ldr	r3, [r3, #0]
{
    6e62:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    6e64:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    6e66:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    6e68:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    6e6a:	4804      	ldr	r0, [pc, #16]	; (6e7c <z_log_msg2_commit+0x20>)
    6e6c:	f020 fafe 	bl	2746c <mpsc_pbuf_commit>
}
    6e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    6e74:	f7ff bfac 	b.w	6dd0 <z_log_msg_post_finalize>
    6e78:	200001cc 	.word	0x200001cc
    6e7c:	20002658 	.word	0x20002658

00006e80 <z_impl_log_panic>:
{
    6e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    6e82:	4f0e      	ldr	r7, [pc, #56]	; (6ebc <z_impl_log_panic+0x3c>)
    6e84:	783d      	ldrb	r5, [r7, #0]
    6e86:	b975      	cbnz	r5, 6ea6 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    6e88:	4c0d      	ldr	r4, [pc, #52]	; (6ec0 <z_impl_log_panic+0x40>)
    6e8a:	4e0e      	ldr	r6, [pc, #56]	; (6ec4 <z_impl_log_panic+0x44>)
	log_init();
    6e8c:	f7ff fe58 	bl	6b40 <log_init>
    6e90:	1b36      	subs	r6, r6, r4
    6e92:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    6e94:	42b5      	cmp	r5, r6
    6e96:	db07      	blt.n	6ea8 <z_impl_log_panic+0x28>
    6e98:	2000      	movs	r0, #0
    6e9a:	f7ff ff13 	bl	6cc4 <z_impl_log_process>
		while (log_process(false) == true) {
    6e9e:	2800      	cmp	r0, #0
    6ea0:	d1fa      	bne.n	6e98 <z_impl_log_panic+0x18>
	panic_mode = true;
    6ea2:	2301      	movs	r3, #1
    6ea4:	703b      	strb	r3, [r7, #0]
}
    6ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    6ea8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    6eaa:	795b      	ldrb	r3, [r3, #5]
    6eac:	b11b      	cbz	r3, 6eb6 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    6eae:	6823      	ldr	r3, [r4, #0]
    6eb0:	4620      	mov	r0, r4
    6eb2:	695b      	ldr	r3, [r3, #20]
    6eb4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    6eb6:	3501      	adds	r5, #1
    6eb8:	3410      	adds	r4, #16
    6eba:	e7eb      	b.n	6e94 <z_impl_log_panic+0x14>
    6ebc:	20004a89 	.word	0x20004a89
    6ec0:	0002e410 	.word	0x0002e410
    6ec4:	0002e420 	.word	0x0002e420

00006ec8 <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    6ec8:	480b      	ldr	r0, [pc, #44]	; (6ef8 <z_log_runtime_filters_init+0x30>)
    6eca:	4b0c      	ldr	r3, [pc, #48]	; (6efc <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
    6ecc:	b530      	push	{r4, r5, lr}
    6ece:	1a1b      	subs	r3, r3, r0
    6ed0:	4c0b      	ldr	r4, [pc, #44]	; (6f00 <z_log_runtime_filters_init+0x38>)
    6ed2:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    6ed4:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    6ed6:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    6ed8:	4299      	cmp	r1, r3
    6eda:	d100      	bne.n	6ede <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    6edc:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    6ede:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    6ee2:	6825      	ldr	r5, [r4, #0]
    6ee4:	f002 0207 	and.w	r2, r2, #7
    6ee8:	f025 0507 	bic.w	r5, r5, #7
    6eec:	432a      	orrs	r2, r5
    6eee:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    6ef2:	3101      	adds	r1, #1
    6ef4:	e7f0      	b.n	6ed8 <z_log_runtime_filters_init+0x10>
    6ef6:	bf00      	nop
    6ef8:	0002e230 	.word	0x0002e230
    6efc:	0002e410 	.word	0x0002e410
    6f00:	200009bc 	.word	0x200009bc

00006f04 <log_source_name_get>:
    6f04:	4a04      	ldr	r2, [pc, #16]	; (6f18 <log_source_name_get+0x14>)
    6f06:	4b05      	ldr	r3, [pc, #20]	; (6f1c <log_source_name_get+0x18>)
    6f08:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    6f0a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    6f0e:	bf34      	ite	cc
    6f10:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    6f14:	2000      	movcs	r0, #0
}
    6f16:	4770      	bx	lr
    6f18:	0002e230 	.word	0x0002e230
    6f1c:	0002e410 	.word	0x0002e410

00006f20 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    6f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f24:	4689      	mov	r9, r1
    6f26:	4616      	mov	r6, r2
    6f28:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
    6f2a:	4604      	mov	r4, r0
    6f2c:	b9b8      	cbnz	r0, 6f5e <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
    6f2e:	f8df a084 	ldr.w	sl, [pc, #132]	; 6fb4 <z_impl_log_filter_set+0x94>
    6f32:	4f21      	ldr	r7, [pc, #132]	; (6fb8 <z_impl_log_filter_set+0x98>)
    6f34:	eba7 070a 	sub.w	r7, r7, sl
    6f38:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
    6f3a:	4605      	mov	r5, r0
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
    6f3c:	42bc      	cmp	r4, r7
    6f3e:	db02      	blt.n	6f46 <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
    6f40:	4628      	mov	r0, r5
    6f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    6f46:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    6f4a:	4643      	mov	r3, r8
    6f4c:	4632      	mov	r2, r6
    6f4e:	4649      	mov	r1, r9
    6f50:	f7ff ffe6 	bl	6f20 <z_impl_log_filter_set>
				max = MAX(current, max);
    6f54:	4285      	cmp	r5, r0
    6f56:	bf38      	it	cc
    6f58:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    6f5a:	3401      	adds	r4, #1
    6f5c:	e7ee      	b.n	6f3c <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
    6f5e:	4b17      	ldr	r3, [pc, #92]	; (6fbc <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    6f60:	4c17      	ldr	r4, [pc, #92]	; (6fc0 <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
    6f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
    6f66:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    6f68:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    6f6a:	791a      	ldrb	r2, [r3, #4]
    6f6c:	2307      	movs	r3, #7
    6f6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6f72:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
    6f76:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    6f78:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
    6f7c:	bf28      	it	cs
    6f7e:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    6f80:	ea23 0301 	bic.w	r3, r3, r1
    6f84:	f005 0107 	and.w	r1, r5, #7
    6f88:	fa01 f202 	lsl.w	r2, r1, r2
    6f8c:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    6f8e:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
    6f90:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    6f92:	fa23 f002 	lsr.w	r0, r3, r2
    6f96:	f000 0007 	and.w	r0, r0, #7
    6f9a:	4281      	cmp	r1, r0
    6f9c:	f102 0203 	add.w	r2, r2, #3
    6fa0:	bf38      	it	cc
    6fa2:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    6fa4:	2a1e      	cmp	r2, #30
    6fa6:	d1f4      	bne.n	6f92 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    6fa8:	f023 0307 	bic.w	r3, r3, #7
    6fac:	430b      	orrs	r3, r1
    6fae:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
    6fb2:	e7c5      	b.n	6f40 <z_impl_log_filter_set+0x20>
    6fb4:	0002e410 	.word	0x0002e410
    6fb8:	0002e420 	.word	0x0002e420
    6fbc:	0002e230 	.word	0x0002e230
    6fc0:	200009bc 	.word	0x200009bc

00006fc4 <backend_filter_set>:
{
    6fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fc6:	4c09      	ldr	r4, [pc, #36]	; (6fec <backend_filter_set+0x28>)
    6fc8:	4b09      	ldr	r3, [pc, #36]	; (6ff0 <backend_filter_set+0x2c>)
    6fca:	1ae4      	subs	r4, r4, r3
    6fcc:	4606      	mov	r6, r0
    6fce:	460f      	mov	r7, r1
    6fd0:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
    6fd2:	2500      	movs	r5, #0
    6fd4:	42a5      	cmp	r5, r4
    6fd6:	d100      	bne.n	6fda <backend_filter_set+0x16>
}
    6fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fda:	2100      	movs	r1, #0
    6fdc:	b22a      	sxth	r2, r5
    6fde:	463b      	mov	r3, r7
    6fe0:	4630      	mov	r0, r6
    6fe2:	f7ff ff9d 	bl	6f20 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
    6fe6:	3501      	adds	r5, #1
    6fe8:	e7f4      	b.n	6fd4 <backend_filter_set+0x10>
    6fea:	bf00      	nop
    6fec:	0002e410 	.word	0x0002e410
    6ff0:	0002e230 	.word	0x0002e230

00006ff4 <log_backend_enable>:
	id += backend - log_backend_get(0);
    6ff4:	4b09      	ldr	r3, [pc, #36]	; (701c <log_backend_enable+0x28>)
    6ff6:	1ac3      	subs	r3, r0, r3
{
    6ff8:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    6ffa:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    6ffc:	6846      	ldr	r6, [r0, #4]
{
    6ffe:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    7000:	3301      	adds	r3, #1
{
    7002:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    7004:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    7006:	4611      	mov	r1, r2
    7008:	f7ff ffdc 	bl	6fc4 <backend_filter_set>
	backend->cb->ctx = ctx;
    700c:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
    700e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    7010:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    7012:	715a      	strb	r2, [r3, #5]
}
    7014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    7018:	f7ff bdbe 	b.w	6b98 <z_log_notify_backend_enabled>
    701c:	0002e410 	.word	0x0002e410

00007020 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    7020:	b163      	cbz	r3, 703c <log_filter_get+0x1c>
		if (source_id < 0) {
    7022:	2a00      	cmp	r2, #0
    7024:	db0f      	blt.n	7046 <log_filter_get+0x26>
	return backend->cb->id;
    7026:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    7028:	4908      	ldr	r1, [pc, #32]	; (704c <log_filter_get+0x2c>)
    702a:	7918      	ldrb	r0, [r3, #4]
    702c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7030:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    7034:	40d8      	lsrs	r0, r3
    7036:	f000 0007 	and.w	r0, r0, #7
    703a:	4770      	bx	lr
	return __log_const_start[source_id].level;
    703c:	4b04      	ldr	r3, [pc, #16]	; (7050 <log_filter_get+0x30>)
    703e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
    7042:	7910      	ldrb	r0, [r2, #4]
    7044:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    7046:	2004      	movs	r0, #4
}
    7048:	4770      	bx	lr
    704a:	bf00      	nop
    704c:	200009bc 	.word	0x200009bc
    7050:	0002e230 	.word	0x0002e230

00007054 <log_msg_mem_get_free>:
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    7054:	4b02      	ldr	r3, [pc, #8]	; (7060 <log_msg_mem_get_free+0xc>)
    7056:	6898      	ldr	r0, [r3, #8]
    7058:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
    705a:	1ac0      	subs	r0, r0, r3
    705c:	4770      	bx	lr
    705e:	bf00      	nop
    7060:	20002698 	.word	0x20002698

00007064 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
    7064:	4b01      	ldr	r3, [pc, #4]	; (706c <log_msg_mem_get_used+0x8>)
    7066:	6998      	ldr	r0, [r3, #24]
    7068:	4770      	bx	lr
    706a:	bf00      	nop
    706c:	20002698 	.word	0x20002698

00007070 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    7070:	b40e      	push	{r1, r2, r3}
    7072:	b503      	push	{r0, r1, lr}
    7074:	ab03      	add	r3, sp, #12
    7076:	4601      	mov	r1, r0
    7078:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    707c:	4804      	ldr	r0, [pc, #16]	; (7090 <print_formatted+0x20>)
	va_start(args, fmt);
    707e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    7080:	f7fe fea6 	bl	5dd0 <cbvprintf>
	va_end(args);

	return length;
}
    7084:	b002      	add	sp, #8
    7086:	f85d eb04 	ldr.w	lr, [sp], #4
    708a:	b003      	add	sp, #12
    708c:	4770      	bx	lr
    708e:	bf00      	nop
    7090:	000278bb 	.word	0x000278bb

00007094 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    7094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7098:	461d      	mov	r5, r3
    709a:	9b08      	ldr	r3, [sp, #32]
    709c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    709e:	06da      	lsls	r2, r3, #27
{
    70a0:	4604      	mov	r4, r0
    70a2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    70a4:	d405      	bmi.n	70b2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    70a6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    70a8:	bf4c      	ite	mi
    70aa:	492a      	ldrmi	r1, [pc, #168]	; (7154 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    70ac:	492a      	ldrpl	r1, [pc, #168]	; (7158 <hexdump_line_print+0xc4>)
    70ae:	f7ff ffdf 	bl	7070 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    70b2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 715c <hexdump_line_print+0xc8>
{
    70b6:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    70ba:	45a8      	cmp	r8, r5
    70bc:	db2a      	blt.n	7114 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    70be:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 7160 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    70c2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 7164 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    70c6:	f8df a094 	ldr.w	sl, [pc, #148]	; 715c <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    70ca:	2500      	movs	r5, #0
		if (i < length) {
    70cc:	42bd      	cmp	r5, r7
    70ce:	d22f      	bcs.n	7130 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    70d0:	5d72      	ldrb	r2, [r6, r5]
    70d2:	4649      	mov	r1, r9
    70d4:	4620      	mov	r0, r4
    70d6:	f7ff ffcb 	bl	7070 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    70da:	3501      	adds	r5, #1
    70dc:	2d10      	cmp	r5, #16
    70de:	d120      	bne.n	7122 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    70e0:	4921      	ldr	r1, [pc, #132]	; (7168 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    70e2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 715c <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    70e6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 716c <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    70ea:	4620      	mov	r0, r4
    70ec:	f7ff ffc0 	bl	7070 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    70f0:	2500      	movs	r5, #0
		if (i < length) {
    70f2:	42af      	cmp	r7, r5
    70f4:	d928      	bls.n	7148 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    70f6:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    70f8:	f1a2 0320 	sub.w	r3, r2, #32
    70fc:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    70fe:	bf28      	it	cs
    7100:	222e      	movcs	r2, #46	; 0x2e
    7102:	4649      	mov	r1, r9
    7104:	4620      	mov	r0, r4
    7106:	f7ff ffb3 	bl	7070 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    710a:	3501      	adds	r5, #1
    710c:	2d10      	cmp	r5, #16
    710e:	d114      	bne.n	713a <hexdump_line_print+0xa6>
		}
	}
}
    7110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    7114:	4649      	mov	r1, r9
    7116:	4620      	mov	r0, r4
    7118:	f7ff ffaa 	bl	7070 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    711c:	f108 0801 	add.w	r8, r8, #1
    7120:	e7cb      	b.n	70ba <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    7122:	076a      	lsls	r2, r5, #29
    7124:	d1d2      	bne.n	70cc <hexdump_line_print+0x38>
			print_formatted(output, " ");
    7126:	4651      	mov	r1, sl
    7128:	4620      	mov	r0, r4
    712a:	f7ff ffa1 	bl	7070 <print_formatted>
    712e:	e7cd      	b.n	70cc <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    7130:	4641      	mov	r1, r8
    7132:	4620      	mov	r0, r4
    7134:	f7ff ff9c 	bl	7070 <print_formatted>
    7138:	e7cf      	b.n	70da <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    713a:	076b      	lsls	r3, r5, #29
    713c:	d1d9      	bne.n	70f2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    713e:	4641      	mov	r1, r8
    7140:	4620      	mov	r0, r4
    7142:	f7ff ff95 	bl	7070 <print_formatted>
    7146:	e7d4      	b.n	70f2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    7148:	4641      	mov	r1, r8
    714a:	4620      	mov	r0, r4
    714c:	f7ff ff90 	bl	7070 <print_formatted>
    7150:	e7db      	b.n	710a <hexdump_line_print+0x76>
    7152:	bf00      	nop
    7154:	000316bf 	.word	0x000316bf
    7158:	00031289 	.word	0x00031289
    715c:	0003117f 	.word	0x0003117f
    7160:	0003117d 	.word	0x0003117d
    7164:	00031177 	.word	0x00031177
    7168:	00031181 	.word	0x00031181
    716c:	00031d20 	.word	0x00031d20

00007170 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    7170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7174:	b087      	sub	sp, #28
    7176:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    7178:	f001 0301 	and.w	r3, r1, #1
{
    717c:	9205      	str	r2, [sp, #20]
    717e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    7182:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    7186:	9304      	str	r3, [sp, #16]
{
    7188:	4607      	mov	r7, r0
    718a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    718c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    7190:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    7194:	f020 fb70 	bl	27878 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    7198:	4602      	mov	r2, r0
    719a:	2800      	cmp	r0, #0
    719c:	d044      	beq.n	7228 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    719e:	493a      	ldr	r1, [pc, #232]	; (7288 <prefix_print+0x118>)
    71a0:	4638      	mov	r0, r7
    71a2:	f7ff ff65 	bl	7070 <print_formatted>
    71a6:	4605      	mov	r5, r0
	}

	if (stamp) {
    71a8:	f1bb 0f00 	cmp.w	fp, #0
    71ac:	d008      	beq.n	71c0 <prefix_print+0x50>
	if (!format) {
    71ae:	f018 0f44 	tst.w	r8, #68	; 0x44
    71b2:	d13b      	bne.n	722c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    71b4:	4935      	ldr	r1, [pc, #212]	; (728c <prefix_print+0x11c>)
    71b6:	4622      	mov	r2, r4
    71b8:	4638      	mov	r0, r7
    71ba:	f7ff ff59 	bl	7070 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    71be:	4405      	add	r5, r0
	if (color) {
    71c0:	9b04      	ldr	r3, [sp, #16]
    71c2:	b153      	cbz	r3, 71da <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    71c4:	4b32      	ldr	r3, [pc, #200]	; (7290 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    71c6:	4933      	ldr	r1, [pc, #204]	; (7294 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    71c8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    71cc:	4b32      	ldr	r3, [pc, #200]	; (7298 <prefix_print+0x128>)
    71ce:	4638      	mov	r0, r7
    71d0:	2a00      	cmp	r2, #0
    71d2:	bf08      	it	eq
    71d4:	461a      	moveq	r2, r3
    71d6:	f7ff ff4b 	bl	7070 <print_formatted>
	if (level_on) {
    71da:	b13e      	cbz	r6, 71ec <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    71dc:	4b2f      	ldr	r3, [pc, #188]	; (729c <prefix_print+0x12c>)
    71de:	4930      	ldr	r1, [pc, #192]	; (72a0 <prefix_print+0x130>)
    71e0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    71e4:	4638      	mov	r0, r7
    71e6:	f7ff ff43 	bl	7070 <print_formatted>
    71ea:	4606      	mov	r6, r0
	if (source_id >= 0) {
    71ec:	f1ba 0f00 	cmp.w	sl, #0
    71f0:	db16      	blt.n	7220 <prefix_print+0xb0>
		total += print_formatted(output,
    71f2:	9b05      	ldr	r3, [sp, #20]
    71f4:	2b00      	cmp	r3, #0
    71f6:	d045      	beq.n	7284 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    71f8:	2301      	movs	r3, #1
    71fa:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    71fe:	4b29      	ldr	r3, [pc, #164]	; (72a4 <prefix_print+0x134>)
    7200:	4c29      	ldr	r4, [pc, #164]	; (72a8 <prefix_print+0x138>)
    7202:	f019 0f10 	tst.w	r9, #16
    7206:	bf18      	it	ne
    7208:	461c      	movne	r4, r3
    720a:	4651      	mov	r1, sl
    720c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    7210:	f7ff fe78 	bl	6f04 <log_source_name_get>
    7214:	4621      	mov	r1, r4
    7216:	4602      	mov	r2, r0
    7218:	4638      	mov	r0, r7
    721a:	f7ff ff29 	bl	7070 <print_formatted>
    721e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    7220:	1970      	adds	r0, r6, r5
    7222:	b007      	add	sp, #28
    7224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    7228:	4605      	mov	r5, r0
    722a:	e7bd      	b.n	71a8 <prefix_print+0x38>
	} else if (freq != 0U) {
    722c:	4b1f      	ldr	r3, [pc, #124]	; (72ac <prefix_print+0x13c>)
    722e:	6818      	ldr	r0, [r3, #0]
    7230:	2800      	cmp	r0, #0
    7232:	d0c4      	beq.n	71be <prefix_print+0x4e>
		timestamp /= timestamp_div;
    7234:	4b1e      	ldr	r3, [pc, #120]	; (72b0 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    7236:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    723a:	681b      	ldr	r3, [r3, #0]
    723c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    7240:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    7244:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    7248:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    724c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    7250:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    7254:	fbb3 f2f1 	udiv	r2, r3, r1
    7258:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    725c:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    7260:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    7264:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    7268:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    726c:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    7270:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    7272:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    7276:	490f      	ldr	r1, [pc, #60]	; (72b4 <prefix_print+0x144>)
    7278:	e9cd e001 	strd	lr, r0, [sp, #4]
    727c:	4638      	mov	r0, r7
    727e:	f7ff fef7 	bl	7070 <print_formatted>
    7282:	e79c      	b.n	71be <prefix_print+0x4e>
		total += print_formatted(output,
    7284:	4c08      	ldr	r4, [pc, #32]	; (72a8 <prefix_print+0x138>)
    7286:	e7c0      	b.n	720a <prefix_print+0x9a>
    7288:	00031191 	.word	0x00031191
    728c:	00031195 	.word	0x00031195
    7290:	0002ea48 	.word	0x0002ea48
    7294:	000317de 	.word	0x000317de
    7298:	00031183 	.word	0x00031183
    729c:	0002ea5c 	.word	0x0002ea5c
    72a0:	000311ba 	.word	0x000311ba
    72a4:	0003118d 	.word	0x0003118d
    72a8:	00031188 	.word	0x00031188
    72ac:	200026b4 	.word	0x200026b4
    72b0:	200026b8 	.word	0x200026b8
    72b4:	0003119e 	.word	0x0003119e

000072b8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    72b8:	b538      	push	{r3, r4, r5, lr}
    72ba:	460c      	mov	r4, r1
	if (color) {
    72bc:	07e1      	lsls	r1, r4, #31
{
    72be:	4605      	mov	r5, r0
	if (color) {
    72c0:	d503      	bpl.n	72ca <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    72c2:	4a08      	ldr	r2, [pc, #32]	; (72e4 <postfix_print+0x2c>)
    72c4:	4908      	ldr	r1, [pc, #32]	; (72e8 <postfix_print+0x30>)
    72c6:	f7ff fed3 	bl	7070 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    72ca:	06e2      	lsls	r2, r4, #27
    72cc:	d408      	bmi.n	72e0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    72ce:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    72d0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    72d2:	bf4c      	ite	mi
    72d4:	4905      	ldrmi	r1, [pc, #20]	; (72ec <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    72d6:	4906      	ldrpl	r1, [pc, #24]	; (72f0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    72d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    72dc:	f7ff bec8 	b.w	7070 <print_formatted>
}
    72e0:	bd38      	pop	{r3, r4, r5, pc}
    72e2:	bf00      	nop
    72e4:	00031183 	.word	0x00031183
    72e8:	000317de 	.word	0x000317de
    72ec:	000316bf 	.word	0x000316bf
    72f0:	00031289 	.word	0x00031289

000072f4 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    72f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.desc.level;
    72f8:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    72fa:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    72fe:	4606      	mov	r6, r0
    7300:	460c      	mov	r4, r1
    7302:	4690      	mov	r8, r2
    7304:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    7308:	d04d      	beq.n	73a6 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    730a:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    730c:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    730e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    7312:	2b00      	cmp	r3, #0
    7314:	d044      	beq.n	73a0 <log_output_msg2_process+0xac>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    7316:	4925      	ldr	r1, [pc, #148]	; (73ac <log_output_msg2_process+0xb8>)
    7318:	1a5b      	subs	r3, r3, r1
    731a:	f343 038f 	sbfx	r3, r3, #2, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    731e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    7322:	f8cd 9000 	str.w	r9, [sp]
    7326:	68a3      	ldr	r3, [r4, #8]
    7328:	2200      	movs	r2, #0
    732a:	4641      	mov	r1, r8
    732c:	4630      	mov	r0, r6
    732e:	f7ff ff1f 	bl	7170 <prefix_print>
    7332:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    7334:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    7336:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    733a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    733e:	b153      	cbz	r3, 7356 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    7340:	4f1b      	ldr	r7, [pc, #108]	; (73b0 <log_output_msg2_process+0xbc>)
    7342:	481c      	ldr	r0, [pc, #112]	; (73b4 <log_output_msg2_process+0xc0>)
    7344:	491c      	ldr	r1, [pc, #112]	; (73b8 <log_output_msg2_process+0xc4>)
    7346:	462b      	mov	r3, r5
    7348:	4632      	mov	r2, r6
    734a:	f1b9 0f00 	cmp.w	r9, #0
    734e:	bf08      	it	eq
    7350:	4638      	moveq	r0, r7
    7352:	f01f fa98 	bl	26886 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    7356:	8867      	ldrh	r7, [r4, #2]
    7358:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    735c:	b197      	cbz	r7, 7384 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    735e:	6823      	ldr	r3, [r4, #0]
    7360:	f3c3 2349 	ubfx	r3, r3, #9, #10
    7364:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    7366:	2f10      	cmp	r7, #16
    7368:	463c      	mov	r4, r7
    736a:	bf28      	it	cs
    736c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    736e:	4629      	mov	r1, r5
    7370:	f8cd 8000 	str.w	r8, [sp]
    7374:	4653      	mov	r3, sl
    7376:	4622      	mov	r2, r4
    7378:	4630      	mov	r0, r6
    737a:	f7ff fe8b 	bl	7094 <hexdump_line_print>
	} while (len);
    737e:	1b3f      	subs	r7, r7, r4
		data += length;
    7380:	4425      	add	r5, r4
	} while (len);
    7382:	d1f0      	bne.n	7366 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    7384:	f1b9 0f00 	cmp.w	r9, #0
    7388:	d004      	beq.n	7394 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    738a:	464a      	mov	r2, r9
    738c:	4641      	mov	r1, r8
    738e:	4630      	mov	r0, r6
    7390:	f7ff ff92 	bl	72b8 <postfix_print>
	}

	log_output_flush(output);
    7394:	4630      	mov	r0, r6
}
    7396:	b004      	add	sp, #16
    7398:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    739c:	f020 ba80 	b.w	278a0 <log_output_flush>
		int16_t source_id = source ?
    73a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    73a4:	e7bb      	b.n	731e <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    73a6:	46ca      	mov	sl, r9
    73a8:	e7c4      	b.n	7334 <log_output_msg2_process+0x40>
    73aa:	bf00      	nop
    73ac:	200009bc 	.word	0x200009bc
    73b0:	000278f1 	.word	0x000278f1
    73b4:	000278bb 	.word	0x000278bb
    73b8:	00005dd1 	.word	0x00005dd1

000073bc <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    73bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    73be:	f242 730f 	movw	r3, #9999	; 0x270f
    73c2:	428b      	cmp	r3, r1
    73c4:	bf28      	it	cs
    73c6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    73c8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    73ca:	4a0f      	ldr	r2, [pc, #60]	; (7408 <log_output_dropped_process+0x4c>)
{
    73cc:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    73ce:	2105      	movs	r1, #5
    73d0:	4668      	mov	r0, sp
    73d2:	f01f fad0 	bl	26976 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    73d6:	6863      	ldr	r3, [r4, #4]
    73d8:	490c      	ldr	r1, [pc, #48]	; (740c <log_output_dropped_process+0x50>)
    73da:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    73dc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    73de:	2204      	movs	r2, #4
    73e0:	4628      	mov	r0, r5
    73e2:	f020 fa50 	bl	27886 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    73e6:	6863      	ldr	r3, [r4, #4]
    73e8:	4632      	mov	r2, r6
    73ea:	4669      	mov	r1, sp
    73ec:	4628      	mov	r0, r5
    73ee:	685b      	ldr	r3, [r3, #4]
    73f0:	f020 fa49 	bl	27886 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    73f4:	6863      	ldr	r3, [r4, #4]
    73f6:	4906      	ldr	r1, [pc, #24]	; (7410 <log_output_dropped_process+0x54>)
    73f8:	685b      	ldr	r3, [r3, #4]
    73fa:	2217      	movs	r2, #23
    73fc:	4628      	mov	r0, r5
    73fe:	f020 fa42 	bl	27886 <buffer_write>
		     output->control_block->ctx);
}
    7402:	b002      	add	sp, #8
    7404:	bd70      	pop	{r4, r5, r6, pc}
    7406:	bf00      	nop
    7408:	00034491 	.word	0x00034491
    740c:	000311f8 	.word	0x000311f8
    7410:	000311e0 	.word	0x000311e0

00007414 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    7414:	4a08      	ldr	r2, [pc, #32]	; (7438 <log_output_timestamp_freq_set+0x24>)
{
    7416:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    7418:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    741a:	4c08      	ldr	r4, [pc, #32]	; (743c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    741c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    741e:	2100      	movs	r1, #0
    7420:	42a0      	cmp	r0, r4
    7422:	d804      	bhi.n	742e <log_output_timestamp_freq_set+0x1a>
    7424:	b101      	cbz	r1, 7428 <log_output_timestamp_freq_set+0x14>
    7426:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    7428:	4b05      	ldr	r3, [pc, #20]	; (7440 <log_output_timestamp_freq_set+0x2c>)
    742a:	6018      	str	r0, [r3, #0]
}
    742c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    742e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    7430:	005b      	lsls	r3, r3, #1
    7432:	2101      	movs	r1, #1
    7434:	e7f4      	b.n	7420 <log_output_timestamp_freq_set+0xc>
    7436:	bf00      	nop
    7438:	200026b8 	.word	0x200026b8
    743c:	000f4240 	.word	0x000f4240
    7440:	200026b4 	.word	0x200026b4

00007444 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    7444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7448:	b085      	sub	sp, #20
    744a:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    744e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    7452:	4605      	mov	r5, r0
    7454:	4688      	mov	r8, r1
    7456:	4614      	mov	r4, r2
    7458:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    745a:	f1bb 0f00 	cmp.w	fp, #0
    745e:	d037      	beq.n	74d0 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    7460:	2200      	movs	r2, #0
    7462:	f8cd a000 	str.w	sl, [sp]
    7466:	465b      	mov	r3, fp
    7468:	210c      	movs	r1, #12
    746a:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    746c:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    7470:	f7fe f9b0 	bl	57d4 <cbvprintf_package>
    7474:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    7476:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    747a:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    747e:	f005 0407 	and.w	r4, r5, #7
    7482:	4d14      	ldr	r5, [pc, #80]	; (74d4 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    7484:	4b14      	ldr	r3, [pc, #80]	; (74d8 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    7486:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7488:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    748a:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    748e:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7492:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    7496:	432c      	orrs	r4, r5
    7498:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    749c:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    749e:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    74a0:	f7ff fbf6 	bl	6c90 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    74a4:	4605      	mov	r5, r0
    74a6:	b150      	cbz	r0, 74be <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    74a8:	f1bb 0f00 	cmp.w	fp, #0
    74ac:	d007      	beq.n	74be <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    74ae:	f8cd a000 	str.w	sl, [sp]
    74b2:	465b      	mov	r3, fp
    74b4:	2200      	movs	r2, #0
    74b6:	4639      	mov	r1, r7
    74b8:	300c      	adds	r0, #12
    74ba:	f7fe f98b 	bl	57d4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    74be:	464b      	mov	r3, r9
    74c0:	4622      	mov	r2, r4
    74c2:	4641      	mov	r1, r8
    74c4:	4628      	mov	r0, r5
}
    74c6:	b005      	add	sp, #20
    74c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    74cc:	f020 ba1d 	b.w	2790a <z_log_msg2_finalize>
		plen = 0;
    74d0:	465f      	mov	r7, fp
    74d2:	e7d0      	b.n	7476 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    74d4:	0007fe00 	.word	0x0007fe00
    74d8:	7ff80000 	.word	0x7ff80000

000074dc <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    74dc:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    74de:	2804      	cmp	r0, #4
	entry->handler = NULL;
    74e0:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    74e2:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    74e4:	bf98      	it	ls
    74e6:	4b04      	ldrls	r3, [pc, #16]	; (74f8 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    74e8:	4a04      	ldr	r2, [pc, #16]	; (74fc <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    74ea:	bf98      	it	ls
    74ec:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    74f0:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    74f2:	600b      	str	r3, [r1, #0]
}
    74f4:	4770      	bx	lr
    74f6:	bf00      	nop
    74f8:	0002eab0 	.word	0x0002eab0
    74fc:	0002ea8c 	.word	0x0002ea8c

00007500 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    7500:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    7502:	4a08      	ldr	r2, [pc, #32]	; (7524 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    7504:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    7506:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    7508:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    750a:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    750c:	4b06      	ldr	r3, [pc, #24]	; (7528 <backend_name_get+0x28>)
    750e:	4a07      	ldr	r2, [pc, #28]	; (752c <backend_name_get+0x2c>)
    7510:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    7512:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    7516:	bf3e      	ittt	cc
    7518:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    751c:	689b      	ldrcc	r3, [r3, #8]
    751e:	600b      	strcc	r3, [r1, #0]
	}
}
    7520:	4770      	bx	lr
    7522:	bf00      	nop
    7524:	0002ec04 	.word	0x0002ec04
    7528:	0002e410 	.word	0x0002e410
    752c:	0002e420 	.word	0x0002e420

00007530 <cmd_log_memory_slabs>:
{
    7530:	b538      	push	{r3, r4, r5, lr}
    7532:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
    7534:	f7ff fd8e 	bl	7054 <log_msg_mem_get_free>
    7538:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
    753a:	f7ff fd93 	bl	7064 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
    753e:	4a09      	ldr	r2, [pc, #36]	; (7564 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
    7540:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
    7542:	2108      	movs	r1, #8
    7544:	4620      	mov	r0, r4
    7546:	f020 fbf6 	bl	27d36 <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
    754a:	462b      	mov	r3, r5
    754c:	4620      	mov	r0, r4
    754e:	4a06      	ldr	r2, [pc, #24]	; (7568 <cmd_log_memory_slabs+0x38>)
    7550:	2108      	movs	r1, #8
    7552:	f020 fbf0 	bl	27d36 <shell_fprintf>
		shell_print(
    7556:	4620      	mov	r0, r4
    7558:	4a04      	ldr	r2, [pc, #16]	; (756c <cmd_log_memory_slabs+0x3c>)
    755a:	2108      	movs	r1, #8
    755c:	f020 fbeb 	bl	27d36 <shell_fprintf>
}
    7560:	2000      	movs	r0, #0
    7562:	bd38      	pop	{r3, r4, r5, pc}
    7564:	000311fd 	.word	0x000311fd
    7568:	0003120e 	.word	0x0003120e
    756c:	0003121f 	.word	0x0003121f

00007570 <cmd_log_backends_list>:
{
    7570:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7574:	4b11      	ldr	r3, [pc, #68]	; (75bc <cmd_log_backends_list+0x4c>)
    7576:	4c12      	ldr	r4, [pc, #72]	; (75c0 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    7578:	f8df 8048 	ldr.w	r8, [pc, #72]	; 75c4 <cmd_log_backends_list+0x54>
    757c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 75c8 <cmd_log_backends_list+0x58>
    7580:	f8df a048 	ldr.w	sl, [pc, #72]	; 75cc <cmd_log_backends_list+0x5c>
    7584:	1b1b      	subs	r3, r3, r4
{
    7586:	4607      	mov	r7, r0
    7588:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
    758a:	2500      	movs	r5, #0
    758c:	42b5      	cmp	r5, r6
    758e:	db03      	blt.n	7598 <cmd_log_backends_list+0x28>
}
    7590:	2000      	movs	r0, #0
    7592:	b002      	add	sp, #8
    7594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    7598:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    759a:	7959      	ldrb	r1, [r3, #5]
    759c:	791b      	ldrb	r3, [r3, #4]
    759e:	2900      	cmp	r1, #0
    75a0:	bf14      	ite	ne
    75a2:	4642      	movne	r2, r8
    75a4:	464a      	moveq	r2, r9
    75a6:	e9cd 2300 	strd	r2, r3, [sp]
    75aa:	2108      	movs	r1, #8
    75ac:	68a3      	ldr	r3, [r4, #8]
    75ae:	4652      	mov	r2, sl
    75b0:	4638      	mov	r0, r7
    75b2:	f020 fbc0 	bl	27d36 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    75b6:	3501      	adds	r5, #1
    75b8:	3410      	adds	r4, #16
    75ba:	e7e7      	b.n	758c <cmd_log_backends_list+0x1c>
    75bc:	0002e420 	.word	0x0002e420
    75c0:	0002e410 	.word	0x0002e410
    75c4:	000345d7 	.word	0x000345d7
    75c8:	000322b4 	.word	0x000322b4
    75cc:	0003126b 	.word	0x0003126b

000075d0 <log_status>:
{
    75d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    75d4:	4b24      	ldr	r3, [pc, #144]	; (7668 <log_status+0x98>)
    75d6:	4c25      	ldr	r4, [pc, #148]	; (766c <log_status+0x9c>)
    75d8:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
    75da:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    75dc:	795b      	ldrb	r3, [r3, #5]
{
    75de:	b085      	sub	sp, #20
    75e0:	4605      	mov	r5, r0
    75e2:	460e      	mov	r6, r1
    75e4:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
    75e6:	b91b      	cbnz	r3, 75f0 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    75e8:	4a21      	ldr	r2, [pc, #132]	; (7670 <log_status+0xa0>)
    75ea:	2103      	movs	r1, #3
    75ec:	f020 fba3 	bl	27d36 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    75f0:	4b20      	ldr	r3, [pc, #128]	; (7674 <log_status+0xa4>)
    75f2:	4a21      	ldr	r2, [pc, #132]	; (7678 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    75f4:	f8df a084 	ldr.w	sl, [pc, #132]	; 767c <log_status+0xac>
    75f8:	f8df b084 	ldr.w	fp, [pc, #132]	; 7680 <log_status+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    75fc:	2108      	movs	r1, #8
    75fe:	4628      	mov	r0, r5
    7600:	f020 fb99 	bl	27d36 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    7604:	4a1f      	ldr	r2, [pc, #124]	; (7684 <log_status+0xb4>)
    7606:	2108      	movs	r1, #8
    7608:	4628      	mov	r0, r5
    760a:	f020 fb94 	bl	27d36 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    760e:	f04f 0800 	mov.w	r8, #0
    7612:	fa0f f788 	sxth.w	r7, r8
    7616:	42a7      	cmp	r7, r4
    7618:	f108 0801 	add.w	r8, r8, #1
    761c:	d303      	bcc.n	7626 <log_status+0x56>
}
    761e:	2000      	movs	r0, #0
    7620:	b005      	add	sp, #20
    7622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7626:	463a      	mov	r2, r7
    7628:	2301      	movs	r3, #1
    762a:	2100      	movs	r1, #0
    762c:	4630      	mov	r0, r6
    762e:	f7ff fcf7 	bl	7020 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7632:	2300      	movs	r3, #0
    7634:	463a      	mov	r2, r7
    7636:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7638:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    763a:	4630      	mov	r0, r6
    763c:	f7ff fcf0 	bl	7020 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    7640:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    7642:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    7644:	2000      	movs	r0, #0
    7646:	f7ff fc5d 	bl	6f04 <log_source_name_get>
    764a:	9a03      	ldr	r2, [sp, #12]
    764c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    7650:	9201      	str	r2, [sp, #4]
    7652:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    7656:	9200      	str	r2, [sp, #0]
    7658:	4603      	mov	r3, r0
    765a:	465a      	mov	r2, fp
    765c:	2108      	movs	r1, #8
    765e:	4628      	mov	r0, r5
    7660:	f020 fb69 	bl	27d36 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    7664:	e7d5      	b.n	7612 <log_status+0x42>
    7666:	bf00      	nop
    7668:	0002e230 	.word	0x0002e230
    766c:	0002e410 	.word	0x0002e410
    7670:	0003128c 	.word	0x0003128c
    7674:	0003129e 	.word	0x0003129e
    7678:	000312aa 	.word	0x000312aa
    767c:	0002ea9c 	.word	0x0002ea9c
    7680:	00031305 	.word	0x00031305
    7684:	000312c8 	.word	0x000312c8

00007688 <module_name_get>:
{
    7688:	b510      	push	{r4, lr}
	entry->handler = NULL;
    768a:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    768c:	4a05      	ldr	r2, [pc, #20]	; (76a4 <module_name_get+0x1c>)
	entry->handler = NULL;
    768e:	60cb      	str	r3, [r1, #12]
{
    7690:	460c      	mov	r4, r1
	entry->help  = NULL;
    7692:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    7694:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    7696:	4601      	mov	r1, r0
    7698:	4618      	mov	r0, r3
    769a:	f7ff fc33 	bl	6f04 <log_source_name_get>
    769e:	6020      	str	r0, [r4, #0]
}
    76a0:	bd10      	pop	{r4, pc}
    76a2:	bf00      	nop
    76a4:	0002ea8c 	.word	0x0002ea8c

000076a8 <shell_backend_cmd_execute>:
{
    76a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    76ac:	f852 ac04 	ldr.w	sl, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    76b0:	4c18      	ldr	r4, [pc, #96]	; (7714 <shell_backend_cmd_execute+0x6c>)
{
    76b2:	b085      	sub	sp, #20
    76b4:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    76b6:	4650      	mov	r0, sl
{
    76b8:	4689      	mov	r9, r1
    76ba:	4690      	mov	r8, r2
    76bc:	9302      	str	r3, [sp, #8]
	size_t slen = strlen(name);
    76be:	f022 fdf7 	bl	2a2b0 <strlen>
    76c2:	4915      	ldr	r1, [pc, #84]	; (7718 <shell_backend_cmd_execute+0x70>)
    76c4:	1b09      	subs	r1, r1, r4
    76c6:	110b      	asrs	r3, r1, #4
    76c8:	4602      	mov	r2, r0
    76ca:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    76cc:	2700      	movs	r7, #0
    76ce:	46a3      	mov	fp, r4
    76d0:	9b01      	ldr	r3, [sp, #4]
    76d2:	429f      	cmp	r7, r3
    76d4:	db08      	blt.n	76e8 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    76d6:	4a11      	ldr	r2, [pc, #68]	; (771c <shell_backend_cmd_execute+0x74>)
    76d8:	4653      	mov	r3, sl
    76da:	2101      	movs	r1, #1
    76dc:	4630      	mov	r0, r6
    76de:	f020 fb2a 	bl	27d36 <shell_fprintf>
		return -ENOEXEC;
    76e2:	f06f 0507 	mvn.w	r5, #7
    76e6:	e00f      	b.n	7708 <shell_backend_cmd_execute+0x60>
		if (strncmp(name, backend->name, slen) == 0) {
    76e8:	68a1      	ldr	r1, [r4, #8]
    76ea:	9203      	str	r2, [sp, #12]
    76ec:	4650      	mov	r0, sl
    76ee:	f022 fdfb 	bl	2a2e8 <strncmp>
    76f2:	3410      	adds	r4, #16
    76f4:	9a03      	ldr	r2, [sp, #12]
    76f6:	4605      	mov	r5, r0
    76f8:	b950      	cbnz	r0, 7710 <shell_backend_cmd_execute+0x68>
		func(shell, backend, argc, argv);
    76fa:	9c02      	ldr	r4, [sp, #8]
    76fc:	4643      	mov	r3, r8
    76fe:	464a      	mov	r2, r9
    7700:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
    7704:	4630      	mov	r0, r6
    7706:	47a0      	blx	r4
}
    7708:	4628      	mov	r0, r5
    770a:	b005      	add	sp, #20
    770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
    7710:	3701      	adds	r7, #1
    7712:	e7dd      	b.n	76d0 <shell_backend_cmd_execute+0x28>
    7714:	0002e410 	.word	0x0002e410
    7718:	0002e420 	.word	0x0002e420
    771c:	00031319 	.word	0x00031319

00007720 <cmd_log_backend_status>:
{
    7720:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    7722:	4b02      	ldr	r3, [pc, #8]	; (772c <cmd_log_backend_status+0xc>)
    7724:	f7ff ffc0 	bl	76a8 <shell_backend_cmd_execute>
}
    7728:	2000      	movs	r0, #0
    772a:	bd08      	pop	{r3, pc}
    772c:	000075d1 	.word	0x000075d1

00007730 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    7730:	4b01      	ldr	r3, [pc, #4]	; (7738 <cmd_log_backend_halt+0x8>)
    7732:	f7ff bfb9 	b.w	76a8 <shell_backend_cmd_execute>
    7736:	bf00      	nop
    7738:	00027981 	.word	0x00027981

0000773c <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    773c:	4b01      	ldr	r3, [pc, #4]	; (7744 <cmd_log_backend_go+0x8>)
    773e:	f7ff bfb3 	b.w	76a8 <shell_backend_cmd_execute>
    7742:	bf00      	nop
    7744:	00027989 	.word	0x00027989

00007748 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    7748:	4b01      	ldr	r3, [pc, #4]	; (7750 <cmd_log_backend_enable+0x8>)
    774a:	f7ff bfad 	b.w	76a8 <shell_backend_cmd_execute>
    774e:	bf00      	nop
    7750:	00007851 	.word	0x00007851

00007754 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    7754:	4b01      	ldr	r3, [pc, #4]	; (775c <cmd_log_backend_disable+0x8>)
    7756:	f7ff bfa7 	b.w	76a8 <shell_backend_cmd_execute>
    775a:	bf00      	nop
    775c:	000279d5 	.word	0x000279d5

00007760 <shell_state_precheck>:
{
    7760:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    7762:	69c3      	ldr	r3, [r0, #28]
    7764:	68db      	ldr	r3, [r3, #12]
    7766:	791c      	ldrb	r4, [r3, #4]
    7768:	b92c      	cbnz	r4, 7776 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    776a:	4a04      	ldr	r2, [pc, #16]	; (777c <shell_state_precheck+0x1c>)
    776c:	2101      	movs	r1, #1
    776e:	f020 fae2 	bl	27d36 <shell_fprintf>
    7772:	4620      	mov	r0, r4
}
    7774:	bd10      	pop	{r4, pc}
	return true;
    7776:	2001      	movs	r0, #1
    7778:	e7fc      	b.n	7774 <shell_state_precheck+0x14>
    777a:	bf00      	nop
    777c:	0003132e 	.word	0x0003132e

00007780 <filters_set>:
{
    7780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7784:	4e2c      	ldr	r6, [pc, #176]	; (7838 <filters_set+0xb8>)
    7786:	461f      	mov	r7, r3
    7788:	4b2c      	ldr	r3, [pc, #176]	; (783c <filters_set+0xbc>)
    778a:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
    778c:	1e15      	subs	r5, r2, #0
{
    778e:	b085      	sub	sp, #20
    7790:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
    7794:	bf14      	ite	ne
    7796:	462b      	movne	r3, r5
    7798:	4633      	moveq	r3, r6
    779a:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    779c:	684b      	ldr	r3, [r1, #4]
    779e:	795b      	ldrb	r3, [r3, #5]
{
    77a0:	4680      	mov	r8, r0
    77a2:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    77a4:	b91b      	cbnz	r3, 77ae <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    77a6:	4a26      	ldr	r2, [pc, #152]	; (7840 <filters_set+0xc0>)
    77a8:	2103      	movs	r1, #3
    77aa:	f020 fac4 	bl	27d36 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    77ae:	f8df a094 	ldr.w	sl, [pc, #148]	; 7844 <filters_set+0xc4>
	for (i = 0U; i < modules_cnt; i++) {
    77b2:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    77b4:	9b02      	ldr	r3, [sp, #8]
    77b6:	429c      	cmp	r4, r3
    77b8:	db02      	blt.n	77c0 <filters_set+0x40>
}
    77ba:	b005      	add	sp, #20
    77bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    77c0:	b3bd      	cbz	r5, 7832 <filters_set+0xb2>
    77c2:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    77c6:	2300      	movs	r3, #0
    77c8:	429e      	cmp	r6, r3
    77ca:	d107      	bne.n	77dc <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    77cc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    77d0:	4a1d      	ldr	r2, [pc, #116]	; (7848 <filters_set+0xc8>)
    77d2:	2101      	movs	r1, #1
    77d4:	4640      	mov	r0, r8
    77d6:	f020 faae 	bl	27d36 <shell_fprintf>
    77da:	e023      	b.n	7824 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    77dc:	4619      	mov	r1, r3
    77de:	2000      	movs	r0, #0
    77e0:	9303      	str	r3, [sp, #12]
    77e2:	f7ff fb8f 	bl	6f04 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    77e6:	2240      	movs	r2, #64	; 0x40
    77e8:	4659      	mov	r1, fp
    77ea:	f022 fd7d 	bl	2a2e8 <strncmp>
    77ee:	9b03      	ldr	r3, [sp, #12]
    77f0:	b9d0      	cbnz	r0, 7828 <filters_set+0xa8>
			return i;
    77f2:	461a      	mov	r2, r3
    77f4:	2100      	movs	r1, #0
    77f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    77f8:	b212      	sxth	r2, r2
    77fa:	4648      	mov	r0, r9
    77fc:	f7ff fb90 	bl	6f20 <z_impl_log_filter_set>
			if (set_lvl != level) {
    7800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7802:	4283      	cmp	r3, r0
    7804:	4683      	mov	fp, r0
    7806:	d00d      	beq.n	7824 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    7808:	b985      	cbnz	r5, 782c <filters_set+0xac>
					log_source_name_get(
    780a:	4621      	mov	r1, r4
    780c:	4628      	mov	r0, r5
    780e:	f7ff fb79 	bl	6f04 <log_source_name_get>
    7812:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    7814:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    7818:	9200      	str	r2, [sp, #0]
    781a:	2103      	movs	r1, #3
    781c:	4a0b      	ldr	r2, [pc, #44]	; (784c <filters_set+0xcc>)
    781e:	4640      	mov	r0, r8
    7820:	f020 fa89 	bl	27d36 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    7824:	3401      	adds	r4, #1
    7826:	e7c5      	b.n	77b4 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    7828:	3301      	adds	r3, #1
    782a:	e7cd      	b.n	77c8 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
    782c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    7830:	e7f0      	b.n	7814 <filters_set+0x94>
    7832:	4622      	mov	r2, r4
    7834:	e7de      	b.n	77f4 <filters_set+0x74>
    7836:	bf00      	nop
    7838:	0002e410 	.word	0x0002e410
    783c:	0002e230 	.word	0x0002e230
    7840:	00031352 	.word	0x00031352
    7844:	0002ea9c 	.word	0x0002ea9c
    7848:	0003137d 	.word	0x0003137d
    784c:	00031367 	.word	0x00031367

00007850 <log_enable>:
{
    7850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    7854:	f8d3 b004 	ldr.w	fp, [r3, #4]
    7858:	f8df a04c 	ldr.w	sl, [pc, #76]	; 78a8 <log_enable+0x58>
{
    785c:	4606      	mov	r6, r0
    785e:	4688      	mov	r8, r1
    7860:	4691      	mov	r9, r2
    7862:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    7864:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    7866:	f85a 1b04 	ldr.w	r1, [sl], #4
    786a:	2204      	movs	r2, #4
    786c:	4658      	mov	r0, fp
    786e:	f022 fd3b 	bl	2a2e8 <strncmp>
    7872:	4604      	mov	r4, r0
    7874:	b170      	cbz	r0, 7894 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    7876:	3701      	adds	r7, #1
    7878:	2f05      	cmp	r7, #5
    787a:	d1f4      	bne.n	7866 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    787c:	686b      	ldr	r3, [r5, #4]
    787e:	4a0b      	ldr	r2, [pc, #44]	; (78ac <log_enable+0x5c>)
    7880:	2101      	movs	r1, #1
    7882:	4630      	mov	r0, r6
    7884:	f020 fa57 	bl	27d36 <shell_fprintf>
    7888:	f06f 0407 	mvn.w	r4, #7
}
    788c:	4620      	mov	r0, r4
    788e:	b003      	add	sp, #12
    7890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    7894:	9700      	str	r7, [sp, #0]
    7896:	f105 0308 	add.w	r3, r5, #8
    789a:	f1a9 0202 	sub.w	r2, r9, #2
    789e:	4641      	mov	r1, r8
    78a0:	4630      	mov	r0, r6
    78a2:	f7ff ff6d 	bl	7780 <filters_set>
	return 0;
    78a6:	e7f1      	b.n	788c <log_enable+0x3c>
    78a8:	0002ea9c 	.word	0x0002ea9c
    78ac:	00031397 	.word	0x00031397

000078b0 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    78b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    78b2:	2407      	movs	r4, #7
    78b4:	9402      	str	r4, [sp, #8]
    78b6:	4c04      	ldr	r4, [pc, #16]	; (78c8 <read_pnp_id+0x18>)
    78b8:	9401      	str	r4, [sp, #4]
    78ba:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    78be:	9400      	str	r4, [sp, #0]
    78c0:	f024 fa0e 	bl	2bce0 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    78c4:	b004      	add	sp, #16
    78c6:	bd10      	pop	{r4, pc}
    78c8:	20000999 	.word	0x20000999

000078cc <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    78cc:	b513      	push	{r0, r1, r4, lr}
    78ce:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    78d0:	f025 fe3c 	bl	2d54c <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    78d4:	f3c0 2307 	ubfx	r3, r0, #8, #8
    78d8:	9301      	str	r3, [sp, #4]
    78da:	f3c0 4307 	ubfx	r3, r0, #16, #8
    78de:	9300      	str	r3, [sp, #0]
    78e0:	4a04      	ldr	r2, [pc, #16]	; (78f4 <cmd_kernel_version+0x28>)
    78e2:	0e03      	lsrs	r3, r0, #24
    78e4:	2108      	movs	r1, #8
    78e6:	4620      	mov	r0, r4
    78e8:	f020 fa25 	bl	27d36 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    78ec:	2000      	movs	r0, #0
    78ee:	b002      	add	sp, #8
    78f0:	bd10      	pop	{r4, pc}
    78f2:	bf00      	nop
    78f4:	00031574 	.word	0x00031574

000078f8 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    78f8:	b510      	push	{r4, lr}
    78fa:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    78fc:	f026 f965 	bl	2dbca <z_impl_k_uptime_ticks>
    7900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7904:	fba0 2003 	umull	r2, r0, r0, r3
    7908:	fb03 0301 	mla	r3, r3, r1, r0
    790c:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    790e:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    7912:	4620      	mov	r0, r4
    7914:	4a02      	ldr	r2, [pc, #8]	; (7920 <cmd_kernel_uptime+0x28>)
    7916:	2108      	movs	r1, #8
    7918:	f020 fa0d 	bl	27d36 <shell_fprintf>
	return 0;
}
    791c:	2000      	movs	r0, #0
    791e:	bd10      	pop	{r4, pc}
    7920:	0003158d 	.word	0x0003158d

00007924 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    7924:	b510      	push	{r4, lr}
    7926:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    7928:	f01b fb9a 	bl	23060 <sys_clock_elapsed>
    792c:	4a08      	ldr	r2, [pc, #32]	; (7950 <cmd_kernel_threads+0x2c>)
    792e:	4603      	mov	r3, r0
    7930:	2108      	movs	r1, #8
    7932:	4620      	mov	r0, r4
    7934:	f020 f9ff 	bl	27d36 <shell_fprintf>
	shell_print(shell, "Threads:");
    7938:	4a06      	ldr	r2, [pc, #24]	; (7954 <cmd_kernel_threads+0x30>)
    793a:	4620      	mov	r0, r4
    793c:	2108      	movs	r1, #8
    793e:	f020 f9fa 	bl	27d36 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    7942:	4805      	ldr	r0, [pc, #20]	; (7958 <cmd_kernel_threads+0x34>)
    7944:	4621      	mov	r1, r4
    7946:	f01d fb57 	bl	24ff8 <k_thread_foreach>
	return 0;
}
    794a:	2000      	movs	r0, #0
    794c:	bd10      	pop	{r4, pc}
    794e:	bf00      	nop
    7950:	0003159c 	.word	0x0003159c
    7954:	000315bb 	.word	0x000315bb
    7958:	000079bd 	.word	0x000079bd

0000795c <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    795c:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    795e:	4601      	mov	r1, r0
{
    7960:	b087      	sub	sp, #28
    7962:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    7964:	4811      	ldr	r0, [pc, #68]	; (79ac <cmd_kernel_stacks+0x50>)
    7966:	f01d fb47 	bl	24ff8 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    796a:	4a11      	ldr	r2, [pc, #68]	; (79b0 <cmd_kernel_stacks+0x54>)
		unused = 0;
    796c:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    796e:	f812 1b01 	ldrb.w	r1, [r2], #1
    7972:	29aa      	cmp	r1, #170	; 0xaa
    7974:	d103      	bne.n	797e <cmd_kernel_stacks+0x22>
				unused++;
    7976:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    7978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    797c:	d1f7      	bne.n	796e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    797e:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    7982:	2264      	movs	r2, #100	; 0x64
    7984:	434a      	muls	r2, r1
    7986:	0ad2      	lsrs	r2, r2, #11
    7988:	9205      	str	r2, [sp, #20]
    798a:	2500      	movs	r5, #0
    798c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7990:	e9cd 1203 	strd	r1, r2, [sp, #12]
    7994:	e9cd 2301 	strd	r2, r3, [sp, #4]
    7998:	4620      	mov	r0, r4
    799a:	4b06      	ldr	r3, [pc, #24]	; (79b4 <cmd_kernel_stacks+0x58>)
    799c:	4a06      	ldr	r2, [pc, #24]	; (79b8 <cmd_kernel_stacks+0x5c>)
    799e:	9500      	str	r5, [sp, #0]
    79a0:	2108      	movs	r1, #8
    79a2:	f020 f9c8 	bl	27d36 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    79a6:	4628      	mov	r0, r5
    79a8:	b007      	add	sp, #28
    79aa:	bd30      	pop	{r4, r5, pc}
    79ac:	00007a9d 	.word	0x00007a9d
    79b0:	2000a480 	.word	0x2000a480
    79b4:	2000a460 	.word	0x2000a460
    79b8:	000315c5 	.word	0x000315c5

000079bc <shell_tdata_dump>:
{
    79bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79be:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    79c0:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    79c4:	4604      	mov	r4, r0
    79c6:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    79c8:	f025 fdae 	bl	2d528 <k_thread_name_get>
    79cc:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    79ce:	f01e fa8f 	bl	25ef0 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    79d2:	4b23      	ldr	r3, [pc, #140]	; (7a60 <shell_tdata_dump+0xa4>)
    79d4:	4a23      	ldr	r2, [pc, #140]	; (7a64 <shell_tdata_dump+0xa8>)
    79d6:	2e00      	cmp	r6, #0
    79d8:	bf08      	it	eq
    79da:	461e      	moveq	r6, r3
    79dc:	4b22      	ldr	r3, [pc, #136]	; (7a68 <shell_tdata_dump+0xac>)
    79de:	e9cd 4600 	strd	r4, r6, [sp]
    79e2:	4284      	cmp	r4, r0
    79e4:	bf18      	it	ne
    79e6:	4613      	movne	r3, r2
    79e8:	2108      	movs	r1, #8
    79ea:	4628      	mov	r0, r5
    79ec:	4a1f      	ldr	r2, [pc, #124]	; (7a6c <shell_tdata_dump+0xb0>)
    79ee:	f020 f9a2 	bl	27d36 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    79f2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    79f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    79fa:	f994 300e 	ldrsb.w	r3, [r4, #14]
    79fe:	4a1c      	ldr	r2, [pc, #112]	; (7a70 <shell_tdata_dump+0xb4>)
    7a00:	9300      	str	r3, [sp, #0]
    7a02:	2108      	movs	r1, #8
    7a04:	7b23      	ldrb	r3, [r4, #12]
    7a06:	4628      	mov	r0, r5
    7a08:	f020 f995 	bl	27d36 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    7a0c:	4620      	mov	r0, r4
    7a0e:	f01d fb3b 	bl	25088 <k_thread_state_str>
    7a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
    7a14:	9200      	str	r2, [sp, #0]
    7a16:	4603      	mov	r3, r0
    7a18:	4a16      	ldr	r2, [pc, #88]	; (7a74 <shell_tdata_dump+0xb8>)
    7a1a:	2108      	movs	r1, #8
    7a1c:	4628      	mov	r0, r5
    7a1e:	f020 f98a 	bl	27d36 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    7a22:	a905      	add	r1, sp, #20
    7a24:	4620      	mov	r0, r4
    7a26:	f025 fd83 	bl	2d530 <z_impl_k_thread_stack_space_get>
	if (ret) {
    7a2a:	4603      	mov	r3, r0
    7a2c:	b130      	cbz	r0, 7a3c <shell_tdata_dump+0x80>
		shell_print(shell,
    7a2e:	4a12      	ldr	r2, [pc, #72]	; (7a78 <shell_tdata_dump+0xbc>)
    7a30:	2108      	movs	r1, #8
    7a32:	4628      	mov	r0, r5
    7a34:	f020 f97f 	bl	27d36 <shell_fprintf>
}
    7a38:	b007      	add	sp, #28
    7a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    7a3c:	9a05      	ldr	r2, [sp, #20]
    7a3e:	2364      	movs	r3, #100	; 0x64
    7a40:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    7a42:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    7a46:	434b      	muls	r3, r1
		shell_print(shell,
    7a48:	4a0c      	ldr	r2, [pc, #48]	; (7a7c <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    7a4a:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    7a4e:	2108      	movs	r1, #8
    7a50:	e9cd 7302 	strd	r7, r3, [sp, #8]
    7a54:	4628      	mov	r0, r5
    7a56:	463b      	mov	r3, r7
    7a58:	f020 f96d 	bl	27d36 <shell_fprintf>
}
    7a5c:	e7ec      	b.n	7a38 <shell_tdata_dump+0x7c>
    7a5e:	bf00      	nop
    7a60:	0003160b 	.word	0x0003160b
    7a64:	0003117f 	.word	0x0003117f
    7a68:	00032a84 	.word	0x00032a84
    7a6c:	0003160e 	.word	0x0003160e
    7a70:	0003161a 	.word	0x0003161a
    7a74:	00031646 	.word	0x00031646
    7a78:	0003165d 	.word	0x0003165d
    7a7c:	0003168a 	.word	0x0003168a

00007a80 <cmd_kernel_cycles>:
{
    7a80:	b510      	push	{r4, lr}
    7a82:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    7a84:	f025 fb19 	bl	2d0ba <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    7a88:	4a03      	ldr	r2, [pc, #12]	; (7a98 <cmd_kernel_cycles+0x18>)
    7a8a:	4603      	mov	r3, r0
    7a8c:	2108      	movs	r1, #8
    7a8e:	4620      	mov	r0, r4
    7a90:	f020 f951 	bl	27d36 <shell_fprintf>
}
    7a94:	2000      	movs	r0, #0
    7a96:	bd10      	pop	{r4, pc}
    7a98:	000316c1 	.word	0x000316c1

00007a9c <shell_stack_dump>:
{
    7a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    7a9e:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    7aa2:	b089      	sub	sp, #36	; 0x24
    7aa4:	4604      	mov	r4, r0
    7aa6:	460d      	mov	r5, r1
    7aa8:	a907      	add	r1, sp, #28
    7aaa:	f025 fd41 	bl	2d530 <z_impl_k_thread_stack_space_get>
	if (ret) {
    7aae:	4603      	mov	r3, r0
    7ab0:	b130      	cbz	r0, 7ac0 <shell_stack_dump+0x24>
		shell_print(shell,
    7ab2:	4a10      	ldr	r2, [pc, #64]	; (7af4 <shell_stack_dump+0x58>)
    7ab4:	2108      	movs	r1, #8
    7ab6:	4628      	mov	r0, r5
    7ab8:	f020 f93d 	bl	27d36 <shell_fprintf>
}
    7abc:	b009      	add	sp, #36	; 0x24
    7abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    7ac0:	4620      	mov	r0, r4
    7ac2:	f025 fd31 	bl	2d528 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    7ac6:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    7ac8:	4a0b      	ldr	r2, [pc, #44]	; (7af8 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    7aca:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    7acc:	2800      	cmp	r0, #0
    7ace:	bf18      	it	ne
    7ad0:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    7ad2:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    7ad4:	e9cd 1702 	strd	r1, r7, [sp, #8]
    7ad8:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    7adc:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    7ade:	4a07      	ldr	r2, [pc, #28]	; (7afc <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    7ae0:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    7ae4:	2108      	movs	r1, #8
    7ae6:	e9cd 6304 	strd	r6, r3, [sp, #16]
    7aea:	4628      	mov	r0, r5
    7aec:	4623      	mov	r3, r4
    7aee:	f020 f922 	bl	27d36 <shell_fprintf>
    7af2:	e7e3      	b.n	7abc <shell_stack_dump+0x20>
    7af4:	0003165d 	.word	0x0003165d
    7af8:	0003160b 	.word	0x0003160b
    7afc:	000316d7 	.word	0x000316d7

00007b00 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    7b00:	4603      	mov	r3, r0
	const char *name = dev->name;
    7b02:	6800      	ldr	r0, [r0, #0]
{
    7b04:	b510      	push	{r4, lr}
    7b06:	460c      	mov	r4, r1
    7b08:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    7b0a:	b108      	cbz	r0, 7b10 <get_device_name+0x10>
    7b0c:	7802      	ldrb	r2, [r0, #0]
    7b0e:	b922      	cbnz	r2, 7b1a <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    7b10:	4a02      	ldr	r2, [pc, #8]	; (7b1c <get_device_name+0x1c>)
    7b12:	4620      	mov	r0, r4
    7b14:	f004 fa34 	bl	bf80 <snprintf>
		name = buf;
    7b18:	4620      	mov	r0, r4
	}

	return name;
}
    7b1a:	bd10      	pop	{r4, pc}
    7b1c:	000317ae 	.word	0x000317ae

00007b20 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    7b20:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    7b22:	680c      	ldr	r4, [r1, #0]
    7b24:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    7b28:	f7ff ffea 	bl	7b00 <get_device_name>
    7b2c:	4a03      	ldr	r2, [pc, #12]	; (7b3c <cmd_device_list_visitor+0x1c>)
    7b2e:	4603      	mov	r3, r0
    7b30:	2108      	movs	r1, #8
    7b32:	4620      	mov	r0, r4
    7b34:	f020 f8ff 	bl	27d36 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    7b38:	2000      	movs	r0, #0
    7b3a:	bd10      	pop	{r4, pc}
    7b3c:	000317b3 	.word	0x000317b3

00007b40 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    7b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b44:	b08a      	sub	sp, #40	; 0x28
    7b46:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    7b48:	a801      	add	r0, sp, #4
    7b4a:	f01d f857 	bl	24bfc <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    7b4e:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    7b50:	4a1b      	ldr	r2, [pc, #108]	; (7bc0 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    7b52:	f8df 8070 	ldr.w	r8, [pc, #112]	; 7bc4 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    7b56:	f8df 9070 	ldr.w	r9, [pc, #112]	; 7bc8 <cmd_device_list+0x88>
    7b5a:	f8df a070 	ldr.w	sl, [pc, #112]	; 7bcc <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    7b5e:	2318      	movs	r3, #24
    7b60:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    7b64:	2108      	movs	r1, #8
    7b66:	4628      	mov	r0, r5
    7b68:	f020 f8e5 	bl	27d36 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    7b6c:	9c01      	ldr	r4, [sp, #4]
    7b6e:	42b4      	cmp	r4, r6
    7b70:	d303      	bcc.n	7b7a <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    7b72:	2000      	movs	r0, #0
    7b74:	b00a      	add	sp, #40	; 0x28
    7b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    7b7a:	af05      	add	r7, sp, #20
    7b7c:	4639      	mov	r1, r7
    7b7e:	2214      	movs	r2, #20
    7b80:	4620      	mov	r0, r4
    7b82:	f7ff ffbd 	bl	7b00 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    7b86:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    7b88:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    7b8a:	2108      	movs	r1, #8
    7b8c:	4628      	mov	r0, r5
    7b8e:	f020 f8d2 	bl	27d36 <shell_fprintf>
    7b92:	4620      	mov	r0, r4
    7b94:	f025 fbf8 	bl	2d388 <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    7b98:	4a0d      	ldr	r2, [pc, #52]	; (7bd0 <cmd_device_list+0x90>)
    7b9a:	2800      	cmp	r0, #0
    7b9c:	bf14      	ite	ne
    7b9e:	464b      	movne	r3, r9
    7ba0:	4653      	moveq	r3, sl
    7ba2:	2108      	movs	r1, #8
    7ba4:	4628      	mov	r0, r5
    7ba6:	f020 f8c6 	bl	27d36 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    7baa:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    7bac:	4620      	mov	r0, r4
    7bae:	4909      	ldr	r1, [pc, #36]	; (7bd4 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    7bb0:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    7bb2:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    7bb4:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    7bb8:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    7bba:	f025 fbef 	bl	2d39c <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    7bbe:	e7d6      	b.n	7b6e <cmd_device_list+0x2e>
    7bc0:	000317d2 	.word	0x000317d2
    7bc4:	000317dc 	.word	0x000317dc
    7bc8:	000317c3 	.word	0x000317c3
    7bcc:	000317c9 	.word	0x000317c9
    7bd0:	000317e1 	.word	0x000317e1
    7bd4:	00007b21 	.word	0x00007b21

00007bd8 <device_get_config_level>:
{
    7bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    7bdc:	4b11      	ldr	r3, [pc, #68]	; (7c24 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    7bde:	f8df 9048 	ldr.w	r9, [pc, #72]	; 7c28 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    7be2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    7be6:	3101      	adds	r1, #1
{
    7be8:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    7bea:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    7bee:	4606      	mov	r6, r0
	bool devices = false;
    7bf0:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    7bf2:	45a0      	cmp	r8, r4
    7bf4:	d803      	bhi.n	7bfe <device_get_config_level+0x26>
}
    7bf6:	4638      	mov	r0, r7
    7bf8:	b007      	add	sp, #28
    7bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7bfe:	4620      	mov	r0, r4
    7c00:	f025 fbc2 	bl	2d388 <z_device_is_ready>
		if (device_is_ready(dev)) {
    7c04:	4605      	mov	r5, r0
    7c06:	b158      	cbz	r0, 7c20 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    7c08:	2214      	movs	r2, #20
    7c0a:	a901      	add	r1, sp, #4
    7c0c:	4620      	mov	r0, r4
    7c0e:	f7ff ff77 	bl	7b00 <get_device_name>
    7c12:	464a      	mov	r2, r9
    7c14:	4603      	mov	r3, r0
    7c16:	2108      	movs	r1, #8
    7c18:	4630      	mov	r0, r6
    7c1a:	f020 f88c 	bl	27d36 <shell_fprintf>
			devices = true;
    7c1e:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    7c20:	3418      	adds	r4, #24
    7c22:	e7e6      	b.n	7bf2 <device_get_config_level+0x1a>
    7c24:	0002ed48 	.word	0x0002ed48
    7c28:	000317e8 	.word	0x000317e8

00007c2c <cmd_device_levels>:
{
    7c2c:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    7c2e:	2108      	movs	r1, #8
{
    7c30:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    7c32:	4a1e      	ldr	r2, [pc, #120]	; (7cac <cmd_device_levels+0x80>)
    7c34:	f020 f87f 	bl	27d36 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    7c38:	2100      	movs	r1, #0
    7c3a:	4620      	mov	r0, r4
    7c3c:	f7ff ffcc 	bl	7bd8 <device_get_config_level>
	if (ret == false) {
    7c40:	b920      	cbnz	r0, 7c4c <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    7c42:	4a1b      	ldr	r2, [pc, #108]	; (7cb0 <cmd_device_levels+0x84>)
    7c44:	2108      	movs	r1, #8
    7c46:	4620      	mov	r0, r4
    7c48:	f020 f875 	bl	27d36 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    7c4c:	2108      	movs	r1, #8
    7c4e:	4620      	mov	r0, r4
    7c50:	4a18      	ldr	r2, [pc, #96]	; (7cb4 <cmd_device_levels+0x88>)
    7c52:	f020 f870 	bl	27d36 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    7c56:	2101      	movs	r1, #1
    7c58:	4620      	mov	r0, r4
    7c5a:	f7ff ffbd 	bl	7bd8 <device_get_config_level>
	if (ret == false) {
    7c5e:	b920      	cbnz	r0, 7c6a <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    7c60:	4a13      	ldr	r2, [pc, #76]	; (7cb0 <cmd_device_levels+0x84>)
    7c62:	2108      	movs	r1, #8
    7c64:	4620      	mov	r0, r4
    7c66:	f020 f866 	bl	27d36 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    7c6a:	2108      	movs	r1, #8
    7c6c:	4620      	mov	r0, r4
    7c6e:	4a12      	ldr	r2, [pc, #72]	; (7cb8 <cmd_device_levels+0x8c>)
    7c70:	f020 f861 	bl	27d36 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    7c74:	2102      	movs	r1, #2
    7c76:	4620      	mov	r0, r4
    7c78:	f7ff ffae 	bl	7bd8 <device_get_config_level>
	if (ret == false) {
    7c7c:	b920      	cbnz	r0, 7c88 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    7c7e:	4a0c      	ldr	r2, [pc, #48]	; (7cb0 <cmd_device_levels+0x84>)
    7c80:	2108      	movs	r1, #8
    7c82:	4620      	mov	r0, r4
    7c84:	f020 f857 	bl	27d36 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    7c88:	2108      	movs	r1, #8
    7c8a:	4620      	mov	r0, r4
    7c8c:	4a0b      	ldr	r2, [pc, #44]	; (7cbc <cmd_device_levels+0x90>)
    7c8e:	f020 f852 	bl	27d36 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    7c92:	2103      	movs	r1, #3
    7c94:	4620      	mov	r0, r4
    7c96:	f7ff ff9f 	bl	7bd8 <device_get_config_level>
	if (ret == false) {
    7c9a:	b920      	cbnz	r0, 7ca6 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    7c9c:	4a04      	ldr	r2, [pc, #16]	; (7cb0 <cmd_device_levels+0x84>)
    7c9e:	2108      	movs	r1, #8
    7ca0:	4620      	mov	r0, r4
    7ca2:	f020 f848 	bl	27d36 <shell_fprintf>
}
    7ca6:	2000      	movs	r0, #0
    7ca8:	bd10      	pop	{r4, pc}
    7caa:	bf00      	nop
    7cac:	000317ee 	.word	0x000317ee
    7cb0:	000317fd 	.word	0x000317fd
    7cb4:	00031805 	.word	0x00031805
    7cb8:	00031814 	.word	0x00031814
    7cbc:	00031822 	.word	0x00031822

00007cc0 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    7cc0:	1e8b      	subs	r3, r1, #2
    7cc2:	2b02      	cmp	r3, #2
{
    7cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cc8:	4607      	mov	r7, r0
    7cca:	4688      	mov	r8, r1
    7ccc:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    7cce:	d833      	bhi.n	7d38 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    7cd0:	6860      	ldr	r0, [r4, #4]
    7cd2:	2210      	movs	r2, #16
    7cd4:	2100      	movs	r1, #0
    7cd6:	f022 fa28 	bl	2a12a <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    7cda:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    7cde:	4606      	mov	r6, r0
	if (argc < 3) {
    7ce0:	d01e      	beq.n	7d20 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    7ce2:	68a0      	ldr	r0, [r4, #8]
    7ce4:	220a      	movs	r2, #10
    7ce6:	2100      	movs	r1, #0
    7ce8:	f022 fa1f 	bl	2a12a <strtoul>
    7cec:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    7cee:	4a21      	ldr	r2, [pc, #132]	; (7d74 <cmd_devmem+0xb4>)
    7cf0:	462b      	mov	r3, r5
    7cf2:	2108      	movs	r1, #8
    7cf4:	4638      	mov	r0, r7
    7cf6:	f020 f81e 	bl	27d36 <shell_fprintf>

	if (argc <= 3) {
    7cfa:	f1b8 0f04 	cmp.w	r8, #4
    7cfe:	d01e      	beq.n	7d3e <cmd_devmem+0x7e>
	switch (width) {
    7d00:	2d10      	cmp	r5, #16
    7d02:	d00f      	beq.n	7d24 <cmd_devmem+0x64>
    7d04:	2d20      	cmp	r5, #32
    7d06:	d010      	beq.n	7d2a <cmd_devmem+0x6a>
    7d08:	2d08      	cmp	r5, #8
    7d0a:	d110      	bne.n	7d2e <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    7d0c:	7833      	ldrb	r3, [r6, #0]
    7d0e:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    7d10:	4a19      	ldr	r2, [pc, #100]	; (7d78 <cmd_devmem+0xb8>)
    7d12:	2108      	movs	r1, #8
    7d14:	4638      	mov	r0, r7
    7d16:	f020 f80e 	bl	27d36 <shell_fprintf>
	int err = 0;
    7d1a:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    7d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    7d20:	2520      	movs	r5, #32
    7d22:	e7e4      	b.n	7cee <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    7d24:	8833      	ldrh	r3, [r6, #0]
    7d26:	b29b      	uxth	r3, r3
	if (err == 0) {
    7d28:	e7f2      	b.n	7d10 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    7d2a:	6833      	ldr	r3, [r6, #0]
    7d2c:	e7f0      	b.n	7d10 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    7d2e:	4a13      	ldr	r2, [pc, #76]	; (7d7c <cmd_devmem+0xbc>)
    7d30:	2108      	movs	r1, #8
    7d32:	4638      	mov	r0, r7
    7d34:	f01f ffff 	bl	27d36 <shell_fprintf>
		return -EINVAL;
    7d38:	f06f 0015 	mvn.w	r0, #21
    7d3c:	e7ee      	b.n	7d1c <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    7d3e:	68e0      	ldr	r0, [r4, #12]
    7d40:	2210      	movs	r2, #16
    7d42:	2100      	movs	r1, #0
    7d44:	f022 f9f1 	bl	2a12a <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    7d48:	4a0d      	ldr	r2, [pc, #52]	; (7d80 <cmd_devmem+0xc0>)
    7d4a:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    7d4c:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    7d4e:	2108      	movs	r1, #8
    7d50:	4638      	mov	r0, r7
    7d52:	f01f fff0 	bl	27d36 <shell_fprintf>
	switch (width) {
    7d56:	2d10      	cmp	r5, #16
    7d58:	d006      	beq.n	7d68 <cmd_devmem+0xa8>
    7d5a:	2d20      	cmp	r5, #32
    7d5c:	d007      	beq.n	7d6e <cmd_devmem+0xae>
    7d5e:	2d08      	cmp	r5, #8
    7d60:	d1e5      	bne.n	7d2e <cmd_devmem+0x6e>
		sys_write8(value, addr);
    7d62:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    7d64:	7034      	strb	r4, [r6, #0]
    7d66:	e7d8      	b.n	7d1a <cmd_devmem+0x5a>
		sys_write16(value, addr);
    7d68:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    7d6a:	8034      	strh	r4, [r6, #0]
    7d6c:	e7d5      	b.n	7d1a <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    7d6e:	6034      	str	r4, [r6, #0]
    7d70:	e7d3      	b.n	7d1a <cmd_devmem+0x5a>
    7d72:	bf00      	nop
    7d74:	0003187a 	.word	0x0003187a
    7d78:	000318a5 	.word	0x000318a5
    7d7c:	0003188f 	.word	0x0003188f
    7d80:	000318b6 	.word	0x000318b6

00007d84 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    7d84:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    7d86:	4e0e      	ldr	r6, [pc, #56]	; (7dc0 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    7d88:	4604      	mov	r4, r0
	if (bypass && in_use) {
    7d8a:	7833      	ldrb	r3, [r6, #0]
    7d8c:	460d      	mov	r5, r1
    7d8e:	b131      	cbz	r1, 7d9e <set_bypass.isra.0+0x1a>
    7d90:	b12b      	cbz	r3, 7d9e <set_bypass.isra.0+0x1a>
}
    7d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    7d96:	4a0b      	ldr	r2, [pc, #44]	; (7dc4 <set_bypass.isra.0+0x40>)
    7d98:	2101      	movs	r1, #1
    7d9a:	f01f bfcc 	b.w	27d36 <shell_fprintf>
	in_use = !in_use;
    7d9e:	f083 0301 	eor.w	r3, r3, #1
    7da2:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    7da4:	b133      	cbz	r3, 7db4 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    7da6:	4a08      	ldr	r2, [pc, #32]	; (7dc8 <set_bypass.isra.0+0x44>)
    7da8:	2108      	movs	r1, #8
    7daa:	4620      	mov	r0, r4
    7dac:	f01f ffc3 	bl	27d36 <shell_fprintf>
		in_use = true;
    7db0:	2301      	movs	r3, #1
    7db2:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    7db4:	4629      	mov	r1, r5
    7db6:	4620      	mov	r0, r4
}
    7db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    7dbc:	f01f bfc8 	b.w	27d50 <shell_set_bypass>
    7dc0:	20004a8c 	.word	0x20004a8c
    7dc4:	000318ca 	.word	0x000318ca
    7dc8:	00031905 	.word	0x00031905

00007dcc <bypass_cb>:
{
    7dcc:	b570      	push	{r4, r5, r6, lr}
    7dce:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    7dd0:	483c      	ldr	r0, [pc, #240]	; (7ec4 <bypass_cb+0xf8>)
    7dd2:	7803      	ldrb	r3, [r0, #0]
    7dd4:	2b18      	cmp	r3, #24
    7dd6:	d102      	bne.n	7dde <bypass_cb+0x12>
    7dd8:	780b      	ldrb	r3, [r1, #0]
    7dda:	2b11      	cmp	r3, #17
    7ddc:	d031      	beq.n	7e42 <bypass_cb+0x76>
    7dde:	3a01      	subs	r2, #1
    7de0:	460b      	mov	r3, r1
    7de2:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    7de4:	429d      	cmp	r5, r3
    7de6:	d125      	bne.n	7e34 <bypass_cb+0x68>
	tail = recv[len - 1];
    7de8:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    7dea:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    7dec:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    7dee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    7df2:	2b09      	cmp	r3, #9
    7df4:	4c34      	ldr	r4, [pc, #208]	; (7ec8 <bypass_cb+0xfc>)
    7df6:	d904      	bls.n	7e02 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    7df8:	f022 0320 	bic.w	r3, r2, #32
    7dfc:	3b41      	subs	r3, #65	; 0x41
    7dfe:	2b05      	cmp	r3, #5
    7e00:	d804      	bhi.n	7e0c <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    7e02:	6823      	ldr	r3, [r4, #0]
    7e04:	4931      	ldr	r1, [pc, #196]	; (7ecc <bypass_cb+0x100>)
    7e06:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    7e08:	3301      	adds	r3, #1
    7e0a:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    7e0c:	6823      	ldr	r3, [r4, #0]
    7e0e:	2b02      	cmp	r3, #2
    7e10:	d134      	bne.n	7e7c <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    7e12:	2210      	movs	r2, #16
    7e14:	482d      	ldr	r0, [pc, #180]	; (7ecc <bypass_cb+0x100>)
    7e16:	2100      	movs	r1, #0
    7e18:	f022 f987 	bl	2a12a <strtoul>
		*bytes = byte;
    7e1c:	4a2c      	ldr	r2, [pc, #176]	; (7ed0 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    7e1e:	6813      	ldr	r3, [r2, #0]
    7e20:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    7e24:	6013      	str	r3, [r2, #0]
		sum++;
    7e26:	4a2b      	ldr	r2, [pc, #172]	; (7ed4 <bypass_cb+0x108>)
    7e28:	6813      	ldr	r3, [r2, #0]
    7e2a:	3301      	adds	r3, #1
    7e2c:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    7e2e:	2300      	movs	r3, #0
    7e30:	6023      	str	r3, [r4, #0]
    7e32:	e023      	b.n	7e7c <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    7e34:	f813 6b01 	ldrb.w	r6, [r3], #1
    7e38:	2e18      	cmp	r6, #24
    7e3a:	d1d3      	bne.n	7de4 <bypass_cb+0x18>
    7e3c:	781e      	ldrb	r6, [r3, #0]
    7e3e:	2e11      	cmp	r6, #17
    7e40:	d1d0      	bne.n	7de4 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    7e42:	4d24      	ldr	r5, [pc, #144]	; (7ed4 <bypass_cb+0x108>)
    7e44:	4a24      	ldr	r2, [pc, #144]	; (7ed8 <bypass_cb+0x10c>)
    7e46:	682b      	ldr	r3, [r5, #0]
    7e48:	2108      	movs	r1, #8
    7e4a:	4620      	mov	r0, r4
    7e4c:	f01f ff73 	bl	27d36 <shell_fprintf>
		set_bypass(sh, NULL);
    7e50:	4620      	mov	r0, r4
    7e52:	2100      	movs	r1, #0
    7e54:	f7ff ff96 	bl	7d84 <set_bypass.isra.0>
		if (!littleendian) {
    7e58:	4b20      	ldr	r3, [pc, #128]	; (7edc <bypass_cb+0x110>)
    7e5a:	7818      	ldrb	r0, [r3, #0]
    7e5c:	b970      	cbnz	r0, 7e7c <bypass_cb+0xb0>
    7e5e:	4a20      	ldr	r2, [pc, #128]	; (7ee0 <bypass_cb+0x114>)
    7e60:	682b      	ldr	r3, [r5, #0]
    7e62:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    7e64:	2b04      	cmp	r3, #4
    7e66:	dc0a      	bgt.n	7e7e <bypass_cb+0xb2>
    7e68:	b108      	cbz	r0, 7e6e <bypass_cb+0xa2>
    7e6a:	6011      	str	r1, [r2, #0]
    7e6c:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    7e6e:	f013 0103 	ands.w	r1, r3, #3
    7e72:	d10b      	bne.n	7e8c <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    7e74:	6812      	ldr	r2, [r2, #0]
    7e76:	6813      	ldr	r3, [r2, #0]
    7e78:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    7e7a:	6013      	str	r3, [r2, #0]
}
    7e7c:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    7e7e:	6808      	ldr	r0, [r1, #0]
    7e80:	ba00      	rev	r0, r0
    7e82:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    7e86:	3b04      	subs	r3, #4
				data++;
    7e88:	2001      	movs	r0, #1
    7e8a:	e7eb      	b.n	7e64 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    7e8c:	425b      	negs	r3, r3
    7e8e:	f003 0303 	and.w	r3, r3, #3
    7e92:	bf58      	it	pl
    7e94:	4259      	negpl	r1, r3
    7e96:	2902      	cmp	r1, #2
    7e98:	d104      	bne.n	7ea4 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    7e9a:	6812      	ldr	r2, [r2, #0]
    7e9c:	8813      	ldrh	r3, [r2, #0]
    7e9e:	ba5b      	rev16	r3, r3
    7ea0:	b29b      	uxth	r3, r3
    7ea2:	e7ea      	b.n	7e7a <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    7ea4:	2903      	cmp	r1, #3
    7ea6:	d1e9      	bne.n	7e7c <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    7ea8:	6810      	ldr	r0, [r2, #0]
    7eaa:	6802      	ldr	r2, [r0, #0]
    7eac:	0411      	lsls	r1, r2, #16
    7eae:	f3c2 4307 	ubfx	r3, r2, #16, #8
    7eb2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    7eb6:	430b      	orrs	r3, r1
    7eb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    7ebc:	4313      	orrs	r3, r2
    7ebe:	6003      	str	r3, [r0, #0]
    7ec0:	e7dc      	b.n	7e7c <bypass_cb+0xb0>
    7ec2:	bf00      	nop
    7ec4:	20004a8e 	.word	0x20004a8e
    7ec8:	200026c0 	.word	0x200026c0
    7ecc:	20004a8a 	.word	0x20004a8a
    7ed0:	200026bc 	.word	0x200026bc
    7ed4:	200026c8 	.word	0x200026c8
    7ed8:	0003192f 	.word	0x0003192f
    7edc:	20004a8d 	.word	0x20004a8d
    7ee0:	200026c4 	.word	0x200026c4

00007ee4 <cmd_load>:
{
    7ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ee8:	460d      	mov	r5, r1
	chunk_element = 0;
    7eea:	492d      	ldr	r1, [pc, #180]	; (7fa0 <cmd_load+0xbc>)
	littleendian = false;
    7eec:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 7fa4 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    7ef0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 7fa8 <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    7ef4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 7fac <cmd_load+0xc8>
	littleendian = false;
    7ef8:	2300      	movs	r3, #0
	chunk_element = 0;
    7efa:	600b      	str	r3, [r1, #0]
	sum = 0;
    7efc:	492c      	ldr	r1, [pc, #176]	; (7fb0 <cmd_load+0xcc>)
	littleendian = false;
    7efe:	f888 3000 	strb.w	r3, [r8]
{
    7f02:	4606      	mov	r6, r0
	sum = 0;
    7f04:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    7f06:	4614      	mov	r4, r2
    7f08:	2d01      	cmp	r5, #1
    7f0a:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    7f0c:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    7f10:	d921      	bls.n	7f56 <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    7f12:	4618      	mov	r0, r3
    7f14:	2202      	movs	r2, #2
    7f16:	4649      	mov	r1, r9
    7f18:	9301      	str	r3, [sp, #4]
    7f1a:	f022 f9e5 	bl	2a2e8 <strncmp>
    7f1e:	9b01      	ldr	r3, [sp, #4]
    7f20:	b988      	cbnz	r0, 7f46 <cmd_load+0x62>
    7f22:	6822      	ldr	r2, [r4, #0]
    7f24:	7892      	ldrb	r2, [r2, #2]
    7f26:	3a00      	subs	r2, #0
    7f28:	bf18      	it	ne
    7f2a:	2201      	movne	r2, #1
    7f2c:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    7f30:	4920      	ldr	r1, [pc, #128]	; (7fb4 <cmd_load+0xd0>)
    7f32:	2202      	movs	r2, #2
    7f34:	4650      	mov	r0, sl
    7f36:	f022 f9d7 	bl	2a2e8 <strncmp>
    7f3a:	b930      	cbnz	r0, 7f4a <cmd_load+0x66>
			littleendian = true;
    7f3c:	2301      	movs	r3, #1
    7f3e:	f888 3000 	strb.w	r3, [r8]
		argc--;
    7f42:	3d01      	subs	r5, #1
    7f44:	e7e0      	b.n	7f08 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    7f46:	2200      	movs	r2, #0
    7f48:	e7f0      	b.n	7f2c <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    7f4a:	4649      	mov	r1, r9
    7f4c:	4650      	mov	r0, sl
    7f4e:	f022 f9bf 	bl	2a2d0 <strcmp>
    7f52:	b9b0      	cbnz	r0, 7f82 <cmd_load+0x9e>
			argv++;
    7f54:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    7f56:	2200      	movs	r2, #0
    7f58:	4611      	mov	r1, r2
    7f5a:	6878      	ldr	r0, [r7, #4]
    7f5c:	f022 f871 	bl	2a042 <strtol>
    7f60:	4b15      	ldr	r3, [pc, #84]	; (7fb8 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    7f62:	2200      	movs	r2, #0
    7f64:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    7f66:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    7f68:	6878      	ldr	r0, [r7, #4]
    7f6a:	f022 f86a 	bl	2a042 <strtol>
    7f6e:	4b13      	ldr	r3, [pc, #76]	; (7fbc <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    7f70:	4913      	ldr	r1, [pc, #76]	; (7fc0 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    7f72:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    7f74:	4630      	mov	r0, r6
    7f76:	f7ff ff05 	bl	7d84 <set_bypass.isra.0>
}
    7f7a:	2000      	movs	r0, #0
    7f7c:	b003      	add	sp, #12
    7f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    7f82:	f89a 2000 	ldrb.w	r2, [sl]
    7f86:	2a2d      	cmp	r2, #45	; 0x2d
    7f88:	d1e5      	bne.n	7f56 <cmd_load+0x72>
    7f8a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    7f8e:	2a00      	cmp	r2, #0
    7f90:	d0e1      	beq.n	7f56 <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    7f92:	4653      	mov	r3, sl
    7f94:	465a      	mov	r2, fp
    7f96:	2108      	movs	r1, #8
    7f98:	4630      	mov	r0, r6
    7f9a:	f01f fecc 	bl	27d36 <shell_fprintf>
    7f9e:	e7d0      	b.n	7f42 <cmd_load+0x5e>
    7fa0:	200026c0 	.word	0x200026c0
    7fa4:	20004a8d 	.word	0x20004a8d
    7fa8:	00031949 	.word	0x00031949
    7fac:	0003194f 	.word	0x0003194f
    7fb0:	200026c8 	.word	0x200026c8
    7fb4:	0003194c 	.word	0x0003194c
    7fb8:	200026bc 	.word	0x200026bc
    7fbc:	200026c4 	.word	0x200026c4
    7fc0:	00007dcd 	.word	0x00007dcd

00007fc4 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    7fc4:	b507      	push	{r0, r1, r2, lr}
    7fc6:	480a      	ldr	r0, [pc, #40]	; (7ff0 <enable_shell_uart+0x2c>)
    7fc8:	f025 f9de 	bl	2d388 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    7fcc:	b160      	cbz	r0, 7fe8 <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    7fce:	4a09      	ldr	r2, [pc, #36]	; (7ff4 <enable_shell_uart+0x30>)
    7fd0:	4907      	ldr	r1, [pc, #28]	; (7ff0 <enable_shell_uart+0x2c>)
    7fd2:	6812      	ldr	r2, [r2, #0]
    7fd4:	4808      	ldr	r0, [pc, #32]	; (7ff8 <enable_shell_uart+0x34>)
    7fd6:	2304      	movs	r3, #4
    7fd8:	9300      	str	r3, [sp, #0]
    7fda:	2301      	movs	r3, #1
    7fdc:	f000 fe0a 	bl	8bf4 <shell_init>

	return 0;
    7fe0:	2000      	movs	r0, #0
}
    7fe2:	b003      	add	sp, #12
    7fe4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    7fe8:	f06f 0012 	mvn.w	r0, #18
    7fec:	e7f9      	b.n	7fe2 <enable_shell_uart+0x1e>
    7fee:	bf00      	nop
    7ff0:	0002e03c 	.word	0x0002e03c
    7ff4:	0002ede4 	.word	0x0002ede4
    7ff8:	0002e420 	.word	0x0002e420

00007ffc <init>:
{
    7ffc:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    7ffe:	6846      	ldr	r6, [r0, #4]
{
    8000:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    8002:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    8004:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    8006:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    8008:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    800a:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    800e:	2208      	movs	r2, #8
	buf->tail = 0;
    8010:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    8014:	4629      	mov	r1, r5
    8016:	4410      	add	r0, r2
    8018:	f022 f9ab 	bl	2a372 <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    801c:	68f0      	ldr	r0, [r6, #12]
    801e:	2208      	movs	r2, #8
	buf->tail = 0;
    8020:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    8024:	4629      	mov	r1, r5
    8026:	4410      	add	r0, r2
    8028:	f022 f9a3 	bl	2a372 <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    802c:	6833      	ldr	r3, [r6, #0]
    802e:	60dd      	str	r5, [r3, #12]
	const struct uart_driver_api *api =
    8030:	68a3      	ldr	r3, [r4, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    8032:	b12b      	cbz	r3, 8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
    8034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8036:	b11b      	cbz	r3, 8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
		api->irq_callback_set(dev, cb, user_data);
    8038:	4905      	ldr	r1, [pc, #20]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    803a:	4632      	mov	r2, r6
    803c:	4620      	mov	r0, r4
    803e:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    8040:	68a3      	ldr	r3, [r4, #8]
    8042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8044:	b10b      	cbz	r3, 804a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a>
		api->irq_rx_enable(dev);
    8046:	4620      	mov	r0, r4
    8048:	4798      	blx	r3
}
    804a:	2000      	movs	r0, #0
    804c:	bd70      	pop	{r4, r5, r6, pc}
    804e:	bf00      	nop
    8050:	00008055 	.word	0x00008055

00008054 <uart_callback>:
{
    8054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8058:	4604      	mov	r4, r0
    805a:	b088      	sub	sp, #32
    805c:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
    805e:	6883      	ldr	r3, [r0, #8]
    8060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8062:	b103      	cbz	r3, 8066 <uart_callback+0x12>
	return api->irq_update(dev);
    8064:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    8066:	68a3      	ldr	r3, [r4, #8]
    8068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    806a:	bb4b      	cbnz	r3, 80c0 <uart_callback+0x6c>
			LOG_WRN("RX ring buffer full.");
    806c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 818c <uart_callback+0x138>
    8070:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8190 <uart_callback+0x13c>
{
    8074:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    8078:	68f0      	ldr	r0, [r6, #12]
    807a:	4669      	mov	r1, sp
    807c:	6902      	ldr	r2, [r0, #16]
    807e:	f01e fffc 	bl	2707a <ring_buf_put_claim>
		if (len > 0) {
    8082:	4607      	mov	r7, r0
    8084:	2800      	cmp	r0, #0
    8086:	d043      	beq.n	8110 <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
    8088:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    808a:	9900      	ldr	r1, [sp, #0]
    808c:	699b      	ldr	r3, [r3, #24]
    808e:	2b00      	cmp	r3, #0
    8090:	d03b      	beq.n	810a <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
    8092:	4602      	mov	r2, r0
    8094:	4620      	mov	r0, r4
    8096:	4798      	blx	r3
				new_data = true;
    8098:	1e05      	subs	r5, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    809a:	4629      	mov	r1, r5
    809c:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
    809e:	bf18      	it	ne
    80a0:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    80a4:	f01f f816 	bl	270d4 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    80a8:	b10d      	cbz	r5, 80ae <uart_callback+0x5a>
    80aa:	42af      	cmp	r7, r5
    80ac:	d0e4      	beq.n	8078 <uart_callback+0x24>
	if (new_data) {
    80ae:	f1b8 0f00 	cmp.w	r8, #0
    80b2:	d009      	beq.n	80c8 <uart_callback+0x74>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    80b4:	6833      	ldr	r3, [r6, #0]
    80b6:	2000      	movs	r0, #0
    80b8:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    80bc:	4790      	blx	r2
}
    80be:	e003      	b.n	80c8 <uart_callback+0x74>
	return api->irq_rx_ready(dev);
    80c0:	4620      	mov	r0, r4
    80c2:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    80c4:	2800      	cmp	r0, #0
    80c6:	d1d1      	bne.n	806c <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    80c8:	68a3      	ldr	r3, [r4, #8]
    80ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    80cc:	2b00      	cmp	r3, #0
    80ce:	d13c      	bne.n	814a <uart_callback+0xf6>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    80d0:	68b0      	ldr	r0, [r6, #8]
    80d2:	a901      	add	r1, sp, #4
    80d4:	6902      	ldr	r2, [r0, #16]
    80d6:	f01f f838 	bl	2714a <ring_buf_get_claim>
	if (len) {
    80da:	4605      	mov	r5, r0
    80dc:	2800      	cmp	r0, #0
    80de:	d04f      	beq.n	8180 <uart_callback+0x12c>
	if (api->line_ctrl_get == NULL) {
    80e0:	68a3      	ldr	r3, [r4, #8]
    80e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    80e4:	2b00      	cmp	r3, #0
    80e6:	d037      	beq.n	8158 <uart_callback+0x104>
	return api->line_ctrl_get(dev, ctrl, val);
    80e8:	aa02      	add	r2, sp, #8
    80ea:	2104      	movs	r1, #4
    80ec:	4620      	mov	r0, r4
    80ee:	4798      	blx	r3
			if (err == -ENOSYS || err == -ENOTSUP) {
    80f0:	f110 0f58 	cmn.w	r0, #88	; 0x58
    80f4:	d030      	beq.n	8158 <uart_callback+0x104>
    80f6:	3086      	adds	r0, #134	; 0x86
    80f8:	d02e      	beq.n	8158 <uart_callback+0x104>
			if (dtr) {
    80fa:	9b02      	ldr	r3, [sp, #8]
    80fc:	bb63      	cbnz	r3, 8158 <uart_callback+0x104>
	return z_impl_k_sleep(timeout);
    80fe:	2100      	movs	r1, #0
    8100:	f640 40cd 	movw	r0, #3277	; 0xccd
    8104:	f01d feda 	bl	25ebc <z_impl_k_sleep>
		while (true) {
    8108:	e7ea      	b.n	80e0 <uart_callback+0x8c>
		return -ENOSYS;
    810a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    810e:	e7c3      	b.n	8098 <uart_callback+0x44>
			LOG_WRN("RX ring buffer full.");
    8110:	f8d9 3000 	ldr.w	r3, [r9]
    8114:	f013 0f06 	tst.w	r3, #6
    8118:	d00b      	beq.n	8132 <uart_callback+0xde>
    811a:	2302      	movs	r3, #2
    811c:	f8cd a018 	str.w	sl, [sp, #24]
    8120:	9301      	str	r3, [sp, #4]
    8122:	9305      	str	r3, [sp, #20]
    8124:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    8128:	4603      	mov	r3, r0
    812a:	aa05      	add	r2, sp, #20
    812c:	4648      	mov	r0, r9
    812e:	f01f fc07 	bl	27940 <z_impl_z_log_msg2_static_create>
	if (api->fifo_read == NULL) {
    8132:	68a3      	ldr	r3, [r4, #8]
    8134:	699b      	ldr	r3, [r3, #24]
    8136:	b12b      	cbz	r3, 8144 <uart_callback+0xf0>
	return api->fifo_read(dev, rx_data, size);
    8138:	2201      	movs	r2, #1
    813a:	a902      	add	r1, sp, #8
    813c:	4620      	mov	r0, r4
    813e:	4798      	blx	r3
    8140:	4605      	mov	r5, r0
    8142:	e7b1      	b.n	80a8 <uart_callback+0x54>
		return -ENOSYS;
    8144:	f06f 0557 	mvn.w	r5, #87	; 0x57
    8148:	e7ae      	b.n	80a8 <uart_callback+0x54>
	return api->irq_tx_ready(dev);
    814a:	4620      	mov	r0, r4
    814c:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    814e:	2800      	cmp	r0, #0
    8150:	d1be      	bne.n	80d0 <uart_callback+0x7c>
}
    8152:	b008      	add	sp, #32
    8154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (api->fifo_fill == NULL) {
    8158:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    815a:	9901      	ldr	r1, [sp, #4]
    815c:	695b      	ldr	r3, [r3, #20]
    815e:	b163      	cbz	r3, 817a <uart_callback+0x126>
	return api->fifo_fill(dev, tx_data, size);
    8160:	462a      	mov	r2, r5
    8162:	4620      	mov	r0, r4
    8164:	4798      	blx	r3
    8166:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    8168:	68b0      	ldr	r0, [r6, #8]
    816a:	f01f f819 	bl	271a0 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    816e:	6833      	ldr	r3, [r6, #0]
    8170:	2001      	movs	r0, #1
    8172:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    8176:	4790      	blx	r2
}
    8178:	e7eb      	b.n	8152 <uart_callback+0xfe>
		return -ENOSYS;
    817a:	f06f 0157 	mvn.w	r1, #87	; 0x57
    817e:	e7f3      	b.n	8168 <uart_callback+0x114>
		uart_irq_tx_disable(dev);
    8180:	4620      	mov	r0, r4
    8182:	f01f fc85 	bl	27a90 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    8186:	6833      	ldr	r3, [r6, #0]
    8188:	60dd      	str	r5, [r3, #12]
    818a:	e7f0      	b.n	816e <uart_callback+0x11a>
    818c:	20000a8c 	.word	0x20000a8c
    8190:	000319f1 	.word	0x000319f1

00008194 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    8194:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    8196:	6881      	ldr	r1, [r0, #8]
{
    8198:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    819a:	3108      	adds	r1, #8
    819c:	f001 f852 	bl	9244 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    81a0:	68a1      	ldr	r1, [r4, #8]
    81a2:	4a03      	ldr	r2, [pc, #12]	; (81b0 <shell_internal_help_print+0x1c>)
    81a4:	4620      	mov	r0, r4
    81a6:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    81a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    81ac:	f000 bff2 	b.w	9194 <z_shell_help_subcmd_print>
    81b0:	00031a3f 	.word	0x00031a3f

000081b4 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    81b4:	4901      	ldr	r1, [pc, #4]	; (81bc <z_cursor_next_line_move.isra.0+0x8>)
    81b6:	f01f bd01 	b.w	27bbc <z_shell_raw_fprintf>
    81ba:	bf00      	nop
    81bc:	000316bf 	.word	0x000316bf

000081c0 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    81c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    81c2:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    81c4:	6880      	ldr	r0, [r0, #8]
    81c6:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    81ca:	075a      	lsls	r2, r3, #29
{
    81cc:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    81ce:	d505      	bpl.n	81dc <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    81d0:	2100      	movs	r1, #0
    81d2:	f01f fd34 	bl	27c3e <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    81d6:	68e0      	ldr	r0, [r4, #12]
    81d8:	f020 fbfd 	bl	289d6 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    81dc:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    81de:	68db      	ldr	r3, [r3, #12]
    81e0:	b96b      	cbnz	r3, 81fe <history_handle+0x3e>
		if (up) {
    81e2:	2d00      	cmp	r5, #0
    81e4:	d037      	beq.n	8256 <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    81e6:	68a0      	ldr	r0, [r4, #8]
    81e8:	3042      	adds	r0, #66	; 0x42
    81ea:	f01f fce1 	bl	27bb0 <z_shell_strlen>

			if (cmd_len) {
    81ee:	68a3      	ldr	r3, [r4, #8]
    81f0:	b398      	cbz	r0, 825a <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    81f2:	f103 0142 	add.w	r1, r3, #66	; 0x42
    81f6:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    81fa:	f022 f82f 	bl	2a25c <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    81fe:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    8200:	68e0      	ldr	r0, [r4, #12]
    8202:	f10d 0306 	add.w	r3, sp, #6
    8206:	3242      	adds	r2, #66	; 0x42
    8208:	4629      	mov	r1, r5
    820a:	f020 fbe7 	bl	289dc <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    820e:	b958      	cbnz	r0, 8228 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    8210:	68a0      	ldr	r0, [r4, #8]
    8212:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    8216:	3042      	adds	r0, #66	; 0x42
    8218:	f022 f820 	bl	2a25c <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    821c:	68a0      	ldr	r0, [r4, #8]
    821e:	3042      	adds	r0, #66	; 0x42
    8220:	f01f fcc6 	bl	27bb0 <z_shell_strlen>
    8224:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    8228:	4620      	mov	r0, r4
    822a:	f020 f862 	bl	282f2 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    822e:	68a3      	ldr	r3, [r4, #8]
    8230:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    8234:	069b      	lsls	r3, r3, #26
    8236:	d503      	bpl.n	8240 <history_handle+0x80>
    8238:	4909      	ldr	r1, [pc, #36]	; (8260 <history_handle+0xa0>)
    823a:	6960      	ldr	r0, [r4, #20]
    823c:	f01f fcbe 	bl	27bbc <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    8240:	4620      	mov	r0, r4
    8242:	f000 fe77 	bl	8f34 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    8246:	68a3      	ldr	r3, [r4, #8]
    8248:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    824c:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    824e:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    8250:	4620      	mov	r0, r4
    8252:	f01f ffbb 	bl	281cc <z_shell_op_cond_next_line>
}
    8256:	b003      	add	sp, #12
    8258:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    825a:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    825e:	e7ce      	b.n	81fe <history_handle+0x3e>
    8260:	0002e5bb 	.word	0x0002e5bb

00008264 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    8264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    8268:	2300      	movs	r3, #0
{
    826a:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    826c:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    8270:	6883      	ldr	r3, [r0, #8]
{
    8272:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    8274:	3342      	adds	r3, #66	; 0x42
    8276:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    8278:	f020 f841 	bl	282fe <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    827c:	4620      	mov	r0, r4
    827e:	f01f ff91 	bl	281a4 <z_shell_cursor_in_empty_line>
    8282:	b910      	cbnz	r0, 828a <execute+0x26>
		z_cursor_next_line_move(shell);
    8284:	6960      	ldr	r0, [r4, #20]
    8286:	f7ff ff95 	bl	81b4 <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    828a:	68a0      	ldr	r0, [r4, #8]
    828c:	2214      	movs	r2, #20
    828e:	2100      	movs	r1, #0
    8290:	3008      	adds	r0, #8
    8292:	f022 f86e 	bl	2a372 <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    8296:	4620      	mov	r0, r4
    8298:	f01f ff31 	bl	280fe <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    829c:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    829e:	68e0      	ldr	r0, [r4, #12]
    82a0:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    82a2:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    82a4:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    82a6:	f020 fbd0 	bl	28a4a <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    82aa:	4620      	mov	r0, r4
    82ac:	f020 fc53 	bl	28b56 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    82b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    82b4:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    82b6:	46b2      	mov	sl, r6
    82b8:	af11      	add	r7, sp, #68	; 0x44
    82ba:	9602      	str	r6, [sp, #8]
    82bc:	4635      	mov	r5, r6
    82be:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    82c0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    82c4:	2a01      	cmp	r2, #1
    82c6:	f000 80d6 	beq.w	8476 <execute+0x212>
    82ca:	2b0b      	cmp	r3, #11
    82cc:	f240 80ae 	bls.w	842c <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    82d0:	9b06      	ldr	r3, [sp, #24]
    82d2:	2b02      	cmp	r3, #2
    82d4:	f040 80ae 	bne.w	8434 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    82d8:	4b89      	ldr	r3, [pc, #548]	; (8500 <execute+0x29c>)
    82da:	4a8a      	ldr	r2, [pc, #552]	; (8504 <execute+0x2a0>)
    82dc:	2101      	movs	r1, #1
    82de:	e014      	b.n	830a <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    82e0:	9a03      	ldr	r2, [sp, #12]
    82e2:	2302      	movs	r3, #2
    82e4:	4639      	mov	r1, r7
    82e6:	a806      	add	r0, sp, #24
    82e8:	f01f fd9d 	bl	27e26 <z_shell_make_argv>
		if (argc == 0) {
    82ec:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    82ee:	687a      	ldr	r2, [r7, #4]
    82f0:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    82f2:	4603      	mov	r3, r0
		if (argc == 0) {
    82f4:	b929      	cbnz	r1, 8302 <execute+0x9e>
			return -ENOEXEC;
    82f6:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    82fa:	4628      	mov	r0, r5
    82fc:	b01f      	add	sp, #124	; 0x7c
    82fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    8302:	2901      	cmp	r1, #1
    8304:	d105      	bne.n	8312 <execute+0xae>
    8306:	b120      	cbz	r0, 8312 <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    8308:	4a7f      	ldr	r2, [pc, #508]	; (8508 <execute+0x2a4>)
    830a:	4620      	mov	r0, r4
    830c:	f020 f8a3 	bl	28456 <z_shell_fprintf>
    8310:	e7f1      	b.n	82f6 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    8312:	9b05      	ldr	r3, [sp, #20]
    8314:	b34b      	cbz	r3, 836a <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    8316:	6838      	ldr	r0, [r7, #0]
    8318:	f000 ffb8 	bl	928c <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    831c:	b198      	cbz	r0, 8346 <execute+0xe2>
			if (help_entry.help) {
    831e:	b166      	cbz	r6, 833a <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    8320:	68a5      	ldr	r5, [r4, #8]
    8322:	960d      	str	r6, [sp, #52]	; 0x34
    8324:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    8326:	ae0c      	add	r6, sp, #48	; 0x30
    8328:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    832a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    832c:	6833      	ldr	r3, [r6, #0]
    832e:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    8330:	4620      	mov	r0, r4
    8332:	f7ff ff2f 	bl	8194 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    8336:	2501      	movs	r5, #1
    8338:	e7df      	b.n	82fa <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    833a:	4a74      	ldr	r2, [pc, #464]	; (850c <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    833c:	2101      	movs	r1, #1
    833e:	4620      	mov	r0, r4
    8340:	f020 f889 	bl	28456 <z_shell_fprintf>
		return false;
    8344:	e7d7      	b.n	82f6 <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    8346:	9b05      	ldr	r3, [sp, #20]
    8348:	b17b      	cbz	r3, 836a <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    834a:	683a      	ldr	r2, [r7, #0]
    834c:	4629      	mov	r1, r5
    834e:	4620      	mov	r0, r4
    8350:	f001 f900 	bl	9554 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    8354:	2802      	cmp	r0, #2
    8356:	f000 808e 	beq.w	8476 <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    835a:	2803      	cmp	r0, #3
    835c:	d005      	beq.n	836a <execute+0x106>
				++cmd_lvl;
    835e:	9b05      	ldr	r3, [sp, #20]
    8360:	3301      	adds	r3, #1
    8362:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    8364:	2301      	movs	r3, #1
    8366:	9302      	str	r3, [sp, #8]
				continue;
    8368:	e7aa      	b.n	82c0 <execute+0x5c>
		if (has_last_handler == false) {
    836a:	f1ba 0f00 	cmp.w	sl, #0
    836e:	d105      	bne.n	837c <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    8370:	6839      	ldr	r1, [r7, #0]
    8372:	aa07      	add	r2, sp, #28
    8374:	4658      	mov	r0, fp
    8376:	f01f fe41 	bl	27ffc <z_shell_find_cmd>
    837a:	4605      	mov	r5, r0
		argvp++;
    837c:	3704      	adds	r7, #4
		args_left--;
    837e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    8382:	2d00      	cmp	r5, #0
    8384:	d040      	beq.n	8408 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    8386:	9a02      	ldr	r2, [sp, #8]
    8388:	68eb      	ldr	r3, [r5, #12]
    838a:	b142      	cbz	r2, 839e <execute+0x13a>
    838c:	b313      	cbz	r3, 83d4 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    838e:	4620      	mov	r0, r4
    8390:	f01f ffb5 	bl	282fe <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    8394:	4620      	mov	r0, r4
    8396:	f01f ff19 	bl	281cc <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    839a:	4a5d      	ldr	r2, [pc, #372]	; (8510 <execute+0x2ac>)
    839c:	e7ce      	b.n	833c <execute+0xd8>
	if (entry->handler) {
    839e:	b1cb      	cbz	r3, 83d4 <execute+0x170>
		*active_cmd = *entry;
    83a0:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    83a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    83a6:	46ae      	mov	lr, r5
    83a8:	f103 0c08 	add.w	ip, r3, #8
    83ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    83b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    83b4:	f8de 3000 	ldr.w	r3, [lr]
    83b8:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    83bc:	68ab      	ldr	r3, [r5, #8]
    83be:	b94b      	cbnz	r3, 83d4 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    83c0:	7c6b      	ldrb	r3, [r5, #17]
    83c2:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    83c4:	bf01      	itttt	eq
    83c6:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    83ca:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    83ce:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    83d2:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    83d4:	f8d5 c004 	ldr.w	ip, [r5, #4]
    83d8:	f1bc 0f00 	cmp.w	ip, #0
    83dc:	d008      	beq.n	83f0 <execute+0x18c>
		*help_entry = *entry;
    83de:	46ae      	mov	lr, r5
    83e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    83e4:	ae0c      	add	r6, sp, #48	; 0x30
    83e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    83e8:	f8de 3000 	ldr.w	r3, [lr]
    83ec:	6033      	str	r3, [r6, #0]
    83ee:	4666      	mov	r6, ip
    83f0:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    83f2:	f1b8 0f00 	cmp.w	r8, #0
    83f6:	d103      	bne.n	8400 <execute+0x19c>
    83f8:	9b06      	ldr	r3, [sp, #24]
    83fa:	2b02      	cmp	r3, #2
    83fc:	f47f af60 	bne.w	82c0 <execute+0x5c>
			cmd_lvl++;
    8400:	9b05      	ldr	r3, [sp, #20]
    8402:	3301      	adds	r3, #1
    8404:	9305      	str	r3, [sp, #20]
    8406:	e75b      	b.n	82c0 <execute+0x5c>
			if (cmd_lvl == 0 &&
    8408:	9b05      	ldr	r3, [sp, #20]
    840a:	b963      	cbnz	r3, 8426 <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    840c:	68a3      	ldr	r3, [r4, #8]
    840e:	69db      	ldr	r3, [r3, #28]
    8410:	b10b      	cbz	r3, 8416 <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    8412:	68db      	ldr	r3, [r3, #12]
    8414:	b93b      	cbnz	r3, 8426 <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    8416:	4b3f      	ldr	r3, [pc, #252]	; (8514 <execute+0x2b0>)
    8418:	9300      	str	r3, [sp, #0]
    841a:	4a3f      	ldr	r2, [pc, #252]	; (8518 <execute+0x2b4>)
    841c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    841e:	2101      	movs	r1, #1
    8420:	4620      	mov	r0, r4
    8422:	f020 f818 	bl	28456 <z_shell_fprintf>
			has_last_handler = true;
    8426:	f04f 0a01 	mov.w	sl, #1
    842a:	e7e2      	b.n	83f2 <execute+0x18e>
		&& args_left > 0) {
    842c:	f1b8 0f00 	cmp.w	r8, #0
    8430:	f47f af56 	bne.w	82e0 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    8434:	9b02      	ldr	r3, [sp, #8]
    8436:	b14b      	cbz	r3, 844c <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    8438:	4620      	mov	r0, r4
    843a:	f020 fbad 	bl	28b98 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    843e:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    8440:	230c      	movs	r3, #12
    8442:	3242      	adds	r2, #66	; 0x42
    8444:	a911      	add	r1, sp, #68	; 0x44
    8446:	a805      	add	r0, sp, #20
    8448:	f01f fced 	bl	27e26 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    844c:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    844e:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    8450:	ab1e      	add	r3, sp, #120	; 0x78
    8452:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8456:	2200      	movs	r2, #0
    8458:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    845c:	6943      	ldr	r3, [r0, #20]
    845e:	b973      	cbnz	r3, 847e <execute+0x21a>
			if (help_entry->help == NULL) {
    8460:	2e00      	cmp	r6, #0
    8462:	f43f af48 	beq.w	82f6 <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    8466:	68c3      	ldr	r3, [r0, #12]
    8468:	42b3      	cmp	r3, r6
    846a:	f43f af61 	beq.w	8330 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    846e:	960d      	str	r6, [sp, #52]	; 0x34
    8470:	f100 0508 	add.w	r5, r0, #8
    8474:	e757      	b.n	8326 <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    8476:	9b05      	ldr	r3, [sp, #20]
    8478:	2b0b      	cmp	r3, #11
    847a:	d9db      	bls.n	8434 <execute+0x1d0>
    847c:	e728      	b.n	82d0 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    847e:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    8480:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    8484:	b1b3      	cbz	r3, 84b4 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    8486:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    8488:	f64f 72ff 	movw	r2, #65535	; 0xffff
    848c:	29ff      	cmp	r1, #255	; 0xff
    848e:	bf18      	it	ne
    8490:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    8492:	429d      	cmp	r5, r3
    8494:	d302      	bcc.n	849c <execute+0x238>
    8496:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    8498:	429d      	cmp	r5, r3
    849a:	d90b      	bls.n	84b4 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    849c:	6883      	ldr	r3, [r0, #8]
    849e:	4a1f      	ldr	r2, [pc, #124]	; (851c <execute+0x2b8>)
    84a0:	2101      	movs	r1, #1
    84a2:	4620      	mov	r0, r4
    84a4:	f01f ffd7 	bl	28456 <z_shell_fprintf>
			shell_internal_help_print(shell);
    84a8:	4620      	mov	r0, r4
    84aa:	f7ff fe73 	bl	8194 <shell_internal_help_print>
		return -EINVAL;
    84ae:	f06f 0515 	mvn.w	r5, #21
    84b2:	e722      	b.n	82fa <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    84b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    84b8:	f500 7019 	add.w	r0, r0, #612	; 0x264
    84bc:	f01f fb44 	bl	27b48 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    84c0:	68a0      	ldr	r0, [r4, #8]
    84c2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    84c6:	f01f fbd3 	bl	27c70 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    84ca:	68a3      	ldr	r3, [r4, #8]
    84cc:	aa11      	add	r2, sp, #68	; 0x44
    84ce:	4629      	mov	r1, r5
    84d0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    84d4:	695b      	ldr	r3, [r3, #20]
    84d6:	4620      	mov	r0, r4
    84d8:	4798      	blx	r3
    84da:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    84dc:	68a0      	ldr	r0, [r4, #8]
    84de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    84e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    84e6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    84ea:	f01f fb74 	bl	27bd6 <k_mutex_lock.constprop.0.isra.0>
    84ee:	68a0      	ldr	r0, [r4, #8]
    84f0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    84f4:	f500 7019 	add.w	r0, r0, #612	; 0x264
    84f8:	f01f fb35 	bl	27b66 <atomic_and>
	return ret;
    84fc:	e6fd      	b.n	82fa <execute+0x96>
    84fe:	bf00      	nop
    8500:	00031ac2 	.word	0x00031ac2
    8504:	000317ea 	.word	0x000317ea
    8508:	00031a4d 	.word	0x00031a4d
    850c:	00031a61 	.word	0x00031a61
    8510:	00031a7f 	.word	0x00031a7f
    8514:	00031aae 	.word	0x00031aae
    8518:	00031d71 	.word	0x00031d71
    851c:	00031ae6 	.word	0x00031ae6

00008520 <state_set.constprop.0>:
	shell->ctx->state = state;
    8520:	6883      	ldr	r3, [r0, #8]
    8522:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    8524:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    8526:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    8528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    852a:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    852c:	b9ba      	cbnz	r2, 855e <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    852e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    8532:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    8534:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    8538:	04db      	lsls	r3, r3, #19
    853a:	d50b      	bpl.n	8554 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    853c:	2103      	movs	r1, #3
    853e:	4b08      	ldr	r3, [pc, #32]	; (8560 <state_set.constprop.0+0x40>)
    8540:	4a08      	ldr	r2, [pc, #32]	; (8564 <state_set.constprop.0+0x44>)
    8542:	f01f ff88 	bl	28456 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    8546:	68a0      	ldr	r0, [r4, #8]
    8548:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    854c:	f500 7019 	add.w	r0, r0, #612	; 0x264
    8550:	f01f fb09 	bl	27b66 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    8554:	4620      	mov	r0, r4
}
    8556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    855a:	f000 bdfd 	b.w	9158 <z_shell_print_prompt_and_cmd>
}
    855e:	bd10      	pop	{r4, pc}
    8560:	00031b01 	.word	0x00031b01
    8564:	000317de 	.word	0x000317de

00008568 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    8568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    856c:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    856e:	6880      	ldr	r0, [r0, #8]
    8570:	b0ab      	sub	sp, #172	; 0xac
    8572:	2101      	movs	r1, #1
    8574:	f500 7019 	add.w	r0, r0, #612	; 0x264
    8578:	f01f fae6 	bl	27b48 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    857c:	68a3      	ldr	r3, [r4, #8]
    857e:	791b      	ldrb	r3, [r3, #4]
    8580:	2b02      	cmp	r3, #2
    8582:	d117      	bne.n	85b4 <shell_process+0x4c>
	size_t count = 0;
    8584:	2300      	movs	r3, #0
    8586:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    8588:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    858a:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    858c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    858e:	6803      	ldr	r3, [r0, #0]
    8590:	691d      	ldr	r5, [r3, #16]
    8592:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    8594:	b1c6      	cbz	r6, 85c8 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    8596:	2210      	movs	r2, #16
    8598:	a91d      	add	r1, sp, #116	; 0x74
    859a:	47a8      	blx	r5
			if (count) {
    859c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    859e:	b14a      	cbz	r2, 85b4 <shell_process+0x4c>
				bypass(shell, buf, count);
    85a0:	a91d      	add	r1, sp, #116	; 0x74
    85a2:	4620      	mov	r0, r4
    85a4:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    85a6:	68a3      	ldr	r3, [r4, #8]
    85a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    85aa:	2b00      	cmp	r3, #0
    85ac:	d1ec      	bne.n	8588 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    85ae:	4620      	mov	r0, r4
    85b0:	f7ff ffb6 	bl	8520 <state_set.constprop.0>
    85b4:	68a0      	ldr	r0, [r4, #8]
    85b6:	f06f 0101 	mvn.w	r1, #1
    85ba:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    85be:	b02b      	add	sp, #172	; 0xac
    85c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85c4:	f01f bacf 	b.w	27b66 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    85c8:	2201      	movs	r2, #1
    85ca:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    85ce:	47a8      	blx	r5
		if (count == 0) {
    85d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85d2:	2b00      	cmp	r3, #0
    85d4:	d0ee      	beq.n	85b4 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    85d6:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    85da:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    85de:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    85e0:	2a00      	cmp	r2, #0
    85e2:	dbd1      	blt.n	8588 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    85e4:	7942      	ldrb	r2, [r0, #5]
    85e6:	2a03      	cmp	r2, #3
    85e8:	f200 82fd 	bhi.w	8be6 <shell_process+0x67e>
    85ec:	e8df f012 	tbh	[pc, r2, lsl #1]
    85f0:	02750004 	.word	0x02750004
    85f4:	02fb0298 	.word	0x02fb0298
	if ((data != '\r') && (data != '\n')) {
    85f8:	2b0d      	cmp	r3, #13
    85fa:	d01a      	beq.n	8632 <shell_process+0xca>
    85fc:	2b0a      	cmp	r3, #10
    85fe:	d018      	beq.n	8632 <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    8600:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    8604:	f36f 02ca 	bfc	r2, #3, #8
    8608:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    860c:	2b09      	cmp	r3, #9
    860e:	d04c      	beq.n	86aa <shell_process+0x142>
    8610:	d832      	bhi.n	8678 <shell_process+0x110>
    8612:	2b00      	cmp	r3, #0
    8614:	d0b8      	beq.n	8588 <shell_process+0x20>
    8616:	2b08      	cmp	r3, #8
    8618:	f000 81c4 	beq.w	89a4 <shell_process+0x43c>
    861c:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    8620:	2a5e      	cmp	r2, #94	; 0x5e
    8622:	f200 81cb 	bhi.w	89bc <shell_process+0x454>
					z_flag_history_exit_set(shell, true);
    8626:	2101      	movs	r1, #1
    8628:	f01f fb09 	bl	27c3e <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    862c:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    8630:	e0e8      	b.n	8804 <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    8632:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    8636:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    863a:	b12a      	cbz	r2, 8648 <shell_process+0xe0>
    863c:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    8640:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    8644:	4293      	cmp	r3, r2
    8646:	d1e1      	bne.n	860c <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    8648:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    864c:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    864e:	f363 02ca 	bfi	r2, r3, #3, #8
    8652:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    8656:	b959      	cbnz	r1, 8670 <shell_process+0x108>
	z_flag_history_exit_set(shell, false);
    8658:	f01f faf1 	bl	27c3e <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    865c:	68e0      	ldr	r0, [r4, #12]
    865e:	f020 f9ba 	bl	289d6 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    8662:	6960      	ldr	r0, [r4, #20]
    8664:	f7ff fda6 	bl	81b4 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    8668:	4620      	mov	r0, r4
    866a:	f7ff ff59 	bl	8520 <state_set.constprop.0>
		break;
    866e:	e78b      	b.n	8588 <shell_process+0x20>
					(void)execute(shell);
    8670:	4620      	mov	r0, r4
    8672:	f7ff fdf7 	bl	8264 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    8676:	e7f7      	b.n	8668 <shell_process+0x100>
    8678:	2b1b      	cmp	r3, #27
    867a:	d013      	beq.n	86a4 <shell_process+0x13c>
    867c:	2b7f      	cmp	r3, #127	; 0x7f
    867e:	d1cd      	bne.n	861c <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    8680:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    8684:	079a      	lsls	r2, r3, #30
    8686:	f57f af7f 	bpl.w	8588 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    868a:	2101      	movs	r1, #1
    868c:	f01f fad7 	bl	27c3e <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    8690:	68a3      	ldr	r3, [r4, #8]
    8692:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    8696:	071b      	lsls	r3, r3, #28
    8698:	f100 818c 	bmi.w	89b4 <shell_process+0x44c>
		z_shell_op_char_delete(shell);
    869c:	4620      	mov	r0, r4
    869e:	f01f ff1a 	bl	284d6 <z_shell_op_char_delete>
		break;
    86a2:	e771      	b.n	8588 <shell_process+0x20>
	shell->ctx->receive_state = state;
    86a4:	2301      	movs	r3, #1
    86a6:	7143      	strb	r3, [r0, #5]
}
    86a8:	e76e      	b.n	8588 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    86aa:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    86ae:	079e      	lsls	r6, r3, #30
    86b0:	f57f af6a 	bpl.w	8588 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    86b4:	2101      	movs	r1, #1
    86b6:	f01f fac2 	bl	27c3e <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    86ba:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    86bc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    86be:	2bff      	cmp	r3, #255	; 0xff
    86c0:	f43f af62 	beq.w	8588 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    86c4:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    86c6:	f100 0142 	add.w	r1, r0, #66	; 0x42
    86ca:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    86ce:	f021 fe45 	bl	2a35c <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    86d2:	68a2      	ldr	r2, [r4, #8]
    86d4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    86d6:	4413      	add	r3, r2
    86d8:	2500      	movs	r5, #0
    86da:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    86de:	a91d      	add	r1, sp, #116	; 0x74
    86e0:	230c      	movs	r3, #12
    86e2:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    86e6:	a80d      	add	r0, sp, #52	; 0x34
    86e8:	f01f fb9d 	bl	27e26 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    86ec:	990d      	ldr	r1, [sp, #52]	; 0x34
    86ee:	290c      	cmp	r1, #12
    86f0:	f63f af4a 	bhi.w	8588 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    86f4:	ab2a      	add	r3, sp, #168	; 0xa8
    86f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    86fa:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
    86fe:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    8700:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    8702:	4413      	add	r3, r2
    8704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    8708:	2b20      	cmp	r3, #32
    870a:	f000 826e 	beq.w	8bea <shell_process+0x682>
    870e:	3b09      	subs	r3, #9
    8710:	2b04      	cmp	r3, #4
    8712:	f240 826a 	bls.w	8bea <shell_process+0x682>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    8716:	2901      	cmp	r1, #1
    8718:	d84f      	bhi.n	87ba <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    871a:	2500      	movs	r5, #0
    871c:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    871e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8720:	aa2a      	add	r2, sp, #168	; 0xa8
    8722:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    8726:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    8728:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    872c:	4650      	mov	r0, sl
    872e:	f01f fa3f 	bl	27bb0 <z_shell_strlen>
	size_t first = 0;
    8732:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    8734:	4681      	mov	r9, r0
	*longest = 0U;
    8736:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    8738:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    873a:	aa18      	add	r2, sp, #96	; 0x60
    873c:	4639      	mov	r1, r7
    873e:	4628      	mov	r0, r5
    8740:	f000 fb94 	bl	8e6c <z_shell_cmd_get>
    8744:	4683      	mov	fp, r0
    8746:	2800      	cmp	r0, #0
    8748:	d144      	bne.n	87d4 <shell_process+0x26c>
	if (cnt == 1) {
    874a:	2e01      	cmp	r6, #1
    874c:	d163      	bne.n	8816 <shell_process+0x2ae>
		autocomplete(shell, cmd, argv[arg_idx], first);
    874e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8750:	aa2a      	add	r2, sp, #168	; 0xa8
    8752:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    8756:	f853 0c34 	ldr.w	r0, [r3, #-52]
    875a:	f01f fa29 	bl	27bb0 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    875e:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    8760:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    8762:	3208      	adds	r2, #8
    8764:	4641      	mov	r1, r8
    8766:	4628      	mov	r0, r5
    8768:	f000 fb80 	bl	8e6c <z_shell_cmd_get>
    876c:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    876e:	6800      	ldr	r0, [r0, #0]
    8770:	f01f fa1e 	bl	27bb0 <z_shell_strlen>
	if (cmd_len != arg_len) {
    8774:	4286      	cmp	r6, r0
    8776:	d006      	beq.n	8786 <shell_process+0x21e>
		z_shell_op_completion_insert(shell,
    8778:	6829      	ldr	r1, [r5, #0]
    877a:	1b82      	subs	r2, r0, r6
    877c:	b292      	uxth	r2, r2
    877e:	4431      	add	r1, r6
    8780:	4620      	mov	r0, r4
    8782:	f01f fea6 	bl	284d2 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    8786:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    8788:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    878a:	4403      	add	r3, r0
    878c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    8790:	2b20      	cmp	r3, #32
    8792:	d03b      	beq.n	880c <shell_process+0x2a4>
    8794:	3b09      	subs	r3, #9
    8796:	2b04      	cmp	r3, #4
    8798:	d938      	bls.n	880c <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    879a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    879e:	07dd      	lsls	r5, r3, #31
    87a0:	d52f      	bpl.n	8802 <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    87a2:	2100      	movs	r1, #0
    87a4:	f01f fa55 	bl	27c52 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    87a8:	2120      	movs	r1, #32
    87aa:	4620      	mov	r0, r4
    87ac:	f000 fca0 	bl	90f0 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    87b0:	68a0      	ldr	r0, [r4, #8]
    87b2:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    87b4:	f01f fa4d 	bl	27c52 <z_flag_insert_mode_set.isra.0>
				break;
    87b8:	e6e6      	b.n	8588 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    87ba:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    87bc:	2000      	movs	r0, #0
    87be:	ab0e      	add	r3, sp, #56	; 0x38
    87c0:	9300      	str	r3, [sp, #0]
    87c2:	9001      	str	r0, [sp, #4]
    87c4:	ab0c      	add	r3, sp, #48	; 0x30
    87c6:	aa1d      	add	r2, sp, #116	; 0x74
    87c8:	f01f fc38 	bl	2803c <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    87cc:	4605      	mov	r5, r0
    87ce:	2800      	cmp	r0, #0
    87d0:	d1a5      	bne.n	871e <shell_process+0x1b6>
    87d2:	e6d9      	b.n	8588 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    87d4:	f8db 0000 	ldr.w	r0, [fp]
    87d8:	464a      	mov	r2, r9
    87da:	4651      	mov	r1, sl
    87dc:	f021 fd84 	bl	2a2e8 <strncmp>
		if (is_candidate) {
    87e0:	b968      	cbnz	r0, 87fe <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    87e2:	f8db 0000 	ldr.w	r0, [fp]
    87e6:	f021 fd63 	bl	2a2b0 <strlen>
    87ea:	9b04      	ldr	r3, [sp, #16]
    87ec:	4283      	cmp	r3, r0
    87ee:	bf38      	it	cc
    87f0:	4603      	movcc	r3, r0
    87f2:	b29b      	uxth	r3, r3
				*first_idx = idx;
    87f4:	2e00      	cmp	r6, #0
    87f6:	bf08      	it	eq
    87f8:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    87fa:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    87fc:	3601      	adds	r6, #1
		idx++;
    87fe:	3701      	adds	r7, #1
    8800:	e79b      	b.n	873a <shell_process+0x1d2>
			z_shell_op_char_insert(shell, ' ');
    8802:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    8804:	4620      	mov	r0, r4
    8806:	f000 fc73 	bl	90f0 <z_shell_op_char_insert>
    880a:	e6bd      	b.n	8588 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    880c:	2101      	movs	r1, #1
    880e:	4620      	mov	r0, r4
    8810:	f01f fd0f 	bl	28232 <z_shell_op_cursor_move>
    8814:	e6b8      	b.n	8588 <shell_process+0x20>
	} else if (cnt > 1) {
    8816:	f67f aeb7 	bls.w	8588 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    881a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    881c:	aa2a      	add	r2, sp, #168	; 0xa8
    881e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8822:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    8826:	4650      	mov	r0, sl
    8828:	f01f f9c2 	bl	27bb0 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    882c:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    882e:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    8830:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    8834:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8b08 <shell_process+0x5a0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    8838:	9605      	str	r6, [sp, #20]
    883a:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    883e:	68a2      	ldr	r2, [r4, #8]
    8840:	9903      	ldr	r1, [sp, #12]
    8842:	3208      	adds	r2, #8
    8844:	4628      	mov	r0, r5
    8846:	f000 fb11 	bl	8e6c <z_shell_cmd_get>
		idx++;
    884a:	9b03      	ldr	r3, [sp, #12]
    884c:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    884e:	4607      	mov	r7, r0
		idx++;
    8850:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    8852:	f1ba 0f00 	cmp.w	sl, #0
    8856:	d152      	bne.n	88fe <shell_process+0x396>
		tab_item_print(shell, match->syntax, longest);
    8858:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    885a:	2f00      	cmp	r7, #0
    885c:	d159      	bne.n	8912 <shell_process+0x3aa>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    885e:	68a2      	ldr	r2, [r4, #8]
    8860:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    8862:	9b05      	ldr	r3, [sp, #20]
    8864:	3b01      	subs	r3, #1
    8866:	9305      	str	r3, [sp, #20]
    8868:	d1e9      	bne.n	883e <shell_process+0x2d6>
	z_cursor_next_line_move(shell);
    886a:	6960      	ldr	r0, [r4, #20]
    886c:	f7ff fca2 	bl	81b4 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    8870:	4620      	mov	r0, r4
    8872:	f000 fc71 	bl	9158 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    8876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8878:	aa2a      	add	r2, sp, #168	; 0xa8
    887a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    887e:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    8882:	f853 0c34 	ldr.w	r0, [r3, #-52]
    8886:	f01f f993 	bl	27bb0 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    888a:	4641      	mov	r1, r8
    888c:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    888e:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    8890:	4628      	mov	r0, r5
    8892:	f000 faeb 	bl	8e6c <z_shell_cmd_get>
    8896:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    8898:	68a0      	ldr	r0, [r4, #8]
    889a:	f8d8 1000 	ldr.w	r1, [r8]
    889e:	22ff      	movs	r2, #255	; 0xff
    88a0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    88a4:	f021 fce4 	bl	2a270 <strncpy>
	*str = match->syntax;
    88a8:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    88ac:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    88b0:	aa18      	add	r2, sp, #96	; 0x60
    88b2:	4649      	mov	r1, r9
    88b4:	4628      	mov	r0, r5
    88b6:	f109 0b01 	add.w	fp, r9, #1
    88ba:	f000 fad7 	bl	8e6c <z_shell_cmd_get>
		if (match2 == NULL) {
    88be:	2800      	cmp	r0, #0
    88c0:	d063      	beq.n	898a <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    88c2:	68a3      	ldr	r3, [r4, #8]
    88c4:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    88c6:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    88ca:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    88cc:	f813 cb01 	ldrb.w	ip, [r3], #1
    88d0:	5c81      	ldrb	r1, [r0, r2]
    88d2:	4561      	cmp	r1, ip
    88d4:	d105      	bne.n	88e2 <shell_process+0x37a>
    88d6:	b121      	cbz	r1, 88e2 <shell_process+0x37a>
		common++;
    88d8:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    88da:	f64f 71ff 	movw	r1, #65535	; 0xffff
    88de:	428a      	cmp	r2, r1
    88e0:	d1f4      	bne.n	88cc <shell_process+0x364>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    88e2:	b10f      	cbz	r7, 88e8 <shell_process+0x380>
    88e4:	42ba      	cmp	r2, r7
    88e6:	db08      	blt.n	88fa <shell_process+0x392>
			common = (curr_common < common) ? curr_common : common;
    88e8:	4542      	cmp	r2, r8
			--cnt;
    88ea:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    88ee:	bfa8      	it	ge
    88f0:	4642      	movge	r2, r8
	while (cnt > 1) {
    88f2:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    88f4:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    88f8:	d047      	beq.n	898a <shell_process+0x422>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    88fa:	46d9      	mov	r9, fp
    88fc:	e7d8      	b.n	88b0 <shell_process+0x348>
		if (str && match->syntax &&
    88fe:	6800      	ldr	r0, [r0, #0]
    8900:	2800      	cmp	r0, #0
    8902:	d0a9      	beq.n	8858 <shell_process+0x2f0>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    8904:	9a06      	ldr	r2, [sp, #24]
    8906:	4651      	mov	r1, sl
    8908:	f021 fcee 	bl	2a2e8 <strncmp>
		if (str && match->syntax &&
    890c:	2800      	cmp	r0, #0
    890e:	d0a3      	beq.n	8858 <shell_process+0x2f0>
    8910:	e795      	b.n	883e <shell_process+0x2d6>
	longest_option += z_shell_strlen(tab);
    8912:	4658      	mov	r0, fp
    8914:	f01f f94c 	bl	27bb0 <z_shell_strlen>
    8918:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    891a:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    891c:	18c2      	adds	r2, r0, r3
    891e:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    8920:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    8922:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    8924:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    8926:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    8928:	f01f f942 	bl	27bb0 <z_shell_strlen>
    892c:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    892e:	4638      	mov	r0, r7
    8930:	f01f f93e 	bl	27bb0 <z_shell_strlen>
    8934:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    8936:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    893a:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    893e:	68a0      	ldr	r0, [r4, #8]
    8940:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    8944:	1a59      	subs	r1, r3, r1
    8946:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    894a:	b292      	uxth	r2, r2
    894c:	fbbc f1f2 	udiv	r1, ip, r2
    8950:	fb02 c211 	mls	r2, r2, r1, ip
    8954:	f10c 0e01 	add.w	lr, ip, #1
    8958:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    895a:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    895e:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    8962:	b95a      	cbnz	r2, 897c <shell_process+0x414>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    8964:	4a69      	ldr	r2, [pc, #420]	; (8b0c <shell_process+0x5a4>)
    8966:	9700      	str	r7, [sp, #0]
    8968:	465b      	mov	r3, fp
    896a:	2106      	movs	r1, #6
    896c:	4620      	mov	r0, r4
    896e:	f01f fd72 	bl	28456 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    8972:	4649      	mov	r1, r9
    8974:	4620      	mov	r0, r4
    8976:	f000 fac7 	bl	8f08 <z_shell_op_cursor_horiz_move>
    897a:	e772      	b.n	8862 <shell_process+0x2fa>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    897c:	4a64      	ldr	r2, [pc, #400]	; (8b10 <shell_process+0x5a8>)
    897e:	463b      	mov	r3, r7
    8980:	2106      	movs	r1, #6
    8982:	4620      	mov	r0, r4
    8984:	f01f fd67 	bl	28456 <z_shell_fprintf>
    8988:	e7f3      	b.n	8972 <shell_process+0x40a>
	if (common) {
    898a:	f1b8 0f00 	cmp.w	r8, #0
    898e:	f43f adfb 	beq.w	8588 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    8992:	eba8 0207 	sub.w	r2, r8, r7
    8996:	b292      	uxth	r2, r2
    8998:	eb0a 0107 	add.w	r1, sl, r7
    899c:	4620      	mov	r0, r4
    899e:	f01f fd98 	bl	284d2 <z_shell_op_completion_insert>
    89a2:	e5f1      	b.n	8588 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    89a4:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    89a8:	0799      	lsls	r1, r3, #30
    89aa:	f57f aded 	bpl.w	8588 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    89ae:	2101      	movs	r1, #1
    89b0:	f01f f945 	bl	27c3e <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    89b4:	4620      	mov	r0, r4
    89b6:	f01f fda9 	bl	2850c <z_shell_op_char_backspace>
    89ba:	e5e5      	b.n	8588 <shell_process+0x20>
    89bc:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    89c0:	0797      	lsls	r7, r2, #30
    89c2:	f57f ade1 	bpl.w	8588 <shell_process+0x20>
	switch (data) {
    89c6:	3b01      	subs	r3, #1
    89c8:	2b16      	cmp	r3, #22
    89ca:	f63f addd 	bhi.w	8588 <shell_process+0x20>
    89ce:	a201      	add	r2, pc, #4	; (adr r2, 89d4 <shell_process+0x46c>)
    89d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    89d4:	00008bbd 	.word	0x00008bbd
    89d8:	00008a31 	.word	0x00008a31
    89dc:	00008a39 	.word	0x00008a39
    89e0:	0000869d 	.word	0x0000869d
    89e4:	00008bb1 	.word	0x00008bb1
    89e8:	00008a57 	.word	0x00008a57
    89ec:	00008589 	.word	0x00008589
    89f0:	00008589 	.word	0x00008589
    89f4:	00008589 	.word	0x00008589
    89f8:	00008589 	.word	0x00008589
    89fc:	00008a5f 	.word	0x00008a5f
    8a00:	00008a67 	.word	0x00008a67
    8a04:	00008589 	.word	0x00008589
    8a08:	00008a91 	.word	0x00008a91
    8a0c:	00008589 	.word	0x00008589
    8a10:	00008a9b 	.word	0x00008a9b
    8a14:	00008589 	.word	0x00008589
    8a18:	00008589 	.word	0x00008589
    8a1c:	00008589 	.word	0x00008589
    8a20:	00008589 	.word	0x00008589
    8a24:	00008a9f 	.word	0x00008a9f
    8a28:	00008589 	.word	0x00008589
    8a2c:	00008acb 	.word	0x00008acb
		z_shell_op_left_arrow(shell);
    8a30:	4620      	mov	r0, r4
    8a32:	f01f fc6b 	bl	2830c <z_shell_op_left_arrow>
		break;
    8a36:	e5a7      	b.n	8588 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    8a38:	4620      	mov	r0, r4
    8a3a:	f01f fc60 	bl	282fe <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    8a3e:	4620      	mov	r0, r4
    8a40:	f01f fbb0 	bl	281a4 <z_shell_cursor_in_empty_line>
    8a44:	b910      	cbnz	r0, 8a4c <shell_process+0x4e4>
			z_cursor_next_line_move(shell);
    8a46:	6960      	ldr	r0, [r4, #20]
    8a48:	f7ff fbb4 	bl	81b4 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    8a4c:	68a0      	ldr	r0, [r4, #8]
    8a4e:	2101      	movs	r1, #1
    8a50:	f01f f8f5 	bl	27c3e <z_flag_history_exit_set.isra.0>
    8a54:	e608      	b.n	8668 <shell_process+0x100>
		z_shell_op_right_arrow(shell);
    8a56:	4620      	mov	r0, r4
    8a58:	f01f fc60 	bl	2831c <z_shell_op_right_arrow>
		break;
    8a5c:	e594      	b.n	8588 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    8a5e:	4620      	mov	r0, r4
    8a60:	f01f fc65 	bl	2832e <z_shell_op_delete_from_cursor>
		break;
    8a64:	e590      	b.n	8588 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    8a66:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    8a6a:	069e      	lsls	r6, r3, #26
    8a6c:	d503      	bpl.n	8a76 <shell_process+0x50e>
    8a6e:	4929      	ldr	r1, [pc, #164]	; (8b14 <shell_process+0x5ac>)
    8a70:	6960      	ldr	r0, [r4, #20]
    8a72:	f01f f8a3 	bl	27bbc <z_shell_raw_fprintf>
    8a76:	68a3      	ldr	r3, [r4, #8]
    8a78:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    8a7c:	069d      	lsls	r5, r3, #26
    8a7e:	d503      	bpl.n	8a88 <shell_process+0x520>
    8a80:	4925      	ldr	r1, [pc, #148]	; (8b18 <shell_process+0x5b0>)
    8a82:	6960      	ldr	r0, [r4, #20]
    8a84:	f01f f89a 	bl	27bbc <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    8a88:	4620      	mov	r0, r4
    8a8a:	f000 fb65 	bl	9158 <z_shell_print_prompt_and_cmd>
		break;
    8a8e:	e57b      	b.n	8588 <shell_process+0x20>
		history_handle(shell, false);
    8a90:	2100      	movs	r1, #0
		history_handle(shell, true);
    8a92:	4620      	mov	r0, r4
    8a94:	f7ff fb94 	bl	81c0 <history_handle>
		break;
    8a98:	e576      	b.n	8588 <shell_process+0x20>
		history_handle(shell, true);
    8a9a:	2101      	movs	r1, #1
    8a9c:	e7f9      	b.n	8a92 <shell_process+0x52a>
		z_shell_op_cursor_home_move(shell);
    8a9e:	4620      	mov	r0, r4
    8aa0:	f01f fc27 	bl	282f2 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    8aa4:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    8aa6:	2300      	movs	r3, #0
    8aa8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    8aac:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    8aae:	2101      	movs	r1, #1
    8ab0:	f01f f8c5 	bl	27c3e <z_flag_history_exit_set.isra.0>
    8ab4:	68a3      	ldr	r3, [r4, #8]
    8ab6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    8aba:	0698      	lsls	r0, r3, #26
    8abc:	f57f ad64 	bpl.w	8588 <shell_process+0x20>
    8ac0:	4916      	ldr	r1, [pc, #88]	; (8b1c <shell_process+0x5b4>)
    8ac2:	6960      	ldr	r0, [r4, #20]
    8ac4:	f01f f87a 	bl	27bbc <z_shell_raw_fprintf>
    8ac8:	e55e      	b.n	8588 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    8aca:	4620      	mov	r0, r4
    8acc:	f000 fa78 	bl	8fc0 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    8ad0:	68a0      	ldr	r0, [r4, #8]
    8ad2:	2101      	movs	r1, #1
    8ad4:	f01f f8b3 	bl	27c3e <z_flag_history_exit_set.isra.0>
		break;
    8ad8:	e556      	b.n	8588 <shell_process+0x20>
			if (data == '[') {
    8ada:	2b5b      	cmp	r3, #91	; 0x5b
    8adc:	d101      	bne.n	8ae2 <shell_process+0x57a>
	shell->ctx->receive_state = state;
    8ade:	2302      	movs	r3, #2
    8ae0:	e5e1      	b.n	86a6 <shell_process+0x13e>
	return sh->ctx->cfg.flags.echo == 1;
    8ae2:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    8ae6:	0791      	lsls	r1, r2, #30
    8ae8:	d506      	bpl.n	8af8 <shell_process+0x590>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    8aea:	2b62      	cmp	r3, #98	; 0x62
    8aec:	d108      	bne.n	8b00 <shell_process+0x598>
		z_shell_op_cursor_word_move(shell, -1);
    8aee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    8af2:	4620      	mov	r0, r4
    8af4:	f01f fbc1 	bl	2827a <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    8af8:	68a3      	ldr	r3, [r4, #8]
    8afa:	2200      	movs	r2, #0
    8afc:	715a      	strb	r2, [r3, #5]
}
    8afe:	e543      	b.n	8588 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    8b00:	2b66      	cmp	r3, #102	; 0x66
    8b02:	d1f9      	bne.n	8af8 <shell_process+0x590>
		z_shell_op_cursor_word_move(shell, 1);
    8b04:	2101      	movs	r1, #1
    8b06:	e7f4      	b.n	8af2 <shell_process+0x58a>
    8b08:	0003117e 	.word	0x0003117e
    8b0c:	00031b45 	.word	0x00031b45
    8b10:	000317de 	.word	0x000317de
    8b14:	0002e5c0 	.word	0x0002e5c0
    8b18:	0002e5c5 	.word	0x0002e5c5
    8b1c:	0002e5bb 	.word	0x0002e5bb
	shell->ctx->receive_state = state;
    8b20:	2200      	movs	r2, #0
    8b22:	7142      	strb	r2, [r0, #5]
    8b24:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    8b28:	0792      	lsls	r2, r2, #30
    8b2a:	f57f ad2d 	bpl.w	8588 <shell_process+0x20>
			switch (data) {
    8b2e:	3b31      	subs	r3, #49	; 0x31
    8b30:	2b1b      	cmp	r3, #27
    8b32:	f63f ad29 	bhi.w	8588 <shell_process+0x20>
    8b36:	a201      	add	r2, pc, #4	; (adr r2, 8b3c <shell_process+0x5d4>)
    8b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8b3c:	00008bb9 	.word	0x00008bb9
    8b40:	00008bc5 	.word	0x00008bc5
    8b44:	00008bd7 	.word	0x00008bd7
    8b48:	00008bad 	.word	0x00008bad
    8b4c:	00008589 	.word	0x00008589
    8b50:	00008589 	.word	0x00008589
    8b54:	00008589 	.word	0x00008589
    8b58:	00008589 	.word	0x00008589
    8b5c:	00008589 	.word	0x00008589
    8b60:	00008589 	.word	0x00008589
    8b64:	00008589 	.word	0x00008589
    8b68:	00008589 	.word	0x00008589
    8b6c:	00008589 	.word	0x00008589
    8b70:	00008589 	.word	0x00008589
    8b74:	00008589 	.word	0x00008589
    8b78:	00008589 	.word	0x00008589
    8b7c:	00008a9b 	.word	0x00008a9b
    8b80:	00008a91 	.word	0x00008a91
    8b84:	00008a57 	.word	0x00008a57
    8b88:	00008a31 	.word	0x00008a31
    8b8c:	00008589 	.word	0x00008589
    8b90:	00008bb1 	.word	0x00008bb1
    8b94:	00008589 	.word	0x00008589
    8b98:	00008bbd 	.word	0x00008bbd
    8b9c:	00008589 	.word	0x00008589
    8ba0:	00008589 	.word	0x00008589
    8ba4:	00008589 	.word	0x00008589
    8ba8:	00008bc9 	.word	0x00008bc9
	shell->ctx->receive_state = state;
    8bac:	2303      	movs	r3, #3
    8bae:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    8bb0:	4620      	mov	r0, r4
    8bb2:	f01f fba4 	bl	282fe <z_shell_op_cursor_end_move>
		break;
    8bb6:	e4e7      	b.n	8588 <shell_process+0x20>
	shell->ctx->receive_state = state;
    8bb8:	2303      	movs	r3, #3
    8bba:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    8bbc:	4620      	mov	r0, r4
    8bbe:	f01f fb98 	bl	282f2 <z_shell_op_cursor_home_move>
		break;
    8bc2:	e4e1      	b.n	8588 <shell_process+0x20>
	shell->ctx->receive_state = state;
    8bc4:	2303      	movs	r3, #3
    8bc6:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    8bc8:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    8bcc:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    8bd0:	f081 0101 	eor.w	r1, r1, #1
    8bd4:	e5ee      	b.n	87b4 <shell_process+0x24c>
	shell->ctx->receive_state = state;
    8bd6:	2303      	movs	r3, #3
    8bd8:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    8bda:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    8bde:	079b      	lsls	r3, r3, #30
    8be0:	f57f acd2 	bpl.w	8588 <shell_process+0x20>
    8be4:	e55a      	b.n	869c <shell_process+0x134>
	shell->ctx->receive_state = state;
    8be6:	2300      	movs	r3, #0
    8be8:	e55d      	b.n	86a6 <shell_process+0x13e>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    8bea:	2900      	cmp	r1, #0
    8bec:	f43f ad95 	beq.w	871a <shell_process+0x1b2>
    8bf0:	e5e4      	b.n	87bc <shell_process+0x254>
    8bf2:	bf00      	nop

00008bf4 <shell_init>:
{
    8bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8bf8:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    8bfa:	6880      	ldr	r0, [r0, #8]
{
    8bfc:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    8bfe:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    8c02:	b089      	sub	sp, #36	; 0x24
    8c04:	4615      	mov	r5, r2
    8c06:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    8c08:	2900      	cmp	r1, #0
    8c0a:	d161      	bne.n	8cd0 <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    8c0c:	f44f 7244 	mov.w	r2, #784	; 0x310
    8c10:	f021 fbaf 	bl	2a372 <memset>
	sh->ctx->prompt = sh->default_prompt;
    8c14:	68a3      	ldr	r3, [r4, #8]
    8c16:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    8c18:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    8c1a:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    8c1c:	f01f ff81 	bl	28b22 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    8c20:	68a0      	ldr	r0, [r4, #8]
    8c22:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    8c26:	f024 fca3 	bl	2d570 <z_impl_k_mutex_init>
    8c2a:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    8c2e:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    8c32:	68a0      	ldr	r0, [r4, #8]
    8c34:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    8c36:	f025 f96e 	bl	2df16 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    8c3a:	68a0      	ldr	r0, [r4, #8]
    8c3c:	2200      	movs	r2, #0
    8c3e:	1983      	adds	r3, r0, r6
    8c40:	2101      	movs	r1, #1
    8c42:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    8c44:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    8c46:	f025 f949 	bl	2dedc <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    8c4a:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    8c4e:	f109 0914 	add.w	r9, r9, #20
    8c52:	d1ee      	bne.n	8c32 <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    8c54:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    8c56:	68a0      	ldr	r0, [r4, #8]
    8c58:	2600      	movs	r6, #0
    8c5a:	2102      	movs	r1, #2
    8c5c:	601e      	str	r6, [r3, #0]
    8c5e:	f500 7019 	add.w	r0, r0, #612	; 0x264
    8c62:	f01e ff71 	bl	27b48 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    8c66:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    8c68:	4a1b      	ldr	r2, [pc, #108]	; (8cd8 <shell_init+0xe4>)
    8c6a:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    8c6c:	6818      	ldr	r0, [r3, #0]
    8c6e:	f01e ff9f 	bl	27bb0 <z_shell_strlen>
    8c72:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    8c74:	4a19      	ldr	r2, [pc, #100]	; (8cdc <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    8c76:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    8c7a:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    8c7c:	f366 0582 	bfi	r5, r6, #2, #1
    8c80:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    8c84:	6803      	ldr	r3, [r0, #0]
    8c86:	4641      	mov	r1, r8
    8c88:	681d      	ldr	r5, [r3, #0]
    8c8a:	4623      	mov	r3, r4
    8c8c:	47a8      	blx	r5
	if (ret == 0) {
    8c8e:	4605      	mov	r5, r0
    8c90:	b9d0      	cbnz	r0, 8cc8 <shell_init+0xd4>
	shell->ctx->state = state;
    8c92:	68a3      	ldr	r3, [r4, #8]
    8c94:	2201      	movs	r2, #1
    8c96:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    8c98:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8c9c:	2200      	movs	r2, #0
    8c9e:	2300      	movs	r3, #0
    8ca0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8ca4:	230e      	movs	r3, #14
    8ca6:	9303      	str	r3, [sp, #12]
    8ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8caa:	9504      	str	r5, [sp, #16]
    8cac:	e9cd 7301 	strd	r7, r3, [sp, #4]
    8cb0:	9400      	str	r4, [sp, #0]
    8cb2:	4b0b      	ldr	r3, [pc, #44]	; (8ce0 <shell_init+0xec>)
    8cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8cb8:	f01c fa88 	bl	251cc <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    8cbc:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    8cbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    8cc0:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    8cc4:	f01c f9d0 	bl	25068 <z_impl_k_thread_name_set>
}
    8cc8:	4628      	mov	r0, r5
    8cca:	b009      	add	sp, #36	; 0x24
    8ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    8cd0:	f06f 0577 	mvn.w	r5, #119	; 0x77
    8cd4:	e7f8      	b.n	8cc8 <shell_init+0xd4>
    8cd6:	bf00      	nop
    8cd8:	00500018 	.word	0x00500018
    8cdc:	00027bdb 	.word	0x00027bdb
    8ce0:	00008d31 	.word	0x00008d31

00008ce4 <shell_start>:
{
    8ce4:	b510      	push	{r4, lr}
    8ce6:	4604      	mov	r4, r0
	return shell->ctx->state;
    8ce8:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    8cea:	7903      	ldrb	r3, [r0, #4]
    8cec:	2b01      	cmp	r3, #1
    8cee:	d119      	bne.n	8d24 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8cf8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    8cfc:	f01e ff6b 	bl	27bd6 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    8d00:	2108      	movs	r1, #8
    8d02:	4620      	mov	r0, r4
    8d04:	f000 f91e 	bl	8f44 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    8d08:	4908      	ldr	r1, [pc, #32]	; (8d2c <shell_start+0x48>)
    8d0a:	6960      	ldr	r0, [r4, #20]
    8d0c:	f01e ff56 	bl	27bbc <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    8d10:	4620      	mov	r0, r4
    8d12:	f7ff fc05 	bl	8520 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    8d16:	68a0      	ldr	r0, [r4, #8]
    8d18:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    8d1c:	f01e ffa8 	bl	27c70 <k_mutex_unlock.isra.0>
	return 0;
    8d20:	2000      	movs	r0, #0
}
    8d22:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    8d24:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8d28:	e7fb      	b.n	8d22 <shell_start+0x3e>
    8d2a:	bf00      	nop
    8d2c:	000316be 	.word	0x000316be

00008d30 <shell_thread>:
{
    8d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d34:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    8d36:	6840      	ldr	r0, [r0, #4]
    8d38:	6803      	ldr	r3, [r0, #0]
{
    8d3a:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    8d3c:	689b      	ldr	r3, [r3, #8]
    8d3e:	2100      	movs	r1, #0
{
    8d40:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    8d42:	4798      	blx	r3
	if (err != 0) {
    8d44:	2800      	cmp	r0, #0
    8d46:	d14c      	bne.n	8de2 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    8d48:	b126      	cbz	r6, 8d54 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    8d4a:	69e0      	ldr	r0, [r4, #28]
    8d4c:	462a      	mov	r2, r5
    8d4e:	4621      	mov	r1, r4
    8d50:	f01f fcb0 	bl	286b4 <z_shell_log_backend_enable>
	err = shell_start(shell);
    8d54:	4620      	mov	r0, r4
    8d56:	f7ff ffc5 	bl	8ce4 <shell_start>
	if (err != 0) {
    8d5a:	2800      	cmp	r0, #0
    8d5c:	d141      	bne.n	8de2 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    8d5e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8de8 <shell_thread+0xb8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    8d62:	4f22      	ldr	r7, [pc, #136]	; (8dec <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    8d64:	4e22      	ldr	r6, [pc, #136]	; (8df0 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    8d66:	68a0      	ldr	r0, [r4, #8]
    8d68:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    8d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d74:	2103      	movs	r1, #3
    8d76:	f01d fb4b 	bl	26410 <z_impl_k_poll>
		if (err != 0) {
    8d7a:	4605      	mov	r5, r0
    8d7c:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d86:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    8d8a:	b175      	cbz	r5, 8daa <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8d8c:	f01e ff23 	bl	27bd6 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    8d90:	4620      	mov	r0, r4
    8d92:	462b      	mov	r3, r5
    8d94:	4a17      	ldr	r2, [pc, #92]	; (8df4 <shell_thread+0xc4>)
    8d96:	2101      	movs	r1, #1
    8d98:	f01f fb5d 	bl	28456 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    8d9c:	68a0      	ldr	r0, [r4, #8]
}
    8d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    8da2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    8da6:	f01e bf63 	b.w	27c70 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8daa:	f01e ff14 	bl	27bd6 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    8dae:	6860      	ldr	r0, [r4, #4]
    8db0:	6803      	ldr	r3, [r0, #0]
    8db2:	695b      	ldr	r3, [r3, #20]
    8db4:	b103      	cbz	r3, 8db8 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
    8db6:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    8db8:	4642      	mov	r2, r8
    8dba:	4620      	mov	r0, r4
    8dbc:	2102      	movs	r1, #2
    8dbe:	f01e fee1 	bl	27b84 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    8dc2:	463a      	mov	r2, r7
    8dc4:	4620      	mov	r0, r4
    8dc6:	2100      	movs	r1, #0
    8dc8:	f01e fedc 	bl	27b84 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    8dcc:	4620      	mov	r0, r4
    8dce:	4632      	mov	r2, r6
    8dd0:	2101      	movs	r1, #1
    8dd2:	f01e fed7 	bl	27b84 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    8dd6:	68a0      	ldr	r0, [r4, #8]
    8dd8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    8ddc:	f01e ff48 	bl	27c70 <k_mutex_unlock.isra.0>
    8de0:	e7c1      	b.n	8d66 <shell_thread+0x36>
}
    8de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8de6:	bf00      	nop
    8de8:	00027bef 	.word	0x00027bef
    8dec:	00008569 	.word	0x00008569
    8df0:	00027c75 	.word	0x00027c75
    8df4:	00031b4b 	.word	0x00031b4b

00008df8 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    8df8:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    8dfa:	4a0d      	ldr	r2, [pc, #52]	; (8e30 <cmd_help+0x38>)
{
    8dfc:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    8dfe:	2108      	movs	r1, #8
    8e00:	f01e ff99 	bl	27d36 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    8e04:	4620      	mov	r0, r4
    8e06:	4a0b      	ldr	r2, [pc, #44]	; (8e34 <cmd_help+0x3c>)
    8e08:	2108      	movs	r1, #8
    8e0a:	f01e ff94 	bl	27d36 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    8e0e:	4620      	mov	r0, r4
    8e10:	4a09      	ldr	r2, [pc, #36]	; (8e38 <cmd_help+0x40>)
    8e12:	2108      	movs	r1, #8
    8e14:	f01e ff8f 	bl	27d36 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    8e18:	4620      	mov	r0, r4
    8e1a:	4a08      	ldr	r2, [pc, #32]	; (8e3c <cmd_help+0x44>)
    8e1c:	2108      	movs	r1, #8
    8e1e:	f01e ff8a 	bl	27d36 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    8e22:	4620      	mov	r0, r4
    8e24:	4a06      	ldr	r2, [pc, #24]	; (8e40 <cmd_help+0x48>)
    8e26:	2100      	movs	r1, #0
    8e28:	f000 f9b4 	bl	9194 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    8e2c:	2000      	movs	r0, #0
    8e2e:	bd10      	pop	{r4, pc}
    8e30:	00031b62 	.word	0x00031b62
    8e34:	00031ba0 	.word	0x00031ba0
    8e38:	00031bff 	.word	0x00031bff
    8e3c:	00031c53 	.word	0x00031c53
    8e40:	00031ced 	.word	0x00031ced

00008e44 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    8e44:	b510      	push	{r4, lr}
    8e46:	4604      	mov	r4, r0
    8e48:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    8e4a:	460a      	mov	r2, r1
    8e4c:	4601      	mov	r1, r0
    8e4e:	4806      	ldr	r0, [pc, #24]	; (8e68 <z_shell_fprintf_fmt+0x24>)
    8e50:	f7fc ffbe 	bl	5dd0 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    8e54:	6923      	ldr	r3, [r4, #16]
    8e56:	791b      	ldrb	r3, [r3, #4]
    8e58:	b123      	cbz	r3, 8e64 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    8e5a:	4620      	mov	r0, r4
	}
}
    8e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    8e60:	f01e bf79 	b.w	27d56 <z_shell_fprintf_buffer_flush>
}
    8e64:	bd10      	pop	{r4, pc}
    8e66:	bf00      	nop
    8e68:	00027d6f 	.word	0x00027d6f

00008e6c <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    8e6c:	b510      	push	{r4, lr}
    8e6e:	460b      	mov	r3, r1
    8e70:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    8e72:	b950      	cbnz	r0, 8e8a <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    8e74:	490e      	ldr	r1, [pc, #56]	; (8eb0 <z_shell_cmd_get+0x44>)
    8e76:	4a0f      	ldr	r2, [pc, #60]	; (8eb4 <z_shell_cmd_get+0x48>)
    8e78:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    8e7a:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    8e7e:	d20f      	bcs.n	8ea0 <z_shell_cmd_get+0x34>
    8e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    8e84:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    8e86:	4620      	mov	r0, r4
    8e88:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    8e8a:	6881      	ldr	r1, [r0, #8]
    8e8c:	b141      	cbz	r1, 8ea0 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    8e8e:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    8e90:	7809      	ldrb	r1, [r1, #0]
    8e92:	b139      	cbz	r1, 8ea4 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    8e94:	4618      	mov	r0, r3
    8e96:	4621      	mov	r1, r4
    8e98:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    8e9a:	6823      	ldr	r3, [r4, #0]
    8e9c:	2b00      	cmp	r3, #0
    8e9e:	d1f2      	bne.n	8e86 <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    8ea0:	2400      	movs	r4, #0
    8ea2:	e7f0      	b.n	8e86 <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    8ea4:	2014      	movs	r0, #20
    8ea6:	4343      	muls	r3, r0
    8ea8:	18d4      	adds	r4, r2, r3
    8eaa:	58d3      	ldr	r3, [r2, r3]
    8eac:	e7f6      	b.n	8e9c <z_shell_cmd_get+0x30>
    8eae:	bf00      	nop
    8eb0:	0002e450 	.word	0x0002e450
    8eb4:	0002e508 	.word	0x0002e508

00008eb8 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    8eb8:	6883      	ldr	r3, [r0, #8]
    8eba:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    8ebe:	069b      	lsls	r3, r3, #26
    8ec0:	d503      	bpl.n	8eca <z_clear_eos+0x12>
    8ec2:	4902      	ldr	r1, [pc, #8]	; (8ecc <z_clear_eos+0x14>)
    8ec4:	6940      	ldr	r0, [r0, #20]
    8ec6:	f01f b94c 	b.w	28162 <z_shell_raw_fprintf>
}
    8eca:	4770      	bx	lr
    8ecc:	0002e5cb 	.word	0x0002e5cb

00008ed0 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    8ed0:	4901      	ldr	r1, [pc, #4]	; (8ed8 <z_cursor_next_line_move.isra.0+0x8>)
    8ed2:	f01f b946 	b.w	28162 <z_shell_raw_fprintf>
    8ed6:	bf00      	nop
    8ed8:	000316bf 	.word	0x000316bf

00008edc <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    8edc:	1e0a      	subs	r2, r1, #0
    8ede:	dc0d      	bgt.n	8efc <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    8ee0:	d00e      	beq.n	8f00 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    8ee2:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    8ee4:	6881      	ldr	r1, [r0, #8]
    8ee6:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    8eea:	0689      	lsls	r1, r1, #26
    8eec:	d508      	bpl.n	8f00 <z_shell_op_cursor_vert_move+0x24>
    8eee:	2a00      	cmp	r2, #0
    8ef0:	4904      	ldr	r1, [pc, #16]	; (8f04 <z_shell_op_cursor_vert_move+0x28>)
    8ef2:	6940      	ldr	r0, [r0, #20]
    8ef4:	bfb8      	it	lt
    8ef6:	4252      	neglt	r2, r2
    8ef8:	f01f b933 	b.w	28162 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    8efc:	2341      	movs	r3, #65	; 0x41
    8efe:	e7f1      	b.n	8ee4 <z_shell_op_cursor_vert_move+0x8>
}
    8f00:	4770      	bx	lr
    8f02:	bf00      	nop
    8f04:	00031d1c 	.word	0x00031d1c

00008f08 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    8f08:	1e0a      	subs	r2, r1, #0
    8f0a:	dc0d      	bgt.n	8f28 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    8f0c:	d00e      	beq.n	8f2c <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    8f0e:	2344      	movs	r3, #68	; 0x44
    8f10:	6881      	ldr	r1, [r0, #8]
    8f12:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    8f16:	0689      	lsls	r1, r1, #26
    8f18:	d508      	bpl.n	8f2c <z_shell_op_cursor_horiz_move+0x24>
    8f1a:	2a00      	cmp	r2, #0
    8f1c:	4904      	ldr	r1, [pc, #16]	; (8f30 <z_shell_op_cursor_horiz_move+0x28>)
    8f1e:	6940      	ldr	r0, [r0, #20]
    8f20:	bfb8      	it	lt
    8f22:	4252      	neglt	r2, r2
    8f24:	f01f b91d 	b.w	28162 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    8f28:	2343      	movs	r3, #67	; 0x43
    8f2a:	e7f1      	b.n	8f10 <z_shell_op_cursor_horiz_move+0x8>
}
    8f2c:	4770      	bx	lr
    8f2e:	bf00      	nop
    8f30:	00031d1c 	.word	0x00031d1c

00008f34 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    8f34:	6882      	ldr	r2, [r0, #8]
    8f36:	4902      	ldr	r1, [pc, #8]	; (8f40 <z_shell_print_cmd+0xc>)
    8f38:	6940      	ldr	r0, [r0, #20]
    8f3a:	3242      	adds	r2, #66	; 0x42
    8f3c:	f01f b911 	b.w	28162 <z_shell_raw_fprintf>
    8f40:	000317de 	.word	0x000317de

00008f44 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    8f44:	2908      	cmp	r1, #8
{
    8f46:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    8f48:	d816      	bhi.n	8f78 <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    8f4a:	6883      	ldr	r3, [r0, #8]
    8f4c:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    8f50:	4291      	cmp	r1, r2
    8f52:	d011      	beq.n	8f78 <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    8f54:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    8f56:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    8f5a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    8f5e:	d005      	beq.n	8f6c <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    8f60:	0699      	lsls	r1, r3, #26
    8f62:	d509      	bpl.n	8f78 <z_shell_vt100_color_set+0x34>
    8f64:	4905      	ldr	r1, [pc, #20]	; (8f7c <z_shell_vt100_color_set+0x38>)
    8f66:	6940      	ldr	r0, [r0, #20]
    8f68:	f01f b8fb 	b.w	28162 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    8f6c:	069b      	lsls	r3, r3, #26
    8f6e:	d503      	bpl.n	8f78 <z_shell_vt100_color_set+0x34>
    8f70:	4903      	ldr	r1, [pc, #12]	; (8f80 <z_shell_vt100_color_set+0x3c>)
    8f72:	6940      	ldr	r0, [r0, #20]
    8f74:	f01f b8f5 	b.w	28162 <z_shell_raw_fprintf>
	}
}
    8f78:	4770      	bx	lr
    8f7a:	bf00      	nop
    8f7c:	00031d23 	.word	0x00031d23
    8f80:	0002e5d0 	.word	0x0002e5d0

00008f84 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    8f84:	b538      	push	{r3, r4, r5, lr}
    8f86:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    8f88:	7809      	ldrb	r1, [r1, #0]
{
    8f8a:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    8f8c:	f7ff ffda 	bl	8f44 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    8f90:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    8f92:	2a07      	cmp	r2, #7
    8f94:	d810      	bhi.n	8fb8 <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    8f96:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    8f98:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    8f9c:	4291      	cmp	r1, r2
    8f9e:	d00b      	beq.n	8fb8 <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    8fa0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    8fa4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    8fa8:	069b      	lsls	r3, r3, #26
    8faa:	d505      	bpl.n	8fb8 <z_shell_vt100_colors_restore+0x34>
    8fac:	6960      	ldr	r0, [r4, #20]
    8fae:	4903      	ldr	r1, [pc, #12]	; (8fbc <z_shell_vt100_colors_restore+0x38>)
}
    8fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    8fb4:	f01f b8d5 	b.w	28162 <z_shell_raw_fprintf>
}
    8fb8:	bd38      	pop	{r3, r4, r5, pc}
    8fba:	bf00      	nop
    8fbc:	00031d2c 	.word	0x00031d2c

00008fc0 <z_shell_op_word_remove>:
{
    8fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    8fc2:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    8fc4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    8fc6:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    8fc8:	2a00      	cmp	r2, #0
    8fca:	d04e      	beq.n	906a <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    8fcc:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    8fce:	2800      	cmp	r0, #0
    8fd0:	d04b      	beq.n	906a <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    8fd2:	3041      	adds	r0, #65	; 0x41
    8fd4:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    8fd6:	f103 0642 	add.w	r6, r3, #66	; 0x42
    8fda:	4603      	mov	r3, r0
    8fdc:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    8fde:	42b3      	cmp	r3, r6
    8fe0:	b2a4      	uxth	r4, r4
    8fe2:	4619      	mov	r1, r3
    8fe4:	d30d      	bcc.n	9002 <z_shell_op_word_remove+0x42>
    8fe6:	f811 7901 	ldrb.w	r7, [r1], #-1
    8fea:	2f20      	cmp	r7, #32
    8fec:	d03b      	beq.n	9066 <z_shell_op_word_remove+0xa6>
    8fee:	4619      	mov	r1, r3
    8ff0:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    8ff2:	7808      	ldrb	r0, [r1, #0]
    8ff4:	2820      	cmp	r0, #32
    8ff6:	d004      	beq.n	9002 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    8ff8:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    8ffa:	429e      	cmp	r6, r3
		++chars_to_delete;
    8ffc:	b2a4      	uxth	r4, r4
		--str;
    8ffe:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    9000:	d9f5      	bls.n	8fee <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    9002:	1c63      	adds	r3, r4, #1
    9004:	1c4e      	adds	r6, r1, #1
    9006:	1b12      	subs	r2, r2, r4
    9008:	4419      	add	r1, r3
    900a:	4630      	mov	r0, r6
    900c:	f021 f98e 	bl	2a32c <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    9010:	68a9      	ldr	r1, [r5, #8]
    9012:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    9014:	1b12      	subs	r2, r2, r4
    9016:	b292      	uxth	r2, r2
    9018:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    901a:	440a      	add	r2, r1
    901c:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    901e:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    9020:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    9024:	b209      	sxth	r1, r1
    9026:	4628      	mov	r0, r5
    9028:	f01f f903 	bl	28232 <z_shell_op_cursor_move>
    902c:	68ab      	ldr	r3, [r5, #8]
    902e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    9032:	069a      	lsls	r2, r3, #26
    9034:	d503      	bpl.n	903e <z_shell_op_word_remove+0x7e>
    9036:	490d      	ldr	r1, [pc, #52]	; (906c <z_shell_op_word_remove+0xac>)
    9038:	6968      	ldr	r0, [r5, #20]
    903a:	f01f f892 	bl	28162 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    903e:	4633      	mov	r3, r6
    9040:	4a0b      	ldr	r2, [pc, #44]	; (9070 <z_shell_op_word_remove+0xb0>)
    9042:	2108      	movs	r1, #8
    9044:	4628      	mov	r0, r5
    9046:	f01f fa06 	bl	28456 <z_shell_fprintf>
	z_clear_eos(shell);
    904a:	4628      	mov	r0, r5
    904c:	f7ff ff34 	bl	8eb8 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9050:	68ab      	ldr	r3, [r5, #8]
    9052:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    9056:	069b      	lsls	r3, r3, #26
    9058:	d507      	bpl.n	906a <z_shell_op_word_remove+0xaa>
    905a:	6968      	ldr	r0, [r5, #20]
    905c:	4905      	ldr	r1, [pc, #20]	; (9074 <z_shell_op_word_remove+0xb4>)
}
    905e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9062:	f01f b87e 	b.w	28162 <z_shell_raw_fprintf>
    9066:	460b      	mov	r3, r1
    9068:	e7b8      	b.n	8fdc <z_shell_op_word_remove+0x1c>
    906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    906c:	0002e5d5 	.word	0x0002e5d5
    9070:	000317de 	.word	0x000317de
    9074:	0002e5d9 	.word	0x0002e5d9

00009078 <reprint_from_cursor>:
{
    9078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    907c:	4604      	mov	r4, r0
    907e:	460d      	mov	r5, r1
	if (data_removed) {
    9080:	4617      	mov	r7, r2
    9082:	b10a      	cbz	r2, 9088 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    9084:	f7ff ff18 	bl	8eb8 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    9088:	68a3      	ldr	r3, [r4, #8]
    908a:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    908e:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    9090:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    9092:	f100 0042 	add.w	r0, r0, #66	; 0x42
    9096:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    9098:	d51f      	bpl.n	90da <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    909a:	4618      	mov	r0, r3
    909c:	f021 f908 	bl	2a2b0 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    90a0:	f8df 8044 	ldr.w	r8, [pc, #68]	; 90e8 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    90a4:	4606      	mov	r6, r0
		while (len--) {
    90a6:	b996      	cbnz	r6, 90ce <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    90a8:	68a3      	ldr	r3, [r4, #8]
    90aa:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    90ac:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    90ae:	4620      	mov	r0, r4
    90b0:	f01f f864 	bl	2817c <full_line_cmd>
    90b4:	b120      	cbz	r0, 90c0 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    90b6:	b107      	cbz	r7, 90ba <reprint_from_cursor+0x42>
    90b8:	b115      	cbz	r5, 90c0 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    90ba:	6960      	ldr	r0, [r4, #20]
    90bc:	f7ff ff08 	bl	8ed0 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    90c0:	4269      	negs	r1, r5
    90c2:	4620      	mov	r0, r4
    90c4:	b209      	sxth	r1, r1
}
    90c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    90ca:	f01f b8b2 	b.w	28232 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    90ce:	6960      	ldr	r0, [r4, #20]
    90d0:	4641      	mov	r1, r8
    90d2:	f01f f846 	bl	28162 <z_shell_raw_fprintf>
    90d6:	3e01      	subs	r6, #1
    90d8:	e7e5      	b.n	90a6 <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    90da:	4a04      	ldr	r2, [pc, #16]	; (90ec <reprint_from_cursor+0x74>)
    90dc:	2108      	movs	r1, #8
    90de:	4620      	mov	r0, r4
    90e0:	f01f f9b9 	bl	28456 <z_shell_fprintf>
    90e4:	e7e0      	b.n	90a8 <reprint_from_cursor+0x30>
    90e6:	bf00      	nop
    90e8:	00032a84 	.word	0x00032a84
    90ec:	000317de 	.word	0x000317de

000090f0 <z_shell_op_char_insert>:
{
    90f0:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    90f2:	6883      	ldr	r3, [r0, #8]
    90f4:	f88d 1007 	strb.w	r1, [sp, #7]
    90f8:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    90fc:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    90fe:	07d0      	lsls	r0, r2, #31
    9100:	d521      	bpl.n	9146 <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    9102:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    9104:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    9106:	428a      	cmp	r2, r1
    9108:	d01d      	beq.n	9146 <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    910a:	1c48      	adds	r0, r1, #1
    910c:	4419      	add	r1, r3
		char_replace(shell, data);
    910e:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    9112:	87d8      	strh	r0, [r3, #62]	; 0x3e
    9114:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    9118:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    911c:	0789      	lsls	r1, r1, #30
    911e:	d510      	bpl.n	9142 <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    9120:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    9124:	6960      	ldr	r0, [r4, #20]
    9126:	490b      	ldr	r1, [pc, #44]	; (9154 <z_shell_op_char_insert+0x64>)
		data = '*';
    9128:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    912c:	bf18      	it	ne
    912e:	222a      	movne	r2, #42	; 0x2a
    9130:	f01f f817 	bl	28162 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    9134:	4620      	mov	r0, r4
    9136:	f01f f835 	bl	281a4 <z_shell_cursor_in_empty_line>
    913a:	b110      	cbz	r0, 9142 <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    913c:	6960      	ldr	r0, [r4, #20]
    913e:	f7ff fec7 	bl	8ed0 <z_cursor_next_line_move.isra.0>
}
    9142:	b002      	add	sp, #8
    9144:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    9146:	2201      	movs	r2, #1
    9148:	f10d 0107 	add.w	r1, sp, #7
    914c:	4620      	mov	r0, r4
    914e:	f01f f98f 	bl	28470 <data_insert>
}
    9152:	e7f6      	b.n	9142 <z_shell_op_char_insert+0x52>
    9154:	00031d20 	.word	0x00031d20

00009158 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    9158:	6883      	ldr	r3, [r0, #8]
    915a:	4a0a      	ldr	r2, [pc, #40]	; (9184 <z_shell_print_prompt_and_cmd+0x2c>)
    915c:	681b      	ldr	r3, [r3, #0]
{
    915e:	b510      	push	{r4, lr}
    9160:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    9162:	2102      	movs	r1, #2
    9164:	f01f f977 	bl	28456 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    9168:	68a3      	ldr	r3, [r4, #8]
    916a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    916e:	079b      	lsls	r3, r3, #30
    9170:	d507      	bpl.n	9182 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    9172:	4620      	mov	r0, r4
    9174:	f7ff fede 	bl	8f34 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    9178:	4620      	mov	r0, r4
}
    917a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    917e:	f01f b835 	b.w	281ec <z_shell_op_cursor_position_synchronize>
}
    9182:	bd10      	pop	{r4, pc}
    9184:	000317de 	.word	0x000317de

00009188 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    9188:	4901      	ldr	r1, [pc, #4]	; (9190 <z_cursor_next_line_move.isra.0+0x8>)
    918a:	f01f bb1b 	b.w	287c4 <z_shell_raw_fprintf>
    918e:	bf00      	nop
    9190:	000316bf 	.word	0x000316bf

00009194 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    9194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9198:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    919a:	2100      	movs	r1, #0
{
    919c:	b08d      	sub	sp, #52	; 0x34
    919e:	4604      	mov	r4, r0
    91a0:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    91a2:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    91a4:	aa07      	add	r2, sp, #28
    91a6:	4630      	mov	r0, r6
    91a8:	f101 0801 	add.w	r8, r1, #1
    91ac:	f7ff fe5e 	bl	8e6c <z_shell_cmd_get>
    91b0:	b9a0      	cbnz	r0, 91dc <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    91b2:	b185      	cbz	r5, 91d6 <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    91b4:	b127      	cbz	r7, 91c0 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    91b6:	463a      	mov	r2, r7
    91b8:	2108      	movs	r1, #8
    91ba:	4620      	mov	r0, r4
    91bc:	f01f f94b 	bl	28456 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    91c0:	4f1e      	ldr	r7, [pc, #120]	; (923c <z_shell_help_subcmd_print+0xa8>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    91c2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 9240 <z_shell_help_subcmd_print+0xac>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    91c6:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    91c8:	aa07      	add	r2, sp, #28
    91ca:	4630      	mov	r0, r6
    91cc:	f101 0801 	add.w	r8, r1, #1
    91d0:	f7ff fe4c 	bl	8e6c <z_shell_cmd_get>
    91d4:	b960      	cbnz	r0, 91f0 <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    91d6:	b00d      	add	sp, #52	; 0x34
    91d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    91dc:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    91de:	b110      	cbz	r0, 91e6 <z_shell_help_subcmd_print+0x52>
    91e0:	f021 f866 	bl	2a2b0 <strlen>
    91e4:	b280      	uxth	r0, r0
    91e6:	4285      	cmp	r5, r0
    91e8:	bf38      	it	cc
    91ea:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    91ec:	4641      	mov	r1, r8
    91ee:	e7d9      	b.n	91a4 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    91f0:	6803      	ldr	r3, [r0, #0]
    91f2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    91f6:	4811      	ldr	r0, [pc, #68]	; (923c <z_shell_help_subcmd_print+0xa8>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    91f8:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    91fa:	f021 f859 	bl	2a2b0 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    91fe:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    9200:	4683      	mov	fp, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    9202:	b183      	cbz	r3, 9226 <z_shell_help_subcmd_print+0x92>
    9204:	781a      	ldrb	r2, [r3, #0]
    9206:	b172      	cbz	r2, 9226 <z_shell_help_subcmd_print+0x92>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    9208:	e9cd 3701 	strd	r3, r7, [sp, #4]
    920c:	9500      	str	r5, [sp, #0]
    920e:	463b      	mov	r3, r7
    9210:	464a      	mov	r2, r9
    9212:	2108      	movs	r1, #8
    9214:	4620      	mov	r0, r4
    9216:	f01f f91e 	bl	28456 <z_shell_fprintf>
	if (item_help == NULL) {
    921a:	f1ba 0f00 	cmp.w	sl, #0
    921e:	d104      	bne.n	922a <z_shell_help_subcmd_print+0x96>
		z_cursor_next_line_move(shell);
    9220:	6960      	ldr	r0, [r4, #20]
    9222:	f7ff ffb1 	bl	9188 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    9226:	4641      	mov	r1, r8
    9228:	e7ce      	b.n	91c8 <z_shell_help_subcmd_print+0x34>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    922a:	1c6a      	adds	r2, r5, #1
    922c:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    9230:	b292      	uxth	r2, r2
    9232:	4651      	mov	r1, sl
    9234:	4620      	mov	r0, r4
    9236:	f01f fad2 	bl	287de <formatted_text_print.constprop.0>
    923a:	e7f4      	b.n	9226 <z_shell_help_subcmd_print+0x92>
    923c:	00031d4d 	.word	0x00031d4d
    9240:	00031d35 	.word	0x00031d35

00009244 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    9244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9246:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    9248:	6808      	ldr	r0, [r1, #0]
{
    924a:	460d      	mov	r5, r1
    924c:	b1b8      	cbz	r0, 927e <z_shell_help_cmd_print+0x3a>
    924e:	f021 f82f 	bl	2a2b0 <strlen>
    9252:	b284      	uxth	r4, r0
    9254:	4f0b      	ldr	r7, [pc, #44]	; (9284 <z_shell_help_cmd_print+0x40>)
    9256:	4638      	mov	r0, r7
    9258:	f021 f82a 	bl	2a2b0 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    925c:	682b      	ldr	r3, [r5, #0]
    925e:	4a0a      	ldr	r2, [pc, #40]	; (9288 <z_shell_help_cmd_print+0x44>)
    9260:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    9262:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    9264:	2108      	movs	r1, #8
    9266:	4630      	mov	r0, r6
    9268:	f01f f8f5 	bl	28456 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    926c:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    926e:	6869      	ldr	r1, [r5, #4]
    9270:	4622      	mov	r2, r4
    9272:	4630      	mov	r0, r6
}
    9274:	b003      	add	sp, #12
    9276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    927a:	f01f bab0 	b.w	287de <formatted_text_print.constprop.0>
    927e:	4604      	mov	r4, r0
    9280:	e7e8      	b.n	9254 <z_shell_help_cmd_print+0x10>
    9282:	bf00      	nop
    9284:	00031d49 	.word	0x00031d49
    9288:	00031b46 	.word	0x00031b46

0000928c <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    928c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    928e:	4907      	ldr	r1, [pc, #28]	; (92ac <z_shell_help_request+0x20>)
{
    9290:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    9292:	f021 f81d 	bl	2a2d0 <strcmp>
    9296:	b138      	cbz	r0, 92a8 <z_shell_help_request+0x1c>
    9298:	4905      	ldr	r1, [pc, #20]	; (92b0 <z_shell_help_request+0x24>)
    929a:	4620      	mov	r0, r4
    929c:	f021 f818 	bl	2a2d0 <strcmp>
    92a0:	fab0 f080 	clz	r0, r0
    92a4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    92a6:	bd10      	pop	{r4, pc}
		return true;
    92a8:	2001      	movs	r0, #1
    92aa:	e7fc      	b.n	92a6 <z_shell_help_request+0x1a>
    92ac:	00031d3f 	.word	0x00031d3f
    92b0:	00031d42 	.word	0x00031d42

000092b4 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    92b4:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    92b6:	6883      	ldr	r3, [r0, #8]
    92b8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    92bc:	069b      	lsls	r3, r3, #26
{
    92be:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    92c0:	d503      	bpl.n	92ca <cmd_resize_default+0x16>
    92c2:	4904      	ldr	r1, [pc, #16]	; (92d4 <cmd_resize_default+0x20>)
    92c4:	6940      	ldr	r0, [r0, #20]
    92c6:	f01f fb01 	bl	288cc <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    92ca:	68a3      	ldr	r3, [r4, #8]
    92cc:	4a02      	ldr	r2, [pc, #8]	; (92d8 <cmd_resize_default+0x24>)
    92ce:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    92d0:	2000      	movs	r0, #0
    92d2:	bd10      	pop	{r4, pc}
    92d4:	0002e5dd 	.word	0x0002e5dd
    92d8:	00500018 	.word	0x00500018

000092dc <cmd_shell_stats_show>:
{
    92dc:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    92de:	6983      	ldr	r3, [r0, #24]
    92e0:	4a03      	ldr	r2, [pc, #12]	; (92f0 <cmd_shell_stats_show+0x14>)
    92e2:	681b      	ldr	r3, [r3, #0]
    92e4:	2108      	movs	r1, #8
    92e6:	f01e fd26 	bl	27d36 <shell_fprintf>
}
    92ea:	2000      	movs	r0, #0
    92ec:	bd08      	pop	{r3, pc}
    92ee:	bf00      	nop
    92f0:	00031d50 	.word	0x00031d50

000092f4 <cmd_history>:
{
    92f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    92f6:	4e0f      	ldr	r6, [pc, #60]	; (9334 <cmd_history+0x40>)
{
    92f8:	4604      	mov	r4, r0
    92fa:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    92fc:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    92fe:	68e0      	ldr	r0, [r4, #12]
    9300:	f10d 030e 	add.w	r3, sp, #14
    9304:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    9308:	2101      	movs	r1, #1
    930a:	f01f fb67 	bl	289dc <z_shell_history_get>
		if (len) {
    930e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    9312:	68a3      	ldr	r3, [r4, #8]
    9314:	b150      	cbz	r0, 932c <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    9316:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    931a:	9300      	str	r3, [sp, #0]
    931c:	4632      	mov	r2, r6
    931e:	462b      	mov	r3, r5
    9320:	2108      	movs	r1, #8
    9322:	4620      	mov	r0, r4
    9324:	f01e fd07 	bl	27d36 <shell_fprintf>
	while (1) {
    9328:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    932a:	e7e7      	b.n	92fc <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    932c:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    9330:	b004      	add	sp, #16
    9332:	bd70      	pop	{r4, r5, r6, pc}
    9334:	00031d60 	.word	0x00031d60

00009338 <cmd_echo>:
	if (argc == 2) {
    9338:	2902      	cmp	r1, #2
{
    933a:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    933c:	d10d      	bne.n	935a <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    933e:	6853      	ldr	r3, [r2, #4]
    9340:	9301      	str	r3, [sp, #4]
    9342:	4b0e      	ldr	r3, [pc, #56]	; (937c <cmd_echo+0x44>)
    9344:	9300      	str	r3, [sp, #0]
    9346:	6813      	ldr	r3, [r2, #0]
    9348:	4a0d      	ldr	r2, [pc, #52]	; (9380 <cmd_echo+0x48>)
    934a:	2101      	movs	r1, #1
    934c:	f01e fcf3 	bl	27d36 <shell_fprintf>
    9350:	f06f 0015 	mvn.w	r0, #21
}
    9354:	b003      	add	sp, #12
    9356:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    935a:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    935c:	4a09      	ldr	r2, [pc, #36]	; (9384 <cmd_echo+0x4c>)
    935e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    9362:	f013 0f02 	tst.w	r3, #2
    9366:	f04f 0108 	mov.w	r1, #8
    936a:	4b07      	ldr	r3, [pc, #28]	; (9388 <cmd_echo+0x50>)
    936c:	bf18      	it	ne
    936e:	4613      	movne	r3, r2
    9370:	4a06      	ldr	r2, [pc, #24]	; (938c <cmd_echo+0x54>)
    9372:	f01e fce0 	bl	27d36 <shell_fprintf>
	return 0;
    9376:	2000      	movs	r0, #0
    9378:	e7ec      	b.n	9354 <cmd_echo+0x1c>
    937a:	bf00      	nop
    937c:	00031d77 	.word	0x00031d77
    9380:	00031d6e 	.word	0x00031d6e
    9384:	00030ff9 	.word	0x00030ff9
    9388:	00031d6a 	.word	0x00031d6a
    938c:	00031d8c 	.word	0x00031d8c

00009390 <cmd_clear>:
{
    9390:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    9392:	6883      	ldr	r3, [r0, #8]
    9394:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    9398:	069a      	lsls	r2, r3, #26
{
    939a:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    939c:	d503      	bpl.n	93a6 <cmd_clear+0x16>
    939e:	4907      	ldr	r1, [pc, #28]	; (93bc <cmd_clear+0x2c>)
    93a0:	6940      	ldr	r0, [r0, #20]
    93a2:	f01f fa93 	bl	288cc <z_shell_raw_fprintf>
    93a6:	68a3      	ldr	r3, [r4, #8]
    93a8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    93ac:	069b      	lsls	r3, r3, #26
    93ae:	d503      	bpl.n	93b8 <cmd_clear+0x28>
    93b0:	4903      	ldr	r1, [pc, #12]	; (93c0 <cmd_clear+0x30>)
    93b2:	6960      	ldr	r0, [r4, #20]
    93b4:	f01f fa8a 	bl	288cc <z_shell_raw_fprintf>
}
    93b8:	2000      	movs	r0, #0
    93ba:	bd10      	pop	{r4, pc}
    93bc:	0002e5e4 	.word	0x0002e5e4
    93c0:	0002e5e9 	.word	0x0002e5e9

000093c4 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    93c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    93c6:	2901      	cmp	r1, #1
{
    93c8:	b085      	sub	sp, #20
    93ca:	4604      	mov	r4, r0
	if (argc != 1) {
    93cc:	d00d      	beq.n	93ea <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    93ce:	6853      	ldr	r3, [r2, #4]
    93d0:	9301      	str	r3, [sp, #4]
    93d2:	4b59      	ldr	r3, [pc, #356]	; (9538 <cmd_resize+0x174>)
    93d4:	9300      	str	r3, [sp, #0]
    93d6:	6813      	ldr	r3, [r2, #0]
    93d8:	4a58      	ldr	r2, [pc, #352]	; (953c <cmd_resize+0x178>)
    93da:	2101      	movs	r1, #1
    93dc:	f01e fcab 	bl	27d36 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    93e0:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    93e4:	4628      	mov	r0, r5
    93e6:	b005      	add	sp, #20
    93e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93ea:	6883      	ldr	r3, [r0, #8]
    93ec:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    93f0:	069a      	lsls	r2, r3, #26
    93f2:	d503      	bpl.n	93fc <cmd_resize+0x38>
    93f4:	4952      	ldr	r1, [pc, #328]	; (9540 <cmd_resize+0x17c>)
    93f6:	6940      	ldr	r0, [r0, #20]
    93f8:	f01f fa68 	bl	288cc <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    93fc:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    9400:	4620      	mov	r0, r4
    9402:	f7ff fd6b 	bl	8edc <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    9406:	21fa      	movs	r1, #250	; 0xfa
    9408:	4620      	mov	r0, r4
    940a:	f7ff fd7d 	bl	8f08 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    940e:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    9410:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    9412:	f44f 7280 	mov.w	r2, #256	; 0x100
    9416:	4629      	mov	r1, r5
    9418:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    941c:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    9420:	f020 ffa7 	bl	2a372 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    9424:	4947      	ldr	r1, [pc, #284]	; (9544 <cmd_resize+0x180>)
    9426:	6960      	ldr	r0, [r4, #20]
    9428:	f01f fa50 	bl	288cc <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    942c:	6960      	ldr	r0, [r4, #20]
    942e:	f01e fc92 	bl	27d56 <z_shell_fprintf_buffer_flush>
    9432:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    9436:	6860      	ldr	r0, [r4, #4]
    9438:	6803      	ldr	r3, [r0, #0]
    943a:	2201      	movs	r2, #1
    943c:	691f      	ldr	r7, [r3, #16]
    943e:	f10d 010b 	add.w	r1, sp, #11
    9442:	ab03      	add	r3, sp, #12
    9444:	47b8      	blx	r7
			if (cnt == 0) {
    9446:	9b03      	ldr	r3, [sp, #12]
    9448:	b953      	cbnz	r3, 9460 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    944a:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    944c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9450:	b2b6      	uxth	r6, r6
    9452:	f024 fbbc 	bl	2dbce <z_impl_k_busy_wait>
    9456:	2e00      	cmp	r6, #0
    9458:	d1ed      	bne.n	9436 <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    945a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    945e:	e034      	b.n	94ca <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    9460:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    9464:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    9466:	2b1b      	cmp	r3, #27
    9468:	d05a      	beq.n	9520 <cmd_resize+0x15c>
    946a:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    946e:	2a1b      	cmp	r2, #27
    9470:	d1e1      	bne.n	9436 <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    9472:	2b52      	cmp	r3, #82	; 0x52
    9474:	d154      	bne.n	9520 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    9476:	440d      	add	r5, r1
    9478:	2300      	movs	r3, #0
    947a:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    947e:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    9482:	2a5b      	cmp	r2, #91	; 0x5b
    9484:	d154      	bne.n	9530 <cmd_resize+0x16c>
    9486:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    948a:	461f      	mov	r7, r3
				buff_idx = 2U;
    948c:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    948e:	f815 0b01 	ldrb.w	r0, [r5], #1
    9492:	4632      	mov	r2, r6
    9494:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    9496:	f106 0601 	add.w	r6, r6, #1
    949a:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    949c:	d12b      	bne.n	94f6 <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    949e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    94a2:	d0da      	beq.n	945a <cmd_resize+0x96>
    94a4:	f202 1243 	addw	r2, r2, #323	; 0x143
    94a8:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    94ac:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    94ae:	f812 5b01 	ldrb.w	r5, [r2], #1
    94b2:	bb55      	cbnz	r5, 950a <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    94b4:	2bfa      	cmp	r3, #250	; 0xfa
    94b6:	bf28      	it	cs
    94b8:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    94ba:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    94bc:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    94be:	463b      	mov	r3, r7
    94c0:	bf28      	it	cs
    94c2:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    94c4:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    94c8:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    94ca:	68a3      	ldr	r3, [r4, #8]
    94cc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    94d0:	069b      	lsls	r3, r3, #26
    94d2:	d503      	bpl.n	94dc <cmd_resize+0x118>
    94d4:	491c      	ldr	r1, [pc, #112]	; (9548 <cmd_resize+0x184>)
    94d6:	6960      	ldr	r0, [r4, #20]
    94d8:	f01f f9f8 	bl	288cc <z_shell_raw_fprintf>
	if (err != 0) {
    94dc:	2d00      	cmp	r5, #0
    94de:	d081      	beq.n	93e4 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    94e0:	68a3      	ldr	r3, [r4, #8]
    94e2:	4a1a      	ldr	r2, [pc, #104]	; (954c <cmd_resize+0x188>)
    94e4:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    94e6:	2103      	movs	r1, #3
    94e8:	4a19      	ldr	r2, [pc, #100]	; (9550 <cmd_resize+0x18c>)
    94ea:	4620      	mov	r0, r4
    94ec:	f01e fc23 	bl	27d36 <shell_fprintf>
    94f0:	f06f 0507 	mvn.w	r5, #7
    94f4:	e776      	b.n	93e4 <cmd_resize+0x20>
					*y = *y * 10U +
    94f6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    94fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    94fe:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    9500:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    9504:	b29f      	uxth	r7, r3
					if (buff_idx >=
    9506:	d1c2      	bne.n	948e <cmd_resize+0xca>
    9508:	e7a7      	b.n	945a <cmd_resize+0x96>
					*x = *x * 10U +
    950a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    950e:	3601      	adds	r6, #1
					*x = *x * 10U +
    9510:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    9514:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    9516:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    9518:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    951a:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    951c:	d9c7      	bls.n	94ae <cmd_resize+0xea>
    951e:	e79c      	b.n	945a <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    9520:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    9522:	3501      	adds	r5, #1
    9524:	b2ad      	uxth	r5, r5
    9526:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    9528:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    952c:	d983      	bls.n	9436 <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    952e:	2300      	movs	r3, #0
    9530:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    9534:	e791      	b.n	945a <cmd_resize+0x96>
    9536:	bf00      	nop
    9538:	00031d77 	.word	0x00031d77
    953c:	00031d6e 	.word	0x00031d6e
    9540:	0002e5ef 	.word	0x0002e5ef
    9544:	00032195 	.word	0x00032195
    9548:	0002e5f3 	.word	0x0002e5f3
    954c:	00500018 	.word	0x00500018
    9550:	00031d9d 	.word	0x00031d9d

00009554 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    9554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9558:	4607      	mov	r7, r0
    955a:	b089      	sub	sp, #36	; 0x24
    955c:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    955e:	4689      	mov	r9, r1
    9560:	b921      	cbnz	r1, 956c <z_shell_wildcard_process+0x18>
		return ret_val;
    9562:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    9564:	4620      	mov	r0, r4
    9566:	b009      	add	sp, #36	; 0x24
    9568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    956c:	4610      	mov	r0, r2
    956e:	f01f fade 	bl	28b2e <z_shell_has_wildcard>
    9572:	2800      	cmp	r0, #0
    9574:	d0f5      	beq.n	9562 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    9576:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    957a:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    957c:	2402      	movs	r4, #2
    957e:	e024      	b.n	95ca <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    9580:	465c      	mov	r4, fp
    9582:	e03c      	b.n	95fe <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    9584:	4629      	mov	r1, r5
    9586:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    958a:	f020 fe47 	bl	2a21c <strstr>
	if (!completion_addr) {
    958e:	4606      	mov	r6, r0
    9590:	2800      	cmp	r0, #0
    9592:	d04c      	beq.n	962e <z_shell_wildcard_process+0xda>
    9594:	f020 fe8c 	bl	2a2b0 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    9598:	b282      	uxth	r2, r0
    959a:	1c60      	adds	r0, r4, #1
    959c:	3201      	adds	r2, #1
    959e:	4631      	mov	r1, r6
    95a0:	4430      	add	r0, r6
    95a2:	f020 fec3 	bl	2a32c <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    95a6:	4622      	mov	r2, r4
    95a8:	4659      	mov	r1, fp
    95aa:	4630      	mov	r0, r6
    95ac:	f020 fed6 	bl	2a35c <memcpy>
	completion_addr[cmd_len] = ' ';
    95b0:	f04f 0320 	mov.w	r3, #32
    95b4:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    95b6:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    95ba:	3001      	adds	r0, #1
    95bc:	4404      	add	r4, r0
    95be:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    95c2:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    95c6:	2400      	movs	r4, #0
    95c8:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    95ca:	1c4b      	adds	r3, r1, #1
    95cc:	aa03      	add	r2, sp, #12
    95ce:	4648      	mov	r0, r9
    95d0:	9301      	str	r3, [sp, #4]
    95d2:	f7ff fc4b 	bl	8e6c <z_shell_cmd_get>
    95d6:	4606      	mov	r6, r0
    95d8:	b1e8      	cbz	r0, 9616 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    95da:	6831      	ldr	r1, [r6, #0]
    95dc:	2200      	movs	r2, #0
    95de:	4628      	mov	r0, r5
    95e0:	f01e f91d 	bl	2781e <fnmatch>
    95e4:	2800      	cmp	r0, #0
    95e6:	d1ef      	bne.n	95c8 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    95e8:	f8d6 b000 	ldr.w	fp, [r6]
    95ec:	f8d7 a008 	ldr.w	sl, [r7, #8]
    95f0:	f1bb 0f00 	cmp.w	fp, #0
    95f4:	d0c4      	beq.n	9580 <z_shell_wildcard_process+0x2c>
    95f6:	4658      	mov	r0, fp
    95f8:	f020 fe5a 	bl	2a2b0 <strlen>
    95fc:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    95fe:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    9602:	4422      	add	r2, r4
    9604:	2aff      	cmp	r2, #255	; 0xff
    9606:	ddbd      	ble.n	9584 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    9608:	4a0a      	ldr	r2, [pc, #40]	; (9634 <z_shell_wildcard_process+0xe0>)
    960a:	462b      	mov	r3, r5
    960c:	2103      	movs	r1, #3
    960e:	4638      	mov	r0, r7
    9610:	f01e ff21 	bl	28456 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    9614:	2401      	movs	r4, #1
	if (cnt > 0) {
    9616:	f1b8 0f00 	cmp.w	r8, #0
    961a:	d0a3      	beq.n	9564 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    961c:	68b8      	ldr	r0, [r7, #8]
    961e:	462a      	mov	r2, r5
    9620:	f100 0140 	add.w	r1, r0, #64	; 0x40
    9624:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    9628:	f01e fcc1 	bl	27fae <z_shell_pattern_remove>
	return ret_val;
    962c:	e79a      	b.n	9564 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    962e:	2402      	movs	r4, #2
    9630:	e7f1      	b.n	9616 <z_shell_wildcard_process+0xc2>
    9632:	bf00      	nop
    9634:	0003219a 	.word	0x0003219a

00009638 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9638:	4b0c      	ldr	r3, [pc, #48]	; (966c <class_handler+0x34>)
{
    963a:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    963c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    963e:	4e0c      	ldr	r6, [pc, #48]	; (9670 <class_handler+0x38>)
    9640:	4b0c      	ldr	r3, [pc, #48]	; (9674 <class_handler+0x3c>)
    9642:	42b3      	cmp	r3, r6
    9644:	d303      	bcc.n	964e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    9646:	f06f 0085 	mvn.w	r0, #133	; 0x85
    964a:	bcf0      	pop	{r4, r5, r6, r7}
    964c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    964e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9650:	42bd      	cmp	r5, r7
    9652:	d309      	bcc.n	9668 <class_handler+0x30>
		if (iface->class_handler &&
    9654:	691c      	ldr	r4, [r3, #16]
    9656:	b13c      	cbz	r4, 9668 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    9658:	f895 c002 	ldrb.w	ip, [r5, #2]
    965c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    965e:	45ac      	cmp	ip, r5
    9660:	d102      	bne.n	9668 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    9662:	4623      	mov	r3, r4
}
    9664:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    9666:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9668:	3324      	adds	r3, #36	; 0x24
    966a:	e7ea      	b.n	9642 <class_handler+0xa>
    966c:	20002a4c 	.word	0x20002a4c
    9670:	20000ecc 	.word	0x20000ecc
    9674:	20000ea8 	.word	0x20000ea8

00009678 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    9678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    967c:	4c13      	ldr	r4, [pc, #76]	; (96cc <custom_handler+0x54>)
    967e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 96d0 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    9682:	f8df 9050 	ldr.w	r9, [pc, #80]	; 96d4 <custom_handler+0x5c>
{
    9686:	4605      	mov	r5, r0
    9688:	460e      	mov	r6, r1
    968a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    968c:	4544      	cmp	r4, r8
    968e:	d303      	bcc.n	9698 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    9690:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    9698:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    969a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    969e:	429a      	cmp	r2, r3
    96a0:	d312      	bcc.n	96c8 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    96a2:	69a3      	ldr	r3, [r4, #24]
    96a4:	b183      	cbz	r3, 96c8 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    96a6:	7890      	ldrb	r0, [r2, #2]
    96a8:	7929      	ldrb	r1, [r5, #4]
    96aa:	4288      	cmp	r0, r1
    96ac:	d105      	bne.n	96ba <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    96ae:	463a      	mov	r2, r7
    96b0:	4631      	mov	r1, r6
    96b2:	4628      	mov	r0, r5
}
    96b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    96b8:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    96ba:	7952      	ldrb	r2, [r2, #5]
    96bc:	2a01      	cmp	r2, #1
    96be:	d103      	bne.n	96c8 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    96c0:	463a      	mov	r2, r7
    96c2:	4631      	mov	r1, r6
    96c4:	4628      	mov	r0, r5
    96c6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    96c8:	3424      	adds	r4, #36	; 0x24
    96ca:	e7df      	b.n	968c <custom_handler+0x14>
    96cc:	20000ea8 	.word	0x20000ea8
    96d0:	20000ecc 	.word	0x20000ecc
    96d4:	20002a4c 	.word	0x20002a4c

000096d8 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    96d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    96dc:	4c0b      	ldr	r4, [pc, #44]	; (970c <vendor_handler+0x34>)
    96de:	f8df 8030 	ldr.w	r8, [pc, #48]	; 9710 <vendor_handler+0x38>
{
    96e2:	4605      	mov	r5, r0
    96e4:	460e      	mov	r6, r1
    96e6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    96e8:	4544      	cmp	r4, r8
    96ea:	d302      	bcc.n	96f2 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    96ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    96f0:	e009      	b.n	9706 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    96f2:	6963      	ldr	r3, [r4, #20]
    96f4:	b90b      	cbnz	r3, 96fa <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    96f6:	3424      	adds	r4, #36	; 0x24
    96f8:	e7f6      	b.n	96e8 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    96fa:	463a      	mov	r2, r7
    96fc:	4631      	mov	r1, r6
    96fe:	4628      	mov	r0, r5
    9700:	4798      	blx	r3
    9702:	2800      	cmp	r0, #0
    9704:	d1f7      	bne.n	96f6 <vendor_handler+0x1e>
}
    9706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    970a:	bf00      	nop
    970c:	20000ea8 	.word	0x20000ea8
    9710:	20000ecc 	.word	0x20000ecc

00009714 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    9714:	4802      	ldr	r0, [pc, #8]	; (9720 <usb_reset_alt_setting+0xc>)
    9716:	2208      	movs	r2, #8
    9718:	2100      	movs	r1, #0
    971a:	f020 be2a 	b.w	2a372 <memset>
    971e:	bf00      	nop
    9720:	20002b07 	.word	0x20002b07

00009724 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    9724:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9726:	4b0b      	ldr	r3, [pc, #44]	; (9754 <is_ep_valid.part.0+0x30>)
    9728:	4c0b      	ldr	r4, [pc, #44]	; (9758 <is_ep_valid.part.0+0x34>)
    972a:	42a3      	cmp	r3, r4
    972c:	d301      	bcc.n	9732 <is_ep_valid.part.0+0xe>
	return false;
    972e:	2000      	movs	r0, #0
}
    9730:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    9732:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    9734:	7f1e      	ldrb	r6, [r3, #28]
    9736:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    9738:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    973a:	b2d5      	uxtb	r5, r2
    973c:	42ae      	cmp	r6, r5
    973e:	d801      	bhi.n	9744 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9740:	3324      	adds	r3, #36	; 0x24
    9742:	e7f2      	b.n	972a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    9744:	3201      	adds	r2, #1
    9746:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    974a:	4285      	cmp	r5, r0
    974c:	d1f5      	bne.n	973a <is_ep_valid.part.0+0x16>
				return true;
    974e:	2001      	movs	r0, #1
    9750:	e7ee      	b.n	9730 <is_ep_valid.part.0+0xc>
    9752:	bf00      	nop
    9754:	20000ea8 	.word	0x20000ea8
    9758:	20000ecc 	.word	0x20000ecc

0000975c <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    975c:	4809      	ldr	r0, [pc, #36]	; (9784 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    975e:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    9760:	7803      	ldrb	r3, [r0, #0]
    9762:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    9766:	330a      	adds	r3, #10
    9768:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    976c:	b13b      	cbz	r3, 977e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    976e:	f100 0208 	add.w	r2, r0, #8
    9772:	f100 0110 	add.w	r1, r0, #16
    9776:	4798      	blx	r3
    9778:	43c0      	mvns	r0, r0
    977a:	0fc0      	lsrs	r0, r0, #31
}
    977c:	bd08      	pop	{r3, pc}
		return false;
    977e:	4618      	mov	r0, r3
    9780:	e7fc      	b.n	977c <usb_handle_request.constprop.0+0x20>
    9782:	bf00      	nop
    9784:	20002a4c 	.word	0x20002a4c

00009788 <set_endpoint>:
{
    9788:	b500      	push	{lr}
    978a:	b08b      	sub	sp, #44	; 0x2c
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    978c:	7883      	ldrb	r3, [r0, #2]
    978e:	f88d 3008 	strb.w	r3, [sp, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    9792:	7903      	ldrb	r3, [r0, #4]
    9794:	7942      	ldrb	r2, [r0, #5]
    9796:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    979a:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    979e:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    97a0:	a802      	add	r0, sp, #8
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    97a2:	f003 0303 	and.w	r3, r3, #3
    97a6:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = usb_dc_ep_configure(&ep_cfg);
    97aa:	f017 ff81 	bl	216b0 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    97ae:	f110 0f78 	cmn.w	r0, #120	; 0x78
    97b2:	d12f      	bne.n	9814 <set_endpoint+0x8c>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    97b4:	4828      	ldr	r0, [pc, #160]	; (9858 <set_endpoint+0xd0>)
    97b6:	6803      	ldr	r3, [r0, #0]
    97b8:	f013 0f06 	tst.w	r3, #6
    97bc:	d00c      	beq.n	97d8 <set_endpoint+0x50>
    97be:	f89d 3008 	ldrb.w	r3, [sp, #8]
    97c2:	4a26      	ldr	r2, [pc, #152]	; (985c <set_endpoint+0xd4>)
    97c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    97c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    97cc:	2303      	movs	r3, #3
    97ce:	aa07      	add	r2, sp, #28
    97d0:	9301      	str	r3, [sp, #4]
    97d2:	9307      	str	r3, [sp, #28]
    97d4:	f01f f9ef 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    97d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    97dc:	f018 f818 	bl	21810 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    97e0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    97e4:	d12e      	bne.n	9844 <set_endpoint+0xbc>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    97e6:	481c      	ldr	r0, [pc, #112]	; (9858 <set_endpoint+0xd0>)
    97e8:	6803      	ldr	r3, [r0, #0]
    97ea:	f013 0f06 	tst.w	r3, #6
    97ee:	d00c      	beq.n	980a <set_endpoint+0x82>
    97f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    97f4:	4a1a      	ldr	r2, [pc, #104]	; (9860 <set_endpoint+0xd8>)
    97f6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    97fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    97fe:	2303      	movs	r3, #3
    9800:	aa07      	add	r2, sp, #28
    9802:	9301      	str	r3, [sp, #4]
    9804:	9307      	str	r3, [sp, #28]
    9806:	f01f f9d6 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
	usb_dev.configured = true;
    980a:	4b16      	ldr	r3, [pc, #88]	; (9864 <set_endpoint+0xdc>)
    980c:	2001      	movs	r0, #1
    980e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    9812:	e006      	b.n	9822 <set_endpoint+0x9a>
	} else if (ret) {
    9814:	2800      	cmp	r0, #0
    9816:	d0df      	beq.n	97d8 <set_endpoint+0x50>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    9818:	480f      	ldr	r0, [pc, #60]	; (9858 <set_endpoint+0xd0>)
    981a:	6803      	ldr	r3, [r0, #0]
    981c:	075a      	lsls	r2, r3, #29
    981e:	d103      	bne.n	9828 <set_endpoint+0xa0>
		return false;
    9820:	2000      	movs	r0, #0
}
    9822:	b00b      	add	sp, #44	; 0x2c
    9824:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    9828:	f89d 3008 	ldrb.w	r3, [sp, #8]
    982c:	4a0e      	ldr	r2, [pc, #56]	; (9868 <set_endpoint+0xe0>)
    982e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    9832:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9836:	2303      	movs	r3, #3
    9838:	aa07      	add	r2, sp, #28
    983a:	9301      	str	r3, [sp, #4]
    983c:	9307      	str	r3, [sp, #28]
    983e:	f01f f9ba 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
    9842:	e7ed      	b.n	9820 <set_endpoint+0x98>
	} else if (ret) {
    9844:	2800      	cmp	r0, #0
    9846:	d0e0      	beq.n	980a <set_endpoint+0x82>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    9848:	4803      	ldr	r0, [pc, #12]	; (9858 <set_endpoint+0xd0>)
    984a:	6803      	ldr	r3, [r0, #0]
    984c:	075b      	lsls	r3, r3, #29
    984e:	d0e7      	beq.n	9820 <set_endpoint+0x98>
    9850:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9854:	4a05      	ldr	r2, [pc, #20]	; (986c <set_endpoint+0xe4>)
    9856:	e7ea      	b.n	982e <set_endpoint+0xa6>
    9858:	20000aa0 	.word	0x20000aa0
    985c:	000321ec 	.word	0x000321ec
    9860:	00032233 	.word	0x00032233
    9864:	20002a4c 	.word	0x20002a4c
    9868:	0003220f 	.word	0x0003220f
    986c:	00032253 	.word	0x00032253

00009870 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    9870:	2804      	cmp	r0, #4
{
    9872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9876:	f8df 8088 	ldr.w	r8, [pc, #136]	; 9900 <forward_status_cb+0x90>
    987a:	4604      	mov	r4, r0
    987c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    987e:	d10e      	bne.n	989e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    9880:	f7ff ff48 	bl	9714 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    9884:	f8df 907c 	ldr.w	r9, [pc, #124]	; 9904 <forward_status_cb+0x94>
    9888:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    988c:	b15b      	cbz	r3, 98a6 <forward_status_cb+0x36>
			usb_cancel_transfers();
    988e:	f000 ff4d 	bl	a72c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    9892:	2c04      	cmp	r4, #4
    9894:	d001      	beq.n	989a <forward_status_cb+0x2a>
    9896:	2c01      	cmp	r4, #1
    9898:	d105      	bne.n	98a6 <forward_status_cb+0x36>
    989a:	4d1b      	ldr	r5, [pc, #108]	; (9908 <forward_status_cb+0x98>)
    989c:	e016      	b.n	98cc <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    989e:	2805      	cmp	r0, #5
    98a0:	d0f0      	beq.n	9884 <forward_status_cb+0x14>
    98a2:	2801      	cmp	r0, #1
    98a4:	d0ee      	beq.n	9884 <forward_status_cb+0x14>
    98a6:	4d18      	ldr	r5, [pc, #96]	; (9908 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    98a8:	4545      	cmp	r5, r8
    98aa:	d31e      	bcc.n	98ea <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    98ac:	4b15      	ldr	r3, [pc, #84]	; (9904 <forward_status_cb+0x94>)
    98ae:	6a1b      	ldr	r3, [r3, #32]
    98b0:	b31b      	cbz	r3, 98fa <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    98b2:	4631      	mov	r1, r6
    98b4:	4620      	mov	r0, r4
}
    98b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    98ba:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    98bc:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    98c0:	2700      	movs	r7, #0
    98c2:	7f2a      	ldrb	r2, [r5, #28]
    98c4:	b2fb      	uxtb	r3, r7
    98c6:	429a      	cmp	r2, r3
    98c8:	d803      	bhi.n	98d2 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    98ca:	3524      	adds	r5, #36	; 0x24
    98cc:	4545      	cmp	r5, r8
    98ce:	d3f5      	bcc.n	98bc <forward_status_cb+0x4c>
    98d0:	e007      	b.n	98e2 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    98d2:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    98d6:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    98d8:	7918      	ldrb	r0, [r3, #4]
    98da:	f017 ffc3 	bl	21864 <usb_dc_ep_disable>
			if (ret < 0) {
    98de:	2800      	cmp	r0, #0
    98e0:	daef      	bge.n	98c2 <forward_status_cb+0x52>
				usb_dev.configured = false;
    98e2:	2300      	movs	r3, #0
    98e4:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    98e8:	e7dd      	b.n	98a6 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    98ea:	68eb      	ldr	r3, [r5, #12]
    98ec:	b11b      	cbz	r3, 98f6 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    98ee:	4632      	mov	r2, r6
    98f0:	4621      	mov	r1, r4
    98f2:	4628      	mov	r0, r5
    98f4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    98f6:	3524      	adds	r5, #36	; 0x24
    98f8:	e7d6      	b.n	98a8 <forward_status_cb+0x38>
}
    98fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98fe:	bf00      	nop
    9900:	20000ecc 	.word	0x20000ecc
    9904:	20002a4c 	.word	0x20002a4c
    9908:	20000ea8 	.word	0x20000ea8

0000990c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    990c:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    990e:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    9910:	b088      	sub	sp, #32
	if (USB_EP_GET_IDX(ep) == 0) {
    9912:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    9914:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    9916:	f88d 4003 	strb.w	r4, [sp, #3]
	if (USB_EP_GET_IDX(ep) == 0) {
    991a:	d007      	beq.n	992c <usb_halt_endpoint_req.isra.0+0x20>
    991c:	4620      	mov	r0, r4
    991e:	f7ff ff01 	bl	9724 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    9922:	b318      	cbz	r0, 996c <usb_halt_endpoint_req.isra.0+0x60>
	return (usb_dev.configuration != 0);
    9924:	4b1f      	ldr	r3, [pc, #124]	; (99a4 <usb_halt_endpoint_req.isra.0+0x98>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    9926:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    992a:	b1f8      	cbz	r0, 996c <usb_halt_endpoint_req.isra.0+0x60>
			LOG_INF("Set halt ep 0x%02x", ep);
    992c:	481e      	ldr	r0, [pc, #120]	; (99a8 <usb_halt_endpoint_req.isra.0+0x9c>)
    992e:	4e1d      	ldr	r6, [pc, #116]	; (99a4 <usb_halt_endpoint_req.isra.0+0x98>)
    9930:	6803      	ldr	r3, [r0, #0]
    9932:	f003 0307 	and.w	r3, r3, #7
		if (halt) {
    9936:	b1dd      	cbz	r5, 9970 <usb_halt_endpoint_req.isra.0+0x64>
			LOG_INF("Set halt ep 0x%02x", ep);
    9938:	2b02      	cmp	r3, #2
    993a:	d90a      	bls.n	9952 <usb_halt_endpoint_req.isra.0+0x46>
    993c:	4b1b      	ldr	r3, [pc, #108]	; (99ac <usb_halt_endpoint_req.isra.0+0xa0>)
    993e:	aa05      	add	r2, sp, #20
    9940:	e9cd 3406 	strd	r3, r4, [sp, #24]
    9944:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    9948:	2303      	movs	r3, #3
    994a:	9301      	str	r3, [sp, #4]
    994c:	9305      	str	r3, [sp, #20]
    994e:	f01f f932 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_set_stall(ep);
    9952:	f89d 0003 	ldrb.w	r0, [sp, #3]
    9956:	f017 fee3 	bl	21720 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    995a:	69f3      	ldr	r3, [r6, #28]
    995c:	b90b      	cbnz	r3, 9962 <usb_halt_endpoint_req.isra.0+0x56>
		return true;
    995e:	2001      	movs	r0, #1
    9960:	e004      	b.n	996c <usb_halt_endpoint_req.isra.0+0x60>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    9962:	2008      	movs	r0, #8
    9964:	f10d 0103 	add.w	r1, sp, #3
    9968:	4798      	blx	r3
		return true;
    996a:	4628      	mov	r0, r5
}
    996c:	b008      	add	sp, #32
    996e:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    9970:	2b02      	cmp	r3, #2
    9972:	d90a      	bls.n	998a <usb_halt_endpoint_req.isra.0+0x7e>
    9974:	4b0e      	ldr	r3, [pc, #56]	; (99b0 <usb_halt_endpoint_req.isra.0+0xa4>)
    9976:	aa05      	add	r2, sp, #20
    9978:	e9cd 3406 	strd	r3, r4, [sp, #24]
    997c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    9980:	2303      	movs	r3, #3
    9982:	9301      	str	r3, [sp, #4]
    9984:	9305      	str	r3, [sp, #20]
    9986:	f01f f916 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_clear_stall(ep);
    998a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    998e:	f017 ff03 	bl	21798 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    9992:	69f3      	ldr	r3, [r6, #28]
    9994:	2b00      	cmp	r3, #0
    9996:	d0e2      	beq.n	995e <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    9998:	f10d 0103 	add.w	r1, sp, #3
    999c:	2009      	movs	r0, #9
    999e:	4798      	blx	r3
    99a0:	e7dd      	b.n	995e <usb_halt_endpoint_req.isra.0+0x52>
    99a2:	bf00      	nop
    99a4:	20002a4c 	.word	0x20002a4c
    99a8:	20000aa0 	.word	0x20000aa0
    99ac:	00032274 	.word	0x00032274
    99b0:	00032287 	.word	0x00032287

000099b4 <usb_handle_standard_request>:
{
    99b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    99b8:	4ea1      	ldr	r6, [pc, #644]	; (9c40 <usb_handle_standard_request+0x28c>)
    99ba:	69b3      	ldr	r3, [r6, #24]
{
    99bc:	b08b      	sub	sp, #44	; 0x2c
    99be:	4605      	mov	r5, r0
    99c0:	460f      	mov	r7, r1
    99c2:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    99c4:	b963      	cbnz	r3, 99e0 <usb_handle_standard_request+0x2c>
	switch (setup->RequestType.recipient) {
    99c6:	7828      	ldrb	r0, [r5, #0]
    99c8:	f000 001f 	and.w	r0, r0, #31
    99cc:	2801      	cmp	r0, #1
    99ce:	f000 80a6 	beq.w	9b1e <usb_handle_standard_request+0x16a>
    99d2:	2802      	cmp	r0, #2
    99d4:	f000 813e 	beq.w	9c54 <usb_handle_standard_request+0x2a0>
    99d8:	b138      	cbz	r0, 99ea <usb_handle_standard_request+0x36>
		switch (setup->bRequest) {
    99da:	f06f 0015 	mvn.w	r0, #21
    99de:	e094      	b.n	9b0a <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    99e0:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    99e2:	2800      	cmp	r0, #0
    99e4:	d1ef      	bne.n	99c6 <usb_handle_standard_request+0x12>
	int rc = 0;
    99e6:	2000      	movs	r0, #0
    99e8:	e08f      	b.n	9b0a <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    99ea:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    99ee:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    99f0:	2a00      	cmp	r2, #0
    99f2:	da31      	bge.n	9a58 <usb_handle_standard_request+0xa4>
		switch (setup->bRequest) {
    99f4:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    99f6:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    99fa:	d010      	beq.n	9a1e <usb_handle_standard_request+0x6a>
    99fc:	2b08      	cmp	r3, #8
    99fe:	d025      	beq.n	9a4c <usb_handle_standard_request+0x98>
    9a00:	2b00      	cmp	r3, #0
    9a02:	d1ea      	bne.n	99da <usb_handle_standard_request+0x26>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    9a04:	2101      	movs	r1, #1
	data[1] = 0U;
    9a06:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    9a08:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    9a0a:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    9a0e:	2900      	cmp	r1, #0
    9a10:	bf18      	it	ne
    9a12:	2302      	movne	r3, #2
    9a14:	f043 0301 	orr.w	r3, r3, #1
    9a18:	7013      	strb	r3, [r2, #0]
		*len = 2;
    9a1a:	2302      	movs	r3, #2
    9a1c:	e01a      	b.n	9a54 <usb_handle_standard_request+0xa0>
			return usb_get_descriptor(setup, len, data_buf);
    9a1e:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    9a20:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    9a22:	1f11      	subs	r1, r2, #4
    9a24:	2901      	cmp	r1, #1
    9a26:	d9d8      	bls.n	99da <usb_handle_standard_request+0x26>
    9a28:	2a07      	cmp	r2, #7
    9a2a:	d8d6      	bhi.n	99da <usb_handle_standard_request+0x26>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    9a2c:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    9a2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    9a30:	781c      	ldrb	r4, [r3, #0]
    9a32:	2c00      	cmp	r4, #0
    9a34:	d0d1      	beq.n	99da <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    9a36:	785d      	ldrb	r5, [r3, #1]
    9a38:	4295      	cmp	r5, r2
    9a3a:	d103      	bne.n	9a44 <usb_handle_standard_request+0x90>
			if (cur_index == index) {
    9a3c:	4281      	cmp	r1, r0
    9a3e:	f000 813e 	beq.w	9cbe <usb_handle_standard_request+0x30a>
			cur_index++;
    9a42:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    9a44:	4423      	add	r3, r4
    9a46:	e7f3      	b.n	9a30 <usb_handle_standard_request+0x7c>
			*len = p[DESC_bLength];
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	e13e      	b.n	9cca <usb_handle_standard_request+0x316>
			data[0] = usb_dev.configuration;
    9a4c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    9a50:	7013      	strb	r3, [r2, #0]
			*len = 1;
    9a52:	2301      	movs	r3, #1
		*len = 2;
    9a54:	603b      	str	r3, [r7, #0]
		return true;
    9a56:	e058      	b.n	9b0a <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    9a58:	3b01      	subs	r3, #1
    9a5a:	2b08      	cmp	r3, #8
    9a5c:	d8bd      	bhi.n	99da <usb_handle_standard_request+0x26>
    9a5e:	a201      	add	r2, pc, #4	; (adr r2, 9a64 <usb_handle_standard_request+0xb0>)
    9a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9a64:	00009afd 	.word	0x00009afd
    9a68:	000099db 	.word	0x000099db
    9a6c:	00009b11 	.word	0x00009b11
    9a70:	000099db 	.word	0x000099db
    9a74:	00009a89 	.word	0x00009a89
    9a78:	000099db 	.word	0x000099db
    9a7c:	000099db 	.word	0x000099db
    9a80:	000099db 	.word	0x000099db
    9a84:	00009a95 	.word	0x00009a95
			return !usb_dc_set_address(setup->wValue);
    9a88:	78a8      	ldrb	r0, [r5, #2]
    9a8a:	f017 fdbf 	bl	2160c <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    9a8e:	2800      	cmp	r0, #0
    9a90:	d0a9      	beq.n	99e6 <usb_handle_standard_request+0x32>
    9a92:	e7a2      	b.n	99da <usb_handle_standard_request+0x26>
	if (setup->wValue == 0U) {
    9a94:	886c      	ldrh	r4, [r5, #2]
    9a96:	b144      	cbz	r4, 9aaa <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    9a98:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    9a9c:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    9a9e:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    9aa0:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    9aa2:	783c      	ldrb	r4, [r7, #0]
    9aa4:	b96c      	cbnz	r4, 9ac2 <usb_handle_standard_request+0x10e>
	if (found) {
    9aa6:	2800      	cmp	r0, #0
    9aa8:	d097      	beq.n	99da <usb_handle_standard_request+0x26>
		usb_reset_alt_setting();
    9aaa:	f7ff fe33 	bl	9714 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    9aae:	886b      	ldrh	r3, [r5, #2]
    9ab0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    9ab4:	69f3      	ldr	r3, [r6, #28]
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d095      	beq.n	99e6 <usb_handle_standard_request+0x32>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    9aba:	4962      	ldr	r1, [pc, #392]	; (9c44 <usb_handle_standard_request+0x290>)
    9abc:	2003      	movs	r0, #3
    9abe:	4798      	blx	r3
    9ac0:	e791      	b.n	99e6 <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    9ac2:	787b      	ldrb	r3, [r7, #1]
    9ac4:	2b04      	cmp	r3, #4
    9ac6:	d00c      	beq.n	9ae2 <usb_handle_standard_request+0x12e>
    9ac8:	2b05      	cmp	r3, #5
    9aca:	d00d      	beq.n	9ae8 <usb_handle_standard_request+0x134>
    9acc:	2b02      	cmp	r3, #2
    9ace:	d105      	bne.n	9adc <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    9ad0:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    9ad4:	886a      	ldrh	r2, [r5, #2]
				found = true;
    9ad6:	4542      	cmp	r2, r8
    9ad8:	bf08      	it	eq
    9ada:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    9adc:	783b      	ldrb	r3, [r7, #0]
    9ade:	441f      	add	r7, r3
    9ae0:	e7df      	b.n	9aa2 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    9ae2:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    9ae6:	e7f9      	b.n	9adc <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    9ae8:	886b      	ldrh	r3, [r5, #2]
    9aea:	4543      	cmp	r3, r8
    9aec:	d1f6      	bne.n	9adc <usb_handle_standard_request+0x128>
    9aee:	f1b9 0f00 	cmp.w	r9, #0
    9af2:	d1f3      	bne.n	9adc <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    9af4:	4638      	mov	r0, r7
    9af6:	f7ff fe47 	bl	9788 <set_endpoint>
			break;
    9afa:	e7ef      	b.n	9adc <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    9afc:	886b      	ldrh	r3, [r5, #2]
    9afe:	2b01      	cmp	r3, #1
    9b00:	f47f af6b 	bne.w	99da <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = false;
    9b04:	2000      	movs	r0, #0
    9b06:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    9b0a:	b00b      	add	sp, #44	; 0x2c
    9b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    9b10:	886b      	ldrh	r3, [r5, #2]
    9b12:	2b01      	cmp	r3, #1
    9b14:	f47f af61 	bne.w	99da <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = true;
    9b18:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    9b1c:	e763      	b.n	99e6 <usb_handle_standard_request+0x32>
	if (!is_device_configured() ||
    9b1e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    9b22:	2b00      	cmp	r3, #0
    9b24:	f43f af59 	beq.w	99da <usb_handle_standard_request+0x26>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    9b28:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    9b2a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9b2e:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    9b30:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    9b32:	781a      	ldrb	r2, [r3, #0]
    9b34:	2a00      	cmp	r2, #0
    9b36:	f43f af50 	beq.w	99da <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    9b3a:	7859      	ldrb	r1, [r3, #1]
    9b3c:	2902      	cmp	r1, #2
    9b3e:	d104      	bne.n	9b4a <usb_handle_standard_request+0x196>
			if (interface < cfg_descr->bNumInterfaces) {
    9b40:	f893 e004 	ldrb.w	lr, [r3, #4]
    9b44:	4586      	cmp	lr, r0
    9b46:	f200 80c2 	bhi.w	9cce <usb_handle_standard_request+0x31a>
		p += p[DESC_bLength];
    9b4a:	4413      	add	r3, r2
    9b4c:	e7f1      	b.n	9b32 <usb_handle_standard_request+0x17e>
			data[0] = 0U;
    9b4e:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    9b50:	7050      	strb	r0, [r2, #1]
			*len = 2;
    9b52:	6039      	str	r1, [r7, #0]
			return true;
    9b54:	e7d9      	b.n	9b0a <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    9b56:	440c      	add	r4, r1
    9b58:	e0c7      	b.n	9cea <usb_handle_standard_request+0x336>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    9b5a:	280b      	cmp	r0, #11
    9b5c:	f47f af3d 	bne.w	99da <usb_handle_standard_request+0x26>
	bool ret = false;
    9b60:	2200      	movs	r2, #0
	uint8_t cur_iface = 0xFF;
    9b62:	f04f 09ff 	mov.w	r9, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    9b66:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 9c48 <usb_handle_standard_request+0x294>
	uint8_t cur_alt_setting = 0xFF;
    9b6a:	464f      	mov	r7, r9
	const uint8_t *if_desc = NULL;
    9b6c:	4690      	mov	r8, r2
    9b6e:	e006      	b.n	9b7e <usb_handle_standard_request+0x1ca>
		switch (p[DESC_bDescriptorType]) {
    9b70:	7861      	ldrb	r1, [r4, #1]
    9b72:	2904      	cmp	r1, #4
    9b74:	d011      	beq.n	9b9a <usb_handle_standard_request+0x1e6>
    9b76:	2905      	cmp	r1, #5
    9b78:	d023      	beq.n	9bc2 <usb_handle_standard_request+0x20e>
		p += p[DESC_bLength];
    9b7a:	7821      	ldrb	r1, [r4, #0]
    9b7c:	440c      	add	r4, r1
	while (p[DESC_bLength] != 0U) {
    9b7e:	7821      	ldrb	r1, [r4, #0]
    9b80:	2900      	cmp	r1, #0
    9b82:	d1f5      	bne.n	9b70 <usb_handle_standard_request+0x1bc>
	if (usb_dev.status_callback) {
    9b84:	69f3      	ldr	r3, [r6, #28]
    9b86:	b123      	cbz	r3, 9b92 <usb_handle_standard_request+0x1de>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    9b88:	4641      	mov	r1, r8
    9b8a:	2007      	movs	r0, #7
    9b8c:	9201      	str	r2, [sp, #4]
    9b8e:	4798      	blx	r3
    9b90:	9a01      	ldr	r2, [sp, #4]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    9b92:	2a00      	cmp	r2, #0
    9b94:	f47f af27 	bne.w	99e6 <usb_handle_standard_request+0x32>
    9b98:	e71f      	b.n	99da <usb_handle_standard_request+0x26>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    9b9a:	f894 9002 	ldrb.w	r9, [r4, #2]
			if (cur_iface == setup->wIndex &&
    9b9e:	88a8      	ldrh	r0, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    9ba0:	78e7      	ldrb	r7, [r4, #3]
			if (cur_iface == setup->wIndex &&
    9ba2:	4581      	cmp	r9, r0
    9ba4:	4649      	mov	r1, r9
    9ba6:	d1e8      	bne.n	9b7a <usb_handle_standard_request+0x1c6>
			    cur_alt_setting == setup->wValue) {
    9ba8:	f8b5 c002 	ldrh.w	ip, [r5, #2]
			if (cur_iface == setup->wIndex &&
    9bac:	4567      	cmp	r7, ip
    9bae:	b2b8      	uxth	r0, r7
    9bb0:	d1e3      	bne.n	9b7a <usb_handle_standard_request+0x1c6>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    9bb2:	2907      	cmp	r1, #7
    9bb4:	d842      	bhi.n	9c3c <usb_handle_standard_request+0x288>
		usb_dev.alt_setting[iface] = alt_setting;
    9bb6:	4431      	add	r1, r6
		return true;
    9bb8:	46a0      	mov	r8, r4
				ret = usb_set_alt_setting(setup->wIndex,
    9bba:	f881 00bb 	strb.w	r0, [r1, #187]	; 0xbb
	return true;
    9bbe:	2201      	movs	r2, #1
    9bc0:	e7db      	b.n	9b7a <usb_handle_standard_request+0x1c6>
			if (cur_iface == setup->wIndex) {
    9bc2:	88a9      	ldrh	r1, [r5, #4]
    9bc4:	4549      	cmp	r1, r9
    9bc6:	d1d8      	bne.n	9b7a <usb_handle_standard_request+0x1c6>
	if (cur_alt_setting != alt_setting) {
    9bc8:	78aa      	ldrb	r2, [r5, #2]
    9bca:	42ba      	cmp	r2, r7
    9bcc:	d031      	beq.n	9c32 <usb_handle_standard_request+0x27e>
		ret = reset_endpoint(ep_desc);
    9bce:	f894 b002 	ldrb.w	fp, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    9bd2:	4658      	mov	r0, fp
    9bd4:	f000 fd8c 	bl	a6f0 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    9bd8:	4658      	mov	r0, fp
    9bda:	f017 fe43 	bl	21864 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    9bde:	f110 0f78 	cmn.w	r0, #120	; 0x78
    9be2:	d111      	bne.n	9c08 <usb_handle_standard_request+0x254>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    9be4:	f8da 2000 	ldr.w	r2, [sl]
    9be8:	f012 0f06 	tst.w	r2, #6
    9bec:	d0e7      	beq.n	9bbe <usb_handle_standard_request+0x20a>
    9bee:	2203      	movs	r2, #3
    9bf0:	4b16      	ldr	r3, [pc, #88]	; (9c4c <usb_handle_standard_request+0x298>)
    9bf2:	9203      	str	r2, [sp, #12]
    9bf4:	9207      	str	r2, [sp, #28]
    9bf6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9bfa:	aa07      	add	r2, sp, #28
    9bfc:	4650      	mov	r0, sl
    9bfe:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    9c02:	f01e ffd8 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
    9c06:	e7da      	b.n	9bbe <usb_handle_standard_request+0x20a>
	} else if (ret) {
    9c08:	2800      	cmp	r0, #0
    9c0a:	d0d8      	beq.n	9bbe <usb_handle_standard_request+0x20a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    9c0c:	f8da 2000 	ldr.w	r2, [sl]
    9c10:	f012 0207 	ands.w	r2, r2, #7
    9c14:	d0b1      	beq.n	9b7a <usb_handle_standard_request+0x1c6>
    9c16:	2203      	movs	r2, #3
    9c18:	4b0d      	ldr	r3, [pc, #52]	; (9c50 <usb_handle_standard_request+0x29c>)
    9c1a:	9203      	str	r2, [sp, #12]
    9c1c:	9207      	str	r2, [sp, #28]
    9c1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9c22:	aa07      	add	r2, sp, #28
    9c24:	4650      	mov	r0, sl
    9c26:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    9c2a:	f01e ffc4 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
	return false;
    9c2e:	2200      	movs	r2, #0
    9c30:	e7a3      	b.n	9b7a <usb_handle_standard_request+0x1c6>
		ret = set_endpoint(ep_desc);
    9c32:	4620      	mov	r0, r4
    9c34:	f7ff fda8 	bl	9788 <set_endpoint>
    9c38:	4602      	mov	r2, r0
    9c3a:	e79e      	b.n	9b7a <usb_handle_standard_request+0x1c6>
    9c3c:	46a0      	mov	r8, r4
    9c3e:	e7f6      	b.n	9c2e <usb_handle_standard_request+0x27a>
    9c40:	20002a4c 	.word	0x20002a4c
    9c44:	20002b06 	.word	0x20002b06
    9c48:	20000aa0 	.word	0x20000aa0
    9c4c:	0003229c 	.word	0x0003229c
    9c50:	000322bd 	.word	0x000322bd
	if (usb_reqtype_is_to_host(setup)) {
    9c54:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    9c58:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    9c5a:	2a00      	cmp	r2, #0
    9c5c:	da19      	bge.n	9c92 <usb_handle_standard_request+0x2de>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    9c5e:	2b00      	cmp	r3, #0
    9c60:	f47f aebb 	bne.w	99da <usb_handle_standard_request+0x26>
	uint8_t ep = setup->wIndex;
    9c64:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    9c66:	0663      	lsls	r3, r4, #25
    9c68:	d00a      	beq.n	9c80 <usb_handle_standard_request+0x2cc>
    9c6a:	4620      	mov	r0, r4
    9c6c:	f7ff fd5a 	bl	9724 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    9c70:	2800      	cmp	r0, #0
    9c72:	f43f aeb2 	beq.w	99da <usb_handle_standard_request+0x26>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    9c76:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	f43f aead 	beq.w	99da <usb_handle_standard_request+0x26>
    9c80:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    9c84:	4620      	mov	r0, r4
    9c86:	4629      	mov	r1, r5
    9c88:	f017 fda6 	bl	217d8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    9c8c:	2000      	movs	r0, #0
    9c8e:	7068      	strb	r0, [r5, #1]
    9c90:	e6c3      	b.n	9a1a <usb_handle_standard_request+0x66>
		switch (setup->bRequest) {
    9c92:	2b01      	cmp	r3, #1
    9c94:	d008      	beq.n	9ca8 <usb_handle_standard_request+0x2f4>
    9c96:	2b03      	cmp	r3, #3
    9c98:	f47f ae9f 	bne.w	99da <usb_handle_standard_request+0x26>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    9c9c:	886b      	ldrh	r3, [r5, #2]
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	f47f ae9b 	bne.w	99da <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    9ca4:	2101      	movs	r1, #1
    9ca6:	e003      	b.n	9cb0 <usb_handle_standard_request+0x2fc>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    9ca8:	8869      	ldrh	r1, [r5, #2]
    9caa:	2900      	cmp	r1, #0
    9cac:	f47f ae95 	bne.w	99da <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    9cb0:	88a8      	ldrh	r0, [r5, #4]
    9cb2:	f7ff fe2b 	bl	990c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    9cb6:	2800      	cmp	r0, #0
    9cb8:	f47f ae95 	bne.w	99e6 <usb_handle_standard_request+0x32>
    9cbc:	e68d      	b.n	99da <usb_handle_standard_request+0x26>
		if (type == USB_DESC_CONFIGURATION) {
    9cbe:	2a02      	cmp	r2, #2
		*data = p;
    9cc0:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    9cc4:	f47f aec0 	bne.w	9a48 <usb_handle_standard_request+0x94>
			*len = (p[CONF_DESC_wTotalLength]) |
    9cc8:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    9cca:	603b      	str	r3, [r7, #0]
    9ccc:	e68b      	b.n	99e6 <usb_handle_standard_request+0x32>
	if (usb_reqtype_is_to_host(setup)) {
    9cce:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    9cd2:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	f6bf af40 	bge.w	9b5a <usb_handle_standard_request+0x1a6>
    9cda:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    9cde:	2800      	cmp	r0, #0
    9ce0:	f43f af35 	beq.w	9b4e <usb_handle_standard_request+0x19a>
    9ce4:	280a      	cmp	r0, #10
    9ce6:	f47f ae78 	bne.w	99da <usb_handle_standard_request+0x26>
	while (p[DESC_bLength] != 0U) {
    9cea:	7821      	ldrb	r1, [r4, #0]
    9cec:	2900      	cmp	r1, #0
    9cee:	f43f ae74 	beq.w	99da <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    9cf2:	7863      	ldrb	r3, [r4, #1]
    9cf4:	2b04      	cmp	r3, #4
    9cf6:	f47f af2e 	bne.w	9b56 <usb_handle_standard_request+0x1a2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    9cfa:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    9cfc:	459c      	cmp	ip, r3
    9cfe:	f47f af2a 	bne.w	9b56 <usb_handle_standard_request+0x1a2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    9d02:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    9d04:	bf96      	itet	ls
    9d06:	199b      	addls	r3, r3, r6
	return 0;
    9d08:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    9d0a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    9d0e:	7013      	strb	r3, [r2, #0]
				*len = 1;
    9d10:	2301      	movs	r3, #1
    9d12:	e7da      	b.n	9cca <usb_handle_standard_request+0x316>

00009d14 <usb_write>:
{
    9d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    9d18:	f8df a058 	ldr.w	sl, [pc, #88]	; 9d74 <usb_write+0x60>
{
    9d1c:	b089      	sub	sp, #36	; 0x24
    9d1e:	4605      	mov	r5, r0
    9d20:	460f      	mov	r7, r1
    9d22:	4690      	mov	r8, r2
    9d24:	4699      	mov	r9, r3
    9d26:	2604      	movs	r6, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    9d28:	f04f 0b03 	mov.w	fp, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    9d2c:	464b      	mov	r3, r9
    9d2e:	4642      	mov	r2, r8
    9d30:	4639      	mov	r1, r7
    9d32:	4628      	mov	r0, r5
    9d34:	f017 fdbc 	bl	218b0 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    9d38:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    9d3c:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    9d3e:	d115      	bne.n	9d6c <usb_write+0x58>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    9d40:	f8da 3000 	ldr.w	r3, [sl]
    9d44:	f013 0f06 	tst.w	r3, #6
    9d48:	d00c      	beq.n	9d64 <usb_write+0x50>
    9d4a:	4b0b      	ldr	r3, [pc, #44]	; (9d78 <usb_write+0x64>)
    9d4c:	f8cd b004 	str.w	fp, [sp, #4]
    9d50:	aa05      	add	r2, sp, #20
    9d52:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9d56:	4650      	mov	r0, sl
    9d58:	e9cd 3506 	strd	r3, r5, [sp, #24]
    9d5c:	f8cd b014 	str.w	fp, [sp, #20]
    9d60:	f01e ff29 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
	z_impl_k_yield();
    9d64:	f01c f822 	bl	25dac <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    9d68:	3e01      	subs	r6, #1
    9d6a:	d1df      	bne.n	9d2c <usb_write+0x18>
}
    9d6c:	4620      	mov	r0, r4
    9d6e:	b009      	add	sp, #36	; 0x24
    9d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d74:	20000aa0 	.word	0x20000aa0
    9d78:	000322df 	.word	0x000322df

00009d7c <usb_data_to_host>:
{
    9d7c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    9d7e:	4c13      	ldr	r4, [pc, #76]	; (9dcc <usb_data_to_host+0x50>)
    9d80:	7d23      	ldrb	r3, [r4, #20]
    9d82:	b9cb      	cbnz	r3, 9db8 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    9d84:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    9d86:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    9d88:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    9d8a:	ab01      	add	r3, sp, #4
    9d8c:	2080      	movs	r0, #128	; 0x80
    9d8e:	f7ff ffc1 	bl	9d14 <usb_write>
		usb_dev.data_buf += chunk;
    9d92:	9a01      	ldr	r2, [sp, #4]
    9d94:	68a3      	ldr	r3, [r4, #8]
    9d96:	4413      	add	r3, r2
    9d98:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    9d9a:	68e3      	ldr	r3, [r4, #12]
    9d9c:	1a9b      	subs	r3, r3, r2
    9d9e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    9da0:	b943      	cbnz	r3, 9db4 <usb_data_to_host+0x38>
    9da2:	b13a      	cbz	r2, 9db4 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    9da4:	6923      	ldr	r3, [r4, #16]
    9da6:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    9da8:	429a      	cmp	r2, r3
    9daa:	dd03      	ble.n	9db4 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    9dac:	069b      	lsls	r3, r3, #26
    9dae:	d101      	bne.n	9db4 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    9db0:	2301      	movs	r3, #1
    9db2:	7523      	strb	r3, [r4, #20]
}
    9db4:	b002      	add	sp, #8
    9db6:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    9db8:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    9dba:	461a      	mov	r2, r3
    9dbc:	4619      	mov	r1, r3
    9dbe:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    9dc0:	7523      	strb	r3, [r4, #20]
}
    9dc2:	b002      	add	sp, #8
    9dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    9dc8:	f017 bd72 	b.w	218b0 <usb_dc_ep_write>
    9dcc:	20002a4c 	.word	0x20002a4c

00009dd0 <usb_handle_control_transfer>:
{
    9dd0:	b530      	push	{r4, r5, lr}
    9dd2:	b08b      	sub	sp, #44	; 0x2c
	uint32_t chunk = 0U;
    9dd4:	2300      	movs	r3, #0
{
    9dd6:	4602      	mov	r2, r0
    9dd8:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    9dda:	9300      	str	r3, [sp, #0]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    9ddc:	2800      	cmp	r0, #0
    9dde:	d16d      	bne.n	9ebc <usb_handle_control_transfer+0xec>
    9de0:	2900      	cmp	r1, #0
    9de2:	d14a      	bne.n	9e7a <usb_handle_control_transfer+0xaa>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    9de4:	2208      	movs	r2, #8
    9de6:	460b      	mov	r3, r1
    9de8:	eb0d 0102 	add.w	r1, sp, r2
    9dec:	f022 fe8e 	bl	2cb0c <usb_dc_ep_read>
    9df0:	2800      	cmp	r0, #0
    9df2:	da04      	bge.n	9dfe <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    9df4:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    9df6:	f017 fc93 	bl	21720 <usb_dc_ep_set_stall>
}
    9dfa:	b00b      	add	sp, #44	; 0x2c
    9dfc:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    9dfe:	4c34      	ldr	r4, [pc, #208]	; (9ed0 <usb_handle_control_transfer+0x100>)
		setup->bRequest = setup_raw.bRequest;
    9e00:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    9e04:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    9e08:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    9e0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9e0e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    9e10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    9e14:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    9e16:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    9e18:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    9e1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9e20:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    9e22:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    9e24:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    9e28:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    9e2a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    9e2c:	d418      	bmi.n	9e60 <usb_handle_control_transfer+0x90>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    9e2e:	2b80      	cmp	r3, #128	; 0x80
    9e30:	d912      	bls.n	9e58 <usb_handle_control_transfer+0x88>
				LOG_ERR("Request buffer too small");
    9e32:	4828      	ldr	r0, [pc, #160]	; (9ed4 <usb_handle_control_transfer+0x104>)
    9e34:	6803      	ldr	r3, [r0, #0]
    9e36:	075b      	lsls	r3, r3, #29
    9e38:	d009      	beq.n	9e4e <usb_handle_control_transfer+0x7e>
    9e3a:	4b27      	ldr	r3, [pc, #156]	; (9ed8 <usb_handle_control_transfer+0x108>)
    9e3c:	9308      	str	r3, [sp, #32]
    9e3e:	aa07      	add	r2, sp, #28
    9e40:	2302      	movs	r3, #2
    9e42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9e46:	9301      	str	r3, [sp, #4]
    9e48:	9307      	str	r3, [sp, #28]
    9e4a:	f01e feb4 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    9e4e:	2080      	movs	r0, #128	; 0x80
    9e50:	f017 fc66 	bl	21720 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    9e54:	2000      	movs	r0, #0
    9e56:	e7ce      	b.n	9df6 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    9e58:	b113      	cbz	r3, 9e60 <usb_handle_control_transfer+0x90>
				usb_dev.data_buf_residue = setup->wLength;
    9e5a:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    9e5e:	e7cc      	b.n	9dfa <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    9e60:	f7ff fc7c 	bl	975c <usb_handle_request.constprop.0>
    9e64:	2800      	cmp	r0, #0
    9e66:	d0c5      	beq.n	9df4 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    9e68:	88e2      	ldrh	r2, [r4, #6]
    9e6a:	6923      	ldr	r3, [r4, #16]
    9e6c:	429a      	cmp	r2, r3
    9e6e:	bfd4      	ite	le
    9e70:	60e2      	strle	r2, [r4, #12]
    9e72:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    9e74:	f7ff ff82 	bl	9d7c <usb_data_to_host>
    9e78:	e7bf      	b.n	9dfa <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    9e7a:	4c15      	ldr	r4, [pc, #84]	; (9ed0 <usb_handle_control_transfer+0x100>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    9e7c:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    9e80:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    9e82:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    9e84:	dc04      	bgt.n	9e90 <usb_handle_control_transfer+0xc0>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    9e86:	f022 fe41 	bl	2cb0c <usb_dc_ep_read>
    9e8a:	2800      	cmp	r0, #0
    9e8c:	dab5      	bge.n	9dfa <usb_handle_control_transfer+0x2a>
    9e8e:	e7b1      	b.n	9df4 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    9e90:	462a      	mov	r2, r5
    9e92:	f022 fe3b 	bl	2cb0c <usb_dc_ep_read>
    9e96:	2800      	cmp	r0, #0
    9e98:	dbd9      	blt.n	9e4e <usb_handle_control_transfer+0x7e>
		usb_dev.data_buf += chunk;
    9e9a:	9900      	ldr	r1, [sp, #0]
    9e9c:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    9e9e:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    9ea0:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    9ea2:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    9ea4:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    9ea6:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d1a6      	bne.n	9dfa <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    9eac:	f104 0338 	add.w	r3, r4, #56	; 0x38
    9eb0:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    9eb2:	f7ff fc53 	bl	975c <usb_handle_request.constprop.0>
    9eb6:	2800      	cmp	r0, #0
    9eb8:	d1dc      	bne.n	9e74 <usb_handle_control_transfer+0xa4>
    9eba:	e79b      	b.n	9df4 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    9ebc:	2880      	cmp	r0, #128	; 0x80
    9ebe:	d19c      	bne.n	9dfa <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    9ec0:	4b03      	ldr	r3, [pc, #12]	; (9ed0 <usb_handle_control_transfer+0x100>)
    9ec2:	68da      	ldr	r2, [r3, #12]
    9ec4:	2a00      	cmp	r2, #0
    9ec6:	d1d5      	bne.n	9e74 <usb_handle_control_transfer+0xa4>
    9ec8:	7d1b      	ldrb	r3, [r3, #20]
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d1d2      	bne.n	9e74 <usb_handle_control_transfer+0xa4>
    9ece:	e794      	b.n	9dfa <usb_handle_control_transfer+0x2a>
    9ed0:	20002a4c 	.word	0x20002a4c
    9ed4:	20000aa0 	.word	0x20000aa0
    9ed8:	00032306 	.word	0x00032306

00009edc <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    9edc:	4b05      	ldr	r3, [pc, #20]	; (9ef4 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    9ede:	4a06      	ldr	r2, [pc, #24]	; (9ef8 <usb_set_config+0x1c>)
    9ee0:	629a      	str	r2, [r3, #40]	; 0x28
    9ee2:	4a06      	ldr	r2, [pc, #24]	; (9efc <usb_set_config+0x20>)
    9ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    9ee6:	4a06      	ldr	r2, [pc, #24]	; (9f00 <usb_set_config+0x24>)
    9ee8:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    9eea:	4a06      	ldr	r2, [pc, #24]	; (9f04 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    9eec:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    9eee:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    9ef0:	2000      	movs	r0, #0
    9ef2:	4770      	bx	lr
    9ef4:	20002a4c 	.word	0x20002a4c
    9ef8:	000099b5 	.word	0x000099b5
    9efc:	00009639 	.word	0x00009639
    9f00:	000096d9 	.word	0x000096d9
    9f04:	00009679 	.word	0x00009679

00009f08 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    9f08:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    9f0a:	4b10      	ldr	r3, [pc, #64]	; (9f4c <usb_device_init+0x44>)
    9f0c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    9f10:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    9f12:	b9c4      	cbnz	r4, 9f46 <usb_device_init+0x3e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    9f14:	f000 fa12 	bl	a33c <usb_get_device_descriptor>
	if (!device_descriptor) {
    9f18:	b980      	cbnz	r0, 9f3c <usb_device_init+0x34>
		LOG_ERR("Failed to configure USB device stack");
    9f1a:	480d      	ldr	r0, [pc, #52]	; (9f50 <usb_device_init+0x48>)
    9f1c:	6803      	ldr	r3, [r0, #0]
    9f1e:	075b      	lsls	r3, r3, #29
    9f20:	d009      	beq.n	9f36 <usb_device_init+0x2e>
    9f22:	4b0c      	ldr	r3, [pc, #48]	; (9f54 <usb_device_init+0x4c>)
    9f24:	9306      	str	r3, [sp, #24]
    9f26:	aa05      	add	r2, sp, #20
    9f28:	2302      	movs	r3, #2
    9f2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9f2e:	9301      	str	r3, [sp, #4]
    9f30:	9305      	str	r3, [sp, #20]
    9f32:	f01e fe40 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
    9f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9f3a:	e002      	b.n	9f42 <usb_device_init+0x3a>
		return -1;
	}

	usb_set_config(device_descriptor);
    9f3c:	f7ff ffce 	bl	9edc <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    9f40:	4620      	mov	r0, r4
}
    9f42:	b008      	add	sp, #32
    9f44:	bd10      	pop	{r4, pc}
		return -EALREADY;
    9f46:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9f4a:	e7fa      	b.n	9f42 <usb_device_init+0x3a>
    9f4c:	20002a4c 	.word	0x20002a4c
    9f50:	20000aa0 	.word	0x20000aa0
    9f54:	0003231f 	.word	0x0003231f

00009f58 <usb_enable>:
{
    9f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f5c:	4604      	mov	r4, r0
    9f5e:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    9f60:	4d3c      	ldr	r5, [pc, #240]	; (a054 <usb_enable+0xfc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    9f62:	483d      	ldr	r0, [pc, #244]	; (a058 <usb_enable+0x100>)
    9f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f6c:	f01b f9d2 	bl	25314 <z_impl_k_mutex_lock>
    9f70:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    9f74:	b18e      	cbz	r6, 9f9a <usb_enable+0x42>
		LOG_WRN("USB device support already enabled");
    9f76:	4839      	ldr	r0, [pc, #228]	; (a05c <usb_enable+0x104>)
    9f78:	6803      	ldr	r3, [r0, #0]
    9f7a:	f013 0f06 	tst.w	r3, #6
    9f7e:	d009      	beq.n	9f94 <usb_enable+0x3c>
    9f80:	4b37      	ldr	r3, [pc, #220]	; (a060 <usb_enable+0x108>)
    9f82:	9306      	str	r3, [sp, #24]
    9f84:	aa05      	add	r2, sp, #20
    9f86:	2302      	movs	r3, #2
    9f88:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9f8c:	9301      	str	r3, [sp, #4]
    9f8e:	9305      	str	r3, [sp, #20]
    9f90:	f01e fe11 	bl	28bb6 <z_log_msg2_static_create.constprop.0>
		ret = -EALREADY;
    9f94:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9f98:	e03f      	b.n	a01a <usb_enable+0xc2>
	usb_dev.status_callback = cb;
    9f9a:	4832      	ldr	r0, [pc, #200]	; (a064 <usb_enable+0x10c>)
	usb_dev.user_status_callback = status_cb;
    9f9c:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    9f9e:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    9fa0:	f017 fdee 	bl	21b80 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    9fa4:	f017 faf4 	bl	21590 <usb_dc_attach>
	if (ret < 0) {
    9fa8:	1e04      	subs	r4, r0, #0
    9faa:	db36      	blt.n	a01a <usb_enable+0xc2>
	ret = usb_transfer_init();
    9fac:	f000 fbe6 	bl	a77c <usb_transfer_init>
	if (ret < 0) {
    9fb0:	1e04      	subs	r4, r0, #0
    9fb2:	db32      	blt.n	a01a <usb_enable+0xc2>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    9fb4:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    9fb6:	a802      	add	r0, sp, #8
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    9fb8:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    9fbc:	f88d 600c 	strb.w	r6, [sp, #12]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    9fc0:	f88d 6008 	strb.w	r6, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    9fc4:	f017 fb74 	bl	216b0 <usb_dc_ep_configure>
	if (ret < 0) {
    9fc8:	1e04      	subs	r4, r0, #0
    9fca:	db26      	blt.n	a01a <usb_enable+0xc2>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    9fcc:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    9fce:	a802      	add	r0, sp, #8
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    9fd0:	f88d 7008 	strb.w	r7, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    9fd4:	f017 fb6c 	bl	216b0 <usb_dc_ep_configure>
	if (ret < 0) {
    9fd8:	1e04      	subs	r4, r0, #0
    9fda:	db1e      	blt.n	a01a <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    9fdc:	4922      	ldr	r1, [pc, #136]	; (a068 <usb_enable+0x110>)
    9fde:	4630      	mov	r0, r6
    9fe0:	f017 fdba 	bl	21b58 <usb_dc_ep_set_callback>
	if (ret < 0) {
    9fe4:	1e04      	subs	r4, r0, #0
    9fe6:	db18      	blt.n	a01a <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    9fe8:	491f      	ldr	r1, [pc, #124]	; (a068 <usb_enable+0x110>)
    9fea:	4638      	mov	r0, r7
    9fec:	f017 fdb4 	bl	21b58 <usb_dc_ep_set_callback>
	if (ret < 0) {
    9ff0:	1e04      	subs	r4, r0, #0
    9ff2:	db12      	blt.n	a01a <usb_enable+0xc2>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    9ff4:	4c1d      	ldr	r4, [pc, #116]	; (a06c <usb_enable+0x114>)
    9ff6:	f8df 8078 	ldr.w	r8, [pc, #120]	; a070 <usb_enable+0x118>
    9ffa:	4544      	cmp	r4, r8
    9ffc:	d314      	bcc.n	a028 <usb_enable+0xd0>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    9ffe:	2000      	movs	r0, #0
    a000:	f017 fc06 	bl	21810 <usb_dc_ep_enable>
	if (ret < 0) {
    a004:	1e04      	subs	r4, r0, #0
    a006:	db08      	blt.n	a01a <usb_enable+0xc2>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    a008:	2080      	movs	r0, #128	; 0x80
    a00a:	f017 fc01 	bl	21810 <usb_dc_ep_enable>
	if (ret < 0) {
    a00e:	1e04      	subs	r4, r0, #0
    a010:	db03      	blt.n	a01a <usb_enable+0xc2>
	usb_dev.enabled = true;
    a012:	2301      	movs	r3, #1
    a014:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    a018:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    a01a:	480f      	ldr	r0, [pc, #60]	; (a058 <usb_enable+0x100>)
    a01c:	f01b f9f2 	bl	25404 <z_impl_k_mutex_unlock>
}
    a020:	4620      	mov	r0, r4
    a022:	b008      	add	sp, #32
    a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    a028:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a02a:	2600      	movs	r6, #0
    a02c:	7f22      	ldrb	r2, [r4, #28]
    a02e:	b2f3      	uxtb	r3, r6
    a030:	429a      	cmp	r2, r3
    a032:	d801      	bhi.n	a038 <usb_enable+0xe0>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a034:	3424      	adds	r4, #36	; 0x24
    a036:	e7e0      	b.n	9ffa <usb_enable+0xa2>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    a038:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    a03c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    a040:	7910      	ldrb	r0, [r2, #4]
    a042:	f017 fd89 	bl	21b58 <usb_dc_ep_set_callback>
    a046:	3601      	adds	r6, #1
    a048:	2800      	cmp	r0, #0
    a04a:	d0ef      	beq.n	a02c <usb_enable+0xd4>
    a04c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a050:	e7e3      	b.n	a01a <usb_enable+0xc2>
    a052:	bf00      	nop
    a054:	20002a4c 	.word	0x20002a4c
    a058:	20000bac 	.word	0x20000bac
    a05c:	20000aa0 	.word	0x20000aa0
    a060:	00032344 	.word	0x00032344
    a064:	00009871 	.word	0x00009871
    a068:	00009dd1 	.word	0x00009dd1
    a06c:	20000ea8 	.word	0x20000ea8
    a070:	20000ecc 	.word	0x20000ecc

0000a074 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    a074:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    a076:	4b1f      	ldr	r3, [pc, #124]	; (a0f4 <usb_update_sn_string_descriptor+0x80>)
{
    a078:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    a07a:	aa05      	add	r2, sp, #20
    a07c:	f103 0510 	add.w	r5, r3, #16
    a080:	6818      	ldr	r0, [r3, #0]
    a082:	6859      	ldr	r1, [r3, #4]
    a084:	4614      	mov	r4, r2
    a086:	c403      	stmia	r4!, {r0, r1}
    a088:	3308      	adds	r3, #8
    a08a:	42ab      	cmp	r3, r5
    a08c:	4622      	mov	r2, r4
    a08e:	d1f7      	bne.n	a080 <usb_update_sn_string_descriptor+0xc>
    a090:	781b      	ldrb	r3, [r3, #0]
    a092:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    a094:	2210      	movs	r2, #16
    a096:	2100      	movs	r1, #0
    a098:	a801      	add	r0, sp, #4
    a09a:	f020 f96a 	bl	2a372 <memset>
	memset(sn, 0, sizeof(sn));
    a09e:	2212      	movs	r2, #18
    a0a0:	2100      	movs	r1, #0
    a0a2:	4815      	ldr	r0, [pc, #84]	; (a0f8 <usb_update_sn_string_descriptor+0x84>)
    a0a4:	f020 f965 	bl	2a372 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    a0a8:	2110      	movs	r1, #16
    a0aa:	a801      	add	r0, sp, #4
    a0ac:	f022 fe20 	bl	2ccf0 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    a0b0:	2800      	cmp	r0, #0
    a0b2:	dd1b      	ble.n	a0ec <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    a0b4:	2808      	cmp	r0, #8
    a0b6:	bfb8      	it	lt
    a0b8:	2008      	movlt	r0, #8
    a0ba:	3808      	subs	r0, #8
    a0bc:	ab01      	add	r3, sp, #4
    a0be:	4a0e      	ldr	r2, [pc, #56]	; (a0f8 <usb_update_sn_string_descriptor+0x84>)
    a0c0:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    a0c2:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    a0c4:	f810 3b01 	ldrb.w	r3, [r0], #1
    a0c8:	ac0a      	add	r4, sp, #40	; 0x28
    a0ca:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    a0ce:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    a0d2:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    a0d6:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    a0d8:	ac0a      	add	r4, sp, #40	; 0x28
    a0da:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    a0dc:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    a0de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    a0e2:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    a0e4:	2908      	cmp	r1, #8
    a0e6:	f102 0202 	add.w	r2, r2, #2
    a0ea:	d1eb      	bne.n	a0c4 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    a0ec:	4802      	ldr	r0, [pc, #8]	; (a0f8 <usb_update_sn_string_descriptor+0x84>)
    a0ee:	b00b      	add	sp, #44	; 0x2c
    a0f0:	bd30      	pop	{r4, r5, pc}
    a0f2:	bf00      	nop
    a0f4:	00032372 	.word	0x00032372
    a0f8:	20004aad 	.word	0x20004aad

0000a0fc <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a100:	4604      	mov	r4, r0
    a102:	b08b      	sub	sp, #44	; 0x2c
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    a104:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    a106:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    a10a:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    a10c:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    a10e:	4637      	mov	r7, r6

	while (head->bLength != 0U) {
    a110:	7820      	ldrb	r0, [r4, #0]
    a112:	b920      	cbnz	r0, a11e <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    a114:	4b7f      	ldr	r3, [pc, #508]	; (a314 <usb_fix_descriptor+0x218>)
    a116:	3402      	adds	r4, #2
    a118:	429c      	cmp	r4, r3
    a11a:	d039      	beq.n	a190 <usb_fix_descriptor+0x94>
    a11c:	e7f2      	b.n	a104 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    a11e:	7863      	ldrb	r3, [r4, #1]
    a120:	2b05      	cmp	r3, #5
    a122:	d805      	bhi.n	a130 <usb_fix_descriptor+0x34>
    a124:	e8df f003 	tbb	[pc, r3]
    a128:	a30304a3 	.word	0xa30304a3
    a12c:	2c07      	.short	0x2c07
    a12e:	4627      	mov	r7, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    a130:	7823      	ldrb	r3, [r4, #0]
    a132:	441c      	add	r4, r3
    a134:	e7ec      	b.n	a110 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    a136:	78e3      	ldrb	r3, [r4, #3]
    a138:	2b00      	cmp	r3, #0
    a13a:	d1f9      	bne.n	a130 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    a13c:	78a3      	ldrb	r3, [r4, #2]
    a13e:	b1e3      	cbz	r3, a17a <usb_fix_descriptor+0x7e>
			numof_ifaces++;
    a140:	f10a 0a01 	add.w	sl, sl, #1
    a144:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    a148:	e7f2      	b.n	a130 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    a14a:	686a      	ldr	r2, [r5, #4]
    a14c:	4294      	cmp	r4, r2
    a14e:	f000 80d9 	beq.w	a304 <usb_fix_descriptor+0x208>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a152:	3524      	adds	r5, #36	; 0x24
    a154:	429d      	cmp	r5, r3
    a156:	d3f8      	bcc.n	a14a <usb_fix_descriptor+0x4e>
					LOG_ERR("There is no usb_cfg_data "
    a158:	486f      	ldr	r0, [pc, #444]	; (a318 <usb_fix_descriptor+0x21c>)
    a15a:	6803      	ldr	r3, [r0, #0]
    a15c:	075b      	lsls	r3, r3, #29
    a15e:	d015      	beq.n	a18c <usb_fix_descriptor+0x90>
    a160:	4b6e      	ldr	r3, [pc, #440]	; (a31c <usb_fix_descriptor+0x220>)
    a162:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a166:	2303      	movs	r3, #3
    a168:	9303      	str	r3, [sp, #12]
    a16a:	9307      	str	r3, [sp, #28]
    a16c:	2300      	movs	r3, #0
    a16e:	aa07      	add	r2, sp, #28
    a170:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a174:	f01d fbe4 	bl	27940 <z_impl_z_log_msg2_static_create>
    a178:	e008      	b.n	a18c <usb_fix_descriptor+0x90>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a17a:	4d69      	ldr	r5, [pc, #420]	; (a320 <usb_fix_descriptor+0x224>)
    a17c:	4b69      	ldr	r3, [pc, #420]	; (a324 <usb_fix_descriptor+0x228>)
    a17e:	e7e9      	b.n	a154 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    a180:	2d00      	cmp	r5, #0
    a182:	d171      	bne.n	a268 <usb_fix_descriptor+0x16c>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    a184:	4864      	ldr	r0, [pc, #400]	; (a318 <usb_fix_descriptor+0x21c>)
    a186:	6803      	ldr	r3, [r0, #0]
    a188:	075d      	lsls	r5, r3, #29
    a18a:	d104      	bne.n	a196 <usb_fix_descriptor+0x9a>
				return -1;
    a18c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    a190:	b00b      	add	sp, #44	; 0x2c
    a192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    a196:	4b64      	ldr	r3, [pc, #400]	; (a328 <usb_fix_descriptor+0x22c>)
				LOG_ERR("Failed to validate endpoints");
    a198:	9308      	str	r3, [sp, #32]
    a19a:	2302      	movs	r3, #2
    a19c:	9303      	str	r3, [sp, #12]
    a19e:	9307      	str	r3, [sp, #28]
    a1a0:	2300      	movs	r3, #0
    a1a2:	aa07      	add	r2, sp, #28
    a1a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a1a8:	e7e4      	b.n	a174 <usb_fix_descriptor+0x78>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    a1aa:	6a2a      	ldr	r2, [r5, #32]
    a1ac:	f894 c002 	ldrb.w	ip, [r4, #2]
    a1b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a1b4:	7910      	ldrb	r0, [r2, #4]
    a1b6:	4584      	cmp	ip, r0
    a1b8:	d009      	beq.n	a1ce <usb_fix_descriptor+0xd2>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    a1ba:	3301      	adds	r3, #1
    a1bc:	7f2a      	ldrb	r2, [r5, #28]
    a1be:	4293      	cmp	r3, r2
    a1c0:	d3f3      	bcc.n	a1aa <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    a1c2:	4855      	ldr	r0, [pc, #340]	; (a318 <usb_fix_descriptor+0x21c>)
    a1c4:	6803      	ldr	r3, [r0, #0]
    a1c6:	075c      	lsls	r4, r3, #29
    a1c8:	d0e0      	beq.n	a18c <usb_fix_descriptor+0x90>
    a1ca:	4b58      	ldr	r3, [pc, #352]	; (a32c <usb_fix_descriptor+0x230>)
    a1cc:	e7e4      	b.n	a198 <usb_fix_descriptor+0x9c>
    a1ce:	f04f 0801 	mov.w	r8, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    a1d2:	78e0      	ldrb	r0, [r4, #3]
    a1d4:	f000 0003 	and.w	r0, r0, #3
    a1d8:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    a1dc:	7920      	ldrb	r0, [r4, #4]
    a1de:	f894 c005 	ldrb.w	ip, [r4, #5]
    a1e2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    a1e6:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    a1ea:	f994 0002 	ldrsb.w	r0, [r4, #2]
    a1ee:	2800      	cmp	r0, #0
    a1f0:	fa5f f988 	uxtb.w	r9, r8
    a1f4:	da2a      	bge.n	a24c <usb_fix_descriptor+0x150>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    a1f6:	f108 0010 	add.w	r0, r8, #16
    a1fa:	fa01 f000 	lsl.w	r0, r1, r0
    a1fe:	ea10 0f0b 	tst.w	r0, fp
    a202:	d12b      	bne.n	a25c <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    a204:	f069 007f 	orn	r0, r9, #127	; 0x7f
    a208:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    a20c:	a804      	add	r0, sp, #16
    a20e:	e9cd 3200 	strd	r3, r2, [sp]
    a212:	f017 fa0d 	bl	21630 <usb_dc_ep_check_cap>
    a216:	e9dd 3200 	ldrd	r3, r2, [sp]
    a21a:	2101      	movs	r1, #1
    a21c:	b9f0      	cbnz	r0, a25c <usb_fix_descriptor+0x160>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    a21e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    a222:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    a224:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    a228:	bf1c      	itt	ne
    a22a:	f109 0910 	addne.w	r9, r9, #16
    a22e:	fa5f f989 	uxtbne.w	r9, r9
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    a232:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    a234:	bf18      	it	ne
    a236:	fa01 f909 	lslne.w	r9, r1, r9
    a23a:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    a23c:	bf0a      	itet	eq
    a23e:	fa01 f308 	lsleq.w	r3, r1, r8
					*requested_ep |= (1U << (idx + 16U));
    a242:	ea4b 0b09 	orrne.w	fp, fp, r9
					*requested_ep |= (1U << idx);
    a246:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    a24a:	e771      	b.n	a130 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    a24c:	fa01 f008 	lsl.w	r0, r1, r8
    a250:	ea10 0f0b 	tst.w	r0, fp
    a254:	d102      	bne.n	a25c <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = idx;
    a256:	f88d 9010 	strb.w	r9, [sp, #16]
    a25a:	e7d7      	b.n	a20c <usb_fix_descriptor+0x110>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    a25c:	f108 0801 	add.w	r8, r8, #1
    a260:	f1b8 0f10 	cmp.w	r8, #16
    a264:	d1b5      	bne.n	a1d2 <usb_fix_descriptor+0xd6>
    a266:	e7a8      	b.n	a1ba <usb_fix_descriptor+0xbe>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    a268:	2300      	movs	r3, #0
    a26a:	2101      	movs	r1, #1
    a26c:	e7a6      	b.n	a1bc <usb_fix_descriptor+0xc0>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    a26e:	2e03      	cmp	r6, #3
    a270:	d12d      	bne.n	a2ce <usb_fix_descriptor+0x1d2>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    a272:	f7ff feff 	bl	a074 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    a276:	4680      	mov	r8, r0
    a278:	b1b8      	cbz	r0, a2aa <usb_fix_descriptor+0x1ae>
	runtime_sn_len = strlen(runtime_sn);
    a27a:	f020 f819 	bl	2a2b0 <strlen>
	if (!runtime_sn_len) {
    a27e:	4681      	mov	r9, r0
    a280:	b198      	cbz	r0, a2aa <usb_fix_descriptor+0x1ae>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    a282:	482b      	ldr	r0, [pc, #172]	; (a330 <usb_fix_descriptor+0x234>)
    a284:	f020 f814 	bl	2a2b0 <strlen>
	if (runtime_sn_len != default_sn_len) {
    a288:	4581      	cmp	r9, r0
    a28a:	d01a      	beq.n	a2c2 <usb_fix_descriptor+0x1c6>
		LOG_ERR("the new SN descriptor doesn't have the same "
    a28c:	4822      	ldr	r0, [pc, #136]	; (a318 <usb_fix_descriptor+0x21c>)
    a28e:	6803      	ldr	r3, [r0, #0]
    a290:	0759      	lsls	r1, r3, #29
    a292:	d00a      	beq.n	a2aa <usb_fix_descriptor+0x1ae>
    a294:	4b27      	ldr	r3, [pc, #156]	; (a334 <usb_fix_descriptor+0x238>)
    a296:	9308      	str	r3, [sp, #32]
    a298:	2302      	movs	r3, #2
    a29a:	9303      	str	r3, [sp, #12]
    a29c:	9307      	str	r3, [sp, #28]
    a29e:	2300      	movs	r3, #0
    a2a0:	aa07      	add	r2, sp, #28
    a2a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a2a6:	f01d fb4b 	bl	27940 <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    a2aa:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    a2ac:	f06f 0102 	mvn.w	r1, #2
    a2b0:	18e2      	adds	r2, r4, r3
    a2b2:	1b09      	subs	r1, r1, r4
    a2b4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    a2b8:	42d1      	cmn	r1, r2
    a2ba:	d512      	bpl.n	a2e2 <usb_fix_descriptor+0x1e6>
			str_descr_idx += 1U;
    a2bc:	3601      	adds	r6, #1
    a2be:	b2f6      	uxtb	r6, r6
			break;
    a2c0:	e736      	b.n	a130 <usb_fix_descriptor+0x34>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    a2c2:	464a      	mov	r2, r9
    a2c4:	4641      	mov	r1, r8
    a2c6:	1ca0      	adds	r0, r4, #2
    a2c8:	f020 f848 	bl	2a35c <memcpy>
    a2cc:	e7ed      	b.n	a2aa <usb_fix_descriptor+0x1ae>
			if (str_descr_idx) {
    a2ce:	2e00      	cmp	r6, #0
    a2d0:	d1eb      	bne.n	a2aa <usb_fix_descriptor+0x1ae>
				if (!cfg_descr) {
    a2d2:	b97f      	cbnz	r7, a2f4 <usb_fix_descriptor+0x1f8>
					LOG_ERR("Incomplete device descriptor");
    a2d4:	4810      	ldr	r0, [pc, #64]	; (a318 <usb_fix_descriptor+0x21c>)
    a2d6:	6803      	ldr	r3, [r0, #0]
    a2d8:	075a      	lsls	r2, r3, #29
    a2da:	f43f af57 	beq.w	a18c <usb_fix_descriptor+0x90>
    a2de:	4b16      	ldr	r3, [pc, #88]	; (a338 <usb_fix_descriptor+0x23c>)
    a2e0:	e75a      	b.n	a198 <usb_fix_descriptor+0x9c>
		buf[i] = 0U;
    a2e2:	f04f 0000 	mov.w	r0, #0
    a2e6:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    a2ea:	f813 0901 	ldrb.w	r0, [r3], #-1
    a2ee:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    a2f2:	e7e1      	b.n	a2b8 <usb_fix_descriptor+0x1bc>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    a2f4:	1be3      	subs	r3, r4, r7
	dst[0] = val;
    a2f6:	70bb      	strb	r3, [r7, #2]
	dst[1] = val >> 8;
    a2f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a2fc:	70fb      	strb	r3, [r7, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    a2fe:	f887 a004 	strb.w	sl, [r7, #4]
    a302:	e7db      	b.n	a2bc <usb_fix_descriptor+0x1c0>
				if (cfg_data->interface_config) {
    a304:	68ab      	ldr	r3, [r5, #8]
    a306:	2b00      	cmp	r3, #0
    a308:	f43f af1a 	beq.w	a140 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    a30c:	4651      	mov	r1, sl
    a30e:	4620      	mov	r0, r4
    a310:	4798      	blx	r3
    a312:	e715      	b.n	a140 <usb_fix_descriptor+0x44>
    a314:	20000ea7 	.word	0x20000ea7
    a318:	20000a9c 	.word	0x20000a9c
    a31c:	00032383 	.word	0x00032383
    a320:	20000ea8 	.word	0x20000ea8
    a324:	20000ecc 	.word	0x20000ecc
    a328:	000323a3 	.word	0x000323a3
    a32c:	000323e4 	.word	0x000323e4
    a330:	00032372 	.word	0x00032372
    a334:	00032401 	.word	0x00032401
    a338:	0003244c 	.word	0x0003244c

0000a33c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    a33c:	b500      	push	{lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    a33e:	480e      	ldr	r0, [pc, #56]	; (a378 <usb_get_device_descriptor+0x3c>)
{
    a340:	b089      	sub	sp, #36	; 0x24
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    a342:	f7ff fedb 	bl	a0fc <usb_fix_descriptor>
    a346:	b198      	cbz	r0, a370 <usb_get_device_descriptor+0x34>
		LOG_ERR("Failed to fixup USB descriptor");
    a348:	480c      	ldr	r0, [pc, #48]	; (a37c <usb_get_device_descriptor+0x40>)
    a34a:	6803      	ldr	r3, [r0, #0]
    a34c:	f013 0307 	ands.w	r3, r3, #7
    a350:	d010      	beq.n	a374 <usb_get_device_descriptor+0x38>
    a352:	4b0b      	ldr	r3, [pc, #44]	; (a380 <usb_get_device_descriptor+0x44>)
    a354:	9306      	str	r3, [sp, #24]
    a356:	2302      	movs	r3, #2
    a358:	9301      	str	r3, [sp, #4]
    a35a:	9305      	str	r3, [sp, #20]
    a35c:	2300      	movs	r3, #0
    a35e:	aa05      	add	r2, sp, #20
    a360:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a364:	f01d faec 	bl	27940 <z_impl_z_log_msg2_static_create>
		return NULL;
    a368:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    a36a:	b009      	add	sp, #36	; 0x24
    a36c:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    a370:	4801      	ldr	r0, [pc, #4]	; (a378 <usb_get_device_descriptor+0x3c>)
    a372:	e7fa      	b.n	a36a <usb_get_device_descriptor+0x2e>
		return NULL;
    a374:	4618      	mov	r0, r3
    a376:	e7f8      	b.n	a36a <usb_get_device_descriptor+0x2e>
    a378:	20000db8 	.word	0x20000db8
    a37c:	20000a9c 	.word	0x20000a9c
    a380:	00032469 	.word	0x00032469

0000a384 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    a384:	b510      	push	{r4, lr}
    a386:	4b09      	ldr	r3, [pc, #36]	; (a3ac <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    a388:	2100      	movs	r1, #0
    a38a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    a38c:	781c      	ldrb	r4, [r3, #0]
    a38e:	4284      	cmp	r4, r0
    a390:	d105      	bne.n	a39e <usb_ep_get_transfer+0x1a>
    a392:	685c      	ldr	r4, [r3, #4]
    a394:	b11c      	cbz	r4, a39e <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    a396:	2048      	movs	r0, #72	; 0x48
    a398:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    a39c:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    a39e:	3101      	adds	r1, #1
    a3a0:	2904      	cmp	r1, #4
    a3a2:	f103 0348 	add.w	r3, r3, #72	; 0x48
    a3a6:	d1f1      	bne.n	a38c <usb_ep_get_transfer+0x8>
	return NULL;
    a3a8:	2000      	movs	r0, #0
    a3aa:	e7f7      	b.n	a39c <usb_ep_get_transfer+0x18>
    a3ac:	20002b10 	.word	0x20002b10

0000a3b0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    a3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a3b4:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    a3b6:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    a3ba:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    a3be:	3310      	adds	r3, #16
{
    a3c0:	af00      	add	r7, sp, #0
    a3c2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    a3c4:	d111      	bne.n	a3ea <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    a3c6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    a3c8:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    a3cc:	f013 0602 	ands.w	r6, r3, #2
    a3d0:	d053      	beq.n	a47a <usb_transfer_work+0xca>
		if (!trans->bsize) {
    a3d2:	bb0a      	cbnz	r2, a418 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    a3d4:	f013 0304 	ands.w	r3, r3, #4
    a3d8:	d104      	bne.n	a3e4 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    a3da:	461a      	mov	r2, r3
    a3dc:	4619      	mov	r1, r3
    a3de:	4628      	mov	r0, r5
    a3e0:	f7ff fc98 	bl	9d14 <usb_write>
			}
			trans->status = 0;
    a3e4:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    a3e6:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    a3ea:	f854 3c30 	ldr.w	r3, [r4, #-48]
    a3ee:	3310      	adds	r3, #16
    a3f0:	d00e      	beq.n	a410 <usb_transfer_work+0x60>
    a3f2:	f854 6c20 	ldr.w	r6, [r4, #-32]
    a3f6:	b15e      	cbz	r6, a410 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    a3f8:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    a3fc:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    a400:	f023 f88c 	bl	2d51c <k_is_in_isr>
    a404:	2800      	cmp	r0, #0
    a406:	d07b      	beq.n	a500 <usb_transfer_work+0x150>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a408:	4845      	ldr	r0, [pc, #276]	; (a520 <usb_transfer_work+0x170>)
    a40a:	4621      	mov	r1, r4
    a40c:	f023 fa0e 	bl	2d82c <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    a410:	370c      	adds	r7, #12
    a412:	46bd      	mov	sp, r7
    a414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    a418:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    a41c:	463b      	mov	r3, r7
    a41e:	4628      	mov	r0, r5
    a420:	f7ff fc78 	bl	9d14 <usb_write>
		if (ret) {
    a424:	4603      	mov	r3, r0
    a426:	b1b8      	cbz	r0, a458 <usb_transfer_work+0xa8>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    a428:	483e      	ldr	r0, [pc, #248]	; (a524 <usb_transfer_work+0x174>)
    a42a:	6802      	ldr	r2, [r0, #0]
    a42c:	0751      	lsls	r1, r2, #29
    a42e:	d010      	beq.n	a452 <usb_transfer_work+0xa2>
    a430:	493d      	ldr	r1, [pc, #244]	; (a528 <usb_transfer_work+0x178>)
    a432:	466e      	mov	r6, sp
    a434:	b088      	sub	sp, #32
    a436:	466a      	mov	r2, sp
    a438:	e9c2 1304 	strd	r1, r3, [r2, #16]
    a43c:	2304      	movs	r3, #4
    a43e:	6195      	str	r5, [r2, #24]
    a440:	607b      	str	r3, [r7, #4]
    a442:	f842 3f0c 	str.w	r3, [r2, #12]!
    a446:	2300      	movs	r3, #0
    a448:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a44c:	f01d fa78 	bl	27940 <z_impl_z_log_msg2_static_create>
    a450:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    a452:	f06f 0315 	mvn.w	r3, #21
    a456:	e7c6      	b.n	a3e6 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    a458:	683a      	ldr	r2, [r7, #0]
    a45a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    a45e:	4413      	add	r3, r2
    a460:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    a464:	f854 3c28 	ldr.w	r3, [r4, #-40]
    a468:	1a9b      	subs	r3, r3, r2
    a46a:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    a46e:	f854 3c24 	ldr.w	r3, [r4, #-36]
    a472:	4413      	add	r3, r2
    a474:	f844 3c24 	str.w	r3, [r4, #-36]
    a478:	e7b7      	b.n	a3ea <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    a47a:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    a47e:	463b      	mov	r3, r7
    a480:	4628      	mov	r0, r5
    a482:	f017 faaf 	bl	219e4 <usb_dc_ep_read_wait>
		if (ret) {
    a486:	4603      	mov	r3, r0
    a488:	b1a8      	cbz	r0, a4b6 <usb_transfer_work+0x106>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    a48a:	4826      	ldr	r0, [pc, #152]	; (a524 <usb_transfer_work+0x174>)
    a48c:	6802      	ldr	r2, [r0, #0]
    a48e:	0752      	lsls	r2, r2, #29
    a490:	d0df      	beq.n	a452 <usb_transfer_work+0xa2>
    a492:	4925      	ldr	r1, [pc, #148]	; (a528 <usb_transfer_work+0x178>)
    a494:	46e8      	mov	r8, sp
    a496:	b088      	sub	sp, #32
    a498:	466a      	mov	r2, sp
    a49a:	e9c2 1304 	strd	r1, r3, [r2, #16]
    a49e:	2304      	movs	r3, #4
    a4a0:	6195      	str	r5, [r2, #24]
    a4a2:	607b      	str	r3, [r7, #4]
    a4a4:	f842 3f0c 	str.w	r3, [r2, #12]!
    a4a8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a4ac:	4633      	mov	r3, r6
    a4ae:	f01d fa47 	bl	27940 <z_impl_z_log_msg2_static_create>
    a4b2:	46c5      	mov	sp, r8
    a4b4:	e7cd      	b.n	a452 <usb_transfer_work+0xa2>
		trans->buffer += bytes;
    a4b6:	683e      	ldr	r6, [r7, #0]
    a4b8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    a4bc:	4433      	add	r3, r6
    a4be:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    a4c2:	f854 3c28 	ldr.w	r3, [r4, #-40]
    a4c6:	1b9b      	subs	r3, r3, r6
    a4c8:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    a4cc:	f854 3c24 	ldr.w	r3, [r4, #-36]
    a4d0:	4433      	add	r3, r6
    a4d2:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    a4d6:	2e00      	cmp	r6, #0
    a4d8:	d084      	beq.n	a3e4 <usb_transfer_work+0x34>
    a4da:	4628      	mov	r0, r5
    a4dc:	f017 fb56 	bl	21b8c <usb_dc_ep_mps>
    a4e0:	fbb6 f3f0 	udiv	r3, r6, r0
    a4e4:	fb03 6610 	mls	r6, r3, r0, r6
    a4e8:	2e00      	cmp	r6, #0
    a4ea:	f47f af7b 	bne.w	a3e4 <usb_transfer_work+0x34>
    a4ee:	f854 3c28 	ldr.w	r3, [r4, #-40]
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	f43f af76 	beq.w	a3e4 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    a4f8:	4628      	mov	r0, r5
    a4fa:	f017 fad5 	bl	21aa8 <usb_dc_ep_read_continue>
    a4fe:	e774      	b.n	a3ea <usb_transfer_work+0x3a>
		trans->cb = NULL;
    a500:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    a504:	f1a4 0018 	sub.w	r0, r4, #24
    a508:	f01a fff4 	bl	254f4 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    a50c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    a510:	338c      	adds	r3, #140	; 0x8c
    a512:	f43f af7d 	beq.w	a410 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    a516:	464a      	mov	r2, r9
    a518:	4641      	mov	r1, r8
    a51a:	4628      	mov	r0, r5
    a51c:	47b0      	blx	r6
    a51e:	e777      	b.n	a410 <usb_transfer_work+0x60>
    a520:	200018a0 	.word	0x200018a0
    a524:	20000aa8 	.word	0x20000aa8
    a528:	00032497 	.word	0x00032497

0000a52c <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    a52c:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    a52e:	1e4b      	subs	r3, r1, #1
    a530:	2b01      	cmp	r3, #1
{
    a532:	b088      	sub	sp, #32
    a534:	4606      	mov	r6, r0
    a536:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    a538:	d81c      	bhi.n	a574 <usb_transfer_ep_callback+0x48>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    a53a:	f7ff ff23 	bl	a384 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    a53e:	4604      	mov	r4, r0
    a540:	b9d0      	cbnz	r0, a578 <usb_transfer_ep_callback+0x4c>
		if (status == USB_DC_EP_DATA_OUT) {
    a542:	2d01      	cmp	r5, #1
    a544:	d116      	bne.n	a574 <usb_transfer_ep_callback+0x48>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    a546:	466b      	mov	r3, sp
    a548:	2201      	movs	r2, #1
    a54a:	a902      	add	r1, sp, #8
    a54c:	4630      	mov	r0, r6
    a54e:	f017 fa49 	bl	219e4 <usb_dc_ep_read_wait>
			} while (bytes);
    a552:	9b00      	ldr	r3, [sp, #0]
    a554:	2b00      	cmp	r3, #0
    a556:	d1f6      	bne.n	a546 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    a558:	4811      	ldr	r0, [pc, #68]	; (a5a0 <usb_transfer_ep_callback+0x74>)
    a55a:	6802      	ldr	r2, [r0, #0]
    a55c:	0752      	lsls	r2, r2, #29
    a55e:	d009      	beq.n	a574 <usb_transfer_ep_callback+0x48>
    a560:	4a10      	ldr	r2, [pc, #64]	; (a5a4 <usb_transfer_ep_callback+0x78>)
    a562:	9206      	str	r2, [sp, #24]
    a564:	2202      	movs	r2, #2
    a566:	9201      	str	r2, [sp, #4]
    a568:	9205      	str	r2, [sp, #20]
    a56a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a56e:	aa05      	add	r2, sp, #20
    a570:	f01d f9e6 	bl	27940 <z_impl_z_log_msg2_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    a574:	b008      	add	sp, #32
    a576:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    a578:	f022 ffd0 	bl	2d51c <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a57c:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    a580:	b108      	cbz	r0, a586 <usb_transfer_ep_callback+0x5a>
    a582:	2d01      	cmp	r5, #1
    a584:	d105      	bne.n	a592 <usb_transfer_ep_callback+0x66>
		usb_transfer_work(&trans->work);
    a586:	4608      	mov	r0, r1
}
    a588:	b008      	add	sp, #32
    a58a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    a58e:	f7ff bf0f 	b.w	a3b0 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a592:	4805      	ldr	r0, [pc, #20]	; (a5a8 <usb_transfer_ep_callback+0x7c>)
}
    a594:	b008      	add	sp, #32
    a596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a59a:	f023 b947 	b.w	2d82c <k_work_submit_to_queue>
    a59e:	bf00      	nop
    a5a0:	20000aa8 	.word	0x20000aa8
    a5a4:	000324b4 	.word	0x000324b4
    a5a8:	200018a0 	.word	0x200018a0

0000a5ac <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5b0:	b08b      	sub	sp, #44	; 0x2c
    a5b2:	4605      	mov	r5, r0
    a5b4:	9100      	str	r1, [sp, #0]
    a5b6:	4616      	mov	r6, r2
    a5b8:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    a5ba:	f01e fb2f 	bl	28c1c <usb_transfer_is_busy>
    a5be:	4604      	mov	r4, r0
    a5c0:	2800      	cmp	r0, #0
    a5c2:	f040 8086 	bne.w	a6d2 <usb_transfer+0x126>
	__asm__ volatile(
    a5c6:	f04f 0320 	mov.w	r3, #32
    a5ca:	f3ef 8211 	mrs	r2, BASEPRI
    a5ce:	f383 8812 	msr	BASEPRI_MAX, r3
    a5d2:	f3bf 8f6f 	isb	sy
    a5d6:	f8df 9100 	ldr.w	r9, [pc, #256]	; a6d8 <usb_transfer+0x12c>
    a5da:	9201      	str	r2, [sp, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    a5dc:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    a5e0:	fb0a f704 	mul.w	r7, sl, r4
	return z_impl_k_sem_take(sem, timeout);
    a5e4:	2300      	movs	r3, #0
    a5e6:	2200      	movs	r2, #0
    a5e8:	4648      	mov	r0, r9
    a5ea:	f01a ffa9 	bl	25540 <z_impl_k_sem_take>
    a5ee:	4603      	mov	r3, r0
    a5f0:	bb18      	cbnz	r0, a63a <usb_transfer+0x8e>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    a5f2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; a6dc <usb_transfer+0x130>
    a5f6:	eb0a 0b07 	add.w	fp, sl, r7
    a5fa:	f8db 4004 	ldr.w	r4, [fp, #4]
    a5fe:	f114 0f10 	cmn.w	r4, #16
    a602:	d131      	bne.n	a668 <usb_transfer+0xbc>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    a604:	4836      	ldr	r0, [pc, #216]	; (a6e0 <usb_transfer+0x134>)
    a606:	6802      	ldr	r2, [r0, #0]
    a608:	0752      	lsls	r2, r2, #29
    a60a:	d00a      	beq.n	a622 <usb_transfer+0x76>
    a60c:	4a35      	ldr	r2, [pc, #212]	; (a6e4 <usb_transfer+0x138>)
    a60e:	e9cd 2508 	strd	r2, r5, [sp, #32]
    a612:	2203      	movs	r2, #3
    a614:	9203      	str	r2, [sp, #12]
    a616:	9207      	str	r2, [sp, #28]
    a618:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a61c:	aa07      	add	r2, sp, #28
    a61e:	f01d f98f 	bl	27940 <z_impl_z_log_msg2_static_create>
	z_impl_k_sem_give(sem);
    a622:	4648      	mov	r0, r9
    a624:	f01a ff66 	bl	254f4 <z_impl_k_sem_give>
	__asm__ volatile(
    a628:	9b01      	ldr	r3, [sp, #4]
    a62a:	f383 8811 	msr	BASEPRI, r3
    a62e:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    a632:	4620      	mov	r0, r4
    a634:	b00b      	add	sp, #44	; 0x2c
    a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    a63a:	3401      	adds	r4, #1
    a63c:	2c04      	cmp	r4, #4
    a63e:	f109 0948 	add.w	r9, r9, #72	; 0x48
    a642:	d1cd      	bne.n	a5e0 <usb_transfer+0x34>
		LOG_ERR("No transfer slot available");
    a644:	4826      	ldr	r0, [pc, #152]	; (a6e0 <usb_transfer+0x134>)
    a646:	6803      	ldr	r3, [r0, #0]
    a648:	075b      	lsls	r3, r3, #29
    a64a:	d00a      	beq.n	a662 <usb_transfer+0xb6>
    a64c:	4b26      	ldr	r3, [pc, #152]	; (a6e8 <usb_transfer+0x13c>)
    a64e:	9308      	str	r3, [sp, #32]
    a650:	2302      	movs	r3, #2
    a652:	9303      	str	r3, [sp, #12]
    a654:	9307      	str	r3, [sp, #28]
    a656:	2300      	movs	r3, #0
    a658:	aa07      	add	r2, sp, #28
    a65a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a65e:	f01d f96f 	bl	27940 <z_impl_z_log_msg2_static_create>
		ret = -ENOMEM;
    a662:	f06f 040b 	mvn.w	r4, #11
    a666:	e7df      	b.n	a628 <usb_transfer+0x7c>
	trans->cb = cb;
    a668:	9b14      	ldr	r3, [sp, #80]	; 0x50
	trans->buffer = data;
    a66a:	9a00      	ldr	r2, [sp, #0]
	trans->cb = cb;
    a66c:	f8cb 3014 	str.w	r3, [fp, #20]
	trans->priv = cb_data;
    a670:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a672:	f8cb 3018 	str.w	r3, [fp, #24]
	trans->status = -EBUSY;
    a676:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    a67a:	f8cb 0010 	str.w	r0, [fp, #16]
	trans->bsize = dlen;
    a67e:	e9cb 2602 	strd	r2, r6, [fp, #8]
	trans->ep = ep;
    a682:	f80a 5007 	strb.w	r5, [sl, r7]
	trans->flags = flags;
    a686:	f8cb 8044 	str.w	r8, [fp, #68]	; 0x44
	trans->status = -EBUSY;
    a68a:	f8cb 3004 	str.w	r3, [fp, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    a68e:	4628      	mov	r0, r5
    a690:	f017 fa7c 	bl	21b8c <usb_dc_ep_mps>
    a694:	b168      	cbz	r0, a6b2 <usb_transfer+0x106>
    a696:	4628      	mov	r0, r5
    a698:	f017 fa78 	bl	21b8c <usb_dc_ep_mps>
    a69c:	fbb6 f3f0 	udiv	r3, r6, r0
    a6a0:	fb03 6610 	mls	r6, r3, r0, r6
    a6a4:	b12e      	cbz	r6, a6b2 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
    a6a6:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    a6aa:	f043 0304 	orr.w	r3, r3, #4
    a6ae:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    a6b2:	f018 0f02 	tst.w	r8, #2
    a6b6:	d007      	beq.n	a6c8 <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a6b8:	3734      	adds	r7, #52	; 0x34
    a6ba:	480c      	ldr	r0, [pc, #48]	; (a6ec <usb_transfer+0x140>)
    a6bc:	eb0a 0107 	add.w	r1, sl, r7
    a6c0:	f023 f8b4 	bl	2d82c <k_work_submit_to_queue>
	int i, key, ret = 0;
    a6c4:	2400      	movs	r4, #0
    a6c6:	e7af      	b.n	a628 <usb_transfer+0x7c>
		ret = usb_dc_ep_read_continue(ep);
    a6c8:	4628      	mov	r0, r5
    a6ca:	f017 f9ed 	bl	21aa8 <usb_dc_ep_read_continue>
    a6ce:	4604      	mov	r4, r0
    a6d0:	e7aa      	b.n	a628 <usb_transfer+0x7c>
		return -EBUSY;
    a6d2:	f06f 040f 	mvn.w	r4, #15
    a6d6:	e7ac      	b.n	a632 <usb_transfer+0x86>
    a6d8:	20002b2c 	.word	0x20002b2c
    a6dc:	20002b10 	.word	0x20002b10
    a6e0:	20000aa8 	.word	0x20000aa8
    a6e4:	000324e9 	.word	0x000324e9
    a6e8:	000324ce 	.word	0x000324ce
    a6ec:	200018a0 	.word	0x200018a0

0000a6f0 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    a6f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    a6f2:	f04f 0320 	mov.w	r3, #32
    a6f6:	f3ef 8411 	mrs	r4, BASEPRI
    a6fa:	f383 8812 	msr	BASEPRI_MAX, r3
    a6fe:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    a702:	f7ff fe3f 	bl	a384 <usb_ep_get_transfer>
	if (!trans) {
    a706:	b150      	cbz	r0, a71e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    a708:	6843      	ldr	r3, [r0, #4]
    a70a:	3310      	adds	r3, #16
    a70c:	d107      	bne.n	a71e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    a70e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    a712:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a714:	f100 0134 	add.w	r1, r0, #52	; 0x34
    a718:	4803      	ldr	r0, [pc, #12]	; (a728 <usb_cancel_transfer+0x38>)
    a71a:	f023 f887 	bl	2d82c <k_work_submit_to_queue>
	__asm__ volatile(
    a71e:	f384 8811 	msr	BASEPRI, r4
    a722:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    a726:	bd10      	pop	{r4, pc}
    a728:	200018a0 	.word	0x200018a0

0000a72c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    a72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a730:	4c10      	ldr	r4, [pc, #64]	; (a774 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a732:	f8df 8044 	ldr.w	r8, [pc, #68]	; a778 <usb_cancel_transfers+0x4c>
{
    a736:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    a738:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    a73c:	f04f 0320 	mov.w	r3, #32
    a740:	f3ef 8611 	mrs	r6, BASEPRI
    a744:	f383 8812 	msr	BASEPRI_MAX, r3
    a748:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    a74c:	6863      	ldr	r3, [r4, #4]
    a74e:	3310      	adds	r3, #16
    a750:	d105      	bne.n	a75e <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a752:	f104 0134 	add.w	r1, r4, #52	; 0x34
    a756:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    a758:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    a75a:	f023 f867 	bl	2d82c <k_work_submit_to_queue>
	__asm__ volatile(
    a75e:	f386 8811 	msr	BASEPRI, r6
    a762:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    a766:	3d01      	subs	r5, #1
    a768:	f104 0448 	add.w	r4, r4, #72	; 0x48
    a76c:	d1e6      	bne.n	a73c <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    a76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a772:	bf00      	nop
    a774:	20002b10 	.word	0x20002b10
    a778:	200018a0 	.word	0x200018a0

0000a77c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    a77c:	b570      	push	{r4, r5, r6, lr}
    a77e:	4c0a      	ldr	r4, [pc, #40]	; (a7a8 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    a780:	4e0a      	ldr	r6, [pc, #40]	; (a7ac <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    a782:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    a784:	4631      	mov	r1, r6
    a786:	4620      	mov	r0, r4
    a788:	f023 f847 	bl	2d81a <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    a78c:	2201      	movs	r2, #1
    a78e:	f1a4 0018 	sub.w	r0, r4, #24
    a792:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    a794:	3501      	adds	r5, #1
    a796:	f022 ffc0 	bl	2d71a <z_impl_k_sem_init>
    a79a:	2d04      	cmp	r5, #4
    a79c:	f104 0448 	add.w	r4, r4, #72	; 0x48
    a7a0:	d1f0      	bne.n	a784 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    a7a2:	2000      	movs	r0, #0
    a7a4:	bd70      	pop	{r4, r5, r6, pc}
    a7a6:	bf00      	nop
    a7a8:	20002b44 	.word	0x20002b44
    a7ac:	0000a3b1 	.word	0x0000a3b1

0000a7b0 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    a7b0:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    a7b2:	2301      	movs	r3, #1
    a7b4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    a7b8:	680b      	ldr	r3, [r1, #0]
    a7ba:	b133      	cbz	r3, a7ca <cdc_acm_irq_rx_enable+0x1a>
    a7bc:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    a7c0:	b11b      	cbz	r3, a7ca <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    a7c2:	4802      	ldr	r0, [pc, #8]	; (a7cc <cdc_acm_irq_rx_enable+0x1c>)
    a7c4:	3108      	adds	r1, #8
    a7c6:	f023 b831 	b.w	2d82c <k_work_submit_to_queue>
	}
}
    a7ca:	4770      	bx	lr
    a7cc:	200018a0 	.word	0x200018a0

0000a7d0 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    a7d0:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    a7d2:	2301      	movs	r3, #1
    a7d4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    a7d8:	680b      	ldr	r3, [r1, #0]
    a7da:	b133      	cbz	r3, a7ea <cdc_acm_irq_tx_enable+0x1a>
    a7dc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    a7e0:	b11b      	cbz	r3, a7ea <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    a7e2:	4802      	ldr	r0, [pc, #8]	; (a7ec <cdc_acm_irq_tx_enable+0x1c>)
    a7e4:	3108      	adds	r1, #8
    a7e6:	f023 b821 	b.w	2d82c <k_work_submit_to_queue>
}
    a7ea:	4770      	bx	lr
    a7ec:	200018a0 	.word	0x200018a0

0000a7f0 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    a7f0:	4a0b      	ldr	r2, [pc, #44]	; (a820 <cdc_acm_reset_port+0x30>)
{
    a7f2:	4603      	mov	r3, r0
	dev_data->configured = false;
    a7f4:	2100      	movs	r1, #0
    a7f6:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    a7fa:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    a7fc:	6810      	ldr	r0, [r2, #0]
    a7fe:	6758      	str	r0, [r3, #116]	; 0x74
    a800:	8890      	ldrh	r0, [r2, #4]
    a802:	7992      	ldrb	r2, [r2, #6]
    a804:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    a808:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    a80c:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    a810:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    a814:	2240      	movs	r2, #64	; 0x40
    a816:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    a81a:	f01f bdaa 	b.w	2a372 <memset>
    a81e:	bf00      	nop
    a820:	0002e5f7 	.word	0x0002e5f7

0000a824 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    a824:	2301      	movs	r3, #1
    a826:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    a82a:	6813      	ldr	r3, [r2, #0]
{
    a82c:	b510      	push	{r4, lr}
    a82e:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    a830:	b13b      	cbz	r3, a842 <cdc_acm_write_cb+0x1e>
    a832:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    a836:	b123      	cbz	r3, a842 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    a838:	4808      	ldr	r0, [pc, #32]	; (a85c <cdc_acm_write_cb+0x38>)
    a83a:	f102 0108 	add.w	r1, r2, #8
    a83e:	f022 fff5 	bl	2d82c <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    a842:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a844:	f01c fc08 	bl	27058 <ring_buf_is_empty>
    a848:	b930      	cbnz	r0, a858 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    a84a:	f104 0118 	add.w	r1, r4, #24
    a84e:	4803      	ldr	r0, [pc, #12]	; (a85c <cdc_acm_write_cb+0x38>)
}
    a850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    a854:	f022 bfea 	b.w	2d82c <k_work_submit_to_queue>
}
    a858:	bd10      	pop	{r4, pc}
    a85a:	bf00      	nop
    a85c:	200018a0 	.word	0x200018a0

0000a860 <tx_work_handler>:
{
    a860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    a862:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    a864:	685b      	ldr	r3, [r3, #4]
    a866:	6a1b      	ldr	r3, [r3, #32]
    a868:	7d1e      	ldrb	r6, [r3, #20]
{
    a86a:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    a86c:	4630      	mov	r0, r6
    a86e:	f01e f9d5 	bl	28c1c <usb_transfer_is_busy>
    a872:	b9d0      	cbnz	r0, a8aa <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    a874:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a876:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a87a:	a903      	add	r1, sp, #12
    a87c:	f01c fc65 	bl	2714a <ring_buf_get_claim>
	if (!len) {
    a880:	4604      	mov	r4, r0
    a882:	b190      	cbz	r0, a8aa <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    a884:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    a886:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    a88a:	bf08      	it	eq
    a88c:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    a890:	9301      	str	r3, [sp, #4]
    a892:	4b07      	ldr	r3, [pc, #28]	; (a8b0 <tx_work_handler+0x50>)
    a894:	9903      	ldr	r1, [sp, #12]
    a896:	9300      	str	r3, [sp, #0]
    a898:	4622      	mov	r2, r4
    a89a:	2302      	movs	r3, #2
    a89c:	4630      	mov	r0, r6
    a89e:	f7ff fe85 	bl	a5ac <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    a8a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a8a4:	4621      	mov	r1, r4
    a8a6:	f01c fc7b 	bl	271a0 <ring_buf_get_finish>
}
    a8aa:	b004      	add	sp, #16
    a8ac:	bd70      	pop	{r4, r5, r6, pc}
    a8ae:	bf00      	nop
    a8b0:	0000a825 	.word	0x0000a825

0000a8b4 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    a8b4:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    a8b6:	6904      	ldr	r4, [r0, #16]
{
    a8b8:	b08b      	sub	sp, #44	; 0x2c

	if (!dev_data->configured || dev_data->suspended) {
    a8ba:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
{
    a8be:	f88d 1007 	strb.w	r1, [sp, #7]
	if (!dev_data->configured || dev_data->suspended) {
    a8c2:	b113      	cbz	r3, a8ca <cdc_acm_poll_out+0x16>
    a8c4:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    a8c8:	b18b      	cbz	r3, a8ee <cdc_acm_poll_out+0x3a>
		LOG_INF("USB device not ready, drop data");
    a8ca:	4826      	ldr	r0, [pc, #152]	; (a964 <cdc_acm_poll_out+0xb0>)
    a8cc:	6803      	ldr	r3, [r0, #0]
    a8ce:	f003 0307 	and.w	r3, r3, #7
    a8d2:	2b02      	cmp	r3, #2
    a8d4:	d909      	bls.n	a8ea <cdc_acm_poll_out+0x36>
    a8d6:	4b24      	ldr	r3, [pc, #144]	; (a968 <cdc_acm_poll_out+0xb4>)
    a8d8:	9308      	str	r3, [sp, #32]
    a8da:	2302      	movs	r3, #2
    a8dc:	9303      	str	r3, [sp, #12]
    a8de:	9307      	str	r3, [sp, #28]
    a8e0:	aa07      	add	r2, sp, #28
    a8e2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    a8e6:	f01e fa0c 	bl	28d02 <z_log_msg2_static_create.constprop.0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    a8ea:	b00b      	add	sp, #44	; 0x2c
    a8ec:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    a8ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    a8f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    a8f4:	2201      	movs	r2, #1
    a8f6:	f10d 0107 	add.w	r1, sp, #7
    a8fa:	f01c fc07 	bl	2710c <ring_buf_put>
    a8fe:	bb58      	cbnz	r0, a958 <cdc_acm_poll_out+0xa4>
		LOG_INF("Ring buffer full, drain buffer");
    a900:	4d18      	ldr	r5, [pc, #96]	; (a964 <cdc_acm_poll_out+0xb0>)
    a902:	682b      	ldr	r3, [r5, #0]
    a904:	f003 0307 	and.w	r3, r3, #7
    a908:	2b02      	cmp	r3, #2
    a90a:	d90a      	bls.n	a922 <cdc_acm_poll_out+0x6e>
    a90c:	4b17      	ldr	r3, [pc, #92]	; (a96c <cdc_acm_poll_out+0xb8>)
    a90e:	9308      	str	r3, [sp, #32]
    a910:	aa07      	add	r2, sp, #28
    a912:	2302      	movs	r3, #2
    a914:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    a918:	4628      	mov	r0, r5
    a91a:	9303      	str	r3, [sp, #12]
    a91c:	9307      	str	r3, [sp, #28]
    a91e:	f01e f9f0 	bl	28d02 <z_log_msg2_static_create.constprop.0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    a922:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a924:	2201      	movs	r2, #1
    a926:	2100      	movs	r1, #0
    a928:	f01c fc58 	bl	271dc <ring_buf_get>
    a92c:	b960      	cbnz	r0, a948 <cdc_acm_poll_out+0x94>
			LOG_ERR("Failed to drain buffer");
    a92e:	682b      	ldr	r3, [r5, #0]
    a930:	075b      	lsls	r3, r3, #29
    a932:	d0da      	beq.n	a8ea <cdc_acm_poll_out+0x36>
    a934:	4b0e      	ldr	r3, [pc, #56]	; (a970 <cdc_acm_poll_out+0xbc>)
    a936:	9308      	str	r3, [sp, #32]
    a938:	2302      	movs	r3, #2
    a93a:	480a      	ldr	r0, [pc, #40]	; (a964 <cdc_acm_poll_out+0xb0>)
    a93c:	9303      	str	r3, [sp, #12]
    a93e:	9307      	str	r3, [sp, #28]
    a940:	aa07      	add	r2, sp, #28
    a942:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a946:	e7ce      	b.n	a8e6 <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    a948:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a94a:	2201      	movs	r2, #1
    a94c:	f10d 0107 	add.w	r1, sp, #7
    a950:	f01c fbdc 	bl	2710c <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    a954:	2800      	cmp	r0, #0
    a956:	d0ea      	beq.n	a92e <cdc_acm_poll_out+0x7a>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    a958:	f104 0118 	add.w	r1, r4, #24
    a95c:	4805      	ldr	r0, [pc, #20]	; (a974 <cdc_acm_poll_out+0xc0>)
    a95e:	f022 ff65 	bl	2d82c <k_work_submit_to_queue>
    a962:	e7c2      	b.n	a8ea <cdc_acm_poll_out+0x36>
    a964:	20000a98 	.word	0x20000a98
    a968:	0003251f 	.word	0x0003251f
    a96c:	0003253f 	.word	0x0003253f
    a970:	0003255e 	.word	0x0003255e
    a974:	200018a0 	.word	0x200018a0

0000a978 <cdc_acm_read_cb>:
{
    a978:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (size <= 0) {
    a97a:	1e0d      	subs	r5, r1, #0
{
    a97c:	b08b      	sub	sp, #44	; 0x2c
    a97e:	4606      	mov	r6, r0
    a980:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    a982:	f102 072c 	add.w	r7, r2, #44	; 0x2c
	if (size <= 0) {
    a986:	dd24      	ble.n	a9d2 <cdc_acm_read_cb+0x5a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    a988:	462a      	mov	r2, r5
    a98a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    a98c:	4639      	mov	r1, r7
    a98e:	f01c fbbd 	bl	2710c <ring_buf_put>
	if (wrote < size) {
    a992:	4285      	cmp	r5, r0
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    a994:	4602      	mov	r2, r0
	if (wrote < size) {
    a996:	d90f      	bls.n	a9b8 <cdc_acm_read_cb+0x40>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    a998:	4813      	ldr	r0, [pc, #76]	; (a9e8 <cdc_acm_read_cb+0x70>)
    a99a:	6803      	ldr	r3, [r0, #0]
    a99c:	075b      	lsls	r3, r3, #29
    a99e:	d00b      	beq.n	a9b8 <cdc_acm_read_cb+0x40>
    a9a0:	4b12      	ldr	r3, [pc, #72]	; (a9ec <cdc_acm_read_cb+0x74>)
    a9a2:	9308      	str	r3, [sp, #32]
    a9a4:	1aad      	subs	r5, r5, r2
    a9a6:	2303      	movs	r3, #3
    a9a8:	aa07      	add	r2, sp, #28
    a9aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a9ae:	9509      	str	r5, [sp, #36]	; 0x24
    a9b0:	9303      	str	r3, [sp, #12]
    a9b2:	9307      	str	r3, [sp, #28]
    a9b4:	f01e f9a5 	bl	28d02 <z_log_msg2_static_create.constprop.0>
	dev_data->rx_ready = true;
    a9b8:	2301      	movs	r3, #1
    a9ba:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    a9be:	6823      	ldr	r3, [r4, #0]
    a9c0:	b13b      	cbz	r3, a9d2 <cdc_acm_read_cb+0x5a>
    a9c2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    a9c6:	b123      	cbz	r3, a9d2 <cdc_acm_read_cb+0x5a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    a9c8:	4809      	ldr	r0, [pc, #36]	; (a9f0 <cdc_acm_read_cb+0x78>)
    a9ca:	f104 0108 	add.w	r1, r4, #8
    a9ce:	f022 ff2d 	bl	2d82c <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    a9d2:	4b08      	ldr	r3, [pc, #32]	; (a9f4 <cdc_acm_read_cb+0x7c>)
    a9d4:	9300      	str	r3, [sp, #0]
    a9d6:	9401      	str	r4, [sp, #4]
    a9d8:	2301      	movs	r3, #1
    a9da:	2240      	movs	r2, #64	; 0x40
    a9dc:	4639      	mov	r1, r7
    a9de:	4630      	mov	r0, r6
    a9e0:	f7ff fde4 	bl	a5ac <usb_transfer>
}
    a9e4:	b00b      	add	sp, #44	; 0x2c
    a9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9e8:	20000a98 	.word	0x20000a98
    a9ec:	00032575 	.word	0x00032575
    a9f0:	200018a0 	.word	0x200018a0
    a9f4:	0000a979 	.word	0x0000a979

0000a9f8 <cdc_acm_dev_status_cb>:
{
    a9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9fa:	4605      	mov	r5, r0
    a9fc:	b089      	sub	sp, #36	; 0x24
    a9fe:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    aa00:	4601      	mov	r1, r0
    aa02:	485f      	ldr	r0, [pc, #380]	; (ab80 <cdc_acm_dev_status_cb+0x188>)
    aa04:	f01e f8da 	bl	28bbc <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    aa08:	4604      	mov	r4, r0
    aa0a:	b988      	cbnz	r0, aa30 <cdc_acm_dev_status_cb+0x38>
		LOG_WRN("Device data not found for cfg %p", cfg);
    aa0c:	485d      	ldr	r0, [pc, #372]	; (ab84 <cdc_acm_dev_status_cb+0x18c>)
    aa0e:	6803      	ldr	r3, [r0, #0]
    aa10:	f013 0f06 	tst.w	r3, #6
    aa14:	d00a      	beq.n	aa2c <cdc_acm_dev_status_cb+0x34>
    aa16:	4b5c      	ldr	r3, [pc, #368]	; (ab88 <cdc_acm_dev_status_cb+0x190>)
    aa18:	aa05      	add	r2, sp, #20
    aa1a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    aa1e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    aa22:	2303      	movs	r3, #3
    aa24:	9301      	str	r3, [sp, #4]
    aa26:	9305      	str	r3, [sp, #20]
    aa28:	f01e f96b 	bl	28d02 <z_log_msg2_static_create.constprop.0>
}
    aa2c:	b009      	add	sp, #36	; 0x24
    aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    aa30:	4605      	mov	r5, r0
	switch (status) {
    aa32:	1e71      	subs	r1, r6, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    aa34:	f855 3980 	ldr.w	r3, [r5], #-128
    aa38:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    aa3a:	2905      	cmp	r1, #5
    aa3c:	d8f6      	bhi.n	aa2c <cdc_acm_dev_status_cb+0x34>
    aa3e:	a301      	add	r3, pc, #4	; (adr r3, aa44 <cdc_acm_dev_status_cb+0x4c>)
    aa40:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    aa44:	0000aae1 	.word	0x0000aae1
    aa48:	0000aa2d 	.word	0x0000aa2d
    aa4c:	0000aa5d 	.word	0x0000aa5d
    aa50:	0000aac1 	.word	0x0000aac1
    aa54:	0000aaed 	.word	0x0000aaed
    aa58:	0000ab15 	.word	0x0000ab15
		LOG_INF("Device configured");
    aa5c:	4849      	ldr	r0, [pc, #292]	; (ab84 <cdc_acm_dev_status_cb+0x18c>)
    aa5e:	6803      	ldr	r3, [r0, #0]
    aa60:	f003 0307 	and.w	r3, r3, #7
    aa64:	2b02      	cmp	r3, #2
    aa66:	d909      	bls.n	aa7c <cdc_acm_dev_status_cb+0x84>
    aa68:	4b48      	ldr	r3, [pc, #288]	; (ab8c <cdc_acm_dev_status_cb+0x194>)
    aa6a:	9306      	str	r3, [sp, #24]
    aa6c:	aa05      	add	r2, sp, #20
    aa6e:	2302      	movs	r3, #2
    aa70:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    aa74:	9301      	str	r3, [sp, #4]
    aa76:	9305      	str	r3, [sp, #20]
    aa78:	f01e f943 	bl	28d02 <z_log_msg2_static_create.constprop.0>
		if (!dev_data->configured) {
    aa7c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    aa80:	b939      	cbnz	r1, aa92 <cdc_acm_dev_status_cb+0x9a>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    aa82:	6a3b      	ldr	r3, [r7, #32]
    aa84:	462a      	mov	r2, r5
    aa86:	7b18      	ldrb	r0, [r3, #12]
    aa88:	f7ff ff76 	bl	a978 <cdc_acm_read_cb>
			dev_data->configured = true;
    aa8c:	2301      	movs	r3, #1
    aa8e:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    aa92:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    aa96:	2b00      	cmp	r3, #0
    aa98:	d1c8      	bne.n	aa2c <cdc_acm_dev_status_cb+0x34>
			dev_data->tx_ready = true;
    aa9a:	2301      	movs	r3, #1
    aa9c:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    aaa0:	f854 3c80 	ldr.w	r3, [r4, #-128]
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d0c1      	beq.n	aa2c <cdc_acm_dev_status_cb+0x34>
    aaa8:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    aaac:	2b00      	cmp	r3, #0
    aaae:	d0bd      	beq.n	aa2c <cdc_acm_dev_status_cb+0x34>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    aab0:	4837      	ldr	r0, [pc, #220]	; (ab90 <cdc_acm_dev_status_cb+0x198>)
    aab2:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
}
    aab6:	b009      	add	sp, #36	; 0x24
    aab8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    aabc:	f022 beb6 	b.w	2d82c <k_work_submit_to_queue>
		LOG_INF("Device disconnected");
    aac0:	4830      	ldr	r0, [pc, #192]	; (ab84 <cdc_acm_dev_status_cb+0x18c>)
    aac2:	6803      	ldr	r3, [r0, #0]
    aac4:	f003 0307 	and.w	r3, r3, #7
    aac8:	2b02      	cmp	r3, #2
    aaca:	d909      	bls.n	aae0 <cdc_acm_dev_status_cb+0xe8>
    aacc:	4b31      	ldr	r3, [pc, #196]	; (ab94 <cdc_acm_dev_status_cb+0x19c>)
    aace:	9306      	str	r3, [sp, #24]
    aad0:	aa05      	add	r2, sp, #20
    aad2:	2302      	movs	r3, #2
    aad4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    aad8:	9301      	str	r3, [sp, #4]
    aada:	9305      	str	r3, [sp, #20]
    aadc:	f01e f911 	bl	28d02 <z_log_msg2_static_create.constprop.0>
		cdc_acm_reset_port(dev_data);
    aae0:	4628      	mov	r0, r5
}
    aae2:	b009      	add	sp, #36	; 0x24
    aae4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    aae8:	f7ff be82 	b.w	a7f0 <cdc_acm_reset_port>
		LOG_INF("Device suspended");
    aaec:	4825      	ldr	r0, [pc, #148]	; (ab84 <cdc_acm_dev_status_cb+0x18c>)
    aaee:	6803      	ldr	r3, [r0, #0]
    aaf0:	f003 0307 	and.w	r3, r3, #7
    aaf4:	2b02      	cmp	r3, #2
    aaf6:	d909      	bls.n	ab0c <cdc_acm_dev_status_cb+0x114>
    aaf8:	4b27      	ldr	r3, [pc, #156]	; (ab98 <cdc_acm_dev_status_cb+0x1a0>)
    aafa:	9306      	str	r3, [sp, #24]
    aafc:	aa05      	add	r2, sp, #20
    aafe:	2302      	movs	r3, #2
    ab00:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ab04:	9301      	str	r3, [sp, #4]
    ab06:	9305      	str	r3, [sp, #20]
    ab08:	f01e f8fb 	bl	28d02 <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    ab0c:	2301      	movs	r3, #1
    ab0e:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    ab12:	e78b      	b.n	aa2c <cdc_acm_dev_status_cb+0x34>
		LOG_INF("Device resumed");
    ab14:	4e1b      	ldr	r6, [pc, #108]	; (ab84 <cdc_acm_dev_status_cb+0x18c>)
    ab16:	6833      	ldr	r3, [r6, #0]
    ab18:	f003 0307 	and.w	r3, r3, #7
    ab1c:	2b02      	cmp	r3, #2
    ab1e:	d90a      	bls.n	ab36 <cdc_acm_dev_status_cb+0x13e>
    ab20:	4b1e      	ldr	r3, [pc, #120]	; (ab9c <cdc_acm_dev_status_cb+0x1a4>)
    ab22:	9306      	str	r3, [sp, #24]
    ab24:	aa05      	add	r2, sp, #20
    ab26:	2302      	movs	r3, #2
    ab28:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ab2c:	4630      	mov	r0, r6
    ab2e:	9301      	str	r3, [sp, #4]
    ab30:	9305      	str	r3, [sp, #20]
    ab32:	f01e f8e6 	bl	28d02 <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    ab36:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	f43f af76 	beq.w	aa2c <cdc_acm_dev_status_cb+0x34>
			LOG_INF("from suspend");
    ab40:	6833      	ldr	r3, [r6, #0]
    ab42:	f003 0307 	and.w	r3, r3, #7
    ab46:	2b02      	cmp	r3, #2
    ab48:	d90a      	bls.n	ab60 <cdc_acm_dev_status_cb+0x168>
    ab4a:	4b15      	ldr	r3, [pc, #84]	; (aba0 <cdc_acm_dev_status_cb+0x1a8>)
    ab4c:	9306      	str	r3, [sp, #24]
    ab4e:	480d      	ldr	r0, [pc, #52]	; (ab84 <cdc_acm_dev_status_cb+0x18c>)
    ab50:	2302      	movs	r3, #2
    ab52:	aa05      	add	r2, sp, #20
    ab54:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ab58:	9301      	str	r3, [sp, #4]
    ab5a:	9305      	str	r3, [sp, #20]
    ab5c:	f01e f8d1 	bl	28d02 <z_log_msg2_static_create.constprop.0>
			if (dev_data->configured) {
    ab60:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    ab64:	2100      	movs	r1, #0
    ab66:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	f43f af5e 	beq.w	aa2c <cdc_acm_dev_status_cb+0x34>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    ab70:	6a3b      	ldr	r3, [r7, #32]
    ab72:	7b18      	ldrb	r0, [r3, #12]
    ab74:	462a      	mov	r2, r5
}
    ab76:	b009      	add	sp, #36	; 0x24
    ab78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    ab7c:	f7ff befc 	b.w	a978 <cdc_acm_read_cb>
    ab80:	20002c30 	.word	0x20002c30
    ab84:	20000a98 	.word	0x20000a98
    ab88:	00032596 	.word	0x00032596
    ab8c:	000325b7 	.word	0x000325b7
    ab90:	200018a0 	.word	0x200018a0
    ab94:	000325c9 	.word	0x000325c9
    ab98:	000325dd 	.word	0x000325dd
    ab9c:	000325ee 	.word	0x000325ee
    aba0:	000325fd 	.word	0x000325fd

0000aba4 <cdc_acm_fifo_fill>:
{
    aba4:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    aba6:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    aba8:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
{
    abac:	b088      	sub	sp, #32
    abae:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    abb0:	b113      	cbz	r3, abb8 <cdc_acm_fifo_fill+0x14>
    abb2:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    abb6:	b193      	cbz	r3, abde <cdc_acm_fifo_fill+0x3a>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    abb8:	4819      	ldr	r0, [pc, #100]	; (ac20 <cdc_acm_fifo_fill+0x7c>)
    abba:	6804      	ldr	r4, [r0, #0]
    abbc:	f014 0406 	ands.w	r4, r4, #6
    abc0:	d02b      	beq.n	ac1a <cdc_acm_fifo_fill+0x76>
    abc2:	4b18      	ldr	r3, [pc, #96]	; (ac24 <cdc_acm_fifo_fill+0x80>)
    abc4:	aa05      	add	r2, sp, #20
    abc6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    abca:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    abce:	2303      	movs	r3, #3
    abd0:	9301      	str	r3, [sp, #4]
    abd2:	9305      	str	r3, [sp, #20]
    abd4:	f01e f895 	bl	28d02 <z_log_msg2_static_create.constprop.0>
		return 0;
    abd8:	2000      	movs	r0, #0
}
    abda:	b008      	add	sp, #32
    abdc:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    abde:	6f30      	ldr	r0, [r6, #112]	; 0x70
	dev_data->tx_ready = false;
    abe0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    abe4:	f01c fa92 	bl	2710c <ring_buf_put>
	if (wrote < len) {
    abe8:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    abea:	4604      	mov	r4, r0
	if (wrote < len) {
    abec:	d210      	bcs.n	ac10 <cdc_acm_fifo_fill+0x6c>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    abee:	480c      	ldr	r0, [pc, #48]	; (ac20 <cdc_acm_fifo_fill+0x7c>)
    abf0:	6803      	ldr	r3, [r0, #0]
    abf2:	f013 0f06 	tst.w	r3, #6
    abf6:	d00b      	beq.n	ac10 <cdc_acm_fifo_fill+0x6c>
    abf8:	4b0b      	ldr	r3, [pc, #44]	; (ac28 <cdc_acm_fifo_fill+0x84>)
    abfa:	9306      	str	r3, [sp, #24]
    abfc:	1b2d      	subs	r5, r5, r4
    abfe:	2303      	movs	r3, #3
    ac00:	aa05      	add	r2, sp, #20
    ac02:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ac06:	9507      	str	r5, [sp, #28]
    ac08:	9301      	str	r3, [sp, #4]
    ac0a:	9305      	str	r3, [sp, #20]
    ac0c:	f01e f879 	bl	28d02 <z_log_msg2_static_create.constprop.0>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    ac10:	4806      	ldr	r0, [pc, #24]	; (ac2c <cdc_acm_fifo_fill+0x88>)
    ac12:	f106 0118 	add.w	r1, r6, #24
    ac16:	f022 fe09 	bl	2d82c <k_work_submit_to_queue>
		return 0;
    ac1a:	4620      	mov	r0, r4
    ac1c:	e7dd      	b.n	abda <cdc_acm_fifo_fill+0x36>
    ac1e:	bf00      	nop
    ac20:	20000a98 	.word	0x20000a98
    ac24:	0003260a 	.word	0x0003260a
    ac28:	00032575 	.word	0x00032575
    ac2c:	200018a0 	.word	0x200018a0

0000ac30 <cdc_acm_int_in>:
{
    ac30:	b510      	push	{r4, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    ac32:	4601      	mov	r1, r0
{
    ac34:	b088      	sub	sp, #32
    ac36:	4604      	mov	r4, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    ac38:	480c      	ldr	r0, [pc, #48]	; (ac6c <cdc_acm_int_in+0x3c>)
    ac3a:	f01d ffd9 	bl	28bf0 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    ac3e:	b988      	cbnz	r0, ac64 <cdc_acm_int_in+0x34>
		LOG_WRN("Device data not found for endpoint %u", ep);
    ac40:	480b      	ldr	r0, [pc, #44]	; (ac70 <cdc_acm_int_in+0x40>)
    ac42:	6803      	ldr	r3, [r0, #0]
    ac44:	f013 0f06 	tst.w	r3, #6
    ac48:	d00a      	beq.n	ac60 <cdc_acm_int_in+0x30>
    ac4a:	4b0a      	ldr	r3, [pc, #40]	; (ac74 <cdc_acm_int_in+0x44>)
    ac4c:	aa05      	add	r2, sp, #20
    ac4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    ac52:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ac56:	2303      	movs	r3, #3
    ac58:	9301      	str	r3, [sp, #4]
    ac5a:	9305      	str	r3, [sp, #20]
    ac5c:	f01e f851 	bl	28d02 <z_log_msg2_static_create.constprop.0>
}
    ac60:	b008      	add	sp, #32
    ac62:	bd10      	pop	{r4, pc}
	dev_data->notification_sent = 1U;
    ac64:	2301      	movs	r3, #1
    ac66:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
    ac6a:	e7f9      	b.n	ac60 <cdc_acm_int_in+0x30>
    ac6c:	20002c30 	.word	0x20002c30
    ac70:	20000a98 	.word	0x20000a98
    ac74:	0003263c 	.word	0x0003263c

0000ac78 <cdc_acm_class_handle_req>:
{
    ac78:	b570      	push	{r4, r5, r6, lr}
    ac7a:	4604      	mov	r4, r0
    ac7c:	b088      	sub	sp, #32
    ac7e:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    ac80:	7901      	ldrb	r1, [r0, #4]
    ac82:	481c      	ldr	r0, [pc, #112]	; (acf4 <cdc_acm_class_handle_req+0x7c>)
{
    ac84:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    ac86:	f01d ffa5 	bl	28bd4 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    ac8a:	b998      	cbnz	r0, acb4 <cdc_acm_class_handle_req+0x3c>
		LOG_WRN("Device data not found for interface %u",
    ac8c:	481a      	ldr	r0, [pc, #104]	; (acf8 <cdc_acm_class_handle_req+0x80>)
    ac8e:	6803      	ldr	r3, [r0, #0]
    ac90:	f013 0f06 	tst.w	r3, #6
    ac94:	d00b      	beq.n	acae <cdc_acm_class_handle_req+0x36>
    ac96:	88a3      	ldrh	r3, [r4, #4]
    ac98:	4a18      	ldr	r2, [pc, #96]	; (acfc <cdc_acm_class_handle_req+0x84>)
    ac9a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ac9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    aca2:	2303      	movs	r3, #3
    aca4:	aa05      	add	r2, sp, #20
    aca6:	9301      	str	r3, [sp, #4]
    aca8:	9305      	str	r3, [sp, #20]
    acaa:	f01e f82a 	bl	28d02 <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    acae:	f06f 0012 	mvn.w	r0, #18
    acb2:	e011      	b.n	acd8 <cdc_acm_class_handle_req+0x60>
	if (usb_reqtype_is_to_device(setup)) {
    acb4:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    acb8:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    acba:	2a00      	cmp	r2, #0
    acbc:	db12      	blt.n	ace4 <cdc_acm_class_handle_req+0x6c>
		switch (setup->bRequest) {
    acbe:	2b20      	cmp	r3, #32
    acc0:	d004      	beq.n	accc <cdc_acm_class_handle_req+0x54>
    acc2:	2b22      	cmp	r3, #34	; 0x22
    acc4:	d00a      	beq.n	acdc <cdc_acm_class_handle_req+0x64>
	return -ENOTSUP;
    acc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    acca:	e005      	b.n	acd8 <cdc_acm_class_handle_req+0x60>
			memcpy(&dev_data->line_coding, *data,
    accc:	6829      	ldr	r1, [r5, #0]
    acce:	2207      	movs	r2, #7
    acd0:	380c      	subs	r0, #12
    acd2:	f01f fb43 	bl	2a35c <memcpy>
			return 0;
    acd6:	2000      	movs	r0, #0
}
    acd8:	b008      	add	sp, #32
    acda:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    acdc:	8863      	ldrh	r3, [r4, #2]
    acde:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    ace2:	e7f8      	b.n	acd6 <cdc_acm_class_handle_req+0x5e>
		if (setup->bRequest == GET_LINE_CODING) {
    ace4:	2b21      	cmp	r3, #33	; 0x21
    ace6:	d1ee      	bne.n	acc6 <cdc_acm_class_handle_req+0x4e>
			*data = (uint8_t *)(&dev_data->line_coding);
    ace8:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    acea:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    acec:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    acee:	6033      	str	r3, [r6, #0]
    acf0:	e7f1      	b.n	acd6 <cdc_acm_class_handle_req+0x5e>
    acf2:	bf00      	nop
    acf4:	20002c30 	.word	0x20002c30
    acf8:	20000a98 	.word	0x20000a98
    acfc:	00032662 	.word	0x00032662

0000ad00 <cdc_acm_init>:
{
    ad00:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ad02:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    ad04:	2300      	movs	r3, #0
    ad06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    ad0a:	4b0c      	ldr	r3, [pc, #48]	; (ad3c <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    ad0c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    ad10:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    ad12:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    ad16:	b969      	cbnz	r1, ad34 <cdc_acm_init+0x34>
	list->head = node;
    ad18:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    ad1c:	f104 0008 	add.w	r0, r4, #8
    ad20:	4907      	ldr	r1, [pc, #28]	; (ad40 <cdc_acm_init+0x40>)
    ad22:	f022 fd7a 	bl	2d81a <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    ad26:	f104 0018 	add.w	r0, r4, #24
    ad2a:	4906      	ldr	r1, [pc, #24]	; (ad44 <cdc_acm_init+0x44>)
    ad2c:	f022 fd75 	bl	2d81a <k_work_init>
}
    ad30:	2000      	movs	r0, #0
    ad32:	bd10      	pop	{r4, pc}
	parent->next = child;
    ad34:	600a      	str	r2, [r1, #0]
	list->tail = node;
    ad36:	605a      	str	r2, [r3, #4]
}
    ad38:	e7f0      	b.n	ad1c <cdc_acm_init+0x1c>
    ad3a:	bf00      	nop
    ad3c:	20002c30 	.word	0x20002c30
    ad40:	00028c47 	.word	0x00028c47
    ad44:	0000a861 	.word	0x0000a861

0000ad48 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    ad48:	b530      	push	{r4, r5, lr}
    ad4a:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    ad4c:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ad4e:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    ad50:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    ad54:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    ad56:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    ad58:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    ad5c:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    ad5e:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    ad62:	2002      	movs	r0, #2
    ad64:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    ad68:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    ad6a:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    ad6e:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    ad72:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    ad74:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    ad78:	220a      	movs	r2, #10
    ad7a:	a901      	add	r1, sp, #4
    ad7c:	f7fe ffca 	bl	9d14 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    ad80:	4c05      	ldr	r4, [pc, #20]	; (ad98 <cdc_acm_send_notification.isra.0+0x50>)
    ad82:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    ad86:	b923      	cbnz	r3, ad92 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    ad88:	2001      	movs	r0, #1
    ad8a:	f022 ff20 	bl	2dbce <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    ad8e:	3c01      	subs	r4, #1
    ad90:	d1f7      	bne.n	ad82 <cdc_acm_send_notification.isra.0+0x3a>
}
    ad92:	b005      	add	sp, #20
    ad94:	bd30      	pop	{r4, r5, pc}
    ad96:	bf00      	nop
    ad98:	000186a1 	.word	0x000186a1

0000ad9c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    ad9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    ad9e:	4d09      	ldr	r5, [pc, #36]	; (adc4 <z_usb_work_q_init+0x28>)
    ada0:	4909      	ldr	r1, [pc, #36]	; (adc8 <z_usb_work_q_init+0x2c>)
    ada2:	2400      	movs	r4, #0
    ada4:	9400      	str	r4, [sp, #0]
    ada6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    adaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    adae:	4628      	mov	r0, r5
    adb0:	f01a fd12 	bl	257d8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    adb4:	4905      	ldr	r1, [pc, #20]	; (adcc <z_usb_work_q_init+0x30>)
    adb6:	4628      	mov	r0, r5
    adb8:	f01a f956 	bl	25068 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    adbc:	4620      	mov	r0, r4
    adbe:	b003      	add	sp, #12
    adc0:	bd30      	pop	{r4, r5, pc}
    adc2:	bf00      	nop
    adc4:	200018a0 	.word	0x200018a0
    adc8:	200087e0 	.word	0x200087e0
    adcc:	0003269f 	.word	0x0003269f

0000add0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    add0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    add4:	4605      	mov	r5, r0
	__asm__ volatile(
    add6:	f04f 0320 	mov.w	r3, #32
    adda:	f3ef 8611 	mrs	r6, BASEPRI
    adde:	f383 8812 	msr	BASEPRI_MAX, r3
    ade2:	f3bf 8f6f 	isb	sy
	return list->head;
    ade6:	4b0e      	ldr	r3, [pc, #56]	; (ae20 <pm_state_notify+0x50>)
    ade8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    adea:	b19c      	cbz	r4, ae14 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    adec:	4f0d      	ldr	r7, [pc, #52]	; (ae24 <pm_state_notify+0x54>)
    adee:	f8df 8038 	ldr.w	r8, [pc, #56]	; ae28 <pm_state_notify+0x58>
    adf2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    adf6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    adfa:	2d00      	cmp	r5, #0
    adfc:	bf08      	it	eq
    adfe:	4613      	moveq	r3, r2
		if (callback) {
    ae00:	b12b      	cbz	r3, ae0e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ae02:	f898 2014 	ldrb.w	r2, [r8, #20]
    ae06:	fb09 f202 	mul.w	r2, r9, r2
    ae0a:	5cb8      	ldrb	r0, [r7, r2]
    ae0c:	4798      	blx	r3
	return node->next;
    ae0e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ae10:	2c00      	cmp	r4, #0
    ae12:	d1f0      	bne.n	adf6 <pm_state_notify+0x26>
	__asm__ volatile(
    ae14:	f386 8811 	msr	BASEPRI, r6
    ae18:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    ae1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ae20:	20002c38 	.word	0x20002c38
    ae24:	20002c40 	.word	0x20002c40
    ae28:	200049f8 	.word	0x200049f8

0000ae2c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ae2c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    ae2e:	2301      	movs	r3, #1
    ae30:	f000 001f 	and.w	r0, r0, #31
    ae34:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae38:	4b07      	ldr	r3, [pc, #28]	; (ae58 <atomic_clear_bit.constprop.0+0x2c>)
    ae3a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ae3e:	43c0      	mvns	r0, r0
    ae40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    ae44:	e853 2f00 	ldrex	r2, [r3]
    ae48:	4002      	ands	r2, r0
    ae4a:	e843 2100 	strex	r1, r2, [r3]
    ae4e:	2900      	cmp	r1, #0
    ae50:	d1f8      	bne.n	ae44 <atomic_clear_bit.constprop.0+0x18>
    ae52:	f3bf 8f5b 	dmb	ish
}
    ae56:	4770      	bx	lr
    ae58:	20002c4c 	.word	0x20002c4c

0000ae5c <pm_system_resume>:

void pm_system_resume(void)
{
    ae5c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    ae5e:	4b1d      	ldr	r3, [pc, #116]	; (aed4 <pm_system_resume+0x78>)
    ae60:	7d1c      	ldrb	r4, [r3, #20]
    ae62:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    ae66:	f004 031f 	and.w	r3, r4, #31
    ae6a:	2201      	movs	r2, #1
    ae6c:	409a      	lsls	r2, r3
    ae6e:	4b1a      	ldr	r3, [pc, #104]	; (aed8 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ae70:	0961      	lsrs	r1, r4, #5
{
    ae72:	b085      	sub	sp, #20
    ae74:	43d0      	mvns	r0, r2
    ae76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ae7a:	e853 1f00 	ldrex	r1, [r3]
    ae7e:	ea01 0500 	and.w	r5, r1, r0
    ae82:	e843 5c00 	strex	ip, r5, [r3]
    ae86:	f1bc 0f00 	cmp.w	ip, #0
    ae8a:	d1f6      	bne.n	ae7a <pm_system_resume+0x1e>
    ae8c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    ae90:	4211      	tst	r1, r2
    ae92:	d017      	beq.n	aec4 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    ae94:	4d11      	ldr	r5, [pc, #68]	; (aedc <pm_system_resume+0x80>)
    ae96:	220c      	movs	r2, #12
    ae98:	fb02 5204 	mla	r2, r2, r4, r5
    ae9c:	ca07      	ldmia	r2, {r0, r1, r2}
    ae9e:	ab01      	add	r3, sp, #4
    aea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    aea4:	4a0e      	ldr	r2, [pc, #56]	; (aee0 <pm_system_resume+0x84>)
    aea6:	b17a      	cbz	r2, aec8 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    aea8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    aeac:	f01f fa8a 	bl	2a3c4 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    aeb0:	2000      	movs	r0, #0
    aeb2:	f7ff ff8d 	bl	add0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    aeb6:	230c      	movs	r3, #12
    aeb8:	435c      	muls	r4, r3
    aeba:	192a      	adds	r2, r5, r4
    aebc:	2300      	movs	r3, #0
    aebe:	512b      	str	r3, [r5, r4]
    aec0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    aec4:	b005      	add	sp, #20
    aec6:	bd30      	pop	{r4, r5, pc}
    aec8:	f382 8811 	msr	BASEPRI, r2
    aecc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    aed0:	e7ee      	b.n	aeb0 <pm_system_resume+0x54>
    aed2:	bf00      	nop
    aed4:	200049f8 	.word	0x200049f8
    aed8:	20002c50 	.word	0x20002c50
    aedc:	20002c40 	.word	0x20002c40
    aee0:	0002a3c5 	.word	0x0002a3c5

0000aee4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    aee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    aee8:	4b35      	ldr	r3, [pc, #212]	; (afc0 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aeea:	4a36      	ldr	r2, [pc, #216]	; (afc4 <pm_system_suspend+0xe0>)
    aeec:	7d1c      	ldrb	r4, [r3, #20]
    aeee:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aef2:	0963      	lsrs	r3, r4, #5
    aef4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    aef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aefc:	4d32      	ldr	r5, [pc, #200]	; (afc8 <pm_system_suspend+0xe4>)
    aefe:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    af02:	f004 081f 	and.w	r8, r4, #31
    af06:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    af0a:	f013 0f01 	tst.w	r3, #1
{
    af0e:	b085      	sub	sp, #20
    af10:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    af12:	d10a      	bne.n	af2a <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    af14:	4601      	mov	r1, r0
    af16:	4620      	mov	r0, r4
    af18:	f000 f876 	bl	b008 <pm_policy_next_state>
		if (info != NULL) {
    af1c:	b128      	cbz	r0, af2a <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    af1e:	c807      	ldmia	r0, {r0, r1, r2}
    af20:	230c      	movs	r3, #12
    af22:	fb03 5304 	mla	r3, r3, r4, r5
    af26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    af2a:	230c      	movs	r3, #12
    af2c:	4363      	muls	r3, r4
    af2e:	18ea      	adds	r2, r5, r3
    af30:	5cee      	ldrb	r6, [r5, r3]
    af32:	b936      	cbnz	r6, af42 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    af34:	4620      	mov	r0, r4
    af36:	f7ff ff79 	bl	ae2c <atomic_clear_bit.constprop.0>
		ret = false;
    af3a:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    af3c:	b005      	add	sp, #20
    af3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    af42:	1c7b      	adds	r3, r7, #1
    af44:	d00f      	beq.n	af66 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    af46:	f8d2 c008 	ldr.w	ip, [r2, #8]
    af4a:	4820      	ldr	r0, [pc, #128]	; (afcc <pm_system_suspend+0xe8>)
    af4c:	4a20      	ldr	r2, [pc, #128]	; (afd0 <pm_system_suspend+0xec>)
    af4e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    af52:	2100      	movs	r1, #0
    af54:	2300      	movs	r3, #0
    af56:	fbec 0106 	umlal	r0, r1, ip, r6
    af5a:	f7f6 f921 	bl	11a0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    af5e:	2101      	movs	r1, #1
    af60:	1a38      	subs	r0, r7, r0
    af62:	f022 fe14 	bl	2db8e <z_set_timeout_expiry>
	k_sched_lock();
    af66:	f01a fd2b 	bl	259c0 <k_sched_lock>
	pm_state_notify(true);
    af6a:	2001      	movs	r0, #1
    af6c:	f7ff ff30 	bl	add0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    af70:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    af74:	2301      	movs	r3, #1
    af76:	fa03 f808 	lsl.w	r8, r3, r8
    af7a:	4b16      	ldr	r3, [pc, #88]	; (afd4 <pm_system_suspend+0xf0>)
    af7c:	4499      	add	r9, r3
    af7e:	e859 3f00 	ldrex	r3, [r9]
    af82:	ea43 0308 	orr.w	r3, r3, r8
    af86:	e849 3200 	strex	r2, r3, [r9]
    af8a:	2a00      	cmp	r2, #0
    af8c:	d1f7      	bne.n	af7e <pm_system_suspend+0x9a>
    af8e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    af92:	230c      	movs	r3, #12
    af94:	fb03 5504 	mla	r5, r3, r4, r5
    af98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    af9c:	ab01      	add	r3, sp, #4
    af9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    afa2:	4a0d      	ldr	r2, [pc, #52]	; (afd8 <pm_system_suspend+0xf4>)
    afa4:	b11a      	cbz	r2, afae <pm_system_suspend+0xca>
		pm_power_state_set(info);
    afa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    afaa:	f01f f9f8 	bl	2a39e <pm_power_state_set>
	pm_system_resume();
    afae:	f7ff ff55 	bl	ae5c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    afb2:	4620      	mov	r0, r4
    afb4:	f7ff ff3a 	bl	ae2c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    afb8:	f01a fed0 	bl	25d5c <k_sched_unlock>
	bool ret = true;
    afbc:	2001      	movs	r0, #1
    afbe:	e7bd      	b.n	af3c <pm_system_suspend+0x58>
    afc0:	200049f8 	.word	0x200049f8
    afc4:	20002c4c 	.word	0x20002c4c
    afc8:	20002c40 	.word	0x20002c40
    afcc:	000f423f 	.word	0x000f423f
    afd0:	000f4240 	.word	0x000f4240
    afd4:	20002c50 	.word	0x20002c50
    afd8:	0002a39f 	.word	0x0002a39f

0000afdc <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    afdc:	4b05      	ldr	r3, [pc, #20]	; (aff4 <pm_constraint_get+0x18>)
    afde:	f3bf 8f5b 	dmb	ish
    afe2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    afe6:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    afea:	fab0 f080 	clz	r0, r0
    afee:	0940      	lsrs	r0, r0, #5
    aff0:	4770      	bx	lr
    aff2:	bf00      	nop
    aff4:	20002c54 	.word	0x20002c54

0000aff8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    aff8:	b908      	cbnz	r0, affe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    affa:	4b02      	ldr	r3, [pc, #8]	; (b004 <pm_state_cpu_get_all+0xc>)
    affc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    affe:	2000      	movs	r0, #0
    b000:	4770      	bx	lr
    b002:	bf00      	nop
    b004:	0002f0e4 	.word	0x0002f0e4

0000b008 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b00c:	b085      	sub	sp, #20
    b00e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b010:	a903      	add	r1, sp, #12
    b012:	f7ff fff1 	bl	aff8 <pm_state_cpu_get_all>
    b016:	f8df a074 	ldr.w	sl, [pc, #116]	; b08c <pm_policy_next_state+0x84>
    b01a:	f8df 8074 	ldr.w	r8, [pc, #116]	; b090 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b01e:	1e44      	subs	r4, r0, #1
    b020:	b224      	sxth	r4, r4
    b022:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b026:	f04f 0900 	mov.w	r9, #0
    b02a:	1c63      	adds	r3, r4, #1
    b02c:	d104      	bne.n	b038 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    b02e:	2500      	movs	r5, #0
}
    b030:	4628      	mov	r0, r5
    b032:	b005      	add	sp, #20
    b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    b038:	9a03      	ldr	r2, [sp, #12]
    b03a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    b03e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    b042:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    b046:	f7ff ffc9 	bl	afdc <pm_constraint_get>
    b04a:	b1e0      	cbz	r0, b086 <pm_policy_next_state+0x7e>
    b04c:	6868      	ldr	r0, [r5, #4]
    b04e:	f04f 0b00 	mov.w	fp, #0
    b052:	46d4      	mov	ip, sl
    b054:	4659      	mov	r1, fp
    b056:	fbe0 c107 	umlal	ip, r1, r0, r7
    b05a:	4642      	mov	r2, r8
    b05c:	464b      	mov	r3, r9
    b05e:	4660      	mov	r0, ip
    b060:	f7f6 f89e 	bl	11a0 <__aeabi_uldivmod>
    b064:	9001      	str	r0, [sp, #4]
    b066:	68a8      	ldr	r0, [r5, #8]
    b068:	46d4      	mov	ip, sl
    b06a:	4659      	mov	r1, fp
    b06c:	fbe0 c107 	umlal	ip, r1, r0, r7
    b070:	4642      	mov	r2, r8
    b072:	464b      	mov	r3, r9
    b074:	4660      	mov	r0, ip
    b076:	f7f6 f893 	bl	11a0 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    b07a:	1c72      	adds	r2, r6, #1
    b07c:	d0d8      	beq.n	b030 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    b07e:	9b01      	ldr	r3, [sp, #4]
    b080:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    b082:	42b0      	cmp	r0, r6
    b084:	d9d4      	bls.n	b030 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b086:	3c01      	subs	r4, #1
    b088:	b224      	sxth	r4, r4
    b08a:	e7ce      	b.n	b02a <pm_policy_next_state+0x22>
    b08c:	000f423f 	.word	0x000f423f
    b090:	000f4240 	.word	0x000f4240

0000b094 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    b094:	4b01      	ldr	r3, [pc, #4]	; (b09c <uECC_get_rng+0x8>)
    b096:	6818      	ldr	r0, [r3, #0]
    b098:	4770      	bx	lr
    b09a:	bf00      	nop
    b09c:	20000334 	.word	0x20000334

0000b0a0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    b0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    b0a2:	2208      	movs	r2, #8
{
    b0a4:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    b0a6:	f01e f83f 	bl	29128 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    b0aa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b0ac:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    b0ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b0b0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    b0b2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b0b4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    b0b6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b0b8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    b0ba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b0bc:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    b0be:	4613      	mov	r3, r2
    b0c0:	466a      	mov	r2, sp
{
    b0c2:	460c      	mov	r4, r1
    b0c4:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    b0c6:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    b0c8:	4611      	mov	r1, r2
    b0ca:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    b0cc:	e9cd 7701 	strd	r7, r7, [sp, #4]
    b0d0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    b0d2:	f01d ff3f 	bl	28f54 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b0d6:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    b0d8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b0da:	4630      	mov	r0, r6
    b0dc:	f01d ff3a 	bl	28f54 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    b0e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b0e2:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    b0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b0e6:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    b0e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    b0ea:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    b0ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b0ee:	4405      	add	r5, r0
	tmp[7] = 0;
    b0f0:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    b0f4:	4610      	mov	r0, r2
    b0f6:	4611      	mov	r1, r2
    b0f8:	f01d ff2c 	bl	28f54 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b0fc:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    b0fe:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b100:	4630      	mov	r0, r6
    b102:	f01d ff27 	bl	28f54 <uECC_vli_add>
    b106:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    b108:	6a20      	ldr	r0, [r4, #32]
    b10a:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    b10c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b10e:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    b110:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b112:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    b114:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    b116:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    b118:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    b11a:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b11c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    b11e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    b122:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b124:	f01d ff16 	bl	28f54 <uECC_vli_add>
    b128:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    b12a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b12c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    b12e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    b130:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    b134:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    b136:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b138:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    b13a:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    b13e:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    b140:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    b144:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    b146:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    b14a:	6a20      	ldr	r0, [r4, #32]
    b14c:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    b14e:	4630      	mov	r0, r6
    b150:	f01d ff00 	bl	28f54 <uECC_vli_add>
    b154:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    b156:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b158:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    b15a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b15c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    b15e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b160:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    b162:	6a20      	ldr	r0, [r4, #32]
    b164:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    b166:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b168:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b16a:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    b16c:	e9cd 7704 	strd	r7, r7, [sp, #16]
    b170:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b172:	f01e f80c 	bl	2918e <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    b176:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b178:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    b17a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b17c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    b17e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b180:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    b182:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b184:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    b186:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b188:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    b18a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b18c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b18e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b190:	2308      	movs	r3, #8
    b192:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    b194:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b198:	f01d fff9 	bl	2918e <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    b19c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b19e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    b1a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b1a2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    b1a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b1a6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    b1a8:	6a23      	ldr	r3, [r4, #32]
    b1aa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    b1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b1ae:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    b1b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    b1b2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    b1b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b1b8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b1ba:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b1bc:	2308      	movs	r3, #8
    b1be:	4630      	mov	r0, r6
    b1c0:	f01d ffe5 	bl	2918e <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    b1c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b1c6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    b1c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    b1ca:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    b1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b1d0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    b1d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b1d4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    b1d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    b1d8:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    b1dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b1de:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b1e0:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    b1e2:	2308      	movs	r3, #8
    b1e4:	4630      	mov	r0, r6
    b1e6:	f01d ffd2 	bl	2918e <uECC_vli_sub>

	if (carry < 0) {
    b1ea:	1a2d      	subs	r5, r5, r0
    b1ec:	d410      	bmi.n	b210 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    b1ee:	4c0d      	ldr	r4, [pc, #52]	; (b224 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    b1f0:	b935      	cbnz	r5, b200 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    b1f2:	2208      	movs	r2, #8
    b1f4:	4631      	mov	r1, r6
    b1f6:	4620      	mov	r0, r4
    b1f8:	f01d ffa2 	bl	29140 <uECC_vli_cmp_unsafe>
		while (carry || 
    b1fc:	2801      	cmp	r0, #1
    b1fe:	d00f      	beq.n	b220 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    b200:	2308      	movs	r3, #8
    b202:	4622      	mov	r2, r4
    b204:	4631      	mov	r1, r6
    b206:	4630      	mov	r0, r6
    b208:	f01d ffc1 	bl	2918e <uECC_vli_sub>
    b20c:	1a2d      	subs	r5, r5, r0
    b20e:	e7ef      	b.n	b1f0 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    b210:	4a04      	ldr	r2, [pc, #16]	; (b224 <vli_mmod_fast_secp256r1+0x184>)
    b212:	2308      	movs	r3, #8
    b214:	4631      	mov	r1, r6
    b216:	4630      	mov	r0, r6
    b218:	f01d fe9c 	bl	28f54 <uECC_vli_add>
		while (carry < 0);
    b21c:	182d      	adds	r5, r5, r0
    b21e:	d4f8      	bmi.n	b212 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    b220:	b009      	add	sp, #36	; 0x24
    b222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b224:	0002f0e8 	.word	0x0002f0e8

0000b228 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    b228:	4904      	ldr	r1, [pc, #16]	; (b23c <sub_bytes+0x14>)
    b22a:	1e43      	subs	r3, r0, #1
    b22c:	300f      	adds	r0, #15
    b22e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    b232:	5c8a      	ldrb	r2, [r1, r2]
    b234:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    b236:	4283      	cmp	r3, r0
    b238:	d1f9      	bne.n	b22e <sub_bytes+0x6>
	}
}
    b23a:	4770      	bx	lr
    b23c:	000326ab 	.word	0x000326ab

0000b240 <tc_aes128_set_encrypt_key>:
{
    b240:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    b242:	4e26      	ldr	r6, [pc, #152]	; (b2dc <tc_aes128_set_encrypt_key+0x9c>)
{
    b244:	4607      	mov	r7, r0
    b246:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    b248:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    b24a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    b24c:	ad01      	add	r5, sp, #4
    b24e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b250:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b254:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    b258:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    b25c:	4638      	mov	r0, r7
    b25e:	2f00      	cmp	r7, #0
    b260:	d038      	beq.n	b2d4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    b262:	2c00      	cmp	r4, #0
    b264:	d038      	beq.n	b2d8 <tc_aes128_set_encrypt_key+0x98>
    b266:	1f38      	subs	r0, r7, #4
    b268:	4621      	mov	r1, r4
    b26a:	4602      	mov	r2, r0
    b26c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    b26e:	784b      	ldrb	r3, [r1, #1]
    b270:	780d      	ldrb	r5, [r1, #0]
    b272:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b274:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    b278:	78cd      	ldrb	r5, [r1, #3]
    b27a:	432b      	orrs	r3, r5
    b27c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    b27e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b280:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    b284:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    b286:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    b28a:	d1f0      	bne.n	b26e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    b28c:	4c14      	ldr	r4, [pc, #80]	; (b2e0 <tc_aes128_set_encrypt_key+0xa0>)
    b28e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    b290:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    b292:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    b294:	d116      	bne.n	b2c4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    b296:	f3c3 4207 	ubfx	r2, r3, #16, #8
    b29a:	5ca5      	ldrb	r5, [r4, r2]
    b29c:	0e1a      	lsrs	r2, r3, #24
    b29e:	5ca2      	ldrb	r2, [r4, r2]
    b2a0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    b2a4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    b2a8:	b2db      	uxtb	r3, r3
    b2aa:	5d65      	ldrb	r5, [r4, r5]
    b2ac:	5ce3      	ldrb	r3, [r4, r3]
    b2ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    b2b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    b2b6:	ad0c      	add	r5, sp, #48	; 0x30
    b2b8:	f021 0303 	bic.w	r3, r1, #3
    b2bc:	442b      	add	r3, r5
    b2be:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    b2c2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    b2c4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    b2c8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    b2ca:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    b2cc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    b2ce:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    b2d0:	d1de      	bne.n	b290 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    b2d2:	2001      	movs	r0, #1
}
    b2d4:	b00d      	add	sp, #52	; 0x34
    b2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    b2d8:	4620      	mov	r0, r4
    b2da:	e7fb      	b.n	b2d4 <tc_aes128_set_encrypt_key+0x94>
    b2dc:	0002e554 	.word	0x0002e554
    b2e0:	000326ab 	.word	0x000326ab

0000b2e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b2e4:	4901      	ldr	r1, [pc, #4]	; (b2ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b2e6:	2210      	movs	r2, #16
	str	r2, [r1]
    b2e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b2ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b2ec:	e000ed10 	.word	0xe000ed10

0000b2f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b2f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b2f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b2f4:	f380 8811 	msr	BASEPRI, r0
	isb
    b2f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    b2fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    b300:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b302:	b662      	cpsie	i
	isb
    b304:	f3bf 8f6f 	isb	sy

	bx	lr
    b308:	4770      	bx	lr
    b30a:	bf00      	nop

0000b30c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b30c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b30e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b310:	f381 8811 	msr	BASEPRI, r1

	wfe
    b314:	bf20      	wfe

	msr	BASEPRI, r0
    b316:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b31a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b31c:	4770      	bx	lr
    b31e:	bf00      	nop

0000b320 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b324:	b089      	sub	sp, #36	; 0x24
    b326:	4680      	mov	r8, r0
    b328:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    b32a:	460c      	mov	r4, r1
    b32c:	2900      	cmp	r1, #0
    b32e:	d053      	beq.n	b3d8 <z_arm_fatal_error+0xb8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    b330:	4d2d      	ldr	r5, [pc, #180]	; (b3e8 <z_arm_fatal_error+0xc8>)
    b332:	682b      	ldr	r3, [r5, #0]
    b334:	0758      	lsls	r0, r3, #29
    b336:	d04f      	beq.n	b3d8 <z_arm_fatal_error+0xb8>
    b338:	e9d1 0100 	ldrd	r0, r1, [r1]
    b33c:	4e2b      	ldr	r6, [pc, #172]	; (b3ec <z_arm_fatal_error+0xcc>)
    b33e:	68a3      	ldr	r3, [r4, #8]
    b340:	46e9      	mov	r9, sp
    b342:	b088      	sub	sp, #32
    b344:	466a      	mov	r2, sp
    b346:	e9c2 6004 	strd	r6, r0, [r2, #16]
    b34a:	2605      	movs	r6, #5
    b34c:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b350:	60be      	str	r6, [r7, #8]
    b352:	f842 6f0c 	str.w	r6, [r2, #12]!
    b356:	2300      	movs	r3, #0
    b358:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b35c:	4628      	mov	r0, r5
    b35e:	f01c faef 	bl	27940 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    b362:	682b      	ldr	r3, [r5, #0]
    b364:	0759      	lsls	r1, r3, #29
    b366:	46cd      	mov	sp, r9
    b368:	d036      	beq.n	b3d8 <z_arm_fatal_error+0xb8>
    b36a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    b36e:	4b20      	ldr	r3, [pc, #128]	; (b3f0 <z_arm_fatal_error+0xd0>)
    b370:	60be      	str	r6, [r7, #8]
    b372:	b088      	sub	sp, #32
    b374:	466a      	mov	r2, sp
    b376:	e9c2 3004 	strd	r3, r0, [r2, #16]
    b37a:	6963      	ldr	r3, [r4, #20]
    b37c:	6191      	str	r1, [r2, #24]
    b37e:	61d3      	str	r3, [r2, #28]
    b380:	f842 6f0c 	str.w	r6, [r2, #12]!
    b384:	2300      	movs	r3, #0
    b386:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b38a:	4628      	mov	r0, r5
    b38c:	f01c fad8 	bl	27940 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    b390:	682b      	ldr	r3, [r5, #0]
    b392:	075a      	lsls	r2, r3, #29
    b394:	46cd      	mov	sp, r9
    b396:	d01f      	beq.n	b3d8 <z_arm_fatal_error+0xb8>
    b398:	69e3      	ldr	r3, [r4, #28]
    b39a:	4a16      	ldr	r2, [pc, #88]	; (b3f4 <z_arm_fatal_error+0xd4>)
    b39c:	2603      	movs	r6, #3
    b39e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b3a2:	607e      	str	r6, [r7, #4]
    b3a4:	617e      	str	r6, [r7, #20]
    b3a6:	2300      	movs	r3, #0
    b3a8:	f107 0214 	add.w	r2, r7, #20
    b3ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b3b0:	4628      	mov	r0, r5
    b3b2:	f01c fac5 	bl	27940 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    b3b6:	682b      	ldr	r3, [r5, #0]
    b3b8:	075b      	lsls	r3, r3, #29
    b3ba:	d00d      	beq.n	b3d8 <z_arm_fatal_error+0xb8>
    b3bc:	69a3      	ldr	r3, [r4, #24]
    b3be:	4a0e      	ldr	r2, [pc, #56]	; (b3f8 <z_arm_fatal_error+0xd8>)
    b3c0:	607e      	str	r6, [r7, #4]
    b3c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b3c6:	617e      	str	r6, [r7, #20]
    b3c8:	2300      	movs	r3, #0
    b3ca:	f107 0214 	add.w	r2, r7, #20
    b3ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b3d2:	4628      	mov	r0, r5
    b3d4:	f01c fab4 	bl	27940 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b3d8:	4621      	mov	r1, r4
    b3da:	4640      	mov	r0, r8
    b3dc:	f019 fc68 	bl	24cb0 <z_fatal_error>
}
    b3e0:	3724      	adds	r7, #36	; 0x24
    b3e2:	46bd      	mov	sp, r7
    b3e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b3e8:	20000a80 	.word	0x20000a80
    b3ec:	000327ab 	.word	0x000327ab
    b3f0:	000327da 	.word	0x000327da
    b3f4:	00032809 	.word	0x00032809
    b3f8:	00032818 	.word	0x00032818

0000b3fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b3fc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b3fe:	2b00      	cmp	r3, #0
    b400:	db08      	blt.n	b414 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b402:	2201      	movs	r2, #1
    b404:	f000 001f 	and.w	r0, r0, #31
    b408:	fa02 f000 	lsl.w	r0, r2, r0
    b40c:	095b      	lsrs	r3, r3, #5
    b40e:	4a02      	ldr	r2, [pc, #8]	; (b418 <arch_irq_enable+0x1c>)
    b410:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    b414:	4770      	bx	lr
    b416:	bf00      	nop
    b418:	e000e100 	.word	0xe000e100

0000b41c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b41c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b41e:	2b00      	cmp	r3, #0
    b420:	db0d      	blt.n	b43e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b422:	2201      	movs	r2, #1
    b424:	095b      	lsrs	r3, r3, #5
    b426:	f000 001f 	and.w	r0, r0, #31
    b42a:	fa02 f000 	lsl.w	r0, r2, r0
    b42e:	3320      	adds	r3, #32
    b430:	4a03      	ldr	r2, [pc, #12]	; (b440 <arch_irq_disable+0x24>)
    b432:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b436:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b43a:	f3bf 8f6f 	isb	sy
}
    b43e:	4770      	bx	lr
    b440:	e000e100 	.word	0xe000e100

0000b444 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b444:	4b05      	ldr	r3, [pc, #20]	; (b45c <arch_irq_is_enabled+0x18>)
    b446:	0942      	lsrs	r2, r0, #5
    b448:	f000 001f 	and.w	r0, r0, #31
    b44c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b450:	2301      	movs	r3, #1
    b452:	fa03 f000 	lsl.w	r0, r3, r0
}
    b456:	4010      	ands	r0, r2
    b458:	4770      	bx	lr
    b45a:	bf00      	nop
    b45c:	e000e100 	.word	0xe000e100

0000b460 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b460:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b462:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b464:	bfa8      	it	ge
    b466:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    b46a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b46e:	bfb8      	it	lt
    b470:	4b06      	ldrlt	r3, [pc, #24]	; (b48c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b472:	ea4f 1141 	mov.w	r1, r1, lsl #5
    b476:	bfac      	ite	ge
    b478:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b47c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b480:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b482:	bfb4      	ite	lt
    b484:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b486:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    b48a:	4770      	bx	lr
    b48c:	e000ed14 	.word	0xe000ed14

0000b490 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    b490:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    b492:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    b494:	4b04      	ldr	r3, [pc, #16]	; (b4a8 <_arch_isr_direct_pm+0x18>)
    b496:	699a      	ldr	r2, [r3, #24]
    b498:	b11a      	cbz	r2, b4a2 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    b49a:	2200      	movs	r2, #0
    b49c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    b49e:	f022 f858 	bl	2d552 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    b4a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    b4a4:	bd08      	pop	{r3, pc}
    b4a6:	bf00      	nop
    b4a8:	200049f8 	.word	0x200049f8

0000b4ac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b4ac:	bf30      	wfi
    b z_SysNmiOnReset
    b4ae:	f7ff bffd 	b.w	b4ac <z_SysNmiOnReset>
    b4b2:	bf00      	nop

0000b4b4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b4b4:	4a0f      	ldr	r2, [pc, #60]	; (b4f4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b4b6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b4b8:	4b0f      	ldr	r3, [pc, #60]	; (b4f8 <z_arm_prep_c+0x44>)
    b4ba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b4be:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b4c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b4c4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b4c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b4cc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b4d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    b4d4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    b4d8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    b4dc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    b4e0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b4e4:	f019 fca6 	bl	24e34 <z_bss_zero>
	z_data_copy();
    b4e8:	f01a fd80 	bl	25fec <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b4ec:	f000 fc22 	bl	bd34 <z_arm_interrupt_init>
	z_cstart();
    b4f0:	f019 fcaa 	bl	24e48 <z_cstart>
    b4f4:	00001000 	.word	0x00001000
    b4f8:	e000ed00 	.word	0xe000ed00

0000b4fc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b4fc:	4a0a      	ldr	r2, [pc, #40]	; (b528 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b4fe:	490b      	ldr	r1, [pc, #44]	; (b52c <arch_swap+0x30>)
	_current->arch.basepri = key;
    b500:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b502:	6809      	ldr	r1, [r1, #0]
    b504:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b508:	4909      	ldr	r1, [pc, #36]	; (b530 <arch_swap+0x34>)
	_current->arch.basepri = key;
    b50a:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b50e:	684b      	ldr	r3, [r1, #4]
    b510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b514:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    b516:	2300      	movs	r3, #0
    b518:	f383 8811 	msr	BASEPRI, r3
    b51c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b520:	6893      	ldr	r3, [r2, #8]
}
    b522:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    b526:	4770      	bx	lr
    b528:	200049f8 	.word	0x200049f8
    b52c:	0003086c 	.word	0x0003086c
    b530:	e000ed00 	.word	0xe000ed00

0000b534 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b534:	4913      	ldr	r1, [pc, #76]	; (b584 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b536:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b538:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b53c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b53e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b542:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b546:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    b548:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b54c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b550:	4f0d      	ldr	r7, [pc, #52]	; (b588 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b552:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b556:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    b558:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b55a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b55c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    b560:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b562:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b566:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    b56a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    b56c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    b56e:	f000 fc29 	bl	bdc4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    b572:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b576:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b57a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b57e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b582:	4770      	bx	lr
    ldr r1, =_kernel
    b584:	200049f8 	.word	0x200049f8
    ldr v4, =_SCS_ICSR
    b588:	e000ed04 	.word	0xe000ed04

0000b58c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    b58c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b590:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b592:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b596:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b59a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b59c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b5a0:	2902      	cmp	r1, #2
    beq _oops
    b5a2:	d0ff      	beq.n	b5a4 <_oops>

0000b5a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b5a4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    b5a6:	f01e fd17 	bl	29fd8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    b5aa:	bd01      	pop	{r0, pc}

0000b5ac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b5ac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b5b0:	9b00      	ldr	r3, [sp, #0]
    b5b2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    b5b6:	490a      	ldr	r1, [pc, #40]	; (b5e0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    b5b8:	9b01      	ldr	r3, [sp, #4]
    b5ba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b5be:	9b02      	ldr	r3, [sp, #8]
    b5c0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    b5c4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b5c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b5cc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    b5d0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b5d4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b5d6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b5d8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    b5da:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b5de:	4770      	bx	lr
    b5e0:	00026b9d 	.word	0x00026b9d

0000b5e4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    b5e4:	4a0a      	ldr	r2, [pc, #40]	; (b610 <z_check_thread_stack_fail+0x2c>)
{
    b5e6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    b5e8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    b5ea:	b178      	cbz	r0, b60c <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    b5ec:	f113 0f16 	cmn.w	r3, #22
    b5f0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    b5f4:	d005      	beq.n	b602 <z_check_thread_stack_fail+0x1e>
    b5f6:	f1a0 0220 	sub.w	r2, r0, #32
    b5fa:	429a      	cmp	r2, r3
    b5fc:	d805      	bhi.n	b60a <z_check_thread_stack_fail+0x26>
    b5fe:	4283      	cmp	r3, r0
    b600:	d203      	bcs.n	b60a <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    b602:	4281      	cmp	r1, r0
    b604:	bf28      	it	cs
    b606:	2000      	movcs	r0, #0
    b608:	4770      	bx	lr
    b60a:	2000      	movs	r0, #0
}
    b60c:	4770      	bx	lr
    b60e:	bf00      	nop
    b610:	200049f8 	.word	0x200049f8

0000b614 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    b614:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b616:	4b09      	ldr	r3, [pc, #36]	; (b63c <arch_switch_to_main_thread+0x28>)
    b618:	6098      	str	r0, [r3, #8]
{
    b61a:	460d      	mov	r5, r1
    b61c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    b61e:	f000 fbd1 	bl	bdc4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b622:	4620      	mov	r0, r4
    b624:	f385 8809 	msr	PSP, r5
    b628:	2100      	movs	r1, #0
    b62a:	b663      	cpsie	if
    b62c:	f381 8811 	msr	BASEPRI, r1
    b630:	f3bf 8f6f 	isb	sy
    b634:	2200      	movs	r2, #0
    b636:	2300      	movs	r3, #0
    b638:	f01b fab0 	bl	26b9c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b63c:	200049f8 	.word	0x200049f8

0000b640 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b640:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b642:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b644:	4a0b      	ldr	r2, [pc, #44]	; (b674 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b646:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    b648:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b64a:	bf1e      	ittt	ne
	movne	r1, #0
    b64c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b64e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    b650:	f021 ff7f 	blne	2d552 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b654:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b656:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b65a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b65e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b662:	4905      	ldr	r1, [pc, #20]	; (b678 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b664:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b666:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b668:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b66a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b66e:	4903      	ldr	r1, [pc, #12]	; (b67c <_isr_wrapper+0x3c>)
	bx r1
    b670:	4708      	bx	r1
    b672:	0000      	.short	0x0000
	ldr r2, =_kernel
    b674:	200049f8 	.word	0x200049f8
	ldr r1, =_sw_isr_table
    b678:	0002e06c 	.word	0x0002e06c
	ldr r1, =z_arm_int_exit
    b67c:	0000b681 	.word	0x0000b681

0000b680 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    b680:	4b04      	ldr	r3, [pc, #16]	; (b694 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    b682:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    b684:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    b686:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    b688:	d003      	beq.n	b692 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    b68a:	4903      	ldr	r1, [pc, #12]	; (b698 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    b68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    b690:	600a      	str	r2, [r1, #0]

0000b692 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    b692:	4770      	bx	lr
	ldr r3, =_kernel
    b694:	200049f8 	.word	0x200049f8
	ldr r1, =_SCS_ICSR
    b698:	e000ed04 	.word	0xe000ed04

0000b69c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b69c:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    b69e:	4c4b      	ldr	r4, [pc, #300]	; (b7cc <bus_fault.constprop.0+0x130>)
    b6a0:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b6a2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    b6a4:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b6a6:	b088      	sub	sp, #32
    b6a8:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    b6aa:	d00a      	beq.n	b6c2 <bus_fault.constprop.0+0x26>
    b6ac:	4b48      	ldr	r3, [pc, #288]	; (b7d0 <bus_fault.constprop.0+0x134>)
    b6ae:	9306      	str	r3, [sp, #24]
    b6b0:	aa05      	add	r2, sp, #20
    b6b2:	2302      	movs	r3, #2
    b6b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b6b8:	4620      	mov	r0, r4
    b6ba:	9301      	str	r3, [sp, #4]
    b6bc:	9305      	str	r3, [sp, #20]
    b6be:	f01e fc9a 	bl	29ff6 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    b6c2:	4b44      	ldr	r3, [pc, #272]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b6c6:	04da      	lsls	r2, r3, #19
    b6c8:	d50d      	bpl.n	b6e6 <bus_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error");
    b6ca:	6823      	ldr	r3, [r4, #0]
    b6cc:	075b      	lsls	r3, r3, #29
    b6ce:	d00a      	beq.n	b6e6 <bus_fault.constprop.0+0x4a>
    b6d0:	4b41      	ldr	r3, [pc, #260]	; (b7d8 <bus_fault.constprop.0+0x13c>)
    b6d2:	9306      	str	r3, [sp, #24]
    b6d4:	483d      	ldr	r0, [pc, #244]	; (b7cc <bus_fault.constprop.0+0x130>)
    b6d6:	2302      	movs	r3, #2
    b6d8:	aa05      	add	r2, sp, #20
    b6da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b6de:	9301      	str	r3, [sp, #4]
    b6e0:	9305      	str	r3, [sp, #20]
    b6e2:	f01e fc88 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    b6e6:	4b3b      	ldr	r3, [pc, #236]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b6ea:	0518      	lsls	r0, r3, #20
    b6ec:	d50d      	bpl.n	b70a <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    b6ee:	6823      	ldr	r3, [r4, #0]
    b6f0:	0759      	lsls	r1, r3, #29
    b6f2:	d00a      	beq.n	b70a <bus_fault.constprop.0+0x6e>
    b6f4:	4b39      	ldr	r3, [pc, #228]	; (b7dc <bus_fault.constprop.0+0x140>)
    b6f6:	9306      	str	r3, [sp, #24]
    b6f8:	4834      	ldr	r0, [pc, #208]	; (b7cc <bus_fault.constprop.0+0x130>)
    b6fa:	2302      	movs	r3, #2
    b6fc:	aa05      	add	r2, sp, #20
    b6fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b702:	9301      	str	r3, [sp, #4]
    b704:	9305      	str	r3, [sp, #20]
    b706:	f01e fc76 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    b70a:	4b32      	ldr	r3, [pc, #200]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b70e:	059a      	lsls	r2, r3, #22
    b710:	d527      	bpl.n	b762 <bus_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Precise data bus error");
    b712:	6823      	ldr	r3, [r4, #0]
    b714:	075b      	lsls	r3, r3, #29
    b716:	d00a      	beq.n	b72e <bus_fault.constprop.0+0x92>
    b718:	4b31      	ldr	r3, [pc, #196]	; (b7e0 <bus_fault.constprop.0+0x144>)
    b71a:	9306      	str	r3, [sp, #24]
    b71c:	482b      	ldr	r0, [pc, #172]	; (b7cc <bus_fault.constprop.0+0x130>)
    b71e:	2302      	movs	r3, #2
    b720:	aa05      	add	r2, sp, #20
    b722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b726:	9301      	str	r3, [sp, #4]
    b728:	9305      	str	r3, [sp, #20]
    b72a:	f01e fc64 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    b72e:	4b29      	ldr	r3, [pc, #164]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b730:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    b732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b734:	0418      	lsls	r0, r3, #16
    b736:	d514      	bpl.n	b762 <bus_fault.constprop.0+0xc6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    b738:	6823      	ldr	r3, [r4, #0]
    b73a:	0759      	lsls	r1, r3, #29
    b73c:	d00b      	beq.n	b756 <bus_fault.constprop.0+0xba>
    b73e:	4b29      	ldr	r3, [pc, #164]	; (b7e4 <bus_fault.constprop.0+0x148>)
    b740:	4822      	ldr	r0, [pc, #136]	; (b7cc <bus_fault.constprop.0+0x130>)
    b742:	e9cd 3206 	strd	r3, r2, [sp, #24]
    b746:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b74a:	2303      	movs	r3, #3
    b74c:	aa05      	add	r2, sp, #20
    b74e:	9301      	str	r3, [sp, #4]
    b750:	9305      	str	r3, [sp, #20]
    b752:	f01e fc50 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    b756:	b126      	cbz	r6, b762 <bus_fault.constprop.0+0xc6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    b758:	4a1e      	ldr	r2, [pc, #120]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b75a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b75c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    b760:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    b762:	4b1c      	ldr	r3, [pc, #112]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b766:	055b      	lsls	r3, r3, #21
    b768:	d50d      	bpl.n	b786 <bus_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Imprecise data bus error");
    b76a:	6823      	ldr	r3, [r4, #0]
    b76c:	075e      	lsls	r6, r3, #29
    b76e:	d00a      	beq.n	b786 <bus_fault.constprop.0+0xea>
    b770:	4b1d      	ldr	r3, [pc, #116]	; (b7e8 <bus_fault.constprop.0+0x14c>)
    b772:	9306      	str	r3, [sp, #24]
    b774:	4815      	ldr	r0, [pc, #84]	; (b7cc <bus_fault.constprop.0+0x130>)
    b776:	2302      	movs	r3, #2
    b778:	aa05      	add	r2, sp, #20
    b77a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b77e:	9301      	str	r3, [sp, #4]
    b780:	9305      	str	r3, [sp, #20]
    b782:	f01e fc38 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    b786:	4b13      	ldr	r3, [pc, #76]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b78a:	05d0      	lsls	r0, r2, #23
    b78c:	d516      	bpl.n	b7bc <bus_fault.constprop.0+0x120>
		PR_FAULT_INFO("  Instruction bus error");
    b78e:	6823      	ldr	r3, [r4, #0]
    b790:	0759      	lsls	r1, r3, #29
    b792:	d00a      	beq.n	b7aa <bus_fault.constprop.0+0x10e>
    b794:	4b15      	ldr	r3, [pc, #84]	; (b7ec <bus_fault.constprop.0+0x150>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    b796:	9306      	str	r3, [sp, #24]
    b798:	480c      	ldr	r0, [pc, #48]	; (b7cc <bus_fault.constprop.0+0x130>)
    b79a:	2302      	movs	r3, #2
    b79c:	aa05      	add	r2, sp, #20
    b79e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7a2:	9301      	str	r3, [sp, #4]
    b7a4:	9305      	str	r3, [sp, #20]
    b7a6:	f01e fc26 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b7aa:	4a0a      	ldr	r2, [pc, #40]	; (b7d4 <bus_fault.constprop.0+0x138>)
    b7ac:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    b7ae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b7b0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    b7b4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b7b6:	7028      	strb	r0, [r5, #0]

	return reason;
}
    b7b8:	b008      	add	sp, #32
    b7ba:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7be:	049a      	lsls	r2, r3, #18
    b7c0:	d5f3      	bpl.n	b7aa <bus_fault.constprop.0+0x10e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    b7c2:	6823      	ldr	r3, [r4, #0]
    b7c4:	075b      	lsls	r3, r3, #29
    b7c6:	d0f0      	beq.n	b7aa <bus_fault.constprop.0+0x10e>
    b7c8:	4b09      	ldr	r3, [pc, #36]	; (b7f0 <bus_fault.constprop.0+0x154>)
    b7ca:	e7e4      	b.n	b796 <bus_fault.constprop.0+0xfa>
    b7cc:	20000a80 	.word	0x20000a80
    b7d0:	00032846 	.word	0x00032846
    b7d4:	e000ed00 	.word	0xe000ed00
    b7d8:	0003285c 	.word	0x0003285c
    b7dc:	0003286d 	.word	0x0003286d
    b7e0:	00032880 	.word	0x00032880
    b7e4:	00032899 	.word	0x00032899
    b7e8:	000328ae 	.word	0x000328ae
    b7ec:	000328c9 	.word	0x000328c9
    b7f0:	000328e1 	.word	0x000328e1

0000b7f4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    b7f4:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    b7f6:	4c43      	ldr	r4, [pc, #268]	; (b904 <usage_fault.constprop.0+0x110>)
    b7f8:	6823      	ldr	r3, [r4, #0]
    b7fa:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    b7fc:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** USAGE FAULT *****");
    b7fe:	d00a      	beq.n	b816 <usage_fault.constprop.0+0x22>
    b800:	4b41      	ldr	r3, [pc, #260]	; (b908 <usage_fault.constprop.0+0x114>)
    b802:	9306      	str	r3, [sp, #24]
    b804:	aa05      	add	r2, sp, #20
    b806:	2302      	movs	r3, #2
    b808:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b80c:	4620      	mov	r0, r4
    b80e:	9301      	str	r3, [sp, #4]
    b810:	9305      	str	r3, [sp, #20]
    b812:	f01e fbf0 	bl	29ff6 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    b816:	4b3d      	ldr	r3, [pc, #244]	; (b90c <usage_fault.constprop.0+0x118>)
    b818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b81a:	0198      	lsls	r0, r3, #6
    b81c:	d50d      	bpl.n	b83a <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    b81e:	6823      	ldr	r3, [r4, #0]
    b820:	0759      	lsls	r1, r3, #29
    b822:	d00a      	beq.n	b83a <usage_fault.constprop.0+0x46>
    b824:	4b3a      	ldr	r3, [pc, #232]	; (b910 <usage_fault.constprop.0+0x11c>)
    b826:	9306      	str	r3, [sp, #24]
    b828:	4836      	ldr	r0, [pc, #216]	; (b904 <usage_fault.constprop.0+0x110>)
    b82a:	2302      	movs	r3, #2
    b82c:	aa05      	add	r2, sp, #20
    b82e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b832:	9301      	str	r3, [sp, #4]
    b834:	9305      	str	r3, [sp, #20]
    b836:	f01e fbde 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    b83a:	4b34      	ldr	r3, [pc, #208]	; (b90c <usage_fault.constprop.0+0x118>)
    b83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b83e:	01da      	lsls	r2, r3, #7
    b840:	d50d      	bpl.n	b85e <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Unaligned memory access");
    b842:	6823      	ldr	r3, [r4, #0]
    b844:	075b      	lsls	r3, r3, #29
    b846:	d00a      	beq.n	b85e <usage_fault.constprop.0+0x6a>
    b848:	4b32      	ldr	r3, [pc, #200]	; (b914 <usage_fault.constprop.0+0x120>)
    b84a:	9306      	str	r3, [sp, #24]
    b84c:	482d      	ldr	r0, [pc, #180]	; (b904 <usage_fault.constprop.0+0x110>)
    b84e:	2302      	movs	r3, #2
    b850:	aa05      	add	r2, sp, #20
    b852:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b856:	9301      	str	r3, [sp, #4]
    b858:	9305      	str	r3, [sp, #20]
    b85a:	f01e fbcc 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    b85e:	4b2b      	ldr	r3, [pc, #172]	; (b90c <usage_fault.constprop.0+0x118>)
    b860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b862:	0318      	lsls	r0, r3, #12
    b864:	d50d      	bpl.n	b882 <usage_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  No coprocessor instructions");
    b866:	6823      	ldr	r3, [r4, #0]
    b868:	0759      	lsls	r1, r3, #29
    b86a:	d00a      	beq.n	b882 <usage_fault.constprop.0+0x8e>
    b86c:	4b2a      	ldr	r3, [pc, #168]	; (b918 <usage_fault.constprop.0+0x124>)
    b86e:	9306      	str	r3, [sp, #24]
    b870:	4824      	ldr	r0, [pc, #144]	; (b904 <usage_fault.constprop.0+0x110>)
    b872:	2302      	movs	r3, #2
    b874:	aa05      	add	r2, sp, #20
    b876:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b87a:	9301      	str	r3, [sp, #4]
    b87c:	9305      	str	r3, [sp, #20]
    b87e:	f01e fbba 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    b882:	4b22      	ldr	r3, [pc, #136]	; (b90c <usage_fault.constprop.0+0x118>)
    b884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b886:	035a      	lsls	r2, r3, #13
    b888:	d50d      	bpl.n	b8a6 <usage_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    b88a:	6823      	ldr	r3, [r4, #0]
    b88c:	075b      	lsls	r3, r3, #29
    b88e:	d00a      	beq.n	b8a6 <usage_fault.constprop.0+0xb2>
    b890:	4b22      	ldr	r3, [pc, #136]	; (b91c <usage_fault.constprop.0+0x128>)
    b892:	9306      	str	r3, [sp, #24]
    b894:	481b      	ldr	r0, [pc, #108]	; (b904 <usage_fault.constprop.0+0x110>)
    b896:	2302      	movs	r3, #2
    b898:	aa05      	add	r2, sp, #20
    b89a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b89e:	9301      	str	r3, [sp, #4]
    b8a0:	9305      	str	r3, [sp, #20]
    b8a2:	f01e fba8 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    b8a6:	4b19      	ldr	r3, [pc, #100]	; (b90c <usage_fault.constprop.0+0x118>)
    b8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8aa:	0398      	lsls	r0, r3, #14
    b8ac:	d50d      	bpl.n	b8ca <usage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    b8ae:	6823      	ldr	r3, [r4, #0]
    b8b0:	0759      	lsls	r1, r3, #29
    b8b2:	d00a      	beq.n	b8ca <usage_fault.constprop.0+0xd6>
    b8b4:	4b1a      	ldr	r3, [pc, #104]	; (b920 <usage_fault.constprop.0+0x12c>)
    b8b6:	9306      	str	r3, [sp, #24]
    b8b8:	4812      	ldr	r0, [pc, #72]	; (b904 <usage_fault.constprop.0+0x110>)
    b8ba:	2302      	movs	r3, #2
    b8bc:	aa05      	add	r2, sp, #20
    b8be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8c2:	9301      	str	r3, [sp, #4]
    b8c4:	9305      	str	r3, [sp, #20]
    b8c6:	f01e fb96 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    b8ca:	4b10      	ldr	r3, [pc, #64]	; (b90c <usage_fault.constprop.0+0x118>)
    b8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8ce:	03da      	lsls	r2, r3, #15
    b8d0:	d50d      	bpl.n	b8ee <usage_fault.constprop.0+0xfa>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    b8d2:	6823      	ldr	r3, [r4, #0]
    b8d4:	075b      	lsls	r3, r3, #29
    b8d6:	d00a      	beq.n	b8ee <usage_fault.constprop.0+0xfa>
    b8d8:	4b12      	ldr	r3, [pc, #72]	; (b924 <usage_fault.constprop.0+0x130>)
    b8da:	9306      	str	r3, [sp, #24]
    b8dc:	4809      	ldr	r0, [pc, #36]	; (b904 <usage_fault.constprop.0+0x110>)
    b8de:	2302      	movs	r3, #2
    b8e0:	aa05      	add	r2, sp, #20
    b8e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8e6:	9301      	str	r3, [sp, #4]
    b8e8:	9305      	str	r3, [sp, #20]
    b8ea:	f01e fb84 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b8ee:	4a07      	ldr	r2, [pc, #28]	; (b90c <usage_fault.constprop.0+0x118>)
    b8f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b8f2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    b8f6:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    b8fa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b8fc:	6293      	str	r3, [r2, #40]	; 0x28
}
    b8fe:	b008      	add	sp, #32
    b900:	bd10      	pop	{r4, pc}
    b902:	bf00      	nop
    b904:	20000a80 	.word	0x20000a80
    b908:	00032910 	.word	0x00032910
    b90c:	e000ed00 	.word	0xe000ed00
    b910:	00032928 	.word	0x00032928
    b914:	0003293b 	.word	0x0003293b
    b918:	00032955 	.word	0x00032955
    b91c:	00032973 	.word	0x00032973
    b920:	00032998 	.word	0x00032998
    b924:	000329b2 	.word	0x000329b2

0000b928 <mem_manage_fault>:
{
    b928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    b92c:	4c55      	ldr	r4, [pc, #340]	; (ba84 <mem_manage_fault+0x15c>)
    b92e:	6823      	ldr	r3, [r4, #0]
{
    b930:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    b932:	0759      	lsls	r1, r3, #29
{
    b934:	b088      	sub	sp, #32
    b936:	4607      	mov	r7, r0
    b938:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    b93a:	d00a      	beq.n	b952 <mem_manage_fault+0x2a>
    b93c:	4b52      	ldr	r3, [pc, #328]	; (ba88 <mem_manage_fault+0x160>)
    b93e:	9306      	str	r3, [sp, #24]
    b940:	aa05      	add	r2, sp, #20
    b942:	2302      	movs	r3, #2
    b944:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b948:	4620      	mov	r0, r4
    b94a:	9301      	str	r3, [sp, #4]
    b94c:	9305      	str	r3, [sp, #20]
    b94e:	f01e fb52 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b952:	4b4e      	ldr	r3, [pc, #312]	; (ba8c <mem_manage_fault+0x164>)
    b954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b956:	06da      	lsls	r2, r3, #27
    b958:	d50d      	bpl.n	b976 <mem_manage_fault+0x4e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    b95a:	6823      	ldr	r3, [r4, #0]
    b95c:	075b      	lsls	r3, r3, #29
    b95e:	d00a      	beq.n	b976 <mem_manage_fault+0x4e>
    b960:	4b4b      	ldr	r3, [pc, #300]	; (ba90 <mem_manage_fault+0x168>)
    b962:	9306      	str	r3, [sp, #24]
    b964:	4847      	ldr	r0, [pc, #284]	; (ba84 <mem_manage_fault+0x15c>)
    b966:	2302      	movs	r3, #2
    b968:	aa05      	add	r2, sp, #20
    b96a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b96e:	9301      	str	r3, [sp, #4]
    b970:	9305      	str	r3, [sp, #20]
    b972:	f01e fb40 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    b976:	4b45      	ldr	r3, [pc, #276]	; (ba8c <mem_manage_fault+0x164>)
    b978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b97a:	071e      	lsls	r6, r3, #28
    b97c:	d50d      	bpl.n	b99a <mem_manage_fault+0x72>
		PR_FAULT_INFO("  Unstacking error");
    b97e:	6823      	ldr	r3, [r4, #0]
    b980:	0758      	lsls	r0, r3, #29
    b982:	d00a      	beq.n	b99a <mem_manage_fault+0x72>
    b984:	4b43      	ldr	r3, [pc, #268]	; (ba94 <mem_manage_fault+0x16c>)
    b986:	9306      	str	r3, [sp, #24]
    b988:	483e      	ldr	r0, [pc, #248]	; (ba84 <mem_manage_fault+0x15c>)
    b98a:	2302      	movs	r3, #2
    b98c:	aa05      	add	r2, sp, #20
    b98e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b992:	9301      	str	r3, [sp, #4]
    b994:	9305      	str	r3, [sp, #20]
    b996:	f01e fb2e 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b99a:	4b3c      	ldr	r3, [pc, #240]	; (ba8c <mem_manage_fault+0x164>)
    b99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b99e:	0799      	lsls	r1, r3, #30
    b9a0:	d437      	bmi.n	ba12 <mem_manage_fault+0xea>
	uint32_t mmfar = -EINVAL;
    b9a2:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    b9a6:	4b39      	ldr	r3, [pc, #228]	; (ba8c <mem_manage_fault+0x164>)
    b9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b9aa:	07d9      	lsls	r1, r3, #31
    b9ac:	d50d      	bpl.n	b9ca <mem_manage_fault+0xa2>
		PR_FAULT_INFO("  Instruction Access Violation");
    b9ae:	6823      	ldr	r3, [r4, #0]
    b9b0:	075a      	lsls	r2, r3, #29
    b9b2:	d00a      	beq.n	b9ca <mem_manage_fault+0xa2>
    b9b4:	4b38      	ldr	r3, [pc, #224]	; (ba98 <mem_manage_fault+0x170>)
    b9b6:	9306      	str	r3, [sp, #24]
    b9b8:	4832      	ldr	r0, [pc, #200]	; (ba84 <mem_manage_fault+0x15c>)
    b9ba:	2302      	movs	r3, #2
    b9bc:	aa05      	add	r2, sp, #20
    b9be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9c2:	9301      	str	r3, [sp, #4]
    b9c4:	9305      	str	r3, [sp, #20]
    b9c6:	f01e fb16 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b9ca:	4b30      	ldr	r3, [pc, #192]	; (ba8c <mem_manage_fault+0x164>)
    b9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b9ce:	069b      	lsls	r3, r3, #26
    b9d0:	d50d      	bpl.n	b9ee <mem_manage_fault+0xc6>
		PR_FAULT_INFO(
    b9d2:	6823      	ldr	r3, [r4, #0]
    b9d4:	0758      	lsls	r0, r3, #29
    b9d6:	d00a      	beq.n	b9ee <mem_manage_fault+0xc6>
    b9d8:	4b30      	ldr	r3, [pc, #192]	; (ba9c <mem_manage_fault+0x174>)
    b9da:	9306      	str	r3, [sp, #24]
    b9dc:	4829      	ldr	r0, [pc, #164]	; (ba84 <mem_manage_fault+0x15c>)
    b9de:	2302      	movs	r3, #2
    b9e0:	aa05      	add	r2, sp, #20
    b9e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9e6:	9301      	str	r3, [sp, #4]
    b9e8:	9305      	str	r3, [sp, #20]
    b9ea:	f01e fb04 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b9ee:	4b27      	ldr	r3, [pc, #156]	; (ba8c <mem_manage_fault+0x164>)
    b9f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b9f2:	06d1      	lsls	r1, r2, #27
    b9f4:	d438      	bmi.n	ba68 <mem_manage_fault+0x140>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    b9f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b9f8:	0792      	lsls	r2, r2, #30
    b9fa:	d435      	bmi.n	ba68 <mem_manage_fault+0x140>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b9fc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b9fe:	4a23      	ldr	r2, [pc, #140]	; (ba8c <mem_manage_fault+0x164>)
    ba00:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ba02:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    ba06:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    ba08:	2300      	movs	r3, #0
    ba0a:	702b      	strb	r3, [r5, #0]
}
    ba0c:	b008      	add	sp, #32
    ba0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    ba12:	6823      	ldr	r3, [r4, #0]
    ba14:	075a      	lsls	r2, r3, #29
    ba16:	d00a      	beq.n	ba2e <mem_manage_fault+0x106>
    ba18:	4b21      	ldr	r3, [pc, #132]	; (baa0 <mem_manage_fault+0x178>)
    ba1a:	9306      	str	r3, [sp, #24]
    ba1c:	4819      	ldr	r0, [pc, #100]	; (ba84 <mem_manage_fault+0x15c>)
    ba1e:	2302      	movs	r3, #2
    ba20:	aa05      	add	r2, sp, #20
    ba22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba26:	9301      	str	r3, [sp, #4]
    ba28:	9305      	str	r3, [sp, #20]
    ba2a:	f01e fae4 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    ba2e:	4b17      	ldr	r3, [pc, #92]	; (ba8c <mem_manage_fault+0x164>)
    ba30:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ba32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ba34:	061b      	lsls	r3, r3, #24
    ba36:	d5b4      	bpl.n	b9a2 <mem_manage_fault+0x7a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ba38:	6823      	ldr	r3, [r4, #0]
    ba3a:	0758      	lsls	r0, r3, #29
    ba3c:	d00b      	beq.n	ba56 <mem_manage_fault+0x12e>
    ba3e:	4b19      	ldr	r3, [pc, #100]	; (baa4 <mem_manage_fault+0x17c>)
    ba40:	4810      	ldr	r0, [pc, #64]	; (ba84 <mem_manage_fault+0x15c>)
    ba42:	e9cd 3606 	strd	r3, r6, [sp, #24]
    ba46:	aa05      	add	r2, sp, #20
    ba48:	2303      	movs	r3, #3
    ba4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ba4e:	9301      	str	r3, [sp, #4]
    ba50:	9305      	str	r3, [sp, #20]
    ba52:	f01e fad0 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    ba56:	f1b8 0f00 	cmp.w	r8, #0
    ba5a:	d0a4      	beq.n	b9a6 <mem_manage_fault+0x7e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ba5c:	4a0b      	ldr	r2, [pc, #44]	; (ba8c <mem_manage_fault+0x164>)
    ba5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ba60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ba64:	6293      	str	r3, [r2, #40]	; 0x28
    ba66:	e79e      	b.n	b9a6 <mem_manage_fault+0x7e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    ba68:	685b      	ldr	r3, [r3, #4]
    ba6a:	051b      	lsls	r3, r3, #20
    ba6c:	d5c6      	bpl.n	b9fc <mem_manage_fault+0xd4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    ba6e:	4639      	mov	r1, r7
    ba70:	4630      	mov	r0, r6
    ba72:	f7ff fdb7 	bl	b5e4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    ba76:	2800      	cmp	r0, #0
    ba78:	d0c0      	beq.n	b9fc <mem_manage_fault+0xd4>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    ba7a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    ba7e:	2002      	movs	r0, #2
    ba80:	e7bd      	b.n	b9fe <mem_manage_fault+0xd6>
    ba82:	bf00      	nop
    ba84:	20000a80 	.word	0x20000a80
    ba88:	000329dd 	.word	0x000329dd
    ba8c:	e000ed00 	.word	0xe000ed00
    ba90:	000329f3 	.word	0x000329f3
    ba94:	0003286d 	.word	0x0003286d
    ba98:	00032a54 	.word	0x00032a54
    ba9c:	000328e1 	.word	0x000328e1
    baa0:	00032a26 	.word	0x00032a26
    baa4:	00032a3e 	.word	0x00032a3e

0000baa8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    baa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    baaa:	ab0a      	add	r3, sp, #40	; 0x28
    baac:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    baae:	9302      	str	r3, [sp, #8]
    bab0:	4b05      	ldr	r3, [pc, #20]	; (bac8 <z_log_msg2_runtime_create.constprop.0+0x20>)
    bab2:	9301      	str	r3, [sp, #4]
    bab4:	2300      	movs	r3, #0
    bab6:	9300      	str	r3, [sp, #0]
    bab8:	2201      	movs	r2, #1
    baba:	4618      	mov	r0, r3
    babc:	f7fb fcc2 	bl	7444 <z_impl_z_log_msg2_runtime_vcreate>
}
    bac0:	b007      	add	sp, #28
    bac2:	f85d fb04 	ldr.w	pc, [sp], #4
    bac6:	bf00      	nop
    bac8:	00032a73 	.word	0x00032a73

0000bacc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bad0:	4b83      	ldr	r3, [pc, #524]	; (bce0 <z_arm_fault+0x214>)
    bad2:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    bad6:	b08e      	sub	sp, #56	; 0x38
    bad8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bada:	f3c8 0408 	ubfx	r4, r8, #0, #9
    bade:	2500      	movs	r5, #0
    bae0:	f385 8811 	msr	BASEPRI, r5
    bae4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    bae8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    baec:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    baf0:	d112      	bne.n	bb18 <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    baf2:	f002 030c 	and.w	r3, r2, #12
    baf6:	2b08      	cmp	r3, #8
    baf8:	d111      	bne.n	bb1e <z_arm_fault+0x52>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    bafa:	487a      	ldr	r0, [pc, #488]	; (bce4 <z_arm_fault+0x218>)
    bafc:	6803      	ldr	r3, [r0, #0]
    bafe:	f013 0707 	ands.w	r7, r3, #7
    bb02:	d00a      	beq.n	bb1a <z_arm_fault+0x4e>
    bb04:	4b78      	ldr	r3, [pc, #480]	; (bce8 <z_arm_fault+0x21c>)
    bb06:	930a      	str	r3, [sp, #40]	; 0x28
    bb08:	aa09      	add	r2, sp, #36	; 0x24
    bb0a:	2302      	movs	r3, #2
    bb0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bb10:	9305      	str	r3, [sp, #20]
    bb12:	9309      	str	r3, [sp, #36]	; 0x24
    bb14:	f01e fa6f 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	*nested_exc = false;
    bb18:	462f      	mov	r7, r5
		return NULL;
    bb1a:	463e      	mov	r6, r7
    bb1c:	e004      	b.n	bb28 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    bb1e:	0711      	lsls	r1, r2, #28
	*nested_exc = false;
    bb20:	bf4e      	itee	mi
    bb22:	462f      	movmi	r7, r5
			ptr_esf = (z_arch_esf_t *)msp;
    bb24:	4606      	movpl	r6, r0
			*nested_exc = true;
    bb26:	2701      	movpl	r7, #1
	*recoverable = false;
    bb28:	2300      	movs	r3, #0
    bb2a:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    bb2e:	1ee3      	subs	r3, r4, #3
    bb30:	2b09      	cmp	r3, #9
    bb32:	f200 80b8 	bhi.w	bca6 <z_arm_fault+0x1da>
    bb36:	e8df f003 	tbb	[pc, r3]
    bb3a:	a005      	.short	0xa005
    bb3c:	b6b69da4 	.word	0xb6b69da4
    bb40:	a8b6b6b6 	.word	0xa8b6b6b6
	PR_FAULT_INFO("***** HARD FAULT *****");
    bb44:	4d67      	ldr	r5, [pc, #412]	; (bce4 <z_arm_fault+0x218>)
    bb46:	682b      	ldr	r3, [r5, #0]
    bb48:	075a      	lsls	r2, r3, #29
    bb4a:	d00a      	beq.n	bb62 <z_arm_fault+0x96>
    bb4c:	4b67      	ldr	r3, [pc, #412]	; (bcec <z_arm_fault+0x220>)
    bb4e:	930a      	str	r3, [sp, #40]	; 0x28
    bb50:	aa09      	add	r2, sp, #36	; 0x24
    bb52:	2302      	movs	r3, #2
    bb54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bb58:	4628      	mov	r0, r5
    bb5a:	9305      	str	r3, [sp, #20]
    bb5c:	9309      	str	r3, [sp, #36]	; 0x24
    bb5e:	f01e fa4a 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bb62:	4a5f      	ldr	r2, [pc, #380]	; (bce0 <z_arm_fault+0x214>)
    bb64:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	*recoverable = false;
    bb66:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bb6a:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    bb6e:	f88d 8013 	strb.w	r8, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bb72:	d010      	beq.n	bb96 <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    bb74:	682b      	ldr	r3, [r5, #0]
    bb76:	075b      	lsls	r3, r3, #29
    bb78:	d101      	bne.n	bb7e <z_arm_fault+0xb2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    bb7a:	2400      	movs	r4, #0
    bb7c:	e01c      	b.n	bbb8 <z_arm_fault+0xec>
		PR_EXC("  Bus fault on vector table read");
    bb7e:	4b5c      	ldr	r3, [pc, #368]	; (bcf0 <z_arm_fault+0x224>)
    bb80:	930a      	str	r3, [sp, #40]	; 0x28
    bb82:	4858      	ldr	r0, [pc, #352]	; (bce4 <z_arm_fault+0x218>)
    bb84:	2302      	movs	r3, #2
    bb86:	9305      	str	r3, [sp, #20]
    bb88:	9309      	str	r3, [sp, #36]	; 0x24
    bb8a:	aa09      	add	r2, sp, #36	; 0x24
    bb8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
    bb90:	f01e fa31 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
    bb94:	e7f1      	b.n	bb7a <z_arm_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    bb96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    bb98:	2b00      	cmp	r3, #0
    bb9a:	da28      	bge.n	bbee <z_arm_fault+0x122>
		PR_EXC("  Debug event");
    bb9c:	682b      	ldr	r3, [r5, #0]
    bb9e:	075d      	lsls	r5, r3, #29
    bba0:	d0eb      	beq.n	bb7a <z_arm_fault+0xae>
    bba2:	4b54      	ldr	r3, [pc, #336]	; (bcf4 <z_arm_fault+0x228>)
    bba4:	930a      	str	r3, [sp, #40]	; 0x28
    bba6:	484f      	ldr	r0, [pc, #316]	; (bce4 <z_arm_fault+0x218>)
    bba8:	2302      	movs	r3, #2
    bbaa:	aa09      	add	r2, sp, #36	; 0x24
    bbac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bbb0:	9305      	str	r3, [sp, #20]
    bbb2:	9309      	str	r3, [sp, #36]	; 0x24
    bbb4:	f01e fa1f 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    bbb8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bbbc:	b9a3      	cbnz	r3, bbe8 <z_arm_fault+0x11c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    bbbe:	2220      	movs	r2, #32
    bbc0:	4631      	mov	r1, r6
    bbc2:	a806      	add	r0, sp, #24
    bbc4:	f01e fbca 	bl	2a35c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    bbc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bbca:	2f00      	cmp	r7, #0
    bbcc:	f000 8083 	beq.w	bcd6 <z_arm_fault+0x20a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    bbd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    bbd4:	b922      	cbnz	r2, bbe0 <z_arm_fault+0x114>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    bbd6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    bbda:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bbde:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    bbe0:	a906      	add	r1, sp, #24
    bbe2:	4620      	mov	r0, r4
    bbe4:	f7ff fb9c 	bl	b320 <z_arm_fatal_error>
}
    bbe8:	b00e      	add	sp, #56	; 0x38
    bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    bbee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    bbf0:	005c      	lsls	r4, r3, #1
    bbf2:	d5c2      	bpl.n	bb7a <z_arm_fault+0xae>
		PR_EXC("  Fault escalation (see below)");
    bbf4:	682b      	ldr	r3, [r5, #0]
    bbf6:	0758      	lsls	r0, r3, #29
    bbf8:	d00a      	beq.n	bc10 <z_arm_fault+0x144>
    bbfa:	4b3f      	ldr	r3, [pc, #252]	; (bcf8 <z_arm_fault+0x22c>)
    bbfc:	930a      	str	r3, [sp, #40]	; 0x28
    bbfe:	4839      	ldr	r0, [pc, #228]	; (bce4 <z_arm_fault+0x218>)
    bc00:	2302      	movs	r3, #2
    bc02:	aa09      	add	r2, sp, #36	; 0x24
    bc04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bc08:	9305      	str	r3, [sp, #20]
    bc0a:	9309      	str	r3, [sp, #36]	; 0x24
    bc0c:	f01e f9f3 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    bc10:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    bc12:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    bc16:	f64d 7302 	movw	r3, #57090	; 0xdf02
    bc1a:	429a      	cmp	r2, r3
    bc1c:	d00b      	beq.n	bc36 <z_arm_fault+0x16a>
		} else if (SCB_MMFSR != 0) {
    bc1e:	4b30      	ldr	r3, [pc, #192]	; (bce0 <z_arm_fault+0x214>)
    bc20:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    bc24:	b1ca      	cbz	r2, bc5a <z_arm_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
    bc26:	f10d 0213 	add.w	r2, sp, #19
    bc2a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    bc2c:	4630      	mov	r0, r6
    bc2e:	f7ff fe7b 	bl	b928 <mem_manage_fault>
    bc32:	4604      	mov	r4, r0
		break;
    bc34:	e7c0      	b.n	bbb8 <z_arm_fault+0xec>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    bc36:	682b      	ldr	r3, [r5, #0]
    bc38:	0759      	lsls	r1, r3, #29
    bc3a:	d00c      	beq.n	bc56 <z_arm_fault+0x18a>
    bc3c:	6833      	ldr	r3, [r6, #0]
    bc3e:	4a2f      	ldr	r2, [pc, #188]	; (bcfc <z_arm_fault+0x230>)
    bc40:	4828      	ldr	r0, [pc, #160]	; (bce4 <z_arm_fault+0x218>)
    bc42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    bc46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bc4a:	2303      	movs	r3, #3
    bc4c:	aa09      	add	r2, sp, #36	; 0x24
    bc4e:	9305      	str	r3, [sp, #20]
    bc50:	9309      	str	r3, [sp, #36]	; 0x24
    bc52:	f01e f9d0 	bl	29ff6 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    bc56:	6834      	ldr	r4, [r6, #0]
    bc58:	e7ae      	b.n	bbb8 <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
    bc5a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    bc5e:	b12a      	cbz	r2, bc6c <z_arm_fault+0x1a0>
			reason = bus_fault(esf, 1, recoverable);
    bc60:	f10d 0113 	add.w	r1, sp, #19
    bc64:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    bc66:	f7ff fd19 	bl	b69c <bus_fault.constprop.0>
    bc6a:	e7e2      	b.n	bc32 <z_arm_fault+0x166>
		} else if (SCB_UFSR != 0) {
    bc6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    bc6e:	b29b      	uxth	r3, r3
    bc70:	2b00      	cmp	r3, #0
    bc72:	d082      	beq.n	bb7a <z_arm_fault+0xae>
		reason = usage_fault(esf);
    bc74:	f7ff fdbe 	bl	b7f4 <usage_fault.constprop.0>
    bc78:	e7db      	b.n	bc32 <z_arm_fault+0x166>
		reason = mem_manage_fault(esf, 0, recoverable);
    bc7a:	f10d 0213 	add.w	r2, sp, #19
    bc7e:	2100      	movs	r1, #0
    bc80:	e7d4      	b.n	bc2c <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    bc82:	f10d 0113 	add.w	r1, sp, #19
    bc86:	2000      	movs	r0, #0
    bc88:	e7ed      	b.n	bc66 <z_arm_fault+0x19a>
	PR_FAULT_INFO(
    bc8a:	4816      	ldr	r0, [pc, #88]	; (bce4 <z_arm_fault+0x218>)
    bc8c:	6803      	ldr	r3, [r0, #0]
    bc8e:	075a      	lsls	r2, r3, #29
    bc90:	f43f af73 	beq.w	bb7a <z_arm_fault+0xae>
    bc94:	4b1a      	ldr	r3, [pc, #104]	; (bd00 <z_arm_fault+0x234>)
    bc96:	930a      	str	r3, [sp, #40]	; 0x28
    bc98:	2302      	movs	r3, #2
    bc9a:	9305      	str	r3, [sp, #20]
    bc9c:	9309      	str	r3, [sp, #36]	; 0x24
    bc9e:	aa09      	add	r2, sp, #36	; 0x24
    bca0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bca4:	e774      	b.n	bb90 <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
    bca6:	490f      	ldr	r1, [pc, #60]	; (bce4 <z_arm_fault+0x218>)
    bca8:	680b      	ldr	r3, [r1, #0]
    bcaa:	075b      	lsls	r3, r3, #29
    bcac:	f43f af65 	beq.w	bb7a <z_arm_fault+0xae>
    bcb0:	4a14      	ldr	r2, [pc, #80]	; (bd04 <z_arm_fault+0x238>)
    bcb2:	4b15      	ldr	r3, [pc, #84]	; (bd08 <z_arm_fault+0x23c>)
    bcb4:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    bcb8:	bf18      	it	ne
    bcba:	4613      	movne	r3, r2
    bcbc:	3c10      	subs	r4, #16
    bcbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
    bcc2:	2400      	movs	r4, #0
    bcc4:	4b11      	ldr	r3, [pc, #68]	; (bd0c <z_arm_fault+0x240>)
    bcc6:	9301      	str	r3, [sp, #4]
    bcc8:	9400      	str	r4, [sp, #0]
    bcca:	4623      	mov	r3, r4
    bccc:	2201      	movs	r2, #1
    bcce:	4620      	mov	r0, r4
    bcd0:	f7ff feea 	bl	baa8 <z_log_msg2_runtime_create.constprop.0>
    bcd4:	e770      	b.n	bbb8 <z_arm_fault+0xec>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bcd6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    bcda:	f023 0301 	bic.w	r3, r3, #1
    bcde:	e77e      	b.n	bbde <z_arm_fault+0x112>
    bce0:	e000ed00 	.word	0xe000ed00
    bce4:	20000a80 	.word	0x20000a80
    bce8:	00032ab4 	.word	0x00032ab4
    bcec:	00032adf 	.word	0x00032adf
    bcf0:	00032af6 	.word	0x00032af6
    bcf4:	00032b17 	.word	0x00032b17
    bcf8:	00032b25 	.word	0x00032b25
    bcfc:	00032b44 	.word	0x00032b44
    bd00:	00032b60 	.word	0x00032b60
    bd04:	00032a9b 	.word	0x00032a9b
    bd08:	00032a86 	.word	0x00032a86
    bd0c:	00032a73 	.word	0x00032a73

0000bd10 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    bd10:	4a02      	ldr	r2, [pc, #8]	; (bd1c <z_arm_fault_init+0xc>)
    bd12:	6953      	ldr	r3, [r2, #20]
    bd14:	f043 0310 	orr.w	r3, r3, #16
    bd18:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    bd1a:	4770      	bx	lr
    bd1c:	e000ed00 	.word	0xe000ed00

0000bd20 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    bd20:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    bd24:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    bd28:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    bd2a:	4672      	mov	r2, lr
	bl z_arm_fault
    bd2c:	f7ff fece 	bl	bacc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    bd30:	bd01      	pop	{r0, pc}
    bd32:	bf00      	nop

0000bd34 <z_arm_interrupt_init>:
    bd34:	4804      	ldr	r0, [pc, #16]	; (bd48 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    bd36:	2300      	movs	r3, #0
    bd38:	2120      	movs	r1, #32
    bd3a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    bd3c:	3301      	adds	r3, #1
    bd3e:	2b30      	cmp	r3, #48	; 0x30
    bd40:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    bd44:	d1f9      	bne.n	bd3a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    bd46:	4770      	bx	lr
    bd48:	e000e100 	.word	0xe000e100

0000bd4c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    bd4c:	f022 f8f8 	bl	2df40 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bd50:	2020      	movs	r0, #32
    msr BASEPRI, r0
    bd52:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    bd56:	480b      	ldr	r0, [pc, #44]	; (bd84 <__start+0x38>)
    ldr r1, =0xaa
    bd58:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    bd5c:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
    bd60:	f01e fb07 	bl	2a372 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    bd64:	4807      	ldr	r0, [pc, #28]	; (bd84 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    bd66:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    bd6a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    bd6c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    bd70:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    bd74:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    bd76:	4308      	orrs	r0, r1
    msr CONTROL, r0
    bd78:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    bd7c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    bd80:	f7ff fb98 	bl	b4b4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    bd84:	2000a460 	.word	0x2000a460

0000bd88 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    bd88:	4b06      	ldr	r3, [pc, #24]	; (bda4 <z_impl_k_thread_abort+0x1c>)
    bd8a:	689b      	ldr	r3, [r3, #8]
    bd8c:	4283      	cmp	r3, r0
    bd8e:	d107      	bne.n	bda0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bd90:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    bd94:	b123      	cbz	r3, bda0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bd96:	4a04      	ldr	r2, [pc, #16]	; (bda8 <z_impl_k_thread_abort+0x20>)
    bd98:	6853      	ldr	r3, [r2, #4]
    bd9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    bd9e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    bda0:	f01a b8bc 	b.w	25f1c <z_thread_abort>
    bda4:	200049f8 	.word	0x200049f8
    bda8:	e000ed00 	.word	0xe000ed00

0000bdac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    bdac:	4b02      	ldr	r3, [pc, #8]	; (bdb8 <z_arm_configure_static_mpu_regions+0xc>)
    bdae:	4a03      	ldr	r2, [pc, #12]	; (bdbc <z_arm_configure_static_mpu_regions+0x10>)
    bdb0:	4803      	ldr	r0, [pc, #12]	; (bdc0 <z_arm_configure_static_mpu_regions+0x14>)
    bdb2:	2101      	movs	r1, #1
    bdb4:	f000 b892 	b.w	bedc <arm_core_mpu_configure_static_mpu_regions>
    bdb8:	20040000 	.word	0x20040000
    bdbc:	20000000 	.word	0x20000000
    bdc0:	0002f194 	.word	0x0002f194

0000bdc4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    bdc4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    bdc8:	4b05      	ldr	r3, [pc, #20]	; (bde0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    bdca:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    bdcc:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    bdce:	4a05      	ldr	r2, [pc, #20]	; (bde4 <z_arm_configure_dynamic_mpu_regions+0x20>)
    bdd0:	2120      	movs	r1, #32
    bdd2:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    bdd6:	4618      	mov	r0, r3
    bdd8:	2101      	movs	r1, #1
    bdda:	f000 b889 	b.w	bef0 <arm_core_mpu_configure_dynamic_mpu_regions>
    bdde:	bf00      	nop
    bde0:	20002c70 	.word	0x20002c70
    bde4:	150b0000 	.word	0x150b0000

0000bde8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    bde8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    bdea:	4f2d      	ldr	r7, [pc, #180]	; (bea0 <mpu_configure_regions+0xb8>)
    bdec:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    bdee:	2600      	movs	r6, #0
    bdf0:	428e      	cmp	r6, r1
    bdf2:	db02      	blt.n	bdfa <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    bdf4:	4610      	mov	r0, r2
    bdf6:	b009      	add	sp, #36	; 0x24
    bdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    bdfa:	6844      	ldr	r4, [r0, #4]
    bdfc:	2c00      	cmp	r4, #0
    bdfe:	d04c      	beq.n	be9a <mpu_configure_regions+0xb2>
		if (do_sanity_check &&
    be00:	b1db      	cbz	r3, be3a <mpu_configure_regions+0x52>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    be02:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    be06:	ea14 0f0c 	tst.w	r4, ip
    be0a:	d010      	beq.n	be2e <mpu_configure_regions+0x46>
			LOG_ERR("Partition %u: sanity check failed.", i);
    be0c:	4825      	ldr	r0, [pc, #148]	; (bea4 <mpu_configure_regions+0xbc>)
    be0e:	6803      	ldr	r3, [r0, #0]
    be10:	075a      	lsls	r2, r3, #29
    be12:	d029      	beq.n	be68 <mpu_configure_regions+0x80>
    be14:	4b24      	ldr	r3, [pc, #144]	; (bea8 <mpu_configure_regions+0xc0>)
    be16:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    be1a:	2303      	movs	r3, #3
    be1c:	9301      	str	r3, [sp, #4]
    be1e:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    be20:	2300      	movs	r3, #0
    be22:	aa05      	add	r2, sp, #20
    be24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    be28:	f01b fd8a 	bl	27940 <z_impl_z_log_msg2_static_create>
		if (reg_index == -EINVAL) {
    be2c:	e01c      	b.n	be68 <mpu_configure_regions+0x80>
		&&
    be2e:	2c1f      	cmp	r4, #31
    be30:	d9ec      	bls.n	be0c <mpu_configure_regions+0x24>
		((part->start & (part->size - 1U)) == 0U);
    be32:	6805      	ldr	r5, [r0, #0]
		&&
    be34:	ea1c 0f05 	tst.w	ip, r5
    be38:	d1e8      	bne.n	be0c <mpu_configure_regions+0x24>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    be3a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    be3c:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    be3e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    be42:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    be44:	d913      	bls.n	be6e <mpu_configure_regions+0x86>
	if (size > (1UL << 31)) {
    be46:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    be4a:	d812      	bhi.n	be72 <mpu_configure_regions+0x8a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    be4c:	3c01      	subs	r4, #1
    be4e:	fab4 f484 	clz	r4, r4
    be52:	f1c4 041f 	rsb	r4, r4, #31
    be56:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    be58:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    be5a:	ea4c 0404 	orr.w	r4, ip, r4
    be5e:	d90e      	bls.n	be7e <mpu_configure_regions+0x96>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    be60:	4810      	ldr	r0, [pc, #64]	; (bea4 <mpu_configure_regions+0xbc>)
    be62:	6803      	ldr	r3, [r0, #0]
    be64:	075b      	lsls	r3, r3, #29
    be66:	d106      	bne.n	be76 <mpu_configure_regions+0x8e>
			return -EINVAL;
    be68:	f06f 0215 	mvn.w	r2, #21
    be6c:	e7c2      	b.n	bdf4 <mpu_configure_regions+0xc>
		return REGION_32B;
    be6e:	2408      	movs	r4, #8
    be70:	e7f2      	b.n	be58 <mpu_configure_regions+0x70>
		return REGION_4G;
    be72:	243e      	movs	r4, #62	; 0x3e
    be74:	e7f0      	b.n	be58 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    be76:	4b0d      	ldr	r3, [pc, #52]	; (beac <mpu_configure_regions+0xc4>)
    be78:	e9cd 3206 	strd	r3, r2, [sp, #24]
    be7c:	e7cd      	b.n	be1a <mpu_configure_regions+0x32>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    be7e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    be82:	4315      	orrs	r5, r2
    be84:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    be88:	f044 0401 	orr.w	r4, r4, #1
    be8c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    be90:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    be94:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    be96:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    be9a:	3601      	adds	r6, #1
    be9c:	300c      	adds	r0, #12
    be9e:	e7a7      	b.n	bdf0 <mpu_configure_regions+0x8>
    bea0:	e000ed00 	.word	0xe000ed00
    bea4:	20000a78 	.word	0x20000a78
    bea8:	00032b88 	.word	0x00032b88
    beac:	00032bab 	.word	0x00032bab

0000beb0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    beb0:	4b04      	ldr	r3, [pc, #16]	; (bec4 <arm_core_mpu_enable+0x14>)
    beb2:	2205      	movs	r2, #5
    beb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    beb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bebc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    bec0:	4770      	bx	lr
    bec2:	bf00      	nop
    bec4:	e000ed00 	.word	0xe000ed00

0000bec8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    bec8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    becc:	4b02      	ldr	r3, [pc, #8]	; (bed8 <arm_core_mpu_disable+0x10>)
    bece:	2200      	movs	r2, #0
    bed0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    bed4:	4770      	bx	lr
    bed6:	bf00      	nop
    bed8:	e000ed00 	.word	0xe000ed00

0000bedc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    bedc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    bede:	4c03      	ldr	r4, [pc, #12]	; (beec <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    bee0:	2301      	movs	r3, #1
    bee2:	7822      	ldrb	r2, [r4, #0]
    bee4:	f7ff ff80 	bl	bde8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    bee8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    beea:	bd10      	pop	{r4, pc}
    beec:	20004abf 	.word	0x20004abf

0000bef0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    bef0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    bef2:	4a09      	ldr	r2, [pc, #36]	; (bf18 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    bef4:	2300      	movs	r3, #0
    bef6:	7812      	ldrb	r2, [r2, #0]
    bef8:	f7ff ff76 	bl	bde8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    befc:	f110 0f16 	cmn.w	r0, #22
    bf00:	d003      	beq.n	bf0a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    bf02:	4b06      	ldr	r3, [pc, #24]	; (bf1c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    bf04:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    bf06:	2807      	cmp	r0, #7
    bf08:	dd00      	ble.n	bf0c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    bf0a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    bf0c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    bf10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    bf14:	3001      	adds	r0, #1
    bf16:	e7f6      	b.n	bf06 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    bf18:	20004abf 	.word	0x20004abf
    bf1c:	e000ed00 	.word	0xe000ed00

0000bf20 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    bf20:	4914      	ldr	r1, [pc, #80]	; (bf74 <z_arm_mpu_init+0x54>)
    bf22:	6808      	ldr	r0, [r1, #0]
    bf24:	2808      	cmp	r0, #8
{
    bf26:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    bf28:	d821      	bhi.n	bf6e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    bf2a:	f7ff ffcd 	bl	bec8 <arm_core_mpu_disable>
    bf2e:	4c12      	ldr	r4, [pc, #72]	; (bf78 <z_arm_mpu_init+0x58>)
    bf30:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    bf32:	2200      	movs	r2, #0
    bf34:	4290      	cmp	r0, r2
    bf36:	f101 010c 	add.w	r1, r1, #12
    bf3a:	d105      	bne.n	bf48 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    bf3c:	4b0f      	ldr	r3, [pc, #60]	; (bf7c <z_arm_mpu_init+0x5c>)
    bf3e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    bf40:	f7ff ffb6 	bl	beb0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    bf44:	2000      	movs	r0, #0
}
    bf46:	bd10      	pop	{r4, pc}
    bf48:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    bf4c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    bf50:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    bf54:	4313      	orrs	r3, r2
    bf56:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    bf5a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    bf5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bf62:	f043 0301 	orr.w	r3, r3, #1
    bf66:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    bf6a:	3201      	adds	r2, #1
    bf6c:	e7e2      	b.n	bf34 <z_arm_mpu_init+0x14>
		return -1;
    bf6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf72:	e7e8      	b.n	bf46 <z_arm_mpu_init+0x26>
    bf74:	0002f1a0 	.word	0x0002f1a0
    bf78:	e000ed00 	.word	0xe000ed00
    bf7c:	20004abf 	.word	0x20004abf

0000bf80 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    bf80:	b40c      	push	{r2, r3}
    bf82:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    bf84:	b909      	cbnz	r1, bf8a <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    bf86:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    bf8a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    bf8e:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    bf90:	9a06      	ldr	r2, [sp, #24]
    bf92:	4806      	ldr	r0, [pc, #24]	; (bfac <snprintf+0x2c>)
	va_start(vargs, format);
    bf94:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    bf96:	a902      	add	r1, sp, #8
    bf98:	f7f9 ff1a 	bl	5dd0 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    bf9c:	9b02      	ldr	r3, [sp, #8]
    bf9e:	2200      	movs	r2, #0
    bfa0:	701a      	strb	r2, [r3, #0]
	return r;
}
    bfa2:	b005      	add	sp, #20
    bfa4:	f85d eb04 	ldr.w	lr, [sp], #4
    bfa8:	b002      	add	sp, #8
    bfaa:	4770      	bx	lr
    bfac:	0002a385 	.word	0x0002a385

0000bfb0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    bfb0:	b510      	push	{r4, lr}
	__asm__ volatile(
    bfb2:	f04f 0320 	mov.w	r3, #32
    bfb6:	f3ef 8011 	mrs	r0, BASEPRI
    bfba:	f383 8812 	msr	BASEPRI_MAX, r3
    bfbe:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    bfc2:	4a11      	ldr	r2, [pc, #68]	; (c008 <nordicsemi_nrf52_init+0x58>)
    bfc4:	2301      	movs	r3, #1
    bfc6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    bfca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bfce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    bfd2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    bfd6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    bfda:	2c08      	cmp	r4, #8
    bfdc:	d108      	bne.n	bff0 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bfde:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    bfe2:	2905      	cmp	r1, #5
    bfe4:	d804      	bhi.n	bff0 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    bfe6:	4c09      	ldr	r4, [pc, #36]	; (c00c <nordicsemi_nrf52_init+0x5c>)
    bfe8:	5c61      	ldrb	r1, [r4, r1]
    bfea:	b109      	cbz	r1, bff0 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    bfec:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    bff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bff4:	2201      	movs	r2, #1
    bff6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    bffa:	f380 8811 	msr	BASEPRI, r0
    bffe:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c002:	2000      	movs	r0, #0
    c004:	bd10      	pop	{r4, pc}
    c006:	bf00      	nop
    c008:	4001e000 	.word	0x4001e000
    c00c:	00032be4 	.word	0x00032be4

0000c010 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c010:	b120      	cbz	r0, c01c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c012:	4b03      	ldr	r3, [pc, #12]	; (c020 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c014:	0180      	lsls	r0, r0, #6
    c016:	f043 0301 	orr.w	r3, r3, #1
    c01a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    c01c:	4770      	bx	lr
    c01e:	bf00      	nop
    c020:	0002e640 	.word	0x0002e640

0000c024 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    c024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c028:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    c02c:	07db      	lsls	r3, r3, #31
    c02e:	d52e      	bpl.n	c08e <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    c030:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c034:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    c038:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    c03c:	2b07      	cmp	r3, #7
    c03e:	d126      	bne.n	c08e <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    c040:	4a14      	ldr	r2, [pc, #80]	; (c094 <board_nrf52840dongle_nrf52840_init+0x70>)
    c042:	2301      	movs	r3, #1
    c044:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    c048:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    c04c:	2b00      	cmp	r3, #0
    c04e:	d0fb      	beq.n	c048 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    c050:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    c054:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    c058:	f023 0307 	bic.w	r3, r3, #7
    c05c:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    c060:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    c064:	2300      	movs	r3, #0
    c066:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    c06a:	4a0a      	ldr	r2, [pc, #40]	; (c094 <board_nrf52840dongle_nrf52840_init+0x70>)
    c06c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    c070:	2b00      	cmp	r3, #0
    c072:	d0fb      	beq.n	c06c <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    c074:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c078:	4907      	ldr	r1, [pc, #28]	; (c098 <board_nrf52840dongle_nrf52840_init+0x74>)
    c07a:	4b08      	ldr	r3, [pc, #32]	; (c09c <board_nrf52840dongle_nrf52840_init+0x78>)
    c07c:	68ca      	ldr	r2, [r1, #12]
    c07e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c082:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c084:	60cb      	str	r3, [r1, #12]
    c086:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c08a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c08c:	e7fd      	b.n	c08a <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    c08e:	2000      	movs	r0, #0
    c090:	4770      	bx	lr
    c092:	bf00      	nop
    c094:	4001e000 	.word	0x4001e000
    c098:	e000ed00 	.word	0xe000ed00
    c09c:	05fa0004 	.word	0x05fa0004

0000c0a0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    c0a0:	4b0e      	ldr	r3, [pc, #56]	; (c0dc <bt_hex_real+0x3c>)
    c0a2:	2940      	cmp	r1, #64	; 0x40
{
    c0a4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    c0a6:	bf28      	it	cs
    c0a8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    c0aa:	4c0d      	ldr	r4, [pc, #52]	; (c0e0 <bt_hex_real+0x40>)
    c0ac:	1846      	adds	r6, r0, r1
    c0ae:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    c0b0:	42b0      	cmp	r0, r6
    c0b2:	f103 0302 	add.w	r3, r3, #2
    c0b6:	d104      	bne.n	c0c2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    c0b8:	2300      	movs	r3, #0
    c0ba:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    c0be:	4807      	ldr	r0, [pc, #28]	; (c0dc <bt_hex_real+0x3c>)
    c0c0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    c0c2:	7802      	ldrb	r2, [r0, #0]
    c0c4:	0912      	lsrs	r2, r2, #4
    c0c6:	5ca2      	ldrb	r2, [r4, r2]
    c0c8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    c0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
    c0d0:	f002 020f 	and.w	r2, r2, #15
    c0d4:	5ca2      	ldrb	r2, [r4, r2]
    c0d6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    c0da:	e7e9      	b.n	c0b0 <bt_hex_real+0x10>
    c0dc:	20004ade 	.word	0x20004ade
    c0e0:	00032bea 	.word	0x00032bea

0000c0e4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    c0e4:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    c0e6:	7803      	ldrb	r3, [r0, #0]
    c0e8:	b08b      	sub	sp, #44	; 0x2c
    c0ea:	4604      	mov	r4, r0
    c0ec:	ad07      	add	r5, sp, #28
    c0ee:	2b03      	cmp	r3, #3
    c0f0:	d821      	bhi.n	c136 <bt_addr_le_str_real+0x52>
    c0f2:	e8df f003 	tbb	[pc, r3]
    c0f6:	1a02      	.short	0x1a02
    c0f8:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    c0fa:	4912      	ldr	r1, [pc, #72]	; (c144 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    c0fc:	4628      	mov	r0, r5
    c0fe:	f01e f8ad 	bl	2a25c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c102:	7863      	ldrb	r3, [r4, #1]
    c104:	9304      	str	r3, [sp, #16]
    c106:	78a3      	ldrb	r3, [r4, #2]
    c108:	9303      	str	r3, [sp, #12]
    c10a:	78e3      	ldrb	r3, [r4, #3]
    c10c:	9302      	str	r3, [sp, #8]
    c10e:	7923      	ldrb	r3, [r4, #4]
    c110:	9301      	str	r3, [sp, #4]
    c112:	7963      	ldrb	r3, [r4, #5]
    c114:	9300      	str	r3, [sp, #0]
    c116:	4a0c      	ldr	r2, [pc, #48]	; (c148 <bt_addr_le_str_real+0x64>)
    c118:	79a3      	ldrb	r3, [r4, #6]
    c11a:	9505      	str	r5, [sp, #20]
    c11c:	211e      	movs	r1, #30
    c11e:	480b      	ldr	r0, [pc, #44]	; (c14c <bt_addr_le_str_real+0x68>)
    c120:	f01a fc29 	bl	26976 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    c124:	4809      	ldr	r0, [pc, #36]	; (c14c <bt_addr_le_str_real+0x68>)
    c126:	b00b      	add	sp, #44	; 0x2c
    c128:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    c12a:	4909      	ldr	r1, [pc, #36]	; (c150 <bt_addr_le_str_real+0x6c>)
    c12c:	e7e6      	b.n	c0fc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    c12e:	4909      	ldr	r1, [pc, #36]	; (c154 <bt_addr_le_str_real+0x70>)
    c130:	e7e4      	b.n	c0fc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    c132:	4909      	ldr	r1, [pc, #36]	; (c158 <bt_addr_le_str_real+0x74>)
    c134:	e7e2      	b.n	c0fc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c136:	4a09      	ldr	r2, [pc, #36]	; (c15c <bt_addr_le_str_real+0x78>)
    c138:	210a      	movs	r1, #10
    c13a:	4628      	mov	r0, r5
    c13c:	f01a fc1b 	bl	26976 <snprintk>
		break;
    c140:	e7df      	b.n	c102 <bt_addr_le_str_real+0x1e>
    c142:	bf00      	nop
    c144:	00030950 	.word	0x00030950
    c148:	00030972 	.word	0x00030972
    c14c:	20004ac0 	.word	0x20004ac0
    c150:	00030957 	.word	0x00030957
    c154:	0003095e 	.word	0x0003095e
    c158:	00030968 	.word	0x00030968
    c15c:	000344d9 	.word	0x000344d9

0000c160 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    c160:	b570      	push	{r4, r5, r6, lr}
    c162:	4c21      	ldr	r4, [pc, #132]	; (c1e8 <le_gen_dhkey+0x88>)
    c164:	f3bf 8f5b 	dmb	ish
    c168:	6823      	ldr	r3, [r4, #0]
    c16a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    c16e:	07da      	lsls	r2, r3, #31
{
    c170:	4606      	mov	r6, r0
    c172:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    c174:	d501      	bpl.n	c17a <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    c176:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    c178:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    c17a:	2901      	cmp	r1, #1
    c17c:	d831      	bhi.n	c1e2 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c17e:	f3bf 8f5b 	dmb	ish
    c182:	e854 3f00 	ldrex	r3, [r4]
    c186:	f043 0202 	orr.w	r2, r3, #2
    c18a:	e844 2100 	strex	r1, r2, [r4]
    c18e:	2900      	cmp	r1, #0
    c190:	d1f7      	bne.n	c182 <le_gen_dhkey+0x22>
    c192:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    c196:	079b      	lsls	r3, r3, #30
    c198:	d4ed      	bmi.n	c176 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    c19a:	4814      	ldr	r0, [pc, #80]	; (c1ec <le_gen_dhkey+0x8c>)
    c19c:	4631      	mov	r1, r6
    c19e:	f01e f987 	bl	2a4b0 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    c1a2:	4813      	ldr	r0, [pc, #76]	; (c1f0 <le_gen_dhkey+0x90>)
    c1a4:	f106 0120 	add.w	r1, r6, #32
    c1a8:	f01e f982 	bl	2a4b0 <sys_memcpy_swap.constprop.0>
    c1ac:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    c1b0:	b175      	cbz	r5, c1d0 <le_gen_dhkey+0x70>
    c1b2:	e854 3f00 	ldrex	r3, [r4]
    c1b6:	f043 0304 	orr.w	r3, r3, #4
    c1ba:	e844 3200 	strex	r2, r3, [r4]
    c1be:	2a00      	cmp	r2, #0
    c1c0:	d1f7      	bne.n	c1b2 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c1c2:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    c1c6:	480b      	ldr	r0, [pc, #44]	; (c1f4 <le_gen_dhkey+0x94>)
    c1c8:	f019 f994 	bl	254f4 <z_impl_k_sem_give>
    c1cc:	2000      	movs	r0, #0
    c1ce:	e7d3      	b.n	c178 <le_gen_dhkey+0x18>
    c1d0:	e854 3f00 	ldrex	r3, [r4]
    c1d4:	f023 0304 	bic.w	r3, r3, #4
    c1d8:	e844 3200 	strex	r2, r3, [r4]
    c1dc:	2a00      	cmp	r2, #0
    c1de:	d0f0      	beq.n	c1c2 <le_gen_dhkey+0x62>
    c1e0:	e7f6      	b.n	c1d0 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    c1e2:	2012      	movs	r0, #18
    c1e4:	e7c8      	b.n	c178 <le_gen_dhkey+0x18>
    c1e6:	bf00      	nop
    c1e8:	20002c7c 	.word	0x20002c7c
    c1ec:	20004b7f 	.word	0x20004b7f
    c1f0:	20004b9f 	.word	0x20004b9f
    c1f4:	20000bf0 	.word	0x20000bf0

0000c1f8 <ecc_thread>:
{
    c1f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c1fc:	4f71      	ldr	r7, [pc, #452]	; (c3c4 <ecc_thread+0x1cc>)
	return z_impl_k_sem_take(sem, timeout);
    c1fe:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c3c8 <ecc_thread+0x1d0>
    c202:	b089      	sub	sp, #36	; 0x24
    c204:	463e      	mov	r6, r7
    c206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c20e:	4640      	mov	r0, r8
    c210:	f019 f996 	bl	25540 <z_impl_k_sem_take>
    c214:	f3bf 8f5b 	dmb	ish
    c218:	683d      	ldr	r5, [r7, #0]
    c21a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    c21e:	f015 0501 	ands.w	r5, r5, #1
    c222:	d063      	beq.n	c2ec <ecc_thread+0xf4>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    c224:	f8df 91a4 	ldr.w	r9, [pc, #420]	; c3cc <ecc_thread+0x1d4>
    c228:	4c69      	ldr	r4, [pc, #420]	; (c3d0 <ecc_thread+0x1d8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    c22a:	4d6a      	ldr	r5, [pc, #424]	; (c3d4 <ecc_thread+0x1dc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    c22c:	486a      	ldr	r0, [pc, #424]	; (c3d8 <ecc_thread+0x1e0>)
    c22e:	464a      	mov	r2, r9
    c230:	4621      	mov	r1, r4
    c232:	f01c fde3 	bl	28dfc <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    c236:	4603      	mov	r3, r0
    c238:	b980      	cbnz	r0, c25c <ecc_thread+0x64>
			BT_ERR("Failed to create ECC public/private pair");
    c23a:	4868      	ldr	r0, [pc, #416]	; (c3dc <ecc_thread+0x1e4>)
    c23c:	6802      	ldr	r2, [r0, #0]
    c23e:	0752      	lsls	r2, r2, #29
    c240:	d009      	beq.n	c256 <ecc_thread+0x5e>
    c242:	4a67      	ldr	r2, [pc, #412]	; (c3e0 <ecc_thread+0x1e8>)
    c244:	9206      	str	r2, [sp, #24]
    c246:	2202      	movs	r2, #2
    c248:	9201      	str	r2, [sp, #4]
    c24a:	9205      	str	r2, [sp, #20]
    c24c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c250:	aa05      	add	r2, sp, #20
    c252:	f01b fb75 	bl	27940 <z_impl_z_log_msg2_static_create>
			return BT_HCI_ERR_UNSPECIFIED;
    c256:	f04f 091f 	mov.w	r9, #31
    c25a:	e008      	b.n	c26e <ecc_thread+0x76>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    c25c:	2220      	movs	r2, #32
    c25e:	4629      	mov	r1, r5
    c260:	4620      	mov	r0, r4
    c262:	f01e f852 	bl	2a30a <memcmp>
    c266:	2800      	cmp	r0, #0
    c268:	d0e0      	beq.n	c22c <ecc_thread+0x34>
	return 0;
    c26a:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c26e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c276:	2001      	movs	r0, #1
    c278:	f000 f97e 	bl	c578 <bt_buf_get_rx>
    c27c:	f100 0508 	add.w	r5, r0, #8
    c280:	2102      	movs	r1, #2
    c282:	4604      	mov	r4, r0
    c284:	4628      	mov	r0, r5
    c286:	f020 fbd2 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    c28a:	233e      	movs	r3, #62	; 0x3e
    c28c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    c28e:	2342      	movs	r3, #66	; 0x42
    c290:	7043      	strb	r3, [r0, #1]
    c292:	2101      	movs	r1, #1
    c294:	4628      	mov	r0, r5
    c296:	f020 fbca 	bl	2ca2e <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    c29a:	2308      	movs	r3, #8
    c29c:	7003      	strb	r3, [r0, #0]
    c29e:	2141      	movs	r1, #65	; 0x41
    c2a0:	4628      	mov	r0, r5
    c2a2:	f020 fbc4 	bl	2ca2e <net_buf_simple_add>
    c2a6:	4605      	mov	r5, r0
	evt->status = status;
    c2a8:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    c2ac:	f1b9 0f00 	cmp.w	r9, #0
    c2b0:	d013      	beq.n	c2da <ecc_thread+0xe2>
		(void)memset(evt->key, 0, sizeof(evt->key));
    c2b2:	2240      	movs	r2, #64	; 0x40
    c2b4:	2100      	movs	r1, #0
    c2b6:	f01e f85c 	bl	2a372 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c2ba:	f3bf 8f5b 	dmb	ish
    c2be:	e856 3f00 	ldrex	r3, [r6]
    c2c2:	f023 0301 	bic.w	r3, r3, #1
    c2c6:	e846 3200 	strex	r2, r3, [r6]
    c2ca:	2a00      	cmp	r2, #0
    c2cc:	d1f7      	bne.n	c2be <ecc_thread+0xc6>
    c2ce:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    c2d2:	4620      	mov	r0, r4
	bt_recv(buf);
    c2d4:	f001 fb9c 	bl	da10 <bt_recv>
	while (true) {
    c2d8:	e795      	b.n	c206 <ecc_thread+0xe>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    c2da:	493f      	ldr	r1, [pc, #252]	; (c3d8 <ecc_thread+0x1e0>)
    c2dc:	f01e f8e8 	bl	2a4b0 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    c2e0:	3120      	adds	r1, #32
    c2e2:	f105 0021 	add.w	r0, r5, #33	; 0x21
    c2e6:	f01e f8e3 	bl	2a4b0 <sys_memcpy_swap.constprop.0>
    c2ea:	e7e6      	b.n	c2ba <ecc_thread+0xc2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c2ec:	f3bf 8f5b 	dmb	ish
    c2f0:	683b      	ldr	r3, [r7, #0]
    c2f2:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    c2f6:	079b      	lsls	r3, r3, #30
    c2f8:	d585      	bpl.n	c206 <ecc_thread+0xe>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    c2fa:	4934      	ldr	r1, [pc, #208]	; (c3cc <ecc_thread+0x1d4>)
    c2fc:	4836      	ldr	r0, [pc, #216]	; (c3d8 <ecc_thread+0x1e0>)
    c2fe:	f01d fc36 	bl	29b6e <uECC_valid_public_key>
	if (ret < 0) {
    c302:	1e03      	subs	r3, r0, #0
    c304:	da44      	bge.n	c390 <ecc_thread+0x198>
		BT_ERR("public key is not valid (ret %d)", ret);
    c306:	4835      	ldr	r0, [pc, #212]	; (c3dc <ecc_thread+0x1e4>)
    c308:	6804      	ldr	r4, [r0, #0]
    c30a:	f014 0407 	ands.w	r4, r4, #7
    c30e:	d00c      	beq.n	c32a <ecc_thread+0x132>
    c310:	4a34      	ldr	r2, [pc, #208]	; (c3e4 <ecc_thread+0x1ec>)
    c312:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c316:	2303      	movs	r3, #3
    c318:	9301      	str	r3, [sp, #4]
    c31a:	9305      	str	r3, [sp, #20]
    c31c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c320:	462b      	mov	r3, r5
    c322:	aa05      	add	r2, sp, #20
		ret = TC_CRYPTO_FAIL;
    c324:	462c      	mov	r4, r5
    c326:	f01b fb0b 	bl	27940 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c32a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c32e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c332:	2001      	movs	r0, #1
    c334:	f000 f920 	bl	c578 <bt_buf_get_rx>
    c338:	f100 0908 	add.w	r9, r0, #8
    c33c:	2102      	movs	r1, #2
    c33e:	4605      	mov	r5, r0
    c340:	4648      	mov	r0, r9
    c342:	f020 fb74 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    c346:	233e      	movs	r3, #62	; 0x3e
    c348:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    c34a:	2322      	movs	r3, #34	; 0x22
    c34c:	7043      	strb	r3, [r0, #1]
    c34e:	2101      	movs	r1, #1
    c350:	4648      	mov	r0, r9
    c352:	f020 fb6c 	bl	2ca2e <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    c356:	2309      	movs	r3, #9
    c358:	7003      	strb	r3, [r0, #0]
    c35a:	2121      	movs	r1, #33	; 0x21
    c35c:	4648      	mov	r0, r9
    c35e:	f020 fb66 	bl	2ca2e <net_buf_simple_add>
    c362:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    c364:	3001      	adds	r0, #1
    c366:	bb34      	cbnz	r4, c3b6 <ecc_thread+0x1be>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    c368:	221f      	movs	r2, #31
    c36a:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    c36c:	21ff      	movs	r1, #255	; 0xff
    c36e:	2220      	movs	r2, #32
    c370:	f01d ffff 	bl	2a372 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c374:	f3bf 8f5b 	dmb	ish
    c378:	e856 3f00 	ldrex	r3, [r6]
    c37c:	f023 0302 	bic.w	r3, r3, #2
    c380:	e846 3200 	strex	r2, r3, [r6]
    c384:	2a00      	cmp	r2, #0
    c386:	d1f7      	bne.n	c378 <ecc_thread+0x180>
    c388:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    c38c:	4628      	mov	r0, r5
    c38e:	e7a1      	b.n	c2d4 <ecc_thread+0xdc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c390:	f3bf 8f5b 	dmb	ish
    c394:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
    c396:	490e      	ldr	r1, [pc, #56]	; (c3d0 <ecc_thread+0x1d8>)
    c398:	480e      	ldr	r0, [pc, #56]	; (c3d4 <ecc_thread+0x1dc>)
    c39a:	f3bf 8f5b 	dmb	ish
    c39e:	f013 0f04 	tst.w	r3, #4
    c3a2:	f101 0220 	add.w	r2, r1, #32
    c3a6:	4b09      	ldr	r3, [pc, #36]	; (c3cc <ecc_thread+0x1d4>)
    c3a8:	bf18      	it	ne
    c3aa:	4601      	movne	r1, r0
    c3ac:	4610      	mov	r0, r2
    c3ae:	f01c fd74 	bl	28e9a <uECC_shared_secret>
    c3b2:	4604      	mov	r4, r0
    c3b4:	e7b9      	b.n	c32a <ecc_thread+0x132>
		evt->status = 0U;
    c3b6:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    c3b8:	4907      	ldr	r1, [pc, #28]	; (c3d8 <ecc_thread+0x1e0>)
		evt->status = 0U;
    c3ba:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    c3bc:	f01e f878 	bl	2a4b0 <sys_memcpy_swap.constprop.0>
    c3c0:	e7d8      	b.n	c374 <ecc_thread+0x17c>
    c3c2:	bf00      	nop
    c3c4:	20002c7c 	.word	0x20002c7c
    c3c8:	20000bf0 	.word	0x20000bf0
    c3cc:	0002f1c0 	.word	0x0002f1c0
    c3d0:	20004b5f 	.word	0x20004b5f
    c3d4:	00032c5e 	.word	0x00032c5e
    c3d8:	20004b7f 	.word	0x20004b7f
    c3dc:	20000a4c 	.word	0x20000a4c
    c3e0:	00032c02 	.word	0x00032c02
    c3e4:	00032c2b 	.word	0x00032c2b

0000c3e8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    c3e8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c3ea:	7d06      	ldrb	r6, [r0, #20]
    c3ec:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    c3ee:	b976      	cbnz	r6, c40e <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    c3f0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    c3f2:	881d      	ldrh	r5, [r3, #0]
    c3f4:	f242 0226 	movw	r2, #8230	; 0x2026
    c3f8:	4295      	cmp	r5, r2
    c3fa:	d045      	beq.n	c488 <bt_hci_ecc_send+0xa0>
    c3fc:	d80f      	bhi.n	c41e <bt_hci_ecc_send+0x36>
    c3fe:	f242 0201 	movw	r2, #8193	; 0x2001
    c402:	4295      	cmp	r5, r2
    c404:	d04f      	beq.n	c4a6 <bt_hci_ecc_send+0xbe>
    c406:	f242 0325 	movw	r3, #8229	; 0x2025
    c40a:	429d      	cmp	r5, r3
    c40c:	d013      	beq.n	c436 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    c40e:	4b2a      	ldr	r3, [pc, #168]	; (c4b8 <bt_hci_ecc_send+0xd0>)
    c410:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    c414:	4620      	mov	r0, r4
    c416:	691b      	ldr	r3, [r3, #16]
}
    c418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    c41c:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    c41e:	f242 035e 	movw	r3, #8286	; 0x205e
    c422:	429d      	cmp	r5, r3
    c424:	d1f3      	bne.n	c40e <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    c426:	2103      	movs	r1, #3
    c428:	3008      	adds	r0, #8
    c42a:	f020 fb29 	bl	2ca80 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    c42e:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    c430:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    c434:	e02e      	b.n	c494 <bt_hci_ecc_send+0xac>
    c436:	2103      	movs	r1, #3
    c438:	3008      	adds	r0, #8
    c43a:	f020 fb21 	bl	2ca80 <net_buf_simple_pull>
	net_buf_unref(buf);
    c43e:	4620      	mov	r0, r4
    c440:	f014 fbf2 	bl	20c28 <net_buf_unref>
    c444:	f3bf 8f5b 	dmb	ish
    c448:	4b1c      	ldr	r3, [pc, #112]	; (c4bc <bt_hci_ecc_send+0xd4>)
    c44a:	681a      	ldr	r2, [r3, #0]
    c44c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    c450:	0792      	lsls	r2, r2, #30
    c452:	d507      	bpl.n	c464 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    c454:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    c456:	4631      	mov	r1, r6
    c458:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    c45c:	f01e f804 	bl	2a468 <send_cmd_status>
}
    c460:	2000      	movs	r0, #0
    c462:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c464:	f3bf 8f5b 	dmb	ish
    c468:	e853 2f00 	ldrex	r2, [r3]
    c46c:	f042 0101 	orr.w	r1, r2, #1
    c470:	e843 1000 	strex	r0, r1, [r3]
    c474:	2800      	cmp	r0, #0
    c476:	d1f7      	bne.n	c468 <bt_hci_ecc_send+0x80>
    c478:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    c47c:	07d3      	lsls	r3, r2, #31
    c47e:	d4e9      	bmi.n	c454 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    c480:	480f      	ldr	r0, [pc, #60]	; (c4c0 <bt_hci_ecc_send+0xd8>)
    c482:	f019 f837 	bl	254f4 <z_impl_k_sem_give>
}
    c486:	e7e6      	b.n	c456 <bt_hci_ecc_send+0x6e>
    c488:	2103      	movs	r1, #3
    c48a:	3008      	adds	r0, #8
    c48c:	f020 faf8 	bl	2ca80 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    c490:	68a0      	ldr	r0, [r4, #8]
    c492:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    c494:	f7ff fe64 	bl	c160 <le_gen_dhkey>
    c498:	4606      	mov	r6, r0
	net_buf_unref(buf);
    c49a:	4620      	mov	r0, r4
    c49c:	f014 fbc4 	bl	20c28 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    c4a0:	4631      	mov	r1, r6
    c4a2:	4628      	mov	r0, r5
    c4a4:	e7da      	b.n	c45c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    c4a6:	78da      	ldrb	r2, [r3, #3]
    c4a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c4ac:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    c4ae:	791a      	ldrb	r2, [r3, #4]
    c4b0:	f022 0201 	bic.w	r2, r2, #1
    c4b4:	711a      	strb	r2, [r3, #4]
}
    c4b6:	e7aa      	b.n	c40e <bt_hci_ecc_send+0x26>
    c4b8:	20000000 	.word	0x20000000
    c4bc:	20002c7c 	.word	0x20002c7c
    c4c0:	20000bf0 	.word	0x20000bf0

0000c4c4 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    c4c4:	b510      	push	{r4, lr}
    c4c6:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c4c8:	4c0c      	ldr	r4, [pc, #48]	; (c4fc <bt_hci_ecc_init+0x38>)
    c4ca:	490d      	ldr	r1, [pc, #52]	; (c500 <bt_hci_ecc_init+0x3c>)
    c4cc:	2200      	movs	r2, #0
    c4ce:	2300      	movs	r3, #0
    c4d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c4d4:	2300      	movs	r3, #0
    c4d6:	220a      	movs	r2, #10
    c4d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    c4dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c4e0:	9300      	str	r3, [sp, #0]
    c4e2:	f44f 628f 	mov.w	r2, #1144	; 0x478
    c4e6:	4b07      	ldr	r3, [pc, #28]	; (c504 <bt_hci_ecc_init+0x40>)
    c4e8:	4620      	mov	r0, r4
    c4ea:	f018 fe6f 	bl	251cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    c4ee:	4906      	ldr	r1, [pc, #24]	; (c508 <bt_hci_ecc_init+0x44>)
    c4f0:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    c4f2:	b008      	add	sp, #32
    c4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4f8:	f018 bdb6 	b.w	25068 <z_impl_k_thread_name_set>
    c4fc:	20001978 	.word	0x20001978
    c500:	20008c00 	.word	0x20008c00
    c504:	0000c1f9 	.word	0x0000c1f9
    c508:	00032c4c 	.word	0x00032c4c

0000c50c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    c50c:	b430      	push	{r4, r5}
    c50e:	4603      	mov	r3, r0
    c510:	4608      	mov	r0, r1
	switch (src->type) {
    c512:	781a      	ldrb	r2, [r3, #0]
    c514:	2a01      	cmp	r2, #1
    c516:	d013      	beq.n	c540 <uuid_to_uuid128+0x34>
    c518:	2a02      	cmp	r2, #2
    c51a:	d026      	beq.n	c56a <CONFIG_USB_DEVICE_VID+0x17>
    c51c:	b972      	cbnz	r2, c53c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    c51e:	4a15      	ldr	r2, [pc, #84]	; (c574 <CONFIG_USB_DEVICE_VID+0x21>)
    c520:	f102 0410 	add.w	r4, r2, #16
    c524:	f852 5b04 	ldr.w	r5, [r2], #4
    c528:	f841 5b04 	str.w	r5, [r1], #4
    c52c:	42a2      	cmp	r2, r4
    c52e:	d1f9      	bne.n	c524 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    c530:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    c532:	7812      	ldrb	r2, [r2, #0]
    c534:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    c536:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    c538:	0a1b      	lsrs	r3, r3, #8
    c53a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    c53c:	bc30      	pop	{r4, r5}
    c53e:	4770      	bx	lr
		*dst = uuid128_base;
    c540:	4a0c      	ldr	r2, [pc, #48]	; (c574 <CONFIG_USB_DEVICE_VID+0x21>)
    c542:	f102 0410 	add.w	r4, r2, #16
    c546:	f852 5b04 	ldr.w	r5, [r2], #4
    c54a:	f841 5b04 	str.w	r5, [r1], #4
    c54e:	42a2      	cmp	r2, r4
    c550:	d1f9      	bne.n	c546 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    c552:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    c554:	7812      	ldrb	r2, [r2, #0]
    c556:	700a      	strb	r2, [r1, #0]
    c558:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    c55c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    c55e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c560:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    c562:	0a1b      	lsrs	r3, r3, #8
    c564:	7382      	strb	r2, [r0, #14]
    c566:	7403      	strb	r3, [r0, #16]
}
    c568:	e7e8      	b.n	c53c <uuid_to_uuid128+0x30>
}
    c56a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    c56c:	2211      	movs	r2, #17
    c56e:	4619      	mov	r1, r3
    c570:	f01d bef4 	b.w	2a35c <memcpy>
    c574:	00032c7e 	.word	0x00032c7e

0000c578 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    c578:	b538      	push	{r3, r4, r5, lr}
    c57a:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    c57c:	4805      	ldr	r0, [pc, #20]	; (c594 <bt_buf_get_rx+0x1c>)
    c57e:	f020 f9ee 	bl	2c95e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c582:	4604      	mov	r4, r0
    c584:	b120      	cbz	r0, c590 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    c586:	2100      	movs	r1, #0
    c588:	3008      	adds	r0, #8
    c58a:	f020 fa0d 	bl	2c9a8 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c58e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c590:	4620      	mov	r0, r4
    c592:	bd38      	pop	{r3, r4, r5, pc}
    c594:	20000d60 	.word	0x20000d60

0000c598 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c598:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    c59a:	490b      	ldr	r1, [pc, #44]	; (c5c8 <bt_buf_get_cmd_complete+0x30>)
{
    c59c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    c59e:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
    c5a2:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    c5a4:	b920      	cbnz	r0, c5b0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    c5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c5aa:	2001      	movs	r0, #1
    c5ac:	f7ff bfe4 	b.w	c578 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    c5b0:	f020 fa0b 	bl	2c9ca <net_buf_ref>
    c5b4:	2301      	movs	r3, #1
		buf->len = 0U;
    c5b6:	2100      	movs	r1, #0
    c5b8:	7503      	strb	r3, [r0, #20]
    c5ba:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    c5bc:	4604      	mov	r4, r0
    c5be:	3008      	adds	r0, #8
    c5c0:	f020 f9f2 	bl	2c9a8 <net_buf_simple_reserve>
}
    c5c4:	4620      	mov	r0, r4
    c5c6:	bd10      	pop	{r4, pc}
    c5c8:	20000000 	.word	0x20000000

0000c5cc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    c5cc:	b570      	push	{r4, r5, r6, lr}
    c5ce:	4604      	mov	r4, r0
	switch (evt) {
    c5d0:	2c0f      	cmp	r4, #15
{
    c5d2:	460d      	mov	r5, r1
    c5d4:	4610      	mov	r0, r2
    c5d6:	4619      	mov	r1, r3
	switch (evt) {
    c5d8:	d805      	bhi.n	c5e6 <bt_buf_get_evt+0x1a>
    c5da:	2c0d      	cmp	r4, #13
    c5dc:	d912      	bls.n	c604 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    c5de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    c5e2:	f7ff bfd9 	b.w	c598 <bt_buf_get_cmd_complete>
	switch (evt) {
    c5e6:	2c13      	cmp	r4, #19
    c5e8:	d10c      	bne.n	c604 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    c5ea:	480b      	ldr	r0, [pc, #44]	; (c618 <bt_buf_get_evt+0x4c>)
    c5ec:	f020 f9b7 	bl	2c95e <net_buf_alloc_fixed>
			if (buf) {
    c5f0:	4604      	mov	r4, r0
    c5f2:	b128      	cbz	r0, c600 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    c5f4:	2100      	movs	r1, #0
    c5f6:	3008      	adds	r0, #8
    c5f8:	f020 f9d6 	bl	2c9a8 <net_buf_simple_reserve>
    c5fc:	2301      	movs	r3, #1
    c5fe:	7523      	strb	r3, [r4, #20]
}
    c600:	4620      	mov	r0, r4
    c602:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    c604:	4602      	mov	r2, r0
    c606:	460b      	mov	r3, r1
		if (discardable) {
    c608:	b10d      	cbz	r5, c60e <bt_buf_get_evt+0x42>
    c60a:	4804      	ldr	r0, [pc, #16]	; (c61c <bt_buf_get_evt+0x50>)
    c60c:	e7ee      	b.n	c5ec <bt_buf_get_evt+0x20>
}
    c60e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c612:	2001      	movs	r0, #1
    c614:	f7ff bfb0 	b.w	c578 <bt_buf_get_rx>
    c618:	20000d8c 	.word	0x20000d8c
    c61c:	20000cdc 	.word	0x20000cdc

0000c620 <ver_str>:
{
    c620:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    c622:	4d0b      	ldr	r5, [pc, #44]	; (c650 <ver_str+0x30>)
{
    c624:	4606      	mov	r6, r0
	const char * const str[] = {
    c626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    c628:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    c62a:	ac01      	add	r4, sp, #4
    c62c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c62e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    c636:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    c638:	682b      	ldr	r3, [r5, #0]
    c63a:	6023      	str	r3, [r4, #0]
		return str[ver];
    c63c:	bf9b      	ittet	ls
    c63e:	ab0e      	addls	r3, sp, #56	; 0x38
    c640:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    c644:	4803      	ldrhi	r0, [pc, #12]	; (c654 <ver_str+0x34>)
		return str[ver];
    c646:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
    c64a:	b00e      	add	sp, #56	; 0x38
    c64c:	bd70      	pop	{r4, r5, r6, pc}
    c64e:	bf00      	nop
    c650:	0002e580 	.word	0x0002e580
    c654:	00032d85 	.word	0x00032d85

0000c658 <hci_disconn_complete_prio>:
{
    c658:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    c65a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    c65c:	781a      	ldrb	r2, [r3, #0]
    c65e:	b972      	cbnz	r2, c67e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c660:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    c664:	4620      	mov	r0, r4
    c666:	f002 ff6b 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    c66a:	4605      	mov	r5, r0
    c66c:	b940      	cbnz	r0, c680 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    c66e:	4b08      	ldr	r3, [pc, #32]	; (c690 <hci_disconn_complete_prio+0x38>)
    c670:	881a      	ldrh	r2, [r3, #0]
    c672:	b922      	cbnz	r2, c67e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    c674:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    c678:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    c67c:	8018      	strh	r0, [r3, #0]
}
    c67e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    c680:	2101      	movs	r1, #1
    c682:	f002 ff65 	bl	f550 <bt_conn_set_state>
	bt_conn_unref(conn);
    c686:	4628      	mov	r0, r5
}
    c688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    c68c:	f01e b9d5 	b.w	2aa3a <bt_conn_unref>
    c690:	20004a56 	.word	0x20004a56

0000c694 <hci_data_buf_overflow>:
{
    c694:	b500      	push	{lr}
    c696:	4603      	mov	r3, r0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    c698:	480a      	ldr	r0, [pc, #40]	; (c6c4 <hci_data_buf_overflow+0x30>)
    c69a:	6802      	ldr	r2, [r0, #0]
    c69c:	f012 0f06 	tst.w	r2, #6
{
    c6a0:	b089      	sub	sp, #36	; 0x24
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    c6a2:	d00c      	beq.n	c6be <hci_data_buf_overflow+0x2a>
    c6a4:	689b      	ldr	r3, [r3, #8]
    c6a6:	4a08      	ldr	r2, [pc, #32]	; (c6c8 <hci_data_buf_overflow+0x34>)
    c6a8:	781b      	ldrb	r3, [r3, #0]
    c6aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c6ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c6b2:	2303      	movs	r3, #3
    c6b4:	aa05      	add	r2, sp, #20
    c6b6:	9301      	str	r3, [sp, #4]
    c6b8:	9305      	str	r3, [sp, #20]
    c6ba:	f01d ffaa 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    c6be:	b009      	add	sp, #36	; 0x24
    c6c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c6c4:	20000a48 	.word	0x20000a48
    c6c8:	00032d8d 	.word	0x00032d8d

0000c6cc <le_conn_update_complete>:
{
    c6cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    c6ce:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    c6d0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    c6d4:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    c6d6:	4630      	mov	r0, r6
    c6d8:	f002 ff32 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    c6dc:	4604      	mov	r4, r0
    c6de:	b980      	cbnz	r0, c702 <le_conn_update_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    c6e0:	4826      	ldr	r0, [pc, #152]	; (c77c <le_conn_update_complete+0xb0>)
    c6e2:	6803      	ldr	r3, [r0, #0]
    c6e4:	075a      	lsls	r2, r3, #29
    c6e6:	d00a      	beq.n	c6fe <le_conn_update_complete+0x32>
    c6e8:	4b25      	ldr	r3, [pc, #148]	; (c780 <le_conn_update_complete+0xb4>)
    c6ea:	aa05      	add	r2, sp, #20
    c6ec:	e9cd 3606 	strd	r3, r6, [sp, #24]
    c6f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c6f4:	2303      	movs	r3, #3
    c6f6:	9301      	str	r3, [sp, #4]
    c6f8:	9305      	str	r3, [sp, #20]
    c6fa:	f01d ff8a 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    c6fe:	b008      	add	sp, #32
    c700:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    c702:	782b      	ldrb	r3, [r5, #0]
    c704:	b9cb      	cbnz	r3, c73a <le_conn_update_complete+0x6e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    c706:	792a      	ldrb	r2, [r5, #4]
    c708:	78eb      	ldrb	r3, [r5, #3]
    c70a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c70e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    c712:	79aa      	ldrb	r2, [r5, #6]
    c714:	796b      	ldrb	r3, [r5, #5]
    c716:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c71a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    c71e:	79eb      	ldrb	r3, [r5, #7]
    c720:	7a2a      	ldrb	r2, [r5, #8]
    c722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c726:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    c72a:	f003 f86d 	bl	f808 <notify_le_param_updated>
	bt_conn_unref(conn);
    c72e:	4620      	mov	r0, r4
}
    c730:	b008      	add	sp, #32
    c732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    c736:	f01e b980 	b.w	2aa3a <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    c73a:	2b1a      	cmp	r3, #26
    c73c:	d1f7      	bne.n	c72e <le_conn_update_complete+0x62>
    c73e:	78c3      	ldrb	r3, [r0, #3]
    c740:	2b01      	cmp	r3, #1
    c742:	d1f4      	bne.n	c72e <le_conn_update_complete+0x62>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    c744:	f44f 6180 	mov.w	r1, #1024	; 0x400
    c748:	3004      	adds	r0, #4
    c74a:	f01d ff53 	bl	2a5f4 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    c74e:	0543      	lsls	r3, r0, #21
    c750:	d4ed      	bmi.n	c72e <le_conn_update_complete+0x62>
		param.interval_min = conn->le.interval_min;
    c752:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    c756:	f8ad 3008 	strh.w	r3, [sp, #8]
		param.interval_max = conn->le.interval_max;
    c75a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    c75e:	f8ad 300a 	strh.w	r3, [sp, #10]
		param.latency = conn->le.pending_latency;
    c762:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    c766:	f8ad 300c 	strh.w	r3, [sp, #12]
		bt_l2cap_update_conn_param(conn, &param);
    c76a:	a902      	add	r1, sp, #8
		param.timeout = conn->le.pending_timeout;
    c76c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    c770:	f8ad 300e 	strh.w	r3, [sp, #14]
		bt_l2cap_update_conn_param(conn, &param);
    c774:	4620      	mov	r0, r4
    c776:	f003 fe03 	bl	10380 <bt_l2cap_update_conn_param>
    c77a:	e7d8      	b.n	c72e <le_conn_update_complete+0x62>
    c77c:	20000a48 	.word	0x20000a48
    c780:	00032db5 	.word	0x00032db5

0000c784 <hci_hardware_error>:
{
    c784:	b500      	push	{lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    c786:	2101      	movs	r1, #1
    c788:	b089      	sub	sp, #36	; 0x24
    c78a:	3008      	adds	r0, #8
    c78c:	f020 f980 	bl	2ca90 <net_buf_simple_pull_mem>
    c790:	4603      	mov	r3, r0
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    c792:	4809      	ldr	r0, [pc, #36]	; (c7b8 <hci_hardware_error+0x34>)
    c794:	6802      	ldr	r2, [r0, #0]
    c796:	0752      	lsls	r2, r2, #29
    c798:	d00b      	beq.n	c7b2 <hci_hardware_error+0x2e>
    c79a:	781b      	ldrb	r3, [r3, #0]
    c79c:	4a07      	ldr	r2, [pc, #28]	; (c7bc <hci_hardware_error+0x38>)
    c79e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c7a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c7a6:	2303      	movs	r3, #3
    c7a8:	aa05      	add	r2, sp, #20
    c7aa:	9301      	str	r3, [sp, #4]
    c7ac:	9305      	str	r3, [sp, #20]
    c7ae:	f01d ff30 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    c7b2:	b009      	add	sp, #36	; 0x24
    c7b4:	f85d fb04 	ldr.w	pc, [sp], #4
    c7b8:	20000a48 	.word	0x20000a48
    c7bc:	00032dd9 	.word	0x00032dd9

0000c7c0 <le_data_len_change>:
{
    c7c0:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c7c2:	6883      	ldr	r3, [r0, #8]
    c7c4:	881c      	ldrh	r4, [r3, #0]
{
    c7c6:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    c7c8:	4620      	mov	r0, r4
    c7ca:	f002 feb9 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    c7ce:	b980      	cbnz	r0, c7f2 <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    c7d0:	480a      	ldr	r0, [pc, #40]	; (c7fc <le_data_len_change+0x3c>)
    c7d2:	6803      	ldr	r3, [r0, #0]
    c7d4:	075b      	lsls	r3, r3, #29
    c7d6:	d00a      	beq.n	c7ee <le_data_len_change+0x2e>
    c7d8:	4b09      	ldr	r3, [pc, #36]	; (c800 <le_data_len_change+0x40>)
    c7da:	aa05      	add	r2, sp, #20
    c7dc:	e9cd 3406 	strd	r3, r4, [sp, #24]
    c7e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c7e4:	2303      	movs	r3, #3
    c7e6:	9301      	str	r3, [sp, #4]
    c7e8:	9305      	str	r3, [sp, #20]
    c7ea:	f01d ff12 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    c7ee:	b008      	add	sp, #32
    c7f0:	bd10      	pop	{r4, pc}
    c7f2:	b008      	add	sp, #32
    c7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    c7f8:	f01e b91f 	b.w	2aa3a <bt_conn_unref>
    c7fc:	20000a48 	.word	0x20000a48
    c800:	00032db5 	.word	0x00032db5

0000c804 <hci_vendor_event>:
{
    c804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    c806:	4c0a      	ldr	r4, [pc, #40]	; (c830 <hci_vendor_event+0x2c>)
    c808:	6823      	ldr	r3, [r4, #0]
    c80a:	f013 0f06 	tst.w	r3, #6
    c80e:	d00d      	beq.n	c82c <hci_vendor_event+0x28>
    c810:	8981      	ldrh	r1, [r0, #12]
    c812:	6880      	ldr	r0, [r0, #8]
    c814:	f7ff fc44 	bl	c0a0 <bt_hex_real>
    c818:	4b06      	ldr	r3, [pc, #24]	; (c834 <hci_vendor_event+0x30>)
    c81a:	9301      	str	r3, [sp, #4]
    c81c:	2300      	movs	r3, #0
    c81e:	9002      	str	r0, [sp, #8]
    c820:	9300      	str	r3, [sp, #0]
    c822:	2202      	movs	r2, #2
    c824:	4621      	mov	r1, r4
    c826:	4618      	mov	r0, r3
    c828:	f01d fef6 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
}
    c82c:	b004      	add	sp, #16
    c82e:	bd10      	pop	{r4, pc}
    c830:	20000a48 	.word	0x20000a48
    c834:	00032dfb 	.word	0x00032dfb

0000c838 <handle_event>:
{
    c838:	b5f0      	push	{r4, r5, r6, r7, lr}
    c83a:	b089      	sub	sp, #36	; 0x24
    c83c:	4604      	mov	r4, r0
    c83e:	af06      	add	r7, sp, #24
    c840:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    c842:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    c846:	7811      	ldrb	r1, [r2, #0]
    c848:	42a1      	cmp	r1, r4
    c84a:	d019      	beq.n	c880 <handle_event+0x48>
	for (i = 0; i < num_handlers; i++) {
    c84c:	3208      	adds	r2, #8
    c84e:	4293      	cmp	r3, r2
    c850:	d1f9      	bne.n	c846 <handle_event+0xe>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    c852:	4d1a      	ldr	r5, [pc, #104]	; (c8bc <handle_event+0x84>)
    c854:	682b      	ldr	r3, [r5, #0]
    c856:	f013 0f06 	tst.w	r3, #6
    c85a:	d029      	beq.n	c8b0 <handle_event+0x78>
    c85c:	8986      	ldrh	r6, [r0, #12]
    c85e:	6880      	ldr	r0, [r0, #8]
    c860:	4631      	mov	r1, r6
    c862:	f7ff fc1d 	bl	c0a0 <bt_hex_real>
    c866:	4b16      	ldr	r3, [pc, #88]	; (c8c0 <handle_event+0x88>)
    c868:	9301      	str	r3, [sp, #4]
    c86a:	2300      	movs	r3, #0
    c86c:	e9cd 6003 	strd	r6, r0, [sp, #12]
    c870:	9402      	str	r4, [sp, #8]
    c872:	9300      	str	r3, [sp, #0]
    c874:	2202      	movs	r2, #2
    c876:	4629      	mov	r1, r5
    c878:	4618      	mov	r0, r3
    c87a:	f01d fecd 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
    c87e:	e017      	b.n	c8b0 <handle_event+0x78>
		if (buf->len < handler->min_len) {
    c880:	8983      	ldrh	r3, [r0, #12]
    c882:	7851      	ldrb	r1, [r2, #1]
    c884:	4299      	cmp	r1, r3
    c886:	d916      	bls.n	c8b6 <handle_event+0x7e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    c888:	480c      	ldr	r0, [pc, #48]	; (c8bc <handle_event+0x84>)
    c88a:	6802      	ldr	r2, [r0, #0]
    c88c:	0752      	lsls	r2, r2, #29
    c88e:	d00f      	beq.n	c8b0 <handle_event+0x78>
    c890:	490c      	ldr	r1, [pc, #48]	; (c8c4 <handle_event+0x8c>)
    c892:	466d      	mov	r5, sp
    c894:	b088      	sub	sp, #32
    c896:	aa06      	add	r2, sp, #24
    c898:	e9c2 1304 	strd	r1, r3, [r2, #16]
    c89c:	2304      	movs	r3, #4
    c89e:	6194      	str	r4, [r2, #24]
    c8a0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c8a4:	f842 3f0c 	str.w	r3, [r2, #12]!
    c8a8:	607b      	str	r3, [r7, #4]
    c8aa:	f01d feb2 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    c8ae:	46ad      	mov	sp, r5
}
    c8b0:	370c      	adds	r7, #12
    c8b2:	46bd      	mov	sp, r7
    c8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		handler->handler(buf);
    c8b6:	6853      	ldr	r3, [r2, #4]
    c8b8:	4798      	blx	r3
		return;
    c8ba:	e7f9      	b.n	c8b0 <handle_event+0x78>
    c8bc:	20000a48 	.word	0x20000a48
    c8c0:	00032e41 	.word	0x00032e41
    c8c4:	00032e1f 	.word	0x00032e1f

0000c8c8 <hci_le_meta_event>:
{
    c8c8:	b510      	push	{r4, lr}
    c8ca:	2101      	movs	r1, #1
    c8cc:	4604      	mov	r4, r0
    c8ce:	3008      	adds	r0, #8
    c8d0:	f020 f8de 	bl	2ca90 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c8d4:	4621      	mov	r1, r4
    c8d6:	4a03      	ldr	r2, [pc, #12]	; (c8e4 <hci_le_meta_event+0x1c>)
    c8d8:	7800      	ldrb	r0, [r0, #0]
}
    c8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c8de:	230b      	movs	r3, #11
    c8e0:	f7ff bfaa 	b.w	c838 <handle_event>
    c8e4:	0002f2a0 	.word	0x0002f2a0

0000c8e8 <hci_cmd_done>:
{
    c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8ec:	b083      	sub	sp, #12
    c8ee:	4680      	mov	r8, r0
    c8f0:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c8f2:	7990      	ldrb	r0, [r2, #6]
    c8f4:	f8df 9158 	ldr.w	r9, [pc, #344]	; ca50 <hci_cmd_done+0x168>
{
    c8f8:	460e      	mov	r6, r1
    c8fa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c8fc:	f014 f8d0 	bl	20aa0 <net_buf_pool_get>
    c900:	4581      	cmp	r9, r0
    c902:	d025      	beq.n	c950 <hci_cmd_done+0x68>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    c904:	4e53      	ldr	r6, [pc, #332]	; (ca54 <hci_cmd_done+0x16c>)
    c906:	6833      	ldr	r3, [r6, #0]
    c908:	f013 0f06 	tst.w	r3, #6
    c90c:	d01c      	beq.n	c948 <hci_cmd_done+0x60>
    c90e:	79a0      	ldrb	r0, [r4, #6]
    c910:	f014 f8c6 	bl	20aa0 <net_buf_pool_get>
    c914:	46ea      	mov	sl, sp
    c916:	b08a      	sub	sp, #40	; 0x28
    c918:	4b4f      	ldr	r3, [pc, #316]	; (ca58 <hci_cmd_done+0x170>)
    c91a:	79a0      	ldrb	r0, [r4, #6]
    c91c:	466d      	mov	r5, sp
    c91e:	e9c5 3804 	strd	r3, r8, [r5, #16]
    c922:	61a8      	str	r0, [r5, #24]
    c924:	f014 f8bc 	bl	20aa0 <net_buf_pool_get>
    c928:	79a0      	ldrb	r0, [r4, #6]
    c92a:	f014 f8b9 	bl	20aa0 <net_buf_pool_get>
    c92e:	462a      	mov	r2, r5
    c930:	2306      	movs	r3, #6
    c932:	e9c5 0907 	strd	r0, r9, [r5, #28]
    c936:	f842 3f0c 	str.w	r3, [r2, #12]!
    c93a:	607b      	str	r3, [r7, #4]
    c93c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    c940:	4630      	mov	r0, r6
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    c942:	f01d fe66 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    c946:	46d5      	mov	sp, sl
}
    c948:	370c      	adds	r7, #12
    c94a:	46bd      	mov	sp, r7
    c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (cmd(buf)->opcode != opcode) {
    c950:	4620      	mov	r0, r4
    c952:	f014 f8ad 	bl	20ab0 <net_buf_id>
    c956:	4d41      	ldr	r5, [pc, #260]	; (ca5c <hci_cmd_done+0x174>)
    c958:	f04f 0b0c 	mov.w	fp, #12
    c95c:	fb0b 5000 	mla	r0, fp, r0, r5
    c960:	8843      	ldrh	r3, [r0, #2]
    c962:	4543      	cmp	r3, r8
    c964:	d022      	beq.n	c9ac <hci_cmd_done+0xc4>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    c966:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ca54 <hci_cmd_done+0x16c>
    c96a:	f8d9 3000 	ldr.w	r3, [r9]
    c96e:	f013 0f06 	tst.w	r3, #6
    c972:	d0e9      	beq.n	c948 <hci_cmd_done+0x60>
    c974:	4620      	mov	r0, r4
    c976:	f014 f89b 	bl	20ab0 <net_buf_id>
    c97a:	46ea      	mov	sl, sp
    c97c:	4b38      	ldr	r3, [pc, #224]	; (ca60 <hci_cmd_done+0x178>)
    c97e:	b088      	sub	sp, #32
    c980:	466e      	mov	r6, sp
    c982:	e9c6 3804 	strd	r3, r8, [r6, #16]
    c986:	4620      	mov	r0, r4
    c988:	f014 f892 	bl	20ab0 <net_buf_id>
    c98c:	4620      	mov	r0, r4
    c98e:	f014 f88f 	bl	20ab0 <net_buf_id>
    c992:	fb0b 5500 	mla	r5, fp, r0, r5
    c996:	4632      	mov	r2, r6
    c998:	886b      	ldrh	r3, [r5, #2]
    c99a:	61b3      	str	r3, [r6, #24]
    c99c:	2304      	movs	r3, #4
    c99e:	f842 3f0c 	str.w	r3, [r2, #12]!
    c9a2:	607b      	str	r3, [r7, #4]
    c9a4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    c9a8:	4648      	mov	r0, r9
    c9aa:	e7ca      	b.n	c942 <hci_cmd_done+0x5a>
	if (bt_dev.sent_cmd) {
    c9ac:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ca64 <hci_cmd_done+0x17c>
    c9b0:	f8d8 0138 	ldr.w	r0, [r8, #312]	; 0x138
    c9b4:	b120      	cbz	r0, c9c0 <hci_cmd_done+0xd8>
		net_buf_unref(bt_dev.sent_cmd);
    c9b6:	f014 f937 	bl	20c28 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    c9ba:	2300      	movs	r3, #0
    c9bc:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    c9c0:	4620      	mov	r0, r4
    c9c2:	f014 f875 	bl	20ab0 <net_buf_id>
    c9c6:	f04f 080c 	mov.w	r8, #12
    c9ca:	fb08 5000 	mla	r0, r8, r0, r5
    c9ce:	6843      	ldr	r3, [r0, #4]
    c9d0:	b1b3      	cbz	r3, ca00 <hci_cmd_done+0x118>
    c9d2:	b9ae      	cbnz	r6, ca00 <hci_cmd_done+0x118>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    c9d4:	4620      	mov	r0, r4
    c9d6:	f014 f86b 	bl	20ab0 <net_buf_id>
    c9da:	fb08 5000 	mla	r0, r8, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    c9de:	2301      	movs	r3, #1
    c9e0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c9e4:	e9dc 2000 	ldrd	r2, r0, [ip]
    c9e8:	f000 011f 	and.w	r1, r0, #31
    c9ec:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
    c9f0:	f89c 3008 	ldrb.w	r3, [ip, #8]
    c9f4:	0940      	lsrs	r0, r0, #5
    c9f6:	b1e3      	cbz	r3, ca32 <hci_cmd_done+0x14a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c9f8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c9fc:	f01d fdfa 	bl	2a5f4 <atomic_or>
	if (cmd(buf)->sync) {
    ca00:	4620      	mov	r0, r4
    ca02:	f014 f855 	bl	20ab0 <net_buf_id>
    ca06:	f04f 080c 	mov.w	r8, #12
    ca0a:	fb08 5000 	mla	r0, r8, r0, r5
    ca0e:	6883      	ldr	r3, [r0, #8]
    ca10:	2b00      	cmp	r3, #0
    ca12:	d099      	beq.n	c948 <hci_cmd_done+0x60>
		cmd(buf)->status = status;
    ca14:	4620      	mov	r0, r4
    ca16:	f014 f84b 	bl	20ab0 <net_buf_id>
    ca1a:	fb08 f000 	mul.w	r0, r8, r0
    ca1e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    ca20:	4620      	mov	r0, r4
    ca22:	f014 f845 	bl	20ab0 <net_buf_id>
    ca26:	fb08 5500 	mla	r5, r8, r0, r5
    ca2a:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    ca2c:	f018 fd62 	bl	254f4 <z_impl_k_sem_give>
}
    ca30:	e78a      	b.n	c948 <hci_cmd_done+0x60>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ca32:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ca34:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    ca38:	f3bf 8f5b 	dmb	ish
    ca3c:	e852 1f00 	ldrex	r1, [r2]
    ca40:	4019      	ands	r1, r3
    ca42:	e842 1000 	strex	r0, r1, [r2]
    ca46:	2800      	cmp	r0, #0
    ca48:	d1f8      	bne.n	ca3c <hci_cmd_done+0x154>
    ca4a:	f3bf 8f5b 	dmb	ish
    ca4e:	e7d7      	b.n	ca00 <hci_cmd_done+0x118>
    ca50:	20000d34 	.word	0x20000d34
    ca54:	20000a48 	.word	0x20000a48
    ca58:	00032e63 	.word	0x00032e63
    ca5c:	20002c84 	.word	0x20002c84
    ca60:	00032e98 	.word	0x00032e98
    ca64:	20000000 	.word	0x20000000

0000ca68 <hci_cmd_status>:
{
    ca68:	b538      	push	{r3, r4, r5, lr}
    ca6a:	2104      	movs	r1, #4
    ca6c:	4604      	mov	r4, r0
    ca6e:	3008      	adds	r0, #8
    ca70:	f020 f80e 	bl	2ca90 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    ca74:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    ca76:	7801      	ldrb	r1, [r0, #0]
    ca78:	8840      	ldrh	r0, [r0, #2]
    ca7a:	4622      	mov	r2, r4
    ca7c:	f7ff ff34 	bl	c8e8 <hci_cmd_done>
	if (ncmd) {
    ca80:	b125      	cbz	r5, ca8c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    ca82:	4803      	ldr	r0, [pc, #12]	; (ca90 <hci_cmd_status+0x28>)
}
    ca84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ca88:	f018 bd34 	b.w	254f4 <z_impl_k_sem_give>
    ca8c:	bd38      	pop	{r3, r4, r5, pc}
    ca8e:	bf00      	nop
    ca90:	20000120 	.word	0x20000120

0000ca94 <hci_cmd_complete>:
{
    ca94:	b538      	push	{r3, r4, r5, lr}
    ca96:	2103      	movs	r1, #3
    ca98:	4604      	mov	r4, r0
    ca9a:	3008      	adds	r0, #8
    ca9c:	f01f fff8 	bl	2ca90 <net_buf_simple_pull_mem>
	status = buf->data[0];
    caa0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    caa2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    caa4:	7819      	ldrb	r1, [r3, #0]
    caa6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    caaa:	4622      	mov	r2, r4
    caac:	f7ff ff1c 	bl	c8e8 <hci_cmd_done>
	if (ncmd) {
    cab0:	b125      	cbz	r5, cabc <hci_cmd_complete+0x28>
    cab2:	4803      	ldr	r0, [pc, #12]	; (cac0 <hci_cmd_complete+0x2c>)
}
    cab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cab8:	f018 bd1c 	b.w	254f4 <z_impl_k_sem_give>
    cabc:	bd38      	pop	{r3, r4, r5, pc}
    cabe:	bf00      	nop
    cac0:	20000120 	.word	0x20000120

0000cac4 <hci_tx_thread>:
{
    cac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    cac8:	f8df 9174 	ldr.w	r9, [pc, #372]	; cc40 <hci_tx_thread+0x17c>
		BT_ASSERT(err == 0);
    cacc:	f8df a174 	ldr.w	sl, [pc, #372]	; cc44 <hci_tx_thread+0x180>
{
    cad0:	b089      	sub	sp, #36	; 0x24
		events[0].state = K_POLL_STATE_NOT_READY;
    cad2:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    cad6:	485c      	ldr	r0, [pc, #368]	; (cc48 <hci_tx_thread+0x184>)
		events[0].state = K_POLL_STATE_NOT_READY;
    cad8:	f36f 3352 	bfc	r3, #13, #6
    cadc:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    cae0:	f002 fcfa 	bl	f4d8 <bt_conn_prepare_events>
    cae4:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    cae6:	4856      	ldr	r0, [pc, #344]	; (cc40 <hci_tx_thread+0x17c>)
    cae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    caec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    caf0:	4631      	mov	r1, r6
    caf2:	f019 fc8d 	bl	26410 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    caf6:	b160      	cbz	r0, cb12 <hci_tx_thread+0x4e>
    caf8:	4954      	ldr	r1, [pc, #336]	; (cc4c <hci_tx_thread+0x188>)
    cafa:	4855      	ldr	r0, [pc, #340]	; (cc50 <hci_tx_thread+0x18c>)
    cafc:	f640 1393 	movw	r3, #2451	; 0x993
    cb00:	4652      	mov	r2, sl
    cb02:	f019 ff2b 	bl	2695c <printk>
    cb06:	4040      	eors	r0, r0
    cb08:	f380 8811 	msr	BASEPRI, r0
    cb0c:	f04f 0003 	mov.w	r0, #3
    cb10:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    cb12:	4d50      	ldr	r5, [pc, #320]	; (cc54 <hci_tx_thread+0x190>)
{
    cb14:	f8df 8128 	ldr.w	r8, [pc, #296]	; cc40 <hci_tx_thread+0x17c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    cb18:	4f4f      	ldr	r7, [pc, #316]	; (cc58 <hci_tx_thread+0x194>)
    cb1a:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
    cb1e:	b916      	cbnz	r6, cb26 <hci_tx_thread+0x62>
	z_impl_k_yield();
    cb20:	f019 f944 	bl	25dac <z_impl_k_yield>
	while (1) {
    cb24:	e7d5      	b.n	cad2 <hci_tx_thread+0xe>
		switch (ev->state) {
    cb26:	f8d8 300c 	ldr.w	r3, [r8, #12]
    cb2a:	f3c3 3345 	ubfx	r3, r3, #13, #6
    cb2e:	2b01      	cmp	r3, #1
    cb30:	d969      	bls.n	cc06 <hci_tx_thread+0x142>
    cb32:	2b04      	cmp	r3, #4
    cb34:	d173      	bne.n	cc1e <hci_tx_thread+0x15a>
			if (ev->tag == BT_EVENT_CMD_TX) {
    cb36:	f898 300c 	ldrb.w	r3, [r8, #12]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d167      	bne.n	cc0e <hci_tx_thread+0x14a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    cb3e:	4847      	ldr	r0, [pc, #284]	; (cc5c <hci_tx_thread+0x198>)
    cb40:	2200      	movs	r2, #0
    cb42:	2300      	movs	r3, #0
    cb44:	f01f ff10 	bl	2c968 <net_buf_get>
	BT_ASSERT(buf);
    cb48:	4604      	mov	r4, r0
    cb4a:	b960      	cbnz	r0, cb66 <hci_tx_thread+0xa2>
    cb4c:	4944      	ldr	r1, [pc, #272]	; (cc60 <hci_tx_thread+0x19c>)
    cb4e:	4840      	ldr	r0, [pc, #256]	; (cc50 <hci_tx_thread+0x18c>)
    cb50:	f640 132a 	movw	r3, #2346	; 0x92a
    cb54:	4652      	mov	r2, sl
    cb56:	f019 ff01 	bl	2695c <printk>
    cb5a:	4040      	eors	r0, r0
    cb5c:	f380 8811 	msr	BASEPRI, r0
    cb60:	f04f 0003 	mov.w	r0, #3
    cb64:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    cb66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cb6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cb6e:	4658      	mov	r0, fp
    cb70:	f018 fce6 	bl	25540 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    cb74:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
    cb78:	b1a3      	cbz	r3, cba4 <hci_tx_thread+0xe0>
		BT_ERR("Uncleared pending sent_cmd");
    cb7a:	683b      	ldr	r3, [r7, #0]
    cb7c:	075a      	lsls	r2, r3, #29
    cb7e:	d00a      	beq.n	cb96 <hci_tx_thread+0xd2>
    cb80:	4b38      	ldr	r3, [pc, #224]	; (cc64 <hci_tx_thread+0x1a0>)
    cb82:	9306      	str	r3, [sp, #24]
    cb84:	aa05      	add	r2, sp, #20
    cb86:	2302      	movs	r3, #2
    cb88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cb8c:	4638      	mov	r0, r7
    cb8e:	9301      	str	r3, [sp, #4]
    cb90:	9305      	str	r3, [sp, #20]
    cb92:	f01d fd3e 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    cb96:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    cb9a:	f014 f845 	bl	20c28 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    cb9e:	2300      	movs	r3, #0
    cba0:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    cba4:	4620      	mov	r0, r4
    cba6:	f01f ff10 	bl	2c9ca <net_buf_ref>
    cbaa:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
		return bt_hci_ecc_send(buf);
    cbae:	4620      	mov	r0, r4
    cbb0:	f7ff fc1a 	bl	c3e8 <bt_hci_ecc_send>
	if (err) {
    cbb4:	b338      	cbz	r0, cc06 <hci_tx_thread+0x142>
		BT_ERR("Unable to send to driver (err %d)", err);
    cbb6:	683b      	ldr	r3, [r7, #0]
    cbb8:	075b      	lsls	r3, r3, #29
    cbba:	d00b      	beq.n	cbd4 <hci_tx_thread+0x110>
    cbbc:	4b2a      	ldr	r3, [pc, #168]	; (cc68 <hci_tx_thread+0x1a4>)
    cbbe:	aa05      	add	r2, sp, #20
    cbc0:	e9cd 3006 	strd	r3, r0, [sp, #24]
    cbc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cbc8:	2303      	movs	r3, #3
    cbca:	4638      	mov	r0, r7
    cbcc:	9301      	str	r3, [sp, #4]
    cbce:	9305      	str	r3, [sp, #20]
    cbd0:	f01d fd1f 	bl	2a612 <z_log_msg2_static_create.constprop.0>
	z_impl_k_sem_give(sem);
    cbd4:	4825      	ldr	r0, [pc, #148]	; (cc6c <hci_tx_thread+0x1a8>)
    cbd6:	f018 fc8d 	bl	254f4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    cbda:	4620      	mov	r0, r4
    cbdc:	f013 ff68 	bl	20ab0 <net_buf_id>
    cbe0:	4b23      	ldr	r3, [pc, #140]	; (cc70 <hci_tx_thread+0x1ac>)
    cbe2:	220c      	movs	r2, #12
    cbe4:	fb02 3000 	mla	r0, r2, r0, r3
    cbe8:	211f      	movs	r1, #31
    cbea:	8840      	ldrh	r0, [r0, #2]
    cbec:	4622      	mov	r2, r4
    cbee:	f7ff fe7b 	bl	c8e8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    cbf2:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    cbf6:	f014 f817 	bl	20c28 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    cbfa:	2300      	movs	r3, #0
		net_buf_unref(buf);
    cbfc:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    cbfe:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
    cc02:	f014 f811 	bl	20c28 <net_buf_unref>
	for (; count; ev++, count--) {
    cc06:	f108 0814 	add.w	r8, r8, #20
    cc0a:	3e01      	subs	r6, #1
    cc0c:	e787      	b.n	cb1e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    cc0e:	2b01      	cmp	r3, #1
    cc10:	d1f9      	bne.n	cc06 <hci_tx_thread+0x142>
					conn = CONTAINER_OF(ev->fifo,
    cc12:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    cc16:	3838      	subs	r0, #56	; 0x38
    cc18:	f003 f948 	bl	feac <bt_conn_process_tx>
    cc1c:	e7f3      	b.n	cc06 <hci_tx_thread+0x142>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    cc1e:	683a      	ldr	r2, [r7, #0]
    cc20:	f012 0f06 	tst.w	r2, #6
    cc24:	d0ef      	beq.n	cc06 <hci_tx_thread+0x142>
    cc26:	4a13      	ldr	r2, [pc, #76]	; (cc74 <hci_tx_thread+0x1b0>)
    cc28:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		switch (ev->state) {
    cc2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    cc30:	4638      	mov	r0, r7
    cc32:	2303      	movs	r3, #3
    cc34:	aa05      	add	r2, sp, #20
    cc36:	9301      	str	r3, [sp, #4]
    cc38:	9305      	str	r3, [sp, #20]
    cc3a:	f01d fcea 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    cc3e:	e7e2      	b.n	cc06 <hci_tx_thread+0x142>
    cc40:	20000338 	.word	0x20000338
    cc44:	00032ecb 	.word	0x00032ecb
    cc48:	2000034c 	.word	0x2000034c
    cc4c:	00032eff 	.word	0x00032eff
    cc50:	00032f08 	.word	0x00032f08
    cc54:	20000000 	.word	0x20000000
    cc58:	20000a48 	.word	0x20000a48
    cc5c:	2000013c 	.word	0x2000013c
    cc60:	00032c92 	.word	0x00032c92
    cc64:	00032f25 	.word	0x00032f25
    cc68:	00032f40 	.word	0x00032f40
    cc6c:	20000120 	.word	0x20000120
    cc70:	20002c84 	.word	0x20002c84
    cc74:	00032f62 	.word	0x00032f62

0000cc78 <hci_num_completed_packets>:
{
    cc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    cc7c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    cc7e:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    cc82:	4f3f      	ldr	r7, [pc, #252]	; (cd80 <hci_num_completed_packets+0x108>)
{
    cc84:	b088      	sub	sp, #32
			tx->pending_no_cb = 0U;
    cc86:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
    cc88:	f898 3000 	ldrb.w	r3, [r8]
    cc8c:	429d      	cmp	r5, r3
    cc8e:	db02      	blt.n	cc96 <hci_num_completed_packets+0x1e>
}
    cc90:	b008      	add	sp, #32
    cc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    cc96:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    cc9a:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    cc9e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    cca2:	4650      	mov	r0, sl
    cca4:	f002 fc4c 	bl	f540 <bt_conn_lookup_handle>
		if (!conn) {
    cca8:	4604      	mov	r4, r0
    ccaa:	b1d8      	cbz	r0, cce4 <hci_num_completed_packets+0x6c>
			k_work_submit(&conn->tx_complete_work);
    ccac:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    ccb0:	2e00      	cmp	r6, #0
    ccb2:	d043      	beq.n	cd3c <hci_num_completed_packets+0xc4>
	__asm__ volatile(
    ccb4:	f04f 0320 	mov.w	r3, #32
    ccb8:	f3ef 8211 	mrs	r2, BASEPRI
    ccbc:	f383 8812 	msr	BASEPRI_MAX, r3
    ccc0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ccc4:	69e3      	ldr	r3, [r4, #28]
    ccc6:	b1f3      	cbz	r3, cd06 <hci_num_completed_packets+0x8e>
				conn->pending_no_cb--;
    ccc8:	3b01      	subs	r3, #1
    ccca:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    cccc:	f382 8811 	msr	BASEPRI, r2
    ccd0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    ccd4:	4620      	mov	r0, r4
    ccd6:	f002 faad 	bl	f234 <bt_conn_get_pkts>
    ccda:	3e01      	subs	r6, #1
    ccdc:	f018 fc0a 	bl	254f4 <z_impl_k_sem_give>
    cce0:	b2b6      	uxth	r6, r6
    cce2:	e7e5      	b.n	ccb0 <hci_num_completed_packets+0x38>
			BT_ERR("No connection for handle %u", handle);
    cce4:	683b      	ldr	r3, [r7, #0]
    cce6:	075a      	lsls	r2, r3, #29
    cce8:	d00b      	beq.n	cd02 <hci_num_completed_packets+0x8a>
    ccea:	4b26      	ldr	r3, [pc, #152]	; (cd84 <hci_num_completed_packets+0x10c>)
    ccec:	aa05      	add	r2, sp, #20
    ccee:	e9cd 3a06 	strd	r3, sl, [sp, #24]
    ccf2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ccf6:	2303      	movs	r3, #3
    ccf8:	4638      	mov	r0, r7
    ccfa:	9301      	str	r3, [sp, #4]
    ccfc:	9305      	str	r3, [sp, #20]
    ccfe:	f01d fc88 	bl	2a612 <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
    cd02:	3501      	adds	r5, #1
    cd04:	e7c0      	b.n	cc88 <hci_num_completed_packets+0x10>
	return list->head;
    cd06:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    cd08:	b12b      	cbz	r3, cd16 <hci_num_completed_packets+0x9e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cd0a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    cd0c:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    cd0e:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cd10:	428b      	cmp	r3, r1
	list->tail = node;
    cd12:	bf08      	it	eq
    cd14:	61a0      	streq	r0, [r4, #24]
    cd16:	f382 8811 	msr	BASEPRI, r2
    cd1a:	f3bf 8f6f 	isb	sy
			if (!node) {
    cd1e:	b98b      	cbnz	r3, cd44 <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
    cd20:	683b      	ldr	r3, [r7, #0]
    cd22:	075b      	lsls	r3, r3, #29
    cd24:	d00a      	beq.n	cd3c <hci_num_completed_packets+0xc4>
    cd26:	4b18      	ldr	r3, [pc, #96]	; (cd88 <hci_num_completed_packets+0x110>)
    cd28:	9306      	str	r3, [sp, #24]
    cd2a:	aa05      	add	r2, sp, #20
    cd2c:	2302      	movs	r3, #2
    cd2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cd32:	4638      	mov	r0, r7
    cd34:	9301      	str	r3, [sp, #4]
    cd36:	9305      	str	r3, [sp, #20]
    cd38:	f01d fc6b 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
    cd3c:	4620      	mov	r0, r4
    cd3e:	f01d fe7c 	bl	2aa3a <bt_conn_unref>
    cd42:	e7de      	b.n	cd02 <hci_num_completed_packets+0x8a>
	__asm__ volatile(
    cd44:	f04f 0220 	mov.w	r2, #32
    cd48:	f3ef 8111 	mrs	r1, BASEPRI
    cd4c:	f382 8812 	msr	BASEPRI_MAX, r2
    cd50:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    cd54:	68da      	ldr	r2, [r3, #12]
    cd56:	61e2      	str	r2, [r4, #28]
	return list->tail;
    cd58:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    cd5a:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    cd5e:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    cd62:	b94a      	cbnz	r2, cd78 <hci_num_completed_packets+0x100>
	list->head = node;
    cd64:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    cd68:	f381 8811 	msr	BASEPRI, r1
    cd6c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    cd70:	4650      	mov	r0, sl
    cd72:	f018 fd2b 	bl	257cc <k_work_submit>
    cd76:	e7ad      	b.n	ccd4 <hci_num_completed_packets+0x5c>
	parent->next = child;
    cd78:	6013      	str	r3, [r2, #0]
	list->tail = node;
    cd7a:	6263      	str	r3, [r4, #36]	; 0x24
}
    cd7c:	e7f4      	b.n	cd68 <hci_num_completed_packets+0xf0>
    cd7e:	bf00      	nop
    cd80:	20000a48 	.word	0x20000a48
    cd84:	00032f83 	.word	0x00032f83
    cd88:	00032f9f 	.word	0x00032f9f

0000cd8c <hci_disconn_complete>:
{
    cd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    cd8e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    cd90:	7835      	ldrb	r5, [r6, #0]
{
    cd92:	b089      	sub	sp, #36	; 0x24
	if (evt->status) {
    cd94:	b9ad      	cbnz	r5, cdc2 <hci_disconn_complete+0x36>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cd96:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    cd9a:	4638      	mov	r0, r7
    cd9c:	f002 fbd0 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    cda0:	4604      	mov	r4, r0
    cda2:	b980      	cbnz	r0, cdc6 <hci_disconn_complete+0x3a>
		BT_ERR("Unable to look up conn with handle %u", handle);
    cda4:	4816      	ldr	r0, [pc, #88]	; (ce00 <hci_disconn_complete+0x74>)
    cda6:	6803      	ldr	r3, [r0, #0]
    cda8:	075a      	lsls	r2, r3, #29
    cdaa:	d00a      	beq.n	cdc2 <hci_disconn_complete+0x36>
    cdac:	4b15      	ldr	r3, [pc, #84]	; (ce04 <hci_disconn_complete+0x78>)
    cdae:	aa05      	add	r2, sp, #20
    cdb0:	e9cd 3706 	strd	r3, r7, [sp, #24]
    cdb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cdb8:	2303      	movs	r3, #3
    cdba:	9301      	str	r3, [sp, #4]
    cdbc:	9305      	str	r3, [sp, #20]
    cdbe:	f01d fc28 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    cdc2:	b009      	add	sp, #36	; 0x24
    cdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
    cdc6:	78f3      	ldrb	r3, [r6, #3]
    cdc8:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    cdca:	4629      	mov	r1, r5
    cdcc:	f002 fbc0 	bl	f550 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    cdd0:	78a3      	ldrb	r3, [r4, #2]
    cdd2:	2b01      	cmp	r3, #1
    cdd4:	d005      	beq.n	cde2 <hci_disconn_complete+0x56>
	bt_conn_unref(conn);
    cdd6:	4620      	mov	r0, r4
}
    cdd8:	b009      	add	sp, #36	; 0x24
    cdda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    cdde:	f01d be2c 	b.w	2aa3a <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cde2:	f3bf 8f5b 	dmb	ish
    cde6:	6863      	ldr	r3, [r4, #4]
    cde8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    cdec:	07db      	lsls	r3, r3, #31
    cdee:	d5f2      	bpl.n	cdd6 <hci_disconn_complete+0x4a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    cdf0:	4620      	mov	r0, r4
    cdf2:	2102      	movs	r1, #2
    cdf4:	f002 fbac 	bl	f550 <bt_conn_set_state>
		bt_le_scan_update(false);
    cdf8:	4628      	mov	r0, r5
    cdfa:	f001 fe0d 	bl	ea18 <bt_le_scan_update>
    cdfe:	e7ea      	b.n	cdd6 <hci_disconn_complete+0x4a>
    ce00:	20000a48 	.word	0x20000a48
    ce04:	00032fb6 	.word	0x00032fb6

0000ce08 <bt_hci_cmd_state_set_init>:
{
    ce08:	b510      	push	{r4, lr}
	state->bit = bit;
    ce0a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    ce0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ce12:	720b      	strb	r3, [r1, #8]
{
    ce14:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    ce16:	f013 fe4b 	bl	20ab0 <net_buf_id>
    ce1a:	4b03      	ldr	r3, [pc, #12]	; (ce28 <bt_hci_cmd_state_set_init+0x20>)
    ce1c:	220c      	movs	r2, #12
    ce1e:	fb02 3300 	mla	r3, r2, r0, r3
    ce22:	605c      	str	r4, [r3, #4]
}
    ce24:	bd10      	pop	{r4, pc}
    ce26:	bf00      	nop
    ce28:	20002c84 	.word	0x20002c84

0000ce2c <bt_hci_cmd_create>:
{
    ce2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    ce30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ce34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce38:	4606      	mov	r6, r0
    ce3a:	4817      	ldr	r0, [pc, #92]	; (ce98 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    ce3c:	4d17      	ldr	r5, [pc, #92]	; (ce9c <bt_hci_cmd_create+0x70>)
{
    ce3e:	460f      	mov	r7, r1
    ce40:	f01f fd8d 	bl	2c95e <net_buf_alloc_fixed>
    ce44:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    ce46:	f100 0a08 	add.w	sl, r0, #8
    ce4a:	2100      	movs	r1, #0
    ce4c:	f04f 0800 	mov.w	r8, #0
    ce50:	4650      	mov	r0, sl
    ce52:	f01f fda9 	bl	2c9a8 <net_buf_simple_reserve>
    ce56:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    ce5a:	4620      	mov	r0, r4
    ce5c:	f013 fe28 	bl	20ab0 <net_buf_id>
    ce60:	f04f 090c 	mov.w	r9, #12
    ce64:	fb09 5000 	mla	r0, r9, r0, r5
    ce68:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    ce6a:	4620      	mov	r0, r4
    ce6c:	f013 fe20 	bl	20ab0 <net_buf_id>
    ce70:	fb09 5000 	mla	r0, r9, r0, r5
    ce74:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    ce78:	4620      	mov	r0, r4
    ce7a:	f013 fe19 	bl	20ab0 <net_buf_id>
    ce7e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    ce82:	2103      	movs	r1, #3
    ce84:	f8c5 8004 	str.w	r8, [r5, #4]
    ce88:	4650      	mov	r0, sl
    ce8a:	f01f fdd0 	bl	2ca2e <net_buf_simple_add>
	hdr->param_len = param_len;
    ce8e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    ce90:	8006      	strh	r6, [r0, #0]
}
    ce92:	4620      	mov	r0, r4
    ce94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce98:	20000d34 	.word	0x20000d34
    ce9c:	20002c84 	.word	0x20002c84

0000cea0 <bt_hci_cmd_send>:
{
    cea0:	b530      	push	{r4, r5, lr}
    cea2:	4605      	mov	r5, r0
    cea4:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    cea6:	460c      	mov	r4, r1
    cea8:	b919      	cbnz	r1, ceb2 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    ceaa:	f7ff ffbf 	bl	ce2c <bt_hci_cmd_create>
		if (!buf) {
    ceae:	4604      	mov	r4, r0
    ceb0:	b318      	cbz	r0, cefa <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    ceb2:	f640 4335 	movw	r3, #3125	; 0xc35
    ceb6:	429d      	cmp	r5, r3
    ceb8:	d119      	bne.n	ceee <bt_hci_cmd_send+0x4e>
		return bt_hci_ecc_send(buf);
    ceba:	4620      	mov	r0, r4
    cebc:	f7ff fa94 	bl	c3e8 <bt_hci_ecc_send>
		if (err) {
    cec0:	4605      	mov	r5, r0
    cec2:	b188      	cbz	r0, cee8 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
    cec4:	480e      	ldr	r0, [pc, #56]	; (cf00 <bt_hci_cmd_send+0x60>)
    cec6:	6803      	ldr	r3, [r0, #0]
    cec8:	075b      	lsls	r3, r3, #29
    ceca:	d00a      	beq.n	cee2 <bt_hci_cmd_send+0x42>
    cecc:	4b0d      	ldr	r3, [pc, #52]	; (cf04 <bt_hci_cmd_send+0x64>)
    cece:	aa05      	add	r2, sp, #20
    ced0:	e9cd 3506 	strd	r3, r5, [sp, #24]
    ced4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ced8:	2303      	movs	r3, #3
    ceda:	9301      	str	r3, [sp, #4]
    cedc:	9305      	str	r3, [sp, #20]
    cede:	f01d fb98 	bl	2a612 <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    cee2:	4620      	mov	r0, r4
    cee4:	f013 fea0 	bl	20c28 <net_buf_unref>
}
    cee8:	4628      	mov	r0, r5
    ceea:	b009      	add	sp, #36	; 0x24
    ceec:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    ceee:	4806      	ldr	r0, [pc, #24]	; (cf08 <bt_hci_cmd_send+0x68>)
    cef0:	4621      	mov	r1, r4
    cef2:	f01f fd5d 	bl	2c9b0 <net_buf_put>
	return 0;
    cef6:	2500      	movs	r5, #0
    cef8:	e7f6      	b.n	cee8 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    cefa:	f06f 0568 	mvn.w	r5, #104	; 0x68
    cefe:	e7f3      	b.n	cee8 <bt_hci_cmd_send+0x48>
    cf00:	20000a48 	.word	0x20000a48
    cf04:	00032f40 	.word	0x00032f40
    cf08:	2000013c 	.word	0x2000013c

0000cf0c <le_ltk_request>:
{
    cf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    cf0e:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    cf10:	8826      	ldrh	r6, [r4, #0]
    cf12:	b2b7      	uxth	r7, r6
{
    cf14:	b08f      	sub	sp, #60	; 0x3c
	conn = bt_conn_lookup_handle(handle);
    cf16:	4638      	mov	r0, r7
    cf18:	f002 fb12 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    cf1c:	4605      	mov	r5, r0
    cf1e:	b980      	cbnz	r0, cf42 <le_ltk_request+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    cf20:	482a      	ldr	r0, [pc, #168]	; (cfcc <le_ltk_request+0xc0>)
    cf22:	6803      	ldr	r3, [r0, #0]
    cf24:	075a      	lsls	r2, r3, #29
    cf26:	d00a      	beq.n	cf3e <le_ltk_request+0x32>
    cf28:	4b29      	ldr	r3, [pc, #164]	; (cfd0 <le_ltk_request+0xc4>)
    cf2a:	aa0b      	add	r2, sp, #44	; 0x2c
    cf2c:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    cf30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf34:	2303      	movs	r3, #3
    cf36:	9304      	str	r3, [sp, #16]
    cf38:	930b      	str	r3, [sp, #44]	; 0x2c
    cf3a:	f01d fb6a 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    cf3e:	b00f      	add	sp, #60	; 0x3c
    cf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    cf42:	af04      	add	r7, sp, #16
    cf44:	f8d4 2002 	ldr.w	r2, [r4, #2]
    cf48:	f8d4 3006 	ldr.w	r3, [r4, #6]
    cf4c:	9701      	str	r7, [sp, #4]
    cf4e:	8961      	ldrh	r1, [r4, #10]
    cf50:	9100      	str	r1, [sp, #0]
    cf52:	f01f faee 	bl	2c532 <bt_smp_request_ltk>
    cf56:	b340      	cbz	r0, cfaa <le_ltk_request+0x9e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    cf58:	2112      	movs	r1, #18
    cf5a:	f242 001a 	movw	r0, #8218	; 0x201a
    cf5e:	f7ff ff65 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    cf62:	4604      	mov	r4, r0
    cf64:	b988      	cbnz	r0, cf8a <le_ltk_request+0x7e>
		BT_ERR("Out of command buffers");
    cf66:	4819      	ldr	r0, [pc, #100]	; (cfcc <le_ltk_request+0xc0>)
    cf68:	6803      	ldr	r3, [r0, #0]
    cf6a:	075b      	lsls	r3, r3, #29
    cf6c:	d009      	beq.n	cf82 <le_ltk_request+0x76>
    cf6e:	4b19      	ldr	r3, [pc, #100]	; (cfd4 <le_ltk_request+0xc8>)
    cf70:	930c      	str	r3, [sp, #48]	; 0x30
    cf72:	aa0b      	add	r2, sp, #44	; 0x2c
    cf74:	2302      	movs	r3, #2
    cf76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf7a:	9303      	str	r3, [sp, #12]
    cf7c:	930b      	str	r3, [sp, #44]	; 0x2c
    cf7e:	f01d fb48 	bl	2a612 <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
    cf82:	4628      	mov	r0, r5
    cf84:	f01d fd59 	bl	2aa3a <bt_conn_unref>
    cf88:	e7d9      	b.n	cf3e <le_ltk_request+0x32>
    cf8a:	2112      	movs	r1, #18
    cf8c:	3008      	adds	r0, #8
    cf8e:	f01f fd4e 	bl	2ca2e <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    cf92:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    cf94:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    cf98:	2210      	movs	r2, #16
    cf9a:	f01d f9df 	bl	2a35c <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    cf9e:	4621      	mov	r1, r4
    cfa0:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    cfa4:	f7ff ff7c 	bl	cea0 <bt_hci_cmd_send>
    cfa8:	e7eb      	b.n	cf82 <le_ltk_request+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    cfaa:	2102      	movs	r1, #2
    cfac:	f242 001b 	movw	r0, #8219	; 0x201b
    cfb0:	f7ff ff3c 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    cfb4:	4604      	mov	r4, r0
    cfb6:	2800      	cmp	r0, #0
    cfb8:	d0d5      	beq.n	cf66 <le_ltk_request+0x5a>
    cfba:	2102      	movs	r1, #2
    cfbc:	3008      	adds	r0, #8
    cfbe:	f01f fd36 	bl	2ca2e <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    cfc2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    cfc4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    cfc6:	f242 001b 	movw	r0, #8219	; 0x201b
    cfca:	e7eb      	b.n	cfa4 <le_ltk_request+0x98>
    cfcc:	20000a48 	.word	0x20000a48
    cfd0:	00032db5 	.word	0x00032db5
    cfd4:	00032fdc 	.word	0x00032fdc

0000cfd8 <le_conn_param_neg_reply>:
{
    cfd8:	b570      	push	{r4, r5, r6, lr}
    cfda:	4606      	mov	r6, r0
    cfdc:	b088      	sub	sp, #32
    cfde:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    cfe0:	f242 0021 	movw	r0, #8225	; 0x2021
    cfe4:	2103      	movs	r1, #3
    cfe6:	f7ff ff21 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    cfea:	4604      	mov	r4, r0
    cfec:	b978      	cbnz	r0, d00e <le_conn_param_neg_reply+0x36>
		BT_ERR("Unable to allocate buffer");
    cfee:	480f      	ldr	r0, [pc, #60]	; (d02c <le_conn_param_neg_reply+0x54>)
    cff0:	6803      	ldr	r3, [r0, #0]
    cff2:	075b      	lsls	r3, r3, #29
    cff4:	d009      	beq.n	d00a <le_conn_param_neg_reply+0x32>
    cff6:	4b0e      	ldr	r3, [pc, #56]	; (d030 <le_conn_param_neg_reply+0x58>)
    cff8:	9306      	str	r3, [sp, #24]
    cffa:	aa05      	add	r2, sp, #20
    cffc:	2302      	movs	r3, #2
    cffe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d002:	9301      	str	r3, [sp, #4]
    d004:	9305      	str	r3, [sp, #20]
    d006:	f01d fb04 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    d00a:	b008      	add	sp, #32
    d00c:	bd70      	pop	{r4, r5, r6, pc}
    d00e:	2103      	movs	r1, #3
    d010:	3008      	adds	r0, #8
    d012:	f01f fd0c 	bl	2ca2e <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    d016:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    d018:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    d01a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    d01c:	f242 0021 	movw	r0, #8225	; 0x2021
}
    d020:	b008      	add	sp, #32
    d022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    d026:	f7ff bf3b 	b.w	cea0 <bt_hci_cmd_send>
    d02a:	bf00      	nop
    d02c:	20000a48 	.word	0x20000a48
    d030:	00032ff3 	.word	0x00032ff3

0000d034 <le_conn_param_req>:
{
    d034:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    d036:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    d038:	78d9      	ldrb	r1, [r3, #3]
    d03a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    d03c:	881f      	ldrh	r7, [r3, #0]
{
    d03e:	b08b      	sub	sp, #44	; 0x2c
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    d040:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d044:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    d048:	7959      	ldrb	r1, [r3, #5]
    d04a:	791a      	ldrb	r2, [r3, #4]
    d04c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d050:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
    d054:	799a      	ldrb	r2, [r3, #6]
    d056:	79d9      	ldrb	r1, [r3, #7]
    d058:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d05c:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    d060:	7a1a      	ldrb	r2, [r3, #8]
    d062:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    d064:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    d066:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    d06a:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    d06c:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
    d070:	f002 fa66 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    d074:	4606      	mov	r6, r0
    d076:	b9a0      	cbnz	r0, d0a2 <le_conn_param_req+0x6e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d078:	4822      	ldr	r0, [pc, #136]	; (d104 <le_conn_param_req+0xd0>)
    d07a:	6803      	ldr	r3, [r0, #0]
    d07c:	075b      	lsls	r3, r3, #29
    d07e:	d00a      	beq.n	d096 <le_conn_param_req+0x62>
    d080:	4b21      	ldr	r3, [pc, #132]	; (d108 <le_conn_param_req+0xd4>)
    d082:	aa07      	add	r2, sp, #28
    d084:	e9cd 3408 	strd	r3, r4, [sp, #32]
    d088:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d08c:	2303      	movs	r3, #3
    d08e:	9301      	str	r3, [sp, #4]
    d090:	9307      	str	r3, [sp, #28]
    d092:	f01d fabe 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    d096:	2102      	movs	r1, #2
    d098:	4620      	mov	r0, r4
    d09a:	f7ff ff9d 	bl	cfd8 <le_conn_param_neg_reply>
}
    d09e:	b00b      	add	sp, #44	; 0x2c
    d0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    d0a2:	a902      	add	r1, sp, #8
    d0a4:	f002 fbf2 	bl	f88c <le_param_req>
    d0a8:	b938      	cbnz	r0, d0ba <le_conn_param_req+0x86>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    d0aa:	211e      	movs	r1, #30
    d0ac:	4620      	mov	r0, r4
    d0ae:	f7ff ff93 	bl	cfd8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    d0b2:	4630      	mov	r0, r6
    d0b4:	f01d fcc1 	bl	2aa3a <bt_conn_unref>
    d0b8:	e7f1      	b.n	d09e <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    d0ba:	210e      	movs	r1, #14
    d0bc:	f242 0020 	movw	r0, #8224	; 0x2020
    d0c0:	f7ff feb4 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    d0c4:	4605      	mov	r5, r0
    d0c6:	2800      	cmp	r0, #0
    d0c8:	d0f3      	beq.n	d0b2 <le_conn_param_req+0x7e>
    d0ca:	210e      	movs	r1, #14
    d0cc:	3008      	adds	r0, #8
    d0ce:	f01f fcae 	bl	2ca2e <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    d0d2:	220e      	movs	r2, #14
    d0d4:	4604      	mov	r4, r0
    d0d6:	2100      	movs	r1, #0
    d0d8:	f01d f94b 	bl	2a372 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    d0dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    d0e0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    d0e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d0e6:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    d0e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    d0ec:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    d0ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	cp->handle = sys_cpu_to_le16(handle);
    d0f2:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    d0f4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    d0f6:	4629      	mov	r1, r5
    d0f8:	f242 0020 	movw	r0, #8224	; 0x2020
    d0fc:	f7ff fed0 	bl	cea0 <bt_hci_cmd_send>
    d100:	e7d7      	b.n	d0b2 <le_conn_param_req+0x7e>
    d102:	bf00      	nop
    d104:	20000a48 	.word	0x20000a48
    d108:	00032db5 	.word	0x00032db5

0000d10c <bt_hci_cmd_send_sync>:
{
    d10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d110:	b089      	sub	sp, #36	; 0x24
    d112:	4680      	mov	r8, r0
    d114:	af00      	add	r7, sp, #0
    d116:	4615      	mov	r5, r2
	if (!buf) {
    d118:	460c      	mov	r4, r1
    d11a:	b921      	cbnz	r1, d126 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    d11c:	f7ff fe86 	bl	ce2c <bt_hci_cmd_create>
		if (!buf) {
    d120:	4604      	mov	r4, r0
    d122:	2800      	cmp	r0, #0
    d124:	d062      	beq.n	d1ec <bt_hci_cmd_send_sync+0xe0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    d126:	f107 0608 	add.w	r6, r7, #8
    d12a:	2201      	movs	r2, #1
    d12c:	2100      	movs	r1, #0
    d12e:	4630      	mov	r0, r6
    d130:	f020 faf3 	bl	2d71a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    d134:	4620      	mov	r0, r4
    d136:	f013 fcbb 	bl	20ab0 <net_buf_id>
    d13a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; d1f4 <bt_hci_cmd_send_sync+0xe8>
    d13e:	230c      	movs	r3, #12
    d140:	fb03 9000 	mla	r0, r3, r0, r9
    d144:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    d146:	4620      	mov	r0, r4
    d148:	f01f fc3f 	bl	2c9ca <net_buf_ref>
    d14c:	4601      	mov	r1, r0
    d14e:	482a      	ldr	r0, [pc, #168]	; (d1f8 <bt_hci_cmd_send_sync+0xec>)
    d150:	f01f fc2e 	bl	2c9b0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    d154:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    d158:	4630      	mov	r0, r6
    d15a:	2300      	movs	r3, #0
    d15c:	f018 f9f0 	bl	25540 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    d160:	4606      	mov	r6, r0
    d162:	b180      	cbz	r0, d186 <bt_hci_cmd_send_sync+0x7a>
    d164:	4a25      	ldr	r2, [pc, #148]	; (d1fc <bt_hci_cmd_send_sync+0xf0>)
    d166:	4926      	ldr	r1, [pc, #152]	; (d200 <bt_hci_cmd_send_sync+0xf4>)
    d168:	4826      	ldr	r0, [pc, #152]	; (d204 <bt_hci_cmd_send_sync+0xf8>)
    d16a:	f240 1331 	movw	r3, #305	; 0x131
    d16e:	f019 fbf5 	bl	2695c <printk>
    d172:	4825      	ldr	r0, [pc, #148]	; (d208 <bt_hci_cmd_send_sync+0xfc>)
    d174:	4631      	mov	r1, r6
    d176:	f019 fbf1 	bl	2695c <printk>
    d17a:	4040      	eors	r0, r0
    d17c:	f380 8811 	msr	BASEPRI, r0
    d180:	f04f 0003 	mov.w	r0, #3
    d184:	df02      	svc	2
	status = cmd(buf)->status;
    d186:	4620      	mov	r0, r4
    d188:	f013 fc92 	bl	20ab0 <net_buf_id>
    d18c:	230c      	movs	r3, #12
    d18e:	4358      	muls	r0, r3
    d190:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    d194:	b30e      	cbz	r6, d1da <bt_hci_cmd_send_sync+0xce>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    d196:	481d      	ldr	r0, [pc, #116]	; (d20c <bt_hci_cmd_send_sync+0x100>)
    d198:	6803      	ldr	r3, [r0, #0]
    d19a:	f013 0f06 	tst.w	r3, #6
    d19e:	d00f      	beq.n	d1c0 <bt_hci_cmd_send_sync+0xb4>
    d1a0:	4b1b      	ldr	r3, [pc, #108]	; (d210 <bt_hci_cmd_send_sync+0x104>)
    d1a2:	466d      	mov	r5, sp
    d1a4:	b088      	sub	sp, #32
    d1a6:	466a      	mov	r2, sp
    d1a8:	e9c2 3804 	strd	r3, r8, [r2, #16]
    d1ac:	2304      	movs	r3, #4
    d1ae:	6196      	str	r6, [r2, #24]
    d1b0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    d1b4:	f842 3f0c 	str.w	r3, [r2, #12]!
    d1b8:	607b      	str	r3, [r7, #4]
    d1ba:	f01d fa2a 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    d1be:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    d1c0:	4620      	mov	r0, r4
    d1c2:	f013 fd31 	bl	20c28 <net_buf_unref>
			return -EIO;
    d1c6:	2e09      	cmp	r6, #9
    d1c8:	bf0c      	ite	eq
    d1ca:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    d1ce:	f06f 0004 	mvnne.w	r0, #4
}
    d1d2:	3724      	adds	r7, #36	; 0x24
    d1d4:	46bd      	mov	sp, r7
    d1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    d1da:	b115      	cbz	r5, d1e2 <bt_hci_cmd_send_sync+0xd6>
		*rsp = buf;
    d1dc:	602c      	str	r4, [r5, #0]
	return 0;
    d1de:	4630      	mov	r0, r6
    d1e0:	e7f7      	b.n	d1d2 <bt_hci_cmd_send_sync+0xc6>
		net_buf_unref(buf);
    d1e2:	4620      	mov	r0, r4
    d1e4:	f013 fd20 	bl	20c28 <net_buf_unref>
	return 0;
    d1e8:	4628      	mov	r0, r5
    d1ea:	e7f2      	b.n	d1d2 <bt_hci_cmd_send_sync+0xc6>
			return -ENOBUFS;
    d1ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d1f0:	e7ef      	b.n	d1d2 <bt_hci_cmd_send_sync+0xc6>
    d1f2:	bf00      	nop
    d1f4:	20002c84 	.word	0x20002c84
    d1f8:	2000013c 	.word	0x2000013c
    d1fc:	00032ecb 	.word	0x00032ecb
    d200:	00032eff 	.word	0x00032eff
    d204:	00032f08 	.word	0x00032f08
    d208:	0003300d 	.word	0x0003300d
    d20c:	20000a48 	.word	0x20000a48
    d210:	0003302d 	.word	0x0003302d

0000d214 <hci_le_read_max_data_len>:
{
    d214:	b570      	push	{r4, r5, r6, lr}
    d216:	b088      	sub	sp, #32
    d218:	4606      	mov	r6, r0
    d21a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    d21c:	466a      	mov	r2, sp
    d21e:	2100      	movs	r1, #0
    d220:	f242 002f 	movw	r0, #8239	; 0x202f
    d224:	f7ff ff72 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    d228:	4604      	mov	r4, r0
    d22a:	b180      	cbz	r0, d24e <hci_le_read_max_data_len+0x3a>
		BT_ERR("Failed to read DLE max data len");
    d22c:	480d      	ldr	r0, [pc, #52]	; (d264 <hci_le_read_max_data_len+0x50>)
    d22e:	6803      	ldr	r3, [r0, #0]
    d230:	075b      	lsls	r3, r3, #29
    d232:	d009      	beq.n	d248 <hci_le_read_max_data_len+0x34>
    d234:	4b0c      	ldr	r3, [pc, #48]	; (d268 <hci_le_read_max_data_len+0x54>)
    d236:	9306      	str	r3, [sp, #24]
    d238:	aa05      	add	r2, sp, #20
    d23a:	2302      	movs	r3, #2
    d23c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d240:	9301      	str	r3, [sp, #4]
    d242:	9305      	str	r3, [sp, #20]
    d244:	f01d f9e5 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    d248:	4620      	mov	r0, r4
    d24a:	b008      	add	sp, #32
    d24c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    d24e:	9800      	ldr	r0, [sp, #0]
    d250:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    d252:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    d256:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    d258:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    d25c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    d25e:	f013 fce3 	bl	20c28 <net_buf_unref>
	return 0;
    d262:	e7f1      	b.n	d248 <hci_le_read_max_data_len+0x34>
    d264:	20000a48 	.word	0x20000a48
    d268:	00033049 	.word	0x00033049

0000d26c <bt_le_create_conn_legacy>:
{
    d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d270:	b086      	sub	sp, #24
    d272:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    d274:	f10d 010b 	add.w	r1, sp, #11
    d278:	2000      	movs	r0, #0
    d27a:	f001 fabd 	bl	e7f8 <bt_id_set_create_conn_own_addr>
	if (err) {
    d27e:	4605      	mov	r5, r0
    d280:	2800      	cmp	r0, #0
    d282:	d147      	bne.n	d314 <bt_le_create_conn_legacy+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    d284:	2119      	movs	r1, #25
    d286:	f242 000d 	movw	r0, #8205	; 0x200d
    d28a:	f7ff fdcf 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    d28e:	4607      	mov	r7, r0
    d290:	2800      	cmp	r0, #0
    d292:	d046      	beq.n	d322 <bt_le_create_conn_legacy+0xb6>
    d294:	2119      	movs	r1, #25
    d296:	3008      	adds	r0, #8
    d298:	f01f fbc9 	bl	2ca2e <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    d29c:	4629      	mov	r1, r5
    d29e:	4604      	mov	r4, r0
    d2a0:	2219      	movs	r2, #25
    d2a2:	f01d f866 	bl	2a372 <memset>
		if (!bt_dev.le.rl_size ||
    d2a6:	4d20      	ldr	r5, [pc, #128]	; (d328 <bt_le_create_conn_legacy+0xbc>)
	cp->own_addr_type = own_addr_type;
    d2a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d2ac:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    d2ae:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    d2b2:	b39b      	cbz	r3, d31c <bt_le_create_conn_legacy+0xb0>
    d2b4:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    d2b8:	429a      	cmp	r2, r3
    d2ba:	d82f      	bhi.n	d31c <bt_le_create_conn_legacy+0xb0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    d2bc:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    d2c0:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    d2c2:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    d2c6:	f01d f992 	bl	2a5ee <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    d2ca:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    d2ce:	89ab      	ldrh	r3, [r5, #12]
    d2d0:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    d2d2:	89eb      	ldrh	r3, [r5, #14]
    d2d4:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    d2d6:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    d2da:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    d2de:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    d2e2:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    d2e6:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    d2ea:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    d2ee:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    d2f2:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    d2f6:	2301      	movs	r3, #1
    d2f8:	4a0c      	ldr	r2, [pc, #48]	; (d32c <bt_le_create_conn_legacy+0xc0>)
    d2fa:	9300      	str	r3, [sp, #0]
    d2fc:	a903      	add	r1, sp, #12
    d2fe:	230b      	movs	r3, #11
    d300:	4638      	mov	r0, r7
    d302:	f7ff fd81 	bl	ce08 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    d306:	4642      	mov	r2, r8
    d308:	4639      	mov	r1, r7
    d30a:	f242 000d 	movw	r0, #8205	; 0x200d
    d30e:	f7ff fefd 	bl	d10c <bt_hci_cmd_send_sync>
    d312:	4605      	mov	r5, r0
}
    d314:	4628      	mov	r0, r5
    d316:	b006      	add	sp, #24
    d318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    d31c:	f106 0196 	add.w	r1, r6, #150	; 0x96
    d320:	e7ce      	b.n	d2c0 <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
    d322:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d326:	e7f5      	b.n	d314 <bt_le_create_conn_legacy+0xa8>
    d328:	20000000 	.word	0x20000000
    d32c:	200000cc 	.word	0x200000cc

0000d330 <bt_le_create_conn_cancel>:
{
    d330:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    d332:	2100      	movs	r1, #0
{
    d334:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    d336:	f242 000e 	movw	r0, #8206	; 0x200e
    d33a:	f7ff fd77 	bl	ce2c <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    d33e:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    d340:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    d342:	230b      	movs	r3, #11
    d344:	a903      	add	r1, sp, #12
    d346:	4a06      	ldr	r2, [pc, #24]	; (d360 <bt_le_create_conn_cancel+0x30>)
    d348:	9500      	str	r5, [sp, #0]
    d34a:	f7ff fd5d 	bl	ce08 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    d34e:	462a      	mov	r2, r5
    d350:	4621      	mov	r1, r4
    d352:	f242 000e 	movw	r0, #8206	; 0x200e
    d356:	f7ff fed9 	bl	d10c <bt_hci_cmd_send_sync>
}
    d35a:	b007      	add	sp, #28
    d35c:	bd30      	pop	{r4, r5, pc}
    d35e:	bf00      	nop
    d360:	200000cc 	.word	0x200000cc

0000d364 <conn_auto_initiate>:
{
    d364:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    d366:	7b43      	ldrb	r3, [r0, #13]
    d368:	2b07      	cmp	r3, #7
{
    d36a:	b08a      	sub	sp, #40	; 0x28
    d36c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    d36e:	d178      	bne.n	d462 <conn_auto_initiate+0xfe>
    d370:	f3bf 8f5b 	dmb	ish
    d374:	6843      	ldr	r3, [r0, #4]
    d376:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    d37a:	0499      	lsls	r1, r3, #18
    d37c:	f100 0604 	add.w	r6, r0, #4
    d380:	d41b      	bmi.n	d3ba <conn_auto_initiate+0x56>
    d382:	78c3      	ldrb	r3, [r0, #3]
    d384:	b123      	cbz	r3, d390 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    d386:	4b38      	ldr	r3, [pc, #224]	; (d468 <conn_auto_initiate+0x104>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    d388:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    d38c:	071a      	lsls	r2, r3, #28
    d38e:	d514      	bpl.n	d3ba <conn_auto_initiate+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    d390:	2102      	movs	r1, #2
    d392:	f242 0016 	movw	r0, #8214	; 0x2016
    d396:	f7ff fd49 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    d39a:	4605      	mov	r5, r0
    d39c:	b168      	cbz	r0, d3ba <conn_auto_initiate+0x56>
    d39e:	2102      	movs	r1, #2
    d3a0:	3008      	adds	r0, #8
    d3a2:	f01f fb44 	bl	2ca2e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    d3a6:	8823      	ldrh	r3, [r4, #0]
    d3a8:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    d3aa:	4629      	mov	r1, r5
    d3ac:	f242 0016 	movw	r0, #8214	; 0x2016
}
    d3b0:	b00a      	add	sp, #40	; 0x28
    d3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    d3b6:	f7ff bd73 	b.w	cea0 <bt_hci_cmd_send>
    d3ba:	f3bf 8f5b 	dmb	ish
    d3be:	6863      	ldr	r3, [r4, #4]
    d3c0:	4d29      	ldr	r5, [pc, #164]	; (d468 <conn_auto_initiate+0x104>)
    d3c2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    d3c6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d3ca:	f3c3 3100 	ubfx	r1, r3, #12, #1
    d3ce:	d121      	bne.n	d414 <conn_auto_initiate+0xb0>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    d3d0:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    d3d4:	07db      	lsls	r3, r3, #31
    d3d6:	d51d      	bpl.n	d414 <conn_auto_initiate+0xb0>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    d3d8:	2302      	movs	r3, #2
    d3da:	461a      	mov	r2, r3
    d3dc:	9100      	str	r1, [sp, #0]
    d3de:	4620      	mov	r0, r4
    d3e0:	f01d f972 	bl	2a6c8 <bt_le_set_phy>
		if (!err) {
    d3e4:	4603      	mov	r3, r0
    d3e6:	b930      	cbnz	r0, d3f6 <conn_auto_initiate+0x92>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d3e8:	2180      	movs	r1, #128	; 0x80
    d3ea:	4630      	mov	r0, r6
}
    d3ec:	b00a      	add	sp, #40	; 0x28
    d3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d3f2:	f01d b8ff 	b.w	2a5f4 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    d3f6:	481d      	ldr	r0, [pc, #116]	; (d46c <conn_auto_initiate+0x108>)
    d3f8:	6802      	ldr	r2, [r0, #0]
    d3fa:	0756      	lsls	r6, r2, #29
    d3fc:	d00a      	beq.n	d414 <conn_auto_initiate+0xb0>
    d3fe:	4a1c      	ldr	r2, [pc, #112]	; (d470 <conn_auto_initiate+0x10c>)
    d400:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d404:	e9cd 2308 	strd	r2, r3, [sp, #32]
    d408:	2303      	movs	r3, #3
    d40a:	aa07      	add	r2, sp, #28
    d40c:	9303      	str	r3, [sp, #12]
    d40e:	9307      	str	r3, [sp, #28]
    d410:	f01d f8ff 	bl	2a612 <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    d414:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    d418:	0698      	lsls	r0, r3, #26
    d41a:	d522      	bpl.n	d462 <conn_auto_initiate+0xfe>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    d41c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    d420:	689b      	ldr	r3, [r3, #8]
    d422:	0799      	lsls	r1, r3, #30
    d424:	d51d      	bpl.n	d462 <conn_auto_initiate+0xfe>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    d426:	f10d 010a 	add.w	r1, sp, #10
    d42a:	a802      	add	r0, sp, #8
    d42c:	f7ff fef2 	bl	d214 <hci_le_read_max_data_len>
			if (!err) {
    d430:	b9b8      	cbnz	r0, d462 <conn_auto_initiate+0xfe>
				err = bt_le_set_data_len(conn,
    d432:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    d436:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    d43a:	4620      	mov	r0, r4
    d43c:	f01d f927 	bl	2a68e <bt_le_set_data_len>
				if (err) {
    d440:	4603      	mov	r3, r0
    d442:	b170      	cbz	r0, d462 <conn_auto_initiate+0xfe>
					BT_ERR("Failed to set data len (%d)", err);
    d444:	4809      	ldr	r0, [pc, #36]	; (d46c <conn_auto_initiate+0x108>)
    d446:	6802      	ldr	r2, [r0, #0]
    d448:	0752      	lsls	r2, r2, #29
    d44a:	d00a      	beq.n	d462 <conn_auto_initiate+0xfe>
    d44c:	4a09      	ldr	r2, [pc, #36]	; (d474 <conn_auto_initiate+0x110>)
    d44e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d452:	e9cd 2308 	strd	r2, r3, [sp, #32]
    d456:	2303      	movs	r3, #3
    d458:	aa07      	add	r2, sp, #28
    d45a:	9303      	str	r3, [sp, #12]
    d45c:	9307      	str	r3, [sp, #28]
    d45e:	f01d f8d8 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    d462:	b00a      	add	sp, #40	; 0x28
    d464:	bd70      	pop	{r4, r5, r6, pc}
    d466:	bf00      	nop
    d468:	20000000 	.word	0x20000000
    d46c:	20000a48 	.word	0x20000a48
    d470:	00033069 	.word	0x00033069
    d474:	00033083 	.word	0x00033083

0000d478 <le_phy_update_complete>:
{
    d478:	b530      	push	{r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d47a:	6883      	ldr	r3, [r0, #8]
    d47c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
{
    d480:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    d482:	4628      	mov	r0, r5
    d484:	f002 f85c 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    d488:	4604      	mov	r4, r0
    d48a:	b980      	cbnz	r0, d4ae <le_phy_update_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d48c:	4816      	ldr	r0, [pc, #88]	; (d4e8 <le_phy_update_complete+0x70>)
    d48e:	6803      	ldr	r3, [r0, #0]
    d490:	075a      	lsls	r2, r3, #29
    d492:	d00a      	beq.n	d4aa <le_phy_update_complete+0x32>
    d494:	4b15      	ldr	r3, [pc, #84]	; (d4ec <le_phy_update_complete+0x74>)
    d496:	aa05      	add	r2, sp, #20
    d498:	e9cd 3506 	strd	r3, r5, [sp, #24]
    d49c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d4a0:	2303      	movs	r3, #3
    d4a2:	9301      	str	r3, [sp, #4]
    d4a4:	9305      	str	r3, [sp, #20]
    d4a6:	f01d f8b4 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    d4aa:	b009      	add	sp, #36	; 0x24
    d4ac:	bd30      	pop	{r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    d4ae:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d4b0:	f3bf 8f5b 	dmb	ish
    d4b4:	e850 3f00 	ldrex	r3, [r0]
    d4b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    d4bc:	e840 2100 	strex	r1, r2, [r0]
    d4c0:	2900      	cmp	r1, #0
    d4c2:	d1f7      	bne.n	d4b4 <le_phy_update_complete+0x3c>
    d4c4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    d4c8:	061b      	lsls	r3, r3, #24
    d4ca:	d506      	bpl.n	d4da <le_phy_update_complete+0x62>
    d4cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d4d0:	f01d f890 	bl	2a5f4 <atomic_or>
		conn_auto_initiate(conn);
    d4d4:	4620      	mov	r0, r4
    d4d6:	f7ff ff45 	bl	d364 <conn_auto_initiate>
	bt_conn_unref(conn);
    d4da:	4620      	mov	r0, r4
}
    d4dc:	b009      	add	sp, #36	; 0x24
    d4de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    d4e2:	f01d baaa 	b.w	2aa3a <bt_conn_unref>
    d4e6:	bf00      	nop
    d4e8:	20000a48 	.word	0x20000a48
    d4ec:	00032db5 	.word	0x00032db5

0000d4f0 <le_remote_feat_complete>:
{
    d4f0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    d4f2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d4f4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    d4f8:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    d4fa:	4630      	mov	r0, r6
    d4fc:	f002 f820 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    d500:	4604      	mov	r4, r0
    d502:	b980      	cbnz	r0, d526 <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d504:	4812      	ldr	r0, [pc, #72]	; (d550 <le_remote_feat_complete+0x60>)
    d506:	6803      	ldr	r3, [r0, #0]
    d508:	075b      	lsls	r3, r3, #29
    d50a:	d00a      	beq.n	d522 <le_remote_feat_complete+0x32>
    d50c:	4b11      	ldr	r3, [pc, #68]	; (d554 <le_remote_feat_complete+0x64>)
    d50e:	aa05      	add	r2, sp, #20
    d510:	e9cd 3606 	strd	r3, r6, [sp, #24]
    d514:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d518:	2303      	movs	r3, #3
    d51a:	9301      	str	r3, [sp, #4]
    d51c:	9305      	str	r3, [sp, #20]
    d51e:	f01d f878 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    d522:	b008      	add	sp, #32
    d524:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    d526:	782b      	ldrb	r3, [r5, #0]
    d528:	b923      	cbnz	r3, d534 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    d52a:	2208      	movs	r2, #8
    d52c:	1ce9      	adds	r1, r5, #3
    d52e:	30ac      	adds	r0, #172	; 0xac
    d530:	f01c ff14 	bl	2a35c <memcpy>
    d534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    d538:	1d20      	adds	r0, r4, #4
    d53a:	f01d f85b 	bl	2a5f4 <atomic_or>
	conn_auto_initiate(conn);
    d53e:	4620      	mov	r0, r4
    d540:	f7ff ff10 	bl	d364 <conn_auto_initiate>
	bt_conn_unref(conn);
    d544:	4620      	mov	r0, r4
}
    d546:	b008      	add	sp, #32
    d548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    d54c:	f01d ba75 	b.w	2aa3a <bt_conn_unref>
    d550:	20000a48 	.word	0x20000a48
    d554:	00032db5 	.word	0x00032db5

0000d558 <bt_hci_le_enh_conn_complete>:
{
    d558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d55c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    d560:	4a7f      	ldr	r2, [pc, #508]	; (d760 <bt_hci_le_enh_conn_complete+0x208>)
	handle |= ~BT_ACL_HANDLE_MASK;
    d562:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
    d566:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    d568:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    d56c:	b29b      	uxth	r3, r3
    d56e:	4299      	cmp	r1, r3
{
    d570:	4604      	mov	r4, r0
    d572:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    d576:	bf08      	it	eq
    d578:	8016      	strheq	r6, [r2, #0]
{
    d57a:	b08f      	sub	sp, #60	; 0x3c
			return true;
    d57c:	bf08      	it	eq
    d57e:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    d580:	f000 feb4 	bl	e2ec <bt_id_pending_keys_update>
	if (evt->status) {
    d584:	7825      	ldrb	r5, [r4, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d586:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
    d58a:	2d00      	cmp	r5, #0
    d58c:	d03f      	beq.n	d60e <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d58e:	2d02      	cmp	r5, #2
    d590:	d12c      	bne.n	d5ec <bt_hci_le_enh_conn_complete+0x94>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    d592:	2100      	movs	r1, #0
    d594:	2206      	movs	r2, #6
    d596:	4608      	mov	r0, r1
    d598:	f002 fa74 	bl	fa84 <bt_conn_lookup_state_le>
	if (!conn) {
    d59c:	4604      	mov	r4, r0
    d59e:	b990      	cbnz	r0, d5c6 <bt_hci_le_enh_conn_complete+0x6e>
		BT_ERR("No pending central connection");
    d5a0:	4870      	ldr	r0, [pc, #448]	; (d764 <bt_hci_le_enh_conn_complete+0x20c>)
    d5a2:	6803      	ldr	r3, [r0, #0]
    d5a4:	0759      	lsls	r1, r3, #29
    d5a6:	d008      	beq.n	d5ba <bt_hci_le_enh_conn_complete+0x62>
    d5a8:	4b6f      	ldr	r3, [pc, #444]	; (d768 <bt_hci_le_enh_conn_complete+0x210>)
    d5aa:	930c      	str	r3, [sp, #48]	; 0x30
    d5ac:	aa0b      	add	r2, sp, #44	; 0x2c
    d5ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d5b2:	9506      	str	r5, [sp, #24]
    d5b4:	950b      	str	r5, [sp, #44]	; 0x2c
    d5b6:	f01d f82c 	bl	2a612 <z_log_msg2_static_create.constprop.0>
			bt_le_scan_update(false);
    d5ba:	2000      	movs	r0, #0
    d5bc:	f001 fa2c 	bl	ea18 <bt_le_scan_update>
}
    d5c0:	b00f      	add	sp, #60	; 0x3c
    d5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    d5c6:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d5c8:	2100      	movs	r1, #0
    d5ca:	f001 ffc1 	bl	f550 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d5ce:	f3bf 8f5b 	dmb	ish
    d5d2:	6863      	ldr	r3, [r4, #4]
    d5d4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    d5d8:	07da      	lsls	r2, r3, #31
    d5da:	d503      	bpl.n	d5e4 <bt_hci_le_enh_conn_complete+0x8c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    d5dc:	4629      	mov	r1, r5
    d5de:	4620      	mov	r0, r4
    d5e0:	f001 ffb6 	bl	f550 <bt_conn_set_state>
	bt_conn_unref(conn);
    d5e4:	4620      	mov	r0, r4
    d5e6:	f01d fa28 	bl	2aa3a <bt_conn_unref>
    d5ea:	e7e6      	b.n	d5ba <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    d5ec:	485d      	ldr	r0, [pc, #372]	; (d764 <bt_hci_le_enh_conn_complete+0x20c>)
    d5ee:	6803      	ldr	r3, [r0, #0]
    d5f0:	f013 0f06 	tst.w	r3, #6
    d5f4:	d0e4      	beq.n	d5c0 <bt_hci_le_enh_conn_complete+0x68>
    d5f6:	4b5d      	ldr	r3, [pc, #372]	; (d76c <bt_hci_le_enh_conn_complete+0x214>)
    d5f8:	aa0b      	add	r2, sp, #44	; 0x2c
    d5fa:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
    d5fe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d602:	2303      	movs	r3, #3
    d604:	9306      	str	r3, [sp, #24]
    d606:	930b      	str	r3, [sp, #44]	; 0x2c
    d608:	f01d f803 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    d60c:	e7d8      	b.n	d5c0 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    d60e:	7923      	ldrb	r3, [r4, #4]
    d610:	3b02      	subs	r3, #2
    d612:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    d614:	f104 0904 	add.w	r9, r4, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    d618:	d83f      	bhi.n	d69a <bt_hci_le_enh_conn_complete+0x142>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    d61a:	4649      	mov	r1, r9
    d61c:	a808      	add	r0, sp, #32
    d61e:	f01c ffe6 	bl	2a5ee <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    d622:	f89d 3020 	ldrb.w	r3, [sp, #32]
	memcpy(dst, src, sizeof(*dst));
    d626:	2206      	movs	r2, #6
    d628:	3b02      	subs	r3, #2
    d62a:	f104 0111 	add.w	r1, r4, #17
    d62e:	f10d 0019 	add.w	r0, sp, #25
    d632:	f88d 3020 	strb.w	r3, [sp, #32]
    d636:	f01c fe91 	bl	2a35c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    d63a:	2301      	movs	r3, #1
    d63c:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    d640:	78e0      	ldrb	r0, [r4, #3]
    d642:	b9a0      	cbnz	r0, d66e <bt_hci_le_enh_conn_complete+0x116>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    d644:	2206      	movs	r2, #6
    d646:	a908      	add	r1, sp, #32
    d648:	f002 fa1c 	bl	fa84 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d64c:	78e3      	ldrb	r3, [r4, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    d64e:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d650:	b963      	cbnz	r3, d66c <bt_hci_le_enh_conn_complete+0x114>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d652:	f3bf 8f5b 	dmb	ish
    d656:	4b46      	ldr	r3, [pc, #280]	; (d770 <bt_hci_le_enh_conn_complete+0x218>)
    d658:	e853 2f00 	ldrex	r2, [r3]
    d65c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    d660:	e843 2100 	strex	r1, r2, [r3]
    d664:	2900      	cmp	r1, #0
    d666:	d1f7      	bne.n	d658 <bt_hci_le_enh_conn_complete+0x100>
    d668:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    d66c:	bb45      	cbnz	r5, d6c0 <bt_hci_le_enh_conn_complete+0x168>
		BT_ERR("No pending conn for peer %s",
    d66e:	4c3d      	ldr	r4, [pc, #244]	; (d764 <bt_hci_le_enh_conn_complete+0x20c>)
    d670:	6823      	ldr	r3, [r4, #0]
    d672:	075b      	lsls	r3, r3, #29
    d674:	d00c      	beq.n	d690 <bt_hci_le_enh_conn_complete+0x138>
    d676:	4648      	mov	r0, r9
    d678:	f7fe fd34 	bl	c0e4 <bt_addr_le_str_real>
    d67c:	4b3d      	ldr	r3, [pc, #244]	; (d774 <bt_hci_le_enh_conn_complete+0x21c>)
    d67e:	9301      	str	r3, [sp, #4]
    d680:	2300      	movs	r3, #0
    d682:	9002      	str	r0, [sp, #8]
    d684:	9300      	str	r3, [sp, #0]
    d686:	2201      	movs	r2, #1
    d688:	4621      	mov	r1, r4
    d68a:	4618      	mov	r0, r3
    d68c:	f01c ffc4 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    d690:	211f      	movs	r1, #31
    d692:	4640      	mov	r0, r8
    d694:	f01c ffe0 	bl	2a658 <bt_hci_disconnect>
		return;
    d698:	e792      	b.n	d5c0 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    d69a:	78e3      	ldrb	r3, [r4, #3]
    d69c:	2b01      	cmp	r3, #1
    d69e:	bf04      	itt	eq
    d6a0:	4b35      	ldreq	r3, [pc, #212]	; (d778 <bt_hci_le_enh_conn_complete+0x220>)
    d6a2:	f893 5067 	ldrbeq.w	r5, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    d6a6:	4649      	mov	r1, r9
    d6a8:	4628      	mov	r0, r5
    d6aa:	f01d f8c2 	bl	2a832 <bt_lookup_id_addr>
    d6ae:	4601      	mov	r1, r0
    d6b0:	a808      	add	r0, sp, #32
    d6b2:	f01c ff9c 	bl	2a5ee <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    d6b6:	4649      	mov	r1, r9
    d6b8:	a806      	add	r0, sp, #24
    d6ba:	f01c ff98 	bl	2a5ee <bt_addr_le_copy>
    d6be:	e7bf      	b.n	d640 <bt_hci_le_enh_conn_complete+0xe8>
	conn->handle = handle;
    d6c0:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    d6c2:	a908      	add	r1, sp, #32
	conn->handle = handle;
    d6c4:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    d6c8:	f01c ff91 	bl	2a5ee <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    d6cc:	7e22      	ldrb	r2, [r4, #24]
    d6ce:	7de3      	ldrb	r3, [r4, #23]
    d6d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d6d4:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    d6d8:	7ea2      	ldrb	r2, [r4, #26]
    d6da:	7e63      	ldrb	r3, [r4, #25]
    d6dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d6e0:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    d6e4:	7ee3      	ldrb	r3, [r4, #27]
    d6e6:	7f22      	ldrb	r2, [r4, #28]
    d6e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d6ec:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    d6f0:	78e7      	ldrb	r7, [r4, #3]
    d6f2:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    d6f4:	2300      	movs	r3, #0
    d6f6:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d6f8:	b9c7      	cbnz	r7, d72c <bt_hci_le_enh_conn_complete+0x1d4>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    d6fa:	a906      	add	r1, sp, #24
    d6fc:	f105 0096 	add.w	r0, r5, #150	; 0x96
    d700:	f01c ff75 	bl	2a5ee <bt_addr_le_copy>
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
    d704:	340b      	adds	r4, #11
			conn->le.init_addr.type = BT_ADDR_LE_RANDOM;
    d706:	2301      	movs	r3, #1
    d708:	f885 308f 	strb.w	r3, [r5, #143]	; 0x8f
	return memcmp(a, b, sizeof(*a));
    d70c:	2206      	movs	r2, #6
    d70e:	a904      	add	r1, sp, #16
    d710:	4620      	mov	r0, r4
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
    d712:	9704      	str	r7, [sp, #16]
    d714:	f8ad 7014 	strh.w	r7, [sp, #20]
    d718:	f01c fdf7 	bl	2a30a <memcmp>
    d71c:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
    d71e:	2206      	movs	r2, #6
				bt_addr_copy(&conn->le.init_addr.a,
    d720:	f105 0090 	add.w	r0, r5, #144	; 0x90
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
    d724:	b1cb      	cbz	r3, d75a <bt_hci_le_enh_conn_complete+0x202>
    d726:	4621      	mov	r1, r4
    d728:	f01c fe18 	bl	2a35c <memcpy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    d72c:	2107      	movs	r1, #7
    d72e:	4628      	mov	r0, r5
    d730:	f001 ff0e 	bl	f550 <bt_conn_set_state>
	if (is_disconnected) {
    d734:	b11e      	cbz	r6, d73e <bt_hci_le_enh_conn_complete+0x1e6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    d736:	2101      	movs	r1, #1
    d738:	4628      	mov	r0, r5
    d73a:	f001 ff09 	bl	f550 <bt_conn_set_state>
	bt_conn_connected(conn);
    d73e:	4628      	mov	r0, r5
    d740:	f01d f97e 	bl	2aa40 <bt_conn_connected>
	conn_auto_initiate(conn);
    d744:	4628      	mov	r0, r5
    d746:	f7ff fe0d 	bl	d364 <conn_auto_initiate>
	bt_conn_unref(conn);
    d74a:	4628      	mov	r0, r5
    d74c:	f01d f975 	bl	2aa3a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d750:	78eb      	ldrb	r3, [r5, #3]
    d752:	2b00      	cmp	r3, #0
    d754:	f47f af34 	bne.w	d5c0 <bt_hci_le_enh_conn_complete+0x68>
    d758:	e72f      	b.n	d5ba <bt_hci_le_enh_conn_complete+0x62>
    d75a:	4908      	ldr	r1, [pc, #32]	; (d77c <bt_hci_le_enh_conn_complete+0x224>)
    d75c:	e7e4      	b.n	d728 <bt_hci_le_enh_conn_complete+0x1d0>
    d75e:	bf00      	nop
    d760:	20004a56 	.word	0x20004a56
    d764:	20000a48 	.word	0x20000a48
    d768:	0003309f 	.word	0x0003309f
    d76c:	000330bd 	.word	0x000330bd
    d770:	200000cc 	.word	0x200000cc
    d774:	000330d6 	.word	0x000330d6
    d778:	20000000 	.word	0x20000000
    d77c:	20000061 	.word	0x20000061

0000d780 <le_legacy_conn_complete>:
{
    d780:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    d782:	6881      	ldr	r1, [r0, #8]
{
    d784:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    d786:	780b      	ldrb	r3, [r1, #0]
    d788:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    d78c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    d790:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    d794:	78cb      	ldrb	r3, [r1, #3]
    d796:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    d79a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d79e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    d7a2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    d7a6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    d7aa:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    d7ae:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    d7b2:	7c4b      	ldrb	r3, [r1, #17]
    d7b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    d7b8:	a803      	add	r0, sp, #12
    d7ba:	3104      	adds	r1, #4
    d7bc:	f01c ff17 	bl	2a5ee <bt_addr_le_copy>
    d7c0:	490a      	ldr	r1, [pc, #40]	; (d7ec <le_legacy_conn_complete+0x6c>)
    d7c2:	2206      	movs	r2, #6
    d7c4:	f10d 0013 	add.w	r0, sp, #19
    d7c8:	f01c fdc8 	bl	2a35c <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    d7cc:	2300      	movs	r3, #0
    d7ce:	2206      	movs	r2, #6
    d7d0:	4669      	mov	r1, sp
    d7d2:	f10d 0019 	add.w	r0, sp, #25
    d7d6:	9300      	str	r3, [sp, #0]
    d7d8:	f8ad 3004 	strh.w	r3, [sp, #4]
    d7dc:	f01c fdbe 	bl	2a35c <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    d7e0:	a802      	add	r0, sp, #8
    d7e2:	f7ff feb9 	bl	d558 <bt_hci_le_enh_conn_complete>
}
    d7e6:	b00b      	add	sp, #44	; 0x2c
    d7e8:	f85d fb04 	ldr.w	pc, [sp], #4
    d7ec:	20000061 	.word	0x20000061

0000d7f0 <bt_security_err_get>:
	switch (hci_err) {
    d7f0:	2829      	cmp	r0, #41	; 0x29
    d7f2:	bf9a      	itte	ls
    d7f4:	4b01      	ldrls	r3, [pc, #4]	; (d7fc <bt_security_err_get+0xc>)
    d7f6:	5c18      	ldrbls	r0, [r3, r0]
{
    d7f8:	2009      	movhi	r0, #9
}
    d7fa:	4770      	bx	lr
    d7fc:	0003340b 	.word	0x0003340b

0000d800 <hci_encrypt_key_refresh_complete>:
{
    d800:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    d802:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    d804:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    d808:	781d      	ldrb	r5, [r3, #0]
{
    d80a:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    d80c:	4630      	mov	r0, r6
    d80e:	f001 fe97 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    d812:	4604      	mov	r4, r0
    d814:	b980      	cbnz	r0, d838 <hci_encrypt_key_refresh_complete+0x38>
		BT_ERR("Unable to look up conn with handle %u", handle);
    d816:	4824      	ldr	r0, [pc, #144]	; (d8a8 <hci_encrypt_key_refresh_complete+0xa8>)
    d818:	6803      	ldr	r3, [r0, #0]
    d81a:	075a      	lsls	r2, r3, #29
    d81c:	d00a      	beq.n	d834 <hci_encrypt_key_refresh_complete+0x34>
    d81e:	4b23      	ldr	r3, [pc, #140]	; (d8ac <hci_encrypt_key_refresh_complete+0xac>)
    d820:	aa05      	add	r2, sp, #20
    d822:	e9cd 3606 	strd	r3, r6, [sp, #24]
    d826:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d82a:	2303      	movs	r3, #3
    d82c:	9301      	str	r3, [sp, #4]
    d82e:	9305      	str	r3, [sp, #20]
    d830:	f01c feef 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    d834:	b008      	add	sp, #32
    d836:	bd70      	pop	{r4, r5, r6, pc}
	if (status) {
    d838:	b16d      	cbz	r5, d856 <hci_encrypt_key_refresh_complete+0x56>
		bt_conn_security_changed(conn, status,
    d83a:	4628      	mov	r0, r5
    d83c:	f7ff ffd8 	bl	d7f0 <bt_security_err_get>
    d840:	4629      	mov	r1, r5
    d842:	4602      	mov	r2, r0
    d844:	4620      	mov	r0, r4
    d846:	f002 f889 	bl	f95c <bt_conn_security_changed>
	bt_conn_unref(conn);
    d84a:	4620      	mov	r0, r4
}
    d84c:	b008      	add	sp, #32
    d84e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    d852:	f01d b8f2 	b.w	2aa3a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    d856:	7883      	ldrb	r3, [r0, #2]
    d858:	2b01      	cmp	r3, #1
    d85a:	d107      	bne.n	d86c <hci_encrypt_key_refresh_complete+0x6c>
		bt_smp_update_keys(conn);
    d85c:	f007 f926 	bl	14aac <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    d860:	4620      	mov	r0, r4
    d862:	f01c feac 	bl	2a5be <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    d866:	2800      	cmp	r0, #0
    d868:	bf08      	it	eq
    d86a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    d86c:	4628      	mov	r0, r5
    d86e:	f7ff ffbf 	bl	d7f0 <bt_security_err_get>
    d872:	4629      	mov	r1, r5
    d874:	4602      	mov	r2, r0
    d876:	4620      	mov	r0, r4
    d878:	f002 f870 	bl	f95c <bt_conn_security_changed>
	if (status) {
    d87c:	2d00      	cmp	r5, #0
    d87e:	d0e4      	beq.n	d84a <hci_encrypt_key_refresh_complete+0x4a>
		BT_ERR("Failed to set required security level");
    d880:	4809      	ldr	r0, [pc, #36]	; (d8a8 <hci_encrypt_key_refresh_complete+0xa8>)
    d882:	6803      	ldr	r3, [r0, #0]
    d884:	075b      	lsls	r3, r3, #29
    d886:	d009      	beq.n	d89c <hci_encrypt_key_refresh_complete+0x9c>
    d888:	4b09      	ldr	r3, [pc, #36]	; (d8b0 <hci_encrypt_key_refresh_complete+0xb0>)
    d88a:	9306      	str	r3, [sp, #24]
    d88c:	aa05      	add	r2, sp, #20
    d88e:	2302      	movs	r3, #2
    d890:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d894:	9301      	str	r3, [sp, #4]
    d896:	9305      	str	r3, [sp, #20]
    d898:	f01c febb 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    d89c:	4629      	mov	r1, r5
    d89e:	4620      	mov	r0, r4
    d8a0:	f01d f966 	bl	2ab70 <bt_conn_disconnect>
    d8a4:	e7d1      	b.n	d84a <hci_encrypt_key_refresh_complete+0x4a>
    d8a6:	bf00      	nop
    d8a8:	20000a48 	.word	0x20000a48
    d8ac:	00032fb6 	.word	0x00032fb6
    d8b0:	000330f2 	.word	0x000330f2

0000d8b4 <hci_encrypt_change>:
{
    d8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    d8b6:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d8b8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    d8bc:	7835      	ldrb	r5, [r6, #0]
{
    d8be:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    d8c0:	4638      	mov	r0, r7
    d8c2:	f001 fe3d 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    d8c6:	4604      	mov	r4, r0
    d8c8:	b980      	cbnz	r0, d8ec <hci_encrypt_change+0x38>
		BT_ERR("Unable to look up conn with handle %u", handle);
    d8ca:	4825      	ldr	r0, [pc, #148]	; (d960 <hci_encrypt_change+0xac>)
    d8cc:	6803      	ldr	r3, [r0, #0]
    d8ce:	075a      	lsls	r2, r3, #29
    d8d0:	d00a      	beq.n	d8e8 <hci_encrypt_change+0x34>
    d8d2:	4b24      	ldr	r3, [pc, #144]	; (d964 <hci_encrypt_change+0xb0>)
    d8d4:	aa05      	add	r2, sp, #20
    d8d6:	e9cd 3706 	strd	r3, r7, [sp, #24]
    d8da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d8de:	2303      	movs	r3, #3
    d8e0:	9301      	str	r3, [sp, #4]
    d8e2:	9305      	str	r3, [sp, #20]
    d8e4:	f01c fe95 	bl	2a612 <z_log_msg2_static_create.constprop.0>
}
    d8e8:	b009      	add	sp, #36	; 0x24
    d8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
    d8ec:	b16d      	cbz	r5, d90a <hci_encrypt_change+0x56>
		bt_conn_security_changed(conn, status,
    d8ee:	4628      	mov	r0, r5
    d8f0:	f7ff ff7e 	bl	d7f0 <bt_security_err_get>
    d8f4:	4629      	mov	r1, r5
    d8f6:	4602      	mov	r2, r0
    d8f8:	4620      	mov	r0, r4
    d8fa:	f002 f82f 	bl	f95c <bt_conn_security_changed>
	bt_conn_unref(conn);
    d8fe:	4620      	mov	r0, r4
}
    d900:	b009      	add	sp, #36	; 0x24
    d902:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    d906:	f01d b898 	b.w	2aa3a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    d90a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    d90c:	78f3      	ldrb	r3, [r6, #3]
    d90e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    d910:	2a01      	cmp	r2, #1
    d912:	d108      	bne.n	d926 <hci_encrypt_change+0x72>
		if (conn->encrypt) {
    d914:	b10b      	cbz	r3, d91a <hci_encrypt_change+0x66>
			bt_smp_update_keys(conn);
    d916:	f007 f8c9 	bl	14aac <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    d91a:	4620      	mov	r0, r4
    d91c:	f01c fe4f 	bl	2a5be <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    d920:	2800      	cmp	r0, #0
    d922:	bf08      	it	eq
    d924:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    d926:	4628      	mov	r0, r5
    d928:	f7ff ff62 	bl	d7f0 <bt_security_err_get>
    d92c:	4629      	mov	r1, r5
    d92e:	4602      	mov	r2, r0
    d930:	4620      	mov	r0, r4
    d932:	f002 f813 	bl	f95c <bt_conn_security_changed>
	if (status) {
    d936:	2d00      	cmp	r5, #0
    d938:	d0e1      	beq.n	d8fe <hci_encrypt_change+0x4a>
		BT_ERR("Failed to set required security level");
    d93a:	4809      	ldr	r0, [pc, #36]	; (d960 <hci_encrypt_change+0xac>)
    d93c:	6803      	ldr	r3, [r0, #0]
    d93e:	075b      	lsls	r3, r3, #29
    d940:	d009      	beq.n	d956 <hci_encrypt_change+0xa2>
    d942:	4b09      	ldr	r3, [pc, #36]	; (d968 <hci_encrypt_change+0xb4>)
    d944:	9306      	str	r3, [sp, #24]
    d946:	aa05      	add	r2, sp, #20
    d948:	2302      	movs	r3, #2
    d94a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d94e:	9301      	str	r3, [sp, #4]
    d950:	9305      	str	r3, [sp, #20]
    d952:	f01c fe5e 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    d956:	4629      	mov	r1, r5
    d958:	4620      	mov	r0, r4
    d95a:	f01d f909 	bl	2ab70 <bt_conn_disconnect>
    d95e:	e7ce      	b.n	d8fe <hci_encrypt_change+0x4a>
    d960:	20000a48 	.word	0x20000a48
    d964:	00032fb6 	.word	0x00032fb6
    d968:	000330f2 	.word	0x000330f2

0000d96c <hci_event_prio>:
{
    d96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d970:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    d972:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    d976:	4630      	mov	r0, r6
    d978:	f01f f8a2 	bl	2cac0 <net_buf_simple_headroom>
	state->len = buf->len;
    d97c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d980:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    d984:	4605      	mov	r5, r0
    d986:	d80c      	bhi.n	d9a2 <hci_event_prio+0x36>
    d988:	4a1c      	ldr	r2, [pc, #112]	; (d9fc <hci_event_prio+0x90>)
    d98a:	491d      	ldr	r1, [pc, #116]	; (da00 <hci_event_prio+0x94>)
    d98c:	481d      	ldr	r0, [pc, #116]	; (da04 <hci_event_prio+0x98>)
    d98e:	f640 532f 	movw	r3, #3375	; 0xd2f
    d992:	f018 ffe3 	bl	2695c <printk>
    d996:	4040      	eors	r0, r0
    d998:	f380 8811 	msr	BASEPRI, r0
    d99c:	f04f 0003 	mov.w	r0, #3
    d9a0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    d9a2:	4630      	mov	r0, r6
    d9a4:	2102      	movs	r1, #2
    d9a6:	f01f f873 	bl	2ca90 <net_buf_simple_pull_mem>
    d9aa:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d9ac:	7800      	ldrb	r0, [r0, #0]
    d9ae:	f01c fdf4 	bl	2a59a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d9b2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d9b4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d9b6:	d40c      	bmi.n	d9d2 <hci_event_prio+0x66>
    d9b8:	4a10      	ldr	r2, [pc, #64]	; (d9fc <hci_event_prio+0x90>)
    d9ba:	4913      	ldr	r1, [pc, #76]	; (da08 <hci_event_prio+0x9c>)
    d9bc:	4811      	ldr	r0, [pc, #68]	; (da04 <hci_event_prio+0x98>)
    d9be:	f640 5333 	movw	r3, #3379	; 0xd33
    d9c2:	f018 ffcb 	bl	2695c <printk>
    d9c6:	4040      	eors	r0, r0
    d9c8:	f380 8811 	msr	BASEPRI, r0
    d9cc:	f04f 0003 	mov.w	r0, #3
    d9d0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    d9d2:	2305      	movs	r3, #5
    d9d4:	4a0d      	ldr	r2, [pc, #52]	; (da0c <hci_event_prio+0xa0>)
    d9d6:	7838      	ldrb	r0, [r7, #0]
    d9d8:	4621      	mov	r1, r4
    d9da:	f7fe ff2d 	bl	c838 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    d9de:	07b3      	lsls	r3, r6, #30
    d9e0:	d507      	bpl.n	d9f2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    d9e2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    d9e4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    d9e8:	fa10 f585 	uxtah	r5, r0, r5
    d9ec:	60a5      	str	r5, [r4, #8]
}
    d9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    d9f2:	4620      	mov	r0, r4
}
    d9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    d9f8:	f013 b916 	b.w	20c28 <net_buf_unref>
    d9fc:	00032ecb 	.word	0x00032ecb
    da00:	00033118 	.word	0x00033118
    da04:	00032f08 	.word	0x00032f08
    da08:	00033131 	.word	0x00033131
    da0c:	0002f358 	.word	0x0002f358

0000da10 <bt_recv>:
{
    da10:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_recv_thread_id == NULL) {
    da12:	4d58      	ldr	r5, [pc, #352]	; (db74 <bt_recv+0x164>)
{
    da14:	b089      	sub	sp, #36	; 0x24
	if (bt_recv_thread_id == NULL) {
    da16:	682b      	ldr	r3, [r5, #0]
{
    da18:	af00      	add	r7, sp, #0
    da1a:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    da1c:	b913      	cbnz	r3, da24 <bt_recv+0x14>
	return z_impl_z_current_get();
    da1e:	f018 fa67 	bl	25ef0 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    da22:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    da24:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    da26:	2b01      	cmp	r3, #1
    da28:	d05e      	beq.n	dae8 <bt_recv+0xd8>
    da2a:	2b03      	cmp	r3, #3
    da2c:	f040 808b 	bne.w	db46 <bt_recv+0x136>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    da30:	89a3      	ldrh	r3, [r4, #12]
    da32:	2b03      	cmp	r3, #3
    da34:	d80c      	bhi.n	da50 <bt_recv+0x40>
    da36:	4a50      	ldr	r2, [pc, #320]	; (db78 <bt_recv+0x168>)
    da38:	4950      	ldr	r1, [pc, #320]	; (db7c <bt_recv+0x16c>)
    da3a:	4851      	ldr	r0, [pc, #324]	; (db80 <bt_recv+0x170>)
    da3c:	f240 13b5 	movw	r3, #437	; 0x1b5
    da40:	f018 ff8c 	bl	2695c <printk>
    da44:	4040      	eors	r0, r0
    da46:	f380 8811 	msr	BASEPRI, r0
    da4a:	f04f 0003 	mov.w	r0, #3
    da4e:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    da50:	2104      	movs	r1, #4
    da52:	f104 0008 	add.w	r0, r4, #8
    da56:	f01f f81b 	bl	2ca90 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    da5a:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    da5c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    da5e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    da60:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    da62:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    da66:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    da68:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    da6a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    da6c:	d017      	beq.n	da9e <bt_recv+0x8e>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    da6e:	4845      	ldr	r0, [pc, #276]	; (db84 <bt_recv+0x174>)
    da70:	6802      	ldr	r2, [r0, #0]
    da72:	0756      	lsls	r6, r2, #29
    da74:	d00f      	beq.n	da96 <bt_recv+0x86>
    da76:	466d      	mov	r5, sp
    da78:	b088      	sub	sp, #32
    da7a:	466a      	mov	r2, sp
    da7c:	4e42      	ldr	r6, [pc, #264]	; (db88 <bt_recv+0x178>)
    da7e:	6193      	str	r3, [r2, #24]
    da80:	2304      	movs	r3, #4
    da82:	e9c2 6104 	strd	r6, r1, [r2, #16]
    da86:	f842 3f0c 	str.w	r3, [r2, #12]!
    da8a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    da8e:	60bb      	str	r3, [r7, #8]
    da90:	f01c fdbf 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    da94:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    da96:	4620      	mov	r0, r4
    da98:	f013 f8c6 	bl	20c28 <net_buf_unref>
    da9c:	e020      	b.n	dae0 <bt_recv+0xd0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    da9e:	f001 fd4f 	bl	f540 <bt_conn_lookup_handle>
	if (!conn) {
    daa2:	4605      	mov	r5, r0
    daa4:	b988      	cbnz	r0, daca <bt_recv+0xba>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    daa6:	4837      	ldr	r0, [pc, #220]	; (db84 <bt_recv+0x174>)
    daa8:	6803      	ldr	r3, [r0, #0]
    daaa:	075d      	lsls	r5, r3, #29
    daac:	d0f3      	beq.n	da96 <bt_recv+0x86>
    daae:	8ae3      	ldrh	r3, [r4, #22]
    dab0:	4a36      	ldr	r2, [pc, #216]	; (db8c <bt_recv+0x17c>)
    dab2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dab6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    daba:	2303      	movs	r3, #3
    dabc:	f107 0214 	add.w	r2, r7, #20
    dac0:	607b      	str	r3, [r7, #4]
    dac2:	617b      	str	r3, [r7, #20]
    dac4:	f01c fda5 	bl	2a612 <z_log_msg2_static_create.constprop.0>
    dac8:	e7e5      	b.n	da96 <bt_recv+0x86>
	acl(buf)->index = bt_conn_index(conn);
    daca:	f001 fe69 	bl	f7a0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    dace:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    dad0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    dad2:	4621      	mov	r1, r4
    dad4:	4628      	mov	r0, r5
    dad6:	f001 fbe5 	bl	f2a4 <bt_conn_recv>
	bt_conn_unref(conn);
    dada:	4628      	mov	r0, r5
    dadc:	f01c ffad 	bl	2aa3a <bt_conn_unref>
		return 0;
    dae0:	2000      	movs	r0, #0
}
    dae2:	3724      	adds	r7, #36	; 0x24
    dae4:	46bd      	mov	sp, r7
    dae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    dae8:	89a3      	ldrh	r3, [r4, #12]
    daea:	2b01      	cmp	r3, #1
    daec:	d80c      	bhi.n	db08 <bt_recv+0xf8>
    daee:	4a22      	ldr	r2, [pc, #136]	; (db78 <bt_recv+0x168>)
    daf0:	4922      	ldr	r1, [pc, #136]	; (db7c <bt_recv+0x16c>)
    daf2:	4823      	ldr	r0, [pc, #140]	; (db80 <bt_recv+0x170>)
    daf4:	f640 1317 	movw	r3, #2327	; 0x917
    daf8:	f018 ff30 	bl	2695c <printk>
    dafc:	4040      	eors	r0, r0
    dafe:	f380 8811 	msr	BASEPRI, r0
    db02:	f04f 0003 	mov.w	r0, #3
    db06:	df02      	svc	2
    db08:	2102      	movs	r1, #2
    db0a:	f104 0008 	add.w	r0, r4, #8
    db0e:	f01e ffbf 	bl	2ca90 <net_buf_simple_pull_mem>
    db12:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    db14:	7800      	ldrb	r0, [r0, #0]
    db16:	f01c fd40 	bl	2a59a <bt_hci_evt_get_flags>
    db1a:	0781      	lsls	r1, r0, #30
    db1c:	d40c      	bmi.n	db38 <bt_recv+0x128>
    db1e:	4a16      	ldr	r2, [pc, #88]	; (db78 <bt_recv+0x168>)
    db20:	491b      	ldr	r1, [pc, #108]	; (db90 <bt_recv+0x180>)
    db22:	4817      	ldr	r0, [pc, #92]	; (db80 <bt_recv+0x170>)
    db24:	f640 131b 	movw	r3, #2331	; 0x91b
    db28:	f018 ff18 	bl	2695c <printk>
    db2c:	4040      	eors	r0, r0
    db2e:	f380 8811 	msr	BASEPRI, r0
    db32:	f04f 0003 	mov.w	r0, #3
    db36:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    db38:	4a16      	ldr	r2, [pc, #88]	; (db94 <bt_recv+0x184>)
    db3a:	7828      	ldrb	r0, [r5, #0]
    db3c:	2306      	movs	r3, #6
    db3e:	4621      	mov	r1, r4
    db40:	f7fe fe7a 	bl	c838 <handle_event>
    db44:	e7a7      	b.n	da96 <bt_recv+0x86>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    db46:	480f      	ldr	r0, [pc, #60]	; (db84 <bt_recv+0x174>)
    db48:	6802      	ldr	r2, [r0, #0]
    db4a:	0752      	lsls	r2, r2, #29
    db4c:	d00b      	beq.n	db66 <bt_recv+0x156>
    db4e:	4a12      	ldr	r2, [pc, #72]	; (db98 <bt_recv+0x188>)
    db50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (bt_buf_get_type(buf)) {
    db54:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    db58:	2303      	movs	r3, #3
    db5a:	f107 0214 	add.w	r2, r7, #20
    db5e:	607b      	str	r3, [r7, #4]
    db60:	617b      	str	r3, [r7, #20]
    db62:	f01c fd56 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    db66:	4620      	mov	r0, r4
    db68:	f013 f85e 	bl	20c28 <net_buf_unref>
		return -EINVAL;
    db6c:	f06f 0015 	mvn.w	r0, #21
    db70:	e7b7      	b.n	dae2 <bt_recv+0xd2>
    db72:	bf00      	nop
    db74:	20002c80 	.word	0x20002c80
    db78:	00032ecb 	.word	0x00032ecb
    db7c:	00033118 	.word	0x00033118
    db80:	00032f08 	.word	0x00032f08
    db84:	20000a48 	.word	0x20000a48
    db88:	0003314a 	.word	0x0003314a
    db8c:	0003316e 	.word	0x0003316e
    db90:	00033190 	.word	0x00033190
    db94:	0002f318 	.word	0x0002f318
    db98:	000331be 	.word	0x000331be

0000db9c <bt_recv_prio>:
{
    db9c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    db9e:	7d03      	ldrb	r3, [r0, #20]
    dba0:	2b01      	cmp	r3, #1
{
    dba2:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    dba4:	d00c      	beq.n	dbc0 <bt_recv_prio+0x24>
    dba6:	4a09      	ldr	r2, [pc, #36]	; (dbcc <bt_recv_prio+0x30>)
    dba8:	4909      	ldr	r1, [pc, #36]	; (dbd0 <bt_recv_prio+0x34>)
    dbaa:	480a      	ldr	r0, [pc, #40]	; (dbd4 <bt_recv_prio+0x38>)
    dbac:	f640 537c 	movw	r3, #3452	; 0xd7c
    dbb0:	f018 fed4 	bl	2695c <printk>
    dbb4:	4040      	eors	r0, r0
    dbb6:	f380 8811 	msr	BASEPRI, r0
    dbba:	f04f 0003 	mov.w	r0, #3
    dbbe:	df02      	svc	2
	hci_event_prio(buf);
    dbc0:	4620      	mov	r0, r4
    dbc2:	f7ff fed3 	bl	d96c <hci_event_prio>
}
    dbc6:	2000      	movs	r0, #0
    dbc8:	bd10      	pop	{r4, pc}
    dbca:	bf00      	nop
    dbcc:	00032ecb 	.word	0x00032ecb
    dbd0:	000331d2 	.word	0x000331d2
    dbd4:	00032f08 	.word	0x00032f08

0000dbd8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    dbd8:	4a08      	ldr	r2, [pc, #32]	; (dbfc <bt_hci_driver_register+0x24>)
{
    dbda:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    dbdc:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
    dbe0:	b930      	cbnz	r0, dbf0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    dbe2:	68d9      	ldr	r1, [r3, #12]
    dbe4:	b139      	cbz	r1, dbf6 <bt_hci_driver_register+0x1e>
    dbe6:	6919      	ldr	r1, [r3, #16]
    dbe8:	b129      	cbz	r1, dbf6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    dbea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
    dbee:	4770      	bx	lr
		return -EALREADY;
    dbf0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    dbf4:	4770      	bx	lr
		return -EINVAL;
    dbf6:	f06f 0015 	mvn.w	r0, #21
}
    dbfa:	4770      	bx	lr
    dbfc:	20000000 	.word	0x20000000

0000dc00 <bt_finalize_init>:
{
    dc00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dc04:	4c3b      	ldr	r4, [pc, #236]	; (dcf4 <bt_finalize_init+0xf4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    dc06:	4e3c      	ldr	r6, [pc, #240]	; (dcf8 <bt_finalize_init+0xf8>)
{
    dc08:	b087      	sub	sp, #28
    dc0a:	2102      	movs	r1, #2
    dc0c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
    dc10:	f01c fcf0 	bl	2a5f4 <atomic_or>
		bt_le_scan_update(false);
    dc14:	2000      	movs	r0, #0
    dc16:	f000 feff 	bl	ea18 <bt_le_scan_update>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    dc1a:	6833      	ldr	r3, [r6, #0]
    dc1c:	f003 0307 	and.w	r3, r3, #7
    dc20:	2b02      	cmp	r3, #2
    dc22:	d913      	bls.n	dc4c <bt_finalize_init+0x4c>
    dc24:	79e2      	ldrb	r2, [r4, #7]
    dc26:	4b35      	ldr	r3, [pc, #212]	; (dcfc <bt_finalize_init+0xfc>)
    dc28:	4d35      	ldr	r5, [pc, #212]	; (dd00 <bt_finalize_init+0x100>)
    dc2a:	4620      	mov	r0, r4
    dc2c:	2a01      	cmp	r2, #1
    dc2e:	bf98      	it	ls
    dc30:	461d      	movls	r5, r3
    dc32:	f7fe fa57 	bl	c0e4 <bt_addr_le_str_real>
    dc36:	4b33      	ldr	r3, [pc, #204]	; (dd04 <bt_finalize_init+0x104>)
    dc38:	9301      	str	r3, [sp, #4]
    dc3a:	2300      	movs	r3, #0
    dc3c:	e9cd 5002 	strd	r5, r0, [sp, #8]
    dc40:	9300      	str	r3, [sp, #0]
    dc42:	2203      	movs	r2, #3
    dc44:	4631      	mov	r1, r6
    dc46:	4618      	mov	r0, r3
    dc48:	f01c fce6 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
		BT_INFO("Identity[%d]: %s",
    dc4c:	4f2e      	ldr	r7, [pc, #184]	; (dd08 <bt_finalize_init+0x108>)
    dc4e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; dcf8 <bt_finalize_init+0xf8>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    dc52:	2501      	movs	r5, #1
		BT_INFO("Identity[%d]: %s",
    dc54:	f04f 0800 	mov.w	r8, #0
	for (i = 1; i < bt_dev.id_count; i++) {
    dc58:	79e2      	ldrb	r2, [r4, #7]
		BT_INFO("Identity[%d]: %s",
    dc5a:	6833      	ldr	r3, [r6, #0]
	for (i = 1; i < bt_dev.id_count; i++) {
    dc5c:	4295      	cmp	r5, r2
		BT_INFO("Identity[%d]: %s",
    dc5e:	f003 0307 	and.w	r3, r3, #7
	for (i = 1; i < bt_dev.id_count; i++) {
    dc62:	db33      	blt.n	dccc <bt_finalize_init+0xcc>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    dc64:	2b02      	cmp	r3, #2
    dc66:	d92e      	bls.n	dcc6 <bt_finalize_init+0xc6>
    dc68:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
    dc6c:	4628      	mov	r0, r5
    dc6e:	f7fe fcd7 	bl	c620 <ver_str>
    dc72:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    dc76:	9305      	str	r3, [sp, #20]
    dc78:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    dc7c:	9002      	str	r0, [sp, #8]
    dc7e:	e9cd 5303 	strd	r5, r3, [sp, #12]
    dc82:	2500      	movs	r5, #0
    dc84:	4b21      	ldr	r3, [pc, #132]	; (dd0c <bt_finalize_init+0x10c>)
    dc86:	9301      	str	r3, [sp, #4]
    dc88:	491b      	ldr	r1, [pc, #108]	; (dcf8 <bt_finalize_init+0xf8>)
    dc8a:	9500      	str	r5, [sp, #0]
    dc8c:	462b      	mov	r3, r5
    dc8e:	2203      	movs	r2, #3
    dc90:	4628      	mov	r0, r5
    dc92:	f01c fcc1 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    dc96:	6833      	ldr	r3, [r6, #0]
    dc98:	f003 0307 	and.w	r3, r3, #7
    dc9c:	2b02      	cmp	r3, #2
    dc9e:	d912      	bls.n	dcc6 <bt_finalize_init+0xc6>
    dca0:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
    dca4:	4630      	mov	r0, r6
    dca6:	f7fe fcbb 	bl	c620 <ver_str>
    dcaa:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    dcae:	9002      	str	r0, [sp, #8]
    dcb0:	e9cd 6303 	strd	r6, r3, [sp, #12]
    dcb4:	4b16      	ldr	r3, [pc, #88]	; (dd10 <bt_finalize_init+0x110>)
    dcb6:	4910      	ldr	r1, [pc, #64]	; (dcf8 <bt_finalize_init+0xf8>)
    dcb8:	e9cd 5300 	strd	r5, r3, [sp]
    dcbc:	2203      	movs	r2, #3
    dcbe:	462b      	mov	r3, r5
    dcc0:	4628      	mov	r0, r5
    dcc2:	f01c fca9 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
}
    dcc6:	b007      	add	sp, #28
    dcc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    dccc:	2b02      	cmp	r3, #2
    dcce:	d90e      	bls.n	dcee <bt_finalize_init+0xee>
    dcd0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    dcd4:	4420      	add	r0, r4
    dcd6:	f7fe fa05 	bl	c0e4 <bt_addr_le_str_real>
    dcda:	2300      	movs	r3, #0
    dcdc:	e9cd 5002 	strd	r5, r0, [sp, #8]
    dce0:	e9cd 8700 	strd	r8, r7, [sp]
    dce4:	2203      	movs	r2, #3
    dce6:	4649      	mov	r1, r9
    dce8:	4618      	mov	r0, r3
    dcea:	f01c fc95 	bl	2a618 <z_log_msg2_runtime_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
    dcee:	3501      	adds	r5, #1
    dcf0:	e7b2      	b.n	dc58 <bt_finalize_init+0x58>
    dcf2:	bf00      	nop
    dcf4:	20000000 	.word	0x20000000
    dcf8:	20000a48 	.word	0x20000a48
    dcfc:	000316c0 	.word	0x000316c0
    dd00:	000331f5 	.word	0x000331f5
    dd04:	000331f9 	.word	0x000331f9
    dd08:	00033208 	.word	0x00033208
    dd0c:	00033219 	.word	0x00033219
    dd10:	00033257 	.word	0x00033257

0000dd14 <init_work>:

static void init_work(struct k_work *work)
{
    dd14:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    dd16:	f7f3 fbb3 	bl	1480 <bt_init>
	if (ready_cb) {
    dd1a:	4b03      	ldr	r3, [pc, #12]	; (dd28 <init_work+0x14>)
    dd1c:	681b      	ldr	r3, [r3, #0]
    dd1e:	b113      	cbz	r3, dd26 <init_work+0x12>
		ready_cb(err);
	}
}
    dd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    dd24:	4718      	bx	r3
}
    dd26:	bd10      	pop	{r4, pc}
    dd28:	20002c9c 	.word	0x20002c9c

0000dd2c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    dd2c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    dd2e:	4d2f      	ldr	r5, [pc, #188]	; (ddec <bt_enable+0xc0>)
    dd30:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
    dd34:	b090      	sub	sp, #64	; 0x40
    dd36:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    dd38:	b983      	cbnz	r3, dd5c <bt_enable+0x30>
		BT_ERR("No HCI driver registered");
    dd3a:	482d      	ldr	r0, [pc, #180]	; (ddf0 <bt_enable+0xc4>)
    dd3c:	6803      	ldr	r3, [r0, #0]
    dd3e:	075a      	lsls	r2, r3, #29
    dd40:	d009      	beq.n	dd56 <bt_enable+0x2a>
    dd42:	4b2c      	ldr	r3, [pc, #176]	; (ddf4 <bt_enable+0xc8>)
    dd44:	930e      	str	r3, [sp, #56]	; 0x38
    dd46:	aa0d      	add	r2, sp, #52	; 0x34
    dd48:	2302      	movs	r3, #2
    dd4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dd4e:	9309      	str	r3, [sp, #36]	; 0x24
    dd50:	930d      	str	r3, [sp, #52]	; 0x34
    dd52:	f01c fc5e 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    dd56:	f06f 0412 	mvn.w	r4, #18
    dd5a:	e036      	b.n	ddca <bt_enable+0x9e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    dd5c:	2101      	movs	r1, #1
    dd5e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    dd62:	f01c fc47 	bl	2a5f4 <atomic_or>
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    dd66:	ea10 0301 	ands.w	r3, r0, r1
    dd6a:	d13c      	bne.n	dde6 <bt_enable+0xba>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    dd6c:	4a22      	ldr	r2, [pc, #136]	; (ddf8 <bt_enable+0xcc>)
    dd6e:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    dd70:	2000      	movs	r0, #0
    dd72:	2100      	movs	r1, #0
    dd74:	f06f 0208 	mvn.w	r2, #8
    dd78:	e9cd 0106 	strd	r0, r1, [sp, #24]
    dd7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    dd80:	e9cd 3300 	strd	r3, r3, [sp]
    dd84:	9304      	str	r3, [sp, #16]
    dd86:	491d      	ldr	r1, [pc, #116]	; (ddfc <bt_enable+0xd0>)
    dd88:	4b1d      	ldr	r3, [pc, #116]	; (de00 <bt_enable+0xd4>)
    dd8a:	481e      	ldr	r0, [pc, #120]	; (de04 <bt_enable+0xd8>)
    dd8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dd90:	f017 fa1c 	bl	251cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    dd94:	491c      	ldr	r1, [pc, #112]	; (de08 <bt_enable+0xdc>)
    dd96:	481b      	ldr	r0, [pc, #108]	; (de04 <bt_enable+0xd8>)
    dd98:	f017 f966 	bl	25068 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
    dd9c:	f7fe fb92 	bl	c4c4 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
    dda0:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    dda4:	68db      	ldr	r3, [r3, #12]
    dda6:	4798      	blx	r3
	if (err) {
    dda8:	4604      	mov	r4, r0
    ddaa:	b188      	cbz	r0, ddd0 <bt_enable+0xa4>
		BT_ERR("HCI driver open failed (%d)", err);
    ddac:	4810      	ldr	r0, [pc, #64]	; (ddf0 <bt_enable+0xc4>)
    ddae:	6803      	ldr	r3, [r0, #0]
    ddb0:	075b      	lsls	r3, r3, #29
    ddb2:	d00a      	beq.n	ddca <bt_enable+0x9e>
    ddb4:	4b15      	ldr	r3, [pc, #84]	; (de0c <bt_enable+0xe0>)
    ddb6:	aa0d      	add	r2, sp, #52	; 0x34
    ddb8:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    ddbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ddc0:	2303      	movs	r3, #3
    ddc2:	9309      	str	r3, [sp, #36]	; 0x24
    ddc4:	930d      	str	r3, [sp, #52]	; 0x34
    ddc6:	f01c fc24 	bl	2a612 <z_log_msg2_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    ddca:	4620      	mov	r0, r4
    ddcc:	b010      	add	sp, #64	; 0x40
    ddce:	bd70      	pop	{r4, r5, r6, pc}
	if (!cb) {
    ddd0:	b926      	cbnz	r6, dddc <bt_enable+0xb0>
}
    ddd2:	b010      	add	sp, #64	; 0x40
    ddd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    ddd8:	f7f3 bb52 	b.w	1480 <bt_init>
	k_work_submit(&bt_dev.init);
    dddc:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    dde0:	f017 fcf4 	bl	257cc <k_work_submit>
	return 0;
    dde4:	e7f1      	b.n	ddca <bt_enable+0x9e>
		return -EALREADY;
    dde6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ddea:	e7ee      	b.n	ddca <bt_enable+0x9e>
    ddec:	20000000 	.word	0x20000000
    ddf0:	20000a48 	.word	0x20000a48
    ddf4:	00033399 	.word	0x00033399
    ddf8:	20002c9c 	.word	0x20002c9c
    ddfc:	200090a0 	.word	0x200090a0
    de00:	0000cac5 	.word	0x0000cac5
    de04:	20001a30 	.word	0x20001a30
    de08:	000333b2 	.word	0x000333b2
    de0c:	000333b8 	.word	0x000333b8

0000de10 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    de10:	4800      	ldr	r0, [pc, #0]	; (de14 <bt_get_name+0x4>)
    de12:	4770      	bx	lr
    de14:	000333d4 	.word	0x000333d4

0000de18 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
    de18:	b5f0      	push	{r4, r5, r6, r7, lr}
    de1a:	4604      	mov	r4, r0
    de1c:	b089      	sub	sp, #36	; 0x24
    de1e:	460e      	mov	r6, r1
    de20:	4617      	mov	r7, r2
	while (ad->len > 1) {
    de22:	88a3      	ldrh	r3, [r4, #4]
    de24:	2b01      	cmp	r3, #1
    de26:	d917      	bls.n	de58 <bt_data_parse+0x40>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
    de28:	4620      	mov	r0, r4
    de2a:	f01e fe39 	bl	2caa0 <net_buf_simple_pull_u8>
		if (len == 0U) {
    de2e:	4605      	mov	r5, r0
    de30:	b190      	cbz	r0, de58 <bt_data_parse+0x40>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
    de32:	88a2      	ldrh	r2, [r4, #4]
    de34:	b283      	uxth	r3, r0
    de36:	429a      	cmp	r2, r3
    de38:	d210      	bcs.n	de5c <bt_data_parse+0x44>
			BT_WARN("Malformed data");
    de3a:	4812      	ldr	r0, [pc, #72]	; (de84 <bt_data_parse+0x6c>)
    de3c:	6803      	ldr	r3, [r0, #0]
    de3e:	f013 0f06 	tst.w	r3, #6
    de42:	d009      	beq.n	de58 <bt_data_parse+0x40>
    de44:	4b10      	ldr	r3, [pc, #64]	; (de88 <bt_data_parse+0x70>)
    de46:	9306      	str	r3, [sp, #24]
    de48:	aa05      	add	r2, sp, #20
    de4a:	2302      	movs	r3, #2
    de4c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    de50:	9301      	str	r3, [sp, #4]
    de52:	9305      	str	r3, [sp, #20]
    de54:	f01c fbdd 	bl	2a612 <z_log_msg2_static_create.constprop.0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
    de58:	b009      	add	sp, #36	; 0x24
    de5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    de5c:	4620      	mov	r0, r4
    de5e:	f01e fe1f 	bl	2caa0 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
    de62:	3d01      	subs	r5, #1
		data.data = ad->data;
    de64:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    de66:	f88d 0008 	strb.w	r0, [sp, #8]
		if (!func(&data, user_data)) {
    de6a:	4639      	mov	r1, r7
    de6c:	a802      	add	r0, sp, #8
		data.data_len = len - 1;
    de6e:	f88d 5009 	strb.w	r5, [sp, #9]
		data.data = ad->data;
    de72:	9303      	str	r3, [sp, #12]
		if (!func(&data, user_data)) {
    de74:	47b0      	blx	r6
    de76:	2800      	cmp	r0, #0
    de78:	d0ee      	beq.n	de58 <bt_data_parse+0x40>
		net_buf_simple_pull(ad, len - 1);
    de7a:	4629      	mov	r1, r5
    de7c:	4620      	mov	r0, r4
    de7e:	f01e fdff 	bl	2ca80 <net_buf_simple_pull>
    de82:	e7ce      	b.n	de22 <bt_data_parse+0xa>
    de84:	20000a48 	.word	0x20000a48
    de88:	000333fc 	.word	0x000333fc

0000de8c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    de8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    de8e:	4f0b      	ldr	r7, [pc, #44]	; (debc <id_find+0x30>)
{
    de90:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    de92:	2500      	movs	r5, #0
    de94:	79fb      	ldrb	r3, [r7, #7]
    de96:	b2ec      	uxtb	r4, r5
    de98:	42a3      	cmp	r3, r4
    de9a:	d802      	bhi.n	dea2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    de9c:	f06f 0401 	mvn.w	r4, #1
    dea0:	e009      	b.n	deb6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    dea2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    dea6:	2207      	movs	r2, #7
    dea8:	4439      	add	r1, r7
    deaa:	4630      	mov	r0, r6
    deac:	f01c fa2d 	bl	2a30a <memcmp>
    deb0:	3501      	adds	r5, #1
    deb2:	2800      	cmp	r0, #0
    deb4:	d1ee      	bne.n	de94 <id_find+0x8>
}
    deb6:	4620      	mov	r0, r4
    deb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    deba:	bf00      	nop
    debc:	20000000 	.word	0x20000000

0000dec0 <le_rpa_invalidate>:
    dec0:	4b06      	ldr	r3, [pc, #24]	; (dedc <le_rpa_invalidate+0x1c>)
    dec2:	f3bf 8f5b 	dmb	ish
    dec6:	e853 2f00 	ldrex	r2, [r3]
    deca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    dece:	e843 2100 	strex	r1, r2, [r3]
    ded2:	2900      	cmp	r1, #0
    ded4:	d1f7      	bne.n	dec6 <le_rpa_invalidate+0x6>
    ded6:	f3bf 8f5b 	dmb	ish
}
    deda:	4770      	bx	lr
    dedc:	200000cc 	.word	0x200000cc

0000dee0 <hci_id_add>:
{
    dee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dee4:	4605      	mov	r5, r0
    dee6:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    dee8:	f242 0027 	movw	r0, #8231	; 0x2027
    deec:	2127      	movs	r1, #39	; 0x27
{
    deee:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    def0:	f7fe ff9c 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    def4:	4604      	mov	r4, r0
    def6:	b1f8      	cbz	r0, df38 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
    def8:	2127      	movs	r1, #39	; 0x27
    defa:	3008      	adds	r0, #8
    defc:	f01e fd97 	bl	2ca2e <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    df00:	4641      	mov	r1, r8
    df02:	4606      	mov	r6, r0
    df04:	f01c fc6c 	bl	2a7e0 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    df08:	4639      	mov	r1, r7
    df0a:	2210      	movs	r2, #16
    df0c:	1df0      	adds	r0, r6, #7
    df0e:	f01c fa25 	bl	2a35c <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
    df12:	2210      	movs	r2, #16
    df14:	f44f 71ac 	mov.w	r1, #344	; 0x158
    df18:	fb12 1505 	smlabb	r5, r2, r5, r1
    df1c:	4908      	ldr	r1, [pc, #32]	; (df40 <hci_id_add+0x60>)
    df1e:	f106 0017 	add.w	r0, r6, #23
    df22:	4429      	add	r1, r5
    df24:	f01c fa1a 	bl	2a35c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    df28:	4621      	mov	r1, r4
    df2a:	2200      	movs	r2, #0
}
    df2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    df30:	f242 0027 	movw	r0, #8231	; 0x2027
    df34:	f7ff b8ea 	b.w	d10c <bt_hci_cmd_send_sync>
}
    df38:	f06f 0068 	mvn.w	r0, #104	; 0x68
    df3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df40:	20000000 	.word	0x20000000

0000df44 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    df44:	4b03      	ldr	r3, [pc, #12]	; (df54 <atomic_get.constprop.0+0x10>)
    df46:	f3bf 8f5b 	dmb	ish
    df4a:	6818      	ldr	r0, [r3, #0]
    df4c:	f3bf 8f5b 	dmb	ish
}
    df50:	4770      	bx	lr
    df52:	bf00      	nop
    df54:	200000cc 	.word	0x200000cc

0000df58 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
    df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    df5c:	2100      	movs	r1, #0
    df5e:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
    df60:	b088      	sub	sp, #32
    df62:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    df64:	4608      	mov	r0, r1
    df66:	f001 fd8d 	bl	fa84 <bt_conn_lookup_state_le>
	if (conn) {
    df6a:	4602      	mov	r2, r0
    df6c:	b1a8      	cbz	r0, df9a <bt_id_add.part.0+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    df6e:	f3bf 8f5b 	dmb	ish
    df72:	4b62      	ldr	r3, [pc, #392]	; (e0fc <bt_id_add.part.0+0x1a4>)
    df74:	e853 2f00 	ldrex	r2, [r3]
    df78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    df7c:	e843 2100 	strex	r1, r2, [r3]
    df80:	2900      	cmp	r1, #0
    df82:	d1f7      	bne.n	df74 <bt_id_add.part.0+0x1c>
    df84:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    df88:	7a23      	ldrb	r3, [r4, #8]
    df8a:	f043 0301 	orr.w	r3, r3, #1
    df8e:	7223      	strb	r3, [r4, #8]
}
    df90:	b008      	add	sp, #32
    df92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    df96:	f01c bd50 	b.w	2aa3a <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    df9a:	f7ff ffd3 	bl	df44 <atomic_get.constprop.0>
	if (scan_enabled) {
    df9e:	0685      	lsls	r5, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    dfa0:	f3c0 1740 	ubfx	r7, r0, #5, #1
    dfa4:	d502      	bpl.n	dfac <bt_id_add.part.0+0x54>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    dfa6:	4610      	mov	r0, r2
    dfa8:	f01c fc8a 	bl	2a8c0 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
    dfac:	4d54      	ldr	r5, [pc, #336]	; (e100 <bt_id_add.part.0+0x1a8>)
    dfae:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    dfb2:	b18b      	cbz	r3, dfd8 <bt_id_add.part.0+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    dfb4:	2000      	movs	r0, #0
    dfb6:	f01c fc24 	bl	2a802 <addr_res_enable>
		if (err) {
    dfba:	b168      	cbz	r0, dfd8 <bt_id_add.part.0+0x80>
			BT_WARN("Failed to disable address resolution");
    dfbc:	4851      	ldr	r0, [pc, #324]	; (e104 <bt_id_add.part.0+0x1ac>)
    dfbe:	6803      	ldr	r3, [r0, #0]
    dfc0:	f013 0f06 	tst.w	r3, #6
    dfc4:	d03d      	beq.n	e042 <bt_id_add.part.0+0xea>
    dfc6:	4b50      	ldr	r3, [pc, #320]	; (e108 <bt_id_add.part.0+0x1b0>)
		BT_WARN("Set privacy mode command is not supported");
    dfc8:	9306      	str	r3, [sp, #24]
    dfca:	2302      	movs	r3, #2
    dfcc:	9301      	str	r3, [sp, #4]
    dfce:	9305      	str	r3, [sp, #20]
    dfd0:	aa05      	add	r2, sp, #20
    dfd2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    dfd6:	e028      	b.n	e02a <bt_id_add.part.0+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    dfd8:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    dfdc:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    dfe0:	429a      	cmp	r2, r3
    dfe2:	d139      	bne.n	e058 <bt_id_add.part.0+0x100>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    dfe4:	4e47      	ldr	r6, [pc, #284]	; (e104 <bt_id_add.part.0+0x1ac>)
    dfe6:	6833      	ldr	r3, [r6, #0]
    dfe8:	f013 0f06 	tst.w	r3, #6
    dfec:	d00a      	beq.n	e004 <bt_id_add.part.0+0xac>
    dfee:	4b47      	ldr	r3, [pc, #284]	; (e10c <bt_id_add.part.0+0x1b4>)
    dff0:	9306      	str	r3, [sp, #24]
    dff2:	aa05      	add	r2, sp, #20
    dff4:	2302      	movs	r3, #2
    dff6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    dffa:	4630      	mov	r0, r6
    dffc:	9301      	str	r3, [sp, #4]
    dffe:	9305      	str	r3, [sp, #20]
    e000:	f01c fbfc 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    e004:	2200      	movs	r2, #0
    e006:	4611      	mov	r1, r2
    e008:	f242 0029 	movw	r0, #8233	; 0x2029
    e00c:	f7ff f87e 	bl	d10c <bt_hci_cmd_send_sync>
		if (err) {
    e010:	b170      	cbz	r0, e030 <bt_id_add.part.0+0xd8>
			BT_ERR("Failed to clear resolution list");
    e012:	6833      	ldr	r3, [r6, #0]
    e014:	0758      	lsls	r0, r3, #29
    e016:	d014      	beq.n	e042 <bt_id_add.part.0+0xea>
    e018:	4b3d      	ldr	r3, [pc, #244]	; (e110 <bt_id_add.part.0+0x1b8>)
    e01a:	9306      	str	r3, [sp, #24]
    e01c:	4839      	ldr	r0, [pc, #228]	; (e104 <bt_id_add.part.0+0x1ac>)
    e01e:	2302      	movs	r3, #2
    e020:	9301      	str	r3, [sp, #4]
    e022:	9305      	str	r3, [sp, #20]
    e024:	aa05      	add	r2, sp, #20
    e026:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Failed to set privacy mode");
    e02a:	f01c fbe7 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
    e02e:	e008      	b.n	e042 <bt_id_add.part.0+0xea>
		bt_dev.le.rl_entries++;
    e030:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    e034:	3301      	adds	r3, #1
    e036:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    e03a:	7a23      	ldrb	r3, [r4, #8]
    e03c:	f043 0304 	orr.w	r3, r3, #4
    e040:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    e042:	2001      	movs	r0, #1
    e044:	f01c fbdd 	bl	2a802 <addr_res_enable>
	if (scan_enabled) {
    e048:	2f00      	cmp	r7, #0
    e04a:	d053      	beq.n	e0f4 <bt_id_add.part.0+0x19c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    e04c:	2001      	movs	r0, #1
}
    e04e:	b008      	add	sp, #32
    e050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    e054:	f01c bc34 	b.w	2a8c0 <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    e058:	4622      	mov	r2, r4
    e05a:	f104 0801 	add.w	r8, r4, #1
    e05e:	f812 0b2a 	ldrb.w	r0, [r2], #42
    e062:	4641      	mov	r1, r8
    e064:	f7ff ff3c 	bl	dee0 <hci_id_add>
	if (err) {
    e068:	4606      	mov	r6, r0
    e06a:	b160      	cbz	r0, e086 <bt_id_add.part.0+0x12e>
		BT_ERR("Failed to add IRK to controller");
    e06c:	4825      	ldr	r0, [pc, #148]	; (e104 <bt_id_add.part.0+0x1ac>)
    e06e:	6803      	ldr	r3, [r0, #0]
    e070:	0759      	lsls	r1, r3, #29
    e072:	d0e6      	beq.n	e042 <bt_id_add.part.0+0xea>
    e074:	4b27      	ldr	r3, [pc, #156]	; (e114 <bt_id_add.part.0+0x1bc>)
		BT_ERR("Failed to set privacy mode");
    e076:	9306      	str	r3, [sp, #24]
    e078:	2302      	movs	r3, #2
    e07a:	9301      	str	r3, [sp, #4]
    e07c:	9305      	str	r3, [sp, #20]
    e07e:	aa05      	add	r2, sp, #20
    e080:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e084:	e7d1      	b.n	e02a <bt_id_add.part.0+0xd2>
	bt_dev.le.rl_entries++;
    e086:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    e08a:	3301      	adds	r3, #1
    e08c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
    e090:	7a23      	ldrb	r3, [r4, #8]
    e092:	f043 0304 	orr.w	r3, r3, #4
    e096:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    e098:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    e09c:	075a      	lsls	r2, r3, #29
    e09e:	d406      	bmi.n	e0ae <bt_id_add.part.0+0x156>
		BT_WARN("Set privacy mode command is not supported");
    e0a0:	4818      	ldr	r0, [pc, #96]	; (e104 <bt_id_add.part.0+0x1ac>)
    e0a2:	6803      	ldr	r3, [r0, #0]
    e0a4:	f013 0f06 	tst.w	r3, #6
    e0a8:	d0cb      	beq.n	e042 <bt_id_add.part.0+0xea>
    e0aa:	4b1b      	ldr	r3, [pc, #108]	; (e118 <bt_id_add.part.0+0x1c0>)
    e0ac:	e78c      	b.n	dfc8 <bt_id_add.part.0+0x70>
	bt_addr_le_copy(&cp.id_addr, addr);
    e0ae:	4641      	mov	r1, r8
    e0b0:	a802      	add	r0, sp, #8
    e0b2:	f01c fb95 	bl	2a7e0 <bt_addr_le_copy>
	cp.mode = mode;
    e0b6:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    e0b8:	2108      	movs	r1, #8
    e0ba:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    e0be:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    e0c2:	f7fe feb3 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    e0c6:	4604      	mov	r4, r0
    e0c8:	b928      	cbnz	r0, e0d6 <bt_id_add.part.0+0x17e>
		BT_ERR("Failed to set privacy mode");
    e0ca:	480e      	ldr	r0, [pc, #56]	; (e104 <bt_id_add.part.0+0x1ac>)
    e0cc:	6803      	ldr	r3, [r0, #0]
    e0ce:	075b      	lsls	r3, r3, #29
    e0d0:	d0b7      	beq.n	e042 <bt_id_add.part.0+0xea>
    e0d2:	4b12      	ldr	r3, [pc, #72]	; (e11c <bt_id_add.part.0+0x1c4>)
    e0d4:	e7cf      	b.n	e076 <bt_id_add.part.0+0x11e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e0d6:	2208      	movs	r2, #8
    e0d8:	eb0d 0102 	add.w	r1, sp, r2
    e0dc:	4410      	add	r0, r2
    e0de:	f01e fcac 	bl	2ca3a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    e0e2:	4632      	mov	r2, r6
    e0e4:	4621      	mov	r1, r4
    e0e6:	f242 004e 	movw	r0, #8270	; 0x204e
    e0ea:	f7ff f80f 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    e0ee:	2800      	cmp	r0, #0
    e0f0:	d0a7      	beq.n	e042 <bt_id_add.part.0+0xea>
    e0f2:	e7ea      	b.n	e0ca <bt_id_add.part.0+0x172>
}
    e0f4:	b008      	add	sp, #32
    e0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0fa:	bf00      	nop
    e0fc:	200000cc 	.word	0x200000cc
    e100:	20000000 	.word	0x20000000
    e104:	20000a50 	.word	0x20000a50
    e108:	00033435 	.word	0x00033435
    e10c:	0003345a 	.word	0x0003345a
    e110:	0003348b 	.word	0x0003348b
    e114:	000334ab 	.word	0x000334ab
    e118:	000334cb 	.word	0x000334cb
    e11c:	000334f5 	.word	0x000334f5

0000e120 <set_random_address>:
{
    e120:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    e122:	4914      	ldr	r1, [pc, #80]	; (e174 <set_random_address+0x54>)
    e124:	2206      	movs	r2, #6
    e126:	4605      	mov	r5, r0
    e128:	f01c f8ef 	bl	2a30a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e12c:	4604      	mov	r4, r0
    e12e:	b1e0      	cbz	r0, e16a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e130:	2106      	movs	r1, #6
    e132:	f242 0005 	movw	r0, #8197	; 0x2005
    e136:	f7fe fe79 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    e13a:	4604      	mov	r4, r0
    e13c:	b1b8      	cbz	r0, e16e <set_random_address+0x4e>
    e13e:	2206      	movs	r2, #6
    e140:	4629      	mov	r1, r5
    e142:	3008      	adds	r0, #8
    e144:	f01e fc79 	bl	2ca3a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e148:	4621      	mov	r1, r4
    e14a:	2200      	movs	r2, #0
    e14c:	f242 0005 	movw	r0, #8197	; 0x2005
    e150:	f7fe ffdc 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    e154:	4604      	mov	r4, r0
    e156:	b940      	cbnz	r0, e16a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    e158:	2206      	movs	r2, #6
    e15a:	4806      	ldr	r0, [pc, #24]	; (e174 <set_random_address+0x54>)
    e15c:	4629      	mov	r1, r5
    e15e:	f01c f8fd 	bl	2a35c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e162:	4b05      	ldr	r3, [pc, #20]	; (e178 <set_random_address+0x58>)
    e164:	2201      	movs	r2, #1
    e166:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    e16a:	4620      	mov	r0, r4
    e16c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    e16e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e172:	e7fa      	b.n	e16a <set_random_address+0x4a>
    e174:	20000061 	.word	0x20000061
    e178:	20000000 	.word	0x20000000

0000e17c <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
    e17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e17e:	4604      	mov	r4, r0
    e180:	b087      	sub	sp, #28
    e182:	4615      	mov	r5, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e184:	460e      	mov	r6, r1
    e186:	b359      	cbz	r1, e1e0 <id_create+0x64>
    e188:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    e18a:	2207      	movs	r2, #7
    e18c:	4669      	mov	r1, sp
    e18e:	4630      	mov	r0, r6
    e190:	9300      	str	r3, [sp, #0]
    e192:	f8cd 3003 	str.w	r3, [sp, #3]
    e196:	f01c f8b8 	bl	2a30a <memcmp>
    e19a:	b308      	cbz	r0, e1e0 <id_create+0x64>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e19c:	4822      	ldr	r0, [pc, #136]	; (e228 <id_create+0xac>)
    e19e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e1a2:	4631      	mov	r1, r6
    e1a4:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e1a6:	f01c fb1b 	bl	2a7e0 <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
    e1aa:	f44f 70ac 	mov.w	r0, #344	; 0x158
    e1ae:	2610      	movs	r6, #16
    e1b0:	fb16 0404 	smlabb	r4, r6, r4, r0
    e1b4:	481c      	ldr	r0, [pc, #112]	; (e228 <id_create+0xac>)
		uint8_t zero_irk[16] = { 0 };
    e1b6:	2300      	movs	r3, #0
    e1b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e1bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
    e1c0:	4404      	add	r4, r0
		if (irk && memcmp(irk, zero_irk, 16)) {
    e1c2:	b325      	cbz	r5, e20e <id_create+0x92>
    e1c4:	4632      	mov	r2, r6
    e1c6:	a902      	add	r1, sp, #8
    e1c8:	4628      	mov	r0, r5
    e1ca:	f01c f89e 	bl	2a30a <memcmp>
    e1ce:	b1f0      	cbz	r0, e20e <id_create+0x92>
			memcpy(&bt_dev.irk[id], irk, 16);
    e1d0:	4632      	mov	r2, r6
    e1d2:	4629      	mov	r1, r5
    e1d4:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
    e1d6:	f01c f8c1 	bl	2a35c <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    e1da:	2000      	movs	r0, #0
}
    e1dc:	b007      	add	sp, #28
    e1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_addr_le_create_static(&new_addr);
    e1e0:	a802      	add	r0, sp, #8
    e1e2:	f01c f9cc 	bl	2a57e <bt_addr_le_create_static>
			if (err) {
    e1e6:	2800      	cmp	r0, #0
    e1e8:	d1f8      	bne.n	e1dc <id_create+0x60>
		} while (id_find(&new_addr) >= 0);
    e1ea:	a802      	add	r0, sp, #8
    e1ec:	f7ff fe4e 	bl	de8c <id_find>
    e1f0:	2800      	cmp	r0, #0
    e1f2:	daf5      	bge.n	e1e0 <id_create+0x64>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e1f4:	480c      	ldr	r0, [pc, #48]	; (e228 <id_create+0xac>)
    e1f6:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    e1fa:	4407      	add	r7, r0
    e1fc:	a902      	add	r1, sp, #8
    e1fe:	4638      	mov	r0, r7
    e200:	f01c faee 	bl	2a7e0 <bt_addr_le_copy>
		if (addr) {
    e204:	2e00      	cmp	r6, #0
    e206:	d0d0      	beq.n	e1aa <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e208:	4639      	mov	r1, r7
    e20a:	4630      	mov	r0, r6
    e20c:	e7cb      	b.n	e1a6 <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
    e20e:	2110      	movs	r1, #16
    e210:	4620      	mov	r0, r4
    e212:	f009 ffcd 	bl	181b0 <bt_rand>
			if (err) {
    e216:	2800      	cmp	r0, #0
    e218:	d1e0      	bne.n	e1dc <id_create+0x60>
			if (irk) {
    e21a:	2d00      	cmp	r5, #0
    e21c:	d0dd      	beq.n	e1da <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    e21e:	2210      	movs	r2, #16
    e220:	4621      	mov	r1, r4
    e222:	4628      	mov	r0, r5
    e224:	e7d7      	b.n	e1d6 <id_create+0x5a>
    e226:	bf00      	nop
    e228:	20000000 	.word	0x20000000

0000e22c <bt_id_set_private_addr>:
{
    e22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e22e:	4602      	mov	r2, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e230:	f7ff fe88 	bl	df44 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    e234:	04c3      	lsls	r3, r0, #19
    e236:	d425      	bmi.n	e284 <bt_id_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    e238:	f44f 73ac 	mov.w	r3, #344	; 0x158
    e23c:	4d12      	ldr	r5, [pc, #72]	; (e288 <bt_id_set_private_addr+0x5c>)
    e23e:	eb03 1002 	add.w	r0, r3, r2, lsl #4
    e242:	4669      	mov	r1, sp
    e244:	4428      	add	r0, r5
    e246:	f01c f8f8 	bl	2a43a <bt_rpa_create>
	if (!err) {
    e24a:	4604      	mov	r4, r0
    e24c:	b988      	cbnz	r0, e272 <bt_id_set_private_addr+0x46>
		err = set_random_address(&rpa);
    e24e:	4668      	mov	r0, sp
    e250:	f7ff ff66 	bl	e120 <set_random_address>
		if (!err) {
    e254:	4604      	mov	r4, r0
    e256:	b960      	cbnz	r0, e272 <bt_id_set_private_addr+0x46>
    e258:	f3bf 8f5b 	dmb	ish
    e25c:	35cc      	adds	r5, #204	; 0xcc
    e25e:	e855 3f00 	ldrex	r3, [r5]
    e262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e266:	e845 3200 	strex	r2, r3, [r5]
    e26a:	2a00      	cmp	r2, #0
    e26c:	d1f7      	bne.n	e25e <bt_id_set_private_addr+0x32>
    e26e:	f3bf 8f5b 	dmb	ish
	(void)k_work_schedule(&bt_dev.rpa_update, RPA_TIMEOUT);
    e272:	4806      	ldr	r0, [pc, #24]	; (e28c <bt_id_set_private_addr+0x60>)
    e274:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    e278:	2300      	movs	r3, #0
    e27a:	f017 fb0f 	bl	2589c <k_work_schedule>
}
    e27e:	4620      	mov	r0, r4
    e280:	b003      	add	sp, #12
    e282:	bd30      	pop	{r4, r5, pc}
		return 0;
    e284:	2400      	movs	r4, #0
    e286:	e7fa      	b.n	e27e <bt_id_set_private_addr+0x52>
    e288:	20000000 	.word	0x20000000
    e28c:	20000168 	.word	0x20000168

0000e290 <le_update_private_addr>:
{
    e290:	b510      	push	{r4, lr}
    e292:	b088      	sub	sp, #32
    e294:	f7ff fe56 	bl	df44 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    e298:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e29a:	f3c0 1440 	ubfx	r4, r0, #5, #1
    e29e:	d502      	bpl.n	e2a6 <le_update_private_addr+0x16>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    e2a0:	2000      	movs	r0, #0
    e2a2:	f01c fb0d 	bl	2a8c0 <bt_le_scan_set_enable>
	err = bt_id_set_private_addr(id);
    e2a6:	2000      	movs	r0, #0
    e2a8:	f7ff ffc0 	bl	e22c <bt_id_set_private_addr>
	if (err) {
    e2ac:	4603      	mov	r3, r0
    e2ae:	b188      	cbz	r0, e2d4 <le_update_private_addr+0x44>
		BT_WARN("Failed to update RPA address (%d)", err);
    e2b0:	480c      	ldr	r0, [pc, #48]	; (e2e4 <le_update_private_addr+0x54>)
    e2b2:	6802      	ldr	r2, [r0, #0]
    e2b4:	f012 0f06 	tst.w	r2, #6
    e2b8:	d00a      	beq.n	e2d0 <le_update_private_addr+0x40>
    e2ba:	4a0b      	ldr	r2, [pc, #44]	; (e2e8 <le_update_private_addr+0x58>)
    e2bc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e2c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e2c4:	2303      	movs	r3, #3
    e2c6:	aa05      	add	r2, sp, #20
    e2c8:	9301      	str	r3, [sp, #4]
    e2ca:	9305      	str	r3, [sp, #20]
    e2cc:	f01c fa96 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
}
    e2d0:	b008      	add	sp, #32
    e2d2:	bd10      	pop	{r4, pc}
	if (scan_enabled) {
    e2d4:	2c00      	cmp	r4, #0
    e2d6:	d0fb      	beq.n	e2d0 <le_update_private_addr+0x40>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    e2d8:	2001      	movs	r0, #1
}
    e2da:	b008      	add	sp, #32
    e2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    e2e0:	f01c baee 	b.w	2a8c0 <bt_le_scan_set_enable>
    e2e4:	20000a50 	.word	0x20000a50
    e2e8:	00033510 	.word	0x00033510

0000e2ec <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e2ec:	4b0a      	ldr	r3, [pc, #40]	; (e318 <bt_id_pending_keys_update+0x2c>)
    e2ee:	f3bf 8f5b 	dmb	ish
    e2f2:	e853 2f00 	ldrex	r2, [r3]
    e2f6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
    e2fa:	e843 1000 	strex	r0, r1, [r3]
    e2fe:	2800      	cmp	r0, #0
    e300:	d1f7      	bne.n	e2f2 <bt_id_pending_keys_update+0x6>
    e302:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    e306:	0493      	lsls	r3, r2, #18
    e308:	d504      	bpl.n	e314 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_ALL, pending_id_update, NULL);
    e30a:	4904      	ldr	r1, [pc, #16]	; (e31c <bt_id_pending_keys_update+0x30>)
    e30c:	2200      	movs	r2, #0
    e30e:	203f      	movs	r0, #63	; 0x3f
    e310:	f006 bc9a 	b.w	14c48 <bt_keys_foreach>
}
    e314:	4770      	bx	lr
    e316:	bf00      	nop
    e318:	200000cc 	.word	0x200000cc
    e31c:	0002a883 	.word	0x0002a883

0000e320 <bt_id_add>:
{
    e320:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    e322:	490a      	ldr	r1, [pc, #40]	; (e34c <bt_id_add+0x2c>)
    e324:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
    e328:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
    e32c:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    e32e:	b10c      	cbz	r4, e334 <bt_id_add+0x14>
    e330:	4294      	cmp	r4, r2
    e332:	d208      	bcs.n	e346 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    e334:	3201      	adds	r2, #1
    e336:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    e33a:	7a1a      	ldrb	r2, [r3, #8]
}
    e33c:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
    e33e:	f042 0204 	orr.w	r2, r2, #4
    e342:	721a      	strb	r2, [r3, #8]
}
    e344:	4770      	bx	lr
    e346:	bc10      	pop	{r4}
    e348:	f7ff be06 	b.w	df58 <bt_id_add.part.0>
    e34c:	20000000 	.word	0x20000000

0000e350 <bt_id_del>:
{
    e350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    e354:	4c4f      	ldr	r4, [pc, #316]	; (e494 <bt_id_del+0x144>)
    e356:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    e35a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
    e35e:	b089      	sub	sp, #36	; 0x24
    e360:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    e362:	b112      	cbz	r2, e36a <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    e364:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    e366:	4293      	cmp	r3, r2
    e368:	dd09      	ble.n	e37e <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
    e36a:	3b01      	subs	r3, #1
    e36c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    e370:	7a2b      	ldrb	r3, [r5, #8]
    e372:	f023 0304 	bic.w	r3, r3, #4
    e376:	722b      	strb	r3, [r5, #8]
}
    e378:	b009      	add	sp, #36	; 0x24
    e37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    e37e:	2100      	movs	r1, #0
    e380:	2206      	movs	r2, #6
    e382:	4608      	mov	r0, r1
    e384:	f001 fb7e 	bl	fa84 <bt_conn_lookup_state_le>
	if (conn) {
    e388:	4602      	mov	r2, r0
    e38a:	b1a8      	cbz	r0, e3b8 <bt_id_del+0x68>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e38c:	f3bf 8f5b 	dmb	ish
    e390:	34cc      	adds	r4, #204	; 0xcc
    e392:	e854 3f00 	ldrex	r3, [r4]
    e396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e39a:	e844 3200 	strex	r2, r3, [r4]
    e39e:	2a00      	cmp	r2, #0
    e3a0:	d1f7      	bne.n	e392 <bt_id_del+0x42>
    e3a2:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    e3a6:	7a2b      	ldrb	r3, [r5, #8]
    e3a8:	f043 0302 	orr.w	r3, r3, #2
    e3ac:	722b      	strb	r3, [r5, #8]
}
    e3ae:	b009      	add	sp, #36	; 0x24
    e3b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    e3b4:	f01c bb41 	b.w	2aa3a <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e3b8:	f7ff fdc4 	bl	df44 <atomic_get.constprop.0>
	if (scan_enabled) {
    e3bc:	0681      	lsls	r1, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e3be:	f3c0 1840 	ubfx	r8, r0, #5, #1
    e3c2:	d502      	bpl.n	e3ca <bt_id_del+0x7a>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    e3c4:	4610      	mov	r0, r2
    e3c6:	f01c fa7b 	bl	2a8c0 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    e3ca:	2000      	movs	r0, #0
    e3cc:	f01c fa19 	bl	2a802 <addr_res_enable>
	if (err) {
    e3d0:	4606      	mov	r6, r0
    e3d2:	b178      	cbz	r0, e3f4 <bt_id_del+0xa4>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    e3d4:	4830      	ldr	r0, [pc, #192]	; (e498 <bt_id_del+0x148>)
    e3d6:	6803      	ldr	r3, [r0, #0]
    e3d8:	075a      	lsls	r2, r3, #29
    e3da:	d01d      	beq.n	e418 <bt_id_del+0xc8>
    e3dc:	4b2f      	ldr	r3, [pc, #188]	; (e49c <bt_id_del+0x14c>)
    e3de:	e9cd 3606 	strd	r3, r6, [sp, #24]
    e3e2:	2303      	movs	r3, #3
    e3e4:	9301      	str	r3, [sp, #4]
    e3e6:	9305      	str	r3, [sp, #20]
    e3e8:	aa05      	add	r2, sp, #20
    e3ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Failed to remove IRK from controller");
    e3ee:	f01c fa05 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
    e3f2:	e011      	b.n	e418 <bt_id_del+0xc8>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    e3f4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    e3f8:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    e3fc:	429a      	cmp	r2, r3
    e3fe:	d21a      	bcs.n	e436 <bt_id_del+0xe6>
		bt_dev.le.rl_entries--;
    e400:	3b01      	subs	r3, #1
    e402:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    e406:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
    e408:	4925      	ldr	r1, [pc, #148]	; (e4a0 <bt_id_del+0x150>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    e40a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
    e40e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    e410:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
    e412:	203f      	movs	r0, #63	; 0x3f
    e414:	f006 fc18 	bl	14c48 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    e418:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    e41c:	b113      	cbz	r3, e424 <bt_id_del+0xd4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    e41e:	2001      	movs	r0, #1
    e420:	f01c f9ef 	bl	2a802 <addr_res_enable>
	if (scan_enabled) {
    e424:	f1b8 0f00 	cmp.w	r8, #0
    e428:	d0a6      	beq.n	e378 <bt_id_del+0x28>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    e42a:	2001      	movs	r0, #1
}
    e42c:	b009      	add	sp, #36	; 0x24
    e42e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    e432:	f01c ba45 	b.w	2a8c0 <bt_le_scan_set_enable>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    e436:	2107      	movs	r1, #7
    e438:	f242 0028 	movw	r0, #8232	; 0x2028
    e43c:	f7fe fcf6 	bl	ce2c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    e440:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
    e444:	4607      	mov	r7, r0
    e446:	b960      	cbnz	r0, e462 <bt_id_del+0x112>
		BT_ERR("Failed to remove IRK from controller");
    e448:	4813      	ldr	r0, [pc, #76]	; (e498 <bt_id_del+0x148>)
    e44a:	6803      	ldr	r3, [r0, #0]
    e44c:	075b      	lsls	r3, r3, #29
    e44e:	d0e3      	beq.n	e418 <bt_id_del+0xc8>
    e450:	4b14      	ldr	r3, [pc, #80]	; (e4a4 <bt_id_del+0x154>)
    e452:	9306      	str	r3, [sp, #24]
    e454:	2302      	movs	r3, #2
    e456:	9301      	str	r3, [sp, #4]
    e458:	9305      	str	r3, [sp, #20]
    e45a:	aa05      	add	r2, sp, #20
    e45c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e460:	e7c5      	b.n	e3ee <bt_id_del+0x9e>
	return net_buf_simple_add(&buf->b, len);
    e462:	2107      	movs	r1, #7
    e464:	3008      	adds	r0, #8
    e466:	f01e fae2 	bl	2ca2e <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    e46a:	4649      	mov	r1, r9
    e46c:	f01c f9b8 	bl	2a7e0 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    e470:	4632      	mov	r2, r6
    e472:	4639      	mov	r1, r7
    e474:	f242 0028 	movw	r0, #8232	; 0x2028
    e478:	f7fe fe48 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    e47c:	2800      	cmp	r0, #0
    e47e:	d1e3      	bne.n	e448 <bt_id_del+0xf8>
	bt_dev.le.rl_entries--;
    e480:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    e484:	3b01      	subs	r3, #1
    e486:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
    e48a:	7a2b      	ldrb	r3, [r5, #8]
    e48c:	f023 0304 	bic.w	r3, r3, #4
    e490:	722b      	strb	r3, [r5, #8]
    e492:	e7c1      	b.n	e418 <bt_id_del+0xc8>
    e494:	20000000 	.word	0x20000000
    e498:	20000a50 	.word	0x20000a50
    e49c:	00033532 	.word	0x00033532
    e4a0:	0002a7e7 	.word	0x0002a7e7
    e4a4:	0003355f 	.word	0x0003355f

0000e4a8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    e4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4aa:	460e      	mov	r6, r1
    e4ac:	b08b      	sub	sp, #44	; 0x2c
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e4ae:	4605      	mov	r5, r0
    e4b0:	b930      	cbnz	r0, e4c0 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    e4b2:	4f2f      	ldr	r7, [pc, #188]	; (e570 <bt_id_create+0xc8>)
    e4b4:	79fb      	ldrb	r3, [r7, #7]
    e4b6:	2b01      	cmp	r3, #1
    e4b8:	d12e      	bne.n	e518 <bt_id_create+0x70>
		return -ENOMEM;
    e4ba:	f06f 000b 	mvn.w	r0, #11
    e4be:	e029      	b.n	e514 <bt_id_create+0x6c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e4c0:	2300      	movs	r3, #0
    e4c2:	2207      	movs	r2, #7
    e4c4:	a902      	add	r1, sp, #8
    e4c6:	9302      	str	r3, [sp, #8]
    e4c8:	f8cd 300b 	str.w	r3, [sp, #11]
    e4cc:	f01b ff1d 	bl	2a30a <memcmp>
    e4d0:	2800      	cmp	r0, #0
    e4d2:	d0ee      	beq.n	e4b2 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    e4d4:	782b      	ldrb	r3, [r5, #0]
    e4d6:	2b01      	cmp	r3, #1
    e4d8:	d104      	bne.n	e4e4 <bt_id_create+0x3c>
    e4da:	79ab      	ldrb	r3, [r5, #6]
    e4dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e4e0:	2bc0      	cmp	r3, #192	; 0xc0
    e4e2:	d010      	beq.n	e506 <bt_id_create+0x5e>
			BT_ERR("Only static random identity address supported");
    e4e4:	4823      	ldr	r0, [pc, #140]	; (e574 <bt_id_create+0xcc>)
    e4e6:	6803      	ldr	r3, [r0, #0]
    e4e8:	075b      	lsls	r3, r3, #29
    e4ea:	d009      	beq.n	e500 <bt_id_create+0x58>
    e4ec:	4b22      	ldr	r3, [pc, #136]	; (e578 <bt_id_create+0xd0>)
    e4ee:	9308      	str	r3, [sp, #32]
    e4f0:	aa07      	add	r2, sp, #28
    e4f2:	2302      	movs	r3, #2
    e4f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e4f8:	9301      	str	r3, [sp, #4]
    e4fa:	9307      	str	r3, [sp, #28]
    e4fc:	f01c f97e 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
    e500:	f06f 0015 	mvn.w	r0, #21
    e504:	e006      	b.n	e514 <bt_id_create+0x6c>
		if (id_find(addr) >= 0) {
    e506:	4628      	mov	r0, r5
    e508:	f7ff fcc0 	bl	de8c <id_find>
    e50c:	2800      	cmp	r0, #0
    e50e:	dbd0      	blt.n	e4b2 <bt_id_create+0xa>
			return -EALREADY;
    e510:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    e514:	b00b      	add	sp, #44	; 0x2c
    e516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e518:	f7ff fd14 	bl	df44 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e51c:	f010 0001 	ands.w	r0, r0, #1
    e520:	d119      	bne.n	e556 <bt_id_create+0xae>
		uint8_t zero_irk[16] = { 0 };
    e522:	e9cd 0004 	strd	r0, r0, [sp, #16]
    e526:	e9cd 0006 	strd	r0, r0, [sp, #24]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    e52a:	2d00      	cmp	r5, #0
    e52c:	d0e8      	beq.n	e500 <bt_id_create+0x58>
    e52e:	9002      	str	r0, [sp, #8]
    e530:	2207      	movs	r2, #7
    e532:	f8cd 000b 	str.w	r0, [sp, #11]
    e536:	a902      	add	r1, sp, #8
    e538:	4628      	mov	r0, r5
    e53a:	f01b fee6 	bl	2a30a <memcmp>
    e53e:	2800      	cmp	r0, #0
    e540:	d0de      	beq.n	e500 <bt_id_create+0x58>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    e542:	2e00      	cmp	r6, #0
    e544:	d0dc      	beq.n	e500 <bt_id_create+0x58>
		    !(irk && memcmp(irk, zero_irk, 16))) {
    e546:	2210      	movs	r2, #16
    e548:	eb0d 0102 	add.w	r1, sp, r2
    e54c:	4630      	mov	r0, r6
    e54e:	f01b fedc 	bl	2a30a <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    e552:	2800      	cmp	r0, #0
    e554:	d0d4      	beq.n	e500 <bt_id_create+0x58>
	new_id = bt_dev.id_count++;
    e556:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
    e558:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
    e55a:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    e55c:	4629      	mov	r1, r5
    e55e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    e560:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
    e562:	f7ff fe0b 	bl	e17c <id_create>
	new_id = bt_dev.id_count++;
    e566:	2800      	cmp	r0, #0
    e568:	bf08      	it	eq
    e56a:	4620      	moveq	r0, r4
    e56c:	e7d2      	b.n	e514 <bt_id_create+0x6c>
    e56e:	bf00      	nop
    e570:	20000000 	.word	0x20000000
    e574:	20000a50 	.word	0x20000a50
    e578:	00033584 	.word	0x00033584

0000e57c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    e57c:	b570      	push	{r4, r5, r6, lr}
    e57e:	b08a      	sub	sp, #40	; 0x28
    e580:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    e582:	aa01      	add	r2, sp, #4
    e584:	2100      	movs	r1, #0
    e586:	f241 0009 	movw	r0, #4105	; 0x1009
    e58a:	f7fe fdbf 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    e58e:	4604      	mov	r4, r0
    e590:	b188      	cbz	r0, e5b6 <bt_id_read_public_addr+0x3a>
		BT_WARN("Failed to read public address");
    e592:	4821      	ldr	r0, [pc, #132]	; (e618 <bt_id_read_public_addr+0x9c>)
    e594:	6803      	ldr	r3, [r0, #0]
    e596:	f013 0306 	ands.w	r3, r3, #6
    e59a:	d03b      	beq.n	e614 <bt_id_read_public_addr+0x98>
    e59c:	4b1f      	ldr	r3, [pc, #124]	; (e61c <bt_id_read_public_addr+0xa0>)
    e59e:	9308      	str	r3, [sp, #32]
    e5a0:	aa07      	add	r2, sp, #28
    e5a2:	2302      	movs	r3, #2
    e5a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e5a8:	9302      	str	r3, [sp, #8]
    e5aa:	9307      	str	r3, [sp, #28]
    e5ac:	f01c f926 	bl	2a7fc <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    e5b0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    e5b2:	b00a      	add	sp, #40	; 0x28
    e5b4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e5b6:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e5b8:	689d      	ldr	r5, [r3, #8]
    e5ba:	9002      	str	r0, [sp, #8]
    e5bc:	3501      	adds	r5, #1
    e5be:	f8ad 000c 	strh.w	r0, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    e5c2:	2206      	movs	r2, #6
    e5c4:	a902      	add	r1, sp, #8
    e5c6:	4628      	mov	r0, r5
    e5c8:	f01b fe9f 	bl	2a30a <memcmp>
    e5cc:	b918      	cbnz	r0, e5d6 <bt_id_read_public_addr+0x5a>
		net_buf_unref(rsp);
    e5ce:	9801      	ldr	r0, [sp, #4]
    e5d0:	f012 fb2a 	bl	20c28 <net_buf_unref>
    e5d4:	e7ec      	b.n	e5b0 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    e5d6:	23ff      	movs	r3, #255	; 0xff
    e5d8:	2206      	movs	r2, #6
    e5da:	a904      	add	r1, sp, #16
    e5dc:	4628      	mov	r0, r5
    e5de:	f88d 3010 	strb.w	r3, [sp, #16]
    e5e2:	f88d 3011 	strb.w	r3, [sp, #17]
    e5e6:	f88d 3012 	strb.w	r3, [sp, #18]
    e5ea:	f88d 3013 	strb.w	r3, [sp, #19]
    e5ee:	f88d 3014 	strb.w	r3, [sp, #20]
    e5f2:	f88d 3015 	strb.w	r3, [sp, #21]
    e5f6:	f01b fe88 	bl	2a30a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e5fa:	2800      	cmp	r0, #0
    e5fc:	d0e7      	beq.n	e5ce <bt_id_read_public_addr+0x52>
	memcpy(dst, src, sizeof(*dst));
    e5fe:	2206      	movs	r2, #6
    e600:	4629      	mov	r1, r5
    e602:	1c70      	adds	r0, r6, #1
    e604:	f01b feaa 	bl	2a35c <memcpy>
	net_buf_unref(rsp);
    e608:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    e60a:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    e60c:	f012 fb0c 	bl	20c28 <net_buf_unref>
	return 1U;
    e610:	2001      	movs	r0, #1
    e612:	e7ce      	b.n	e5b2 <bt_id_read_public_addr+0x36>
		return 0U;
    e614:	4618      	mov	r0, r3
    e616:	e7cc      	b.n	e5b2 <bt_id_read_public_addr+0x36>
    e618:	20000a50 	.word	0x20000a50
    e61c:	000335b2 	.word	0x000335b2

0000e620 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    e620:	b510      	push	{r4, lr}
    e622:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    e624:	a802      	add	r0, sp, #8
    e626:	f7ff ffa9 	bl	e57c <bt_id_read_public_addr>
    e62a:	4c1f      	ldr	r4, [pc, #124]	; (e6a8 <bt_setup_public_id_addr+0x88>)
    e62c:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
    e62e:	b360      	cbz	r0, e68a <bt_setup_public_id_addr+0x6a>
	memset(ir, 0, 16);
    e630:	2210      	movs	r2, #16
    e632:	2100      	movs	r1, #0
    e634:	eb0d 0002 	add.w	r0, sp, r2
    e638:	f01b fe9b 	bl	2a372 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    e63c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    e640:	079b      	lsls	r3, r3, #30
    e642:	d515      	bpl.n	e670 <bt_setup_public_id_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    e644:	466a      	mov	r2, sp
    e646:	2100      	movs	r1, #0
    e648:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    e64c:	f7fe fd5e 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    e650:	b1e8      	cbz	r0, e68e <bt_setup_public_id_addr+0x6e>
		BT_WARN("Failed to read identity root");
    e652:	4816      	ldr	r0, [pc, #88]	; (e6ac <bt_setup_public_id_addr+0x8c>)
    e654:	6803      	ldr	r3, [r0, #0]
    e656:	f013 0f06 	tst.w	r3, #6
    e65a:	d009      	beq.n	e670 <bt_setup_public_id_addr+0x50>
    e65c:	4b14      	ldr	r3, [pc, #80]	; (e6b0 <bt_setup_public_id_addr+0x90>)
    e65e:	930c      	str	r3, [sp, #48]	; 0x30
    e660:	aa0b      	add	r2, sp, #44	; 0x2c
    e662:	2302      	movs	r3, #2
    e664:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e668:	9301      	str	r3, [sp, #4]
    e66a:	930b      	str	r3, [sp, #44]	; 0x2c
    e66c:	f01c f8c6 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
    e670:	ac08      	add	r4, sp, #32
    e672:	4621      	mov	r1, r4
    e674:	a804      	add	r0, sp, #16
    e676:	f01d fffb 	bl	2c670 <bt_smp_irk_get>
		irk = ir_irk;
    e67a:	2800      	cmp	r0, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    e67c:	bf0c      	ite	eq
    e67e:	4622      	moveq	r2, r4
    e680:	2200      	movne	r2, #0
    e682:	a902      	add	r1, sp, #8
    e684:	2000      	movs	r0, #0
    e686:	f7ff fd79 	bl	e17c <id_create>
}
    e68a:	b00e      	add	sp, #56	; 0x38
    e68c:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
    e68e:	9b00      	ldr	r3, [sp, #0]
	memcpy(ir, rp->ir, 16);
    e690:	6899      	ldr	r1, [r3, #8]
    e692:	2210      	movs	r2, #16
    e694:	3101      	adds	r1, #1
    e696:	eb0d 0002 	add.w	r0, sp, r2
    e69a:	f01b fe5f 	bl	2a35c <memcpy>
	net_buf_unref(rsp);
    e69e:	9800      	ldr	r0, [sp, #0]
    e6a0:	f012 fac2 	bl	20c28 <net_buf_unref>
    e6a4:	e7e4      	b.n	e670 <bt_setup_public_id_addr+0x50>
    e6a6:	bf00      	nop
    e6a8:	20000000 	.word	0x20000000
    e6ac:	20000a50 	.word	0x20000a50
    e6b0:	000335d0 	.word	0x000335d0

0000e6b4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    e6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e6b8:	4b2a      	ldr	r3, [pc, #168]	; (e764 <bt_read_static_addr+0xb0>)
    e6ba:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    e6be:	f014 0401 	ands.w	r4, r4, #1
{
    e6c2:	b088      	sub	sp, #32
    e6c4:	4607      	mov	r7, r0
    e6c6:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e6c8:	d114      	bne.n	e6f4 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
    e6ca:	4827      	ldr	r0, [pc, #156]	; (e768 <bt_read_static_addr+0xb4>)
    e6cc:	6803      	ldr	r3, [r0, #0]
    e6ce:	f013 0f06 	tst.w	r3, #6
    e6d2:	d104      	bne.n	e6de <bt_read_static_addr+0x2a>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
		return 0;
    e6d4:	2400      	movs	r4, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    e6d6:	4620      	mov	r0, r4
    e6d8:	b008      	add	sp, #32
    e6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Read Static Addresses command not available");
    e6de:	4b23      	ldr	r3, [pc, #140]	; (e76c <bt_read_static_addr+0xb8>)
		BT_WARN("No static addresses stored in controller");
    e6e0:	9306      	str	r3, [sp, #24]
    e6e2:	aa05      	add	r2, sp, #20
    e6e4:	2302      	movs	r3, #2
    e6e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e6ea:	9301      	str	r3, [sp, #4]
    e6ec:	9305      	str	r3, [sp, #20]
    e6ee:	f01c f885 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
    e6f2:	e7f0      	b.n	e6d6 <bt_read_static_addr+0x22>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    e6f4:	466a      	mov	r2, sp
    e6f6:	2100      	movs	r1, #0
    e6f8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    e6fc:	f7fe fd06 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    e700:	4605      	mov	r5, r0
    e702:	b178      	cbz	r0, e724 <bt_read_static_addr+0x70>
		BT_WARN("Failed to read static addresses");
    e704:	4818      	ldr	r0, [pc, #96]	; (e768 <bt_read_static_addr+0xb4>)
    e706:	6803      	ldr	r3, [r0, #0]
    e708:	f013 0f06 	tst.w	r3, #6
    e70c:	d0e2      	beq.n	e6d4 <bt_read_static_addr+0x20>
    e70e:	4b18      	ldr	r3, [pc, #96]	; (e770 <bt_read_static_addr+0xbc>)
    e710:	9306      	str	r3, [sp, #24]
    e712:	aa05      	add	r2, sp, #20
    e714:	2302      	movs	r3, #2
    e716:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e71a:	9301      	str	r3, [sp, #4]
    e71c:	9305      	str	r3, [sp, #20]
    e71e:	f01c f86d 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
    e722:	e7d7      	b.n	e6d4 <bt_read_static_addr+0x20>
	rp = (void *)rsp->data;
    e724:	9b00      	ldr	r3, [sp, #0]
    e726:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    e728:	785c      	ldrb	r4, [r3, #1]
    e72a:	42b4      	cmp	r4, r6
    e72c:	bf28      	it	cs
    e72e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    e730:	f04f 0816 	mov.w	r8, #22
    e734:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    e736:	42ac      	cmp	r4, r5
    e738:	dc0b      	bgt.n	e752 <bt_read_static_addr+0x9e>
	net_buf_unref(rsp);
    e73a:	9800      	ldr	r0, [sp, #0]
    e73c:	f012 fa74 	bl	20c28 <net_buf_unref>
	if (!cnt) {
    e740:	2c00      	cmp	r4, #0
    e742:	d1c8      	bne.n	e6d6 <bt_read_static_addr+0x22>
		BT_WARN("No static addresses stored in controller");
    e744:	4808      	ldr	r0, [pc, #32]	; (e768 <bt_read_static_addr+0xb4>)
    e746:	6803      	ldr	r3, [r0, #0]
    e748:	f013 0f06 	tst.w	r3, #6
    e74c:	d0c2      	beq.n	e6d4 <bt_read_static_addr+0x20>
    e74e:	4b09      	ldr	r3, [pc, #36]	; (e774 <bt_read_static_addr+0xc0>)
    e750:	e7c6      	b.n	e6e0 <bt_read_static_addr+0x2c>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    e752:	fb08 7005 	mla	r0, r8, r5, r7
    e756:	2216      	movs	r2, #22
    e758:	4631      	mov	r1, r6
    e75a:	f01b fdff 	bl	2a35c <memcpy>
	for (i = 0; i < cnt; i++) {
    e75e:	3501      	adds	r5, #1
    e760:	e7e9      	b.n	e736 <bt_read_static_addr+0x82>
    e762:	bf00      	nop
    e764:	20000000 	.word	0x20000000
    e768:	20000a50 	.word	0x20000a50
    e76c:	000335ed 	.word	0x000335ed
    e770:	00033619 	.word	0x00033619
    e774:	00033639 	.word	0x00033639

0000e778 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    e778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    e77c:	4f1d      	ldr	r7, [pc, #116]	; (e7f4 <bt_setup_random_id_addr+0x7c>)
    e77e:	79fc      	ldrb	r4, [r7, #7]
{
    e780:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    e782:	bb7c      	cbnz	r4, e7e4 <bt_setup_random_id_addr+0x6c>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    e784:	2101      	movs	r1, #1
    e786:	a806      	add	r0, sp, #24
    e788:	f7ff ff94 	bl	e6b4 <bt_read_static_addr>
    e78c:	71f8      	strb	r0, [r7, #7]

		if (bt_dev.id_count) {
    e78e:	b348      	cbz	r0, e7e4 <bt_setup_random_id_addr+0x6c>
    e790:	f04f 0916 	mov.w	r9, #22
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    e794:	f10d 0808 	add.w	r8, sp, #8
    e798:	b2e5      	uxtb	r5, r4
    e79a:	fb09 f605 	mul.w	r6, r9, r5
    e79e:	ab06      	add	r3, sp, #24
    e7a0:	1db0      	adds	r0, r6, #6
    e7a2:	4641      	mov	r1, r8
    e7a4:	4418      	add	r0, r3
    e7a6:	f01d ff63 	bl	2c670 <bt_smp_irk_get>
    e7aa:	ab06      	add	r3, sp, #24
					irk = ir_irk;
    e7ac:	2800      	cmp	r0, #0
    e7ae:	bf0c      	ite	eq
    e7b0:	46c2      	moveq	sl, r8
    e7b2:	f04f 0a00 	movne.w	sl, #0
    e7b6:	1999      	adds	r1, r3, r6
    e7b8:	2206      	movs	r2, #6
    e7ba:	f10d 0001 	add.w	r0, sp, #1
    e7be:	f01b fdcd 	bl	2a35c <memcpy>
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
				addr.type = BT_ADDR_LE_RANDOM;
    e7c2:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    e7c4:	4652      	mov	r2, sl
    e7c6:	4669      	mov	r1, sp
    e7c8:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    e7ca:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    e7ce:	f7ff fcd5 	bl	e17c <id_create>
				if (err) {
    e7d2:	b920      	cbnz	r0, e7de <bt_setup_random_id_addr+0x66>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    e7d4:	79fa      	ldrb	r2, [r7, #7]
    e7d6:	3401      	adds	r4, #1
    e7d8:	b2e3      	uxtb	r3, r4
    e7da:	429a      	cmp	r2, r3
    e7dc:	d8dc      	bhi.n	e798 <bt_setup_random_id_addr+0x20>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    e7de:	b00c      	add	sp, #48	; 0x30
    e7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_id_create(NULL, NULL);
    e7e4:	2100      	movs	r1, #0
    e7e6:	4608      	mov	r0, r1
}
    e7e8:	b00c      	add	sp, #48	; 0x30
    e7ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
    e7ee:	f7ff be5b 	b.w	e4a8 <bt_id_create>
    e7f2:	bf00      	nop
    e7f4:	20000000 	.word	0x20000000

0000e7f8 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    e7f8:	b510      	push	{r4, lr}
    e7fa:	460c      	mov	r4, r1
    e7fc:	b08a      	sub	sp, #40	; 0x28
	int err;

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		if (use_filter || rpa_timeout_valid_check()) {
    e7fe:	b128      	cbz	r0, e80c <bt_id_set_create_conn_own_addr+0x14>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    e800:	2000      	movs	r0, #0
    e802:	f7ff fd13 	bl	e22c <bt_id_set_private_addr>
			if (err) {
    e806:	b1d0      	cbz	r0, e83e <bt_id_set_create_conn_own_addr+0x46>

		*own_addr_type = addr->type;
	}

	return 0;
}
    e808:	b00a      	add	sp, #40	; 0x28
    e80a:	bd10      	pop	{r4, pc}
	return z_timeout_remaining(&dwork->timeout);
    e80c:	4812      	ldr	r0, [pc, #72]	; (e858 <bt_id_set_create_conn_own_addr+0x60>)
    e80e:	f01f f99e 	bl	2db4e <z_timeout_remaining>
    e812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e816:	fba0 3003 	umull	r3, r0, r0, r3
    e81a:	0bdb      	lsrs	r3, r3, #15
    e81c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return remaining_ms > (10 * bt_dev.create_param.timeout);
    e820:	480e      	ldr	r0, [pc, #56]	; (e85c <bt_id_set_create_conn_own_addr+0x64>)
    e822:	8a82      	ldrh	r2, [r0, #20]
    e824:	210a      	movs	r1, #10
    e826:	434a      	muls	r2, r1
		if (use_filter || rpa_timeout_valid_check()) {
    e828:	429a      	cmp	r2, r3
    e82a:	d3e9      	bcc.n	e800 <bt_id_set_create_conn_own_addr+0x8>
	k_work_cancel_delayable_sync(&bt_dev.rpa_update, &sync);
    e82c:	4669      	mov	r1, sp
    e82e:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    e832:	f01f f838 	bl	2d8a6 <k_work_cancel_delayable_sync>
	le_rpa_invalidate();
    e836:	f7ff fb43 	bl	dec0 <le_rpa_invalidate>
	le_update_private_addr();
    e83a:	f7ff fd29 	bl	e290 <le_update_private_addr>
		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    e83e:	4b07      	ldr	r3, [pc, #28]	; (e85c <bt_id_set_create_conn_own_addr+0x64>)
    e840:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
    e844:	f010 0040 	ands.w	r0, r0, #64	; 0x40
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    e848:	bf17      	itett	ne
    e84a:	2303      	movne	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e84c:	2301      	moveq	r3, #1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    e84e:	7023      	strbne	r3, [r4, #0]
	return 0;
    e850:	2000      	movne	r0, #0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e852:	bf08      	it	eq
    e854:	7023      	strbeq	r3, [r4, #0]
    e856:	e7d7      	b.n	e808 <bt_id_set_create_conn_own_addr+0x10>
    e858:	20000178 	.word	0x20000178
    e85c:	20000000 	.word	0x20000000

0000e860 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    e860:	b510      	push	{r4, lr}
	int err;

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
    e862:	2000      	movs	r0, #0
{
    e864:	460c      	mov	r4, r1
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
    e866:	f7ff fce1 	bl	e22c <bt_id_set_private_addr>
		if (err) {
    e86a:	b938      	cbnz	r0, e87c <bt_id_set_scan_own_addr+0x1c>
			return err;
		}

		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    e86c:	4b04      	ldr	r3, [pc, #16]	; (e880 <bt_id_set_scan_own_addr+0x20>)
    e86e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    e872:	065b      	lsls	r3, r3, #25
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    e874:	bf4c      	ite	mi
    e876:	2303      	movmi	r3, #3
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e878:	2301      	movpl	r3, #1
    e87a:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
    e87c:	bd10      	pop	{r4, pc}
    e87e:	bf00      	nop
    e880:	20000000 	.word	0x20000000

0000e884 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    e884:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e886:	4d18      	ldr	r5, [pc, #96]	; (e8e8 <bt_id_init+0x64>)
    e888:	79eb      	ldrb	r3, [r5, #7]
{
    e88a:	b089      	sub	sp, #36	; 0x24
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e88c:	bb33      	cbnz	r3, e8dc <bt_id_init+0x58>
		BT_DBG("No user identity. Trying to set public.");

		err = bt_setup_public_id_addr();
    e88e:	f7ff fec7 	bl	e620 <bt_setup_public_id_addr>
		if (err) {
    e892:	4604      	mov	r4, r0
    e894:	b180      	cbz	r0, e8b8 <bt_id_init+0x34>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
		BT_DBG("No public address. Trying to set static random.");

		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to set identity address");
    e896:	4815      	ldr	r0, [pc, #84]	; (e8ec <bt_id_init+0x68>)
    e898:	6803      	ldr	r3, [r0, #0]
    e89a:	075a      	lsls	r2, r3, #29
    e89c:	d009      	beq.n	e8b2 <bt_id_init+0x2e>
    e89e:	4b14      	ldr	r3, [pc, #80]	; (e8f0 <bt_id_init+0x6c>)
		 * is a random address, it needs a valid value, even though it's
		 * not actually used.
		 */
		err = set_random_address(&bt_dev.id_addr[0].a);
		if (err) {
			BT_ERR("Unable to set random address");
    e8a0:	9306      	str	r3, [sp, #24]
    e8a2:	aa05      	add	r2, sp, #20
    e8a4:	2302      	movs	r3, #2
    e8a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e8aa:	9301      	str	r3, [sp, #4]
    e8ac:	9305      	str	r3, [sp, #20]
    e8ae:	f01b ffa5 	bl	2a7fc <z_log_msg2_static_create.constprop.0>
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
    e8b2:	4620      	mov	r0, r4
    e8b4:	b009      	add	sp, #36	; 0x24
    e8b6:	bd30      	pop	{r4, r5, pc}
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e8b8:	79eb      	ldrb	r3, [r5, #7]
    e8ba:	b97b      	cbnz	r3, e8dc <bt_id_init+0x58>
		err = bt_setup_random_id_addr();
    e8bc:	f7ff ff5c 	bl	e778 <bt_setup_random_id_addr>
		if (err) {
    e8c0:	4604      	mov	r4, r0
    e8c2:	2800      	cmp	r0, #0
    e8c4:	d1e7      	bne.n	e896 <bt_id_init+0x12>
		err = set_random_address(&bt_dev.id_addr[0].a);
    e8c6:	1c68      	adds	r0, r5, #1
    e8c8:	f7ff fc2a 	bl	e120 <set_random_address>
		if (err) {
    e8cc:	4604      	mov	r4, r0
    e8ce:	b128      	cbz	r0, e8dc <bt_id_init+0x58>
			BT_ERR("Unable to set random address");
    e8d0:	4806      	ldr	r0, [pc, #24]	; (e8ec <bt_id_init+0x68>)
    e8d2:	6803      	ldr	r3, [r0, #0]
    e8d4:	075b      	lsls	r3, r3, #29
    e8d6:	d0ec      	beq.n	e8b2 <bt_id_init+0x2e>
    e8d8:	4b06      	ldr	r3, [pc, #24]	; (e8f4 <bt_id_init+0x70>)
    e8da:	e7e1      	b.n	e8a0 <bt_id_init+0x1c>
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
    e8dc:	4906      	ldr	r1, [pc, #24]	; (e8f8 <bt_id_init+0x74>)
    e8de:	4807      	ldr	r0, [pc, #28]	; (e8fc <bt_id_init+0x78>)
    e8e0:	f01e ffc1 	bl	2d866 <k_work_init_delayable>
	return 0;
    e8e4:	2400      	movs	r4, #0
    e8e6:	e7e4      	b.n	e8b2 <bt_id_init+0x2e>
    e8e8:	20000000 	.word	0x20000000
    e8ec:	20000a50 	.word	0x20000a50
    e8f0:	00033662 	.word	0x00033662
    e8f4:	00033681 	.word	0x00033681
    e8f8:	0002a843 	.word	0x0002a843
    e8fc:	20000168 	.word	0x20000168

0000e900 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    e900:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e902:	2102      	movs	r1, #2
{
    e904:	b087      	sub	sp, #28
    e906:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e908:	f242 000c 	movw	r0, #8204	; 0x200c
    e90c:	f7fe fa8e 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    e910:	4605      	mov	r5, r0
    e912:	b318      	cbz	r0, e95c <bt_le_scan_set_enable_legacy+0x5c>
    e914:	2102      	movs	r1, #2
    e916:	3008      	adds	r0, #8
    e918:	f01e f889 	bl	2ca2e <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    e91c:	2c01      	cmp	r4, #1
    e91e:	d11b      	bne.n	e958 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e920:	f3bf 8f5b 	dmb	ish
    e924:	4b0f      	ldr	r3, [pc, #60]	; (e964 <bt_le_scan_set_enable_legacy+0x64>)
    e926:	681b      	ldr	r3, [r3, #0]
    e928:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e92c:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    e930:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    e932:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    e934:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    e936:	425c      	negs	r4, r3
    e938:	415c      	adcs	r4, r3
    e93a:	4a0a      	ldr	r2, [pc, #40]	; (e964 <bt_le_scan_set_enable_legacy+0x64>)
    e93c:	9400      	str	r4, [sp, #0]
    e93e:	a903      	add	r1, sp, #12
    e940:	4628      	mov	r0, r5
    e942:	2305      	movs	r3, #5
    e944:	f7fe fa60 	bl	ce08 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e948:	2200      	movs	r2, #0
    e94a:	4629      	mov	r1, r5
    e94c:	f242 000c 	movw	r0, #8204	; 0x200c
    e950:	f7fe fbdc 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    e954:	b007      	add	sp, #28
    e956:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    e958:	2300      	movs	r3, #0
    e95a:	e7e9      	b.n	e930 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    e95c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e960:	e7f8      	b.n	e954 <bt_le_scan_set_enable_legacy+0x54>
    e962:	bf00      	nop
    e964:	200000cc 	.word	0x200000cc

0000e968 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    e968:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e96a:	4605      	mov	r5, r0
    e96c:	4614      	mov	r4, r2
    e96e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    e970:	2207      	movs	r2, #7
    e972:	2100      	movs	r1, #0
    e974:	4668      	mov	r0, sp
    e976:	f01b fcfc 	bl	2a372 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    e97a:	2300      	movs	r3, #0
    e97c:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    e980:	1e6b      	subs	r3, r5, #1
    e982:	4258      	negs	r0, r3
    e984:	f10d 0105 	add.w	r1, sp, #5
    e988:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    e98a:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    e98e:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    e992:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    e996:	f7ff ff63 	bl	e860 <bt_id_set_scan_own_addr>
	if (err) {
    e99a:	4604      	mov	r4, r0
    e99c:	bb38      	cbnz	r0, e9ee <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    e99e:	2107      	movs	r1, #7
    e9a0:	f242 000b 	movw	r0, #8203	; 0x200b
    e9a4:	f7fe fa42 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    e9a8:	4606      	mov	r6, r0
    e9aa:	b348      	cbz	r0, ea00 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e9ac:	2207      	movs	r2, #7
    e9ae:	4669      	mov	r1, sp
    e9b0:	3008      	adds	r0, #8
    e9b2:	f01e f842 	bl	2ca3a <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    e9b6:	4622      	mov	r2, r4
    e9b8:	4631      	mov	r1, r6
    e9ba:	f242 000b 	movw	r0, #8203	; 0x200b
    e9be:	f7fe fba5 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    e9c2:	4604      	mov	r4, r0
    e9c4:	b998      	cbnz	r0, e9ee <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    e9c6:	2001      	movs	r0, #1
    e9c8:	f7ff ff9a 	bl	e900 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    e9cc:	4604      	mov	r4, r0
    e9ce:	b970      	cbnz	r0, e9ee <start_le_scan_legacy+0x86>
	if (val) {
    e9d0:	2d01      	cmp	r5, #1
    e9d2:	d10f      	bne.n	e9f4 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e9d4:	f3bf 8f5b 	dmb	ish
    e9d8:	4b0b      	ldr	r3, [pc, #44]	; (ea08 <start_le_scan_legacy+0xa0>)
    e9da:	e853 2f00 	ldrex	r2, [r3]
    e9de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e9e2:	e843 2100 	strex	r1, r2, [r3]
    e9e6:	2900      	cmp	r1, #0
    e9e8:	d1f7      	bne.n	e9da <start_le_scan_legacy+0x72>
    e9ea:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    e9ee:	4620      	mov	r0, r4
    e9f0:	b002      	add	sp, #8
    e9f2:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e9f4:	f06f 0180 	mvn.w	r1, #128	; 0x80
    e9f8:	4803      	ldr	r0, [pc, #12]	; (ea08 <start_le_scan_legacy+0xa0>)
    e9fa:	f01b ff52 	bl	2a8a2 <atomic_and>
    e9fe:	e7f6      	b.n	e9ee <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    ea00:	f06f 0468 	mvn.w	r4, #104	; 0x68
    ea04:	e7f3      	b.n	e9ee <start_le_scan_legacy+0x86>
    ea06:	bf00      	nop
    ea08:	200000cc 	.word	0x200000cc

0000ea0c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    ea0c:	4b01      	ldr	r3, [pc, #4]	; (ea14 <bt_scan_reset+0x8>)
    ea0e:	2200      	movs	r2, #0
    ea10:	601a      	str	r2, [r3, #0]
}
    ea12:	4770      	bx	lr
    ea14:	20002ca8 	.word	0x20002ca8

0000ea18 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    ea18:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ea1a:	4b23      	ldr	r3, [pc, #140]	; (eaa8 <bt_le_scan_update+0x90>)
    ea1c:	f3bf 8f5b 	dmb	ish
    ea20:	681a      	ldr	r2, [r3, #0]
    ea22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ea26:	f012 0f40 	tst.w	r2, #64	; 0x40
{
    ea2a:	4605      	mov	r5, r0
    ea2c:	461e      	mov	r6, r3
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ea2e:	f3c2 1080 	ubfx	r0, r2, #6, #1
    ea32:	d001      	beq.n	ea38 <bt_le_scan_update+0x20>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    ea34:	2000      	movs	r0, #0
    ea36:	e032      	b.n	ea9e <bt_le_scan_update+0x86>
    ea38:	f3bf 8f5b 	dmb	ish
    ea3c:	681b      	ldr	r3, [r3, #0]
    ea3e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ea42:	069b      	lsls	r3, r3, #26
    ea44:	d427      	bmi.n	ea96 <bt_le_scan_update+0x7e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ea46:	2100      	movs	r1, #0
    ea48:	2206      	movs	r2, #6
    ea4a:	4608      	mov	r0, r1
    ea4c:	f001 f81a 	bl	fa84 <bt_conn_lookup_state_le>
		if (conn) {
    ea50:	4604      	mov	r4, r0
    ea52:	bb28      	cbnz	r0, eaa0 <bt_le_scan_update+0x88>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ea54:	2202      	movs	r2, #2
    ea56:	4601      	mov	r1, r0
    ea58:	f001 f814 	bl	fa84 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    ea5c:	2800      	cmp	r0, #0
    ea5e:	d0e9      	beq.n	ea34 <bt_le_scan_update+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ea60:	f3bf 8f5b 	dmb	ish
    ea64:	e856 3f00 	ldrex	r3, [r6]
    ea68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ea6c:	e846 3200 	strex	r2, r3, [r6]
    ea70:	2a00      	cmp	r2, #0
    ea72:	d1f7      	bne.n	ea64 <bt_le_scan_update+0x4c>
    ea74:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    ea78:	f01b ffdf 	bl	2aa3a <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    ea7c:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    ea7e:	4620      	mov	r0, r4
    ea80:	bf18      	it	ne
    ea82:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    ea84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    ea88:	bf0a      	itet	eq
    ea8a:	2212      	moveq	r2, #18
    ea8c:	2160      	movne	r1, #96	; 0x60
    ea8e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    ea92:	f7ff bf69 	b.w	e968 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    ea96:	f7ff ff33 	bl	e900 <bt_le_scan_set_enable_legacy>
		if (err) {
    ea9a:	2800      	cmp	r0, #0
    ea9c:	d0d3      	beq.n	ea46 <bt_le_scan_update+0x2e>
}
    ea9e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    eaa0:	f01b ffcb 	bl	2aa3a <bt_conn_unref>
    eaa4:	e7c6      	b.n	ea34 <bt_le_scan_update+0x1c>
    eaa6:	bf00      	nop
    eaa8:	200000cc 	.word	0x200000cc

0000eaac <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    eaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    eab0:	f100 0808 	add.w	r8, r0, #8
    eab4:	b08f      	sub	sp, #60	; 0x3c
    eab6:	4604      	mov	r4, r0
    eab8:	4640      	mov	r0, r8
    eaba:	f01d fff1 	bl	2caa0 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    eabe:	f8df a1c8 	ldr.w	sl, [pc, #456]	; ec88 <bt_hci_le_adv_report+0x1dc>
    eac2:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    eac4:	b18e      	cbz	r6, eaea <bt_hci_le_adv_report+0x3e>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
    eac6:	89a3      	ldrh	r3, [r4, #12]
    eac8:	2b08      	cmp	r3, #8
    eaca:	d811      	bhi.n	eaf0 <bt_hci_le_adv_report+0x44>
			BT_ERR("Unexpected end of buffer");
    eacc:	486f      	ldr	r0, [pc, #444]	; (ec8c <bt_hci_le_adv_report+0x1e0>)
    eace:	6803      	ldr	r3, [r0, #0]
    ead0:	075c      	lsls	r4, r3, #29
    ead2:	d00a      	beq.n	eaea <bt_hci_le_adv_report+0x3e>
    ead4:	4b6e      	ldr	r3, [pc, #440]	; (ec90 <bt_hci_le_adv_report+0x1e4>)
    ead6:	930c      	str	r3, [sp, #48]	; 0x30
    ead8:	2302      	movs	r3, #2
    eada:	9306      	str	r3, [sp, #24]
    eadc:	930b      	str	r3, [sp, #44]	; 0x2c
    eade:	2300      	movs	r3, #0
    eae0:	aa0b      	add	r2, sp, #44	; 0x2c
    eae2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eae6:	f018 ff2b 	bl	27940 <z_impl_z_log_msg2_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    eaea:	b00f      	add	sp, #60	; 0x3c
    eaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    eaf0:	2109      	movs	r1, #9
    eaf2:	4640      	mov	r0, r8
    eaf4:	f01d ffcc 	bl	2ca90 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    eaf8:	237f      	movs	r3, #127	; 0x7f
    eafa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    eafe:	7a01      	ldrb	r1, [r0, #8]
    eb00:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    eb02:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    eb04:	7a5b      	ldrb	r3, [r3, #9]
    eb06:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    eb0a:	23ff      	movs	r3, #255	; 0xff
    eb0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    eb10:	2300      	movs	r3, #0
    eb12:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    eb16:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    eb1a:	7802      	ldrb	r2, [r0, #0]
    eb1c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    eb20:	2a04      	cmp	r2, #4
    eb22:	bf9c      	itt	ls
    eb24:	4b5b      	ldrls	r3, [pc, #364]	; (ec94 <bt_hci_le_adv_report+0x1e8>)
    eb26:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    eb28:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    eb2c:	b28b      	uxth	r3, r1
    eb2e:	9301      	str	r3, [sp, #4]
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    eb30:	7843      	ldrb	r3, [r0, #1]
    eb32:	1e9a      	subs	r2, r3, #2
    eb34:	2a01      	cmp	r2, #1
    eb36:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    eb38:	f100 0901 	add.w	r9, r0, #1
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    eb3c:	d848      	bhi.n	ebd0 <bt_hci_le_adv_report+0x124>
	memcpy(dst, src, sizeof(*dst));
    eb3e:	2207      	movs	r2, #7
    eb40:	4649      	mov	r1, r9
    eb42:	a804      	add	r0, sp, #16
    eb44:	f01b fc0a 	bl	2a35c <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    eb48:	f89d 3010 	ldrb.w	r3, [sp, #16]
    eb4c:	3b02      	subs	r3, #2
    eb4e:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    eb52:	ab04      	add	r3, sp, #16
    eb54:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    eb56:	f8da 3000 	ldr.w	r3, [sl]
    eb5a:	b1a3      	cbz	r3, eb86 <bt_hci_le_adv_report+0xda>
	state->offset = net_buf_simple_headroom(buf);
    eb5c:	4640      	mov	r0, r8
    eb5e:	f01d ffaf 	bl	2cac0 <net_buf_simple_headroom>
		buf->len = len;
    eb62:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    eb64:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    eb66:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    eb6a:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    eb6c:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    eb6e:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    eb72:	f8da c000 	ldr.w	ip, [sl]
    eb76:	a804      	add	r0, sp, #16
    eb78:	4643      	mov	r3, r8
    eb7a:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    eb7c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    eb7e:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    eb80:	fa10 f08b 	uxtah	r0, r0, fp
    eb84:	60a0      	str	r0, [r4, #8]
	return list->head;
    eb86:	4b44      	ldr	r3, [pc, #272]	; (ec98 <bt_hci_le_adv_report+0x1ec>)
    eb88:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    eb8a:	2a00      	cmp	r2, #0
    eb8c:	d033      	beq.n	ebf6 <bt_hci_le_adv_report+0x14a>
	return node->next;
    eb8e:	f852 7908 	ldr.w	r7, [r2], #-8
    eb92:	b107      	cbz	r7, eb96 <bt_hci_le_adv_report+0xea>
    eb94:	3f08      	subs	r7, #8
		if (listener->recv) {
    eb96:	6813      	ldr	r3, [r2, #0]
    eb98:	9203      	str	r2, [sp, #12]
    eb9a:	b193      	cbz	r3, ebc2 <bt_hci_le_adv_report+0x116>
	state->offset = net_buf_simple_headroom(buf);
    eb9c:	4640      	mov	r0, r8
    eb9e:	f01d ff8f 	bl	2cac0 <net_buf_simple_headroom>
	state->len = buf->len;
    eba2:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    eba4:	9a03      	ldr	r2, [sp, #12]
    eba6:	9302      	str	r3, [sp, #8]
			buf->len = len;
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    ebac:	4683      	mov	fp, r0
			listener->recv(info, buf);
    ebae:	6812      	ldr	r2, [r2, #0]
    ebb0:	a808      	add	r0, sp, #32
    ebb2:	4641      	mov	r1, r8
    ebb4:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    ebb6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ebb8:	9b02      	ldr	r3, [sp, #8]
    ebba:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ebbc:	fa10 f08b 	uxtah	r0, r0, fp
    ebc0:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ebc2:	b1c7      	cbz	r7, ebf6 <bt_hci_le_adv_report+0x14a>
    ebc4:	68bb      	ldr	r3, [r7, #8]
    ebc6:	b103      	cbz	r3, ebca <bt_hci_le_adv_report+0x11e>
    ebc8:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    ebca:	463a      	mov	r2, r7
    ebcc:	461f      	mov	r7, r3
    ebce:	e7e2      	b.n	eb96 <bt_hci_le_adv_report+0xea>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    ebd0:	2bff      	cmp	r3, #255	; 0xff
    ebd2:	d109      	bne.n	ebe8 <bt_hci_le_adv_report+0x13c>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ebd4:	2300      	movs	r3, #0
    ebd6:	9306      	str	r3, [sp, #24]
    ebd8:	2207      	movs	r2, #7
    ebda:	f8cd 301b 	str.w	r3, [sp, #27]
    ebde:	a906      	add	r1, sp, #24
    ebe0:	a804      	add	r0, sp, #16
    ebe2:	f01b fbbb 	bl	2a35c <memcpy>
}
    ebe6:	e7b4      	b.n	eb52 <bt_hci_le_adv_report+0xa6>
		bt_addr_le_copy(&id_addr,
    ebe8:	4649      	mov	r1, r9
    ebea:	2000      	movs	r0, #0
    ebec:	f01b fe21 	bl	2a832 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    ebf0:	2207      	movs	r2, #7
    ebf2:	4601      	mov	r1, r0
    ebf4:	e7f4      	b.n	ebe0 <bt_hci_le_adv_report+0x134>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ebf6:	4b29      	ldr	r3, [pc, #164]	; (ec9c <bt_hci_le_adv_report+0x1f0>)
	check_pending_conn(&id_addr, addr, info->adv_props);
    ebf8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    ebfc:	f3bf 8f5b 	dmb	ish
    ec00:	681a      	ldr	r2, [r3, #0]
    ec02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ec06:	0650      	lsls	r0, r2, #25
    ec08:	f3c2 1b80 	ubfx	fp, r2, #6, #1
    ec0c:	d421      	bmi.n	ec52 <bt_hci_le_adv_report+0x1a6>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    ec0e:	07ca      	lsls	r2, r1, #31
    ec10:	d51f      	bpl.n	ec52 <bt_hci_le_adv_report+0x1a6>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    ec12:	2202      	movs	r2, #2
    ec14:	a904      	add	r1, sp, #16
    ec16:	4658      	mov	r0, fp
    ec18:	f000 ff34 	bl	fa84 <bt_conn_lookup_state_le>
	if (!conn) {
    ec1c:	4607      	mov	r7, r0
    ec1e:	b1c0      	cbz	r0, ec52 <bt_hci_le_adv_report+0x1a6>
    ec20:	f3bf 8f5b 	dmb	ish
    ec24:	4b1d      	ldr	r3, [pc, #116]	; (ec9c <bt_hci_le_adv_report+0x1f0>)
    ec26:	681b      	ldr	r3, [r3, #0]
    ec28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ec2c:	069b      	lsls	r3, r3, #26
    ec2e:	d418      	bmi.n	ec62 <bt_hci_le_adv_report+0x1b6>
    ec30:	2207      	movs	r2, #7
    ec32:	4649      	mov	r1, r9
    ec34:	f107 0096 	add.w	r0, r7, #150	; 0x96
    ec38:	f01b fb90 	bl	2a35c <memcpy>
	if (bt_le_create_conn(conn)) {
    ec3c:	4638      	mov	r0, r7
    ec3e:	f01b fd09 	bl	2a654 <bt_le_create_conn>
    ec42:	b998      	cbnz	r0, ec6c <bt_hci_le_adv_report+0x1c0>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    ec44:	4638      	mov	r0, r7
    ec46:	2106      	movs	r1, #6
    ec48:	f000 fc82 	bl	f550 <bt_conn_set_state>
	bt_conn_unref(conn);
    ec4c:	4638      	mov	r0, r7
    ec4e:	f01b fef4 	bl	2aa3a <bt_conn_unref>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    ec52:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    ec54:	4640      	mov	r0, r8
    ec56:	3101      	adds	r1, #1
    ec58:	3e01      	subs	r6, #1
    ec5a:	f01d ff11 	bl	2ca80 <net_buf_simple_pull>
    ec5e:	b2f6      	uxtb	r6, r6
    ec60:	e730      	b.n	eac4 <bt_hci_le_adv_report+0x18>
	return bt_le_scan_set_enable_legacy(enable);
    ec62:	4658      	mov	r0, fp
    ec64:	f7ff fe4c 	bl	e900 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ec68:	2800      	cmp	r0, #0
    ec6a:	d0e1      	beq.n	ec30 <bt_hci_le_adv_report+0x184>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    ec6c:	231f      	movs	r3, #31
    ec6e:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ec70:	2100      	movs	r1, #0
    ec72:	4638      	mov	r0, r7
    ec74:	f000 fc6c 	bl	f550 <bt_conn_set_state>
	bt_conn_unref(conn);
    ec78:	4638      	mov	r0, r7
    ec7a:	f01b fede 	bl	2aa3a <bt_conn_unref>
	bt_le_scan_update(false);
    ec7e:	2000      	movs	r0, #0
    ec80:	f7ff feca 	bl	ea18 <bt_le_scan_update>
    ec84:	e7e5      	b.n	ec52 <bt_hci_le_adv_report+0x1a6>
    ec86:	bf00      	nop
    ec88:	20002ca8 	.word	0x20002ca8
    ec8c:	20000a60 	.word	0x20000a60
    ec90:	000336a4 	.word	0x000336a4
    ec94:	000336c5 	.word	0x000336c5
    ec98:	20002ca0 	.word	0x20002ca0
    ec9c:	200000cc 	.word	0x200000cc

0000eca0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eca2:	4c3d      	ldr	r4, [pc, #244]	; (ed98 <bt_le_scan_start+0xf8>)
    eca4:	f3bf 8f5b 	dmb	ish
    eca8:	6823      	ldr	r3, [r4, #0]
    ecaa:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ecae:	f013 0f02 	tst.w	r3, #2
{
    ecb2:	4605      	mov	r5, r0
    ecb4:	460f      	mov	r7, r1
    ecb6:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ecb8:	d06b      	beq.n	ed92 <bt_le_scan_start+0xf2>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    ecba:	7802      	ldrb	r2, [r0, #0]
    ecbc:	2a01      	cmp	r2, #1
    ecbe:	d903      	bls.n	ecc8 <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    ecc0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    ecc4:	4620      	mov	r0, r4
    ecc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    ecc8:	6843      	ldr	r3, [r0, #4]
    ecca:	f033 030f 	bics.w	r3, r3, #15
    ecce:	d1f7      	bne.n	ecc0 <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    ecd0:	8900      	ldrh	r0, [r0, #8]
    ecd2:	1f03      	subs	r3, r0, #4
    ecd4:	b29b      	uxth	r3, r3
    ecd6:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    ecda:	4563      	cmp	r3, ip
    ecdc:	d8f0      	bhi.n	ecc0 <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
    ecde:	8969      	ldrh	r1, [r5, #10]
    ece0:	1f0b      	subs	r3, r1, #4
    ece2:	b29b      	uxth	r3, r3
    ece4:	4563      	cmp	r3, ip
    ece6:	d8eb      	bhi.n	ecc0 <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
    ece8:	4288      	cmp	r0, r1
    ecea:	d3e9      	bcc.n	ecc0 <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
    ecec:	b98a      	cbnz	r2, ed12 <bt_le_scan_start+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ecee:	f3bf 8f5b 	dmb	ish
    ecf2:	e856 0f00 	ldrex	r0, [r6]
    ecf6:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    ecfa:	e846 3200 	strex	r2, r3, [r6]
    ecfe:	2a00      	cmp	r2, #0
    ed00:	d1f7      	bne.n	ecf2 <bt_le_scan_start+0x52>
    ed02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ed06:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    ed0a:	d007      	beq.n	ed1c <bt_le_scan_start+0x7c>
		return -EALREADY;
    ed0c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ed10:	e7d8      	b.n	ecc4 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    ed12:	f01b fdb4 	bl	2a87e <bt_id_scan_random_addr_check>
    ed16:	2800      	cmp	r0, #0
    ed18:	d1e9      	bne.n	ecee <bt_le_scan_start+0x4e>
    ed1a:	e7d1      	b.n	ecc0 <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ed1c:	f3bf 8f5b 	dmb	ish
    ed20:	6823      	ldr	r3, [r4, #0]
    ed22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ed26:	069a      	lsls	r2, r3, #26
    ed28:	d509      	bpl.n	ed3e <bt_le_scan_start+0x9e>
	return bt_le_scan_set_enable_legacy(enable);
    ed2a:	f7ff fde9 	bl	e900 <bt_le_scan_set_enable_legacy>
		if (err) {
    ed2e:	4604      	mov	r4, r0
    ed30:	b128      	cbz	r0, ed3e <bt_le_scan_start+0x9e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ed32:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ed36:	4818      	ldr	r0, [pc, #96]	; (ed98 <bt_le_scan_start+0xf8>)
    ed38:	f01b fdb3 	bl	2a8a2 <atomic_and>
		return err;
    ed3c:	e7c2      	b.n	ecc4 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    ed3e:	686b      	ldr	r3, [r5, #4]
	if (val) {
    ed40:	07db      	lsls	r3, r3, #31
    ed42:	d515      	bpl.n	ed70 <bt_le_scan_start+0xd0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ed44:	f3bf 8f5b 	dmb	ish
    ed48:	e856 3f00 	ldrex	r3, [r6]
    ed4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ed50:	e846 3200 	strex	r2, r3, [r6]
    ed54:	2a00      	cmp	r2, #0
    ed56:	d1f7      	bne.n	ed48 <bt_le_scan_start+0xa8>
    ed58:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    ed5c:	89ab      	ldrh	r3, [r5, #12]
    ed5e:	b16b      	cbz	r3, ed7c <bt_le_scan_start+0xdc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ed60:	480d      	ldr	r0, [pc, #52]	; (ed98 <bt_le_scan_start+0xf8>)
    ed62:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ed66:	f01b fd9c 	bl	2a8a2 <atomic_and>
			return -ENOTSUP;
    ed6a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ed6e:	e7a9      	b.n	ecc4 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ed70:	f46f 7180 	mvn.w	r1, #256	; 0x100
    ed74:	4808      	ldr	r0, [pc, #32]	; (ed98 <bt_le_scan_start+0xf8>)
    ed76:	f01b fd94 	bl	2a8a2 <atomic_and>
    ed7a:	e7ef      	b.n	ed5c <bt_le_scan_start+0xbc>
		err = start_le_scan_legacy(param->type, param->interval,
    ed7c:	896a      	ldrh	r2, [r5, #10]
    ed7e:	8929      	ldrh	r1, [r5, #8]
    ed80:	7828      	ldrb	r0, [r5, #0]
    ed82:	f7ff fdf1 	bl	e968 <start_le_scan_legacy>
	if (err) {
    ed86:	4604      	mov	r4, r0
    ed88:	2800      	cmp	r0, #0
    ed8a:	d1d2      	bne.n	ed32 <bt_le_scan_start+0x92>
	scan_dev_found_cb = cb;
    ed8c:	4b03      	ldr	r3, [pc, #12]	; (ed9c <bt_le_scan_start+0xfc>)
    ed8e:	601f      	str	r7, [r3, #0]
	return 0;
    ed90:	e798      	b.n	ecc4 <bt_le_scan_start+0x24>
		return -EAGAIN;
    ed92:	f06f 040a 	mvn.w	r4, #10
    ed96:	e795      	b.n	ecc4 <bt_le_scan_start+0x24>
    ed98:	200000cc 	.word	0x200000cc
    ed9c:	20002ca8 	.word	0x20002ca8

0000eda0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    eda0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    eda2:	4808      	ldr	r0, [pc, #32]	; (edc4 <bt_le_scan_stop+0x24>)
    eda4:	f06f 0140 	mvn.w	r1, #64	; 0x40
    eda8:	f01b fd7b 	bl	2a8a2 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    edac:	0643      	lsls	r3, r0, #25
    edae:	d506      	bpl.n	edbe <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
    edb0:	4b05      	ldr	r3, [pc, #20]	; (edc8 <bt_le_scan_stop+0x28>)
    edb2:	2000      	movs	r0, #0
    edb4:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    edb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    edba:	f7ff be2d 	b.w	ea18 <bt_le_scan_update>
}
    edbe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    edc2:	bd08      	pop	{r3, pc}
    edc4:	200000cc 	.word	0x200000cc
    edc8:	20002ca8 	.word	0x20002ca8

0000edcc <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    edcc:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    edce:	4904      	ldr	r1, [pc, #16]	; (ede0 <bt_pub_key_is_debug+0x14>)
    edd0:	2240      	movs	r2, #64	; 0x40
    edd2:	f01b fa9a 	bl	2a30a <memcmp>
}
    edd6:	fab0 f080 	clz	r0, r0
    edda:	0940      	lsrs	r0, r0, #5
    eddc:	bd08      	pop	{r3, pc}
    edde:	bf00      	nop
    ede0:	00033758 	.word	0x00033758

0000ede4 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    ede4:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    ede6:	4b4a      	ldr	r3, [pc, #296]	; (ef10 <bt_pub_key_gen+0x12c>)
    ede8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    edec:	f003 0306 	and.w	r3, r3, #6
    edf0:	2b06      	cmp	r3, #6
{
    edf2:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    edf4:	d012      	beq.n	ee1c <bt_pub_key_gen+0x38>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    edf6:	4847      	ldr	r0, [pc, #284]	; (ef14 <bt_pub_key_gen+0x130>)
    edf8:	6803      	ldr	r3, [r0, #0]
    edfa:	f013 0f06 	tst.w	r3, #6
    edfe:	d00a      	beq.n	ee16 <bt_pub_key_gen+0x32>
    ee00:	4b45      	ldr	r3, [pc, #276]	; (ef18 <bt_pub_key_gen+0x134>)
    ee02:	9306      	str	r3, [sp, #24]
    ee04:	2302      	movs	r3, #2
    ee06:	9301      	str	r3, [sp, #4]
    ee08:	9305      	str	r3, [sp, #20]
    ee0a:	2300      	movs	r3, #0
    ee0c:	aa05      	add	r2, sp, #20
    ee0e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ee12:	f018 fd95 	bl	27940 <z_impl_z_log_msg2_static_create>
		return -ENOTSUP;
    ee16:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ee1a:	e035      	b.n	ee88 <bt_pub_key_gen+0xa4>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
    ee1c:	2800      	cmp	r0, #0
    ee1e:	d074      	beq.n	ef0a <bt_pub_key_gen+0x126>
	return list->head;
    ee20:	4e3e      	ldr	r6, [pc, #248]	; (ef1c <bt_pub_key_gen+0x138>)
    ee22:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    ee24:	b1ca      	cbz	r2, ee5a <bt_pub_key_gen+0x76>
    ee26:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    ee28:	4298      	cmp	r0, r3
    ee2a:	d112      	bne.n	ee52 <bt_pub_key_gen+0x6e>
			BT_WARN("Callback already registered");
    ee2c:	4839      	ldr	r0, [pc, #228]	; (ef14 <bt_pub_key_gen+0x130>)
    ee2e:	6803      	ldr	r3, [r0, #0]
    ee30:	f013 0f06 	tst.w	r3, #6
    ee34:	d00a      	beq.n	ee4c <bt_pub_key_gen+0x68>
    ee36:	4b3a      	ldr	r3, [pc, #232]	; (ef20 <bt_pub_key_gen+0x13c>)
    ee38:	9306      	str	r3, [sp, #24]
    ee3a:	2302      	movs	r3, #2
    ee3c:	9301      	str	r3, [sp, #4]
    ee3e:	9305      	str	r3, [sp, #20]
    ee40:	2300      	movs	r3, #0
    ee42:	aa05      	add	r2, sp, #20
    ee44:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ee48:	f018 fd7a 	bl	27940 <z_impl_z_log_msg2_static_create>
			return -EALREADY;
    ee4c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ee50:	e01a      	b.n	ee88 <bt_pub_key_gen+0xa4>
	return node->next;
    ee52:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    ee54:	b10b      	cbz	r3, ee5a <bt_pub_key_gen+0x76>
    ee56:	3b04      	subs	r3, #4
    ee58:	e7e6      	b.n	ee28 <bt_pub_key_gen+0x44>
	parent->next = child;
    ee5a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    ee5c:	6872      	ldr	r2, [r6, #4]
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    ee5e:	1d03      	adds	r3, r0, #4
	list->head = node;
    ee60:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    ee62:	b902      	cbnz	r2, ee66 <bt_pub_key_gen+0x82>
	list->tail = node;
    ee64:	6073      	str	r3, [r6, #4]
    ee66:	4d2f      	ldr	r5, [pc, #188]	; (ef24 <bt_pub_key_gen+0x140>)
    ee68:	f3bf 8f5b 	dmb	ish
    ee6c:	e855 7f00 	ldrex	r7, [r5]
    ee70:	f047 0310 	orr.w	r3, r7, #16
    ee74:	e845 3200 	strex	r2, r3, [r5]
    ee78:	2a00      	cmp	r2, #0
    ee7a:	d1f7      	bne.n	ee6c <bt_pub_key_gen+0x88>
    ee7c:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    ee80:	f017 0710 	ands.w	r7, r7, #16
    ee84:	d003      	beq.n	ee8e <bt_pub_key_gen+0xaa>
		return 0;
    ee86:	2400      	movs	r4, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    ee88:	4620      	mov	r0, r4
    ee8a:	b009      	add	sp, #36	; 0x24
    ee8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ee8e:	f3bf 8f5b 	dmb	ish
    ee92:	e855 3f00 	ldrex	r3, [r5]
    ee96:	f023 0308 	bic.w	r3, r3, #8
    ee9a:	e845 3200 	strex	r2, r3, [r5]
    ee9e:	2a00      	cmp	r2, #0
    eea0:	d1f7      	bne.n	ee92 <bt_pub_key_gen+0xae>
    eea2:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    eea6:	463a      	mov	r2, r7
    eea8:	4639      	mov	r1, r7
    eeaa:	f242 0025 	movw	r0, #8229	; 0x2025
    eeae:	f7fe f92d 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    eeb2:	4604      	mov	r4, r0
    eeb4:	2800      	cmp	r0, #0
    eeb6:	d0e6      	beq.n	ee86 <bt_pub_key_gen+0xa2>
		BT_ERR("Sending LE P256 Public Key command failed");
    eeb8:	4816      	ldr	r0, [pc, #88]	; (ef14 <bt_pub_key_gen+0x130>)
    eeba:	6803      	ldr	r3, [r0, #0]
    eebc:	075b      	lsls	r3, r3, #29
    eebe:	d00a      	beq.n	eed6 <bt_pub_key_gen+0xf2>
    eec0:	4b19      	ldr	r3, [pc, #100]	; (ef28 <bt_pub_key_gen+0x144>)
    eec2:	9306      	str	r3, [sp, #24]
    eec4:	2302      	movs	r3, #2
    eec6:	9301      	str	r3, [sp, #4]
    eec8:	9305      	str	r3, [sp, #20]
    eeca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eece:	463b      	mov	r3, r7
    eed0:	aa05      	add	r2, sp, #20
    eed2:	f018 fd35 	bl	27940 <z_impl_z_log_msg2_static_create>
    eed6:	f3bf 8f5b 	dmb	ish
    eeda:	e855 3f00 	ldrex	r3, [r5]
    eede:	f023 0310 	bic.w	r3, r3, #16
    eee2:	e845 3200 	strex	r2, r3, [r5]
    eee6:	2a00      	cmp	r2, #0
    eee8:	d1f7      	bne.n	eeda <bt_pub_key_gen+0xf6>
    eeea:	f3bf 8f5b 	dmb	ish
	return list->head;
    eeee:	6835      	ldr	r5, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    eef0:	b13d      	cbz	r5, ef02 <bt_pub_key_gen+0x11e>
			if (cb->func) {
    eef2:	f855 3c04 	ldr.w	r3, [r5, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    eef6:	3d04      	subs	r5, #4
			if (cb->func) {
    eef8:	b10b      	cbz	r3, eefe <bt_pub_key_gen+0x11a>
				cb->func(NULL);
    eefa:	2000      	movs	r0, #0
    eefc:	4798      	blx	r3
	return node->next;
    eefe:	686d      	ldr	r5, [r5, #4]
    ef00:	e7f6      	b.n	eef0 <bt_pub_key_gen+0x10c>
	list->head = NULL;
    ef02:	2300      	movs	r3, #0
	list->tail = NULL;
    ef04:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    ef08:	e7be      	b.n	ee88 <bt_pub_key_gen+0xa4>
		return -EINVAL;
    ef0a:	f06f 0415 	mvn.w	r4, #21
    ef0e:	e7bb      	b.n	ee88 <bt_pub_key_gen+0xa4>
    ef10:	20000000 	.word	0x20000000
    ef14:	20000a40 	.word	0x20000a40
    ef18:	000336ca 	.word	0x000336ca
    ef1c:	20002cb0 	.word	0x20002cb0
    ef20:	000336e9 	.word	0x000336e9
    ef24:	200000cc 	.word	0x200000cc
    ef28:	00033705 	.word	0x00033705

0000ef2c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ef2c:	4b05      	ldr	r3, [pc, #20]	; (ef44 <bt_pub_key_get+0x18>)
    ef2e:	f3bf 8f5b 	dmb	ish
    ef32:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    ef34:	4804      	ldr	r0, [pc, #16]	; (ef48 <bt_pub_key_get+0x1c>)
    ef36:	f3bf 8f5b 	dmb	ish
		return pub_key;
    ef3a:	f013 0f08 	tst.w	r3, #8
}
    ef3e:	bf08      	it	eq
    ef40:	2000      	moveq	r0, #0
    ef42:	4770      	bx	lr
    ef44:	200000cc 	.word	0x200000cc
    ef48:	20004bbf 	.word	0x20004bbf

0000ef4c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    ef4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
    ef4e:	4d29      	ldr	r5, [pc, #164]	; (eff4 <bt_dh_key_gen+0xa8>)
    ef50:	682b      	ldr	r3, [r5, #0]
    ef52:	428b      	cmp	r3, r1
{
    ef54:	b089      	sub	sp, #36	; 0x24
    ef56:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    ef58:	d045      	beq.n	efe6 <bt_dh_key_gen+0x9a>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    ef5a:	b123      	cbz	r3, ef66 <bt_dh_key_gen+0x1a>
		return -EBUSY;
    ef5c:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    ef60:	4620      	mov	r0, r4
    ef62:	b009      	add	sp, #36	; 0x24
    ef64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef66:	4b24      	ldr	r3, [pc, #144]	; (eff8 <bt_dh_key_gen+0xac>)
    ef68:	f3bf 8f5b 	dmb	ish
    ef6c:	681a      	ldr	r2, [r3, #0]
    ef6e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    ef72:	f3c2 1700 	ubfx	r7, r2, #4, #1
    ef76:	06d2      	lsls	r2, r2, #27
    ef78:	d4f0      	bmi.n	ef5c <bt_dh_key_gen+0x10>
    ef7a:	f3bf 8f5b 	dmb	ish
    ef7e:	681b      	ldr	r3, [r3, #0]
    ef80:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    ef84:	071b      	lsls	r3, r3, #28
    ef86:	d531      	bpl.n	efec <bt_dh_key_gen+0xa0>
	dh_key_cb = cb;
    ef88:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    ef8a:	f242 0026 	movw	r0, #8230	; 0x2026
    ef8e:	2140      	movs	r1, #64	; 0x40
    ef90:	f7fd ff4c 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
    ef94:	4604      	mov	r4, r0
    ef96:	b318      	cbz	r0, efe0 <bt_dh_key_gen+0x94>
	return net_buf_simple_add(&buf->b, len);
    ef98:	2140      	movs	r1, #64	; 0x40
    ef9a:	3008      	adds	r0, #8
    ef9c:	f01d fd47 	bl	2ca2e <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    efa0:	2240      	movs	r2, #64	; 0x40
    efa2:	4631      	mov	r1, r6
    efa4:	f01b f9da 	bl	2a35c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    efa8:	4621      	mov	r1, r4
    efaa:	463a      	mov	r2, r7
    efac:	f242 0026 	movw	r0, #8230	; 0x2026
    efb0:	f7fe f8ac 	bl	d10c <bt_hci_cmd_send_sync>
	if (err) {
    efb4:	4604      	mov	r4, r0
    efb6:	2800      	cmp	r0, #0
    efb8:	d0d2      	beq.n	ef60 <bt_dh_key_gen+0x14>
		BT_WARN("Failed to generate DHKey (err %d)", err);
    efba:	4810      	ldr	r0, [pc, #64]	; (effc <bt_dh_key_gen+0xb0>)
    efbc:	6802      	ldr	r2, [r0, #0]
		dh_key_cb = NULL;
    efbe:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
    efc0:	f012 0f06 	tst.w	r2, #6
		dh_key_cb = NULL;
    efc4:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
    efc6:	d0cb      	beq.n	ef60 <bt_dh_key_gen+0x14>
    efc8:	4a0d      	ldr	r2, [pc, #52]	; (f000 <bt_dh_key_gen+0xb4>)
    efca:	e9cd 2406 	strd	r2, r4, [sp, #24]
    efce:	2203      	movs	r2, #3
    efd0:	9201      	str	r2, [sp, #4]
    efd2:	9205      	str	r2, [sp, #20]
    efd4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    efd8:	aa05      	add	r2, sp, #20
    efda:	f018 fcb1 	bl	27940 <z_impl_z_log_msg2_static_create>
    efde:	e7bf      	b.n	ef60 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
    efe0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    efe4:	e7e9      	b.n	efba <bt_dh_key_gen+0x6e>
		return -EALREADY;
    efe6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    efea:	e7b9      	b.n	ef60 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
    efec:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    eff0:	e7b6      	b.n	ef60 <bt_dh_key_gen+0x14>
    eff2:	bf00      	nop
    eff4:	20002cac 	.word	0x20002cac
    eff8:	200000cc 	.word	0x200000cc
    effc:	20000a40 	.word	0x20000a40
    f000:	0003372f 	.word	0x0003372f

0000f004 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    f004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f006:	4c1b      	ldr	r4, [pc, #108]	; (f074 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    f008:	6886      	ldr	r6, [r0, #8]
    f00a:	f3bf 8f5b 	dmb	ish
    f00e:	e854 3f00 	ldrex	r3, [r4]
    f012:	f023 0310 	bic.w	r3, r3, #16
    f016:	e844 3200 	strex	r2, r3, [r4]
    f01a:	2a00      	cmp	r2, #0
    f01c:	d1f7      	bne.n	f00e <bt_hci_evt_le_pkey_complete+0xa>
    f01e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    f022:	7833      	ldrb	r3, [r6, #0]
    f024:	b983      	cbnz	r3, f048 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    f026:	4814      	ldr	r0, [pc, #80]	; (f078 <bt_hci_evt_le_pkey_complete+0x74>)
    f028:	2240      	movs	r2, #64	; 0x40
    f02a:	1c71      	adds	r1, r6, #1
    f02c:	f01b f996 	bl	2a35c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f030:	f3bf 8f5b 	dmb	ish
    f034:	e854 3f00 	ldrex	r3, [r4]
    f038:	f043 0308 	orr.w	r3, r3, #8
    f03c:	e844 3200 	strex	r2, r3, [r4]
    f040:	2a00      	cmp	r2, #0
    f042:	d1f7      	bne.n	f034 <bt_hci_evt_le_pkey_complete+0x30>
    f044:	f3bf 8f5b 	dmb	ish
	return list->head;
    f048:	4d0c      	ldr	r5, [pc, #48]	; (f07c <bt_hci_evt_le_pkey_complete+0x78>)
    f04a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f04c:	b16c      	cbz	r4, f06a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    f04e:	4f0a      	ldr	r7, [pc, #40]	; (f078 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f050:	3c04      	subs	r4, #4
		if (cb->func) {
    f052:	6823      	ldr	r3, [r4, #0]
    f054:	b12b      	cbz	r3, f062 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
    f056:	7832      	ldrb	r2, [r6, #0]
    f058:	2a00      	cmp	r2, #0
    f05a:	bf0c      	ite	eq
    f05c:	4638      	moveq	r0, r7
    f05e:	2000      	movne	r0, #0
    f060:	4798      	blx	r3
	return node->next;
    f062:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    f064:	b10c      	cbz	r4, f06a <bt_hci_evt_le_pkey_complete+0x66>
    f066:	3c04      	subs	r4, #4
    f068:	e7f3      	b.n	f052 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
    f06a:	2300      	movs	r3, #0
	list->tail = NULL;
    f06c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    f070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f072:	bf00      	nop
    f074:	200000cc 	.word	0x200000cc
    f078:	20004bbf 	.word	0x20004bbf
    f07c:	20002cb0 	.word	0x20002cb0

0000f080 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    f080:	4905      	ldr	r1, [pc, #20]	; (f098 <bt_hci_evt_le_dhkey_complete+0x18>)
    f082:	680b      	ldr	r3, [r1, #0]
    f084:	b133      	cbz	r3, f094 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    f086:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    f088:	2000      	movs	r0, #0
    f08a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    f08c:	7811      	ldrb	r1, [r2, #0]
    f08e:	b901      	cbnz	r1, f092 <bt_hci_evt_le_dhkey_complete+0x12>
    f090:	1c50      	adds	r0, r2, #1
    f092:	4718      	bx	r3
	}
}
    f094:	4770      	bx	lr
    f096:	bf00      	nop
    f098:	20002cac 	.word	0x20002cac

0000f09c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    f09c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    f09e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    f0a2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    f0a4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    f0a6:	4801      	ldr	r0, [pc, #4]	; (f0ac <tx_free+0x10>)
    f0a8:	f01e bae6 	b.w	2d678 <k_queue_append>
    f0ac:	20000c68 	.word	0x20000c68

0000f0b0 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    f0b0:	4b0e      	ldr	r3, [pc, #56]	; (f0ec <notify_connected+0x3c>)
{
    f0b2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    f0b4:	681d      	ldr	r5, [r3, #0]
{
    f0b6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    f0b8:	b955      	cbnz	r5, f0d0 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f0ba:	4d0d      	ldr	r5, [pc, #52]	; (f0f0 <notify_connected+0x40>)
    f0bc:	4e0d      	ldr	r6, [pc, #52]	; (f0f4 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    f0be:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f0c0:	42b5      	cmp	r5, r6
    f0c2:	d30c      	bcc.n	f0de <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    f0c4:	b989      	cbnz	r1, f0ea <notify_connected+0x3a>
		bt_gatt_connected(conn);
    f0c6:	4620      	mov	r0, r4
	}
}
    f0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    f0cc:	f003 bd58 	b.w	12b80 <bt_gatt_connected>
		if (cb->connected) {
    f0d0:	682b      	ldr	r3, [r5, #0]
    f0d2:	b113      	cbz	r3, f0da <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    f0d4:	7b21      	ldrb	r1, [r4, #12]
    f0d6:	4620      	mov	r0, r4
    f0d8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f0da:	69ad      	ldr	r5, [r5, #24]
    f0dc:	e7ec      	b.n	f0b8 <notify_connected+0x8>
		if (cb->connected) {
    f0de:	682b      	ldr	r3, [r5, #0]
    f0e0:	b10b      	cbz	r3, f0e6 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    f0e2:	4620      	mov	r0, r4
    f0e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f0e6:	351c      	adds	r5, #28
    f0e8:	e7e9      	b.n	f0be <notify_connected+0xe>
}
    f0ea:	bd70      	pop	{r4, r5, r6, pc}
    f0ec:	20002cbc 	.word	0x20002cbc
    f0f0:	0002e210 	.word	0x0002e210
    f0f4:	0002e210 	.word	0x0002e210

0000f0f8 <send_frag>:
{
    f0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    f0fc:	694d      	ldr	r5, [r1, #20]
{
    f0fe:	b089      	sub	sp, #36	; 0x24
    f100:	4604      	mov	r4, r0
    f102:	460e      	mov	r6, r1
    f104:	4690      	mov	r8, r2
    f106:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    f108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f10c:	4846      	ldr	r0, [pc, #280]	; (f228 <send_frag+0x130>)
    f10e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f112:	f016 fa15 	bl	25540 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    f116:	7b63      	ldrb	r3, [r4, #13]
    f118:	2b07      	cmp	r3, #7
    f11a:	d156      	bne.n	f1ca <send_frag+0xd2>
	__asm__ volatile(
    f11c:	f04f 0320 	mov.w	r3, #32
    f120:	f3ef 8211 	mrs	r2, BASEPRI
    f124:	f383 8812 	msr	BASEPRI_MAX, r3
    f128:	f3bf 8f6f 	isb	sy
	if (tx) {
    f12c:	69a3      	ldr	r3, [r4, #24]
    f12e:	2d00      	cmp	r5, #0
    f130:	d05e      	beq.n	f1f0 <send_frag+0xf8>
	parent->next = child;
    f132:	2100      	movs	r1, #0
    f134:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    f136:	2b00      	cmp	r3, #0
    f138:	d157      	bne.n	f1ea <send_frag+0xf2>
	list->head = node;
    f13a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    f13e:	f382 8811 	msr	BASEPRI, r2
    f142:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    f146:	2104      	movs	r1, #4
    f148:	f106 0008 	add.w	r0, r6, #8
    f14c:	f01d fc90 	bl	2ca70 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    f150:	8823      	ldrh	r3, [r4, #0]
    f152:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    f156:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    f15a:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    f15c:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    f160:	3b04      	subs	r3, #4
    f162:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f164:	2302      	movs	r3, #2
    f166:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    f168:	4630      	mov	r0, r6
    f16a:	f01b faf7 	bl	2a75c <bt_send>
	if (err) {
    f16e:	4603      	mov	r3, r0
    f170:	2800      	cmp	r0, #0
    f172:	d057      	beq.n	f224 <send_frag+0x12c>
		BT_ERR("Unable to send to driver (err %d)", err);
    f174:	482d      	ldr	r0, [pc, #180]	; (f22c <send_frag+0x134>)
    f176:	6802      	ldr	r2, [r0, #0]
    f178:	0752      	lsls	r2, r2, #29
    f17a:	d00a      	beq.n	f192 <send_frag+0x9a>
    f17c:	4a2c      	ldr	r2, [pc, #176]	; (f230 <send_frag+0x138>)
    f17e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f182:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f186:	2303      	movs	r3, #3
    f188:	aa05      	add	r2, sp, #20
    f18a:	9301      	str	r3, [sp, #4]
    f18c:	9305      	str	r3, [sp, #20]
    f18e:	f01b fbae 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
	__asm__ volatile(
    f192:	f04f 0320 	mov.w	r3, #32
    f196:	f3ef 8011 	mrs	r0, BASEPRI
    f19a:	f383 8812 	msr	BASEPRI_MAX, r3
    f19e:	f3bf 8f6f 	isb	sy
		if (tx) {
    f1a2:	2d00      	cmp	r5, #0
    f1a4:	d038      	beq.n	f218 <send_frag+0x120>
	return list->head;
    f1a6:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f1a8:	2200      	movs	r2, #0
    f1aa:	b153      	cbz	r3, f1c2 <send_frag+0xca>
    f1ac:	429d      	cmp	r5, r3
    f1ae:	d130      	bne.n	f212 <send_frag+0x11a>
	return node->next;
    f1b0:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    f1b2:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    f1b4:	bb42      	cbnz	r2, f208 <send_frag+0x110>
    f1b6:	428d      	cmp	r5, r1
	list->head = node;
    f1b8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    f1ba:	d100      	bne.n	f1be <send_frag+0xc6>
	list->tail = node;
    f1bc:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    f1be:	2300      	movs	r3, #0
    f1c0:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    f1c2:	f380 8811 	msr	BASEPRI, r0
    f1c6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    f1ca:	4817      	ldr	r0, [pc, #92]	; (f228 <send_frag+0x130>)
    f1cc:	f016 f992 	bl	254f4 <z_impl_k_sem_give>
	if (tx) {
    f1d0:	b115      	cbz	r5, f1d8 <send_frag+0xe0>
		tx_free(tx);
    f1d2:	4628      	mov	r0, r5
    f1d4:	f7ff ff62 	bl	f09c <tx_free>
	if (always_consume) {
    f1d8:	b11f      	cbz	r7, f1e2 <send_frag+0xea>
		net_buf_unref(buf);
    f1da:	4630      	mov	r0, r6
    f1dc:	f011 fd24 	bl	20c28 <net_buf_unref>
	return false;
    f1e0:	2700      	movs	r7, #0
}
    f1e2:	4638      	mov	r0, r7
    f1e4:	b009      	add	sp, #36	; 0x24
    f1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f1ea:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f1ec:	61a5      	str	r5, [r4, #24]
}
    f1ee:	e7a6      	b.n	f13e <send_frag+0x46>
		if (tail_tx) {
    f1f0:	b133      	cbz	r3, f200 <send_frag+0x108>
			pending_no_cb = &tail_tx->pending_no_cb;
    f1f2:	f103 090c 	add.w	r9, r3, #12
    f1f6:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    f1f8:	3301      	adds	r3, #1
    f1fa:	f8c9 3000 	str.w	r3, [r9]
    f1fe:	e79e      	b.n	f13e <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
    f200:	69e3      	ldr	r3, [r4, #28]
    f202:	f104 091c 	add.w	r9, r4, #28
    f206:	e7f7      	b.n	f1f8 <send_frag+0x100>
Z_GENLIST_REMOVE(slist, snode)
    f208:	428d      	cmp	r5, r1
	parent->next = child;
    f20a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f20c:	bf08      	it	eq
    f20e:	61a2      	streq	r2, [r4, #24]
}
    f210:	e7d5      	b.n	f1be <send_frag+0xc6>
	return node->next;
    f212:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f214:	681b      	ldr	r3, [r3, #0]
    f216:	e7c8      	b.n	f1aa <send_frag+0xb2>
			(*pending_no_cb)--;
    f218:	f8d9 3000 	ldr.w	r3, [r9]
    f21c:	3b01      	subs	r3, #1
    f21e:	f8c9 3000 	str.w	r3, [r9]
    f222:	e7ce      	b.n	f1c2 <send_frag+0xca>
	return true;
    f224:	2701      	movs	r7, #1
    f226:	e7dc      	b.n	f1e2 <send_frag+0xea>
    f228:	20000100 	.word	0x20000100
    f22c:	200009e0 	.word	0x200009e0
    f230:	00032f40 	.word	0x00032f40

0000f234 <bt_conn_get_pkts>:
}
    f234:	4800      	ldr	r0, [pc, #0]	; (f238 <bt_conn_get_pkts+0x4>)
    f236:	4770      	bx	lr
    f238:	20000100 	.word	0x20000100

0000f23c <bt_conn_new>:
{
    f23c:	b538      	push	{r3, r4, r5, lr}
    f23e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    f240:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f242:	2501      	movs	r5, #1
    f244:	428b      	cmp	r3, r1
    f246:	d102      	bne.n	f24e <bt_conn_new+0x12>
		return NULL;
    f248:	2400      	movs	r4, #0
}
    f24a:	4620      	mov	r0, r4
    f24c:	bd38      	pop	{r3, r4, r5, pc}
    f24e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    f252:	f3bf 8f5b 	dmb	ish
    f256:	e852 0f00 	ldrex	r0, [r2]
    f25a:	2800      	cmp	r0, #0
    f25c:	d104      	bne.n	f268 <bt_conn_new+0x2c>
    f25e:	e842 5c00 	strex	ip, r5, [r2]
    f262:	f1bc 0f00 	cmp.w	ip, #0
    f266:	d1f6      	bne.n	f256 <bt_conn_new+0x1a>
    f268:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    f26c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f270:	d002      	beq.n	f278 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    f272:	3301      	adds	r3, #1
    f274:	4604      	mov	r4, r0
    f276:	e7e5      	b.n	f244 <bt_conn_new+0x8>
	if (!conn) {
    f278:	2c00      	cmp	r4, #0
    f27a:	d0e6      	beq.n	f24a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    f27c:	22b8      	movs	r2, #184	; 0xb8
    f27e:	2100      	movs	r1, #0
    f280:	4620      	mov	r0, r4
    f282:	f01b f876 	bl	2a372 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    f286:	f104 0058 	add.w	r0, r4, #88	; 0x58
    f28a:	4904      	ldr	r1, [pc, #16]	; (f29c <bt_conn_new+0x60>)
    f28c:	f01e faeb 	bl	2d866 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    f290:	4903      	ldr	r1, [pc, #12]	; (f2a0 <bt_conn_new+0x64>)
    f292:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f296:	f01e fac0 	bl	2d81a <k_work_init>
	return conn;
    f29a:	e7d6      	b.n	f24a <bt_conn_new+0xe>
    f29c:	0000fd69 	.word	0x0000fd69
    f2a0:	0002a971 	.word	0x0002a971

0000f2a4 <bt_conn_recv>:
{
    f2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2a6:	b089      	sub	sp, #36	; 0x24
    f2a8:	4616      	mov	r6, r2
    f2aa:	af00      	add	r7, sp, #0
    f2ac:	4604      	mov	r4, r0
    f2ae:	460d      	mov	r5, r1
	tx_notify(conn);
    f2b0:	f01b fb3b 	bl	2a92a <tx_notify>
	switch (flags) {
    f2b4:	2e01      	cmp	r6, #1
    f2b6:	d039      	beq.n	f32c <bt_conn_recv+0x88>
    f2b8:	2e02      	cmp	r6, #2
    f2ba:	d17a      	bne.n	f3b2 <bt_conn_recv+0x10e>
		if (conn->rx) {
    f2bc:	6923      	ldr	r3, [r4, #16]
    f2be:	b183      	cbz	r3, f2e2 <bt_conn_recv+0x3e>
			BT_ERR("Unexpected first L2CAP frame");
    f2c0:	4847      	ldr	r0, [pc, #284]	; (f3e0 <bt_conn_recv+0x13c>)
    f2c2:	6803      	ldr	r3, [r0, #0]
    f2c4:	075a      	lsls	r2, r3, #29
    f2c6:	d009      	beq.n	f2dc <bt_conn_recv+0x38>
    f2c8:	4b46      	ldr	r3, [pc, #280]	; (f3e4 <bt_conn_recv+0x140>)
    f2ca:	61bb      	str	r3, [r7, #24]
    f2cc:	f107 0214 	add.w	r2, r7, #20
    f2d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f2d4:	607e      	str	r6, [r7, #4]
    f2d6:	617e      	str	r6, [r7, #20]
    f2d8:	f01b fb09 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    f2dc:	4620      	mov	r0, r4
    f2de:	f01b fb4a 	bl	2a976 <bt_conn_reset_rx_state>
		conn->rx = buf;
    f2e2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    f2e4:	6921      	ldr	r1, [r4, #16]
    f2e6:	898a      	ldrh	r2, [r1, #12]
    f2e8:	2a01      	cmp	r2, #1
    f2ea:	d936      	bls.n	f35a <bt_conn_recv+0xb6>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    f2ec:	688b      	ldr	r3, [r1, #8]
    f2ee:	881b      	ldrh	r3, [r3, #0]
    f2f0:	3304      	adds	r3, #4
    f2f2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    f2f4:	429a      	cmp	r2, r3
    f2f6:	d330      	bcc.n	f35a <bt_conn_recv+0xb6>
	if (conn->rx->len > acl_total_len) {
    f2f8:	d96a      	bls.n	f3d0 <bt_conn_recv+0x12c>
		BT_ERR("ACL len mismatch (%u > %u)",
    f2fa:	4839      	ldr	r0, [pc, #228]	; (f3e0 <bt_conn_recv+0x13c>)
    f2fc:	6802      	ldr	r2, [r0, #0]
    f2fe:	0752      	lsls	r2, r2, #29
    f300:	d010      	beq.n	f324 <bt_conn_recv+0x80>
    f302:	466d      	mov	r5, sp
    f304:	b088      	sub	sp, #32
    f306:	466a      	mov	r2, sp
    f308:	4e37      	ldr	r6, [pc, #220]	; (f3e8 <bt_conn_recv+0x144>)
    f30a:	6116      	str	r6, [r2, #16]
    f30c:	8989      	ldrh	r1, [r1, #12]
    f30e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f312:	2304      	movs	r3, #4
    f314:	f842 3f0c 	str.w	r3, [r2, #12]!
    f318:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f31c:	60bb      	str	r3, [r7, #8]
    f31e:	f01b fae6 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
    f322:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
    f324:	4620      	mov	r0, r4
    f326:	f01b fb26 	bl	2a976 <bt_conn_reset_rx_state>
		return;
    f32a:	e016      	b.n	f35a <bt_conn_recv+0xb6>
		if (!conn->rx) {
    f32c:	6920      	ldr	r0, [r4, #16]
    f32e:	b9b8      	cbnz	r0, f360 <bt_conn_recv+0xbc>
			BT_ERR("Unexpected L2CAP continuation");
    f330:	482b      	ldr	r0, [pc, #172]	; (f3e0 <bt_conn_recv+0x13c>)
    f332:	6803      	ldr	r3, [r0, #0]
    f334:	075b      	lsls	r3, r3, #29
    f336:	d00a      	beq.n	f34e <bt_conn_recv+0xaa>
    f338:	4b2c      	ldr	r3, [pc, #176]	; (f3ec <bt_conn_recv+0x148>)
    f33a:	61bb      	str	r3, [r7, #24]
    f33c:	2302      	movs	r3, #2
    f33e:	607b      	str	r3, [r7, #4]
    f340:	617b      	str	r3, [r7, #20]
    f342:	f107 0214 	add.w	r2, r7, #20
    f346:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f34a:	f01b fad0 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    f34e:	4620      	mov	r0, r4
    f350:	f01b fb11 	bl	2a976 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    f354:	4628      	mov	r0, r5
    f356:	f011 fc67 	bl	20c28 <net_buf_unref>
}
    f35a:	3724      	adds	r7, #36	; 0x24
    f35c:	46bd      	mov	sp, r7
    f35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!buf->len) {
    f360:	89ae      	ldrh	r6, [r5, #12]
    f362:	2e00      	cmp	r6, #0
    f364:	d0f6      	beq.n	f354 <bt_conn_recv+0xb0>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    f366:	3008      	adds	r0, #8
    f368:	f01d fbae 	bl	2cac8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    f36c:	4286      	cmp	r6, r0
    f36e:	d916      	bls.n	f39e <bt_conn_recv+0xfa>
			BT_ERR("Not enough buffer space for L2CAP data");
    f370:	481b      	ldr	r0, [pc, #108]	; (f3e0 <bt_conn_recv+0x13c>)
    f372:	6803      	ldr	r3, [r0, #0]
    f374:	075e      	lsls	r6, r3, #29
    f376:	d00a      	beq.n	f38e <bt_conn_recv+0xea>
    f378:	4b1d      	ldr	r3, [pc, #116]	; (f3f0 <bt_conn_recv+0x14c>)
    f37a:	61bb      	str	r3, [r7, #24]
    f37c:	f107 0214 	add.w	r2, r7, #20
    f380:	2302      	movs	r3, #2
    f382:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f386:	607b      	str	r3, [r7, #4]
    f388:	617b      	str	r3, [r7, #20]
    f38a:	f01b fab0 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    f38e:	6921      	ldr	r1, [r4, #16]
    f390:	2200      	movs	r2, #0
    f392:	4620      	mov	r0, r4
    f394:	f000 ffb4 	bl	10300 <bt_l2cap_recv>
			conn->rx = NULL;
    f398:	2300      	movs	r3, #0
    f39a:	6123      	str	r3, [r4, #16]
    f39c:	e7da      	b.n	f354 <bt_conn_recv+0xb0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f39e:	6920      	ldr	r0, [r4, #16]
    f3a0:	89aa      	ldrh	r2, [r5, #12]
    f3a2:	68a9      	ldr	r1, [r5, #8]
    f3a4:	3008      	adds	r0, #8
    f3a6:	f01d fb48 	bl	2ca3a <net_buf_simple_add_mem>
		net_buf_unref(buf);
    f3aa:	4628      	mov	r0, r5
    f3ac:	f011 fc3c 	bl	20c28 <net_buf_unref>
		break;
    f3b0:	e798      	b.n	f2e4 <bt_conn_recv+0x40>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    f3b2:	480b      	ldr	r0, [pc, #44]	; (f3e0 <bt_conn_recv+0x13c>)
    f3b4:	6803      	ldr	r3, [r0, #0]
    f3b6:	0759      	lsls	r1, r3, #29
    f3b8:	d0c9      	beq.n	f34e <bt_conn_recv+0xaa>
    f3ba:	4b0e      	ldr	r3, [pc, #56]	; (f3f4 <bt_conn_recv+0x150>)
	switch (flags) {
    f3bc:	e9c7 3606 	strd	r3, r6, [r7, #24]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    f3c0:	2303      	movs	r3, #3
    f3c2:	607b      	str	r3, [r7, #4]
    f3c4:	617b      	str	r3, [r7, #20]
    f3c6:	f107 0214 	add.w	r2, r7, #20
    f3ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f3ce:	e7bc      	b.n	f34a <bt_conn_recv+0xa6>
	conn->rx = NULL;
    f3d0:	2300      	movs	r3, #0
    f3d2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    f3d4:	2201      	movs	r2, #1
    f3d6:	4620      	mov	r0, r4
    f3d8:	f000 ff92 	bl	10300 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    f3dc:	e7bd      	b.n	f35a <bt_conn_recv+0xb6>
    f3de:	bf00      	nop
    f3e0:	200009e0 	.word	0x200009e0
    f3e4:	00033798 	.word	0x00033798
    f3e8:	00033818 	.word	0x00033818
    f3ec:	000337b5 	.word	0x000337b5
    f3f0:	000337d3 	.word	0x000337d3
    f3f4:	000337fa 	.word	0x000337fa

0000f3f8 <bt_conn_send_cb>:
{
    f3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3fc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    f3fe:	7b43      	ldrb	r3, [r0, #13]
    f400:	2b07      	cmp	r3, #7
{
    f402:	b088      	sub	sp, #32
    f404:	4605      	mov	r5, r0
    f406:	460e      	mov	r6, r1
    f408:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    f40a:	d012      	beq.n	f432 <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
    f40c:	482c      	ldr	r0, [pc, #176]	; (f4c0 <bt_conn_send_cb+0xc8>)
    f40e:	6803      	ldr	r3, [r0, #0]
    f410:	075a      	lsls	r2, r3, #29
    f412:	d009      	beq.n	f428 <bt_conn_send_cb+0x30>
    f414:	4b2b      	ldr	r3, [pc, #172]	; (f4c4 <bt_conn_send_cb+0xcc>)
    f416:	9306      	str	r3, [sp, #24]
    f418:	aa05      	add	r2, sp, #20
    f41a:	2302      	movs	r3, #2
    f41c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f420:	9301      	str	r3, [sp, #4]
    f422:	9305      	str	r3, [sp, #20]
    f424:	f01b fa63 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
    f428:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    f42c:	b008      	add	sp, #32
    f42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    f432:	2a00      	cmp	r2, #0
    f434:	d042      	beq.n	f4bc <bt_conn_send_cb+0xc4>
	return z_impl_z_current_get();
    f436:	f016 fd5b 	bl	25ef0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    f43a:	4b23      	ldr	r3, [pc, #140]	; (f4c8 <bt_conn_send_cb+0xd0>)
    f43c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    f43e:	4823      	ldr	r0, [pc, #140]	; (f4cc <bt_conn_send_cb+0xd4>)
    f440:	bf07      	ittee	eq
    f442:	2200      	moveq	r2, #0
    f444:	2300      	moveq	r3, #0
    f446:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    f44a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    f44e:	f016 f81d 	bl	2548c <z_impl_k_queue_get>
    f452:	4604      	mov	r4, r0
		if (!tx) {
    f454:	b980      	cbnz	r0, f478 <bt_conn_send_cb+0x80>
			BT_ERR("Unable to allocate TX context");
    f456:	481a      	ldr	r0, [pc, #104]	; (f4c0 <bt_conn_send_cb+0xc8>)
    f458:	6803      	ldr	r3, [r0, #0]
    f45a:	075b      	lsls	r3, r3, #29
    f45c:	d009      	beq.n	f472 <bt_conn_send_cb+0x7a>
    f45e:	4b1c      	ldr	r3, [pc, #112]	; (f4d0 <bt_conn_send_cb+0xd8>)
    f460:	9306      	str	r3, [sp, #24]
    f462:	aa05      	add	r2, sp, #20
    f464:	2302      	movs	r3, #2
    f466:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f46a:	9301      	str	r3, [sp, #4]
    f46c:	9305      	str	r3, [sp, #20]
    f46e:	f01b fa3e 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
    f472:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f476:	e7d9      	b.n	f42c <bt_conn_send_cb+0x34>
		if (conn->state != BT_CONN_CONNECTED) {
    f478:	7b6b      	ldrb	r3, [r5, #13]
    f47a:	2b07      	cmp	r3, #7
    f47c:	d012      	beq.n	f4a4 <bt_conn_send_cb+0xac>
			BT_WARN("Disconnected while allocating context");
    f47e:	4810      	ldr	r0, [pc, #64]	; (f4c0 <bt_conn_send_cb+0xc8>)
    f480:	6803      	ldr	r3, [r0, #0]
    f482:	f013 0f06 	tst.w	r3, #6
    f486:	d009      	beq.n	f49c <bt_conn_send_cb+0xa4>
    f488:	4b12      	ldr	r3, [pc, #72]	; (f4d4 <bt_conn_send_cb+0xdc>)
    f48a:	9306      	str	r3, [sp, #24]
    f48c:	aa05      	add	r2, sp, #20
    f48e:	2302      	movs	r3, #2
    f490:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f494:	9301      	str	r3, [sp, #4]
    f496:	9305      	str	r3, [sp, #20]
    f498:	f01b fa29 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
    f49c:	4620      	mov	r0, r4
    f49e:	f7ff fdfd 	bl	f09c <tx_free>
    f4a2:	e7c1      	b.n	f428 <bt_conn_send_cb+0x30>
		tx->pending_no_cb = 0U;
    f4a4:	2300      	movs	r3, #0
		tx->user_data = user_data;
    f4a6:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    f4aa:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    f4ac:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    f4ae:	f105 0038 	add.w	r0, r5, #56	; 0x38
    f4b2:	4631      	mov	r1, r6
    f4b4:	f01d fa7c 	bl	2c9b0 <net_buf_put>
	return 0;
    f4b8:	2000      	movs	r0, #0
    f4ba:	e7b7      	b.n	f42c <bt_conn_send_cb+0x34>
		tx_data(buf)->tx = NULL;
    f4bc:	614a      	str	r2, [r1, #20]
    f4be:	e7f6      	b.n	f4ae <bt_conn_send_cb+0xb6>
    f4c0:	200009e0 	.word	0x200009e0
    f4c4:	00033833 	.word	0x00033833
    f4c8:	20002538 	.word	0x20002538
    f4cc:	20000c68 	.word	0x20000c68
    f4d0:	00033842 	.word	0x00033842
    f4d4:	00033860 	.word	0x00033860

0000f4d8 <bt_conn_prepare_events>:
{
    f4d8:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
    f4da:	4b16      	ldr	r3, [pc, #88]	; (f534 <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
    f4dc:	4c16      	ldr	r4, [pc, #88]	; (f538 <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
    f4de:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f4e0:	2101      	movs	r1, #1
{
    f4e2:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    f4e4:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f4e6:	f01e fcf9 	bl	2dedc <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    f4ea:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    f4ee:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    f4f2:	f01b f9f6 	bl	2a8e2 <atomic_get>
    f4f6:	b908      	cbnz	r0, f4fc <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    f4f8:	2001      	movs	r0, #1
}
    f4fa:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    f4fc:	7b63      	ldrb	r3, [r4, #13]
    f4fe:	b953      	cbnz	r3, f516 <bt_conn_prepare_events+0x3e>
    f500:	f06f 0140 	mvn.w	r1, #64	; 0x40
    f504:	1d20      	adds	r0, r4, #4
    f506:	f01b f9dd 	bl	2a8c4 <atomic_and>
    f50a:	0643      	lsls	r3, r0, #25
    f50c:	d503      	bpl.n	f516 <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
    f50e:	4620      	mov	r0, r4
    f510:	f01b fa3a 	bl	2a988 <conn_cleanup>
    f514:	e7f0      	b.n	f4f8 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    f516:	7b63      	ldrb	r3, [r4, #13]
    f518:	2b07      	cmp	r3, #7
    f51a:	d1ed      	bne.n	f4f8 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    f51c:	4b07      	ldr	r3, [pc, #28]	; (f53c <bt_conn_prepare_events+0x64>)
    f51e:	4630      	mov	r0, r6
    f520:	2200      	movs	r2, #0
    f522:	2104      	movs	r1, #4
    f524:	f01e fcda 	bl	2dedc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    f528:	2301      	movs	r3, #1
    f52a:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    f52e:	2002      	movs	r0, #2
	return ev_count;
    f530:	e7e3      	b.n	f4fa <bt_conn_prepare_events+0x22>
    f532:	bf00      	nop
    f534:	20000374 	.word	0x20000374
    f538:	20001ae8 	.word	0x20001ae8
    f53c:	20001b20 	.word	0x20001b20

0000f540 <bt_conn_lookup_handle>:
{
    f540:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    f542:	2101      	movs	r1, #1
    f544:	4801      	ldr	r0, [pc, #4]	; (f54c <bt_conn_lookup_handle+0xc>)
    f546:	f01b ba58 	b.w	2a9fa <conn_lookup_handle>
    f54a:	bf00      	nop
    f54c:	20001ae8 	.word	0x20001ae8

0000f550 <bt_conn_set_state>:
{
    f550:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    f552:	7b46      	ldrb	r6, [r0, #13]
    f554:	42b1      	cmp	r1, r6
{
    f556:	b08c      	sub	sp, #48	; 0x30
    f558:	4604      	mov	r4, r0
    f55a:	460d      	mov	r5, r1
	if (conn->state == state) {
    f55c:	d116      	bne.n	f58c <bt_conn_set_state+0x3c>
		BT_WARN("no transition %s", state2str(state));
    f55e:	4b87      	ldr	r3, [pc, #540]	; (f77c <bt_conn_set_state+0x22c>)
    f560:	681b      	ldr	r3, [r3, #0]
    f562:	f013 0f06 	tst.w	r3, #6
    f566:	d00f      	beq.n	f588 <bt_conn_set_state+0x38>
	switch (state) {
    f568:	2908      	cmp	r1, #8
    f56a:	bf96      	itet	ls
    f56c:	4b84      	ldrls	r3, [pc, #528]	; (f780 <bt_conn_set_state+0x230>)
		BT_WARN("no transition %s", state2str(state));
    f56e:	4b85      	ldrhi	r3, [pc, #532]	; (f784 <bt_conn_set_state+0x234>)
    f570:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
    f574:	9302      	str	r3, [sp, #8]
    f576:	4b84      	ldr	r3, [pc, #528]	; (f788 <bt_conn_set_state+0x238>)
    f578:	9301      	str	r3, [sp, #4]
    f57a:	2300      	movs	r3, #0
    f57c:	497f      	ldr	r1, [pc, #508]	; (f77c <bt_conn_set_state+0x22c>)
    f57e:	9300      	str	r3, [sp, #0]
    f580:	2202      	movs	r2, #2
    f582:	4618      	mov	r0, r3
    f584:	f01b f9b6 	bl	2a8f4 <z_log_msg2_runtime_create.constprop.0>
}
    f588:	b00c      	add	sp, #48	; 0x30
    f58a:	bd70      	pop	{r4, r5, r6, pc}
	conn->state = state;
    f58c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    f58e:	b1de      	cbz	r6, f5c8 <bt_conn_set_state+0x78>
    f590:	2e06      	cmp	r6, #6
    f592:	d01f      	beq.n	f5d4 <bt_conn_set_state+0x84>
	switch (conn->state) {
    f594:	7b63      	ldrb	r3, [r4, #13]
    f596:	2b08      	cmp	r3, #8
    f598:	f200 80e8 	bhi.w	f76c <bt_conn_set_state+0x21c>
    f59c:	a201      	add	r2, pc, #4	; (adr r2, f5a4 <bt_conn_set_state+0x54>)
    f59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f5a2:	bf00      	nop
    f5a4:	0000f631 	.word	0x0000f631
    f5a8:	0000f5e3 	.word	0x0000f5e3
    f5ac:	0000f589 	.word	0x0000f589
    f5b0:	0000f589 	.word	0x0000f589
    f5b4:	0000f589 	.word	0x0000f589
    f5b8:	0000f589 	.word	0x0000f589
    f5bc:	0000f6e3 	.word	0x0000f6e3
    f5c0:	0000f613 	.word	0x0000f613
    f5c4:	0000f589 	.word	0x0000f589
		if (conn->type != BT_CONN_TYPE_ISO) {
    f5c8:	7883      	ldrb	r3, [r0, #2]
    f5ca:	2b08      	cmp	r3, #8
    f5cc:	d0e2      	beq.n	f594 <bt_conn_set_state+0x44>
			bt_conn_ref(conn);
    f5ce:	f01b f9f9 	bl	2a9c4 <bt_conn_ref>
    f5d2:	e7df      	b.n	f594 <bt_conn_set_state+0x44>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f5d4:	7883      	ldrb	r3, [r0, #2]
    f5d6:	2b01      	cmp	r3, #1
    f5d8:	d1dc      	bne.n	f594 <bt_conn_set_state+0x44>
			k_work_cancel_delayable(&conn->deferred_work);
    f5da:	3058      	adds	r0, #88	; 0x58
    f5dc:	f01e f94f 	bl	2d87e <k_work_cancel_delayable>
    f5e0:	e7d8      	b.n	f594 <bt_conn_set_state+0x44>
	z_impl_k_sem_give(sem);
    f5e2:	4d6a      	ldr	r5, [pc, #424]	; (f78c <bt_conn_set_state+0x23c>)
		tx->pending_no_cb = 0U;
    f5e4:	2600      	movs	r6, #0
	__asm__ volatile(
    f5e6:	f04f 0320 	mov.w	r3, #32
    f5ea:	f3ef 8211 	mrs	r2, BASEPRI
    f5ee:	f383 8812 	msr	BASEPRI_MAX, r3
    f5f2:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    f5f6:	69e3      	ldr	r3, [r4, #28]
    f5f8:	2b00      	cmp	r3, #0
    f5fa:	f000 8096 	beq.w	f72a <bt_conn_set_state+0x1da>
			conn->pending_no_cb--;
    f5fe:	3b01      	subs	r3, #1
    f600:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    f602:	f382 8811 	msr	BASEPRI, r2
    f606:	f3bf 8f6f 	isb	sy
    f60a:	4628      	mov	r0, r5
    f60c:	f015 ff72 	bl	254f4 <z_impl_k_sem_give>
}
    f610:	e7e9      	b.n	f5e6 <bt_conn_set_state+0x96>
		if (conn->type == BT_CONN_TYPE_SCO) {
    f612:	78a3      	ldrb	r3, [r4, #2]
    f614:	2b04      	cmp	r3, #4
    f616:	d0b7      	beq.n	f588 <bt_conn_set_state+0x38>
	z_impl_k_queue_init(queue);
    f618:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f61c:	f01e f820 	bl	2d660 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    f620:	485b      	ldr	r0, [pc, #364]	; (f790 <bt_conn_set_state+0x240>)
    f622:	2100      	movs	r1, #0
    f624:	f016 ff50 	bl	264c8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    f628:	2300      	movs	r3, #0
	list->tail = NULL;
    f62a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
    f62e:	e7ab      	b.n	f588 <bt_conn_set_state+0x38>
		if (conn->type == BT_CONN_TYPE_SCO) {
    f630:	78a3      	ldrb	r3, [r4, #2]
    f632:	2b04      	cmp	r3, #4
    f634:	d106      	bne.n	f644 <bt_conn_set_state+0xf4>
	old = atomic_dec(&conn->ref);
    f636:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
    f63a:	b00c      	add	sp, #48	; 0x30
    f63c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	old = atomic_dec(&conn->ref);
    f640:	f01b b967 	b.w	2a912 <atomic_dec.isra.0>
		switch (old_state) {
    f644:	2e08      	cmp	r6, #8
    f646:	d89f      	bhi.n	f588 <bt_conn_set_state+0x38>
    f648:	a301      	add	r3, pc, #4	; (adr r3, f650 <bt_conn_set_state+0x100>)
    f64a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    f64e:	bf00      	nop
    f650:	0000f6bf 	.word	0x0000f6bf
    f654:	0000f675 	.word	0x0000f675
    f658:	0000f6b1 	.word	0x0000f6b1
    f65c:	0000f637 	.word	0x0000f637
    f660:	0000f637 	.word	0x0000f637
    f664:	0000f6b1 	.word	0x0000f6b1
    f668:	0000f6b1 	.word	0x0000f6b1
    f66c:	0000f6bf 	.word	0x0000f6bf
    f670:	0000f6bf 	.word	0x0000f6bf
			tx_notify(conn);
    f674:	4620      	mov	r0, r4
    f676:	f01b f958 	bl	2a92a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    f67a:	78a3      	ldrb	r3, [r4, #2]
    f67c:	2b01      	cmp	r3, #1
    f67e:	d103      	bne.n	f688 <bt_conn_set_state+0x138>
				k_work_cancel_delayable(&conn->deferred_work);
    f680:	f104 0058 	add.w	r0, r4, #88	; 0x58
    f684:	f01e f8fb 	bl	2d87e <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f688:	f3bf 8f5b 	dmb	ish
    f68c:	3404      	adds	r4, #4
    f68e:	e854 3f00 	ldrex	r3, [r4]
    f692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f696:	e844 3200 	strex	r2, r3, [r4]
    f69a:	2a00      	cmp	r2, #0
    f69c:	d1f7      	bne.n	f68e <bt_conn_set_state+0x13e>
    f69e:	f3bf 8f5b 	dmb	ish
    f6a2:	483b      	ldr	r0, [pc, #236]	; (f790 <bt_conn_set_state+0x240>)
    f6a4:	2100      	movs	r1, #0
}
    f6a6:	b00c      	add	sp, #48	; 0x30
    f6a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6ac:	f016 bf0c 	b.w	264c8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    f6b0:	7b23      	ldrb	r3, [r4, #12]
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d0bf      	beq.n	f636 <bt_conn_set_state+0xe6>
				notify_connected(conn);
    f6b6:	4620      	mov	r0, r4
    f6b8:	f7ff fcfa 	bl	f0b0 <notify_connected>
    f6bc:	e7bb      	b.n	f636 <bt_conn_set_state+0xe6>
			BT_WARN("Invalid (%u) old state", state);
    f6be:	482f      	ldr	r0, [pc, #188]	; (f77c <bt_conn_set_state+0x22c>)
    f6c0:	6803      	ldr	r3, [r0, #0]
    f6c2:	f013 0f06 	tst.w	r3, #6
    f6c6:	f43f af5f 	beq.w	f588 <bt_conn_set_state+0x38>
    f6ca:	4b32      	ldr	r3, [pc, #200]	; (f794 <bt_conn_set_state+0x244>)
		BT_WARN("no valid (%u) state was set", state);
    f6cc:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
    f6d0:	aa09      	add	r2, sp, #36	; 0x24
    f6d2:	2303      	movs	r3, #3
    f6d4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f6d8:	9305      	str	r3, [sp, #20]
    f6da:	9309      	str	r3, [sp, #36]	; 0x24
    f6dc:	f01b f907 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
    f6e0:	e752      	b.n	f588 <bt_conn_set_state+0x38>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f6e2:	78a3      	ldrb	r3, [r4, #2]
    f6e4:	2b01      	cmp	r3, #1
    f6e6:	f47f af4f 	bne.w	f588 <bt_conn_set_state+0x38>
					K_MSEC(10 * bt_dev.create_param.timeout));
    f6ea:	4b2b      	ldr	r3, [pc, #172]	; (f798 <bt_conn_set_state+0x248>)
    f6ec:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    f6ee:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    f6f0:	b1c8      	cbz	r0, f726 <bt_conn_set_state+0x1d6>
    f6f2:	230a      	movs	r3, #10
    f6f4:	4358      	muls	r0, r3
    f6f6:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
    f6f8:	03c9      	lsls	r1, r1, #15
    f6fa:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    f6fe:	f240 33e7 	movw	r3, #999	; 0x3e7
    f702:	03c0      	lsls	r0, r0, #15
    f704:	18c0      	adds	r0, r0, r3
    f706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f70a:	f04f 0300 	mov.w	r3, #0
    f70e:	f141 0100 	adc.w	r1, r1, #0
    f712:	f7f1 fd45 	bl	11a0 <__aeabi_uldivmod>
    f716:	4602      	mov	r2, r0
    f718:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    f71a:	4620      	mov	r0, r4
}
    f71c:	b00c      	add	sp, #48	; 0x30
    f71e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    f722:	f016 b8bb 	b.w	2589c <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
    f726:	4601      	mov	r1, r0
    f728:	e7e6      	b.n	f6f8 <bt_conn_set_state+0x1a8>
	return list->head;
    f72a:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    f72c:	b128      	cbz	r0, f73a <bt_conn_set_state+0x1ea>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f72e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    f730:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    f732:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f734:	4288      	cmp	r0, r1
	list->tail = node;
    f736:	bf08      	it	eq
    f738:	61a3      	streq	r3, [r4, #24]
    f73a:	f382 8811 	msr	BASEPRI, r2
    f73e:	f3bf 8f6f 	isb	sy
		if (!node) {
    f742:	2800      	cmp	r0, #0
    f744:	f43f af20 	beq.w	f588 <bt_conn_set_state+0x38>
	__asm__ volatile(
    f748:	f04f 0220 	mov.w	r2, #32
    f74c:	f3ef 8311 	mrs	r3, BASEPRI
    f750:	f382 8812 	msr	BASEPRI_MAX, r2
    f754:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    f758:	68c2      	ldr	r2, [r0, #12]
    f75a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    f75c:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    f75e:	f383 8811 	msr	BASEPRI, r3
    f762:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    f766:	f7ff fc99 	bl	f09c <tx_free>
    f76a:	e74e      	b.n	f60a <bt_conn_set_state+0xba>
		BT_WARN("no valid (%u) state was set", state);
    f76c:	4803      	ldr	r0, [pc, #12]	; (f77c <bt_conn_set_state+0x22c>)
    f76e:	6803      	ldr	r3, [r0, #0]
    f770:	f013 0f06 	tst.w	r3, #6
    f774:	f43f af08 	beq.w	f588 <bt_conn_set_state+0x38>
    f778:	4b08      	ldr	r3, [pc, #32]	; (f79c <bt_conn_set_state+0x24c>)
    f77a:	e7a7      	b.n	f6cc <bt_conn_set_state+0x17c>
    f77c:	200009e0 	.word	0x200009e0
    f780:	0002f390 	.word	0x0002f390
    f784:	00033886 	.word	0x00033886
    f788:	00033890 	.word	0x00033890
    f78c:	20000100 	.word	0x20000100
    f790:	20000374 	.word	0x20000374
    f794:	000338a1 	.word	0x000338a1
    f798:	20000000 	.word	0x20000000
    f79c:	000338b8 	.word	0x000338b8

0000f7a0 <bt_conn_index>:
		index = conn - acl_conns;
    f7a0:	4b03      	ldr	r3, [pc, #12]	; (f7b0 <bt_conn_index+0x10>)
    f7a2:	1ac0      	subs	r0, r0, r3
    f7a4:	4b03      	ldr	r3, [pc, #12]	; (f7b4 <bt_conn_index+0x14>)
    f7a6:	1180      	asrs	r0, r0, #6
    f7a8:	4358      	muls	r0, r3
}
    f7aa:	b2c0      	uxtb	r0, r0
    f7ac:	4770      	bx	lr
    f7ae:	bf00      	nop
    f7b0:	20001ae8 	.word	0x20001ae8
    f7b4:	aaaaaaab 	.word	0xaaaaaaab

0000f7b8 <bt_conn_create_pdu_timeout>:
{
    f7b8:	b530      	push	{r4, r5, lr}
    f7ba:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    f7bc:	490f      	ldr	r1, [pc, #60]	; (f7fc <bt_conn_create_pdu_timeout+0x44>)
    f7be:	b089      	sub	sp, #36	; 0x24
    f7c0:	2800      	cmp	r0, #0
    f7c2:	bf08      	it	eq
    f7c4:	4608      	moveq	r0, r1
    f7c6:	f01d f8ca 	bl	2c95e <net_buf_alloc_fixed>
	if (!buf) {
    f7ca:	4604      	mov	r4, r0
    f7cc:	b988      	cbnz	r0, f7f2 <bt_conn_create_pdu_timeout+0x3a>
		BT_WARN("Unable to allocate buffer within timeout");
    f7ce:	480c      	ldr	r0, [pc, #48]	; (f800 <bt_conn_create_pdu_timeout+0x48>)
    f7d0:	6803      	ldr	r3, [r0, #0]
    f7d2:	f013 0f06 	tst.w	r3, #6
    f7d6:	d009      	beq.n	f7ec <bt_conn_create_pdu_timeout+0x34>
    f7d8:	4b0a      	ldr	r3, [pc, #40]	; (f804 <bt_conn_create_pdu_timeout+0x4c>)
    f7da:	9306      	str	r3, [sp, #24]
    f7dc:	aa05      	add	r2, sp, #20
    f7de:	2302      	movs	r3, #2
    f7e0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f7e4:	9301      	str	r3, [sp, #4]
    f7e6:	9305      	str	r3, [sp, #20]
    f7e8:	f01b f881 	bl	2a8ee <z_log_msg2_static_create.constprop.0>
}
    f7ec:	4620      	mov	r0, r4
    f7ee:	b009      	add	sp, #36	; 0x24
    f7f0:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    f7f2:	1d29      	adds	r1, r5, #4
    f7f4:	3008      	adds	r0, #8
    f7f6:	f01d f8d7 	bl	2c9a8 <net_buf_simple_reserve>
	return buf;
    f7fa:	e7f7      	b.n	f7ec <bt_conn_create_pdu_timeout+0x34>
    f7fc:	20000cb0 	.word	0x20000cb0
    f800:	200009e0 	.word	0x200009e0
    f804:	000338d4 	.word	0x000338d4

0000f808 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    f80a:	1d03      	adds	r3, r0, #4
{
    f80c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f80e:	4618      	mov	r0, r3
    f810:	f01b f867 	bl	2a8e2 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    f814:	0582      	lsls	r2, r0, #22
    f816:	d512      	bpl.n	f83e <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    f818:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    f81c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    f820:	4291      	cmp	r1, r2
    f822:	d80c      	bhi.n	f83e <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    f824:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    f828:	4291      	cmp	r1, r2
    f82a:	d308      	bcc.n	f83e <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    f82c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    f830:	4291      	cmp	r1, r2
    f832:	d104      	bne.n	f83e <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f834:	f46f 7100 	mvn.w	r1, #512	; 0x200
    f838:	4618      	mov	r0, r3
    f83a:	f01b f843 	bl	2a8c4 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    f83e:	4b10      	ldr	r3, [pc, #64]	; (f880 <notify_le_param_updated+0x78>)
    f840:	681d      	ldr	r5, [r3, #0]
    f842:	b925      	cbnz	r5, f84e <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f844:	4d0f      	ldr	r5, [pc, #60]	; (f884 <notify_le_param_updated+0x7c>)
    f846:	4f10      	ldr	r7, [pc, #64]	; (f888 <notify_le_param_updated+0x80>)
    f848:	42bd      	cmp	r5, r7
    f84a:	d30c      	bcc.n	f866 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    f84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    f84e:	68ee      	ldr	r6, [r5, #12]
    f850:	b13e      	cbz	r6, f862 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
    f852:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    f856:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    f85a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    f85e:	4620      	mov	r0, r4
    f860:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    f862:	69ad      	ldr	r5, [r5, #24]
    f864:	e7ed      	b.n	f842 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
    f866:	68ee      	ldr	r6, [r5, #12]
    f868:	b13e      	cbz	r6, f87a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
    f86a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    f86e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    f872:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    f876:	4620      	mov	r0, r4
    f878:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f87a:	351c      	adds	r5, #28
    f87c:	e7e4      	b.n	f848 <notify_le_param_updated+0x40>
    f87e:	bf00      	nop
    f880:	20002cbc 	.word	0x20002cbc
    f884:	0002e210 	.word	0x0002e210
    f888:	0002e210 	.word	0x0002e210

0000f88c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    f88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f890:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    f892:	4608      	mov	r0, r1
{
    f894:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    f896:	f01a ff40 	bl	2a71a <bt_le_conn_params_valid>
    f89a:	4605      	mov	r5, r0
    f89c:	b918      	cbnz	r0, f8a6 <le_param_req+0x1a>
		return false;
    f89e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    f8a0:	4628      	mov	r0, r5
    f8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    f8a6:	4b13      	ldr	r3, [pc, #76]	; (f8f4 <le_param_req+0x68>)
    f8a8:	681e      	ldr	r6, [r3, #0]
    f8aa:	b946      	cbnz	r6, f8be <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f8ac:	4e12      	ldr	r6, [pc, #72]	; (f8f8 <le_param_req+0x6c>)
    f8ae:	f8df 804c 	ldr.w	r8, [pc, #76]	; f8fc <le_param_req+0x70>
    f8b2:	4546      	cmp	r6, r8
    f8b4:	d2f4      	bcs.n	f8a0 <le_param_req+0x14>
		if (!cb->le_param_req) {
    f8b6:	68b3      	ldr	r3, [r6, #8]
    f8b8:	b983      	cbnz	r3, f8dc <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f8ba:	361c      	adds	r6, #28
    f8bc:	e7f9      	b.n	f8b2 <le_param_req+0x26>
		if (!cb->le_param_req) {
    f8be:	68b3      	ldr	r3, [r6, #8]
    f8c0:	b90b      	cbnz	r3, f8c6 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    f8c2:	69b6      	ldr	r6, [r6, #24]
    f8c4:	e7f1      	b.n	f8aa <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    f8c6:	4621      	mov	r1, r4
    f8c8:	4638      	mov	r0, r7
    f8ca:	4798      	blx	r3
    f8cc:	2800      	cmp	r0, #0
    f8ce:	d0e6      	beq.n	f89e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    f8d0:	4620      	mov	r0, r4
    f8d2:	f01a ff22 	bl	2a71a <bt_le_conn_params_valid>
    f8d6:	2800      	cmp	r0, #0
    f8d8:	d1f3      	bne.n	f8c2 <le_param_req+0x36>
    f8da:	e7e0      	b.n	f89e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    f8dc:	4621      	mov	r1, r4
    f8de:	4638      	mov	r0, r7
    f8e0:	4798      	blx	r3
    f8e2:	2800      	cmp	r0, #0
    f8e4:	d0db      	beq.n	f89e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    f8e6:	4620      	mov	r0, r4
    f8e8:	f01a ff17 	bl	2a71a <bt_le_conn_params_valid>
    f8ec:	2800      	cmp	r0, #0
    f8ee:	d1e4      	bne.n	f8ba <le_param_req+0x2e>
    f8f0:	e7d5      	b.n	f89e <le_param_req+0x12>
    f8f2:	bf00      	nop
    f8f4:	20002cbc 	.word	0x20002cbc
    f8f8:	0002e210 	.word	0x0002e210
    f8fc:	0002e210 	.word	0x0002e210

0000f900 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    f900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    f904:	78c3      	ldrb	r3, [r0, #3]
{
    f906:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    f908:	b973      	cbnz	r3, f928 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
    f90a:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    f90e:	4b10      	ldr	r3, [pc, #64]	; (f950 <bt_conn_identity_resolved+0x50>)
    f910:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    f912:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    f916:	b955      	cbnz	r5, f92e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f918:	4d0e      	ldr	r5, [pc, #56]	; (f954 <bt_conn_identity_resolved+0x54>)
    f91a:	4f0f      	ldr	r7, [pc, #60]	; (f958 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    f91c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f920:	42bd      	cmp	r5, r7
    f922:	d30c      	bcc.n	f93e <bt_conn_identity_resolved+0x3e>
		}
	}
}
    f924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
    f928:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    f92c:	e7ef      	b.n	f90e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
    f92e:	692b      	ldr	r3, [r5, #16]
    f930:	b11b      	cbz	r3, f93a <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    f932:	463a      	mov	r2, r7
    f934:	4631      	mov	r1, r6
    f936:	4620      	mov	r0, r4
    f938:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f93a:	69ad      	ldr	r5, [r5, #24]
    f93c:	e7eb      	b.n	f916 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
    f93e:	692b      	ldr	r3, [r5, #16]
    f940:	b11b      	cbz	r3, f94a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    f942:	4642      	mov	r2, r8
    f944:	4631      	mov	r1, r6
    f946:	4620      	mov	r0, r4
    f948:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f94a:	351c      	adds	r5, #28
    f94c:	e7e8      	b.n	f920 <bt_conn_identity_resolved+0x20>
    f94e:	bf00      	nop
    f950:	20002cbc 	.word	0x20002cbc
    f954:	0002e210 	.word	0x0002e210
    f958:	0002e210 	.word	0x0002e210

0000f95c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    f95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
    f95e:	7a43      	ldrb	r3, [r0, #9]
    f960:	7283      	strb	r3, [r0, #10]
{
    f962:	4604      	mov	r4, r0
    f964:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    f966:	f01b f9af 	bl	2acc8 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
    f96a:	4b0c      	ldr	r3, [pc, #48]	; (f99c <bt_conn_security_changed+0x40>)
    f96c:	681d      	ldr	r5, [r3, #0]
    f96e:	b925      	cbnz	r5, f97a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f970:	4d0b      	ldr	r5, [pc, #44]	; (f9a0 <bt_conn_security_changed+0x44>)
    f972:	4f0c      	ldr	r7, [pc, #48]	; (f9a4 <bt_conn_security_changed+0x48>)
    f974:	42bd      	cmp	r5, r7
    f976:	d308      	bcc.n	f98a <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    f978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
    f97a:	696b      	ldr	r3, [r5, #20]
    f97c:	b11b      	cbz	r3, f986 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
    f97e:	7a61      	ldrb	r1, [r4, #9]
    f980:	4632      	mov	r2, r6
    f982:	4620      	mov	r0, r4
    f984:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f986:	69ad      	ldr	r5, [r5, #24]
    f988:	e7f1      	b.n	f96e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
    f98a:	696b      	ldr	r3, [r5, #20]
    f98c:	b11b      	cbz	r3, f996 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
    f98e:	7a61      	ldrb	r1, [r4, #9]
    f990:	4632      	mov	r2, r6
    f992:	4620      	mov	r0, r4
    f994:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f996:	351c      	adds	r5, #28
    f998:	e7ec      	b.n	f974 <bt_conn_security_changed+0x18>
    f99a:	bf00      	nop
    f99c:	20002cbc 	.word	0x20002cbc
    f9a0:	0002e210 	.word	0x0002e210
    f9a4:	0002e210 	.word	0x0002e210

0000f9a8 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    f9a8:	4b02      	ldr	r3, [pc, #8]	; (f9b4 <bt_conn_cb_register+0xc>)
    f9aa:	681a      	ldr	r2, [r3, #0]
    f9ac:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    f9ae:	6018      	str	r0, [r3, #0]
}
    f9b0:	4770      	bx	lr
    f9b2:	bf00      	nop
    f9b4:	20002cbc 	.word	0x20002cbc

0000f9b8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    f9b8:	b570      	push	{r4, r5, r6, lr}
    f9ba:	4606      	mov	r6, r0
    f9bc:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    f9be:	480a      	ldr	r0, [pc, #40]	; (f9e8 <bt_conn_add_le+0x30>)
    f9c0:	2101      	movs	r1, #1
    f9c2:	f7ff fc3b 	bl	f23c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    f9c6:	4604      	mov	r4, r0
    f9c8:	b160      	cbz	r0, f9e4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
    f9ca:	7206      	strb	r6, [r0, #8]
    f9cc:	2207      	movs	r2, #7
    f9ce:	4629      	mov	r1, r5
    f9d0:	3088      	adds	r0, #136	; 0x88
    f9d2:	f01a fcc3 	bl	2a35c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    f9d6:	2301      	movs	r3, #1
    f9d8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    f9da:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    f9dc:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    f9de:	4b03      	ldr	r3, [pc, #12]	; (f9ec <bt_conn_add_le+0x34>)
    f9e0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    f9e4:	4620      	mov	r0, r4
    f9e6:	bd70      	pop	{r4, r5, r6, pc}
    f9e8:	20001ae8 	.word	0x20001ae8
    f9ec:	00280018 	.word	0x00280018

0000f9f0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    f9f0:	b570      	push	{r4, r5, r6, lr}
    f9f2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f9f4:	480d      	ldr	r0, [pc, #52]	; (fa2c <bt_conn_lookup_addr_le+0x3c>)
{
    f9f6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f9f8:	f01a ffe4 	bl	2a9c4 <bt_conn_ref>

		if (!conn) {
    f9fc:	4604      	mov	r4, r0
    f9fe:	b130      	cbz	r0, fa0e <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    fa00:	7883      	ldrb	r3, [r0, #2]
    fa02:	2b01      	cmp	r3, #1
    fa04:	d005      	beq.n	fa12 <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
    fa06:	30b8      	adds	r0, #184	; 0xb8
    fa08:	f01a ff83 	bl	2a912 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    fa0c:	2400      	movs	r4, #0
}
    fa0e:	4620      	mov	r0, r4
    fa10:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    fa12:	4629      	mov	r1, r5
    fa14:	4632      	mov	r2, r6
    fa16:	f01b f889 	bl	2ab2c <bt_conn_is_peer_addr_le>
    fa1a:	4601      	mov	r1, r0
    fa1c:	2800      	cmp	r0, #0
    fa1e:	d1f6      	bne.n	fa0e <bt_conn_lookup_addr_le+0x1e>
	old = atomic_dec(&conn->ref);
    fa20:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fa24:	f01a ff75 	bl	2a912 <atomic_dec.isra.0>
	return NULL;
    fa28:	460c      	mov	r4, r1
			continue;
    fa2a:	e7f0      	b.n	fa0e <bt_conn_lookup_addr_le+0x1e>
    fa2c:	20001ae8 	.word	0x20001ae8

0000fa30 <bt_conn_exists_le>:
{
    fa30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    fa32:	f7ff ffdd 	bl	f9f0 <bt_conn_lookup_addr_le>
	if (conn) {
    fa36:	4604      	mov	r4, r0
    fa38:	b1d0      	cbz	r0, fa70 <bt_conn_exists_le+0x40>
		BT_WARN("Found valid connection in %s state",
    fa3a:	4b0e      	ldr	r3, [pc, #56]	; (fa74 <bt_conn_exists_le+0x44>)
    fa3c:	681b      	ldr	r3, [r3, #0]
    fa3e:	f013 0f06 	tst.w	r3, #6
    fa42:	d010      	beq.n	fa66 <bt_conn_exists_le+0x36>
    fa44:	7b43      	ldrb	r3, [r0, #13]
    fa46:	490b      	ldr	r1, [pc, #44]	; (fa74 <bt_conn_exists_le+0x44>)
    fa48:	2b08      	cmp	r3, #8
    fa4a:	bf96      	itet	ls
    fa4c:	4a0a      	ldrls	r2, [pc, #40]	; (fa78 <bt_conn_exists_le+0x48>)
    fa4e:	4b0b      	ldrhi	r3, [pc, #44]	; (fa7c <bt_conn_exists_le+0x4c>)
    fa50:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    fa54:	9302      	str	r3, [sp, #8]
    fa56:	4b0a      	ldr	r3, [pc, #40]	; (fa80 <bt_conn_exists_le+0x50>)
    fa58:	9301      	str	r3, [sp, #4]
    fa5a:	2300      	movs	r3, #0
    fa5c:	9300      	str	r3, [sp, #0]
    fa5e:	2202      	movs	r2, #2
    fa60:	4618      	mov	r0, r3
    fa62:	f01a ff47 	bl	2a8f4 <z_log_msg2_runtime_create.constprop.0>
	old = atomic_dec(&conn->ref);
    fa66:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fa6a:	f01a ff52 	bl	2a912 <atomic_dec.isra.0>
		return true;
    fa6e:	2001      	movs	r0, #1
}
    fa70:	b004      	add	sp, #16
    fa72:	bd10      	pop	{r4, pc}
    fa74:	200009e0 	.word	0x200009e0
    fa78:	0002f390 	.word	0x0002f390
    fa7c:	00033886 	.word	0x00033886
    fa80:	000338fd 	.word	0x000338fd

0000fa84 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa86:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fa88:	480f      	ldr	r0, [pc, #60]	; (fac8 <bt_conn_lookup_state_le+0x44>)
{
    fa8a:	460e      	mov	r6, r1
    fa8c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    fa8e:	f01a ff99 	bl	2a9c4 <bt_conn_ref>

		if (!conn) {
    fa92:	4604      	mov	r4, r0
    fa94:	b1a8      	cbz	r0, fac2 <bt_conn_lookup_state_le+0x3e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    fa96:	7883      	ldrb	r3, [r0, #2]
    fa98:	2b01      	cmp	r3, #1
    fa9a:	d005      	beq.n	faa8 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
    fa9c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    faa0:	f01a ff37 	bl	2a912 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    faa4:	2400      	movs	r4, #0
			continue;
    faa6:	e00c      	b.n	fac2 <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    faa8:	b12e      	cbz	r6, fab6 <bt_conn_lookup_state_le+0x32>
    faaa:	4632      	mov	r2, r6
    faac:	4629      	mov	r1, r5
    faae:	f01b f83d 	bl	2ab2c <bt_conn_is_peer_addr_le>
    fab2:	2800      	cmp	r0, #0
    fab4:	d0f2      	beq.n	fa9c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    fab6:	7b63      	ldrb	r3, [r4, #13]
    fab8:	42bb      	cmp	r3, r7
    faba:	d1ef      	bne.n	fa9c <bt_conn_lookup_state_le+0x18>
    fabc:	7a23      	ldrb	r3, [r4, #8]
    fabe:	42ab      	cmp	r3, r5
    fac0:	d1ec      	bne.n	fa9c <bt_conn_lookup_state_le+0x18>
}
    fac2:	4620      	mov	r0, r4
    fac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fac6:	bf00      	nop
    fac8:	20001ae8 	.word	0x20001ae8

0000facc <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    facc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    fad0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fad2:	4851      	ldr	r0, [pc, #324]	; (fc18 <bt_conn_le_create+0x14c>)
    fad4:	f01a ff05 	bl	2a8e2 <atomic_get>
    fad8:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fada:	0781      	lsls	r1, r0, #30
{
    fadc:	4615      	mov	r5, r2
    fade:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fae0:	d405      	bmi.n	faee <bt_conn_le_create+0x22>
		return -EAGAIN;
    fae2:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    fae6:	4628      	mov	r0, r5
    fae8:	b002      	add	sp, #8
    faea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
    faee:	4610      	mov	r0, r2
    faf0:	f01a fe13 	bl	2a71a <bt_le_conn_params_valid>
    faf4:	b910      	cbnz	r0, fafc <bt_conn_le_create+0x30>
		return -EINVAL;
    faf6:	f06f 0515 	mvn.w	r5, #21
    fafa:	e7f4      	b.n	fae6 <bt_conn_le_create+0x1a>
    fafc:	4846      	ldr	r0, [pc, #280]	; (fc18 <bt_conn_le_create+0x14c>)
    fafe:	f01a fef0 	bl	2a8e2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fb02:	0642      	lsls	r2, r0, #25
    fb04:	d4ed      	bmi.n	fae2 <bt_conn_le_create+0x16>
    fb06:	4844      	ldr	r0, [pc, #272]	; (fc18 <bt_conn_le_create+0x14c>)
    fb08:	f01a feeb 	bl	2a8e2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    fb0c:	0503      	lsls	r3, r0, #20
    fb0e:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    fb12:	d47a      	bmi.n	fc0a <bt_conn_le_create+0x13e>
	if (!bt_id_scan_random_addr_check()) {
    fb14:	f01a feb3 	bl	2a87e <bt_id_scan_random_addr_check>
    fb18:	2800      	cmp	r0, #0
    fb1a:	d0ec      	beq.n	faf6 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    fb1c:	4621      	mov	r1, r4
    fb1e:	4640      	mov	r0, r8
    fb20:	f7ff ff86 	bl	fa30 <bt_conn_exists_le>
    fb24:	2800      	cmp	r0, #0
    fb26:	d1e6      	bne.n	faf6 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    fb28:	7823      	ldrb	r3, [r4, #0]
    fb2a:	3b02      	subs	r3, #2
    fb2c:	2b01      	cmp	r3, #1
    fb2e:	d84a      	bhi.n	fbc6 <bt_conn_le_create+0xfa>
    fb30:	2207      	movs	r2, #7
    fb32:	4621      	mov	r1, r4
    fb34:	4668      	mov	r0, sp
    fb36:	f01a fc11 	bl	2a35c <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    fb3a:	f89d 3000 	ldrb.w	r3, [sp]
    fb3e:	3b02      	subs	r3, #2
    fb40:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    fb44:	4669      	mov	r1, sp
    fb46:	2000      	movs	r0, #0
    fb48:	f7ff ff36 	bl	f9b8 <bt_conn_add_le>
	if (!conn) {
    fb4c:	4604      	mov	r4, r0
    fb4e:	2800      	cmp	r0, #0
    fb50:	d05e      	beq.n	fc10 <bt_conn_le_create+0x144>
	conn->le.interval_min = param->interval_min;
    fb52:	882b      	ldrh	r3, [r5, #0]
    fb54:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    fb58:	886b      	ldrh	r3, [r5, #2]
    fb5a:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    fb5e:	88ab      	ldrh	r3, [r5, #4]
    fb60:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    fb64:	88eb      	ldrh	r3, [r5, #6]
    fb66:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    fb6a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    fb6e:	4d2b      	ldr	r5, [pc, #172]	; (fc1c <bt_conn_le_create+0x150>)
    fb70:	f105 0c08 	add.w	ip, r5, #8
    fb74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    fb78:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    fb7a:	2b00      	cmp	r3, #0
    fb7c:	bf08      	it	eq
    fb7e:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    fb82:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    fb84:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    fb86:	b903      	cbnz	r3, fb8a <bt_conn_le_create+0xbe>
    fb88:	89ab      	ldrh	r3, [r5, #12]
    fb8a:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
    fb8c:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
    fb8e:	b903      	cbnz	r3, fb92 <bt_conn_le_create+0xc6>
    fb90:	89eb      	ldrh	r3, [r5, #14]
    fb92:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    fb94:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    fb98:	b11b      	cbz	r3, fba2 <bt_conn_le_create+0xd6>
    fb9a:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    fb9e:	429a      	cmp	r2, r3
    fba0:	d91a      	bls.n	fbd8 <bt_conn_le_create+0x10c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    fba2:	2102      	movs	r1, #2
    fba4:	4620      	mov	r0, r4
    fba6:	f7ff fcd3 	bl	f550 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    fbaa:	2001      	movs	r0, #1
    fbac:	f7fe ff34 	bl	ea18 <bt_le_scan_update>
		if (err) {
    fbb0:	4605      	mov	r5, r0
    fbb2:	b340      	cbz	r0, fc06 <bt_conn_le_create+0x13a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbb4:	4620      	mov	r0, r4
    fbb6:	2100      	movs	r1, #0
    fbb8:	f7ff fcca 	bl	f550 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    fbbc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fbc0:	f01a fea7 	bl	2a912 <atomic_dec.isra.0>
			return err;
    fbc4:	e78f      	b.n	fae6 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    fbc6:	4621      	mov	r1, r4
    fbc8:	f01a fe33 	bl	2a832 <bt_lookup_id_addr>
    fbcc:	2207      	movs	r2, #7
    fbce:	4601      	mov	r1, r0
    fbd0:	4668      	mov	r0, sp
    fbd2:	f01a fbc3 	bl	2a35c <memcpy>
}
    fbd6:	e7b5      	b.n	fb44 <bt_conn_le_create+0x78>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    fbd8:	2106      	movs	r1, #6
    fbda:	4620      	mov	r0, r4
    fbdc:	f7ff fcb8 	bl	f550 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    fbe0:	4620      	mov	r0, r4
    fbe2:	f01a fd37 	bl	2a654 <bt_le_create_conn>
	if (err) {
    fbe6:	4605      	mov	r5, r0
    fbe8:	b168      	cbz	r0, fc06 <bt_conn_le_create+0x13a>
		conn->err = 0;
    fbea:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbec:	4620      	mov	r0, r4
		conn->err = 0;
    fbee:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbf0:	4631      	mov	r1, r6
    fbf2:	f7ff fcad 	bl	f550 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    fbf6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fbfa:	f01a fe8a 	bl	2a912 <atomic_dec.isra.0>
		bt_le_scan_update(false);
    fbfe:	4630      	mov	r0, r6
    fc00:	f7fe ff0a 	bl	ea18 <bt_le_scan_update>
		return err;
    fc04:	e76f      	b.n	fae6 <bt_conn_le_create+0x1a>
	*ret_conn = conn;
    fc06:	603c      	str	r4, [r7, #0]
	return 0;
    fc08:	e76d      	b.n	fae6 <bt_conn_le_create+0x1a>
		return -EALREADY;
    fc0a:	f06f 0577 	mvn.w	r5, #119	; 0x77
    fc0e:	e76a      	b.n	fae6 <bt_conn_le_create+0x1a>
		return -ENOMEM;
    fc10:	f06f 050b 	mvn.w	r5, #11
    fc14:	e767      	b.n	fae6 <bt_conn_le_create+0x1a>
    fc16:	bf00      	nop
    fc18:	200000cc 	.word	0x200000cc
    fc1c:	20000000 	.word	0x20000000

0000fc20 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    fc20:	b570      	push	{r4, r5, r6, lr}
    fc22:	4606      	mov	r6, r0
    fc24:	4835      	ldr	r0, [pc, #212]	; (fcfc <bt_le_set_auto_conn+0xdc>)
    fc26:	f01a fe5c 	bl	2a8e2 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fc2a:	0780      	lsls	r0, r0, #30
{
    fc2c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fc2e:	d55e      	bpl.n	fcee <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    fc30:	b929      	cbnz	r1, fc3e <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
    fc32:	f01a fe24 	bl	2a87e <bt_id_scan_random_addr_check>
    fc36:	b940      	cbnz	r0, fc4a <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    fc38:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    fc3c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    fc3e:	4608      	mov	r0, r1
    fc40:	f01a fd6b 	bl	2a71a <bt_le_conn_params_valid>
    fc44:	2800      	cmp	r0, #0
    fc46:	d1f4      	bne.n	fc32 <bt_le_set_auto_conn+0x12>
    fc48:	e7f6      	b.n	fc38 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    fc4a:	4631      	mov	r1, r6
    fc4c:	2000      	movs	r0, #0
    fc4e:	f7ff fecf 	bl	f9f0 <bt_conn_lookup_addr_le>
	if (!conn) {
    fc52:	4604      	mov	r4, r0
    fc54:	b928      	cbnz	r0, fc62 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    fc56:	4631      	mov	r1, r6
    fc58:	f7ff feae 	bl	f9b8 <bt_conn_add_le>
		if (!conn) {
    fc5c:	4604      	mov	r4, r0
    fc5e:	2800      	cmp	r0, #0
    fc60:	d048      	beq.n	fcf4 <bt_le_set_auto_conn+0xd4>
		if (!atomic_test_and_set_bit(conn->flags,
    fc62:	1d20      	adds	r0, r4, #4
	old = atomic_dec(&conn->ref);
    fc64:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
	if (param) {
    fc68:	b385      	cbz	r5, fccc <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    fc6a:	882b      	ldrh	r3, [r5, #0]
    fc6c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    fc70:	886b      	ldrh	r3, [r5, #2]
    fc72:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    fc76:	88ab      	ldrh	r3, [r5, #4]
    fc78:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    fc7c:	88eb      	ldrh	r3, [r5, #6]
    fc7e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    fc82:	f3bf 8f5b 	dmb	ish
    fc86:	e850 3f00 	ldrex	r3, [r0]
    fc8a:	f043 0201 	orr.w	r2, r3, #1
    fc8e:	e840 2100 	strex	r1, r2, [r0]
    fc92:	2900      	cmp	r1, #0
    fc94:	d1f7      	bne.n	fc86 <bt_le_set_auto_conn+0x66>
    fc96:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    fc9a:	07d9      	lsls	r1, r3, #31
    fc9c:	d402      	bmi.n	fca4 <bt_le_set_auto_conn+0x84>
			bt_conn_ref(conn);
    fc9e:	4620      	mov	r0, r4
    fca0:	f01a fe90 	bl	2a9c4 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    fca4:	7b63      	ldrb	r3, [r4, #13]
    fca6:	b963      	cbnz	r3, fcc2 <bt_le_set_auto_conn+0xa2>
    fca8:	4814      	ldr	r0, [pc, #80]	; (fcfc <bt_le_set_auto_conn+0xdc>)
    fcaa:	f01a fe1a 	bl	2a8e2 <atomic_get>
    fcae:	0783      	lsls	r3, r0, #30
    fcb0:	d507      	bpl.n	fcc2 <bt_le_set_auto_conn+0xa2>
		if (param) {
    fcb2:	b11d      	cbz	r5, fcbc <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    fcb4:	2102      	movs	r1, #2
    fcb6:	4620      	mov	r0, r4
    fcb8:	f7ff fc4a 	bl	f550 <bt_conn_set_state>
		bt_le_scan_update(false);
    fcbc:	2000      	movs	r0, #0
    fcbe:	f7fe feab 	bl	ea18 <bt_le_scan_update>
	old = atomic_dec(&conn->ref);
    fcc2:	4630      	mov	r0, r6
    fcc4:	f01a fe25 	bl	2a912 <atomic_dec.isra.0>
	return 0;
    fcc8:	2000      	movs	r0, #0
    fcca:	e7b7      	b.n	fc3c <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fccc:	f06f 0101 	mvn.w	r1, #1
    fcd0:	f01a fdf8 	bl	2a8c4 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
    fcd4:	07c2      	lsls	r2, r0, #31
    fcd6:	d5e5      	bpl.n	fca4 <bt_le_set_auto_conn+0x84>
	old = atomic_dec(&conn->ref);
    fcd8:	4630      	mov	r0, r6
    fcda:	f01a fe1a 	bl	2a912 <atomic_dec.isra.0>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    fcde:	7b63      	ldrb	r3, [r4, #13]
    fce0:	2b02      	cmp	r3, #2
    fce2:	d1df      	bne.n	fca4 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fce4:	4629      	mov	r1, r5
    fce6:	4620      	mov	r0, r4
    fce8:	f7ff fc32 	bl	f550 <bt_conn_set_state>
    fcec:	e7da      	b.n	fca4 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    fcee:	f06f 000a 	mvn.w	r0, #10
    fcf2:	e7a3      	b.n	fc3c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    fcf4:	f06f 000b 	mvn.w	r0, #11
    fcf8:	e7a0      	b.n	fc3c <bt_le_set_auto_conn+0x1c>
    fcfa:	bf00      	nop
    fcfc:	200000cc 	.word	0x200000cc

0000fd00 <send_conn_le_param_update>:
{
    fd00:	b538      	push	{r3, r4, r5, lr}
    fd02:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    fd04:	4608      	mov	r0, r1
{
    fd06:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    fd08:	f01a fd07 	bl	2a71a <bt_le_conn_params_valid>
    fd0c:	b338      	cbz	r0, fd5e <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    fd0e:	4b15      	ldr	r3, [pc, #84]	; (fd64 <send_conn_le_param_update+0x64>)
    fd10:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    fd14:	0799      	lsls	r1, r3, #30
    fd16:	d407      	bmi.n	fd28 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    fd18:	78e3      	ldrb	r3, [r4, #3]
    fd1a:	b173      	cbz	r3, fd3a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    fd1c:	4629      	mov	r1, r5
    fd1e:	4620      	mov	r0, r4
}
    fd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    fd24:	f000 bb2c 	b.w	10380 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    fd28:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    fd2c:	079a      	lsls	r2, r3, #30
    fd2e:	d5f3      	bpl.n	fd18 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fd30:	1d20      	adds	r0, r4, #4
    fd32:	f01a fdd6 	bl	2a8e2 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    fd36:	0543      	lsls	r3, r0, #21
    fd38:	d4ee      	bmi.n	fd18 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    fd3a:	4629      	mov	r1, r5
    fd3c:	4620      	mov	r0, r4
    fd3e:	f01a ff50 	bl	2abe2 <bt_conn_le_conn_update>
		if (rc == 0) {
    fd42:	b958      	cbnz	r0, fd5c <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    fd44:	882b      	ldrh	r3, [r5, #0]
    fd46:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    fd4a:	886b      	ldrh	r3, [r5, #2]
    fd4c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    fd50:	88ab      	ldrh	r3, [r5, #4]
    fd52:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    fd56:	88eb      	ldrh	r3, [r5, #6]
    fd58:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    fd5c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    fd5e:	f06f 0015 	mvn.w	r0, #21
    fd62:	e7fb      	b.n	fd5c <send_conn_le_param_update+0x5c>
    fd64:	20000000 	.word	0x20000000

0000fd68 <deferred_work>:
{
    fd68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    fd6a:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    fd6e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    fd70:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    fd74:	bb03      	cbnz	r3, fdb8 <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
    fd76:	4628      	mov	r0, r5
    fd78:	f01a ff95 	bl	2aca6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    fd7c:	4b2a      	ldr	r3, [pc, #168]	; (fe28 <deferred_work+0xc0>)
    fd7e:	681e      	ldr	r6, [r3, #0]
    fd80:	b956      	cbnz	r6, fd98 <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fd82:	4e2a      	ldr	r6, [pc, #168]	; (fe2c <deferred_work+0xc4>)
    fd84:	4f2a      	ldr	r7, [pc, #168]	; (fe30 <deferred_work+0xc8>)
    fd86:	42be      	cmp	r6, r7
    fd88:	d30e      	bcc.n	fda8 <deferred_work+0x40>
	old = atomic_dec(&conn->ref);
    fd8a:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
    fd8e:	b003      	add	sp, #12
    fd90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	old = atomic_dec(&conn->ref);
    fd94:	f01a bdbd 	b.w	2a912 <atomic_dec.isra.0>
		if (cb->disconnected) {
    fd98:	6873      	ldr	r3, [r6, #4]
    fd9a:	b11b      	cbz	r3, fda4 <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
    fd9c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    fda0:	4628      	mov	r0, r5
    fda2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    fda4:	69b6      	ldr	r6, [r6, #24]
    fda6:	e7eb      	b.n	fd80 <deferred_work+0x18>
		if (cb->disconnected) {
    fda8:	6873      	ldr	r3, [r6, #4]
    fdaa:	b11b      	cbz	r3, fdb4 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
    fdac:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    fdb0:	4628      	mov	r0, r5
    fdb2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    fdb4:	361c      	adds	r6, #28
    fdb6:	e7e6      	b.n	fd86 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    fdb8:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    fdbc:	2b01      	cmp	r3, #1
    fdbe:	d130      	bne.n	fe22 <deferred_work+0xba>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fdc0:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    fdc4:	b923      	cbnz	r3, fdd0 <deferred_work+0x68>
}
    fdc6:	b003      	add	sp, #12
    fdc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    fdcc:	f7fd bab0 	b.w	d330 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    fdd0:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fdd4:	f46f 7100 	mvn.w	r1, #512	; 0x200
    fdd8:	4630      	mov	r0, r6
    fdda:	f01a fd73 	bl	2a8c4 <atomic_and>
    fdde:	0583      	lsls	r3, r0, #22
    fde0:	d513      	bpl.n	fe0a <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    fde2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    fde6:	f8ad 3000 	strh.w	r3, [sp]
    fdea:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    fdee:	f8ad 3002 	strh.w	r3, [sp, #2]
    fdf2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    fdf6:	f8ad 3004 	strh.w	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    fdfa:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    fdfc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    fe00:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    fe04:	4628      	mov	r0, r5
    fe06:	f7ff ff7b 	bl	fd00 <send_conn_le_param_update>
    fe0a:	f3bf 8f5b 	dmb	ish
    fe0e:	e856 3f00 	ldrex	r3, [r6]
    fe12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fe16:	e846 3200 	strex	r2, r3, [r6]
    fe1a:	2a00      	cmp	r2, #0
    fe1c:	d1f7      	bne.n	fe0e <deferred_work+0xa6>
    fe1e:	f3bf 8f5b 	dmb	ish
}
    fe22:	b003      	add	sp, #12
    fe24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe26:	bf00      	nop
    fe28:	20002cbc 	.word	0x20002cbc
    fe2c:	0002e210 	.word	0x0002e210
    fe30:	0002e210 	.word	0x0002e210

0000fe34 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    fe34:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    fe36:	4801      	ldr	r0, [pc, #4]	; (fe3c <bt_conn_create_frag_timeout+0x8>)
    fe38:	f7ff bcbe 	b.w	f7b8 <bt_conn_create_pdu_timeout>
    fe3c:	20000d08 	.word	0x20000d08

0000fe40 <create_frag>:
{
    fe40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe44:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    fe46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fe4e:	2000      	movs	r0, #0
{
    fe50:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    fe52:	f7ff ffef 	bl	fe34 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    fe56:	7b73      	ldrb	r3, [r6, #13]
    fe58:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    fe5a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    fe5c:	f04f 0600 	mov.w	r6, #0
    fe60:	d005      	beq.n	fe6e <create_frag+0x2e>
		net_buf_unref(frag);
    fe62:	f010 fee1 	bl	20c28 <net_buf_unref>
		return NULL;
    fe66:	4635      	mov	r5, r6
}
    fe68:	4628      	mov	r0, r5
    fe6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    fe6e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    fe70:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    fe74:	4e0c      	ldr	r6, [pc, #48]	; (fea8 <create_frag+0x68>)
    fe76:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    fe78:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    fe7c:	f01c fe24 	bl	2cac8 <net_buf_simple_tailroom>
    fe80:	4580      	cmp	r8, r0
    fe82:	d20c      	bcs.n	fe9e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    fe84:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fe88:	f854 1f08 	ldr.w	r1, [r4, #8]!
    fe8c:	4632      	mov	r2, r6
    fe8e:	4638      	mov	r0, r7
    fe90:	f01c fdd3 	bl	2ca3a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    fe94:	4631      	mov	r1, r6
    fe96:	4620      	mov	r0, r4
    fe98:	f01c fdf2 	bl	2ca80 <net_buf_simple_pull>
    fe9c:	e7e4      	b.n	fe68 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    fe9e:	4638      	mov	r0, r7
    fea0:	f01c fe12 	bl	2cac8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    fea4:	b286      	uxth	r6, r0
    fea6:	e7ef      	b.n	fe88 <create_frag+0x48>
    fea8:	20000000 	.word	0x20000000

0000feac <bt_conn_process_tx>:
{
    feac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    feae:	7b43      	ldrb	r3, [r0, #13]
{
    feb0:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    feb2:	b95b      	cbnz	r3, fecc <bt_conn_process_tx+0x20>
    feb4:	f06f 0140 	mvn.w	r1, #64	; 0x40
    feb8:	3004      	adds	r0, #4
    feba:	f01a fd03 	bl	2a8c4 <atomic_and>
    febe:	0643      	lsls	r3, r0, #25
    fec0:	d504      	bpl.n	fecc <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    fec2:	4620      	mov	r0, r4
}
    fec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    fec8:	f01a bd5e 	b.w	2a988 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    fecc:	2200      	movs	r2, #0
    fece:	2300      	movs	r3, #0
    fed0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fed4:	f01c fd48 	bl	2c968 <net_buf_get>
	BT_ASSERT(buf);
    fed8:	4605      	mov	r5, r0
    feda:	b960      	cbnz	r0, fef6 <bt_conn_process_tx+0x4a>
    fedc:	4a1f      	ldr	r2, [pc, #124]	; (ff5c <bt_conn_process_tx+0xb0>)
    fede:	4920      	ldr	r1, [pc, #128]	; (ff60 <bt_conn_process_tx+0xb4>)
    fee0:	4820      	ldr	r0, [pc, #128]	; (ff64 <bt_conn_process_tx+0xb8>)
    fee2:	f240 23e7 	movw	r3, #743	; 0x2e7
    fee6:	f016 fd39 	bl	2695c <printk>
    feea:	4040      	eors	r0, r0
    feec:	f380 8811 	msr	BASEPRI, r0
    fef0:	f04f 0003 	mov.w	r0, #3
    fef4:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    fef6:	4e1c      	ldr	r6, [pc, #112]	; (ff68 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    fef8:	89aa      	ldrh	r2, [r5, #12]
    fefa:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    fefe:	429a      	cmp	r2, r3
    ff00:	d807      	bhi.n	ff12 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    ff02:	2300      	movs	r3, #0
    ff04:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    ff06:	4629      	mov	r1, r5
    ff08:	4620      	mov	r0, r4
    ff0a:	f7ff f8f5 	bl	f0f8 <send_frag>
	if (!send_buf(conn, buf)) {
    ff0e:	b130      	cbz	r0, ff1e <bt_conn_process_tx+0x72>
}
    ff10:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    ff12:	4629      	mov	r1, r5
    ff14:	4620      	mov	r0, r4
    ff16:	f7ff ff93 	bl	fe40 <create_frag>
	if (!frag) {
    ff1a:	4601      	mov	r1, r0
    ff1c:	b920      	cbnz	r0, ff28 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    ff1e:	4628      	mov	r0, r5
}
    ff20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    ff24:	f010 be80 	b.w	20c28 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    ff28:	2301      	movs	r3, #1
    ff2a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ff2c:	4620      	mov	r0, r4
    ff2e:	f7ff f8e3 	bl	f0f8 <send_frag>
    ff32:	2800      	cmp	r0, #0
    ff34:	d0f3      	beq.n	ff1e <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    ff36:	89aa      	ldrh	r2, [r5, #12]
    ff38:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    ff3c:	429a      	cmp	r2, r3
    ff3e:	d802      	bhi.n	ff46 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    ff40:	2300      	movs	r3, #0
    ff42:	2203      	movs	r2, #3
    ff44:	e7df      	b.n	ff06 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    ff46:	4629      	mov	r1, r5
    ff48:	4620      	mov	r0, r4
    ff4a:	f7ff ff79 	bl	fe40 <create_frag>
		if (!frag) {
    ff4e:	4601      	mov	r1, r0
    ff50:	2800      	cmp	r0, #0
    ff52:	d0e4      	beq.n	ff1e <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ff54:	2301      	movs	r3, #1
    ff56:	461a      	mov	r2, r3
    ff58:	e7e8      	b.n	ff2c <bt_conn_process_tx+0x80>
    ff5a:	bf00      	nop
    ff5c:	00033920 	.word	0x00033920
    ff60:	00032c92 	.word	0x00032c92
    ff64:	00032f08 	.word	0x00032f08
    ff68:	20000000 	.word	0x20000000

0000ff6c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    ff6c:	b570      	push	{r4, r5, r6, lr}
    ff6e:	4d14      	ldr	r5, [pc, #80]	; (ffc0 <bt_conn_init+0x54>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    ff70:	4e14      	ldr	r6, [pc, #80]	; (ffc4 <bt_conn_init+0x58>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    ff72:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    ff74:	4629      	mov	r1, r5
    ff76:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    ff78:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    ff7a:	f01d fb7d 	bl	2d678 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    ff7e:	2c10      	cmp	r4, #16
    ff80:	f105 0510 	add.w	r5, r5, #16
    ff84:	d1f6      	bne.n	ff74 <bt_conn_init+0x8>
	}

	bt_att_init();
    ff86:	f01b fa48 	bl	2b41a <bt_att_init>

	err = bt_smp_init();
    ff8a:	f004 fe1f 	bl	14bcc <bt_smp_init>
	if (err) {
    ff8e:	4605      	mov	r5, r0
    ff90:	b9a0      	cbnz	r0, ffbc <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    ff92:	f01a fefe 	bl	2ad92 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    ff96:	480c      	ldr	r0, [pc, #48]	; (ffc8 <bt_conn_init+0x5c>)
    ff98:	f01a fd14 	bl	2a9c4 <bt_conn_ref>

			if (!conn) {
    ff9c:	4604      	mov	r4, r0
    ff9e:	b168      	cbz	r0, ffbc <bt_conn_init+0x50>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ffa0:	3004      	adds	r0, #4
    ffa2:	f01a fc9e 	bl	2a8e2 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    ffa6:	07c3      	lsls	r3, r0, #31
    ffa8:	d504      	bpl.n	ffb4 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    ffaa:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ffac:	2102      	movs	r1, #2
    ffae:	4620      	mov	r0, r4
    ffb0:	f7ff face 	bl	f550 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    ffb4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ffb8:	f01a fcab 	bl	2a912 <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    ffbc:	4628      	mov	r0, r5
    ffbe:	bd70      	pop	{r4, r5, r6, pc}
    ffc0:	20002cc0 	.word	0x20002cc0
    ffc4:	20000c68 	.word	0x20000c68
    ffc8:	20001ae8 	.word	0x20001ae8

0000ffcc <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    ffcc:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
    ffce:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    ffd0:	b089      	sub	sp, #36	; 0x24
    ffd2:	4605      	mov	r5, r0
    ffd4:	460f      	mov	r7, r1
    ffd6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    ffd8:	2104      	movs	r1, #4
    ffda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ffde:	2000      	movs	r0, #0
    ffe0:	f7ff fbea 	bl	f7b8 <bt_conn_create_pdu_timeout>
	if (!buf) {
    ffe4:	4604      	mov	r4, r0
    ffe6:	b988      	cbnz	r0, 1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    ffe8:	480c      	ldr	r0, [pc, #48]	; (1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>)
    ffea:	6803      	ldr	r3, [r0, #0]
    ffec:	075b      	lsls	r3, r3, #29
    ffee:	d00a      	beq.n	10006 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7>
    fff0:	4b0b      	ldr	r3, [pc, #44]	; (10020 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21>)
    fff2:	aa05      	add	r2, sp, #20
    fff4:	e9cd 3506 	strd	r3, r5, [sp, #24]
    fff8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fffc:	2303      	movs	r3, #3
    fffe:	9301      	str	r3, [sp, #4]
   10000:	9305      	str	r3, [sp, #20]
   10002:	f01a fe1a 	bl	2ac3a <z_log_msg2_static_create.constprop.0>
}
   10006:	4620      	mov	r0, r4
   10008:	b009      	add	sp, #36	; 0x24
   1000a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1000c:	2104      	movs	r1, #4
   1000e:	3008      	adds	r0, #8
   10010:	f01c fd0d 	bl	2ca2e <net_buf_simple_add>
	hdr->code = code;
   10014:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   10016:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   10018:	8046      	strh	r6, [r0, #2]
	return buf;
   1001a:	e7f4      	b.n	10006 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7>
   1001c:	20000a58 	.word	0x20000a58
   10020:	000339ad 	.word	0x000339ad

00010024 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   10024:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   10026:	4a0e      	ldr	r2, [pc, #56]	; (10060 <l2cap_accept+0x3c>)
{
   10028:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1002a:	6810      	ldr	r0, [r2, #0]
{
   1002c:	b089      	sub	sp, #36	; 0x24
		if (l2cap->chan.chan.conn) {
   1002e:	b928      	cbnz	r0, 1003c <l2cap_accept+0x18>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   10030:	4b0c      	ldr	r3, [pc, #48]	; (10064 <l2cap_accept+0x40>)
   10032:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   10034:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   10036:	b009      	add	sp, #36	; 0x24
   10038:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
   1003c:	480a      	ldr	r0, [pc, #40]	; (10068 <l2cap_accept+0x44>)
   1003e:	6802      	ldr	r2, [r0, #0]
   10040:	0752      	lsls	r2, r2, #29
   10042:	d00a      	beq.n	1005a <l2cap_accept+0x36>
   10044:	4a09      	ldr	r2, [pc, #36]	; (1006c <l2cap_accept+0x48>)
   10046:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1004a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1004e:	2303      	movs	r3, #3
   10050:	aa05      	add	r2, sp, #20
   10052:	9301      	str	r3, [sp, #4]
   10054:	9305      	str	r3, [sp, #20]
   10056:	f01a fdf0 	bl	2ac3a <z_log_msg2_static_create.constprop.0>
   1005a:	f06f 000b 	mvn.w	r0, #11
   1005e:	e7ea      	b.n	10036 <l2cap_accept+0x12>
   10060:	20001ba8 	.word	0x20001ba8
   10064:	0002f3d4 	.word	0x0002f3d4
   10068:	20000a58 	.word	0x20000a58
   1006c:	000339d5 	.word	0x000339d5

00010070 <l2cap_rtx_timeout>:
{
   10070:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   10072:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
   10074:	480d      	ldr	r0, [pc, #52]	; (100ac <l2cap_rtx_timeout+0x3c>)
	struct bt_conn *conn = chan->chan.conn;
   10076:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1007a:	6803      	ldr	r3, [r0, #0]
   1007c:	075b      	lsls	r3, r3, #29
{
   1007e:	b089      	sub	sp, #36	; 0x24
	BT_ERR("chan %p timeout", chan);
   10080:	d00a      	beq.n	10098 <l2cap_rtx_timeout+0x28>
   10082:	4b0b      	ldr	r3, [pc, #44]	; (100b0 <l2cap_rtx_timeout+0x40>)
   10084:	aa05      	add	r2, sp, #20
   10086:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1008a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1008e:	2303      	movs	r3, #3
   10090:	9301      	str	r3, [sp, #4]
   10092:	9305      	str	r3, [sp, #20]
   10094:	f01a fdd1 	bl	2ac3a <z_log_msg2_static_create.constprop.0>
	bt_l2cap_chan_remove(conn, &chan->chan);
   10098:	4628      	mov	r0, r5
   1009a:	4621      	mov	r1, r4
   1009c:	f01a fdd0 	bl	2ac40 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   100a0:	4620      	mov	r0, r4
}
   100a2:	b009      	add	sp, #36	; 0x24
   100a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   100a8:	f01a bde8 	b.w	2ac7c <bt_l2cap_chan_del>
   100ac:	20000a58 	.word	0x20000a58
   100b0:	000339fc 	.word	0x000339fc

000100b4 <bt_l2cap_connected>:
{
   100b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   100b8:	4e29      	ldr	r6, [pc, #164]	; (10160 <bt_l2cap_connected+0xac>)
   100ba:	4f2a      	ldr	r7, [pc, #168]	; (10164 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   100bc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 10168 <bt_l2cap_connected+0xb4>
{
   100c0:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   100c2:	42be      	cmp	r6, r7
   100c4:	d302      	bcc.n	100cc <bt_l2cap_connected+0x18>
}
   100c6:	b003      	add	sp, #12
   100c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   100cc:	6873      	ldr	r3, [r6, #4]
   100ce:	a901      	add	r1, sp, #4
   100d0:	4620      	mov	r0, r4
   100d2:	4798      	blx	r3
   100d4:	2800      	cmp	r0, #0
   100d6:	db3d      	blt.n	10154 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   100d8:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   100da:	8833      	ldrh	r3, [r6, #0]
   100dc:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   100e0:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   100e4:	4641      	mov	r1, r8
   100e6:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   100ea:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   100ee:	f01d fbba 	bl	2d866 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   100f2:	f3bf 8f5b 	dmb	ish
   100f6:	f105 0368 	add.w	r3, r5, #104	; 0x68
   100fa:	2200      	movs	r2, #0
   100fc:	e853 1f00 	ldrex	r1, [r3]
   10100:	e843 2000 	strex	r0, r2, [r3]
   10104:	2800      	cmp	r0, #0
   10106:	d1f9      	bne.n	100fc <bt_l2cap_connected+0x48>
   10108:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1010c:	60aa      	str	r2, [r5, #8]
	return list->tail;
   1010e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   10110:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   10114:	bb02      	cbnz	r2, 10158 <bt_l2cap_connected+0xa4>
	list->head = node;
   10116:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   1011a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1011c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1011e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   10120:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   10124:	681b      	ldr	r3, [r3, #0]
   10126:	b103      	cbz	r3, 1012a <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   10128:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1012a:	9b01      	ldr	r3, [sp, #4]
   1012c:	f3bf 8f5b 	dmb	ish
   10130:	3368      	adds	r3, #104	; 0x68
   10132:	e853 2f00 	ldrex	r2, [r3]
   10136:	f042 0201 	orr.w	r2, r2, #1
   1013a:	e843 2100 	strex	r1, r2, [r3]
   1013e:	2900      	cmp	r1, #0
   10140:	d1f7      	bne.n	10132 <bt_l2cap_connected+0x7e>
   10142:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   10146:	9801      	ldr	r0, [sp, #4]
   10148:	6843      	ldr	r3, [r0, #4]
   1014a:	699b      	ldr	r3, [r3, #24]
   1014c:	b113      	cbz	r3, 10154 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   1014e:	f100 0168 	add.w	r1, r0, #104	; 0x68
   10152:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   10154:	360c      	adds	r6, #12
   10156:	e7b4      	b.n	100c2 <bt_l2cap_connected+0xe>
	parent->next = child;
   10158:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1015a:	6563      	str	r3, [r4, #84]	; 0x54
}
   1015c:	e7dd      	b.n	1011a <bt_l2cap_connected+0x66>
   1015e:	bf00      	nop
   10160:	0002e1ec 	.word	0x0002e1ec
   10164:	0002e210 	.word	0x0002e210
   10168:	00010071 	.word	0x00010071

0001016c <l2cap_recv>:
{
   1016c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10170:	b08a      	sub	sp, #40	; 0x28
	if (buf->len < sizeof(*hdr)) {
   10172:	898b      	ldrh	r3, [r1, #12]
   10174:	2b03      	cmp	r3, #3
{
   10176:	af02      	add	r7, sp, #8
   10178:	4606      	mov	r6, r0
   1017a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1017c:	d80f      	bhi.n	1019e <l2cap_recv+0x32>
		BT_ERR("Too small L2CAP signaling PDU");
   1017e:	4859      	ldr	r0, [pc, #356]	; (102e4 <l2cap_recv+0x178>)
   10180:	6803      	ldr	r3, [r0, #0]
   10182:	075d      	lsls	r5, r3, #29
   10184:	d02b      	beq.n	101de <l2cap_recv+0x72>
   10186:	4b58      	ldr	r3, [pc, #352]	; (102e8 <l2cap_recv+0x17c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   10188:	61bb      	str	r3, [r7, #24]
   1018a:	f107 0214 	add.w	r2, r7, #20
   1018e:	2302      	movs	r3, #2
   10190:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10194:	607b      	str	r3, [r7, #4]
   10196:	617b      	str	r3, [r7, #20]
   10198:	f01a fd4f 	bl	2ac3a <z_log_msg2_static_create.constprop.0>
   1019c:	e01f      	b.n	101de <l2cap_recv+0x72>
	return net_buf_simple_pull_mem(&buf->b, len);
   1019e:	2104      	movs	r1, #4
   101a0:	f105 0008 	add.w	r0, r5, #8
   101a4:	f01c fc74 	bl	2ca90 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   101a8:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   101aa:	f8b0 c002 	ldrh.w	ip, [r0, #2]
	if (buf->len != len) {
   101ae:	459c      	cmp	ip, r3
   101b0:	4604      	mov	r4, r0
   101b2:	d019      	beq.n	101e8 <l2cap_recv+0x7c>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   101b4:	484b      	ldr	r0, [pc, #300]	; (102e4 <l2cap_recv+0x178>)
   101b6:	6802      	ldr	r2, [r0, #0]
   101b8:	0754      	lsls	r4, r2, #29
   101ba:	d010      	beq.n	101de <l2cap_recv+0x72>
   101bc:	494b      	ldr	r1, [pc, #300]	; (102ec <l2cap_recv+0x180>)
   101be:	466c      	mov	r4, sp
   101c0:	b088      	sub	sp, #32
   101c2:	aa02      	add	r2, sp, #8
   101c4:	e9c2 1304 	strd	r1, r3, [r2, #16]
   101c8:	2304      	movs	r3, #4
   101ca:	f8c2 c018 	str.w	ip, [r2, #24]
   101ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   101d2:	f842 3f0c 	str.w	r3, [r2, #12]!
   101d6:	60bb      	str	r3, [r7, #8]
   101d8:	f01a fd2f 	bl	2ac3a <z_log_msg2_static_create.constprop.0>
   101dc:	46a5      	mov	sp, r4
}
   101de:	2000      	movs	r0, #0
   101e0:	3720      	adds	r7, #32
   101e2:	46bd      	mov	sp, r7
   101e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
   101e8:	7841      	ldrb	r1, [r0, #1]
   101ea:	b929      	cbnz	r1, 101f8 <l2cap_recv+0x8c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   101ec:	483d      	ldr	r0, [pc, #244]	; (102e4 <l2cap_recv+0x178>)
   101ee:	6803      	ldr	r3, [r0, #0]
   101f0:	0759      	lsls	r1, r3, #29
   101f2:	d0f4      	beq.n	101de <l2cap_recv+0x72>
   101f4:	4b3e      	ldr	r3, [pc, #248]	; (102f0 <l2cap_recv+0x184>)
   101f6:	e7c7      	b.n	10188 <l2cap_recv+0x1c>
	switch (hdr->code) {
   101f8:	7803      	ldrb	r3, [r0, #0]
   101fa:	2b12      	cmp	r3, #18
   101fc:	d020      	beq.n	10240 <l2cap_recv+0xd4>
   101fe:	2b13      	cmp	r3, #19
   10200:	d015      	beq.n	1022e <l2cap_recv+0xc2>
   10202:	2b01      	cmp	r3, #1
   10204:	d0eb      	beq.n	101de <l2cap_recv+0x72>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   10206:	4837      	ldr	r0, [pc, #220]	; (102e4 <l2cap_recv+0x178>)
   10208:	6802      	ldr	r2, [r0, #0]
   1020a:	f012 0f06 	tst.w	r2, #6
   1020e:	d00b      	beq.n	10228 <l2cap_recv+0xbc>
   10210:	4a38      	ldr	r2, [pc, #224]	; (102f4 <l2cap_recv+0x188>)
   10212:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
	switch (hdr->code) {
   10216:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1021a:	2303      	movs	r3, #3
   1021c:	f107 0214 	add.w	r2, r7, #20
   10220:	607b      	str	r3, [r7, #4]
   10222:	617b      	str	r3, [r7, #20]
   10224:	f01a fd09 	bl	2ac3a <z_log_msg2_static_create.constprop.0>
		l2cap_send_reject(chan->conn, hdr->ident,
   10228:	7861      	ldrb	r1, [r4, #1]
   1022a:	6830      	ldr	r0, [r6, #0]
   1022c:	e018      	b.n	10260 <l2cap_recv+0xf4>
	if (buf->len < sizeof(*rsp)) {
   1022e:	f1bc 0f01 	cmp.w	ip, #1
   10232:	d8d4      	bhi.n	101de <l2cap_recv+0x72>
		BT_ERR("Too small LE conn param rsp");
   10234:	482b      	ldr	r0, [pc, #172]	; (102e4 <l2cap_recv+0x178>)
   10236:	6803      	ldr	r3, [r0, #0]
   10238:	075a      	lsls	r2, r3, #29
   1023a:	d0d0      	beq.n	101de <l2cap_recv+0x72>
   1023c:	4b2e      	ldr	r3, [pc, #184]	; (102f8 <l2cap_recv+0x18c>)
   1023e:	e7a3      	b.n	10188 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
   10240:	f1bc 0f07 	cmp.w	ip, #7
   10244:	d805      	bhi.n	10252 <l2cap_recv+0xe6>
		BT_ERR("Too small LE conn update param req");
   10246:	4827      	ldr	r0, [pc, #156]	; (102e4 <l2cap_recv+0x178>)
   10248:	6803      	ldr	r3, [r0, #0]
   1024a:	075b      	lsls	r3, r3, #29
   1024c:	d0c7      	beq.n	101de <l2cap_recv+0x72>
   1024e:	4b2b      	ldr	r3, [pc, #172]	; (102fc <l2cap_recv+0x190>)
   10250:	e79a      	b.n	10188 <l2cap_recv+0x1c>
   10252:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   10254:	f896 8003 	ldrb.w	r8, [r6, #3]
   10258:	f1b8 0f00 	cmp.w	r8, #0
   1025c:	d003      	beq.n	10266 <l2cap_recv+0xfa>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1025e:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   10260:	f01a fd63 	bl	2ad2a <l2cap_send_reject.constprop.0>
		break;
   10264:	e7bb      	b.n	101de <l2cap_recv+0x72>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   10266:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   10268:	7850      	ldrb	r0, [r2, #1]
   1026a:	7813      	ldrb	r3, [r2, #0]
   1026c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   10270:	813b      	strh	r3, [r7, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   10272:	78d0      	ldrb	r0, [r2, #3]
   10274:	7893      	ldrb	r3, [r2, #2]
   10276:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1027a:	817b      	strh	r3, [r7, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1027c:	7950      	ldrb	r0, [r2, #5]
   1027e:	7913      	ldrb	r3, [r2, #4]
   10280:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   10284:	81bb      	strh	r3, [r7, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   10286:	7993      	ldrb	r3, [r2, #6]
   10288:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1028a:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1028c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   10290:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   10292:	81fb      	strh	r3, [r7, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   10294:	f7ff fe9a 	bl	ffcc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   10298:	4604      	mov	r4, r0
   1029a:	2800      	cmp	r0, #0
   1029c:	d09f      	beq.n	101de <l2cap_recv+0x72>
	accepted = le_param_req(conn, &param);
   1029e:	f107 0108 	add.w	r1, r7, #8
   102a2:	4630      	mov	r0, r6
   102a4:	f7ff faf2 	bl	f88c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   102a8:	2102      	movs	r1, #2
   102aa:	4605      	mov	r5, r0
   102ac:	f104 0008 	add.w	r0, r4, #8
   102b0:	f01c fbbd 	bl	2ca2e <net_buf_simple_add>
	if (accepted) {
   102b4:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   102b8:	b2db      	uxtb	r3, r3
   102ba:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   102bc:	4622      	mov	r2, r4
   102be:	f8cd 8000 	str.w	r8, [sp]
   102c2:	4643      	mov	r3, r8
   102c4:	2105      	movs	r1, #5
   102c6:	4630      	mov	r0, r6
   102c8:	f01a fd16 	bl	2acf8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   102cc:	b110      	cbz	r0, 102d4 <l2cap_recv+0x168>
		net_buf_unref(buf);
   102ce:	4620      	mov	r0, r4
   102d0:	f010 fcaa 	bl	20c28 <net_buf_unref>
	if (accepted) {
   102d4:	2d00      	cmp	r5, #0
   102d6:	d082      	beq.n	101de <l2cap_recv+0x72>
		bt_conn_le_conn_update(conn, &param);
   102d8:	f107 0108 	add.w	r1, r7, #8
   102dc:	4630      	mov	r0, r6
   102de:	f01a fc80 	bl	2abe2 <bt_conn_le_conn_update>
   102e2:	e77c      	b.n	101de <l2cap_recv+0x72>
   102e4:	20000a58 	.word	0x20000a58
   102e8:	00033a0c 	.word	0x00033a0c
   102ec:	00033a2a 	.word	0x00033a2a
   102f0:	00033a4b 	.word	0x00033a4b
   102f4:	00033aab 	.word	0x00033aab
   102f8:	00033a6c 	.word	0x00033a6c
   102fc:	00033a88 	.word	0x00033a88

00010300 <bt_l2cap_recv>:
{
   10300:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   10302:	898b      	ldrh	r3, [r1, #12]
   10304:	2b03      	cmp	r3, #3
{
   10306:	b089      	sub	sp, #36	; 0x24
   10308:	4605      	mov	r5, r0
   1030a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1030c:	d813      	bhi.n	10336 <bt_l2cap_recv+0x36>
		BT_ERR("Too small L2CAP PDU received");
   1030e:	4819      	ldr	r0, [pc, #100]	; (10374 <bt_l2cap_recv+0x74>)
   10310:	6803      	ldr	r3, [r0, #0]
   10312:	075b      	lsls	r3, r3, #29
   10314:	d009      	beq.n	1032a <bt_l2cap_recv+0x2a>
   10316:	4b18      	ldr	r3, [pc, #96]	; (10378 <bt_l2cap_recv+0x78>)
   10318:	9306      	str	r3, [sp, #24]
   1031a:	2302      	movs	r3, #2
   1031c:	9301      	str	r3, [sp, #4]
   1031e:	9305      	str	r3, [sp, #20]
   10320:	aa05      	add	r2, sp, #20
   10322:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10326:	f01a fc88 	bl	2ac3a <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
   1032a:	4620      	mov	r0, r4
}
   1032c:	b009      	add	sp, #36	; 0x24
   1032e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   10332:	f010 bc79 	b.w	20c28 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   10336:	2104      	movs	r1, #4
   10338:	f104 0008 	add.w	r0, r4, #8
   1033c:	f01c fba8 	bl	2ca90 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   10340:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   10342:	4628      	mov	r0, r5
   10344:	f01a fd1a 	bl	2ad7c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   10348:	b970      	cbnz	r0, 10368 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1034a:	480a      	ldr	r0, [pc, #40]	; (10374 <bt_l2cap_recv+0x74>)
   1034c:	6803      	ldr	r3, [r0, #0]
   1034e:	f013 0f06 	tst.w	r3, #6
   10352:	d0ea      	beq.n	1032a <bt_l2cap_recv+0x2a>
   10354:	4b09      	ldr	r3, [pc, #36]	; (1037c <bt_l2cap_recv+0x7c>)
   10356:	e9cd 3106 	strd	r3, r1, [sp, #24]
   1035a:	2303      	movs	r3, #3
   1035c:	9301      	str	r3, [sp, #4]
   1035e:	9305      	str	r3, [sp, #20]
   10360:	aa05      	add	r2, sp, #20
   10362:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10366:	e7de      	b.n	10326 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   10368:	6843      	ldr	r3, [r0, #4]
   1036a:	4621      	mov	r1, r4
   1036c:	691b      	ldr	r3, [r3, #16]
   1036e:	4798      	blx	r3
   10370:	e7db      	b.n	1032a <bt_l2cap_recv+0x2a>
   10372:	bf00      	nop
   10374:	20000a58 	.word	0x20000a58
   10378:	00033ac9 	.word	0x00033ac9
   1037c:	00033ae6 	.word	0x00033ae6

00010380 <bt_l2cap_update_conn_param>:
{
   10380:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10382:	460d      	mov	r5, r1
	ident++;
   10384:	4916      	ldr	r1, [pc, #88]	; (103e0 <bt_l2cap_update_conn_param+0x60>)
   10386:	780b      	ldrb	r3, [r1, #0]
   10388:	3301      	adds	r3, #1
	if (!ident) {
   1038a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1038e:	bf08      	it	eq
   10390:	2301      	moveq	r3, #1
   10392:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   10394:	7809      	ldrb	r1, [r1, #0]
{
   10396:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   10398:	2208      	movs	r2, #8
   1039a:	2012      	movs	r0, #18
   1039c:	f7ff fe16 	bl	ffcc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   103a0:	4604      	mov	r4, r0
   103a2:	b1d0      	cbz	r0, 103da <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   103a4:	2108      	movs	r1, #8
   103a6:	4408      	add	r0, r1
   103a8:	f01c fb41 	bl	2ca2e <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   103ac:	882b      	ldrh	r3, [r5, #0]
   103ae:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   103b0:	886b      	ldrh	r3, [r5, #2]
   103b2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   103b4:	88ab      	ldrh	r3, [r5, #4]
   103b6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   103b8:	88eb      	ldrh	r3, [r5, #6]
   103ba:	80c3      	strh	r3, [r0, #6]
   103bc:	2300      	movs	r3, #0
   103be:	9300      	str	r3, [sp, #0]
   103c0:	4622      	mov	r2, r4
   103c2:	2105      	movs	r1, #5
   103c4:	4630      	mov	r0, r6
   103c6:	f01a fc97 	bl	2acf8 <bt_l2cap_send_cb>
	if (err) {
   103ca:	4605      	mov	r5, r0
   103cc:	b110      	cbz	r0, 103d4 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   103ce:	4620      	mov	r0, r4
   103d0:	f010 fc2a 	bl	20c28 <net_buf_unref>
}
   103d4:	4628      	mov	r0, r5
   103d6:	b002      	add	sp, #8
   103d8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   103da:	f06f 050b 	mvn.w	r5, #11
   103de:	e7f9      	b.n	103d4 <bt_l2cap_update_conn_param+0x54>
   103e0:	20004bff 	.word	0x20004bff

000103e4 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   103e4:	4b02      	ldr	r3, [pc, #8]	; (103f0 <att_cfm_sent+0xc>)
   103e6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   103ea:	f01a bce5 	b.w	2adb8 <att_sent>
   103ee:	bf00      	nop
   103f0:	0002b21d 	.word	0x0002b21d

000103f4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   103f4:	4b02      	ldr	r3, [pc, #8]	; (10400 <att_rsp_sent+0xc>)
   103f6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   103fa:	f01a bcdd 	b.w	2adb8 <att_sent>
   103fe:	bf00      	nop
   10400:	0002b201 	.word	0x0002b201

00010404 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   10404:	4b02      	ldr	r3, [pc, #8]	; (10410 <att_req_sent+0xc>)
   10406:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1040a:	f01a bcd5 	b.w	2adb8 <att_sent>
   1040e:	bf00      	nop
   10410:	0002afaf 	.word	0x0002afaf

00010414 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   10414:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   10416:	3808      	subs	r0, #8
   10418:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1041a:	a901      	add	r1, sp, #4
   1041c:	4802      	ldr	r0, [pc, #8]	; (10428 <bt_att_released+0x14>)
   1041e:	f01d f853 	bl	2d4c8 <k_mem_slab_free>
}
   10422:	b003      	add	sp, #12
   10424:	f85d fb04 	ldr.w	pc, [sp], #4
   10428:	20000b58 	.word	0x20000b58

0001042c <find_type_cb>:
{
   1042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   10430:	f8d2 9000 	ldr.w	r9, [r2]
{
   10434:	b099      	sub	sp, #100	; 0x64
   10436:	4606      	mov	r6, r0
   10438:	460f      	mov	r7, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1043a:	2500      	movs	r5, #0
   1043c:	f642 0301 	movw	r3, #10241	; 0x2801
   10440:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   10442:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10446:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
   1044a:	a912      	add	r1, sp, #72	; 0x48
{
   1044c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1044e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   10452:	f01a f84b 	bl	2a4ec <bt_uuid_cmp>
   10456:	2800      	cmp	r0, #0
   10458:	d06d      	beq.n	10536 <find_type_cb+0x10a>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1045a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1045e:	6830      	ldr	r0, [r6, #0]
   10460:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
   10464:	a912      	add	r1, sp, #72	; 0x48
   10466:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   1046a:	f01a f83f 	bl	2a4ec <bt_uuid_cmp>
   1046e:	b138      	cbz	r0, 10480 <find_type_cb+0x54>
		if (data->group &&
   10470:	68a3      	ldr	r3, [r4, #8]
   10472:	b11b      	cbz	r3, 1047c <find_type_cb+0x50>
   10474:	885a      	ldrh	r2, [r3, #2]
   10476:	42ba      	cmp	r2, r7
   10478:	d200      	bcs.n	1047c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1047a:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1047c:	2001      	movs	r0, #1
   1047e:	e009      	b.n	10494 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   10480:	6861      	ldr	r1, [r4, #4]
   10482:	4608      	mov	r0, r1
   10484:	f01a fc90 	bl	2ada8 <net_buf_frags_len>
   10488:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1048c:	1a1b      	subs	r3, r3, r0
   1048e:	2b03      	cmp	r3, #3
   10490:	d803      	bhi.n	1049a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   10492:	2000      	movs	r0, #0
}
   10494:	b019      	add	sp, #100	; 0x64
   10496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1049a:	4608      	mov	r0, r1
   1049c:	f01c fa99 	bl	2c9d2 <net_buf_frag_last>
   104a0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   104a2:	6860      	ldr	r0, [r4, #4]
   104a4:	f01a fc80 	bl	2ada8 <net_buf_frags_len>
   104a8:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   104ac:	f105 0b08 	add.w	fp, r5, #8
   104b0:	ebaa 0a00 	sub.w	sl, sl, r0
   104b4:	4658      	mov	r0, fp
   104b6:	f01c fb07 	bl	2cac8 <net_buf_simple_tailroom>
   104ba:	4550      	cmp	r0, sl
   104bc:	d93e      	bls.n	1053c <find_type_cb+0x110>
   104be:	6860      	ldr	r0, [r4, #4]
   104c0:	f01a fc72 	bl	2ada8 <net_buf_frags_len>
   104c4:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   104c8:	1a18      	subs	r0, r3, r0
	if (!len) {
   104ca:	b970      	cbnz	r0, 104ea <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   104cc:	6863      	ldr	r3, [r4, #4]
   104ce:	7998      	ldrb	r0, [r3, #6]
   104d0:	f010 fae6 	bl	20aa0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   104d4:	2200      	movs	r2, #0
   104d6:	2300      	movs	r3, #0
   104d8:	f01c fa41 	bl	2c95e <net_buf_alloc_fixed>
		if (!frag) {
   104dc:	4605      	mov	r5, r0
   104de:	2800      	cmp	r0, #0
   104e0:	d0d7      	beq.n	10492 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   104e2:	4601      	mov	r1, r0
   104e4:	6860      	ldr	r0, [r4, #4]
   104e6:	f01c fa85 	bl	2c9f4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   104ea:	2300      	movs	r3, #0
   104ec:	9300      	str	r3, [sp, #0]
   104ee:	2310      	movs	r3, #16
   104f0:	f8d6 9004 	ldr.w	r9, [r6, #4]
   104f4:	4631      	mov	r1, r6
   104f6:	eb0d 0203 	add.w	r2, sp, r3
   104fa:	4640      	mov	r0, r8
   104fc:	47c8      	blx	r9
	if (read < 0) {
   104fe:	1e06      	subs	r6, r0, #0
   10500:	db19      	blt.n	10536 <find_type_cb+0x10a>
	if (read != data->value_len) {
   10502:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   10504:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   10506:	4296      	cmp	r6, r2
   10508:	d03e      	beq.n	10588 <find_type_cb+0x15c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1050a:	4601      	mov	r1, r0
   1050c:	a80d      	add	r0, sp, #52	; 0x34
   1050e:	f01a f81b 	bl	2a548 <bt_uuid_create>
   10512:	b9b8      	cbnz	r0, 10544 <find_type_cb+0x118>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   10514:	481f      	ldr	r0, [pc, #124]	; (10594 <find_type_cb+0x168>)
   10516:	6803      	ldr	r3, [r0, #0]
   10518:	f013 0f06 	tst.w	r3, #6
   1051c:	d00b      	beq.n	10536 <find_type_cb+0x10a>
   1051e:	7c23      	ldrb	r3, [r4, #16]
   10520:	4a1d      	ldr	r2, [pc, #116]	; (10598 <find_type_cb+0x16c>)
   10522:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10526:	2303      	movs	r3, #3
   10528:	9308      	str	r3, [sp, #32]
			BT_WARN("Unable to create UUID: size %d", read);
   1052a:	aa15      	add	r2, sp, #84	; 0x54
   1052c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10530:	9315      	str	r3, [sp, #84]	; 0x54
   10532:	f01a fd79 	bl	2b028 <z_log_msg2_static_create.constprop.0>
	data->group = NULL;
   10536:	2300      	movs	r3, #0
   10538:	60a3      	str	r3, [r4, #8]
   1053a:	e79f      	b.n	1047c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1053c:	4658      	mov	r0, fp
   1053e:	f01c fac3 	bl	2cac8 <net_buf_simple_tailroom>
   10542:	e7c2      	b.n	104ca <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   10544:	b2f2      	uxtb	r2, r6
   10546:	a904      	add	r1, sp, #16
   10548:	a808      	add	r0, sp, #32
   1054a:	f019 fffd 	bl	2a548 <bt_uuid_create>
   1054e:	b950      	cbnz	r0, 10566 <find_type_cb+0x13a>
			BT_WARN("Unable to create UUID: size %d", read);
   10550:	4810      	ldr	r0, [pc, #64]	; (10594 <find_type_cb+0x168>)
   10552:	6803      	ldr	r3, [r0, #0]
   10554:	f013 0f06 	tst.w	r3, #6
   10558:	d0ed      	beq.n	10536 <find_type_cb+0x10a>
   1055a:	4b10      	ldr	r3, [pc, #64]	; (1059c <find_type_cb+0x170>)
   1055c:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
   10560:	2303      	movs	r3, #3
   10562:	9303      	str	r3, [sp, #12]
   10564:	e7e1      	b.n	1052a <find_type_cb+0xfe>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   10566:	a908      	add	r1, sp, #32
   10568:	a80d      	add	r0, sp, #52	; 0x34
   1056a:	f019 ffbf 	bl	2a4ec <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1056e:	2800      	cmp	r0, #0
   10570:	d1e1      	bne.n	10536 <find_type_cb+0x10a>
	data->err = 0x00;
   10572:	2300      	movs	r3, #0
   10574:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   10576:	2104      	movs	r1, #4
   10578:	f105 0008 	add.w	r0, r5, #8
   1057c:	f01c fa57 	bl	2ca2e <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   10580:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   10582:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   10584:	8047      	strh	r7, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   10586:	e779      	b.n	1047c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   10588:	4632      	mov	r2, r6
   1058a:	a904      	add	r1, sp, #16
   1058c:	f019 febd 	bl	2a30a <memcmp>
   10590:	e7ed      	b.n	1056e <find_type_cb+0x142>
   10592:	bf00      	nop
   10594:	200009d8 	.word	0x200009d8
   10598:	00033b22 	.word	0x00033b22
   1059c:	00033b41 	.word	0x00033b41

000105a0 <att_get>:
{
   105a0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   105a2:	7b43      	ldrb	r3, [r0, #13]
   105a4:	2b07      	cmp	r3, #7
{
   105a6:	b088      	sub	sp, #32
	if (conn->state != BT_CONN_CONNECTED) {
   105a8:	d013      	beq.n	105d2 <att_get+0x32>
		BT_WARN("Not connected");
   105aa:	481d      	ldr	r0, [pc, #116]	; (10620 <att_get+0x80>)
   105ac:	6803      	ldr	r3, [r0, #0]
   105ae:	f013 0f06 	tst.w	r3, #6
   105b2:	d103      	bne.n	105bc <att_get+0x1c>
		return NULL;
   105b4:	2400      	movs	r4, #0
}
   105b6:	4620      	mov	r0, r4
   105b8:	b008      	add	sp, #32
   105ba:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
   105bc:	4b19      	ldr	r3, [pc, #100]	; (10624 <att_get+0x84>)
   105be:	9306      	str	r3, [sp, #24]
   105c0:	aa05      	add	r2, sp, #20
   105c2:	2302      	movs	r3, #2
   105c4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   105c8:	9301      	str	r3, [sp, #4]
   105ca:	9305      	str	r3, [sp, #20]
   105cc:	f01a fd2c 	bl	2b028 <z_log_msg2_static_create.constprop.0>
   105d0:	e7f0      	b.n	105b4 <att_get+0x14>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   105d2:	2104      	movs	r1, #4
   105d4:	f01a fbd2 	bl	2ad7c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   105d8:	4604      	mov	r4, r0
   105da:	b970      	cbnz	r0, 105fa <att_get+0x5a>
		BT_ERR("Unable to find ATT channel");
   105dc:	4810      	ldr	r0, [pc, #64]	; (10620 <att_get+0x80>)
   105de:	6803      	ldr	r3, [r0, #0]
   105e0:	075a      	lsls	r2, r3, #29
   105e2:	d0e7      	beq.n	105b4 <att_get+0x14>
   105e4:	4b10      	ldr	r3, [pc, #64]	; (10628 <att_get+0x88>)
   105e6:	9306      	str	r3, [sp, #24]
   105e8:	aa05      	add	r2, sp, #20
   105ea:	2302      	movs	r3, #2
   105ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   105f0:	9301      	str	r3, [sp, #4]
   105f2:	9305      	str	r3, [sp, #20]
   105f4:	f01a fd18 	bl	2b028 <z_log_msg2_static_create.constprop.0>
   105f8:	e7dd      	b.n	105b6 <att_get+0x16>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   105fa:	f3bf 8f5b 	dmb	ish
   105fe:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   10602:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   10606:	075b      	lsls	r3, r3, #29
   10608:	d506      	bpl.n	10618 <att_get+0x78>
		BT_WARN("ATT channel flagged as disconnected");
   1060a:	4805      	ldr	r0, [pc, #20]	; (10620 <att_get+0x80>)
   1060c:	6803      	ldr	r3, [r0, #0]
   1060e:	f013 0f06 	tst.w	r3, #6
   10612:	d0cf      	beq.n	105b4 <att_get+0x14>
   10614:	4b05      	ldr	r3, [pc, #20]	; (1062c <att_get+0x8c>)
   10616:	e7d2      	b.n	105be <att_get+0x1e>
	return att_chan->att;
   10618:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1061c:	e7cb      	b.n	105b6 <att_get+0x16>
   1061e:	bf00      	nop
   10620:	200009d8 	.word	0x200009d8
   10624:	00033b60 	.word	0x00033b60
   10628:	00033b6e 	.word	0x00033b6e
   1062c:	00033b89 	.word	0x00033b89

00010630 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   10630:	b5f0      	push	{r4, r5, r6, r7, lr}
   10632:	b08b      	sub	sp, #44	; 0x2c
   10634:	4607      	mov	r7, r0
   10636:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   10638:	482a      	ldr	r0, [pc, #168]	; (106e4 <bt_att_accept+0xb4>)
   1063a:	2200      	movs	r2, #0
   1063c:	2300      	movs	r3, #0
   1063e:	a901      	add	r1, sp, #4
   10640:	f014 fcac 	bl	24f9c <k_mem_slab_alloc>
   10644:	4604      	mov	r4, r0
   10646:	b198      	cbz	r0, 10670 <bt_att_accept+0x40>
		BT_ERR("No available ATT context for conn %p", conn);
   10648:	4827      	ldr	r0, [pc, #156]	; (106e8 <bt_att_accept+0xb8>)
   1064a:	6803      	ldr	r3, [r0, #0]
   1064c:	075a      	lsls	r2, r3, #29
   1064e:	d00a      	beq.n	10666 <bt_att_accept+0x36>
   10650:	4b26      	ldr	r3, [pc, #152]	; (106ec <bt_att_accept+0xbc>)
   10652:	e9cd 3708 	strd	r3, r7, [sp, #32]
		BT_ERR("No available ATT channel for conn %p", att->conn);
   10656:	2303      	movs	r3, #3
   10658:	aa07      	add	r2, sp, #28
   1065a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1065e:	9303      	str	r3, [sp, #12]
   10660:	9307      	str	r3, [sp, #28]
   10662:	f01a fce1 	bl	2b028 <z_log_msg2_static_create.constprop.0>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   10666:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1066a:	4620      	mov	r0, r4
   1066c:	b00b      	add	sp, #44	; 0x2c
   1066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   10670:	4601      	mov	r1, r0
   10672:	222c      	movs	r2, #44	; 0x2c
   10674:	9801      	ldr	r0, [sp, #4]
   10676:	f019 fe7c 	bl	2a372 <memset>
	att->conn = conn;
   1067a:	9d01      	ldr	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1067c:	481c      	ldr	r0, [pc, #112]	; (106f0 <bt_att_accept+0xc0>)
	list->tail = NULL;
   1067e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   10680:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   10684:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   10688:	2200      	movs	r2, #0
   1068a:	2300      	movs	r3, #0
   1068c:	a902      	add	r1, sp, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1068e:	9402      	str	r4, [sp, #8]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10690:	f014 fc84 	bl	24f9c <k_mem_slab_alloc>
   10694:	4604      	mov	r4, r0
   10696:	b140      	cbz	r0, 106aa <bt_att_accept+0x7a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   10698:	4813      	ldr	r0, [pc, #76]	; (106e8 <bt_att_accept+0xb8>)
   1069a:	6803      	ldr	r3, [r0, #0]
   1069c:	075b      	lsls	r3, r3, #29
   1069e:	d0e2      	beq.n	10666 <bt_att_accept+0x36>
   106a0:	682b      	ldr	r3, [r5, #0]
   106a2:	4a14      	ldr	r2, [pc, #80]	; (106f4 <bt_att_accept+0xc4>)
   106a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   106a8:	e7d5      	b.n	10656 <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   106aa:	4601      	mov	r1, r0
   106ac:	f44f 72a4 	mov.w	r2, #328	; 0x148
   106b0:	9802      	ldr	r0, [sp, #8]
   106b2:	f019 fe5e 	bl	2a372 <memset>
	chan->chan.chan.ops = &ops;
   106b6:	9802      	ldr	r0, [sp, #8]
   106b8:	4b0f      	ldr	r3, [pc, #60]	; (106f8 <bt_att_accept+0xc8>)
   106ba:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   106bc:	30f8      	adds	r0, #248	; 0xf8
   106be:	f01c ffcf 	bl	2d660 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   106c2:	9b02      	ldr	r3, [sp, #8]
   106c4:	f3bf 8f5b 	dmb	ish
   106c8:	33f0      	adds	r3, #240	; 0xf0
   106ca:	e853 2f00 	ldrex	r2, [r3]
   106ce:	e843 4100 	strex	r1, r4, [r3]
   106d2:	2900      	cmp	r1, #0
   106d4:	d1f9      	bne.n	106ca <bt_att_accept+0x9a>
   106d6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   106da:	9b02      	ldr	r3, [sp, #8]
   106dc:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   106e0:	6033      	str	r3, [r6, #0]
	return 0;
   106e2:	e7c2      	b.n	1066a <bt_att_accept+0x3a>
   106e4:	20000b3c 	.word	0x20000b3c
   106e8:	200009d8 	.word	0x200009d8
   106ec:	00033bad 	.word	0x00033bad
   106f0:	20000b58 	.word	0x20000b58
   106f4:	00033bd2 	.word	0x00033bd2
   106f8:	20000384 	.word	0x20000384

000106fc <read_group_cb>:
{
   106fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   10700:	4605      	mov	r5, r0
   10702:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10704:	f04f 0800 	mov.w	r8, #0
   10708:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1070c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1070e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10710:	f88d 8008 	strb.w	r8, [sp, #8]
   10714:	a902      	add	r1, sp, #8
{
   10716:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10718:	f8ad 300a 	strh.w	r3, [sp, #10]
   1071c:	f019 fee6 	bl	2a4ec <bt_uuid_cmp>
   10720:	b1a0      	cbz	r0, 1074c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10722:	f642 0301 	movw	r3, #10241	; 0x2801
   10726:	6828      	ldr	r0, [r5, #0]
   10728:	f88d 800c 	strb.w	r8, [sp, #12]
   1072c:	a903      	add	r1, sp, #12
   1072e:	f8ad 300e 	strh.w	r3, [sp, #14]
   10732:	f019 fedb 	bl	2a4ec <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10736:	b148      	cbz	r0, 1074c <read_group_cb+0x50>
		if (data->group &&
   10738:	6923      	ldr	r3, [r4, #16]
   1073a:	b11b      	cbz	r3, 10744 <read_group_cb+0x48>
   1073c:	885a      	ldrh	r2, [r3, #2]
   1073e:	42b2      	cmp	r2, r6
   10740:	d200      	bcs.n	10744 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   10742:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   10744:	2001      	movs	r0, #1
}
   10746:	b004      	add	sp, #16
   10748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1074c:	6861      	ldr	r1, [r4, #4]
   1074e:	6828      	ldr	r0, [r5, #0]
   10750:	f019 fecc 	bl	2a4ec <bt_uuid_cmp>
   10754:	b110      	cbz	r0, 1075c <read_group_cb+0x60>
		data->group = NULL;
   10756:	2300      	movs	r3, #0
   10758:	6123      	str	r3, [r4, #16]
   1075a:	e7f3      	b.n	10744 <read_group_cb+0x48>
	if (data->rsp->len &&
   1075c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1075e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   10760:	781a      	ldrb	r2, [r3, #0]
   10762:	b13a      	cbz	r2, 10774 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   10764:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   10768:	8981      	ldrh	r1, [r0, #12]
   1076a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1076c:	4293      	cmp	r3, r2
   1076e:	da01      	bge.n	10774 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   10770:	2000      	movs	r0, #0
   10772:	e7e8      	b.n	10746 <read_group_cb+0x4a>
   10774:	2104      	movs	r1, #4
   10776:	3008      	adds	r0, #8
   10778:	f01c f959 	bl	2ca2e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1077c:	4b09      	ldr	r3, [pc, #36]	; (107a4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1077e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   10780:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   10782:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   10784:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   10786:	4629      	mov	r1, r5
   10788:	9300      	str	r3, [sp, #0]
   1078a:	9401      	str	r4, [sp, #4]
   1078c:	2300      	movs	r3, #0
   1078e:	4638      	mov	r0, r7
   10790:	f01a fc4d 	bl	2b02e <att_chan_read>
	if (read < 0) {
   10794:	2800      	cmp	r0, #0
   10796:	dbeb      	blt.n	10770 <read_group_cb+0x74>
	if (!data->group) {
   10798:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1079a:	3800      	subs	r0, #0
   1079c:	bf18      	it	ne
   1079e:	2001      	movne	r0, #1
   107a0:	e7d1      	b.n	10746 <read_group_cb+0x4a>
   107a2:	bf00      	nop
   107a4:	0002af8f 	.word	0x0002af8f

000107a8 <chan_send>:
{
   107a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   107ac:	688b      	ldr	r3, [r1, #8]
   107ae:	781b      	ldrb	r3, [r3, #0]
   107b0:	2bd2      	cmp	r3, #210	; 0xd2
{
   107b2:	b08b      	sub	sp, #44	; 0x2c
   107b4:	4606      	mov	r6, r0
   107b6:	460c      	mov	r4, r1
   107b8:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   107ba:	d11a      	bne.n	107f2 <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   107bc:	6803      	ldr	r3, [r0, #0]
   107be:	6818      	ldr	r0, [r3, #0]
   107c0:	f003 fd6c 	bl	1429c <bt_smp_sign>
		if (err) {
   107c4:	4605      	mov	r5, r0
   107c6:	b1a0      	cbz	r0, 107f2 <chan_send+0x4a>
			BT_ERR("Error signing data");
   107c8:	4825      	ldr	r0, [pc, #148]	; (10860 <chan_send+0xb8>)
   107ca:	6803      	ldr	r3, [r0, #0]
   107cc:	075b      	lsls	r3, r3, #29
   107ce:	d009      	beq.n	107e4 <chan_send+0x3c>
   107d0:	4b24      	ldr	r3, [pc, #144]	; (10864 <chan_send+0xbc>)
   107d2:	9308      	str	r3, [sp, #32]
   107d4:	aa07      	add	r2, sp, #28
   107d6:	2302      	movs	r3, #2
   107d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   107dc:	9303      	str	r3, [sp, #12]
   107de:	9307      	str	r3, [sp, #28]
   107e0:	f01a fc22 	bl	2b028 <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
   107e4:	4620      	mov	r0, r4
   107e6:	f010 fa1f 	bl	20c28 <net_buf_unref>
}
   107ea:	4628      	mov	r0, r5
   107ec:	b00b      	add	sp, #44	; 0x2c
   107ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   107f2:	f104 0008 	add.w	r0, r4, #8
   107f6:	f01c f963 	bl	2cac0 <net_buf_simple_headroom>
	state->len = buf->len;
   107fa:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   107fe:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   10800:	b957      	cbnz	r7, 10818 <chan_send+0x70>
	switch (att_op_get_type(buf->data[0])) {
   10802:	68a3      	ldr	r3, [r4, #8]
   10804:	7818      	ldrb	r0, [r3, #0]
   10806:	f01a faef 	bl	2ade8 <att_op_get_type>
   1080a:	1e43      	subs	r3, r0, #1
   1080c:	b2db      	uxtb	r3, r3
   1080e:	2b04      	cmp	r3, #4
   10810:	bf9c      	itt	ls
   10812:	4a15      	ldrls	r2, [pc, #84]	; (10868 <chan_send+0xc0>)
   10814:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   10818:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1081a:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1081e:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   10820:	4b12      	ldr	r3, [pc, #72]	; (1086c <chan_send+0xc4>)
   10822:	429f      	cmp	r7, r3
   10824:	d018      	beq.n	10858 <chan_send+0xb0>
	} else if (cb == chan_cfm_sent) {
   10826:	4b12      	ldr	r3, [pc, #72]	; (10870 <chan_send+0xc8>)
   10828:	429f      	cmp	r7, r3
   1082a:	d017      	beq.n	1085c <chan_send+0xb4>
		return att_sent;
   1082c:	4911      	ldr	r1, [pc, #68]	; (10874 <chan_send+0xcc>)
   1082e:	4b12      	ldr	r3, [pc, #72]	; (10878 <chan_send+0xd0>)
   10830:	4a12      	ldr	r2, [pc, #72]	; (1087c <chan_send+0xd4>)
   10832:	428f      	cmp	r7, r1
   10834:	bf18      	it	ne
   10836:	4613      	movne	r3, r2
			       &chan->chan.chan);
   10838:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1083a:	9600      	str	r6, [sp, #0]
   1083c:	4622      	mov	r2, r4
   1083e:	2104      	movs	r1, #4
   10840:	f01a fa5a 	bl	2acf8 <bt_l2cap_send_cb>
	if (err) {
   10844:	4605      	mov	r5, r0
   10846:	2800      	cmp	r0, #0
   10848:	d0cf      	beq.n	107ea <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   1084a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1084c:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   10850:	fa10 f088 	uxtah	r0, r0, r8
   10854:	60a0      	str	r0, [r4, #8]
}
   10856:	e7c8      	b.n	107ea <chan_send+0x42>
		return att_rsp_sent;
   10858:	4b09      	ldr	r3, [pc, #36]	; (10880 <chan_send+0xd8>)
   1085a:	e7ed      	b.n	10838 <chan_send+0x90>
		return att_cfm_sent;
   1085c:	4b09      	ldr	r3, [pc, #36]	; (10884 <chan_send+0xdc>)
   1085e:	e7eb      	b.n	10838 <chan_send+0x90>
   10860:	200009d8 	.word	0x200009d8
   10864:	00033bf7 	.word	0x00033bf7
   10868:	0002f3f8 	.word	0x0002f3f8
   1086c:	0002b201 	.word	0x0002b201
   10870:	0002b21d 	.word	0x0002b21d
   10874:	0002afaf 	.word	0x0002afaf
   10878:	00010405 	.word	0x00010405
   1087c:	0002adb9 	.word	0x0002adb9
   10880:	000103f5 	.word	0x000103f5
   10884:	000103e5 	.word	0x000103e5

00010888 <read_type_cb>:
{
   10888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1088c:	f8d2 8000 	ldr.w	r8, [r2]
{
   10890:	4606      	mov	r6, r0
   10892:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10894:	6800      	ldr	r0, [r0, #0]
   10896:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   10898:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1089c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1089e:	f019 fe25 	bl	2a4ec <bt_uuid_cmp>
   108a2:	4607      	mov	r7, r0
   108a4:	2800      	cmp	r0, #0
   108a6:	d13e      	bne.n	10926 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   108a8:	4628      	mov	r0, r5
   108aa:	2215      	movs	r2, #21
   108ac:	4631      	mov	r1, r6
   108ae:	f01b fa89 	bl	2bdc4 <bt_gatt_check_perm>
   108b2:	4605      	mov	r5, r0
   108b4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   108b6:	b148      	cbz	r0, 108cc <read_type_cb+0x44>
		if (data->rsp->len) {
   108b8:	68e3      	ldr	r3, [r4, #12]
   108ba:	781b      	ldrb	r3, [r3, #0]
   108bc:	b923      	cbnz	r3, 108c8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   108be:	2500      	movs	r5, #0
}
   108c0:	4628      	mov	r0, r5
   108c2:	b003      	add	sp, #12
   108c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   108c8:	7527      	strb	r7, [r4, #20]
   108ca:	e7f8      	b.n	108be <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   108cc:	68a0      	ldr	r0, [r4, #8]
   108ce:	f01c f880 	bl	2c9d2 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   108d2:	2102      	movs	r1, #2
   108d4:	3008      	adds	r0, #8
   108d6:	f01c f8aa 	bl	2ca2e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   108da:	4b14      	ldr	r3, [pc, #80]	; (1092c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   108dc:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   108de:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   108e0:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   108e4:	4631      	mov	r1, r6
   108e6:	9300      	str	r3, [sp, #0]
   108e8:	9401      	str	r4, [sp, #4]
   108ea:	462b      	mov	r3, r5
   108ec:	4640      	mov	r0, r8
   108ee:	f01a fb9e 	bl	2b02e <att_chan_read>
	if (read < 0) {
   108f2:	2800      	cmp	r0, #0
   108f4:	da07      	bge.n	10906 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   108f6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   108fa:	bf26      	itte	cs
   108fc:	4240      	negcs	r0, r0
   108fe:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   10900:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   10902:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   10904:	e7dc      	b.n	108c0 <read_type_cb+0x38>
	if (!data->item) {
   10906:	6923      	ldr	r3, [r4, #16]
   10908:	2b00      	cmp	r3, #0
   1090a:	d0d8      	beq.n	108be <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1090c:	68a0      	ldr	r0, [r4, #8]
   1090e:	f01a fa4b 	bl	2ada8 <net_buf_frags_len>
   10912:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   10916:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   10918:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1091a:	7818      	ldrb	r0, [r3, #0]
   1091c:	4285      	cmp	r5, r0
   1091e:	bf94      	ite	ls
   10920:	2500      	movls	r5, #0
   10922:	2501      	movhi	r5, #1
   10924:	e7cc      	b.n	108c0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   10926:	2501      	movs	r5, #1
   10928:	e7ca      	b.n	108c0 <read_type_cb+0x38>
   1092a:	bf00      	nop
   1092c:	0002adc5 	.word	0x0002adc5

00010930 <bt_att_connected>:
{
   10930:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   10932:	4606      	mov	r6, r0
{
   10934:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   10936:	2104      	movs	r1, #4
   10938:	f856 0908 	ldr.w	r0, [r6], #-8
   1093c:	f01a fa13 	bl	2ad66 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   10940:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   10944:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10946:	b91b      	cbnz	r3, 10950 <bt_att_connected+0x20>
   10948:	f105 000c 	add.w	r0, r5, #12
   1094c:	f01c fe88 	bl	2d660 <z_impl_k_queue_init>
	parent->next = child;
   10950:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10952:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   10956:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   10958:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   1095c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1095e:	b902      	cbnz	r2, 10962 <bt_att_connected+0x32>
	list->tail = node;
   10960:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10962:	f3bf 8f5b 	dmb	ish
   10966:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1096a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1096e:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10970:	bf58      	it	pl
   10972:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   10974:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10976:	bf5c      	itt	pl
   10978:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1097c:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   10980:	f01a fa78 	bl	2ae74 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   10984:	f504 7084 	add.w	r0, r4, #264	; 0x108
   10988:	4902      	ldr	r1, [pc, #8]	; (10994 <bt_att_connected+0x64>)
}
   1098a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1098e:	f01c bf6a 	b.w	2d866 <k_work_init_delayable>
   10992:	bf00      	nop
   10994:	00011521 	.word	0x00011521

00010998 <bt_att_chan_create_pdu>:
{
   10998:	b5b0      	push	{r4, r5, r7, lr}
   1099a:	b088      	sub	sp, #32
   1099c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1099e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   109a2:	1c53      	adds	r3, r2, #1
   109a4:	428b      	cmp	r3, r1
{
   109a6:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   109a8:	d91a      	bls.n	109e0 <bt_att_chan_create_pdu+0x48>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   109aa:	4823      	ldr	r0, [pc, #140]	; (10a38 <bt_att_chan_create_pdu+0xa0>)
   109ac:	6802      	ldr	r2, [r0, #0]
   109ae:	f012 0f06 	tst.w	r2, #6
   109b2:	d104      	bne.n	109be <bt_att_chan_create_pdu+0x26>
		return NULL;
   109b4:	2400      	movs	r4, #0
}
   109b6:	4620      	mov	r0, r4
   109b8:	3720      	adds	r7, #32
   109ba:	46bd      	mov	sp, r7
   109bc:	bdb0      	pop	{r4, r5, r7, pc}
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   109be:	466c      	mov	r4, sp
   109c0:	b088      	sub	sp, #32
   109c2:	466a      	mov	r2, sp
   109c4:	4d1d      	ldr	r5, [pc, #116]	; (10a3c <bt_att_chan_create_pdu+0xa4>)
   109c6:	6193      	str	r3, [r2, #24]
   109c8:	2304      	movs	r3, #4
   109ca:	e9c2 5104 	strd	r5, r1, [r2, #16]
   109ce:	f842 3f0c 	str.w	r3, [r2, #12]!
   109d2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   109d6:	60bb      	str	r3, [r7, #8]
   109d8:	f01a fb26 	bl	2b028 <z_log_msg2_static_create.constprop.0>
   109dc:	46a5      	mov	sp, r4
   109de:	e7e9      	b.n	109b4 <bt_att_chan_create_pdu+0x1c>
	switch (att_op_get_type(op)) {
   109e0:	4628      	mov	r0, r5
   109e2:	f01a fa01 	bl	2ade8 <att_op_get_type>
   109e6:	2802      	cmp	r0, #2
   109e8:	d001      	beq.n	109ee <bt_att_chan_create_pdu+0x56>
   109ea:	2804      	cmp	r0, #4
   109ec:	d119      	bne.n	10a22 <bt_att_chan_create_pdu+0x8a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   109ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   109f2:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   109f4:	2100      	movs	r1, #0
   109f6:	4608      	mov	r0, r1
   109f8:	f01a f97b 	bl	2acf2 <bt_l2cap_create_pdu_timeout>
   109fc:	4604      	mov	r4, r0
	if (!buf) {
   109fe:	b9a8      	cbnz	r0, 10a2c <bt_att_chan_create_pdu+0x94>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   10a00:	480d      	ldr	r0, [pc, #52]	; (10a38 <bt_att_chan_create_pdu+0xa0>)
   10a02:	6803      	ldr	r3, [r0, #0]
   10a04:	075b      	lsls	r3, r3, #29
   10a06:	d0d5      	beq.n	109b4 <bt_att_chan_create_pdu+0x1c>
   10a08:	4b0d      	ldr	r3, [pc, #52]	; (10a40 <bt_att_chan_create_pdu+0xa8>)
   10a0a:	f107 0214 	add.w	r2, r7, #20
   10a0e:	e9c7 3506 	strd	r3, r5, [r7, #24]
   10a12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10a16:	2303      	movs	r3, #3
   10a18:	607b      	str	r3, [r7, #4]
   10a1a:	617b      	str	r3, [r7, #20]
   10a1c:	f01a fb04 	bl	2b028 <z_log_msg2_static_create.constprop.0>
   10a20:	e7c9      	b.n	109b6 <bt_att_chan_create_pdu+0x1e>
		buf = bt_l2cap_create_pdu(NULL, 0);
   10a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a2a:	e7e3      	b.n	109f4 <bt_att_chan_create_pdu+0x5c>
   10a2c:	2101      	movs	r1, #1
   10a2e:	3008      	adds	r0, #8
   10a30:	f01b fffd 	bl	2ca2e <net_buf_simple_add>
	hdr->code = op;
   10a34:	7005      	strb	r5, [r0, #0]
	return buf;
   10a36:	e7be      	b.n	109b6 <bt_att_chan_create_pdu+0x1e>
   10a38:	200009d8 	.word	0x200009d8
   10a3c:	00033c0a 	.word	0x00033c0a
   10a40:	000339ad 	.word	0x000339ad

00010a44 <att_indicate>:
{
   10a44:	b570      	push	{r4, r5, r6, lr}
   10a46:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   10a48:	f101 0008 	add.w	r0, r1, #8
   10a4c:	460d      	mov	r5, r1
   10a4e:	f01c f82f 	bl	2cab0 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   10a52:	6826      	ldr	r6, [r4, #0]
   10a54:	89ab      	ldrh	r3, [r5, #12]
   10a56:	68aa      	ldr	r2, [r5, #8]
   10a58:	4601      	mov	r1, r0
   10a5a:	6830      	ldr	r0, [r6, #0]
   10a5c:	f01b facd 	bl	2bffa <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   10a60:	211e      	movs	r1, #30
   10a62:	2200      	movs	r2, #0
   10a64:	4620      	mov	r0, r4
   10a66:	f7ff ff97 	bl	10998 <bt_att_chan_create_pdu>
	if (!buf) {
   10a6a:	4601      	mov	r1, r0
   10a6c:	b118      	cbz	r0, 10a76 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   10a6e:	4a03      	ldr	r2, [pc, #12]	; (10a7c <att_indicate+0x38>)
   10a70:	4620      	mov	r0, r4
   10a72:	f01a fb9d 	bl	2b1b0 <bt_att_chan_send_rsp>
}
   10a76:	2000      	movs	r0, #0
   10a78:	bd70      	pop	{r4, r5, r6, pc}
   10a7a:	bf00      	nop
   10a7c:	0002b21d 	.word	0x0002b21d

00010a80 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   10a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a84:	4688      	mov	r8, r1
   10a86:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   10a88:	2101      	movs	r1, #1
   10a8a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   10a8c:	4605      	mov	r5, r0
   10a8e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   10a90:	f7ff ff82 	bl	10998 <bt_att_chan_create_pdu>
	if (!buf) {
   10a94:	4604      	mov	r4, r0
   10a96:	b178      	cbz	r0, 10ab8 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   10a98:	2104      	movs	r1, #4
   10a9a:	3008      	adds	r0, #8
   10a9c:	f01b ffc7 	bl	2ca2e <net_buf_simple_add>
	rsp->request = req;
   10aa0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   10aa4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   10aa6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   10aaa:	4621      	mov	r1, r4
   10aac:	4628      	mov	r0, r5
   10aae:	4a03      	ldr	r2, [pc, #12]	; (10abc <send_err_rsp.part.0+0x3c>)
}
   10ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   10ab4:	f01a bb7c 	b.w	2b1b0 <bt_att_chan_send_rsp>
}
   10ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10abc:	0002b201 	.word	0x0002b201

00010ac0 <bt_att_recv>:
{
   10ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10ac4:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   10ac6:	898b      	ldrh	r3, [r1, #12]
{
   10ac8:	af00      	add	r7, sp, #0
   10aca:	4604      	mov	r4, r0
   10acc:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   10ace:	b99b      	cbnz	r3, 10af8 <bt_att_recv+0x38>
		BT_ERR("Too small ATT PDU received");
   10ad0:	485f      	ldr	r0, [pc, #380]	; (10c50 <bt_att_recv+0x190>)
   10ad2:	6803      	ldr	r3, [r0, #0]
   10ad4:	075d      	lsls	r5, r3, #29
   10ad6:	d00a      	beq.n	10aee <bt_att_recv+0x2e>
   10ad8:	4b5e      	ldr	r3, [pc, #376]	; (10c54 <bt_att_recv+0x194>)
   10ada:	61bb      	str	r3, [r7, #24]
   10adc:	2302      	movs	r3, #2
   10ade:	607b      	str	r3, [r7, #4]
   10ae0:	617b      	str	r3, [r7, #20]
   10ae2:	f107 0214 	add.w	r2, r7, #20
   10ae6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
   10aea:	f01a fa9d 	bl	2b028 <z_log_msg2_static_create.constprop.0>
}
   10aee:	2000      	movs	r0, #0
   10af0:	3724      	adds	r7, #36	; 0x24
   10af2:	46bd      	mov	sp, r7
   10af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10af8:	2101      	movs	r1, #1
   10afa:	f108 0008 	add.w	r0, r8, #8
   10afe:	f01b ffc7 	bl	2ca90 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   10b02:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10b06:	4605      	mov	r5, r0
   10b08:	2b00      	cmp	r3, #0
   10b0a:	d0f0      	beq.n	10aee <bt_att_recv+0x2e>
		if (hdr->code == handlers[i].op) {
   10b0c:	7801      	ldrb	r1, [r0, #0]
   10b0e:	4a52      	ldr	r2, [pc, #328]	; (10c58 <bt_att_recv+0x198>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   10b10:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10b14:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   10b16:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   10b1a:	4288      	cmp	r0, r1
   10b1c:	d126      	bne.n	10b6c <bt_att_recv+0xac>
		if (handler->type == ATT_REQUEST &&
   10b1e:	00d9      	lsls	r1, r3, #3
   10b20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10b24:	f893 9002 	ldrb.w	r9, [r3, #2]
   10b28:	f1b9 0f01 	cmp.w	r9, #1
   10b2c:	d142      	bne.n	10bb4 <bt_att_recv+0xf4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10b2e:	f3bf 8f5b 	dmb	ish
   10b32:	34e8      	adds	r4, #232	; 0xe8
   10b34:	e854 3f00 	ldrex	r3, [r4]
   10b38:	f043 0001 	orr.w	r0, r3, #1
   10b3c:	e844 0c00 	strex	ip, r0, [r4]
   10b40:	f1bc 0f00 	cmp.w	ip, #0
   10b44:	d1f6      	bne.n	10b34 <bt_att_recv+0x74>
   10b46:	f3bf 8f5b 	dmb	ish
   10b4a:	07dc      	lsls	r4, r3, #31
   10b4c:	d54c      	bpl.n	10be8 <bt_att_recv+0x128>
			BT_WARN("Ignoring unexpected request");
   10b4e:	4840      	ldr	r0, [pc, #256]	; (10c50 <bt_att_recv+0x190>)
   10b50:	6803      	ldr	r3, [r0, #0]
   10b52:	f013 0f06 	tst.w	r3, #6
   10b56:	d0ca      	beq.n	10aee <bt_att_recv+0x2e>
   10b58:	4b40      	ldr	r3, [pc, #256]	; (10c5c <bt_att_recv+0x19c>)
			BT_WARN("Ignoring unexpected indication");
   10b5a:	61bb      	str	r3, [r7, #24]
   10b5c:	2302      	movs	r3, #2
   10b5e:	607b      	str	r3, [r7, #4]
   10b60:	617b      	str	r3, [r7, #20]
   10b62:	f107 0214 	add.w	r2, r7, #20
   10b66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10b6a:	e7be      	b.n	10aea <bt_att_recv+0x2a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10b6c:	3301      	adds	r3, #1
   10b6e:	2b1d      	cmp	r3, #29
   10b70:	d1d1      	bne.n	10b16 <bt_att_recv+0x56>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   10b72:	4837      	ldr	r0, [pc, #220]	; (10c50 <bt_att_recv+0x190>)
   10b74:	6803      	ldr	r3, [r0, #0]
   10b76:	f013 0f06 	tst.w	r3, #6
   10b7a:	d00b      	beq.n	10b94 <bt_att_recv+0xd4>
   10b7c:	4b38      	ldr	r3, [pc, #224]	; (10c60 <bt_att_recv+0x1a0>)
   10b7e:	f107 0214 	add.w	r2, r7, #20
   10b82:	e9c7 3106 	strd	r3, r1, [r7, #24]
   10b86:	2303      	movs	r3, #3
   10b88:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10b8c:	607b      	str	r3, [r7, #4]
   10b8e:	617b      	str	r3, [r7, #20]
   10b90:	f01a fa4a 	bl	2b028 <z_log_msg2_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   10b94:	7829      	ldrb	r1, [r5, #0]
   10b96:	4608      	mov	r0, r1
   10b98:	f01a f926 	bl	2ade8 <att_op_get_type>
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d0a6      	beq.n	10aee <bt_att_recv+0x2e>
   10ba0:	2805      	cmp	r0, #5
   10ba2:	d0a4      	beq.n	10aee <bt_att_recv+0x2e>
	if (!req) {
   10ba4:	2900      	cmp	r1, #0
   10ba6:	d0a2      	beq.n	10aee <bt_att_recv+0x2e>
   10ba8:	2306      	movs	r3, #6
   10baa:	2200      	movs	r2, #0
   10bac:	4630      	mov	r0, r6
   10bae:	f7ff ff67 	bl	10a80 <send_err_rsp.part.0>
   10bb2:	e79c      	b.n	10aee <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
   10bb4:	f1b9 0f05 	cmp.w	r9, #5
   10bb8:	d116      	bne.n	10be8 <bt_att_recv+0x128>
   10bba:	f3bf 8f5b 	dmb	ish
   10bbe:	34e8      	adds	r4, #232	; 0xe8
   10bc0:	e854 3f00 	ldrex	r3, [r4]
   10bc4:	f043 0002 	orr.w	r0, r3, #2
   10bc8:	e844 0c00 	strex	ip, r0, [r4]
   10bcc:	f1bc 0f00 	cmp.w	ip, #0
   10bd0:	d1f6      	bne.n	10bc0 <bt_att_recv+0x100>
   10bd2:	f3bf 8f5b 	dmb	ish
   10bd6:	0798      	lsls	r0, r3, #30
   10bd8:	d506      	bpl.n	10be8 <bt_att_recv+0x128>
			BT_WARN("Ignoring unexpected indication");
   10bda:	481d      	ldr	r0, [pc, #116]	; (10c50 <bt_att_recv+0x190>)
   10bdc:	6803      	ldr	r3, [r0, #0]
   10bde:	f013 0f06 	tst.w	r3, #6
   10be2:	d084      	beq.n	10aee <bt_att_recv+0x2e>
   10be4:	4b1f      	ldr	r3, [pc, #124]	; (10c64 <bt_att_recv+0x1a4>)
   10be6:	e7b8      	b.n	10b5a <bt_att_recv+0x9a>
	if (buf->len < handler->expect_len) {
   10be8:	440a      	add	r2, r1
   10bea:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   10bee:	7851      	ldrb	r1, [r2, #1]
   10bf0:	4299      	cmp	r1, r3
   10bf2:	d91b      	bls.n	10c2c <bt_att_recv+0x16c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   10bf4:	4816      	ldr	r0, [pc, #88]	; (10c50 <bt_att_recv+0x190>)
   10bf6:	6802      	ldr	r2, [r0, #0]
   10bf8:	0752      	lsls	r2, r2, #29
   10bfa:	d011      	beq.n	10c20 <bt_att_recv+0x160>
   10bfc:	f8df c068 	ldr.w	ip, [pc, #104]	; 10c68 <bt_att_recv+0x1a8>
   10c00:	7829      	ldrb	r1, [r5, #0]
   10c02:	466c      	mov	r4, sp
   10c04:	b088      	sub	sp, #32
   10c06:	466a      	mov	r2, sp
   10c08:	e9c2 c304 	strd	ip, r3, [r2, #16]
   10c0c:	2304      	movs	r3, #4
   10c0e:	6191      	str	r1, [r2, #24]
   10c10:	f842 3f0c 	str.w	r3, [r2, #12]!
   10c14:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10c18:	60bb      	str	r3, [r7, #8]
   10c1a:	f01a fa05 	bl	2b028 <z_log_msg2_static_create.constprop.0>
   10c1e:	46a5      	mov	sp, r4
	if (handler->type == ATT_REQUEST && err) {
   10c20:	f1b9 0f01 	cmp.w	r9, #1
   10c24:	f47f af63 	bne.w	10aee <bt_att_recv+0x2e>
   10c28:	2304      	movs	r3, #4
   10c2a:	e00b      	b.n	10c44 <bt_att_recv+0x184>
		err = handler->func(att_chan, buf);
   10c2c:	6853      	ldr	r3, [r2, #4]
   10c2e:	4641      	mov	r1, r8
   10c30:	4630      	mov	r0, r6
   10c32:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   10c34:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   10c38:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   10c3a:	f47f af58 	bne.w	10aee <bt_att_recv+0x2e>
   10c3e:	2800      	cmp	r0, #0
   10c40:	f43f af55 	beq.w	10aee <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   10c44:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   10c46:	2900      	cmp	r1, #0
   10c48:	f43f af51 	beq.w	10aee <bt_att_recv+0x2e>
   10c4c:	e7ad      	b.n	10baa <bt_att_recv+0xea>
   10c4e:	bf00      	nop
   10c50:	200009d8 	.word	0x200009d8
   10c54:	00033c2f 	.word	0x00033c2f
   10c58:	0002f40c 	.word	0x0002f40c
   10c5c:	00033c64 	.word	0x00033c64
   10c60:	00033c4a 	.word	0x00033c4a
   10c64:	00033c80 	.word	0x00033c80
   10c68:	00033c9f 	.word	0x00033c9f

00010c6c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c70:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10c72:	6803      	ldr	r3, [r0, #0]
   10c74:	460e      	mov	r6, r1
   10c76:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10c78:	b087      	sub	sp, #28
   10c7a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10c7c:	bf18      	it	ne
   10c7e:	2101      	movne	r1, #1
   10c80:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10c82:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10c84:	f01b f9e5 	bl	2c052 <bt_gatt_change_aware>
   10c88:	2800      	cmp	r0, #0
   10c8a:	d04b      	beq.n	10d24 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   10c8c:	2f00      	cmp	r7, #0
   10c8e:	d04b      	beq.n	10d28 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   10c90:	2218      	movs	r2, #24
   10c92:	2100      	movs	r1, #0
   10c94:	4668      	mov	r0, sp
   10c96:	f019 fb6c 	bl	2a372 <memset>
	if (rsp) {
   10c9a:	f1b8 0f00 	cmp.w	r8, #0
   10c9e:	d122      	bne.n	10ce6 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   10ca0:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10ca2:	4a22      	ldr	r2, [pc, #136]	; (10d2c <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   10ca4:	681b      	ldr	r3, [r3, #0]
   10ca6:	9300      	str	r3, [sp, #0]
	data.value = value;
   10ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10caa:	9303      	str	r3, [sp, #12]
	data.len = len;
   10cac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   10cb0:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   10cb4:	2301      	movs	r3, #1
   10cb6:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   10cba:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10cbe:	466b      	mov	r3, sp
   10cc0:	4639      	mov	r1, r7
   10cc2:	4638      	mov	r0, r7
	data.req = req;
   10cc4:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   10cc8:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10ccc:	f01a f908 	bl	2aee0 <bt_gatt_foreach_attr>
	if (data.err) {
   10cd0:	f89d 4014 	ldrb.w	r4, [sp, #20]
   10cd4:	b1f4      	cbz	r4, 10d14 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   10cd6:	f1b8 0f00 	cmp.w	r8, #0
   10cda:	d10e      	bne.n	10cfa <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   10cdc:	2400      	movs	r4, #0
}
   10cde:	4620      	mov	r0, r4
   10ce0:	b007      	add	sp, #28
   10ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   10ce6:	2200      	movs	r2, #0
   10ce8:	4641      	mov	r1, r8
   10cea:	4628      	mov	r0, r5
   10cec:	f7ff fe54 	bl	10998 <bt_att_chan_create_pdu>
   10cf0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   10cf2:	2800      	cmp	r0, #0
   10cf4:	d1d4      	bne.n	10ca0 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   10cf6:	240e      	movs	r4, #14
   10cf8:	e7f1      	b.n	10cde <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   10cfa:	9801      	ldr	r0, [sp, #4]
   10cfc:	f00f ff94 	bl	20c28 <net_buf_unref>
	if (!req) {
   10d00:	2e00      	cmp	r6, #0
   10d02:	d0eb      	beq.n	10cdc <att_write_rsp.constprop.0+0x70>
   10d04:	f89d 3014 	ldrb.w	r3, [sp, #20]
   10d08:	463a      	mov	r2, r7
   10d0a:	4631      	mov	r1, r6
   10d0c:	4628      	mov	r0, r5
   10d0e:	f7ff feb7 	bl	10a80 <send_err_rsp.part.0>
   10d12:	e7e3      	b.n	10cdc <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   10d14:	9901      	ldr	r1, [sp, #4]
   10d16:	2900      	cmp	r1, #0
   10d18:	d0e0      	beq.n	10cdc <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   10d1a:	4a05      	ldr	r2, [pc, #20]	; (10d30 <att_write_rsp.constprop.0+0xc4>)
   10d1c:	4628      	mov	r0, r5
   10d1e:	f01a fa47 	bl	2b1b0 <bt_att_chan_send_rsp>
   10d22:	e7dc      	b.n	10cde <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10d24:	2412      	movs	r4, #18
   10d26:	e7da      	b.n	10cde <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   10d28:	2401      	movs	r4, #1
   10d2a:	e7d8      	b.n	10cde <att_write_rsp.constprop.0+0x72>
   10d2c:	0002afc5 	.word	0x0002afc5
   10d30:	0002b201 	.word	0x0002b201

00010d34 <att_signed_write_cmd>:
{
   10d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10d38:	f8d0 9008 	ldr.w	r9, [r0, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10d3c:	f3bf 8f5b 	dmb	ish
   10d40:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   10d44:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   10d48:	071a      	lsls	r2, r3, #28
{
   10d4a:	b08b      	sub	sp, #44	; 0x2c
   10d4c:	4606      	mov	r6, r0
   10d4e:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   10d50:	d503      	bpl.n	10d5a <att_signed_write_cmd+0x26>
		return 0;
   10d52:	2000      	movs	r0, #0
}
   10d54:	b00b      	add	sp, #44	; 0x2c
   10d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	handle = sys_le16_to_cpu(req->handle);
   10d5a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   10d5c:	2101      	movs	r1, #1
   10d5e:	f857 3f08 	ldr.w	r3, [r7, #8]!
   10d62:	4638      	mov	r0, r7
   10d64:	f8b3 8000 	ldrh.w	r8, [r3]
   10d68:	f01b fe82 	bl	2ca70 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   10d6c:	4648      	mov	r0, r9
   10d6e:	4629      	mov	r1, r5
   10d70:	f003 fa18 	bl	141a4 <bt_smp_sign_verify>
	if (err) {
   10d74:	4681      	mov	r9, r0
   10d76:	b170      	cbz	r0, 10d96 <att_signed_write_cmd+0x62>
		BT_ERR("Error verifying data");
   10d78:	4811      	ldr	r0, [pc, #68]	; (10dc0 <att_signed_write_cmd+0x8c>)
   10d7a:	6803      	ldr	r3, [r0, #0]
   10d7c:	075b      	lsls	r3, r3, #29
   10d7e:	d0e8      	beq.n	10d52 <att_signed_write_cmd+0x1e>
   10d80:	4b10      	ldr	r3, [pc, #64]	; (10dc4 <att_signed_write_cmd+0x90>)
   10d82:	9308      	str	r3, [sp, #32]
   10d84:	aa07      	add	r2, sp, #28
   10d86:	2302      	movs	r3, #2
   10d88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d8c:	9303      	str	r3, [sp, #12]
   10d8e:	9307      	str	r3, [sp, #28]
   10d90:	f01a f94a 	bl	2b028 <z_log_msg2_static_create.constprop.0>
   10d94:	e7dd      	b.n	10d52 <att_signed_write_cmd+0x1e>
	return net_buf_simple_pull(&buf->b, len);
   10d96:	2101      	movs	r1, #1
   10d98:	4638      	mov	r0, r7
   10d9a:	f01b fe71 	bl	2ca80 <net_buf_simple_pull>
   10d9e:	2102      	movs	r1, #2
   10da0:	4638      	mov	r0, r7
   10da2:	f01b fe6d 	bl	2ca80 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   10da6:	89ab      	ldrh	r3, [r5, #12]
   10da8:	3b0c      	subs	r3, #12
   10daa:	b29b      	uxth	r3, r3
   10dac:	9301      	str	r3, [sp, #4]
   10dae:	68ab      	ldr	r3, [r5, #8]
   10db0:	9300      	str	r3, [sp, #0]
   10db2:	464a      	mov	r2, r9
   10db4:	4643      	mov	r3, r8
   10db6:	4649      	mov	r1, r9
   10db8:	4630      	mov	r0, r6
   10dba:	f7ff ff57 	bl	10c6c <att_write_rsp.constprop.0>
   10dbe:	e7c9      	b.n	10d54 <att_signed_write_cmd+0x20>
   10dc0:	200009d8 	.word	0x200009d8
   10dc4:	00033cbe 	.word	0x00033cbe

00010dc8 <bt_att_create_pdu>:
{
   10dc8:	b530      	push	{r4, r5, lr}
   10dca:	b089      	sub	sp, #36	; 0x24
   10dcc:	460d      	mov	r5, r1
   10dce:	4614      	mov	r4, r2
	att = att_get(conn);
   10dd0:	f7ff fbe6 	bl	105a0 <att_get>
	if (!att) {
   10dd4:	b1f0      	cbz	r0, 10e14 <bt_att_create_pdu+0x4c>
	return list->head;
   10dd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10dd8:	b15b      	cbz	r3, 10df2 <bt_att_create_pdu+0x2a>
   10dda:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   10dde:	681b      	ldr	r3, [r3, #0]
   10de0:	b10b      	cbz	r3, 10de6 <bt_att_create_pdu+0x1e>
   10de2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10de6:	1c61      	adds	r1, r4, #1
   10de8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   10dec:	4291      	cmp	r1, r2
   10dee:	d914      	bls.n	10e1a <bt_att_create_pdu+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10df0:	b9d3      	cbnz	r3, 10e28 <bt_att_create_pdu+0x60>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   10df2:	4811      	ldr	r0, [pc, #68]	; (10e38 <bt_att_create_pdu+0x70>)
   10df4:	6803      	ldr	r3, [r0, #0]
   10df6:	f013 0f06 	tst.w	r3, #6
   10dfa:	d00b      	beq.n	10e14 <bt_att_create_pdu+0x4c>
   10dfc:	4b0f      	ldr	r3, [pc, #60]	; (10e3c <bt_att_create_pdu+0x74>)
   10dfe:	9306      	str	r3, [sp, #24]
   10e00:	3401      	adds	r4, #1
   10e02:	2303      	movs	r3, #3
   10e04:	aa05      	add	r2, sp, #20
   10e06:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10e0a:	9407      	str	r4, [sp, #28]
   10e0c:	9301      	str	r3, [sp, #4]
   10e0e:	9305      	str	r3, [sp, #20]
   10e10:	f01a f90a 	bl	2b028 <z_log_msg2_static_create.constprop.0>
}
   10e14:	2000      	movs	r0, #0
   10e16:	b009      	add	sp, #36	; 0x24
   10e18:	bd30      	pop	{r4, r5, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   10e1a:	4622      	mov	r2, r4
   10e1c:	4629      	mov	r1, r5
}
   10e1e:	b009      	add	sp, #36	; 0x24
   10e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   10e24:	f7ff bdb8 	b.w	10998 <bt_att_chan_create_pdu>
   10e28:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10e2c:	b10a      	cbz	r2, 10e32 <bt_att_create_pdu+0x6a>
   10e2e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   10e32:	4618      	mov	r0, r3
   10e34:	4613      	mov	r3, r2
   10e36:	e7d7      	b.n	10de8 <bt_att_create_pdu+0x20>
   10e38:	200009d8 	.word	0x200009d8
   10e3c:	00033cd3 	.word	0x00033cd3

00010e40 <att_read_group_req>:
{
   10e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   10e44:	898c      	ldrh	r4, [r1, #12]
   10e46:	3c04      	subs	r4, #4
   10e48:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   10e4a:	2c02      	cmp	r4, #2
{
   10e4c:	4605      	mov	r5, r0
   10e4e:	b08c      	sub	sp, #48	; 0x30
   10e50:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   10e52:	d001      	beq.n	10e58 <att_read_group_req+0x18>
   10e54:	2c10      	cmp	r4, #16
   10e56:	d16f      	bne.n	10f38 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   10e58:	2104      	movs	r1, #4
   10e5a:	3008      	adds	r0, #8
   10e5c:	f01b fe18 	bl	2ca90 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10e60:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   10e64:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   10e66:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10e68:	1d01      	adds	r1, r0, #4
   10e6a:	4622      	mov	r2, r4
   10e6c:	4640      	mov	r0, r8
   10e6e:	f019 fb6b 	bl	2a548 <bt_uuid_create>
   10e72:	2800      	cmp	r0, #0
   10e74:	d062      	beq.n	10f3c <att_read_group_req+0xfc>
	if (!start || !end) {
   10e76:	2e00      	cmp	r6, #0
   10e78:	d03a      	beq.n	10ef0 <att_read_group_req+0xb0>
   10e7a:	2400      	movs	r4, #0
   10e7c:	2f00      	cmp	r7, #0
   10e7e:	d036      	beq.n	10eee <att_read_group_req+0xae>
	if (start > end) {
   10e80:	42b7      	cmp	r7, r6
   10e82:	d335      	bcc.n	10ef0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   10e84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   10e88:	a901      	add	r1, sp, #4
   10e8a:	4640      	mov	r0, r8
   10e8c:	f88d 4004 	strb.w	r4, [sp, #4]
   10e90:	f8ad 3006 	strh.w	r3, [sp, #6]
   10e94:	f019 fb2a 	bl	2a4ec <bt_uuid_cmp>
   10e98:	2800      	cmp	r0, #0
   10e9a:	d134      	bne.n	10f06 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   10e9c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   10e9e:	2214      	movs	r2, #20
   10ea0:	2100      	movs	r1, #0
   10ea2:	a807      	add	r0, sp, #28
   10ea4:	f019 fa65 	bl	2a372 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   10ea8:	2201      	movs	r2, #1
   10eaa:	2111      	movs	r1, #17
   10eac:	4620      	mov	r0, r4
   10eae:	f7ff ff8b 	bl	10dc8 <bt_att_create_pdu>
   10eb2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   10eb4:	2800      	cmp	r0, #0
   10eb6:	d041      	beq.n	10f3c <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   10eb8:	2101      	movs	r1, #1
   10eba:	3008      	adds	r0, #8
	data.uuid = uuid;
   10ebc:	e9cd 5807 	strd	r5, r8, [sp, #28]
   10ec0:	f01b fdb5 	bl	2ca2e <net_buf_simple_add>
	data.rsp->len = 0U;
   10ec4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   10ec8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10eca:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   10ecc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10ed0:	4a1b      	ldr	r2, [pc, #108]	; (10f40 <att_read_group_req+0x100>)
	data.group = NULL;
   10ed2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10ed6:	4639      	mov	r1, r7
   10ed8:	4630      	mov	r0, r6
   10eda:	f01a f801 	bl	2aee0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   10ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ee0:	781c      	ldrb	r4, [r3, #0]
   10ee2:	bb1c      	cbnz	r4, 10f2c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   10ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
   10ee6:	f00f fe9f 	bl	20c28 <net_buf_unref>
	if (!req) {
   10eea:	230a      	movs	r3, #10
   10eec:	e018      	b.n	10f20 <att_read_group_req+0xe0>
			*err = 0U;
   10eee:	463e      	mov	r6, r7
	if (!req) {
   10ef0:	2301      	movs	r3, #1
   10ef2:	4632      	mov	r2, r6
   10ef4:	2110      	movs	r1, #16
   10ef6:	4628      	mov	r0, r5
   10ef8:	f7ff fdc2 	bl	10a80 <send_err_rsp.part.0>
		return 0;
   10efc:	2400      	movs	r4, #0
}
   10efe:	4620      	mov	r0, r4
   10f00:	b00c      	add	sp, #48	; 0x30
   10f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   10f06:	f642 0301 	movw	r3, #10241	; 0x2801
   10f0a:	a907      	add	r1, sp, #28
   10f0c:	4640      	mov	r0, r8
   10f0e:	f88d 401c 	strb.w	r4, [sp, #28]
   10f12:	f8ad 301e 	strh.w	r3, [sp, #30]
   10f16:	f019 fae9 	bl	2a4ec <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   10f1a:	2800      	cmp	r0, #0
   10f1c:	d0be      	beq.n	10e9c <att_read_group_req+0x5c>
	if (!req) {
   10f1e:	2310      	movs	r3, #16
   10f20:	4632      	mov	r2, r6
   10f22:	2110      	movs	r1, #16
   10f24:	4628      	mov	r0, r5
   10f26:	f7ff fdab 	bl	10a80 <send_err_rsp.part.0>
		return 0;
   10f2a:	e7e8      	b.n	10efe <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   10f2c:	4a05      	ldr	r2, [pc, #20]	; (10f44 <att_read_group_req+0x104>)
   10f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   10f30:	4628      	mov	r0, r5
   10f32:	f01a f93d 	bl	2b1b0 <bt_att_chan_send_rsp>
	return 0;
   10f36:	e7e1      	b.n	10efc <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   10f38:	2404      	movs	r4, #4
   10f3a:	e7e0      	b.n	10efe <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   10f3c:	240e      	movs	r4, #14
   10f3e:	e7de      	b.n	10efe <att_read_group_req+0xbe>
   10f40:	000106fd 	.word	0x000106fd
   10f44:	0002b201 	.word	0x0002b201

00010f48 <att_read_mult_req>:
{
   10f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10f4c:	6886      	ldr	r6, [r0, #8]
{
   10f4e:	b085      	sub	sp, #20
   10f50:	4604      	mov	r4, r0
   10f52:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   10f54:	4630      	mov	r0, r6
   10f56:	2101      	movs	r1, #1
   10f58:	f01b f87b 	bl	2c052 <bt_gatt_change_aware>
   10f5c:	2800      	cmp	r0, #0
   10f5e:	d038      	beq.n	10fd2 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   10f60:	2210      	movs	r2, #16
   10f62:	2100      	movs	r1, #0
   10f64:	4668      	mov	r0, sp
   10f66:	f019 fa04 	bl	2a372 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   10f6a:	2200      	movs	r2, #0
   10f6c:	210f      	movs	r1, #15
   10f6e:	4630      	mov	r0, r6
   10f70:	f7ff ff2a 	bl	10dc8 <bt_att_create_pdu>
   10f74:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   10f76:	b370      	cbz	r0, 10fd6 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10f78:	f8df 9060 	ldr.w	r9, [pc, #96]	; 10fdc <att_read_mult_req+0x94>
	data.chan = chan;
   10f7c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   10f7e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   10f82:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   10f86:	89ab      	ldrh	r3, [r5, #12]
   10f88:	2b01      	cmp	r3, #1
   10f8a:	d805      	bhi.n	10f98 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   10f8c:	4a14      	ldr	r2, [pc, #80]	; (10fe0 <att_read_mult_req+0x98>)
   10f8e:	9902      	ldr	r1, [sp, #8]
   10f90:	4620      	mov	r0, r4
   10f92:	f01a f90d 	bl	2b1b0 <bt_att_chan_send_rsp>
   10f96:	e018      	b.n	10fca <att_read_mult_req+0x82>
   10f98:	4638      	mov	r0, r7
   10f9a:	f01b fd89 	bl	2cab0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10f9e:	466b      	mov	r3, sp
   10fa0:	464a      	mov	r2, r9
   10fa2:	4601      	mov	r1, r0
   10fa4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   10fa6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10faa:	f019 ff99 	bl	2aee0 <bt_gatt_foreach_attr>
		if (data.err) {
   10fae:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10fb2:	2b00      	cmp	r3, #0
   10fb4:	d0e7      	beq.n	10f86 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   10fb6:	9802      	ldr	r0, [sp, #8]
   10fb8:	f00f fe36 	bl	20c28 <net_buf_unref>
	if (!req) {
   10fbc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10fc0:	4632      	mov	r2, r6
   10fc2:	210e      	movs	r1, #14
   10fc4:	4620      	mov	r0, r4
   10fc6:	f7ff fd5b 	bl	10a80 <send_err_rsp.part.0>
	return 0;
   10fca:	2000      	movs	r0, #0
}
   10fcc:	b005      	add	sp, #20
   10fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10fd2:	2012      	movs	r0, #18
   10fd4:	e7fa      	b.n	10fcc <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   10fd6:	200e      	movs	r0, #14
   10fd8:	e7f8      	b.n	10fcc <att_read_mult_req+0x84>
   10fda:	bf00      	nop
   10fdc:	0002b239 	.word	0x0002b239
   10fe0:	0002b201 	.word	0x0002b201

00010fe4 <att_read_rsp>:
{
   10fe4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10fe8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   10fec:	4605      	mov	r5, r0
   10fee:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   10ff0:	4640      	mov	r0, r8
   10ff2:	2101      	movs	r1, #1
{
   10ff4:	4614      	mov	r4, r2
   10ff6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   10ff8:	f01b f82b 	bl	2c052 <bt_gatt_change_aware>
   10ffc:	b390      	cbz	r0, 11064 <att_read_rsp+0x80>
	if (!handle) {
   10ffe:	b39e      	cbz	r6, 11068 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   11000:	2210      	movs	r2, #16
   11002:	2100      	movs	r1, #0
   11004:	4668      	mov	r0, sp
   11006:	f019 f9b4 	bl	2a372 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1100a:	2200      	movs	r2, #0
   1100c:	4621      	mov	r1, r4
   1100e:	4640      	mov	r0, r8
   11010:	f7ff feda 	bl	10dc8 <bt_att_create_pdu>
   11014:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11016:	b348      	cbz	r0, 1106c <att_read_rsp+0x88>
	data.offset = offset;
   11018:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1101c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11020:	2301      	movs	r3, #1
   11022:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11026:	4a12      	ldr	r2, [pc, #72]	; (11070 <att_read_rsp+0x8c>)
	data.chan = chan;
   11028:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1102a:	466b      	mov	r3, sp
   1102c:	4631      	mov	r1, r6
   1102e:	4630      	mov	r0, r6
   11030:	f019 ff56 	bl	2aee0 <bt_gatt_foreach_attr>
	if (data.err) {
   11034:	f89d 400c 	ldrb.w	r4, [sp, #12]
   11038:	b174      	cbz	r4, 11058 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1103a:	9802      	ldr	r0, [sp, #8]
   1103c:	f00f fdf4 	bl	20c28 <net_buf_unref>
	if (!req) {
   11040:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11044:	4632      	mov	r2, r6
   11046:	4639      	mov	r1, r7
   11048:	4628      	mov	r0, r5
   1104a:	f7ff fd19 	bl	10a80 <send_err_rsp.part.0>
		return 0;
   1104e:	2400      	movs	r4, #0
}
   11050:	4620      	mov	r0, r4
   11052:	b004      	add	sp, #16
   11054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11058:	4a06      	ldr	r2, [pc, #24]	; (11074 <att_read_rsp+0x90>)
   1105a:	9902      	ldr	r1, [sp, #8]
   1105c:	4628      	mov	r0, r5
   1105e:	f01a f8a7 	bl	2b1b0 <bt_att_chan_send_rsp>
	return 0;
   11062:	e7f5      	b.n	11050 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11064:	2412      	movs	r4, #18
   11066:	e7f3      	b.n	11050 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11068:	2401      	movs	r4, #1
   1106a:	e7f1      	b.n	11050 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1106c:	240e      	movs	r4, #14
   1106e:	e7ef      	b.n	11050 <att_read_rsp+0x6c>
   11070:	0002b239 	.word	0x0002b239
   11074:	0002b201 	.word	0x0002b201

00011078 <att_read_type_req>:
{
   11078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1107c:	898c      	ldrh	r4, [r1, #12]
   1107e:	3c04      	subs	r4, #4
   11080:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11082:	2c02      	cmp	r4, #2
{
   11084:	4605      	mov	r5, r0
   11086:	b08c      	sub	sp, #48	; 0x30
   11088:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1108a:	d001      	beq.n	11090 <att_read_type_req+0x18>
   1108c:	2c10      	cmp	r4, #16
   1108e:	d150      	bne.n	11132 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   11090:	2104      	movs	r1, #4
   11092:	3008      	adds	r0, #8
   11094:	f01b fcfc 	bl	2ca90 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11098:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1109c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1109e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   110a0:	1d01      	adds	r1, r0, #4
   110a2:	4622      	mov	r2, r4
   110a4:	4640      	mov	r0, r8
   110a6:	f019 fa4f 	bl	2a548 <bt_uuid_create>
   110aa:	b188      	cbz	r0, 110d0 <att_read_type_req+0x58>
	if (!start || !end) {
   110ac:	b19e      	cbz	r6, 110d6 <att_read_type_req+0x5e>
   110ae:	b18f      	cbz	r7, 110d4 <att_read_type_req+0x5c>
	if (start > end) {
   110b0:	42be      	cmp	r6, r7
   110b2:	d810      	bhi.n	110d6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   110b4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   110b6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   110b8:	2100      	movs	r1, #0
   110ba:	eb0d 0002 	add.w	r0, sp, r2
   110be:	f019 f958 	bl	2a372 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   110c2:	2201      	movs	r2, #1
   110c4:	2109      	movs	r1, #9
   110c6:	4620      	mov	r0, r4
   110c8:	f7ff fe7e 	bl	10dc8 <bt_att_create_pdu>
   110cc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   110ce:	b968      	cbnz	r0, 110ec <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   110d0:	240e      	movs	r4, #14
   110d2:	e007      	b.n	110e4 <att_read_type_req+0x6c>
			*err = 0U;
   110d4:	463e      	mov	r6, r7
	if (!req) {
   110d6:	2301      	movs	r3, #1
   110d8:	4632      	mov	r2, r6
   110da:	2108      	movs	r1, #8
   110dc:	4628      	mov	r0, r5
   110de:	f7ff fccf 	bl	10a80 <send_err_rsp.part.0>
		return 0;
   110e2:	2400      	movs	r4, #0
}
   110e4:	4620      	mov	r0, r4
   110e6:	b00c      	add	sp, #48	; 0x30
   110e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   110ec:	2101      	movs	r1, #1
   110ee:	3008      	adds	r0, #8
	data.uuid = uuid;
   110f0:	e9cd 5806 	strd	r5, r8, [sp, #24]
   110f4:	f01b fc9b 	bl	2ca2e <net_buf_simple_add>
	data.rsp->len = 0U;
   110f8:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   110fc:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   110fe:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11100:	4a0d      	ldr	r2, [pc, #52]	; (11138 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   11102:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11106:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11108:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1110c:	4630      	mov	r0, r6
   1110e:	ab06      	add	r3, sp, #24
   11110:	f019 fee6 	bl	2aee0 <bt_gatt_foreach_attr>
	if (data.err) {
   11114:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   11118:	b12c      	cbz	r4, 11126 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1111a:	9808      	ldr	r0, [sp, #32]
   1111c:	f00f fd84 	bl	20c28 <net_buf_unref>
	if (!req) {
   11120:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   11124:	e7d8      	b.n	110d8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11126:	4a05      	ldr	r2, [pc, #20]	; (1113c <att_read_type_req+0xc4>)
   11128:	9908      	ldr	r1, [sp, #32]
   1112a:	4628      	mov	r0, r5
   1112c:	f01a f840 	bl	2b1b0 <bt_att_chan_send_rsp>
	return 0;
   11130:	e7d8      	b.n	110e4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   11132:	2404      	movs	r4, #4
   11134:	e7d6      	b.n	110e4 <att_read_type_req+0x6c>
   11136:	bf00      	nop
   11138:	00010889 	.word	0x00010889
   1113c:	0002b201 	.word	0x0002b201

00011140 <att_find_type_req>:
{
   11140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11144:	4688      	mov	r8, r1
   11146:	b086      	sub	sp, #24
   11148:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1114a:	2106      	movs	r1, #6
   1114c:	f108 0008 	add.w	r0, r8, #8
   11150:	f01b fc9e 	bl	2ca90 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   11154:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   11156:	b317      	cbz	r7, 1119e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   11158:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1115c:	f1b9 0f00 	cmp.w	r9, #0
   11160:	d01c      	beq.n	1119c <att_find_type_req+0x5c>
	if (start > end) {
   11162:	45b9      	cmp	r9, r7
   11164:	d31b      	bcc.n	1119e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   11166:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   11168:	f8ad 3002 	strh.w	r3, [sp, #2]
   1116c:	2400      	movs	r4, #0
   1116e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11172:	a901      	add	r1, sp, #4
   11174:	4668      	mov	r0, sp
	value = buf->data;
   11176:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1117a:	f88d 4000 	strb.w	r4, [sp]
   1117e:	f88d 4004 	strb.w	r4, [sp, #4]
   11182:	f8ad 3006 	strh.w	r3, [sp, #6]
   11186:	f019 f9b1 	bl	2a4ec <bt_uuid_cmp>
   1118a:	4606      	mov	r6, r0
   1118c:	b190      	cbz	r0, 111b4 <att_find_type_req+0x74>
	if (!req) {
   1118e:	230a      	movs	r3, #10
   11190:	463a      	mov	r2, r7
   11192:	2106      	movs	r1, #6
   11194:	4628      	mov	r0, r5
   11196:	f7ff fc73 	bl	10a80 <send_err_rsp.part.0>
		return 0;
   1119a:	e007      	b.n	111ac <att_find_type_req+0x6c>
			*err = 0U;
   1119c:	464f      	mov	r7, r9
	if (!req) {
   1119e:	2301      	movs	r3, #1
   111a0:	463a      	mov	r2, r7
   111a2:	2106      	movs	r1, #6
   111a4:	4628      	mov	r0, r5
   111a6:	f7ff fc6b 	bl	10a80 <send_err_rsp.part.0>
		return 0;
   111aa:	2400      	movs	r4, #0
}
   111ac:	4620      	mov	r0, r4
   111ae:	b006      	add	sp, #24
   111b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   111b4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   111b8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   111bc:	4601      	mov	r1, r0
   111be:	2214      	movs	r2, #20
   111c0:	a801      	add	r0, sp, #4
   111c2:	f019 f8d6 	bl	2a372 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   111c6:	4632      	mov	r2, r6
   111c8:	2107      	movs	r1, #7
   111ca:	4640      	mov	r0, r8
   111cc:	f7ff fdfc 	bl	10dc8 <bt_att_create_pdu>
   111d0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   111d2:	b1e0      	cbz	r0, 1120e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   111d4:	230a      	movs	r3, #10
   111d6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   111da:	4a0e      	ldr	r2, [pc, #56]	; (11214 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   111dc:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   111e0:	ab01      	add	r3, sp, #4
   111e2:	4649      	mov	r1, r9
   111e4:	4638      	mov	r0, r7
	data.value = value;
   111e6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   111ea:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   111ec:	f019 fe78 	bl	2aee0 <bt_gatt_foreach_attr>
	if (data.err) {
   111f0:	f89d 4015 	ldrb.w	r4, [sp, #21]
   111f4:	b12c      	cbz	r4, 11202 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   111f6:	9802      	ldr	r0, [sp, #8]
   111f8:	f00f fd16 	bl	20c28 <net_buf_unref>
	if (!req) {
   111fc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11200:	e7ce      	b.n	111a0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11202:	4a05      	ldr	r2, [pc, #20]	; (11218 <att_find_type_req+0xd8>)
   11204:	9902      	ldr	r1, [sp, #8]
   11206:	4628      	mov	r0, r5
   11208:	f019 ffd2 	bl	2b1b0 <bt_att_chan_send_rsp>
	return 0;
   1120c:	e7ce      	b.n	111ac <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1120e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   11210:	e7cc      	b.n	111ac <att_find_type_req+0x6c>
   11212:	bf00      	nop
   11214:	0001042d 	.word	0x0001042d
   11218:	0002b201 	.word	0x0002b201

0001121c <att_find_info_req>:
{
   1121c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1121e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   11220:	881e      	ldrh	r6, [r3, #0]
{
   11222:	b085      	sub	sp, #20
   11224:	4605      	mov	r5, r0
	if (!start || !end) {
   11226:	b19e      	cbz	r6, 11250 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   11228:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1122a:	b184      	cbz	r4, 1124e <att_find_info_req+0x32>
	if (start > end) {
   1122c:	42a6      	cmp	r6, r4
   1122e:	d80f      	bhi.n	11250 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   11230:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   11232:	2210      	movs	r2, #16
   11234:	2100      	movs	r1, #0
   11236:	4668      	mov	r0, sp
   11238:	f019 f89b 	bl	2a372 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1123c:	2200      	movs	r2, #0
   1123e:	2105      	movs	r1, #5
   11240:	4638      	mov	r0, r7
   11242:	f7ff fdc1 	bl	10dc8 <bt_att_create_pdu>
   11246:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   11248:	b958      	cbnz	r0, 11262 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1124a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1124c:	e007      	b.n	1125e <att_find_info_req+0x42>
			*err = 0U;
   1124e:	4626      	mov	r6, r4
	if (!req) {
   11250:	2301      	movs	r3, #1
   11252:	4632      	mov	r2, r6
   11254:	2104      	movs	r1, #4
   11256:	4628      	mov	r0, r5
   11258:	f7ff fc12 	bl	10a80 <send_err_rsp.part.0>
	return 0;
   1125c:	2000      	movs	r0, #0
}
   1125e:	b005      	add	sp, #20
   11260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   11262:	4621      	mov	r1, r4
   11264:	4a09      	ldr	r2, [pc, #36]	; (1128c <att_find_info_req+0x70>)
	data.chan = chan;
   11266:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   11268:	466b      	mov	r3, sp
   1126a:	4630      	mov	r0, r6
   1126c:	f019 fe38 	bl	2aee0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   11270:	9c02      	ldr	r4, [sp, #8]
   11272:	b924      	cbnz	r4, 1127e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   11274:	9801      	ldr	r0, [sp, #4]
   11276:	f00f fcd7 	bl	20c28 <net_buf_unref>
	if (!req) {
   1127a:	230a      	movs	r3, #10
   1127c:	e7e9      	b.n	11252 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1127e:	4a04      	ldr	r2, [pc, #16]	; (11290 <att_find_info_req+0x74>)
   11280:	9901      	ldr	r1, [sp, #4]
   11282:	4628      	mov	r0, r5
   11284:	f019 ff94 	bl	2b1b0 <bt_att_chan_send_rsp>
   11288:	e7e8      	b.n	1125c <att_find_info_req+0x40>
   1128a:	bf00      	nop
   1128c:	0002aef7 	.word	0x0002aef7
   11290:	0002b201 	.word	0x0002b201

00011294 <att_mtu_req>:
{
   11294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   11296:	6803      	ldr	r3, [r0, #0]
{
   11298:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1129a:	6818      	ldr	r0, [r3, #0]
   1129c:	f3bf 8f5b 	dmb	ish
   112a0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   112a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   112a8:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   112ac:	071b      	lsls	r3, r3, #28
   112ae:	d421      	bmi.n	112f4 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   112b0:	688b      	ldr	r3, [r1, #8]
   112b2:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   112b4:	2e16      	cmp	r6, #22
   112b6:	d91f      	bls.n	112f8 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   112b8:	2202      	movs	r2, #2
   112ba:	2103      	movs	r1, #3
   112bc:	f7ff fd84 	bl	10dc8 <bt_att_create_pdu>
	if (!pdu) {
   112c0:	4607      	mov	r7, r0
   112c2:	b1d8      	cbz	r0, 112fc <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   112c4:	2102      	movs	r1, #2
   112c6:	3008      	adds	r0, #8
   112c8:	f01b fbb1 	bl	2ca2e <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   112cc:	2341      	movs	r3, #65	; 0x41
   112ce:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   112d0:	4a0b      	ldr	r2, [pc, #44]	; (11300 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   112d2:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   112d4:	4639      	mov	r1, r7
   112d6:	4620      	mov	r0, r4
   112d8:	f019 ff6a 	bl	2b1b0 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   112dc:	2e41      	cmp	r6, #65	; 0x41
   112de:	bf28      	it	cs
   112e0:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   112e2:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   112e4:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   112e8:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   112ec:	f019 fdc2 	bl	2ae74 <att_chan_mtu_updated>
	return 0;
   112f0:	4628      	mov	r0, r5
}
   112f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   112f4:	2006      	movs	r0, #6
   112f6:	e7fc      	b.n	112f2 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   112f8:	2004      	movs	r0, #4
   112fa:	e7fa      	b.n	112f2 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   112fc:	200e      	movs	r0, #14
   112fe:	e7f8      	b.n	112f2 <att_mtu_req+0x5e>
   11300:	0002b201 	.word	0x0002b201

00011304 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   11304:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   11306:	2300      	movs	r3, #0
{
   11308:	4605      	mov	r5, r0
   1130a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1130c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1130e:	f014 fdef 	bl	25ef0 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   11312:	4b0b      	ldr	r3, [pc, #44]	; (11340 <bt_att_req_alloc+0x3c>)
   11314:	681b      	ldr	r3, [r3, #0]
   11316:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   11318:	bf04      	itt	eq
   1131a:	2500      	moveq	r5, #0
   1131c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1131e:	a901      	add	r1, sp, #4
   11320:	4808      	ldr	r0, [pc, #32]	; (11344 <bt_att_req_alloc+0x40>)
   11322:	462a      	mov	r2, r5
   11324:	4623      	mov	r3, r4
   11326:	f013 fe39 	bl	24f9c <k_mem_slab_alloc>
   1132a:	4601      	mov	r1, r0
   1132c:	b930      	cbnz	r0, 1133c <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1132e:	9801      	ldr	r0, [sp, #4]
   11330:	221c      	movs	r2, #28
   11332:	f019 f81e 	bl	2a372 <memset>

	return req;
   11336:	9801      	ldr	r0, [sp, #4]
}
   11338:	b003      	add	sp, #12
   1133a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1133c:	2000      	movs	r0, #0
   1133e:	e7fb      	b.n	11338 <bt_att_req_alloc+0x34>
   11340:	20002c80 	.word	0x20002c80
   11344:	20000b90 	.word	0x20000b90

00011348 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   11348:	b507      	push	{r0, r1, r2, lr}
   1134a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1134c:	6880      	ldr	r0, [r0, #8]
   1134e:	b120      	cbz	r0, 1135a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   11350:	f00f fc6a 	bl	20c28 <net_buf_unref>
		req->buf = NULL;
   11354:	9b01      	ldr	r3, [sp, #4]
   11356:	2200      	movs	r2, #0
   11358:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1135a:	4803      	ldr	r0, [pc, #12]	; (11368 <bt_att_req_free+0x20>)
   1135c:	a901      	add	r1, sp, #4
   1135e:	f01c f8b3 	bl	2d4c8 <k_mem_slab_free>
}
   11362:	b003      	add	sp, #12
   11364:	f85d fb04 	ldr.w	pc, [sp], #4
   11368:	20000b90 	.word	0x20000b90

0001136c <att_handle_rsp>:
{
   1136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11370:	4605      	mov	r5, r0
   11372:	b08b      	sub	sp, #44	; 0x2c
	k_work_cancel_delayable(&chan->timeout_work);
   11374:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   11378:	460f      	mov	r7, r1
   1137a:	4690      	mov	r8, r2
   1137c:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1137e:	f01c fa7e 	bl	2d87e <k_work_cancel_delayable>
	if (!chan->req) {
   11382:	f8d5 a0f4 	ldr.w	sl, [r5, #244]	; 0xf4
   11386:	f1ba 0f00 	cmp.w	sl, #0
   1138a:	d11f      	bne.n	113cc <att_handle_rsp+0x60>
		BT_WARN("No pending ATT request");
   1138c:	481a      	ldr	r0, [pc, #104]	; (113f8 <att_handle_rsp+0x8c>)
   1138e:	6804      	ldr	r4, [r0, #0]
   11390:	f014 0406 	ands.w	r4, r4, #6
   11394:	d00a      	beq.n	113ac <att_handle_rsp+0x40>
   11396:	4b19      	ldr	r3, [pc, #100]	; (113fc <att_handle_rsp+0x90>)
   11398:	9308      	str	r3, [sp, #32]
   1139a:	aa07      	add	r2, sp, #28
   1139c:	2302      	movs	r3, #2
   1139e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
   113a2:	4654      	mov	r4, sl
		BT_WARN("No pending ATT request");
   113a4:	9303      	str	r3, [sp, #12]
   113a6:	9307      	str	r3, [sp, #28]
   113a8:	f019 fe3e 	bl	2b028 <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
   113ac:	6828      	ldr	r0, [r5, #0]
   113ae:	f019 ffaa 	bl	2b306 <att_req_send_process>
	if (func) {
   113b2:	b13c      	cbz	r4, 113c4 <att_handle_rsp+0x58>
		func(chan->att->conn, err, pdu, len, params);
   113b4:	6828      	ldr	r0, [r5, #0]
   113b6:	f8cd 9000 	str.w	r9, [sp]
   113ba:	6800      	ldr	r0, [r0, #0]
   113bc:	4643      	mov	r3, r8
   113be:	463a      	mov	r2, r7
   113c0:	4631      	mov	r1, r6
   113c2:	47a0      	blx	r4
}
   113c4:	2000      	movs	r0, #0
   113c6:	b00b      	add	sp, #44	; 0x2c
   113c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   113cc:	4b0c      	ldr	r3, [pc, #48]	; (11400 <att_handle_rsp+0x94>)
   113ce:	459a      	cmp	sl, r3
   113d0:	f04f 0b00 	mov.w	fp, #0
   113d4:	d103      	bne.n	113de <att_handle_rsp+0x72>
		chan->req = NULL;
   113d6:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
	bt_att_func_t func = NULL;
   113da:	465c      	mov	r4, fp
		goto process;
   113dc:	e7e6      	b.n	113ac <att_handle_rsp+0x40>
	func = chan->req->func;
   113de:	f8da 4004 	ldr.w	r4, [sl, #4]
	chan->req->func = NULL;
   113e2:	f8ca b004 	str.w	fp, [sl, #4]
	bt_att_req_free(chan->req);
   113e6:	4650      	mov	r0, sl
	params = chan->req->user_data;
   113e8:	f8da 9018 	ldr.w	r9, [sl, #24]
	bt_att_req_free(chan->req);
   113ec:	f7ff ffac 	bl	11348 <bt_att_req_free>
	chan->req = NULL;
   113f0:	f8c5 b0f4 	str.w	fp, [r5, #244]	; 0xf4
   113f4:	e7da      	b.n	113ac <att_handle_rsp+0x40>
   113f6:	bf00      	nop
   113f8:	200009d8 	.word	0x200009d8
   113fc:	00033cee 	.word	0x00033cee
   11400:	20002dc0 	.word	0x20002dc0

00011404 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   11404:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
{
   11408:	b570      	push	{r4, r5, r6, lr}
   1140a:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   1140c:	b313      	cbz	r3, 11454 <att_error_rsp+0x50>
   1140e:	4a16      	ldr	r2, [pc, #88]	; (11468 <att_error_rsp+0x64>)
   11410:	4293      	cmp	r3, r2
   11412:	d01f      	beq.n	11454 <att_error_rsp+0x50>
	err = rsp->error;
   11414:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   11416:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
   11418:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
   1141a:	2d05      	cmp	r5, #5
   1141c:	d006      	beq.n	1142c <att_error_rsp+0x28>
   1141e:	2d0f      	cmp	r5, #15
   11420:	d119      	bne.n	11456 <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   11422:	7a43      	ldrb	r3, [r0, #9]
   11424:	2b01      	cmp	r3, #1
   11426:	d816      	bhi.n	11456 <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   11428:	2102      	movs	r1, #2
   1142a:	e007      	b.n	1143c <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   1142c:	7a43      	ldrb	r3, [r0, #9]
   1142e:	2b01      	cmp	r3, #1
   11430:	d9fa      	bls.n	11428 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   11432:	2b02      	cmp	r3, #2
   11434:	d00c      	beq.n	11450 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   11436:	2b03      	cmp	r3, #3
   11438:	d10d      	bne.n	11456 <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   1143a:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   1143c:	f019 fb44 	bl	2aac8 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   11440:	b948      	cbnz	r0, 11456 <att_error_rsp+0x52>
		chan->req->retrying = true;
   11442:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   11446:	7c13      	ldrb	r3, [r2, #16]
   11448:	f043 0301 	orr.w	r3, r3, #1
   1144c:	7413      	strb	r3, [r2, #16]
}
   1144e:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   11450:	2103      	movs	r1, #3
   11452:	e7f3      	b.n	1143c <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   11454:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   11456:	2200      	movs	r2, #0
   11458:	462b      	mov	r3, r5
   1145a:	4620      	mov	r0, r4
   1145c:	4611      	mov	r1, r2
}
   1145e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   11462:	f7ff bf83 	b.w	1136c <att_handle_rsp>
   11466:	bf00      	nop
   11468:	20002dc0 	.word	0x20002dc0

0001146c <bt_att_disconnected>:
{
   1146c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1146e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   11472:	b085      	sub	sp, #20
   11474:	4604      	mov	r4, r0
	if (!att_chan->att) {
   11476:	2d00      	cmp	r5, #0
   11478:	d04d      	beq.n	11516 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1147a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   1147e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   11482:	f019 fea3 	bl	2b1cc <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   11486:	f1a4 0608 	sub.w	r6, r4, #8
   1148a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   1148e:	2200      	movs	r2, #0
   11490:	2300      	movs	r3, #0
   11492:	4638      	mov	r0, r7
   11494:	f01b fa68 	bl	2c968 <net_buf_get>
   11498:	4602      	mov	r2, r0
   1149a:	bb18      	cbnz	r0, 114e4 <bt_att_disconnected+0x78>
	if (chan->req) {
   1149c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   114a0:	b123      	cbz	r3, 114ac <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   114a2:	4601      	mov	r1, r0
   114a4:	230e      	movs	r3, #14
   114a6:	4630      	mov	r0, r6
   114a8:	f7ff ff60 	bl	1136c <att_handle_rsp>
	chan->att = NULL;
   114ac:	2300      	movs	r3, #0
   114ae:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   114b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   114b4:	2b00      	cmp	r3, #0
   114b6:	d12e      	bne.n	11516 <bt_att_disconnected+0xaa>
	att_reset(att);
   114b8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   114ba:	9803      	ldr	r0, [sp, #12]
   114bc:	2200      	movs	r2, #0
   114be:	2300      	movs	r3, #0
   114c0:	300c      	adds	r0, #12
   114c2:	f01b fa51 	bl	2c968 <net_buf_get>
   114c6:	b980      	cbnz	r0, 114ea <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   114c8:	9803      	ldr	r0, [sp, #12]
	return list->head;
   114ca:	6845      	ldr	r5, [r0, #4]
   114cc:	b985      	cbnz	r5, 114f0 <bt_att_disconnected+0x84>
	att->conn = NULL;
   114ce:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   114d0:	a903      	add	r1, sp, #12
   114d2:	4812      	ldr	r0, [pc, #72]	; (1151c <bt_att_disconnected+0xb0>)
   114d4:	f01b fff8 	bl	2d4c8 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   114d8:	6820      	ldr	r0, [r4, #0]
}
   114da:	b005      	add	sp, #20
   114dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   114e0:	f001 bbee 	b.w	12cc0 <bt_gatt_disconnected>
		net_buf_unref(buf);
   114e4:	f00f fba0 	bl	20c28 <net_buf_unref>
   114e8:	e7d1      	b.n	1148e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   114ea:	f00f fb9d 	bl	20c28 <net_buf_unref>
   114ee:	e7e4      	b.n	114ba <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   114f0:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   114f2:	686e      	ldr	r6, [r5, #4]
	return node->next;
   114f4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   114f6:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   114f8:	4295      	cmp	r5, r2
	list->tail = node;
   114fa:	bf08      	it	eq
   114fc:	6083      	streq	r3, [r0, #8]
   114fe:	b136      	cbz	r6, 1150e <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   11500:	69ab      	ldr	r3, [r5, #24]
   11502:	9300      	str	r3, [sp, #0]
   11504:	2300      	movs	r3, #0
   11506:	6800      	ldr	r0, [r0, #0]
   11508:	461a      	mov	r2, r3
   1150a:	210e      	movs	r1, #14
   1150c:	47b0      	blx	r6
		bt_att_req_free(req);
   1150e:	4628      	mov	r0, r5
   11510:	f7ff ff1a 	bl	11348 <bt_att_req_free>
   11514:	e7d8      	b.n	114c8 <bt_att_disconnected+0x5c>
}
   11516:	b005      	add	sp, #20
   11518:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1151a:	bf00      	nop
   1151c:	20000b3c 	.word	0x20000b3c

00011520 <att_timeout>:
{
   11520:	b510      	push	{r4, lr}
   11522:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   11524:	480a      	ldr	r0, [pc, #40]	; (11550 <att_timeout+0x30>)
   11526:	6803      	ldr	r3, [r0, #0]
   11528:	075b      	lsls	r3, r3, #29
{
   1152a:	b088      	sub	sp, #32
	BT_ERR("ATT Timeout");
   1152c:	d009      	beq.n	11542 <att_timeout+0x22>
   1152e:	4b09      	ldr	r3, [pc, #36]	; (11554 <att_timeout+0x34>)
   11530:	9306      	str	r3, [sp, #24]
   11532:	aa05      	add	r2, sp, #20
   11534:	2302      	movs	r3, #2
   11536:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1153a:	9301      	str	r3, [sp, #4]
   1153c:	9305      	str	r3, [sp, #20]
   1153e:	f019 fd73 	bl	2b028 <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   11542:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   11546:	b008      	add	sp, #32
   11548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1154c:	f7ff bf8e 	b.w	1146c <bt_att_disconnected>
   11550:	200009d8 	.word	0x200009d8
   11554:	00033d05 	.word	0x00033d05

00011558 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   11558:	b510      	push	{r4, lr}
   1155a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1155c:	b330      	cbz	r0, 115ac <bt_att_req_cancel+0x54>
   1155e:	b329      	cbz	r1, 115ac <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
   11560:	f7ff f81e 	bl	105a0 <att_get>
	if (!att) {
   11564:	b310      	cbz	r0, 115ac <bt_att_req_cancel+0x54>
	return list->head;
   11566:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11568:	b153      	cbz	r3, 11580 <bt_att_req_cancel+0x28>
   1156a:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
   1156e:	681b      	ldr	r3, [r3, #0]
   11570:	b10b      	cbz	r3, 11576 <bt_att_req_cancel+0x1e>
   11572:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   11576:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
   1157a:	4294      	cmp	r4, r2
   1157c:	d006      	beq.n	1158c <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1157e:	b96b      	cbnz	r3, 1159c <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   11580:	3004      	adds	r0, #4
   11582:	4621      	mov	r1, r4
   11584:	f019 fe22 	bl	2b1cc <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
   11588:	4620      	mov	r0, r4
   1158a:	e003      	b.n	11594 <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
   1158c:	4b08      	ldr	r3, [pc, #32]	; (115b0 <bt_att_req_cancel+0x58>)
   1158e:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
   11592:	4620      	mov	r0, r4
}
   11594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   11598:	f7ff bed6 	b.w	11348 <bt_att_req_free>
   1159c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   115a0:	b10a      	cbz	r2, 115a6 <bt_att_req_cancel+0x4e>
   115a2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   115a6:	4619      	mov	r1, r3
   115a8:	4613      	mov	r3, r2
   115aa:	e7e4      	b.n	11576 <bt_att_req_cancel+0x1e>
}
   115ac:	bd10      	pop	{r4, pc}
   115ae:	bf00      	nop
   115b0:	20002dc0 	.word	0x20002dc0

000115b4 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   115b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   115b6:	4c15      	ldr	r4, [pc, #84]	; (1160c <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   115b8:	4605      	mov	r5, r0
   115ba:	b140      	cbz	r0, 115ce <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   115bc:	4622      	mov	r2, r4
   115be:	f812 1b01 	ldrb.w	r1, [r2], #1
   115c2:	f019 fab3 	bl	2ab2c <bt_conn_is_peer_addr_le>
   115c6:	b1b0      	cbz	r0, 115f6 <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
   115c8:	4620      	mov	r0, r4
   115ca:	b003      	add	sp, #12
   115cc:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   115ce:	9000      	str	r0, [sp, #0]
   115d0:	4669      	mov	r1, sp
   115d2:	f8cd 0003 	str.w	r0, [sp, #3]
   115d6:	1c60      	adds	r0, r4, #1
   115d8:	f01a f8ac 	bl	2b734 <bt_addr_le_cmp>
   115dc:	2800      	cmp	r0, #0
   115de:	d0f3      	beq.n	115c8 <find_cf_cfg+0x14>
   115e0:	4669      	mov	r1, sp
   115e2:	f104 0011 	add.w	r0, r4, #17
   115e6:	9500      	str	r5, [sp, #0]
   115e8:	f8cd 5003 	str.w	r5, [sp, #3]
   115ec:	f01a f8a2 	bl	2b734 <bt_addr_le_cmp>
   115f0:	b948      	cbnz	r0, 11606 <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   115f2:	3410      	adds	r4, #16
   115f4:	e7e8      	b.n	115c8 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   115f6:	7c21      	ldrb	r1, [r4, #16]
   115f8:	f104 0211 	add.w	r2, r4, #17
   115fc:	4628      	mov	r0, r5
   115fe:	f019 fa95 	bl	2ab2c <bt_conn_is_peer_addr_le>
   11602:	2800      	cmp	r0, #0
   11604:	d1f5      	bne.n	115f2 <find_cf_cfg+0x3e>
	return NULL;
   11606:	2400      	movs	r4, #0
   11608:	e7de      	b.n	115c8 <find_cf_cfg+0x14>
   1160a:	bf00      	nop
   1160c:	20002de4 	.word	0x20002de4

00011610 <find_sc_cfg>:
{
   11610:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   11612:	4c0d      	ldr	r4, [pc, #52]	; (11648 <find_sc_cfg+0x38>)
   11614:	7823      	ldrb	r3, [r4, #0]
   11616:	4283      	cmp	r3, r0
{
   11618:	4605      	mov	r5, r0
   1161a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1161c:	d009      	beq.n	11632 <find_sc_cfg+0x22>
   1161e:	7b23      	ldrb	r3, [r4, #12]
   11620:	42ab      	cmp	r3, r5
   11622:	d10f      	bne.n	11644 <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   11624:	4809      	ldr	r0, [pc, #36]	; (1164c <find_sc_cfg+0x3c>)
   11626:	4631      	mov	r1, r6
   11628:	f01a f884 	bl	2b734 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1162c:	b950      	cbnz	r0, 11644 <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1162e:	2001      	movs	r0, #1
   11630:	e004      	b.n	1163c <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   11632:	1c60      	adds	r0, r4, #1
   11634:	f01a f87e 	bl	2b734 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   11638:	2800      	cmp	r0, #0
   1163a:	d1f0      	bne.n	1161e <find_sc_cfg+0xe>
			return &sc_cfg[i];
   1163c:	230c      	movs	r3, #12
   1163e:	fb03 4000 	mla	r0, r3, r0, r4
   11642:	e000      	b.n	11646 <find_sc_cfg+0x36>
	return NULL;
   11644:	2000      	movs	r0, #0
}
   11646:	bd70      	pop	{r4, r5, r6, pc}
   11648:	20004a5a 	.word	0x20004a5a
   1164c:	20004a67 	.word	0x20004a67

00011650 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   11650:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11652:	4c15      	ldr	r4, [pc, #84]	; (116a8 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   11654:	4605      	mov	r5, r0
   11656:	b140      	cbz	r0, 1166a <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   11658:	4622      	mov	r2, r4
   1165a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1165e:	f019 fa65 	bl	2ab2c <bt_conn_is_peer_addr_le>
   11662:	b1b0      	cbz	r0, 11692 <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
   11664:	4620      	mov	r0, r4
   11666:	b003      	add	sp, #12
   11668:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1166a:	9000      	str	r0, [sp, #0]
   1166c:	4669      	mov	r1, sp
   1166e:	f8cd 0003 	str.w	r0, [sp, #3]
   11672:	1c60      	adds	r0, r4, #1
   11674:	f01a f85e 	bl	2b734 <bt_addr_le_cmp>
   11678:	2800      	cmp	r0, #0
   1167a:	d0f3      	beq.n	11664 <gatt_sub_find+0x14>
   1167c:	4669      	mov	r1, sp
   1167e:	f104 0011 	add.w	r0, r4, #17
   11682:	9500      	str	r5, [sp, #0]
   11684:	f8cd 5003 	str.w	r5, [sp, #3]
   11688:	f01a f854 	bl	2b734 <bt_addr_le_cmp>
   1168c:	b948      	cbnz	r0, 116a2 <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
   1168e:	3410      	adds	r4, #16
   11690:	e7e8      	b.n	11664 <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   11692:	7c21      	ldrb	r1, [r4, #16]
   11694:	f104 0211 	add.w	r2, r4, #17
   11698:	4628      	mov	r0, r5
   1169a:	f019 fa47 	bl	2ab2c <bt_conn_is_peer_addr_le>
   1169e:	2800      	cmp	r0, #0
   116a0:	d1f5      	bne.n	1168e <gatt_sub_find+0x3e>
	return NULL;
   116a2:	2400      	movs	r4, #0
   116a4:	e7de      	b.n	11664 <gatt_sub_find+0x14>
   116a6:	bf00      	nop
   116a8:	20002e24 	.word	0x20002e24

000116ac <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   116ac:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   116ae:	2312      	movs	r3, #18
{
   116b0:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   116b2:	2104      	movs	r1, #4
   116b4:	e9cd 3100 	strd	r3, r1, [sp]
   116b8:	4b03      	ldr	r3, [pc, #12]	; (116c8 <gatt_write_ccc+0x1c>)
   116ba:	4904      	ldr	r1, [pc, #16]	; (116cc <gatt_write_ccc+0x20>)
   116bc:	f01a f897 	bl	2b7ee <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   116c0:	b003      	add	sp, #12
   116c2:	f85d fb04 	ldr.w	pc, [sp], #4
   116c6:	bf00      	nop
   116c8:	0002ba7b 	.word	0x0002ba7b
   116cc:	0002baa5 	.word	0x0002baa5

000116d0 <bt_gatt_attr_write_ccc>:
{
   116d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   116d4:	b089      	sub	sp, #36	; 0x24
   116d6:	461f      	mov	r7, r3
   116d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   116dc:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   116e0:	4604      	mov	r4, r0
   116e2:	4688      	mov	r8, r1
	if (offset) {
   116e4:	2b00      	cmp	r3, #0
   116e6:	d153      	bne.n	11790 <bt_gatt_attr_write_ccc+0xc0>
	if (!len || len > sizeof(uint16_t)) {
   116e8:	1e7b      	subs	r3, r7, #1
   116ea:	2b01      	cmp	r3, #1
   116ec:	d853      	bhi.n	11796 <bt_gatt_attr_write_ccc+0xc6>
		value = *(uint8_t *)buf;
   116ee:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   116f0:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   116f2:	4649      	mov	r1, r9
   116f4:	bf14      	ite	ne
   116f6:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   116f8:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   116fa:	f01a f81e 	bl	2b73a <find_ccc_cfg>
	if (!cfg) {
   116fe:	4605      	mov	r5, r0
   11700:	bb10      	cbnz	r0, 11748 <bt_gatt_attr_write_ccc+0x78>
		if (!value) {
   11702:	b91e      	cbnz	r6, 1170c <bt_gatt_attr_write_ccc+0x3c>
			return len;
   11704:	4638      	mov	r0, r7
}
   11706:	b009      	add	sp, #36	; 0x24
   11708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1170c:	4649      	mov	r1, r9
   1170e:	f01a f814 	bl	2b73a <find_ccc_cfg>
		if (!cfg) {
   11712:	4605      	mov	r5, r0
   11714:	b988      	cbnz	r0, 1173a <bt_gatt_attr_write_ccc+0x6a>
			BT_WARN("No space to store CCC cfg");
   11716:	4821      	ldr	r0, [pc, #132]	; (1179c <bt_gatt_attr_write_ccc+0xcc>)
   11718:	6803      	ldr	r3, [r0, #0]
   1171a:	f013 0f06 	tst.w	r3, #6
   1171e:	d009      	beq.n	11734 <bt_gatt_attr_write_ccc+0x64>
   11720:	4b1f      	ldr	r3, [pc, #124]	; (117a0 <bt_gatt_attr_write_ccc+0xd0>)
   11722:	9306      	str	r3, [sp, #24]
   11724:	aa05      	add	r2, sp, #20
   11726:	2302      	movs	r3, #2
   11728:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1172c:	9301      	str	r3, [sp, #4]
   1172e:	9305      	str	r3, [sp, #20]
   11730:	f01a f933 	bl	2b99a <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   11734:	f06f 0010 	mvn.w	r0, #16
   11738:	e7e5      	b.n	11706 <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1173a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1173e:	3001      	adds	r0, #1
   11740:	f01a f827 	bl	2b792 <bt_addr_le_copy>
		cfg->id = conn->id;
   11744:	7a23      	ldrb	r3, [r4, #8]
   11746:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   11748:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1174c:	b9a3      	cbnz	r3, 11778 <bt_gatt_attr_write_ccc+0xa8>
	if (cfg->value != ccc->value) {
   1174e:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   11752:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   11754:	42b3      	cmp	r3, r6
   11756:	d003      	beq.n	11760 <bt_gatt_attr_write_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   11758:	4649      	mov	r1, r9
   1175a:	4640      	mov	r0, r8
   1175c:	f019 ff67 	bl	2b62e <gatt_ccc_changed>
	if (!value) {
   11760:	2e00      	cmp	r6, #0
   11762:	d1cf      	bne.n	11704 <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11764:	a902      	add	r1, sp, #8
   11766:	1c68      	adds	r0, r5, #1
   11768:	9602      	str	r6, [sp, #8]
   1176a:	f8cd 600b 	str.w	r6, [sp, #11]
   1176e:	f01a f810 	bl	2b792 <bt_addr_le_copy>
	cfg->id = 0U;
   11772:	702e      	strb	r6, [r5, #0]
	cfg->value = 0U;
   11774:	812e      	strh	r6, [r5, #8]
}
   11776:	e7c5      	b.n	11704 <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   11778:	4632      	mov	r2, r6
   1177a:	4641      	mov	r1, r8
   1177c:	4620      	mov	r0, r4
   1177e:	4798      	blx	r3
		if (write < 0) {
   11780:	2800      	cmp	r0, #0
   11782:	dbc0      	blt.n	11706 <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
   11784:	1e44      	subs	r4, r0, #1
   11786:	2c01      	cmp	r4, #1
   11788:	d9e1      	bls.n	1174e <bt_gatt_attr_write_ccc+0x7e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1178a:	f06f 000d 	mvn.w	r0, #13
   1178e:	e7ba      	b.n	11706 <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11790:	f06f 0006 	mvn.w	r0, #6
   11794:	e7b7      	b.n	11706 <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11796:	f06f 000c 	mvn.w	r0, #12
   1179a:	e7b4      	b.n	11706 <bt_gatt_attr_write_ccc+0x36>
   1179c:	20000a44 	.word	0x20000a44
   117a0:	00033d18 	.word	0x00033d18

000117a4 <sc_save>:
{
   117a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117a8:	b08a      	sub	sp, #40	; 0x28
   117aa:	4680      	mov	r8, r0
   117ac:	460f      	mov	r7, r1
   117ae:	4616      	mov	r6, r2
   117b0:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   117b2:	f7ff ff2d 	bl	11610 <find_sc_cfg>
	if (!cfg) {
   117b6:	4604      	mov	r4, r0
   117b8:	b9e8      	cbnz	r0, 117f6 <sc_save+0x52>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   117ba:	a902      	add	r1, sp, #8
   117bc:	9002      	str	r0, [sp, #8]
   117be:	f8cd 000b 	str.w	r0, [sp, #11]
   117c2:	f7ff ff25 	bl	11610 <find_sc_cfg>
		if (!cfg) {
   117c6:	4604      	mov	r4, r0
   117c8:	b980      	cbnz	r0, 117ec <sc_save+0x48>
			BT_ERR("unable to save SC: no cfg left");
   117ca:	4812      	ldr	r0, [pc, #72]	; (11814 <sc_save+0x70>)
   117cc:	6803      	ldr	r3, [r0, #0]
   117ce:	075b      	lsls	r3, r3, #29
   117d0:	d009      	beq.n	117e6 <sc_save+0x42>
   117d2:	4b11      	ldr	r3, [pc, #68]	; (11818 <sc_save+0x74>)
   117d4:	9308      	str	r3, [sp, #32]
   117d6:	aa07      	add	r2, sp, #28
   117d8:	2302      	movs	r3, #2
   117da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   117de:	9301      	str	r3, [sp, #4]
   117e0:	9307      	str	r3, [sp, #28]
   117e2:	f01a f8da 	bl	2b99a <z_log_msg2_static_create.constprop.0>
}
   117e6:	b00a      	add	sp, #40	; 0x28
   117e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   117ec:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   117f0:	4639      	mov	r1, r7
   117f2:	f019 ffce 	bl	2b792 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   117f6:	8922      	ldrh	r2, [r4, #8]
   117f8:	8963      	ldrh	r3, [r4, #10]
   117fa:	b91a      	cbnz	r2, 11804 <sc_save+0x60>
   117fc:	b923      	cbnz	r3, 11808 <sc_save+0x64>
		cfg->data.start = start;
   117fe:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   11800:	8165      	strh	r5, [r4, #10]
   11802:	e7f0      	b.n	117e6 <sc_save+0x42>
	if (new_start >= *start && new_end <= *end) {
   11804:	4296      	cmp	r6, r2
   11806:	d302      	bcc.n	1180e <sc_save+0x6a>
   11808:	429d      	cmp	r5, r3
   1180a:	d8f9      	bhi.n	11800 <sc_save+0x5c>
   1180c:	e7eb      	b.n	117e6 <sc_save+0x42>
		*start = new_start;
   1180e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   11810:	e7fa      	b.n	11808 <sc_save+0x64>
   11812:	bf00      	nop
   11814:	20000a44 	.word	0x20000a44
   11818:	00033d32 	.word	0x00033d32

0001181c <cf_write>:
{
   1181c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11820:	b088      	sub	sp, #32
   11822:	4698      	mov	r8, r3
   11824:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   11828:	2b01      	cmp	r3, #1
{
   1182a:	4606      	mov	r6, r0
   1182c:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1182e:	d843      	bhi.n	118b8 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
   11830:	4443      	add	r3, r8
   11832:	2b01      	cmp	r3, #1
   11834:	4645      	mov	r5, r8
   11836:	dc42      	bgt.n	118be <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
   11838:	f7ff febc 	bl	115b4 <find_cf_cfg>
	if (!cfg) {
   1183c:	4604      	mov	r4, r0
   1183e:	b918      	cbnz	r0, 11848 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   11840:	f7ff feb8 	bl	115b4 <find_cf_cfg>
	if (!cfg) {
   11844:	4604      	mov	r4, r0
   11846:	b198      	cbz	r0, 11870 <cf_write+0x54>
{
   11848:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1184a:	f1b8 0f00 	cmp.w	r8, #0
   1184e:	d121      	bne.n	11894 <cf_write+0x78>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11850:	f106 0188 	add.w	r1, r6, #136	; 0x88
   11854:	1c60      	adds	r0, r4, #1
   11856:	f019 ff9c 	bl	2b792 <bt_addr_le_copy>
	cfg->id = conn->id;
   1185a:	4620      	mov	r0, r4
   1185c:	7a33      	ldrb	r3, [r6, #8]
   1185e:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   11862:	2100      	movs	r1, #0
   11864:	f01a f8df 	bl	2ba26 <atomic_set_bit>
}
   11868:	4628      	mov	r0, r5
   1186a:	b008      	add	sp, #32
   1186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No space to store Client Supported Features");
   11870:	4816      	ldr	r0, [pc, #88]	; (118cc <cf_write+0xb0>)
   11872:	6803      	ldr	r3, [r0, #0]
   11874:	f013 0f06 	tst.w	r3, #6
   11878:	d009      	beq.n	1188e <cf_write+0x72>
   1187a:	4b15      	ldr	r3, [pc, #84]	; (118d0 <cf_write+0xb4>)
   1187c:	9306      	str	r3, [sp, #24]
   1187e:	aa05      	add	r2, sp, #20
   11880:	2302      	movs	r3, #2
   11882:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11886:	9301      	str	r3, [sp, #4]
   11888:	9305      	str	r3, [sp, #20]
   1188a:	f01a f886 	bl	2b99a <z_log_msg2_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1188e:	f06f 0510 	mvn.w	r5, #16
   11892:	e7e9      	b.n	11868 <cf_write+0x4c>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   11894:	7a20      	ldrb	r0, [r4, #8]
   11896:	fa20 f301 	lsr.w	r3, r0, r1
   1189a:	07da      	lsls	r2, r3, #31
   1189c:	d503      	bpl.n	118a6 <cf_write+0x8a>
		    !(value[i / 8] & BIT(i % 8))) {
   1189e:	783b      	ldrb	r3, [r7, #0]
   118a0:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   118a2:	07db      	lsls	r3, r3, #31
   118a4:	d50e      	bpl.n	118c4 <cf_write+0xa8>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   118a6:	3101      	adds	r1, #1
   118a8:	2903      	cmp	r1, #3
   118aa:	d1ce      	bne.n	1184a <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   118ac:	783b      	ldrb	r3, [r7, #0]
   118ae:	f003 0307 	and.w	r3, r3, #7
   118b2:	4318      	orrs	r0, r3
   118b4:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   118b6:	e7cb      	b.n	11850 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   118b8:	f06f 0506 	mvn.w	r5, #6
   118bc:	e7d4      	b.n	11868 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   118be:	f06f 050c 	mvn.w	r5, #12
   118c2:	e7d1      	b.n	11868 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   118c4:	f06f 0512 	mvn.w	r5, #18
   118c8:	e7ce      	b.n	11868 <cf_write+0x4c>
   118ca:	bf00      	nop
   118cc:	20000a44 	.word	0x20000a44
   118d0:	00033d51 	.word	0x00033d51

000118d4 <sc_indicate_rsp>:
{
   118d4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   118d6:	4913      	ldr	r1, [pc, #76]	; (11924 <sc_indicate_rsp+0x50>)
   118d8:	f3bf 8f5b 	dmb	ish
   118dc:	4604      	mov	r4, r0
   118de:	e851 3f00 	ldrex	r3, [r1]
   118e2:	f023 0302 	bic.w	r3, r3, #2
   118e6:	e841 3200 	strex	r2, r3, [r1]
   118ea:	2a00      	cmp	r2, #0
   118ec:	d1f7      	bne.n	118de <sc_indicate_rsp+0xa>
   118ee:	f3bf 8f5b 	dmb	ish
   118f2:	4608      	mov	r0, r1
   118f4:	f019 fec3 	bl	2b67e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   118f8:	07c2      	lsls	r2, r0, #31
   118fa:	d505      	bpl.n	11908 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
   118fc:	2200      	movs	r2, #0
   118fe:	2300      	movs	r3, #0
   11900:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   11904:	f013 fffe 	bl	25904 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   11908:	4620      	mov	r0, r4
   1190a:	f7ff fe53 	bl	115b4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1190e:	b140      	cbz	r0, 11922 <sc_indicate_rsp+0x4e>
   11910:	7a03      	ldrb	r3, [r0, #8]
   11912:	07db      	lsls	r3, r3, #31
   11914:	d505      	bpl.n	11922 <sc_indicate_rsp+0x4e>
}
   11916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1191a:	2100      	movs	r1, #0
   1191c:	300c      	adds	r0, #12
   1191e:	f01a b882 	b.w	2ba26 <atomic_set_bit>
}
   11922:	bd10      	pop	{r4, pc}
   11924:	20001d48 	.word	0x20001d48

00011928 <disconnected_cb>:
{
   11928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1192c:	4b2b      	ldr	r3, [pc, #172]	; (119dc <disconnected_cb+0xb4>)
{
   1192e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   11930:	6882      	ldr	r2, [r0, #8]
   11932:	429a      	cmp	r2, r3
{
   11934:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11936:	d12f      	bne.n	11998 <disconnected_cb+0x70>
	ccc = attr->user_data;
   11938:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   1193a:	8aab      	ldrh	r3, [r5, #20]
   1193c:	b363      	cbz	r3, 11998 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
   1193e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 119e0 <disconnected_cb+0xb8>
   11942:	1c6c      	adds	r4, r5, #1
   11944:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
   11948:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1194c:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   11950:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   11954:	b19b      	cbz	r3, 1197e <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11956:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1195a:	4622      	mov	r2, r4
   1195c:	4630      	mov	r0, r6
   1195e:	f019 f8e5 	bl	2ab2c <bt_conn_is_peer_addr_le>
   11962:	b9e8      	cbnz	r0, 119a0 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   11964:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   11968:	4621      	mov	r1, r4
   1196a:	f7fe f841 	bl	f9f0 <bt_conn_lookup_addr_le>
			if (tmp) {
   1196e:	b130      	cbz	r0, 1197e <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   11970:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   11972:	2b07      	cmp	r3, #7
   11974:	bf08      	it	eq
   11976:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   1197a:	f019 f85e 	bl	2aa3a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1197e:	340a      	adds	r4, #10
   11980:	4554      	cmp	r4, sl
   11982:	d1e5      	bne.n	11950 <disconnected_cb+0x28>
	if (!value_used) {
   11984:	f1b8 0f00 	cmp.w	r8, #0
   11988:	d106      	bne.n	11998 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   1198a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1198c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   11990:	b113      	cbz	r3, 11998 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   11992:	4641      	mov	r1, r8
   11994:	4638      	mov	r0, r7
   11996:	4798      	blx	r3
}
   11998:	2001      	movs	r0, #1
   1199a:	b003      	add	sp, #12
   1199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   119a0:	7a30      	ldrb	r0, [r6, #8]
   119a2:	4649      	mov	r1, r9
   119a4:	f018 fedc 	bl	2a760 <bt_addr_le_is_bonded>
   119a8:	b990      	cbnz	r0, 119d0 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
   119aa:	455d      	cmp	r5, fp
   119ac:	d102      	bne.n	119b4 <disconnected_cb+0x8c>
					sc_clear(conn);
   119ae:	4630      	mov	r0, r6
   119b0:	f01a f8b3 	bl	2bb1a <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   119b4:	2300      	movs	r3, #0
   119b6:	4669      	mov	r1, sp
   119b8:	4620      	mov	r0, r4
   119ba:	9300      	str	r3, [sp, #0]
   119bc:	f8cd 3003 	str.w	r3, [sp, #3]
   119c0:	f019 fee7 	bl	2b792 <bt_addr_le_copy>
	cfg->id = 0U;
   119c4:	2300      	movs	r3, #0
   119c6:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   119ca:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   119ce:	e7d6      	b.n	1197e <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   119d0:	4649      	mov	r1, r9
   119d2:	4620      	mov	r0, r4
   119d4:	f019 fedd 	bl	2b792 <bt_addr_le_copy>
   119d8:	e7d1      	b.n	1197e <disconnected_cb+0x56>
   119da:	bf00      	nop
   119dc:	000116d1 	.word	0x000116d1
   119e0:	200003d8 	.word	0x200003d8

000119e4 <bt_gatt_init>:
{
   119e4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   119e6:	4b20      	ldr	r3, [pc, #128]	; (11a68 <bt_gatt_init+0x84>)
   119e8:	f3bf 8f5b 	dmb	ish
   119ec:	2201      	movs	r2, #1
   119ee:	e853 1f00 	ldrex	r1, [r3]
   119f2:	2900      	cmp	r1, #0
   119f4:	d103      	bne.n	119fe <bt_gatt_init+0x1a>
   119f6:	e843 2000 	strex	r0, r2, [r3]
   119fa:	2800      	cmp	r0, #0
   119fc:	d1f7      	bne.n	119ee <bt_gatt_init+0xa>
   119fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   11a02:	d130      	bne.n	11a66 <bt_gatt_init+0x82>
   11a04:	f3bf 8f5b 	dmb	ish
   11a08:	4b18      	ldr	r3, [pc, #96]	; (11a6c <bt_gatt_init+0x88>)
   11a0a:	e853 1f00 	ldrex	r1, [r3]
   11a0e:	2900      	cmp	r1, #0
   11a10:	d103      	bne.n	11a1a <bt_gatt_init+0x36>
   11a12:	e843 2000 	strex	r0, r2, [r3]
   11a16:	2800      	cmp	r0, #0
   11a18:	d1f7      	bne.n	11a0a <bt_gatt_init+0x26>
   11a1a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   11a1e:	d108      	bne.n	11a32 <bt_gatt_init+0x4e>
   11a20:	4913      	ldr	r1, [pc, #76]	; (11a70 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11a22:	4a14      	ldr	r2, [pc, #80]	; (11a74 <bt_gatt_init+0x90>)
   11a24:	880b      	ldrh	r3, [r1, #0]
   11a26:	4c14      	ldr	r4, [pc, #80]	; (11a78 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   11a28:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11a2a:	42a2      	cmp	r2, r4
   11a2c:	d315      	bcc.n	11a5a <bt_gatt_init+0x76>
   11a2e:	b100      	cbz	r0, 11a32 <bt_gatt_init+0x4e>
   11a30:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   11a32:	4b12      	ldr	r3, [pc, #72]	; (11a7c <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   11a34:	4912      	ldr	r1, [pc, #72]	; (11a80 <bt_gatt_init+0x9c>)
   11a36:	4813      	ldr	r0, [pc, #76]	; (11a84 <bt_gatt_init+0xa0>)
   11a38:	2200      	movs	r2, #0
	list->tail = NULL;
   11a3a:	e9c3 2200 	strd	r2, r2, [r3]
   11a3e:	f01b ff12 	bl	2d866 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   11a42:	4810      	ldr	r0, [pc, #64]	; (11a84 <bt_gatt_init+0xa0>)
   11a44:	f44f 72a4 	mov.w	r2, #328	; 0x148
   11a48:	2300      	movs	r3, #0
   11a4a:	f013 ff27 	bl	2589c <k_work_schedule>
}
   11a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   11a52:	490d      	ldr	r1, [pc, #52]	; (11a88 <bt_gatt_init+0xa4>)
   11a54:	480d      	ldr	r0, [pc, #52]	; (11a8c <bt_gatt_init+0xa8>)
   11a56:	f01b bf06 	b.w	2d866 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   11a5a:	6850      	ldr	r0, [r2, #4]
   11a5c:	4403      	add	r3, r0
   11a5e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11a60:	3208      	adds	r2, #8
   11a62:	2001      	movs	r0, #1
   11a64:	e7e1      	b.n	11a2a <bt_gatt_init+0x46>
}
   11a66:	bd10      	pop	{r4, pc}
   11a68:	20002e04 	.word	0x20002e04
   11a6c:	20002e20 	.word	0x20002e20
   11a70:	20004a58 	.word	0x20004a58
   11a74:	0002e210 	.word	0x0002e210
   11a78:	0002e230 	.word	0x0002e230
   11a7c:	20002ddc 	.word	0x20002ddc
   11a80:	0002bdc1 	.word	0x0002bdc1
   11a84:	20001ca0 	.word	0x20001ca0
   11a88:	00011e29 	.word	0x00011e29
   11a8c:	20001d18 	.word	0x20001d18

00011a90 <bt_gatt_attr_get_handle>:
{
   11a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   11a94:	4603      	mov	r3, r0
   11a96:	b148      	cbz	r0, 11aac <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   11a98:	8a00      	ldrh	r0, [r0, #16]
   11a9a:	b938      	cbnz	r0, 11aac <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11a9c:	4912      	ldr	r1, [pc, #72]	; (11ae8 <bt_gatt_attr_get_handle+0x58>)
   11a9e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 11aec <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   11aa2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11aa4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11aa8:	4571      	cmp	r1, lr
   11aaa:	d301      	bcc.n	11ab0 <bt_gatt_attr_get_handle+0x20>
}
   11aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11ab0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   11ab4:	42bb      	cmp	r3, r7
   11ab6:	d304      	bcc.n	11ac2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11ab8:	fb0c 7206 	mla	r2, ip, r6, r7
   11abc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   11abe:	4293      	cmp	r3, r2
   11ac0:	d90e      	bls.n	11ae0 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   11ac2:	19a2      	adds	r2, r4, r6
   11ac4:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11ac6:	3108      	adds	r1, #8
   11ac8:	4614      	mov	r4, r2
   11aca:	e7ed      	b.n	11aa8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   11acc:	fb0c 7805 	mla	r8, ip, r5, r7
   11ad0:	4543      	cmp	r3, r8
   11ad2:	d007      	beq.n	11ae4 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   11ad4:	3501      	adds	r5, #1
   11ad6:	1962      	adds	r2, r4, r5
   11ad8:	42b5      	cmp	r5, r6
   11ada:	b292      	uxth	r2, r2
   11adc:	d1f6      	bne.n	11acc <bt_gatt_attr_get_handle+0x3c>
   11ade:	e7f2      	b.n	11ac6 <bt_gatt_attr_get_handle+0x36>
   11ae0:	2500      	movs	r5, #0
   11ae2:	e7f8      	b.n	11ad6 <bt_gatt_attr_get_handle+0x46>
   11ae4:	4610      	mov	r0, r2
   11ae6:	e7e1      	b.n	11aac <bt_gatt_attr_get_handle+0x1c>
   11ae8:	0002e210 	.word	0x0002e210
   11aec:	0002e230 	.word	0x0002e230

00011af0 <bt_gatt_foreach_attr_type>:
{
   11af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11af8:	9100      	str	r1, [sp, #0]
   11afa:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   11afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b00:	2d00      	cmp	r5, #0
   11b02:	bf08      	it	eq
   11b04:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   11b06:	4b24      	ldr	r3, [pc, #144]	; (11b98 <bt_gatt_foreach_attr_type+0xa8>)
   11b08:	881b      	ldrh	r3, [r3, #0]
   11b0a:	4283      	cmp	r3, r0
{
   11b0c:	4607      	mov	r7, r0
   11b0e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   11b10:	d23c      	bcs.n	11b8c <bt_gatt_foreach_attr_type+0x9c>
}
   11b12:	b003      	add	sp, #12
   11b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   11b18:	6873      	ldr	r3, [r6, #4]
   11b1a:	4423      	add	r3, r4
   11b1c:	42bb      	cmp	r3, r7
   11b1e:	d232      	bcs.n	11b86 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   11b20:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11b22:	3608      	adds	r6, #8
   11b24:	4b1d      	ldr	r3, [pc, #116]	; (11b9c <bt_gatt_foreach_attr_type+0xac>)
   11b26:	429e      	cmp	r6, r3
   11b28:	d3f6      	bcc.n	11b18 <bt_gatt_foreach_attr_type+0x28>
   11b2a:	e7f2      	b.n	11b12 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   11b2c:	5889      	ldr	r1, [r1, r2]
   11b2e:	9301      	str	r3, [sp, #4]
   11b30:	4640      	mov	r0, r8
   11b32:	f018 fcdb 	bl	2a4ec <bt_uuid_cmp>
   11b36:	9b01      	ldr	r3, [sp, #4]
   11b38:	b190      	cbz	r0, 11b60 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   11b3a:	3401      	adds	r4, #1
   11b3c:	f10a 0a01 	add.w	sl, sl, #1
   11b40:	b2a4      	uxth	r4, r4
   11b42:	6873      	ldr	r3, [r6, #4]
   11b44:	4553      	cmp	r3, sl
   11b46:	d9ec      	bls.n	11b22 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   11b48:	9b00      	ldr	r3, [sp, #0]
   11b4a:	429c      	cmp	r4, r3
   11b4c:	d8e1      	bhi.n	11b12 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   11b4e:	42bc      	cmp	r4, r7
   11b50:	d3f3      	bcc.n	11b3a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11b52:	6831      	ldr	r1, [r6, #0]
   11b54:	fb0b f20a 	mul.w	r2, fp, sl
   11b58:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   11b5a:	f1b8 0f00 	cmp.w	r8, #0
   11b5e:	d1e5      	bne.n	11b2c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   11b60:	f1b9 0f00 	cmp.w	r9, #0
   11b64:	d10b      	bne.n	11b7e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   11b66:	3d01      	subs	r5, #1
   11b68:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   11b6a:	4618      	mov	r0, r3
   11b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b70:	4621      	mov	r1, r4
   11b72:	4798      	blx	r3
	if (!*num_matches) {
   11b74:	2d00      	cmp	r5, #0
   11b76:	d0cc      	beq.n	11b12 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11b78:	2800      	cmp	r0, #0
   11b7a:	d1de      	bne.n	11b3a <bt_gatt_foreach_attr_type+0x4a>
   11b7c:	e7c9      	b.n	11b12 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   11b7e:	68da      	ldr	r2, [r3, #12]
   11b80:	4591      	cmp	r9, r2
   11b82:	d1da      	bne.n	11b3a <bt_gatt_foreach_attr_type+0x4a>
   11b84:	e7ef      	b.n	11b66 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   11b86:	f04f 0a00 	mov.w	sl, #0
   11b8a:	e7da      	b.n	11b42 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11b8c:	4e04      	ldr	r6, [pc, #16]	; (11ba0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   11b8e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11b90:	f04f 0b14 	mov.w	fp, #20
   11b94:	e7c6      	b.n	11b24 <bt_gatt_foreach_attr_type+0x34>
   11b96:	bf00      	nop
   11b98:	20004a58 	.word	0x20004a58
   11b9c:	0002e230 	.word	0x0002e230
   11ba0:	0002e210 	.word	0x0002e210

00011ba4 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   11ba4:	b510      	push	{r4, lr}
   11ba6:	b0d0      	sub	sp, #320	; 0x140
	uint8_t key[16] = {};
   11ba8:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11baa:	aa24      	add	r2, sp, #144	; 0x90
   11bac:	a902      	add	r1, sp, #8
   11bae:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t key[16] = {};
   11bb0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   11bb4:	e9cd 4404 	strd	r4, r4, [sp, #16]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11bb8:	f018 f943 	bl	29e42 <tc_cmac_setup>
   11bbc:	b978      	cbnz	r0, 11bde <db_hash_gen.constprop.0+0x3a>
		BT_ERR("Unable to setup AES CMAC");
   11bbe:	481e      	ldr	r0, [pc, #120]	; (11c38 <db_hash_gen.constprop.0+0x94>)
   11bc0:	6803      	ldr	r3, [r0, #0]
   11bc2:	075a      	lsls	r2, r3, #29
   11bc4:	d009      	beq.n	11bda <db_hash_gen.constprop.0+0x36>
   11bc6:	4b1d      	ldr	r3, [pc, #116]	; (11c3c <db_hash_gen.constprop.0+0x98>)
		BT_ERR("Unable to calculate hash");
   11bc8:	930a      	str	r3, [sp, #40]	; 0x28
   11bca:	aa09      	add	r2, sp, #36	; 0x24
   11bcc:	2302      	movs	r3, #2
   11bce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11bd2:	9301      	str	r3, [sp, #4]
   11bd4:	9309      	str	r3, [sp, #36]	; 0x24
   11bd6:	f019 fee0 	bl	2b99a <z_log_msg2_static_create.constprop.0>
}
   11bda:	b050      	add	sp, #320	; 0x140
   11bdc:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   11bde:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11be2:	2001      	movs	r0, #1
   11be4:	4a16      	ldr	r2, [pc, #88]	; (11c40 <db_hash_gen.constprop.0+0x9c>)
   11be6:	ab0c      	add	r3, sp, #48	; 0x30
   11be8:	f01a f8df 	bl	2bdaa <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   11bec:	4815      	ldr	r0, [pc, #84]	; (11c44 <db_hash_gen.constprop.0+0xa0>)
   11bee:	a90c      	add	r1, sp, #48	; 0x30
   11bf0:	f018 f9bd 	bl	29f6e <tc_cmac_final>
   11bf4:	b928      	cbnz	r0, 11c02 <db_hash_gen.constprop.0+0x5e>
		BT_ERR("Unable to calculate hash");
   11bf6:	4810      	ldr	r0, [pc, #64]	; (11c38 <db_hash_gen.constprop.0+0x94>)
   11bf8:	6803      	ldr	r3, [r0, #0]
   11bfa:	075b      	lsls	r3, r3, #29
   11bfc:	d0ed      	beq.n	11bda <db_hash_gen.constprop.0+0x36>
   11bfe:	4b12      	ldr	r3, [pc, #72]	; (11c48 <db_hash_gen.constprop.0+0xa4>)
   11c00:	e7e2      	b.n	11bc8 <db_hash_gen.constprop.0+0x24>
   11c02:	4b10      	ldr	r3, [pc, #64]	; (11c44 <db_hash_gen.constprop.0+0xa0>)
   11c04:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   11c08:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   11c0a:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   11c0c:	7810      	ldrb	r0, [r2, #0]
   11c0e:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   11c12:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   11c14:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   11c18:	d1f6      	bne.n	11c08 <db_hash_gen.constprop.0+0x64>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11c1a:	f3bf 8f5b 	dmb	ish
   11c1e:	4b0b      	ldr	r3, [pc, #44]	; (11c4c <db_hash_gen.constprop.0+0xa8>)
   11c20:	e853 2f00 	ldrex	r2, [r3]
   11c24:	f042 0204 	orr.w	r2, r2, #4
   11c28:	e843 2100 	strex	r1, r2, [r3]
   11c2c:	2900      	cmp	r1, #0
   11c2e:	d1f7      	bne.n	11c20 <db_hash_gen.constprop.0+0x7c>
   11c30:	f3bf 8f5b 	dmb	ish
   11c34:	e7d1      	b.n	11bda <db_hash_gen.constprop.0+0x36>
   11c36:	bf00      	nop
   11c38:	20000a44 	.word	0x20000a44
   11c3c:	00033d7d 	.word	0x00033d7d
   11c40:	0002b68b 	.word	0x0002b68b
   11c44:	20001c90 	.word	0x20001c90
   11c48:	00033d96 	.word	0x00033d96
   11c4c:	20001d48 	.word	0x20001d48

00011c50 <gatt_indicate>:
{
   11c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c54:	4615      	mov	r5, r2
   11c56:	b088      	sub	sp, #32
   11c58:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   11c5a:	2214      	movs	r2, #20
   11c5c:	6869      	ldr	r1, [r5, #4]
{
   11c5e:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   11c60:	f01a f8b0 	bl	2bdc4 <bt_gatt_check_perm>
   11c64:	4607      	mov	r7, r0
   11c66:	b188      	cbz	r0, 11c8c <gatt_indicate+0x3c>
		BT_WARN("Link is not encrypted");
   11c68:	482f      	ldr	r0, [pc, #188]	; (11d28 <gatt_indicate+0xd8>)
   11c6a:	6803      	ldr	r3, [r0, #0]
   11c6c:	f013 0f06 	tst.w	r3, #6
   11c70:	d009      	beq.n	11c86 <gatt_indicate+0x36>
   11c72:	4b2e      	ldr	r3, [pc, #184]	; (11d2c <gatt_indicate+0xdc>)
   11c74:	9306      	str	r3, [sp, #24]
   11c76:	aa05      	add	r2, sp, #20
   11c78:	2302      	movs	r3, #2
   11c7a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11c7e:	9301      	str	r3, [sp, #4]
   11c80:	9305      	str	r3, [sp, #20]
   11c82:	f019 fe8a 	bl	2b99a <z_log_msg2_static_create.constprop.0>
		return -EPERM;
   11c86:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11c8a:	e00a      	b.n	11ca2 <gatt_indicate+0x52>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11c8c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   11c90:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   11c92:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11c94:	f7ff fb36 	bl	11304 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   11c98:	3602      	adds	r6, #2
	if (!req) {
   11c9a:	4604      	mov	r4, r0
   11c9c:	b928      	cbnz	r0, 11caa <gatt_indicate+0x5a>
		return -ENOMEM;
   11c9e:	f06f 050b 	mvn.w	r5, #11
}
   11ca2:	4628      	mov	r0, r5
   11ca4:	b008      	add	sp, #32
   11ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   11caa:	4b21      	ldr	r3, [pc, #132]	; (11d30 <gatt_indicate+0xe0>)
	req->len = len;
   11cac:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   11cae:	211d      	movs	r1, #29
   11cb0:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   11cb2:	60c7      	str	r7, [r0, #12]
	req->func = func;
   11cb4:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   11cb6:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   11cb8:	4632      	mov	r2, r6
   11cba:	4640      	mov	r0, r8
   11cbc:	f7ff f884 	bl	10dc8 <bt_att_create_pdu>
	if (!buf) {
   11cc0:	4606      	mov	r6, r0
   11cc2:	b990      	cbnz	r0, 11cea <gatt_indicate+0x9a>
		BT_WARN("No buffer available to send indication");
   11cc4:	4818      	ldr	r0, [pc, #96]	; (11d28 <gatt_indicate+0xd8>)
   11cc6:	6803      	ldr	r3, [r0, #0]
   11cc8:	f013 0f06 	tst.w	r3, #6
   11ccc:	d009      	beq.n	11ce2 <gatt_indicate+0x92>
   11cce:	4b19      	ldr	r3, [pc, #100]	; (11d34 <gatt_indicate+0xe4>)
   11cd0:	9306      	str	r3, [sp, #24]
   11cd2:	aa05      	add	r2, sp, #20
   11cd4:	2302      	movs	r3, #2
   11cd6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11cda:	9301      	str	r3, [sp, #4]
   11cdc:	9305      	str	r3, [sp, #20]
   11cde:	f019 fe5c 	bl	2b99a <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
   11ce2:	4620      	mov	r0, r4
   11ce4:	f7ff fb30 	bl	11348 <bt_att_req_free>
   11ce8:	e7d9      	b.n	11c9e <gatt_indicate+0x4e>
   11cea:	f100 0a08 	add.w	sl, r0, #8
   11cee:	2102      	movs	r1, #2
   11cf0:	4650      	mov	r0, sl
   11cf2:	f01a fe9c 	bl	2ca2e <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   11cf6:	4607      	mov	r7, r0
   11cf8:	8aa9      	ldrh	r1, [r5, #20]
   11cfa:	f827 9b02 	strh.w	r9, [r7], #2
   11cfe:	4650      	mov	r0, sl
   11d00:	f01a fe95 	bl	2ca2e <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   11d04:	8aaa      	ldrh	r2, [r5, #20]
   11d06:	6929      	ldr	r1, [r5, #16]
   11d08:	4638      	mov	r0, r7
   11d0a:	f018 fb27 	bl	2a35c <memcpy>
	req->buf = buf;
   11d0e:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   11d10:	4621      	mov	r1, r4
   11d12:	4640      	mov	r0, r8
   11d14:	f019 fc5c 	bl	2b5d0 <bt_att_req_send>
	if (err) {
   11d18:	4605      	mov	r5, r0
   11d1a:	2800      	cmp	r0, #0
   11d1c:	d0c1      	beq.n	11ca2 <gatt_indicate+0x52>
		bt_att_req_free(req);
   11d1e:	4620      	mov	r0, r4
   11d20:	f7ff fb12 	bl	11348 <bt_att_req_free>
   11d24:	e7bd      	b.n	11ca2 <gatt_indicate+0x52>
   11d26:	bf00      	nop
   11d28:	20000a44 	.word	0x20000a44
   11d2c:	00033daf 	.word	0x00033daf
   11d30:	0002b64b 	.word	0x0002b64b
   11d34:	00033dc5 	.word	0x00033dc5

00011d38 <bt_gatt_indicate>:
{
   11d38:	b530      	push	{r4, r5, lr}
   11d3a:	4604      	mov	r4, r0
   11d3c:	b08b      	sub	sp, #44	; 0x2c
   11d3e:	4837      	ldr	r0, [pc, #220]	; (11e1c <bt_gatt_indicate+0xe4>)
   11d40:	f019 fc9d 	bl	2b67e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11d44:	0782      	lsls	r2, r0, #30
{
   11d46:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11d48:	d561      	bpl.n	11e0e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   11d4a:	b114      	cbz	r4, 11d52 <bt_gatt_indicate+0x1a>
   11d4c:	7b63      	ldrb	r3, [r4, #13]
   11d4e:	2b07      	cmp	r3, #7
   11d50:	d160      	bne.n	11e14 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   11d52:	6868      	ldr	r0, [r5, #4]
   11d54:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11d56:	f7ff fe9b 	bl	11a90 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   11d5a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11d5c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   11d60:	b33a      	cbz	r2, 11db2 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11d62:	a905      	add	r1, sp, #20
   11d64:	9102      	str	r1, [sp, #8]
   11d66:	492e      	ldr	r1, [pc, #184]	; (11e20 <bt_gatt_indicate+0xe8>)
   11d68:	9101      	str	r1, [sp, #4]
   11d6a:	2101      	movs	r1, #1
	found->attr = NULL;
   11d6c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11d6e:	9100      	str	r1, [sp, #0]
   11d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   11d74:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11d76:	f7ff febb 	bl	11af0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   11d7a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   11d7c:	b91b      	cbnz	r3, 11d86 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   11d7e:	f06f 0001 	mvn.w	r0, #1
}
   11d82:	b00b      	add	sp, #44	; 0x2c
   11d84:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   11d86:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   11d88:	9b05      	ldr	r3, [sp, #20]
   11d8a:	6818      	ldr	r0, [r3, #0]
   11d8c:	2300      	movs	r3, #0
   11d8e:	f88d 3010 	strb.w	r3, [sp, #16]
   11d92:	a904      	add	r1, sp, #16
   11d94:	f642 0303 	movw	r3, #10243	; 0x2803
   11d98:	f8ad 3012 	strh.w	r3, [sp, #18]
   11d9c:	f018 fba6 	bl	2a4ec <bt_uuid_cmp>
   11da0:	b970      	cbnz	r0, 11dc0 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   11da2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   11da4:	68c3      	ldr	r3, [r0, #12]
   11da6:	799b      	ldrb	r3, [r3, #6]
   11da8:	069b      	lsls	r3, r3, #26
   11daa:	d405      	bmi.n	11db8 <bt_gatt_indicate+0x80>
			return -EINVAL;
   11dac:	f06f 0015 	mvn.w	r0, #21
   11db0:	e7e7      	b.n	11d82 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   11db2:	2800      	cmp	r0, #0
   11db4:	d1e8      	bne.n	11d88 <bt_gatt_indicate+0x50>
   11db6:	e7e2      	b.n	11d7e <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   11db8:	f019 ffa9 	bl	2bd0e <bt_gatt_attr_value_handle>
   11dbc:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   11dc0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   11dc4:	b13c      	cbz	r4, 11dd6 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   11dc6:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   11dc8:	4601      	mov	r1, r0
		params->_ref = 1;
   11dca:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   11dcc:	462a      	mov	r2, r5
   11dce:	4620      	mov	r0, r4
   11dd0:	f7ff ff3e 	bl	11c50 <gatt_indicate>
   11dd4:	e7d5      	b.n	11d82 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   11dd6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   11dda:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   11ddc:	2302      	movs	r3, #2
   11dde:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11de2:	f642 1302 	movw	r3, #10498	; 0x2902
   11de6:	f8ad 3012 	strh.w	r3, [sp, #18]
   11dea:	ab05      	add	r3, sp, #20
   11dec:	9302      	str	r3, [sp, #8]
   11dee:	4b0d      	ldr	r3, [pc, #52]	; (11e24 <bt_gatt_indicate+0xec>)
   11df0:	9301      	str	r3, [sp, #4]
   11df2:	2301      	movs	r3, #1
   11df4:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   11df6:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11df8:	4623      	mov	r3, r4
   11dfa:	aa04      	add	r2, sp, #16
   11dfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   11e00:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11e02:	f88d 4010 	strb.w	r4, [sp, #16]
   11e06:	f7ff fe73 	bl	11af0 <bt_gatt_foreach_attr_type>
	return data.err;
   11e0a:	9807      	ldr	r0, [sp, #28]
   11e0c:	e7b9      	b.n	11d82 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   11e0e:	f06f 000a 	mvn.w	r0, #10
   11e12:	e7b6      	b.n	11d82 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   11e14:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11e18:	e7b3      	b.n	11d82 <bt_gatt_indicate+0x4a>
   11e1a:	bf00      	nop
   11e1c:	200000cc 	.word	0x200000cc
   11e20:	0002b671 	.word	0x0002b671
   11e24:	00011f4d 	.word	0x00011f4d

00011e28 <sc_process>:
{
   11e28:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   11e2a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   11e2e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   11e32:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   11e36:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   11e3a:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   11e3c:	f1a0 0120 	sub.w	r1, r0, #32
   11e40:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11e44:	f3bf 8f5b 	dmb	ish
   11e48:	e854 2f00 	ldrex	r2, [r4]
   11e4c:	f022 0201 	bic.w	r2, r2, #1
   11e50:	e844 2000 	strex	r0, r2, [r4]
   11e54:	2800      	cmp	r0, #0
   11e56:	d1f7      	bne.n	11e48 <sc_process+0x20>
   11e58:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   11e5c:	4a0c      	ldr	r2, [pc, #48]	; (11e90 <sc_process+0x68>)
   11e5e:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   11e62:	4a0c      	ldr	r2, [pc, #48]	; (11e94 <sc_process+0x6c>)
   11e64:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   11e68:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   11e6a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   11e6c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   11e70:	2204      	movs	r2, #4
	sc->start = 0U;
   11e72:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   11e76:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   11e7a:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   11e7e:	f7ff ff5b 	bl	11d38 <bt_gatt_indicate>
   11e82:	b918      	cbnz	r0, 11e8c <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   11e84:	2101      	movs	r1, #1
   11e86:	4620      	mov	r0, r4
   11e88:	f019 fdcd 	bl	2ba26 <atomic_set_bit>
}
   11e8c:	b002      	add	sp, #8
   11e8e:	bd10      	pop	{r4, pc}
   11e90:	0002f51c 	.word	0x0002f51c
   11e94:	000118d5 	.word	0x000118d5

00011e98 <gatt_notify>:
{
   11e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11e9c:	4614      	mov	r4, r2
   11e9e:	b089      	sub	sp, #36	; 0x24
   11ea0:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   11ea2:	2214      	movs	r2, #20
   11ea4:	6861      	ldr	r1, [r4, #4]
{
   11ea6:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   11ea8:	f019 ff8c 	bl	2bdc4 <bt_gatt_check_perm>
   11eac:	b198      	cbz	r0, 11ed6 <gatt_notify+0x3e>
		BT_WARN("Link is not encrypted");
   11eae:	4824      	ldr	r0, [pc, #144]	; (11f40 <gatt_notify+0xa8>)
   11eb0:	6803      	ldr	r3, [r0, #0]
   11eb2:	f013 0f06 	tst.w	r3, #6
   11eb6:	d009      	beq.n	11ecc <gatt_notify+0x34>
   11eb8:	4b22      	ldr	r3, [pc, #136]	; (11f44 <gatt_notify+0xac>)
   11eba:	9306      	str	r3, [sp, #24]
   11ebc:	aa05      	add	r2, sp, #20
   11ebe:	2302      	movs	r3, #2
   11ec0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11ec4:	9301      	str	r3, [sp, #4]
   11ec6:	9305      	str	r3, [sp, #20]
   11ec8:	f019 fd67 	bl	2b99a <z_log_msg2_static_create.constprop.0>
		return -EPERM;
   11ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11ed0:	b009      	add	sp, #36	; 0x24
   11ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
   11ed6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   11ed8:	211b      	movs	r1, #27
   11eda:	3202      	adds	r2, #2
   11edc:	4638      	mov	r0, r7
   11ede:	f7fe ff73 	bl	10dc8 <bt_att_create_pdu>
	if (!buf) {
   11ee2:	4605      	mov	r5, r0
   11ee4:	b988      	cbnz	r0, 11f0a <gatt_notify+0x72>
		BT_WARN("No buffer available to send notification");
   11ee6:	4816      	ldr	r0, [pc, #88]	; (11f40 <gatt_notify+0xa8>)
   11ee8:	6803      	ldr	r3, [r0, #0]
   11eea:	f013 0f06 	tst.w	r3, #6
   11eee:	d009      	beq.n	11f04 <gatt_notify+0x6c>
   11ef0:	4b15      	ldr	r3, [pc, #84]	; (11f48 <gatt_notify+0xb0>)
   11ef2:	9306      	str	r3, [sp, #24]
   11ef4:	aa05      	add	r2, sp, #20
   11ef6:	2302      	movs	r3, #2
   11ef8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11efc:	9301      	str	r3, [sp, #4]
   11efe:	9305      	str	r3, [sp, #20]
   11f00:	f019 fd4b 	bl	2b99a <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
   11f04:	f06f 000b 	mvn.w	r0, #11
   11f08:	e7e2      	b.n	11ed0 <gatt_notify+0x38>
   11f0a:	f100 0908 	add.w	r9, r0, #8
   11f0e:	2102      	movs	r1, #2
   11f10:	4648      	mov	r0, r9
   11f12:	f01a fd8c 	bl	2ca2e <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   11f16:	4606      	mov	r6, r0
   11f18:	89a1      	ldrh	r1, [r4, #12]
   11f1a:	f826 8b02 	strh.w	r8, [r6], #2
   11f1e:	4648      	mov	r0, r9
   11f20:	f01a fd85 	bl	2ca2e <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   11f24:	89a2      	ldrh	r2, [r4, #12]
   11f26:	68a1      	ldr	r1, [r4, #8]
   11f28:	4630      	mov	r0, r6
   11f2a:	f018 fa17 	bl	2a35c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   11f2e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   11f32:	4629      	mov	r1, r5
   11f34:	4638      	mov	r0, r7
}
   11f36:	b009      	add	sp, #36	; 0x24
   11f38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   11f3c:	f019 bb01 	b.w	2b542 <bt_att_send>
   11f40:	20000a44 	.word	0x20000a44
   11f44:	00033daf 	.word	0x00033daf
   11f48:	00033dec 	.word	0x00033dec

00011f4c <notify_cb>:
{
   11f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   11f50:	4b46      	ldr	r3, [pc, #280]	; (1206c <notify_cb+0x120>)
{
   11f52:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   11f54:	6882      	ldr	r2, [r0, #8]
   11f56:	429a      	cmp	r2, r3
{
   11f58:	b08b      	sub	sp, #44	; 0x2c
   11f5a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11f5c:	d004      	beq.n	11f68 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   11f5e:	2701      	movs	r7, #1
}
   11f60:	4638      	mov	r0, r7
   11f62:	b00b      	add	sp, #44	; 0x2c
   11f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   11f68:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   11f6c:	4b40      	ldr	r3, [pc, #256]	; (12070 <notify_cb+0x124>)
   11f6e:	4598      	cmp	r8, r3
   11f70:	d01c      	beq.n	11fac <notify_cb+0x60>
   11f72:	f108 0315 	add.w	r3, r8, #21
			BT_WARN("Link is not encrypted");
   11f76:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 12074 <notify_cb+0x128>
   11f7a:	9301      	str	r3, [sp, #4]
   11f7c:	f108 0501 	add.w	r5, r8, #1
		if (cfg->value != data->type) {
   11f80:	f8b5 2007 	ldrh.w	r2, [r5, #7]
   11f84:	89a3      	ldrh	r3, [r4, #12]
   11f86:	429a      	cmp	r2, r3
   11f88:	d10b      	bne.n	11fa2 <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   11f8a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   11f8e:	4629      	mov	r1, r5
   11f90:	f7fd fd2e 	bl	f9f0 <bt_conn_lookup_addr_le>
		if (!conn) {
   11f94:	4682      	mov	sl, r0
   11f96:	b120      	cbz	r0, 11fa2 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
   11f98:	7b42      	ldrb	r2, [r0, #13]
   11f9a:	2a07      	cmp	r2, #7
   11f9c:	d02a      	beq.n	11ff4 <notify_cb+0xa8>
			bt_conn_unref(conn);
   11f9e:	f018 fd4c 	bl	2aa3a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   11fa2:	9b01      	ldr	r3, [sp, #4]
   11fa4:	350a      	adds	r5, #10
   11fa6:	429d      	cmp	r5, r3
   11fa8:	d0d9      	beq.n	11f5e <notify_cb+0x12>
   11faa:	e7e9      	b.n	11f80 <notify_cb+0x34>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   11fac:	2700      	movs	r7, #0
   11fae:	4d32      	ldr	r5, [pc, #200]	; (12078 <notify_cb+0x12c>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   11fb0:	46b9      	mov	r9, r7
   11fb2:	a904      	add	r1, sp, #16
   11fb4:	4628      	mov	r0, r5
   11fb6:	f8cd 9010 	str.w	r9, [sp, #16]
   11fba:	f8cd 9013 	str.w	r9, [sp, #19]
   11fbe:	f019 fbb9 	bl	2b734 <bt_addr_le_cmp>
   11fc2:	b178      	cbz	r0, 11fe4 <notify_cb+0x98>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   11fc4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   11fc8:	2207      	movs	r2, #7
   11fca:	4629      	mov	r1, r5
   11fcc:	f7fd fd5a 	bl	fa84 <bt_conn_lookup_state_le>
			if (!conn) {
   11fd0:	b968      	cbnz	r0, 11fee <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
   11fd2:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   11fd4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   11fd8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   11fda:	4629      	mov	r1, r5
   11fdc:	8853      	ldrh	r3, [r2, #2]
   11fde:	8812      	ldrh	r2, [r2, #0]
   11fe0:	f7ff fbe0 	bl	117a4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   11fe4:	350c      	adds	r5, #12
   11fe6:	2f00      	cmp	r7, #0
   11fe8:	d1c3      	bne.n	11f72 <notify_cb+0x26>
   11fea:	2701      	movs	r7, #1
   11fec:	e7e1      	b.n	11fb2 <notify_cb+0x66>
			bt_conn_unref(conn);
   11fee:	f018 fd24 	bl	2aa3a <bt_conn_unref>
   11ff2:	e7f7      	b.n	11fe4 <notify_cb+0x98>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   11ff4:	f8d8 2020 	ldr.w	r2, [r8, #32]
   11ff8:	b122      	cbz	r2, 12004 <notify_cb+0xb8>
   11ffa:	4631      	mov	r1, r6
   11ffc:	4790      	blx	r2
   11ffe:	b908      	cbnz	r0, 12004 <notify_cb+0xb8>
			bt_conn_unref(conn);
   12000:	4650      	mov	r0, sl
   12002:	e7cc      	b.n	11f9e <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
   12004:	2214      	movs	r2, #20
   12006:	4631      	mov	r1, r6
   12008:	4650      	mov	r0, sl
   1200a:	f019 fedb 	bl	2bdc4 <bt_gatt_check_perm>
   1200e:	4607      	mov	r7, r0
   12010:	b180      	cbz	r0, 12034 <notify_cb+0xe8>
			BT_WARN("Link is not encrypted");
   12012:	f8d9 3000 	ldr.w	r3, [r9]
   12016:	f013 0f06 	tst.w	r3, #6
   1201a:	d0c2      	beq.n	11fa2 <notify_cb+0x56>
   1201c:	4b17      	ldr	r3, [pc, #92]	; (1207c <notify_cb+0x130>)
   1201e:	9308      	str	r3, [sp, #32]
   12020:	aa07      	add	r2, sp, #28
   12022:	2302      	movs	r3, #2
   12024:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12028:	4648      	mov	r0, r9
   1202a:	9303      	str	r3, [sp, #12]
   1202c:	9307      	str	r3, [sp, #28]
   1202e:	f019 fcb4 	bl	2b99a <z_log_msg2_static_create.constprop.0>
   12032:	e7b6      	b.n	11fa2 <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
   12034:	89a0      	ldrh	r0, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   12036:	88a1      	ldrh	r1, [r4, #4]
   12038:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   1203a:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
   1203c:	4650      	mov	r0, sl
		if (data->type == BT_GATT_CCC_INDICATE) {
   1203e:	d110      	bne.n	12062 <notify_cb+0x116>
			err = gatt_indicate(conn, data->handle,
   12040:	f7ff fe06 	bl	11c50 <gatt_indicate>
			if (err == 0) {
   12044:	4683      	mov	fp, r0
   12046:	b918      	cbnz	r0, 12050 <notify_cb+0x104>
				data->ind_params->_ref++;
   12048:	6920      	ldr	r0, [r4, #16]
   1204a:	7d81      	ldrb	r1, [r0, #22]
   1204c:	3101      	adds	r1, #1
   1204e:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
   12050:	4650      	mov	r0, sl
   12052:	f018 fcf2 	bl	2aa3a <bt_conn_unref>
		if (err < 0) {
   12056:	f1bb 0f00 	cmp.w	fp, #0
   1205a:	db81      	blt.n	11f60 <notify_cb+0x14>
		data->err = 0;
   1205c:	2300      	movs	r3, #0
   1205e:	60a3      	str	r3, [r4, #8]
   12060:	e79f      	b.n	11fa2 <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   12062:	f7ff ff19 	bl	11e98 <gatt_notify>
   12066:	4683      	mov	fp, r0
   12068:	e7f2      	b.n	12050 <notify_cb+0x104>
   1206a:	bf00      	nop
   1206c:	000116d1 	.word	0x000116d1
   12070:	200003d8 	.word	0x200003d8
   12074:	20000a44 	.word	0x20000a44
   12078:	20004a5b 	.word	0x20004a5b
   1207c:	00033daf 	.word	0x00033daf

00012080 <update_ccc>:
{
   12080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12084:	4b43      	ldr	r3, [pc, #268]	; (12194 <update_ccc+0x114>)
{
   12086:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12088:	6882      	ldr	r2, [r0, #8]
   1208a:	429a      	cmp	r2, r3
{
   1208c:	b089      	sub	sp, #36	; 0x24
   1208e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12090:	d17b      	bne.n	1218a <update_ccc+0x10a>
	ccc = attr->user_data;
   12092:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   12096:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   12098:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 12198 <update_ccc+0x118>
   1209c:	f108 0601 	add.w	r6, r8, #1
   120a0:	f108 0a15 	add.w	sl, r8, #21
		if (!cfg->value ||
   120a4:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   120a8:	b1f3      	cbz	r3, 120e8 <update_ccc+0x68>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   120aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   120ae:	4632      	mov	r2, r6
   120b0:	4620      	mov	r0, r4
   120b2:	f018 fd3b 	bl	2ab2c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   120b6:	b1b8      	cbz	r0, 120e8 <update_ccc+0x68>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   120b8:	222a      	movs	r2, #42	; 0x2a
   120ba:	4629      	mov	r1, r5
   120bc:	4620      	mov	r0, r4
   120be:	f019 fe81 	bl	2bdc4 <bt_gatt_check_perm>
		if (err) {
   120c2:	b330      	cbz	r0, 12112 <update_ccc+0x92>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   120c4:	2803      	cmp	r0, #3
   120c6:	d113      	bne.n	120f0 <update_ccc+0x70>
				BT_WARN("CCC %p not writable", attr);
   120c8:	f8d9 3000 	ldr.w	r3, [r9]
   120cc:	f013 0f06 	tst.w	r3, #6
   120d0:	d00a      	beq.n	120e8 <update_ccc+0x68>
   120d2:	4b32      	ldr	r3, [pc, #200]	; (1219c <update_ccc+0x11c>)
   120d4:	9001      	str	r0, [sp, #4]
   120d6:	9005      	str	r0, [sp, #20]
   120d8:	aa05      	add	r2, sp, #20
   120da:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   120de:	4648      	mov	r0, r9
   120e0:	e9cd 3506 	strd	r3, r5, [sp, #24]
   120e4:	f019 fc59 	bl	2b99a <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   120e8:	360a      	adds	r6, #10
   120ea:	45b2      	cmp	sl, r6
   120ec:	d04d      	beq.n	1218a <update_ccc+0x10a>
   120ee:	e7d9      	b.n	120a4 <update_ccc+0x24>
				sec = BT_SECURITY_L3;
   120f0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   120f2:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   120f4:	bf14      	ite	ne
   120f6:	f04f 0b02 	movne.w	fp, #2
   120fa:	f04f 0b03 	moveq.w	fp, #3
			    bt_conn_get_security(conn) < sec) {
   120fe:	f018 fd13 	bl	2ab28 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   12102:	4583      	cmp	fp, r0
   12104:	d905      	bls.n	12112 <update_ccc+0x92>
				if (data->sec < sec) {
   12106:	793a      	ldrb	r2, [r7, #4]
   12108:	455a      	cmp	r2, fp
   1210a:	d2ed      	bcs.n	120e8 <update_ccc+0x68>
					data->sec = sec;
   1210c:	f887 b004 	strb.w	fp, [r7, #4]
   12110:	e7ea      	b.n	120e8 <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   12112:	4641      	mov	r1, r8
   12114:	4628      	mov	r0, r5
   12116:	f019 fa8a 	bl	2b62e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1211a:	4b21      	ldr	r3, [pc, #132]	; (121a0 <update_ccc+0x120>)
   1211c:	4598      	cmp	r8, r3
   1211e:	d134      	bne.n	1218a <update_ccc+0x10a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   12120:	7a20      	ldrb	r0, [r4, #8]
   12122:	f104 0188 	add.w	r1, r4, #136	; 0x88
   12126:	f7ff fa73 	bl	11610 <find_sc_cfg>
	if (!cfg) {
   1212a:	b370      	cbz	r0, 1218a <update_ccc+0x10a>
	if (!(cfg->data.start || cfg->data.end)) {
   1212c:	8902      	ldrh	r2, [r0, #8]
   1212e:	8943      	ldrh	r3, [r0, #10]
   12130:	ea53 0102 	orrs.w	r1, r3, r2
   12134:	d029      	beq.n	1218a <update_ccc+0x10a>
	index = bt_conn_index(conn);
   12136:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   12138:	f8ad 2000 	strh.w	r2, [sp]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1213c:	f8ad 3002 	strh.w	r3, [sp, #2]
	index = bt_conn_index(conn);
   12140:	f7fd fb2e 	bl	f7a0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   12144:	4917      	ldr	r1, [pc, #92]	; (121a4 <update_ccc+0x124>)
   12146:	4a18      	ldr	r2, [pc, #96]	; (121a8 <update_ccc+0x128>)
   12148:	2318      	movs	r3, #24
   1214a:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1214e:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   12150:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   12152:	4a16      	ldr	r2, [pc, #88]	; (121ac <update_ccc+0x12c>)
   12154:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   12156:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
   1215a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1215c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].data = &sc_range[0];
   12160:	f8c3 d010 	str.w	sp, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   12164:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   12166:	4620      	mov	r0, r4
   12168:	f7ff fde6 	bl	11d38 <bt_gatt_indicate>
   1216c:	b168      	cbz	r0, 1218a <update_ccc+0x10a>
		BT_ERR("SC restore indication failed");
   1216e:	480a      	ldr	r0, [pc, #40]	; (12198 <update_ccc+0x118>)
   12170:	6803      	ldr	r3, [r0, #0]
   12172:	075b      	lsls	r3, r3, #29
   12174:	d009      	beq.n	1218a <update_ccc+0x10a>
   12176:	4b0e      	ldr	r3, [pc, #56]	; (121b0 <update_ccc+0x130>)
   12178:	9306      	str	r3, [sp, #24]
   1217a:	aa05      	add	r2, sp, #20
   1217c:	2302      	movs	r3, #2
   1217e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12182:	9301      	str	r3, [sp, #4]
   12184:	9305      	str	r3, [sp, #20]
   12186:	f019 fc08 	bl	2b99a <z_log_msg2_static_create.constprop.0>
}
   1218a:	2001      	movs	r0, #1
   1218c:	b009      	add	sp, #36	; 0x24
   1218e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12192:	bf00      	nop
   12194:	000116d1 	.word	0x000116d1
   12198:	20000a44 	.word	0x20000a44
   1219c:	00033e15 	.word	0x00033e15
   121a0:	200003d8 	.word	0x200003d8
   121a4:	20002e08 	.word	0x20002e08
   121a8:	0002f51c 	.word	0x0002f51c
   121ac:	0002ba43 	.word	0x0002ba43
   121b0:	00033e29 	.word	0x00033e29

000121b4 <bt_gatt_discover>:
{
   121b4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   121b6:	7b43      	ldrb	r3, [r0, #13]
   121b8:	2b07      	cmp	r3, #7
{
   121ba:	b08c      	sub	sp, #48	; 0x30
   121bc:	4605      	mov	r5, r0
   121be:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   121c0:	f040 80b1 	bne.w	12326 <bt_gatt_discover+0x172>
	switch (params->type) {
   121c4:	7c0b      	ldrb	r3, [r1, #16]
   121c6:	2b06      	cmp	r3, #6
   121c8:	f200 80a7 	bhi.w	1231a <bt_gatt_discover+0x166>
   121cc:	e8df f003 	tbb	[pc, r3]
   121d0:	64640404 	.word	0x64640404
   121d4:	9e6c      	.short	0x9e6c
   121d6:	30          	.byte	0x30
   121d7:	00          	.byte	0x00
		if (params->uuid) {
   121d8:	680b      	ldr	r3, [r1, #0]
   121da:	b30b      	cbz	r3, 12220 <bt_gatt_discover+0x6c>
	switch (params->uuid->type) {
   121dc:	781b      	ldrb	r3, [r3, #0]
   121de:	b18b      	cbz	r3, 12204 <bt_gatt_discover+0x50>
   121e0:	2b02      	cmp	r3, #2
   121e2:	d01b      	beq.n	1221c <bt_gatt_discover+0x68>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   121e4:	4851      	ldr	r0, [pc, #324]	; (1232c <bt_gatt_discover+0x178>)
   121e6:	6802      	ldr	r2, [r0, #0]
   121e8:	0754      	lsls	r4, r2, #29
   121ea:	d023      	beq.n	12234 <bt_gatt_discover+0x80>
   121ec:	4a50      	ldr	r2, [pc, #320]	; (12330 <bt_gatt_discover+0x17c>)
	switch (params->type) {
   121ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		BT_ERR("Invalid discovery type: %u", params->type);
   121f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   121f6:	2303      	movs	r3, #3
   121f8:	aa09      	add	r2, sp, #36	; 0x24
   121fa:	9305      	str	r3, [sp, #20]
   121fc:	9309      	str	r3, [sp, #36]	; 0x24
   121fe:	f019 fbcc 	bl	2b99a <z_log_msg2_static_create.constprop.0>
   12202:	e017      	b.n	12234 <bt_gatt_discover+0x80>
		len += BT_UUID_SIZE_16;
   12204:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   12206:	9301      	str	r3, [sp, #4]
   12208:	2306      	movs	r3, #6
   1220a:	9300      	str	r3, [sp, #0]
   1220c:	4949      	ldr	r1, [pc, #292]	; (12334 <bt_gatt_discover+0x180>)
   1220e:	4b4a      	ldr	r3, [pc, #296]	; (12338 <bt_gatt_discover+0x184>)
   12210:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   12212:	4628      	mov	r0, r5
   12214:	f019 faeb 	bl	2b7ee <gatt_req_send>
}
   12218:	b00c      	add	sp, #48	; 0x30
   1221a:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   1221c:	2316      	movs	r3, #22
   1221e:	e7f2      	b.n	12206 <bt_gatt_discover+0x52>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   12220:	2310      	movs	r3, #16
   12222:	2004      	movs	r0, #4
   12224:	e9cd 3000 	strd	r3, r0, [sp]
   12228:	460a      	mov	r2, r1
   1222a:	4b44      	ldr	r3, [pc, #272]	; (1233c <bt_gatt_discover+0x188>)
   1222c:	4944      	ldr	r1, [pc, #272]	; (12340 <bt_gatt_discover+0x18c>)
   1222e:	e7f0      	b.n	12212 <bt_gatt_discover+0x5e>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   12230:	6808      	ldr	r0, [r1, #0]
   12232:	b910      	cbnz	r0, 1223a <bt_gatt_discover+0x86>
		return -EINVAL;
   12234:	f06f 0015 	mvn.w	r0, #21
   12238:	e7ee      	b.n	12218 <bt_gatt_discover+0x64>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1223a:	7806      	ldrb	r6, [r0, #0]
   1223c:	2e00      	cmp	r6, #0
   1223e:	d1f9      	bne.n	12234 <bt_gatt_discover+0x80>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   12240:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   12244:	a903      	add	r1, sp, #12
   12246:	f88d 600c 	strb.w	r6, [sp, #12]
   1224a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1224e:	f018 f94d 	bl	2a4ec <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   12252:	b308      	cbz	r0, 12298 <bt_gatt_discover+0xe4>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   12254:	f642 1302 	movw	r3, #10498	; 0x2902
   12258:	6820      	ldr	r0, [r4, #0]
   1225a:	f88d 6010 	strb.w	r6, [sp, #16]
   1225e:	a904      	add	r1, sp, #16
   12260:	f8ad 3012 	strh.w	r3, [sp, #18]
   12264:	f018 f942 	bl	2a4ec <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   12268:	b1b0      	cbz	r0, 12298 <bt_gatt_discover+0xe4>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1226a:	f642 1303 	movw	r3, #10499	; 0x2903
   1226e:	6820      	ldr	r0, [r4, #0]
   12270:	f88d 6014 	strb.w	r6, [sp, #20]
   12274:	a905      	add	r1, sp, #20
   12276:	f8ad 3016 	strh.w	r3, [sp, #22]
   1227a:	f018 f937 	bl	2a4ec <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1227e:	b158      	cbz	r0, 12298 <bt_gatt_discover+0xe4>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   12280:	f642 1304 	movw	r3, #10500	; 0x2904
   12284:	6820      	ldr	r0, [r4, #0]
   12286:	f88d 6018 	strb.w	r6, [sp, #24]
   1228a:	a906      	add	r1, sp, #24
   1228c:	f8ad 301a 	strh.w	r3, [sp, #26]
   12290:	f018 f92c 	bl	2a4ec <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   12294:	2800      	cmp	r0, #0
   12296:	d1cd      	bne.n	12234 <bt_gatt_discover+0x80>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   12298:	2308      	movs	r3, #8
   1229a:	2104      	movs	r1, #4
   1229c:	e9cd 3100 	strd	r3, r1, [sp]
   122a0:	4622      	mov	r2, r4
   122a2:	4b28      	ldr	r3, [pc, #160]	; (12344 <bt_gatt_discover+0x190>)
   122a4:	4928      	ldr	r1, [pc, #160]	; (12348 <bt_gatt_discover+0x194>)
   122a6:	e7b4      	b.n	12212 <bt_gatt_discover+0x5e>
		if (params->uuid &&
   122a8:	6808      	ldr	r0, [r1, #0]
   122aa:	b378      	cbz	r0, 1230c <bt_gatt_discover+0x158>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   122ac:	2600      	movs	r6, #0
   122ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   122b2:	a903      	add	r1, sp, #12
   122b4:	f88d 600c 	strb.w	r6, [sp, #12]
   122b8:	f8ad 300e 	strh.w	r3, [sp, #14]
   122bc:	f018 f916 	bl	2a4ec <bt_uuid_cmp>
		if (params->uuid &&
   122c0:	2800      	cmp	r0, #0
   122c2:	d0b7      	beq.n	12234 <bt_gatt_discover+0x80>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   122c4:	f642 0301 	movw	r3, #10241	; 0x2801
   122c8:	6820      	ldr	r0, [r4, #0]
   122ca:	f88d 6010 	strb.w	r6, [sp, #16]
   122ce:	a904      	add	r1, sp, #16
   122d0:	f8ad 3012 	strh.w	r3, [sp, #18]
   122d4:	f018 f90a 	bl	2a4ec <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   122d8:	2800      	cmp	r0, #0
   122da:	d0ab      	beq.n	12234 <bt_gatt_discover+0x80>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   122dc:	f642 0302 	movw	r3, #10242	; 0x2802
   122e0:	6820      	ldr	r0, [r4, #0]
   122e2:	f88d 6014 	strb.w	r6, [sp, #20]
   122e6:	a905      	add	r1, sp, #20
   122e8:	f8ad 3016 	strh.w	r3, [sp, #22]
   122ec:	f018 f8fe 	bl	2a4ec <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   122f0:	2800      	cmp	r0, #0
   122f2:	d09f      	beq.n	12234 <bt_gatt_discover+0x80>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   122f4:	f642 0303 	movw	r3, #10243	; 0x2803
   122f8:	6820      	ldr	r0, [r4, #0]
   122fa:	f88d 6018 	strb.w	r6, [sp, #24]
   122fe:	a906      	add	r1, sp, #24
   12300:	f8ad 301a 	strh.w	r3, [sp, #26]
   12304:	f018 f8f2 	bl	2a4ec <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   12308:	2800      	cmp	r0, #0
   1230a:	d093      	beq.n	12234 <bt_gatt_discover+0x80>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1230c:	2304      	movs	r3, #4
   1230e:	e9cd 3300 	strd	r3, r3, [sp]
   12312:	490e      	ldr	r1, [pc, #56]	; (1234c <bt_gatt_discover+0x198>)
   12314:	4b0e      	ldr	r3, [pc, #56]	; (12350 <bt_gatt_discover+0x19c>)
   12316:	4622      	mov	r2, r4
   12318:	e77b      	b.n	12212 <bt_gatt_discover+0x5e>
		BT_ERR("Invalid discovery type: %u", params->type);
   1231a:	4804      	ldr	r0, [pc, #16]	; (1232c <bt_gatt_discover+0x178>)
   1231c:	6802      	ldr	r2, [r0, #0]
   1231e:	0752      	lsls	r2, r2, #29
   12320:	d088      	beq.n	12234 <bt_gatt_discover+0x80>
   12322:	4a0c      	ldr	r2, [pc, #48]	; (12354 <bt_gatt_discover+0x1a0>)
   12324:	e763      	b.n	121ee <bt_gatt_discover+0x3a>
		return -ENOTCONN;
   12326:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1232a:	e775      	b.n	12218 <bt_gatt_discover+0x64>
   1232c:	20000a44 	.word	0x20000a44
   12330:	00033e46 	.word	0x00033e46
   12334:	0002be55 	.word	0x0002be55
   12338:	0002b9db 	.word	0x0002b9db
   1233c:	0002b8b3 	.word	0x0002b8b3
   12340:	00012359 	.word	0x00012359
   12344:	0002b8e3 	.word	0x0002b8e3
   12348:	0001247d 	.word	0x0001247d
   1234c:	00012821 	.word	0x00012821
   12350:	0002b877 	.word	0x0002b877
   12354:	00033e5b 	.word	0x00033e5b

00012358 <gatt_read_group_rsp>:
{
   12358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1235c:	b08f      	sub	sp, #60	; 0x3c
   1235e:	4681      	mov	r9, r0
   12360:	9d18      	ldr	r5, [sp, #96]	; 0x60
   12362:	4617      	mov	r7, r2
	if (err) {
   12364:	b131      	cbz	r1, 12374 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   12366:	686b      	ldr	r3, [r5, #4]
   12368:	462a      	mov	r2, r5
   1236a:	2100      	movs	r1, #0
}
   1236c:	b00f      	add	sp, #60	; 0x3c
   1236e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   12372:	4718      	bx	r3
	switch (rsp->len) {
   12374:	7812      	ldrb	r2, [r2, #0]
   12376:	2a06      	cmp	r2, #6
   12378:	d018      	beq.n	123ac <gatt_read_group_rsp+0x54>
   1237a:	2a14      	cmp	r2, #20
   1237c:	d02c      	beq.n	123d8 <gatt_read_group_rsp+0x80>
		BT_ERR("Invalid data len %u", rsp->len);
   1237e:	483d      	ldr	r0, [pc, #244]	; (12474 <gatt_read_group_rsp+0x11c>)
   12380:	6803      	ldr	r3, [r0, #0]
   12382:	075b      	lsls	r3, r3, #29
   12384:	d00a      	beq.n	1239c <gatt_read_group_rsp+0x44>
   12386:	4b3c      	ldr	r3, [pc, #240]	; (12478 <gatt_read_group_rsp+0x120>)
   12388:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (rsp->len) {
   1238c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
		BT_ERR("Invalid data len %u", rsp->len);
   12390:	2303      	movs	r3, #3
   12392:	aa0b      	add	r2, sp, #44	; 0x2c
   12394:	9303      	str	r3, [sp, #12]
   12396:	930b      	str	r3, [sp, #44]	; 0x2c
   12398:	f019 faff 	bl	2b99a <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
   1239c:	686b      	ldr	r3, [r5, #4]
   1239e:	462a      	mov	r2, r5
   123a0:	2100      	movs	r1, #0
   123a2:	4648      	mov	r0, r9
   123a4:	4798      	blx	r3
}
   123a6:	b00f      	add	sp, #60	; 0x3c
   123a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   123ac:	f88d 100c 	strb.w	r1, [sp, #12]
	for (length--, pdu = rsp->data; length >= rsp->len;
   123b0:	3b01      	subs	r3, #1
   123b2:	b29c      	uxth	r4, r3
   123b4:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   123b8:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   123ba:	783b      	ldrb	r3, [r7, #0]
   123bc:	42a3      	cmp	r3, r4
   123be:	d90f      	bls.n	123e0 <gatt_read_group_rsp+0x88>
	if (length == 0U && end_handle) {
   123c0:	2c00      	cmp	r4, #0
   123c2:	d1eb      	bne.n	1239c <gatt_read_group_rsp+0x44>
   123c4:	2e00      	cmp	r6, #0
   123c6:	d0e9      	beq.n	1239c <gatt_read_group_rsp+0x44>
	gatt_discover_next(conn, handle, params);
   123c8:	462a      	mov	r2, r5
   123ca:	4631      	mov	r1, r6
   123cc:	4648      	mov	r0, r9
}
   123ce:	b00f      	add	sp, #60	; 0x3c
   123d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   123d4:	f019 bd21 	b.w	2be1a <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   123d8:	2202      	movs	r2, #2
   123da:	f88d 200c 	strb.w	r2, [sp, #12]
		break;
   123de:	e7e7      	b.n	123b0 <gatt_read_group_rsp+0x58>
		struct bt_gatt_attr attr = {};
   123e0:	2214      	movs	r2, #20
   123e2:	2100      	movs	r1, #0
   123e4:	a808      	add	r0, sp, #32
   123e6:	f017 ffc4 	bl	2a372 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   123ea:	f8b8 a000 	ldrh.w	sl, [r8]
   123ee:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   123f2:	2b00      	cmp	r3, #0
   123f4:	d0d2      	beq.n	1239c <gatt_read_group_rsp+0x44>
		end_handle = sys_le16_to_cpu(data->end_handle);
   123f6:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   123fa:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   123fe:	2e00      	cmp	r6, #0
   12400:	d0cc      	beq.n	1239c <gatt_read_group_rsp+0x44>
   12402:	42b3      	cmp	r3, r6
   12404:	d8ca      	bhi.n	1239c <gatt_read_group_rsp+0x44>
		switch (u.uuid.type) {
   12406:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1240a:	b323      	cbz	r3, 12456 <gatt_read_group_rsp+0xfe>
   1240c:	2b02      	cmp	r3, #2
   1240e:	d02a      	beq.n	12466 <gatt_read_group_rsp+0x10e>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   12410:	f04f 0300 	mov.w	r3, #0
   12414:	f88d 3000 	strb.w	r3, [sp]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   12418:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   1241a:	f8ad b008 	strh.w	fp, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1241e:	2b00      	cmp	r3, #0
   12420:	f642 0301 	movw	r3, #10241	; 0x2801
   12424:	bf08      	it	eq
   12426:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1242a:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = &u.uuid;
   1242e:	ab03      	add	r3, sp, #12
   12430:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
   12432:	ab01      	add	r3, sp, #4
   12434:	930b      	str	r3, [sp, #44]	; 0x2c
		attr.uuid = &uuid_svc.uuid;
   12436:	f8cd d020 	str.w	sp, [sp, #32]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1243a:	686b      	ldr	r3, [r5, #4]
		attr.handle = start_handle;
   1243c:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   12440:	462a      	mov	r2, r5
   12442:	a908      	add	r1, sp, #32
   12444:	4648      	mov	r0, r9
   12446:	4798      	blx	r3
   12448:	2800      	cmp	r0, #0
   1244a:	d0ac      	beq.n	123a6 <gatt_read_group_rsp+0x4e>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1244c:	783a      	ldrb	r2, [r7, #0]
   1244e:	1aa4      	subs	r4, r4, r2
   12450:	b2a4      	uxth	r4, r4
   12452:	4490      	add	r8, r2
   12454:	e7b1      	b.n	123ba <gatt_read_group_rsp+0x62>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   12456:	2202      	movs	r2, #2
   12458:	f108 0104 	add.w	r1, r8, #4
   1245c:	f10d 000e 	add.w	r0, sp, #14
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   12460:	f017 ff7c 	bl	2a35c <memcpy>
			break;
   12464:	e7d4      	b.n	12410 <gatt_read_group_rsp+0xb8>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   12466:	2210      	movs	r2, #16
   12468:	f108 0104 	add.w	r1, r8, #4
   1246c:	f10d 000d 	add.w	r0, sp, #13
   12470:	e7f6      	b.n	12460 <gatt_read_group_rsp+0x108>
   12472:	bf00      	nop
   12474:	20000a44 	.word	0x20000a44
   12478:	00033e76 	.word	0x00033e76

0001247c <gatt_read_type_rsp>:
{
   1247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12480:	b093      	sub	sp, #76	; 0x4c
   12482:	4680      	mov	r8, r0
   12484:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   12486:	4617      	mov	r7, r2
	if (err) {
   12488:	b131      	cbz	r1, 12498 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   1248a:	686b      	ldr	r3, [r5, #4]
   1248c:	462a      	mov	r2, r5
   1248e:	2100      	movs	r1, #0
}
   12490:	b013      	add	sp, #76	; 0x4c
   12492:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   12496:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   12498:	7c2a      	ldrb	r2, [r5, #16]
   1249a:	2a02      	cmp	r2, #2
   1249c:	f040 808b 	bne.w	125b6 <gatt_read_type_rsp+0x13a>
	switch (rsp->len) {
   124a0:	783c      	ldrb	r4, [r7, #0]
   124a2:	2c06      	cmp	r4, #6
   124a4:	d018      	beq.n	124d8 <gatt_read_type_rsp+0x5c>
   124a6:	2c08      	cmp	r4, #8
   124a8:	d119      	bne.n	124de <gatt_read_type_rsp+0x62>
		u.uuid.type = BT_UUID_TYPE_16;
   124aa:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
   124ae:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   124b0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   124b2:	b2a4      	uxth	r4, r4
   124b4:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   124b8:	f10d 0a1c 	add.w	sl, sp, #28
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   124bc:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   124be:	783b      	ldrb	r3, [r7, #0]
   124c0:	42a3      	cmp	r3, r4
   124c2:	d921      	bls.n	12508 <gatt_read_type_rsp+0x8c>
	if (length == 0U && handle) {
   124c4:	b9d4      	cbnz	r4, 124fc <gatt_read_type_rsp+0x80>
   124c6:	b1ce      	cbz	r6, 124fc <gatt_read_type_rsp+0x80>
	gatt_discover_next(conn, handle, params);
   124c8:	462a      	mov	r2, r5
   124ca:	4631      	mov	r1, r6
   124cc:	4640      	mov	r0, r8
}
   124ce:	b013      	add	sp, #76	; 0x4c
   124d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   124d4:	f019 bca1 	b.w	2be1a <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   124d8:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
   124dc:	e7e7      	b.n	124ae <gatt_read_type_rsp+0x32>
		BT_ERR("Invalid data len %u", rsp->len);
   124de:	489f      	ldr	r0, [pc, #636]	; (1275c <gatt_read_type_rsp+0x2e0>)
   124e0:	6803      	ldr	r3, [r0, #0]
   124e2:	075a      	lsls	r2, r3, #29
   124e4:	d00a      	beq.n	124fc <gatt_read_type_rsp+0x80>
   124e6:	4b9e      	ldr	r3, [pc, #632]	; (12760 <gatt_read_type_rsp+0x2e4>)
	switch (rsp->len) {
   124e8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
   124ec:	2303      	movs	r3, #3
   124ee:	9307      	str	r3, [sp, #28]
   124f0:	930f      	str	r3, [sp, #60]	; 0x3c
		BT_ERR("Invalid data len %u", rsp->len);
   124f2:	aa0f      	add	r2, sp, #60	; 0x3c
   124f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   124f8:	f019 fa4f 	bl	2b99a <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
   124fc:	686b      	ldr	r3, [r5, #4]
   124fe:	462a      	mov	r2, r5
   12500:	2100      	movs	r1, #0
   12502:	4640      	mov	r0, r8
   12504:	4798      	blx	r3
	if (!handle) {
   12506:	e03a      	b.n	1257e <gatt_read_type_rsp+0x102>
		handle = sys_le16_to_cpu(data->handle);
   12508:	f8b9 3000 	ldrh.w	r3, [r9]
   1250c:	b29e      	uxth	r6, r3
		if (!handle) {
   1250e:	2e00      	cmp	r6, #0
   12510:	d0f4      	beq.n	124fc <gatt_read_type_rsp+0x80>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   12512:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   12516:	f8ad 2018 	strh.w	r2, [sp, #24]
   1251a:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1251c:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   12520:	f8ad 201a 	strh.w	r2, [sp, #26]
   12524:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
   12526:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1252a:	b172      	cbz	r2, 1254a <gatt_read_type_rsp+0xce>
   1252c:	2a02      	cmp	r2, #2
   1252e:	d017      	beq.n	12560 <gatt_read_type_rsp+0xe4>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   12530:	6829      	ldr	r1, [r5, #0]
   12532:	b339      	cbz	r1, 12584 <gatt_read_type_rsp+0x108>
   12534:	4650      	mov	r0, sl
   12536:	9303      	str	r3, [sp, #12]
   12538:	f017 ffd8 	bl	2a4ec <bt_uuid_cmp>
   1253c:	9b03      	ldr	r3, [sp, #12]
   1253e:	b308      	cbz	r0, 12584 <gatt_read_type_rsp+0x108>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   12540:	783a      	ldrb	r2, [r7, #0]
   12542:	1aa4      	subs	r4, r4, r2
   12544:	b2a4      	uxth	r4, r4
   12546:	4491      	add	r9, r2
   12548:	e7b9      	b.n	124be <gatt_read_type_rsp+0x42>
			value.uuid = &u.uuid;
   1254a:	f8cd a014 	str.w	sl, [sp, #20]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1254e:	f899 2006 	ldrb.w	r2, [r9, #6]
   12552:	f899 1007 	ldrb.w	r1, [r9, #7]
   12556:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1255a:	f8ad 201e 	strh.w	r2, [sp, #30]
			break;
   1255e:	e7e7      	b.n	12530 <gatt_read_type_rsp+0xb4>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   12560:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   12562:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   12564:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   12566:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   12568:	497e      	ldr	r1, [pc, #504]	; (12764 <gatt_read_type_rsp+0x2e8>)
   1256a:	9201      	str	r2, [sp, #4]
   1256c:	9300      	str	r3, [sp, #0]
   1256e:	462a      	mov	r2, r5
   12570:	4b7d      	ldr	r3, [pc, #500]	; (12768 <gatt_read_type_rsp+0x2ec>)
   12572:	4640      	mov	r0, r8
   12574:	f019 f93b 	bl	2b7ee <gatt_req_send>
			return read_included_uuid(conn, params);
   12578:	b286      	uxth	r6, r0
	if (!handle) {
   1257a:	2e00      	cmp	r6, #0
   1257c:	d1a4      	bne.n	124c8 <gatt_read_type_rsp+0x4c>
}
   1257e:	b013      	add	sp, #76	; 0x4c
   12580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   12584:	f642 0202 	movw	r2, #10242	; 0x2802
   12588:	f8ad 2012 	strh.w	r2, [sp, #18]
   1258c:	aa04      	add	r2, sp, #16
   1258e:	e9cd 2b0c 	strd	r2, fp, [sp, #48]	; 0x30
   12592:	aa05      	add	r2, sp, #20
   12594:	920f      	str	r2, [sp, #60]	; 0x3c
		attr.handle = handle;
   12596:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1259a:	f88d b010 	strb.w	fp, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1259e:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   125a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   125a4:	f88d b042 	strb.w	fp, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   125a8:	462a      	mov	r2, r5
   125aa:	a90c      	add	r1, sp, #48	; 0x30
   125ac:	4640      	mov	r0, r8
   125ae:	4798      	blx	r3
   125b0:	2800      	cmp	r0, #0
   125b2:	d1c5      	bne.n	12540 <gatt_read_type_rsp+0xc4>
   125b4:	e7e3      	b.n	1257e <gatt_read_type_rsp+0x102>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   125b6:	2a03      	cmp	r2, #3
   125b8:	d16a      	bne.n	12690 <gatt_read_type_rsp+0x214>
	switch (rsp->len) {
   125ba:	783c      	ldrb	r4, [r7, #0]
   125bc:	2c07      	cmp	r4, #7
   125be:	d00b      	beq.n	125d8 <gatt_read_type_rsp+0x15c>
   125c0:	2c15      	cmp	r4, #21
   125c2:	d02d      	beq.n	12620 <gatt_read_type_rsp+0x1a4>
		BT_ERR("Invalid data len %u", rsp->len);
   125c4:	4865      	ldr	r0, [pc, #404]	; (1275c <gatt_read_type_rsp+0x2e0>)
   125c6:	6803      	ldr	r3, [r0, #0]
   125c8:	075b      	lsls	r3, r3, #29
   125ca:	d097      	beq.n	124fc <gatt_read_type_rsp+0x80>
   125cc:	4b64      	ldr	r3, [pc, #400]	; (12760 <gatt_read_type_rsp+0x2e4>)
   125ce:	9207      	str	r2, [sp, #28]
	switch (rsp->len) {
   125d0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
   125d4:	920f      	str	r2, [sp, #60]	; 0x3c
   125d6:	e78c      	b.n	124f2 <gatt_read_type_rsp+0x76>
		u.uuid.type = BT_UUID_TYPE_16;
   125d8:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
   125dc:	1e5c      	subs	r4, r3, #1
   125de:	b2a4      	uxth	r4, r4
   125e0:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   125e4:	2600      	movs	r6, #0
   125e6:	f10d 0a1c 	add.w	sl, sp, #28
	for (length--, pdu = rsp->data; length >= rsp->len;
   125ea:	783b      	ldrb	r3, [r7, #0]
   125ec:	42a3      	cmp	r3, r4
   125ee:	f63f af69 	bhi.w	124c4 <gatt_read_type_rsp+0x48>
		handle = sys_le16_to_cpu(data->handle);
   125f2:	f8b9 b000 	ldrh.w	fp, [r9]
   125f6:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   125fa:	2e00      	cmp	r6, #0
   125fc:	f43f af7e 	beq.w	124fc <gatt_read_type_rsp+0x80>
		switch (u.uuid.type) {
   12600:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12604:	b183      	cbz	r3, 12628 <gatt_read_type_rsp+0x1ac>
   12606:	2b02      	cmp	r3, #2
   12608:	d017      	beq.n	1263a <gatt_read_type_rsp+0x1be>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1260a:	6829      	ldr	r1, [r5, #0]
   1260c:	b1e9      	cbz	r1, 1264a <gatt_read_type_rsp+0x1ce>
   1260e:	4650      	mov	r0, sl
   12610:	f017 ff6c 	bl	2a4ec <bt_uuid_cmp>
   12614:	b1c8      	cbz	r0, 1264a <gatt_read_type_rsp+0x1ce>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   12616:	783a      	ldrb	r2, [r7, #0]
   12618:	1aa4      	subs	r4, r4, r2
   1261a:	b2a4      	uxth	r4, r4
   1261c:	4491      	add	r9, r2
   1261e:	e7e4      	b.n	125ea <gatt_read_type_rsp+0x16e>
		u.uuid.type = BT_UUID_TYPE_128;
   12620:	2202      	movs	r2, #2
   12622:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
   12626:	e7d9      	b.n	125dc <gatt_read_type_rsp+0x160>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   12628:	f899 3005 	ldrb.w	r3, [r9, #5]
   1262c:	f899 2006 	ldrb.w	r2, [r9, #6]
   12630:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12634:	f8ad 301e 	strh.w	r3, [sp, #30]
			break;
   12638:	e7e7      	b.n	1260a <gatt_read_type_rsp+0x18e>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1263a:	2210      	movs	r2, #16
   1263c:	f109 0105 	add.w	r1, r9, #5
   12640:	f10d 001d 	add.w	r0, sp, #29
   12644:	f017 fe8a 	bl	2a35c <memcpy>
			break;
   12648:	e7df      	b.n	1260a <gatt_read_type_rsp+0x18e>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1264a:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   1264e:	f899 3002 	ldrb.w	r3, [r9, #2]
   12652:	f8ad 2018 	strh.w	r2, [sp, #24]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   12656:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1265a:	f88d 301a 	strb.w	r3, [sp, #26]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1265e:	f8ad 2012 	strh.w	r2, [sp, #18]
   12662:	2300      	movs	r3, #0
   12664:	aa04      	add	r2, sp, #16
   12666:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1266a:	aa05      	add	r2, sp, #20
   1266c:	f88d 3010 	strb.w	r3, [sp, #16]
   12670:	930e      	str	r3, [sp, #56]	; 0x38
   12672:	920f      	str	r2, [sp, #60]	; 0x3c
   12674:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   12678:	f8cd a014 	str.w	sl, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1267c:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
   1267e:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   12682:	462a      	mov	r2, r5
   12684:	a90c      	add	r1, sp, #48	; 0x30
   12686:	4640      	mov	r0, r8
   12688:	4798      	blx	r3
   1268a:	2800      	cmp	r0, #0
   1268c:	d1c3      	bne.n	12616 <gatt_read_type_rsp+0x19a>
   1268e:	e776      	b.n	1257e <gatt_read_type_rsp+0x102>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   12690:	682a      	ldr	r2, [r5, #0]
   12692:	7816      	ldrb	r6, [r2, #0]
   12694:	b976      	cbnz	r6, 126b4 <gatt_read_type_rsp+0x238>
	uuid_val = BT_UUID_16(params->uuid)->val;
   12696:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   12698:	1e5c      	subs	r4, r3, #1
   1269a:	b2a4      	uxth	r4, r4
   1269c:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   126a0:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   126a4:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   126a6:	783b      	ldrb	r3, [r7, #0]
   126a8:	42a3      	cmp	r3, r4
   126aa:	d908      	bls.n	126be <gatt_read_type_rsp+0x242>
	if (length == 0U && handle) {
   126ac:	b914      	cbnz	r4, 126b4 <gatt_read_type_rsp+0x238>
   126ae:	2e00      	cmp	r6, #0
   126b0:	f47f af0a 	bne.w	124c8 <gatt_read_type_rsp+0x4c>
	params->func(conn, NULL, params);
   126b4:	686b      	ldr	r3, [r5, #4]
   126b6:	462a      	mov	r2, r5
   126b8:	2100      	movs	r1, #0
   126ba:	4640      	mov	r0, r8
   126bc:	e6e8      	b.n	12490 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   126be:	f8b9 2000 	ldrh.w	r2, [r9]
   126c2:	b296      	uxth	r6, r2
		if (!handle) {
   126c4:	2e00      	cmp	r6, #0
   126c6:	d0f5      	beq.n	126b4 <gatt_read_type_rsp+0x238>
		switch (uuid_val) {
   126c8:	f1bb 0f04 	cmp.w	fp, #4
   126cc:	d8f2      	bhi.n	126b4 <gatt_read_type_rsp+0x238>
   126ce:	a301      	add	r3, pc, #4	; (adr r3, 126d4 <gatt_read_type_rsp+0x258>)
   126d0:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   126d4:	000126e9 	.word	0x000126e9
   126d8:	000126b5 	.word	0x000126b5
   126dc:	000126e9 	.word	0x000126e9
   126e0:	000126e9 	.word	0x000126e9
   126e4:	00012721 	.word	0x00012721
			value.scc.flags = sys_get_le16(data->value);
   126e8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   126ec:	f8ad 301c 	strh.w	r3, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   126f0:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   126f2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   126f6:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
   126fa:	ab07      	add	r3, sp, #28
   126fc:	930f      	str	r3, [sp, #60]	; 0x3c
   126fe:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   12702:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   12704:	f88d a042 	strb.w	sl, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   12708:	462a      	mov	r2, r5
   1270a:	a90c      	add	r1, sp, #48	; 0x30
   1270c:	4640      	mov	r0, r8
   1270e:	4798      	blx	r3
   12710:	2800      	cmp	r0, #0
   12712:	f43f af34 	beq.w	1257e <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   12716:	783a      	ldrb	r2, [r7, #0]
   12718:	1aa4      	subs	r4, r4, r2
   1271a:	b2a4      	uxth	r4, r4
   1271c:	4491      	add	r9, r2
   1271e:	e7c2      	b.n	126a6 <gatt_read_type_rsp+0x22a>
			value.cpf.format = cpf->format;
   12720:	f899 3002 	ldrb.w	r3, [r9, #2]
   12724:	f88d 301c 	strb.w	r3, [sp, #28]
			value.cpf.exponent = cpf->exponent;
   12728:	f899 3003 	ldrb.w	r3, [r9, #3]
   1272c:	f88d 301d 	strb.w	r3, [sp, #29]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   12730:	f899 1005 	ldrb.w	r1, [r9, #5]
   12734:	f899 3004 	ldrb.w	r3, [r9, #4]
   12738:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1273c:	f8ad 301e 	strh.w	r3, [sp, #30]
			value.cpf.name_space = cpf->name_space;
   12740:	f899 3006 	ldrb.w	r3, [r9, #6]
   12744:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   12748:	f899 3007 	ldrb.w	r3, [r9, #7]
   1274c:	f899 1008 	ldrb.w	r1, [r9, #8]
   12750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   12754:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   12758:	e7ca      	b.n	126f0 <gatt_read_type_rsp+0x274>
   1275a:	bf00      	nop
   1275c:	20000a44 	.word	0x20000a44
   12760:	00033e76 	.word	0x00033e76
   12764:	0001276d 	.word	0x0001276d
   12768:	0002b863 	.word	0x0002b863

0001276c <read_included_uuid_cb>:
{
   1276c:	b570      	push	{r4, r5, r6, lr}
   1276e:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   12770:	2b10      	cmp	r3, #16
{
   12772:	4611      	mov	r1, r2
   12774:	9c12      	ldr	r4, [sp, #72]	; 0x48
   12776:	4605      	mov	r5, r0
   12778:	461a      	mov	r2, r3
	if (length != 16U) {
   1277a:	d016      	beq.n	127aa <read_included_uuid_cb+0x3e>
		BT_ERR("Invalid data len %u", length);
   1277c:	4826      	ldr	r0, [pc, #152]	; (12818 <read_included_uuid_cb+0xac>)
   1277e:	6803      	ldr	r3, [r0, #0]
   12780:	075b      	lsls	r3, r3, #29
   12782:	d00a      	beq.n	1279a <read_included_uuid_cb+0x2e>
   12784:	4b25      	ldr	r3, [pc, #148]	; (1281c <read_included_uuid_cb+0xb0>)
   12786:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1278a:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   1278e:	2303      	movs	r3, #3
   12790:	aa0b      	add	r2, sp, #44	; 0x2c
   12792:	9303      	str	r3, [sp, #12]
   12794:	930b      	str	r3, [sp, #44]	; 0x2c
   12796:	f019 f900 	bl	2b99a <z_log_msg2_static_create.constprop.0>
		params->func(conn, NULL, params);
   1279a:	6863      	ldr	r3, [r4, #4]
   1279c:	4622      	mov	r2, r4
   1279e:	2100      	movs	r1, #0
   127a0:	4628      	mov	r0, r5
}
   127a2:	b00e      	add	sp, #56	; 0x38
   127a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   127a8:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   127aa:	8963      	ldrh	r3, [r4, #10]
   127ac:	f8ad 3008 	strh.w	r3, [sp, #8]
	value.end_handle = params->_included.end_handle;
   127b0:	89a3      	ldrh	r3, [r4, #12]
   127b2:	f8ad 300a 	strh.w	r3, [sp, #10]
	value.uuid = &u.uuid;
   127b6:	ae03      	add	r6, sp, #12
	u.uuid.type = BT_UUID_TYPE_128;
   127b8:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   127ba:	f10d 000d 	add.w	r0, sp, #13
	value.uuid = &u.uuid;
   127be:	9601      	str	r6, [sp, #4]
	u.uuid.type = BT_UUID_TYPE_128;
   127c0:	f88d 300c 	strb.w	r3, [sp, #12]
	memcpy(u.u128.val, pdu, length);
   127c4:	f017 fdca 	bl	2a35c <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   127c8:	6821      	ldr	r1, [r4, #0]
   127ca:	b9c9      	cbnz	r1, 12800 <read_included_uuid_cb+0x94>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   127cc:	2300      	movs	r3, #0
   127ce:	f642 0202 	movw	r2, #10242	; 0x2802
   127d2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   127d6:	f88d 3000 	strb.w	r3, [sp]
   127da:	f8ad 2002 	strh.w	r2, [sp, #2]
   127de:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   127e2:	aa01      	add	r2, sp, #4
	attr.handle = params->_included.attr_handle;
   127e4:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   127e6:	920b      	str	r2, [sp, #44]	; 0x2c
	attr.handle = params->_included.attr_handle;
   127e8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   127ec:	f8cd d020 	str.w	sp, [sp, #32]
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   127f0:	6863      	ldr	r3, [r4, #4]
   127f2:	4622      	mov	r2, r4
   127f4:	a908      	add	r1, sp, #32
   127f6:	4628      	mov	r0, r5
   127f8:	4798      	blx	r3
   127fa:	b930      	cbnz	r0, 1280a <read_included_uuid_cb+0x9e>
}
   127fc:	b00e      	add	sp, #56	; 0x38
   127fe:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   12800:	4630      	mov	r0, r6
   12802:	f017 fe73 	bl	2a4ec <bt_uuid_cmp>
   12806:	2800      	cmp	r0, #0
   12808:	d0e0      	beq.n	127cc <read_included_uuid_cb+0x60>
	gatt_discover_next(conn, params->start_handle, params);
   1280a:	8921      	ldrh	r1, [r4, #8]
   1280c:	4622      	mov	r2, r4
   1280e:	4628      	mov	r0, r5
   12810:	f019 fb03 	bl	2be1a <gatt_discover_next>
	return;
   12814:	e7f2      	b.n	127fc <read_included_uuid_cb+0x90>
   12816:	bf00      	nop
   12818:	20000a44 	.word	0x20000a44
   1281c:	00033e76 	.word	0x00033e76

00012820 <gatt_find_info_rsp>:
{
   12820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12824:	b091      	sub	sp, #68	; 0x44
   12826:	4680      	mov	r8, r0
   12828:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
   1282a:	b999      	cbnz	r1, 12854 <gatt_find_info_rsp+0x34>
	switch (rsp->format) {
   1282c:	7814      	ldrb	r4, [r2, #0]
   1282e:	2c01      	cmp	r4, #1
   12830:	d016      	beq.n	12860 <gatt_find_info_rsp+0x40>
   12832:	2c02      	cmp	r4, #2
   12834:	d02d      	beq.n	12892 <gatt_find_info_rsp+0x72>
		BT_ERR("Invalid format %u", rsp->format);
   12836:	4851      	ldr	r0, [pc, #324]	; (1297c <gatt_find_info_rsp+0x15c>)
   12838:	6803      	ldr	r3, [r0, #0]
   1283a:	075b      	lsls	r3, r3, #29
   1283c:	d00a      	beq.n	12854 <gatt_find_info_rsp+0x34>
   1283e:	4b50      	ldr	r3, [pc, #320]	; (12980 <gatt_find_info_rsp+0x160>)
   12840:	aa0d      	add	r2, sp, #52	; 0x34
	switch (rsp->format) {
   12842:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
		BT_ERR("Invalid format %u", rsp->format);
   12846:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1284a:	2303      	movs	r3, #3
   1284c:	9305      	str	r3, [sp, #20]
   1284e:	930d      	str	r3, [sp, #52]	; 0x34
   12850:	f019 f8a3 	bl	2b99a <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
   12854:	6873      	ldr	r3, [r6, #4]
   12856:	4632      	mov	r2, r6
   12858:	2100      	movs	r1, #0
   1285a:	4640      	mov	r0, r8
   1285c:	4798      	blx	r3
   1285e:	e08a      	b.n	12976 <gatt_find_info_rsp+0x156>
		u.uuid.type = BT_UUID_TYPE_16;
   12860:	f88d 1014 	strb.w	r1, [sp, #20]
		len = sizeof(*info.i16);
   12864:	f04f 0a04 	mov.w	sl, #4
	length--;
   12868:	3b01      	subs	r3, #1
   1286a:	b29b      	uxth	r3, r3
	if (length < len) {
   1286c:	4553      	cmp	r3, sl
   1286e:	d3f1      	bcc.n	12854 <gatt_find_info_rsp+0x34>
	for (i = length / len, pdu = rsp->info; i != 0;
   12870:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   12874:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   12878:	9300      	str	r3, [sp, #0]
   1287a:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   1287c:	46cb      	mov	fp, r9
			skip = false;
   1287e:	464d      	mov	r5, r9
   12880:	af05      	add	r7, sp, #20
	for (i = length / len, pdu = rsp->info; i != 0;
   12882:	9b00      	ldr	r3, [sp, #0]
   12884:	b953      	cbnz	r3, 1289c <gatt_find_info_rsp+0x7c>
	gatt_discover_next(conn, handle, params);
   12886:	4632      	mov	r2, r6
   12888:	4659      	mov	r1, fp
   1288a:	4640      	mov	r0, r8
   1288c:	f019 fac5 	bl	2be1a <gatt_discover_next>
	return;
   12890:	e071      	b.n	12976 <gatt_find_info_rsp+0x156>
		u.uuid.type = BT_UUID_TYPE_128;
   12892:	f88d 4014 	strb.w	r4, [sp, #20]
		len = sizeof(*info.i128);
   12896:	f04f 0a12 	mov.w	sl, #18
		break;
   1289a:	e7e5      	b.n	12868 <gatt_find_info_rsp+0x48>
		handle = sys_le16_to_cpu(info.i16->handle);
   1289c:	8823      	ldrh	r3, [r4, #0]
   1289e:	9301      	str	r3, [sp, #4]
   128a0:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   128a4:	f1b9 0f00 	cmp.w	r9, #0
   128a8:	d151      	bne.n	1294e <gatt_find_info_rsp+0x12e>
		switch (u.uuid.type) {
   128aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   128ae:	2b00      	cmp	r3, #0
   128b0:	d03a      	beq.n	12928 <gatt_find_info_rsp+0x108>
   128b2:	2b02      	cmp	r3, #2
   128b4:	d03f      	beq.n	12936 <gatt_find_info_rsp+0x116>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   128b6:	6831      	ldr	r1, [r6, #0]
   128b8:	2900      	cmp	r1, #0
   128ba:	d143      	bne.n	12944 <gatt_find_info_rsp+0x124>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   128bc:	7c33      	ldrb	r3, [r6, #16]
   128be:	2b04      	cmp	r3, #4
   128c0:	d148      	bne.n	12954 <gatt_find_info_rsp+0x134>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   128c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   128c6:	a903      	add	r1, sp, #12
   128c8:	4638      	mov	r0, r7
   128ca:	f88d 500c 	strb.w	r5, [sp, #12]
   128ce:	f8ad 300e 	strh.w	r3, [sp, #14]
   128d2:	f017 fe0b 	bl	2a4ec <bt_uuid_cmp>
   128d6:	b310      	cbz	r0, 1291e <gatt_find_info_rsp+0xfe>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   128d8:	f642 0301 	movw	r3, #10241	; 0x2801
   128dc:	a904      	add	r1, sp, #16
   128de:	4638      	mov	r0, r7
   128e0:	f88d 5010 	strb.w	r5, [sp, #16]
   128e4:	f8ad 3012 	strh.w	r3, [sp, #18]
   128e8:	f017 fe00 	bl	2a4ec <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   128ec:	b1b8      	cbz	r0, 1291e <gatt_find_info_rsp+0xfe>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   128ee:	f642 0302 	movw	r3, #10242	; 0x2802
   128f2:	a90a      	add	r1, sp, #40	; 0x28
   128f4:	4638      	mov	r0, r7
   128f6:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   128fa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
   128fe:	f017 fdf5 	bl	2a4ec <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   12902:	b160      	cbz	r0, 1291e <gatt_find_info_rsp+0xfe>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   12904:	f642 0303 	movw	r3, #10243	; 0x2803
   12908:	a90a      	add	r1, sp, #40	; 0x28
   1290a:	4638      	mov	r0, r7
   1290c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   12910:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
   12914:	f017 fdea 	bl	2a4ec <bt_uuid_cmp>
   12918:	b9e0      	cbnz	r0, 12954 <gatt_find_info_rsp+0x134>
				skip = true;
   1291a:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   1291e:	9b00      	ldr	r3, [sp, #0]
   12920:	3b01      	subs	r3, #1
   12922:	9300      	str	r3, [sp, #0]
   12924:	4454      	add	r4, sl
   12926:	e7ac      	b.n	12882 <gatt_find_info_rsp+0x62>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   12928:	78a3      	ldrb	r3, [r4, #2]
   1292a:	78e2      	ldrb	r2, [r4, #3]
   1292c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12930:	f8ad 3016 	strh.w	r3, [sp, #22]
			break;
   12934:	e7bf      	b.n	128b6 <gatt_find_info_rsp+0x96>
			memcpy(u.u128.val, info.i128->uuid, 16);
   12936:	2210      	movs	r2, #16
   12938:	1ca1      	adds	r1, r4, #2
   1293a:	f10d 0015 	add.w	r0, sp, #21
   1293e:	f017 fd0d 	bl	2a35c <memcpy>
			break;
   12942:	e7b8      	b.n	128b6 <gatt_find_info_rsp+0x96>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   12944:	4638      	mov	r0, r7
   12946:	f017 fdd1 	bl	2a4ec <bt_uuid_cmp>
   1294a:	2800      	cmp	r0, #0
   1294c:	d0b6      	beq.n	128bc <gatt_find_info_rsp+0x9c>
			skip = false;
   1294e:	f04f 0900 	mov.w	r9, #0
   12952:	e7e4      	b.n	1291e <gatt_find_info_rsp+0xfe>
		attr.handle = handle;
   12954:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12958:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1295c:	e9cd 750a 	strd	r7, r5, [sp, #40]	; 0x28
   12960:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   12964:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   12966:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1296a:	4632      	mov	r2, r6
   1296c:	a90a      	add	r1, sp, #40	; 0x28
   1296e:	4640      	mov	r0, r8
   12970:	4798      	blx	r3
   12972:	2800      	cmp	r0, #0
   12974:	d1d3      	bne.n	1291e <gatt_find_info_rsp+0xfe>
}
   12976:	b011      	add	sp, #68	; 0x44
   12978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1297c:	20000a44 	.word	0x20000a44
   12980:	00033e8a 	.word	0x00033e8a

00012984 <bt_gatt_write>:
{
   12984:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   12986:	7b43      	ldrb	r3, [r0, #13]
   12988:	2b07      	cmp	r3, #7
{
   1298a:	4605      	mov	r5, r0
   1298c:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1298e:	d125      	bne.n	129dc <bt_gatt_write+0x58>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   12990:	88cb      	ldrh	r3, [r1, #6]
   12992:	b1ab      	cbz	r3, 129c0 <bt_gatt_write+0x3c>
	len = bt_att_get_mtu(conn) - req_len - 1;
   12994:	4628      	mov	r0, r5
   12996:	f018 fd42 	bl	2b41e <bt_att_get_mtu>
   1299a:	1f43      	subs	r3, r0, #5
   1299c:	b298      	uxth	r0, r3
	len = MIN(params->length, len);
   1299e:	89a3      	ldrh	r3, [r4, #12]
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   129a0:	4910      	ldr	r1, [pc, #64]	; (129e4 <bt_gatt_write+0x60>)
	len = MIN(params->length, len);
   129a2:	4283      	cmp	r3, r0
   129a4:	bf28      	it	cs
   129a6:	4603      	movcs	r3, r0
	len += req_len;
   129a8:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   129aa:	b29b      	uxth	r3, r3
   129ac:	9301      	str	r3, [sp, #4]
   129ae:	2316      	movs	r3, #22
   129b0:	9300      	str	r3, [sp, #0]
   129b2:	4b0d      	ldr	r3, [pc, #52]	; (129e8 <bt_gatt_write+0x64>)
   129b4:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   129b6:	4628      	mov	r0, r5
   129b8:	f018 ff19 	bl	2b7ee <gatt_req_send>
}
   129bc:	b002      	add	sp, #8
   129be:	bd70      	pop	{r4, r5, r6, pc}
	len = sizeof(struct bt_att_write_req) + params->length;
   129c0:	898e      	ldrh	r6, [r1, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   129c2:	f018 fd2c 	bl	2b41e <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
   129c6:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   129c8:	3801      	subs	r0, #1
   129ca:	42b0      	cmp	r0, r6
   129cc:	d3e2      	bcc.n	12994 <bt_gatt_write+0x10>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   129ce:	2312      	movs	r3, #18
   129d0:	9300      	str	r3, [sp, #0]
   129d2:	4906      	ldr	r1, [pc, #24]	; (129ec <bt_gatt_write+0x68>)
   129d4:	4b06      	ldr	r3, [pc, #24]	; (129f0 <bt_gatt_write+0x6c>)
   129d6:	9601      	str	r6, [sp, #4]
   129d8:	4622      	mov	r2, r4
   129da:	e7ec      	b.n	129b6 <bt_gatt_write+0x32>
		return -ENOTCONN;
   129dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   129e0:	e7ec      	b.n	129bc <bt_gatt_write+0x38>
   129e2:	bf00      	nop
   129e4:	000129f5 	.word	0x000129f5
   129e8:	0002b95b 	.word	0x0002b95b
   129ec:	0002b679 	.word	0x0002b679
   129f0:	0002b91f 	.word	0x0002b91f

000129f4 <gatt_prepare_write_rsp>:
{
   129f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   129f6:	b08b      	sub	sp, #44	; 0x2c
   129f8:	4606      	mov	r6, r0
   129fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
   129fc:	4617      	mov	r7, r2
	if (err) {
   129fe:	b129      	cbz	r1, 12a0c <gatt_prepare_write_rsp+0x18>
		params->func(conn, err, params);
   12a00:	6823      	ldr	r3, [r4, #0]
   12a02:	4622      	mov	r2, r4
}
   12a04:	b00b      	add	sp, #44	; 0x2c
   12a06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   12a0a:	4718      	bx	r3
	len = length - sizeof(*rsp);
   12a0c:	1f1d      	subs	r5, r3, #4
	if (len > params->length) {
   12a0e:	89a3      	ldrh	r3, [r4, #12]
   12a10:	429d      	cmp	r5, r3
   12a12:	d91d      	bls.n	12a50 <gatt_prepare_write_rsp+0x5c>
		BT_ERR("Incorrect length, canceling write");
   12a14:	4822      	ldr	r0, [pc, #136]	; (12aa0 <gatt_prepare_write_rsp+0xac>)
   12a16:	6803      	ldr	r3, [r0, #0]
   12a18:	075d      	lsls	r5, r3, #29
   12a1a:	d009      	beq.n	12a30 <gatt_prepare_write_rsp+0x3c>
   12a1c:	4b21      	ldr	r3, [pc, #132]	; (12aa4 <gatt_prepare_write_rsp+0xb0>)
   12a1e:	9308      	str	r3, [sp, #32]
   12a20:	aa07      	add	r2, sp, #28
   12a22:	2302      	movs	r3, #2
   12a24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a28:	9303      	str	r3, [sp, #12]
   12a2a:	9307      	str	r3, [sp, #28]
   12a2c:	f018 ffb5 	bl	2b99a <z_log_msg2_static_create.constprop.0>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
   12a30:	2318      	movs	r3, #24
   12a32:	2001      	movs	r0, #1
   12a34:	e9cd 3000 	strd	r3, r0, [sp]
   12a38:	4b1b      	ldr	r3, [pc, #108]	; (12aa8 <gatt_prepare_write_rsp+0xb4>)
   12a3a:	491c      	ldr	r1, [pc, #112]	; (12aac <gatt_prepare_write_rsp+0xb8>)
   12a3c:	4622      	mov	r2, r4
   12a3e:	4630      	mov	r0, r6
   12a40:	f018 fed5 	bl	2b7ee <gatt_req_send>
		if (gatt_cancel_all_writes(conn, params)) {
   12a44:	b350      	cbz	r0, 12a9c <gatt_prepare_write_rsp+0xa8>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   12a46:	6823      	ldr	r3, [r4, #0]
   12a48:	4622      	mov	r2, r4
   12a4a:	210e      	movs	r1, #14
   12a4c:	4630      	mov	r0, r6
   12a4e:	e7d9      	b.n	12a04 <gatt_prepare_write_rsp+0x10>
	data_valid = memcmp(params->data, rsp->value, len) == 0;
   12a50:	462a      	mov	r2, r5
   12a52:	68a0      	ldr	r0, [r4, #8]
   12a54:	1d39      	adds	r1, r7, #4
   12a56:	f017 fc58 	bl	2a30a <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
   12a5a:	88e2      	ldrh	r2, [r4, #6]
   12a5c:	887b      	ldrh	r3, [r7, #2]
   12a5e:	4293      	cmp	r3, r2
   12a60:	d100      	bne.n	12a64 <gatt_prepare_write_rsp+0x70>
   12a62:	b128      	cbz	r0, 12a70 <gatt_prepare_write_rsp+0x7c>
		BT_ERR("Incorrect offset or data in response, canceling write");
   12a64:	480e      	ldr	r0, [pc, #56]	; (12aa0 <gatt_prepare_write_rsp+0xac>)
   12a66:	6803      	ldr	r3, [r0, #0]
   12a68:	0759      	lsls	r1, r3, #29
   12a6a:	d0e1      	beq.n	12a30 <gatt_prepare_write_rsp+0x3c>
   12a6c:	4b10      	ldr	r3, [pc, #64]	; (12ab0 <gatt_prepare_write_rsp+0xbc>)
   12a6e:	e7d6      	b.n	12a1e <gatt_prepare_write_rsp+0x2a>
	params->offset += len;
   12a70:	fa13 f385 	uxtah	r3, r3, r5
   12a74:	80e3      	strh	r3, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
   12a76:	68a3      	ldr	r3, [r4, #8]
   12a78:	442b      	add	r3, r5
   12a7a:	60a3      	str	r3, [r4, #8]
	params->length -= len;
   12a7c:	89a3      	ldrh	r3, [r4, #12]
   12a7e:	1b5d      	subs	r5, r3, r5
   12a80:	b2ad      	uxth	r5, r5
   12a82:	81a5      	strh	r5, [r4, #12]
	if (!params->length) {
   12a84:	b92d      	cbnz	r5, 12a92 <gatt_prepare_write_rsp+0x9e>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
   12a86:	2318      	movs	r3, #24
   12a88:	2201      	movs	r2, #1
   12a8a:	e9cd 3200 	strd	r3, r2, [sp]
   12a8e:	4b09      	ldr	r3, [pc, #36]	; (12ab4 <gatt_prepare_write_rsp+0xc0>)
   12a90:	e7d3      	b.n	12a3a <gatt_prepare_write_rsp+0x46>
	if (!bt_gatt_write(conn, params)) {
   12a92:	4621      	mov	r1, r4
   12a94:	4630      	mov	r0, r6
   12a96:	f7ff ff75 	bl	12984 <bt_gatt_write>
   12a9a:	e7d3      	b.n	12a44 <gatt_prepare_write_rsp+0x50>
}
   12a9c:	b00b      	add	sp, #44	; 0x2c
   12a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12aa0:	20000a44 	.word	0x20000a44
   12aa4:	00033e9c 	.word	0x00033e9c
   12aa8:	0002b88f 	.word	0x0002b88f
   12aac:	0002b679 	.word	0x0002b679
   12ab0:	00033ebe 	.word	0x00033ebe
   12ab4:	0002b8a1 	.word	0x0002b8a1

00012ab8 <bt_gatt_mult_notification>:
{
   12ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12abc:	b087      	sub	sp, #28
   12abe:	af00      	add	r7, sp, #0
   12ac0:	4681      	mov	r9, r0
   12ac2:	460c      	mov	r4, r1
   12ac4:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
   12ac6:	f7fe fdc3 	bl	11650 <gatt_sub_find>
	if (!sub) {
   12aca:	4606      	mov	r6, r0
   12acc:	b340      	cbz	r0, 12b20 <bt_gatt_mult_notification+0x68>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   12ace:	4652      	mov	r2, sl
   12ad0:	4621      	mov	r1, r4
   12ad2:	f107 000c 	add.w	r0, r7, #12
   12ad6:	f019 ff61 	bl	2c99c <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   12ada:	8a3b      	ldrh	r3, [r7, #16]
   12adc:	2b04      	cmp	r3, #4
   12ade:	d91f      	bls.n	12b20 <bt_gatt_mult_notification+0x68>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   12ae0:	2104      	movs	r1, #4
   12ae2:	f107 000c 	add.w	r0, r7, #12
   12ae6:	f019 ffd3 	bl	2ca90 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   12aea:	8a39      	ldrh	r1, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
   12aec:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
   12af0:	4541      	cmp	r1, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   12af2:	4602      	mov	r2, r0
		if (len > buf.len) {
   12af4:	d218      	bcs.n	12b28 <bt_gatt_mult_notification+0x70>
			BT_ERR("Invalid data len %u > %u", len, length);
   12af6:	4820      	ldr	r0, [pc, #128]	; (12b78 <bt_gatt_mult_notification+0xc0>)
   12af8:	6802      	ldr	r2, [r0, #0]
   12afa:	0753      	lsls	r3, r2, #29
   12afc:	d010      	beq.n	12b20 <bt_gatt_mult_notification+0x68>
   12afe:	466c      	mov	r4, sp
   12b00:	b088      	sub	sp, #32
   12b02:	466a      	mov	r2, sp
   12b04:	491d      	ldr	r1, [pc, #116]	; (12b7c <bt_gatt_mult_notification+0xc4>)
   12b06:	f8c2 a018 	str.w	sl, [r2, #24]
   12b0a:	2304      	movs	r3, #4
   12b0c:	e9c2 1804 	strd	r1, r8, [r2, #16]
   12b10:	f842 3f0c 	str.w	r3, [r2, #12]!
   12b14:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12b18:	60bb      	str	r3, [r7, #8]
   12b1a:	f018 ff3e 	bl	2b99a <z_log_msg2_static_create.constprop.0>
   12b1e:	46a5      	mov	sp, r4
}
   12b20:	371c      	adds	r7, #28
   12b22:	46bd      	mov	sp, r7
   12b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   12b28:	68b4      	ldr	r4, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   12b2a:	b1f4      	cbz	r4, 12b6a <bt_gatt_mult_notification+0xb2>
	return node->next;
   12b2c:	f854 5914 	ldr.w	r5, [r4], #-20
   12b30:	b105      	cbz	r5, 12b34 <bt_gatt_mult_notification+0x7c>
   12b32:	3d14      	subs	r5, #20
		handle = sys_cpu_to_le16(nfy->handle);
   12b34:	4693      	mov	fp, r2
   12b36:	f83b 3b04 	ldrh.w	r3, [fp], #4
   12b3a:	607b      	str	r3, [r7, #4]
			if (handle != params->value_handle) {
   12b3c:	8921      	ldrh	r1, [r4, #8]
   12b3e:	687b      	ldr	r3, [r7, #4]
   12b40:	4299      	cmp	r1, r3
   12b42:	d10b      	bne.n	12b5c <bt_gatt_mult_notification+0xa4>
			if (params->notify(conn, params, nfy->value, len) ==
   12b44:	f8d4 c000 	ldr.w	ip, [r4]
   12b48:	4643      	mov	r3, r8
   12b4a:	465a      	mov	r2, fp
   12b4c:	4621      	mov	r1, r4
   12b4e:	4648      	mov	r0, r9
   12b50:	47e0      	blx	ip
   12b52:	b918      	cbnz	r0, 12b5c <bt_gatt_mult_notification+0xa4>
				bt_gatt_unsubscribe(conn, params);
   12b54:	4621      	mov	r1, r4
   12b56:	4648      	mov	r0, r9
   12b58:	f019 f9ea 	bl	2bf30 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   12b5c:	b12d      	cbz	r5, 12b6a <bt_gatt_mult_notification+0xb2>
   12b5e:	6969      	ldr	r1, [r5, #20]
   12b60:	b101      	cbz	r1, 12b64 <bt_gatt_mult_notification+0xac>
   12b62:	3914      	subs	r1, #20
{
   12b64:	462c      	mov	r4, r5
   12b66:	460d      	mov	r5, r1
   12b68:	e7e8      	b.n	12b3c <bt_gatt_mult_notification+0x84>
		net_buf_simple_pull_mem(&buf, len);
   12b6a:	4641      	mov	r1, r8
   12b6c:	f107 000c 	add.w	r0, r7, #12
   12b70:	f019 ff8e 	bl	2ca90 <net_buf_simple_pull_mem>
   12b74:	e7b1      	b.n	12ada <bt_gatt_mult_notification+0x22>
   12b76:	bf00      	nop
   12b78:	20000a44 	.word	0x20000a44
   12b7c:	00033ef4 	.word	0x00033ef4

00012b80 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   12b80:	b570      	push	{r4, r5, r6, lr}
   12b82:	b08a      	sub	sp, #40	; 0x28
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12b88:	4a21      	ldr	r2, [pc, #132]	; (12c10 <bt_gatt_connected+0x90>)
	data.conn = conn;
   12b8a:	9002      	str	r0, [sp, #8]
{
   12b8c:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12b8e:	ab02      	add	r3, sp, #8
	data.sec = BT_SECURITY_L1;
   12b90:	2001      	movs	r0, #1
   12b92:	f88d 000c 	strb.w	r0, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12b96:	f019 f908 	bl	2bdaa <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   12b9a:	4628      	mov	r0, r5
   12b9c:	f017 ffc4 	bl	2ab28 <bt_conn_get_security>
   12ba0:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12ba4:	4288      	cmp	r0, r1
   12ba6:	d214      	bcs.n	12bd2 <bt_gatt_connected+0x52>
		int err = bt_conn_set_security(conn, data.sec);
   12ba8:	4628      	mov	r0, r5
   12baa:	f017 ff8d 	bl	2aac8 <bt_conn_set_security>

		if (err) {
   12bae:	4603      	mov	r3, r0
   12bb0:	b178      	cbz	r0, 12bd2 <bt_gatt_connected+0x52>
			BT_WARN("Failed to set security for bonded peer (%d)",
   12bb2:	4818      	ldr	r0, [pc, #96]	; (12c14 <bt_gatt_connected+0x94>)
   12bb4:	6802      	ldr	r2, [r0, #0]
   12bb6:	f012 0f06 	tst.w	r2, #6
   12bba:	d00a      	beq.n	12bd2 <bt_gatt_connected+0x52>
   12bbc:	4a16      	ldr	r2, [pc, #88]	; (12c18 <bt_gatt_connected+0x98>)
   12bbe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12bc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   12bc6:	2303      	movs	r3, #3
   12bc8:	aa07      	add	r2, sp, #28
   12bca:	9301      	str	r3, [sp, #4]
   12bcc:	9307      	str	r3, [sp, #28]
   12bce:	f018 fee4 	bl	2b99a <z_log_msg2_static_create.constprop.0>
	sub = gatt_sub_find(conn);
   12bd2:	4628      	mov	r0, r5
   12bd4:	f7fe fd3c 	bl	11650 <gatt_sub_find>
	if (!sub) {
   12bd8:	b1b8      	cbz	r0, 12c0a <bt_gatt_connected+0x8a>
	return list->head;
   12bda:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   12bdc:	b1ac      	cbz	r4, 12c0a <bt_gatt_connected+0x8a>
   12bde:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   12be0:	f105 0688 	add.w	r6, r5, #136	; 0x88
   12be4:	7a28      	ldrb	r0, [r5, #8]
   12be6:	4631      	mov	r1, r6
   12be8:	f017 fdba 	bl	2a760 <bt_addr_le_is_bonded>
   12bec:	b148      	cbz	r0, 12c02 <bt_gatt_connected+0x82>
   12bee:	f104 0010 	add.w	r0, r4, #16
   12bf2:	f018 fd44 	bl	2b67e <atomic_get>
   12bf6:	0783      	lsls	r3, r0, #30
   12bf8:	d403      	bmi.n	12c02 <bt_gatt_connected+0x82>
			gatt_write_ccc(conn, params);
   12bfa:	4621      	mov	r1, r4
   12bfc:	4628      	mov	r0, r5
   12bfe:	f7fe fd55 	bl	116ac <gatt_write_ccc>
	return node->next;
   12c02:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   12c04:	b10c      	cbz	r4, 12c0a <bt_gatt_connected+0x8a>
   12c06:	3c14      	subs	r4, #20
   12c08:	e7ec      	b.n	12be4 <bt_gatt_connected+0x64>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   12c0a:	b00a      	add	sp, #40	; 0x28
   12c0c:	bd70      	pop	{r4, r5, r6, pc}
   12c0e:	bf00      	nop
   12c10:	00012081 	.word	0x00012081
   12c14:	20000a44 	.word	0x20000a44
   12c18:	00033f0d 	.word	0x00033f0d

00012c1c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   12c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   12c1e:	4b08      	ldr	r3, [pc, #32]	; (12c40 <bt_gatt_att_max_mtu_changed+0x24>)
   12c20:	681c      	ldr	r4, [r3, #0]
   12c22:	4605      	mov	r5, r0
   12c24:	460e      	mov	r6, r1
   12c26:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12c28:	b14c      	cbz	r4, 12c3e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   12c2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12c2e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   12c30:	b11b      	cbz	r3, 12c3a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   12c32:	463a      	mov	r2, r7
   12c34:	4631      	mov	r1, r6
   12c36:	4628      	mov	r0, r5
   12c38:	4798      	blx	r3
	return node->next;
   12c3a:	6864      	ldr	r4, [r4, #4]
   12c3c:	e7f4      	b.n	12c28 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   12c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c40:	20002ddc 	.word	0x20002ddc

00012c44 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   12c44:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12c46:	4a06      	ldr	r2, [pc, #24]	; (12c60 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   12c48:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12c4a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   12c4c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12c4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   12c52:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12c56:	f019 f8a8 	bl	2bdaa <bt_gatt_foreach_attr>
}
   12c5a:	b003      	add	sp, #12
   12c5c:	f85d fb04 	ldr.w	pc, [sp], #4
   12c60:	00012081 	.word	0x00012081

00012c64 <db_hash_read>:
{
   12c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12c66:	4913      	ldr	r1, [pc, #76]	; (12cb4 <db_hash_read+0x50>)
{
   12c68:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   12c6c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12c6e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   12c72:	461f      	mov	r7, r3
   12c74:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12c76:	f01a fe16 	bl	2d8a6 <k_work_cancel_delayable_sync>
   12c7a:	480f      	ldr	r0, [pc, #60]	; (12cb8 <db_hash_read+0x54>)
   12c7c:	f018 fcff 	bl	2b67e <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   12c80:	0743      	lsls	r3, r0, #29
   12c82:	d401      	bmi.n	12c88 <db_hash_read+0x24>
		db_hash_gen(true);
   12c84:	f7fe ff8e 	bl	11ba4 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
   12c88:	2101      	movs	r1, #1
   12c8a:	4620      	mov	r0, r4
   12c8c:	f019 f9e1 	bl	2c052 <bt_gatt_change_aware>
	if (offset > value_len) {
   12c90:	2e10      	cmp	r6, #16
   12c92:	d80c      	bhi.n	12cae <db_hash_read+0x4a>
	len = MIN(buf_len, value_len - offset);
   12c94:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   12c98:	4908      	ldr	r1, [pc, #32]	; (12cbc <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
   12c9a:	42bc      	cmp	r4, r7
   12c9c:	bfa8      	it	ge
   12c9e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   12ca0:	4622      	mov	r2, r4
   12ca2:	4431      	add	r1, r6
   12ca4:	4628      	mov	r0, r5
   12ca6:	f017 fb59 	bl	2a35c <memcpy>
}
   12caa:	4620      	mov	r0, r4
   12cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12cae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   12cb2:	e7fa      	b.n	12caa <db_hash_read+0x46>
   12cb4:	20001cd0 	.word	0x20001cd0
   12cb8:	20001d48 	.word	0x20001d48
   12cbc:	20001c90 	.word	0x20001c90

00012cc0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   12cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   12cc4:	4a30      	ldr	r2, [pc, #192]	; (12d88 <bt_gatt_disconnected+0xc8>)
   12cc6:	4603      	mov	r3, r0
{
   12cc8:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   12cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12cce:	2001      	movs	r0, #1
   12cd0:	f019 f86b 	bl	2bdaa <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   12cd4:	4620      	mov	r0, r4
   12cd6:	f7fe fcbb 	bl	11650 <gatt_sub_find>
	if (!sub) {
   12cda:	4607      	mov	r7, r0
   12cdc:	b378      	cbz	r0, 12d3e <bt_gatt_disconnected+0x7e>
	return list->head;
   12cde:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   12ce0:	b36d      	cbz	r5, 12d3e <bt_gatt_disconnected+0x7e>
	return node->next;
   12ce2:	f855 6914 	ldr.w	r6, [r5], #-20
   12ce6:	b106      	cbz	r6, 12cea <bt_gatt_disconnected+0x2a>
   12ce8:	3e14      	subs	r6, #20
{
   12cea:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   12cee:	f104 0988 	add.w	r9, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   12cf2:	f107 0a01 	add.w	sl, r7, #1
			params->value = 0U;
   12cf6:	46c3      	mov	fp, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   12cf8:	7a20      	ldrb	r0, [r4, #8]
   12cfa:	4649      	mov	r1, r9
   12cfc:	f017 fd30 	bl	2a760 <bt_addr_le_is_bonded>
   12d00:	b970      	cbnz	r0, 12d20 <bt_gatt_disconnected+0x60>
			params->value = 0U;
   12d02:	f8a5 b00c 	strh.w	fp, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
   12d06:	462b      	mov	r3, r5
   12d08:	4642      	mov	r2, r8
   12d0a:	4639      	mov	r1, r7
   12d0c:	4620      	mov	r0, r4
   12d0e:	f018 fd4f 	bl	2b7b0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   12d12:	b1a6      	cbz	r6, 12d3e <bt_gatt_disconnected+0x7e>
   12d14:	6973      	ldr	r3, [r6, #20]
   12d16:	b103      	cbz	r3, 12d1a <bt_gatt_disconnected+0x5a>
   12d18:	3b14      	subs	r3, #20
{
   12d1a:	4635      	mov	r5, r6
   12d1c:	461e      	mov	r6, r3
   12d1e:	e7eb      	b.n	12cf8 <bt_gatt_disconnected+0x38>
   12d20:	f105 0010 	add.w	r0, r5, #16
   12d24:	f018 fcab 	bl	2b67e <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   12d28:	07c3      	lsls	r3, r0, #31
   12d2a:	d4ea      	bmi.n	12d02 <bt_gatt_disconnected+0x42>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   12d2c:	787b      	ldrb	r3, [r7, #1]
   12d2e:	b11b      	cbz	r3, 12d38 <bt_gatt_disconnected+0x78>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   12d30:	4649      	mov	r1, r9
   12d32:	4650      	mov	r0, sl
   12d34:	f018 fd2d 	bl	2b792 <bt_addr_le_copy>
			prev = &params->node;
   12d38:	f105 0814 	add.w	r8, r5, #20
   12d3c:	e7e9      	b.n	12d12 <bt_gatt_disconnected+0x52>
	cfg = find_cf_cfg(conn);
   12d3e:	4620      	mov	r0, r4
   12d40:	f7fe fc38 	bl	115b4 <find_cf_cfg>
	if (!cfg) {
   12d44:	4605      	mov	r5, r0
   12d46:	b1e0      	cbz	r0, 12d82 <bt_gatt_disconnected+0xc2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12d48:	f104 0688 	add.w	r6, r4, #136	; 0x88
   12d4c:	7a20      	ldrb	r0, [r4, #8]
   12d4e:	4631      	mov	r1, r6
   12d50:	f017 fd06 	bl	2a760 <bt_addr_le_is_bonded>
   12d54:	b920      	cbnz	r0, 12d60 <bt_gatt_disconnected+0xa0>
		clear_cf_cfg(cfg);
   12d56:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   12d58:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   12d5c:	f018 be20 	b.w	2b9a0 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12d60:	1c68      	adds	r0, r5, #1
   12d62:	4631      	mov	r1, r6
   12d64:	350c      	adds	r5, #12
   12d66:	f018 fd14 	bl	2b792 <bt_addr_le_copy>
   12d6a:	f3bf 8f5b 	dmb	ish
   12d6e:	e855 3f00 	ldrex	r3, [r5]
   12d72:	f023 0302 	bic.w	r3, r3, #2
   12d76:	e845 3200 	strex	r2, r3, [r5]
   12d7a:	2a00      	cmp	r2, #0
   12d7c:	d1f7      	bne.n	12d6e <bt_gatt_disconnected+0xae>
   12d7e:	f3bf 8f5b 	dmb	ish
}
   12d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d86:	bf00      	nop
   12d88:	00011929 	.word	0x00011929

00012d8c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   12d8c:	4b10      	ldr	r3, [pc, #64]	; (12dd0 <get_io_capa+0x44>)
   12d8e:	681b      	ldr	r3, [r3, #0]
   12d90:	b1bb      	cbz	r3, 12dc2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   12d92:	681a      	ldr	r2, [r3, #0]
   12d94:	b142      	cbz	r2, 12da8 <get_io_capa+0x1c>
   12d96:	6859      	ldr	r1, [r3, #4]
   12d98:	b131      	cbz	r1, 12da8 <get_io_capa+0x1c>
   12d9a:	6899      	ldr	r1, [r3, #8]
   12d9c:	b911      	cbnz	r1, 12da4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   12d9e:	490d      	ldr	r1, [pc, #52]	; (12dd4 <get_io_capa+0x48>)
   12da0:	7809      	ldrb	r1, [r1, #0]
   12da2:	b939      	cbnz	r1, 12db4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   12da4:	2004      	movs	r0, #4
   12da6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   12da8:	490a      	ldr	r1, [pc, #40]	; (12dd4 <get_io_capa+0x48>)
   12daa:	7809      	ldrb	r1, [r1, #0]
   12dac:	b111      	cbz	r1, 12db4 <get_io_capa+0x28>
   12dae:	b10a      	cbz	r2, 12db4 <get_io_capa+0x28>
   12db0:	6899      	ldr	r1, [r3, #8]
   12db2:	b941      	cbnz	r1, 12dc6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   12db4:	685b      	ldr	r3, [r3, #4]
   12db6:	b943      	cbnz	r3, 12dca <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   12db8:	2a00      	cmp	r2, #0
   12dba:	bf0c      	ite	eq
   12dbc:	2003      	moveq	r0, #3
   12dbe:	2000      	movne	r0, #0
   12dc0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   12dc2:	2003      	movs	r0, #3
   12dc4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   12dc6:	2001      	movs	r0, #1
   12dc8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   12dca:	2002      	movs	r0, #2
	}
}
   12dcc:	4770      	bx	lr
   12dce:	bf00      	nop
   12dd0:	20002cb8 	.word	0x20002cb8
   12dd4:	20004c01 	.word	0x20004c01

00012dd8 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   12dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   12dda:	1d14      	adds	r4, r2, #4
{
   12ddc:	b091      	sub	sp, #68	; 0x44
   12dde:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   12de0:	588b      	ldr	r3, [r1, r2]
   12de2:	9300      	str	r3, [sp, #0]
{
   12de4:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   12de6:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   12de8:	4628      	mov	r0, r5
   12dea:	4621      	mov	r1, r4
   12dec:	f019 f969 	bl	2c0c2 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   12df0:	4631      	mov	r1, r6
   12df2:	2210      	movs	r2, #16
   12df4:	a802      	add	r0, sp, #8
   12df6:	f019 f95a 	bl	2c0ae <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   12dfa:	ab06      	add	r3, sp, #24
   12dfc:	4622      	mov	r2, r4
   12dfe:	4629      	mov	r1, r5
   12e00:	a802      	add	r0, sp, #8
   12e02:	f019 f96d 	bl	2c0e0 <bt_smp_aes_cmac>
	if (err) {
   12e06:	4606      	mov	r6, r0
   12e08:	b180      	cbz	r0, 12e2c <smp_sign_buf+0x54>
		BT_ERR("Data signing failed");
   12e0a:	4812      	ldr	r0, [pc, #72]	; (12e54 <smp_sign_buf+0x7c>)
   12e0c:	6803      	ldr	r3, [r0, #0]
   12e0e:	075b      	lsls	r3, r3, #29
   12e10:	d009      	beq.n	12e26 <smp_sign_buf+0x4e>
   12e12:	4b11      	ldr	r3, [pc, #68]	; (12e58 <smp_sign_buf+0x80>)
   12e14:	930e      	str	r3, [sp, #56]	; 0x38
   12e16:	aa0d      	add	r2, sp, #52	; 0x34
   12e18:	2302      	movs	r3, #2
   12e1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e1e:	9301      	str	r3, [sp, #4]
   12e20:	930d      	str	r3, [sp, #52]	; 0x34
   12e22:	f019 fa18 	bl	2c256 <z_log_msg2_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   12e26:	4630      	mov	r0, r6
   12e28:	b011      	add	sp, #68	; 0x44
   12e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   12e2c:	a806      	add	r0, sp, #24
   12e2e:	2110      	movs	r1, #16
   12e30:	f019 f947 	bl	2c0c2 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   12e34:	2204      	movs	r2, #4
   12e36:	4669      	mov	r1, sp
   12e38:	a807      	add	r0, sp, #28
   12e3a:	f017 fa8f 	bl	2a35c <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   12e3e:	4621      	mov	r1, r4
   12e40:	4628      	mov	r0, r5
   12e42:	f019 f93e 	bl	2c0c2 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   12e46:	220c      	movs	r2, #12
   12e48:	a907      	add	r1, sp, #28
   12e4a:	4638      	mov	r0, r7
   12e4c:	f017 fa86 	bl	2a35c <memcpy>
	return 0;
   12e50:	e7e9      	b.n	12e26 <smp_sign_buf+0x4e>
   12e52:	bf00      	nop
   12e54:	20000a64 	.word	0x20000a64
   12e58:	00033f48 	.word	0x00033f48

00012e5c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   12e5c:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   12e5e:	4b10      	ldr	r3, [pc, #64]	; (12ea0 <bt_smp_accept+0x44>)
{
   12e60:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   12e62:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
{
   12e66:	b089      	sub	sp, #36	; 0x24
		if (smp->chan.chan.conn) {
   12e68:	b938      	cbnz	r0, 12e7a <bt_smp_accept+0x1e>
			continue;
		}

		smp->chan.chan.ops = &ops;
   12e6a:	4a0e      	ldr	r2, [pc, #56]	; (12ea4 <bt_smp_accept+0x48>)
   12e6c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   12e70:	33f0      	adds	r3, #240	; 0xf0
   12e72:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   12e74:	b009      	add	sp, #36	; 0x24
   12e76:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
   12e7a:	480b      	ldr	r0, [pc, #44]	; (12ea8 <bt_smp_accept+0x4c>)
   12e7c:	6803      	ldr	r3, [r0, #0]
   12e7e:	075b      	lsls	r3, r3, #29
   12e80:	d00a      	beq.n	12e98 <bt_smp_accept+0x3c>
   12e82:	4b0a      	ldr	r3, [pc, #40]	; (12eac <bt_smp_accept+0x50>)
   12e84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e88:	e9cd 3206 	strd	r3, r2, [sp, #24]
   12e8c:	2303      	movs	r3, #3
   12e8e:	aa05      	add	r2, sp, #20
   12e90:	9301      	str	r3, [sp, #4]
   12e92:	9305      	str	r3, [sp, #20]
   12e94:	f019 f9df 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   12e98:	f06f 000b 	mvn.w	r0, #11
   12e9c:	e7ea      	b.n	12e74 <bt_smp_accept+0x18>
   12e9e:	bf00      	nop
   12ea0:	20001d50 	.word	0x20001d50
   12ea4:	0002f698 	.word	0x0002f698
   12ea8:	20000a64 	.word	0x20000a64
   12eac:	00033f5c 	.word	0x00033f5c

00012eb0 <smp_chan_get>:
{
   12eb0:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   12eb2:	2106      	movs	r1, #6
{
   12eb4:	b088      	sub	sp, #32
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   12eb6:	f017 ff61 	bl	2ad7c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   12eba:	4604      	mov	r4, r0
   12ebc:	b980      	cbnz	r0, 12ee0 <smp_chan_get+0x30>
		BT_ERR("Unable to find SMP channel");
   12ebe:	480a      	ldr	r0, [pc, #40]	; (12ee8 <smp_chan_get+0x38>)
   12ec0:	6803      	ldr	r3, [r0, #0]
   12ec2:	075b      	lsls	r3, r3, #29
   12ec4:	d009      	beq.n	12eda <smp_chan_get+0x2a>
   12ec6:	4b09      	ldr	r3, [pc, #36]	; (12eec <smp_chan_get+0x3c>)
   12ec8:	9306      	str	r3, [sp, #24]
   12eca:	aa05      	add	r2, sp, #20
   12ecc:	2302      	movs	r3, #2
   12ece:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12ed2:	9301      	str	r3, [sp, #4]
   12ed4:	9305      	str	r3, [sp, #20]
   12ed6:	f019 f9be 	bl	2c256 <z_log_msg2_static_create.constprop.0>
}
   12eda:	4620      	mov	r0, r4
   12edc:	b008      	add	sp, #32
   12ede:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   12ee0:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   12ee4:	e7f9      	b.n	12eda <smp_chan_get+0x2a>
   12ee6:	bf00      	nop
   12ee8:	20000a64 	.word	0x20000a64
   12eec:	00033f81 	.word	0x00033f81

00012ef0 <smp_find>:
{
   12ef0:	4601      	mov	r1, r0
   12ef2:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   12ef4:	4803      	ldr	r0, [pc, #12]	; (12f04 <smp_find+0x14>)
   12ef6:	f019 f9c0 	bl	2c27a <atomic_test_bit>
	return NULL;
   12efa:	2800      	cmp	r0, #0
}
   12efc:	4802      	ldr	r0, [pc, #8]	; (12f08 <smp_find+0x18>)
   12efe:	bf08      	it	eq
   12f00:	2000      	moveq	r0, #0
   12f02:	bd08      	pop	{r3, pc}
   12f04:	20001d54 	.word	0x20001d54
   12f08:	20001d50 	.word	0x20001d50

00012f0c <smp_dhkey_check>:
{
   12f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   12f0e:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   12f12:	78dd      	ldrb	r5, [r3, #3]
{
   12f14:	b097      	sub	sp, #92	; 0x5c
   12f16:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12f18:	2d00      	cmp	r5, #0
   12f1a:	d17b      	bne.n	13014 <smp_dhkey_check+0x108>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   12f1c:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   12f1e:	2210      	movs	r2, #16
   12f20:	4629      	mov	r1, r5
   12f22:	a80c      	add	r0, sp, #48	; 0x30
   12f24:	f017 fa25 	bl	2a372 <memset>
		switch (smp->method) {
   12f28:	7a23      	ldrb	r3, [r4, #8]
   12f2a:	2b05      	cmp	r3, #5
   12f2c:	d857      	bhi.n	12fde <smp_dhkey_check+0xd2>
   12f2e:	e8df f003 	tbb	[pc, r3]
   12f32:	0309      	.short	0x0309
   12f34:	50560903 	.word	0x50560903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   12f38:	2204      	movs	r2, #4
   12f3a:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   12f3e:	a80c      	add	r0, sp, #48	; 0x30
   12f40:	f017 fa0c 	bl	2a35c <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   12f44:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   12f48:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   12f4c:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   12f4e:	ae08      	add	r6, sp, #32
   12f50:	9301      	str	r3, [sp, #4]
   12f52:	f104 0311 	add.w	r3, r4, #17
   12f56:	9202      	str	r2, [sp, #8]
   12f58:	9300      	str	r3, [sp, #0]
   12f5a:	9603      	str	r6, [sp, #12]
   12f5c:	ab0c      	add	r3, sp, #48	; 0x30
   12f5e:	f104 0227 	add.w	r2, r4, #39	; 0x27
   12f62:	f104 0137 	add.w	r1, r4, #55	; 0x37
   12f66:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   12f6a:	f019 f8fb 	bl	2c164 <smp_f6>
   12f6e:	2800      	cmp	r0, #0
   12f70:	d139      	bne.n	12fe6 <smp_dhkey_check+0xda>
		if (memcmp(e, req->e, 16)) {
   12f72:	4630      	mov	r0, r6
   12f74:	2210      	movs	r2, #16
   12f76:	4639      	mov	r1, r7
   12f78:	f017 f9c7 	bl	2a30a <memcmp>
   12f7c:	4606      	mov	r6, r0
   12f7e:	2800      	cmp	r0, #0
   12f80:	d146      	bne.n	13010 <smp_dhkey_check+0x104>
	return MIN(req->max_key_size, rsp->max_key_size);
   12f82:	7b63      	ldrb	r3, [r4, #13]
   12f84:	7d27      	ldrb	r7, [r4, #20]
		(void)memset(ediv, 0, sizeof(ediv));
   12f86:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   12f88:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   12f8a:	f04f 0202 	mov.w	r2, #2
   12f8e:	a804      	add	r0, sp, #16
	return MIN(req->max_key_size, rsp->max_key_size);
   12f90:	bf28      	it	cs
   12f92:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   12f94:	f017 f9ed 	bl	2a372 <memset>
		(void)memset(rand, 0, sizeof(rand));
   12f98:	2208      	movs	r2, #8
   12f9a:	4631      	mov	r1, r6
   12f9c:	a806      	add	r0, sp, #24
   12f9e:	f017 f9e8 	bl	2a372 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   12fa2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   12fa6:	9700      	str	r7, [sp, #0]
   12fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
   12fac:	aa04      	add	r2, sp, #16
   12fae:	a906      	add	r1, sp, #24
   12fb0:	f017 fd4f 	bl	2aa52 <bt_conn_le_start_encryption>
   12fb4:	2800      	cmp	r0, #0
   12fb6:	da26      	bge.n	13006 <smp_dhkey_check+0xfa>
			BT_ERR("Failed to start encryption");
   12fb8:	4817      	ldr	r0, [pc, #92]	; (13018 <smp_dhkey_check+0x10c>)
   12fba:	6803      	ldr	r3, [r0, #0]
   12fbc:	075b      	lsls	r3, r3, #29
   12fbe:	d012      	beq.n	12fe6 <smp_dhkey_check+0xda>
   12fc0:	4b16      	ldr	r3, [pc, #88]	; (1301c <smp_dhkey_check+0x110>)
   12fc2:	9314      	str	r3, [sp, #80]	; 0x50
   12fc4:	2302      	movs	r3, #2
   12fc6:	9305      	str	r3, [sp, #20]
   12fc8:	9313      	str	r3, [sp, #76]	; 0x4c
   12fca:	aa13      	add	r2, sp, #76	; 0x4c
   12fcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12fd0:	e016      	b.n	13000 <smp_dhkey_check+0xf4>
			if (smp->oobd_local) {
   12fd2:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   12fd6:	2900      	cmp	r1, #0
   12fd8:	d0b4      	beq.n	12f44 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   12fda:	2210      	movs	r2, #16
   12fdc:	e7af      	b.n	12f3e <smp_dhkey_check+0x32>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   12fde:	480e      	ldr	r0, [pc, #56]	; (13018 <smp_dhkey_check+0x10c>)
   12fe0:	6802      	ldr	r2, [r0, #0]
   12fe2:	0752      	lsls	r2, r2, #29
   12fe4:	d103      	bne.n	12fee <smp_dhkey_check+0xe2>
			return BT_SMP_ERR_UNSPECIFIED;
   12fe6:	2508      	movs	r5, #8
}
   12fe8:	4628      	mov	r0, r5
   12fea:	b017      	add	sp, #92	; 0x5c
   12fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BT_ERR("Unknown pairing method (%u)", smp->method);
   12fee:	4a0c      	ldr	r2, [pc, #48]	; (13020 <smp_dhkey_check+0x114>)
		switch (smp->method) {
   12ff0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			BT_ERR("Unknown pairing method (%u)", smp->method);
   12ff4:	2303      	movs	r3, #3
   12ff6:	9308      	str	r3, [sp, #32]
   12ff8:	9313      	str	r3, [sp, #76]	; 0x4c
   12ffa:	aa13      	add	r2, sp, #76	; 0x4c
   12ffc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			BT_ERR("Failed to start encryption");
   13000:	f019 f929 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   13004:	e7ef      	b.n	12fe6 <smp_dhkey_check+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   13006:	2101      	movs	r1, #1
   13008:	1d20      	adds	r0, r4, #4
   1300a:	f019 f978 	bl	2c2fe <atomic_set_bit>
		return 0;
   1300e:	e7eb      	b.n	12fe8 <smp_dhkey_check+0xdc>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   13010:	250b      	movs	r5, #11
   13012:	e7e9      	b.n	12fe8 <smp_dhkey_check+0xdc>
	return 0;
   13014:	2500      	movs	r5, #0
   13016:	e7e7      	b.n	12fe8 <smp_dhkey_check+0xdc>
   13018:	20000a64 	.word	0x20000a64
   1301c:	00033fb8 	.word	0x00033fb8
   13020:	00033f9c 	.word	0x00033f9c

00013024 <smp_dhkey_generate>:
{
   13024:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   13026:	1d05      	adds	r5, r0, #4
{
   13028:	b089      	sub	sp, #36	; 0x24
   1302a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1302c:	2108      	movs	r1, #8
   1302e:	4628      	mov	r0, r5
   13030:	f019 f965 	bl	2c2fe <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   13034:	490d      	ldr	r1, [pc, #52]	; (1306c <smp_dhkey_generate+0x48>)
   13036:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1303a:	f7fb ff87 	bl	ef4c <bt_dh_key_gen>
	if (err) {
   1303e:	b190      	cbz	r0, 13066 <smp_dhkey_generate+0x42>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   13040:	4628      	mov	r0, r5
   13042:	2108      	movs	r1, #8
   13044:	f019 f8db 	bl	2c1fe <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   13048:	4809      	ldr	r0, [pc, #36]	; (13070 <smp_dhkey_generate+0x4c>)
   1304a:	6803      	ldr	r3, [r0, #0]
   1304c:	075b      	lsls	r3, r3, #29
   1304e:	d009      	beq.n	13064 <smp_dhkey_generate+0x40>
   13050:	4b08      	ldr	r3, [pc, #32]	; (13074 <smp_dhkey_generate+0x50>)
   13052:	9306      	str	r3, [sp, #24]
   13054:	aa05      	add	r2, sp, #20
   13056:	2302      	movs	r3, #2
   13058:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1305c:	9301      	str	r3, [sp, #4]
   1305e:	9305      	str	r3, [sp, #20]
   13060:	f019 f8f9 	bl	2c256 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   13064:	2008      	movs	r0, #8
}
   13066:	b009      	add	sp, #36	; 0x24
   13068:	bd30      	pop	{r4, r5, pc}
   1306a:	bf00      	nop
   1306c:	0002c7e9 	.word	0x0002c7e9
   13070:	20000a64 	.word	0x20000a64
   13074:	00033fd3 	.word	0x00033fd3

00013078 <smp_ident_info>:
{
   13078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1307a:	460b      	mov	r3, r1
   1307c:	b085      	sub	sp, #20
   1307e:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   13080:	210d      	movs	r1, #13
   13082:	3004      	adds	r0, #4
   13084:	f019 f8f9 	bl	2c27a <atomic_test_bit>
   13088:	b318      	cbz	r0, 130d2 <smp_ident_info+0x5a>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1308a:	689f      	ldr	r7, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1308c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   13090:	f103 0688 	add.w	r6, r3, #136	; 0x88
   13094:	7a19      	ldrb	r1, [r3, #8]
   13096:	4632      	mov	r2, r6
   13098:	2002      	movs	r0, #2
   1309a:	f019 fc3d 	bl	2c918 <bt_keys_get_type>
		if (!keys) {
   1309e:	4604      	mov	r4, r0
   130a0:	b990      	cbnz	r0, 130c8 <smp_ident_info+0x50>
			BT_ERR("Unable to get keys for %s",
   130a2:	4d0f      	ldr	r5, [pc, #60]	; (130e0 <smp_ident_info+0x68>)
   130a4:	682b      	ldr	r3, [r5, #0]
   130a6:	075b      	lsls	r3, r3, #29
   130a8:	d00c      	beq.n	130c4 <smp_ident_info+0x4c>
   130aa:	4630      	mov	r0, r6
   130ac:	f7f9 f81a 	bl	c0e4 <bt_addr_le_str_real>
   130b0:	4b0c      	ldr	r3, [pc, #48]	; (130e4 <smp_ident_info+0x6c>)
   130b2:	9002      	str	r0, [sp, #8]
   130b4:	e9cd 4300 	strd	r4, r3, [sp]
   130b8:	2201      	movs	r2, #1
   130ba:	4623      	mov	r3, r4
   130bc:	4629      	mov	r1, r5
   130be:	4620      	mov	r0, r4
   130c0:	f019 f8cc 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   130c4:	2008      	movs	r0, #8
   130c6:	e009      	b.n	130dc <smp_ident_info+0x64>
		memcpy(keys->irk.val, req->irk, 16);
   130c8:	2210      	movs	r2, #16
   130ca:	4639      	mov	r1, r7
   130cc:	302a      	adds	r0, #42	; 0x2a
   130ce:	f017 f945 	bl	2a35c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   130d2:	4628      	mov	r0, r5
   130d4:	2109      	movs	r1, #9
   130d6:	f019 f912 	bl	2c2fe <atomic_set_bit>
	return 0;
   130da:	2000      	movs	r0, #0
}
   130dc:	b005      	add	sp, #20
   130de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   130e0:	20000a64 	.word	0x20000a64
   130e4:	00033fec 	.word	0x00033fec

000130e8 <smp_encrypt_info>:
{
   130e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   130ea:	460b      	mov	r3, r1
   130ec:	b085      	sub	sp, #20
   130ee:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   130f0:	210d      	movs	r1, #13
   130f2:	3004      	adds	r0, #4
   130f4:	f019 f8c1 	bl	2c27a <atomic_test_bit>
   130f8:	b318      	cbz	r0, 13142 <smp_encrypt_info+0x5a>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   130fa:	689f      	ldr	r7, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   130fc:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   13100:	f103 0688 	add.w	r6, r3, #136	; 0x88
   13104:	7a19      	ldrb	r1, [r3, #8]
   13106:	4632      	mov	r2, r6
   13108:	2004      	movs	r0, #4
   1310a:	f019 fc05 	bl	2c918 <bt_keys_get_type>
		if (!keys) {
   1310e:	4604      	mov	r4, r0
   13110:	b990      	cbnz	r0, 13138 <smp_encrypt_info+0x50>
			BT_ERR("Unable to get keys for %s",
   13112:	4d0f      	ldr	r5, [pc, #60]	; (13150 <smp_encrypt_info+0x68>)
   13114:	682b      	ldr	r3, [r5, #0]
   13116:	075b      	lsls	r3, r3, #29
   13118:	d00c      	beq.n	13134 <smp_encrypt_info+0x4c>
   1311a:	4630      	mov	r0, r6
   1311c:	f7f8 ffe2 	bl	c0e4 <bt_addr_le_str_real>
   13120:	4b0c      	ldr	r3, [pc, #48]	; (13154 <smp_encrypt_info+0x6c>)
   13122:	9002      	str	r0, [sp, #8]
   13124:	e9cd 4300 	strd	r4, r3, [sp]
   13128:	2201      	movs	r2, #1
   1312a:	4623      	mov	r3, r4
   1312c:	4629      	mov	r1, r5
   1312e:	4620      	mov	r0, r4
   13130:	f019 f894 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   13134:	2008      	movs	r0, #8
   13136:	e009      	b.n	1314c <smp_encrypt_info+0x64>
		memcpy(keys->ltk.val, req->ltk, 16);
   13138:	2210      	movs	r2, #16
   1313a:	4639      	mov	r1, r7
   1313c:	301a      	adds	r0, #26
   1313e:	f017 f90d 	bl	2a35c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   13142:	4628      	mov	r0, r5
   13144:	2107      	movs	r1, #7
   13146:	f019 f8da 	bl	2c2fe <atomic_set_bit>
	return 0;
   1314a:	2000      	movs	r0, #0
}
   1314c:	b005      	add	sp, #20
   1314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13150:	20000a64 	.word	0x20000a64
   13154:	00033fec 	.word	0x00033fec

00013158 <bt_smp_distribute_keys>:
{
   13158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1315c:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   13160:	f8d8 50b4 	ldr.w	r5, [r8, #180]	; 0xb4
{
   13164:	b095      	sub	sp, #84	; 0x54
   13166:	4604      	mov	r4, r0
	if (!keys) {
   13168:	b9b5      	cbnz	r5, 13198 <bt_smp_distribute_keys+0x40>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1316a:	4c8f      	ldr	r4, [pc, #572]	; (133a8 <bt_smp_distribute_keys+0x250>)
   1316c:	6823      	ldr	r3, [r4, #0]
   1316e:	0758      	lsls	r0, r3, #29
   13170:	d103      	bne.n	1317a <bt_smp_distribute_keys+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   13172:	2008      	movs	r0, #8
}
   13174:	b015      	add	sp, #84	; 0x54
   13176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1317a:	f108 0088 	add.w	r0, r8, #136	; 0x88
   1317e:	f7f8 ffb1 	bl	c0e4 <bt_addr_le_str_real>
   13182:	4b8a      	ldr	r3, [pc, #552]	; (133ac <bt_smp_distribute_keys+0x254>)
   13184:	9002      	str	r0, [sp, #8]
   13186:	e9cd 5300 	strd	r5, r3, [sp]
   1318a:	2201      	movs	r2, #1
   1318c:	462b      	mov	r3, r5
   1318e:	4621      	mov	r1, r4
   13190:	4628      	mov	r0, r5
   13192:	f019 f863 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
   13196:	e7ec      	b.n	13172 <bt_smp_distribute_keys+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13198:	1d07      	adds	r7, r0, #4
   1319a:	2105      	movs	r1, #5
   1319c:	4638      	mov	r0, r7
   1319e:	f019 f86c 	bl	2c27a <atomic_test_bit>
   131a2:	b9d8      	cbnz	r0, 131dc <bt_smp_distribute_keys+0x84>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   131a4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   131a8:	07d9      	lsls	r1, r3, #31
   131aa:	d517      	bpl.n	131dc <bt_smp_distribute_keys+0x84>
	struct bt_keys *keys = conn->le.keys;
   131ac:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   131b0:	211a      	movs	r1, #26
   131b2:	a80c      	add	r0, sp, #48	; 0x30
	struct bt_keys *keys = conn->le.keys;
   131b4:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   131b8:	f004 fffa 	bl	181b0 <bt_rand>
   131bc:	4682      	mov	sl, r0
   131be:	b340      	cbz	r0, 13212 <bt_smp_distribute_keys+0xba>
			BT_ERR("Unable to get random bytes");
   131c0:	4879      	ldr	r0, [pc, #484]	; (133a8 <bt_smp_distribute_keys+0x250>)
   131c2:	6803      	ldr	r3, [r0, #0]
   131c4:	075a      	lsls	r2, r3, #29
   131c6:	d009      	beq.n	131dc <bt_smp_distribute_keys+0x84>
   131c8:	4b79      	ldr	r3, [pc, #484]	; (133b0 <bt_smp_distribute_keys+0x258>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   131ca:	930a      	str	r3, [sp, #40]	; 0x28
   131cc:	aa09      	add	r2, sp, #36	; 0x24
   131ce:	2302      	movs	r3, #2
   131d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   131d4:	9305      	str	r3, [sp, #20]
   131d6:	9309      	str	r3, [sp, #36]	; 0x24
   131d8:	f019 f83d 	bl	2c256 <z_log_msg2_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   131dc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   131e0:	0798      	lsls	r0, r3, #30
   131e2:	f140 80a9 	bpl.w	13338 <bt_smp_distribute_keys+0x1e0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   131e6:	2108      	movs	r1, #8
   131e8:	4620      	mov	r0, r4
   131ea:	f019 f89c 	bl	2c326 <smp_create_pdu.constprop.0>
		if (!buf) {
   131ee:	4606      	mov	r6, r0
   131f0:	2800      	cmp	r0, #0
   131f2:	d16e      	bne.n	132d2 <bt_smp_distribute_keys+0x17a>
			BT_ERR("Unable to allocate Ident Info buffer");
   131f4:	486c      	ldr	r0, [pc, #432]	; (133a8 <bt_smp_distribute_keys+0x250>)
   131f6:	6803      	ldr	r3, [r0, #0]
   131f8:	0759      	lsls	r1, r3, #29
   131fa:	d0ba      	beq.n	13172 <bt_smp_distribute_keys+0x1a>
   131fc:	4b6d      	ldr	r3, [pc, #436]	; (133b4 <bt_smp_distribute_keys+0x25c>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   131fe:	9310      	str	r3, [sp, #64]	; 0x40
   13200:	aa0f      	add	r2, sp, #60	; 0x3c
   13202:	2302      	movs	r3, #2
   13204:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13208:	9306      	str	r3, [sp, #24]
   1320a:	930f      	str	r3, [sp, #60]	; 0x3c
   1320c:	f019 f823 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   13210:	e7af      	b.n	13172 <bt_smp_distribute_keys+0x1a>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   13212:	2106      	movs	r1, #6
   13214:	4620      	mov	r0, r4
   13216:	f019 f886 	bl	2c326 <smp_create_pdu.constprop.0>
		if (!buf) {
   1321a:	4681      	mov	r9, r0
   1321c:	b928      	cbnz	r0, 1322a <bt_smp_distribute_keys+0xd2>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1321e:	4862      	ldr	r0, [pc, #392]	; (133a8 <bt_smp_distribute_keys+0x250>)
   13220:	6803      	ldr	r3, [r0, #0]
   13222:	075b      	lsls	r3, r3, #29
   13224:	d0da      	beq.n	131dc <bt_smp_distribute_keys+0x84>
   13226:	4b64      	ldr	r3, [pc, #400]	; (133b8 <bt_smp_distribute_keys+0x260>)
   13228:	e7cf      	b.n	131ca <bt_smp_distribute_keys+0x72>
   1322a:	2110      	movs	r1, #16
   1322c:	3008      	adds	r0, #8
   1322e:	f019 fbfe 	bl	2ca2e <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   13232:	7b32      	ldrb	r2, [r6, #12]
   13234:	a90c      	add	r1, sp, #48	; 0x30
   13236:	4683      	mov	fp, r0
   13238:	f017 f890 	bl	2a35c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1323c:	7b30      	ldrb	r0, [r6, #12]
   1323e:	280f      	cmp	r0, #15
   13240:	d805      	bhi.n	1324e <bt_smp_distribute_keys+0xf6>
			(void)memset(info->ltk + keys->enc_size, 0,
   13242:	f1c0 0210 	rsb	r2, r0, #16
   13246:	4651      	mov	r1, sl
   13248:	4458      	add	r0, fp
   1324a:	f017 f892 	bl	2a372 <memset>
		smp_send(smp, buf, NULL, NULL);
   1324e:	4649      	mov	r1, r9
   13250:	2200      	movs	r2, #0
   13252:	4620      	mov	r0, r4
   13254:	f018 ffe2 	bl	2c21c <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   13258:	2107      	movs	r1, #7
   1325a:	4620      	mov	r0, r4
   1325c:	f019 f863 	bl	2c326 <smp_create_pdu.constprop.0>
		if (!buf) {
   13260:	4681      	mov	r9, r0
   13262:	b928      	cbnz	r0, 13270 <bt_smp_distribute_keys+0x118>
			BT_ERR("Unable to allocate Central Ident buffer");
   13264:	4850      	ldr	r0, [pc, #320]	; (133a8 <bt_smp_distribute_keys+0x250>)
   13266:	6803      	ldr	r3, [r0, #0]
   13268:	075e      	lsls	r6, r3, #29
   1326a:	d0b7      	beq.n	131dc <bt_smp_distribute_keys+0x84>
   1326c:	4b53      	ldr	r3, [pc, #332]	; (133bc <bt_smp_distribute_keys+0x264>)
   1326e:	e7ac      	b.n	131ca <bt_smp_distribute_keys+0x72>
   13270:	210a      	movs	r1, #10
   13272:	3008      	adds	r0, #8
   13274:	f019 fbdb 	bl	2ca2e <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   13278:	2208      	movs	r2, #8
   1327a:	4682      	mov	sl, r0
   1327c:	a910      	add	r1, sp, #64	; 0x40
   1327e:	3002      	adds	r0, #2
   13280:	f017 f86c 	bl	2a35c <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   13284:	2202      	movs	r2, #2
   13286:	a912      	add	r1, sp, #72	; 0x48
   13288:	4650      	mov	r0, sl
   1328a:	f017 f867 	bl	2a35c <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1328e:	4649      	mov	r1, r9
   13290:	4620      	mov	r0, r4
   13292:	4a4b      	ldr	r2, [pc, #300]	; (133c0 <bt_smp_distribute_keys+0x268>)
   13294:	f018 ffc2 	bl	2c21c <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   13298:	210d      	movs	r1, #13
   1329a:	4638      	mov	r0, r7
   1329c:	f018 ffed 	bl	2c27a <atomic_test_bit>
   132a0:	2800      	cmp	r0, #0
   132a2:	d09b      	beq.n	131dc <bt_smp_distribute_keys+0x84>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   132a4:	4630      	mov	r0, r6
   132a6:	2101      	movs	r1, #1
   132a8:	f019 fb46 	bl	2c938 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   132ac:	a90c      	add	r1, sp, #48	; 0x30
   132ae:	2210      	movs	r2, #16
   132b0:	f106 0072 	add.w	r0, r6, #114	; 0x72
   132b4:	f017 f852 	bl	2a35c <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   132b8:	a910      	add	r1, sp, #64	; 0x40
   132ba:	2208      	movs	r2, #8
   132bc:	f106 0068 	add.w	r0, r6, #104	; 0x68
   132c0:	f017 f84c 	bl	2a35c <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   132c4:	2202      	movs	r2, #2
   132c6:	a912      	add	r1, sp, #72	; 0x48
   132c8:	f106 0070 	add.w	r0, r6, #112	; 0x70
   132cc:	f017 f846 	bl	2a35c <memcpy>
   132d0:	e784      	b.n	131dc <bt_smp_distribute_keys+0x84>
   132d2:	2110      	movs	r1, #16
   132d4:	3008      	adds	r0, #8
   132d6:	f019 fbaa 	bl	2ca2e <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   132da:	f898 1008 	ldrb.w	r1, [r8, #8]
   132de:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 133c4 <bt_smp_distribute_keys+0x26c>
   132e2:	f44f 73ac 	mov.w	r3, #344	; 0x158
   132e6:	2210      	movs	r2, #16
   132e8:	fb12 3101 	smlabb	r1, r2, r1, r3
   132ec:	4449      	add	r1, r9
   132ee:	f017 f835 	bl	2a35c <memcpy>
		smp_send(smp, buf, NULL, NULL);
   132f2:	4631      	mov	r1, r6
   132f4:	2200      	movs	r2, #0
   132f6:	4620      	mov	r0, r4
   132f8:	f018 ff90 	bl	2c21c <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   132fc:	2109      	movs	r1, #9
   132fe:	4620      	mov	r0, r4
   13300:	f019 f811 	bl	2c326 <smp_create_pdu.constprop.0>
		if (!buf) {
   13304:	4606      	mov	r6, r0
   13306:	b930      	cbnz	r0, 13316 <bt_smp_distribute_keys+0x1be>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   13308:	4827      	ldr	r0, [pc, #156]	; (133a8 <bt_smp_distribute_keys+0x250>)
   1330a:	6803      	ldr	r3, [r0, #0]
   1330c:	075a      	lsls	r2, r3, #29
   1330e:	f43f af30 	beq.w	13172 <bt_smp_distribute_keys+0x1a>
   13312:	4b2d      	ldr	r3, [pc, #180]	; (133c8 <bt_smp_distribute_keys+0x270>)
   13314:	e773      	b.n	131fe <bt_smp_distribute_keys+0xa6>
   13316:	2107      	movs	r1, #7
   13318:	3008      	adds	r0, #8
   1331a:	f019 fb88 	bl	2ca2e <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1331e:	f898 1008 	ldrb.w	r1, [r8, #8]
   13322:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
   13326:	2207      	movs	r2, #7
   13328:	4449      	add	r1, r9
   1332a:	f017 f817 	bl	2a35c <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1332e:	4a27      	ldr	r2, [pc, #156]	; (133cc <bt_smp_distribute_keys+0x274>)
   13330:	4631      	mov	r1, r6
   13332:	4620      	mov	r0, r4
   13334:	f018 ff72 	bl	2c21c <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   13338:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
   1333c:	f010 0004 	ands.w	r0, r0, #4
   13340:	f43f af18 	beq.w	13174 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   13344:	210a      	movs	r1, #10
   13346:	4620      	mov	r0, r4
   13348:	f018 ffed 	bl	2c326 <smp_create_pdu.constprop.0>
		if (!buf) {
   1334c:	4606      	mov	r6, r0
   1334e:	b930      	cbnz	r0, 1335e <bt_smp_distribute_keys+0x206>
			BT_ERR("Unable to allocate Signing Info buffer");
   13350:	4815      	ldr	r0, [pc, #84]	; (133a8 <bt_smp_distribute_keys+0x250>)
   13352:	6803      	ldr	r3, [r0, #0]
   13354:	075b      	lsls	r3, r3, #29
   13356:	f43f af0c 	beq.w	13172 <bt_smp_distribute_keys+0x1a>
   1335a:	4b1d      	ldr	r3, [pc, #116]	; (133d0 <bt_smp_distribute_keys+0x278>)
   1335c:	e74f      	b.n	131fe <bt_smp_distribute_keys+0xa6>
   1335e:	2110      	movs	r1, #16
   13360:	3008      	adds	r0, #8
   13362:	f019 fb64 	bl	2ca2e <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   13366:	2110      	movs	r1, #16
   13368:	4681      	mov	r9, r0
   1336a:	f004 ff21 	bl	181b0 <bt_rand>
   1336e:	4680      	mov	r8, r0
   13370:	2800      	cmp	r0, #0
   13372:	f47f aefe 	bne.w	13172 <bt_smp_distribute_keys+0x1a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   13376:	210d      	movs	r1, #13
   13378:	4638      	mov	r0, r7
   1337a:	f018 ff7e 	bl	2c27a <atomic_test_bit>
   1337e:	b158      	cbz	r0, 13398 <bt_smp_distribute_keys+0x240>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   13380:	2108      	movs	r1, #8
   13382:	4628      	mov	r0, r5
   13384:	f019 fad8 	bl	2c938 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   13388:	2210      	movs	r2, #16
   1338a:	4649      	mov	r1, r9
   1338c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   13390:	f016 ffe4 	bl	2a35c <memcpy>
			keys->local_csrk.cnt = 0U;
   13394:	f8c5 8050 	str.w	r8, [r5, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   13398:	4620      	mov	r0, r4
   1339a:	4a0e      	ldr	r2, [pc, #56]	; (133d4 <bt_smp_distribute_keys+0x27c>)
   1339c:	4631      	mov	r1, r6
   1339e:	f018 ff3d 	bl	2c21c <smp_send.constprop.0>
	return 0;
   133a2:	2000      	movs	r0, #0
   133a4:	e6e6      	b.n	13174 <bt_smp_distribute_keys+0x1c>
   133a6:	bf00      	nop
   133a8:	20000a64 	.word	0x20000a64
   133ac:	00034006 	.word	0x00034006
   133b0:	0003401b 	.word	0x0003401b
   133b4:	00034085 	.word	0x00034085
   133b8:	00034036 	.word	0x00034036
   133bc:	0003405d 	.word	0x0003405d
   133c0:	0002c8af 	.word	0x0002c8af
   133c4:	20000000 	.word	0x20000000
   133c8:	000340aa 	.word	0x000340aa
   133cc:	0002c8a9 	.word	0x0002c8a9
   133d0:	000340d4 	.word	0x000340d4
   133d4:	0002c8a3 	.word	0x0002c8a3

000133d8 <smp_send_pairing_req>:
{
   133d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   133dc:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   133de:	f7ff fd67 	bl	12eb0 <smp_chan_get>
	if (!smp) {
   133e2:	4604      	mov	r4, r0
   133e4:	2800      	cmp	r0, #0
   133e6:	f000 80bd 	beq.w	13564 <smp_send_pairing_req+0x18c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   133ea:	1d06      	adds	r6, r0, #4
   133ec:	2104      	movs	r1, #4
   133ee:	4630      	mov	r0, r6
   133f0:	f018 ff43 	bl	2c27a <atomic_test_bit>
   133f4:	4603      	mov	r3, r0
   133f6:	2800      	cmp	r0, #0
   133f8:	f040 80b7 	bne.w	1356a <smp_send_pairing_req+0x192>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   133fc:	2102      	movs	r1, #2
   133fe:	4630      	mov	r0, r6
   13400:	f018 ff3b 	bl	2c27a <atomic_test_bit>
   13404:	2800      	cmp	r0, #0
   13406:	f040 80b3 	bne.w	13570 <smp_send_pairing_req+0x198>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1340a:	2103      	movs	r1, #3
   1340c:	4630      	mov	r0, r6
   1340e:	f018 ff34 	bl	2c27a <atomic_test_bit>
   13412:	b120      	cbz	r0, 1341e <smp_send_pairing_req+0x46>
		return -EBUSY;
   13414:	f06f 050f 	mvn.w	r5, #15
}
   13418:	4628      	mov	r0, r5
   1341a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1341e:	2101      	movs	r1, #1
   13420:	4630      	mov	r0, r6
   13422:	f018 ff2a 	bl	2c27a <atomic_test_bit>
   13426:	2800      	cmp	r0, #0
   13428:	d1f4      	bne.n	13414 <smp_send_pairing_req+0x3c>
	if (!sec_level_reachable(conn)) {
   1342a:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1342c:	2b03      	cmp	r3, #3
   1342e:	d016      	beq.n	1345e <smp_send_pairing_req+0x86>
   13430:	d805      	bhi.n	1343e <smp_send_pairing_req+0x66>
   13432:	3b01      	subs	r3, #1
   13434:	428b      	cmp	r3, r1
   13436:	d91f      	bls.n	13478 <smp_send_pairing_req+0xa0>
		return -EINVAL;
   13438:	f06f 0515 	mvn.w	r5, #21
   1343c:	e7ec      	b.n	13418 <smp_send_pairing_req+0x40>
	switch (conn->required_sec_level) {
   1343e:	2b04      	cmp	r3, #4
   13440:	d1fa      	bne.n	13438 <smp_send_pairing_req+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   13442:	f7ff fca3 	bl	12d8c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   13446:	2803      	cmp	r0, #3
   13448:	d104      	bne.n	13454 <smp_send_pairing_req+0x7c>
   1344a:	4b4a      	ldr	r3, [pc, #296]	; (13574 <smp_send_pairing_req+0x19c>)
   1344c:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1344e:	b33b      	cbz	r3, 134a0 <smp_send_pairing_req+0xc8>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   13450:	68db      	ldr	r3, [r3, #12]
   13452:	b10b      	cbz	r3, 13458 <smp_send_pairing_req+0x80>
   13454:	4b48      	ldr	r3, [pc, #288]	; (13578 <smp_send_pairing_req+0x1a0>)
   13456:	781b      	ldrb	r3, [r3, #0]
   13458:	f003 0301 	and.w	r3, r3, #1
   1345c:	e00a      	b.n	13474 <smp_send_pairing_req+0x9c>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1345e:	f7ff fc95 	bl	12d8c <get_io_capa>
   13462:	2803      	cmp	r0, #3
   13464:	d11a      	bne.n	1349c <smp_send_pairing_req+0xc4>
		       (bt_auth && bt_auth->oob_data_request);
   13466:	4b43      	ldr	r3, [pc, #268]	; (13574 <smp_send_pairing_req+0x19c>)
   13468:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1346a:	b11b      	cbz	r3, 13474 <smp_send_pairing_req+0x9c>
		       (bt_auth && bt_auth->oob_data_request);
   1346c:	68db      	ldr	r3, [r3, #12]
   1346e:	3b00      	subs	r3, #0
   13470:	bf18      	it	ne
   13472:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
   13474:	2b00      	cmp	r3, #0
   13476:	d0df      	beq.n	13438 <smp_send_pairing_req+0x60>
	if (!conn->le.keys) {
   13478:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1347c:	b193      	cbz	r3, 134a4 <smp_send_pairing_req+0xcc>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1347e:	22f0      	movs	r2, #240	; 0xf0
   13480:	2100      	movs	r1, #0
   13482:	4620      	mov	r0, r4
   13484:	f016 ff75 	bl	2a372 <memset>
	if (bt_rand(smp->prnd, 16)) {
   13488:	2110      	movs	r1, #16
   1348a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1348e:	f004 fe8f 	bl	181b0 <bt_rand>
   13492:	4605      	mov	r5, r0
   13494:	b190      	cbz	r0, 134bc <smp_send_pairing_req+0xe4>
		return -ENOBUFS;
   13496:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1349a:	e7bd      	b.n	13418 <smp_send_pairing_req+0x40>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1349c:	2301      	movs	r3, #1
   1349e:	e7e9      	b.n	13474 <smp_send_pairing_req+0x9c>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   134a0:	2300      	movs	r3, #0
   134a2:	e7d9      	b.n	13458 <smp_send_pairing_req+0x80>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   134a4:	7a28      	ldrb	r0, [r5, #8]
   134a6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   134aa:	f001 fba5 	bl	14bf8 <bt_keys_get_addr>
   134ae:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   134b2:	2800      	cmp	r0, #0
   134b4:	d1e3      	bne.n	1347e <smp_send_pairing_req+0xa6>
			return -ENOMEM;
   134b6:	f06f 050b 	mvn.w	r5, #11
   134ba:	e7ad      	b.n	13418 <smp_send_pairing_req+0x40>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   134bc:	2105      	movs	r1, #5
   134be:	4620      	mov	r0, r4
   134c0:	f018 ff1d 	bl	2c2fe <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   134c4:	f7fb fd32 	bl	ef2c <bt_pub_key_get>
   134c8:	4b2c      	ldr	r3, [pc, #176]	; (1357c <smp_send_pairing_req+0x1a4>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   134ca:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   134cc:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   134ce:	4620      	mov	r0, r4
   134d0:	f018 ff29 	bl	2c326 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   134d4:	4681      	mov	r9, r0
   134d6:	2800      	cmp	r0, #0
   134d8:	d0dd      	beq.n	13496 <smp_send_pairing_req+0xbe>
   134da:	2106      	movs	r1, #6
   134dc:	3008      	adds	r0, #8
   134de:	f019 faa6 	bl	2ca2e <net_buf_simple_add>
	if (sc_supported) {
   134e2:	4b25      	ldr	r3, [pc, #148]	; (13578 <smp_send_pairing_req+0x1a0>)
   134e4:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
   134e6:	2b00      	cmp	r3, #0
   134e8:	bf14      	ite	ne
   134ea:	f04f 0809 	movne.w	r8, #9
   134ee:	f04f 0801 	moveq.w	r8, #1
   134f2:	4607      	mov	r7, r0
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   134f4:	f7ff fc4a 	bl	12d8c <get_io_capa>
	if (bondable) {
   134f8:	4b21      	ldr	r3, [pc, #132]	; (13580 <smp_send_pairing_req+0x1a8>)
   134fa:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   134fc:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   134fe:	bf18      	it	ne
   13500:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
   13504:	b35b      	cbz	r3, 1355e <smp_send_pairing_req+0x186>
		auth |= BT_SMP_AUTH_BONDING;
   13506:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1350a:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
   1350e:	f7ff fc3d 	bl	12d8c <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   13512:	4b1c      	ldr	r3, [pc, #112]	; (13584 <smp_send_pairing_req+0x1ac>)
	req->io_capability = get_io_capa();
   13514:	7038      	strb	r0, [r7, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   13516:	781b      	ldrb	r3, [r3, #0]
   13518:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1351a:	2310      	movs	r3, #16
   1351c:	70fb      	strb	r3, [r7, #3]
	req->init_key_dist = SEND_KEYS;
   1351e:	2307      	movs	r3, #7
   13520:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
   13522:	717b      	strb	r3, [r7, #5]
	smp->local_dist = SEND_KEYS;
   13524:	f240 7307 	movw	r3, #1799	; 0x707
   13528:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1352c:	2301      	movs	r3, #1
   1352e:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   13530:	4639      	mov	r1, r7
   13532:	2206      	movs	r2, #6
   13534:	f104 000a 	add.w	r0, r4, #10
   13538:	f016 ff10 	bl	2a35c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1353c:	2200      	movs	r2, #0
   1353e:	4649      	mov	r1, r9
   13540:	4620      	mov	r0, r4
   13542:	f018 fe6b 	bl	2c21c <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   13546:	4620      	mov	r0, r4
   13548:	2102      	movs	r1, #2
   1354a:	f018 fed8 	bl	2c2fe <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1354e:	210b      	movs	r1, #11
   13550:	f018 fed5 	bl	2c2fe <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   13554:	2103      	movs	r1, #3
   13556:	4630      	mov	r0, r6
   13558:	f018 fed1 	bl	2c2fe <atomic_set_bit>
	return 0;
   1355c:	e75c      	b.n	13418 <smp_send_pairing_req+0x40>
		auth &= ~BT_SMP_AUTH_BONDING;
   1355e:	f008 080c 	and.w	r8, r8, #12
   13562:	e7d2      	b.n	1350a <smp_send_pairing_req+0x132>
		return -ENOTCONN;
   13564:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   13568:	e756      	b.n	13418 <smp_send_pairing_req+0x40>
		return -EIO;
   1356a:	f06f 0504 	mvn.w	r5, #4
   1356e:	e753      	b.n	13418 <smp_send_pairing_req+0x40>
		return 0;
   13570:	461d      	mov	r5, r3
   13572:	e751      	b.n	13418 <smp_send_pairing_req+0x40>
   13574:	20002cb8 	.word	0x20002cb8
   13578:	20004c01 	.word	0x20004c01
   1357c:	20002e44 	.word	0x20002e44
   13580:	200009a0 	.word	0x200009a0
   13584:	20004c00 	.word	0x20004c00

00013588 <smp_security_request>:
{
   13588:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1358a:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   1358c:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   13590:	688b      	ldr	r3, [r1, #8]
{
   13592:	b08b      	sub	sp, #44	; 0x2c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   13594:	2102      	movs	r1, #2
   13596:	4620      	mov	r0, r4
   13598:	f018 fe6f 	bl	2c27a <atomic_test_bit>
   1359c:	b108      	cbz	r0, 135a2 <smp_security_request+0x1a>
	return 0;
   1359e:	2000      	movs	r0, #0
   135a0:	e07b      	b.n	1369a <smp_security_request+0x112>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   135a2:	2103      	movs	r1, #3
   135a4:	4620      	mov	r0, r4
   135a6:	f018 fe68 	bl	2c27a <atomic_test_bit>
   135aa:	2800      	cmp	r0, #0
   135ac:	d1f7      	bne.n	1359e <smp_security_request+0x16>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   135ae:	2101      	movs	r1, #1
   135b0:	4620      	mov	r0, r4
   135b2:	f018 fe62 	bl	2c27a <atomic_test_bit>
   135b6:	2800      	cmp	r0, #0
   135b8:	d1f1      	bne.n	1359e <smp_security_request+0x16>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   135ba:	781e      	ldrb	r6, [r3, #0]
	if (sc_supported) {
   135bc:	4b40      	ldr	r3, [pc, #256]	; (136c0 <smp_security_request+0x138>)
   135be:	781b      	ldrb	r3, [r3, #0]
   135c0:	b17b      	cbz	r3, 135e2 <smp_security_request+0x5a>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   135c2:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
   135c6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   135ca:	b16b      	cbz	r3, 135e8 <smp_security_request+0x60>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   135cc:	89db      	ldrh	r3, [r3, #14]
   135ce:	f003 0324 	and.w	r3, r3, #36	; 0x24
   135d2:	b9d3      	cbnz	r3, 1360a <smp_security_request+0x82>
	if (smp_send_pairing_req(conn) < 0) {
   135d4:	4628      	mov	r0, r5
   135d6:	f7ff feff 	bl	133d8 <smp_send_pairing_req>
   135da:	2800      	cmp	r0, #0
   135dc:	db5c      	blt.n	13698 <smp_security_request+0x110>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   135de:	210f      	movs	r1, #15
   135e0:	e069      	b.n	136b6 <smp_security_request+0x12e>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   135e2:	f006 0607 	and.w	r6, r6, #7
   135e6:	e7ee      	b.n	135c6 <smp_security_request+0x3e>
					     &conn->le.dst);
   135e8:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   135ec:	7a29      	ldrb	r1, [r5, #8]
   135ee:	463a      	mov	r2, r7
   135f0:	2020      	movs	r0, #32
   135f2:	f001 fb37 	bl	14c64 <bt_keys_find>
   135f6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   135fa:	b930      	cbnz	r0, 1360a <smp_security_request+0x82>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   135fc:	7a29      	ldrb	r1, [r5, #8]
   135fe:	463a      	mov	r2, r7
   13600:	2004      	movs	r0, #4
   13602:	f001 fb2f 	bl	14c64 <bt_keys_find>
   13606:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
   1360a:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   1360e:	2900      	cmp	r1, #0
   13610:	d0e0      	beq.n	135d4 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   13612:	0773      	lsls	r3, r6, #29
   13614:	d525      	bpl.n	13662 <smp_security_request+0xda>
   13616:	7b4b      	ldrb	r3, [r1, #13]
   13618:	07df      	lsls	r7, r3, #31
   1361a:	d422      	bmi.n	13662 <smp_security_request+0xda>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1361c:	f7ff fbb6 	bl	12d8c <get_io_capa>
   13620:	4603      	mov	r3, r0
			BT_INFO("New auth requirements: 0x%x, repairing",
   13622:	4828      	ldr	r0, [pc, #160]	; (136c4 <smp_security_request+0x13c>)
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   13624:	2b03      	cmp	r3, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
   13626:	6802      	ldr	r2, [r0, #0]
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   13628:	d00d      	beq.n	13646 <smp_security_request+0xbe>
			BT_INFO("New auth requirements: 0x%x, repairing",
   1362a:	f002 0207 	and.w	r2, r2, #7
   1362e:	2a02      	cmp	r2, #2
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   13630:	d9d0      	bls.n	135d4 <smp_security_request+0x4c>
   13632:	4b25      	ldr	r3, [pc, #148]	; (136c8 <smp_security_request+0x140>)
   13634:	e9cd 3608 	strd	r3, r6, [sp, #32]
   13638:	2303      	movs	r3, #3
   1363a:	9303      	str	r3, [sp, #12]
   1363c:	9307      	str	r3, [sp, #28]
   1363e:	aa07      	add	r2, sp, #28
   13640:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   13644:	e00a      	b.n	1365c <smp_security_request+0xd4>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   13646:	f012 0f06 	tst.w	r2, #6
   1364a:	d0c3      	beq.n	135d4 <smp_security_request+0x4c>
   1364c:	4a1f      	ldr	r2, [pc, #124]	; (136cc <smp_security_request+0x144>)
   1364e:	9303      	str	r3, [sp, #12]
   13650:	e9cd 2608 	strd	r2, r6, [sp, #32]
   13654:	9307      	str	r3, [sp, #28]
   13656:	aa07      	add	r2, sp, #28
   13658:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1365c:	f018 fdfb 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   13660:	e7b8      	b.n	135d4 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   13662:	0730      	lsls	r0, r6, #28
   13664:	d508      	bpl.n	13678 <smp_security_request+0xf0>
   13666:	89cb      	ldrh	r3, [r1, #14]
   13668:	069a      	lsls	r2, r3, #26
   1366a:	d405      	bmi.n	13678 <smp_security_request+0xf0>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1366c:	4815      	ldr	r0, [pc, #84]	; (136c4 <smp_security_request+0x13c>)
   1366e:	6803      	ldr	r3, [r0, #0]
   13670:	f003 0307 	and.w	r3, r3, #7
   13674:	2b02      	cmp	r3, #2
   13676:	e7db      	b.n	13630 <smp_security_request+0xa8>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   13678:	7b0b      	ldrb	r3, [r1, #12]
   1367a:	9300      	str	r3, [sp, #0]
   1367c:	f101 0218 	add.w	r2, r1, #24
   13680:	f101 031a 	add.w	r3, r1, #26
   13684:	4628      	mov	r0, r5
   13686:	3110      	adds	r1, #16
   13688:	f017 f9e3 	bl	2aa52 <bt_conn_le_start_encryption>
   1368c:	2800      	cmp	r0, #0
   1368e:	da11      	bge.n	136b4 <smp_security_request+0x12c>
		BT_ERR("Failed to start encryption");
   13690:	480c      	ldr	r0, [pc, #48]	; (136c4 <smp_security_request+0x13c>)
   13692:	6803      	ldr	r3, [r0, #0]
   13694:	075b      	lsls	r3, r3, #29
   13696:	d102      	bne.n	1369e <smp_security_request+0x116>
		return BT_SMP_ERR_UNSPECIFIED;
   13698:	2008      	movs	r0, #8
}
   1369a:	b00b      	add	sp, #44	; 0x2c
   1369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Failed to start encryption");
   1369e:	4b0c      	ldr	r3, [pc, #48]	; (136d0 <smp_security_request+0x148>)
   136a0:	9308      	str	r3, [sp, #32]
   136a2:	aa07      	add	r2, sp, #28
   136a4:	2302      	movs	r3, #2
   136a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   136aa:	9303      	str	r3, [sp, #12]
   136ac:	9307      	str	r3, [sp, #28]
   136ae:	f018 fdd2 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   136b2:	e7f1      	b.n	13698 <smp_security_request+0x110>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   136b4:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   136b6:	4620      	mov	r0, r4
   136b8:	f018 fe21 	bl	2c2fe <atomic_set_bit>
   136bc:	e76f      	b.n	1359e <smp_security_request+0x16>
   136be:	bf00      	nop
   136c0:	20004c01 	.word	0x20004c01
   136c4:	20000a64 	.word	0x20000a64
   136c8:	000340fb 	.word	0x000340fb
   136cc:	00034122 	.word	0x00034122
   136d0:	00033fb8 	.word	0x00033fb8

000136d4 <sc_send_public_key>:
{
   136d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   136d6:	210c      	movs	r1, #12
{
   136d8:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   136da:	f018 fe24 	bl	2c326 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   136de:	4604      	mov	r4, r0
   136e0:	b1b0      	cbz	r0, 13710 <sc_send_public_key+0x3c>
   136e2:	2140      	movs	r1, #64	; 0x40
   136e4:	3008      	adds	r0, #8
   136e6:	f019 f9a2 	bl	2ca2e <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   136ea:	4f0a      	ldr	r7, [pc, #40]	; (13714 <sc_send_public_key+0x40>)
   136ec:	2220      	movs	r2, #32
   136ee:	6839      	ldr	r1, [r7, #0]
   136f0:	4606      	mov	r6, r0
   136f2:	f016 fe33 	bl	2a35c <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   136f6:	6839      	ldr	r1, [r7, #0]
   136f8:	2220      	movs	r2, #32
   136fa:	4411      	add	r1, r2
   136fc:	18b0      	adds	r0, r6, r2
   136fe:	f016 fe2d 	bl	2a35c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   13702:	4628      	mov	r0, r5
   13704:	2200      	movs	r2, #0
   13706:	4621      	mov	r1, r4
   13708:	f018 fd88 	bl	2c21c <smp_send.constprop.0>
	return 0;
   1370c:	2000      	movs	r0, #0
}
   1370e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   13710:	2008      	movs	r0, #8
   13712:	e7fc      	b.n	1370e <sc_send_public_key+0x3a>
   13714:	20002e44 	.word	0x20002e44

00013718 <compute_and_send_central_dhcheck>:
{
   13718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
   1371c:	2210      	movs	r2, #16
{
   1371e:	b0a2      	sub	sp, #136	; 0x88
   13720:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   13722:	2100      	movs	r1, #0
   13724:	eb0d 0002 	add.w	r0, sp, r2
   13728:	f016 fe23 	bl	2a372 <memset>
	switch (smp->method) {
   1372c:	7a23      	ldrb	r3, [r4, #8]
   1372e:	2b05      	cmp	r3, #5
   13730:	f200 8098 	bhi.w	13864 <compute_and_send_central_dhcheck+0x14c>
   13734:	e8df f003 	tbb	[pc, r3]
   13738:	09030309 	.word	0x09030309
   1373c:	8d96      	.short	0x8d96
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1373e:	2204      	movs	r2, #4
   13740:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   13744:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   13746:	f016 fe09 	bl	2a35c <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1374a:	4b63      	ldr	r3, [pc, #396]	; (138d8 <compute_and_send_central_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
   1374c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   13750:	aa14      	add	r2, sp, #80	; 0x50
   13752:	f103 0730 	add.w	r7, r3, #48	; 0x30
   13756:	4691      	mov	r9, r2
   13758:	6818      	ldr	r0, [r3, #0]
   1375a:	6859      	ldr	r1, [r3, #4]
   1375c:	4616      	mov	r6, r2
   1375e:	c603      	stmia	r6!, {r0, r1}
   13760:	3308      	adds	r3, #8
   13762:	42bb      	cmp	r3, r7
   13764:	4632      	mov	r2, r6
   13766:	d1f7      	bne.n	13758 <compute_and_send_central_dhcheck+0x40>
   13768:	6818      	ldr	r0, [r3, #0]
   1376a:	791b      	ldrb	r3, [r3, #4]
   1376c:	6030      	str	r0, [r6, #0]
	sys_memcpy_swap(ws, w, 32);
   1376e:	af0c      	add	r7, sp, #48	; 0x30
	uint8_t m[53] = { 0x00, /* counter */
   13770:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   13772:	2220      	movs	r2, #32
   13774:	f104 0197 	add.w	r1, r4, #151	; 0x97
   13778:	4638      	mov	r0, r7
   1377a:	f018 fc98 	bl	2c0ae <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1377e:	4857      	ldr	r0, [pc, #348]	; (138dc <compute_and_send_central_dhcheck+0x1c4>)
   13780:	ab08      	add	r3, sp, #32
   13782:	2220      	movs	r2, #32
   13784:	4639      	mov	r1, r7
   13786:	f018 fcab 	bl	2c0e0 <bt_smp_aes_cmac>
	if (err) {
   1378a:	2800      	cmp	r0, #0
   1378c:	f040 8097 	bne.w	138be <compute_and_send_central_dhcheck+0x1a6>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   13790:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   13794:	2210      	movs	r2, #16
   13796:	4641      	mov	r1, r8
   13798:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1379c:	f104 0a37 	add.w	sl, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   137a0:	f018 fc85 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   137a4:	2210      	movs	r2, #16
   137a6:	4651      	mov	r1, sl
   137a8:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   137ac:	f018 fc7f 	bl	2c0ae <sys_memcpy_swap>
	m[37] = a1->type;
   137b0:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
   137b4:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   137b8:	2206      	movs	r2, #6
   137ba:	f105 0190 	add.w	r1, r5, #144	; 0x90
   137be:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   137c2:	f018 fc74 	bl	2c0ae <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   137c6:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   137ca:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   137ce:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   137d2:	2206      	movs	r2, #6
   137d4:	f105 0197 	add.w	r1, r5, #151	; 0x97
   137d8:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   137dc:	f018 fc67 	bl	2c0ae <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   137e0:	4633      	mov	r3, r6
   137e2:	2235      	movs	r2, #53	; 0x35
   137e4:	4649      	mov	r1, r9
   137e6:	a808      	add	r0, sp, #32
   137e8:	f018 fc7a 	bl	2c0e0 <bt_smp_aes_cmac>
	if (err) {
   137ec:	2800      	cmp	r0, #0
   137ee:	d166      	bne.n	138be <compute_and_send_central_dhcheck+0x1a6>
	sys_mem_swap(mackey, 16);
   137f0:	2110      	movs	r1, #16
   137f2:	4630      	mov	r0, r6
   137f4:	f018 fc65 	bl	2c0c2 <sys_mem_swap>
		   smp->tk)) {
   137f8:	f104 0547 	add.w	r5, r4, #71	; 0x47
	m[0] = 0x01;
   137fc:	2301      	movs	r3, #1
   137fe:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   13802:	2235      	movs	r2, #53	; 0x35
   13804:	462b      	mov	r3, r5
   13806:	4649      	mov	r1, r9
   13808:	a808      	add	r0, sp, #32
   1380a:	f018 fc69 	bl	2c0e0 <bt_smp_aes_cmac>
	if (err) {
   1380e:	2800      	cmp	r0, #0
   13810:	d155      	bne.n	138be <compute_and_send_central_dhcheck+0x1a6>
	sys_mem_swap(ltk, 16);
   13812:	4628      	mov	r0, r5
   13814:	2110      	movs	r1, #16
   13816:	f018 fc54 	bl	2c0c2 <sys_mem_swap>
		   &smp->chan.chan.conn->le.init_addr,
   1381a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1381e:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   13820:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   13824:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   13826:	9301      	str	r3, [sp, #4]
   13828:	f104 030a 	add.w	r3, r4, #10
   1382c:	9202      	str	r2, [sp, #8]
   1382e:	9300      	str	r3, [sp, #0]
   13830:	4652      	mov	r2, sl
   13832:	ab04      	add	r3, sp, #16
   13834:	4641      	mov	r1, r8
   13836:	4630      	mov	r0, r6
   13838:	f018 fc94 	bl	2c164 <smp_f6>
   1383c:	4605      	mov	r5, r0
   1383e:	b328      	cbz	r0, 1388c <compute_and_send_central_dhcheck+0x174>
		BT_ERR("Calculate local DHKey check failed");
   13840:	4827      	ldr	r0, [pc, #156]	; (138e0 <compute_and_send_central_dhcheck+0x1c8>)
   13842:	6803      	ldr	r3, [r0, #0]
   13844:	075a      	lsls	r2, r3, #29
   13846:	d011      	beq.n	1386c <compute_and_send_central_dhcheck+0x154>
   13848:	4b26      	ldr	r3, [pc, #152]	; (138e4 <compute_and_send_central_dhcheck+0x1cc>)
   1384a:	9318      	str	r3, [sp, #96]	; 0x60
   1384c:	2302      	movs	r3, #2
   1384e:	9308      	str	r3, [sp, #32]
   13850:	e03d      	b.n	138ce <compute_and_send_central_dhcheck+0x1b6>
		if (smp->oobd_remote) {
   13852:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   13856:	2900      	cmp	r1, #0
   13858:	f43f af77 	beq.w	1374a <compute_and_send_central_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1385c:	2210      	movs	r2, #16
   1385e:	eb0d 0002 	add.w	r0, sp, r2
   13862:	e770      	b.n	13746 <compute_and_send_central_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13864:	481e      	ldr	r0, [pc, #120]	; (138e0 <compute_and_send_central_dhcheck+0x1c8>)
   13866:	6802      	ldr	r2, [r0, #0]
   13868:	0751      	lsls	r1, r2, #29
   1386a:	d103      	bne.n	13874 <compute_and_send_central_dhcheck+0x15c>
		return BT_SMP_ERR_UNSPECIFIED;
   1386c:	2008      	movs	r0, #8
}
   1386e:	b022      	add	sp, #136	; 0x88
   13870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13874:	4a1c      	ldr	r2, [pc, #112]	; (138e8 <compute_and_send_central_dhcheck+0x1d0>)
	switch (smp->method) {
   13876:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1387a:	2303      	movs	r3, #3
   1387c:	930c      	str	r3, [sp, #48]	; 0x30
   1387e:	9317      	str	r3, [sp, #92]	; 0x5c
   13880:	aa17      	add	r2, sp, #92	; 0x5c
   13882:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate local DHKey check failed");
   13886:	f018 fce6 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   1388a:	e7ef      	b.n	1386c <compute_and_send_central_dhcheck+0x154>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1388c:	210d      	movs	r1, #13
   1388e:	4620      	mov	r0, r4
   13890:	f018 fd35 	bl	2c2fe <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   13894:	210d      	movs	r1, #13
   13896:	f018 fd46 	bl	2c326 <smp_create_pdu.constprop.0>
	if (!buf) {
   1389a:	4606      	mov	r6, r0
   1389c:	2800      	cmp	r0, #0
   1389e:	d0e5      	beq.n	1386c <compute_and_send_central_dhcheck+0x154>
   138a0:	2110      	movs	r1, #16
   138a2:	3008      	adds	r0, #8
   138a4:	f019 f8c3 	bl	2ca2e <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   138a8:	2210      	movs	r2, #16
   138aa:	4639      	mov	r1, r7
   138ac:	f016 fd56 	bl	2a35c <memcpy>
	smp_send(smp, buf, NULL, NULL);
   138b0:	4620      	mov	r0, r4
   138b2:	462a      	mov	r2, r5
   138b4:	4631      	mov	r1, r6
   138b6:	f018 fcb1 	bl	2c21c <smp_send.constprop.0>
	return 0;
   138ba:	4628      	mov	r0, r5
   138bc:	e7d7      	b.n	1386e <compute_and_send_central_dhcheck+0x156>
		BT_ERR("Calculate LTK failed");
   138be:	4808      	ldr	r0, [pc, #32]	; (138e0 <compute_and_send_central_dhcheck+0x1c8>)
   138c0:	6803      	ldr	r3, [r0, #0]
   138c2:	075b      	lsls	r3, r3, #29
   138c4:	d0d2      	beq.n	1386c <compute_and_send_central_dhcheck+0x154>
   138c6:	4b09      	ldr	r3, [pc, #36]	; (138ec <compute_and_send_central_dhcheck+0x1d4>)
   138c8:	9318      	str	r3, [sp, #96]	; 0x60
   138ca:	2302      	movs	r3, #2
   138cc:	930c      	str	r3, [sp, #48]	; 0x30
		BT_ERR("Calculate local DHKey check failed");
   138ce:	9317      	str	r3, [sp, #92]	; 0x5c
   138d0:	aa17      	add	r2, sp, #92	; 0x5c
   138d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   138d6:	e7d6      	b.n	13886 <compute_and_send_central_dhcheck+0x16e>
   138d8:	0002e5fe 	.word	0x0002e5fe
   138dc:	000343d3 	.word	0x000343d3
   138e0:	20000a64 	.word	0x20000a64
   138e4:	00034166 	.word	0x00034166
   138e8:	00033f9c 	.word	0x00033f9c
   138ec:	00034151 	.word	0x00034151

000138f0 <smp_send_pairing_confirm>:
{
   138f0:	b570      	push	{r4, r5, r6, lr}
	switch (smp->method) {
   138f2:	7a04      	ldrb	r4, [r0, #8]
   138f4:	2c02      	cmp	r4, #2
{
   138f6:	b08a      	sub	sp, #40	; 0x28
   138f8:	4605      	mov	r5, r0
	switch (smp->method) {
   138fa:	d823      	bhi.n	13944 <smp_send_pairing_confirm+0x54>
   138fc:	b144      	cbz	r4, 13910 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   138fe:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   13902:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   13906:	40dc      	lsrs	r4, r3
   13908:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1390c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   13910:	2103      	movs	r1, #3
   13912:	4628      	mov	r0, r5
   13914:	f018 fd07 	bl	2c326 <smp_create_pdu.constprop.0>
	if (!buf) {
   13918:	4606      	mov	r6, r0
   1391a:	b1c8      	cbz	r0, 13950 <smp_send_pairing_confirm+0x60>
   1391c:	2110      	movs	r1, #16
   1391e:	3008      	adds	r0, #8
   13920:	f019 f885 	bl	2ca2e <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   13924:	9000      	str	r0, [sp, #0]
   13926:	4818      	ldr	r0, [pc, #96]	; (13988 <smp_send_pairing_confirm+0x98>)
   13928:	4623      	mov	r3, r4
   1392a:	6800      	ldr	r0, [r0, #0]
   1392c:	f105 0227 	add.w	r2, r5, #39	; 0x27
   13930:	f105 0157 	add.w	r1, r5, #87	; 0x57
   13934:	f018 fbf0 	bl	2c118 <smp_f4>
   13938:	4604      	mov	r4, r0
   1393a:	b1d0      	cbz	r0, 13972 <smp_send_pairing_confirm+0x82>
		net_buf_unref(buf);
   1393c:	4630      	mov	r0, r6
   1393e:	f00d f973 	bl	20c28 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   13942:	e005      	b.n	13950 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   13944:	2c03      	cmp	r4, #3
   13946:	d012      	beq.n	1396e <smp_send_pairing_confirm+0x7e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13948:	4810      	ldr	r0, [pc, #64]	; (1398c <smp_send_pairing_confirm+0x9c>)
   1394a:	6803      	ldr	r3, [r0, #0]
   1394c:	075b      	lsls	r3, r3, #29
   1394e:	d102      	bne.n	13956 <smp_send_pairing_confirm+0x66>
		return BT_SMP_ERR_UNSPECIFIED;
   13950:	2008      	movs	r0, #8
}
   13952:	b00a      	add	sp, #40	; 0x28
   13954:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13956:	4b0e      	ldr	r3, [pc, #56]	; (13990 <smp_send_pairing_confirm+0xa0>)
   13958:	aa07      	add	r2, sp, #28
	switch (smp->method) {
   1395a:	e9cd 3408 	strd	r3, r4, [sp, #32]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1395e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13962:	2303      	movs	r3, #3
   13964:	9303      	str	r3, [sp, #12]
   13966:	9307      	str	r3, [sp, #28]
   13968:	f018 fc75 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   1396c:	e7f0      	b.n	13950 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   1396e:	2400      	movs	r4, #0
   13970:	e7ce      	b.n	13910 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   13972:	4602      	mov	r2, r0
   13974:	4631      	mov	r1, r6
   13976:	4628      	mov	r0, r5
   13978:	f018 fc50 	bl	2c21c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1397c:	1d28      	adds	r0, r5, #4
   1397e:	4621      	mov	r1, r4
   13980:	f018 fc3d 	bl	2c1fe <atomic_clear_bit>
	return 0;
   13984:	4620      	mov	r0, r4
   13986:	e7e4      	b.n	13952 <smp_send_pairing_confirm+0x62>
   13988:	20002e44 	.word	0x20002e44
   1398c:	20000a64 	.word	0x20000a64
   13990:	00033f9c 	.word	0x00033f9c

00013994 <smp_public_key>:
{
   13994:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   13996:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   13998:	f100 0657 	add.w	r6, r0, #87	; 0x57
{
   1399c:	b088      	sub	sp, #32
   1399e:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   139a0:	2220      	movs	r2, #32
   139a2:	4629      	mov	r1, r5
   139a4:	4630      	mov	r0, r6
   139a6:	f016 fcd9 	bl	2a35c <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   139aa:	2220      	movs	r2, #32
   139ac:	18a9      	adds	r1, r5, r2
   139ae:	f104 0077 	add.w	r0, r4, #119	; 0x77
   139b2:	f016 fcd3 	bl	2a35c <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   139b6:	4630      	mov	r0, r6
   139b8:	f7fb fa08 	bl	edcc <bt_pub_key_is_debug>
   139bc:	b9d0      	cbnz	r0, 139f4 <smp_public_key+0x60>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   139be:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   139c2:	78db      	ldrb	r3, [r3, #3]
   139c4:	2b00      	cmp	r3, #0
   139c6:	d144      	bne.n	13a52 <smp_public_key+0xbe>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   139c8:	1d25      	adds	r5, r4, #4
   139ca:	210e      	movs	r1, #14
   139cc:	4628      	mov	r0, r5
   139ce:	f018 fc54 	bl	2c27a <atomic_test_bit>
   139d2:	2800      	cmp	r0, #0
   139d4:	d14a      	bne.n	13a6c <smp_public_key+0xd8>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   139d6:	4b75      	ldr	r3, [pc, #468]	; (13bac <smp_public_key+0x218>)
   139d8:	2220      	movs	r2, #32
   139da:	6819      	ldr	r1, [r3, #0]
   139dc:	4630      	mov	r0, r6
   139de:	f016 fc94 	bl	2a30a <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   139e2:	2800      	cmp	r0, #0
   139e4:	d142      	bne.n	13a6c <smp_public_key+0xd8>
			BT_WARN("Remote public key rejected");
   139e6:	4872      	ldr	r0, [pc, #456]	; (13bb0 <smp_public_key+0x21c>)
   139e8:	6803      	ldr	r3, [r0, #0]
   139ea:	f013 0f06 	tst.w	r3, #6
   139ee:	d132      	bne.n	13a56 <smp_public_key+0xc2>
			return BT_SMP_ERR_UNSPECIFIED;
   139f0:	2008      	movs	r0, #8
   139f2:	e02c      	b.n	13a4e <smp_public_key+0xba>
		BT_INFO("Remote is using Debug Public key");
   139f4:	486e      	ldr	r0, [pc, #440]	; (13bb0 <smp_public_key+0x21c>)
   139f6:	6803      	ldr	r3, [r0, #0]
   139f8:	f003 0307 	and.w	r3, r3, #7
   139fc:	2b02      	cmp	r3, #2
   139fe:	d909      	bls.n	13a14 <smp_public_key+0x80>
   13a00:	4b6c      	ldr	r3, [pc, #432]	; (13bb4 <smp_public_key+0x220>)
   13a02:	9306      	str	r3, [sp, #24]
   13a04:	aa05      	add	r2, sp, #20
   13a06:	2302      	movs	r3, #2
   13a08:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   13a0c:	9301      	str	r3, [sp, #4]
   13a0e:	9305      	str	r3, [sp, #20]
   13a10:	f018 fc21 	bl	2c256 <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   13a14:	210e      	movs	r1, #14
   13a16:	1d20      	adds	r0, r4, #4
   13a18:	f018 fc71 	bl	2c2fe <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   13a1c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   13a20:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   13a24:	b933      	cbnz	r3, 13a34 <smp_public_key+0xa0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   13a26:	7a28      	ldrb	r0, [r5, #8]
   13a28:	f105 0188 	add.w	r1, r5, #136	; 0x88
   13a2c:	f001 f8e4 	bl	14bf8 <bt_keys_get_addr>
   13a30:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   13a34:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   13a38:	2b00      	cmp	r3, #0
   13a3a:	d0c0      	beq.n	139be <smp_public_key+0x2a>
   13a3c:	89da      	ldrh	r2, [r3, #14]
   13a3e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   13a42:	2a00      	cmp	r2, #0
   13a44:	d0bb      	beq.n	139be <smp_public_key+0x2a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   13a46:	7b5b      	ldrb	r3, [r3, #13]
   13a48:	0798      	lsls	r0, r3, #30
   13a4a:	d4b8      	bmi.n	139be <smp_public_key+0x2a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   13a4c:	2003      	movs	r0, #3
}
   13a4e:	b008      	add	sp, #32
   13a50:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   13a52:	2000      	movs	r0, #0
   13a54:	e7fb      	b.n	13a4e <smp_public_key+0xba>
			BT_WARN("Remote public key rejected");
   13a56:	4b58      	ldr	r3, [pc, #352]	; (13bb8 <smp_public_key+0x224>)
   13a58:	9306      	str	r3, [sp, #24]
   13a5a:	2302      	movs	r3, #2
   13a5c:	9301      	str	r3, [sp, #4]
   13a5e:	9305      	str	r3, [sp, #20]
   13a60:	aa05      	add	r2, sp, #20
   13a62:	f44f 5184 	mov.w	r1, #4224	; 0x1080
			BT_ERR("Unknown pairing method (%u)", smp->method);
   13a66:	f018 fbf6 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   13a6a:	e7c1      	b.n	139f0 <smp_public_key+0x5c>
		switch (smp->method) {
   13a6c:	7a23      	ldrb	r3, [r4, #8]
   13a6e:	2b05      	cmp	r3, #5
   13a70:	f200 8085 	bhi.w	13b7e <smp_public_key+0x1ea>
   13a74:	e8df f003 	tbb	[pc, r3]
   13a78:	03084403 	.word	0x03084403
   13a7c:	5083      	.short	0x5083
			atomic_set_bit(smp->allowed_cmds,
   13a7e:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   13a80:	4620      	mov	r0, r4
   13a82:	f018 fc3c 	bl	2c2fe <atomic_set_bit>
			break;
   13a86:	e02c      	b.n	13ae2 <smp_public_key+0x14e>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   13a88:	2104      	movs	r1, #4
   13a8a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   13a8e:	f004 fb8f 	bl	181b0 <bt_rand>
   13a92:	2800      	cmp	r0, #0
   13a94:	d1ac      	bne.n	139f0 <smp_public_key+0x5c>
		smp->passkey %= 1000000;
   13a96:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   13a9a:	4a48      	ldr	r2, [pc, #288]	; (13bbc <smp_public_key+0x228>)
	if (bt_auth && bt_auth->passkey_display) {
   13a9c:	4e48      	ldr	r6, [pc, #288]	; (13bc0 <smp_public_key+0x22c>)
		smp->passkey %= 1000000;
   13a9e:	fbb3 f1f2 	udiv	r1, r3, r2
   13aa2:	fb02 3311 	mls	r3, r2, r1, r3
   13aa6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   13aaa:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
   13aac:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   13ab0:	b163      	cbz	r3, 13acc <smp_public_key+0x138>
   13ab2:	681b      	ldr	r3, [r3, #0]
   13ab4:	b153      	cbz	r3, 13acc <smp_public_key+0x138>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   13ab6:	210b      	movs	r1, #11
   13ab8:	4628      	mov	r0, r5
   13aba:	f018 fc20 	bl	2c2fe <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   13abe:	6833      	ldr	r3, [r6, #0]
   13ac0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   13ac4:	681b      	ldr	r3, [r3, #0]
   13ac6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   13aca:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   13acc:	2103      	movs	r1, #3
   13ace:	4620      	mov	r0, r4
   13ad0:	f018 fc15 	bl	2c2fe <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   13ad4:	210e      	movs	r1, #14
   13ad6:	f018 fc12 	bl	2c2fe <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   13ada:	f7ff ff09 	bl	138f0 <smp_send_pairing_confirm>
			if (err) {
   13ade:	2800      	cmp	r0, #0
   13ae0:	d1b5      	bne.n	13a4e <smp_public_key+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   13ae2:	4628      	mov	r0, r5
   13ae4:	2107      	movs	r1, #7
   13ae6:	f018 fc0a 	bl	2c2fe <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   13aea:	2008      	movs	r0, #8
   13aec:	f7ff fa00 	bl	12ef0 <smp_find>
   13af0:	2800      	cmp	r0, #0
   13af2:	d1ae      	bne.n	13a52 <smp_public_key+0xbe>
		return smp_dhkey_generate(smp);
   13af4:	4620      	mov	r0, r4
}
   13af6:	b008      	add	sp, #32
   13af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_dhkey_generate(smp);
   13afc:	f7ff ba92 	b.w	13024 <smp_dhkey_generate>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13b00:	210a      	movs	r1, #10
   13b02:	4628      	mov	r0, r5
   13b04:	f018 fbfb 	bl	2c2fe <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   13b08:	4b2d      	ldr	r3, [pc, #180]	; (13bc0 <smp_public_key+0x22c>)
   13b0a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   13b0e:	681b      	ldr	r3, [r3, #0]
   13b10:	685b      	ldr	r3, [r3, #4]
   13b12:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   13b14:	210e      	movs	r1, #14
   13b16:	e7b3      	b.n	13a80 <smp_public_key+0xec>
			if (bt_rand(smp->prnd, 16)) {
   13b18:	2110      	movs	r1, #16
   13b1a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   13b1e:	f004 fb47 	bl	181b0 <bt_rand>
   13b22:	2800      	cmp	r0, #0
   13b24:	f47f af64 	bne.w	139f0 <smp_public_key+0x5c>
			if (bt_auth && bt_auth->oob_data_request) {
   13b28:	4e25      	ldr	r6, [pc, #148]	; (13bc0 <smp_public_key+0x22c>)
   13b2a:	6833      	ldr	r3, [r6, #0]
   13b2c:	2b00      	cmp	r3, #0
   13b2e:	d035      	beq.n	13b9c <smp_public_key+0x208>
   13b30:	68db      	ldr	r3, [r3, #12]
   13b32:	2b00      	cmp	r3, #0
   13b34:	d032      	beq.n	13b9c <smp_public_key+0x208>
				struct bt_conn_oob_info info = {
   13b36:	4b23      	ldr	r3, [pc, #140]	; (13bc4 <smp_public_key+0x230>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   13b38:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
				struct bt_conn_oob_info info = {
   13b3c:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   13b40:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13b44:	78c9      	ldrb	r1, [r1, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   13b46:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   13b48:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13b4a:	b939      	cbnz	r1, 13b5c <smp_public_key+0x1c8>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   13b4c:	07d1      	lsls	r1, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   13b4e:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   13b52:	d425      	bmi.n	13ba0 <smp_public_key+0x20c>
	int oob_config = BT_CONN_OOB_NO_DATA;
   13b54:	2b00      	cmp	r3, #0
   13b56:	bf08      	it	eq
   13b58:	2003      	moveq	r0, #3
   13b5a:	e000      	b.n	13b5e <smp_public_key+0x1ca>
   13b5c:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
   13b5e:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   13b60:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   13b64:	f88d 0009 	strb.w	r0, [sp, #9]
				atomic_set_bit(smp->flags,
   13b68:	210c      	movs	r1, #12
   13b6a:	4628      	mov	r0, r5
   13b6c:	f018 fbc7 	bl	2c2fe <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   13b70:	6833      	ldr	r3, [r6, #0]
   13b72:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   13b76:	68db      	ldr	r3, [r3, #12]
   13b78:	a902      	add	r1, sp, #8
   13b7a:	4798      	blx	r3
			break;
   13b7c:	e7b1      	b.n	13ae2 <smp_public_key+0x14e>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   13b7e:	480c      	ldr	r0, [pc, #48]	; (13bb0 <smp_public_key+0x21c>)
   13b80:	6802      	ldr	r2, [r0, #0]
   13b82:	0752      	lsls	r2, r2, #29
   13b84:	f43f af34 	beq.w	139f0 <smp_public_key+0x5c>
   13b88:	4a0f      	ldr	r2, [pc, #60]	; (13bc8 <smp_public_key+0x234>)
		switch (smp->method) {
   13b8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_ERR("Unknown pairing method (%u)", smp->method);
   13b8e:	2303      	movs	r3, #3
   13b90:	9301      	str	r3, [sp, #4]
   13b92:	9305      	str	r3, [sp, #20]
   13b94:	aa05      	add	r2, sp, #20
   13b96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13b9a:	e764      	b.n	13a66 <smp_public_key+0xd2>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   13b9c:	2002      	movs	r0, #2
   13b9e:	e756      	b.n	13a4e <smp_public_key+0xba>
				     BT_CONN_OOB_BOTH_PEERS :
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	bf0c      	ite	eq
   13ba4:	2001      	moveq	r0, #1
   13ba6:	2002      	movne	r0, #2
   13ba8:	e7d9      	b.n	13b5e <smp_public_key+0x1ca>
   13baa:	bf00      	nop
   13bac:	20002e44 	.word	0x20002e44
   13bb0:	20000a64 	.word	0x20000a64
   13bb4:	00034189 	.word	0x00034189
   13bb8:	000341aa 	.word	0x000341aa
   13bbc:	000f4240 	.word	0x000f4240
   13bc0:	20002cb8 	.word	0x20002cb8
   13bc4:	0002e5fe 	.word	0x0002e5fe
   13bc8:	00033f9c 	.word	0x00033f9c

00013bcc <bt_smp_connected>:
{
   13bcc:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   13bce:	4905      	ldr	r1, [pc, #20]	; (13be4 <bt_smp_connected+0x18>)
   13bd0:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   13bd4:	30e8      	adds	r0, #232	; 0xe8
   13bd6:	f019 fe46 	bl	2d866 <k_work_init_delayable>
	smp_reset(smp);
   13bda:	4620      	mov	r0, r4
}
   13bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   13be0:	f018 bbf4 	b.w	2c3cc <smp_reset>
   13be4:	00014a65 	.word	0x00014a65

00013be8 <smp_pairing_rsp>:
{
   13be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   13bec:	688f      	ldr	r7, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   13bee:	78fb      	ldrb	r3, [r7, #3]
   13bf0:	3b07      	subs	r3, #7
   13bf2:	2b09      	cmp	r3, #9
{
   13bf4:	b088      	sub	sp, #32
   13bf6:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   13bf8:	d904      	bls.n	13c04 <smp_pairing_rsp+0x1c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   13bfa:	2706      	movs	r7, #6
}
   13bfc:	4638      	mov	r0, r7
   13bfe:	b008      	add	sp, #32
   13c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   13c04:	793a      	ldrb	r2, [r7, #4]
   13c06:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   13c0a:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   13c0e:	4013      	ands	r3, r2
   13c10:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   13c14:	797a      	ldrb	r2, [r7, #5]
   13c16:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   13c1a:	4013      	ands	r3, r2
   13c1c:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   13c20:	2302      	movs	r3, #2
   13c22:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   13c24:	2206      	movs	r2, #6
   13c26:	4639      	mov	r1, r7
   13c28:	3011      	adds	r0, #17
   13c2a:	f016 fb97 	bl	2a35c <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   13c2e:	78bb      	ldrb	r3, [r7, #2]
   13c30:	0718      	lsls	r0, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   13c32:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   13c36:	d506      	bpl.n	13c46 <smp_pairing_rsp+0x5e>
   13c38:	7b23      	ldrb	r3, [r4, #12]
   13c3a:	0719      	lsls	r1, r3, #28
   13c3c:	d503      	bpl.n	13c46 <smp_pairing_rsp+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   13c3e:	2105      	movs	r1, #5
   13c40:	4628      	mov	r0, r5
   13c42:	f018 fb5c 	bl	2c2fe <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   13c46:	78bb      	ldrb	r3, [r7, #2]
   13c48:	069a      	lsls	r2, r3, #26
   13c4a:	d506      	bpl.n	13c5a <smp_pairing_rsp+0x72>
   13c4c:	7b23      	ldrb	r3, [r4, #12]
   13c4e:	069b      	lsls	r3, r3, #26
   13c50:	d503      	bpl.n	13c5a <smp_pairing_rsp+0x72>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   13c52:	2114      	movs	r1, #20
   13c54:	4628      	mov	r0, r5
   13c56:	f018 fb52 	bl	2c2fe <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   13c5a:	78bb      	ldrb	r3, [r7, #2]
   13c5c:	07d8      	lsls	r0, r3, #31
   13c5e:	d506      	bpl.n	13c6e <smp_pairing_rsp+0x86>
   13c60:	7b23      	ldrb	r3, [r4, #12]
   13c62:	07d9      	lsls	r1, r3, #31
   13c64:	d503      	bpl.n	13c6e <smp_pairing_rsp+0x86>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   13c66:	210d      	movs	r1, #13
   13c68:	4628      	mov	r0, r5
   13c6a:	f018 fb48 	bl	2c2fe <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13c6e:	2105      	movs	r1, #5
   13c70:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   13c72:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13c74:	f018 fb01 	bl	2c27a <atomic_test_bit>
   13c78:	bb28      	cbnz	r0, 13cc6 <smp_pairing_rsp+0xde>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   13c7a:	2f04      	cmp	r7, #4
   13c7c:	d841      	bhi.n	13d02 <smp_pairing_rsp+0x11a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   13c7e:	7ca2      	ldrb	r2, [r4, #18]
   13c80:	7ae3      	ldrb	r3, [r4, #11]
   13c82:	4013      	ands	r3, r2
   13c84:	07da      	lsls	r2, r3, #31
   13c86:	d43a      	bmi.n	13cfe <smp_pairing_rsp+0x116>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   13c88:	7b21      	ldrb	r1, [r4, #12]
   13c8a:	7ce0      	ldrb	r0, [r4, #19]
   13c8c:	4301      	orrs	r1, r0
   13c8e:	f011 0104 	ands.w	r1, r1, #4
   13c92:	d00f      	beq.n	13cb4 <smp_pairing_rsp+0xcc>
	method = gen_method_legacy[remote_io][get_io_capa()];
   13c94:	f7ff f87a 	bl	12d8c <get_io_capa>
   13c98:	4b9e      	ldr	r3, [pc, #632]	; (13f14 <smp_pairing_rsp+0x32c>)
   13c9a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   13c9e:	441f      	add	r7, r3
   13ca0:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
   13ca2:	2904      	cmp	r1, #4
   13ca4:	d106      	bne.n	13cb4 <smp_pairing_rsp+0xcc>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   13ca6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   13caa:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   13cac:	2b00      	cmp	r3, #0
   13cae:	bf0c      	ite	eq
   13cb0:	2102      	moveq	r1, #2
   13cb2:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
   13cb4:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   13cb6:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   13cba:	4620      	mov	r0, r4
   13cbc:	f018 fae6 	bl	2c28c <update_keys_check>
   13cc0:	bb08      	cbnz	r0, 13d06 <smp_pairing_rsp+0x11e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   13cc2:	2703      	movs	r7, #3
   13cc4:	e79a      	b.n	13bfc <smp_pairing_rsp+0x14>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   13cc6:	7b20      	ldrb	r0, [r4, #12]
   13cc8:	7ce2      	ldrb	r2, [r4, #19]
   13cca:	ea00 0302 	and.w	r3, r0, r2
   13cce:	071b      	lsls	r3, r3, #28
   13cd0:	d506      	bpl.n	13ce0 <smp_pairing_rsp+0xf8>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   13cd2:	7ae3      	ldrb	r3, [r4, #11]
   13cd4:	f894 c012 	ldrb.w	ip, [r4, #18]
   13cd8:	ea43 030c 	orr.w	r3, r3, ip
   13cdc:	07db      	lsls	r3, r3, #31
   13cde:	d4e9      	bmi.n	13cb4 <smp_pairing_rsp+0xcc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   13ce0:	2f04      	cmp	r7, #4
   13ce2:	d80e      	bhi.n	13d02 <smp_pairing_rsp+0x11a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   13ce4:	ea40 0102 	orr.w	r1, r0, r2
   13ce8:	f011 0104 	ands.w	r1, r1, #4
   13cec:	d0e2      	beq.n	13cb4 <smp_pairing_rsp+0xcc>
	return gen_method_sc[remote_io][get_io_capa()];
   13cee:	f7ff f84d 	bl	12d8c <get_io_capa>
   13cf2:	4b89      	ldr	r3, [pc, #548]	; (13f18 <smp_pairing_rsp+0x330>)
   13cf4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   13cf8:	441f      	add	r7, r3
   13cfa:	5c39      	ldrb	r1, [r7, r0]
   13cfc:	e7da      	b.n	13cb4 <smp_pairing_rsp+0xcc>
		return LEGACY_OOB;
   13cfe:	2106      	movs	r1, #6
   13d00:	e7d8      	b.n	13cb4 <smp_pairing_rsp+0xcc>
		return JUST_WORKS;
   13d02:	2100      	movs	r1, #0
   13d04:	e7d6      	b.n	13cb4 <smp_pairing_rsp+0xcc>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   13d06:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   13d0a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   13d0c:	2b03      	cmp	r3, #3
   13d0e:	d015      	beq.n	13d3c <smp_pairing_rsp+0x154>
   13d10:	d804      	bhi.n	13d1c <smp_pairing_rsp+0x134>
   13d12:	3b01      	subs	r3, #1
   13d14:	2b01      	cmp	r3, #1
   13d16:	d914      	bls.n	13d42 <smp_pairing_rsp+0x15a>
   13d18:	2708      	movs	r7, #8
   13d1a:	e76f      	b.n	13bfc <smp_pairing_rsp+0x14>
   13d1c:	2b04      	cmp	r3, #4
   13d1e:	d1fb      	bne.n	13d18 <smp_pairing_rsp+0x130>
	return MIN(req->max_key_size, rsp->max_key_size);
   13d20:	7d23      	ldrb	r3, [r4, #20]
   13d22:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   13d24:	4293      	cmp	r3, r2
   13d26:	bf28      	it	cs
   13d28:	4613      	movcs	r3, r2
   13d2a:	2b10      	cmp	r3, #16
   13d2c:	f47f af65 	bne.w	13bfa <smp_pairing_rsp+0x12>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13d30:	2105      	movs	r1, #5
   13d32:	4628      	mov	r0, r5
   13d34:	f018 faa1 	bl	2c27a <atomic_test_bit>
   13d38:	2800      	cmp	r0, #0
   13d3a:	d0c2      	beq.n	13cc2 <smp_pairing_rsp+0xda>
		if (smp->method == JUST_WORKS) {
   13d3c:	7a23      	ldrb	r3, [r4, #8]
   13d3e:	2b00      	cmp	r3, #0
   13d40:	d0bf      	beq.n	13cc2 <smp_pairing_rsp+0xda>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13d42:	2105      	movs	r1, #5
   13d44:	4628      	mov	r0, r5
   13d46:	f018 fa98 	bl	2c27a <atomic_test_bit>
   13d4a:	2800      	cmp	r0, #0
   13d4c:	f040 80ad 	bne.w	13eaa <smp_pairing_rsp+0x2c2>
	struct bt_conn *conn = smp->chan.chan.conn;
   13d50:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   13d54:	7a30      	ldrb	r0, [r6, #8]
   13d56:	f106 0188 	add.w	r1, r6, #136	; 0x88
   13d5a:	f000 ffd1 	bl	14d00 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   13d5e:	7a23      	ldrb	r3, [r4, #8]
   13d60:	b190      	cbz	r0, 13d88 <smp_pairing_rsp+0x1a0>
   13d62:	7b42      	ldrb	r2, [r0, #13]
   13d64:	07d0      	lsls	r0, r2, #31
   13d66:	d50f      	bpl.n	13d88 <smp_pairing_rsp+0x1a0>
   13d68:	b973      	cbnz	r3, 13d88 <smp_pairing_rsp+0x1a0>
		BT_ERR("JustWorks failed, authenticated keys present");
   13d6a:	486c      	ldr	r0, [pc, #432]	; (13f1c <smp_pairing_rsp+0x334>)
   13d6c:	6803      	ldr	r3, [r0, #0]
   13d6e:	0759      	lsls	r1, r3, #29
   13d70:	d0d2      	beq.n	13d18 <smp_pairing_rsp+0x130>
   13d72:	4b6b      	ldr	r3, [pc, #428]	; (13f20 <smp_pairing_rsp+0x338>)
   13d74:	9306      	str	r3, [sp, #24]
   13d76:	2302      	movs	r3, #2
   13d78:	9301      	str	r3, [sp, #4]
   13d7a:	9305      	str	r3, [sp, #20]
   13d7c:	aa05      	add	r2, sp, #20
   13d7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13d82:	f018 fa68 	bl	2c256 <z_log_msg2_static_create.constprop.0>
	if (ret) {
   13d86:	e7c7      	b.n	13d18 <smp_pairing_rsp+0x130>
	switch (smp->method) {
   13d88:	2b06      	cmp	r3, #6
   13d8a:	d867      	bhi.n	13e5c <smp_pairing_rsp+0x274>
   13d8c:	e8df f003 	tbb	[pc, r3]
   13d90:	66335c1b 	.word	0x66335c1b
   13d94:	6666      	.short	0x6666
   13d96:	04          	.byte	0x04
   13d97:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   13d98:	4e62      	ldr	r6, [pc, #392]	; (13f24 <smp_pairing_rsp+0x33c>)
   13d9a:	6833      	ldr	r3, [r6, #0]
   13d9c:	2b00      	cmp	r3, #0
   13d9e:	d06c      	beq.n	13e7a <smp_pairing_rsp+0x292>
   13da0:	68db      	ldr	r3, [r3, #12]
   13da2:	2b00      	cmp	r3, #0
   13da4:	d069      	beq.n	13e7a <smp_pairing_rsp+0x292>
			struct bt_conn_oob_info info = {
   13da6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13da8:	210a      	movs	r1, #10
   13daa:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   13dac:	f8ad 3008 	strh.w	r3, [sp, #8]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13db0:	f018 faa5 	bl	2c2fe <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   13db4:	6833      	ldr	r3, [r6, #0]
   13db6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   13dba:	68db      	ldr	r3, [r3, #12]
   13dbc:	a902      	add	r1, sp, #8
   13dbe:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   13dc0:	7a23      	ldrb	r3, [r4, #8]
   13dc2:	2b00      	cmp	r3, #0
   13dc4:	d15b      	bne.n	13e7e <smp_pairing_rsp+0x296>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   13dc6:	210f      	movs	r1, #15
   13dc8:	4628      	mov	r0, r5
   13dca:	f018 fa56 	bl	2c27a <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   13dce:	2800      	cmp	r0, #0
   13dd0:	d055      	beq.n	13e7e <smp_pairing_rsp+0x296>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   13dd2:	4e54      	ldr	r6, [pc, #336]	; (13f24 <smp_pairing_rsp+0x33c>)
   13dd4:	6833      	ldr	r3, [r6, #0]
   13dd6:	2b00      	cmp	r3, #0
   13dd8:	d051      	beq.n	13e7e <smp_pairing_rsp+0x296>
	    bt_auth && bt_auth->pairing_confirm) {
   13dda:	695b      	ldr	r3, [r3, #20]
   13ddc:	2b00      	cmp	r3, #0
   13dde:	d04e      	beq.n	13e7e <smp_pairing_rsp+0x296>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13de0:	4628      	mov	r0, r5
   13de2:	210a      	movs	r1, #10
   13de4:	f018 fa8b 	bl	2c2fe <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   13de8:	6833      	ldr	r3, [r6, #0]
   13dea:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   13dee:	695b      	ldr	r3, [r3, #20]
   13df0:	4798      	blx	r3
	return 0;
   13df2:	2700      	movs	r7, #0
   13df4:	e702      	b.n	13bfc <smp_pairing_rsp+0x14>
			if (bt_rand(&passkey, sizeof(passkey))) {
   13df6:	2104      	movs	r1, #4
   13df8:	a802      	add	r0, sp, #8
   13dfa:	f004 f9d9 	bl	181b0 <bt_rand>
   13dfe:	2800      	cmp	r0, #0
   13e00:	d18a      	bne.n	13d18 <smp_pairing_rsp+0x130>
			passkey %= 1000000;
   13e02:	9b02      	ldr	r3, [sp, #8]
   13e04:	4a48      	ldr	r2, [pc, #288]	; (13f28 <smp_pairing_rsp+0x340>)
		if (bt_auth && bt_auth->passkey_display) {
   13e06:	4f47      	ldr	r7, [pc, #284]	; (13f24 <smp_pairing_rsp+0x33c>)
			passkey %= 1000000;
   13e08:	fbb3 f1f2 	udiv	r1, r3, r2
   13e0c:	fb02 3311 	mls	r3, r2, r1, r3
   13e10:	9302      	str	r3, [sp, #8]
		if (bt_auth && bt_auth->passkey_display) {
   13e12:	683b      	ldr	r3, [r7, #0]
   13e14:	b153      	cbz	r3, 13e2c <smp_pairing_rsp+0x244>
   13e16:	681b      	ldr	r3, [r3, #0]
   13e18:	b143      	cbz	r3, 13e2c <smp_pairing_rsp+0x244>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   13e1a:	210b      	movs	r1, #11
   13e1c:	4628      	mov	r0, r5
   13e1e:	f018 fa6e 	bl	2c2fe <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   13e22:	683b      	ldr	r3, [r7, #0]
   13e24:	9902      	ldr	r1, [sp, #8]
   13e26:	681b      	ldr	r3, [r3, #0]
   13e28:	4630      	mov	r0, r6
   13e2a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   13e2c:	9b02      	ldr	r3, [sp, #8]
	dst[0] = val;
   13e2e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   13e32:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   13e36:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13e38:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   13e3c:	0a1b      	lsrs	r3, r3, #8
   13e3e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   13e42:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   13e46:	e7bb      	b.n	13dc0 <smp_pairing_rsp+0x1d8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13e48:	4628      	mov	r0, r5
   13e4a:	210a      	movs	r1, #10
   13e4c:	f018 fa57 	bl	2c2fe <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   13e50:	4b34      	ldr	r3, [pc, #208]	; (13f24 <smp_pairing_rsp+0x33c>)
   13e52:	681b      	ldr	r3, [r3, #0]
   13e54:	4630      	mov	r0, r6
   13e56:	685b      	ldr	r3, [r3, #4]
   13e58:	4798      	blx	r3
	if (ret) {
   13e5a:	e7b1      	b.n	13dc0 <smp_pairing_rsp+0x1d8>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13e5c:	482f      	ldr	r0, [pc, #188]	; (13f1c <smp_pairing_rsp+0x334>)
   13e5e:	6802      	ldr	r2, [r0, #0]
   13e60:	0752      	lsls	r2, r2, #29
   13e62:	f43f af59 	beq.w	13d18 <smp_pairing_rsp+0x130>
   13e66:	4a31      	ldr	r2, [pc, #196]	; (13f2c <smp_pairing_rsp+0x344>)
	switch (smp->method) {
   13e68:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   13e6c:	2303      	movs	r3, #3
   13e6e:	9301      	str	r3, [sp, #4]
   13e70:	9305      	str	r3, [sp, #20]
   13e72:	aa05      	add	r2, sp, #20
   13e74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13e78:	e783      	b.n	13d82 <smp_pairing_rsp+0x19a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   13e7a:	2702      	movs	r7, #2
   13e7c:	e6be      	b.n	13bfc <smp_pairing_rsp+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13e7e:	210a      	movs	r1, #10
   13e80:	4628      	mov	r0, r5
   13e82:	f018 f9fa 	bl	2c27a <atomic_test_bit>
   13e86:	b958      	cbnz	r0, 13ea0 <smp_pairing_rsp+0x2b8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   13e88:	4620      	mov	r0, r4
   13e8a:	2103      	movs	r1, #3
   13e8c:	f018 fa37 	bl	2c2fe <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   13e90:	210e      	movs	r1, #14
   13e92:	f018 fa34 	bl	2c2fe <atomic_set_bit>
}
   13e96:	b008      	add	sp, #32
   13e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   13e9c:	f018 bb19 	b.w	2c4d2 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   13ea0:	2100      	movs	r1, #0
   13ea2:	4628      	mov	r0, r5
   13ea4:	f018 fa2b 	bl	2c2fe <atomic_set_bit>
   13ea8:	e7a3      	b.n	13df2 <smp_pairing_rsp+0x20a>
	smp->local_dist &= SEND_KEYS_SC;
   13eaa:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   13eae:	7a27      	ldrb	r7, [r4, #8]
	smp->local_dist &= SEND_KEYS_SC;
   13eb0:	f423 4379 	bic.w	r3, r3, #63744	; 0xf900
   13eb4:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
   13eb8:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   13ebc:	b9af      	cbnz	r7, 13eea <smp_pairing_rsp+0x302>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   13ebe:	210f      	movs	r1, #15
   13ec0:	4628      	mov	r0, r5
   13ec2:	f018 f9da 	bl	2c27a <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   13ec6:	b180      	cbz	r0, 13eea <smp_pairing_rsp+0x302>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   13ec8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13f24 <smp_pairing_rsp+0x33c>
   13ecc:	f8d8 3000 	ldr.w	r3, [r8]
   13ed0:	b15b      	cbz	r3, 13eea <smp_pairing_rsp+0x302>
	    bt_auth && bt_auth->pairing_confirm) {
   13ed2:	695b      	ldr	r3, [r3, #20]
   13ed4:	b14b      	cbz	r3, 13eea <smp_pairing_rsp+0x302>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   13ed6:	4628      	mov	r0, r5
   13ed8:	210a      	movs	r1, #10
   13eda:	f018 fa10 	bl	2c2fe <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   13ede:	f8d8 3000 	ldr.w	r3, [r8]
   13ee2:	4630      	mov	r0, r6
   13ee4:	695b      	ldr	r3, [r3, #20]
   13ee6:	4798      	blx	r3
		return 0;
   13ee8:	e688      	b.n	13bfc <smp_pairing_rsp+0x14>
	if (!sc_public_key) {
   13eea:	4b11      	ldr	r3, [pc, #68]	; (13f30 <smp_pairing_rsp+0x348>)
   13eec:	681f      	ldr	r7, [r3, #0]
   13eee:	b927      	cbnz	r7, 13efa <smp_pairing_rsp+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   13ef0:	2106      	movs	r1, #6
   13ef2:	4628      	mov	r0, r5
   13ef4:	f018 fa03 	bl	2c2fe <atomic_set_bit>
		return 0;
   13ef8:	e680      	b.n	13bfc <smp_pairing_rsp+0x14>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   13efa:	4620      	mov	r0, r4
   13efc:	210c      	movs	r1, #12
   13efe:	f018 f9fe 	bl	2c2fe <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   13f02:	210b      	movs	r1, #11
   13f04:	f018 f97b 	bl	2c1fe <atomic_clear_bit>
}
   13f08:	b008      	add	sp, #32
   13f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   13f0e:	f7ff bbe1 	b.w	136d4 <sc_send_public_key>
   13f12:	bf00      	nop
   13f14:	000343a1 	.word	0x000343a1
   13f18:	000343ba 	.word	0x000343ba
   13f1c:	20000a64 	.word	0x20000a64
   13f20:	000341c5 	.word	0x000341c5
   13f24:	20002cb8 	.word	0x20002cb8
   13f28:	000f4240 	.word	0x000f4240
   13f2c:	00033f9c 	.word	0x00033f9c
   13f30:	20002e44 	.word	0x20002e44

00013f34 <smp_pairing_random>:
{
   13f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13f38:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   13f3a:	f100 0737 	add.w	r7, r0, #55	; 0x37
   13f3e:	6889      	ldr	r1, [r1, #8]
{
   13f40:	b0a0      	sub	sp, #128	; 0x80
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   13f42:	2210      	movs	r2, #16
   13f44:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13f46:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   13f48:	f016 fa08 	bl	2a35c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13f4c:	2105      	movs	r1, #5
   13f4e:	4630      	mov	r0, r6
   13f50:	f018 f993 	bl	2c27a <atomic_test_bit>
   13f54:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
   13f58:	2800      	cmp	r0, #0
   13f5a:	d163      	bne.n	14024 <smp_pairing_random+0xf0>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   13f5c:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   13f60:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   13f64:	f10d 0820 	add.w	r8, sp, #32
   13f68:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   13f6a:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   13f6e:	9300      	str	r3, [sp, #0]
   13f70:	f8cd 8008 	str.w	r8, [sp, #8]
   13f74:	f104 0310 	add.w	r3, r4, #16
   13f78:	f104 0209 	add.w	r2, r4, #9
   13f7c:	4639      	mov	r1, r7
   13f7e:	4650      	mov	r0, sl
   13f80:	f018 fa4c 	bl	2c41c <smp_c1>
	if (err) {
   13f84:	b9e0      	cbnz	r0, 13fc0 <smp_pairing_random+0x8c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   13f86:	2210      	movs	r2, #16
   13f88:	4641      	mov	r1, r8
   13f8a:	f104 0017 	add.w	r0, r4, #23
   13f8e:	f016 f9bc 	bl	2a30a <memcmp>
   13f92:	2800      	cmp	r0, #0
   13f94:	d17b      	bne.n	1408e <smp_pairing_random+0x15a>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   13f96:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13f9a:	2d00      	cmp	r5, #0
   13f9c:	d13d      	bne.n	1401a <smp_pairing_random+0xe6>
	memcpy(out, r2, 8);
   13f9e:	2208      	movs	r2, #8
   13fa0:	f104 0127 	add.w	r1, r4, #39	; 0x27
   13fa4:	4640      	mov	r0, r8
   13fa6:	f016 f9d9 	bl	2a35c <memcpy>
	memcpy(out + 8, r1, 8);
   13faa:	2208      	movs	r2, #8
   13fac:	4639      	mov	r1, r7
   13fae:	a80a      	add	r0, sp, #40	; 0x28
   13fb0:	f016 f9d4 	bl	2a35c <memcpy>
	return bt_encrypt_le(k, out, out);
   13fb4:	4642      	mov	r2, r8
   13fb6:	4641      	mov	r1, r8
   13fb8:	4650      	mov	r0, sl
   13fba:	f004 f8fb 	bl	181b4 <bt_encrypt_le>
		if (err) {
   13fbe:	b108      	cbz	r0, 13fc4 <smp_pairing_random+0x90>
			return BT_SMP_ERR_UNSPECIFIED;
   13fc0:	2508      	movs	r5, #8
   13fc2:	e02b      	b.n	1401c <smp_pairing_random+0xe8>
		(void)memset(ediv, 0, sizeof(ediv));
   13fc4:	2202      	movs	r2, #2
   13fc6:	4629      	mov	r1, r5
   13fc8:	a804      	add	r0, sp, #16
   13fca:	f016 f9d2 	bl	2a372 <memset>
		(void)memset(rand, 0, sizeof(rand));
   13fce:	2208      	movs	r2, #8
   13fd0:	4629      	mov	r1, r5
   13fd2:	a806      	add	r0, sp, #24
   13fd4:	f016 f9cd 	bl	2a372 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   13fd8:	7d22      	ldrb	r2, [r4, #20]
   13fda:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   13fdc:	429a      	cmp	r2, r3
   13fde:	bf94      	ite	ls
   13fe0:	9200      	strls	r2, [sp, #0]
   13fe2:	9300      	strhi	r3, [sp, #0]
   13fe4:	a906      	add	r1, sp, #24
   13fe6:	4643      	mov	r3, r8
   13fe8:	aa04      	add	r2, sp, #16
   13fea:	4648      	mov	r0, r9
   13fec:	f016 fd31 	bl	2aa52 <bt_conn_le_start_encryption>
   13ff0:	b170      	cbz	r0, 14010 <smp_pairing_random+0xdc>
			BT_ERR("Failed to start encryption");
   13ff2:	4865      	ldr	r0, [pc, #404]	; (14188 <smp_pairing_random+0x254>)
   13ff4:	6803      	ldr	r3, [r0, #0]
   13ff6:	075c      	lsls	r4, r3, #29
   13ff8:	d0e2      	beq.n	13fc0 <smp_pairing_random+0x8c>
   13ffa:	4b64      	ldr	r3, [pc, #400]	; (1418c <smp_pairing_random+0x258>)
   13ffc:	9310      	str	r3, [sp, #64]	; 0x40
   13ffe:	2302      	movs	r3, #2
   14000:	9305      	str	r3, [sp, #20]
		BT_ERR("Calculate confirm failed");
   14002:	930f      	str	r3, [sp, #60]	; 0x3c
   14004:	aa0f      	add	r2, sp, #60	; 0x3c
   14006:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1400a:	f018 f924 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   1400e:	e7d7      	b.n	13fc0 <smp_pairing_random+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   14010:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   14012:	4630      	mov	r0, r6
   14014:	f018 f973 	bl	2c2fe <atomic_set_bit>
			return 0;
   14018:	e000      	b.n	1401c <smp_pairing_random+0xe8>
	return 0;
   1401a:	4605      	mov	r5, r0
}
   1401c:	4628      	mov	r0, r5
   1401e:	b020      	add	sp, #128	; 0x80
   14020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   14024:	f899 5003 	ldrb.w	r5, [r9, #3]
   14028:	2d00      	cmp	r5, #0
   1402a:	f040 80ab 	bne.w	14184 <smp_pairing_random+0x250>
	switch (smp->method) {
   1402e:	7a23      	ldrb	r3, [r4, #8]
   14030:	2b05      	cmp	r3, #5
   14032:	f200 808b 	bhi.w	1414c <smp_pairing_random+0x218>
   14036:	e8df f003 	tbb	[pc, r3]
   1403a:	0321      	.short	0x0321
   1403c:	2c892103 	.word	0x2c892103
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   14040:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   14044:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   14048:	40d3      	lsrs	r3, r2
   1404a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   14052:	494f      	ldr	r1, [pc, #316]	; (14190 <smp_pairing_random+0x25c>)
   14054:	f10d 0820 	add.w	r8, sp, #32
   14058:	f8cd 8000 	str.w	r8, [sp]
   1405c:	6809      	ldr	r1, [r1, #0]
   1405e:	463a      	mov	r2, r7
   14060:	f104 0057 	add.w	r0, r4, #87	; 0x57
   14064:	f018 f858 	bl	2c118 <smp_f4>
   14068:	b150      	cbz	r0, 14080 <smp_pairing_random+0x14c>
		BT_ERR("Calculate confirm failed");
   1406a:	4847      	ldr	r0, [pc, #284]	; (14188 <smp_pairing_random+0x254>)
   1406c:	6803      	ldr	r3, [r0, #0]
   1406e:	0759      	lsls	r1, r3, #29
   14070:	d0a6      	beq.n	13fc0 <smp_pairing_random+0x8c>
   14072:	4b48      	ldr	r3, [pc, #288]	; (14194 <smp_pairing_random+0x260>)
   14074:	9310      	str	r3, [sp, #64]	; 0x40
   14076:	2302      	movs	r3, #2
   14078:	9306      	str	r3, [sp, #24]
   1407a:	e7c2      	b.n	14002 <smp_pairing_random+0xce>
	switch (smp->method) {
   1407c:	2300      	movs	r3, #0
   1407e:	e7e8      	b.n	14052 <smp_pairing_random+0x11e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   14080:	2210      	movs	r2, #16
   14082:	4641      	mov	r1, r8
   14084:	f104 0017 	add.w	r0, r4, #23
   14088:	f016 f93f 	bl	2a30a <memcmp>
   1408c:	b108      	cbz	r0, 14092 <smp_pairing_random+0x15e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1408e:	2504      	movs	r5, #4
   14090:	e7c4      	b.n	1401c <smp_pairing_random+0xe8>
		switch (smp->method) {
   14092:	7a23      	ldrb	r3, [r4, #8]
   14094:	2b05      	cmp	r3, #5
   14096:	d859      	bhi.n	1414c <smp_pairing_random+0x218>
   14098:	e8df f003 	tbb	[pc, r3]
   1409c:	033f3f67 	.word	0x033f3f67
   140a0:	6758      	.short	0x6758
	sys_memcpy_swap(m, u, 32);
   140a2:	4b3b      	ldr	r3, [pc, #236]	; (14190 <smp_pairing_random+0x25c>)
   140a4:	2220      	movs	r2, #32
   140a6:	6819      	ldr	r1, [r3, #0]
   140a8:	a80c      	add	r0, sp, #48	; 0x30
   140aa:	f018 f800 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   140ae:	2220      	movs	r2, #32
   140b0:	f104 0157 	add.w	r1, r4, #87	; 0x57
   140b4:	a814      	add	r0, sp, #80	; 0x50
   140b6:	f017 fffa 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   140ba:	2210      	movs	r2, #16
   140bc:	4639      	mov	r1, r7
   140be:	a81c      	add	r0, sp, #112	; 0x70
   140c0:	f017 fff5 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   140c4:	2210      	movs	r2, #16
   140c6:	f104 0127 	add.w	r1, r4, #39	; 0x27
   140ca:	a808      	add	r0, sp, #32
   140cc:	f017 ffef 	bl	2c0ae <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   140d0:	ab08      	add	r3, sp, #32
   140d2:	2250      	movs	r2, #80	; 0x50
   140d4:	a90c      	add	r1, sp, #48	; 0x30
   140d6:	4618      	mov	r0, r3
   140d8:	f018 f802 	bl	2c0e0 <bt_smp_aes_cmac>
	if (err) {
   140dc:	2800      	cmp	r0, #0
   140de:	f47f af6f 	bne.w	13fc0 <smp_pairing_random+0x8c>
	memcpy(passkey, xs + 12, 4);
   140e2:	a90b      	add	r1, sp, #44	; 0x2c
   140e4:	2204      	movs	r2, #4
   140e6:	a806      	add	r0, sp, #24
   140e8:	f016 f938 	bl	2a35c <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   140ec:	9b06      	ldr	r3, [sp, #24]
   140ee:	4a2a      	ldr	r2, [pc, #168]	; (14198 <smp_pairing_random+0x264>)
   140f0:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   140f2:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   140f4:	fbb3 f1f2 	udiv	r1, r3, r2
   140f8:	fb02 3311 	mls	r3, r2, r1, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   140fc:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   140fe:	9306      	str	r3, [sp, #24]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14100:	f018 f8fd 	bl	2c2fe <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   14104:	2109      	movs	r1, #9
   14106:	f018 f8fa 	bl	2c2fe <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1410a:	4b24      	ldr	r3, [pc, #144]	; (1419c <smp_pairing_random+0x268>)
   1410c:	9906      	ldr	r1, [sp, #24]
   1410e:	681b      	ldr	r3, [r3, #0]
   14110:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   14114:	689b      	ldr	r3, [r3, #8]
   14116:	4798      	blx	r3
			return 0;
   14118:	e780      	b.n	1401c <smp_pairing_random+0xe8>
			smp->passkey_round++;
   1411a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1411e:	3301      	adds	r3, #1
   14120:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   14122:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   14124:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   14128:	d01f      	beq.n	1416a <smp_pairing_random+0x236>
			if (bt_rand(smp->prnd, 16)) {
   1412a:	2110      	movs	r1, #16
   1412c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   14130:	f004 f83e 	bl	181b0 <bt_rand>
   14134:	2800      	cmp	r0, #0
   14136:	f47f af43 	bne.w	13fc0 <smp_pairing_random+0x8c>
			atomic_set_bit(smp->allowed_cmds,
   1413a:	2103      	movs	r1, #3
   1413c:	4620      	mov	r0, r4
   1413e:	f018 f8de 	bl	2c2fe <atomic_set_bit>
}
   14142:	b020      	add	sp, #128	; 0x80
   14144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
   14148:	f7ff bbd2 	b.w	138f0 <smp_send_pairing_confirm>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1414c:	480e      	ldr	r0, [pc, #56]	; (14188 <smp_pairing_random+0x254>)
   1414e:	6802      	ldr	r2, [r0, #0]
   14150:	0752      	lsls	r2, r2, #29
   14152:	f43f af35 	beq.w	13fc0 <smp_pairing_random+0x8c>
   14156:	4a12      	ldr	r2, [pc, #72]	; (141a0 <smp_pairing_random+0x26c>)
		switch (smp->method) {
   14158:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1415c:	2303      	movs	r3, #3
   1415e:	9308      	str	r3, [sp, #32]
   14160:	930f      	str	r3, [sp, #60]	; 0x3c
   14162:	aa0f      	add	r2, sp, #60	; 0x3c
   14164:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14168:	e74f      	b.n	1400a <smp_pairing_random+0xd6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1416a:	2107      	movs	r1, #7
   1416c:	4630      	mov	r0, r6
   1416e:	f018 f884 	bl	2c27a <atomic_test_bit>
   14172:	b108      	cbz	r0, 14178 <smp_pairing_random+0x244>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   14174:	2109      	movs	r1, #9
   14176:	e74c      	b.n	14012 <smp_pairing_random+0xde>
		return compute_and_send_central_dhcheck(smp);
   14178:	4620      	mov	r0, r4
}
   1417a:	b020      	add	sp, #128	; 0x80
   1417c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
   14180:	f7ff baca 	b.w	13718 <compute_and_send_central_dhcheck>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   14184:	460d      	mov	r5, r1
   14186:	e749      	b.n	1401c <smp_pairing_random+0xe8>
   14188:	20000a64 	.word	0x20000a64
   1418c:	00033fb8 	.word	0x00033fb8
   14190:	20002e44 	.word	0x20002e44
   14194:	000341f2 	.word	0x000341f2
   14198:	000f4240 	.word	0x000f4240
   1419c:	20002cb8 	.word	0x20002cb8
   141a0:	00033f9c 	.word	0x00033f9c

000141a4 <bt_smp_sign_verify>:
{
   141a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   141a6:	898b      	ldrh	r3, [r1, #12]
   141a8:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   141aa:	6889      	ldr	r1, [r1, #8]
{
   141ac:	4605      	mov	r5, r0
   141ae:	b089      	sub	sp, #36	; 0x24
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   141b0:	3b0c      	subs	r3, #12
   141b2:	4419      	add	r1, r3
   141b4:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   141b6:	f105 0788 	add.w	r7, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   141ba:	a805      	add	r0, sp, #20
   141bc:	f016 f8ce 	bl	2a35c <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   141c0:	7a29      	ldrb	r1, [r5, #8]
   141c2:	463a      	mov	r2, r7
   141c4:	2010      	movs	r0, #16
   141c6:	f000 fd4d 	bl	14c64 <bt_keys_find>
	if (!keys) {
   141ca:	4605      	mov	r5, r0
   141cc:	b998      	cbnz	r0, 141f6 <bt_smp_sign_verify+0x52>
		BT_ERR("Unable to find Remote CSRK for %s",
   141ce:	4c2f      	ldr	r4, [pc, #188]	; (1428c <bt_smp_sign_verify+0xe8>)
   141d0:	6823      	ldr	r3, [r4, #0]
   141d2:	0759      	lsls	r1, r3, #29
   141d4:	d00c      	beq.n	141f0 <bt_smp_sign_verify+0x4c>
   141d6:	4638      	mov	r0, r7
   141d8:	f7f7 ff84 	bl	c0e4 <bt_addr_le_str_real>
   141dc:	4b2c      	ldr	r3, [pc, #176]	; (14290 <bt_smp_sign_verify+0xec>)
   141de:	9002      	str	r0, [sp, #8]
   141e0:	e9cd 5300 	strd	r5, r3, [sp]
   141e4:	2201      	movs	r2, #1
   141e6:	462b      	mov	r3, r5
   141e8:	4621      	mov	r1, r4
   141ea:	4628      	mov	r0, r5
   141ec:	f018 f836 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
		return -ENOENT;
   141f0:	f06f 0001 	mvn.w	r0, #1
   141f4:	e047      	b.n	14286 <bt_smp_sign_verify+0xe2>
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   141f6:	6e43      	ldr	r3, [r0, #100]	; 0x64
   141f8:	9304      	str	r3, [sp, #16]
   141fa:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   141fc:	68a0      	ldr	r0, [r4, #8]
   141fe:	3b0c      	subs	r3, #12
   14200:	2204      	movs	r2, #4
   14202:	a904      	add	r1, sp, #16
   14204:	4418      	add	r0, r3
   14206:	f016 f8a9 	bl	2a35c <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1420a:	89a2      	ldrh	r2, [r4, #12]
   1420c:	68a1      	ldr	r1, [r4, #8]
   1420e:	3a0c      	subs	r2, #12
   14210:	b292      	uxth	r2, r2
   14212:	f105 0054 	add.w	r0, r5, #84	; 0x54
   14216:	f7fe fddf 	bl	12dd8 <smp_sign_buf>
	if (err) {
   1421a:	4606      	mov	r6, r0
   1421c:	b198      	cbz	r0, 14246 <bt_smp_sign_verify+0xa2>
		BT_ERR("Unable to create signature for %s",
   1421e:	4c1b      	ldr	r4, [pc, #108]	; (1428c <bt_smp_sign_verify+0xe8>)
   14220:	6823      	ldr	r3, [r4, #0]
   14222:	075a      	lsls	r2, r3, #29
   14224:	d00c      	beq.n	14240 <bt_smp_sign_verify+0x9c>
   14226:	4638      	mov	r0, r7
   14228:	f7f7 ff5c 	bl	c0e4 <bt_addr_le_str_real>
   1422c:	4b19      	ldr	r3, [pc, #100]	; (14294 <bt_smp_sign_verify+0xf0>)
   1422e:	9301      	str	r3, [sp, #4]
   14230:	2300      	movs	r3, #0
   14232:	9002      	str	r0, [sp, #8]
   14234:	9300      	str	r3, [sp, #0]
   14236:	2201      	movs	r2, #1
   14238:	4621      	mov	r1, r4
   1423a:	4618      	mov	r0, r3
   1423c:	f018 f80e 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
   14240:	f06f 0004 	mvn.w	r0, #4
   14244:	e01f      	b.n	14286 <bt_smp_sign_verify+0xe2>
   14246:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   14248:	68a1      	ldr	r1, [r4, #8]
   1424a:	3b0c      	subs	r3, #12
   1424c:	220c      	movs	r2, #12
   1424e:	4419      	add	r1, r3
   14250:	a805      	add	r0, sp, #20
   14252:	f016 f85a 	bl	2a30a <memcmp>
   14256:	b198      	cbz	r0, 14280 <bt_smp_sign_verify+0xdc>
		BT_ERR("Unable to verify signature for %s",
   14258:	4c0c      	ldr	r4, [pc, #48]	; (1428c <bt_smp_sign_verify+0xe8>)
   1425a:	6823      	ldr	r3, [r4, #0]
   1425c:	075b      	lsls	r3, r3, #29
   1425e:	d00c      	beq.n	1427a <bt_smp_sign_verify+0xd6>
   14260:	4638      	mov	r0, r7
   14262:	f7f7 ff3f 	bl	c0e4 <bt_addr_le_str_real>
   14266:	4b0c      	ldr	r3, [pc, #48]	; (14298 <bt_smp_sign_verify+0xf4>)
   14268:	9002      	str	r0, [sp, #8]
   1426a:	e9cd 6300 	strd	r6, r3, [sp]
   1426e:	2201      	movs	r2, #1
   14270:	4633      	mov	r3, r6
   14272:	4621      	mov	r1, r4
   14274:	4630      	mov	r0, r6
   14276:	f017 fff1 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
		return -EBADMSG;
   1427a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1427e:	e002      	b.n	14286 <bt_smp_sign_verify+0xe2>
	keys->remote_csrk.cnt++;
   14280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   14282:	3301      	adds	r3, #1
   14284:	666b      	str	r3, [r5, #100]	; 0x64
}
   14286:	b009      	add	sp, #36	; 0x24
   14288:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1428a:	bf00      	nop
   1428c:	20000a64 	.word	0x20000a64
   14290:	0003420b 	.word	0x0003420b
   14294:	0003422d 	.word	0x0003422d
   14298:	0003424f 	.word	0x0003424f

0001429c <bt_smp_sign>:
{
   1429c:	b570      	push	{r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1429e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   142a2:	b086      	sub	sp, #24
   142a4:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   142a6:	4632      	mov	r2, r6
   142a8:	7a01      	ldrb	r1, [r0, #8]
   142aa:	2008      	movs	r0, #8
   142ac:	f000 fcda 	bl	14c64 <bt_keys_find>
	if (!keys) {
   142b0:	4604      	mov	r4, r0
   142b2:	b998      	cbnz	r0, 142dc <bt_smp_sign+0x40>
		BT_ERR("Unable to find local CSRK for %s",
   142b4:	4d22      	ldr	r5, [pc, #136]	; (14340 <bt_smp_sign+0xa4>)
   142b6:	682b      	ldr	r3, [r5, #0]
   142b8:	075a      	lsls	r2, r3, #29
   142ba:	d00c      	beq.n	142d6 <bt_smp_sign+0x3a>
   142bc:	4630      	mov	r0, r6
   142be:	f7f7 ff11 	bl	c0e4 <bt_addr_le_str_real>
   142c2:	4b20      	ldr	r3, [pc, #128]	; (14344 <bt_smp_sign+0xa8>)
   142c4:	9002      	str	r0, [sp, #8]
   142c6:	e9cd 4300 	strd	r4, r3, [sp]
   142ca:	2201      	movs	r2, #1
   142cc:	4623      	mov	r3, r4
   142ce:	4629      	mov	r1, r5
   142d0:	4620      	mov	r0, r4
   142d2:	f017 ffc3 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
		return -ENOENT;
   142d6:	f06f 0001 	mvn.w	r0, #1
   142da:	e02e      	b.n	1433a <bt_smp_sign+0x9e>
	return net_buf_simple_add(&buf->b, len);
   142dc:	210c      	movs	r1, #12
   142de:	f105 0008 	add.w	r0, r5, #8
   142e2:	f018 fba4 	bl	2ca2e <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   142e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   142e8:	9305      	str	r3, [sp, #20]
	return buf->data + buf->len;
   142ea:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   142ec:	68a8      	ldr	r0, [r5, #8]
   142ee:	3b0c      	subs	r3, #12
   142f0:	2204      	movs	r2, #4
   142f2:	a905      	add	r1, sp, #20
   142f4:	4418      	add	r0, r3
   142f6:	f016 f831 	bl	2a35c <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   142fa:	89aa      	ldrh	r2, [r5, #12]
   142fc:	68a9      	ldr	r1, [r5, #8]
   142fe:	3a0c      	subs	r2, #12
   14300:	b292      	uxth	r2, r2
   14302:	f104 0040 	add.w	r0, r4, #64	; 0x40
   14306:	f7fe fd67 	bl	12dd8 <smp_sign_buf>
	if (err) {
   1430a:	b198      	cbz	r0, 14334 <bt_smp_sign+0x98>
		BT_ERR("Unable to create signature for %s",
   1430c:	4c0c      	ldr	r4, [pc, #48]	; (14340 <bt_smp_sign+0xa4>)
   1430e:	6823      	ldr	r3, [r4, #0]
   14310:	075b      	lsls	r3, r3, #29
   14312:	d00c      	beq.n	1432e <bt_smp_sign+0x92>
   14314:	4630      	mov	r0, r6
   14316:	f7f7 fee5 	bl	c0e4 <bt_addr_le_str_real>
   1431a:	4b0b      	ldr	r3, [pc, #44]	; (14348 <bt_smp_sign+0xac>)
   1431c:	9301      	str	r3, [sp, #4]
   1431e:	2300      	movs	r3, #0
   14320:	9002      	str	r0, [sp, #8]
   14322:	9300      	str	r3, [sp, #0]
   14324:	2201      	movs	r2, #1
   14326:	4621      	mov	r1, r4
   14328:	4618      	mov	r0, r3
   1432a:	f017 ff97 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
   1432e:	f06f 0004 	mvn.w	r0, #4
   14332:	e002      	b.n	1433a <bt_smp_sign+0x9e>
	keys->local_csrk.cnt++;
   14334:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14336:	3301      	adds	r3, #1
   14338:	6523      	str	r3, [r4, #80]	; 0x50
}
   1433a:	b006      	add	sp, #24
   1433c:	bd70      	pop	{r4, r5, r6, pc}
   1433e:	bf00      	nop
   14340:	20000a64 	.word	0x20000a64
   14344:	00034271 	.word	0x00034271
   14348:	0003422d 	.word	0x0003422d

0001434c <smp_pairing_complete>:
{
   1434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1434e:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   14352:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   14354:	1d07      	adds	r7, r0, #4
	if (!status) {
   14356:	b9b9      	cbnz	r1, 14388 <smp_pairing_complete+0x3c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   14358:	210d      	movs	r1, #13
		if (bt_auth && bt_auth->pairing_complete) {
   1435a:	4b28      	ldr	r3, [pc, #160]	; (143fc <smp_pairing_complete+0xb0>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1435c:	4638      	mov	r0, r7
   1435e:	f017 ff8c 	bl	2c27a <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   14362:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   14364:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   14366:	b11b      	cbz	r3, 14370 <smp_pairing_complete+0x24>
   14368:	699b      	ldr	r3, [r3, #24]
   1436a:	b10b      	cbz	r3, 14370 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   1436c:	4620      	mov	r0, r4
   1436e:	4798      	blx	r3
	smp_reset(smp);
   14370:	4628      	mov	r0, r5
   14372:	f018 f82b 	bl	2c3cc <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   14376:	7a62      	ldrb	r2, [r4, #9]
   14378:	7aa3      	ldrb	r3, [r4, #10]
   1437a:	429a      	cmp	r2, r3
   1437c:	d03c      	beq.n	143f8 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
   1437e:	4620      	mov	r0, r4
}
   14380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   14384:	f018 b995 	b.w	2c6b2 <bt_smp_start_security>
	switch (smp_err) {
   14388:	3901      	subs	r1, #1
   1438a:	b2c9      	uxtb	r1, r1
   1438c:	290e      	cmp	r1, #14
   1438e:	bf9c      	itt	ls
   14390:	4b1b      	ldrls	r3, [pc, #108]	; (14400 <smp_pairing_complete+0xb4>)
   14392:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   14394:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   14398:	bf88      	it	hi
   1439a:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   1439c:	b143      	cbz	r3, 143b0 <smp_pairing_complete+0x64>
   1439e:	7b1b      	ldrb	r3, [r3, #12]
   143a0:	bb1b      	cbnz	r3, 143ea <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
   143a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   143a6:	f018 facb 	bl	2c940 <bt_keys_clear>
			conn->le.keys = NULL;
   143aa:	2300      	movs	r3, #0
   143ac:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   143b0:	2102      	movs	r1, #2
   143b2:	4638      	mov	r0, r7
   143b4:	f017 ff61 	bl	2c27a <atomic_test_bit>
   143b8:	b940      	cbnz	r0, 143cc <smp_pairing_complete+0x80>
	switch (err) {
   143ba:	2e07      	cmp	r6, #7
   143bc:	bf96      	itet	ls
   143be:	4b11      	ldrls	r3, [pc, #68]	; (14404 <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   143c0:	211f      	movhi	r1, #31
   143c2:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   143c4:	4632      	mov	r2, r6
   143c6:	4620      	mov	r0, r4
   143c8:	f7fb fac8 	bl	f95c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   143cc:	2103      	movs	r1, #3
   143ce:	4638      	mov	r0, r7
   143d0:	f017 ff53 	bl	2c27a <atomic_test_bit>
   143d4:	2800      	cmp	r0, #0
   143d6:	d0cb      	beq.n	14370 <smp_pairing_complete+0x24>
   143d8:	4b08      	ldr	r3, [pc, #32]	; (143fc <smp_pairing_complete+0xb0>)
   143da:	681b      	ldr	r3, [r3, #0]
   143dc:	2b00      	cmp	r3, #0
   143de:	d0c7      	beq.n	14370 <smp_pairing_complete+0x24>
		    bt_auth && bt_auth->pairing_failed) {
   143e0:	69db      	ldr	r3, [r3, #28]
   143e2:	2b00      	cmp	r3, #0
   143e4:	d0c4      	beq.n	14370 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   143e6:	4631      	mov	r1, r6
   143e8:	e7c0      	b.n	1436c <smp_pairing_complete+0x20>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   143ea:	2102      	movs	r1, #2
   143ec:	4638      	mov	r0, r7
   143ee:	f017 ff44 	bl	2c27a <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   143f2:	2800      	cmp	r0, #0
   143f4:	d1d5      	bne.n	143a2 <smp_pairing_complete+0x56>
   143f6:	e7db      	b.n	143b0 <smp_pairing_complete+0x64>
}
   143f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143fa:	bf00      	nop
   143fc:	20002cb8 	.word	0x20002cb8
   14400:	00034381 	.word	0x00034381
   14404:	00034399 	.word	0x00034399

00014408 <bt_smp_recv>:
{
   14408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1440c:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
   1440e:	898b      	ldrh	r3, [r1, #12]
{
   14410:	af00      	add	r7, sp, #0
   14412:	4680      	mov	r8, r0
   14414:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   14416:	b99b      	cbnz	r3, 14440 <bt_smp_recv+0x38>
		BT_ERR("Too small SMP PDU received");
   14418:	484d      	ldr	r0, [pc, #308]	; (14550 <bt_smp_recv+0x148>)
   1441a:	6803      	ldr	r3, [r0, #0]
   1441c:	0759      	lsls	r1, r3, #29
   1441e:	d00a      	beq.n	14436 <bt_smp_recv+0x2e>
   14420:	4b4c      	ldr	r3, [pc, #304]	; (14554 <bt_smp_recv+0x14c>)
   14422:	61bb      	str	r3, [r7, #24]
   14424:	2302      	movs	r3, #2
   14426:	607b      	str	r3, [r7, #4]
   14428:	617b      	str	r3, [r7, #20]
   1442a:	f107 0214 	add.w	r2, r7, #20
   1442e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   14432:	f017 ff10 	bl	2c256 <z_log_msg2_static_create.constprop.0>
}
   14436:	2000      	movs	r0, #0
   14438:	3720      	adds	r7, #32
   1443a:	46bd      	mov	sp, r7
   1443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   14440:	2101      	movs	r1, #1
   14442:	f105 0008 	add.w	r0, r5, #8
   14446:	f018 fb23 	bl	2ca90 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1444a:	2104      	movs	r1, #4
   1444c:	4606      	mov	r6, r0
   1444e:	f1a8 00ec 	sub.w	r0, r8, #236	; 0xec
   14452:	f1a8 04f0 	sub.w	r4, r8, #240	; 0xf0
   14456:	f017 ff10 	bl	2c27a <atomic_test_bit>
   1445a:	b180      	cbz	r0, 1447e <bt_smp_recv+0x76>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1445c:	483c      	ldr	r0, [pc, #240]	; (14550 <bt_smp_recv+0x148>)
   1445e:	6803      	ldr	r3, [r0, #0]
   14460:	f013 0f06 	tst.w	r3, #6
   14464:	d0e7      	beq.n	14436 <bt_smp_recv+0x2e>
   14466:	7833      	ldrb	r3, [r6, #0]
   14468:	4a3b      	ldr	r2, [pc, #236]	; (14558 <bt_smp_recv+0x150>)
   1446a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1446e:	2303      	movs	r3, #3
   14470:	607b      	str	r3, [r7, #4]
   14472:	617b      	str	r3, [r7, #20]
   14474:	f107 0214 	add.w	r2, r7, #20
   14478:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1447c:	e7d9      	b.n	14432 <bt_smp_recv+0x2a>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1447e:	7831      	ldrb	r1, [r6, #0]
   14480:	290e      	cmp	r1, #14
   14482:	d908      	bls.n	14496 <bt_smp_recv+0x8e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   14484:	4832      	ldr	r0, [pc, #200]	; (14550 <bt_smp_recv+0x148>)
   14486:	6803      	ldr	r3, [r0, #0]
   14488:	f013 0f06 	tst.w	r3, #6
   1448c:	d0d3      	beq.n	14436 <bt_smp_recv+0x2e>
   1448e:	4b33      	ldr	r3, [pc, #204]	; (1455c <bt_smp_recv+0x154>)
   14490:	e9c7 3106 	strd	r3, r1, [r7, #24]
   14494:	e7eb      	b.n	1446e <bt_smp_recv+0x66>
	if (!handlers[hdr->code].func) {
   14496:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 14560 <bt_smp_recv+0x158>
   1449a:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1449e:	b9ab      	cbnz	r3, 144cc <bt_smp_recv+0xc4>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   144a0:	482b      	ldr	r0, [pc, #172]	; (14550 <bt_smp_recv+0x148>)
   144a2:	6803      	ldr	r3, [r0, #0]
   144a4:	f013 0f06 	tst.w	r3, #6
   144a8:	d00b      	beq.n	144c2 <bt_smp_recv+0xba>
   144aa:	4b2e      	ldr	r3, [pc, #184]	; (14564 <bt_smp_recv+0x15c>)
   144ac:	f107 0214 	add.w	r2, r7, #20
   144b0:	e9c7 3106 	strd	r3, r1, [r7, #24]
   144b4:	2303      	movs	r3, #3
   144b6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   144ba:	607b      	str	r3, [r7, #4]
   144bc:	617b      	str	r3, [r7, #20]
   144be:	f017 feca 	bl	2c256 <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   144c2:	2107      	movs	r1, #7
		smp_error(smp, err);
   144c4:	4620      	mov	r0, r4
   144c6:	f018 f957 	bl	2c778 <smp_error>
   144ca:	e7b4      	b.n	14436 <bt_smp_recv+0x2e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   144cc:	4620      	mov	r0, r4
   144ce:	f017 fefe 	bl	2c2ce <atomic_test_and_clear_bit>
   144d2:	7833      	ldrb	r3, [r6, #0]
   144d4:	b9a8      	cbnz	r0, 14502 <bt_smp_recv+0xfa>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   144d6:	481e      	ldr	r0, [pc, #120]	; (14550 <bt_smp_recv+0x148>)
   144d8:	6802      	ldr	r2, [r0, #0]
   144da:	f012 0f06 	tst.w	r2, #6
   144de:	d00b      	beq.n	144f8 <bt_smp_recv+0xf0>
   144e0:	4a21      	ldr	r2, [pc, #132]	; (14568 <bt_smp_recv+0x160>)
   144e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   144e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
   144ea:	2303      	movs	r3, #3
   144ec:	f107 0214 	add.w	r2, r7, #20
   144f0:	607b      	str	r3, [r7, #4]
   144f2:	617b      	str	r3, [r7, #20]
   144f4:	f017 feaf 	bl	2c256 <z_log_msg2_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   144f8:	7833      	ldrb	r3, [r6, #0]
   144fa:	2b05      	cmp	r3, #5
   144fc:	d09b      	beq.n	14436 <bt_smp_recv+0x2e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   144fe:	2108      	movs	r1, #8
   14500:	e7e0      	b.n	144c4 <bt_smp_recv+0xbc>
	if (buf->len != handlers[hdr->code].expect_len) {
   14502:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   14506:	89a9      	ldrh	r1, [r5, #12]
   14508:	7912      	ldrb	r2, [r2, #4]
   1450a:	428a      	cmp	r2, r1
   1450c:	d015      	beq.n	1453a <bt_smp_recv+0x132>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1450e:	4810      	ldr	r0, [pc, #64]	; (14550 <bt_smp_recv+0x148>)
   14510:	6802      	ldr	r2, [r0, #0]
   14512:	0752      	lsls	r2, r2, #29
   14514:	d00f      	beq.n	14536 <bt_smp_recv+0x12e>
   14516:	466d      	mov	r5, sp
   14518:	b088      	sub	sp, #32
   1451a:	466a      	mov	r2, sp
   1451c:	4e13      	ldr	r6, [pc, #76]	; (1456c <bt_smp_recv+0x164>)
   1451e:	6193      	str	r3, [r2, #24]
   14520:	2304      	movs	r3, #4
   14522:	e9c2 6104 	strd	r6, r1, [r2, #16]
   14526:	f842 3f0c 	str.w	r3, [r2, #12]!
   1452a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1452e:	60bb      	str	r3, [r7, #8]
   14530:	f017 fe91 	bl	2c256 <z_log_msg2_static_create.constprop.0>
   14534:	46ad      	mov	sp, r5
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   14536:	210a      	movs	r1, #10
   14538:	e7c4      	b.n	144c4 <bt_smp_recv+0xbc>
	err = handlers[hdr->code].func(smp, buf);
   1453a:	4629      	mov	r1, r5
   1453c:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   14540:	4620      	mov	r0, r4
   14542:	4798      	blx	r3
	if (err) {
   14544:	4601      	mov	r1, r0
   14546:	2800      	cmp	r0, #0
   14548:	f43f af75 	beq.w	14436 <bt_smp_recv+0x2e>
   1454c:	e7ba      	b.n	144c4 <bt_smp_recv+0xbc>
   1454e:	bf00      	nop
   14550:	20000a64 	.word	0x20000a64
   14554:	00034292 	.word	0x00034292
   14558:	000342ad 	.word	0x000342ad
   1455c:	000342de 	.word	0x000342de
   14560:	0002f620 	.word	0x0002f620
   14564:	00034300 	.word	0x00034300
   14568:	0003431a 	.word	0x0003431a
   1456c:	00033c9f 	.word	0x00033c9f

00014570 <bt_smp_pkey_ready>:
{
   14570:	b530      	push	{r4, r5, lr}
	sc_public_key = pkey;
   14572:	4b1e      	ldr	r3, [pc, #120]	; (145ec <bt_smp_pkey_ready+0x7c>)
{
   14574:	b089      	sub	sp, #36	; 0x24
	sc_public_key = pkey;
   14576:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   14578:	b980      	cbnz	r0, 1459c <bt_smp_pkey_ready+0x2c>
		BT_WARN("Public key not available");
   1457a:	481d      	ldr	r0, [pc, #116]	; (145f0 <bt_smp_pkey_ready+0x80>)
   1457c:	6803      	ldr	r3, [r0, #0]
   1457e:	f013 0f06 	tst.w	r3, #6
   14582:	d009      	beq.n	14598 <bt_smp_pkey_ready+0x28>
   14584:	4b1b      	ldr	r3, [pc, #108]	; (145f4 <bt_smp_pkey_ready+0x84>)
   14586:	9306      	str	r3, [sp, #24]
   14588:	aa05      	add	r2, sp, #20
   1458a:	2302      	movs	r3, #2
   1458c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14590:	9301      	str	r3, [sp, #4]
   14592:	9305      	str	r3, [sp, #20]
   14594:	f017 fe5f 	bl	2c256 <z_log_msg2_static_create.constprop.0>
}
   14598:	b009      	add	sp, #36	; 0x24
   1459a:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1459c:	4c16      	ldr	r4, [pc, #88]	; (145f8 <bt_smp_pkey_ready+0x88>)
	z_impl_k_sem_give(sem);
   1459e:	4817      	ldr	r0, [pc, #92]	; (145fc <bt_smp_pkey_ready+0x8c>)
   145a0:	f010 ffa8 	bl	254f4 <z_impl_k_sem_give>
   145a4:	f3bf 8f5b 	dmb	ish
   145a8:	6863      	ldr	r3, [r4, #4]
   145aa:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   145ae:	f013 0f40 	tst.w	r3, #64	; 0x40
   145b2:	4625      	mov	r5, r4
   145b4:	d0f0      	beq.n	14598 <bt_smp_pkey_ready+0x28>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   145b6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   145ba:	78db      	ldrb	r3, [r3, #3]
   145bc:	2b00      	cmp	r3, #0
   145be:	d1eb      	bne.n	14598 <bt_smp_pkey_ready+0x28>
			err = sc_send_public_key(smp);
   145c0:	4620      	mov	r0, r4
   145c2:	f7ff f887 	bl	136d4 <sc_send_public_key>
			if (err) {
   145c6:	4601      	mov	r1, r0
   145c8:	b110      	cbz	r0, 145d0 <bt_smp_pkey_ready+0x60>
				smp_error(smp, err);
   145ca:	4620      	mov	r0, r4
   145cc:	f018 f8d4 	bl	2c778 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145d0:	f3bf 8f5b 	dmb	ish
   145d4:	e855 3f00 	ldrex	r3, [r5]
   145d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   145dc:	e845 3200 	strex	r2, r3, [r5]
   145e0:	2a00      	cmp	r2, #0
   145e2:	d1f7      	bne.n	145d4 <bt_smp_pkey_ready+0x64>
   145e4:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   145e8:	e7d6      	b.n	14598 <bt_smp_pkey_ready+0x28>
   145ea:	bf00      	nop
   145ec:	20002e44 	.word	0x20002e44
   145f0:	20000a64 	.word	0x20000a64
   145f4:	00034335 	.word	0x00034335
   145f8:	20001d50 	.word	0x20001d50
   145fc:	20000c20 	.word	0x20000c20

00014600 <smp_signing_info>:
{
   14600:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   14604:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   14608:	4605      	mov	r5, r0
   1460a:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1460c:	3004      	adds	r0, #4
   1460e:	210d      	movs	r1, #13
   14610:	f017 fe33 	bl	2c27a <atomic_test_bit>
   14614:	b310      	cbz	r0, 1465c <smp_signing_info+0x5c>
					&conn->le.dst);
   14616:	f106 0788 	add.w	r7, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1461a:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1461c:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   14620:	463a      	mov	r2, r7
   14622:	2010      	movs	r0, #16
   14624:	f018 f978 	bl	2c918 <bt_keys_get_type>
		if (!keys) {
   14628:	4604      	mov	r4, r0
   1462a:	b990      	cbnz	r0, 14652 <smp_signing_info+0x52>
			BT_ERR("Unable to get keys for %s",
   1462c:	4d19      	ldr	r5, [pc, #100]	; (14694 <smp_signing_info+0x94>)
   1462e:	682b      	ldr	r3, [r5, #0]
   14630:	075b      	lsls	r3, r3, #29
   14632:	d00c      	beq.n	1464e <smp_signing_info+0x4e>
   14634:	4638      	mov	r0, r7
   14636:	f7f7 fd55 	bl	c0e4 <bt_addr_le_str_real>
   1463a:	4b17      	ldr	r3, [pc, #92]	; (14698 <smp_signing_info+0x98>)
   1463c:	9002      	str	r0, [sp, #8]
   1463e:	e9cd 4300 	strd	r4, r3, [sp]
   14642:	2201      	movs	r2, #1
   14644:	4623      	mov	r3, r4
   14646:	4629      	mov	r1, r5
   14648:	4620      	mov	r0, r4
   1464a:	f017 fe07 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1464e:	2008      	movs	r0, #8
   14650:	e011      	b.n	14676 <smp_signing_info+0x76>
		memcpy(keys->remote_csrk.val, req->csrk,
   14652:	2210      	movs	r2, #16
   14654:	4641      	mov	r1, r8
   14656:	3054      	adds	r0, #84	; 0x54
   14658:	f015 fe80 	bl	2a35c <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1465c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14660:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14664:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14668:	78f2      	ldrb	r2, [r6, #3]
   1466a:	4313      	orrs	r3, r2
   1466c:	d006      	beq.n	1467c <smp_signing_info+0x7c>
	if (!smp->local_dist && !smp->remote_dist) {
   1466e:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   14672:	b14c      	cbz	r4, 14688 <smp_signing_info+0x88>
	return 0;
   14674:	2000      	movs	r0, #0
}
   14676:	b004      	add	sp, #16
   14678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_smp_distribute_keys(smp);
   1467c:	4628      	mov	r0, r5
   1467e:	f7fe fd6b 	bl	13158 <bt_smp_distribute_keys>
		if (err) {
   14682:	2800      	cmp	r0, #0
   14684:	d0f3      	beq.n	1466e <smp_signing_info+0x6e>
   14686:	e7f6      	b.n	14676 <smp_signing_info+0x76>
		smp_pairing_complete(smp, 0);
   14688:	4621      	mov	r1, r4
   1468a:	4628      	mov	r0, r5
   1468c:	f7ff fe5e 	bl	1434c <smp_pairing_complete>
   14690:	e7f0      	b.n	14674 <smp_signing_info+0x74>
   14692:	bf00      	nop
   14694:	20000a64 	.word	0x20000a64
   14698:	00033fec 	.word	0x00033fec

0001469c <smp_ident_addr_info>:
{
   1469c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   146a0:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   146a2:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   146a6:	783b      	ldrb	r3, [r7, #0]
{
   146a8:	4605      	mov	r5, r0
   146aa:	b363      	cbz	r3, 14706 <smp_ident_addr_info+0x6a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   146ac:	79bb      	ldrb	r3, [r7, #6]
   146ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   146b2:	2bc0      	cmp	r3, #192	; 0xc0
   146b4:	d027      	beq.n	14706 <smp_ident_addr_info+0x6a>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   146b6:	4e58      	ldr	r6, [pc, #352]	; (14818 <smp_ident_addr_info+0x17c>)
   146b8:	6833      	ldr	r3, [r6, #0]
   146ba:	0758      	lsls	r0, r3, #29
   146bc:	d103      	bne.n	146c6 <smp_ident_addr_info+0x2a>
		return BT_SMP_ERR_INVALID_PARAMS;
   146be:	200a      	movs	r0, #10
}
   146c0:	b004      	add	sp, #16
   146c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   146c6:	4638      	mov	r0, r7
   146c8:	f7f7 fd0c 	bl	c0e4 <bt_addr_le_str_real>
   146cc:	2500      	movs	r5, #0
   146ce:	4b53      	ldr	r3, [pc, #332]	; (1481c <smp_ident_addr_info+0x180>)
   146d0:	9002      	str	r0, [sp, #8]
   146d2:	9301      	str	r3, [sp, #4]
   146d4:	4631      	mov	r1, r6
   146d6:	462b      	mov	r3, r5
   146d8:	9500      	str	r5, [sp, #0]
   146da:	2201      	movs	r2, #1
   146dc:	4628      	mov	r0, r5
   146de:	f017 fdbd 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   146e2:	6833      	ldr	r3, [r6, #0]
   146e4:	0759      	lsls	r1, r3, #29
   146e6:	d0ea      	beq.n	146be <smp_ident_addr_info+0x22>
   146e8:	f104 0088 	add.w	r0, r4, #136	; 0x88
   146ec:	f7f7 fcfa 	bl	c0e4 <bt_addr_le_str_real>
   146f0:	4b4b      	ldr	r3, [pc, #300]	; (14820 <smp_ident_addr_info+0x184>)
   146f2:	9002      	str	r0, [sp, #8]
   146f4:	e9cd 5300 	strd	r5, r3, [sp]
   146f8:	2201      	movs	r2, #1
   146fa:	462b      	mov	r3, r5
   146fc:	4631      	mov	r1, r6
   146fe:	4628      	mov	r0, r5
   14700:	f017 fdac 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
   14704:	e7db      	b.n	146be <smp_ident_addr_info+0x22>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   14706:	f104 0888 	add.w	r8, r4, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   1470a:	2207      	movs	r2, #7
   1470c:	4639      	mov	r1, r7
   1470e:	4640      	mov	r0, r8
   14710:	f015 fdfb 	bl	2a30a <memcmp>
   14714:	b178      	cbz	r0, 14736 <smp_ident_addr_info+0x9a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   14716:	7a20      	ldrb	r0, [r4, #8]
   14718:	4639      	mov	r1, r7
   1471a:	f000 faf1 	bl	14d00 <bt_keys_find_addr>
		if (keys) {
   1471e:	4606      	mov	r6, r0
   14720:	b148      	cbz	r0, 14736 <smp_ident_addr_info+0x9a>
			if (!update_keys_check(smp, keys)) {
   14722:	4601      	mov	r1, r0
   14724:	4628      	mov	r0, r5
   14726:	f017 fdb1 	bl	2c28c <update_keys_check>
   1472a:	b908      	cbnz	r0, 14730 <smp_ident_addr_info+0x94>
			return BT_SMP_ERR_UNSPECIFIED;
   1472c:	2008      	movs	r0, #8
   1472e:	e7c7      	b.n	146c0 <smp_ident_addr_info+0x24>
			bt_keys_clear(keys);
   14730:	4630      	mov	r0, r6
   14732:	f018 f905 	bl	2c940 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14736:	210d      	movs	r1, #13
   14738:	1d28      	adds	r0, r5, #4
   1473a:	f017 fd9e 	bl	2c27a <atomic_test_bit>
   1473e:	2800      	cmp	r0, #0
   14740:	d043      	beq.n	147ca <smp_ident_addr_info+0x12e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   14742:	7a21      	ldrb	r1, [r4, #8]
   14744:	4642      	mov	r2, r8
   14746:	2002      	movs	r0, #2
   14748:	f018 f8e6 	bl	2c918 <bt_keys_get_type>
		if (!keys) {
   1474c:	4606      	mov	r6, r0
   1474e:	b988      	cbnz	r0, 14774 <smp_ident_addr_info+0xd8>
			BT_ERR("Unable to get keys for %s",
   14750:	4c31      	ldr	r4, [pc, #196]	; (14818 <smp_ident_addr_info+0x17c>)
   14752:	6823      	ldr	r3, [r4, #0]
   14754:	075a      	lsls	r2, r3, #29
   14756:	d0e9      	beq.n	1472c <smp_ident_addr_info+0x90>
   14758:	4640      	mov	r0, r8
   1475a:	f7f7 fcc3 	bl	c0e4 <bt_addr_le_str_real>
   1475e:	4b31      	ldr	r3, [pc, #196]	; (14824 <smp_ident_addr_info+0x188>)
   14760:	9002      	str	r0, [sp, #8]
   14762:	e9cd 6300 	strd	r6, r3, [sp]
   14766:	2201      	movs	r2, #1
   14768:	4633      	mov	r3, r6
   1476a:	4621      	mov	r1, r4
   1476c:	4630      	mov	r0, r6
   1476e:	f017 fd75 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
   14772:	e7db      	b.n	1472c <smp_ident_addr_info+0x90>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14774:	78e3      	ldrb	r3, [r4, #3]
   14776:	bbdb      	cbnz	r3, 147f0 <smp_ident_addr_info+0x154>
			dst = &conn->le.resp_addr;
   14778:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1477c:	780b      	ldrb	r3, [r1, #0]
   1477e:	2b01      	cmp	r3, #1
   14780:	d120      	bne.n	147c4 <smp_ident_addr_info+0x128>
		if (bt_addr_le_is_rpa(dst)) {
   14782:	798b      	ldrb	r3, [r1, #6]
   14784:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14788:	2b40      	cmp	r3, #64	; 0x40
   1478a:	d11b      	bne.n	147c4 <smp_ident_addr_info+0x128>
	memcpy(dst, src, sizeof(*dst));
   1478c:	2206      	movs	r2, #6
   1478e:	3101      	adds	r1, #1
   14790:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   14794:	f015 fde2 	bl	2a35c <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   14798:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1479c:	b193      	cbz	r3, 147c4 <smp_ident_addr_info+0x128>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1479e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   147a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   147a6:	2bc0      	cmp	r3, #192	; 0xc0
   147a8:	d00c      	beq.n	147c4 <smp_ident_addr_info+0x128>
	memcpy(dst, src, sizeof(*dst));
   147aa:	2207      	movs	r2, #7
   147ac:	4639      	mov	r1, r7
   147ae:	1c70      	adds	r0, r6, #1
   147b0:	f015 fdd4 	bl	2a35c <memcpy>
   147b4:	2207      	movs	r2, #7
   147b6:	4639      	mov	r1, r7
   147b8:	4640      	mov	r0, r8
   147ba:	f015 fdcf 	bl	2a35c <memcpy>
				bt_conn_identity_resolved(conn);
   147be:	4620      	mov	r0, r4
   147c0:	f7fb f89e 	bl	f900 <bt_conn_identity_resolved>
		bt_id_add(keys);
   147c4:	4630      	mov	r0, r6
   147c6:	f7f9 fdab 	bl	e320 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   147ca:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   147ce:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   147d2:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   147d4:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   147d8:	d503      	bpl.n	147e2 <smp_ident_addr_info+0x146>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   147da:	210a      	movs	r1, #10
   147dc:	4628      	mov	r0, r5
   147de:	f017 fd8e 	bl	2c2fe <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   147e2:	78e3      	ldrb	r3, [r4, #3]
   147e4:	b13b      	cbz	r3, 147f6 <smp_ident_addr_info+0x15a>
	if (!smp->local_dist && !smp->remote_dist) {
   147e6:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   147ea:	b174      	cbz	r4, 1480a <smp_ident_addr_info+0x16e>
	return 0;
   147ec:	2000      	movs	r0, #0
   147ee:	e767      	b.n	146c0 <smp_ident_addr_info+0x24>
			dst = &conn->le.init_addr;
   147f0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   147f4:	e7c2      	b.n	1477c <smp_ident_addr_info+0xe0>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   147f6:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   147fa:	2b00      	cmp	r3, #0
   147fc:	d1f3      	bne.n	147e6 <smp_ident_addr_info+0x14a>
		err = bt_smp_distribute_keys(smp);
   147fe:	4628      	mov	r0, r5
   14800:	f7fe fcaa 	bl	13158 <bt_smp_distribute_keys>
		if (err) {
   14804:	2800      	cmp	r0, #0
   14806:	d0ee      	beq.n	147e6 <smp_ident_addr_info+0x14a>
   14808:	e75a      	b.n	146c0 <smp_ident_addr_info+0x24>
		smp_pairing_complete(smp, 0);
   1480a:	4628      	mov	r0, r5
   1480c:	4621      	mov	r1, r4
   1480e:	f7ff fd9d 	bl	1434c <smp_pairing_complete>
	return 0;
   14812:	4620      	mov	r0, r4
   14814:	e754      	b.n	146c0 <smp_ident_addr_info+0x24>
   14816:	bf00      	nop
   14818:	20000a64 	.word	0x20000a64
   1481c:	0003434e 	.word	0x0003434e
   14820:	00034225 	.word	0x00034225
   14824:	00033fec 	.word	0x00033fec

00014828 <smp_central_ident>:
{
   14828:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1482c:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   14830:	4605      	mov	r5, r0
   14832:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14834:	3004      	adds	r0, #4
   14836:	210d      	movs	r1, #13
   14838:	f017 fd1f 	bl	2c27a <atomic_test_bit>
   1483c:	b338      	cbz	r0, 1488e <smp_central_ident+0x66>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1483e:	f106 0888 	add.w	r8, r6, #136	; 0x88
   14842:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   14844:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   14846:	4642      	mov	r2, r8
   14848:	2004      	movs	r0, #4
   1484a:	f018 f865 	bl	2c918 <bt_keys_get_type>
		if (!keys) {
   1484e:	4604      	mov	r4, r0
   14850:	b990      	cbnz	r0, 14878 <smp_central_ident+0x50>
			BT_ERR("Unable to get keys for %s",
   14852:	4d23      	ldr	r5, [pc, #140]	; (148e0 <smp_central_ident+0xb8>)
   14854:	682b      	ldr	r3, [r5, #0]
   14856:	0759      	lsls	r1, r3, #29
   14858:	d00c      	beq.n	14874 <smp_central_ident+0x4c>
   1485a:	4640      	mov	r0, r8
   1485c:	f7f7 fc42 	bl	c0e4 <bt_addr_le_str_real>
   14860:	4b20      	ldr	r3, [pc, #128]	; (148e4 <smp_central_ident+0xbc>)
   14862:	9002      	str	r0, [sp, #8]
   14864:	e9cd 4300 	strd	r4, r3, [sp]
   14868:	2201      	movs	r2, #1
   1486a:	4623      	mov	r3, r4
   1486c:	4629      	mov	r1, r5
   1486e:	4620      	mov	r0, r4
   14870:	f017 fcf4 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   14874:	2008      	movs	r0, #8
   14876:	e01c      	b.n	148b2 <smp_central_ident+0x8a>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   14878:	2202      	movs	r2, #2
   1487a:	4639      	mov	r1, r7
   1487c:	3018      	adds	r0, #24
   1487e:	f015 fd6d 	bl	2a35c <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   14882:	2208      	movs	r2, #8
   14884:	1cb9      	adds	r1, r7, #2
   14886:	f104 0010 	add.w	r0, r4, #16
   1488a:	f015 fd67 	bl	2a35c <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1488e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14892:	f023 0201 	bic.w	r2, r3, #1
   14896:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1489a:	079a      	lsls	r2, r3, #30
   1489c:	d50c      	bpl.n	148b8 <smp_central_ident+0x90>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1489e:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   148a0:	4628      	mov	r0, r5
   148a2:	f017 fd2c 	bl	2c2fe <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   148a6:	78f3      	ldrb	r3, [r6, #3]
   148a8:	b153      	cbz	r3, 148c0 <smp_central_ident+0x98>
	if (!smp->local_dist && !smp->remote_dist) {
   148aa:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   148ae:	b18c      	cbz	r4, 148d4 <smp_central_ident+0xac>
	return 0;
   148b0:	2000      	movs	r0, #0
}
   148b2:	b004      	add	sp, #16
   148b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   148b8:	075b      	lsls	r3, r3, #29
   148ba:	d5f4      	bpl.n	148a6 <smp_central_ident+0x7e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   148bc:	210a      	movs	r1, #10
   148be:	e7ef      	b.n	148a0 <smp_central_ident+0x78>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   148c0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   148c4:	2b00      	cmp	r3, #0
   148c6:	d1f0      	bne.n	148aa <smp_central_ident+0x82>
		err = bt_smp_distribute_keys(smp);
   148c8:	4628      	mov	r0, r5
   148ca:	f7fe fc45 	bl	13158 <bt_smp_distribute_keys>
		if (err) {
   148ce:	2800      	cmp	r0, #0
   148d0:	d0eb      	beq.n	148aa <smp_central_ident+0x82>
   148d2:	e7ee      	b.n	148b2 <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   148d4:	4621      	mov	r1, r4
   148d6:	4628      	mov	r0, r5
   148d8:	f7ff fd38 	bl	1434c <smp_pairing_complete>
   148dc:	e7e8      	b.n	148b0 <smp_central_ident+0x88>
   148de:	bf00      	nop
   148e0:	20000a64 	.word	0x20000a64
   148e4:	00033fec 	.word	0x00033fec

000148e8 <smp_pairing_failed>:
{
   148e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   148ea:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   148ee:	688d      	ldr	r5, [r1, #8]
{
   148f0:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   148f2:	4817      	ldr	r0, [pc, #92]	; (14950 <smp_pairing_failed+0x68>)
   148f4:	6803      	ldr	r3, [r0, #0]
   148f6:	075b      	lsls	r3, r3, #29
{
   148f8:	b089      	sub	sp, #36	; 0x24
	BT_ERR("reason 0x%x", req->reason);
   148fa:	d00b      	beq.n	14914 <smp_pairing_failed+0x2c>
   148fc:	782b      	ldrb	r3, [r5, #0]
   148fe:	4a15      	ldr	r2, [pc, #84]	; (14954 <smp_pairing_failed+0x6c>)
   14900:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14904:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14908:	2303      	movs	r3, #3
   1490a:	aa05      	add	r2, sp, #20
   1490c:	9301      	str	r3, [sp, #4]
   1490e:	9305      	str	r3, [sp, #20]
   14910:	f017 fca1 	bl	2c256 <z_log_msg2_static_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   14914:	1d26      	adds	r6, r4, #4
   14916:	210a      	movs	r1, #10
   14918:	4630      	mov	r0, r6
   1491a:	f017 fcd8 	bl	2c2ce <atomic_test_and_clear_bit>
   1491e:	b148      	cbz	r0, 14934 <smp_pairing_failed+0x4c>
		if (bt_auth && bt_auth->cancel) {
   14920:	4b0d      	ldr	r3, [pc, #52]	; (14958 <smp_pairing_failed+0x70>)
   14922:	681b      	ldr	r3, [r3, #0]
   14924:	b96b      	cbnz	r3, 14942 <smp_pairing_failed+0x5a>
	smp_pairing_complete(smp, req->reason);
   14926:	4620      	mov	r0, r4
   14928:	7829      	ldrb	r1, [r5, #0]
   1492a:	f7ff fd0f 	bl	1434c <smp_pairing_complete>
}
   1492e:	2000      	movs	r0, #0
   14930:	b009      	add	sp, #36	; 0x24
   14932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   14934:	210b      	movs	r1, #11
   14936:	4630      	mov	r0, r6
   14938:	f017 fcc9 	bl	2c2ce <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1493c:	2800      	cmp	r0, #0
   1493e:	d1ef      	bne.n	14920 <smp_pairing_failed+0x38>
   14940:	e7f1      	b.n	14926 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   14942:	691b      	ldr	r3, [r3, #16]
   14944:	2b00      	cmp	r3, #0
   14946:	d0ee      	beq.n	14926 <smp_pairing_failed+0x3e>
			bt_auth->cancel(conn);
   14948:	4638      	mov	r0, r7
   1494a:	4798      	blx	r3
   1494c:	e7eb      	b.n	14926 <smp_pairing_failed+0x3e>
   1494e:	bf00      	nop
   14950:	20000a64 	.word	0x20000a64
   14954:	00034362 	.word	0x00034362
   14958:	20002cb8 	.word	0x20002cb8

0001495c <bt_smp_encrypt_change>:
{
   1495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   14960:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14962:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   14966:	4604      	mov	r4, r0
   14968:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1496a:	4630      	mov	r0, r6
   1496c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1496e:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14972:	f017 fcac 	bl	2c2ce <atomic_test_and_clear_bit>
   14976:	2800      	cmp	r0, #0
   14978:	d06e      	beq.n	14a58 <bt_smp_encrypt_change+0xfc>
	if (hci_status) {
   1497a:	b1cf      	cbz	r7, 149b0 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1497c:	2103      	movs	r1, #3
   1497e:	4630      	mov	r0, r6
   14980:	f017 fc7b 	bl	2c27a <atomic_test_bit>
   14984:	2800      	cmp	r0, #0
   14986:	d067      	beq.n	14a58 <bt_smp_encrypt_change+0xfc>
			uint8_t smp_err = smp_err_get(
   14988:	4638      	mov	r0, r7
   1498a:	f7f8 ff31 	bl	d7f0 <bt_security_err_get>
	switch (auth_err) {
   1498e:	3801      	subs	r0, #1
   14990:	b2c0      	uxtb	r0, r0
   14992:	2808      	cmp	r0, #8
   14994:	bf9a      	itte	ls
   14996:	4b32      	ldrls	r3, [pc, #200]	; (14a60 <bt_smp_encrypt_change+0x104>)
   14998:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1499a:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1499c:	2102      	movs	r1, #2
   1499e:	4630      	mov	r0, r6
   149a0:	f017 fcad 	bl	2c2fe <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   149a4:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   149a6:	4628      	mov	r0, r5
}
   149a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   149ac:	f7ff bcce 	b.w	1434c <smp_pairing_complete>
	if (!conn->encrypt) {
   149b0:	f898 300b 	ldrb.w	r3, [r8, #11]
   149b4:	2b00      	cmp	r3, #0
   149b6:	d04f      	beq.n	14a58 <bt_smp_encrypt_change+0xfc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   149b8:	2103      	movs	r1, #3
   149ba:	4630      	mov	r0, r6
   149bc:	f017 fc5d 	bl	2c27a <atomic_test_bit>
   149c0:	b920      	cbnz	r0, 149cc <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   149c2:	4628      	mov	r0, r5
}
   149c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   149c8:	f017 bd00 	b.w	2c3cc <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   149cc:	2105      	movs	r1, #5
   149ce:	4630      	mov	r0, r6
   149d0:	f017 fc53 	bl	2c27a <atomic_test_bit>
   149d4:	b1b8      	cbz	r0, 14a06 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   149d6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   149da:	071b      	lsls	r3, r3, #28
   149dc:	d507      	bpl.n	149ee <bt_smp_encrypt_change+0x92>
   149de:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   149e2:	071f      	lsls	r7, r3, #28
   149e4:	d503      	bpl.n	149ee <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   149e6:	2111      	movs	r1, #17
   149e8:	4630      	mov	r0, r6
   149ea:	f017 fc88 	bl	2c2fe <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   149ee:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   149f2:	f023 0308 	bic.w	r3, r3, #8
   149f6:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   149fa:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   149fe:	f023 0308 	bic.w	r3, r3, #8
   14a02:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   14a06:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   14a0a:	07d8      	lsls	r0, r3, #31
   14a0c:	d508      	bpl.n	14a20 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   14a0e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14a10:	4628      	mov	r0, r5
   14a12:	f017 fc74 	bl	2c2fe <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14a16:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   14a1a:	079b      	lsls	r3, r3, #30
   14a1c:	d506      	bpl.n	14a2c <bt_smp_encrypt_change+0xd0>
   14a1e:	e009      	b.n	14a34 <bt_smp_encrypt_change+0xd8>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   14a20:	0799      	lsls	r1, r3, #30
   14a22:	d501      	bpl.n	14a28 <bt_smp_encrypt_change+0xcc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   14a24:	2108      	movs	r1, #8
   14a26:	e7f3      	b.n	14a10 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   14a28:	075a      	lsls	r2, r3, #29
   14a2a:	d417      	bmi.n	14a5c <bt_smp_encrypt_change+0x100>
		bt_id_add(conn->le.keys);
   14a2c:	f8d8 00b4 	ldr.w	r0, [r8, #180]	; 0xb4
   14a30:	f7f9 fc76 	bl	e320 <bt_id_add>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   14a34:	2102      	movs	r1, #2
   14a36:	4630      	mov	r0, r6
   14a38:	f017 fc61 	bl	2c2fe <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14a3c:	f898 3003 	ldrb.w	r3, [r8, #3]
   14a40:	b913      	cbnz	r3, 14a48 <bt_smp_encrypt_change+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   14a42:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   14a46:	b93b      	cbnz	r3, 14a58 <bt_smp_encrypt_change+0xfc>
	if (bt_smp_distribute_keys(smp)) {
   14a48:	4628      	mov	r0, r5
   14a4a:	f7fe fb85 	bl	13158 <bt_smp_distribute_keys>
   14a4e:	b918      	cbnz	r0, 14a58 <bt_smp_encrypt_change+0xfc>
	if (!smp->local_dist && !smp->remote_dist) {
   14a50:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   14a54:	2900      	cmp	r1, #0
   14a56:	d0a6      	beq.n	149a6 <bt_smp_encrypt_change+0x4a>
}
   14a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14a5c:	210a      	movs	r1, #10
   14a5e:	e7d7      	b.n	14a10 <bt_smp_encrypt_change+0xb4>
   14a60:	00034390 	.word	0x00034390

00014a64 <smp_timeout>:
{
   14a64:	b530      	push	{r4, r5, lr}
   14a66:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   14a68:	f5a0 75ec 	sub.w	r5, r0, #472	; 0x1d8
	BT_ERR("SMP Timeout");
   14a6c:	480d      	ldr	r0, [pc, #52]	; (14aa4 <smp_timeout+0x40>)
   14a6e:	6803      	ldr	r3, [r0, #0]
   14a70:	075b      	lsls	r3, r3, #29
{
   14a72:	b089      	sub	sp, #36	; 0x24
	BT_ERR("SMP Timeout");
   14a74:	d009      	beq.n	14a8a <smp_timeout+0x26>
   14a76:	4b0c      	ldr	r3, [pc, #48]	; (14aa8 <smp_timeout+0x44>)
   14a78:	9306      	str	r3, [sp, #24]
   14a7a:	aa05      	add	r2, sp, #20
   14a7c:	2302      	movs	r3, #2
   14a7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14a82:	9301      	str	r3, [sp, #4]
   14a84:	9305      	str	r3, [sp, #20]
   14a86:	f017 fbe6 	bl	2c256 <z_log_msg2_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   14a8a:	4628      	mov	r0, r5
   14a8c:	2108      	movs	r1, #8
   14a8e:	f7ff fc5d 	bl	1434c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   14a92:	2104      	movs	r1, #4
   14a94:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
}
   14a98:	b009      	add	sp, #36	; 0x24
   14a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   14a9e:	f017 bc2e 	b.w	2c2fe <atomic_set_bit>
   14aa2:	bf00      	nop
   14aa4:	20000a64 	.word	0x20000a64
   14aa8:	0003436e 	.word	0x0003436e

00014aac <bt_smp_update_keys>:
{
   14aac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14ab0:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   14ab2:	f7fe f9fd 	bl	12eb0 <smp_chan_get>
	if (!smp) {
   14ab6:	4605      	mov	r5, r0
   14ab8:	2800      	cmp	r0, #0
   14aba:	d07f      	beq.n	14bbc <bt_smp_update_keys+0x110>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14abc:	1d07      	adds	r7, r0, #4
   14abe:	2103      	movs	r1, #3
   14ac0:	4638      	mov	r0, r7
   14ac2:	f017 fbda 	bl	2c27a <atomic_test_bit>
   14ac6:	2800      	cmp	r0, #0
   14ac8:	d078      	beq.n	14bbc <bt_smp_update_keys+0x110>
	if (conn->le.keys) {
   14aca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14ace:	b108      	cbz	r0, 14ad4 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   14ad0:	f017 ff36 	bl	2c940 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   14ad4:	f104 0888 	add.w	r8, r4, #136	; 0x88
   14ad8:	7a20      	ldrb	r0, [r4, #8]
   14ada:	4641      	mov	r1, r8
   14adc:	f000 f88c 	bl	14bf8 <bt_keys_get_addr>
   14ae0:	4606      	mov	r6, r0
   14ae2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   14ae6:	b9b8      	cbnz	r0, 14b18 <bt_smp_update_keys+0x6c>
		BT_ERR("Unable to get keys for %s",
   14ae8:	4c36      	ldr	r4, [pc, #216]	; (14bc4 <bt_smp_update_keys+0x118>)
   14aea:	6823      	ldr	r3, [r4, #0]
   14aec:	075b      	lsls	r3, r3, #29
   14aee:	d00c      	beq.n	14b0a <bt_smp_update_keys+0x5e>
   14af0:	4640      	mov	r0, r8
   14af2:	f7f7 faf7 	bl	c0e4 <bt_addr_le_str_real>
   14af6:	4b34      	ldr	r3, [pc, #208]	; (14bc8 <bt_smp_update_keys+0x11c>)
   14af8:	9002      	str	r0, [sp, #8]
   14afa:	e9cd 6300 	strd	r6, r3, [sp]
   14afe:	2201      	movs	r2, #1
   14b00:	4633      	mov	r3, r6
   14b02:	4621      	mov	r1, r4
   14b04:	4630      	mov	r0, r6
   14b06:	f017 fba9 	bl	2c25c <z_log_msg2_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   14b0a:	2108      	movs	r1, #8
   14b0c:	4628      	mov	r0, r5
}
   14b0e:	b004      	add	sp, #16
   14b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   14b14:	f017 be30 	b.w	2c778 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   14b18:	210e      	movs	r1, #14
   14b1a:	4638      	mov	r0, r7
   14b1c:	f017 fbad 	bl	2c27a <atomic_test_bit>
   14b20:	b128      	cbz	r0, 14b2e <bt_smp_update_keys+0x82>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   14b22:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   14b26:	7b53      	ldrb	r3, [r2, #13]
   14b28:	f043 0302 	orr.w	r3, r3, #2
   14b2c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   14b2e:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   14b30:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   14b34:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   14b36:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   14b38:	d837      	bhi.n	14baa <bt_smp_update_keys+0xfe>
   14b3a:	b3ca      	cbz	r2, 14bb0 <bt_smp_update_keys+0x104>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   14b3c:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   14b40:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   14b42:	7d2b      	ldrb	r3, [r5, #20]
   14b44:	7b6a      	ldrb	r2, [r5, #13]
   14b46:	4293      	cmp	r3, r2
   14b48:	bf28      	it	cs
   14b4a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   14b4c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14b4e:	4638      	mov	r0, r7
   14b50:	2105      	movs	r1, #5
   14b52:	f017 fb92 	bl	2c27a <atomic_test_bit>
   14b56:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   14b5a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14b5c:	b358      	cbz	r0, 14bb6 <bt_smp_update_keys+0x10a>
		conn->le.keys->flags |= BT_KEYS_SC;
   14b5e:	f042 0210 	orr.w	r2, r2, #16
   14b62:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14b64:	210d      	movs	r1, #13
   14b66:	4638      	mov	r0, r7
   14b68:	f017 fb87 	bl	2c27a <atomic_test_bit>
   14b6c:	b330      	cbz	r0, 14bbc <bt_smp_update_keys+0x110>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   14b6e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14b72:	2120      	movs	r1, #32
   14b74:	f017 fee0 	bl	2c938 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   14b78:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14b7c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   14b80:	2210      	movs	r2, #16
   14b82:	301a      	adds	r0, #26
   14b84:	f015 fbea 	bl	2a35c <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   14b88:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14b8c:	2208      	movs	r2, #8
   14b8e:	2100      	movs	r1, #0
   14b90:	3010      	adds	r0, #16
   14b92:	f015 fbee 	bl	2a372 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   14b96:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14b9a:	2202      	movs	r2, #2
   14b9c:	2100      	movs	r1, #0
   14b9e:	3018      	adds	r0, #24
}
   14ba0:	b004      	add	sp, #16
   14ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   14ba6:	f015 bbe4 	b.w	2a372 <memset>
	switch (smp->method) {
   14baa:	3a05      	subs	r2, #5
   14bac:	2a01      	cmp	r2, #1
   14bae:	d9c5      	bls.n	14b3c <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   14bb0:	f023 0301 	bic.w	r3, r3, #1
   14bb4:	e7c4      	b.n	14b40 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   14bb6:	f022 0210 	bic.w	r2, r2, #16
   14bba:	735a      	strb	r2, [r3, #13]
}
   14bbc:	b004      	add	sp, #16
   14bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bc2:	bf00      	nop
   14bc4:	20000a64 	.word	0x20000a64
   14bc8:	00033fec 	.word	0x00033fec

00014bcc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   14bcc:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   14bce:	4b07      	ldr	r3, [pc, #28]	; (14bec <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   14bd0:	4807      	ldr	r0, [pc, #28]	; (14bf0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   14bd2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   14bd6:	f003 0306 	and.w	r3, r3, #6
   14bda:	1f9a      	subs	r2, r3, #6
   14bdc:	4253      	negs	r3, r2
   14bde:	4153      	adcs	r3, r2
   14be0:	4a04      	ldr	r2, [pc, #16]	; (14bf4 <bt_smp_init+0x28>)
   14be2:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   14be4:	f7fa f8fe 	bl	ede4 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   14be8:	2000      	movs	r0, #0
   14bea:	bd08      	pop	{r3, pc}
   14bec:	20000000 	.word	0x20000000
   14bf0:	200003fc 	.word	0x200003fc
   14bf4:	20004c01 	.word	0x20004c01

00014bf8 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   14bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   14bfa:	4d11      	ldr	r5, [pc, #68]	; (14c40 <bt_keys_get_addr+0x48>)
   14bfc:	782b      	ldrb	r3, [r5, #0]
   14bfe:	4283      	cmp	r3, r0
{
   14c00:	4606      	mov	r6, r0
   14c02:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   14c04:	d00b      	beq.n	14c1e <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   14c06:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   14c08:	480e      	ldr	r0, [pc, #56]	; (14c44 <bt_keys_get_addr+0x4c>)
   14c0a:	9400      	str	r4, [sp, #0]
   14c0c:	2207      	movs	r2, #7
   14c0e:	4669      	mov	r1, sp
   14c10:	f8cd 4003 	str.w	r4, [sp, #3]
   14c14:	f015 fb79 	bl	2a30a <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   14c18:	b150      	cbz	r0, 14c30 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   14c1a:	4620      	mov	r0, r4
   14c1c:	e006      	b.n	14c2c <bt_keys_get_addr+0x34>
   14c1e:	2207      	movs	r2, #7
   14c20:	1c68      	adds	r0, r5, #1
   14c22:	f015 fb72 	bl	2a30a <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   14c26:	2800      	cmp	r0, #0
   14c28:	d1ed      	bne.n	14c06 <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   14c2a:	4628      	mov	r0, r5
}
   14c2c:	b003      	add	sp, #12
   14c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   14c30:	4804      	ldr	r0, [pc, #16]	; (14c44 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   14c32:	702e      	strb	r6, [r5, #0]
   14c34:	2207      	movs	r2, #7
   14c36:	4639      	mov	r1, r7
   14c38:	f015 fb90 	bl	2a35c <memcpy>
		return keys;
   14c3c:	4800      	ldr	r0, [pc, #0]	; (14c40 <bt_keys_get_addr+0x48>)
}
   14c3e:	e7f5      	b.n	14c2c <bt_keys_get_addr+0x34>
   14c40:	20002e48 	.word	0x20002e48
   14c44:	20002e49 	.word	0x20002e49

00014c48 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   14c48:	460b      	mov	r3, r1
   14c4a:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   14c4c:	4a04      	ldr	r2, [pc, #16]	; (14c60 <bt_keys_foreach+0x18>)
{
   14c4e:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   14c50:	89d4      	ldrh	r4, [r2, #14]
   14c52:	4204      	tst	r4, r0
   14c54:	d002      	beq.n	14c5c <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   14c56:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   14c58:	4610      	mov	r0, r2
   14c5a:	4718      	bx	r3
}
   14c5c:	bc10      	pop	{r4}
   14c5e:	4770      	bx	lr
   14c60:	20002e48 	.word	0x20002e48

00014c64 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   14c64:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   14c66:	4c09      	ldr	r4, [pc, #36]	; (14c8c <bt_keys_find+0x28>)
{
   14c68:	460b      	mov	r3, r1
   14c6a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   14c6c:	89e2      	ldrh	r2, [r4, #14]
   14c6e:	4202      	tst	r2, r0
   14c70:	d007      	beq.n	14c82 <bt_keys_find+0x1e>
   14c72:	7822      	ldrb	r2, [r4, #0]
   14c74:	429a      	cmp	r2, r3
   14c76:	d104      	bne.n	14c82 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   14c78:	2207      	movs	r2, #7
   14c7a:	1c60      	adds	r0, r4, #1
   14c7c:	f015 fb45 	bl	2a30a <memcmp>
   14c80:	b108      	cbz	r0, 14c86 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   14c82:	2000      	movs	r0, #0
}
   14c84:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   14c86:	4620      	mov	r0, r4
   14c88:	e7fc      	b.n	14c84 <bt_keys_find+0x20>
   14c8a:	bf00      	nop
   14c8c:	20002e48 	.word	0x20002e48

00014c90 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   14c90:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   14c92:	780b      	ldrb	r3, [r1, #0]
   14c94:	2b01      	cmp	r3, #1
   14c96:	4606      	mov	r6, r0
   14c98:	460d      	mov	r5, r1
   14c9a:	d001      	beq.n	14ca0 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   14c9c:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   14c9e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   14ca0:	798b      	ldrb	r3, [r1, #6]
   14ca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14ca6:	2b40      	cmp	r3, #64	; 0x40
   14ca8:	d1f8      	bne.n	14c9c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   14caa:	4c12      	ldr	r4, [pc, #72]	; (14cf4 <bt_keys_find_irk+0x64>)
   14cac:	89e3      	ldrh	r3, [r4, #14]
   14cae:	079b      	lsls	r3, r3, #30
   14cb0:	d5f4      	bpl.n	14c9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   14cb2:	7823      	ldrb	r3, [r4, #0]
   14cb4:	42b3      	cmp	r3, r6
   14cb6:	d10b      	bne.n	14cd0 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   14cb8:	2206      	movs	r2, #6
   14cba:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   14cbe:	1c68      	adds	r0, r5, #1
   14cc0:	f015 fb23 	bl	2a30a <memcmp>
   14cc4:	b908      	cbnz	r0, 14cca <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   14cc6:	4620      	mov	r0, r4
   14cc8:	e7e9      	b.n	14c9e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   14cca:	89e3      	ldrh	r3, [r4, #14]
   14ccc:	079a      	lsls	r2, r3, #30
   14cce:	d5e5      	bpl.n	14c9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   14cd0:	7823      	ldrb	r3, [r4, #0]
   14cd2:	42b3      	cmp	r3, r6
   14cd4:	d1e2      	bne.n	14c9c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   14cd6:	3501      	adds	r5, #1
   14cd8:	4807      	ldr	r0, [pc, #28]	; (14cf8 <bt_keys_find_irk+0x68>)
   14cda:	4629      	mov	r1, r5
   14cdc:	f015 fb9a 	bl	2a414 <bt_rpa_irk_matches>
   14ce0:	2800      	cmp	r0, #0
   14ce2:	d0db      	beq.n	14c9c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   14ce4:	4805      	ldr	r0, [pc, #20]	; (14cfc <bt_keys_find_irk+0x6c>)
   14ce6:	2206      	movs	r2, #6
   14ce8:	4629      	mov	r1, r5
   14cea:	f015 fb37 	bl	2a35c <memcpy>
			return &key_pool[i];
   14cee:	4801      	ldr	r0, [pc, #4]	; (14cf4 <bt_keys_find_irk+0x64>)
}
   14cf0:	e7d5      	b.n	14c9e <bt_keys_find_irk+0xe>
   14cf2:	bf00      	nop
   14cf4:	20002e48 	.word	0x20002e48
   14cf8:	20002e72 	.word	0x20002e72
   14cfc:	20002e82 	.word	0x20002e82

00014d00 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   14d00:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   14d02:	4c06      	ldr	r4, [pc, #24]	; (14d1c <bt_keys_find_addr+0x1c>)
   14d04:	7823      	ldrb	r3, [r4, #0]
   14d06:	4283      	cmp	r3, r0
   14d08:	d104      	bne.n	14d14 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   14d0a:	2207      	movs	r2, #7
   14d0c:	1c60      	adds	r0, r4, #1
   14d0e:	f015 fafc 	bl	2a30a <memcmp>
   14d12:	b108      	cbz	r0, 14d18 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   14d14:	2000      	movs	r0, #0
}
   14d16:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   14d18:	4620      	mov	r0, r4
   14d1a:	e7fc      	b.n	14d16 <bt_keys_find_addr+0x16>
   14d1c:	20002e48 	.word	0x20002e48

00014d20 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   14d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d24:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   14d26:	1dc2      	adds	r2, r0, #7
   14d28:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   14d2c:	1e75      	subs	r5, r6, #1
{
   14d2e:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   14d30:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   14d32:	6018      	str	r0, [r3, #0]
{
   14d34:	b082      	sub	sp, #8
   14d36:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   14d38:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   14d3a:	2100      	movs	r1, #0
   14d3c:	2204      	movs	r2, #4
   14d3e:	fb07 0005 	mla	r0, r7, r5, r0
   14d42:	f015 fb16 	bl	2a372 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   14d46:	b1bd      	cbz	r5, 14d78 <mem_init+0x58>
   14d48:	3e02      	subs	r6, #2
   14d4a:	b2b6      	uxth	r6, r6
   14d4c:	fb06 7307 	mla	r3, r6, r7, r7
   14d50:	fb06 f807 	mul.w	r8, r6, r7
   14d54:	441c      	add	r4, r3
   14d56:	eba8 0803 	sub.w	r8, r8, r3
   14d5a:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   14d5c:	2204      	movs	r2, #4
   14d5e:	eb04 0008 	add.w	r0, r4, r8
   14d62:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   14d66:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   14d68:	f015 faf8 	bl	2a35c <memcpy>
	while (mem_count--) {
   14d6c:	42b5      	cmp	r5, r6
   14d6e:	eba4 0407 	sub.w	r4, r4, r7
   14d72:	f105 0501 	add.w	r5, r5, #1
   14d76:	d1f1      	bne.n	14d5c <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   14d78:	b002      	add	sp, #8
   14d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d7e:	bf00      	nop

00014d80 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   14d80:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   14d82:	6805      	ldr	r5, [r0, #0]
{
   14d84:	b082      	sub	sp, #8
	if (*mem_head) {
   14d86:	b195      	cbz	r5, 14dae <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   14d88:	1deb      	adds	r3, r5, #7
   14d8a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   14d8e:	2204      	movs	r2, #4
   14d90:	4604      	mov	r4, r0
   14d92:	4629      	mov	r1, r5
   14d94:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   14d98:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   14d9a:	f015 fadf 	bl	2a35c <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   14d9e:	9b01      	ldr	r3, [sp, #4]
   14da0:	b123      	cbz	r3, 14dac <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   14da2:	1dda      	adds	r2, r3, #7
   14da4:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   14da8:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   14daa:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   14dac:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   14dae:	4628      	mov	r0, r5
   14db0:	b002      	add	sp, #8
   14db2:	bd70      	pop	{r4, r5, r6, pc}

00014db4 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   14db4:	680b      	ldr	r3, [r1, #0]
{
   14db6:	b570      	push	{r4, r5, r6, lr}
   14db8:	460c      	mov	r4, r1
   14dba:	4605      	mov	r5, r0
	if (*mem_head) {
   14dbc:	b183      	cbz	r3, 14de0 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   14dbe:	3307      	adds	r3, #7
   14dc0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   14dc4:	881e      	ldrh	r6, [r3, #0]
   14dc6:	3601      	adds	r6, #1
   14dc8:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   14dca:	2204      	movs	r2, #4
   14dcc:	4621      	mov	r1, r4
   14dce:	4628      	mov	r0, r5
   14dd0:	f015 fac4 	bl	2a35c <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   14dd4:	1deb      	adds	r3, r5, #7
   14dd6:	f023 0303 	bic.w	r3, r3, #3
   14dda:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   14ddc:	6025      	str	r5, [r4, #0]
}
   14dde:	bd70      	pop	{r4, r5, r6, pc}
   14de0:	2601      	movs	r6, #1
   14de2:	e7f2      	b.n	14dca <mem_release+0x16>

00014de4 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   14de4:	fb02 0001 	mla	r0, r2, r1, r0
   14de8:	4770      	bx	lr
   14dea:	bf00      	nop

00014dec <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   14dec:	1a40      	subs	r0, r0, r1
   14dee:	b280      	uxth	r0, r0
}
   14df0:	fbb0 f0f2 	udiv	r0, r0, r2
   14df4:	4770      	bx	lr
   14df6:	bf00      	nop

00014df8 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   14df8:	1e53      	subs	r3, r2, #1
	src += len;
   14dfa:	4411      	add	r1, r2
	while (len--) {
   14dfc:	b29b      	uxth	r3, r3
   14dfe:	b142      	cbz	r2, 14e12 <mem_rcopy+0x1a>
   14e00:	43db      	mvns	r3, r3
   14e02:	3801      	subs	r0, #1
   14e04:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   14e06:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   14e0a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   14e0e:	4291      	cmp	r1, r2
   14e10:	d1f9      	bne.n	14e06 <mem_rcopy+0xe>
	}
}
   14e12:	4770      	bx	lr

00014e14 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   14e14:	4401      	add	r1, r0
   14e16:	e002      	b.n	14e1e <mem_nz+0xa>
		if (*src++) {
   14e18:	f810 3b01 	ldrb.w	r3, [r0], #1
   14e1c:	b91b      	cbnz	r3, 14e26 <mem_nz+0x12>
	while (len--) {
   14e1e:	4288      	cmp	r0, r1
   14e20:	d1fa      	bne.n	14e18 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   14e22:	2000      	movs	r0, #0
   14e24:	4770      	bx	lr
			return 1;
   14e26:	2001      	movs	r0, #1
}
   14e28:	4770      	bx	lr
   14e2a:	bf00      	nop

00014e2c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   14e2c:	6010      	str	r0, [r2, #0]
   14e2e:	6008      	str	r0, [r1, #0]

	return link;
}
   14e30:	4770      	bx	lr
   14e32:	bf00      	nop

00014e34 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   14e34:	680a      	ldr	r2, [r1, #0]
{
   14e36:	4603      	mov	r3, r0
	if (*head != *tail) {
   14e38:	6800      	ldr	r0, [r0, #0]
   14e3a:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   14e3c:	bf05      	ittet	eq
   14e3e:	2200      	moveq	r2, #0
   14e40:	600a      	streq	r2, [r1, #0]
		return NULL;
   14e42:	2000      	movne	r0, #0
	*head = *tail = NULL;
   14e44:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   14e46:	4770      	bx	lr

00014e48 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   14e48:	f8d2 c000 	ldr.w	ip, [r2]
   14e4c:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   14e50:	f8d2 c000 	ldr.w	ip, [r2]
   14e54:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   14e58:	6010      	str	r0, [r2, #0]

	return link;
}
   14e5a:	4770      	bx	lr

00014e5c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   14e5c:	4288      	cmp	r0, r1
   14e5e:	d003      	beq.n	14e68 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   14e60:	b11a      	cbz	r2, 14e6a <memq_peek+0xe>
		*mem = head->mem;
   14e62:	6843      	ldr	r3, [r0, #4]
   14e64:	6013      	str	r3, [r2, #0]
   14e66:	4770      	bx	lr
		return NULL;
   14e68:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   14e6a:	4770      	bx	lr

00014e6c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   14e6c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   14e6e:	4283      	cmp	r3, r0
   14e70:	d009      	beq.n	14e86 <memq_dequeue+0x1a>
	if (mem) {
   14e72:	b12a      	cbz	r2, 14e80 <memq_dequeue+0x14>
		*mem = head->mem;
   14e74:	6858      	ldr	r0, [r3, #4]
   14e76:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   14e78:	681a      	ldr	r2, [r3, #0]
   14e7a:	600a      	str	r2, [r1, #0]

	return old_head;
}
   14e7c:	4618      	mov	r0, r3
   14e7e:	4770      	bx	lr
	if (old_head == NULL) {
   14e80:	2b00      	cmp	r3, #0
   14e82:	d1f9      	bne.n	14e78 <memq_dequeue+0xc>
   14e84:	e7fa      	b.n	14e7c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   14e86:	2300      	movs	r3, #0
   14e88:	e7f8      	b.n	14e7c <memq_dequeue+0x10>
   14e8a:	bf00      	nop

00014e8c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   14e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e90:	f8df 8030 	ldr.w	r8, [pc, #48]	; 14ec4 <mayfly_init+0x38>
   14e94:	4e0c      	ldr	r6, [pc, #48]	; (14ec8 <mayfly_init+0x3c>)
   14e96:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   14e98:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   14e9c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   14e9e:	1d22      	adds	r2, r4, #4
   14ea0:	4621      	mov	r1, r4
   14ea2:	4628      	mov	r0, r5
		while (caller_id--) {
   14ea4:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   14ea6:	f7ff ffc1 	bl	14e2c <memq_init>
		while (caller_id--) {
   14eaa:	42b4      	cmp	r4, r6
   14eac:	f1a5 0508 	sub.w	r5, r5, #8
   14eb0:	d1f5      	bne.n	14e9e <mayfly_init+0x12>
	while (callee_id--) {
   14eb2:	3f04      	subs	r7, #4
   14eb4:	1d3b      	adds	r3, r7, #4
   14eb6:	f1a8 0820 	sub.w	r8, r8, #32
   14eba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   14ebe:	d1eb      	bne.n	14e98 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   14ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ec4:	20002f44 	.word	0x20002f44
   14ec8:	20002fd4 	.word	0x20002fd4

00014ecc <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   14ecc:	b410      	push	{r4}
   14ece:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   14ed0:	4c15      	ldr	r4, [pc, #84]	; (14f28 <mayfly_enable+0x5c>)
{
   14ed2:	468c      	mov	ip, r1
	if (enable) {
   14ed4:	b192      	cbz	r2, 14efc <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   14ed6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   14eda:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   14ede:	0100      	lsls	r0, r0, #4
   14ee0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   14ee4:	4421      	add	r1, r4
   14ee6:	7a48      	ldrb	r0, [r1, #9]
   14ee8:	7a0c      	ldrb	r4, [r1, #8]
   14eea:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   14eec:	bf04      	itt	eq
   14eee:	3001      	addeq	r0, #1
   14ef0:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   14ef2:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   14ef4:	4661      	mov	r1, ip
   14ef6:	4618      	mov	r0, r3
   14ef8:	f00b bbba 	b.w	20670 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   14efc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   14f00:	0112      	lsls	r2, r2, #4
   14f02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   14f06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14f0a:	4423      	add	r3, r4
   14f0c:	7a9c      	ldrb	r4, [r3, #10]
   14f0e:	7ada      	ldrb	r2, [r3, #11]
   14f10:	42a2      	cmp	r2, r4
   14f12:	d001      	beq.n	14f18 <mayfly_enable+0x4c>
}
   14f14:	bc10      	pop	{r4}
   14f16:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   14f18:	3201      	adds	r2, #1
   14f1a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   14f1c:	4b03      	ldr	r3, [pc, #12]	; (14f2c <mayfly_enable+0x60>)
   14f1e:	2201      	movs	r2, #1
   14f20:	545a      	strb	r2, [r3, r1]
}
   14f22:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   14f24:	f00b bbfa 	b.w	2071c <mayfly_pend>
   14f28:	20002f50 	.word	0x20002f50
   14f2c:	20002f4c 	.word	0x20002f4c

00014f30 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   14f30:	b570      	push	{r4, r5, r6, lr}
   14f32:	b082      	sub	sp, #8
   14f34:	4606      	mov	r6, r0
   14f36:	9101      	str	r1, [sp, #4]
   14f38:	461c      	mov	r4, r3
   14f3a:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   14f3c:	b32a      	cbz	r2, 14f8a <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   14f3e:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   14f40:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   14f42:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   14f44:	f012 0203 	ands.w	r2, r2, #3
   14f48:	d005      	beq.n	14f56 <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   14f4a:	2a01      	cmp	r2, #1
   14f4c:	d042      	beq.n	14fd4 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   14f4e:	3301      	adds	r3, #1
   14f50:	b2db      	uxtb	r3, r3
   14f52:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   14f54:	e00f      	b.n	14f76 <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   14f56:	3301      	adds	r3, #1
   14f58:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   14f5a:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   14f5c:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   14f5e:	2304      	movs	r3, #4
   14f60:	fb11 3105 	smlabb	r1, r1, r5, r3
   14f64:	4a1c      	ldr	r2, [pc, #112]	; (14fd8 <mayfly_enqueue+0xa8>)
   14f66:	6860      	ldr	r0, [r4, #4]
   14f68:	230c      	movs	r3, #12
   14f6a:	fb13 1306 	smlabb	r3, r3, r6, r1
   14f6e:	441a      	add	r2, r3
   14f70:	4621      	mov	r1, r4
   14f72:	f7ff ff69 	bl	14e48 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   14f76:	4b19      	ldr	r3, [pc, #100]	; (14fdc <mayfly_enqueue+0xac>)
   14f78:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   14f7a:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   14f7c:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   14f7e:	4629      	mov	r1, r5
   14f80:	f00b fbcc 	bl	2071c <mayfly_pend>

	return 0;
   14f84:	2000      	movs	r0, #0
}
   14f86:	b002      	add	sp, #8
   14f88:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   14f8a:	f00b fbb1 	bl	206f0 <mayfly_prio_is_equal>
   14f8e:	2800      	cmp	r0, #0
   14f90:	d0d5      	beq.n	14f3e <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   14f92:	4629      	mov	r1, r5
   14f94:	4630      	mov	r0, r6
   14f96:	f00b fb8b 	bl	206b0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   14f9a:	2800      	cmp	r0, #0
   14f9c:	d0cf      	beq.n	14f3e <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   14f9e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   14fa2:	0112      	lsls	r2, r2, #4
   14fa4:	490c      	ldr	r1, [pc, #48]	; (14fd8 <mayfly_enqueue+0xa8>)
   14fa6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   14faa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14fae:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   14fb0:	7a9a      	ldrb	r2, [r3, #10]
   14fb2:	7adb      	ldrb	r3, [r3, #11]
   14fb4:	429a      	cmp	r2, r3
   14fb6:	d1c2      	bne.n	14f3e <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   14fb8:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   14fba:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   14fbc:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   14fbe:	0792      	lsls	r2, r2, #30
   14fc0:	d002      	beq.n	14fc8 <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   14fc2:	3302      	adds	r3, #2
   14fc4:	b2db      	uxtb	r3, r3
   14fc6:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   14fc8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   14fcc:	4798      	blx	r3
		return 0;
   14fce:	2000      	movs	r0, #0
}
   14fd0:	b002      	add	sp, #8
   14fd2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   14fd4:	4610      	mov	r0, r2
   14fd6:	e7d6      	b.n	14f86 <mayfly_enqueue+0x56>
   14fd8:	20002f50 	.word	0x20002f50
   14fdc:	20002f4c 	.word	0x20002f4c

00014fe0 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   14fe0:	4a50      	ldr	r2, [pc, #320]	; (15124 <mayfly_run+0x144>)
   14fe2:	5c13      	ldrb	r3, [r2, r0]
   14fe4:	2b00      	cmp	r3, #0
   14fe6:	f000 809b 	beq.w	15120 <mayfly_run+0x140>
{
   14fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   14fee:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   14ff0:	4f4d      	ldr	r7, [pc, #308]	; (15128 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   14ff2:	5413      	strb	r3, [r2, r0]
{
   14ff4:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   14ff6:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   14ff8:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   14ffc:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15000:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   15004:	9303      	str	r3, [sp, #12]
   15006:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1500a:	f10b 0804 	add.w	r8, fp, #4
   1500e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   15012:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   15016:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   15018:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   1501c:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   1501e:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   15020:	f7ff ff1c 	bl	14e5c <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   15024:	f107 0624 	add.w	r6, r7, #36	; 0x24
   15028:	4683      	mov	fp, r0
   1502a:	2800      	cmp	r0, #0
   1502c:	d034      	beq.n	15098 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   1502e:	9c05      	ldr	r4, [sp, #20]
   15030:	7863      	ldrb	r3, [r4, #1]
   15032:	7825      	ldrb	r5, [r4, #0]
   15034:	1aed      	subs	r5, r5, r3
   15036:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   1503a:	2d01      	cmp	r5, #1
   1503c:	d106      	bne.n	1504c <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   1503e:	3b01      	subs	r3, #1
   15040:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   15042:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   15046:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   15048:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   1504a:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   1504c:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   1504e:	1ac3      	subs	r3, r0, r3
   15050:	f003 0303 	and.w	r3, r3, #3
   15054:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   15056:	f04f 0200 	mov.w	r2, #0
   1505a:	4631      	mov	r1, r6
	req = m->_req;
   1505c:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   15060:	d00f      	beq.n	15082 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   15062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15064:	f7ff ff02 	bl	14e6c <memq_dequeue>
		ack = m->_ack;
   15068:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1506c:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   1506e:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   15072:	eba3 030c 	sub.w	r3, r3, ip
   15076:	f003 0303 	and.w	r3, r3, #3
   1507a:	2b01      	cmp	r3, #1
		m->_ack = req;
   1507c:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   15080:	d046      	beq.n	15110 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   15082:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   15086:	aa05      	add	r2, sp, #20
   15088:	f7ff fee8 	bl	14e5c <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   1508c:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   1508e:	9000      	str	r0, [sp, #0]
   15090:	4683      	mov	fp, r0
			if (state == 1U) {
   15092:	d02b      	beq.n	150ec <mayfly_run+0x10c>
		while (link) {
   15094:	2800      	cmp	r0, #0
   15096:	d1ca      	bne.n	1502e <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   15098:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1509c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   150a0:	429a      	cmp	r2, r3
   150a2:	d003      	beq.n	150ac <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   150a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   150a8:	2301      	movs	r3, #1
   150aa:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   150ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   150b0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   150b4:	429a      	cmp	r2, r3
   150b6:	d003      	beq.n	150c0 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   150b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   150bc:	2301      	movs	r3, #1
   150be:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   150c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   150c4:	fa5f f989 	uxtb.w	r9, r9
   150c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   150cc:	f1a7 070c 	sub.w	r7, r7, #12
   150d0:	d1a1      	bne.n	15016 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   150d2:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   150d6:	b1c3      	cbz	r3, 1510a <mayfly_run+0x12a>
   150d8:	9b03      	ldr	r3, [sp, #12]
   150da:	b9b3      	cbnz	r3, 1510a <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   150dc:	461a      	mov	r2, r3
   150de:	4651      	mov	r1, sl
   150e0:	4650      	mov	r0, sl
	}
}
   150e2:	b007      	add	sp, #28
   150e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   150e8:	f00b bac2 	b.w	20670 <mayfly_enable_cb>
				if (caller_id || link) {
   150ec:	f1b9 0f00 	cmp.w	r9, #0
   150f0:	d101      	bne.n	150f6 <mayfly_run+0x116>
   150f2:	2800      	cmp	r0, #0
   150f4:	d0d0      	beq.n	15098 <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   150f6:	f8dd a008 	ldr.w	sl, [sp, #8]
   150fa:	4a0a      	ldr	r2, [pc, #40]	; (15124 <mayfly_run+0x144>)
   150fc:	2301      	movs	r3, #1
   150fe:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   15102:	4651      	mov	r1, sl
   15104:	4650      	mov	r0, sl
   15106:	f00b fb09 	bl	2071c <mayfly_pend>
}
   1510a:	b007      	add	sp, #28
   1510c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15110:	4642      	mov	r2, r8
   15112:	4621      	mov	r1, r4
   15114:	4658      	mov	r0, fp
			m->_ack = ack;
   15116:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1511a:	f7ff fe95 	bl	14e48 <memq_enqueue>
   1511e:	e7b0      	b.n	15082 <mayfly_run+0xa2>
   15120:	4770      	bx	lr
   15122:	bf00      	nop
   15124:	20002f4c 	.word	0x20002f4c
   15128:	20002f50 	.word	0x20002f50

0001512c <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   1512c:	1e4b      	subs	r3, r1, #1
   1512e:	b2db      	uxtb	r3, r3
   15130:	b171      	cbz	r1, 15150 <util_ones_count_get+0x24>
   15132:	1e41      	subs	r1, r0, #1
   15134:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   15138:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   1513a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   1513e:	b123      	cbz	r3, 1514a <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   15140:	1e5a      	subs	r2, r3, #1
			one_count++;
   15142:	3001      	adds	r0, #1
		while (bite) {
   15144:	4013      	ands	r3, r2
			one_count++;
   15146:	b2c0      	uxtb	r0, r0
		while (bite) {
   15148:	d1fa      	bne.n	15140 <util_ones_count_get+0x14>
	while (octets_len--) {
   1514a:	4561      	cmp	r1, ip
   1514c:	d1f5      	bne.n	1513a <util_ones_count_get+0xe>
   1514e:	4770      	bx	lr
	uint8_t one_count = 0U;
   15150:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   15152:	4770      	bx	lr

00015154 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   15154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   15158:	4d48      	ldr	r5, [pc, #288]	; (1527c <util_aa_le32+0x128>)
{
   1515a:	b083      	sub	sp, #12
   1515c:	4607      	mov	r7, r0
   1515e:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   15160:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   15162:	2104      	movs	r1, #4
   15164:	4638      	mov	r0, r7
   15166:	f009 f955 	bl	1e414 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1516a:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   1516c:	231e      	movs	r3, #30
   1516e:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
   15172:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   15176:	f04f 0901 	mov.w	r9, #1
   1517a:	e00c      	b.n	15196 <util_aa_le32+0x42>
			transitions++;
   1517c:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   15180:	2b1b      	cmp	r3, #27
			transitions++;
   15182:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   15184:	d967      	bls.n	15256 <util_aa_le32+0x102>
				consecutive_cnt = 1U;
   15186:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   1518a:	2919      	cmp	r1, #25
   1518c:	d04e      	beq.n	1522c <util_aa_le32+0xd8>
   1518e:	468e      	mov	lr, r1
   15190:	4694      	mov	ip, r2
	while (bit_idx--) {
   15192:	3b01      	subs	r3, #1
   15194:	d31e      	bcc.n	151d4 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
   15196:	fa20 f203 	lsr.w	r2, r0, r3
   1519a:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   1519e:	4594      	cmp	ip, r2
   151a0:	d1ec      	bne.n	1517c <util_aa_le32+0x28>
			consecutive_cnt++;
   151a2:	f109 0801 	add.w	r8, r9, #1
   151a6:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   151aa:	f1b8 0f06 	cmp.w	r8, #6
   151ae:	d90d      	bls.n	151cc <util_aa_le32+0x78>
   151b0:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
   151b2:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
   151b6:	b3a2      	cbz	r2, 15222 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
   151b8:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
   151bc:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   151c0:	4571      	cmp	r1, lr
   151c2:	d1e6      	bne.n	15192 <util_aa_le32+0x3e>
				transitions++;
   151c4:	3101      	adds	r1, #1
   151c6:	b2c9      	uxtb	r1, r1
   151c8:	4662      	mov	r2, ip
   151ca:	e7dc      	b.n	15186 <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
   151cc:	d149      	bne.n	15262 <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   151ce:	46c1      	mov	r9, r8
	while (bit_idx--) {
   151d0:	3b01      	subs	r3, #1
   151d2:	d2e0      	bcs.n	15196 <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   151d4:	ea80 0305 	eor.w	r3, r0, r5
   151d8:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   151da:	f10d 0c04 	add.w	ip, sp, #4
   151de:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   151e2:	2200      	movs	r2, #0
		bite = *octets;
   151e4:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   151e8:	b123      	cbz	r3, 151f4 <util_aa_le32+0xa0>
			bite &= (bite - 1);
   151ea:	1e59      	subs	r1, r3, #1
			one_count++;
   151ec:	3201      	adds	r2, #1
		while (bite) {
   151ee:	400b      	ands	r3, r1
			one_count++;
   151f0:	b2d2      	uxtb	r2, r2
		while (bite) {
   151f2:	d1fa      	bne.n	151ea <util_aa_le32+0x96>
	while (octets_len--) {
   151f4:	45e6      	cmp	lr, ip
   151f6:	d1f5      	bne.n	151e4 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   151f8:	2a01      	cmp	r2, #1
   151fa:	d909      	bls.n	15210 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   151fc:	b283      	uxth	r3, r0
   151fe:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   15202:	ea4f 4210 	mov.w	r2, r0, lsr #16
   15206:	d11b      	bne.n	15240 <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   15208:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   1520a:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   1520e:	d117      	bne.n	15240 <util_aa_le32+0xec>
	if (!retry) {
   15210:	3e01      	subs	r6, #1
   15212:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   15216:	d1a4      	bne.n	15162 <util_aa_le32+0xe>
		return -EFAULT;
   15218:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   1521c:	b003      	add	sp, #12
   1521e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   15222:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
   15226:	f04f 0c01 	mov.w	ip, #1
   1522a:	e7c9      	b.n	151c0 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
   1522c:	3301      	adds	r3, #1
   1522e:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   15232:	b112      	cbz	r2, 1523a <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
   15234:	425b      	negs	r3, r3
   15236:	4018      	ands	r0, r3
   15238:	e7cc      	b.n	151d4 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
   1523a:	3b01      	subs	r3, #1
   1523c:	4318      	orrs	r0, r3
   1523e:	e7c9      	b.n	151d4 <util_aa_le32+0x80>
	dst[1] = val >> 8;
   15240:	f3c0 2107 	ubfx	r1, r0, #8, #8
   15244:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   15246:	7038      	strb	r0, [r7, #0]
	return 0;
   15248:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   1524a:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
   1524c:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
   1524e:	70fb      	strb	r3, [r7, #3]
}
   15250:	b003      	add	sp, #12
   15252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   15256:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   1525a:	2901      	cmp	r1, #1
   1525c:	d9a9      	bls.n	151b2 <util_aa_le32+0x5e>
   1525e:	46c1      	mov	r9, r8
   15260:	e793      	b.n	1518a <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
   15262:	2b1c      	cmp	r3, #28
   15264:	d904      	bls.n	15270 <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
   15266:	2b1b      	cmp	r3, #27
   15268:	d906      	bls.n	15278 <util_aa_le32+0x124>
   1526a:	4694      	mov	ip, r2
   1526c:	46c1      	mov	r9, r8
   1526e:	e7af      	b.n	151d0 <util_aa_le32+0x7c>
   15270:	f1be 0f00 	cmp.w	lr, #0
   15274:	d09c      	beq.n	151b0 <util_aa_le32+0x5c>
   15276:	e7f6      	b.n	15266 <util_aa_le32+0x112>
   15278:	4671      	mov	r1, lr
   1527a:	e7ee      	b.n	1525a <util_aa_le32+0x106>
   1527c:	8e89bed6 	.word	0x8e89bed6

00015280 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   15280:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   15282:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   15284:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   15286:	2bff      	cmp	r3, #255	; 0xff
   15288:	d014      	beq.n	152b4 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   1528a:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   1528e:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   15290:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   15294:	d028      	beq.n	152e8 <ticker_dequeue+0x68>
	total = 0U;
   15296:	f04f 0c00 	mov.w	ip, #0
   1529a:	e001      	b.n	152a0 <ticker_dequeue+0x20>
		if (current == id) {
   1529c:	4299      	cmp	r1, r3
   1529e:	d00b      	beq.n	152b8 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   152a0:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   152a2:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   152a4:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   152a6:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   152a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   152ac:	44a4      	add	ip, r4
		ticker_current = &node[current];
   152ae:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   152b2:	d1f3      	bne.n	1529c <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   152b4:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   152b6:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   152b8:	4571      	cmp	r1, lr
   152ba:	d018      	beq.n	152ee <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   152bc:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   152be:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   152c0:	fa0f fe8e 	sxth.w	lr, lr
   152c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   152c8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   152cc:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   152d0:	7813      	ldrb	r3, [r2, #0]
   152d2:	2bff      	cmp	r3, #255	; 0xff
   152d4:	d006      	beq.n	152e4 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   152d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   152da:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   152de:	68ab      	ldr	r3, [r5, #8]
   152e0:	4403      	add	r3, r0
   152e2:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   152e4:	4460      	add	r0, ip
}
   152e6:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   152e8:	469e      	mov	lr, r3
	total = 0U;
   152ea:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   152ee:	7813      	ldrb	r3, [r2, #0]
   152f0:	7743      	strb	r3, [r0, #29]
   152f2:	e7e4      	b.n	152be <ticker_dequeue+0x3e>

000152f4 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   152f4:	eba2 0c01 	sub.w	ip, r2, r1
   152f8:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   152fc:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   152fe:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   15300:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   15302:	d10a      	bne.n	1531a <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15304:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   15308:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1530a:	42a3      	cmp	r3, r4
   1530c:	d914      	bls.n	15338 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   1530e:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   15310:	2100      	movs	r1, #0
}
   15312:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   15314:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   15316:	6141      	str	r1, [r0, #20]
}
   15318:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1531a:	1a89      	subs	r1, r1, r2
   1531c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   15320:	428b      	cmp	r3, r1
   15322:	d806      	bhi.n	15332 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   15324:	4421      	add	r1, r4
   15326:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   15328:	2300      	movs	r3, #0
}
   1532a:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   1532c:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1532e:	6141      	str	r1, [r0, #20]
}
   15330:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   15332:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   15334:	42a3      	cmp	r3, r4
   15336:	d8ea      	bhi.n	1530e <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   15338:	1ae1      	subs	r1, r4, r3
   1533a:	e7f5      	b.n	15328 <ticks_to_expire_prep+0x34>

0001533c <ticker_job_list_insert>:
{
   1533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15340:	b087      	sub	sp, #28
   15342:	4603      	mov	r3, r0
	count_user = instance->count_user;
   15344:	7a42      	ldrb	r2, [r0, #9]
{
   15346:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   15348:	6800      	ldr	r0, [r0, #0]
   1534a:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   1534c:	6858      	ldr	r0, [r3, #4]
   1534e:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   15350:	2a00      	cmp	r2, #0
   15352:	f000 80f4 	beq.w	1553e <ticker_job_list_insert+0x202>
   15356:	1e53      	subs	r3, r2, #1
   15358:	b2db      	uxtb	r3, r3
   1535a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1535e:	460f      	mov	r7, r1
   15360:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   15362:	9b03      	ldr	r3, [sp, #12]
   15364:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   15366:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   15368:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1536a:	2fff      	cmp	r7, #255	; 0xff
   1536c:	d05e      	beq.n	1542c <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   1536e:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   15372:	9b02      	ldr	r3, [sp, #8]
   15374:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   15378:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   1537a:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   1537e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   15382:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   15384:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   15386:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1538a:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   1538e:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   15392:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   15394:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   15398:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   1539a:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1539e:	d10f      	bne.n	153c0 <ticker_job_list_insert+0x84>
   153a0:	e0c8      	b.n	15534 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   153a2:	1a09      	subs	r1, r1, r0
   153a4:	d106      	bne.n	153b4 <ticker_job_list_insert+0x78>
   153a6:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   153aa:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   153ae:	45e2      	cmp	sl, ip
   153b0:	f200 8086 	bhi.w	154c0 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   153b4:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   153b8:	2bff      	cmp	r3, #255	; 0xff
   153ba:	4691      	mov	r9, r2
   153bc:	d072      	beq.n	154a4 <ticker_job_list_insert+0x168>
   153be:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   153c0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   153c4:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   153c8:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   153ca:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   153ce:	4288      	cmp	r0, r1
   153d0:	d9e7      	bls.n	153a2 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   153d2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   153d6:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   153da:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   153de:	d166      	bne.n	154ae <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   153e0:	9b01      	ldr	r3, [sp, #4]
   153e2:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   153e6:	2aff      	cmp	r2, #255	; 0xff
   153e8:	d008      	beq.n	153fc <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   153ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   153ee:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   153f2:	f8de 3008 	ldr.w	r3, [lr, #8]
   153f6:	1a5b      	subs	r3, r3, r1
   153f8:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   153fc:	78a3      	ldrb	r3, [r4, #2]
   153fe:	3301      	adds	r3, #1
   15400:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   15402:	2d00      	cmp	r5, #0
   15404:	d0b1      	beq.n	1536a <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   15406:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   1540a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1540c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1540e:	2200      	movs	r2, #0
   15410:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   15412:	b113      	cbz	r3, 1541a <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   15414:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15416:	4610      	mov	r0, r2
   15418:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1541a:	6863      	ldr	r3, [r4, #4]
   1541c:	2b00      	cmp	r3, #0
   1541e:	d1a4      	bne.n	1536a <ticker_job_list_insert+0x2e>
					ticker->op_context =
   15420:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   15424:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   15426:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   1542a:	d1a0      	bne.n	1536e <ticker_job_list_insert+0x32>
   1542c:	9b03      	ldr	r3, [sp, #12]
   1542e:	7898      	ldrb	r0, [r3, #2]
   15430:	42b0      	cmp	r0, r6
   15432:	d02f      	beq.n	15494 <ticker_job_list_insert+0x158>
   15434:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   15438:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   1543c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   15440:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   15444:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   15448:	3601      	adds	r6, #1
   1544a:	b2f6      	uxtb	r6, r6
					first = 0U;
   1544c:	42b1      	cmp	r1, r6
   1544e:	bf08      	it	eq
   15450:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   15452:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   15454:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   15458:	d11a      	bne.n	15490 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   1545a:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   1545e:	9902      	ldr	r1, [sp, #8]
   15460:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   15464:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   15468:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   1546c:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   1546e:	7863      	ldrb	r3, [r4, #1]
   15470:	1a5b      	subs	r3, r3, r1
   15472:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   15476:	d025      	beq.n	154c4 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   15478:	f04f 0300 	mov.w	r3, #0
   1547c:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   15480:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   15482:	2001      	movs	r0, #1
	user_op->status = status;
   15484:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   15486:	b10b      	cbz	r3, 1548c <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   15488:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1548a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   1548c:	f89b 0002 	ldrb.w	r0, [fp, #2]
   15490:	42b0      	cmp	r0, r6
   15492:	d1d1      	bne.n	15438 <ticker_job_list_insert+0xfc>
	while (count_user--) {
   15494:	9a03      	ldr	r2, [sp, #12]
   15496:	9905      	ldr	r1, [sp, #20]
   15498:	4291      	cmp	r1, r2
   1549a:	f1a2 0308 	sub.w	r3, r2, #8
   1549e:	d04e      	beq.n	1553e <ticker_job_list_insert+0x202>
   154a0:	9303      	str	r3, [sp, #12]
   154a2:	e75e      	b.n	15362 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   154a4:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   154a8:	f88b 3000 	strb.w	r3, [fp]
   154ac:	461a      	mov	r2, r3
		node[previous].next = id;
   154ae:	fa0f f989 	sxth.w	r9, r9
   154b2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   154b6:	ea4f 1909 	mov.w	r9, r9, lsl #4
   154ba:	f80e 8009 	strb.w	r8, [lr, r9]
   154be:	e792      	b.n	153e6 <ticker_job_list_insert+0xaa>
   154c0:	4601      	mov	r1, r0
   154c2:	e786      	b.n	153d2 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   154c4:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   154c6:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   154c8:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   154cc:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   154ce:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   154d2:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   154d6:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   154d8:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   154dc:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   154e0:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   154e4:	d024      	beq.n	15530 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   154e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   154ea:	1ad3      	subs	r3, r2, r3
   154ec:	fab3 f383 	clz	r3, r3
   154f0:	095b      	lsrs	r3, r3, #5
   154f2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   154f6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   154fa:	429a      	cmp	r2, r3
   154fc:	bf88      	it	hi
   154fe:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   15500:	69ab      	ldr	r3, [r5, #24]
   15502:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   15504:	69eb      	ldr	r3, [r5, #28]
   15506:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   15508:	6a2b      	ldr	r3, [r5, #32]
   1550a:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   1550c:	68ab      	ldr	r3, [r5, #8]
   1550e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   15510:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   15512:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   15514:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   15516:	686a      	ldr	r2, [r5, #4]
   15518:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   1551a:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1551c:	f7ff feea 	bl	152f4 <ticks_to_expire_prep>
	ticker->force = 1U;
   15520:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   15524:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   15528:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   1552c:	70e3      	strb	r3, [r4, #3]
}
   1552e:	e729      	b.n	15384 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   15530:	461a      	mov	r2, r3
   15532:	e7e5      	b.n	15500 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   15534:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   15538:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   1553c:	e75e      	b.n	153fc <ticker_job_list_insert+0xc0>
}
   1553e:	b007      	add	sp, #28
   15540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015544 <ticker_worker>:
{
   15544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   15548:	7f82      	ldrb	r2, [r0, #30]
{
   1554a:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   1554c:	2301      	movs	r3, #1
	if (instance->job_guard) {
   1554e:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   15550:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   15552:	2a00      	cmp	r2, #0
   15554:	d15b      	bne.n	1560e <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   15556:	7f43      	ldrb	r3, [r0, #29]
   15558:	2bff      	cmp	r3, #255	; 0xff
   1555a:	4681      	mov	r9, r0
   1555c:	d056      	beq.n	1560c <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1555e:	f00a fba7 	bl	1fcb0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15562:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   15566:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   1556a:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1556e:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   15570:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15572:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   15576:	f000 813c 	beq.w	157f2 <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1557a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   1557e:	42bb      	cmp	r3, r7
   15580:	bf94      	ite	ls
   15582:	2300      	movls	r3, #0
   15584:	2301      	movhi	r3, #1
   15586:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   15588:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   1558c:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   15590:	f000 8145 	beq.w	1581e <ticker_worker+0x2da>
	ticks_expired = 0U;
   15594:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   15598:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   1559c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   155a0:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   155a4:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   155a8:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   155aa:	42bb      	cmp	r3, r7
   155ac:	d837      	bhi.n	1561e <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   155ae:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   155b0:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   155b4:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   155b6:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   155b8:	7863      	ldrb	r3, [r4, #1]
   155ba:	1a5b      	subs	r3, r3, r1
   155bc:	b2db      	uxtb	r3, r3
   155be:	2b01      	cmp	r3, #1
   155c0:	d12a      	bne.n	15618 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   155c2:	69a6      	ldr	r6, [r4, #24]
   155c4:	2e00      	cmp	r6, #0
   155c6:	d054      	beq.n	15672 <ticker_worker+0x12e>
   155c8:	9b03      	ldr	r3, [sp, #12]
   155ca:	2b00      	cmp	r3, #0
   155cc:	d04c      	beq.n	15668 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   155ce:	8be3      	ldrh	r3, [r4, #30]
   155d0:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   155d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   155d4:	b13b      	cbz	r3, 155e6 <ticker_worker+0xa2>
   155d6:	681a      	ldr	r2, [r3, #0]
   155d8:	b11a      	cbz	r2, 155e2 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   155da:	7a1a      	ldrb	r2, [r3, #8]
   155dc:	2a00      	cmp	r2, #0
   155de:	f000 80ef 	beq.w	157c0 <ticker_worker+0x27c>
				ext_data->reschedule_state =
   155e2:	2200      	movs	r2, #0
   155e4:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   155e6:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   155e8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   155ec:	3201      	adds	r2, #1
   155ee:	b292      	uxth	r2, r2
   155f0:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   155f2:	b178      	cbz	r0, 15614 <ticker_worker+0xd0>
   155f4:	8ba0      	ldrh	r0, [r4, #28]
   155f6:	4290      	cmp	r0, r2
   155f8:	d20c      	bcs.n	15614 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   155fa:	2b00      	cmp	r3, #0
   155fc:	f000 80fc 	beq.w	157f8 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   15600:	7a1a      	ldrb	r2, [r3, #8]
   15602:	2a01      	cmp	r2, #1
   15604:	d006      	beq.n	15614 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   15606:	f04f 0c01 	mov.w	ip, #1
   1560a:	e036      	b.n	1567a <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   1560c:	77c2      	strb	r2, [r0, #31]
}
   1560e:	b00f      	add	sp, #60	; 0x3c
   15610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   15614:	3901      	subs	r1, #1
   15616:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   15618:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1561c:	d1be      	bne.n	1559c <ticker_worker+0x58>
   1561e:	f8dd 9010 	ldr.w	r9, [sp, #16]
   15622:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   15624:	f899 300b 	ldrb.w	r3, [r9, #11]
   15628:	f899 200a 	ldrb.w	r2, [r9, #10]
   1562c:	429a      	cmp	r2, r3
   1562e:	d10a      	bne.n	15646 <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   15630:	3201      	adds	r2, #1
   15632:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   15634:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   15636:	bf1c      	itt	ne
   15638:	4613      	movne	r3, r2
   1563a:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   1563c:	9a06      	ldr	r2, [sp, #24]
   1563e:	f889 200b 	strb.w	r2, [r9, #11]
   15642:	bf08      	it	eq
   15644:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   15646:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1564a:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1564e:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   15650:	2200      	movs	r2, #0
   15652:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   15656:	464b      	mov	r3, r9
   15658:	2201      	movs	r2, #1
   1565a:	2104      	movs	r1, #4
   1565c:	2003      	movs	r0, #3
   1565e:	46a4      	mov	ip, r4
}
   15660:	b00f      	add	sp, #60	; 0x3c
   15662:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   15666:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   15668:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   1566c:	9307      	str	r3, [sp, #28]
   1566e:	3380      	adds	r3, #128	; 0x80
   15670:	d141      	bne.n	156f6 <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   15672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15674:	b1f3      	cbz	r3, 156b4 <ticker_worker+0x170>
   15676:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   1567a:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   1567c:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   1567e:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   15680:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   15682:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   15684:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   15686:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   15688:	2d00      	cmp	r5, #0
   1568a:	d0c5      	beq.n	15618 <ticker_worker+0xd4>
					   ticks_expired -
   1568c:	9b04      	ldr	r3, [sp, #16]
   1568e:	6960      	ldr	r0, [r4, #20]
   15690:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   15692:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15694:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   15696:	ebaa 0000 	sub.w	r0, sl, r0
   1569a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1569c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   156a0:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   156a2:	f1bc 0f00 	cmp.w	ip, #0
   156a6:	d016      	beq.n	156d6 <ticker_worker+0x192>
   156a8:	e9cd 3600 	strd	r3, r6, [sp]
   156ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   156b0:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   156b2:	e7b1      	b.n	15618 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   156b4:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   156b6:	3901      	subs	r1, #1
   156b8:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   156ba:	2d00      	cmp	r5, #0
   156bc:	d0ac      	beq.n	15618 <ticker_worker+0xd4>
			ticks_drift = 0U;
   156be:	4619      	mov	r1, r3
					   ticks_expired -
   156c0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   156c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   156c4:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   156c6:	ebaa 0003 	sub.w	r0, sl, r3
   156ca:	9b04      	ldr	r3, [sp, #16]
   156cc:	695b      	ldr	r3, [r3, #20]
   156ce:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   156d0:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   156d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   156d6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   156da:	e9cd 3600 	strd	r3, r6, [sp]
   156de:	4663      	mov	r3, ip
   156e0:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   156e2:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   156e4:	2b00      	cmp	r3, #0
   156e6:	9b03      	ldr	r3, [sp, #12]
   156e8:	bf18      	it	ne
   156ea:	2301      	movne	r3, #1
   156ec:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   156ee:	2300      	movs	r3, #0
   156f0:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   156f2:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   156f4:	e790      	b.n	15618 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   156f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   156fa:	d0ba      	beq.n	15672 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   156fc:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   156fe:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   15700:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   15702:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   15704:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   15706:	bf28      	it	cs
   15708:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   1570a:	fb02 5005 	mla	r0, r2, r5, r5
   1570e:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   15710:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   15712:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   15716:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   15718:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   1571c:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   1571e:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   15720:	46a0      	mov	r8, r4
   15722:	f04f 0c00 	mov.w	ip, #0
   15726:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   15728:	b21b      	sxth	r3, r3
   1572a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1572e:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   15732:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   15734:	f8d2 e008 	ldr.w	lr, [r2, #8]
   15738:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1573a:	4566      	cmp	r6, ip
   1573c:	d339      	bcc.n	157b2 <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   1573e:	6991      	ldr	r1, [r2, #24]
   15740:	b399      	cbz	r1, 157aa <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   15742:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   15744:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   15746:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   1574a:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   1574e:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   15750:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   15752:	bf28      	it	cs
   15754:	1a0d      	subcs	r5, r1, r0
					  0U :
   15756:	f1b9 0f00 	cmp.w	r9, #0
   1575a:	d03e      	beq.n	157da <ticker_worker+0x296>
   1575c:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   15760:	b3bc      	cbz	r4, 157d2 <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   15762:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   15766:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1576a:	45f1      	cmp	r9, lr
   1576c:	bf8c      	ite	hi
   1576e:	f04f 0e01 	movhi.w	lr, #1
   15772:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   15776:	bf34      	ite	cc
   15778:	f04f 0901 	movcc.w	r9, #1
   1577c:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   15780:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   15782:	f892 a003 	ldrb.w	sl, [r2, #3]
   15786:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   1578a:	d30e      	bcc.n	157aa <ticker_worker+0x266>
   1578c:	4592      	cmp	sl, r2
   1578e:	d829      	bhi.n	157e4 <ticker_worker+0x2a0>
			    (next_force ||
   15790:	f117 0f80 	cmn.w	r7, #128	; 0x80
   15794:	d026      	beq.n	157e4 <ticker_worker+0x2a0>
			     next_is_critical ||
   15796:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   15798:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   1579a:	4295      	cmp	r5, r2
   1579c:	dd02      	ble.n	157a4 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   1579e:	f1be 0f00 	cmp.w	lr, #0
   157a2:	d01f      	beq.n	157e4 <ticker_worker+0x2a0>
   157a4:	9a07      	ldr	r2, [sp, #28]
   157a6:	42ba      	cmp	r2, r7
   157a8:	d019      	beq.n	157de <ticker_worker+0x29a>
			id_head = ticker_next->next;
   157aa:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   157ae:	2bff      	cmp	r3, #255	; 0xff
   157b0:	d1ba      	bne.n	15728 <ticker_worker+0x1e4>
   157b2:	4644      	mov	r4, r8
   157b4:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   157b8:	990a      	ldr	r1, [sp, #40]	; 0x28
   157ba:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   157be:	e758      	b.n	15672 <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   157c0:	8ba2      	ldrh	r2, [r4, #28]
   157c2:	9805      	ldr	r0, [sp, #20]
   157c4:	4282      	cmp	r2, r0
   157c6:	f63f af0c 	bhi.w	155e2 <ticker_worker+0x9e>
				ext_data->reschedule_state =
   157ca:	f04f 0201 	mov.w	r2, #1
   157ce:	721a      	strb	r2, [r3, #8]
   157d0:	e709      	b.n	155e6 <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   157d2:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   157d6:	46a1      	mov	r9, r4
   157d8:	e7d2      	b.n	15780 <ticker_worker+0x23c>
					  0U :
   157da:	46ce      	mov	lr, r9
   157dc:	e7c0      	b.n	15760 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   157de:	f1b9 0f00 	cmp.w	r9, #0
   157e2:	d0e2      	beq.n	157aa <ticker_worker+0x266>
   157e4:	4644      	mov	r4, r8
   157e6:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   157ea:	990a      	ldr	r1, [sp, #40]	; 0x28
   157ec:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   157f0:	e6ef      	b.n	155d2 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   157f2:	9b06      	ldr	r3, [sp, #24]
   157f4:	9303      	str	r3, [sp, #12]
   157f6:	e6c7      	b.n	15588 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   157f8:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   157fa:	3901      	subs	r1, #1
   157fc:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   157fe:	2d00      	cmp	r5, #0
   15800:	f43f af0a 	beq.w	15618 <ticker_worker+0xd4>
			ticks_drift = 0U;
   15804:	4619      	mov	r1, r3
					   ticks_expired -
   15806:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   15808:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1580a:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   1580c:	ebaa 0003 	sub.w	r0, sl, r3
   15810:	9b04      	ldr	r3, [sp, #16]
   15812:	695b      	ldr	r3, [r3, #20]
   15814:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   15816:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   1581a:	78e3      	ldrb	r3, [r4, #3]
   1581c:	e744      	b.n	156a8 <ticker_worker+0x164>
	ticks_expired = 0U;
   1581e:	2300      	movs	r3, #0
   15820:	4619      	mov	r1, r3
   15822:	e6ff      	b.n	15624 <ticker_worker+0xe0>

00015824 <ticker_job>:
	if (instance->worker_trigger) {
   15824:	7fc3      	ldrb	r3, [r0, #31]
   15826:	2b00      	cmp	r3, #0
   15828:	f040 8431 	bne.w	1608e <ticker_job+0x86a>
{
   1582c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   15830:	7f82      	ldrb	r2, [r0, #30]
{
   15832:	b08d      	sub	sp, #52	; 0x34
   15834:	4683      	mov	fp, r0
	if (instance->job_guard) {
   15836:	2a00      	cmp	r2, #0
   15838:	f040 808c 	bne.w	15954 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1583c:	7a83      	ldrb	r3, [r0, #10]
   1583e:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   15840:	2001      	movs	r0, #1
   15842:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15846:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   15848:	f8db 0014 	ldr.w	r0, [fp, #20]
   1584c:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1584e:	f000 8440 	beq.w	160d2 <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
   15852:	3301      	adds	r3, #1
   15854:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   15856:	2b02      	cmp	r3, #2
		idx = 0U;
   15858:	bf08      	it	eq
   1585a:	4613      	moveq	r3, r2
		ticks_elapsed =
   1585c:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   15860:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   15864:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   15868:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   1586a:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   1586c:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   1586e:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   15870:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   15872:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   15876:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1587a:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   1587e:	f8db 3000 	ldr.w	r3, [fp]
   15882:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   15884:	f8db 3004 	ldr.w	r3, [fp, #4]
   15888:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   1588a:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   1588c:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   1588e:	b2db      	uxtb	r3, r3
   15890:	2a00      	cmp	r2, #0
   15892:	f000 81d5 	beq.w	15c40 <ticker_job+0x41c>
		flag_elapsed = 1U;
   15896:	2201      	movs	r2, #1
   15898:	920b      	str	r2, [sp, #44]	; 0x2c
   1589a:	9a05      	ldr	r2, [sp, #20]
   1589c:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   158a0:	2300      	movs	r3, #0
   158a2:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   158a4:	23ff      	movs	r3, #255	; 0xff
   158a6:	9301      	str	r3, [sp, #4]
   158a8:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   158aa:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   158ae:	f89a c003 	ldrb.w	ip, [sl, #3]
   158b2:	f89a 7002 	ldrb.w	r7, [sl, #2]
   158b6:	4567      	cmp	r7, ip
   158b8:	d044      	beq.n	15944 <ticker_job+0x120>
			if (middle == user->count_user_op) {
   158ba:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   158be:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   158c0:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   158c2:	b2db      	uxtb	r3, r3
				middle = 0U;
   158c4:	429a      	cmp	r2, r3
   158c6:	bf08      	it	eq
   158c8:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   158ca:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   158ce:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   158d2:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   158d6:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   158da:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   158dc:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   158e0:	d942      	bls.n	15968 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   158e2:	2808      	cmp	r0, #8
   158e4:	d842      	bhi.n	1596c <ticker_job+0x148>
			ticker = &node[user_op->id];
   158e6:	7861      	ldrb	r1, [r4, #1]
   158e8:	9a00      	ldr	r2, [sp, #0]
   158ea:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   158ee:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   158f2:	786a      	ldrb	r2, [r5, #1]
   158f4:	f895 e002 	ldrb.w	lr, [r5, #2]
   158f8:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   158fc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   15900:	d034      	beq.n	1596c <ticker_job+0x148>
			    (state == 0U) ||
   15902:	2805      	cmp	r0, #5
   15904:	d041      	beq.n	1598a <ticker_job+0x166>
			if (state == 1U) {
   15906:	2a01      	cmp	r2, #1
   15908:	f040 8118 	bne.w	15b3c <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   1590c:	2806      	cmp	r0, #6
   1590e:	d006      	beq.n	1591e <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   15910:	4658      	mov	r0, fp
   15912:	f7ff fcb5 	bl	15280 <ticker_dequeue>
			ticker->req = ticker->ack;
   15916:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   15918:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   1591a:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1591c:	7861      	ldrb	r1, [r4, #1]
   1591e:	f89b 301c 	ldrb.w	r3, [fp, #28]
   15922:	428b      	cmp	r3, r1
   15924:	f000 80d9 	beq.w	15ada <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   15928:	2000      	movs	r0, #0
   1592a:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   1592e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   15930:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   15932:	b10b      	cbz	r3, 15938 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   15934:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15936:	4798      	blx	r3
		while (user->middle != user->last) {
   15938:	f89a c003 	ldrb.w	ip, [sl, #3]
   1593c:	f89a 7002 	ldrb.w	r7, [sl, #2]
   15940:	4567      	cmp	r7, ip
   15942:	d1ba      	bne.n	158ba <ticker_job+0x96>
	while (count_user--) {
   15944:	9a05      	ldr	r2, [sp, #20]
   15946:	4552      	cmp	r2, sl
   15948:	f1aa 0308 	sub.w	r3, sl, #8
   1594c:	f000 8107 	beq.w	15b5e <ticker_job+0x33a>
   15950:	469a      	mov	sl, r3
   15952:	e7aa      	b.n	158aa <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   15954:	6a44      	ldr	r4, [r0, #36]	; 0x24
   15956:	2104      	movs	r1, #4
   15958:	4603      	mov	r3, r0
   1595a:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1595c:	2004      	movs	r0, #4
   1595e:	46a4      	mov	ip, r4
}
   15960:	b00d      	add	sp, #52	; 0x34
   15962:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   15966:	4760      	bx	ip
   15968:	461f      	mov	r7, r3
   1596a:	e7a4      	b.n	158b6 <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1596c:	2200      	movs	r2, #0
   1596e:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   15972:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   15974:	2001      	movs	r0, #1
   15976:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   15978:	2a00      	cmp	r2, #0
   1597a:	d0f5      	beq.n	15968 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1597c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1597e:	4790      	blx	r2
		while (user->middle != user->last) {
   15980:	f89a c003 	ldrb.w	ip, [sl, #3]
   15984:	f89a 7002 	ldrb.w	r7, [sl, #2]
   15988:	e795      	b.n	158b6 <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   1598a:	6860      	ldr	r0, [r4, #4]
   1598c:	b948      	cbnz	r0, 159a2 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1598e:	68a0      	ldr	r0, [r4, #8]
   15990:	b938      	cbnz	r0, 159a2 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   15992:	68e0      	ldr	r0, [r4, #12]
   15994:	b928      	cbnz	r0, 159a2 <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   15996:	6920      	ldr	r0, [r4, #16]
   15998:	b918      	cbnz	r0, 159a2 <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   1599a:	6960      	ldr	r0, [r4, #20]
   1599c:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   159a0:	d0e4      	beq.n	1596c <ticker_job+0x148>
			if (state == 1U) {
   159a2:	2a01      	cmp	r2, #1
   159a4:	f040 80ca 	bne.w	15b3c <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   159a8:	4658      	mov	r0, fp
   159aa:	f7ff fc69 	bl	15280 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   159ae:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   159b2:	60a8      	str	r0, [r5, #8]
   159b4:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   159b6:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   159b8:	f00a f97a 	bl	1fcb0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   159bc:	9b02      	ldr	r3, [sp, #8]
   159be:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   159c0:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   159c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   159c6:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   159c8:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   159ca:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   159cc:	f240 80af 	bls.w	15b2e <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   159d0:	696b      	ldr	r3, [r5, #20]
   159d2:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   159d4:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   159d6:	f8d5 c004 	ldr.w	ip, [r5, #4]
   159da:	f1bc 0f00 	cmp.w	ip, #0
   159de:	d051      	beq.n	15a84 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   159e0:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   159e2:	2b00      	cmp	r3, #0
   159e4:	d04e      	beq.n	15a84 <ticker_job+0x260>
		user_op->params.update.lazy--;
   159e6:	3b01      	subs	r3, #1
   159e8:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   159ea:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   159ec:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   159ee:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   159f0:	d223      	bcs.n	15a3a <ticker_job+0x216>
   159f2:	f10c 0e01 	add.w	lr, ip, #1
   159f6:	f8cd 8018 	str.w	r8, [sp, #24]
   159fa:	940a      	str	r4, [sp, #40]	; 0x28
   159fc:	e018      	b.n	15a30 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   159fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15a00:	f8df 8228 	ldr.w	r8, [pc, #552]	; 15c2c <ticker_job+0x408>
   15a04:	4c8a      	ldr	r4, [pc, #552]	; (15c30 <ticker_job+0x40c>)
   15a06:	4488      	add	r8, r1
   15a08:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   15a0a:	bf84      	itt	hi
   15a0c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   15a10:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   15a14:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   15a16:	6a2c      	ldr	r4, [r5, #32]
   15a18:	bf94      	ite	ls
   15a1a:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   15a1c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   15a20:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   15a22:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   15a24:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   15a26:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15a28:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   15a2a:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   15a2c:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15a2e:	d201      	bcs.n	15a34 <ticker_job+0x210>
   15a30:	429f      	cmp	r7, r3
   15a32:	d3e4      	bcc.n	159fe <ticker_job+0x1da>
   15a34:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15a38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15a3a:	42bb      	cmp	r3, r7
   15a3c:	d221      	bcs.n	15a82 <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   15a3e:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   15a42:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   15a46:	9006      	str	r0, [sp, #24]
   15a48:	940a      	str	r4, [sp, #40]	; 0x28
   15a4a:	e005      	b.n	15a58 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15a4c:	3301      	adds	r3, #1
   15a4e:	b29b      	uxth	r3, r3
   15a50:	4660      	mov	r0, ip
   15a52:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   15a54:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15a56:	d011      	beq.n	15a7c <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   15a58:	4874      	ldr	r0, [pc, #464]	; (15c2c <ticker_job+0x408>)
   15a5a:	4c75      	ldr	r4, [pc, #468]	; (15c30 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   15a5c:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   15a5e:	1808      	adds	r0, r1, r0
   15a60:	42a0      	cmp	r0, r4
   15a62:	d8f3      	bhi.n	15a4c <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15a64:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   15a66:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15a68:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15a6c:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15a6e:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15a72:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15a74:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   15a78:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15a7a:	d1ed      	bne.n	15a58 <ticker_job+0x234>
   15a7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   15a7e:	6269      	str	r1, [r5, #36]	; 0x24
   15a80:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   15a82:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   15a84:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   15a86:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   15a88:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   15a8a:	440a      	add	r2, r1
   15a8c:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   15a8e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   15a90:	4403      	add	r3, r0
   15a92:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   15a94:	b11a      	cbz	r2, 15a9e <ticker_job+0x27a>
   15a96:	6813      	ldr	r3, [r2, #0]
   15a98:	b10b      	cbz	r3, 15a9e <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   15a9a:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   15a9c:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   15a9e:	464a      	mov	r2, r9
   15aa0:	9902      	ldr	r1, [sp, #8]
   15aa2:	4628      	mov	r0, r5
   15aa4:	f7ff fc26 	bl	152f4 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   15aa8:	68e2      	ldr	r2, [r4, #12]
   15aaa:	69ab      	ldr	r3, [r5, #24]
   15aac:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   15aae:	6922      	ldr	r2, [r4, #16]
   15ab0:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   15ab2:	bf8c      	ite	hi
   15ab4:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   15ab6:	2300      	movls	r3, #0
   15ab8:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   15aba:	7da3      	ldrb	r3, [r4, #22]
   15abc:	b103      	cbz	r3, 15ac0 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   15abe:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   15ac0:	7de3      	ldrb	r3, [r4, #23]
   15ac2:	b113      	cbz	r3, 15aca <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   15ac4:	3b01      	subs	r3, #1
   15ac6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   15aca:	9b01      	ldr	r3, [sp, #4]
   15acc:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   15ace:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   15ad0:	7862      	ldrb	r2, [r4, #1]
   15ad2:	9201      	str	r2, [sp, #4]
		ticker->req++;
   15ad4:	3301      	adds	r3, #1
   15ad6:	706b      	strb	r3, [r5, #1]
   15ad8:	e726      	b.n	15928 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   15ada:	23ff      	movs	r3, #255	; 0xff
   15adc:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   15ae0:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   15ae4:	2b06      	cmp	r3, #6
   15ae6:	d013      	beq.n	15b10 <ticker_job+0x2ec>
   15ae8:	2b08      	cmp	r3, #8
   15aea:	d011      	beq.n	15b10 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   15aec:	f00a f8e0 	bl	1fcb0 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   15af0:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   15af4:	1a83      	subs	r3, r0, r2
   15af6:	021d      	lsls	r5, r3, #8
   15af8:	d410      	bmi.n	15b1c <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   15afa:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   15b00:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   15b02:	f8db 2018 	ldr.w	r2, [fp, #24]
   15b06:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   15b08:	bf88      	it	hi
   15b0a:	f8cb 3018 	strhi.w	r3, [fp, #24]
   15b0e:	e70b      	b.n	15928 <ticker_job+0x104>
				ticks_at_yield =
   15b10:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   15b12:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   15b16:	1a83      	subs	r3, r0, r2
   15b18:	021d      	lsls	r5, r3, #8
   15b1a:	d5ee      	bpl.n	15afa <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15b1c:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   15b1e:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   15b24:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   15b26:	bf34      	ite	cc
   15b28:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   15b2a:	2300      	movcs	r3, #0
   15b2c:	e7e9      	b.n	15b02 <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   15b2e:	696b      	ldr	r3, [r5, #20]
   15b30:	1bda      	subs	r2, r3, r7
   15b32:	1853      	adds	r3, r2, r1
   15b34:	9304      	str	r3, [sp, #16]
   15b36:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   15b38:	2200      	movs	r2, #0
   15b3a:	e74c      	b.n	159d6 <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   15b3c:	2104      	movs	r1, #4
   15b3e:	465b      	mov	r3, fp
   15b40:	2201      	movs	r2, #1
   15b42:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   15b46:	4608      	mov	r0, r1
   15b48:	47a0      	blx	r4
	while (count_user--) {
   15b4a:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   15b4c:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   15b50:	2301      	movs	r3, #1
	while (count_user--) {
   15b52:	4552      	cmp	r2, sl
				pending = 1U;
   15b54:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   15b56:	f1aa 0308 	sub.w	r3, sl, #8
   15b5a:	f47f aef9 	bne.w	15950 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   15b5e:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   15b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15b64:	1a9b      	subs	r3, r3, r2
   15b66:	bf18      	it	ne
   15b68:	2301      	movne	r3, #1
   15b6a:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   15b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b6e:	2b00      	cmp	r3, #0
   15b70:	d16a      	bne.n	15c48 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   15b72:	9901      	ldr	r1, [sp, #4]
   15b74:	4658      	mov	r0, fp
   15b76:	f7ff fbe1 	bl	1533c <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   15b7a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   15b7e:	9300      	str	r3, [sp, #0]
   15b80:	9b00      	ldr	r3, [sp, #0]
   15b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15b84:	4293      	cmp	r3, r2
   15b86:	f000 826c 	beq.w	16062 <ticker_job+0x83e>
	if (!pending) {
   15b8a:	9b08      	ldr	r3, [sp, #32]
   15b8c:	2b00      	cmp	r3, #0
   15b8e:	f000 81e6 	beq.w	15f5e <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   15b92:	f89b 301d 	ldrb.w	r3, [fp, #29]
   15b96:	9300      	str	r3, [sp, #0]
   15b98:	9b00      	ldr	r3, [sp, #0]
   15b9a:	2bff      	cmp	r3, #255	; 0xff
   15b9c:	f000 82c4 	beq.w	16128 <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
   15ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15ba2:	2bff      	cmp	r3, #255	; 0xff
   15ba4:	f000 82cb 	beq.w	1613e <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
   15ba8:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   15baa:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   15bae:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15c34 <ticker_job+0x410>
   15bb2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 15c38 <ticker_job+0x414>
   15bb6:	4f21      	ldr	r7, [pc, #132]	; (15c3c <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   15bb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   15bbc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   15bc0:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   15bc2:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   15bc4:	f00a f874 	bl	1fcb0 <cntr_cnt_get>
		cc = instance->ticks_current;
   15bc8:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15bcc:	1b03      	subs	r3, r0, r4
   15bce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   15bd2:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   15bd4:	42b3      	cmp	r3, r6
   15bd6:	bf2c      	ite	cs
   15bd8:	18e4      	addcs	r4, r4, r3
   15bda:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   15bdc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   15be0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   15be4:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   15be6:	4620      	mov	r0, r4
   15be8:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   15bea:	f00a f861 	bl	1fcb0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15bee:	eba0 030a 	sub.w	r3, r0, sl
   15bf2:	eba4 040a 	sub.w	r4, r4, sl
   15bf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   15bfa:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15bfc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   15c00:	42a3      	cmp	r3, r4
		i--;
   15c02:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   15c06:	f240 8233 	bls.w	16070 <ticker_job+0x84c>
		LL_ASSERT(i);
   15c0a:	2d00      	cmp	r5, #0
   15c0c:	d1da      	bne.n	15bc4 <ticker_job+0x3a0>
   15c0e:	f640 133e 	movw	r3, #2366	; 0x93e
   15c12:	464a      	mov	r2, r9
   15c14:	4641      	mov	r1, r8
   15c16:	4638      	mov	r0, r7
   15c18:	f010 fea0 	bl	2695c <printk>
   15c1c:	4040      	eors	r0, r0
   15c1e:	f380 8811 	msr	BASEPRI, r0
   15c22:	f04f 0003 	mov.w	r0, #3
   15c26:	df02      	svc	2
   15c28:	e7cc      	b.n	15bc4 <ticker_job+0x3a0>
   15c2a:	bf00      	nop
   15c2c:	ff172b5a 	.word	0xff172b5a
   15c30:	7f172b59 	.word	0x7f172b59
   15c34:	0002f6bc 	.word	0x0002f6bc
   15c38:	0002f7c0 	.word	0x0002f7c0
   15c3c:	0002f6fc 	.word	0x0002f6fc
	pending = 0U;
   15c40:	9b06      	ldr	r3, [sp, #24]
   15c42:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   15c44:	23ff      	movs	r3, #255	; 0xff
   15c46:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   15c48:	f00a f832 	bl	1fcb0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15c4c:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   15c4e:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15c52:	1ac3      	subs	r3, r0, r3
   15c54:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   15c58:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   15c5a:	f8db 3000 	ldr.w	r3, [fp]
   15c5e:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   15c60:	d050      	beq.n	15d04 <ticker_job+0x4e0>
	ticks_expired = 0U;
   15c62:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   15c64:	f8df 8290 	ldr.w	r8, [pc, #656]	; 15ef8 <ticker_job+0x6d4>
   15c68:	f8df 9290 	ldr.w	r9, [pc, #656]	; 15efc <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   15c6c:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   15c6e:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   15c70:	9a00      	ldr	r2, [sp, #0]
   15c72:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15c76:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   15c7a:	011b      	lsls	r3, r3, #4
   15c7c:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   15c7e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   15c80:	429f      	cmp	r7, r3
   15c82:	f0c0 8243 	bcc.w	1610c <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
   15c86:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   15c88:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   15c8c:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
   15c90:	441a      	add	r2, r3
   15c92:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   15c94:	f8db 2018 	ldr.w	r2, [fp, #24]
   15c98:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   15c9a:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   15c9e:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   15ca2:	bf25      	ittet	cs
   15ca4:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   15ca8:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   15cac:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   15cae:	2300      	movcs	r3, #0
   15cb0:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   15cb4:	78a2      	ldrb	r2, [r4, #2]
   15cb6:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   15cb8:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   15cba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   15cbc:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   15cbe:	1a9b      	subs	r3, r3, r2
   15cc0:	b2db      	uxtb	r3, r3
   15cc2:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   15cc4:	9b00      	ldr	r3, [sp, #0]
   15cc6:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   15cca:	b118      	cbz	r0, 15cd4 <ticker_job+0x4b0>
   15ccc:	9b05      	ldr	r3, [sp, #20]
   15cce:	2b02      	cmp	r3, #2
   15cd0:	f000 8135 	beq.w	15f3e <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
   15cd4:	2300      	movs	r3, #0
   15cd6:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   15cd8:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   15cdc:	2d00      	cmp	r5, #0
   15cde:	f040 80da 	bne.w	15e96 <ticker_job+0x672>
   15ce2:	b119      	cbz	r1, 15cec <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   15ce4:	7a09      	ldrb	r1, [r1, #8]
   15ce6:	2901      	cmp	r1, #1
   15ce8:	f000 8111 	beq.w	15f0e <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
   15cec:	9b05      	ldr	r3, [sp, #20]
   15cee:	b123      	cbz	r3, 15cfa <ticker_job+0x4d6>
   15cf0:	2b01      	cmp	r3, #1
   15cf2:	d045      	beq.n	15d80 <ticker_job+0x55c>
   15cf4:	f1be 0f00 	cmp.w	lr, #0
   15cf8:	d142      	bne.n	15d80 <ticker_job+0x55c>
			ticker->req = ticker->ack;
   15cfa:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   15cfc:	f89b 601d 	ldrb.w	r6, [fp, #29]
   15d00:	2eff      	cmp	r6, #255	; 0xff
   15d02:	d1b5      	bne.n	15c70 <ticker_job+0x44c>
			flag_compare_update = 1U;
   15d04:	9b06      	ldr	r3, [sp, #24]
   15d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   15d08:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   15d0a:	4296      	cmp	r6, r2
   15d0c:	bf18      	it	ne
   15d0e:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   15d10:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   15d12:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   15d14:	f7ff fb12 	bl	1533c <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   15d18:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   15d1c:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   15d20:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   15d24:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   15d26:	9b00      	ldr	r3, [sp, #0]
   15d28:	2bff      	cmp	r3, #255	; 0xff
   15d2a:	d00f      	beq.n	15d4c <ticker_job+0x528>
   15d2c:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   15d2e:	b233      	sxth	r3, r6
   15d30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15d34:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   15d38:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   15d3a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   15d3c:	b117      	cbz	r7, 15d44 <ticker_job+0x520>
   15d3e:	7a39      	ldrb	r1, [r7, #8]
   15d40:	2901      	cmp	r1, #1
   15d42:	d025      	beq.n	15d90 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
   15d44:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   15d48:	2eff      	cmp	r6, #255	; 0xff
   15d4a:	d1f0      	bne.n	15d2e <ticker_job+0x50a>
	return rescheduled;
   15d4c:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   15d50:	2a00      	cmp	r2, #0
   15d52:	f43f af15 	beq.w	15b80 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   15d56:	9b00      	ldr	r3, [sp, #0]
   15d58:	9909      	ldr	r1, [sp, #36]	; 0x24
   15d5a:	428b      	cmp	r3, r1
   15d5c:	f47f af15 	bne.w	15b8a <ticker_job+0x366>
	if (!pending) {
   15d60:	9b08      	ldr	r3, [sp, #32]
   15d62:	2b00      	cmp	r3, #0
   15d64:	f47f af18 	bne.w	15b98 <ticker_job+0x374>
	users = &instance->users[0];
   15d68:	f8db 3004 	ldr.w	r3, [fp, #4]
   15d6c:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   15d6e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   15d72:	1e5f      	subs	r7, r3, #1
   15d74:	b2ff      	uxtb	r7, r7
   15d76:	2b00      	cmp	r3, #0
   15d78:	f43f af0e 	beq.w	15b98 <ticker_job+0x374>
			flag_compare_update = 1U;
   15d7c:	9206      	str	r2, [sp, #24]
   15d7e:	e0fa      	b.n	15f76 <ticker_job+0x752>
			    ticker->fp_op_func) {
   15d80:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   15d82:	2b00      	cmp	r3, #0
   15d84:	d0b9      	beq.n	15cfa <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   15d86:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15d88:	2001      	movs	r0, #1
   15d8a:	4798      	blx	r3
			ticker->req = ticker->ack;
   15d8c:	78a2      	ldrb	r2, [r4, #2]
   15d8e:	e7b4      	b.n	15cfa <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   15d90:	9b01      	ldr	r3, [sp, #4]
   15d92:	7f1b      	ldrb	r3, [r3, #28]
   15d94:	2bff      	cmp	r3, #255	; 0xff
   15d96:	d04b      	beq.n	15e30 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
   15d98:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   15d9a:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   15d9c:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   15d9e:	4293      	cmp	r3, r2
   15da0:	d946      	bls.n	15e30 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
   15da2:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   15da6:	687a      	ldr	r2, [r7, #4]
   15da8:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   15daa:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   15dae:	1ad3      	subs	r3, r2, r3
   15db0:	9302      	str	r3, [sp, #8]
   15db2:	683b      	ldr	r3, [r7, #0]
   15db4:	429a      	cmp	r2, r3
   15db6:	f080 80bd 	bcs.w	15f34 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   15dba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   15dbe:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   15dc2:	f000 80b7 	beq.w	15f34 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   15dc6:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   15dca:	45f0      	cmp	r8, lr
   15dcc:	f04f 0300 	mov.w	r3, #0
   15dd0:	d331      	bcc.n	15e36 <ticker_job+0x612>
   15dd2:	46f1      	mov	r9, lr
   15dd4:	465a      	mov	r2, fp
   15dd6:	461c      	mov	r4, r3
   15dd8:	e01c      	b.n	15e14 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
   15dda:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   15ddc:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   15dde:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   15de0:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   15de2:	d909      	bls.n	15df8 <ticker_job+0x5d4>
				window_end_ticks =
   15de4:	4543      	cmp	r3, r8
   15de6:	bf28      	it	cs
   15de8:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   15dea:	4599      	cmp	r9, r3
   15dec:	d204      	bcs.n	15df8 <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
   15dee:	ebb3 030e 	subs.w	r3, r3, lr
   15df2:	d001      	beq.n	15df8 <ticker_job+0x5d4>
   15df4:	459c      	cmp	ip, r3
   15df6:	d91e      	bls.n	15e36 <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
   15df8:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   15dfa:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   15dfe:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   15e02:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   15e04:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   15e08:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   15e0a:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   15e0e:	d012      	beq.n	15e36 <ticker_job+0x612>
   15e10:	45c8      	cmp	r8, r9
   15e12:	d310      	bcc.n	15e36 <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
   15e14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   15e18:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   15e1c:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   15e1e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   15e20:	2900      	cmp	r1, #0
   15e22:	d0da      	beq.n	15dda <ticker_job+0x5b6>
   15e24:	7a09      	ldrb	r1, [r1, #8]
   15e26:	2901      	cmp	r1, #1
   15e28:	d1d7      	bne.n	15dda <ticker_job+0x5b6>
				ticker_id_iter = node->next;
   15e2a:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   15e2e:	e7eb      	b.n	15e08 <ticker_job+0x5e4>
		window_start_ticks = 0U;
   15e30:	f04f 0c00 	mov.w	ip, #0
   15e34:	e7b7      	b.n	15da6 <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   15e36:	9a02      	ldr	r2, [sp, #8]
   15e38:	441a      	add	r2, r3
   15e3a:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   15e3c:	465c      	mov	r4, fp
   15e3e:	60ab      	str	r3, [r5, #8]
   15e40:	f04f 0eff 	mov.w	lr, #255	; 0xff
   15e44:	e000      	b.n	15e48 <ticker_job+0x624>
   15e46:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   15e48:	b221      	sxth	r1, r4
   15e4a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   15e4e:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   15e52:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   15e54:	f8dc 0008 	ldr.w	r0, [ip, #8]
   15e58:	4298      	cmp	r0, r3
   15e5a:	f080 814d 	bcs.w	160f8 <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
   15e5e:	1a1b      	subs	r3, r3, r0
   15e60:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   15e62:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   15e66:	2aff      	cmp	r2, #255	; 0xff
   15e68:	46a6      	mov	lr, r4
   15e6a:	d1ec      	bne.n	15e46 <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   15e6c:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   15e6e:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   15e72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   15e76:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   15e78:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   15e7c:	f81a 3001 	ldrb.w	r3, [sl, r1]
   15e80:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   15e82:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   15e86:	8beb      	ldrh	r3, [r5, #30]
   15e88:	3b01      	subs	r3, #1
   15e8a:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   15e8c:	f04f 0302 	mov.w	r3, #2
   15e90:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   15e92:	2201      	movs	r2, #1
   15e94:	e747      	b.n	15d26 <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   15e96:	b111      	cbz	r1, 15e9e <ticker_job+0x67a>
   15e98:	7a0b      	ldrb	r3, [r1, #8]
   15e9a:	2b01      	cmp	r3, #1
   15e9c:	d037      	beq.n	15f0e <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
   15e9e:	f1be 0f00 	cmp.w	lr, #0
   15ea2:	d159      	bne.n	15f58 <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   15ea4:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   15ea8:	4672      	mov	r2, lr
				while (count--) {
   15eaa:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   15eac:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   15eb0:	2100      	movs	r1, #0
   15eb2:	9005      	str	r0, [sp, #20]
   15eb4:	e004      	b.n	15ec0 <ticker_job+0x69c>
   15eb6:	4628      	mov	r0, r5
				while (count--) {
   15eb8:	3a01      	subs	r2, #1
					ticks_to_expire +=
   15eba:	4401      	add	r1, r0
				while (count--) {
   15ebc:	1c50      	adds	r0, r2, #1
   15ebe:	d00f      	beq.n	15ee0 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
   15ec0:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   15ec2:	eb03 0008 	add.w	r0, r3, r8
   15ec6:	4548      	cmp	r0, r9
   15ec8:	d8f5      	bhi.n	15eb6 <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15eca:	9805      	ldr	r0, [sp, #20]
   15ecc:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   15ed0:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15ed2:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   15ed6:	4401      	add	r1, r0
				while (count--) {
   15ed8:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15eda:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   15ede:	d1ef      	bne.n	15ec0 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
   15ee0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   15ee4:	6263      	str	r3, [r4, #36]	; 0x24
   15ee6:	2a00      	cmp	r2, #0
   15ee8:	f000 80d2 	beq.w	16090 <ticker_job+0x86c>
				lazy = 0U;
   15eec:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   15eee:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   15ef0:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   15ef2:	83e2      	strh	r2, [r4, #30]
   15ef4:	e00d      	b.n	15f12 <ticker_job+0x6ee>
   15ef6:	bf00      	nop
   15ef8:	ff172b5a 	.word	0xff172b5a
   15efc:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   15f00:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   15f04:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   15f08:	2d00      	cmp	r5, #0
   15f0a:	f43f aeeb 	beq.w	15ce4 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
   15f0e:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   15f10:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   15f12:	9b07      	ldr	r3, [sp, #28]
   15f14:	9a02      	ldr	r2, [sp, #8]
   15f16:	f8db 1014 	ldr.w	r1, [fp, #20]
   15f1a:	189a      	adds	r2, r3, r2
   15f1c:	4620      	mov	r0, r4
   15f1e:	f7ff f9e9 	bl	152f4 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   15f22:	9a00      	ldr	r2, [sp, #0]
   15f24:	9904      	ldr	r1, [sp, #16]
   15f26:	9b01      	ldr	r3, [sp, #4]
   15f28:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   15f2a:	7863      	ldrb	r3, [r4, #1]
   15f2c:	9601      	str	r6, [sp, #4]
   15f2e:	3301      	adds	r3, #1
   15f30:	7063      	strb	r3, [r4, #1]
   15f32:	e6e3      	b.n	15cfc <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   15f34:	9b02      	ldr	r3, [sp, #8]
   15f36:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   15f38:	2300      	movs	r3, #0
   15f3a:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   15f3c:	e7a3      	b.n	15e86 <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   15f3e:	f1be 0f00 	cmp.w	lr, #0
   15f42:	f47f aec7 	bne.w	15cd4 <ticker_job+0x4b0>
   15f46:	b111      	cbz	r1, 15f4e <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   15f48:	7a0b      	ldrb	r3, [r1, #8]
   15f4a:	2b01      	cmp	r3, #1
   15f4c:	d0d8      	beq.n	15f00 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
   15f4e:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   15f52:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   15f56:	e6bd      	b.n	15cd4 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
   15f58:	7062      	strb	r2, [r4, #1]
   15f5a:	2200      	movs	r2, #0
   15f5c:	e7a5      	b.n	15eaa <ticker_job+0x686>
	count_user = instance->count_user;
   15f5e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   15f62:	f8db 2004 	ldr.w	r2, [fp, #4]
   15f66:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   15f68:	1e5f      	subs	r7, r3, #1
   15f6a:	b2ff      	uxtb	r7, r7
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	f43f ae10 	beq.w	15b92 <ticker_job+0x36e>
		flag_compare_update = 1U;
   15f72:	2301      	movs	r3, #1
   15f74:	9306      	str	r3, [sp, #24]
   15f76:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   15f78:	2600      	movs	r6, #0
   15f7a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   15f7e:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   15f82:	787b      	ldrb	r3, [r7, #1]
   15f84:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   15f86:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
   15f88:	429a      	cmp	r2, r3
   15f8a:	d10c      	bne.n	15fa6 <ticker_job+0x782>
   15f8c:	e05b      	b.n	16046 <ticker_job+0x822>
	switch (uop->op) {
   15f8e:	2b01      	cmp	r3, #1
   15f90:	d053      	beq.n	1603a <ticker_job+0x816>
			first = user->first + 1;
   15f92:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   15f94:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   15f96:	3301      	adds	r3, #1
   15f98:	b2db      	uxtb	r3, r3
				first = 0U;
   15f9a:	4299      	cmp	r1, r3
   15f9c:	bf08      	it	eq
   15f9e:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   15fa0:	429a      	cmp	r2, r3
			user->first = first;
   15fa2:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   15fa4:	d04f      	beq.n	16046 <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   15fa6:	b21b      	sxth	r3, r3
   15fa8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15fac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15fb0:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
   15fb4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   15fb8:	2b02      	cmp	r3, #2
   15fba:	d017      	beq.n	15fec <ticker_job+0x7c8>
   15fbc:	2b03      	cmp	r3, #3
   15fbe:	d1e6      	bne.n	15f8e <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
   15fc0:	7843      	ldrb	r3, [r0, #1]
   15fc2:	f89b 2008 	ldrb.w	r2, [fp, #8]
   15fc6:	429a      	cmp	r2, r3
   15fc8:	d93a      	bls.n	16040 <ticker_job+0x81c>
			node[uop->id].priority =
   15fca:	f8db 2000 	ldr.w	r2, [fp]
   15fce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15fd2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   15fd6:	7902      	ldrb	r2, [r0, #4]
   15fd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   15fdc:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   15fde:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   15fe0:	b113      	cbz	r3, 15fe8 <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
   15fe2:	6b01      	ldr	r1, [r0, #48]	; 0x30
   15fe4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   15fe6:	4798      	blx	r3
   15fe8:	78fa      	ldrb	r2, [r7, #3]
   15fea:	e7d2      	b.n	15f92 <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
   15fec:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   15ff0:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   15ff4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   15ff8:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   15ffc:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   16000:	2aff      	cmp	r2, #255	; 0xff
   16002:	d003      	beq.n	1600c <ticker_job+0x7e8>
   16004:	f8d1 8000 	ldr.w	r8, [r1]
   16008:	4598      	cmp	r8, r3
   1600a:	d023      	beq.n	16054 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
   1600c:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   16010:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   16012:	f04f 0800 	mov.w	r8, #0
   16016:	e00a      	b.n	1602e <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
   16018:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1601c:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   16020:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   16022:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   16026:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   16028:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   1602a:	b911      	cbnz	r1, 16032 <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
   1602c:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   1602e:	2aff      	cmp	r2, #255	; 0xff
   16030:	d1f2      	bne.n	16018 <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
   16032:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   16036:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   1603a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   1603c:	6286      	str	r6, [r0, #40]	; 0x28
		break;
   1603e:	e7cf      	b.n	15fe0 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
   16040:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   16044:	e7cb      	b.n	15fde <ticker_job+0x7ba>
	while (count_user--) {
   16046:	9a01      	ldr	r2, [sp, #4]
   16048:	42ba      	cmp	r2, r7
   1604a:	f1a7 0308 	sub.w	r3, r7, #8
   1604e:	d00b      	beq.n	16068 <ticker_job+0x844>
   16050:	461f      	mov	r7, r3
   16052:	e796      	b.n	15f82 <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
   16054:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16058:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   1605a:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   1605e:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   16060:	e7e5      	b.n	1602e <ticker_job+0x80a>
	if (!pending) {
   16062:	9b08      	ldr	r3, [sp, #32]
   16064:	2b00      	cmp	r3, #0
   16066:	d054      	beq.n	16112 <ticker_job+0x8ee>
	if (flag_compare_update) {
   16068:	9b06      	ldr	r3, [sp, #24]
   1606a:	2b00      	cmp	r3, #0
   1606c:	f47f ad91 	bne.w	15b92 <ticker_job+0x36e>
	if (instance->worker_trigger) {
   16070:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   16074:	2200      	movs	r2, #0
   16076:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   1607a:	b12b      	cbz	r3, 16088 <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1607c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   16080:	465b      	mov	r3, fp
   16082:	2201      	movs	r2, #1
   16084:	2103      	movs	r1, #3
   16086:	e469      	b.n	1595c <ticker_job+0x138>
}
   16088:	b00d      	add	sp, #52	; 0x34
   1608a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1608e:	4770      	bx	lr
					while (ticks_to_expire <
   16090:	458a      	cmp	sl, r1
   16092:	f67f af2c 	bls.w	15eee <ticker_job+0x6ca>
   16096:	1c68      	adds	r0, r5, #1
   16098:	9405      	str	r4, [sp, #20]
   1609a:	4604      	mov	r4, r0
   1609c:	e005      	b.n	160aa <ticker_job+0x886>
   1609e:	4628      	mov	r0, r5
						ticks_to_expire +=
   160a0:	4401      	add	r1, r0
						lazy++;
   160a2:	3201      	adds	r2, #1
					while (ticks_to_expire <
   160a4:	458a      	cmp	sl, r1
						lazy++;
   160a6:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   160a8:	d910      	bls.n	160cc <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
   160aa:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   160ac:	eb03 0008 	add.w	r0, r3, r8
   160b0:	4548      	cmp	r0, r9
   160b2:	d8f4      	bhi.n	1609e <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   160b4:	4620      	mov	r0, r4
   160b6:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   160ba:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   160bc:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   160c0:	3201      	adds	r2, #1
					while (ticks_to_expire <
   160c2:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   160c4:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   160c8:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   160ca:	d8ee      	bhi.n	160aa <ticker_job+0x886>
   160cc:	9c05      	ldr	r4, [sp, #20]
   160ce:	6263      	str	r3, [r4, #36]	; 0x24
   160d0:	e70d      	b.n	15eee <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
   160d2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   160d6:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   160da:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   160dc:	f8db 3000 	ldr.w	r3, [fp]
   160e0:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   160e2:	f8db 3004 	ldr.w	r3, [fp, #4]
   160e6:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   160e8:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   160ea:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   160ec:	b2db      	uxtb	r3, r3
   160ee:	b3a1      	cbz	r1, 1615a <ticker_job+0x936>
		flag_elapsed = 0U;
   160f0:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   160f2:	9203      	str	r2, [sp, #12]
   160f4:	f7ff bbd1 	b.w	1589a <ticker_job+0x76>
				node->ticks_to_expire -=
   160f8:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   160fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   160fe:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   16102:	f43f aec0 	beq.w	15e86 <ticker_job+0x662>
   16106:	fa0f f18e 	sxth.w	r1, lr
   1610a:	e6af      	b.n	15e6c <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
   1610c:	1bdb      	subs	r3, r3, r7
   1610e:	60a3      	str	r3, [r4, #8]
			break;
   16110:	e5f8      	b.n	15d04 <ticker_job+0x4e0>
	count_user = instance->count_user;
   16112:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   16116:	f8db 2004 	ldr.w	r2, [fp, #4]
   1611a:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   1611c:	1e5f      	subs	r7, r3, #1
   1611e:	b2ff      	uxtb	r7, r7
   16120:	2b00      	cmp	r3, #0
   16122:	f47f af28 	bne.w	15f76 <ticker_job+0x752>
   16126:	e79f      	b.n	16068 <ticker_job+0x844>
		if (cntr_stop() == 0) {
   16128:	f009 fd9c 	bl	1fc64 <cntr_stop>
   1612c:	2800      	cmp	r0, #0
   1612e:	d19f      	bne.n	16070 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
   16130:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   16134:	f009 fdbc 	bl	1fcb0 <cntr_cnt_get>
   16138:	f8cb 0014 	str.w	r0, [fp, #20]
   1613c:	e798      	b.n	16070 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
   1613e:	f009 fdb7 	bl	1fcb0 <cntr_cnt_get>
   16142:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   16144:	f009 fd7e 	bl	1fc44 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   16148:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1614c:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   1614e:	2800      	cmp	r0, #0
   16150:	f47f ad2a 	bne.w	15ba8 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   16154:	f8cb 4014 	str.w	r4, [fp, #20]
   16158:	e526      	b.n	15ba8 <ticker_job+0x384>
	insert_head = TICKER_NULL;
   1615a:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   1615c:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   1615e:	9301      	str	r3, [sp, #4]
   16160:	e507      	b.n	15b72 <ticker_job+0x34e>
   16162:	bf00      	nop

00016164 <ticker_init>:
{
   16164:	b4f0      	push	{r4, r5, r6, r7}
   16166:	9d04      	ldr	r5, [sp, #16]
   16168:	f89d 7014 	ldrb.w	r7, [sp, #20]
   1616c:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   1616e:	2800      	cmp	r0, #0
   16170:	d137      	bne.n	161e2 <ticker_init+0x7e>
	instance->count_node = count_node;
   16172:	4e1d      	ldr	r6, [pc, #116]	; (161e8 <ticker_init+0x84>)
	while (count_node--) {
   16174:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   16178:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   1617a:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   1617c:	fa5f fc8c 	uxtb.w	ip, ip
   16180:	b149      	cbz	r1, 16196 <ticker_init+0x32>
   16182:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   16186:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   1618a:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   1618c:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   16190:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   16194:	d1f9      	bne.n	1618a <ticker_init+0x26>
	while (count_user--) {
   16196:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   16198:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   1619a:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   1619c:	b2d2      	uxtb	r2, r2
   1619e:	b183      	cbz	r3, 161c2 <ticker_init+0x5e>
   161a0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   161a4:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   161a6:	4610      	mov	r0, r2
   161a8:	f812 3908 	ldrb.w	r3, [r2], #-8
   161ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   161b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   161b4:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   161b6:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   161ba:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   161be:	b2df      	uxtb	r7, r3
	while (count_user--) {
   161c0:	d1f0      	bne.n	161a4 <ticker_init+0x40>
	if (count_op) {
   161c2:	b977      	cbnz	r7, 161e2 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   161c4:	9a07      	ldr	r2, [sp, #28]
   161c6:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   161c8:	9a08      	ldr	r2, [sp, #32]
   161ca:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   161cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   161d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   161d2:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   161d4:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   161d6:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   161da:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   161dc:	8177      	strh	r7, [r6, #10]
}
   161de:	bcf0      	pop	{r4, r5, r6, r7}
   161e0:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   161e2:	2001      	movs	r0, #1
}
   161e4:	bcf0      	pop	{r4, r5, r6, r7}
   161e6:	4770      	bx	lr
   161e8:	20003010 	.word	0x20003010

000161ec <ticker_trigger>:
	if (instance->sched_cb) {
   161ec:	4b0a      	ldr	r3, [pc, #40]	; (16218 <ticker_trigger+0x2c>)
   161ee:	222c      	movs	r2, #44	; 0x2c
   161f0:	fb02 3200 	mla	r2, r2, r0, r3
{
   161f4:	b410      	push	{r4}
	if (instance->sched_cb) {
   161f6:	6a54      	ldr	r4, [r2, #36]	; 0x24
   161f8:	b15c      	cbz	r4, 16212 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   161fa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   161fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   16202:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16206:	46a4      	mov	ip, r4
   16208:	2201      	movs	r2, #1
}
   1620a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1620c:	2103      	movs	r1, #3
   1620e:	2002      	movs	r0, #2
   16210:	4760      	bx	ip
}
   16212:	bc10      	pop	{r4}
   16214:	4770      	bx	lr
   16216:	bf00      	nop
   16218:	20003010 	.word	0x20003010

0001621c <ticker_start_ext>:
{
   1621c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16220:	4e28      	ldr	r6, [pc, #160]	; (162c4 <ticker_start_ext+0xa8>)
{
   16222:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   16226:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   16228:	252c      	movs	r5, #44	; 0x2c
   1622a:	fb05 6504 	mla	r5, r5, r4, r6
{
   1622e:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   16230:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   16234:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   16238:	6869      	ldr	r1, [r5, #4]
   1623a:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   1623e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   16242:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   16246:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   1624a:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   1624c:	f10e 0c01 	add.w	ip, lr, #1
   16250:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   16254:	4564      	cmp	r4, ip
   16256:	bf98      	it	ls
   16258:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   1625c:	4561      	cmp	r1, ip
   1625e:	d02e      	beq.n	162be <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   16260:	6879      	ldr	r1, [r7, #4]
   16262:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   16266:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1626a:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   1626e:	f04f 0904 	mov.w	r9, #4
   16272:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   16276:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   16278:	9b08      	ldr	r3, [sp, #32]
   1627a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   1627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1627e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   16280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16282:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   16284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16286:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   16288:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1628a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   1628c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1628e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   16290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16292:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   16294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16296:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   16298:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1629a:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1629c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1629e:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   162a0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   162a2:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   162a6:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   162aa:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   162ae:	4798      	blx	r3
   162b0:	4633      	mov	r3, r6
   162b2:	4649      	mov	r1, r9
   162b4:	2200      	movs	r2, #0
   162b6:	47a8      	blx	r5
	return user_op->status;
   162b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   162ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   162be:	2001      	movs	r0, #1
}
   162c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   162c4:	20003010 	.word	0x20003010

000162c8 <ticker_start>:
{
   162c8:	b510      	push	{r4, lr}
   162ca:	b08a      	sub	sp, #40	; 0x28
   162cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162ce:	9400      	str	r4, [sp, #0]
{
   162d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162d2:	9401      	str	r4, [sp, #4]
{
   162d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162d6:	9402      	str	r4, [sp, #8]
{
   162d8:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162dc:	9403      	str	r4, [sp, #12]
{
   162de:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162e0:	9404      	str	r4, [sp, #16]
{
   162e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162e4:	9405      	str	r4, [sp, #20]
{
   162e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162e8:	9406      	str	r4, [sp, #24]
{
   162ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162ec:	9407      	str	r4, [sp, #28]
{
   162ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   162f0:	9408      	str	r4, [sp, #32]
   162f2:	2400      	movs	r4, #0
   162f4:	9409      	str	r4, [sp, #36]	; 0x24
   162f6:	f7ff ff91 	bl	1621c <ticker_start_ext>
}
   162fa:	b00a      	add	sp, #40	; 0x28
   162fc:	bd10      	pop	{r4, pc}
   162fe:	bf00      	nop

00016300 <ticker_update_ext>:
{
   16300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16304:	4d28      	ldr	r5, [pc, #160]	; (163a8 <ticker_update_ext+0xa8>)
{
   16306:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   1630a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   1630e:	4604      	mov	r4, r0
   16310:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   16312:	212c      	movs	r1, #44	; 0x2c
   16314:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   16318:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1631c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   16320:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   16324:	684c      	ldr	r4, [r1, #4]
   16326:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1632a:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   1632e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   16332:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   16334:	f10e 0c01 	add.w	ip, lr, #1
   16338:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   1633c:	45e1      	cmp	r9, ip
   1633e:	bf98      	it	ls
   16340:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   16344:	4564      	cmp	r4, ip
{
   16346:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   1634a:	d02a      	beq.n	163a2 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   1634c:	f8d6 a004 	ldr.w	sl, [r6, #4]
   16350:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   16354:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   16358:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   1635c:	f04f 0b05 	mov.w	fp, #5
   16360:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   16364:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   16366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16368:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1636a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1636c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   1636e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16370:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   16372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16374:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   16376:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16378:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1637a:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1637c:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1637e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   16380:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   16382:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   16386:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   1638a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1638e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   16392:	4798      	blx	r3
   16394:	462b      	mov	r3, r5
   16396:	2200      	movs	r2, #0
   16398:	2104      	movs	r1, #4
   1639a:	47b0      	blx	r6
	return user_op->status;
   1639c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1639e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   163a2:	2001      	movs	r0, #1
}
   163a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a8:	20003010 	.word	0x20003010

000163ac <ticker_update>:
{
   163ac:	b510      	push	{r4, lr}
   163ae:	b088      	sub	sp, #32
   163b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   163b2:	9400      	str	r4, [sp, #0]
{
   163b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   163b6:	9401      	str	r4, [sp, #4]
{
   163b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   163ba:	9402      	str	r4, [sp, #8]
{
   163bc:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   163c0:	9403      	str	r4, [sp, #12]
{
   163c2:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   163c6:	9404      	str	r4, [sp, #16]
{
   163c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   163ca:	9405      	str	r4, [sp, #20]
{
   163cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   163ce:	9406      	str	r4, [sp, #24]
   163d0:	2400      	movs	r4, #0
   163d2:	9407      	str	r4, [sp, #28]
   163d4:	f7ff ff94 	bl	16300 <ticker_update_ext>
}
   163d8:	b008      	add	sp, #32
   163da:	bd10      	pop	{r4, pc}

000163dc <ticker_stop>:
{
   163dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   163e0:	4c1e      	ldr	r4, [pc, #120]	; (1645c <ticker_stop+0x80>)
{
   163e2:	4684      	mov	ip, r0
   163e4:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   163e6:	212c      	movs	r1, #44	; 0x2c
   163e8:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   163ec:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   163f0:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   163f4:	684d      	ldr	r5, [r1, #4]
   163f6:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   163fa:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   163fe:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   16402:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   16404:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   16408:	f10e 0c01 	add.w	ip, lr, #1
   1640c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   16410:	4567      	cmp	r7, ip
   16412:	bf98      	it	ls
   16414:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   16418:	4565      	cmp	r5, ip
   1641a:	d01c      	beq.n	16456 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   1641c:	6877      	ldr	r7, [r6, #4]
   1641e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   16422:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   16426:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1642a:	f04f 0807 	mov.w	r8, #7
   1642e:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   16432:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   16434:	9b06      	ldr	r3, [sp, #24]
   16436:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   16438:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1643a:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1643c:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   1643e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16442:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   16446:	4798      	blx	r3
   16448:	4623      	mov	r3, r4
   1644a:	2200      	movs	r2, #0
   1644c:	2104      	movs	r1, #4
   1644e:	47b0      	blx	r6
	return user_op->status;
   16450:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   16452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   16456:	2001      	movs	r0, #1
}
   16458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1645c:	20003010 	.word	0x20003010

00016460 <ticker_next_slot_get>:
{
   16460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16464:	4d20      	ldr	r5, [pc, #128]	; (164e8 <ticker_next_slot_get+0x88>)
{
   16466:	4684      	mov	ip, r0
   16468:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1646a:	212c      	movs	r1, #44	; 0x2c
   1646c:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   16470:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   16474:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   16478:	684c      	ldr	r4, [r1, #4]
   1647a:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1647e:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   16482:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   16486:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   16488:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   1648c:	f10e 0c01 	add.w	ip, lr, #1
   16490:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   16494:	4567      	cmp	r7, ip
   16496:	bf98      	it	ls
   16498:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   1649c:	4564      	cmp	r4, ip
   1649e:	d020      	beq.n	164e2 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   164a0:	6877      	ldr	r7, [r6, #4]
   164a2:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   164a6:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   164aa:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   164ae:	f64f 7802 	movw	r8, #65282	; 0xff02
   164b2:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   164b6:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   164ba:	9b06      	ldr	r3, [sp, #24]
   164bc:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   164be:	9b07      	ldr	r3, [sp, #28]
   164c0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   164c2:	9b08      	ldr	r3, [sp, #32]
   164c4:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   164c6:	2302      	movs	r3, #2
   164c8:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   164ca:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   164ce:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   164d2:	4798      	blx	r3
   164d4:	462b      	mov	r3, r5
   164d6:	2200      	movs	r2, #0
   164d8:	2104      	movs	r1, #4
   164da:	47b0      	blx	r6
	return user_op->status;
   164dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   164de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   164e2:	2001      	movs	r0, #1
}
   164e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   164e8:	20003010 	.word	0x20003010

000164ec <ticker_job_sched>:
{
   164ec:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   164ee:	4d0a      	ldr	r5, [pc, #40]	; (16518 <ticker_job_sched+0x2c>)
   164f0:	222c      	movs	r2, #44	; 0x2c
   164f2:	fb02 5200 	mla	r2, r2, r0, r5
   164f6:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   164fa:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   164fc:	4608      	mov	r0, r1
   164fe:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   16500:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16504:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16508:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1650c:	46b4      	mov	ip, r6
   1650e:	2200      	movs	r2, #0
}
   16510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16514:	2104      	movs	r1, #4
   16516:	4760      	bx	ip
   16518:	20003010 	.word	0x20003010

0001651c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1651c:	f009 bbc8 	b.w	1fcb0 <cntr_cnt_get>

00016520 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16520:	1a40      	subs	r0, r0, r1
}
   16522:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16526:	4770      	bx	lr

00016528 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   16528:	b570      	push	{r4, r5, r6, lr}
   1652a:	4604      	mov	r4, r0
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   1652c:	2000      	movs	r0, #0
{
   1652e:	460e      	mov	r6, r1
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   16530:	f003 f89a 	bl	19668 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   16534:	f010 0506 	ands.w	r5, r0, #6
   16538:	d10e      	bne.n	16558 <ll_addr_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   1653a:	b134      	cbz	r4, 1654a <ll_addr_set+0x22>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1653c:	2206      	movs	r2, #6
   1653e:	4631      	mov	r1, r6
   16540:	4806      	ldr	r0, [pc, #24]	; (1655c <ll_addr_set+0x34>)
   16542:	f013 ff0b 	bl	2a35c <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   16546:	4628      	mov	r0, r5
}
   16548:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   1654a:	2206      	movs	r2, #6
   1654c:	4631      	mov	r1, r6
   1654e:	4804      	ldr	r0, [pc, #16]	; (16560 <ll_addr_set+0x38>)
   16550:	f013 ff04 	bl	2a35c <memcpy>
	return 0;
   16554:	4620      	mov	r0, r4
}
   16556:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16558:	200c      	movs	r0, #12
}
   1655a:	bd70      	pop	{r4, r5, r6, pc}
   1655c:	20003044 	.word	0x20003044
   16560:	2000303c 	.word	0x2000303c

00016564 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   16564:	2801      	cmp	r0, #1
{
   16566:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   16568:	d805      	bhi.n	16576 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   1656a:	4a04      	ldr	r2, [pc, #16]	; (1657c <ll_addr_get+0x18>)
   1656c:	4804      	ldr	r0, [pc, #16]	; (16580 <ll_addr_get+0x1c>)
   1656e:	2b00      	cmp	r3, #0
   16570:	bf18      	it	ne
   16572:	4610      	movne	r0, r2
   16574:	4770      	bx	lr
		return NULL;
   16576:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   16578:	4770      	bx	lr
   1657a:	bf00      	nop
   1657c:	20003044 	.word	0x20003044
   16580:	2000303c 	.word	0x2000303c

00016584 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   16584:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   16586:	b510      	push	{r4, lr}
   16588:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1658a:	d80b      	bhi.n	165a4 <ll_addr_read+0x20>
	if (addr_type) {
   1658c:	4608      	mov	r0, r1
		return rnd_addr;
   1658e:	4c07      	ldr	r4, [pc, #28]	; (165ac <ll_addr_read+0x28>)
   16590:	4907      	ldr	r1, [pc, #28]	; (165b0 <ll_addr_read+0x2c>)
   16592:	2b00      	cmp	r3, #0
   16594:	bf18      	it	ne
   16596:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   16598:	2206      	movs	r2, #6
   1659a:	4621      	mov	r1, r4
   1659c:	f013 fede 	bl	2a35c <memcpy>
	}

	return addr;
}
   165a0:	4620      	mov	r0, r4
   165a2:	bd10      	pop	{r4, pc}
		return NULL;
   165a4:	2400      	movs	r4, #0
}
   165a6:	4620      	mov	r0, r4
   165a8:	bd10      	pop	{r4, pc}
   165aa:	bf00      	nop
   165ac:	2000303c 	.word	0x2000303c
   165b0:	20003044 	.word	0x20003044

000165b4 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   165b4:	2802      	cmp	r0, #2
   165b6:	d001      	beq.n	165bc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   165b8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   165ba:	4770      	bx	lr
{
   165bc:	b538      	push	{r3, r4, r5, lr}
   165be:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   165c0:	4608      	mov	r0, r1
   165c2:	461d      	mov	r5, r3
   165c4:	f003 fcbe 	bl	19f44 <ll_connected_get>
			if (!conn) {
   165c8:	b118      	cbz	r0, 165d2 <ll_tx_pwr_lvl_get+0x1e>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   165ca:	2308      	movs	r3, #8
   165cc:	702b      	strb	r3, [r5, #0]
	return BT_HCI_ERR_SUCCESS;
   165ce:	2000      	movs	r0, #0
}
   165d0:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   165d2:	4620      	mov	r0, r4
}
   165d4:	bd38      	pop	{r3, r4, r5, pc}
   165d6:	bf00      	nop

000165d8 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   165d8:	2308      	movs	r3, #8
   165da:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   165dc:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   165de:	4770      	bx	lr

000165e0 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   165e0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   165e2:	4802      	ldr	r0, [pc, #8]	; (165ec <hci_driver_init+0xc>)
   165e4:	f7f7 faf8 	bl	dbd8 <bt_hci_driver_register>

	return 0;
}
   165e8:	2000      	movs	r0, #0
   165ea:	bd08      	pop	{r3, pc}
   165ec:	0002f7ec 	.word	0x0002f7ec

000165f0 <hci_driver_send>:
{
   165f0:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   165f2:	8983      	ldrh	r3, [r0, #12]
{
   165f4:	b089      	sub	sp, #36	; 0x24
	if (!buf->len) {
   165f6:	2b00      	cmp	r3, #0
   165f8:	d044      	beq.n	16684 <hci_driver_send+0x94>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   165fa:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   165fc:	4604      	mov	r4, r0
   165fe:	b1e3      	cbz	r3, 1663a <hci_driver_send+0x4a>
   16600:	2b02      	cmp	r3, #2
   16602:	d008      	beq.n	16616 <hci_driver_send+0x26>
		BT_ERR("Unknown HCI type %u", type);
   16604:	4828      	ldr	r0, [pc, #160]	; (166a8 <hci_driver_send+0xb8>)
   16606:	6802      	ldr	r2, [r0, #0]
   16608:	0752      	lsls	r2, r2, #29
   1660a:	d12a      	bne.n	16662 <hci_driver_send+0x72>
		return -EINVAL;
   1660c:	f06f 0515 	mvn.w	r5, #21
}
   16610:	4628      	mov	r0, r5
   16612:	b009      	add	sp, #36	; 0x24
   16614:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   16616:	a902      	add	r1, sp, #8
   16618:	f001 f808 	bl	1762c <hci_acl_handle>
	if (evt) {
   1661c:	9b02      	ldr	r3, [sp, #8]
	err = hci_acl_handle(buf, &evt);
   1661e:	4605      	mov	r5, r0
	if (evt) {
   16620:	b113      	cbz	r3, 16628 <hci_driver_send+0x38>
		bt_recv_prio(evt);
   16622:	4618      	mov	r0, r3
   16624:	f7f7 faba 	bl	db9c <bt_recv_prio>
	if (!err) {
   16628:	2d00      	cmp	r5, #0
   1662a:	d1f1      	bne.n	16610 <hci_driver_send+0x20>
		net_buf_unref(buf);
   1662c:	4620      	mov	r0, r4
   1662e:	f00a fafb 	bl	20c28 <net_buf_unref>
   16632:	2500      	movs	r5, #0
}
   16634:	4628      	mov	r0, r5
   16636:	b009      	add	sp, #36	; 0x24
   16638:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1663a:	a902      	add	r1, sp, #8
	struct node_rx_pdu *node_rx = NULL;
   1663c:	9302      	str	r3, [sp, #8]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1663e:	f000 fae3 	bl	16c08 <hci_cmd_handle>
	if (evt) {
   16642:	2800      	cmp	r0, #0
   16644:	d0f2      	beq.n	1662c <hci_driver_send+0x3c>
		bt_recv_prio(evt);
   16646:	f7f7 faa9 	bl	db9c <bt_recv_prio>
		if (node_rx) {
   1664a:	9d02      	ldr	r5, [sp, #8]
   1664c:	2d00      	cmp	r5, #0
   1664e:	d0ed      	beq.n	1662c <hci_driver_send+0x3c>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   16650:	4628      	mov	r0, r5
   16652:	f001 fd71 	bl	18138 <hci_get_class>
   16656:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   16658:	9902      	ldr	r1, [sp, #8]
   1665a:	4814      	ldr	r0, [pc, #80]	; (166ac <hci_driver_send+0xbc>)
   1665c:	f017 f80c 	bl	2d678 <k_queue_append>
	if (!err) {
   16660:	e7e4      	b.n	1662c <hci_driver_send+0x3c>
		BT_ERR("Unknown HCI type %u", type);
   16662:	4913      	ldr	r1, [pc, #76]	; (166b0 <hci_driver_send+0xc0>)
   16664:	2203      	movs	r2, #3
	switch (type) {
   16666:	e9cd 1306 	strd	r1, r3, [sp, #24]
		BT_ERR("Unknown HCI type %u", type);
   1666a:	9201      	str	r2, [sp, #4]
   1666c:	9205      	str	r2, [sp, #20]
   1666e:	2300      	movs	r3, #0
   16670:	aa05      	add	r2, sp, #20
   16672:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16676:	f011 f963 	bl	27940 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   1667a:	f06f 0515 	mvn.w	r5, #21
}
   1667e:	4628      	mov	r0, r5
   16680:	b009      	add	sp, #36	; 0x24
   16682:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Empty HCI packet");
   16684:	4808      	ldr	r0, [pc, #32]	; (166a8 <hci_driver_send+0xb8>)
   16686:	6802      	ldr	r2, [r0, #0]
   16688:	0751      	lsls	r1, r2, #29
   1668a:	d0bf      	beq.n	1660c <hci_driver_send+0x1c>
   1668c:	2202      	movs	r2, #2
   1668e:	4909      	ldr	r1, [pc, #36]	; (166b4 <hci_driver_send+0xc4>)
   16690:	9106      	str	r1, [sp, #24]
   16692:	9201      	str	r2, [sp, #4]
   16694:	9205      	str	r2, [sp, #20]
   16696:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1669a:	aa05      	add	r2, sp, #20
   1669c:	f011 f950 	bl	27940 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   166a0:	f06f 0515 	mvn.w	r5, #21
		BT_ERR("Empty HCI packet");
   166a4:	e7b4      	b.n	16610 <hci_driver_send+0x20>
   166a6:	bf00      	nop
   166a8:	200009fc 	.word	0x200009fc
   166ac:	20000c80 	.word	0x20000c80
   166b0:	0002f740 	.word	0x0002f740
   166b4:	0002f72c 	.word	0x0002f72c

000166b8 <recv_thread>:
{
   166b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   166ba:	4e41      	ldr	r6, [pc, #260]	; (167c0 <recv_thread+0x108>)
		LL_ASSERT(0);
   166bc:	4f41      	ldr	r7, [pc, #260]	; (167c4 <recv_thread+0x10c>)
{
   166be:	b083      	sub	sp, #12
   166c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   166c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   166c8:	4630      	mov	r0, r6
   166ca:	f00e fedf 	bl	2548c <z_impl_k_queue_get>
		if (node_rx && !buf) {
   166ce:	2800      	cmp	r0, #0
   166d0:	d0f6      	beq.n	166c0 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   166d2:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   166d4:	9001      	str	r0, [sp, #4]
	switch (class) {
   166d6:	2b04      	cmp	r3, #4
   166d8:	d821      	bhi.n	1671e <recv_thread+0x66>
   166da:	2b00      	cmp	r3, #0
   166dc:	d14b      	bne.n	16776 <recv_thread+0xbe>
		LL_ASSERT(0);
   166de:	493a      	ldr	r1, [pc, #232]	; (167c8 <recv_thread+0x110>)
   166e0:	483a      	ldr	r0, [pc, #232]	; (167cc <recv_thread+0x114>)
   166e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   166e6:	463a      	mov	r2, r7
   166e8:	f010 f938 	bl	2695c <printk>
   166ec:	4040      	eors	r0, r0
   166ee:	f380 8811 	msr	BASEPRI, r0
   166f2:	f04f 0003 	mov.w	r0, #3
   166f6:	df02      	svc	2
	node_rx->hdr.next = NULL;
   166f8:	9b01      	ldr	r3, [sp, #4]
   166fa:	2200      	movs	r2, #0
   166fc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   166fe:	a801      	add	r0, sp, #4
   16700:	f002 f954 	bl	189ac <ll_rx_mem_release>
   16704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1670c:	4630      	mov	r0, r6
   1670e:	f00e febd 	bl	2548c <z_impl_k_queue_get>
		if (node_rx && !buf) {
   16712:	2800      	cmp	r0, #0
   16714:	d0d4      	beq.n	166c0 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   16716:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   16718:	9001      	str	r0, [sp, #4]
	switch (class) {
   1671a:	2b04      	cmp	r3, #4
   1671c:	d9dd      	bls.n	166da <recv_thread+0x22>
   1671e:	2b05      	cmp	r3, #5
   16720:	d1dd      	bne.n	166de <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   16722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1672a:	2003      	movs	r0, #3
   1672c:	f7f5 ff24 	bl	c578 <bt_buf_get_rx>
   16730:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   16732:	4621      	mov	r1, r4
   16734:	9801      	ldr	r0, [sp, #4]
   16736:	f001 f855 	bl	177e4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1673a:	9b01      	ldr	r3, [sp, #4]
   1673c:	2200      	movs	r2, #0
   1673e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   16740:	a801      	add	r0, sp, #4
   16742:	f002 f933 	bl	189ac <ll_rx_mem_release>
		while (buf) {
   16746:	2c00      	cmp	r4, #0
   16748:	d0ba      	beq.n	166c0 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   1674a:	4620      	mov	r0, r4
   1674c:	f016 f93d 	bl	2c9ca <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   16750:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   16752:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   16754:	2000      	movs	r0, #0
   16756:	f016 f95e 	bl	2ca16 <net_buf_frag_del>
			if (frag->len) {
   1675a:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   1675c:	4604      	mov	r4, r0
				bt_recv(frag);
   1675e:	4628      	mov	r0, r5
			if (frag->len) {
   16760:	b133      	cbz	r3, 16770 <recv_thread+0xb8>
				bt_recv(frag);
   16762:	f7f7 f955 	bl	da10 <bt_recv>
	z_impl_k_yield();
   16766:	f00f fb21 	bl	25dac <z_impl_k_yield>
		while (buf) {
   1676a:	2c00      	cmp	r4, #0
   1676c:	d1ed      	bne.n	1674a <recv_thread+0x92>
   1676e:	e7a7      	b.n	166c0 <recv_thread+0x8>
				net_buf_unref(frag);
   16770:	f00a fa5a 	bl	20c28 <net_buf_unref>
   16774:	e7f7      	b.n	16766 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   16776:	2b02      	cmp	r3, #2
   16778:	d013      	beq.n	167a2 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1677a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1677e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16782:	2001      	movs	r0, #1
   16784:	f7f5 fef8 	bl	c578 <bt_buf_get_rx>
   16788:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   1678a:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   1678c:	b19c      	cbz	r4, 167b6 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   1678e:	4621      	mov	r1, r4
   16790:	f001 f862 	bl	17858 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   16794:	9b01      	ldr	r3, [sp, #4]
   16796:	2200      	movs	r2, #0
   16798:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1679a:	a801      	add	r0, sp, #4
   1679c:	f002 f906 	bl	189ac <ll_rx_mem_release>
		while (buf) {
   167a0:	e7d3      	b.n	1674a <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   167a2:	2200      	movs	r2, #0
   167a4:	2300      	movs	r3, #0
   167a6:	2101      	movs	r1, #1
   167a8:	2000      	movs	r0, #0
   167aa:	f7f5 ff0f 	bl	c5cc <bt_buf_get_evt>
   167ae:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   167b0:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   167b2:	2c00      	cmp	r4, #0
   167b4:	d1eb      	bne.n	1678e <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   167b6:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   167b8:	a801      	add	r0, sp, #4
   167ba:	f002 f8f7 	bl	189ac <ll_rx_mem_release>
		while (buf) {
   167be:	e77f      	b.n	166c0 <recv_thread+0x8>
   167c0:	20000c80 	.word	0x20000c80
   167c4:	0002f754 	.word	0x0002f754
   167c8:	0002f794 	.word	0x0002f794
   167cc:	0002f6fc 	.word	0x0002f6fc

000167d0 <prio_recv_thread>:
{
   167d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   167d4:	4f2e      	ldr	r7, [pc, #184]	; (16890 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   167d6:	4e2f      	ldr	r6, [pc, #188]	; (16894 <prio_recv_thread+0xc4>)
{
   167d8:	b082      	sub	sp, #8
   167da:	e00c      	b.n	167f6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   167dc:	f7f5 fef6 	bl	c5cc <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   167e0:	4622      	mov	r2, r4
   167e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   167e6:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   167e8:	f001 fc8e 	bl	18108 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   167ec:	4620      	mov	r0, r4
   167ee:	f7f7 f9d5 	bl	db9c <bt_recv_prio>
	z_impl_k_yield();
   167f2:	f00f fadb 	bl	25dac <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   167f6:	f10d 0102 	add.w	r1, sp, #2
   167fa:	a801      	add	r0, sp, #4
   167fc:	f001 ff80 	bl	18700 <ll_rx_get>
   16800:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   16802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1680a:	2100      	movs	r1, #0
   1680c:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1680e:	2c00      	cmp	r4, #0
   16810:	d1e4      	bne.n	167dc <prio_recv_thread+0xc>
		if (node_rx) {
   16812:	9b01      	ldr	r3, [sp, #4]
   16814:	b1b3      	cbz	r3, 16844 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   16816:	f002 f855 	bl	188c4 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1681a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1681e:	4640      	mov	r0, r8
   16820:	f001 fc8a 	bl	18138 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   16824:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   16826:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   1682a:	796b      	ldrb	r3, [r5, #5]
   1682c:	2b03      	cmp	r3, #3
   1682e:	d102      	bne.n	16836 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   16830:	792b      	ldrb	r3, [r5, #4]
   16832:	2b17      	cmp	r3, #23
   16834:	d00e      	beq.n	16854 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   16836:	4629      	mov	r1, r5
   16838:	4630      	mov	r0, r6
   1683a:	f016 ff1d 	bl	2d678 <k_queue_append>
		if (iso_received || node_rx) {
   1683e:	9b01      	ldr	r3, [sp, #4]
   16840:	2b00      	cmp	r3, #0
   16842:	d1d8      	bne.n	167f6 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   16844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1684c:	4638      	mov	r0, r7
   1684e:	f00e fe77 	bl	25540 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   16852:	e7d0      	b.n	167f6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   16854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16858:	4621      	mov	r1, r4
   1685a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1685e:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   16860:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   16864:	f7f5 feb2 	bl	c5cc <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   16868:	4641      	mov	r1, r8
   1686a:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1686c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1686e:	f105 001c 	add.w	r0, r5, #28
   16872:	f000 ff8f 	bl	17794 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   16876:	4640      	mov	r0, r8
   16878:	f000 ffac 	bl	177d4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   1687c:	4620      	mov	r0, r4
			if (buf) {
   1687e:	b124      	cbz	r4, 1688a <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   16880:	f7f7 f98c 	bl	db9c <bt_recv_prio>
					net_buf_unref(buf);
   16884:	4620      	mov	r0, r4
   16886:	f00a f9cf 	bl	20c28 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   1688a:	9d01      	ldr	r5, [sp, #4]
   1688c:	e7d3      	b.n	16836 <prio_recv_thread+0x66>
   1688e:	bf00      	nop
   16890:	20000c50 	.word	0x20000c50
   16894:	20000c80 	.word	0x20000c80

00016898 <hci_driver_open>:
{
   16898:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   1689a:	4825      	ldr	r0, [pc, #148]	; (16930 <hci_driver_open+0x98>)
{
   1689c:	b090      	sub	sp, #64	; 0x40
	err = ll_init(&sem_prio_recv);
   1689e:	f002 fcb1 	bl	19204 <ll_init>
	if (err) {
   168a2:	4604      	mov	r4, r0
   168a4:	b130      	cbz	r0, 168b4 <hci_driver_open+0x1c>
		BT_ERR("LL initialization failed: %d", err);
   168a6:	4823      	ldr	r0, [pc, #140]	; (16934 <hci_driver_open+0x9c>)
   168a8:	6803      	ldr	r3, [r0, #0]
   168aa:	075b      	lsls	r3, r3, #29
   168ac:	d131      	bne.n	16912 <hci_driver_open+0x7a>
}
   168ae:	4620      	mov	r0, r4
   168b0:	b010      	add	sp, #64	; 0x40
   168b2:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
   168b4:	f001 fc56 	bl	18164 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   168b8:	2600      	movs	r6, #0
   168ba:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   168bc:	f06f 0209 	mvn.w	r2, #9
   168c0:	e9cd 2403 	strd	r2, r4, [sp, #12]
   168c4:	e9cd 6706 	strd	r6, r7, [sp, #24]
   168c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   168cc:	4b1a      	ldr	r3, [pc, #104]	; (16938 <hci_driver_open+0xa0>)
   168ce:	491b      	ldr	r1, [pc, #108]	; (1693c <hci_driver_open+0xa4>)
   168d0:	9400      	str	r4, [sp, #0]
   168d2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   168d6:	481a      	ldr	r0, [pc, #104]	; (16940 <hci_driver_open+0xa8>)
   168d8:	f00e fc78 	bl	251cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   168dc:	4919      	ldr	r1, [pc, #100]	; (16944 <hci_driver_open+0xac>)
   168de:	4818      	ldr	r0, [pc, #96]	; (16940 <hci_driver_open+0xa8>)
   168e0:	f00e fbc2 	bl	25068 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   168e4:	f06f 0207 	mvn.w	r2, #7
   168e8:	e9cd 2403 	strd	r2, r4, [sp, #12]
   168ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
   168f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   168f4:	4b14      	ldr	r3, [pc, #80]	; (16948 <hci_driver_open+0xb0>)
   168f6:	4915      	ldr	r1, [pc, #84]	; (1694c <hci_driver_open+0xb4>)
   168f8:	9400      	str	r4, [sp, #0]
   168fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   168fe:	4814      	ldr	r0, [pc, #80]	; (16950 <hci_driver_open+0xb8>)
   16900:	f00e fc64 	bl	251cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16904:	4913      	ldr	r1, [pc, #76]	; (16954 <hci_driver_open+0xbc>)
   16906:	4812      	ldr	r0, [pc, #72]	; (16950 <hci_driver_open+0xb8>)
   16908:	f00e fbae 	bl	25068 <z_impl_k_thread_name_set>
}
   1690c:	4620      	mov	r0, r4
   1690e:	b010      	add	sp, #64	; 0x40
   16910:	bdd0      	pop	{r4, r6, r7, pc}
		BT_ERR("LL initialization failed: %d", err);
   16912:	4a11      	ldr	r2, [pc, #68]	; (16958 <hci_driver_open+0xc0>)
   16914:	2303      	movs	r3, #3
   16916:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
   1691a:	9309      	str	r3, [sp, #36]	; 0x24
   1691c:	930d      	str	r3, [sp, #52]	; 0x34
   1691e:	2300      	movs	r3, #0
   16920:	aa0d      	add	r2, sp, #52	; 0x34
   16922:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16926:	f011 f80b 	bl	27940 <z_impl_z_log_msg2_static_create>
}
   1692a:	4620      	mov	r0, r4
   1692c:	b010      	add	sp, #64	; 0x40
   1692e:	bdd0      	pop	{r4, r6, r7, pc}
   16930:	20000c50 	.word	0x20000c50
   16934:	200009fc 	.word	0x200009fc
   16938:	000167d1 	.word	0x000167d1
   1693c:	200094c0 	.word	0x200094c0
   16940:	20001f58 	.word	0x20001f58
   16944:	0002f7b8 	.word	0x0002f7b8
   16948:	000166b9 	.word	0x000166b9
   1694c:	200096a0 	.word	0x200096a0
   16950:	20002010 	.word	0x20002010
   16954:	0002f7c4 	.word	0x0002f7c4
   16958:	0002f798 	.word	0x0002f798

0001695c <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   1695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   16960:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 16a0c <dup_found.part.0+0xb0>
   16964:	f8d9 3000 	ldr.w	r3, [r9]
   16968:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   1696a:	4680      	mov	r8, r0
   1696c:	460f      	mov	r7, r1
   1696e:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   16970:	dd12      	ble.n	16998 <dup_found.part.0+0x3c>
   16972:	4c27      	ldr	r4, [pc, #156]	; (16a10 <dup_found.part.0+0xb4>)
   16974:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   16976:	4621      	mov	r1, r4
   16978:	2206      	movs	r2, #6
   1697a:	4630      	mov	r0, r6
   1697c:	f013 fcc5 	bl	2a30a <memcmp>
   16980:	b918      	cbnz	r0, 1698a <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   16982:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   16986:	42bb      	cmp	r3, r7
   16988:	d029      	beq.n	169de <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
   1698a:	f8d9 3000 	ldr.w	r3, [r9]
   1698e:	3501      	adds	r5, #1
   16990:	429d      	cmp	r5, r3
   16992:	f104 0408 	add.w	r4, r4, #8
   16996:	dbee      	blt.n	16976 <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   16998:	4d1e      	ldr	r5, [pc, #120]	; (16a14 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   1699a:	4c1f      	ldr	r4, [pc, #124]	; (16a18 <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
   1699c:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   169a0:	4631      	mov	r1, r6
   169a2:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   169a6:	1c70      	adds	r0, r6, #1
   169a8:	4420      	add	r0, r4
   169aa:	2206      	movs	r2, #6
   169ac:	f013 fcd6 	bl	2a35c <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
   169b0:	2301      	movs	r3, #1
   169b2:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   169b6:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   169ba:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
   169be:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   169c0:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   169c2:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   169c6:	dc1c      	bgt.n	16a02 <dup_found.part.0+0xa6>
			dup_count++;
   169c8:	3301      	adds	r3, #1
			dup_curr = dup_count;
   169ca:	461a      	mov	r2, r3
			dup_count++;
   169cc:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
   169d0:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
   169d2:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   169d4:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   169d6:	bf08      	it	eq
   169d8:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
   169da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   169de:	4b0e      	ldr	r3, [pc, #56]	; (16a18 <dup_found.part.0+0xbc>)
   169e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
   169e4:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   169e6:	79ea      	ldrb	r2, [r5, #7]
   169e8:	fa22 f308 	lsr.w	r3, r2, r8
   169ec:	f013 0301 	ands.w	r3, r3, #1
   169f0:	d1f3      	bne.n	169da <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
   169f2:	fa00 f808 	lsl.w	r8, r0, r8
   169f6:	ea42 0208 	orr.w	r2, r2, r8
   169fa:	71ea      	strb	r2, [r5, #7]
		return false;
   169fc:	4618      	mov	r0, r3
}
   169fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
   16a02:	682a      	ldr	r2, [r5, #0]
   16a04:	3201      	adds	r2, #1
   16a06:	602a      	str	r2, [r5, #0]
   16a08:	e7e3      	b.n	169d2 <dup_found.part.0+0x76>
   16a0a:	bf00      	nop
   16a0c:	20003050 	.word	0x20003050
   16a10:	20003059 	.word	0x20003059
   16a14:	20003054 	.word	0x20003054
   16a18:	20003058 	.word	0x20003058

00016a1c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   16a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16a1e:	4c19      	ldr	r4, [pc, #100]	; (16a84 <le_remote_feat_complete+0x68>)
   16a20:	6864      	ldr	r4, [r4, #4]
   16a22:	00a4      	lsls	r4, r4, #2
   16a24:	d504      	bpl.n	16a30 <le_remote_feat_complete+0x14>
   16a26:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   16a28:	4a17      	ldr	r2, [pc, #92]	; (16a88 <le_remote_feat_complete+0x6c>)
   16a2a:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16a2c:	0712      	lsls	r2, r2, #28
   16a2e:	d400      	bmi.n	16a32 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   16a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   16a32:	f103 0408 	add.w	r4, r3, #8
   16a36:	4607      	mov	r7, r0
   16a38:	460e      	mov	r6, r1
   16a3a:	4620      	mov	r0, r4
   16a3c:	2102      	movs	r1, #2
   16a3e:	f015 fff6 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   16a42:	233e      	movs	r3, #62	; 0x3e
   16a44:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   16a46:	230c      	movs	r3, #12
   16a48:	7043      	strb	r3, [r0, #1]
   16a4a:	2101      	movs	r1, #1
   16a4c:	4620      	mov	r0, r4
   16a4e:	f015 ffee 	bl	2ca2e <net_buf_simple_add>
   16a52:	4603      	mov	r3, r0
	me->subevent = subevt;
   16a54:	2204      	movs	r2, #4
   16a56:	701a      	strb	r2, [r3, #0]
   16a58:	4620      	mov	r0, r4
   16a5a:	210b      	movs	r1, #11
   16a5c:	f015 ffe7 	bl	2ca2e <net_buf_simple_add>
		memcpy(&sep->features[0],
   16a60:	2208      	movs	r2, #8
	sep->status = status;
   16a62:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   16a64:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   16a68:	b92f      	cbnz	r7, 16a76 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   16a6a:	1d31      	adds	r1, r6, #4
   16a6c:	3003      	adds	r0, #3
}
   16a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   16a72:	f013 bc73 	b.w	2a35c <memcpy>
}
   16a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   16a7a:	2100      	movs	r1, #0
   16a7c:	3003      	adds	r0, #3
   16a7e:	f013 bc78 	b.w	2a372 <memset>
   16a82:	bf00      	nop
   16a84:	20000198 	.word	0x20000198
   16a88:	200001a0 	.word	0x200001a0

00016a8c <hci_vendor_cmd_handle_common>:
{
   16a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   16a8e:	3801      	subs	r0, #1
{
   16a90:	b087      	sub	sp, #28
   16a92:	4615      	mov	r5, r2
	switch (ocf) {
   16a94:	2809      	cmp	r0, #9
   16a96:	d806      	bhi.n	16aa6 <hci_vendor_cmd_handle_common+0x1a>
   16a98:	e8df f000 	tbb	[pc, r0]
   16a9c:	05432609 	.word	0x05432609
   16aa0:	6b055705 	.word	0x6b055705
   16aa4:	9d88      	.short	0x9d88
   16aa6:	f06f 0015 	mvn.w	r0, #21
}
   16aaa:	b007      	add	sp, #28
   16aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16aae:	4b54      	ldr	r3, [pc, #336]	; (16c00 <hci_vendor_cmd_handle_common+0x174>)
   16ab0:	210d      	movs	r1, #13
   16ab2:	8818      	ldrh	r0, [r3, #0]
   16ab4:	f013 fe70 	bl	2a798 <bt_hci_cmd_complete_create>
   16ab8:	210d      	movs	r1, #13
   16aba:	6028      	str	r0, [r5, #0]
   16abc:	3008      	adds	r0, #8
   16abe:	f015 ffb6 	bl	2ca2e <net_buf_simple_add>
   16ac2:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   16ac4:	2202      	movs	r2, #2
	rp->status = 0x00;
   16ac6:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   16ac8:	2103      	movs	r1, #3
	rp->status = 0x00;
   16aca:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   16acc:	705a      	strb	r2, [r3, #1]
   16ace:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   16ad0:	70da      	strb	r2, [r3, #3]
   16ad2:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   16ad4:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   16ad6:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   16ad8:	71d8      	strb	r0, [r3, #7]
   16ada:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   16adc:	7258      	strb	r0, [r3, #9]
   16ade:	7298      	strb	r0, [r3, #10]
   16ae0:	72d8      	strb	r0, [r3, #11]
   16ae2:	7318      	strb	r0, [r3, #12]
}
   16ae4:	b007      	add	sp, #28
   16ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16ae8:	4b45      	ldr	r3, [pc, #276]	; (16c00 <hci_vendor_cmd_handle_common+0x174>)
   16aea:	2141      	movs	r1, #65	; 0x41
   16aec:	8818      	ldrh	r0, [r3, #0]
   16aee:	f013 fe53 	bl	2a798 <bt_hci_cmd_complete_create>
   16af2:	2141      	movs	r1, #65	; 0x41
   16af4:	6028      	str	r0, [r5, #0]
   16af6:	3008      	adds	r0, #8
   16af8:	f015 ff99 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16afc:	2400      	movs	r4, #0
   16afe:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16b00:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   16b02:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16b06:	4621      	mov	r1, r4
   16b08:	f013 fc33 	bl	2a372 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   16b0c:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   16b0e:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   16b10:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   16b14:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   16b18:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   16b1a:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   16b1c:	70ab      	strb	r3, [r5, #2]
}
   16b1e:	b007      	add	sp, #28
   16b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16b22:	4b37      	ldr	r3, [pc, #220]	; (16c00 <hci_vendor_cmd_handle_common+0x174>)
   16b24:	2109      	movs	r1, #9
   16b26:	8818      	ldrh	r0, [r3, #0]
   16b28:	f013 fe36 	bl	2a798 <bt_hci_cmd_complete_create>
   16b2c:	2109      	movs	r1, #9
   16b2e:	6028      	str	r0, [r5, #0]
   16b30:	3008      	adds	r0, #8
   16b32:	f015 ff7c 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16b36:	2400      	movs	r4, #0
   16b38:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16b3c:	2208      	movs	r2, #8
   16b3e:	4621      	mov	r1, r4
   16b40:	f013 fc17 	bl	2a372 <memset>
	return 0;
   16b44:	4620      	mov	r0, r4
}
   16b46:	b007      	add	sp, #28
   16b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   16b4a:	6889      	ldr	r1, [r1, #8]
   16b4c:	2000      	movs	r0, #0
   16b4e:	f7ff fceb 	bl	16528 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   16b52:	4b2b      	ldr	r3, [pc, #172]	; (16c00 <hci_vendor_cmd_handle_common+0x174>)
   16b54:	2101      	movs	r1, #1
   16b56:	8818      	ldrh	r0, [r3, #0]
   16b58:	f013 fe1e 	bl	2a798 <bt_hci_cmd_complete_create>
   16b5c:	2101      	movs	r1, #1
   16b5e:	4604      	mov	r4, r0
   16b60:	3008      	adds	r0, #8
   16b62:	f015 ff64 	bl	2ca2e <net_buf_simple_add>
   16b66:	4603      	mov	r3, r0
	ccst->status = status;
   16b68:	2000      	movs	r0, #0
   16b6a:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   16b6c:	602c      	str	r4, [r5, #0]
}
   16b6e:	b007      	add	sp, #28
   16b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   16b72:	4e24      	ldr	r6, [pc, #144]	; (16c04 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16b74:	4f22      	ldr	r7, [pc, #136]	; (16c00 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   16b76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16b78:	f10d 0c04 	add.w	ip, sp, #4
   16b7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   16b80:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16b82:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   16b84:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16b88:	2112      	movs	r1, #18
   16b8a:	f013 fe05 	bl	2a798 <bt_hci_cmd_complete_create>
   16b8e:	2112      	movs	r1, #18
   16b90:	6028      	str	r0, [r5, #0]
   16b92:	3008      	adds	r0, #8
   16b94:	f015 ff4b 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16b98:	2400      	movs	r4, #0
   16b9a:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   16b9e:	2211      	movs	r2, #17
   16ba0:	a901      	add	r1, sp, #4
   16ba2:	f013 fbdb 	bl	2a35c <memcpy>
	return 0;
   16ba6:	4620      	mov	r0, r4
}
   16ba8:	b007      	add	sp, #28
   16baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16bac:	4b14      	ldr	r3, [pc, #80]	; (16c00 <hci_vendor_cmd_handle_common+0x174>)
   16bae:	2118      	movs	r1, #24
   16bb0:	8818      	ldrh	r0, [r3, #0]
   16bb2:	f013 fdf1 	bl	2a798 <bt_hci_cmd_complete_create>
   16bb6:	2118      	movs	r1, #24
   16bb8:	6028      	str	r0, [r5, #0]
   16bba:	3008      	adds	r0, #8
   16bbc:	f015 ff37 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16bc0:	2400      	movs	r4, #0
   16bc2:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   16bc4:	2101      	movs	r1, #1
	rp->status = 0x00;
   16bc6:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   16bca:	f009 fead 	bl	20928 <hci_vendor_read_static_addr>
   16bce:	7068      	strb	r0, [r5, #1]
	return 0;
   16bd0:	4620      	mov	r0, r4
}
   16bd2:	b007      	add	sp, #28
   16bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16bd6:	4b0a      	ldr	r3, [pc, #40]	; (16c00 <hci_vendor_cmd_handle_common+0x174>)
   16bd8:	2121      	movs	r1, #33	; 0x21
   16bda:	8818      	ldrh	r0, [r3, #0]
   16bdc:	f013 fddc 	bl	2a798 <bt_hci_cmd_complete_create>
   16be0:	2121      	movs	r1, #33	; 0x21
   16be2:	6028      	str	r0, [r5, #0]
   16be4:	3008      	adds	r0, #8
   16be6:	f015 ff22 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16bea:	4601      	mov	r1, r0
   16bec:	2400      	movs	r4, #0
   16bee:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   16bf2:	3001      	adds	r0, #1
   16bf4:	f009 ff0c 	bl	20a10 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   16bf8:	4620      	mov	r0, r4
}
   16bfa:	b007      	add	sp, #28
   16bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16bfe:	bf00      	nop
   16c00:	20004a72 	.word	0x20004a72
   16c04:	0002f800 	.word	0x0002f800

00016c08 <hci_cmd_handle>:
{
   16c08:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   16c0a:	8983      	ldrh	r3, [r0, #12]
{
   16c0c:	b091      	sub	sp, #68	; 0x44
	struct net_buf *evt = NULL;
   16c0e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   16c10:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   16c12:	9508      	str	r5, [sp, #32]
	if (cmd->len < sizeof(*chdr)) {
   16c14:	d935      	bls.n	16c82 <hci_cmd_handle+0x7a>
	return net_buf_simple_pull_mem(&buf->b, len);
   16c16:	4604      	mov	r4, r0
   16c18:	460e      	mov	r6, r1
   16c1a:	3008      	adds	r0, #8
   16c1c:	2103      	movs	r1, #3
   16c1e:	f015 ff37 	bl	2ca90 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   16c22:	89a2      	ldrh	r2, [r4, #12]
   16c24:	7883      	ldrb	r3, [r0, #2]
   16c26:	429a      	cmp	r2, r3
   16c28:	f0c0 8120 	bcc.w	16e6c <hci_cmd_handle+0x264>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   16c2c:	8802      	ldrh	r2, [r0, #0]
   16c2e:	4dc5      	ldr	r5, [pc, #788]	; (16f44 <hci_cmd_handle+0x33c>)
	switch (BT_OGF(_opcode)) {
   16c30:	f3c2 2385 	ubfx	r3, r2, #10, #6
   16c34:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   16c36:	b290      	uxth	r0, r2
   16c38:	802a      	strh	r2, [r5, #0]
	ocf = BT_OCF(_opcode);
   16c3a:	f3c2 0709 	ubfx	r7, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   16c3e:	d80d      	bhi.n	16c5c <hci_cmd_handle+0x54>
   16c40:	b1c3      	cbz	r3, 16c74 <hci_cmd_handle+0x6c>
   16c42:	3b01      	subs	r3, #1
   16c44:	2b07      	cmp	r3, #7
   16c46:	d815      	bhi.n	16c74 <hci_cmd_handle+0x6c>
   16c48:	e8df f013 	tbh	[pc, r3, lsl #1]
   16c4c:	00140024 	.word	0x00140024
   16c50:	00f700d6 	.word	0x00f700d6
   16c54:	00140014 	.word	0x00140014
   16c58:	00330014 	.word	0x00330014
   16c5c:	2b3f      	cmp	r3, #63	; 0x3f
   16c5e:	d109      	bne.n	16c74 <hci_cmd_handle+0x6c>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   16c60:	aa08      	add	r2, sp, #32
   16c62:	4621      	mov	r1, r4
   16c64:	4638      	mov	r0, r7
   16c66:	f7ff ff11 	bl	16a8c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   16c6a:	3016      	adds	r0, #22
	return evt;
   16c6c:	bf18      	it	ne
   16c6e:	9d08      	ldrne	r5, [sp, #32]
	if (err == -EINVAL) {
   16c70:	d104      	bne.n	16c7c <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   16c72:	8828      	ldrh	r0, [r5, #0]
   16c74:	2101      	movs	r1, #1
   16c76:	f013 fda1 	bl	2a7bc <bt_hci_cmd_status_create>
   16c7a:	4605      	mov	r5, r0
}
   16c7c:	4628      	mov	r0, r5
   16c7e:	b011      	add	sp, #68	; 0x44
   16c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI Command header");
   16c82:	48b1      	ldr	r0, [pc, #708]	; (16f48 <hci_cmd_handle+0x340>)
   16c84:	6803      	ldr	r3, [r0, #0]
   16c86:	075e      	lsls	r6, r3, #29
   16c88:	f040 80f8 	bne.w	16e7c <hci_cmd_handle+0x274>
		return NULL;
   16c8c:	2500      	movs	r5, #0
}
   16c8e:	4628      	mov	r0, r5
   16c90:	b011      	add	sp, #68	; 0x44
   16c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   16c94:	2f06      	cmp	r7, #6
   16c96:	f000 845c 	beq.w	17552 <hci_cmd_handle+0x94a>
   16c9a:	2f1d      	cmp	r7, #29
   16c9c:	d1ea      	bne.n	16c74 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   16c9e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   16ca0:	8818      	ldrh	r0, [r3, #0]
   16ca2:	f003 fab7 	bl	1a214 <ll_version_ind_send>
   16ca6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   16ca8:	8828      	ldrh	r0, [r5, #0]
   16caa:	f013 fd87 	bl	2a7bc <bt_hci_cmd_status_create>
   16cae:	4605      	mov	r5, r0
}
   16cb0:	e7e4      	b.n	16c7c <hci_cmd_handle+0x74>
	switch (ocf) {
   16cb2:	1e7a      	subs	r2, r7, #1
   16cb4:	2a4d      	cmp	r2, #77	; 0x4d
   16cb6:	d8dd      	bhi.n	16c74 <hci_cmd_handle+0x6c>
   16cb8:	a301      	add	r3, pc, #4	; (adr r3, 16cc0 <hci_cmd_handle+0xb8>)
   16cba:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   16cbe:	bf00      	nop
   16cc0:	00017547 	.word	0x00017547
   16cc4:	00017521 	.word	0x00017521
   16cc8:	000174d7 	.word	0x000174d7
   16ccc:	00016c75 	.word	0x00016c75
   16cd0:	000174cd 	.word	0x000174cd
   16cd4:	00016c75 	.word	0x00016c75
   16cd8:	00016c75 	.word	0x00016c75
   16cdc:	00016c75 	.word	0x00016c75
   16ce0:	00016c75 	.word	0x00016c75
   16ce4:	00016c75 	.word	0x00016c75
   16ce8:	000174b5 	.word	0x000174b5
   16cec:	00017485 	.word	0x00017485
   16cf0:	0001744f 	.word	0x0001744f
   16cf4:	00017447 	.word	0x00017447
   16cf8:	00017425 	.word	0x00017425
   16cfc:	0001741f 	.word	0x0001741f
   16d00:	00017417 	.word	0x00017417
   16d04:	0001740f 	.word	0x0001740f
   16d08:	000173e9 	.word	0x000173e9
   16d0c:	000173e1 	.word	0x000173e1
   16d10:	000173b7 	.word	0x000173b7
   16d14:	000173a3 	.word	0x000173a3
   16d18:	0001736f 	.word	0x0001736f
   16d1c:	0001734d 	.word	0x0001734d
   16d20:	0001732f 	.word	0x0001732f
   16d24:	00016c75 	.word	0x00016c75
   16d28:	00016c75 	.word	0x00016c75
   16d2c:	000172f9 	.word	0x000172f9
   16d30:	00016c75 	.word	0x00016c75
   16d34:	00016c75 	.word	0x00016c75
   16d38:	00016c75 	.word	0x00016c75
   16d3c:	000172e3 	.word	0x000172e3
   16d40:	000172ab 	.word	0x000172ab
   16d44:	0001729b 	.word	0x0001729b
   16d48:	00017267 	.word	0x00017267
   16d4c:	0001725b 	.word	0x0001725b
   16d50:	00016c75 	.word	0x00016c75
   16d54:	00016c75 	.word	0x00016c75
   16d58:	0001724d 	.word	0x0001724d
   16d5c:	00017245 	.word	0x00017245
   16d60:	0001723f 	.word	0x0001723f
   16d64:	0001721d 	.word	0x0001721d
   16d68:	000171ef 	.word	0x000171ef
   16d6c:	000171c1 	.word	0x000171c1
   16d70:	000171b7 	.word	0x000171b7
   16d74:	000171a9 	.word	0x000171a9
   16d78:	0001715f 	.word	0x0001715f
   16d7c:	00017105 	.word	0x00017105
   16d80:	000170e7 	.word	0x000170e7
   16d84:	0001708b 	.word	0x0001708b
   16d88:	00016c75 	.word	0x00016c75
   16d8c:	00016c75 	.word	0x00016c75
   16d90:	00016c75 	.word	0x00016c75
   16d94:	00016c75 	.word	0x00016c75
   16d98:	00016c75 	.word	0x00016c75
   16d9c:	00016c75 	.word	0x00016c75
   16da0:	00016c75 	.word	0x00016c75
   16da4:	00016c75 	.word	0x00016c75
   16da8:	00016c75 	.word	0x00016c75
   16dac:	00016c75 	.word	0x00016c75
   16db0:	00016c75 	.word	0x00016c75
   16db4:	00016c75 	.word	0x00016c75
   16db8:	00016c75 	.word	0x00016c75
   16dbc:	00016c75 	.word	0x00016c75
   16dc0:	00016c75 	.word	0x00016c75
   16dc4:	00016c75 	.word	0x00016c75
   16dc8:	00016c75 	.word	0x00016c75
   16dcc:	00016c75 	.word	0x00016c75
   16dd0:	00016c75 	.word	0x00016c75
   16dd4:	00016c75 	.word	0x00016c75
   16dd8:	00016c75 	.word	0x00016c75
   16ddc:	00016c75 	.word	0x00016c75
   16de0:	00016c75 	.word	0x00016c75
   16de4:	00016c75 	.word	0x00016c75
   16de8:	00017067 	.word	0x00017067
   16dec:	00016c75 	.word	0x00016c75
   16df0:	00016c75 	.word	0x00016c75
   16df4:	00017047 	.word	0x00017047
	switch (ocf) {
   16df8:	2f63      	cmp	r7, #99	; 0x63
   16dfa:	f000 83f7 	beq.w	175ec <hci_cmd_handle+0x9e4>
   16dfe:	d85f      	bhi.n	16ec0 <hci_cmd_handle+0x2b8>
   16e00:	2f03      	cmp	r7, #3
   16e02:	f000 83b2 	beq.w	1756a <hci_cmd_handle+0x962>
   16e06:	2f2d      	cmp	r7, #45	; 0x2d
   16e08:	d146      	bne.n	16e98 <hci_cmd_handle+0x290>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   16e0a:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16e0c:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   16e0e:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   16e10:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16e12:	f013 fcc1 	bl	2a798 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   16e16:	2104      	movs	r1, #4
   16e18:	9008      	str	r0, [sp, #32]
   16e1a:	3008      	adds	r0, #8
   16e1c:	f015 fe07 	bl	2ca2e <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   16e20:	b2b5      	uxth	r5, r6
   16e22:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   16e24:	1cc3      	adds	r3, r0, #3
   16e26:	4629      	mov	r1, r5
   16e28:	463a      	mov	r2, r7
   16e2a:	2002      	movs	r0, #2
   16e2c:	f7ff fbc2 	bl	165b4 <ll_tx_pwr_lvl_get>
	rp->status = status;
   16e30:	7020      	strb	r0, [r4, #0]
	return evt;
   16e32:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   16e34:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   16e38:	e720      	b.n	16c7c <hci_cmd_handle+0x74>
	switch (ocf) {
   16e3a:	1e7a      	subs	r2, r7, #1
   16e3c:	2a08      	cmp	r2, #8
   16e3e:	f63f af19 	bhi.w	16c74 <hci_cmd_handle+0x6c>
   16e42:	a301      	add	r3, pc, #4	; (adr r3, 16e48 <hci_cmd_handle+0x240>)
   16e44:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   16e48:	00017011 	.word	0x00017011
   16e4c:	00016f59 	.word	0x00016f59
   16e50:	00016f1b 	.word	0x00016f1b
   16e54:	00016c75 	.word	0x00016c75
   16e58:	00016c75 	.word	0x00016c75
   16e5c:	00016c75 	.word	0x00016c75
   16e60:	00016c75 	.word	0x00016c75
   16e64:	00016c75 	.word	0x00016c75
   16e68:	00016ef9 	.word	0x00016ef9
		BT_ERR("Invalid HCI CMD packet length");
   16e6c:	4836      	ldr	r0, [pc, #216]	; (16f48 <hci_cmd_handle+0x340>)
   16e6e:	6803      	ldr	r3, [r0, #0]
   16e70:	075c      	lsls	r4, r3, #29
   16e72:	f43f af0b 	beq.w	16c8c <hci_cmd_handle+0x84>
   16e76:	4a35      	ldr	r2, [pc, #212]	; (16f4c <hci_cmd_handle+0x344>)
   16e78:	2302      	movs	r3, #2
   16e7a:	e001      	b.n	16e80 <hci_cmd_handle+0x278>
		BT_ERR("No HCI Command header");
   16e7c:	4a34      	ldr	r2, [pc, #208]	; (16f50 <hci_cmd_handle+0x348>)
   16e7e:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI CMD packet length");
   16e80:	920e      	str	r2, [sp, #56]	; 0x38
   16e82:	9309      	str	r3, [sp, #36]	; 0x24
   16e84:	930d      	str	r3, [sp, #52]	; 0x34
   16e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16e8a:	462b      	mov	r3, r5
   16e8c:	aa0d      	add	r2, sp, #52	; 0x34
   16e8e:	f010 fd57 	bl	27940 <z_impl_z_log_msg2_static_create>
}
   16e92:	4628      	mov	r0, r5
   16e94:	b011      	add	sp, #68	; 0x44
   16e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   16e98:	2f01      	cmp	r7, #1
   16e9a:	f47f aeeb 	bne.w	16c74 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   16e9e:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   16ea0:	4b2c      	ldr	r3, [pc, #176]	; (16f54 <hci_cmd_handle+0x34c>)
   16ea2:	6811      	ldr	r1, [r2, #0]
   16ea4:	6852      	ldr	r2, [r2, #4]
   16ea6:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   16ea8:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   16eaa:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   16eac:	f013 fc74 	bl	2a798 <bt_hci_cmd_complete_create>
   16eb0:	2101      	movs	r1, #1
   16eb2:	4605      	mov	r5, r0
   16eb4:	3008      	adds	r0, #8
   16eb6:	f015 fdba 	bl	2ca2e <net_buf_simple_add>
	ccst->status = status;
   16eba:	2300      	movs	r3, #0
   16ebc:	7003      	strb	r3, [r0, #0]
}
   16ebe:	e6dd      	b.n	16c7c <hci_cmd_handle+0x74>
	switch (ocf) {
   16ec0:	2f7b      	cmp	r7, #123	; 0x7b
   16ec2:	f000 8378 	beq.w	175b6 <hci_cmd_handle+0x9ae>
   16ec6:	2f7c      	cmp	r7, #124	; 0x7c
   16ec8:	f47f aed4 	bne.w	16c74 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   16ecc:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   16ece:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   16ed0:	8859      	ldrh	r1, [r3, #2]
   16ed2:	b2b0      	uxth	r0, r6
   16ed4:	f003 faba 	bl	1a44c <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   16ed8:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16eda:	2103      	movs	r1, #3
   16edc:	8828      	ldrh	r0, [r5, #0]
   16ede:	f013 fc5b 	bl	2a798 <bt_hci_cmd_complete_create>
   16ee2:	2103      	movs	r1, #3
   16ee4:	4603      	mov	r3, r0
   16ee6:	3008      	adds	r0, #8
   16ee8:	9308      	str	r3, [sp, #32]
   16eea:	f015 fda0 	bl	2ca2e <net_buf_simple_add>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   16eee:	7004      	strb	r4, [r0, #0]
	return evt;
   16ef0:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   16ef2:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
   16ef6:	e6c1      	b.n	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16ef8:	2107      	movs	r1, #7
   16efa:	f013 fc4d 	bl	2a798 <bt_hci_cmd_complete_create>
   16efe:	2107      	movs	r1, #7
   16f00:	4603      	mov	r3, r0
   16f02:	3008      	adds	r0, #8
   16f04:	9308      	str	r3, [sp, #32]
   16f06:	f015 fd92 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16f0a:	4601      	mov	r1, r0
   16f0c:	2000      	movs	r0, #0
   16f0e:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   16f12:	f7ff fb37 	bl	16584 <ll_addr_read>
	return evt;
   16f16:	9d08      	ldr	r5, [sp, #32]
   16f18:	e6b0      	b.n	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16f1a:	2109      	movs	r1, #9
   16f1c:	f013 fc3c 	bl	2a798 <bt_hci_cmd_complete_create>
   16f20:	2109      	movs	r1, #9
   16f22:	4603      	mov	r3, r0
   16f24:	3008      	adds	r0, #8
   16f26:	9308      	str	r3, [sp, #32]
   16f28:	f015 fd81 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16f2c:	2100      	movs	r1, #0
   16f2e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16f30:	2208      	movs	r2, #8
	rp->status = 0x00;
   16f32:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16f36:	f013 fa1c 	bl	2a372 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   16f3a:	2360      	movs	r3, #96	; 0x60
	return evt;
   16f3c:	9d08      	ldr	r5, [sp, #32]
	rp->features[4] = (1 << 5) | (1 << 6);
   16f3e:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   16f40:	e69c      	b.n	16c7c <hci_cmd_handle+0x74>
   16f42:	bf00      	nop
   16f44:	20004a72 	.word	0x20004a72
   16f48:	200009f8 	.word	0x200009f8
   16f4c:	0002f82c 	.word	0x0002f82c
   16f50:	0002f814 	.word	0x0002f814
   16f54:	20000198 	.word	0x20000198
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16f58:	2141      	movs	r1, #65	; 0x41
   16f5a:	f013 fc1d 	bl	2a798 <bt_hci_cmd_complete_create>
   16f5e:	2141      	movs	r1, #65	; 0x41
   16f60:	4603      	mov	r3, r0
   16f62:	3008      	adds	r0, #8
   16f64:	9308      	str	r3, [sp, #32]
   16f66:	f015 fd62 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   16f6a:	2100      	movs	r1, #0
   16f6c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16f6e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   16f70:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16f74:	f013 f9fd 	bl	2a372 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   16f78:	79a1      	ldrb	r1, [r4, #6]
	rp->commands[0] |= BIT(5);
   16f7a:	7860      	ldrb	r0, [r4, #1]
	rp->commands[10] |= BIT(2);
   16f7c:	7ae3      	ldrb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   16f7e:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[5] |= BIT(6) | BIT(7);
   16f80:	f061 013f 	orn	r1, r1, #63	; 0x3f
   16f84:	71a1      	strb	r1, [r4, #6]
	rp->commands[22] |= BIT(2);
   16f86:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[0] |= BIT(5);
   16f88:	f040 0020 	orr.w	r0, r0, #32
	rp->commands[10] |= BIT(2);
   16f8c:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[22] |= BIT(2);
   16f90:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[0] |= BIT(5);
   16f94:	7060      	strb	r0, [r4, #1]
	rp->commands[10] |= BIT(2);
   16f96:	72e3      	strb	r3, [r4, #11]
	rp->commands[15] |= BIT(1);
   16f98:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
   16f9a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[22] |= BIT(2);
   16f9e:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   16fa0:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[15] |= BIT(1);
   16fa2:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[33] |= BIT(6) | BIT(7);
   16fa6:	f063 030f 	orn	r3, r3, #15
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   16faa:	f041 0117 	orr.w	r1, r1, #23
	rp->commands[33] |= BIT(6) | BIT(7);
   16fae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[15] |= BIT(1);
   16fb2:	7420      	strb	r0, [r4, #16]
	rp->commands[35] |= BIT(3);
   16fb4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[28] |= BIT(3);
   16fb8:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   16fba:	76a1      	strb	r1, [r4, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   16fbc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
	rp->commands[14] |= BIT(3) | BIT(5);
   16fc0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   16fc4:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(0);
   16fc8:	f040 0009 	orr.w	r0, r0, #9
	rp->commands[32] |= BIT(4) | BIT(5);
   16fcc:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	rp->commands[14] |= BIT(3) | BIT(5);
   16fd0:	73e2      	strb	r2, [r4, #15]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   16fd2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   16fd6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   16fda:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(0);
   16fde:	7760      	strb	r0, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   16fe0:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
   16fe4:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   16fe6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   16fea:	25ff      	movs	r5, #255	; 0xff
	rp->commands[39] |= BIT(2);
   16fec:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   16ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
   16ff4:	f060 0003 	orn	r0, r0, #3
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   16ff8:	f061 0106 	orn	r1, r1, #6
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   16ffc:	7725      	strb	r5, [r4, #28]
	rp->commands[26] |= BIT(4) | BIT(5);
   16ffe:	76e0      	strb	r0, [r4, #27]
	return evt;
   17000:	9d08      	ldr	r5, [sp, #32]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   17002:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   17006:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1700a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   1700e:	e635      	b.n	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17010:	2109      	movs	r1, #9
   17012:	f013 fbc1 	bl	2a798 <bt_hci_cmd_complete_create>
   17016:	2109      	movs	r1, #9
   17018:	4603      	mov	r3, r0
   1701a:	3008      	adds	r0, #8
   1701c:	9308      	str	r3, [sp, #32]
   1701e:	f015 fd06 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   17022:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   17024:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   17026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   1702a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1702c:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1702e:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   17032:	7083      	strb	r3, [r0, #2]
   17034:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   17036:	2305      	movs	r3, #5
	return evt;
   17038:	9d08      	ldr	r5, [sp, #32]
	rp->lmp_version = LL_VERSION_NUMBER;
   1703a:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1703c:	7144      	strb	r4, [r0, #5]
   1703e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   17040:	71c2      	strb	r2, [r0, #7]
   17042:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   17044:	e61a      	b.n	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   17046:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   17048:	79c1      	ldrb	r1, [r0, #7]
   1704a:	f006 fad1 	bl	1d5f0 <ll_priv_mode_set>
   1704e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   17050:	8828      	ldrh	r0, [r5, #0]
   17052:	2101      	movs	r1, #1
   17054:	f013 fba0 	bl	2a798 <bt_hci_cmd_complete_create>
   17058:	2101      	movs	r1, #1
   1705a:	4605      	mov	r5, r0
   1705c:	3008      	adds	r0, #8
   1705e:	f015 fce6 	bl	2ca2e <net_buf_simple_add>
	ccst->status = status;
   17062:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   17064:	e60a      	b.n	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17066:	2103      	movs	r1, #3
   17068:	f013 fb96 	bl	2a798 <bt_hci_cmd_complete_create>
   1706c:	2103      	movs	r1, #3
   1706e:	4603      	mov	r3, r0
   17070:	3008      	adds	r0, #8
   17072:	9308      	str	r3, [sp, #32]
   17074:	f015 fcdb 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   17078:	4601      	mov	r1, r0
   1707a:	2300      	movs	r3, #0
   1707c:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   17080:	3001      	adds	r0, #1
   17082:	f7ff faa9 	bl	165d8 <ll_tx_pwr_get>
	return evt;
   17086:	9d08      	ldr	r5, [sp, #32]
   17088:	e5f8      	b.n	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   1708a:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1708c:	7896      	ldrb	r6, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   1708e:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   17090:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   17092:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   17096:	07f3      	lsls	r3, r6, #31
		cmd->tx_phys |= mask_phys;
   17098:	bf48      	it	mi
   1709a:	f041 0103 	orrmi.w	r1, r1, #3
   1709e:	7913      	ldrb	r3, [r2, #4]
   170a0:	bf48      	it	mi
   170a2:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   170a4:	07b6      	lsls	r6, r6, #30
		cmd->rx_phys |= mask_phys;
   170a6:	bf44      	itt	mi
   170a8:	f043 0303 	orrmi.w	r3, r3, #3
   170ac:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   170ae:	ea43 0201 	orr.w	r2, r3, r1
   170b2:	f032 0203 	bics.w	r2, r2, #3
   170b6:	f040 82a7 	bne.w	17608 <hci_cmd_handle+0xa00>
	if (!(cmd->tx_phys & 0x07) ||
   170ba:	074e      	lsls	r6, r1, #29
   170bc:	f000 829e 	beq.w	175fc <hci_cmd_handle+0x9f4>
   170c0:	075a      	lsls	r2, r3, #29
   170c2:	f000 829b 	beq.w	175fc <hci_cmd_handle+0x9f4>
	if (phy_opts & 0x03) {
   170c6:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   170ca:	bf1c      	itt	ne
   170cc:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   170d0:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   170d4:	4638      	mov	r0, r7
   170d6:	f003 f94d 	bl	1a374 <ll_phy_req_send>
   170da:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   170dc:	8828      	ldrh	r0, [r5, #0]
   170de:	f013 fb6d 	bl	2a7bc <bt_hci_cmd_status_create>
   170e2:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   170e4:	e5ca      	b.n	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   170e6:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   170e8:	781a      	ldrb	r2, [r3, #0]
   170ea:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   170ec:	bf4a      	itet	mi
   170ee:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   170f0:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   170f2:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   170f4:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   170f6:	bf4a      	itet	mi
   170f8:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   170fa:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   170fc:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   170fe:	f003 f92f 	bl	1a360 <ll_phy_default_set>
   17102:	e7a4      	b.n	1704e <hci_cmd_handle+0x446>
	handle = sys_le16_to_cpu(cmd->handle);
   17104:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17106:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   17108:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1710a:	f013 fb45 	bl	2a798 <bt_hci_cmd_complete_create>
   1710e:	2105      	movs	r1, #5
   17110:	4603      	mov	r3, r0
   17112:	3008      	adds	r0, #8
   17114:	9308      	str	r3, [sp, #32]
   17116:	f015 fc8a 	bl	2ca2e <net_buf_simple_add>
   1711a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1711c:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1711e:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   17120:	1ce1      	adds	r1, r4, #3
   17122:	f003 f8ff 	bl	1a324 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   17126:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   17128:	7020      	strb	r0, [r4, #0]
   1712a:	2b00      	cmp	r3, #0
   1712c:	fa93 f2a3 	rbit	r2, r3
   17130:	7923      	ldrb	r3, [r4, #4]
   17132:	fab2 f282 	clz	r2, r2
   17136:	bf08      	it	eq
   17138:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1713c:	2b00      	cmp	r3, #0
   1713e:	fa93 f3a3 	rbit	r3, r3
   17142:	fab3 f383 	clz	r3, r3
   17146:	f102 0201 	add.w	r2, r2, #1
   1714a:	bf08      	it	eq
   1714c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   17150:	70e2      	strb	r2, [r4, #3]
   17152:	3301      	adds	r3, #1
	return evt;
   17154:	9d08      	ldr	r5, [sp, #32]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   17156:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   17158:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1715c:	e58e      	b.n	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1715e:	2109      	movs	r1, #9
   17160:	f013 fb1a 	bl	2a798 <bt_hci_cmd_complete_create>
   17164:	2109      	movs	r1, #9
   17166:	4603      	mov	r3, r0
   17168:	3008      	adds	r0, #8
   1716a:	9308      	str	r3, [sp, #32]
   1716c:	f015 fc5f 	bl	2ca2e <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   17170:	ab0a      	add	r3, sp, #40	; 0x28
   17172:	4604      	mov	r4, r0
   17174:	aa09      	add	r2, sp, #36	; 0x24
   17176:	f10d 011e 	add.w	r1, sp, #30
   1717a:	a807      	add	r0, sp, #28
   1717c:	f003 f8c6 	bl	1a30c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   17180:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   17184:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   17188:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1718c:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   17190:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   17194:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   17198:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1719a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   1719e:	7022      	strb	r2, [r4, #0]
	return evt;
   171a0:	9d08      	ldr	r5, [sp, #32]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   171a2:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   171a6:	e569      	b.n	16c7c <hci_cmd_handle+0x74>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   171a8:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   171aa:	8818      	ldrh	r0, [r3, #0]
   171ac:	f006 fa16 	bl	1d5dc <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   171b0:	8828      	ldrh	r0, [r5, #0]
   171b2:	2101      	movs	r1, #1
   171b4:	e67a      	b.n	16eac <hci_cmd_handle+0x2a4>
	status = ll_rl_enable(cmd->enable);
   171b6:	68a3      	ldr	r3, [r4, #8]
   171b8:	7818      	ldrb	r0, [r3, #0]
   171ba:	f006 f9f7 	bl	1d5ac <ll_rl_enable>
   171be:	e746      	b.n	1704e <hci_cmd_handle+0x446>
	memcpy(dst, src, sizeof(*dst));
   171c0:	2207      	movs	r2, #7
   171c2:	68a1      	ldr	r1, [r4, #8]
   171c4:	a80a      	add	r0, sp, #40	; 0x28
   171c6:	f013 f8c9 	bl	2a35c <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   171ca:	8828      	ldrh	r0, [r5, #0]
   171cc:	2107      	movs	r1, #7
   171ce:	f013 fae3 	bl	2a798 <bt_hci_cmd_complete_create>
   171d2:	2107      	movs	r1, #7
   171d4:	4603      	mov	r3, r0
   171d6:	3008      	adds	r0, #8
   171d8:	9308      	str	r3, [sp, #32]
   171da:	f015 fc28 	bl	2ca2e <net_buf_simple_add>
   171de:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   171e0:	1c41      	adds	r1, r0, #1
   171e2:	a80a      	add	r0, sp, #40	; 0x28
   171e4:	f006 f9b0 	bl	1d548 <ll_rl_lrpa_get>
   171e8:	7020      	strb	r0, [r4, #0]
	return evt;
   171ea:	9d08      	ldr	r5, [sp, #32]
   171ec:	e546      	b.n	16c7c <hci_cmd_handle+0x74>
   171ee:	2207      	movs	r2, #7
   171f0:	68a1      	ldr	r1, [r4, #8]
   171f2:	a80a      	add	r0, sp, #40	; 0x28
   171f4:	f013 f8b2 	bl	2a35c <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   171f8:	8828      	ldrh	r0, [r5, #0]
   171fa:	2107      	movs	r1, #7
   171fc:	f013 facc 	bl	2a798 <bt_hci_cmd_complete_create>
   17200:	2107      	movs	r1, #7
   17202:	4603      	mov	r3, r0
   17204:	3008      	adds	r0, #8
   17206:	9308      	str	r3, [sp, #32]
   17208:	f015 fc11 	bl	2ca2e <net_buf_simple_add>
   1720c:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   1720e:	1c41      	adds	r1, r0, #1
   17210:	a80a      	add	r0, sp, #40	; 0x28
   17212:	f006 f95f 	bl	1d4d4 <ll_rl_crpa_get>
   17216:	7020      	strb	r0, [r4, #0]
	return evt;
   17218:	9d08      	ldr	r5, [sp, #32]
   1721a:	e52f      	b.n	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1721c:	2102      	movs	r1, #2
   1721e:	f013 fabb 	bl	2a798 <bt_hci_cmd_complete_create>
   17222:	2102      	movs	r1, #2
   17224:	4603      	mov	r3, r0
   17226:	3008      	adds	r0, #8
   17228:	9308      	str	r3, [sp, #32]
   1722a:	f015 fc00 	bl	2ca2e <net_buf_simple_add>
   1722e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   17230:	f006 f80e 	bl	1d250 <ll_rl_size_get>
	rp->status = 0x00;
   17234:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   17236:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   17238:	7023      	strb	r3, [r4, #0]
	return evt;
   1723a:	9d08      	ldr	r5, [sp, #32]
   1723c:	e51e      	b.n	16c7c <hci_cmd_handle+0x74>
	status = ll_rl_clear();
   1723e:	f006 f809 	bl	1d254 <ll_rl_clear>
   17242:	e704      	b.n	1704e <hci_cmd_handle+0x446>
	status = ll_rl_remove(&cmd->peer_id_addr);
   17244:	68a0      	ldr	r0, [r4, #8]
   17246:	f006 f845 	bl	1d2d4 <ll_rl_remove>
   1724a:	e700      	b.n	1704e <hci_cmd_handle+0x446>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   1724c:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1724e:	f100 0217 	add.w	r2, r0, #23
   17252:	1dc1      	adds	r1, r0, #7
   17254:	f006 fbec 	bl	1da30 <ll_rl_add>
   17258:	e6f9      	b.n	1704e <hci_cmd_handle+0x446>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   1725a:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   1725c:	8859      	ldrh	r1, [r3, #2]
   1725e:	8818      	ldrh	r0, [r3, #0]
   17260:	f003 f84a 	bl	1a2f8 <ll_length_default_set>
   17264:	e6f3      	b.n	1704e <hci_cmd_handle+0x446>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17266:	2105      	movs	r1, #5
   17268:	f013 fa96 	bl	2a798 <bt_hci_cmd_complete_create>
   1726c:	2105      	movs	r1, #5
   1726e:	4603      	mov	r3, r0
   17270:	3008      	adds	r0, #8
   17272:	9308      	str	r3, [sp, #32]
   17274:	f015 fbdb 	bl	2ca2e <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   17278:	a90a      	add	r1, sp, #40	; 0x28
   1727a:	4604      	mov	r4, r0
   1727c:	a809      	add	r0, sp, #36	; 0x24
   1727e:	f003 f82f 	bl	1a2e0 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   17282:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   17286:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   1728a:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1728c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   17290:	7022      	strb	r2, [r4, #0]
	return evt;
   17292:	9d08      	ldr	r5, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   17294:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   17298:	e4f0      	b.n	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   1729a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1729c:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1729e:	889a      	ldrh	r2, [r3, #4]
   172a0:	8859      	ldrh	r1, [r3, #2]
   172a2:	b2b0      	uxth	r0, r6
   172a4:	f002 ffd2 	bl	1a24c <ll_length_req_send>
   172a8:	e616      	b.n	16ed8 <hci_cmd_handle+0x2d0>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   172aa:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   172ac:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   172ae:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   172b0:	7892      	ldrb	r2, [r2, #2]
   172b2:	9300      	str	r3, [sp, #0]
   172b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   172b8:	2102      	movs	r1, #2
   172ba:	b2a0      	uxth	r0, r4
   172bc:	f002 fea2 	bl	1a004 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   172c0:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   172c2:	4603      	mov	r3, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   172c4:	8828      	ldrh	r0, [r5, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   172c6:	461d      	mov	r5, r3
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   172c8:	f013 fa66 	bl	2a798 <bt_hci_cmd_complete_create>
   172cc:	2103      	movs	r1, #3
   172ce:	4603      	mov	r3, r0
   172d0:	3008      	adds	r0, #8
   172d2:	9308      	str	r3, [sp, #32]
   172d4:	f015 fbab 	bl	2ca2e <net_buf_simple_add>
	rp->status = status;
   172d8:	7005      	strb	r5, [r0, #0]
	return evt;
   172da:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   172dc:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   172e0:	e4cc      	b.n	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   172e2:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   172e4:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   172e6:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   172e8:	8853      	ldrh	r3, [r2, #2]
   172ea:	9102      	str	r1, [sp, #8]
   172ec:	88d1      	ldrh	r1, [r2, #6]
   172ee:	9101      	str	r1, [sp, #4]
   172f0:	8891      	ldrh	r1, [r2, #4]
   172f2:	9100      	str	r1, [sp, #0]
   172f4:	2200      	movs	r2, #0
   172f6:	e7df      	b.n	172b8 <hci_cmd_handle+0x6b0>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   172f8:	2109      	movs	r1, #9
   172fa:	f013 fa4d 	bl	2a798 <bt_hci_cmd_complete_create>
   172fe:	2109      	movs	r1, #9
   17300:	4603      	mov	r3, r0
   17302:	3008      	adds	r0, #8
   17304:	9308      	str	r3, [sp, #32]
   17306:	f015 fb92 	bl	2ca2e <net_buf_simple_add>
	dst[0] = val;
   1730a:	2470      	movs	r4, #112	; 0x70
	rp->status = 0x00;
   1730c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1730e:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
   17310:	220f      	movs	r2, #15
   17312:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   17314:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   17316:	70c2      	strb	r2, [r0, #3]
   17318:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1731a:	2413      	movs	r4, #19
	dst[0] = val;
   1731c:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
   1731e:	2202      	movs	r2, #2
	return evt;
   17320:	9d08      	ldr	r5, [sp, #32]
   17322:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   17324:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   17326:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   17328:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1732a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1732c:	e4a6      	b.n	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   1732e:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   17330:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   17332:	f102 030c 	add.w	r3, r2, #12
   17336:	f831 0b02 	ldrh.w	r0, [r1], #2
   1733a:	320a      	adds	r2, #10
   1733c:	f005 fa30 	bl	1c7a0 <ll_enc_req_send>
   17340:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   17342:	8828      	ldrh	r0, [r5, #0]
   17344:	f013 fa3a 	bl	2a7bc <bt_hci_cmd_status_create>
   17348:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1734a:	e497      	b.n	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1734c:	2109      	movs	r1, #9
   1734e:	f013 fa23 	bl	2a798 <bt_hci_cmd_complete_create>
   17352:	2109      	movs	r1, #9
   17354:	4603      	mov	r3, r0
   17356:	3008      	adds	r0, #8
   17358:	9308      	str	r3, [sp, #32]
   1735a:	f015 fb68 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   1735e:	2300      	movs	r3, #0
   17360:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   17364:	2108      	movs	r1, #8
   17366:	f007 f855 	bl	1e414 <lll_csrand_get>
	return evt;
   1736a:	9d08      	ldr	r5, [sp, #32]
   1736c:	e486      	b.n	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   1736e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   17370:	aa0a      	add	r2, sp, #40	; 0x28
   17372:	2300      	movs	r3, #0
   17374:	f100 0110 	add.w	r1, r0, #16
   17378:	f008 fcd0 	bl	1fd1c <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1737c:	8828      	ldrh	r0, [r5, #0]
   1737e:	2111      	movs	r1, #17
   17380:	f013 fa0a 	bl	2a798 <bt_hci_cmd_complete_create>
   17384:	2111      	movs	r1, #17
   17386:	4603      	mov	r3, r0
   17388:	3008      	adds	r0, #8
   1738a:	9308      	str	r3, [sp, #32]
   1738c:	f015 fb4f 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   17390:	2300      	movs	r3, #0
   17392:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   17396:	2210      	movs	r2, #16
   17398:	a90a      	add	r1, sp, #40	; 0x28
   1739a:	f012 ffdf 	bl	2a35c <memcpy>
	return evt;
   1739e:	9d08      	ldr	r5, [sp, #32]
   173a0:	e46c      	b.n	16c7c <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   173a2:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   173a4:	8818      	ldrh	r0, [r3, #0]
   173a6:	f002 ff19 	bl	1a1dc <ll_feature_req_send>
   173aa:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   173ac:	8828      	ldrh	r0, [r5, #0]
   173ae:	f013 fa05 	bl	2a7bc <bt_hci_cmd_status_create>
   173b2:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   173b4:	e462      	b.n	16c7c <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   173b6:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   173b8:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   173ba:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   173bc:	f013 f9ec 	bl	2a798 <bt_hci_cmd_complete_create>
   173c0:	2108      	movs	r1, #8
   173c2:	4603      	mov	r3, r0
   173c4:	4408      	add	r0, r1
   173c6:	9308      	str	r3, [sp, #32]
   173c8:	f015 fb31 	bl	2ca2e <net_buf_simple_add>
   173cc:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   173ce:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   173d0:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   173d2:	f002 fea1 	bl	1a118 <ll_chm_get>
	rp->status = status;
   173d6:	7020      	strb	r0, [r4, #0]
	return evt;
   173d8:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_le16_to_cpu(handle);
   173da:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   173de:	e44d      	b.n	16c7c <hci_cmd_handle+0x74>
	status = ll_chm_update(&cmd->ch_map[0]);
   173e0:	68a0      	ldr	r0, [r4, #8]
   173e2:	f005 fc8f 	bl	1cd04 <ll_chm_update>
   173e6:	e632      	b.n	1704e <hci_cmd_handle+0x446>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   173e8:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   173ea:	890a      	ldrh	r2, [r1, #8]
   173ec:	884b      	ldrh	r3, [r1, #2]
   173ee:	8808      	ldrh	r0, [r1, #0]
   173f0:	9202      	str	r2, [sp, #8]
   173f2:	88ca      	ldrh	r2, [r1, #6]
   173f4:	9201      	str	r2, [sp, #4]
   173f6:	8889      	ldrh	r1, [r1, #4]
   173f8:	9100      	str	r1, [sp, #0]
   173fa:	2200      	movs	r2, #0
   173fc:	4611      	mov	r1, r2
   173fe:	f002 fe01 	bl	1a004 <ll_conn_update>
   17402:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   17404:	8828      	ldrh	r0, [r5, #0]
   17406:	f013 f9d9 	bl	2a7bc <bt_hci_cmd_status_create>
   1740a:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1740c:	e436      	b.n	16c7c <hci_cmd_handle+0x74>
	status = ll_fal_remove(&cmd->addr);
   1740e:	68a0      	ldr	r0, [r4, #8]
   17410:	f005 fe8e 	bl	1d130 <ll_fal_remove>
   17414:	e61b      	b.n	1704e <hci_cmd_handle+0x446>
	status = ll_fal_add(&cmd->addr);
   17416:	68a0      	ldr	r0, [r4, #8]
   17418:	f005 fdee 	bl	1cff8 <ll_fal_add>
   1741c:	e617      	b.n	1704e <hci_cmd_handle+0x446>
	status = ll_fal_clear();
   1741e:	f005 fdc3 	bl	1cfa8 <ll_fal_clear>
   17422:	e614      	b.n	1704e <hci_cmd_handle+0x446>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17424:	2102      	movs	r1, #2
   17426:	f013 f9b7 	bl	2a798 <bt_hci_cmd_complete_create>
   1742a:	2102      	movs	r1, #2
   1742c:	4603      	mov	r3, r0
   1742e:	3008      	adds	r0, #8
   17430:	9308      	str	r3, [sp, #32]
   17432:	f015 fafc 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   17436:	2300      	movs	r3, #0
   17438:	7003      	strb	r3, [r0, #0]
   1743a:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   1743c:	f005 fdb2 	bl	1cfa4 <ll_fal_size_get>
   17440:	7060      	strb	r0, [r4, #1]
	return evt;
   17442:	9d08      	ldr	r5, [sp, #32]
   17444:	e41a      	b.n	16c7c <hci_cmd_handle+0x74>
	status = ll_connect_disable(node_rx);
   17446:	4630      	mov	r0, r6
   17448:	f005 f95c 	bl	1c704 <ll_connect_disable>
   1744c:	e5ff      	b.n	1704e <hci_cmd_handle+0x446>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   1744e:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   17450:	f8b4 6013 	ldrh.w	r6, [r4, #19]
   17454:	7963      	ldrb	r3, [r4, #5]
   17456:	7922      	ldrb	r2, [r4, #4]
   17458:	8861      	ldrh	r1, [r4, #2]
   1745a:	8820      	ldrh	r0, [r4, #0]
   1745c:	9604      	str	r6, [sp, #16]
   1745e:	f8b4 6011 	ldrh.w	r6, [r4, #17]
   17462:	9603      	str	r6, [sp, #12]
   17464:	f8b4 600f 	ldrh.w	r6, [r4, #15]
   17468:	9602      	str	r6, [sp, #8]
   1746a:	7b26      	ldrb	r6, [r4, #12]
   1746c:	9601      	str	r6, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   1746e:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   17470:	9400      	str	r4, [sp, #0]
   17472:	f7ec f961 	bl	3738 <ll_create_connection>
   17476:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   17478:	8828      	ldrh	r0, [r5, #0]
   1747a:	f013 f99f 	bl	2a7bc <bt_hci_cmd_status_create>
   1747e:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   17480:	f7ff bbfc 	b.w	16c7c <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   17484:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   17486:	7818      	ldrb	r0, [r3, #0]
   17488:	2800      	cmp	r0, #0
   1748a:	f000 80b2 	beq.w	175f2 <hci_cmd_handle+0x9ea>
   1748e:	785b      	ldrb	r3, [r3, #1]
   17490:	2b00      	cmp	r3, #0
   17492:	f000 80ae 	beq.w	175f2 <hci_cmd_handle+0x9ea>
			dup_count = 0;
   17496:	495f      	ldr	r1, [pc, #380]	; (17614 <hci_cmd_handle+0xa0c>)
			dup_curr = 0U;
   17498:	4a5f      	ldr	r2, [pc, #380]	; (17618 <hci_cmd_handle+0xa10>)
			dup_count = 0;
   1749a:	2300      	movs	r3, #0
   1749c:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   1749e:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   174a0:	f002 f83a 	bl	19518 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   174a4:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   174a6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   174a8:	f04f 0101 	mov.w	r1, #1
   174ac:	8828      	ldrh	r0, [r5, #0]
		status = BT_HCI_ERR_SUCCESS;
   174ae:	bf08      	it	eq
   174b0:	2400      	moveq	r4, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   174b2:	e5cf      	b.n	17054 <hci_cmd_handle+0x44c>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   174b4:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   174b6:	7963      	ldrb	r3, [r4, #5]
   174b8:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   174bc:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   174c0:	7820      	ldrb	r0, [r4, #0]
   174c2:	79a4      	ldrb	r4, [r4, #6]
   174c4:	9400      	str	r4, [sp, #0]
   174c6:	f7ea fab7 	bl	1a38 <ll_scan_params_set>
   174ca:	e5c0      	b.n	1704e <hci_cmd_handle+0x446>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   174cc:	68a1      	ldr	r1, [r4, #8]
   174ce:	2001      	movs	r0, #1
   174d0:	f7ff f82a 	bl	16528 <ll_addr_set>
   174d4:	e5bb      	b.n	1704e <hci_cmd_handle+0x446>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   174d6:	2109      	movs	r1, #9
   174d8:	f013 f95e 	bl	2a798 <bt_hci_cmd_complete_create>
   174dc:	2109      	movs	r1, #9
   174de:	4603      	mov	r3, r0
   174e0:	3008      	adds	r0, #8
   174e2:	9308      	str	r3, [sp, #32]
   174e4:	f015 faa3 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   174e8:	2100      	movs	r1, #0
   174ea:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   174ec:	2208      	movs	r2, #8
	rp->status = 0x00;
   174ee:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   174f2:	f012 ff3e 	bl	2a372 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   174f6:	f000 fe63 	bl	181c0 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   174fa:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   174fc:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   17500:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   17502:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   17504:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   17506:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   17508:	70a5      	strb	r5, [r4, #2]
   1750a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1750e:	7123      	strb	r3, [r4, #4]
   17510:	0a13      	lsrs	r3, r2, #8
	return evt;
   17512:	9d08      	ldr	r5, [sp, #32]
	dst[0] = val;
   17514:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   17516:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   17518:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   1751a:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   1751c:	f7ff bbae 	b.w	16c7c <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17520:	2104      	movs	r1, #4
   17522:	f013 f939 	bl	2a798 <bt_hci_cmd_complete_create>
   17526:	2104      	movs	r1, #4
   17528:	4603      	mov	r3, r0
   1752a:	3008      	adds	r0, #8
   1752c:	9308      	str	r3, [sp, #32]
   1752e:	f015 fa7e 	bl	2ca2e <net_buf_simple_add>
	rp->status = 0x00;
   17532:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   17534:	2103      	movs	r1, #3
	rp->status = 0x00;
   17536:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   17538:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1753a:	70c1      	strb	r1, [r0, #3]
	return evt;
   1753c:	9d08      	ldr	r5, [sp, #32]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   1753e:	7042      	strb	r2, [r0, #1]
   17540:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   17542:	f7ff bb9b 	b.w	16c7c <hci_cmd_handle+0x74>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   17546:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   17548:	4b34      	ldr	r3, [pc, #208]	; (1761c <hci_cmd_handle+0xa14>)
   1754a:	6811      	ldr	r1, [r2, #0]
   1754c:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1754e:	6019      	str	r1, [r3, #0]
   17550:	e4aa      	b.n	16ea8 <hci_cmd_handle+0x2a0>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   17552:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   17554:	7899      	ldrb	r1, [r3, #2]
   17556:	8818      	ldrh	r0, [r3, #0]
   17558:	f002 fdfe 	bl	1a158 <ll_terminate_ind_send>
   1755c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1755e:	8828      	ldrh	r0, [r5, #0]
   17560:	f013 f92c 	bl	2a7bc <bt_hci_cmd_status_create>
   17564:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   17566:	f7ff bb89 	b.w	16c7c <hci_cmd_handle+0x74>
	dup_count = DUP_FILTER_DISABLED;
   1756a:	482a      	ldr	r0, [pc, #168]	; (17614 <hci_cmd_handle+0xa0c>)
	event_mask = DEFAULT_EVENT_MASK;
   1756c:	492c      	ldr	r1, [pc, #176]	; (17620 <hci_cmd_handle+0xa18>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1756e:	4a2d      	ldr	r2, [pc, #180]	; (17624 <hci_cmd_handle+0xa1c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   17570:	4b2a      	ldr	r3, [pc, #168]	; (1761c <hci_cmd_handle+0xa14>)
	dup_count = DUP_FILTER_DISABLED;
   17572:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	event_mask = DEFAULT_EVENT_MASK;
   17576:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1757a:	f641 77ff 	movw	r7, #8191	; 0x1fff
   1757e:	e9c1 6700 	strd	r6, r7, [r1]
	dup_count = DUP_FILTER_DISABLED;
   17582:	6004      	str	r4, [r0, #0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   17584:	2100      	movs	r1, #0
   17586:	2000      	movs	r0, #0
   17588:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1758c:	201f      	movs	r0, #31
   1758e:	2100      	movs	r1, #0
   17590:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   17594:	f001 fea4 	bl	192e0 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   17598:	8828      	ldrh	r0, [r5, #0]
   1759a:	2101      	movs	r1, #1
   1759c:	f013 f8fc 	bl	2a798 <bt_hci_cmd_complete_create>
   175a0:	2101      	movs	r1, #1
   175a2:	4605      	mov	r5, r0
   175a4:	3008      	adds	r0, #8
   175a6:	f015 fa42 	bl	2ca2e <net_buf_simple_add>
	conn_count = 0U;
   175aa:	4a1f      	ldr	r2, [pc, #124]	; (17628 <hci_cmd_handle+0xa20>)
	ccst->status = status;
   175ac:	2300      	movs	r3, #0
   175ae:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   175b0:	6013      	str	r3, [r2, #0]
}
   175b2:	f7ff bb63 	b.w	16c7c <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   175b6:	68a3      	ldr	r3, [r4, #8]
   175b8:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   175ba:	a90a      	add	r1, sp, #40	; 0x28
   175bc:	b2b0      	uxth	r0, r6
   175be:	f002 ff21 	bl	1a404 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   175c2:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   175c4:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   175c6:	8828      	ldrh	r0, [r5, #0]
   175c8:	f013 f8e6 	bl	2a798 <bt_hci_cmd_complete_create>
   175cc:	2105      	movs	r1, #5
   175ce:	4603      	mov	r3, r0
   175d0:	3008      	adds	r0, #8
   175d2:	9308      	str	r3, [sp, #32]
   175d4:	f015 fa2b 	bl	2ca2e <net_buf_simple_add>
	rp->status = status;
   175d8:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   175da:	f8a0 6001 	strh.w	r6, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   175de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   175e2:	9d08      	ldr	r5, [sp, #32]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   175e4:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   175e8:	f7ff bb48 	b.w	16c7c <hci_cmd_handle+0x74>
   175ec:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   175ee:	4b0d      	ldr	r3, [pc, #52]	; (17624 <hci_cmd_handle+0xa1c>)
   175f0:	e7ab      	b.n	1754a <hci_cmd_handle+0x942>
		dup_count = DUP_FILTER_DISABLED;
   175f2:	4b08      	ldr	r3, [pc, #32]	; (17614 <hci_cmd_handle+0xa0c>)
   175f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   175f8:	601a      	str	r2, [r3, #0]
   175fa:	e751      	b.n	174a0 <hci_cmd_handle+0x898>
	return bt_hci_cmd_status_create(_opcode, status);
   175fc:	2112      	movs	r1, #18
   175fe:	f013 f8dd 	bl	2a7bc <bt_hci_cmd_status_create>
   17602:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   17604:	f7ff bb3a 	b.w	16c7c <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   17608:	2111      	movs	r1, #17
   1760a:	f013 f8d7 	bl	2a7bc <bt_hci_cmd_status_create>
   1760e:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   17610:	f7ff bb34 	b.w	16c7c <hci_cmd_handle+0x74>
   17614:	20003050 	.word	0x20003050
   17618:	20003054 	.word	0x20003054
   1761c:	200001a0 	.word	0x200001a0
   17620:	20000198 	.word	0x20000198
   17624:	200020c8 	.word	0x200020c8
   17628:	2000304c 	.word	0x2000304c

0001762c <hci_acl_handle>:
{
   1762c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   17630:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   17632:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   17634:	2b03      	cmp	r3, #3
{
   17636:	b089      	sub	sp, #36	; 0x24
	*evt = NULL;
   17638:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1763a:	d93d      	bls.n	176b8 <hci_acl_handle+0x8c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1763c:	4605      	mov	r5, r0
   1763e:	4688      	mov	r8, r1
   17640:	3008      	adds	r0, #8
   17642:	2104      	movs	r1, #4
   17644:	f015 fa24 	bl	2ca90 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   17648:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   1764a:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1764c:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   17650:	42b3      	cmp	r3, r6
   17652:	d34a      	bcc.n	176ea <hci_acl_handle+0xbe>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   17654:	2e1b      	cmp	r6, #27
   17656:	d841      	bhi.n	176dc <hci_acl_handle+0xb0>
	node_tx = ll_tx_mem_acquire();
   17658:	f002 fc86 	bl	19f68 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1765c:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   17660:	4604      	mov	r4, r0
   17662:	2800      	cmp	r0, #0
   17664:	d048      	beq.n	176f8 <hci_acl_handle+0xcc>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   17666:	08bb      	lsrs	r3, r7, #2
   17668:	d102      	bne.n	17670 <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   1766a:	b1ff      	cbz	r7, 176ac <hci_acl_handle+0x80>
   1766c:	2f01      	cmp	r7, #1
   1766e:	d004      	beq.n	1767a <hci_acl_handle+0x4e>
		return -EINVAL;
   17670:	f06f 0015 	mvn.w	r0, #21
}
   17674:	b009      	add	sp, #36	; 0x24
   17676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1767a:	7903      	ldrb	r3, [r0, #4]
   1767c:	f367 0301 	bfi	r3, r7, #0, #2
   17680:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   17682:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   17684:	68a9      	ldr	r1, [r5, #8]
   17686:	4632      	mov	r2, r6
   17688:	1de0      	adds	r0, r4, #7
   1768a:	f012 fe67 	bl	2a35c <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   1768e:	4621      	mov	r1, r4
   17690:	f3c9 000b 	ubfx	r0, r9, #0, #12
   17694:	f002 fc74 	bl	19f80 <ll_tx_mem_enqueue>
   17698:	2800      	cmp	r0, #0
   1769a:	d0eb      	beq.n	17674 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   1769c:	4836      	ldr	r0, [pc, #216]	; (17778 <hci_acl_handle+0x14c>)
   1769e:	6803      	ldr	r3, [r0, #0]
   176a0:	075b      	lsls	r3, r3, #29
   176a2:	d134      	bne.n	1770e <hci_acl_handle+0xe2>
		ll_tx_mem_release(node_tx);
   176a4:	4620      	mov	r0, r4
   176a6:	f002 fc65 	bl	19f74 <ll_tx_mem_release>
   176aa:	e7e1      	b.n	17670 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   176ac:	7903      	ldrb	r3, [r0, #4]
   176ae:	2202      	movs	r2, #2
   176b0:	f362 0301 	bfi	r3, r2, #0, #2
   176b4:	7103      	strb	r3, [r0, #4]
		break;
   176b6:	e7e4      	b.n	17682 <hci_acl_handle+0x56>
		BT_ERR("No HCI ACL header");
   176b8:	482f      	ldr	r0, [pc, #188]	; (17778 <hci_acl_handle+0x14c>)
   176ba:	6803      	ldr	r3, [r0, #0]
   176bc:	075f      	lsls	r7, r3, #29
   176be:	d0d7      	beq.n	17670 <hci_acl_handle+0x44>
   176c0:	4a2e      	ldr	r2, [pc, #184]	; (1777c <hci_acl_handle+0x150>)
   176c2:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI ACL packet length");
   176c4:	9206      	str	r2, [sp, #24]
   176c6:	9301      	str	r3, [sp, #4]
   176c8:	9305      	str	r3, [sp, #20]
   176ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   176ce:	4623      	mov	r3, r4
   176d0:	aa05      	add	r2, sp, #20
   176d2:	f010 f935 	bl	27940 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   176d6:	f06f 0015 	mvn.w	r0, #21
		BT_ERR("Invalid HCI ACL packet length");
   176da:	e7cb      	b.n	17674 <hci_acl_handle+0x48>
		BT_ERR("Invalid HCI ACL Data length");
   176dc:	4826      	ldr	r0, [pc, #152]	; (17778 <hci_acl_handle+0x14c>)
   176de:	6803      	ldr	r3, [r0, #0]
   176e0:	075d      	lsls	r5, r3, #29
   176e2:	d0c5      	beq.n	17670 <hci_acl_handle+0x44>
   176e4:	4a26      	ldr	r2, [pc, #152]	; (17780 <hci_acl_handle+0x154>)
   176e6:	2302      	movs	r3, #2
   176e8:	e7ec      	b.n	176c4 <hci_acl_handle+0x98>
		BT_ERR("Invalid HCI ACL packet length");
   176ea:	4823      	ldr	r0, [pc, #140]	; (17778 <hci_acl_handle+0x14c>)
   176ec:	6803      	ldr	r3, [r0, #0]
   176ee:	075e      	lsls	r6, r3, #29
   176f0:	d0be      	beq.n	17670 <hci_acl_handle+0x44>
   176f2:	4a24      	ldr	r2, [pc, #144]	; (17784 <hci_acl_handle+0x158>)
   176f4:	2302      	movs	r3, #2
   176f6:	e7e5      	b.n	176c4 <hci_acl_handle+0x98>
		BT_ERR("Tx Buffer Overflow");
   176f8:	481f      	ldr	r0, [pc, #124]	; (17778 <hci_acl_handle+0x14c>)
   176fa:	6803      	ldr	r3, [r0, #0]
   176fc:	0759      	lsls	r1, r3, #29
   176fe:	d12e      	bne.n	1775e <hci_acl_handle+0x132>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   17700:	4b21      	ldr	r3, [pc, #132]	; (17788 <hci_acl_handle+0x15c>)
   17702:	681b      	ldr	r3, [r3, #0]
   17704:	019a      	lsls	r2, r3, #6
   17706:	d40e      	bmi.n	17726 <hci_acl_handle+0xfa>
		return -ENOBUFS;
   17708:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1770c:	e7b2      	b.n	17674 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   1770e:	2302      	movs	r3, #2
   17710:	4a1e      	ldr	r2, [pc, #120]	; (1778c <hci_acl_handle+0x160>)
   17712:	9206      	str	r2, [sp, #24]
   17714:	9301      	str	r3, [sp, #4]
   17716:	9305      	str	r3, [sp, #20]
   17718:	2300      	movs	r3, #0
   1771a:	aa05      	add	r2, sp, #20
   1771c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17720:	f010 f90e 	bl	27940 <z_impl_z_log_msg2_static_create>
   17724:	e7be      	b.n	176a4 <hci_acl_handle+0x78>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   17726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1772a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1772e:	2001      	movs	r0, #1
   17730:	f7f4 ff22 	bl	c578 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   17734:	2102      	movs	r1, #2
   17736:	f8c8 0000 	str.w	r0, [r8]
   1773a:	3008      	adds	r0, #8
   1773c:	f015 f977 	bl	2ca2e <net_buf_simple_add>
	hdr->len = len;
   17740:	2401      	movs	r4, #1
	hdr->evt = evt;
   17742:	231a      	movs	r3, #26
   17744:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17746:	7044      	strb	r4, [r0, #1]
   17748:	f8d8 0000 	ldr.w	r0, [r8]
   1774c:	4621      	mov	r1, r4
   1774e:	3008      	adds	r0, #8
   17750:	f015 f96d 	bl	2ca2e <net_buf_simple_add>
   17754:	4603      	mov	r3, r0
		return -ENOBUFS;
   17756:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1775a:	701c      	strb	r4, [r3, #0]
   1775c:	e78a      	b.n	17674 <hci_acl_handle+0x48>
		BT_ERR("Tx Buffer Overflow");
   1775e:	2302      	movs	r3, #2
   17760:	4a0b      	ldr	r2, [pc, #44]	; (17790 <hci_acl_handle+0x164>)
   17762:	9206      	str	r2, [sp, #24]
   17764:	9301      	str	r3, [sp, #4]
   17766:	9305      	str	r3, [sp, #20]
   17768:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1776c:	4623      	mov	r3, r4
   1776e:	aa05      	add	r2, sp, #20
   17770:	f010 f8e6 	bl	27940 <z_impl_z_log_msg2_static_create>
   17774:	e7c4      	b.n	17700 <hci_acl_handle+0xd4>
   17776:	bf00      	nop
   17778:	200009f8 	.word	0x200009f8
   1777c:	0002f84c 	.word	0x0002f84c
   17780:	0002f880 	.word	0x0002f880
   17784:	0002f860 	.word	0x0002f860
   17788:	20000198 	.word	0x20000198
   1778c:	0002f8b0 	.word	0x0002f8b0
   17790:	0002f89c 	.word	0x0002f89c

00017794 <hci_disconn_complete_encode>:
{
   17794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   17796:	4b0e      	ldr	r3, [pc, #56]	; (177d0 <hci_disconn_complete_encode+0x3c>)
   17798:	681b      	ldr	r3, [r3, #0]
   1779a:	06db      	lsls	r3, r3, #27
   1779c:	d400      	bmi.n	177a0 <hci_disconn_complete_encode+0xc>
}
   1779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177a0:	f102 0408 	add.w	r4, r2, #8
   177a4:	4605      	mov	r5, r0
   177a6:	460e      	mov	r6, r1
   177a8:	4620      	mov	r0, r4
   177aa:	2102      	movs	r1, #2
   177ac:	f015 f93f 	bl	2ca2e <net_buf_simple_add>
   177b0:	4603      	mov	r3, r0
	hdr->len = len;
   177b2:	2104      	movs	r1, #4
	hdr->evt = evt;
   177b4:	2205      	movs	r2, #5
	hdr->len = len;
   177b6:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   177b8:	701a      	strb	r2, [r3, #0]
   177ba:	4620      	mov	r0, r4
   177bc:	f015 f937 	bl	2ca2e <net_buf_simple_add>
   177c0:	2700      	movs	r7, #0
	ep->status = 0x00;
   177c2:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   177c4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   177c8:	782b      	ldrb	r3, [r5, #0]
   177ca:	70c3      	strb	r3, [r0, #3]
}
   177cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177ce:	bf00      	nop
   177d0:	20000198 	.word	0x20000198

000177d4 <hci_disconn_complete_process>:
	conn_count--;
   177d4:	4a02      	ldr	r2, [pc, #8]	; (177e0 <hci_disconn_complete_process+0xc>)
   177d6:	6813      	ldr	r3, [r2, #0]
   177d8:	3b01      	subs	r3, #1
   177da:	6013      	str	r3, [r2, #0]
}
   177dc:	4770      	bx	lr
   177de:	bf00      	nop
   177e0:	2000304c 	.word	0x2000304c

000177e4 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   177e4:	7f03      	ldrb	r3, [r0, #28]
   177e6:	f003 0303 	and.w	r3, r3, #3
   177ea:	3b01      	subs	r3, #1
   177ec:	2b01      	cmp	r3, #1
{
   177ee:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   177f0:	d90d      	bls.n	1780e <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   177f2:	4a16      	ldr	r2, [pc, #88]	; (1784c <hci_acl_encode+0x68>)
   177f4:	4916      	ldr	r1, [pc, #88]	; (17850 <hci_acl_encode+0x6c>)
   177f6:	4817      	ldr	r0, [pc, #92]	; (17854 <hci_acl_encode+0x70>)
   177f8:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   177fc:	f00f f8ae 	bl	2695c <printk>
   17800:	4040      	eors	r0, r0
   17802:	f380 8811 	msr	BASEPRI, r0
   17806:	f04f 0003 	mov.w	r0, #3
   1780a:	df02      	svc	2
		break;
	}
}
   1780c:	bd70      	pop	{r4, r5, r6, pc}
   1780e:	4604      	mov	r4, r0
   17810:	f101 0508 	add.w	r5, r1, #8
   17814:	4628      	mov	r0, r5
   17816:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   17818:	88e6      	ldrh	r6, [r4, #6]
   1781a:	f015 f908 	bl	2ca2e <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1781e:	7f23      	ldrb	r3, [r4, #28]
   17820:	f003 0303 	and.w	r3, r3, #3
   17824:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   17826:	bf0c      	ite	eq
   17828:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1782c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   17830:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   17832:	7f61      	ldrb	r1, [r4, #29]
   17834:	8041      	strh	r1, [r0, #2]
   17836:	4628      	mov	r0, r5
   17838:	f015 f8f9 	bl	2ca2e <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1783c:	7f62      	ldrb	r2, [r4, #29]
   1783e:	f104 011f 	add.w	r1, r4, #31
}
   17842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   17846:	f012 bd89 	b.w	2a35c <memcpy>
   1784a:	bf00      	nop
   1784c:	0002f8c4 	.word	0x0002f8c4
   17850:	0002f794 	.word	0x0002f794
   17854:	0002f6fc 	.word	0x0002f6fc

00017858 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   17858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1785c:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1785e:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   17862:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17864:	f1bc 0f03 	cmp.w	ip, #3
{
   17868:	af04      	add	r7, sp, #16
   1786a:	4604      	mov	r4, r0
   1786c:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1786e:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17872:	d01e      	beq.n	178b2 <hci_evt_encode+0x5a>
	switch (node_rx->hdr.type) {
   17874:	f1ac 0c05 	sub.w	ip, ip, #5
   17878:	f1bc 0f17 	cmp.w	ip, #23
   1787c:	d833      	bhi.n	178e6 <hci_evt_encode+0x8e>
   1787e:	e8df f01c 	tbh	[pc, ip, lsl #1]
   17882:	0043      	.short	0x0043
   17884:	00320032 	.word	0x00320032
   17888:	00320032 	.word	0x00320032
   1788c:	00320032 	.word	0x00320032
   17890:	00320032 	.word	0x00320032
   17894:	00320032 	.word	0x00320032
   17898:	00320032 	.word	0x00320032
   1789c:	00320032 	.word	0x00320032
   178a0:	00320032 	.word	0x00320032
   178a4:	012200bf 	.word	0x012200bf
   178a8:	01580128 	.word	0x01580128
   178ac:	0182016f 	.word	0x0182016f
   178b0:	01b5      	.short	0x01b5
	switch (pdu_data->llctrl.opcode) {
   178b2:	7fc3      	ldrb	r3, [r0, #31]
   178b4:	3b03      	subs	r3, #3
   178b6:	2b12      	cmp	r3, #18
   178b8:	f200 81ce 	bhi.w	17c58 <hci_evt_encode+0x400>
   178bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   178c0:	01cc0231 	.word	0x01cc0231
   178c4:	025e01cc 	.word	0x025e01cc
   178c8:	01cc0277 	.word	0x01cc0277
   178cc:	01cc0290 	.word	0x01cc0290
   178d0:	01cc01cc 	.word	0x01cc01cc
   178d4:	01cc02cb 	.word	0x01cc02cb
   178d8:	01cc0297 	.word	0x01cc0297
   178dc:	01cc02bc 	.word	0x01cc02bc
   178e0:	01da01cc 	.word	0x01da01cc
   178e4:	01da      	.short	0x01da
		LL_ASSERT(0);
   178e6:	4ab8      	ldr	r2, [pc, #736]	; (17bc8 <hci_evt_encode+0x370>)
   178e8:	49b8      	ldr	r1, [pc, #736]	; (17bcc <hci_evt_encode+0x374>)
   178ea:	48b9      	ldr	r0, [pc, #740]	; (17bd0 <hci_evt_encode+0x378>)
   178ec:	f641 43af 	movw	r3, #7343	; 0x1caf
   178f0:	f00f f834 	bl	2695c <printk>
   178f4:	4040      	eors	r0, r0
   178f6:	f380 8811 	msr	BASEPRI, r0
   178fa:	f04f 0003 	mov.w	r0, #3
   178fe:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   17900:	372c      	adds	r7, #44	; 0x2c
   17902:	46bd      	mov	sp, r7
   17904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   17908:	4ab2      	ldr	r2, [pc, #712]	; (17bd4 <hci_evt_encode+0x37c>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1790a:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   1790c:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   1790e:	f894 9019 	ldrb.w	r9, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   17912:	e892 0003 	ldmia.w	r2, {r0, r1}
   17916:	0c0a      	lsrs	r2, r1, #16
   17918:	75ba      	strb	r2, [r7, #22]
	if (adv->tx_addr) {
   1791a:	7f22      	ldrb	r2, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1791c:	6138      	str	r0, [r7, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1791e:	425b      	negs	r3, r3
	if (adv->tx_addr) {
   17920:	0652      	lsls	r2, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   17922:	82b9      	strh	r1, [r7, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   17924:	fa4f f883 	sxtb.w	r8, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
   17928:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   1792c:	f100 82c5 	bmi.w	17eba <hci_evt_encode+0x662>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17930:	4ba9      	ldr	r3, [pc, #676]	; (17bd8 <hci_evt_encode+0x380>)
   17932:	685b      	ldr	r3, [r3, #4]
   17934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   17938:	2e00      	cmp	r6, #0
   1793a:	f040 8303 	bne.w	17f44 <hci_evt_encode+0x6ec>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1793e:	2b00      	cmp	r3, #0
   17940:	d0de      	beq.n	17900 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   17942:	4ba6      	ldr	r3, [pc, #664]	; (17bdc <hci_evt_encode+0x384>)
   17944:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17946:	079e      	lsls	r6, r3, #30
   17948:	d5da      	bpl.n	17900 <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
   1794a:	4ba5      	ldr	r3, [pc, #660]	; (17be0 <hci_evt_encode+0x388>)
   1794c:	681b      	ldr	r3, [r3, #0]
   1794e:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   17950:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
   17954:	db09      	blt.n	1796a <hci_evt_encode+0x112>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   17956:	7f20      	ldrb	r0, [r4, #28]
   17958:	465a      	mov	r2, fp
   1795a:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1795e:	f000 000f 	and.w	r0, r0, #15
   17962:	f7fe fffb 	bl	1695c <dup_found.part.0>
	if (dup_scan &&
   17966:	2800      	cmp	r0, #0
   17968:	d1ca      	bne.n	17900 <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1796a:	7f23      	ldrb	r3, [r4, #28]
   1796c:	f003 030f 	and.w	r3, r3, #15
   17970:	2b01      	cmp	r3, #1
   17972:	f000 83ac 	beq.w	180ce <hci_evt_encode+0x876>
		data_len = (adv->len - BDADDR_SIZE);
   17976:	7f63      	ldrb	r3, [r4, #29]
   17978:	1f9e      	subs	r6, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1797a:	1d9a      	adds	r2, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
   1797c:	b2f6      	uxtb	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1797e:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   17980:	b2d2      	uxtb	r2, r2
   17982:	603a      	str	r2, [r7, #0]
	return net_buf_add(buf, melen);
   17984:	b2db      	uxtb	r3, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   17986:	46b2      	mov	sl, r6
   17988:	3508      	adds	r5, #8
   1798a:	2102      	movs	r1, #2
   1798c:	4628      	mov	r0, r5
   1798e:	607b      	str	r3, [r7, #4]
   17990:	f015 f84d 	bl	2ca2e <net_buf_simple_add>
	hdr->len = len;
   17994:	683b      	ldr	r3, [r7, #0]
   17996:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   17998:	213e      	movs	r1, #62	; 0x3e
   1799a:	7001      	strb	r1, [r0, #0]
   1799c:	2101      	movs	r1, #1
   1799e:	4628      	mov	r0, r5
   179a0:	f015 f845 	bl	2ca2e <net_buf_simple_add>
   179a4:	687b      	ldr	r3, [r7, #4]
   179a6:	4684      	mov	ip, r0
   179a8:	4619      	mov	r1, r3
	me->subevent = subevt;
   179aa:	2302      	movs	r3, #2
   179ac:	f88c 3000 	strb.w	r3, [ip]
   179b0:	4628      	mov	r0, r5
   179b2:	f015 f83c 	bl	2ca2e <net_buf_simple_add>
	sep->num_reports = 1U;
   179b6:	2301      	movs	r3, #1
   179b8:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   179ba:	7f23      	ldrb	r3, [r4, #28]
   179bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   179c0:	f003 030f 	and.w	r3, r3, #15
   179c4:	4413      	add	r3, r2
   179c6:	4605      	mov	r5, r0
   179c8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
   179cc:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   179ce:	f005 fc3f 	bl	1d250 <ll_rl_size_get>
   179d2:	4581      	cmp	r9, r0
   179d4:	f080 8344 	bcs.w	18060 <hci_evt_encode+0x808>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   179d8:	4648      	mov	r0, r9
   179da:	1cea      	adds	r2, r5, #3
   179dc:	1ca9      	adds	r1, r5, #2
   179de:	f005 fbf1 	bl	1d1c4 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   179e2:	78ab      	ldrb	r3, [r5, #2]
   179e4:	3302      	adds	r3, #2
   179e6:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   179e8:	f105 090a 	add.w	r9, r5, #10
	adv_info->length = data_len;
   179ec:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   179ee:	4652      	mov	r2, sl
   179f0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   179f4:	4648      	mov	r0, r9
   179f6:	f012 fcb1 	bl	2a35c <memcpy>
	*prssi = rssi;
   179fa:	f809 800a 	strb.w	r8, [r9, sl]
   179fe:	e77f      	b.n	17900 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   17a00:	f018 0f01 	tst.w	r8, #1
   17a04:	f040 824b 	bne.w	17e9e <hci_evt_encode+0x646>
	status = cc->status;
   17a08:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   17a0c:	f1b8 0f00 	cmp.w	r8, #0
   17a10:	f000 823c 	beq.w	17e8c <hci_evt_encode+0x634>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17a14:	4b70      	ldr	r3, [pc, #448]	; (17bd8 <hci_evt_encode+0x380>)
   17a16:	685b      	ldr	r3, [r3, #4]
   17a18:	0098      	lsls	r0, r3, #2
   17a1a:	f57f af71 	bpl.w	17900 <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   17a1e:	4b6f      	ldr	r3, [pc, #444]	; (17bdc <hci_evt_encode+0x384>)
   17a20:	681b      	ldr	r3, [r3, #0]
   17a22:	f240 2201 	movw	r2, #513	; 0x201
   17a26:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   17a28:	f403 7900 	and.w	r9, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   17a2c:	f43f af68 	beq.w	17900 <hci_evt_encode+0xa8>
   17a30:	3508      	adds	r5, #8
	if (!status) {
   17a32:	f1b8 0f00 	cmp.w	r8, #0
   17a36:	f040 8267 	bne.w	17f08 <hci_evt_encode+0x6b0>
		conn_count++;
   17a3a:	4a6a      	ldr	r2, [pc, #424]	; (17be4 <hci_evt_encode+0x38c>)
   17a3c:	6813      	ldr	r3, [r2, #0]
   17a3e:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   17a40:	f104 0a1f 	add.w	sl, r4, #31
		conn_count++;
   17a44:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   17a46:	f1b9 0f00 	cmp.w	r9, #0
   17a4a:	f000 82d9 	beq.w	18000 <hci_evt_encode+0x7a8>
   17a4e:	2102      	movs	r1, #2
   17a50:	4628      	mov	r0, r5
   17a52:	f014 ffec 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17a56:	233e      	movs	r3, #62	; 0x3e
   17a58:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17a5a:	231f      	movs	r3, #31
   17a5c:	7043      	strb	r3, [r0, #1]
   17a5e:	2101      	movs	r1, #1
   17a60:	4628      	mov	r0, r5
   17a62:	f014 ffe4 	bl	2ca2e <net_buf_simple_add>
   17a66:	4603      	mov	r3, r0
	me->subevent = subevt;
   17a68:	220a      	movs	r2, #10
   17a6a:	701a      	strb	r2, [r3, #0]
   17a6c:	4628      	mov	r0, r5
   17a6e:	211e      	movs	r1, #30
   17a70:	f014 ffdd 	bl	2ca2e <net_buf_simple_add>
		leecc->status = 0x00;
   17a74:	f880 8000 	strb.w	r8, [r0]
		leecc->handle = sys_cpu_to_le16(handle);
   17a78:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   17a7c:	7f63      	ldrb	r3, [r4, #29]
   17a7e:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   17a80:	7fa3      	ldrb	r3, [r4, #30]
   17a82:	7103      	strb	r3, [r0, #4]
   17a84:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   17a86:	2206      	movs	r2, #6
   17a88:	4651      	mov	r1, sl
   17a8a:	3005      	adds	r0, #5
   17a8c:	f012 fc66 	bl	2a35c <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   17a90:	2206      	movs	r2, #6
   17a92:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   17a96:	f105 000b 	add.w	r0, r5, #11
   17a9a:	f012 fc5f 	bl	2a35c <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   17a9e:	2206      	movs	r2, #6
   17aa0:	f104 0125 	add.w	r1, r4, #37	; 0x25
   17aa4:	f105 0011 	add.w	r0, r5, #17
   17aa8:	f012 fc58 	bl	2a35c <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   17aac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   17aae:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   17ab0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   17ab2:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   17ab6:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   17aba:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   17abe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   17ac2:	776b      	strb	r3, [r5, #29]
		return;
   17ac4:	e71c      	b.n	17900 <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   17ac6:	460a      	mov	r2, r1
   17ac8:	4640      	mov	r0, r8
   17aca:	4631      	mov	r1, r6
   17acc:	f7ff fe62 	bl	17794 <hci_disconn_complete_encode>
		break;
   17ad0:	e716      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17ad2:	4b41      	ldr	r3, [pc, #260]	; (17bd8 <hci_evt_encode+0x380>)
   17ad4:	685b      	ldr	r3, [r3, #4]
   17ad6:	0099      	lsls	r1, r3, #2
   17ad8:	f57f af12 	bpl.w	17900 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   17adc:	4b3f      	ldr	r3, [pc, #252]	; (17bdc <hci_evt_encode+0x384>)
   17ade:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17ae0:	075a      	lsls	r2, r3, #29
   17ae2:	f57f af0d 	bpl.w	17900 <hci_evt_encode+0xa8>
   17ae6:	3508      	adds	r5, #8
   17ae8:	2102      	movs	r1, #2
   17aea:	4628      	mov	r0, r5
   17aec:	f014 ff9f 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17af0:	233e      	movs	r3, #62	; 0x3e
   17af2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17af4:	230a      	movs	r3, #10
   17af6:	7043      	strb	r3, [r0, #1]
   17af8:	2101      	movs	r1, #1
   17afa:	4628      	mov	r0, r5
   17afc:	f014 ff97 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   17b00:	2303      	movs	r3, #3
   17b02:	7003      	strb	r3, [r0, #0]
   17b04:	2109      	movs	r1, #9
   17b06:	4628      	mov	r0, r5
   17b08:	f014 ff91 	bl	2ca2e <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17b0c:	f018 0f01 	tst.w	r8, #1
   17b10:	4605      	mov	r5, r0
   17b12:	f040 82c7 	bne.w	180a4 <hci_evt_encode+0x84c>
	sep->status = cu->status;
   17b16:	7f23      	ldrb	r3, [r4, #28]
   17b18:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   17b1a:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   17b1c:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   17b1e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   17b20:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   17b24:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   17b28:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   17b2c:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   17b30:	e6e6      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   17b32:	4b29      	ldr	r3, [pc, #164]	; (17bd8 <hci_evt_encode+0x380>)
   17b34:	685b      	ldr	r3, [r3, #4]
   17b36:	041b      	lsls	r3, r3, #16
   17b38:	f04f 0400 	mov.w	r4, #0
   17b3c:	f57f aee0 	bpl.w	17900 <hci_evt_encode+0xa8>
   17b40:	3508      	adds	r5, #8
   17b42:	2102      	movs	r1, #2
   17b44:	4628      	mov	r0, r5
   17b46:	f014 ff72 	bl	2ca2e <net_buf_simple_add>
	hdr->len = len;
   17b4a:	2103      	movs	r1, #3
	hdr->evt = evt;
   17b4c:	2330      	movs	r3, #48	; 0x30
   17b4e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17b50:	7041      	strb	r1, [r0, #1]
   17b52:	4628      	mov	r0, r5
   17b54:	f014 ff6b 	bl	2ca2e <net_buf_simple_add>
	ep->status = 0x00;
   17b58:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17b5a:	f8a0 6001 	strh.w	r6, [r0, #1]
   17b5e:	e6cf      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   17b60:	4b21      	ldr	r3, [pc, #132]	; (17be8 <hci_evt_encode+0x390>)
   17b62:	681b      	ldr	r3, [r3, #0]
   17b64:	021c      	lsls	r4, r3, #8
   17b66:	f57f aecb 	bpl.w	17900 <hci_evt_encode+0xa8>
   17b6a:	3508      	adds	r5, #8
   17b6c:	2102      	movs	r1, #2
   17b6e:	4628      	mov	r0, r5
   17b70:	f014 ff5d 	bl	2ca2e <net_buf_simple_add>
	hdr->len = len;
   17b74:	2102      	movs	r1, #2
	hdr->evt = evt;
   17b76:	2357      	movs	r3, #87	; 0x57
   17b78:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17b7a:	7041      	strb	r1, [r0, #1]
   17b7c:	4628      	mov	r0, r5
   17b7e:	f014 ff56 	bl	2ca2e <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   17b82:	8006      	strh	r6, [r0, #0]
   17b84:	e6bc      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17b86:	4b14      	ldr	r3, [pc, #80]	; (17bd8 <hci_evt_encode+0x380>)
   17b88:	685b      	ldr	r3, [r3, #4]
   17b8a:	0098      	lsls	r0, r3, #2
   17b8c:	f57f aeb8 	bpl.w	17900 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   17b90:	4b12      	ldr	r3, [pc, #72]	; (17bdc <hci_evt_encode+0x384>)
   17b92:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17b94:	0319      	lsls	r1, r3, #12
   17b96:	f57f aeb3 	bpl.w	17900 <hci_evt_encode+0xa8>
   17b9a:	3508      	adds	r5, #8
   17b9c:	2102      	movs	r1, #2
   17b9e:	4628      	mov	r0, r5
   17ba0:	f014 ff45 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17ba4:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   17ba6:	2304      	movs	r3, #4
	hdr->evt = evt;
   17ba8:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17baa:	7043      	strb	r3, [r0, #1]
   17bac:	2101      	movs	r1, #1
   17bae:	4628      	mov	r0, r5
   17bb0:	f014 ff3d 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   17bb4:	2314      	movs	r3, #20
   17bb6:	7003      	strb	r3, [r0, #0]
   17bb8:	2103      	movs	r1, #3
   17bba:	4628      	mov	r0, r5
   17bbc:	f014 ff37 	bl	2ca2e <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   17bc0:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   17bc2:	7f23      	ldrb	r3, [r4, #28]
   17bc4:	7083      	strb	r3, [r0, #2]
   17bc6:	e69b      	b.n	17900 <hci_evt_encode+0xa8>
   17bc8:	0002f8c4 	.word	0x0002f8c4
   17bcc:	0002f794 	.word	0x0002f794
   17bd0:	0002f6fc 	.word	0x0002f6fc
   17bd4:	0002e5b4 	.word	0x0002e5b4
   17bd8:	20000198 	.word	0x20000198
   17bdc:	200001a0 	.word	0x200001a0
   17be0:	20003050 	.word	0x20003050
   17be4:	2000304c 	.word	0x2000304c
   17be8:	200020c8 	.word	0x200020c8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17bec:	4bbc      	ldr	r3, [pc, #752]	; (17ee0 <hci_evt_encode+0x688>)
   17bee:	685b      	ldr	r3, [r3, #4]
   17bf0:	009a      	lsls	r2, r3, #2
   17bf2:	d566      	bpl.n	17cc2 <hci_evt_encode+0x46a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   17bf4:	4bbb      	ldr	r3, [pc, #748]	; (17ee4 <hci_evt_encode+0x68c>)
   17bf6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17bf8:	051b      	lsls	r3, r3, #20
   17bfa:	d562      	bpl.n	17cc2 <hci_evt_encode+0x46a>
   17bfc:	3508      	adds	r5, #8
   17bfe:	2102      	movs	r1, #2
   17c00:	4628      	mov	r0, r5
   17c02:	f014 ff14 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17c06:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   17c08:	2306      	movs	r3, #6
	hdr->evt = evt;
   17c0a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17c0c:	7043      	strb	r3, [r0, #1]
   17c0e:	2101      	movs	r1, #1
   17c10:	4628      	mov	r0, r5
   17c12:	f014 ff0c 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   17c16:	230c      	movs	r3, #12
   17c18:	7003      	strb	r3, [r0, #0]
   17c1a:	2105      	movs	r1, #5
   17c1c:	4628      	mov	r0, r5
   17c1e:	f014 ff06 	bl	2ca2e <net_buf_simple_add>
	sep->status = pu->status;
   17c22:	7f23      	ldrb	r3, [r4, #28]
   17c24:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   17c26:	f8a0 6001 	strh.w	r6, [r0, #1]
   17c2a:	7f62      	ldrb	r2, [r4, #29]
   17c2c:	2a00      	cmp	r2, #0
   17c2e:	fa92 f3a2 	rbit	r3, r2
   17c32:	fab3 f383 	clz	r3, r3
   17c36:	bf08      	it	eq
   17c38:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17c3c:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   17c3e:	70c3      	strb	r3, [r0, #3]
   17c40:	7fa2      	ldrb	r2, [r4, #30]
   17c42:	fa92 f3a2 	rbit	r3, r2
   17c46:	2a00      	cmp	r2, #0
   17c48:	fab3 f383 	clz	r3, r3
   17c4c:	bf08      	it	eq
   17c4e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17c52:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   17c54:	7103      	strb	r3, [r0, #4]
   17c56:	e653      	b.n	17900 <hci_evt_encode+0xa8>
		LL_ASSERT(0);
   17c58:	4aa3      	ldr	r2, [pc, #652]	; (17ee8 <hci_evt_encode+0x690>)
   17c5a:	49a4      	ldr	r1, [pc, #656]	; (17eec <hci_evt_encode+0x694>)
   17c5c:	48a4      	ldr	r0, [pc, #656]	; (17ef0 <hci_evt_encode+0x698>)
   17c5e:	f641 538f 	movw	r3, #7567	; 0x1d8f
   17c62:	f00e fe7b 	bl	2695c <printk>
   17c66:	4040      	eors	r0, r0
   17c68:	f380 8811 	msr	BASEPRI, r0
   17c6c:	f04f 0003 	mov.w	r0, #3
   17c70:	df02      	svc	2
}
   17c72:	e645      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17c74:	4b9a      	ldr	r3, [pc, #616]	; (17ee0 <hci_evt_encode+0x688>)
   17c76:	685b      	ldr	r3, [r3, #4]
   17c78:	009a      	lsls	r2, r3, #2
   17c7a:	f57f ae41 	bpl.w	17900 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   17c7e:	4b99      	ldr	r3, [pc, #612]	; (17ee4 <hci_evt_encode+0x68c>)
   17c80:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17c82:	065b      	lsls	r3, r3, #25
   17c84:	f57f ae3c 	bpl.w	17900 <hci_evt_encode+0xa8>
   17c88:	3508      	adds	r5, #8
   17c8a:	2102      	movs	r1, #2
   17c8c:	4628      	mov	r0, r5
   17c8e:	f014 fece 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17c92:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   17c94:	230b      	movs	r3, #11
	hdr->evt = evt;
   17c96:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17c98:	7043      	strb	r3, [r0, #1]
   17c9a:	2101      	movs	r1, #1
   17c9c:	4628      	mov	r0, r5
   17c9e:	f014 fec6 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   17ca2:	2307      	movs	r3, #7
   17ca4:	7003      	strb	r3, [r0, #0]
   17ca6:	210a      	movs	r1, #10
   17ca8:	4628      	mov	r0, r5
   17caa:	f014 fec0 	bl	2ca2e <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   17cae:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   17cb0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   17cb2:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   17cb4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   17cb6:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   17cb8:	8c23      	ldrh	r3, [r4, #32]
   17cba:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   17cbc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   17cbe:	8103      	strh	r3, [r0, #8]
   17cc0:	e61e      	b.n	17900 <hci_evt_encode+0xa8>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   17cc2:	488c      	ldr	r0, [pc, #560]	; (17ef4 <hci_evt_encode+0x69c>)
   17cc4:	6803      	ldr	r3, [r0, #0]
   17cc6:	f013 0f06 	tst.w	r3, #6
   17cca:	f43f ae19 	beq.w	17900 <hci_evt_encode+0xa8>
   17cce:	7f62      	ldrb	r2, [r4, #29]
   17cd0:	7fa3      	ldrb	r3, [r4, #30]
   17cd2:	7f25      	ldrb	r5, [r4, #28]
   17cd4:	2a00      	cmp	r2, #0
   17cd6:	fa92 f2a2 	rbit	r2, r2
   17cda:	fab2 f282 	clz	r2, r2
   17cde:	bf08      	it	eq
   17ce0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	fa93 f3a3 	rbit	r3, r3
   17cea:	fab3 f383 	clz	r3, r3
   17cee:	466c      	mov	r4, sp
   17cf0:	bf08      	it	eq
   17cf2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17cf6:	b08a      	sub	sp, #40	; 0x28
   17cf8:	3301      	adds	r3, #1
   17cfa:	930c      	str	r3, [sp, #48]	; 0x30
   17cfc:	3201      	adds	r2, #1
   17cfe:	ab04      	add	r3, sp, #16
   17d00:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
   17d04:	461a      	mov	r2, r3
   17d06:	2106      	movs	r1, #6
   17d08:	4d7b      	ldr	r5, [pc, #492]	; (17ef8 <hci_evt_encode+0x6a0>)
   17d0a:	9609      	str	r6, [sp, #36]	; 0x24
   17d0c:	9508      	str	r5, [sp, #32]
   17d0e:	6139      	str	r1, [r7, #16]
   17d10:	f842 1f0c 	str.w	r1, [r2, #12]!
   17d14:	2300      	movs	r3, #0
   17d16:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   17d1a:	f00f fe11 	bl	27940 <z_impl_z_log_msg2_static_create>
   17d1e:	46a5      	mov	sp, r4
   17d20:	e5ee      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17d22:	4b6f      	ldr	r3, [pc, #444]	; (17ee0 <hci_evt_encode+0x688>)
   17d24:	685b      	ldr	r3, [r3, #4]
   17d26:	0098      	lsls	r0, r3, #2
   17d28:	f57f adea 	bpl.w	17900 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   17d2c:	4b6d      	ldr	r3, [pc, #436]	; (17ee4 <hci_evt_encode+0x68c>)
   17d2e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17d30:	06d9      	lsls	r1, r3, #27
   17d32:	f57f ade5 	bpl.w	17900 <hci_evt_encode+0xa8>
   17d36:	3508      	adds	r5, #8
   17d38:	2102      	movs	r1, #2
   17d3a:	4628      	mov	r0, r5
   17d3c:	f014 fe77 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17d40:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   17d42:	230d      	movs	r3, #13
	hdr->evt = evt;
   17d44:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17d46:	7043      	strb	r3, [r0, #1]
   17d48:	2101      	movs	r1, #1
   17d4a:	4628      	mov	r0, r5
   17d4c:	f014 fe6f 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   17d50:	2305      	movs	r3, #5
   17d52:	7003      	strb	r3, [r0, #0]
   17d54:	210c      	movs	r1, #12
   17d56:	4628      	mov	r0, r5
   17d58:	f014 fe69 	bl	2ca2e <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   17d5c:	f104 0120 	add.w	r1, r4, #32
   17d60:	4605      	mov	r5, r0
   17d62:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   17d64:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   17d68:	f012 faf8 	bl	2a35c <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   17d6c:	2202      	movs	r2, #2
   17d6e:	f104 0128 	add.w	r1, r4, #40	; 0x28
   17d72:	f105 000a 	add.w	r0, r5, #10
   17d76:	f012 faf1 	bl	2a35c <memcpy>
   17d7a:	e5c1      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   17d7c:	4b58      	ldr	r3, [pc, #352]	; (17ee0 <hci_evt_encode+0x688>)
   17d7e:	681b      	ldr	r3, [r3, #0]
   17d80:	061a      	lsls	r2, r3, #24
   17d82:	f04f 0400 	mov.w	r4, #0
   17d86:	f57f adbb 	bpl.w	17900 <hci_evt_encode+0xa8>
   17d8a:	3508      	adds	r5, #8
   17d8c:	2102      	movs	r1, #2
   17d8e:	4628      	mov	r0, r5
   17d90:	f014 fe4d 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17d94:	2308      	movs	r3, #8
	hdr->len = len;
   17d96:	2104      	movs	r1, #4
	hdr->evt = evt;
   17d98:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17d9a:	7041      	strb	r1, [r0, #1]
   17d9c:	4628      	mov	r0, r5
   17d9e:	f014 fe46 	bl	2ca2e <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   17da2:	2301      	movs	r3, #1
	ep->status = err;
   17da4:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17da6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   17daa:	70c3      	strb	r3, [r0, #3]
   17dac:	e5a8      	b.n	17900 <hci_evt_encode+0xa8>
		le_unknown_rsp(pdu_data, handle, buf);
   17dae:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   17db2:	2b0e      	cmp	r3, #14
   17db4:	f000 8184 	beq.w	180c0 <hci_evt_encode+0x868>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   17db8:	484e      	ldr	r0, [pc, #312]	; (17ef4 <hci_evt_encode+0x69c>)
   17dba:	6802      	ldr	r2, [r0, #0]
   17dbc:	f012 0f06 	tst.w	r2, #6
   17dc0:	f43f ad9e 	beq.w	17900 <hci_evt_encode+0xa8>
   17dc4:	494d      	ldr	r1, [pc, #308]	; (17efc <hci_evt_encode+0x6a4>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
   17dc6:	e9c7 1308 	strd	r1, r3, [r7, #32]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   17dca:	2203      	movs	r2, #3
   17dcc:	60fa      	str	r2, [r7, #12]
   17dce:	61fa      	str	r2, [r7, #28]
   17dd0:	2300      	movs	r3, #0
   17dd2:	f107 021c 	add.w	r2, r7, #28
   17dd6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17dda:	f00f fdb1 	bl	27940 <z_impl_z_log_msg2_static_create>
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   17dde:	e58f      	b.n	17900 <hci_evt_encode+0xa8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   17de0:	460b      	mov	r3, r1
   17de2:	4632      	mov	r2, r6
   17de4:	4641      	mov	r1, r8
   17de6:	2000      	movs	r0, #0
   17de8:	f7fe fe18 	bl	16a1c <le_remote_feat_complete>
		break;
   17dec:	e588      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17dee:	4b3c      	ldr	r3, [pc, #240]	; (17ee0 <hci_evt_encode+0x688>)
   17df0:	685b      	ldr	r3, [r3, #4]
   17df2:	0098      	lsls	r0, r3, #2
   17df4:	d569      	bpl.n	17eca <hci_evt_encode+0x672>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   17df6:	4b3b      	ldr	r3, [pc, #236]	; (17ee4 <hci_evt_encode+0x68c>)
   17df8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17dfa:	0699      	lsls	r1, r3, #26
   17dfc:	d565      	bpl.n	17eca <hci_evt_encode+0x672>
   17dfe:	3508      	adds	r5, #8
   17e00:	2102      	movs	r1, #2
   17e02:	4628      	mov	r0, r5
   17e04:	f014 fe13 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17e08:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   17e0a:	230b      	movs	r3, #11
	hdr->evt = evt;
   17e0c:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17e0e:	7043      	strb	r3, [r0, #1]
   17e10:	2101      	movs	r1, #1
   17e12:	4628      	mov	r0, r5
   17e14:	f014 fe0b 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   17e18:	2306      	movs	r3, #6
   17e1a:	7003      	strb	r3, [r0, #0]
   17e1c:	210a      	movs	r1, #10
   17e1e:	4628      	mov	r0, r5
   17e20:	f014 fe05 	bl	2ca2e <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   17e24:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   17e26:	8c23      	ldrh	r3, [r4, #32]
   17e28:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   17e2a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   17e2c:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   17e2e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   17e30:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   17e32:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   17e34:	8103      	strh	r3, [r0, #8]
   17e36:	e563      	b.n	17900 <hci_evt_encode+0xa8>
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   17e38:	482e      	ldr	r0, [pc, #184]	; (17ef4 <hci_evt_encode+0x69c>)
   17e3a:	6803      	ldr	r3, [r0, #0]
   17e3c:	f013 0f06 	tst.w	r3, #6
   17e40:	f43f ad5e 	beq.w	17900 <hci_evt_encode+0xa8>
   17e44:	f894 2020 	ldrb.w	r2, [r4, #32]
   17e48:	492d      	ldr	r1, [pc, #180]	; (17f00 <hci_evt_encode+0x6a8>)
   17e4a:	2303      	movs	r3, #3
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   17e4c:	e9c7 1208 	strd	r1, r2, [r7, #32]
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   17e50:	60fb      	str	r3, [r7, #12]
   17e52:	61fb      	str	r3, [r7, #28]
   17e54:	e7bc      	b.n	17dd0 <hci_evt_encode+0x578>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   17e56:	4b22      	ldr	r3, [pc, #136]	; (17ee0 <hci_evt_encode+0x688>)
   17e58:	681b      	ldr	r3, [r3, #0]
   17e5a:	061b      	lsls	r3, r3, #24
   17e5c:	f57f ad50 	bpl.w	17900 <hci_evt_encode+0xa8>
   17e60:	3508      	adds	r5, #8
   17e62:	2102      	movs	r1, #2
   17e64:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   17e66:	f894 4020 	ldrb.w	r4, [r4, #32]
   17e6a:	f014 fde0 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17e6e:	2308      	movs	r3, #8
	hdr->len = len;
   17e70:	2104      	movs	r1, #4
	hdr->evt = evt;
   17e72:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17e74:	7041      	strb	r1, [r0, #1]
   17e76:	4628      	mov	r0, r5
   17e78:	f014 fdd9 	bl	2ca2e <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   17e7c:	fab4 f384 	clz	r3, r4
   17e80:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   17e82:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17e84:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   17e88:	70c3      	strb	r3, [r0, #3]
   17e8a:	e539      	b.n	17900 <hci_evt_encode+0xa8>
		ll_rl_crpa_set(cc->peer_addr_type,
   17e8c:	7fa0      	ldrb	r0, [r4, #30]
   17e8e:	f104 0325 	add.w	r3, r4, #37	; 0x25
   17e92:	22ff      	movs	r2, #255	; 0xff
   17e94:	f104 011f 	add.w	r1, r4, #31
   17e98:	f005 fad6 	bl	1d448 <ll_rl_crpa_set>
   17e9c:	e5ba      	b.n	17a14 <hci_evt_encode+0x1bc>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   17e9e:	4a12      	ldr	r2, [pc, #72]	; (17ee8 <hci_evt_encode+0x690>)
   17ea0:	4918      	ldr	r1, [pc, #96]	; (17f04 <hci_evt_encode+0x6ac>)
   17ea2:	4813      	ldr	r0, [pc, #76]	; (17ef0 <hci_evt_encode+0x698>)
   17ea4:	f641 23f5 	movw	r3, #6901	; 0x1af5
   17ea8:	f00e fd58 	bl	2695c <printk>
   17eac:	4040      	eors	r0, r0
   17eae:	f380 8811 	msr	BASEPRI, r0
   17eb2:	f04f 0003 	mov.w	r0, #3
   17eb6:	df02      	svc	2
   17eb8:	e5a6      	b.n	17a08 <hci_evt_encode+0x1b0>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   17eba:	2100      	movs	r1, #0
   17ebc:	f104 031e 	add.w	r3, r4, #30
   17ec0:	464a      	mov	r2, r9
   17ec2:	4608      	mov	r0, r1
   17ec4:	f005 fac0 	bl	1d448 <ll_rl_crpa_set>
   17ec8:	e532      	b.n	17930 <hci_evt_encode+0xd8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   17eca:	2300      	movs	r3, #0
   17ecc:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17ed0:	9300      	str	r3, [sp, #0]
   17ed2:	221a      	movs	r2, #26
   17ed4:	2102      	movs	r1, #2
   17ed6:	4630      	mov	r0, r6
   17ed8:	f002 f894 	bl	1a004 <ll_conn_update>
		return;
   17edc:	e510      	b.n	17900 <hci_evt_encode+0xa8>
   17ede:	bf00      	nop
   17ee0:	20000198 	.word	0x20000198
   17ee4:	200001a0 	.word	0x200001a0
   17ee8:	0002f8c4 	.word	0x0002f8c4
   17eec:	0002f794 	.word	0x0002f794
   17ef0:	0002f6fc 	.word	0x0002f6fc
   17ef4:	200009f8 	.word	0x200009f8
   17ef8:	0002f9a0 	.word	0x0002f9a0
   17efc:	0002f9cc 	.word	0x0002f9cc
   17f00:	0002f9dc 	.word	0x0002f9dc
   17f04:	0002f928 	.word	0x0002f928
   17f08:	2102      	movs	r1, #2
   17f0a:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   17f0c:	f1b9 0f00 	cmp.w	r9, #0
   17f10:	f040 80b0 	bne.w	18074 <hci_evt_encode+0x81c>
   17f14:	f014 fd8b 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17f18:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   17f1a:	2313      	movs	r3, #19
	hdr->evt = evt;
   17f1c:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17f1e:	7043      	strb	r3, [r0, #1]
   17f20:	2101      	movs	r1, #1
   17f22:	4628      	mov	r0, r5
   17f24:	f014 fd83 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   17f28:	2301      	movs	r3, #1
   17f2a:	7003      	strb	r3, [r0, #0]
   17f2c:	2112      	movs	r1, #18
   17f2e:	4628      	mov	r0, r5
   17f30:	f014 fd7d 	bl	2ca2e <net_buf_simple_add>
   17f34:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   17f36:	2212      	movs	r2, #18
   17f38:	4649      	mov	r1, r9
   17f3a:	f012 fa1a 	bl	2a372 <memset>
		lecc->status = status;
   17f3e:	f884 8000 	strb.w	r8, [r4]
		return;
   17f42:	e4dd      	b.n	17900 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17f44:	2b00      	cmp	r3, #0
   17f46:	f43f acdb 	beq.w	17900 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   17f4a:	4b69      	ldr	r3, [pc, #420]	; (180f0 <hci_evt_encode+0x898>)
   17f4c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17f4e:	055b      	lsls	r3, r3, #21
   17f50:	f57f acd6 	bpl.w	17900 <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   17f54:	7f23      	ldrb	r3, [r4, #28]
   17f56:	f003 030f 	and.w	r3, r3, #15
   17f5a:	2b01      	cmp	r3, #1
   17f5c:	d00c      	beq.n	17f78 <hci_evt_encode+0x720>
   17f5e:	4a65      	ldr	r2, [pc, #404]	; (180f4 <hci_evt_encode+0x89c>)
   17f60:	4965      	ldr	r1, [pc, #404]	; (180f8 <hci_evt_encode+0x8a0>)
   17f62:	4866      	ldr	r0, [pc, #408]	; (180fc <hci_evt_encode+0x8a4>)
   17f64:	f241 435a 	movw	r3, #5210	; 0x145a
   17f68:	f00e fcf8 	bl	2695c <printk>
   17f6c:	4040      	eors	r0, r0
   17f6e:	f380 8811 	msr	BASEPRI, r0
   17f72:	f04f 0003 	mov.w	r0, #3
   17f76:	df02      	svc	2
	if (dup_count >= 0) {
   17f78:	4b61      	ldr	r3, [pc, #388]	; (18100 <hci_evt_encode+0x8a8>)
   17f7a:	681b      	ldr	r3, [r3, #0]
   17f7c:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   17f7e:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   17f82:	db0a      	blt.n	17f9a <hci_evt_encode+0x742>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   17f84:	7f20      	ldrb	r0, [r4, #28]
   17f86:	4632      	mov	r2, r6
   17f88:	f3c0 1180 	ubfx	r1, r0, #6, #1
   17f8c:	f000 000f 	and.w	r0, r0, #15
   17f90:	f7fe fce4 	bl	1695c <dup_found.part.0>
	if (dup_scan &&
   17f94:	2800      	cmp	r0, #0
   17f96:	f47f acb3 	bne.w	17900 <hci_evt_encode+0xa8>
   17f9a:	3508      	adds	r5, #8
   17f9c:	2102      	movs	r1, #2
   17f9e:	4628      	mov	r0, r5
   17fa0:	f014 fd45 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   17fa4:	233e      	movs	r3, #62	; 0x3e
   17fa6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17fa8:	2312      	movs	r3, #18
   17faa:	7043      	strb	r3, [r0, #1]
   17fac:	2101      	movs	r1, #1
   17fae:	4628      	mov	r0, r5
   17fb0:	f014 fd3d 	bl	2ca2e <net_buf_simple_add>
   17fb4:	4603      	mov	r3, r0
	me->subevent = subevt;
   17fb6:	220b      	movs	r2, #11
   17fb8:	701a      	strb	r2, [r3, #0]
   17fba:	4628      	mov	r0, r5
   17fbc:	2111      	movs	r1, #17
   17fbe:	f014 fd36 	bl	2ca2e <net_buf_simple_add>
	drp->num_reports = 1U;
   17fc2:	2301      	movs	r3, #1
   17fc4:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   17fc6:	7043      	strb	r3, [r0, #1]
   17fc8:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   17fca:	f005 f941 	bl	1d250 <ll_rl_size_get>
   17fce:	4581      	cmp	r9, r0
   17fd0:	f080 8084 	bcs.w	180dc <hci_evt_encode+0x884>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   17fd4:	1cea      	adds	r2, r5, #3
   17fd6:	1ca9      	adds	r1, r5, #2
   17fd8:	4648      	mov	r0, r9
   17fda:	f005 f8f3 	bl	1d1c4 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   17fde:	78ab      	ldrb	r3, [r5, #2]
   17fe0:	3302      	adds	r3, #2
   17fe2:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   17fe4:	7f23      	ldrb	r3, [r4, #28]
   17fe6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   17fea:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   17fec:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   17fee:	f104 0124 	add.w	r1, r4, #36	; 0x24
   17ff2:	f105 000a 	add.w	r0, r5, #10
   17ff6:	f012 f9b1 	bl	2a35c <memcpy>
	dir_info->rssi = rssi;
   17ffa:	f885 8010 	strb.w	r8, [r5, #16]
   17ffe:	e47f      	b.n	17900 <hci_evt_encode+0xa8>
   18000:	2102      	movs	r1, #2
   18002:	4628      	mov	r0, r5
   18004:	f014 fd13 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   18008:	233e      	movs	r3, #62	; 0x3e
   1800a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1800c:	2313      	movs	r3, #19
   1800e:	7043      	strb	r3, [r0, #1]
   18010:	2101      	movs	r1, #1
   18012:	4628      	mov	r0, r5
   18014:	f014 fd0b 	bl	2ca2e <net_buf_simple_add>
   18018:	4603      	mov	r3, r0
	me->subevent = subevt;
   1801a:	2201      	movs	r2, #1
   1801c:	701a      	strb	r2, [r3, #0]
   1801e:	4628      	mov	r0, r5
   18020:	2112      	movs	r1, #18
   18022:	f014 fd04 	bl	2ca2e <net_buf_simple_add>
	lecc->status = 0x00;
   18026:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   1802a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   1802e:	7f63      	ldrb	r3, [r4, #29]
   18030:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   18032:	7fa3      	ldrb	r3, [r4, #30]
   18034:	f003 0301 	and.w	r3, r3, #1
   18038:	4605      	mov	r5, r0
   1803a:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   1803c:	2206      	movs	r2, #6
   1803e:	4651      	mov	r1, sl
   18040:	3005      	adds	r0, #5
   18042:	f012 f98b 	bl	2a35c <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   18046:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   18048:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1804a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1804c:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   18050:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   18054:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   18058:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1805c:	746b      	strb	r3, [r5, #17]
   1805e:	e44f      	b.n	17900 <hci_evt_encode+0xa8>
		adv_info->addr.type = adv->tx_addr;
   18060:	7f23      	ldrb	r3, [r4, #28]
   18062:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   18066:	4659      	mov	r1, fp
		adv_info->addr.type = adv->tx_addr;
   18068:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   1806a:	2206      	movs	r2, #6
   1806c:	1ce8      	adds	r0, r5, #3
   1806e:	f012 f975 	bl	2a35c <memcpy>
   18072:	e4b9      	b.n	179e8 <hci_evt_encode+0x190>
   18074:	f014 fcdb 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   18078:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1807a:	231f      	movs	r3, #31
	hdr->evt = evt;
   1807c:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1807e:	7043      	strb	r3, [r0, #1]
   18080:	2101      	movs	r1, #1
   18082:	4628      	mov	r0, r5
   18084:	f014 fcd3 	bl	2ca2e <net_buf_simple_add>
	me->subevent = subevt;
   18088:	230a      	movs	r3, #10
   1808a:	7003      	strb	r3, [r0, #0]
   1808c:	211e      	movs	r1, #30
   1808e:	4628      	mov	r0, r5
   18090:	f014 fccd 	bl	2ca2e <net_buf_simple_add>
   18094:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   18096:	221e      	movs	r2, #30
   18098:	2100      	movs	r1, #0
   1809a:	f012 f96a 	bl	2a372 <memset>
			leecc->status = status;
   1809e:	f884 8000 	strb.w	r8, [r4]
			return;
   180a2:	e42d      	b.n	17900 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   180a4:	4a13      	ldr	r2, [pc, #76]	; (180f4 <hci_evt_encode+0x89c>)
   180a6:	4917      	ldr	r1, [pc, #92]	; (18104 <hci_evt_encode+0x8ac>)
   180a8:	4814      	ldr	r0, [pc, #80]	; (180fc <hci_evt_encode+0x8a4>)
   180aa:	f641 337a 	movw	r3, #7034	; 0x1b7a
   180ae:	f00e fc55 	bl	2695c <printk>
   180b2:	4040      	eors	r0, r0
   180b4:	f380 8811 	msr	BASEPRI, r0
   180b8:	f04f 0003 	mov.w	r0, #3
   180bc:	df02      	svc	2
   180be:	e52a      	b.n	17b16 <hci_evt_encode+0x2be>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   180c0:	460b      	mov	r3, r1
   180c2:	4632      	mov	r2, r6
   180c4:	2100      	movs	r1, #0
   180c6:	201a      	movs	r0, #26
   180c8:	f7fe fca8 	bl	16a1c <le_remote_feat_complete>
		break;
   180cc:	e418      	b.n	17900 <hci_evt_encode+0xa8>
   180ce:	f04f 0a00 	mov.w	sl, #0
   180d2:	220c      	movs	r2, #12
   180d4:	230b      	movs	r3, #11
   180d6:	603a      	str	r2, [r7, #0]
		data_len = 0U;
   180d8:	4656      	mov	r6, sl
   180da:	e455      	b.n	17988 <hci_evt_encode+0x130>
		dir_info->addr.type = adv->tx_addr;
   180dc:	7f23      	ldrb	r3, [r4, #28]
   180de:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   180e2:	2206      	movs	r2, #6
		dir_info->addr.type = adv->tx_addr;
   180e4:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   180e6:	4631      	mov	r1, r6
   180e8:	1ce8      	adds	r0, r5, #3
   180ea:	f012 f937 	bl	2a35c <memcpy>
   180ee:	e779      	b.n	17fe4 <hci_evt_encode+0x78c>
   180f0:	200001a0 	.word	0x200001a0
   180f4:	0002f8c4 	.word	0x0002f8c4
   180f8:	0002f900 	.word	0x0002f900
   180fc:	0002f6fc 	.word	0x0002f6fc
   18100:	20003050 	.word	0x20003050
   18104:	0002f964 	.word	0x0002f964

00018108 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   18108:	b570      	push	{r4, r5, r6, lr}
   1810a:	f100 0408 	add.w	r4, r0, #8
   1810e:	460e      	mov	r6, r1
   18110:	4620      	mov	r0, r4
   18112:	2102      	movs	r1, #2
   18114:	4615      	mov	r5, r2
   18116:	f014 fc8a 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = evt;
   1811a:	2313      	movs	r3, #19
	hdr->len = len;
   1811c:	2105      	movs	r1, #5
	hdr->evt = evt;
   1811e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   18120:	7041      	strb	r1, [r0, #1]
   18122:	4620      	mov	r0, r4
   18124:	f014 fc83 	bl	2ca2e <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   18128:	2301      	movs	r3, #1
   1812a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1812c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   18130:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   18134:	bd70      	pop	{r4, r5, r6, pc}
   18136:	bf00      	nop

00018138 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18138:	7903      	ldrb	r3, [r0, #4]
   1813a:	2b03      	cmp	r3, #3
   1813c:	d008      	beq.n	18150 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   1813e:	3b05      	subs	r3, #5
   18140:	b2db      	uxtb	r3, r3
   18142:	2b17      	cmp	r3, #23
   18144:	d901      	bls.n	1814a <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18146:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   18148:	4770      	bx	lr
   1814a:	4a05      	ldr	r2, [pc, #20]	; (18160 <hci_get_class+0x28>)
   1814c:	5cd0      	ldrb	r0, [r2, r3]
   1814e:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   18150:	7f03      	ldrb	r3, [r0, #28]
   18152:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   18156:	2b03      	cmp	r3, #3
   18158:	bf0c      	ite	eq
   1815a:	2004      	moveq	r0, #4
   1815c:	2005      	movne	r0, #5
   1815e:	4770      	bx	lr
   18160:	0002fa00 	.word	0x0002fa00

00018164 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   18164:	480d      	ldr	r0, [pc, #52]	; (1819c <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   18166:	4a0e      	ldr	r2, [pc, #56]	; (181a0 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   18168:	490e      	ldr	r1, [pc, #56]	; (181a4 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   1816a:	4b0f      	ldr	r3, [pc, #60]	; (181a8 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   1816c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   1816e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18172:	f641 75ff 	movw	r5, #8191	; 0x1fff
   18176:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1817a:	2400      	movs	r4, #0
   1817c:	2500      	movs	r5, #0
   1817e:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   18182:	4a0a      	ldr	r2, [pc, #40]	; (181ac <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   18184:	241f      	movs	r4, #31
   18186:	2500      	movs	r5, #0
   18188:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   1818c:	2100      	movs	r1, #0
   1818e:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   18190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   18194:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   18196:	601a      	str	r2, [r3, #0]
}
   18198:	4770      	bx	lr
   1819a:	bf00      	nop
   1819c:	20000198 	.word	0x20000198
   181a0:	200020c8 	.word	0x200020c8
   181a4:	200001a0 	.word	0x200001a0
   181a8:	20003050 	.word	0x20003050
   181ac:	2000304c 	.word	0x2000304c

000181b0 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   181b0:	f006 b930 	b.w	1e414 <lll_csrand_get>

000181b4 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   181b4:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   181b6:	2300      	movs	r3, #0
   181b8:	f007 fdb0 	bl	1fd1c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   181bc:	2000      	movs	r0, #0
   181be:	bd08      	pop	{r3, pc}

000181c0 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   181c0:	4801      	ldr	r0, [pc, #4]	; (181c8 <ll_feat_get+0x8>)
   181c2:	2100      	movs	r1, #0
   181c4:	4770      	bx	lr
   181c6:	bf00      	nop
   181c8:	000141ff 	.word	0x000141ff

000181cc <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   181cc:	b510      	push	{r4, lr}
   181ce:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   181d0:	f006 f942 	bl	1e458 <lll_reset>
	LL_ASSERT(!err);
   181d4:	b950      	cbnz	r0, 181ec <perform_lll_reset+0x20>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   181d6:	f006 ff7f 	bl	1f0d8 <lll_scan_reset>
	LL_ASSERT(!err);
   181da:	b9c0      	cbnz	r0, 1820e <perform_lll_reset+0x42>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   181dc:	f007 f896 	bl	1f30c <lll_conn_reset>
	LL_ASSERT(!err);
   181e0:	bb30      	cbnz	r0, 18230 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   181e2:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   181e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   181e8:	f00d b984 	b.w	254f4 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   181ec:	4a19      	ldr	r2, [pc, #100]	; (18254 <perform_lll_reset+0x88>)
   181ee:	491a      	ldr	r1, [pc, #104]	; (18258 <perform_lll_reset+0x8c>)
   181f0:	481a      	ldr	r0, [pc, #104]	; (1825c <perform_lll_reset+0x90>)
   181f2:	f640 0324 	movw	r3, #2084	; 0x824
   181f6:	f00e fbb1 	bl	2695c <printk>
   181fa:	4040      	eors	r0, r0
   181fc:	f380 8811 	msr	BASEPRI, r0
   18200:	f04f 0003 	mov.w	r0, #3
   18204:	df02      	svc	2
	err = lll_scan_reset();
   18206:	f006 ff67 	bl	1f0d8 <lll_scan_reset>
	LL_ASSERT(!err);
   1820a:	2800      	cmp	r0, #0
   1820c:	d0e6      	beq.n	181dc <perform_lll_reset+0x10>
   1820e:	4a11      	ldr	r2, [pc, #68]	; (18254 <perform_lll_reset+0x88>)
   18210:	4911      	ldr	r1, [pc, #68]	; (18258 <perform_lll_reset+0x8c>)
   18212:	4812      	ldr	r0, [pc, #72]	; (1825c <perform_lll_reset+0x90>)
   18214:	f640 032f 	movw	r3, #2095	; 0x82f
   18218:	f00e fba0 	bl	2695c <printk>
   1821c:	4040      	eors	r0, r0
   1821e:	f380 8811 	msr	BASEPRI, r0
   18222:	f04f 0003 	mov.w	r0, #3
   18226:	df02      	svc	2
	err = lll_conn_reset();
   18228:	f007 f870 	bl	1f30c <lll_conn_reset>
	LL_ASSERT(!err);
   1822c:	2800      	cmp	r0, #0
   1822e:	d0d8      	beq.n	181e2 <perform_lll_reset+0x16>
   18230:	4a08      	ldr	r2, [pc, #32]	; (18254 <perform_lll_reset+0x88>)
   18232:	4909      	ldr	r1, [pc, #36]	; (18258 <perform_lll_reset+0x8c>)
   18234:	4809      	ldr	r0, [pc, #36]	; (1825c <perform_lll_reset+0x90>)
   18236:	f640 0335 	movw	r3, #2101	; 0x835
   1823a:	f00e fb8f 	bl	2695c <printk>
   1823e:	4040      	eors	r0, r0
   18240:	f380 8811 	msr	BASEPRI, r0
   18244:	f04f 0003 	mov.w	r0, #3
   18248:	df02      	svc	2
   1824a:	4620      	mov	r0, r4
}
   1824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18250:	f00d b950 	b.w	254f4 <z_impl_k_sem_give>
   18254:	0002fa38 	.word	0x0002fa38
   18258:	0002fa74 	.word	0x0002fa74
   1825c:	0002f6fc 	.word	0x0002f6fc

00018260 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   18260:	6008      	str	r0, [r1, #0]
   18262:	4801      	ldr	r0, [pc, #4]	; (18268 <ull_ticker_status_give+0x8>)
   18264:	f00d b946 	b.w	254f4 <z_impl_k_sem_give>
   18268:	20003380 	.word	0x20003380

0001826c <disabled_cb>:
   1826c:	f00d b942 	b.w	254f4 <z_impl_k_sem_give>

00018270 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   18270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   18274:	4d2c      	ldr	r5, [pc, #176]	; (18328 <tx_cmplt_get+0xb8>)
{
   18276:	460c      	mov	r4, r1
   18278:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1827a:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   1827c:	7822      	ldrb	r2, [r4, #0]
   1827e:	782b      	ldrb	r3, [r5, #0]
   18280:	4291      	cmp	r1, r2
   18282:	bf9c      	itt	ls
   18284:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   18286:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   18288:	4591      	cmp	r9, r2
{
   1828a:	4682      	mov	sl, r0
   1828c:	d042      	beq.n	18314 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1828e:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   18292:	3201      	adds	r2, #1
   18294:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   18296:	4f25      	ldr	r7, [pc, #148]	; (1832c <tx_cmplt_get+0xbc>)
		i = 0U;
   18298:	4291      	cmp	r1, r2
   1829a:	bf08      	it	eq
   1829c:	2200      	moveq	r2, #0

	*idx = i;
   1829e:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   182a0:	5afa      	ldrh	r2, [r7, r3]
   182a2:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   182a4:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   182a6:	443b      	add	r3, r7
   182a8:	f04f 0b01 	mov.w	fp, #1
   182ac:	f04f 0802 	mov.w	r8, #2
   182b0:	e021      	b.n	182f6 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   182b2:	b362      	cbz	r2, 1830e <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   182b4:	7902      	ldrb	r2, [r0, #4]
   182b6:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   182ba:	3a01      	subs	r2, #1
   182bc:	2a01      	cmp	r2, #1
   182be:	d92d      	bls.n	1831c <tx_cmplt_get+0xac>
   182c0:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   182c4:	f001 fe56 	bl	19f74 <ll_tx_mem_release>
	if (*idx >= count) {
   182c8:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   182ca:	7869      	ldrb	r1, [r5, #1]
   182cc:	7828      	ldrb	r0, [r5, #0]
   182ce:	4299      	cmp	r1, r3
   182d0:	bf9c      	itt	ls
   182d2:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   182d4:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   182d6:	454b      	cmp	r3, r9
   182d8:	d01d      	beq.n	18316 <tx_cmplt_get+0xa6>
	i = *idx + 1;
   182da:	1c5a      	adds	r2, r3, #1
   182dc:	b2d2      	uxtb	r2, r2
		i = 0U;
   182de:	4291      	cmp	r1, r2
   182e0:	bf08      	it	eq
   182e2:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   182e4:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   182e8:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   182ea:	5af9      	ldrh	r1, [r7, r3]
   182ec:	f8ba 2000 	ldrh.w	r2, [sl]
   182f0:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   182f2:	443b      	add	r3, r7
   182f4:	d10f      	bne.n	18316 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   182f6:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   182f8:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   182fa:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   182fe:	d8d8      	bhi.n	182b2 <tx_cmplt_get+0x42>
			cmplt++;
   18300:	3601      	adds	r6, #1
   18302:	b2f6      	uxtb	r6, r6
   18304:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   18308:	2a00      	cmp	r2, #0
   1830a:	d0dd      	beq.n	182c8 <tx_cmplt_get+0x58>
   1830c:	e7da      	b.n	182c4 <tx_cmplt_get+0x54>
   1830e:	f8c3 8004 	str.w	r8, [r3, #4]
   18312:	e7d9      	b.n	182c8 <tx_cmplt_get+0x58>
		return 0;
   18314:	2600      	movs	r6, #0

	return cmplt;
}
   18316:	4630      	mov	r0, r6
   18318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   1831c:	3601      	adds	r6, #1
   1831e:	f8c3 b004 	str.w	fp, [r3, #4]
   18322:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   18324:	e7ce      	b.n	182c4 <tx_cmplt_get+0x54>
   18326:	bf00      	nop
   18328:	200005f0 	.word	0x200005f0
   1832c:	200005f4 	.word	0x200005f4

00018330 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   18330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18334:	4e3c      	ldr	r6, [pc, #240]	; (18428 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   18336:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1842c <ull_done+0xfc>
   1833a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 18430 <ull_done+0x100>
{
   1833e:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   18340:	e9d6 0100 	ldrd	r0, r1, [r6]
   18344:	aa01      	add	r2, sp, #4
   18346:	f7fc fd89 	bl	14e5c <memq_peek>
		if (link) {
   1834a:	4604      	mov	r4, r0
   1834c:	2800      	cmp	r0, #0
   1834e:	d03e      	beq.n	183ce <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   18350:	6870      	ldr	r0, [r6, #4]
   18352:	2200      	movs	r2, #0
   18354:	4631      	mov	r1, r6
   18356:	f7fc fd89 	bl	14e6c <memq_dequeue>
			rx_demux_event_done(link, done);
   1835a:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   1835c:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   1835e:	b135      	cbz	r5, 1836e <ull_done+0x3e>
	return hdr->ref;
   18360:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   18362:	2b00      	cmp	r3, #0
   18364:	d052      	beq.n	1840c <ull_done+0xdc>
	return hdr->ref--;
   18366:	782b      	ldrb	r3, [r5, #0]
   18368:	3b01      	subs	r3, #1
   1836a:	b2db      	uxtb	r3, r3
   1836c:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   1836e:	f897 3020 	ldrb.w	r3, [r7, #32]
   18372:	b123      	cbz	r3, 1837e <ull_done+0x4e>
   18374:	2b01      	cmp	r3, #1
   18376:	d13b      	bne.n	183f0 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   18378:	4638      	mov	r0, r7
   1837a:	f003 fc79 	bl	1bc70 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   1837e:	4a2d      	ldr	r2, [pc, #180]	; (18434 <ull_done+0x104>)
	last = last + 1;
   18380:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   18382:	f892 c001 	ldrb.w	ip, [r2, #1]
   18386:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   18388:	3301      	adds	r3, #1
	done->extra.type = 0U;
   1838a:	2000      	movs	r0, #0
   1838c:	b2db      	uxtb	r3, r3
		last = 0U;
   1838e:	459c      	cmp	ip, r3
   18390:	bf08      	it	eq
   18392:	4603      	moveq	r3, r0
	if (last == first) {
   18394:	4299      	cmp	r1, r3
   18396:	f887 0020 	strb.w	r0, [r7, #32]
   1839a:	d01b      	beq.n	183d4 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   1839c:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   1839e:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   183a0:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   183a2:	fb00 2101 	mla	r1, r0, r1, r2
   183a6:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   183a8:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   183aa:	2d00      	cmp	r5, #0
   183ac:	d0c8      	beq.n	18340 <ull_done+0x10>
	return hdr->ref;
   183ae:	782b      	ldrb	r3, [r5, #0]
   183b0:	2b00      	cmp	r3, #0
   183b2:	d1c5      	bne.n	18340 <ull_done+0x10>
   183b4:	696b      	ldr	r3, [r5, #20]
   183b6:	2b00      	cmp	r3, #0
   183b8:	d0c2      	beq.n	18340 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   183ba:	69a8      	ldr	r0, [r5, #24]
   183bc:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   183be:	e9d6 0100 	ldrd	r0, r1, [r6]
   183c2:	aa01      	add	r2, sp, #4
   183c4:	f7fc fd4a 	bl	14e5c <memq_peek>
		if (link) {
   183c8:	4604      	mov	r4, r0
   183ca:	2800      	cmp	r0, #0
   183cc:	d1c0      	bne.n	18350 <ull_done+0x20>
}
   183ce:	b003      	add	sp, #12
   183d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   183d4:	4918      	ldr	r1, [pc, #96]	; (18438 <ull_done+0x108>)
   183d6:	4819      	ldr	r0, [pc, #100]	; (1843c <ull_done+0x10c>)
   183d8:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   183dc:	4642      	mov	r2, r8
   183de:	f00e fabd 	bl	2695c <printk>
   183e2:	4040      	eors	r0, r0
   183e4:	f380 8811 	msr	BASEPRI, r0
   183e8:	f04f 0003 	mov.w	r0, #3
   183ec:	df02      	svc	2
   183ee:	e7dc      	b.n	183aa <ull_done+0x7a>
		LL_ASSERT(0);
   183f0:	4913      	ldr	r1, [pc, #76]	; (18440 <ull_done+0x110>)
   183f2:	4812      	ldr	r0, [pc, #72]	; (1843c <ull_done+0x10c>)
   183f4:	f640 2369 	movw	r3, #2665	; 0xa69
   183f8:	4642      	mov	r2, r8
   183fa:	f00e faaf 	bl	2695c <printk>
   183fe:	4040      	eors	r0, r0
   18400:	f380 8811 	msr	BASEPRI, r0
   18404:	f04f 0003 	mov.w	r0, #3
   18408:	df02      	svc	2
		break;
   1840a:	e7b8      	b.n	1837e <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   1840c:	480b      	ldr	r0, [pc, #44]	; (1843c <ull_done+0x10c>)
   1840e:	f640 2312 	movw	r3, #2578	; 0xa12
   18412:	4642      	mov	r2, r8
   18414:	4649      	mov	r1, r9
   18416:	f00e faa1 	bl	2695c <printk>
   1841a:	4040      	eors	r0, r0
   1841c:	f380 8811 	msr	BASEPRI, r0
   18420:	f04f 0003 	mov.w	r0, #3
   18424:	df02      	svc	2
   18426:	e79e      	b.n	18366 <ull_done+0x36>
   18428:	2000336c 	.word	0x2000336c
   1842c:	0002fa38 	.word	0x0002fa38
   18430:	0002fa7c 	.word	0x0002fa7c
   18434:	200004ac 	.word	0x200004ac
   18438:	0002fa94 	.word	0x0002fa94
   1843c:	0002f6fc 	.word	0x0002f6fc
   18440:	0002f794 	.word	0x0002f794

00018444 <rx_alloc>:
{
   18444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   18448:	4f33      	ldr	r7, [pc, #204]	; (18518 <rx_alloc+0xd4>)
   1844a:	783e      	ldrb	r6, [r7, #0]
   1844c:	4286      	cmp	r6, r0
   1844e:	bf28      	it	cs
   18450:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   18452:	b34e      	cbz	r6, 184a8 <rx_alloc+0x64>
   18454:	4d31      	ldr	r5, [pc, #196]	; (1851c <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   18456:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 18520 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1845a:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   1845c:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   18460:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   18462:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   18464:	3401      	adds	r4, #1
   18466:	b2e4      	uxtb	r4, r4
		last = 0U;
   18468:	42a2      	cmp	r2, r4
   1846a:	bf08      	it	eq
   1846c:	2400      	moveq	r4, #0
	if (last == first) {
   1846e:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   18470:	4640      	mov	r0, r8
   18472:	d01b      	beq.n	184ac <rx_alloc+0x68>
   18474:	f7fc fc84 	bl	14d80 <mem_acquire>
   18478:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1847a:	4648      	mov	r0, r9
		if (!link) {
   1847c:	f1ba 0f00 	cmp.w	sl, #0
   18480:	d012      	beq.n	184a8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   18482:	f7fc fc7d 	bl	14d80 <mem_acquire>
		if (!rx) {
   18486:	2800      	cmp	r0, #0
   18488:	d03f      	beq.n	1850a <rx_alloc+0xc6>
		rx->link = link;
   1848a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1848e:	78ea      	ldrb	r2, [r5, #3]
   18490:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   18492:	fb02 5303 	mla	r3, r2, r3, r5
   18496:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   18498:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   1849a:	70ec      	strb	r4, [r5, #3]
		max--;
   1849c:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   1849e:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   184a0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   184a4:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   184a6:	d1db      	bne.n	18460 <rx_alloc+0x1c>
}
   184a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   184ac:	783b      	ldrb	r3, [r7, #0]
   184ae:	2b00      	cmp	r3, #0
   184b0:	d0fa      	beq.n	184a8 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   184b2:	4d1c      	ldr	r5, [pc, #112]	; (18524 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   184b4:	4e1c      	ldr	r6, [pc, #112]	; (18528 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   184b6:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   184b8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 18520 <rx_alloc+0xdc>
		link->mem = NULL;
   184bc:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   184c0:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   184c2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   184c4:	3401      	adds	r4, #1
   184c6:	b2e4      	uxtb	r4, r4
		last = 0U;
   184c8:	42a2      	cmp	r2, r4
   184ca:	bf08      	it	eq
   184cc:	2400      	moveq	r4, #0
	if (last == first) {
   184ce:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   184d0:	4630      	mov	r0, r6
   184d2:	d0e9      	beq.n	184a8 <rx_alloc+0x64>
   184d4:	f7fc fc54 	bl	14d80 <mem_acquire>
   184d8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   184da:	4640      	mov	r0, r8
		if (!link) {
   184dc:	f1ba 0f00 	cmp.w	sl, #0
   184e0:	d0e2      	beq.n	184a8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   184e2:	f7fc fc4d 	bl	14d80 <mem_acquire>
		if (!rx) {
   184e6:	b180      	cbz	r0, 1850a <rx_alloc+0xc6>
		link->mem = NULL;
   184e8:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   184ec:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   184f0:	78ea      	ldrb	r2, [r5, #3]
   184f2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   184f4:	fb02 5303 	mla	r3, r2, r3, r5
   184f8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   184fa:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   184fc:	70ec      	strb	r4, [r5, #3]
   184fe:	3b01      	subs	r3, #1
   18500:	b2db      	uxtb	r3, r3
   18502:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   18504:	2b00      	cmp	r3, #0
   18506:	d1db      	bne.n	184c0 <rx_alloc+0x7c>
   18508:	e7ce      	b.n	184a8 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   1850a:	4650      	mov	r0, sl
   1850c:	4906      	ldr	r1, [pc, #24]	; (18528 <rx_alloc+0xe4>)
}
   1850e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   18512:	f7fc bc4f 	b.w	14db4 <mem_release>
   18516:	bf00      	nop
   18518:	20003134 	.word	0x20003134
   1851c:	200004d4 	.word	0x200004d4
   18520:	20003184 	.word	0x20003184
   18524:	200004c4 	.word	0x200004c4
   18528:	20003138 	.word	0x20003138

0001852c <rx_demux>:
{
   1852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18530:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 186e0 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   18534:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 186e4 <rx_demux+0x1b8>
		LL_ASSERT(0);
   18538:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 186e8 <rx_demux+0x1bc>
   1853c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 186ec <rx_demux+0x1c0>
{
   18540:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   18542:	e9d8 0100 	ldrd	r0, r1, [r8]
   18546:	aa03      	add	r2, sp, #12
   18548:	f7fc fc88 	bl	14e5c <memq_peek>
		if (link) {
   1854c:	4605      	mov	r5, r0
   1854e:	2800      	cmp	r0, #0
   18550:	d035      	beq.n	185be <rx_demux+0x92>
			LL_ASSERT(rx);
   18552:	9b03      	ldr	r3, [sp, #12]
   18554:	2b00      	cmp	r3, #0
   18556:	f000 80a6 	beq.w	186a6 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1855a:	7818      	ldrb	r0, [r3, #0]
   1855c:	aa04      	add	r2, sp, #16
   1855e:	a902      	add	r1, sp, #8
   18560:	f003 fe18 	bl	1c194 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   18564:	4604      	mov	r4, r0
   18566:	2800      	cmp	r0, #0
   18568:	d055      	beq.n	18616 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1856a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1856e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   18572:	780f      	ldrb	r7, [r1, #0]
   18574:	f8ad 200a 	strh.w	r2, [sp, #10]
   18578:	ae05      	add	r6, sp, #20
   1857a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1857c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   18580:	f003 fe22 	bl	1c1c8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   18584:	4621      	mov	r1, r4
   18586:	9a05      	ldr	r2, [sp, #20]
   18588:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1858c:	f003 fe66 	bl	1c25c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   18590:	4620      	mov	r0, r4
   18592:	f003 fdd7 	bl	1c144 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   18596:	4632      	mov	r2, r6
   18598:	4629      	mov	r1, r5
   1859a:	4638      	mov	r0, r7
   1859c:	f003 fdfa 	bl	1c194 <ull_conn_ack_by_last_peek>
	} while (link);
   185a0:	4604      	mov	r4, r0
   185a2:	2800      	cmp	r0, #0
   185a4:	d1ec      	bne.n	18580 <rx_demux+0x54>
	k_sem_give(sem_recv);
   185a6:	f8d9 0000 	ldr.w	r0, [r9]
   185aa:	f00c ffa3 	bl	254f4 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   185ae:	e9d8 0100 	ldrd	r0, r1, [r8]
   185b2:	aa03      	add	r2, sp, #12
   185b4:	f7fc fc52 	bl	14e5c <memq_peek>
		if (link) {
   185b8:	4605      	mov	r5, r0
   185ba:	2800      	cmp	r0, #0
   185bc:	d1c9      	bne.n	18552 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   185be:	aa04      	add	r2, sp, #16
   185c0:	a902      	add	r1, sp, #8
   185c2:	f10d 0007 	add.w	r0, sp, #7
   185c6:	f003 fdc9 	bl	1c15c <ull_conn_ack_peek>
			if (link) {
   185ca:	4604      	mov	r4, r0
   185cc:	2800      	cmp	r0, #0
   185ce:	d067      	beq.n	186a0 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   185d0:	9b04      	ldr	r3, [sp, #16]
   185d2:	9305      	str	r3, [sp, #20]
   185d4:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   185d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   185dc:	f8ad 300a 	strh.w	r3, [sp, #10]
   185e0:	ae05      	add	r6, sp, #20
   185e2:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   185e6:	f003 fdef 	bl	1c1c8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   185ea:	4621      	mov	r1, r4
   185ec:	9a05      	ldr	r2, [sp, #20]
   185ee:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   185f2:	f003 fe33 	bl	1c25c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   185f6:	4620      	mov	r0, r4
   185f8:	f003 fda4 	bl	1c144 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   185fc:	4632      	mov	r2, r6
   185fe:	4629      	mov	r1, r5
   18600:	4638      	mov	r0, r7
   18602:	f003 fdc7 	bl	1c194 <ull_conn_ack_by_last_peek>
	} while (link);
   18606:	4604      	mov	r4, r0
   18608:	2800      	cmp	r0, #0
   1860a:	d1ec      	bne.n	185e6 <rx_demux+0xba>
	k_sem_give(sem_recv);
   1860c:	f8d9 0000 	ldr.w	r0, [r9]
   18610:	f00c ff70 	bl	254f4 <z_impl_k_sem_give>
			if (nack) {
   18614:	e7cb      	b.n	185ae <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   18616:	9b03      	ldr	r3, [sp, #12]
   18618:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1861a:	791b      	ldrb	r3, [r3, #4]
   1861c:	3b01      	subs	r3, #1
   1861e:	2b16      	cmp	r3, #22
   18620:	d80d      	bhi.n	1863e <rx_demux+0x112>
   18622:	e8df f003 	tbb	[pc, r3]
   18626:	0c1a      	.short	0x0c1a
   18628:	0c1a0c38 	.word	0x0c1a0c38
   1862c:	0c0c0c0c 	.word	0x0c0c0c0c
   18630:	0c0c0c0c 	.word	0x0c0c0c0c
   18634:	0c0c0c0c 	.word	0x0c0c0c0c
   18638:	2d0c0c0c 	.word	0x2d0c0c0c
   1863c:	1a          	.byte	0x1a
   1863d:	00          	.byte	0x00
		LL_ASSERT(0);
   1863e:	482c      	ldr	r0, [pc, #176]	; (186f0 <rx_demux+0x1c4>)
   18640:	f640 13ff 	movw	r3, #2559	; 0x9ff
   18644:	4652      	mov	r2, sl
   18646:	4659      	mov	r1, fp
   18648:	f00e f988 	bl	2695c <printk>
   1864c:	4040      	eors	r0, r0
   1864e:	f380 8811 	msr	BASEPRI, r0
   18652:	f04f 0003 	mov.w	r0, #3
   18656:	df02      	svc	2
			if (nack) {
   18658:	e773      	b.n	18542 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1865a:	4921      	ldr	r1, [pc, #132]	; (186e0 <rx_demux+0x1b4>)
   1865c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   18660:	2200      	movs	r2, #0
   18662:	f7fc fc03 	bl	14e6c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18666:	4b23      	ldr	r3, [pc, #140]	; (186f4 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   18668:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1866a:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1866c:	4628      	mov	r0, r5
   1866e:	4a22      	ldr	r2, [pc, #136]	; (186f8 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18670:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18672:	f7fc fbe9 	bl	14e48 <memq_enqueue>
	k_sem_give(sem_recv);
   18676:	f8d9 0000 	ldr.w	r0, [r9]
   1867a:	f00c ff3b 	bl	254f4 <z_impl_k_sem_give>
			if (nack) {
   1867e:	e796      	b.n	185ae <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   18680:	4917      	ldr	r1, [pc, #92]	; (186e0 <rx_demux+0x1b4>)
   18682:	f8d8 0004 	ldr.w	r0, [r8, #4]
   18686:	2200      	movs	r2, #0
   18688:	f7fc fbf0 	bl	14e6c <memq_dequeue>
		ull_conn_setup(link, rx);
   1868c:	9905      	ldr	r1, [sp, #20]
   1868e:	4628      	mov	r0, r5
   18690:	f001 ff58 	bl	1a544 <ull_conn_setup>
			if (nack) {
   18694:	e755      	b.n	18542 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   18696:	a905      	add	r1, sp, #20
   18698:	4628      	mov	r0, r5
   1869a:	f001 ff7b 	bl	1a594 <ull_conn_rx>
		if (nack) {
   1869e:	b188      	cbz	r0, 186c4 <rx_demux+0x198>
}
   186a0:	b007      	add	sp, #28
   186a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   186a6:	4915      	ldr	r1, [pc, #84]	; (186fc <rx_demux+0x1d0>)
   186a8:	4811      	ldr	r0, [pc, #68]	; (186f0 <rx_demux+0x1c4>)
   186aa:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   186ae:	4652      	mov	r2, sl
   186b0:	f00e f954 	bl	2695c <printk>
   186b4:	4040      	eors	r0, r0
   186b6:	f380 8811 	msr	BASEPRI, r0
   186ba:	f04f 0003 	mov.w	r0, #3
   186be:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   186c0:	9b03      	ldr	r3, [sp, #12]
   186c2:	e74a      	b.n	1855a <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   186c4:	4906      	ldr	r1, [pc, #24]	; (186e0 <rx_demux+0x1b4>)
   186c6:	4602      	mov	r2, r0
   186c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   186cc:	f7fc fbce 	bl	14e6c <memq_dequeue>
		if (rx) {
   186d0:	9905      	ldr	r1, [sp, #20]
   186d2:	2900      	cmp	r1, #0
   186d4:	f43f af35 	beq.w	18542 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   186d8:	4b06      	ldr	r3, [pc, #24]	; (186f4 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   186da:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   186dc:	78db      	ldrb	r3, [r3, #3]
   186de:	e7c6      	b.n	1866e <rx_demux+0x142>
   186e0:	20003374 	.word	0x20003374
   186e4:	2000337c 	.word	0x2000337c
   186e8:	0002fa38 	.word	0x0002fa38
   186ec:	0002f794 	.word	0x0002f794
   186f0:	0002f6fc 	.word	0x0002f6fc
   186f4:	200005f0 	.word	0x200005f0
   186f8:	20003368 	.word	0x20003368
   186fc:	0002faa4 	.word	0x0002faa4

00018700 <ll_rx_get>:
{
   18700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18704:	b085      	sub	sp, #20
   18706:	e9cd 0100 	strd	r0, r1, [sp]
   1870a:	4c63      	ldr	r4, [pc, #396]	; (18898 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   1870c:	4d63      	ldr	r5, [pc, #396]	; (1889c <ll_rx_get+0x19c>)
   1870e:	4e64      	ldr	r6, [pc, #400]	; (188a0 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   18710:	9a00      	ldr	r2, [sp, #0]
   18712:	2300      	movs	r3, #0
   18714:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   18716:	e9d6 0100 	ldrd	r0, r1, [r6]
   1871a:	aa03      	add	r2, sp, #12
   1871c:	f7fc fb9e 	bl	14e5c <memq_peek>
	if (link) {
   18720:	4680      	mov	r8, r0
   18722:	2800      	cmp	r0, #0
   18724:	f000 809f 	beq.w	18866 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   18728:	9b03      	ldr	r3, [sp, #12]
   1872a:	495e      	ldr	r1, [pc, #376]	; (188a4 <ll_rx_get+0x1a4>)
   1872c:	781a      	ldrb	r2, [r3, #0]
   1872e:	9801      	ldr	r0, [sp, #4]
   18730:	f7ff fd9e 	bl	18270 <tx_cmplt_get>
		if (!cmplt) {
   18734:	2800      	cmp	r0, #0
   18736:	f040 809b 	bne.w	18870 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   1873a:	78a3      	ldrb	r3, [r4, #2]
   1873c:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   18740:	78e2      	ldrb	r2, [r4, #3]
   18742:	4607      	mov	r7, r0
   18744:	f10d 0109 	add.w	r1, sp, #9
   18748:	f10d 000a 	add.w	r0, sp, #10
   1874c:	f7ff fd90 	bl	18270 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   18750:	ea47 0200 	orr.w	r2, r7, r0
   18754:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   18758:	d1f2      	bne.n	18740 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   1875a:	9b03      	ldr	r3, [sp, #12]
   1875c:	7919      	ldrb	r1, [r3, #4]
   1875e:	2901      	cmp	r1, #1
   18760:	f040 8093 	bne.w	1888a <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   18764:	494e      	ldr	r1, [pc, #312]	; (188a0 <ll_rx_get+0x1a0>)
   18766:	6870      	ldr	r0, [r6, #4]
   18768:	f7fc fb80 	bl	14e6c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   1876c:	494e      	ldr	r1, [pc, #312]	; (188a8 <ll_rx_get+0x1a8>)
   1876e:	4640      	mov	r0, r8
   18770:	f7fc fb20 	bl	14db4 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18774:	782b      	ldrb	r3, [r5, #0]
   18776:	2b05      	cmp	r3, #5
   18778:	d866      	bhi.n	18848 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   1877a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   1877c:	494b      	ldr	r1, [pc, #300]	; (188ac <ll_rx_get+0x1ac>)
   1877e:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   18780:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   18782:	f7fc fb17 	bl	14db4 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   18786:	782b      	ldrb	r3, [r5, #0]
   18788:	2b00      	cmp	r3, #0
   1878a:	d0c1      	beq.n	18710 <ll_rx_get+0x10>
   1878c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 188b0 <ll_rx_get+0x1b0>
	last = last + 1;
   18790:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   18794:	f898 2001 	ldrb.w	r2, [r8, #1]
   18798:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1879c:	3701      	adds	r7, #1
   1879e:	b2ff      	uxtb	r7, r7
		last = 0U;
   187a0:	42ba      	cmp	r2, r7
   187a2:	bf08      	it	eq
   187a4:	2700      	moveq	r7, #0
	if (last == first) {
   187a6:	429f      	cmp	r7, r3
   187a8:	d019      	beq.n	187de <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   187aa:	483f      	ldr	r0, [pc, #252]	; (188a8 <ll_rx_get+0x1a8>)
   187ac:	f7fc fae8 	bl	14d80 <mem_acquire>
		if (!link) {
   187b0:	4681      	mov	r9, r0
   187b2:	2800      	cmp	r0, #0
   187b4:	d0ac      	beq.n	18710 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   187b6:	483d      	ldr	r0, [pc, #244]	; (188ac <ll_rx_get+0x1ac>)
   187b8:	f7fc fae2 	bl	14d80 <mem_acquire>
		if (!rx) {
   187bc:	2800      	cmp	r0, #0
   187be:	d05a      	beq.n	18876 <ll_rx_get+0x176>
		rx->link = link;
   187c0:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   187c4:	f898 2003 	ldrb.w	r2, [r8, #3]
   187c8:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   187cc:	fb02 8303 	mla	r3, r2, r3, r8
   187d0:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   187d2:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   187d4:	f888 7003 	strb.w	r7, [r8, #3]
   187d8:	3b01      	subs	r3, #1
   187da:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   187dc:	e798      	b.n	18710 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   187de:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 188b4 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   187e2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 188a8 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   187e6:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   187ea:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 188ac <ll_rx_get+0x1ac>
	if (last == count) {
   187ee:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   187f2:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   187f6:	3701      	adds	r7, #1
   187f8:	b2ff      	uxtb	r7, r7
		last = 0U;
   187fa:	42ba      	cmp	r2, r7
   187fc:	bf08      	it	eq
   187fe:	2700      	moveq	r7, #0
	if (last == first) {
   18800:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   18802:	4648      	mov	r0, r9
   18804:	d084      	beq.n	18710 <ll_rx_get+0x10>
   18806:	f7fc fabb 	bl	14d80 <mem_acquire>
   1880a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1880c:	4650      	mov	r0, sl
		if (!link) {
   1880e:	f1bb 0f00 	cmp.w	fp, #0
   18812:	f43f af7d 	beq.w	18710 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   18816:	f7fc fab3 	bl	14d80 <mem_acquire>
		if (!rx) {
   1881a:	2800      	cmp	r0, #0
   1881c:	d030      	beq.n	18880 <ll_rx_get+0x180>
		link->mem = NULL;
   1881e:	2300      	movs	r3, #0
   18820:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   18824:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18828:	f898 2003 	ldrb.w	r2, [r8, #3]
   1882c:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   18830:	fb02 8303 	mla	r3, r2, r3, r8
   18834:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   18836:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   18838:	f888 7003 	strb.w	r7, [r8, #3]
   1883c:	3b01      	subs	r3, #1
   1883e:	b2db      	uxtb	r3, r3
   18840:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   18842:	2b00      	cmp	r3, #0
   18844:	d1d3      	bne.n	187ee <ll_rx_get+0xee>
   18846:	e763      	b.n	18710 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18848:	4a1b      	ldr	r2, [pc, #108]	; (188b8 <ll_rx_get+0x1b8>)
   1884a:	491c      	ldr	r1, [pc, #112]	; (188bc <ll_rx_get+0x1bc>)
   1884c:	481c      	ldr	r0, [pc, #112]	; (188c0 <ll_rx_get+0x1c0>)
   1884e:	f240 6306 	movw	r3, #1542	; 0x606
   18852:	f00e f883 	bl	2695c <printk>
   18856:	4040      	eors	r0, r0
   18858:	f380 8811 	msr	BASEPRI, r0
   1885c:	f04f 0003 	mov.w	r0, #3
   18860:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   18862:	782b      	ldrb	r3, [r5, #0]
   18864:	e789      	b.n	1877a <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   18866:	78e2      	ldrb	r2, [r4, #3]
   18868:	490e      	ldr	r1, [pc, #56]	; (188a4 <ll_rx_get+0x1a4>)
   1886a:	9801      	ldr	r0, [sp, #4]
   1886c:	f7ff fd00 	bl	18270 <tx_cmplt_get>
}
   18870:	b005      	add	sp, #20
   18872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   18876:	490c      	ldr	r1, [pc, #48]	; (188a8 <ll_rx_get+0x1a8>)
   18878:	4648      	mov	r0, r9
   1887a:	f7fc fa9b 	bl	14db4 <mem_release>
			return;
   1887e:	e747      	b.n	18710 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   18880:	4909      	ldr	r1, [pc, #36]	; (188a8 <ll_rx_get+0x1a8>)
   18882:	4658      	mov	r0, fp
   18884:	f7fc fa96 	bl	14db4 <mem_release>
			return;
   18888:	e742      	b.n	18710 <ll_rx_get+0x10>
			*node_rx = rx;
   1888a:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1888c:	4610      	mov	r0, r2
			*node_rx = rx;
   1888e:	600b      	str	r3, [r1, #0]
}
   18890:	b005      	add	sp, #20
   18892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18896:	bf00      	nop
   18898:	200005f0 	.word	0x200005f0
   1889c:	20003134 	.word	0x20003134
   188a0:	20003364 	.word	0x20003364
   188a4:	200005f2 	.word	0x200005f2
   188a8:	20003138 	.word	0x20003138
   188ac:	20003184 	.word	0x20003184
   188b0:	200004d4 	.word	0x200004d4
   188b4:	200004c4 	.word	0x200004c4
   188b8:	0002fa38 	.word	0x0002fa38
   188bc:	0002faa8 	.word	0x0002faa8
   188c0:	0002f6fc 	.word	0x0002f6fc

000188c4 <ll_rx_dequeue>:
{
   188c4:	b510      	push	{r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   188c6:	4932      	ldr	r1, [pc, #200]	; (18990 <ll_rx_dequeue+0xcc>)
{
   188c8:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   188ca:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   188cc:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   188ce:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   188d0:	aa01      	add	r2, sp, #4
   188d2:	f7fc facb 	bl	14e6c <memq_dequeue>
	LL_ASSERT(link);
   188d6:	4604      	mov	r4, r0
   188d8:	2800      	cmp	r0, #0
   188da:	d04a      	beq.n	18972 <ll_rx_dequeue+0xae>
	mem_release(link, &mem_link_rx.free);
   188dc:	492d      	ldr	r1, [pc, #180]	; (18994 <ll_rx_dequeue+0xd0>)
   188de:	4620      	mov	r0, r4
   188e0:	f7fc fa68 	bl	14db4 <mem_release>
	switch (rx->type) {
   188e4:	9a01      	ldr	r2, [sp, #4]
   188e6:	7913      	ldrb	r3, [r2, #4]
   188e8:	2b1c      	cmp	r3, #28
   188ea:	d810      	bhi.n	1890e <ll_rx_dequeue+0x4a>
   188ec:	e8df f003 	tbb	[pc, r3]
   188f0:	1e0f0f1e 	.word	0x1e0f0f1e
   188f4:	0f0f1e0f 	.word	0x0f0f1e0f
   188f8:	0f0f0f0f 	.word	0x0f0f0f0f
   188fc:	0f0f0f0f 	.word	0x0f0f0f0f
   18900:	0f0f0f0f 	.word	0x0f0f0f0f
   18904:	1e2f0f0f 	.word	0x1e2f0f0f
   18908:	1e1e1e1e 	.word	0x1e1e1e1e
   1890c:	1e          	.byte	0x1e
   1890d:	00          	.byte	0x00
		LL_ASSERT(0);
   1890e:	4a22      	ldr	r2, [pc, #136]	; (18998 <ll_rx_dequeue+0xd4>)
   18910:	4922      	ldr	r1, [pc, #136]	; (1899c <ll_rx_dequeue+0xd8>)
   18912:	4823      	ldr	r0, [pc, #140]	; (189a0 <ll_rx_dequeue+0xdc>)
   18914:	f240 43c7 	movw	r3, #1223	; 0x4c7
   18918:	f00e f820 	bl	2695c <printk>
   1891c:	4040      	eors	r0, r0
   1891e:	f380 8811 	msr	BASEPRI, r0
   18922:	f04f 0003 	mov.w	r0, #3
   18926:	df02      	svc	2
}
   18928:	b002      	add	sp, #8
   1892a:	bd10      	pop	{r4, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1892c:	2b00      	cmp	r3, #0
   1892e:	d1fb      	bne.n	18928 <ll_rx_dequeue+0x64>
   18930:	4a19      	ldr	r2, [pc, #100]	; (18998 <ll_rx_dequeue+0xd4>)
   18932:	491c      	ldr	r1, [pc, #112]	; (189a4 <ll_rx_dequeue+0xe0>)
   18934:	481a      	ldr	r0, [pc, #104]	; (189a0 <ll_rx_dequeue+0xdc>)
   18936:	f240 43c3 	movw	r3, #1219	; 0x4c3
   1893a:	f00e f80f 	bl	2695c <printk>
   1893e:	4040      	eors	r0, r0
   18940:	f380 8811 	msr	BASEPRI, r0
   18944:	f04f 0003 	mov.w	r0, #3
   18948:	df02      	svc	2
}
   1894a:	b002      	add	sp, #8
   1894c:	bd10      	pop	{r4, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   1894e:	6893      	ldr	r3, [r2, #8]
   18950:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
   18952:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
			scan->lll.conn = NULL;
   18956:	2000      	movs	r0, #0
			scan->is_enabled = 0U;
   18958:	f360 0200 	bfi	r2, r0, #0, #1
			scan->lll.conn = NULL;
   1895c:	6218      	str	r0, [r3, #32]
			scan->is_enabled = 0U;
   1895e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			      (ull_scan_is_enabled(0) << 1)) |
   18962:	f000 fe81 	bl	19668 <ull_scan_is_enabled>
			if (!bm) {
   18966:	0040      	lsls	r0, r0, #1
   18968:	d1de      	bne.n	18928 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   1896a:	f004 ff07 	bl	1d77c <ull_filter_adv_scan_state_cb>
}
   1896e:	b002      	add	sp, #8
   18970:	bd10      	pop	{r4, pc}
	LL_ASSERT(link);
   18972:	4a09      	ldr	r2, [pc, #36]	; (18998 <ll_rx_dequeue+0xd4>)
   18974:	490c      	ldr	r1, [pc, #48]	; (189a8 <ll_rx_dequeue+0xe4>)
   18976:	480a      	ldr	r0, [pc, #40]	; (189a0 <ll_rx_dequeue+0xdc>)
   18978:	f240 33a1 	movw	r3, #929	; 0x3a1
   1897c:	f00d ffee 	bl	2695c <printk>
   18980:	4040      	eors	r0, r0
   18982:	f380 8811 	msr	BASEPRI, r0
   18986:	f04f 0003 	mov.w	r0, #3
   1898a:	df02      	svc	2
   1898c:	e7a6      	b.n	188dc <ll_rx_dequeue+0x18>
   1898e:	bf00      	nop
   18990:	20003364 	.word	0x20003364
   18994:	20003138 	.word	0x20003138
   18998:	0002fa38 	.word	0x0002fa38
   1899c:	0002f794 	.word	0x0002f794
   189a0:	0002f6fc 	.word	0x0002f6fc
   189a4:	0002fae8 	.word	0x0002fae8
   189a8:	0002fcc0 	.word	0x0002fcc0

000189ac <ll_rx_mem_release>:
{
   189ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   189b0:	6804      	ldr	r4, [r0, #0]
{
   189b2:	4680      	mov	r8, r0
	while (rx) {
   189b4:	b344      	cbz	r4, 18a08 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   189b6:	4f57      	ldr	r7, [pc, #348]	; (18b14 <ll_rx_mem_release+0x168>)
   189b8:	f8df 915c 	ldr.w	r9, [pc, #348]	; 18b18 <ll_rx_mem_release+0x16c>
   189bc:	4e57      	ldr	r6, [pc, #348]	; (18b1c <ll_rx_mem_release+0x170>)
		rx = rx->next;
   189be:	4625      	mov	r5, r4
   189c0:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   189c2:	792b      	ldrb	r3, [r5, #4]
   189c4:	2b1c      	cmp	r3, #28
   189c6:	d810      	bhi.n	189ea <ll_rx_mem_release+0x3e>
   189c8:	e8df f003 	tbb	[pc, r3]
   189cc:	380f0f38 	.word	0x380f0f38
   189d0:	0f0f380f 	.word	0x0f0f380f
   189d4:	0f0f0f0f 	.word	0x0f0f0f0f
   189d8:	0f0f0f0f 	.word	0x0f0f0f0f
   189dc:	0f0f0f0f 	.word	0x0f0f0f0f
   189e0:	56260f0f 	.word	0x56260f0f
   189e4:	38383838 	.word	0x38383838
   189e8:	38          	.byte	0x38
   189e9:	00          	.byte	0x00
			LL_ASSERT(0);
   189ea:	f240 53fa 	movw	r3, #1530	; 0x5fa
   189ee:	463a      	mov	r2, r7
   189f0:	4649      	mov	r1, r9
   189f2:	4630      	mov	r0, r6
   189f4:	f00d ffb2 	bl	2695c <printk>
   189f8:	4040      	eors	r0, r0
   189fa:	f380 8811 	msr	BASEPRI, r0
   189fe:	f04f 0003 	mov.w	r0, #3
   18a02:	df02      	svc	2
	while (rx) {
   18a04:	2c00      	cmp	r4, #0
   18a06:	d1da      	bne.n	189be <ll_rx_mem_release+0x12>
	*node_rx = rx;
   18a08:	2300      	movs	r3, #0
   18a0a:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   18a0e:	20ff      	movs	r0, #255	; 0xff
}
   18a10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   18a14:	f7ff bd16 	b.w	18444 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   18a18:	7f2b      	ldrb	r3, [r5, #28]
   18a1a:	2b02      	cmp	r3, #2
   18a1c:	d062      	beq.n	18ae4 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   18a1e:	b1db      	cbz	r3, 18a58 <ll_rx_mem_release+0xac>
   18a20:	493f      	ldr	r1, [pc, #252]	; (18b20 <ll_rx_mem_release+0x174>)
   18a22:	f240 532b 	movw	r3, #1323	; 0x52b
   18a26:	463a      	mov	r2, r7
   18a28:	4630      	mov	r0, r6
   18a2a:	f00d ff97 	bl	2695c <printk>
   18a2e:	4040      	eors	r0, r0
   18a30:	f380 8811 	msr	BASEPRI, r0
   18a34:	f04f 0003 	mov.w	r0, #3
   18a38:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   18a3a:	792b      	ldrb	r3, [r5, #4]
   18a3c:	b963      	cbnz	r3, 18a58 <ll_rx_mem_release+0xac>
   18a3e:	4939      	ldr	r1, [pc, #228]	; (18b24 <ll_rx_mem_release+0x178>)
   18a40:	f240 537d 	movw	r3, #1405	; 0x57d
   18a44:	463a      	mov	r2, r7
   18a46:	4630      	mov	r0, r6
   18a48:	f00d ff88 	bl	2695c <printk>
   18a4c:	4040      	eors	r0, r0
   18a4e:	f380 8811 	msr	BASEPRI, r0
   18a52:	f04f 0003 	mov.w	r0, #3
   18a56:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18a58:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 18b28 <ll_rx_mem_release+0x17c>
   18a5c:	f89a 3000 	ldrb.w	r3, [sl]
   18a60:	2b05      	cmp	r3, #5
   18a62:	d82f      	bhi.n	18ac4 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   18a64:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   18a66:	4931      	ldr	r1, [pc, #196]	; (18b2c <ll_rx_mem_release+0x180>)
	mem_link_rx.quota_pdu += delta;
   18a68:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   18a6c:	4628      	mov	r0, r5
   18a6e:	f7fc f9a1 	bl	14db4 <mem_release>
	while (rx) {
   18a72:	2c00      	cmp	r4, #0
   18a74:	d1a3      	bne.n	189be <ll_rx_mem_release+0x12>
   18a76:	e7c7      	b.n	18a08 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   18a78:	88e8      	ldrh	r0, [r5, #6]
   18a7a:	2800      	cmp	r0, #0
   18a7c:	d1c2      	bne.n	18a04 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   18a7e:	f001 fa59 	bl	19f34 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   18a82:	6d83      	ldr	r3, [r0, #88]	; 0x58
				conn = ll_conn_get(rx_free->handle);
   18a84:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   18a86:	b163      	cbz	r3, 18aa2 <ll_rx_mem_release+0xf6>
   18a88:	4929      	ldr	r1, [pc, #164]	; (18b30 <ll_rx_mem_release+0x184>)
   18a8a:	f240 53ec 	movw	r3, #1516	; 0x5ec
   18a8e:	463a      	mov	r2, r7
   18a90:	4630      	mov	r0, r6
   18a92:	f00d ff63 	bl	2695c <printk>
   18a96:	4040      	eors	r0, r0
   18a98:	f380 8811 	msr	BASEPRI, r0
   18a9c:	f04f 0003 	mov.w	r0, #3
   18aa0:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   18aa2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   18aa6:	f105 0048 	add.w	r0, r5, #72	; 0x48
   18aaa:	f7fc f9c3 	bl	14e34 <memq_deinit>
				LL_ASSERT(link);
   18aae:	4682      	mov	sl, r0
   18ab0:	b310      	cbz	r0, 18af8 <ll_rx_mem_release+0x14c>
				conn->lll.link_tx_free = link;
   18ab2:	f8c5 a058 	str.w	sl, [r5, #88]	; 0x58
				ll_conn_release(conn);
   18ab6:	4628      	mov	r0, r5
   18ab8:	f001 fa2e 	bl	19f18 <ll_conn_release>
	while (rx) {
   18abc:	2c00      	cmp	r4, #0
   18abe:	f47f af7e 	bne.w	189be <ll_rx_mem_release+0x12>
   18ac2:	e7a1      	b.n	18a08 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18ac4:	491b      	ldr	r1, [pc, #108]	; (18b34 <ll_rx_mem_release+0x188>)
   18ac6:	f240 6306 	movw	r3, #1542	; 0x606
   18aca:	463a      	mov	r2, r7
   18acc:	4630      	mov	r0, r6
   18ace:	f00d ff45 	bl	2695c <printk>
   18ad2:	4040      	eors	r0, r0
   18ad4:	f380 8811 	msr	BASEPRI, r0
   18ad8:	f04f 0003 	mov.w	r0, #3
   18adc:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   18ade:	f89a 3000 	ldrb.w	r3, [sl]
   18ae2:	e7bf      	b.n	18a64 <ll_rx_mem_release+0xb8>
				ull_central_cleanup(rx_free);
   18ae4:	4628      	mov	r0, r5
   18ae6:	f003 ff01 	bl	1c8ec <ull_central_cleanup>
					ull_filter_adv_scan_state_cb(0);
   18aea:	2000      	movs	r0, #0
   18aec:	f004 fe46 	bl	1d77c <ull_filter_adv_scan_state_cb>
	while (rx) {
   18af0:	2c00      	cmp	r4, #0
   18af2:	f47f af64 	bne.w	189be <ll_rx_mem_release+0x12>
   18af6:	e787      	b.n	18a08 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   18af8:	490f      	ldr	r1, [pc, #60]	; (18b38 <ll_rx_mem_release+0x18c>)
   18afa:	f240 53ef 	movw	r3, #1519	; 0x5ef
   18afe:	463a      	mov	r2, r7
   18b00:	4630      	mov	r0, r6
   18b02:	f00d ff2b 	bl	2695c <printk>
   18b06:	4040      	eors	r0, r0
   18b08:	f380 8811 	msr	BASEPRI, r0
   18b0c:	f04f 0003 	mov.w	r0, #3
   18b10:	df02      	svc	2
   18b12:	e7ce      	b.n	18ab2 <ll_rx_mem_release+0x106>
   18b14:	0002fa38 	.word	0x0002fa38
   18b18:	0002f794 	.word	0x0002f794
   18b1c:	0002f6fc 	.word	0x0002f6fc
   18b20:	0002fb08 	.word	0x0002fb08
   18b24:	0002fb14 	.word	0x0002fb14
   18b28:	20003134 	.word	0x20003134
   18b2c:	20003184 	.word	0x20003184
   18b30:	0002fb38 	.word	0x0002fb38
   18b34:	0002faa8 	.word	0x0002faa8
   18b38:	0002fcc0 	.word	0x0002fcc0

00018b3c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   18b3c:	4801      	ldr	r0, [pc, #4]	; (18b44 <ll_rx_link_alloc+0x8>)
   18b3e:	f7fc b91f 	b.w	14d80 <mem_acquire>
   18b42:	bf00      	nop
   18b44:	20003138 	.word	0x20003138

00018b48 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   18b48:	4901      	ldr	r1, [pc, #4]	; (18b50 <ll_rx_link_release+0x8>)
   18b4a:	f7fc b933 	b.w	14db4 <mem_release>
   18b4e:	bf00      	nop
   18b50:	20003138 	.word	0x20003138

00018b54 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18b54:	4b02      	ldr	r3, [pc, #8]	; (18b60 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18b56:	4a03      	ldr	r2, [pc, #12]	; (18b64 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18b58:	78db      	ldrb	r3, [r3, #3]
   18b5a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18b5c:	f7fc b974 	b.w	14e48 <memq_enqueue>
   18b60:	200005f0 	.word	0x200005f0
   18b64:	20003368 	.word	0x20003368

00018b68 <ll_rx_sched>:
	k_sem_give(sem_recv);
   18b68:	4b01      	ldr	r3, [pc, #4]	; (18b70 <ll_rx_sched+0x8>)
   18b6a:	6818      	ldr	r0, [r3, #0]
   18b6c:	f00c bcc2 	b.w	254f4 <z_impl_k_sem_give>
   18b70:	2000337c 	.word	0x2000337c

00018b74 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   18b74:	4b0d      	ldr	r3, [pc, #52]	; (18bac <ll_pdu_rx_alloc_peek+0x38>)
   18b76:	7899      	ldrb	r1, [r3, #2]
   18b78:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   18b7a:	4291      	cmp	r1, r2
   18b7c:	d80a      	bhi.n	18b94 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   18b7e:	eba2 0c01 	sub.w	ip, r2, r1
   18b82:	fa5f fc8c 	uxtb.w	ip, ip
   18b86:	4560      	cmp	r0, ip
   18b88:	d802      	bhi.n	18b90 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   18b8a:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   18b8c:	7818      	ldrb	r0, [r3, #0]
   18b8e:	d109      	bne.n	18ba4 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   18b90:	2000      	movs	r0, #0
}
   18b92:	4770      	bx	lr
		return count - first + last;
   18b94:	f893 c001 	ldrb.w	ip, [r3, #1]
   18b98:	4462      	add	r2, ip
   18b9a:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   18b9c:	b2d2      	uxtb	r2, r2
   18b9e:	4290      	cmp	r0, r2
   18ba0:	d8f6      	bhi.n	18b90 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   18ba2:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   18ba4:	fb01 3300 	mla	r3, r1, r0, r3
   18ba8:	6858      	ldr	r0, [r3, #4]
   18baa:	4770      	bx	lr
   18bac:	200004c4 	.word	0x200004c4

00018bb0 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   18bb0:	4b09      	ldr	r3, [pc, #36]	; (18bd8 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   18bb2:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   18bb4:	78da      	ldrb	r2, [r3, #3]
   18bb6:	7818      	ldrb	r0, [r3, #0]
   18bb8:	f893 c001 	ldrb.w	ip, [r3, #1]
   18bbc:	428a      	cmp	r2, r1
   18bbe:	d009      	beq.n	18bd4 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   18bc0:	1c4a      	adds	r2, r1, #1
   18bc2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   18bc4:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   18bc8:	4594      	cmp	ip, r2
   18bca:	bf08      	it	eq
   18bcc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   18bce:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   18bd0:	709a      	strb	r2, [r3, #2]

	return mem;
   18bd2:	4770      	bx	lr
		return NULL;
   18bd4:	2000      	movs	r0, #0
}
   18bd6:	4770      	bx	lr
   18bd8:	200004c4 	.word	0x200004c4

00018bdc <ll_tx_ack_put>:
{
   18bdc:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   18bde:	4a15      	ldr	r2, [pc, #84]	; (18c34 <ll_tx_ack_put+0x58>)
   18be0:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   18be4:	7854      	ldrb	r4, [r2, #1]
   18be6:	f892 e002 	ldrb.w	lr, [r2, #2]
   18bea:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   18bec:	f10c 0301 	add.w	r3, ip, #1
   18bf0:	b2db      	uxtb	r3, r3
		last = 0U;
   18bf2:	429c      	cmp	r4, r3
   18bf4:	bf08      	it	eq
   18bf6:	2300      	moveq	r3, #0
	if (last == first) {
   18bf8:	459e      	cmp	lr, r3
   18bfa:	d00a      	beq.n	18c12 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18bfc:	fb1c fc05 	smulbb	ip, ip, r5
   18c00:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   18c04:	f82e 000c 	strh.w	r0, [lr, ip]
   18c08:	44f4      	add	ip, lr
	tx->node = node_tx;
   18c0a:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   18c0e:	70d3      	strb	r3, [r2, #3]
}
   18c10:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   18c12:	4a09      	ldr	r2, [pc, #36]	; (18c38 <ll_tx_ack_put+0x5c>)
   18c14:	4909      	ldr	r1, [pc, #36]	; (18c3c <ll_tx_ack_put+0x60>)
   18c16:	480a      	ldr	r0, [pc, #40]	; (18c40 <ll_tx_ack_put+0x64>)
   18c18:	f240 634e 	movw	r3, #1614	; 0x64e
   18c1c:	f00d fe9e 	bl	2695c <printk>
   18c20:	4040      	eors	r0, r0
   18c22:	f380 8811 	msr	BASEPRI, r0
   18c26:	f04f 0003 	mov.w	r0, #3
   18c2a:	df02      	svc	2
	tx->handle = handle;
   18c2c:	2300      	movs	r3, #0
   18c2e:	801b      	strh	r3, [r3, #0]
   18c30:	deff      	udf	#255	; 0xff
   18c32:	bf00      	nop
   18c34:	200005f0 	.word	0x200005f0
   18c38:	0002fa38 	.word	0x0002fa38
   18c3c:	0002fcb4 	.word	0x0002fcb4
   18c40:	0002f6fc 	.word	0x0002f6fc

00018c44 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18c44:	f030 0302 	bics.w	r3, r0, #2
{
   18c48:	b510      	push	{r4, lr}
   18c4a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18c4c:	d002      	beq.n	18c54 <ull_ticker_status_take+0x10>
   18c4e:	680b      	ldr	r3, [r1, #0]
   18c50:	2b02      	cmp	r3, #2
   18c52:	d008      	beq.n	18c66 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   18c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18c5c:	4809      	ldr	r0, [pc, #36]	; (18c84 <ull_ticker_status_take+0x40>)
   18c5e:	f00c fc6f 	bl	25540 <z_impl_k_sem_take>
	return *ret_cb;
   18c62:	6820      	ldr	r0, [r4, #0]
}
   18c64:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18c66:	4a08      	ldr	r2, [pc, #32]	; (18c88 <ull_ticker_status_take+0x44>)
   18c68:	4908      	ldr	r1, [pc, #32]	; (18c8c <ull_ticker_status_take+0x48>)
   18c6a:	4809      	ldr	r0, [pc, #36]	; (18c90 <ull_ticker_status_take+0x4c>)
   18c6c:	f240 6382 	movw	r3, #1666	; 0x682
   18c70:	f00d fe74 	bl	2695c <printk>
   18c74:	4040      	eors	r0, r0
   18c76:	f380 8811 	msr	BASEPRI, r0
   18c7a:	f04f 0003 	mov.w	r0, #3
   18c7e:	df02      	svc	2
   18c80:	e7e8      	b.n	18c54 <ull_ticker_status_take+0x10>
   18c82:	bf00      	nop
   18c84:	20003380 	.word	0x20003380
   18c88:	0002fa38 	.word	0x0002fa38
   18c8c:	0002fb58 	.word	0x0002fb58
   18c90:	0002f6fc 	.word	0x0002f6fc

00018c94 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   18c94:	4b01      	ldr	r3, [pc, #4]	; (18c9c <ull_disable_mark_get+0x8>)
}
   18c96:	6818      	ldr	r0, [r3, #0]
   18c98:	4770      	bx	lr
   18c9a:	bf00      	nop
   18c9c:	20003100 	.word	0x20003100

00018ca0 <ull_update_mark>:
	if (!*m) {
   18ca0:	4a03      	ldr	r2, [pc, #12]	; (18cb0 <ull_update_mark+0x10>)
{
   18ca2:	4603      	mov	r3, r0
	if (!*m) {
   18ca4:	6810      	ldr	r0, [r2, #0]
   18ca6:	b100      	cbz	r0, 18caa <ull_update_mark+0xa>
}
   18ca8:	4770      	bx	lr
		*m = param;
   18caa:	6013      	str	r3, [r2, #0]
   18cac:	4618      	mov	r0, r3
}
   18cae:	4770      	bx	lr
   18cb0:	20003104 	.word	0x20003104

00018cb4 <ull_update_unmark>:
	if (*m && *m == param) {
   18cb4:	4a04      	ldr	r2, [pc, #16]	; (18cc8 <ull_update_unmark+0x14>)
   18cb6:	6813      	ldr	r3, [r2, #0]
   18cb8:	b123      	cbz	r3, 18cc4 <ull_update_unmark+0x10>
   18cba:	4298      	cmp	r0, r3
		*m = NULL;
   18cbc:	bf06      	itte	eq
   18cbe:	2100      	moveq	r1, #0
   18cc0:	6011      	streq	r1, [r2, #0]
	return NULL;
   18cc2:	2300      	movne	r3, #0
}
   18cc4:	4618      	mov	r0, r3
   18cc6:	4770      	bx	lr
   18cc8:	20003104 	.word	0x20003104

00018ccc <ull_update_mark_get>:
	return mark_get(mark_update);
   18ccc:	4b01      	ldr	r3, [pc, #4]	; (18cd4 <ull_update_mark_get+0x8>)
}
   18cce:	6818      	ldr	r0, [r3, #0]
   18cd0:	4770      	bx	lr
   18cd2:	bf00      	nop
   18cd4:	20003104 	.word	0x20003104

00018cd8 <ull_disable>:
{
   18cd8:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   18cda:	6805      	ldr	r5, [r0, #0]
   18cdc:	782b      	ldrb	r3, [r5, #0]
{
   18cde:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   18ce0:	b353      	cbz	r3, 18d38 <ull_disable+0x60>
	compiler_barrier();
   18ce2:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   18ce4:	2201      	movs	r2, #1
   18ce6:	2100      	movs	r1, #0
   18ce8:	4668      	mov	r0, sp
   18cea:	f014 fd16 	bl	2d71a <z_impl_k_sem_init>
   18cee:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   18cf0:	4a13      	ldr	r2, [pc, #76]	; (18d40 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   18cf2:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   18cf6:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   18cf8:	b1f3      	cbz	r3, 18d38 <ull_disable+0x60>
	mfy.param = lll;
   18cfa:	4b12      	ldr	r3, [pc, #72]	; (18d44 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   18cfc:	2200      	movs	r2, #0
   18cfe:	4611      	mov	r1, r2
   18d00:	2003      	movs	r0, #3
	mfy.param = lll;
   18d02:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   18d04:	f7fc f914 	bl	14f30 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18d08:	b940      	cbnz	r0, 18d1c <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   18d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d12:	4668      	mov	r0, sp
   18d14:	f00c fc14 	bl	25540 <z_impl_k_sem_take>
}
   18d18:	b007      	add	sp, #28
   18d1a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   18d1c:	4a0a      	ldr	r2, [pc, #40]	; (18d48 <ull_disable+0x70>)
   18d1e:	490b      	ldr	r1, [pc, #44]	; (18d4c <ull_disable+0x74>)
   18d20:	480b      	ldr	r0, [pc, #44]	; (18d50 <ull_disable+0x78>)
   18d22:	f240 63ff 	movw	r3, #1791	; 0x6ff
   18d26:	f00d fe19 	bl	2695c <printk>
   18d2a:	4040      	eors	r0, r0
   18d2c:	f380 8811 	msr	BASEPRI, r0
   18d30:	f04f 0003 	mov.w	r0, #3
   18d34:	df02      	svc	2
   18d36:	e7e8      	b.n	18d0a <ull_disable+0x32>
		return -EALREADY;
   18d38:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18d3c:	e7ec      	b.n	18d18 <ull_disable+0x40>
   18d3e:	bf00      	nop
   18d40:	0001826d 	.word	0x0001826d
   18d44:	20000654 	.word	0x20000654
   18d48:	0002fa38 	.word	0x0002fa38
   18d4c:	0002fb50 	.word	0x0002fb50
   18d50:	0002f6fc 	.word	0x0002f6fc

00018d54 <ull_ticker_stop_with_mark>:
{
   18d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   18d56:	4e20      	ldr	r6, [pc, #128]	; (18dd8 <ull_ticker_stop_with_mark+0x84>)
   18d58:	6833      	ldr	r3, [r6, #0]
{
   18d5a:	b085      	sub	sp, #20
   18d5c:	460c      	mov	r4, r1
   18d5e:	4617      	mov	r7, r2
	if (!*m) {
   18d60:	b353      	cbz	r3, 18db8 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   18d62:	4299      	cmp	r1, r3
   18d64:	d113      	bne.n	18d8e <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18d66:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   18d68:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18d6a:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   18d6c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18d6e:	9500      	str	r5, [sp, #0]
   18d70:	4b1a      	ldr	r3, [pc, #104]	; (18ddc <ull_ticker_stop_with_mark+0x88>)
   18d72:	2103      	movs	r1, #3
   18d74:	2000      	movs	r0, #0
   18d76:	f7fd fb31 	bl	163dc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   18d7a:	4629      	mov	r1, r5
   18d7c:	f7ff ff62 	bl	18c44 <ull_ticker_status_take>
	if (ret) {
   18d80:	4605      	mov	r5, r0
   18d82:	b140      	cbz	r0, 18d96 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   18d84:	6833      	ldr	r3, [r6, #0]
   18d86:	b10b      	cbz	r3, 18d8c <ull_ticker_stop_with_mark+0x38>
   18d88:	429c      	cmp	r4, r3
   18d8a:	d017      	beq.n	18dbc <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   18d8c:	b304      	cbz	r4, 18dd0 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   18d8e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   18d92:	b005      	add	sp, #20
   18d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   18d96:	4638      	mov	r0, r7
   18d98:	f7ff ff9e 	bl	18cd8 <ull_disable>
	if (*m && *m == param) {
   18d9c:	6833      	ldr	r3, [r6, #0]
   18d9e:	b10b      	cbz	r3, 18da4 <ull_ticker_stop_with_mark+0x50>
   18da0:	429c      	cmp	r4, r3
   18da2:	d011      	beq.n	18dc8 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   18da4:	2c00      	cmp	r4, #0
   18da6:	d1f2      	bne.n	18d8e <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   18da8:	2800      	cmp	r0, #0
   18daa:	d0f2      	beq.n	18d92 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   18dac:	f110 0f78 	cmn.w	r0, #120	; 0x78
   18db0:	bf08      	it	eq
   18db2:	2000      	moveq	r0, #0
}
   18db4:	b005      	add	sp, #20
   18db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   18db8:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   18dba:	e7d4      	b.n	18d66 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   18dbc:	2300      	movs	r3, #0
		return -EALREADY;
   18dbe:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   18dc2:	6033      	str	r3, [r6, #0]
}
   18dc4:	b005      	add	sp, #20
   18dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   18dc8:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   18dca:	2800      	cmp	r0, #0
   18dcc:	d0e1      	beq.n	18d92 <ull_ticker_stop_with_mark+0x3e>
   18dce:	e7ed      	b.n	18dac <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   18dd0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18dd4:	e7dd      	b.n	18d92 <ull_ticker_stop_with_mark+0x3e>
   18dd6:	bf00      	nop
   18dd8:	20003100 	.word	0x20003100
   18ddc:	00018261 	.word	0x00018261

00018de0 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   18de0:	4b0d      	ldr	r3, [pc, #52]	; (18e18 <ull_pdu_rx_alloc_peek+0x38>)
   18de2:	7899      	ldrb	r1, [r3, #2]
   18de4:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   18de6:	4291      	cmp	r1, r2
   18de8:	d80a      	bhi.n	18e00 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   18dea:	eba2 0c01 	sub.w	ip, r2, r1
   18dee:	fa5f fc8c 	uxtb.w	ip, ip
   18df2:	4560      	cmp	r0, ip
   18df4:	d802      	bhi.n	18dfc <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   18df6:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   18df8:	7818      	ldrb	r0, [r3, #0]
   18dfa:	d109      	bne.n	18e10 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   18dfc:	2000      	movs	r0, #0
}
   18dfe:	4770      	bx	lr
		return count - first + last;
   18e00:	f893 c001 	ldrb.w	ip, [r3, #1]
   18e04:	4462      	add	r2, ip
   18e06:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   18e08:	b2d2      	uxtb	r2, r2
   18e0a:	4290      	cmp	r0, r2
   18e0c:	d8f6      	bhi.n	18dfc <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   18e0e:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   18e10:	fb01 3300 	mla	r3, r1, r0, r3
   18e14:	6858      	ldr	r0, [r3, #4]
   18e16:	4770      	bx	lr
   18e18:	200004d4 	.word	0x200004d4

00018e1c <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   18e1c:	4b09      	ldr	r3, [pc, #36]	; (18e44 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   18e1e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   18e20:	78da      	ldrb	r2, [r3, #3]
   18e22:	7818      	ldrb	r0, [r3, #0]
   18e24:	f893 c001 	ldrb.w	ip, [r3, #1]
   18e28:	428a      	cmp	r2, r1
   18e2a:	d009      	beq.n	18e40 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   18e2c:	1c4a      	adds	r2, r1, #1
   18e2e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   18e30:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   18e34:	4594      	cmp	ip, r2
   18e36:	bf08      	it	eq
   18e38:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   18e3a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   18e3c:	709a      	strb	r2, [r3, #2]
	return mem;
   18e3e:	4770      	bx	lr
		return NULL;
   18e40:	2000      	movs	r0, #0
}
   18e42:	4770      	bx	lr
   18e44:	200004d4 	.word	0x200004d4

00018e48 <ull_rx_put>:
{
   18e48:	b538      	push	{r3, r4, r5, lr}
   18e4a:	460c      	mov	r4, r1
   18e4c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   18e4e:	f003 f97f 	bl	1c150 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18e52:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   18e54:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18e56:	4a03      	ldr	r2, [pc, #12]	; (18e64 <ull_rx_put+0x1c>)
   18e58:	4628      	mov	r0, r5
}
   18e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18e5e:	f7fb bff3 	b.w	14e48 <memq_enqueue>
   18e62:	bf00      	nop
   18e64:	20003378 	.word	0x20003378

00018e68 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   18e68:	2201      	movs	r2, #1
   18e6a:	4b02      	ldr	r3, [pc, #8]	; (18e74 <ull_rx_sched+0xc>)
   18e6c:	4611      	mov	r1, r2
   18e6e:	2000      	movs	r0, #0
   18e70:	f7fc b85e 	b.w	14f30 <mayfly_enqueue>
   18e74:	20000644 	.word	0x20000644

00018e78 <ull_prepare_enqueue>:
{
   18e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18e7c:	4e15      	ldr	r6, [pc, #84]	; (18ed4 <ull_prepare_enqueue+0x5c>)
{
   18e7e:	f89d a020 	ldrb.w	sl, [sp, #32]
   18e82:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18e84:	78f3      	ldrb	r3, [r6, #3]
{
   18e86:	460f      	mov	r7, r1
	last = last + 1;
   18e88:	1c5d      	adds	r5, r3, #1
   18e8a:	4611      	mov	r1, r2
	if (last == count) {
   18e8c:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   18e8e:	b2ed      	uxtb	r5, r5
		last = 0U;
   18e90:	42aa      	cmp	r2, r5
   18e92:	bf08      	it	eq
   18e94:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18e96:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   18e98:	42aa      	cmp	r2, r5
{
   18e9a:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18e9c:	7830      	ldrb	r0, [r6, #0]
   18e9e:	d015      	beq.n	18ecc <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18ea0:	1d34      	adds	r4, r6, #4
   18ea2:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   18ea6:	2210      	movs	r2, #16
   18ea8:	4620      	mov	r0, r4
   18eaa:	f011 fa57 	bl	2a35c <memcpy>
	e->is_resume = is_resume;
   18eae:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   18eb0:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   18eb2:	f00a 0a01 	and.w	sl, sl, #1
   18eb6:	f023 0303 	bic.w	r3, r3, #3
   18eba:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   18ebe:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   18ec2:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   18ec4:	70f5      	strb	r5, [r6, #3]
}
   18ec6:	4620      	mov	r0, r4
   18ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   18ecc:	2400      	movs	r4, #0
}
   18ece:	4620      	mov	r0, r4
   18ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18ed4:	200004ec 	.word	0x200004ec

00018ed8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   18ed8:	4b05      	ldr	r3, [pc, #20]	; (18ef0 <ull_prepare_dequeue_get+0x18>)
   18eda:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   18edc:	78da      	ldrb	r2, [r3, #3]
   18ede:	7819      	ldrb	r1, [r3, #0]
   18ee0:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   18ee2:	bf1a      	itte	ne
   18ee4:	3304      	addne	r3, #4
   18ee6:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   18eea:	2000      	moveq	r0, #0
}
   18eec:	4770      	bx	lr
   18eee:	bf00      	nop
   18ef0:	200004ec 	.word	0x200004ec

00018ef4 <ull_prepare_dequeue_iter>:
{
   18ef4:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   18ef6:	4b0d      	ldr	r3, [pc, #52]	; (18f2c <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   18ef8:	7802      	ldrb	r2, [r0, #0]
   18efa:	7859      	ldrb	r1, [r3, #1]
   18efc:	f893 c003 	ldrb.w	ip, [r3, #3]
   18f00:	f893 e000 	ldrb.w	lr, [r3]
   18f04:	4291      	cmp	r1, r2
   18f06:	bf9c      	itt	ls
   18f08:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   18f0a:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   18f0c:	4594      	cmp	ip, r2
   18f0e:	d00a      	beq.n	18f26 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   18f10:	1c53      	adds	r3, r2, #1
   18f12:	b2db      	uxtb	r3, r3
		i = 0U;
   18f14:	4299      	cmp	r1, r3
   18f16:	bf08      	it	eq
   18f18:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   18f1a:	4905      	ldr	r1, [pc, #20]	; (18f30 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   18f1c:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   18f1e:	fb02 100e 	mla	r0, r2, lr, r1
}
   18f22:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   18f26:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   18f28:	e7fb      	b.n	18f22 <ull_prepare_dequeue_iter+0x2e>
   18f2a:	bf00      	nop
   18f2c:	200004ec 	.word	0x200004ec
   18f30:	200004f0 	.word	0x200004f0

00018f34 <ull_prepare_dequeue>:
{
   18f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   18f38:	4c23      	ldr	r4, [pc, #140]	; (18fc8 <ull_prepare_dequeue+0x94>)
   18f3a:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   18f3c:	78e1      	ldrb	r1, [r4, #3]
   18f3e:	7823      	ldrb	r3, [r4, #0]
   18f40:	4291      	cmp	r1, r2
   18f42:	d027      	beq.n	18f94 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   18f44:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   18f46:	f8df 9084 	ldr.w	r9, [pc, #132]	; 18fcc <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   18f4a:	f8df b084 	ldr.w	fp, [pc, #132]	; 18fd0 <ull_prepare_dequeue+0x9c>
   18f4e:	f8df a084 	ldr.w	sl, [pc, #132]	; 18fd4 <ull_prepare_dequeue+0xa0>
   18f52:	4680      	mov	r8, r0
   18f54:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   18f58:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   18f5a:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   18f5c:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   18f60:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   18f64:	d518      	bpl.n	18f98 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   18f66:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   18f68:	78e1      	ldrb	r1, [r4, #3]
   18f6a:	7820      	ldrb	r0, [r4, #0]
   18f6c:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   18f70:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   18f72:	4291      	cmp	r1, r2
	_first += 1U;
   18f74:	b2db      	uxtb	r3, r3
	if (_first == last) {
   18f76:	d00d      	beq.n	18f94 <ull_prepare_dequeue+0x60>
		_first = 0U;
   18f78:	459c      	cmp	ip, r3
   18f7a:	bf08      	it	eq
   18f7c:	2300      	moveq	r3, #0
	if (first == last) {
   18f7e:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   18f80:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   18f82:	d007      	beq.n	18f94 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   18f84:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   18f88:	2d00      	cmp	r5, #0
   18f8a:	d1e5      	bne.n	18f58 <ull_prepare_dequeue+0x24>
   18f8c:	b116      	cbz	r6, 18f94 <ull_prepare_dequeue+0x60>
   18f8e:	7f03      	ldrb	r3, [r0, #28]
   18f90:	07db      	lsls	r3, r3, #31
   18f92:	d5e1      	bpl.n	18f58 <ull_prepare_dequeue+0x24>
}
   18f94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   18f98:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   18f9c:	4b0b      	ldr	r3, [pc, #44]	; (18fcc <ull_prepare_dequeue+0x98>)
   18f9e:	462a      	mov	r2, r5
   18fa0:	4629      	mov	r1, r5
   18fa2:	4640      	mov	r0, r8
   18fa4:	f7fb ffc4 	bl	14f30 <mayfly_enqueue>
			LL_ASSERT(!ret);
   18fa8:	2800      	cmp	r0, #0
   18faa:	d0dc      	beq.n	18f66 <ull_prepare_dequeue+0x32>
   18fac:	480a      	ldr	r0, [pc, #40]	; (18fd8 <ull_prepare_dequeue+0xa4>)
   18fae:	f240 7376 	movw	r3, #1910	; 0x776
   18fb2:	465a      	mov	r2, fp
   18fb4:	4651      	mov	r1, sl
   18fb6:	f00d fcd1 	bl	2695c <printk>
   18fba:	4040      	eors	r0, r0
   18fbc:	f380 8811 	msr	BASEPRI, r0
   18fc0:	f04f 0003 	mov.w	r0, #3
   18fc4:	df02      	svc	2
   18fc6:	e7ce      	b.n	18f66 <ull_prepare_dequeue+0x32>
   18fc8:	200004ec 	.word	0x200004ec
   18fcc:	20000614 	.word	0x20000614
   18fd0:	0002fa38 	.word	0x0002fa38
   18fd4:	0002fb50 	.word	0x0002fb50
   18fd8:	0002f6fc 	.word	0x0002f6fc

00018fdc <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   18fdc:	4b06      	ldr	r3, [pc, #24]	; (18ff8 <ull_event_done_extra_get+0x1c>)
   18fde:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   18fe0:	78d9      	ldrb	r1, [r3, #3]
   18fe2:	7818      	ldrb	r0, [r3, #0]
   18fe4:	4291      	cmp	r1, r2
   18fe6:	d005      	beq.n	18ff4 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   18fe8:	fb02 3300 	mla	r3, r2, r0, r3
   18fec:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   18fee:	b110      	cbz	r0, 18ff6 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   18ff0:	3020      	adds	r0, #32
   18ff2:	4770      	bx	lr
		return NULL;
   18ff4:	2000      	movs	r0, #0
}
   18ff6:	4770      	bx	lr
   18ff8:	200004ac 	.word	0x200004ac

00018ffc <ull_event_done>:
{
   18ffc:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   18ffe:	4a13      	ldr	r2, [pc, #76]	; (1904c <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   19000:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   19002:	78d4      	ldrb	r4, [r2, #3]
   19004:	7811      	ldrb	r1, [r2, #0]
   19006:	429c      	cmp	r4, r3
{
   19008:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   1900a:	7850      	ldrb	r0, [r2, #1]
   1900c:	d01b      	beq.n	19046 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   1900e:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   19012:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   19014:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   19016:	b2db      	uxtb	r3, r3
		_first = 0U;
   19018:	4298      	cmp	r0, r3
   1901a:	bf08      	it	eq
   1901c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1901e:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   19020:	b17c      	cbz	r4, 19042 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   19022:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   19024:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   19026:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   19028:	4a09      	ldr	r2, [pc, #36]	; (19050 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1902a:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1902c:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   1902e:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   19030:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   19032:	f7fb ff09 	bl	14e48 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   19036:	2201      	movs	r2, #1
   19038:	4b06      	ldr	r3, [pc, #24]	; (19054 <ull_event_done+0x58>)
   1903a:	4611      	mov	r1, r2
   1903c:	4628      	mov	r0, r5
   1903e:	f7fb ff77 	bl	14f30 <mayfly_enqueue>
}
   19042:	4620      	mov	r0, r4
   19044:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   19046:	2400      	movs	r4, #0
   19048:	e7fb      	b.n	19042 <ull_event_done+0x46>
   1904a:	bf00      	nop
   1904c:	200004ac 	.word	0x200004ac
   19050:	20003370 	.word	0x20003370
   19054:	20000634 	.word	0x20000634

00019058 <ull_rxfifo_alloc>:
{
   19058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1905c:	b083      	sub	sp, #12
   1905e:	461d      	mov	r5, r3
   19060:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19062:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   19066:	e9cd 0400 	strd	r0, r4, [sp]
   1906a:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1906e:	b33b      	cbz	r3, 190c0 <ull_rxfifo_alloc+0x68>
   19070:	1e5c      	subs	r4, r3, #1
   19072:	f895 b000 	ldrb.w	fp, [r5]
   19076:	4688      	mov	r8, r1
   19078:	4617      	mov	r7, r2
   1907a:	b2e4      	uxtb	r4, r4
	last = last + 1;
   1907c:	f10b 0301 	add.w	r3, fp, #1
   19080:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   19084:	45d8      	cmp	r8, fp
   19086:	bf08      	it	eq
   19088:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   1908c:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   1908e:	4648      	mov	r0, r9
   19090:	d016      	beq.n	190c0 <ull_rxfifo_alloc+0x68>
   19092:	f7fb fe75 	bl	14d80 <mem_acquire>
   19096:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   19098:	4650      	mov	r0, sl
		if (!link) {
   1909a:	b18e      	cbz	r6, 190c0 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   1909c:	f7fb fe70 	bl	14d80 <mem_acquire>
		if (!rx) {
   190a0:	b188      	cbz	r0, 190c6 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   190a2:	2300      	movs	r3, #0
   190a4:	6073      	str	r3, [r6, #4]
		rx->link = link;
   190a6:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   190a8:	782a      	ldrb	r2, [r5, #0]
   190aa:	9b00      	ldr	r3, [sp, #0]
   190ac:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   190b0:	9b01      	ldr	r3, [sp, #4]
   190b2:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   190b4:	3c01      	subs	r4, #1
   190b6:	b2e4      	uxtb	r4, r4
   190b8:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   190ba:	f885 b000 	strb.w	fp, [r5]
   190be:	d1dd      	bne.n	1907c <ull_rxfifo_alloc+0x24>
}
   190c0:	b003      	add	sp, #12
   190c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   190c6:	4649      	mov	r1, r9
   190c8:	4630      	mov	r0, r6
}
   190ca:	b003      	add	sp, #12
   190cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   190d0:	f7fb be70 	b.w	14db4 <mem_release>

000190d4 <init_reset>:
{
   190d4:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   190d6:	4c3f      	ldr	r4, [pc, #252]	; (191d4 <init_reset+0x100>)
   190d8:	4d3f      	ldr	r5, [pc, #252]	; (191d8 <init_reset+0x104>)
   190da:	79a2      	ldrb	r2, [r4, #6]
   190dc:	88a1      	ldrh	r1, [r4, #4]
   190de:	4e3f      	ldr	r6, [pc, #252]	; (191dc <init_reset+0x108>)
   190e0:	2000      	movs	r0, #0
{
   190e2:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   190e4:	4623      	mov	r3, r4
   190e6:	8068      	strh	r0, [r5, #2]
   190e8:	f104 0008 	add.w	r0, r4, #8
   190ec:	f7fb fe18 	bl	14d20 <mem_init>
   190f0:	79e3      	ldrb	r3, [r4, #7]
   190f2:	79a2      	ldrb	r2, [r4, #6]
   190f4:	1d30      	adds	r0, r6, #4
   190f6:	441a      	add	r2, r3
   190f8:	2108      	movs	r1, #8
   190fa:	4633      	mov	r3, r6
   190fc:	f7fb fe10 	bl	14d20 <mem_init>
   19100:	9602      	str	r6, [sp, #8]
   19102:	462e      	mov	r6, r5
   19104:	79a3      	ldrb	r3, [r4, #6]
   19106:	f816 0b04 	ldrb.w	r0, [r6], #4
   1910a:	78aa      	ldrb	r2, [r5, #2]
   1910c:	7869      	ldrb	r1, [r5, #1]
   1910e:	9303      	str	r3, [sp, #12]
   19110:	e9cd 6400 	strd	r6, r4, [sp]
   19114:	1ceb      	adds	r3, r5, #3
   19116:	f7ff ff9f 	bl	19058 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1911a:	4b31      	ldr	r3, [pc, #196]	; (191e0 <init_reset+0x10c>)
   1911c:	2207      	movs	r2, #7
   1911e:	1d18      	adds	r0, r3, #4
   19120:	2144      	movs	r1, #68	; 0x44
   19122:	f7fb fdfd 	bl	14d20 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   19126:	4b2f      	ldr	r3, [pc, #188]	; (191e4 <init_reset+0x110>)
   19128:	2209      	movs	r2, #9
   1912a:	1d18      	adds	r0, r3, #4
   1912c:	2108      	movs	r1, #8
   1912e:	f7fb fdf7 	bl	14d20 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   19132:	482c      	ldr	r0, [pc, #176]	; (191e4 <init_reset+0x110>)
   19134:	f7fb fe24 	bl	14d80 <mem_acquire>
	LL_ASSERT(link);
   19138:	4604      	mov	r4, r0
   1913a:	b308      	cbz	r0, 19180 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   1913c:	4a2a      	ldr	r2, [pc, #168]	; (191e8 <init_reset+0x114>)
   1913e:	4620      	mov	r0, r4
   19140:	1f11      	subs	r1, r2, #4
   19142:	f7fb fe73 	bl	14e2c <memq_init>
	link = mem_acquire(&mem_link_done.free);
   19146:	4825      	ldr	r0, [pc, #148]	; (191dc <init_reset+0x108>)
   19148:	f7fb fe1a 	bl	14d80 <mem_acquire>
	LL_ASSERT(link);
   1914c:	4604      	mov	r4, r0
   1914e:	b328      	cbz	r0, 1919c <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   19150:	4a26      	ldr	r2, [pc, #152]	; (191ec <init_reset+0x118>)
   19152:	4620      	mov	r0, r4
   19154:	1f11      	subs	r1, r2, #4
   19156:	f7fb fe69 	bl	14e2c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1915a:	4822      	ldr	r0, [pc, #136]	; (191e4 <init_reset+0x110>)
   1915c:	f7fb fe10 	bl	14d80 <mem_acquire>
	LL_ASSERT(link);
   19160:	4604      	mov	r4, r0
   19162:	b348      	cbz	r0, 191b8 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   19164:	4a22      	ldr	r2, [pc, #136]	; (191f0 <init_reset+0x11c>)
   19166:	4620      	mov	r0, r4
   19168:	1f11      	subs	r1, r2, #4
   1916a:	f7fb fe5f 	bl	14e2c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1916e:	4b21      	ldr	r3, [pc, #132]	; (191f4 <init_reset+0x120>)
   19170:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   19172:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   19174:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   19176:	f7ff f965 	bl	18444 <rx_alloc>
}
   1917a:	2000      	movs	r0, #0
   1917c:	b004      	add	sp, #16
   1917e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   19180:	4a1d      	ldr	r2, [pc, #116]	; (191f8 <init_reset+0x124>)
   19182:	491e      	ldr	r1, [pc, #120]	; (191fc <init_reset+0x128>)
   19184:	481e      	ldr	r0, [pc, #120]	; (19200 <init_reset+0x12c>)
   19186:	f640 0302 	movw	r3, #2050	; 0x802
   1918a:	f00d fbe7 	bl	2695c <printk>
   1918e:	4040      	eors	r0, r0
   19190:	f380 8811 	msr	BASEPRI, r0
   19194:	f04f 0003 	mov.w	r0, #3
   19198:	df02      	svc	2
   1919a:	e7cf      	b.n	1913c <init_reset+0x68>
	LL_ASSERT(link);
   1919c:	4a16      	ldr	r2, [pc, #88]	; (191f8 <init_reset+0x124>)
   1919e:	4917      	ldr	r1, [pc, #92]	; (191fc <init_reset+0x128>)
   191a0:	4817      	ldr	r0, [pc, #92]	; (19200 <init_reset+0x12c>)
   191a2:	f640 030a 	movw	r3, #2058	; 0x80a
   191a6:	f00d fbd9 	bl	2695c <printk>
   191aa:	4040      	eors	r0, r0
   191ac:	f380 8811 	msr	BASEPRI, r0
   191b0:	f04f 0003 	mov.w	r0, #3
   191b4:	df02      	svc	2
   191b6:	e7cb      	b.n	19150 <init_reset+0x7c>
	LL_ASSERT(link);
   191b8:	4a0f      	ldr	r2, [pc, #60]	; (191f8 <init_reset+0x124>)
   191ba:	4910      	ldr	r1, [pc, #64]	; (191fc <init_reset+0x128>)
   191bc:	4810      	ldr	r0, [pc, #64]	; (19200 <init_reset+0x12c>)
   191be:	f640 0312 	movw	r3, #2066	; 0x812
   191c2:	f00d fbcb 	bl	2695c <printk>
   191c6:	4040      	eors	r0, r0
   191c8:	f380 8811 	msr	BASEPRI, r0
   191cc:	f04f 0003 	mov.w	r0, #3
   191d0:	df02      	svc	2
   191d2:	e7c7      	b.n	19164 <init_reset+0x90>
   191d4:	20000404 	.word	0x20000404
   191d8:	200004ac 	.word	0x200004ac
   191dc:	20003108 	.word	0x20003108
   191e0:	20003184 	.word	0x20003184
   191e4:	20003138 	.word	0x20003138
   191e8:	20003378 	.word	0x20003378
   191ec:	20003370 	.word	0x20003370
   191f0:	20003368 	.word	0x20003368
   191f4:	20003134 	.word	0x20003134
   191f8:	0002fa38 	.word	0x0002fa38
   191fc:	0002fcc0 	.word	0x0002fcc0
   19200:	0002f6fc 	.word	0x0002f6fc

00019204 <ll_init>:
{
   19204:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   19206:	4b2b      	ldr	r3, [pc, #172]	; (192b4 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   19208:	4d2b      	ldr	r5, [pc, #172]	; (192b8 <ll_init+0xb4>)
	sem_recv = sem_rx;
   1920a:	6018      	str	r0, [r3, #0]
{
   1920c:	b087      	sub	sp, #28
	cntr_init();
   1920e:	f006 fd0b 	bl	1fc28 <cntr_init>
	mayfly_init();
   19212:	f7fb fe3b 	bl	14e8c <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   19216:	4a29      	ldr	r2, [pc, #164]	; (192bc <ll_init+0xb8>)
   19218:	4929      	ldr	r1, [pc, #164]	; (192c0 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1921a:	482a      	ldr	r0, [pc, #168]	; (192c4 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1921c:	e9cd 2504 	strd	r2, r5, [sp, #16]
   19220:	4a29      	ldr	r2, [pc, #164]	; (192c8 <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   19222:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   19224:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   19228:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1922a:	210c      	movs	r1, #12
   1922c:	e9cd 0100 	strd	r0, r1, [sp]
   19230:	4a26      	ldr	r2, [pc, #152]	; (192cc <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   19232:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   19234:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   19236:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   19238:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1923a:	4619      	mov	r1, r3
   1923c:	2000      	movs	r0, #0
   1923e:	f7fc ff91 	bl	16164 <ticker_init>
	LL_ASSERT(!err);
   19242:	bb40      	cbnz	r0, 19296 <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19244:	2201      	movs	r2, #1
   19246:	2100      	movs	r1, #0
   19248:	4821      	ldr	r0, [pc, #132]	; (192d0 <ll_init+0xcc>)
   1924a:	f014 fa66 	bl	2d71a <z_impl_k_sem_init>
	err = lll_init();
   1924e:	f005 f8ad 	bl	1e3ac <lll_init>
	if (err) {
   19252:	4604      	mov	r4, r0
   19254:	b110      	cbz	r0, 1925c <ll_init+0x58>
}
   19256:	4620      	mov	r0, r4
   19258:	b007      	add	sp, #28
   1925a:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   1925c:	f7ff ff3a 	bl	190d4 <init_reset>
	if (err) {
   19260:	4604      	mov	r4, r0
   19262:	2800      	cmp	r0, #0
   19264:	d1f7      	bne.n	19256 <ll_init+0x52>
	err = lll_scan_init();
   19266:	f005 ff35 	bl	1f0d4 <lll_scan_init>
	if (err) {
   1926a:	4604      	mov	r4, r0
   1926c:	2800      	cmp	r0, #0
   1926e:	d1f2      	bne.n	19256 <ll_init+0x52>
	err = ull_scan_init();
   19270:	f000 f92e 	bl	194d0 <ull_scan_init>
	if (err) {
   19274:	4604      	mov	r4, r0
   19276:	2800      	cmp	r0, #0
   19278:	d1ed      	bne.n	19256 <ll_init+0x52>
	err = lll_conn_init();
   1927a:	f006 f83b 	bl	1f2f4 <lll_conn_init>
	if (err) {
   1927e:	4604      	mov	r4, r0
   19280:	2800      	cmp	r0, #0
   19282:	d1e8      	bne.n	19256 <ll_init+0x52>
	err = ull_conn_init();
   19284:	f001 f904 	bl	1a490 <ull_conn_init>
	if (err) {
   19288:	4604      	mov	r4, r0
   1928a:	2800      	cmp	r0, #0
   1928c:	d1e3      	bne.n	19256 <ll_init+0x52>
		ull_filter_reset(true);
   1928e:	2001      	movs	r0, #1
   19290:	f004 f9f4 	bl	1d67c <ull_filter_reset>
	return  0;
   19294:	e7df      	b.n	19256 <ll_init+0x52>
	LL_ASSERT(!err);
   19296:	4a0f      	ldr	r2, [pc, #60]	; (192d4 <ll_init+0xd0>)
   19298:	490f      	ldr	r1, [pc, #60]	; (192d8 <ll_init+0xd4>)
   1929a:	4810      	ldr	r0, [pc, #64]	; (192dc <ll_init+0xd8>)
   1929c:	f240 230d 	movw	r3, #525	; 0x20d
   192a0:	f00d fb5c 	bl	2695c <printk>
   192a4:	4040      	eors	r0, r0
   192a6:	f380 8811 	msr	BASEPRI, r0
   192aa:	f04f 0003 	mov.w	r0, #3
   192ae:	df02      	svc	2
   192b0:	e7c8      	b.n	19244 <ll_init+0x40>
   192b2:	bf00      	nop
   192b4:	2000337c 	.word	0x2000337c
   192b8:	00020921 	.word	0x00020921
   192bc:	000207d1 	.word	0x000207d1
   192c0:	0002076d 	.word	0x0002076d
   192c4:	200036c8 	.word	0x200036c8
   192c8:	20003458 	.word	0x20003458
   192cc:	20003398 	.word	0x20003398
   192d0:	20003380 	.word	0x20003380
   192d4:	0002fa38 	.word	0x0002fa38
   192d8:	0002fa74 	.word	0x0002fa74
   192dc:	0002f6fc 	.word	0x0002f6fc

000192e0 <ll_reset>:
{
   192e0:	b510      	push	{r4, lr}
   192e2:	b086      	sub	sp, #24
	err = ull_scan_reset();
   192e4:	f000 f970 	bl	195c8 <ull_scan_reset>
	LL_ASSERT(!err);
   192e8:	bb50      	cbnz	r0, 19340 <ll_reset+0x60>
	err = ull_conn_reset();
   192ea:	f001 f8d3 	bl	1a494 <ull_conn_reset>
	LL_ASSERT(!err);
   192ee:	2800      	cmp	r0, #0
   192f0:	d137      	bne.n	19362 <ll_reset+0x82>
	MFIFO_INIT(tx_ack);
   192f2:	4b31      	ldr	r3, [pc, #196]	; (193b8 <ll_reset+0xd8>)
   192f4:	2400      	movs	r4, #0
   192f6:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   192f8:	4620      	mov	r0, r4
   192fa:	f004 f9bf 	bl	1d67c <ull_filter_reset>
	MFIFO_INIT(prep);
   192fe:	492f      	ldr	r1, [pc, #188]	; (193bc <ll_reset+0xdc>)
	MFIFO_INIT(pdu_rx_free);
   19300:	4a2f      	ldr	r2, [pc, #188]	; (193c0 <ll_reset+0xe0>)
	MFIFO_INIT(ll_pdu_rx_free);
   19302:	4b30      	ldr	r3, [pc, #192]	; (193c4 <ll_reset+0xe4>)
	MFIFO_INIT(prep);
   19304:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   19306:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   19308:	805c      	strh	r4, [r3, #2]
   1930a:	2201      	movs	r2, #1
   1930c:	4621      	mov	r1, r4
   1930e:	4668      	mov	r0, sp
   19310:	f014 fa03 	bl	2d71a <z_impl_k_sem_init>
		mfy.param = &sem;
   19314:	4b2c      	ldr	r3, [pc, #176]	; (193c8 <ll_reset+0xe8>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   19316:	4622      	mov	r2, r4
   19318:	4621      	mov	r1, r4
   1931a:	2003      	movs	r0, #3
		mfy.param = &sem;
   1931c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   19320:	f7fb fe06 	bl	14f30 <mayfly_enqueue>
		LL_ASSERT(!retval);
   19324:	2800      	cmp	r0, #0
   19326:	d139      	bne.n	1939c <ll_reset+0xbc>
	return z_impl_k_sem_take(sem, timeout);
   19328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1932c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19330:	4668      	mov	r0, sp
   19332:	f00c f905 	bl	25540 <z_impl_k_sem_take>
	err = init_reset();
   19336:	f7ff fecd 	bl	190d4 <init_reset>
	LL_ASSERT(!err);
   1933a:	bb00      	cbnz	r0, 1937e <ll_reset+0x9e>
}
   1933c:	b006      	add	sp, #24
   1933e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   19340:	4a22      	ldr	r2, [pc, #136]	; (193cc <ll_reset+0xec>)
   19342:	4923      	ldr	r1, [pc, #140]	; (193d0 <ll_reset+0xf0>)
   19344:	4823      	ldr	r0, [pc, #140]	; (193d4 <ll_reset+0xf4>)
   19346:	f240 23b3 	movw	r3, #691	; 0x2b3
   1934a:	f00d fb07 	bl	2695c <printk>
   1934e:	4040      	eors	r0, r0
   19350:	f380 8811 	msr	BASEPRI, r0
   19354:	f04f 0003 	mov.w	r0, #3
   19358:	df02      	svc	2
	err = ull_conn_reset();
   1935a:	f001 f89b 	bl	1a494 <ull_conn_reset>
	LL_ASSERT(!err);
   1935e:	2800      	cmp	r0, #0
   19360:	d0c7      	beq.n	192f2 <ll_reset+0x12>
   19362:	4a1a      	ldr	r2, [pc, #104]	; (193cc <ll_reset+0xec>)
   19364:	491a      	ldr	r1, [pc, #104]	; (193d0 <ll_reset+0xf0>)
   19366:	481b      	ldr	r0, [pc, #108]	; (193d4 <ll_reset+0xf4>)
   19368:	f240 23de 	movw	r3, #734	; 0x2de
   1936c:	f00d faf6 	bl	2695c <printk>
   19370:	4040      	eors	r0, r0
   19372:	f380 8811 	msr	BASEPRI, r0
   19376:	f04f 0003 	mov.w	r0, #3
   1937a:	df02      	svc	2
   1937c:	e7b9      	b.n	192f2 <ll_reset+0x12>
	LL_ASSERT(!err);
   1937e:	4a13      	ldr	r2, [pc, #76]	; (193cc <ll_reset+0xec>)
   19380:	4913      	ldr	r1, [pc, #76]	; (193d0 <ll_reset+0xf0>)
   19382:	4814      	ldr	r0, [pc, #80]	; (193d4 <ll_reset+0xf4>)
   19384:	f240 3327 	movw	r3, #807	; 0x327
   19388:	f00d fae8 	bl	2695c <printk>
   1938c:	4040      	eors	r0, r0
   1938e:	f380 8811 	msr	BASEPRI, r0
   19392:	f04f 0003 	mov.w	r0, #3
   19396:	df02      	svc	2
}
   19398:	b006      	add	sp, #24
   1939a:	bd10      	pop	{r4, pc}
		LL_ASSERT(!retval);
   1939c:	4a0b      	ldr	r2, [pc, #44]	; (193cc <ll_reset+0xec>)
   1939e:	490e      	ldr	r1, [pc, #56]	; (193d8 <ll_reset+0xf8>)
   193a0:	480c      	ldr	r0, [pc, #48]	; (193d4 <ll_reset+0xf4>)
   193a2:	f240 330d 	movw	r3, #781	; 0x30d
   193a6:	f00d fad9 	bl	2695c <printk>
   193aa:	4040      	eors	r0, r0
   193ac:	f380 8811 	msr	BASEPRI, r0
   193b0:	f04f 0003 	mov.w	r0, #3
   193b4:	df02      	svc	2
   193b6:	e7b7      	b.n	19328 <ll_reset+0x48>
   193b8:	200005f0 	.word	0x200005f0
   193bc:	200004ec 	.word	0x200004ec
   193c0:	200004d4 	.word	0x200004d4
   193c4:	200004c4 	.word	0x200004c4
   193c8:	20000624 	.word	0x20000624
   193cc:	0002fa38 	.word	0x0002fa38
   193d0:	0002fa74 	.word	0x0002fa74
   193d4:	0002f6fc 	.word	0x0002f6fc
   193d8:	0002fb78 	.word	0x0002fb78

000193dc <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   193dc:	b510      	push	{r4, lr}
   193de:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   193e0:	2400      	movs	r4, #0
   193e2:	e9cd 4400 	strd	r4, r4, [sp]
   193e6:	9b04      	ldr	r3, [sp, #16]
   193e8:	f005 f9ee 	bl	1e7c8 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   193ec:	b002      	add	sp, #8
   193ee:	bd10      	pop	{r4, pc}

000193f0 <lll_resume>:

void lll_resume(void *param)
{
   193f0:	b510      	push	{r4, lr}
   193f2:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   193f4:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   193f6:	691a      	ldr	r2, [r3, #16]
   193f8:	6999      	ldr	r1, [r3, #24]
   193fa:	2401      	movs	r4, #1
{
   193fc:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   193fe:	4020      	ands	r0, r4
   19400:	e9cd 0400 	strd	r0, r4, [sp]
   19404:	6958      	ldr	r0, [r3, #20]
   19406:	f005 f9df 	bl	1e7c8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1940a:	b108      	cbz	r0, 19410 <lll_resume+0x20>
   1940c:	3077      	adds	r0, #119	; 0x77
   1940e:	d101      	bne.n	19414 <lll_resume+0x24>
}
   19410:	b002      	add	sp, #8
   19412:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   19414:	4a06      	ldr	r2, [pc, #24]	; (19430 <lll_resume+0x40>)
   19416:	4907      	ldr	r1, [pc, #28]	; (19434 <lll_resume+0x44>)
   19418:	4807      	ldr	r0, [pc, #28]	; (19438 <lll_resume+0x48>)
   1941a:	234f      	movs	r3, #79	; 0x4f
   1941c:	f00d fa9e 	bl	2695c <printk>
   19420:	4040      	eors	r0, r0
   19422:	f380 8811 	msr	BASEPRI, r0
   19426:	f04f 0003 	mov.w	r0, #3
   1942a:	df02      	svc	2
}
   1942c:	b002      	add	sp, #8
   1942e:	bd10      	pop	{r4, pc}
   19430:	0002fb8c 	.word	0x0002fb8c
   19434:	0002fbd0 	.word	0x0002fbd0
   19438:	0002f6fc 	.word	0x0002f6fc

0001943c <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   1943c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19440:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19442:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   19446:	4625      	mov	r5, r4
{
   19448:	4680      	mov	r8, r0
	return ++hdr->ref;
   1944a:	f815 1b1c 	ldrb.w	r1, [r5], #28
   1944e:	3101      	adds	r1, #1
   19450:	b2c9      	uxtb	r1, r1
   19452:	4617      	mov	r7, r2
   19454:	461e      	mov	r6, r3
   19456:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   19458:	b181      	cbz	r1, 1947c <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1945a:	4c17      	ldr	r4, [pc, #92]	; (194b8 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   1945c:	4b17      	ldr	r3, [pc, #92]	; (194bc <ticker_cb+0x80>)
	p.lazy = lazy;
   1945e:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19460:	2200      	movs	r2, #0
   19462:	4611      	mov	r1, r2
   19464:	2001      	movs	r0, #1
	p.remainder = remainder;
   19466:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   1946a:	60e5      	str	r5, [r4, #12]
	p.force = force;
   1946c:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   19470:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19472:	f7fb fd5d 	bl	14f30 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   19476:	b978      	cbnz	r0, 19498 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   19478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   1947c:	4a10      	ldr	r2, [pc, #64]	; (194c0 <ticker_cb+0x84>)
   1947e:	4911      	ldr	r1, [pc, #68]	; (194c4 <ticker_cb+0x88>)
   19480:	4811      	ldr	r0, [pc, #68]	; (194c8 <ticker_cb+0x8c>)
   19482:	f240 23db 	movw	r3, #731	; 0x2db
   19486:	f00d fa69 	bl	2695c <printk>
   1948a:	4040      	eors	r0, r0
   1948c:	f380 8811 	msr	BASEPRI, r0
   19490:	f04f 0003 	mov.w	r0, #3
   19494:	df02      	svc	2
   19496:	e7e0      	b.n	1945a <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   19498:	4a09      	ldr	r2, [pc, #36]	; (194c0 <ticker_cb+0x84>)
   1949a:	490c      	ldr	r1, [pc, #48]	; (194cc <ticker_cb+0x90>)
   1949c:	480a      	ldr	r0, [pc, #40]	; (194c8 <ticker_cb+0x8c>)
   1949e:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   194a2:	f00d fa5b 	bl	2695c <printk>
   194a6:	4040      	eors	r0, r0
   194a8:	f380 8811 	msr	BASEPRI, r0
   194ac:	f04f 0003 	mov.w	r0, #3
   194b0:	df02      	svc	2
}
   194b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   194b6:	bf00      	nop
   194b8:	20003738 	.word	0x20003738
   194bc:	20000664 	.word	0x20000664
   194c0:	0002fbf8 	.word	0x0002fbf8
   194c4:	0002fc38 	.word	0x0002fc38
   194c8:	0002f6fc 	.word	0x0002f6fc
   194cc:	0002fb50 	.word	0x0002fb50

000194d0 <ull_scan_init>:
}
   194d0:	2000      	movs	r0, #0
   194d2:	4770      	bx	lr

000194d4 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   194d4:	3002      	adds	r0, #2
{
   194d6:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   194d8:	f101 021c 	add.w	r2, r1, #28
   194dc:	b2c0      	uxtb	r0, r0
   194de:	f7ff fc39 	bl	18d54 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   194e2:	b110      	cbz	r0, 194ea <ull_scan_disable+0x16>
   194e4:	3078      	adds	r0, #120	; 0x78
   194e6:	d101      	bne.n	194ec <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   194e8:	200c      	movs	r0, #12
}
   194ea:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   194ec:	4a07      	ldr	r2, [pc, #28]	; (1950c <ull_scan_disable+0x38>)
   194ee:	4908      	ldr	r1, [pc, #32]	; (19510 <ull_scan_disable+0x3c>)
   194f0:	4808      	ldr	r0, [pc, #32]	; (19514 <ull_scan_disable+0x40>)
   194f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   194f6:	f00d fa31 	bl	2695c <printk>
   194fa:	4040      	eors	r0, r0
   194fc:	f380 8811 	msr	BASEPRI, r0
   19500:	f04f 0003 	mov.w	r0, #3
   19504:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   19506:	200c      	movs	r0, #12
}
   19508:	bd08      	pop	{r3, pc}
   1950a:	bf00      	nop
   1950c:	0002fbf8 	.word	0x0002fbf8
   19510:	0002fc3c 	.word	0x0002fc3c
   19514:	0002f6fc 	.word	0x0002f6fc

00019518 <ll_scan_enable>:
{
   19518:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   1951a:	4c2a      	ldr	r4, [pc, #168]	; (195c4 <ll_scan_enable+0xac>)
   1951c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   19520:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   19524:	b358      	cbz	r0, 1957e <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   19526:	bb5a      	cbnz	r2, 19580 <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   19528:	079a      	lsls	r2, r3, #30
   1952a:	f3c3 0541 	ubfx	r5, r3, #1, #2
   1952e:	d50b      	bpl.n	19548 <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   19530:	2001      	movs	r0, #1
   19532:	f7fd f817 	bl	16564 <ll_addr_get>
   19536:	2106      	movs	r1, #6
   19538:	f7fb fc6c 	bl	14e14 <mem_nz>
   1953c:	2800      	cmp	r0, #0
   1953e:	d03e      	beq.n	195be <ll_scan_enable+0xa6>
		own_addr_type = scan->own_addr_type;
   19540:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   19544:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   19548:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1954c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   19550:	f004 f932 	bl	1d7b8 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   19554:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   19558:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   1955c:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   19560:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   19562:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   19566:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   19568:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   1956c:	d502      	bpl.n	19574 <ll_scan_enable+0x5c>
   1956e:	3d02      	subs	r5, #2
   19570:	2d01      	cmp	r5, #1
   19572:	d91a      	bls.n	195aa <ll_scan_enable+0x92>
}
   19574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   19578:	4812      	ldr	r0, [pc, #72]	; (195c4 <ll_scan_enable+0xac>)
   1957a:	f7e8 bac1 	b.w	1b00 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   1957e:	b912      	cbnz	r2, 19586 <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   19580:	250c      	movs	r5, #12
}
   19582:	4628      	mov	r0, r5
   19584:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   19586:	6a23      	ldr	r3, [r4, #32]
   19588:	2b00      	cmp	r3, #0
   1958a:	d1f9      	bne.n	19580 <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   1958c:	4621      	mov	r1, r4
   1958e:	f7ff ffa1 	bl	194d4 <ull_scan_disable>
	if (ret) {
   19592:	4605      	mov	r5, r0
   19594:	2800      	cmp	r0, #0
   19596:	d1f4      	bne.n	19582 <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   19598:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1959c:	f360 0300 	bfi	r3, r0, #0, #1
   195a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   195a4:	f004 f8ea 	bl	1d77c <ull_filter_adv_scan_state_cb>
	}
#endif

	return 0;
   195a8:	e7eb      	b.n	19582 <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   195aa:	2000      	movs	r0, #0
   195ac:	f004 f91e 	bl	1d7ec <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   195b0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   195b4:	f043 0302 	orr.w	r3, r3, #2
   195b8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   195bc:	e7da      	b.n	19574 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   195be:	2512      	movs	r5, #18
   195c0:	e7df      	b.n	19582 <ll_scan_enable+0x6a>
   195c2:	bf00      	nop
   195c4:	200036f0 	.word	0x200036f0

000195c8 <ull_scan_reset>:
{
   195c8:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   195ca:	4c0c      	ldr	r4, [pc, #48]	; (195fc <ull_scan_reset+0x34>)
   195cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   195d0:	07db      	lsls	r3, r3, #31
   195d2:	d501      	bpl.n	195d8 <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   195d4:	6a20      	ldr	r0, [r4, #32]
   195d6:	b108      	cbz	r0, 195dc <ull_scan_reset+0x14>
}
   195d8:	2000      	movs	r0, #0
   195da:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   195dc:	4621      	mov	r1, r4
   195de:	f7ff ff79 	bl	194d4 <ull_scan_disable>
	if (ret) {
   195e2:	2800      	cmp	r0, #0
   195e4:	d1f8      	bne.n	195d8 <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   195e6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   195ea:	f360 0200 	bfi	r2, r0, #0, #1
   195ee:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(0);
   195f2:	f004 f8c3 	bl	1d77c <ull_filter_adv_scan_state_cb>
}
   195f6:	2000      	movs	r0, #0
   195f8:	bd10      	pop	{r4, pc}
   195fa:	bf00      	nop
   195fc:	200036f0 	.word	0x200036f0

00019600 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   19600:	4a03      	ldr	r2, [pc, #12]	; (19610 <ull_scan_handle_get+0x10>)
   19602:	4b04      	ldr	r3, [pc, #16]	; (19614 <ull_scan_handle_get+0x14>)
   19604:	1a80      	subs	r0, r0, r2
   19606:	fba3 3000 	umull	r3, r0, r3, r0
}
   1960a:	f3c0 1007 	ubfx	r0, r0, #4, #8
   1960e:	4770      	bx	lr
   19610:	200036f0 	.word	0x200036f0
   19614:	38e38e39 	.word	0x38e38e39

00019618 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   19618:	4a04      	ldr	r2, [pc, #16]	; (1962c <ull_scan_lll_handle_get+0x14>)
   1961a:	6800      	ldr	r0, [r0, #0]
   1961c:	4b04      	ldr	r3, [pc, #16]	; (19630 <ull_scan_lll_handle_get+0x18>)
   1961e:	1a80      	subs	r0, r0, r2
   19620:	fba3 3000 	umull	r3, r0, r3, r0
}
   19624:	f3c0 1007 	ubfx	r0, r0, #4, #8
   19628:	4770      	bx	lr
   1962a:	bf00      	nop
   1962c:	200036f0 	.word	0x200036f0
   19630:	38e38e39 	.word	0x38e38e39

00019634 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   19634:	b938      	cbnz	r0, 19646 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   19636:	4805      	ldr	r0, [pc, #20]	; (1964c <ull_scan_is_enabled_get+0x18>)
   19638:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   1963c:	f013 0f01 	tst.w	r3, #1
   19640:	bf08      	it	eq
   19642:	2000      	moveq	r0, #0
   19644:	4770      	bx	lr
		return NULL;
   19646:	2000      	movs	r0, #0
}
   19648:	4770      	bx	lr
   1964a:	bf00      	nop
   1964c:	200036f0 	.word	0x200036f0

00019650 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   19650:	4a04      	ldr	r2, [pc, #16]	; (19664 <ull_scan_is_disabled_get+0x14>)
   19652:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   19656:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   1965a:	4303      	orrs	r3, r0
}
   1965c:	bf0c      	ite	eq
   1965e:	4610      	moveq	r0, r2
   19660:	2000      	movne	r0, #0
   19662:	4770      	bx	lr
   19664:	200036f0 	.word	0x200036f0

00019668 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   19668:	b990      	cbnz	r0, 19690 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   1966a:	4a0a      	ldr	r2, [pc, #40]	; (19694 <ull_scan_is_enabled+0x2c>)
   1966c:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   19670:	f013 0001 	ands.w	r0, r3, #1
   19674:	d00d      	beq.n	19692 <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   19676:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   1967a:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   1967c:	f003 0301 	and.w	r3, r3, #1
   19680:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19684:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   19688:	b11a      	cbz	r2, 19692 <ull_scan_is_enabled+0x2a>
   1968a:	f040 0004 	orr.w	r0, r0, #4
   1968e:	4770      	bx	lr
		return 0U;
   19690:	2000      	movs	r0, #0
}
   19692:	4770      	bx	lr
   19694:	200036f0 	.word	0x200036f0

00019698 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   19698:	b950      	cbnz	r0, 196b0 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   1969a:	4b06      	ldr	r3, [pc, #24]	; (196b4 <ull_scan_filter_pol_get+0x1c>)
   1969c:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   196a0:	f010 0001 	ands.w	r0, r0, #1
   196a4:	d005      	beq.n	196b2 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   196a6:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   196aa:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   196ae:	4770      	bx	lr
		return 0;
   196b0:	2000      	movs	r0, #0
}
   196b2:	4770      	bx	lr
   196b4:	200036f0 	.word	0x200036f0

000196b8 <init_reset>:
{
   196b8:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   196ba:	4b15      	ldr	r3, [pc, #84]	; (19710 <init_reset+0x58>)
   196bc:	4815      	ldr	r0, [pc, #84]	; (19714 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   196be:	4c16      	ldr	r4, [pc, #88]	; (19718 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   196c0:	2201      	movs	r2, #1
   196c2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   196c6:	f7fb fb2b 	bl	14d20 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   196ca:	4b14      	ldr	r3, [pc, #80]	; (1971c <init_reset+0x64>)
   196cc:	2203      	movs	r2, #3
   196ce:	1d18      	adds	r0, r3, #4
   196d0:	2124      	movs	r1, #36	; 0x24
   196d2:	f7fb fb25 	bl	14d20 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   196d6:	4b12      	ldr	r3, [pc, #72]	; (19720 <init_reset+0x68>)
   196d8:	2204      	movs	r2, #4
   196da:	1898      	adds	r0, r3, r2
   196dc:	212c      	movs	r1, #44	; 0x2c
   196de:	f7fb fb1f 	bl	14d20 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   196e2:	4b10      	ldr	r3, [pc, #64]	; (19724 <init_reset+0x6c>)
   196e4:	2207      	movs	r2, #7
   196e6:	1d18      	adds	r0, r3, #4
   196e8:	2108      	movs	r1, #8
   196ea:	f7fb fb19 	bl	14d20 <mem_init>
	default_phy_tx |= PHY_2M;
   196ee:	490e      	ldr	r1, [pc, #56]	; (19728 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   196f0:	4a0e      	ldr	r2, [pc, #56]	; (1972c <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   196f2:	480f      	ldr	r0, [pc, #60]	; (19730 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   196f4:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   196f6:	f04f 0c1b 	mov.w	ip, #27
   196fa:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   196fe:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   19700:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   19704:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   19706:	f8a0 c000 	strh.w	ip, [r0]
}
   1970a:	2000      	movs	r0, #0
   1970c:	bd10      	pop	{r4, pc}
   1970e:	bf00      	nop
   19710:	20003748 	.word	0x20003748
   19714:	200020d0 	.word	0x200020d0
   19718:	20004a74 	.word	0x20004a74
   1971c:	20003770 	.word	0x20003770
   19720:	200037e0 	.word	0x200037e0
   19724:	20003894 	.word	0x20003894
   19728:	20004c03 	.word	0x20004c03
   1972c:	20004c02 	.word	0x20004c02
   19730:	20004a76 	.word	0x20004a76

00019734 <ctrl_tx_pause_enqueue>:
{
   19734:	b538      	push	{r3, r4, r5, lr}
   19736:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   19738:	e9d0 3067 	ldrd	r3, r0, [r0, #412]	; 0x19c
{
   1973c:	460d      	mov	r5, r1
	if (
   1973e:	b11b      	cbz	r3, 19748 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   19740:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
   19744:	0789      	lsls	r1, r1, #30
   19746:	d50c      	bpl.n	19762 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   19748:	b340      	cbz	r0, 1979c <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   1974a:	2a00      	cmp	r2, #0
   1974c:	d130      	bne.n	197b0 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   1974e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   19752:	681a      	ldr	r2, [r3, #0]
   19754:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   19756:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   19758:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1975a:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1975e:	b1d3      	cbz	r3, 19796 <ctrl_tx_pause_enqueue+0x62>
}
   19760:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   19762:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
   19766:	07c9      	lsls	r1, r1, #31
   19768:	d4ee      	bmi.n	19748 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   1976a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   1976e:	428b      	cmp	r3, r1
   19770:	d02c      	beq.n	197cc <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   19772:	2800      	cmp	r0, #0
   19774:	d036      	beq.n	197e4 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   19776:	2a00      	cmp	r2, #0
   19778:	d0e9      	beq.n	1974e <ctrl_tx_pause_enqueue+0x1a>
   1977a:	4a22      	ldr	r2, [pc, #136]	; (19804 <ctrl_tx_pause_enqueue+0xd0>)
   1977c:	4922      	ldr	r1, [pc, #136]	; (19808 <ctrl_tx_pause_enqueue+0xd4>)
   1977e:	4823      	ldr	r0, [pc, #140]	; (1980c <ctrl_tx_pause_enqueue+0xd8>)
   19780:	f640 236e 	movw	r3, #2670	; 0xa6e
   19784:	f00d f8ea 	bl	2695c <printk>
   19788:	4040      	eors	r0, r0
   1978a:	f380 8811 	msr	BASEPRI, r0
   1978e:	f04f 0003 	mov.w	r0, #3
   19792:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   19794:	e7db      	b.n	1974e <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   19796:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
   1979a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   1979c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   1979e:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			if (!pause) {
   197a2:	2a00      	cmp	r2, #0
   197a4:	d1db      	bne.n	1975e <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   197a6:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
	if (!tx->next) {
   197aa:	2b00      	cmp	r3, #0
   197ac:	d1d8      	bne.n	19760 <ctrl_tx_pause_enqueue+0x2c>
   197ae:	e7f2      	b.n	19796 <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   197b0:	4a14      	ldr	r2, [pc, #80]	; (19804 <ctrl_tx_pause_enqueue+0xd0>)
   197b2:	4915      	ldr	r1, [pc, #84]	; (19808 <ctrl_tx_pause_enqueue+0xd4>)
   197b4:	4815      	ldr	r0, [pc, #84]	; (1980c <ctrl_tx_pause_enqueue+0xd8>)
   197b6:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   197ba:	f00d f8cf 	bl	2695c <printk>
   197be:	4040      	eors	r0, r0
   197c0:	f380 8811 	msr	BASEPRI, r0
   197c4:	f04f 0003 	mov.w	r0, #3
   197c8:	df02      	svc	2
   197ca:	e7c0      	b.n	1974e <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   197cc:	6819      	ldr	r1, [r3, #0]
   197ce:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   197d2:	2800      	cmp	r0, #0
   197d4:	d1cf      	bne.n	19776 <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   197d6:	6819      	ldr	r1, [r3, #0]
   197d8:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   197da:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   197dc:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   197de:	2a00      	cmp	r2, #0
   197e0:	d0e1      	beq.n	197a6 <ctrl_tx_pause_enqueue+0x72>
   197e2:	e7bc      	b.n	1975e <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197e4:	7919      	ldrb	r1, [r3, #4]
   197e6:	f001 0103 	and.w	r1, r1, #3
   197ea:	2903      	cmp	r1, #3
   197ec:	d004      	beq.n	197f8 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   197ee:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
   197f2:	2a00      	cmp	r2, #0
   197f4:	d0ab      	beq.n	1974e <ctrl_tx_pause_enqueue+0x1a>
   197f6:	e7c0      	b.n	1977a <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   197f8:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197fa:	2903      	cmp	r1, #3
   197fc:	d0eb      	beq.n	197d6 <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   197fe:	290a      	cmp	r1, #10
   19800:	d1f5      	bne.n	197ee <ctrl_tx_pause_enqueue+0xba>
   19802:	e7e8      	b.n	197d6 <ctrl_tx_pause_enqueue+0xa2>
   19804:	0002fc68 	.word	0x0002fc68
   19808:	0002fca8 	.word	0x0002fca8
   1980c:	0002f6fc 	.word	0x0002f6fc

00019810 <tx_lll_flush>:
{
   19810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   19814:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   19818:	4934      	ldr	r1, [pc, #208]	; (198ec <tx_lll_flush+0xdc>)
{
   1981a:	b083      	sub	sp, #12
   1981c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1981e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   19822:	4640      	mov	r0, r8
   19824:	f7fb fae2 	bl	14dec <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   19828:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	lll_conn_flush(handle, lll);
   1982c:	4629      	mov	r1, r5
   1982e:	f005 fd6f 	bl	1f310 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   19832:	6b28      	ldr	r0, [r5, #48]	; 0x30
   19834:	aa01      	add	r2, sp, #4
   19836:	4631      	mov	r1, r6
   19838:	f7fb fb18 	bl	14e6c <memq_dequeue>
	while (link) {
   1983c:	b328      	cbz	r0, 1988a <tx_lll_flush+0x7a>
   1983e:	4c2c      	ldr	r4, [pc, #176]	; (198f0 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   19840:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19844:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   19848:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   1984a:	f894 c001 	ldrb.w	ip, [r4, #1]
   1984e:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   19850:	1c53      	adds	r3, r2, #1
   19852:	b2db      	uxtb	r3, r3
		last = 0U;
   19854:	459c      	cmp	ip, r3
   19856:	bf08      	it	eq
   19858:	2300      	moveq	r3, #0
	if (last == first) {
   1985a:	4299      	cmp	r1, r3
   1985c:	f894 c000 	ldrb.w	ip, [r4]
   19860:	d033      	beq.n	198ca <tx_lll_flush+0xba>
		lll_tx->node = tx;
   19862:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19864:	fb12 f20c 	smulbb	r2, r2, ip
   19868:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   1986c:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   19870:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   19872:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   19876:	6002      	str	r2, [r0, #0]
		tx->next = link;
   19878:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1987a:	6b28      	ldr	r0, [r5, #48]	; 0x30
	*last = idx; /* Commit: Update write index */
   1987c:	70e3      	strb	r3, [r4, #3]
   1987e:	aa01      	add	r2, sp, #4
   19880:	4631      	mov	r1, r6
   19882:	f7fb faf3 	bl	14e6c <memq_dequeue>
	while (link) {
   19886:	2800      	cmp	r0, #0
   19888:	d1de      	bne.n	19848 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   1988a:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
	rx = (void *)&conn->llcp_terminate.node_rx;
   1988e:	f508 748e 	add.w	r4, r8, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
   19892:	b150      	cbz	r0, 198aa <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   19894:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   19896:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   19898:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
	ull_rx_put(link, rx);
   1989c:	f7ff fad4 	bl	18e48 <ull_rx_put>
	ull_rx_sched();
   198a0:	f7ff fae2 	bl	18e68 <ull_rx_sched>
}
   198a4:	b003      	add	sp, #12
   198a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   198aa:	4a12      	ldr	r2, [pc, #72]	; (198f4 <tx_lll_flush+0xe4>)
   198ac:	4912      	ldr	r1, [pc, #72]	; (198f8 <tx_lll_flush+0xe8>)
   198ae:	4813      	ldr	r0, [pc, #76]	; (198fc <tx_lll_flush+0xec>)
   198b0:	f640 13da 	movw	r3, #2522	; 0x9da
   198b4:	f00d f852 	bl	2695c <printk>
   198b8:	4040      	eors	r0, r0
   198ba:	f380 8811 	msr	BASEPRI, r0
   198be:	f04f 0003 	mov.w	r0, #3
   198c2:	df02      	svc	2
	link = rx->hdr.link;
   198c4:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
   198c8:	e7e4      	b.n	19894 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   198ca:	4a0a      	ldr	r2, [pc, #40]	; (198f4 <tx_lll_flush+0xe4>)
   198cc:	490c      	ldr	r1, [pc, #48]	; (19900 <tx_lll_flush+0xf0>)
   198ce:	480b      	ldr	r0, [pc, #44]	; (198fc <tx_lll_flush+0xec>)
   198d0:	f640 13c6 	movw	r3, #2502	; 0x9c6
   198d4:	f00d f842 	bl	2695c <printk>
   198d8:	4040      	eors	r0, r0
   198da:	f380 8811 	msr	BASEPRI, r0
   198de:	f04f 0003 	mov.w	r0, #3
   198e2:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   198e4:	2300      	movs	r3, #0
   198e6:	801b      	strh	r3, [r3, #0]
   198e8:	deff      	udf	#255	; 0xff
   198ea:	bf00      	nop
   198ec:	200020d0 	.word	0x200020d0
   198f0:	20000674 	.word	0x20000674
   198f4:	0002fc68 	.word	0x0002fc68
   198f8:	0002fcb8 	.word	0x0002fcb8
   198fc:	0002f6fc 	.word	0x0002f6fc
   19900:	0002fcb0 	.word	0x0002fcb0

00019904 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   19904:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
   19908:	f012 0202 	ands.w	r2, r2, #2
   1990c:	d00a      	beq.n	19924 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   1990e:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
   19912:	b1d3      	cbz	r3, 1994a <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   19914:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
   19918:	681a      	ldr	r2, [r3, #0]
   1991a:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1991c:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   1991e:	680b      	ldr	r3, [r1, #0]
   19920:	b1d3      	cbz	r3, 19958 <ctrl_tx_sec_enqueue+0x54>
   19922:	4770      	bx	lr
		if (conn->tx_head) {
   19924:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   19928:	b1cb      	cbz	r3, 1995e <ctrl_tx_sec_enqueue+0x5a>
{
   1992a:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   1992c:	f890 c0bc 	ldrb.w	ip, [r0, #188]	; 0xbc
   19930:	f890 e0bb 	ldrb.w	lr, [r0, #187]	; 0xbb
   19934:	45e6      	cmp	lr, ip
   19936:	d004      	beq.n	19942 <ctrl_tx_sec_enqueue+0x3e>
   19938:	f890 c0bd 	ldrb.w	ip, [r0, #189]	; 0xbd
   1993c:	f1bc 0f03 	cmp.w	ip, #3
   19940:	d010      	beq.n	19964 <ctrl_tx_sec_enqueue+0x60>
}
   19942:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   19946:	f7ff bef5 	b.w	19734 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   1994a:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   1994e:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   19950:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
		if (!tx->next) {
   19954:	2b00      	cmp	r3, #0
   19956:	d1e4      	bne.n	19922 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   19958:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
   1995c:	4770      	bx	lr
	bool pause = false;
   1995e:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   19960:	f7ff bee8 	b.w	19734 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19964:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   19968:	f00c 0c03 	and.w	ip, ip, #3
   1996c:	f1bc 0f03 	cmp.w	ip, #3
   19970:	d1e7      	bne.n	19942 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   19972:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19974:	2a03      	cmp	r2, #3
   19976:	d005      	beq.n	19984 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   19978:	f1a2 020a 	sub.w	r2, r2, #10
   1997c:	fab2 f282 	clz	r2, r2
   19980:	0952      	lsrs	r2, r2, #5
   19982:	e7de      	b.n	19942 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   19984:	2201      	movs	r2, #1
   19986:	e7dc      	b.n	19942 <ctrl_tx_sec_enqueue+0x3e>

00019988 <ticker_stop_op_cb>:
{
   19988:	b510      	push	{r4, lr}
   1998a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1998c:	b9b0      	cbnz	r0, 199bc <ticker_stop_op_cb+0x34>
	mfy.param = param;
   1998e:	4b12      	ldr	r3, [pc, #72]	; (199d8 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19990:	2200      	movs	r2, #0
   19992:	2101      	movs	r1, #1
   19994:	2002      	movs	r0, #2
	mfy.param = param;
   19996:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19998:	f7fb faca 	bl	14f30 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1999c:	b900      	cbnz	r0, 199a0 <ticker_stop_op_cb+0x18>
}
   1999e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   199a0:	4a0e      	ldr	r2, [pc, #56]	; (199dc <ticker_stop_op_cb+0x54>)
   199a2:	490f      	ldr	r1, [pc, #60]	; (199e0 <ticker_stop_op_cb+0x58>)
   199a4:	480f      	ldr	r0, [pc, #60]	; (199e4 <ticker_stop_op_cb+0x5c>)
   199a6:	f44f 6318 	mov.w	r3, #2432	; 0x980
   199aa:	f00c ffd7 	bl	2695c <printk>
   199ae:	4040      	eors	r0, r0
   199b0:	f380 8811 	msr	BASEPRI, r0
   199b4:	f04f 0003 	mov.w	r0, #3
   199b8:	df02      	svc	2
}
   199ba:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   199bc:	4a07      	ldr	r2, [pc, #28]	; (199dc <ticker_stop_op_cb+0x54>)
   199be:	490a      	ldr	r1, [pc, #40]	; (199e8 <ticker_stop_op_cb+0x60>)
   199c0:	4808      	ldr	r0, [pc, #32]	; (199e4 <ticker_stop_op_cb+0x5c>)
   199c2:	f640 137a 	movw	r3, #2426	; 0x97a
   199c6:	f00c ffc9 	bl	2695c <printk>
   199ca:	4040      	eors	r0, r0
   199cc:	f380 8811 	msr	BASEPRI, r0
   199d0:	f04f 0003 	mov.w	r0, #3
   199d4:	df02      	svc	2
   199d6:	e7da      	b.n	1998e <ticker_stop_op_cb+0x6>
   199d8:	2000070c 	.word	0x2000070c
   199dc:	0002fc68 	.word	0x0002fc68
   199e0:	0002fb50 	.word	0x0002fb50
   199e4:	0002f6fc 	.word	0x0002f6fc
   199e8:	0002fcc8 	.word	0x0002fcc8

000199ec <disabled_cb>:
{
   199ec:	b508      	push	{r3, lr}
	mfy.param = param;
   199ee:	4b0b      	ldr	r3, [pc, #44]	; (19a1c <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   199f0:	2200      	movs	r2, #0
	mfy.param = param;
   199f2:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   199f4:	4611      	mov	r1, r2
   199f6:	2001      	movs	r0, #1
   199f8:	f7fb fa9a 	bl	14f30 <mayfly_enqueue>
	LL_ASSERT(!ret);
   199fc:	b900      	cbnz	r0, 19a00 <disabled_cb+0x14>
}
   199fe:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   19a00:	4a07      	ldr	r2, [pc, #28]	; (19a20 <disabled_cb+0x34>)
   19a02:	4908      	ldr	r1, [pc, #32]	; (19a24 <disabled_cb+0x38>)
   19a04:	4808      	ldr	r0, [pc, #32]	; (19a28 <disabled_cb+0x3c>)
   19a06:	f640 13ac 	movw	r3, #2476	; 0x9ac
   19a0a:	f00c ffa7 	bl	2695c <printk>
   19a0e:	4040      	eors	r0, r0
   19a10:	f380 8811 	msr	BASEPRI, r0
   19a14:	f04f 0003 	mov.w	r0, #3
   19a18:	df02      	svc	2
}
   19a1a:	bd08      	pop	{r3, pc}
   19a1c:	200006dc 	.word	0x200006dc
   19a20:	0002fc68 	.word	0x0002fc68
   19a24:	0002fb50 	.word	0x0002fb50
   19a28:	0002f6fc 	.word	0x0002f6fc

00019a2c <conn_disable>:
{
   19a2c:	b538      	push	{r3, r4, r5, lr}
   19a2e:	4604      	mov	r4, r0
	return hdr->ref;
   19a30:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   19a34:	b353      	cbz	r3, 19a8c <conn_disable+0x60>
		mfy.param = &conn->lll;
   19a36:	4d17      	ldr	r5, [pc, #92]	; (19a94 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   19a38:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   19a3a:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   19a3c:	b16b      	cbz	r3, 19a5a <conn_disable+0x2e>
   19a3e:	4a16      	ldr	r2, [pc, #88]	; (19a98 <conn_disable+0x6c>)
   19a40:	4916      	ldr	r1, [pc, #88]	; (19a9c <conn_disable+0x70>)
   19a42:	4817      	ldr	r0, [pc, #92]	; (19aa0 <conn_disable+0x74>)
   19a44:	f640 1395 	movw	r3, #2453	; 0x995
   19a48:	f00c ff88 	bl	2695c <printk>
   19a4c:	4040      	eors	r0, r0
   19a4e:	f380 8811 	msr	BASEPRI, r0
   19a52:	f04f 0003 	mov.w	r0, #3
   19a56:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   19a58:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   19a5a:	4912      	ldr	r1, [pc, #72]	; (19aa4 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19a5c:	4b0d      	ldr	r3, [pc, #52]	; (19a94 <conn_disable+0x68>)
   19a5e:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   19a60:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19a64:	4611      	mov	r1, r2
   19a66:	2001      	movs	r0, #1
   19a68:	f7fb fa62 	bl	14f30 <mayfly_enqueue>
		LL_ASSERT(!ret);
   19a6c:	b900      	cbnz	r0, 19a70 <conn_disable+0x44>
}
   19a6e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   19a70:	4a09      	ldr	r2, [pc, #36]	; (19a98 <conn_disable+0x6c>)
   19a72:	490d      	ldr	r1, [pc, #52]	; (19aa8 <conn_disable+0x7c>)
   19a74:	480a      	ldr	r0, [pc, #40]	; (19aa0 <conn_disable+0x74>)
   19a76:	f640 139c 	movw	r3, #2460	; 0x99c
   19a7a:	f00c ff6f 	bl	2695c <printk>
   19a7e:	4040      	eors	r0, r0
   19a80:	f380 8811 	msr	BASEPRI, r0
   19a84:	f04f 0003 	mov.w	r0, #3
   19a88:	df02      	svc	2
}
   19a8a:	bd38      	pop	{r3, r4, r5, pc}
   19a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   19a90:	f7ff bfac 	b.w	199ec <disabled_cb>
   19a94:	200006fc 	.word	0x200006fc
   19a98:	0002fc68 	.word	0x0002fc68
   19a9c:	0002fcd4 	.word	0x0002fcd4
   19aa0:	0002f6fc 	.word	0x0002f6fc
   19aa4:	000199ed 	.word	0x000199ed
   19aa8:	0002fb50 	.word	0x0002fb50

00019aac <conn_setup_adv_scan_disabled_cb>:
{
   19aac:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   19aae:	6883      	ldr	r3, [r0, #8]
   19ab0:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   19ab2:	7f53      	ldrb	r3, [r2, #29]
   19ab4:	09db      	lsrs	r3, r3, #7
   19ab6:	d105      	bne.n	19ac4 <conn_setup_adv_scan_disabled_cb+0x18>
		ull_central_setup(rx, ftr, lll);
   19ab8:	4601      	mov	r1, r0
}
   19aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_central_setup(rx, ftr, lll);
   19abe:	3108      	adds	r1, #8
   19ac0:	f7ea b872 	b.w	3ba8 <ull_central_setup>
		LL_ASSERT(0);
   19ac4:	4a06      	ldr	r2, [pc, #24]	; (19ae0 <conn_setup_adv_scan_disabled_cb+0x34>)
   19ac6:	4907      	ldr	r1, [pc, #28]	; (19ae4 <conn_setup_adv_scan_disabled_cb+0x38>)
   19ac8:	4807      	ldr	r0, [pc, #28]	; (19ae8 <conn_setup_adv_scan_disabled_cb+0x3c>)
   19aca:	f640 03d5 	movw	r3, #2261	; 0x8d5
   19ace:	f00c ff45 	bl	2695c <printk>
   19ad2:	4040      	eors	r0, r0
   19ad4:	f380 8811 	msr	BASEPRI, r0
   19ad8:	f04f 0003 	mov.w	r0, #3
   19adc:	df02      	svc	2
}
   19ade:	bd08      	pop	{r3, pc}
   19ae0:	0002fc68 	.word	0x0002fc68
   19ae4:	0002f794 	.word	0x0002f794
   19ae8:	0002f6fc 	.word	0x0002f6fc

00019aec <ticker_start_conn_op_cb>:
{
   19aec:	b510      	push	{r4, lr}
   19aee:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19af0:	b990      	cbnz	r0, 19b18 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   19af2:	4620      	mov	r0, r4
   19af4:	f7ff f8de 	bl	18cb4 <ull_update_unmark>
	LL_ASSERT(p == param);
   19af8:	4284      	cmp	r4, r0
   19afa:	d00c      	beq.n	19b16 <ticker_start_conn_op_cb+0x2a>
   19afc:	4a0d      	ldr	r2, [pc, #52]	; (19b34 <ticker_start_conn_op_cb+0x48>)
   19afe:	490e      	ldr	r1, [pc, #56]	; (19b38 <ticker_start_conn_op_cb+0x4c>)
   19b00:	480e      	ldr	r0, [pc, #56]	; (19b3c <ticker_start_conn_op_cb+0x50>)
   19b02:	f640 03b7 	movw	r3, #2231	; 0x8b7
   19b06:	f00c ff29 	bl	2695c <printk>
   19b0a:	4040      	eors	r0, r0
   19b0c:	f380 8811 	msr	BASEPRI, r0
   19b10:	f04f 0003 	mov.w	r0, #3
   19b14:	df02      	svc	2
}
   19b16:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19b18:	4a06      	ldr	r2, [pc, #24]	; (19b34 <ticker_start_conn_op_cb+0x48>)
   19b1a:	4909      	ldr	r1, [pc, #36]	; (19b40 <ticker_start_conn_op_cb+0x54>)
   19b1c:	4807      	ldr	r0, [pc, #28]	; (19b3c <ticker_start_conn_op_cb+0x50>)
   19b1e:	f640 03b4 	movw	r3, #2228	; 0x8b4
   19b22:	f00c ff1b 	bl	2695c <printk>
   19b26:	4040      	eors	r0, r0
   19b28:	f380 8811 	msr	BASEPRI, r0
   19b2c:	f04f 0003 	mov.w	r0, #3
   19b30:	df02      	svc	2
   19b32:	e7de      	b.n	19af2 <ticker_start_conn_op_cb+0x6>
   19b34:	0002fc68 	.word	0x0002fc68
   19b38:	0002fce8 	.word	0x0002fce8
   19b3c:	0002f6fc 	.word	0x0002f6fc
   19b40:	0002fcc8 	.word	0x0002fcc8

00019b44 <ticker_stop_conn_op_cb>:
{
   19b44:	b510      	push	{r4, lr}
   19b46:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19b48:	b990      	cbnz	r0, 19b70 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   19b4a:	4620      	mov	r0, r4
   19b4c:	f7ff f8a8 	bl	18ca0 <ull_update_mark>
	LL_ASSERT(p == param);
   19b50:	4284      	cmp	r4, r0
   19b52:	d00c      	beq.n	19b6e <ticker_stop_conn_op_cb+0x2a>
   19b54:	4a0d      	ldr	r2, [pc, #52]	; (19b8c <ticker_stop_conn_op_cb+0x48>)
   19b56:	490e      	ldr	r1, [pc, #56]	; (19b90 <ticker_stop_conn_op_cb+0x4c>)
   19b58:	480e      	ldr	r0, [pc, #56]	; (19b94 <ticker_stop_conn_op_cb+0x50>)
   19b5a:	f640 03ad 	movw	r3, #2221	; 0x8ad
   19b5e:	f00c fefd 	bl	2695c <printk>
   19b62:	4040      	eors	r0, r0
   19b64:	f380 8811 	msr	BASEPRI, r0
   19b68:	f04f 0003 	mov.w	r0, #3
   19b6c:	df02      	svc	2
}
   19b6e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19b70:	4a06      	ldr	r2, [pc, #24]	; (19b8c <ticker_stop_conn_op_cb+0x48>)
   19b72:	4909      	ldr	r1, [pc, #36]	; (19b98 <ticker_stop_conn_op_cb+0x54>)
   19b74:	4807      	ldr	r0, [pc, #28]	; (19b94 <ticker_stop_conn_op_cb+0x50>)
   19b76:	f640 03aa 	movw	r3, #2218	; 0x8aa
   19b7a:	f00c feef 	bl	2695c <printk>
   19b7e:	4040      	eors	r0, r0
   19b80:	f380 8811 	msr	BASEPRI, r0
   19b84:	f04f 0003 	mov.w	r0, #3
   19b88:	df02      	svc	2
   19b8a:	e7de      	b.n	19b4a <ticker_stop_conn_op_cb+0x6>
   19b8c:	0002fc68 	.word	0x0002fc68
   19b90:	0002fce8 	.word	0x0002fce8
   19b94:	0002f6fc 	.word	0x0002f6fc
   19b98:	0002fcc8 	.word	0x0002fcc8

00019b9c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   19b9c:	b900      	cbnz	r0, 19ba0 <ticker_update_conn_op_cb+0x4>
   19b9e:	4770      	bx	lr
{
   19ba0:	b510      	push	{r4, lr}
   19ba2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   19ba4:	f7ff f892 	bl	18ccc <ull_update_mark_get>
   19ba8:	4284      	cmp	r4, r0
   19baa:	d010      	beq.n	19bce <ticker_update_conn_op_cb+0x32>
   19bac:	f7ff f872 	bl	18c94 <ull_disable_mark_get>
   19bb0:	4284      	cmp	r4, r0
   19bb2:	d00c      	beq.n	19bce <ticker_update_conn_op_cb+0x32>
   19bb4:	4a06      	ldr	r2, [pc, #24]	; (19bd0 <ticker_update_conn_op_cb+0x34>)
   19bb6:	4907      	ldr	r1, [pc, #28]	; (19bd4 <ticker_update_conn_op_cb+0x38>)
   19bb8:	4807      	ldr	r0, [pc, #28]	; (19bd8 <ticker_update_conn_op_cb+0x3c>)
   19bba:	f640 03a1 	movw	r3, #2209	; 0x8a1
   19bbe:	f00c fecd 	bl	2695c <printk>
   19bc2:	4040      	eors	r0, r0
   19bc4:	f380 8811 	msr	BASEPRI, r0
   19bc8:	f04f 0003 	mov.w	r0, #3
   19bcc:	df02      	svc	2
}
   19bce:	bd10      	pop	{r4, pc}
   19bd0:	0002fc68 	.word	0x0002fc68
   19bd4:	0002fcf4 	.word	0x0002fcf4
   19bd8:	0002f6fc 	.word	0x0002f6fc

00019bdc <tx_ull_dequeue>:
{
   19bdc:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   19bde:	e9d0 2467 	ldrd	r2, r4, [r0, #412]	; 0x19c
{
   19be2:	4603      	mov	r3, r0
   19be4:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   19be6:	b164      	cbz	r4, 19c02 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   19be8:	4294      	cmp	r4, r2
   19bea:	d021      	beq.n	19c30 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   19bec:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
		if (conn->tx_head == conn->tx_data) {
   19bf0:	428a      	cmp	r2, r1
   19bf2:	d00b      	beq.n	19c0c <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   19bf4:	6811      	ldr	r1, [r2, #0]
   19bf6:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
		tx->next = NULL;
   19bfa:	2200      	movs	r2, #0
}
   19bfc:	bc10      	pop	{r4}
		tx->next = NULL;
   19bfe:	6002      	str	r2, [r0, #0]
}
   19c00:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   19c02:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
   19c06:	4291      	cmp	r1, r2
   19c08:	d104      	bne.n	19c14 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   19c0a:	b18a      	cbz	r2, 19c30 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   19c0c:	6809      	ldr	r1, [r1, #0]
   19c0e:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
   19c12:	e7ef      	b.n	19bf4 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19c14:	7911      	ldrb	r1, [r2, #4]
   19c16:	f001 0103 	and.w	r1, r1, #3
   19c1a:	2903      	cmp	r1, #3
   19c1c:	d013      	beq.n	19c46 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   19c1e:	6812      	ldr	r2, [r2, #0]
   19c20:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			conn->tx_ctrl = NULL;
   19c24:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   19c26:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
}
   19c2a:	bc10      	pop	{r4}
		tx->next = tx;
   19c2c:	6000      	str	r0, [r0, #0]
}
   19c2e:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   19c30:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
		conn->tx_head = conn->tx_head->next;
   19c34:	6812      	ldr	r2, [r2, #0]
   19c36:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   19c3a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   19c3c:	bf18      	it	ne
   19c3e:	f8c3 21a0 	strne.w	r2, [r3, #416]	; 0x1a0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   19c42:	d1f2      	bne.n	19c2a <tx_ull_dequeue+0x4e>
   19c44:	e7ee      	b.n	19c24 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   19c46:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19c48:	2903      	cmp	r1, #3
   19c4a:	d0d3      	beq.n	19bf4 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19c4c:	290a      	cmp	r1, #10
   19c4e:	d1e6      	bne.n	19c1e <tx_ull_dequeue+0x42>
   19c50:	e7d0      	b.n	19bf4 <tx_ull_dequeue+0x18>
   19c52:	bf00      	nop

00019c54 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   19c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c56:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   19c58:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
   19c5c:	0787      	lsls	r7, r0, #30
{
   19c5e:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   19c60:	d433      	bmi.n	19cca <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19c62:	482e      	ldr	r0, [pc, #184]	; (19d1c <reject_ext_ind_send+0xc8>)
   19c64:	4617      	mov	r7, r2
   19c66:	461e      	mov	r6, r3
   19c68:	f7fb f88a 	bl	14d80 <mem_acquire>
	if (!tx) {
   19c6c:	2800      	cmp	r0, #0
   19c6e:	d038      	beq.n	19ce2 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   19c70:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   19c74:	f043 0302 	orr.w	r3, r3, #2
   19c78:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   19c7c:	2303      	movs	r3, #3
   19c7e:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   19c80:	2211      	movs	r2, #17
	    conn->tx_head &&
   19c82:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   19c86:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19c88:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   19c8a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   19c8e:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19c90:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   19c94:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19c96:	7102      	strb	r2, [r0, #4]
	if (
   19c98:	b1db      	cbz	r3, 19cd2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   19c9a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   19c9e:	0796      	lsls	r6, r2, #30
   19ca0:	d417      	bmi.n	19cd2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   19ca2:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   19ca6:	07d2      	lsls	r2, r2, #31
   19ca8:	d413      	bmi.n	19cd2 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   19caa:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   19cae:	4293      	cmp	r3, r2
   19cb0:	d022      	beq.n	19cf8 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   19cb2:	b1c9      	cbz	r1, 19ce8 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   19cb4:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   19cb8:	681a      	ldr	r2, [r3, #0]
   19cba:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19cbc:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19cbe:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   19cc0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   19cc4:	b90b      	cbnz	r3, 19cca <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   19cc6:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19cca:	2301      	movs	r3, #1
   19ccc:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   19cce:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   19cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   19cd2:	2900      	cmp	r1, #0
   19cd4:	d1ee      	bne.n	19cb4 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   19cd6:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19cd8:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   19cdc:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   19ce0:	e7f0      	b.n	19cc4 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   19ce2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   19ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19ce8:	791a      	ldrb	r2, [r3, #4]
   19cea:	f002 0203 	and.w	r2, r2, #3
   19cee:	2a03      	cmp	r2, #3
   19cf0:	d00e      	beq.n	19d10 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19cf2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   19cf6:	e7df      	b.n	19cb8 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   19cf8:	681a      	ldr	r2, [r3, #0]
   19cfa:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   19cfe:	2900      	cmp	r1, #0
   19d00:	d1d8      	bne.n	19cb4 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   19d02:	681a      	ldr	r2, [r3, #0]
   19d04:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19d06:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19d08:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19d0a:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   19d0e:	e7d9      	b.n	19cc4 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   19d10:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19d12:	2a03      	cmp	r2, #3
   19d14:	d0f5      	beq.n	19d02 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19d16:	2a0a      	cmp	r2, #10
   19d18:	d1eb      	bne.n	19cf2 <reject_ext_ind_send+0x9e>
   19d1a:	e7f2      	b.n	19d02 <reject_ext_ind_send+0xae>
   19d1c:	200037e0 	.word	0x200037e0

00019d20 <event_len_prep>:
{
   19d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   19d22:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   19d26:	f003 0207 	and.w	r2, r3, #7
{
   19d2a:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   19d2c:	2a06      	cmp	r2, #6
   19d2e:	f200 80d4 	bhi.w	19eda <event_len_prep+0x1ba>
   19d32:	e8df f002 	tbb	[pc, r2]
   19d36:	4704      	.short	0x4704
   19d38:	48484747 	.word	0x48484747
   19d3c:	47          	.byte	0x47
   19d3d:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19d3e:	486e      	ldr	r0, [pc, #440]	; (19ef8 <event_len_prep+0x1d8>)
   19d40:	f7fb f81e 	bl	14d80 <mem_acquire>
		if (!tx) {
   19d44:	2800      	cmp	r0, #0
   19d46:	d03d      	beq.n	19dc4 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   19d48:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   19d4c:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
   19d50:	f8b4 518e 	ldrh.w	r5, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   19d54:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   19d58:	2301      	movs	r3, #1
   19d5a:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   19d5e:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   19d62:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   19d66:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   19d68:	72c3      	strb	r3, [r0, #11]
   19d6a:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   19d6c:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   19d6e:	2309      	movs	r3, #9
   19d70:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   19d72:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   19d74:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   19d76:	2214      	movs	r2, #20
	    conn->tx_head &&
   19d78:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   19d7c:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   19d7e:	2100      	movs	r1, #0
   19d80:	221b      	movs	r2, #27
   19d82:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   19d84:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   19d88:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19d8a:	7902      	ldrb	r2, [r0, #4]
   19d8c:	f042 0203 	orr.w	r2, r2, #3
   19d90:	7102      	strb	r2, [r0, #4]
	if (
   19d92:	b13b      	cbz	r3, 19da4 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   19d94:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   19d98:	0795      	lsls	r5, r2, #30
   19d9a:	d403      	bmi.n	19da4 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   19d9c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   19da0:	07d2      	lsls	r2, r2, #31
   19da2:	d573      	bpl.n	19e8c <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   19da4:	2900      	cmp	r1, #0
   19da6:	d07f      	beq.n	19ea8 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   19da8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   19dac:	681a      	ldr	r2, [r3, #0]
   19dae:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19db0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19db2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   19db4:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   19db8:	2b00      	cmp	r3, #0
   19dba:	d056      	beq.n	19e6a <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   19dbc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   19dc0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
   19dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   19dc6:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   19dca:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
		lll->max_rx_time = conn->llcp_length.rx_time;
   19dce:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
   19dd2:	f8b0 718a 	ldrh.w	r7, [r0, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
   19dd6:	f8b0 618e 	ldrh.w	r6, [r0, #398]	; 0x18e
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   19dda:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   19dde:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   19de0:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   19de4:	d024      	beq.n	19e30 <event_len_prep+0x110>
			conn->llcp_length.state =
   19de6:	2206      	movs	r2, #6
   19de8:	f362 0302 	bfi	r3, r2, #0, #3
   19dec:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		rx = conn->llcp_rx;
   19df0:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
   19df4:	b335      	cbz	r5, 19e44 <event_len_prep+0x124>
   19df6:	6828      	ldr	r0, [r5, #0]
   19df8:	b320      	cbz	r0, 19e44 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   19dfa:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   19dfc:	6842      	ldr	r2, [r0, #4]
   19dfe:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   19e02:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   19e06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   19e08:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   19e0a:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   19e0c:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   19e0e:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   19e10:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   19e12:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   19e14:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   19e16:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   19e1a:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   19e1c:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   19e1e:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   19e20:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   19e22:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   19e24:	f7fe fe96 	bl	18b54 <ll_rx_put>
}
   19e28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   19e2c:	f7fe be9c 	b.w	18b68 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   19e30:	f8b0 2190 	ldrh.w	r2, [r0, #400]	; 0x190
   19e34:	b9e2      	cbnz	r2, 19e70 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   19e36:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
				conn->procedure_expire = 0U;
   19e3a:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
				conn->llcp_length.ack = conn->llcp_length.req;
   19e3e:	f880 3185 	strb.w	r3, [r0, #389]	; 0x185
				conn->procedure_expire = 0U;
   19e42:	e7d5      	b.n	19df0 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   19e44:	4a2d      	ldr	r2, [pc, #180]	; (19efc <event_len_prep+0x1dc>)
   19e46:	492e      	ldr	r1, [pc, #184]	; (19f00 <event_len_prep+0x1e0>)
   19e48:	482e      	ldr	r0, [pc, #184]	; (19f04 <event_len_prep+0x1e4>)
   19e4a:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   19e4e:	f00c fd85 	bl	2695c <printk>
   19e52:	4040      	eors	r0, r0
   19e54:	f380 8811 	msr	BASEPRI, r0
   19e58:	f04f 0003 	mov.w	r0, #3
   19e5c:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   19e5e:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   19e60:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   19e64:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   19e68:	e7c7      	b.n	19dfa <event_len_prep+0xda>
		conn->tx_data_last = tx;
   19e6a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
   19e6e:	e7a5      	b.n	19dbc <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   19e70:	f8a0 218a 	strh.w	r2, [r0, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   19e74:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   19e76:	f362 0302 	bfi	r3, r2, #0, #3
   19e7a:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
				conn->llcp_length.tx_time =
   19e7e:	f8b0 3192 	ldrh.w	r3, [r0, #402]	; 0x192
				conn->llcp_length.cache.tx_octets = 0;
   19e82:	f8a0 2190 	strh.w	r2, [r0, #400]	; 0x190
				conn->llcp_length.tx_time =
   19e86:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   19e8a:	e7b1      	b.n	19df0 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   19e8c:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   19e90:	4293      	cmp	r3, r2
   19e92:	d00f      	beq.n	19eb4 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   19e94:	2900      	cmp	r1, #0
   19e96:	d187      	bne.n	19da8 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19e98:	791a      	ldrb	r2, [r3, #4]
   19e9a:	f002 0203 	and.w	r2, r2, #3
   19e9e:	2a03      	cmp	r2, #3
   19ea0:	d015      	beq.n	19ece <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19ea2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   19ea6:	e781      	b.n	19dac <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   19ea8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19eaa:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   19eae:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   19eb2:	e781      	b.n	19db8 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   19eb4:	681a      	ldr	r2, [r3, #0]
   19eb6:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   19eba:	2900      	cmp	r1, #0
   19ebc:	f47f af74 	bne.w	19da8 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   19ec0:	681a      	ldr	r2, [r3, #0]
   19ec2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19ec4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19ec6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19ec8:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   19ecc:	e774      	b.n	19db8 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   19ece:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19ed0:	2a03      	cmp	r2, #3
   19ed2:	d0f5      	beq.n	19ec0 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19ed4:	2a0a      	cmp	r2, #10
   19ed6:	d1e4      	bne.n	19ea2 <event_len_prep+0x182>
   19ed8:	e7f2      	b.n	19ec0 <event_len_prep+0x1a0>
		LL_ASSERT(0);
   19eda:	4a08      	ldr	r2, [pc, #32]	; (19efc <event_len_prep+0x1dc>)
   19edc:	490a      	ldr	r1, [pc, #40]	; (19f08 <event_len_prep+0x1e8>)
   19ede:	4809      	ldr	r0, [pc, #36]	; (19f04 <event_len_prep+0x1e4>)
   19ee0:	f241 03ea 	movw	r3, #4330	; 0x10ea
   19ee4:	f00c fd3a 	bl	2695c <printk>
   19ee8:	4040      	eors	r0, r0
   19eea:	f380 8811 	msr	BASEPRI, r0
   19eee:	f04f 0003 	mov.w	r0, #3
   19ef2:	df02      	svc	2
}
   19ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ef6:	bf00      	nop
   19ef8:	200037e0 	.word	0x200037e0
   19efc:	0002fc68 	.word	0x0002fc68
   19f00:	0002fd48 	.word	0x0002fd48
   19f04:	0002f6fc 	.word	0x0002f6fc
   19f08:	0002f794 	.word	0x0002f794

00019f0c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   19f0c:	4801      	ldr	r0, [pc, #4]	; (19f14 <ll_conn_acquire+0x8>)
   19f0e:	f7fa bf37 	b.w	14d80 <mem_acquire>
   19f12:	bf00      	nop
   19f14:	20003748 	.word	0x20003748

00019f18 <ll_conn_release>:
	mem_release(conn, &conn_free);
   19f18:	4901      	ldr	r1, [pc, #4]	; (19f20 <ll_conn_release+0x8>)
   19f1a:	f7fa bf4b 	b.w	14db4 <mem_release>
   19f1e:	bf00      	nop
   19f20:	20003748 	.word	0x20003748

00019f24 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   19f24:	4902      	ldr	r1, [pc, #8]	; (19f30 <ll_conn_handle_get+0xc>)
   19f26:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   19f2a:	f7fa bf5f 	b.w	14dec <mem_index_get>
   19f2e:	bf00      	nop
   19f30:	200020d0 	.word	0x200020d0

00019f34 <ll_conn_get>:
{
   19f34:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   19f36:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   19f3a:	4801      	ldr	r0, [pc, #4]	; (19f40 <ll_conn_get+0xc>)
   19f3c:	f7fa bf52 	b.w	14de4 <mem_get>
   19f40:	200020d0 	.word	0x200020d0

00019f44 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   19f44:	b958      	cbnz	r0, 19f5e <ll_connected_get+0x1a>
{
   19f46:	b508      	push	{r3, lr}
   19f48:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   19f4a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   19f4e:	4805      	ldr	r0, [pc, #20]	; (19f64 <ll_connected_get+0x20>)
   19f50:	f7fa ff48 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   19f54:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   19f56:	b903      	cbnz	r3, 19f5a <ll_connected_get+0x16>
}
   19f58:	bd08      	pop	{r3, pc}
		return NULL;
   19f5a:	2000      	movs	r0, #0
}
   19f5c:	bd08      	pop	{r3, pc}
		return NULL;
   19f5e:	2000      	movs	r0, #0
}
   19f60:	4770      	bx	lr
   19f62:	bf00      	nop
   19f64:	200020d0 	.word	0x200020d0

00019f68 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   19f68:	4801      	ldr	r0, [pc, #4]	; (19f70 <ll_tx_mem_acquire+0x8>)
   19f6a:	f7fa bf09 	b.w	14d80 <mem_acquire>
   19f6e:	bf00      	nop
   19f70:	20003770 	.word	0x20003770

00019f74 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   19f74:	4901      	ldr	r1, [pc, #4]	; (19f7c <ll_tx_mem_release+0x8>)
   19f76:	f7fa bf1d 	b.w	14db4 <mem_release>
   19f7a:	bf00      	nop
   19f7c:	20003770 	.word	0x20003770

00019f80 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   19f80:	2800      	cmp	r0, #0
   19f82:	d136      	bne.n	19ff2 <ll_tx_mem_enqueue+0x72>
{
   19f84:	b570      	push	{r4, r5, r6, lr}
   19f86:	4602      	mov	r2, r0
   19f88:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   19f8a:	481b      	ldr	r0, [pc, #108]	; (19ff8 <ll_tx_mem_enqueue+0x78>)
   19f8c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   19f90:	f7fa ff28 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   19f94:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   19f96:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   19f98:	bb2e      	cbnz	r6, 19fe6 <ll_tx_mem_enqueue+0x66>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   19f9a:	4c18      	ldr	r4, [pc, #96]	; (19ffc <ll_tx_mem_enqueue+0x7c>)
   19f9c:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   19fa0:	7862      	ldrb	r2, [r4, #1]
   19fa2:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   19fa4:	f10c 0301 	add.w	r3, ip, #1
   19fa8:	b2db      	uxtb	r3, r3
		last = 0U;
   19faa:	429a      	cmp	r2, r3
   19fac:	bf08      	it	eq
   19fae:	2300      	moveq	r3, #0
   19fb0:	78a2      	ldrb	r2, [r4, #2]
	if (last == first) {
   19fb2:	429a      	cmp	r2, r3
   19fb4:	d01a      	beq.n	19fec <ll_tx_mem_enqueue+0x6c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19fb6:	fb1c fc00 	smulbb	ip, ip, r0
   19fba:	f104 0e04 	add.w	lr, r4, #4
	lll_tx->handle = handle;
   19fbe:	f82e 600c 	strh.w	r6, [lr, ip]
   19fc2:	44f4      	add	ip, lr
	lll_tx->node = tx;
   19fc4:	f8cc 5004 	str.w	r5, [ip, #4]
	*last = idx; /* Commit: Update write index */
   19fc8:	70e3      	strb	r3, [r4, #3]
   19fca:	780b      	ldrb	r3, [r1, #0]
	if (ull_ref_get(&conn->ull)) {
   19fcc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   19fd0:	b903      	cbnz	r3, 19fd4 <ll_tx_mem_enqueue+0x54>
}
   19fd2:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   19fd4:	4b0a      	ldr	r3, [pc, #40]	; (1a000 <ll_tx_mem_enqueue+0x80>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   19fd6:	4632      	mov	r2, r6
		mfy.param = conn;
   19fd8:	6099      	str	r1, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   19fda:	2003      	movs	r0, #3
   19fdc:	2101      	movs	r1, #1
   19fde:	f7fa ffa7 	bl	14f30 <mayfly_enqueue>
	return 0;
   19fe2:	4630      	mov	r0, r6
}
   19fe4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   19fe6:	f06f 0015 	mvn.w	r0, #21
}
   19fea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   19fec:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   19ff0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   19ff2:	f06f 0015 	mvn.w	r0, #21
}
   19ff6:	4770      	bx	lr
   19ff8:	200020d0 	.word	0x200020d0
   19ffc:	200006b8 	.word	0x200006b8
   1a000:	200006ec 	.word	0x200006ec

0001a004 <ll_conn_update>:
{
   1a004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a008:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1a00c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   1a010:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a014:	2800      	cmp	r0, #0
   1a016:	d151      	bne.n	1a0bc <ll_conn_update+0xb8>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a018:	460c      	mov	r4, r1
   1a01a:	4615      	mov	r5, r2
   1a01c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a020:	4602      	mov	r2, r0
   1a022:	483c      	ldr	r0, [pc, #240]	; (1a114 <ll_conn_update+0x110>)
   1a024:	461e      	mov	r6, r3
   1a026:	f7fa fedd 	bl	14de4 <mem_get>
   1a02a:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   1a02c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1a02e:	2800      	cmp	r0, #0
   1a030:	d144      	bne.n	1a0bc <ll_conn_update+0xb8>
	if (!cmd) {
   1a032:	bb1c      	cbnz	r4, 1a07c <ll_conn_update+0x78>
		if (!conn->llcp_conn_param.disabled &&
   1a034:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
   1a038:	0699      	lsls	r1, r3, #26
   1a03a:	d446      	bmi.n	1a0ca <ll_conn_update+0xc6>
		    (!conn->common.fex_valid ||
   1a03c:	f89c 30ba 	ldrb.w	r3, [ip, #186]	; 0xba
		if (!conn->llcp_conn_param.disabled &&
   1a040:	07da      	lsls	r2, r3, #31
   1a042:	d43e      	bmi.n	1a0c2 <ll_conn_update+0xbe>
			if (conn->llcp_conn_param.req !=
   1a044:	f89c 215c 	ldrb.w	r2, [ip, #348]	; 0x15c
   1a048:	f89c 315d 	ldrb.w	r3, [ip, #349]	; 0x15d
   1a04c:	4293      	cmp	r3, r2
   1a04e:	d132      	bne.n	1a0b6 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   1a050:	f8bc 215e 	ldrh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   1a054:	f8ac 6160 	strh.w	r6, [ip, #352]	; 0x160
			conn->llcp_conn_param.state = cmd;
   1a058:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   1a05c:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1a05e:	f042 0210 	orr.w	r2, r2, #16
   1a062:	f8ac 215e 	strh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.req++;
   1a066:	f88c 315c 	strb.w	r3, [ip, #348]	; 0x15c
			conn->llcp_conn_param.interval_max = interval_max;
   1a06a:	f8ac 9162 	strh.w	r9, [ip, #354]	; 0x162
			conn->llcp_conn_param.latency = latency;
   1a06e:	f8ac 8164 	strh.w	r8, [ip, #356]	; 0x164
			conn->llcp_conn_param.timeout = timeout;
   1a072:	f8ac 7166 	strh.w	r7, [ip, #358]	; 0x166
	return 0;
   1a076:	2000      	movs	r0, #0
}
   1a078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   1a07c:	3c01      	subs	r4, #1
		if (cmd) {
   1a07e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1a082:	d0df      	beq.n	1a044 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   1a084:	f89c 215d 	ldrb.w	r2, [ip, #349]	; 0x15d
   1a088:	f89c 315c 	ldrb.w	r3, [ip, #348]	; 0x15c
   1a08c:	429a      	cmp	r2, r3
   1a08e:	d012      	beq.n	1a0b6 <ll_conn_update+0xb2>
			    (conn->llcp_conn_param.state !=
   1a090:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
			     conn->llcp_conn_param.ack) ||
   1a094:	f003 020f 	and.w	r2, r3, #15
   1a098:	2a03      	cmp	r2, #3
   1a09a:	d10c      	bne.n	1a0b6 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   1a09c:	f004 040f 	and.w	r4, r4, #15
   1a0a0:	f023 031f 	bic.w	r3, r3, #31
   1a0a4:	f044 0410 	orr.w	r4, r4, #16
   1a0a8:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   1a0aa:	f88c 515f 	strb.w	r5, [ip, #351]	; 0x15f
			conn->llcp_conn_param.state = cmd;
   1a0ae:	f88c 415e 	strb.w	r4, [ip, #350]	; 0x15e
}
   1a0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1a0b6:	200c      	movs	r0, #12
}
   1a0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a0bc:	2002      	movs	r0, #2
}
   1a0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   1a0c2:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
		    (!conn->common.fex_valid ||
   1a0c6:	079b      	lsls	r3, r3, #30
   1a0c8:	d4bc      	bmi.n	1a044 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1a0ca:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   1a0ce:	2b00      	cmp	r3, #0
   1a0d0:	db1e      	blt.n	1a110 <ll_conn_update+0x10c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1a0d2:	f89c 20e4 	ldrb.w	r2, [ip, #228]	; 0xe4
   1a0d6:	f89c 30e5 	ldrb.w	r3, [ip, #229]	; 0xe5
   1a0da:	4293      	cmp	r3, r2
   1a0dc:	d1eb      	bne.n	1a0b6 <ll_conn_update+0xb2>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a0de:	f89c 20e6 	ldrb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.interval = interval_max;
   1a0e2:	f8ac 90e8 	strh.w	r9, [ip, #232]	; 0xe8
		conn->llcp_cu.req++;
   1a0e6:	3301      	adds	r3, #1
   1a0e8:	f88c 30e4 	strb.w	r3, [ip, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a0ec:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   1a0f0:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a0f2:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1a0f6:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1a0f8:	f88c 30f4 	strb.w	r3, [ip, #244]	; 0xf4
		conn->llcp_cu.latency = latency;
   1a0fc:	f8ac 80ea 	strh.w	r8, [ip, #234]	; 0xea
		conn->llcp_cu.timeout = timeout;
   1a100:	f8ac 70ec 	strh.w	r7, [ip, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a104:	f88c 20e6 	strb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   1a108:	f8cc 00f0 	str.w	r0, [ip, #240]	; 0xf0
}
   1a10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1a110:	201a      	movs	r0, #26
   1a112:	e7d1      	b.n	1a0b8 <ll_conn_update+0xb4>
   1a114:	200020d0 	.word	0x200020d0

0001a118 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a118:	b9d0      	cbnz	r0, 1a150 <ll_chm_get+0x38>
{
   1a11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a11c:	4602      	mov	r2, r0
   1a11e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a120:	480c      	ldr	r0, [pc, #48]	; (1a154 <ll_chm_get+0x3c>)
   1a122:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a126:	f7fa fe5d 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1a12a:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a12c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1a12e:	b96e      	cbnz	r6, 1a14c <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   1a130:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1a134:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
   1a138:	2205      	movs	r2, #5
   1a13a:	4639      	mov	r1, r7
   1a13c:	4628      	mov	r0, r5
   1a13e:	f010 f90d 	bl	2a35c <memcpy>
	} while (conn->chm_updated);
   1a142:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
   1a146:	2800      	cmp	r0, #0
   1a148:	d1f4      	bne.n	1a134 <ll_chm_get+0x1c>
}
   1a14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a14c:	2002      	movs	r0, #2
}
   1a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a150:	2002      	movs	r0, #2
}
   1a152:	4770      	bx	lr
   1a154:	200020d0 	.word	0x200020d0

0001a158 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a158:	2800      	cmp	r0, #0
   1a15a:	d13a      	bne.n	1a1d2 <ll_terminate_ind_send+0x7a>
{
   1a15c:	b510      	push	{r4, lr}
   1a15e:	4602      	mov	r2, r0
   1a160:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a162:	481d      	ldr	r0, [pc, #116]	; (1a1d8 <ll_terminate_ind_send+0x80>)
   1a164:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a168:	f7fa fe3c 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1a16c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1a16e:	bb73      	cbnz	r3, 1a1ce <ll_terminate_ind_send+0x76>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   1a170:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1a174:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   1a178:	429a      	cmp	r2, r3
   1a17a:	d126      	bne.n	1a1ca <ll_terminate_ind_send+0x72>
	switch (reason) {
   1a17c:	2c29      	cmp	r4, #41	; 0x29
   1a17e:	d819      	bhi.n	1a1b4 <ll_terminate_ind_send+0x5c>
   1a180:	2c04      	cmp	r4, #4
   1a182:	d919      	bls.n	1a1b8 <ll_terminate_ind_send+0x60>
   1a184:	1f62      	subs	r2, r4, #5
   1a186:	2a24      	cmp	r2, #36	; 0x24
   1a188:	d816      	bhi.n	1a1b8 <ll_terminate_ind_send+0x60>
   1a18a:	e8df f002 	tbb	[pc, r2]
   1a18e:	1517      	.short	0x1517
   1a190:	15151515 	.word	0x15151515
   1a194:	15151515 	.word	0x15151515
   1a198:	15151515 	.word	0x15151515
   1a19c:	15171717 	.word	0x15171717
   1a1a0:	17151515 	.word	0x17151515
   1a1a4:	15151515 	.word	0x15151515
   1a1a8:	15151515 	.word	0x15151515
   1a1ac:	15151515 	.word	0x15151515
   1a1b0:	1515      	.short	0x1515
   1a1b2:	17          	.byte	0x17
   1a1b3:	00          	.byte	0x00
   1a1b4:	2c3b      	cmp	r4, #59	; 0x3b
   1a1b6:	d001      	beq.n	1a1bc <ll_terminate_ind_send+0x64>
   1a1b8:	2012      	movs	r0, #18
}
   1a1ba:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1a1bc:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   1a1be:	f880 411a 	strb.w	r4, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1a1c2:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   1a1c6:	2000      	movs	r0, #0
}
   1a1c8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a1ca:	200c      	movs	r0, #12
}
   1a1cc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a1ce:	2002      	movs	r0, #2
}
   1a1d0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a1d2:	2002      	movs	r0, #2
}
   1a1d4:	4770      	bx	lr
   1a1d6:	bf00      	nop
   1a1d8:	200020d0 	.word	0x200020d0

0001a1dc <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a1dc:	b9b0      	cbnz	r0, 1a20c <ll_feature_req_send+0x30>
{
   1a1de:	b508      	push	{r3, lr}
   1a1e0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a1e2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a1e6:	480a      	ldr	r0, [pc, #40]	; (1a210 <ll_feature_req_send+0x34>)
   1a1e8:	f7fa fdfc 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1a1ec:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1a1ee:	b95b      	cbnz	r3, 1a208 <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1a1f0:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
   1a1f4:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
   1a1f8:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
   1a1fa:	bf05      	ittet	eq
   1a1fc:	3201      	addeq	r2, #1
   1a1fe:	f880 20f8 	strbeq.w	r2, [r0, #248]	; 0xf8
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a202:	200c      	movne	r0, #12
	return 0;
   1a204:	4618      	moveq	r0, r3
}
   1a206:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a208:	2002      	movs	r0, #2
}
   1a20a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a20c:	2002      	movs	r0, #2
}
   1a20e:	4770      	bx	lr
   1a210:	200020d0 	.word	0x200020d0

0001a214 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a214:	b9b0      	cbnz	r0, 1a244 <ll_version_ind_send+0x30>
{
   1a216:	b508      	push	{r3, lr}
   1a218:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a21a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a21e:	480a      	ldr	r0, [pc, #40]	; (1a248 <ll_version_ind_send+0x34>)
   1a220:	f7fa fde0 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1a224:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1a226:	b95b      	cbnz	r3, 1a240 <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1a228:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
   1a22c:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
   1a230:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
   1a232:	bf05      	ittet	eq
   1a234:	3201      	addeq	r2, #1
   1a236:	f880 2110 	strbeq.w	r2, [r0, #272]	; 0x110
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a23a:	200c      	movne	r0, #12
	return 0;
   1a23c:	4618      	moveq	r0, r3
}
   1a23e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a240:	2002      	movs	r0, #2
}
   1a242:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a244:	2002      	movs	r0, #2
}
   1a246:	4770      	bx	lr
   1a248:	200020d0 	.word	0x200020d0

0001a24c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a24c:	2800      	cmp	r0, #0
   1a24e:	d143      	bne.n	1a2d8 <ll_length_req_send+0x8c>
{
   1a250:	b538      	push	{r3, r4, r5, lr}
   1a252:	460d      	mov	r5, r1
   1a254:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a256:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a25a:	4602      	mov	r2, r0
   1a25c:	481f      	ldr	r0, [pc, #124]	; (1a2dc <ll_length_req_send+0x90>)
   1a25e:	f7fa fdc1 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1a262:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1a264:	bba3      	cbnz	r3, 1a2d0 <ll_length_req_send+0x84>
	if (conn->llcp_length.disabled ||
   1a266:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   1a26a:	071a      	lsls	r2, r3, #28
   1a26c:	d42e      	bmi.n	1a2cc <ll_length_req_send+0x80>
	    (conn->common.fex_valid &&
   1a26e:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
	if (conn->llcp_length.disabled ||
   1a272:	07d1      	lsls	r1, r2, #31
   1a274:	d503      	bpl.n	1a27e <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   1a276:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
	    (conn->common.fex_valid &&
   1a27a:	0692      	lsls	r2, r2, #26
   1a27c:	d526      	bpl.n	1a2cc <ll_length_req_send+0x80>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1a27e:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
   1a282:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
   1a286:	428a      	cmp	r2, r1
   1a288:	d011      	beq.n	1a2ae <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   1a28a:	f003 0307 	and.w	r3, r3, #7
   1a28e:	2b03      	cmp	r3, #3
   1a290:	d004      	beq.n	1a29c <ll_length_req_send+0x50>
   1a292:	3303      	adds	r3, #3
   1a294:	f003 0307 	and.w	r3, r3, #7
   1a298:	2b01      	cmp	r3, #1
   1a29a:	d81b      	bhi.n	1a2d4 <ll_length_req_send+0x88>
			if (!conn->llcp_length.cache.tx_octets) {
   1a29c:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
   1a2a0:	b9c3      	cbnz	r3, 1a2d4 <ll_length_req_send+0x88>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1a2a2:	f8a0 5190 	strh.w	r5, [r0, #400]	; 0x190
				conn->llcp_length.cache.tx_time = tx_time;
   1a2a6:	f8a0 4192 	strh.w	r4, [r0, #402]	; 0x192
				return 0;
   1a2aa:	4618      	mov	r0, r3
}
   1a2ac:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a2ae:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_octets = tx_octets;
   1a2b2:	f8a0 518a 	strh.w	r5, [r0, #394]	; 0x18a
	conn->llcp_length.req++;
   1a2b6:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a2b8:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   1a2bc:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a2c0:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_time = tx_time;
   1a2c4:	f8a0 418e 	strh.w	r4, [r0, #398]	; 0x18e
	return 0;
   1a2c8:	2000      	movs	r0, #0
}
   1a2ca:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1a2cc:	201a      	movs	r0, #26
}
   1a2ce:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a2d0:	2002      	movs	r0, #2
}
   1a2d2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1a2d4:	200c      	movs	r0, #12
}
   1a2d6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a2d8:	2002      	movs	r0, #2
}
   1a2da:	4770      	bx	lr
   1a2dc:	200020d0 	.word	0x200020d0

0001a2e0 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   1a2e0:	4a03      	ldr	r2, [pc, #12]	; (1a2f0 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1a2e2:	4b04      	ldr	r3, [pc, #16]	; (1a2f4 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1a2e4:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1a2e6:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   1a2e8:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1a2ea:	800b      	strh	r3, [r1, #0]
}
   1a2ec:	4770      	bx	lr
   1a2ee:	bf00      	nop
   1a2f0:	20004a74 	.word	0x20004a74
   1a2f4:	20004a76 	.word	0x20004a76

0001a2f8 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   1a2f8:	4a02      	ldr	r2, [pc, #8]	; (1a304 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1a2fa:	4b03      	ldr	r3, [pc, #12]	; (1a308 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   1a2fc:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1a2fe:	8019      	strh	r1, [r3, #0]
}
   1a300:	2000      	movs	r0, #0
   1a302:	4770      	bx	lr
   1a304:	20004a74 	.word	0x20004a74
   1a308:	20004a76 	.word	0x20004a76

0001a30c <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1a30c:	f04f 0c1b 	mov.w	ip, #27
   1a310:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1a314:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1a318:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1a31c:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1a31e:	8018      	strh	r0, [r3, #0]
}
   1a320:	4770      	bx	lr
   1a322:	bf00      	nop

0001a324 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a324:	b9c0      	cbnz	r0, 1a358 <ll_phy_get+0x34>
{
   1a326:	b538      	push	{r3, r4, r5, lr}
   1a328:	460d      	mov	r5, r1
   1a32a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a32c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a330:	4602      	mov	r2, r0
   1a332:	480a      	ldr	r0, [pc, #40]	; (1a35c <ll_phy_get+0x38>)
   1a334:	f7fa fd56 	bl	14de4 <mem_get>
   1a338:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1a33a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1a33c:	b950      	cbnz	r0, 1a354 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1a33e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1a342:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1a346:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   1a348:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   1a34c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1a350:	7023      	strb	r3, [r4, #0]
}
   1a352:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a354:	2002      	movs	r0, #2
}
   1a356:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a358:	2002      	movs	r0, #2
}
   1a35a:	4770      	bx	lr
   1a35c:	200020d0 	.word	0x200020d0

0001a360 <ll_phy_default_set>:
	default_phy_tx = tx;
   1a360:	4a02      	ldr	r2, [pc, #8]	; (1a36c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1a362:	4b03      	ldr	r3, [pc, #12]	; (1a370 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1a364:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1a366:	7019      	strb	r1, [r3, #0]
}
   1a368:	2000      	movs	r0, #0
   1a36a:	4770      	bx	lr
   1a36c:	20004c03 	.word	0x20004c03
   1a370:	20004c02 	.word	0x20004c02

0001a374 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a374:	2800      	cmp	r0, #0
   1a376:	d141      	bne.n	1a3fc <ll_phy_req_send+0x88>
{
   1a378:	b570      	push	{r4, r5, r6, lr}
   1a37a:	460c      	mov	r4, r1
   1a37c:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a37e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a382:	4602      	mov	r2, r0
   1a384:	481e      	ldr	r0, [pc, #120]	; (1a400 <ll_phy_req_send+0x8c>)
   1a386:	461e      	mov	r6, r3
   1a388:	f7fa fd2c 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1a38c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a38e:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   1a390:	bb93      	cbnz	r3, 1a3f8 <ll_phy_req_send+0x84>
	if (conn->llcp_phy.disabled ||
   1a392:	f890 0197 	ldrb.w	r0, [r0, #407]	; 0x197
   1a396:	f010 0008 	ands.w	r0, r0, #8
   1a39a:	d12b      	bne.n	1a3f4 <ll_phy_req_send+0x80>
	    (conn->common.fex_valid &&
   1a39c:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
	if (conn->llcp_phy.disabled ||
   1a3a0:	07db      	lsls	r3, r3, #31
   1a3a2:	d504      	bpl.n	1a3ae <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1a3a4:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   1a3a8:	f413 6f10 	tst.w	r3, #2304	; 0x900
   1a3ac:	d022      	beq.n	1a3f4 <ll_phy_req_send+0x80>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   1a3ae:	f891 3194 	ldrb.w	r3, [r1, #404]	; 0x194
   1a3b2:	f891 c195 	ldrb.w	ip, [r1, #405]	; 0x195
   1a3b6:	459c      	cmp	ip, r3
   1a3b8:	d11a      	bne.n	1a3f0 <ll_phy_req_send+0x7c>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1a3ba:	f004 0407 	and.w	r4, r4, #7
   1a3be:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
   1a3c2:	00a4      	lsls	r4, r4, #2
   1a3c4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1a3c8:	f006 0307 	and.w	r3, r6, #7
   1a3cc:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1a3d0:	f005 0501 	and.w	r5, r5, #1
   1a3d4:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   1a3d8:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
	conn->llcp_phy.req++;
   1a3dc:	f10c 0c01 	add.w	ip, ip, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1a3e0:	f022 0207 	bic.w	r2, r2, #7
   1a3e4:	4313      	orrs	r3, r2
	conn->llcp_phy.req++;
   1a3e6:	f881 c194 	strb.w	ip, [r1, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1a3ea:	f8a1 3196 	strh.w	r3, [r1, #406]	; 0x196
}
   1a3ee:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a3f0:	200c      	movs	r0, #12
}
   1a3f2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1a3f4:	201a      	movs	r0, #26
}
   1a3f6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a3f8:	2002      	movs	r0, #2
}
   1a3fa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a3fc:	2002      	movs	r0, #2
}
   1a3fe:	4770      	bx	lr
   1a400:	200020d0 	.word	0x200020d0

0001a404 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a404:	b9d8      	cbnz	r0, 1a43e <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a406:	4602      	mov	r2, r0
{
   1a408:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a40a:	480e      	ldr	r0, [pc, #56]	; (1a444 <ll_apto_get+0x40>)
   1a40c:	460c      	mov	r4, r1
   1a40e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a412:	f7fa fce7 	bl	14de4 <mem_get>
   1a416:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1a418:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1a41a:	b970      	cbnz	r0, 1a43a <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1a41c:	f8b2 30b2 	ldrh.w	r3, [r2, #178]	; 0xb2
   1a420:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1a422:	fb02 f303 	mul.w	r3, r2, r3
   1a426:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1a42a:	4a07      	ldr	r2, [pc, #28]	; (1a448 <ll_apto_get+0x44>)
   1a42c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1a430:	fba2 2303 	umull	r2, r3, r2, r3
   1a434:	099b      	lsrs	r3, r3, #6
   1a436:	8023      	strh	r3, [r4, #0]
}
   1a438:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a43a:	2002      	movs	r0, #2
}
   1a43c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a43e:	2002      	movs	r0, #2
}
   1a440:	4770      	bx	lr
   1a442:	bf00      	nop
   1a444:	200020d0 	.word	0x200020d0
   1a448:	10624dd3 	.word	0x10624dd3

0001a44c <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a44c:	b9e0      	cbnz	r0, 1a488 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a44e:	4602      	mov	r2, r0
{
   1a450:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a452:	480e      	ldr	r0, [pc, #56]	; (1a48c <ll_apto_set+0x40>)
   1a454:	460c      	mov	r4, r1
   1a456:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a45a:	f7fa fcc3 	bl	14de4 <mem_get>
   1a45e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1a460:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1a462:	b978      	cbnz	r0, 1a484 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1a464:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   1a468:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1a46c:	fb03 fc0c 	mul.w	ip, r3, ip
   1a470:	f242 7310 	movw	r3, #10000	; 0x2710
   1a474:	fb03 c304 	mla	r3, r3, r4, ip
   1a478:	3b01      	subs	r3, #1
   1a47a:	fbb3 f3fc 	udiv	r3, r3, ip
   1a47e:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
}
   1a482:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a484:	2002      	movs	r0, #2
}
   1a486:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a488:	2002      	movs	r0, #2
}
   1a48a:	4770      	bx	lr
   1a48c:	200020d0 	.word	0x200020d0

0001a490 <ull_conn_init>:
	err = init_reset();
   1a490:	f7ff b912 	b.w	196b8 <init_reset>

0001a494 <ull_conn_reset>:
{
   1a494:	b510      	push	{r4, lr}
	(void)ull_central_reset();
   1a496:	f002 f9fb 	bl	1c890 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a49a:	2200      	movs	r2, #0
   1a49c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a4a0:	4815      	ldr	r0, [pc, #84]	; (1a4f8 <ull_conn_reset+0x64>)
   1a4a2:	f7fa fc9f 	bl	14de4 <mem_get>
   1a4a6:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1a4a8:	f100 021c 	add.w	r2, r0, #28
   1a4ac:	4601      	mov	r1, r0
   1a4ae:	2003      	movs	r0, #3
   1a4b0:	f7fe fc50 	bl	18d54 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1a4b4:	b108      	cbz	r0, 1a4ba <ull_conn_reset+0x26>
   1a4b6:	3078      	adds	r0, #120	; 0x78
   1a4b8:	d10f      	bne.n	1a4da <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
   1a4ba:	4810      	ldr	r0, [pc, #64]	; (1a4fc <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
   1a4bc:	4910      	ldr	r1, [pc, #64]	; (1a500 <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
   1a4be:	4a11      	ldr	r2, [pc, #68]	; (1a504 <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
   1a4c0:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   1a4c2:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   1a4c6:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   1a4c8:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   1a4ca:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   1a4ce:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   1a4d4:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1a4d6:	f7ff b8ef 	b.w	196b8 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1a4da:	4a0b      	ldr	r2, [pc, #44]	; (1a508 <ull_conn_reset+0x74>)
   1a4dc:	490b      	ldr	r1, [pc, #44]	; (1a50c <ull_conn_reset+0x78>)
   1a4de:	480c      	ldr	r0, [pc, #48]	; (1a510 <ull_conn_reset+0x7c>)
   1a4e0:	f640 03e3 	movw	r3, #2275	; 0x8e3
   1a4e4:	f00c fa3a 	bl	2695c <printk>
   1a4e8:	4040      	eors	r0, r0
   1a4ea:	f380 8811 	msr	BASEPRI, r0
   1a4ee:	f04f 0003 	mov.w	r0, #3
   1a4f2:	df02      	svc	2
   1a4f4:	e7e1      	b.n	1a4ba <ull_conn_reset+0x26>
   1a4f6:	bf00      	nop
   1a4f8:	200020d0 	.word	0x200020d0
   1a4fc:	200006b8 	.word	0x200006b8
   1a500:	20000674 	.word	0x20000674
   1a504:	2000374c 	.word	0x2000374c
   1a508:	0002fc68 	.word	0x0002fc68
   1a50c:	0002fc3c 	.word	0x0002fc3c
   1a510:	0002f6fc 	.word	0x0002f6fc

0001a514 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   1a514:	4b01      	ldr	r3, [pc, #4]	; (1a51c <ull_conn_default_tx_octets_get+0x8>)
}
   1a516:	8818      	ldrh	r0, [r3, #0]
   1a518:	4770      	bx	lr
   1a51a:	bf00      	nop
   1a51c:	20004a74 	.word	0x20004a74

0001a520 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   1a520:	4b01      	ldr	r3, [pc, #4]	; (1a528 <ull_conn_default_tx_time_get+0x8>)
}
   1a522:	8818      	ldrh	r0, [r3, #0]
   1a524:	4770      	bx	lr
   1a526:	bf00      	nop
   1a528:	20004a76 	.word	0x20004a76

0001a52c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   1a52c:	4b01      	ldr	r3, [pc, #4]	; (1a534 <ull_conn_default_phy_tx_get+0x8>)
}
   1a52e:	7818      	ldrb	r0, [r3, #0]
   1a530:	4770      	bx	lr
   1a532:	bf00      	nop
   1a534:	20004c03 	.word	0x20004c03

0001a538 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   1a538:	4b01      	ldr	r3, [pc, #4]	; (1a540 <ull_conn_default_phy_rx_get+0x8>)
}
   1a53a:	7818      	ldrb	r0, [r3, #0]
   1a53c:	4770      	bx	lr
   1a53e:	bf00      	nop
   1a540:	20004c02 	.word	0x20004c02

0001a544 <ull_conn_setup>:
{
   1a544:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   1a546:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   1a548:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   1a54a:	681d      	ldr	r5, [r3, #0]
   1a54c:	782b      	ldrb	r3, [r5, #0]
{
   1a54e:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   1a550:	b193      	cbz	r3, 1a578 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   1a552:	696b      	ldr	r3, [r5, #20]
   1a554:	b163      	cbz	r3, 1a570 <ull_conn_setup+0x2c>
   1a556:	4a0b      	ldr	r2, [pc, #44]	; (1a584 <ull_conn_setup+0x40>)
   1a558:	490b      	ldr	r1, [pc, #44]	; (1a588 <ull_conn_setup+0x44>)
   1a55a:	480c      	ldr	r0, [pc, #48]	; (1a58c <ull_conn_setup+0x48>)
   1a55c:	f240 33ed 	movw	r3, #1005	; 0x3ed
   1a560:	f00c f9fc 	bl	2695c <printk>
   1a564:	4040      	eors	r0, r0
   1a566:	f380 8811 	msr	BASEPRI, r0
   1a56a:	f04f 0003 	mov.w	r0, #3
   1a56e:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   1a570:	4b07      	ldr	r3, [pc, #28]	; (1a590 <ull_conn_setup+0x4c>)
   1a572:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   1a576:	bd38      	pop	{r3, r4, r5, pc}
   1a578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   1a57c:	4608      	mov	r0, r1
   1a57e:	f7ff ba95 	b.w	19aac <conn_setup_adv_scan_disabled_cb>
   1a582:	bf00      	nop
   1a584:	0002fc68 	.word	0x0002fc68
   1a588:	0002fcd4 	.word	0x0002fcd4
   1a58c:	0002f6fc 	.word	0x0002f6fc
   1a590:	00019aad 	.word	0x00019aad

0001a594 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1a594:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a596:	88da      	ldrh	r2, [r3, #6]
   1a598:	2a00      	cmp	r2, #0
   1a59a:	f040 80ce 	bne.w	1a73a <ull_conn_rx+0x1a6>
{
   1a59e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5a2:	460e      	mov	r6, r1
   1a5a4:	b083      	sub	sp, #12
   1a5a6:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a5a8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1a5ac:	48a4      	ldr	r0, [pc, #656]	; (1a840 <ull_conn_rx+0x2ac>)
   1a5ae:	f7fa fc19 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1a5b2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a5b4:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1a5b6:	2b00      	cmp	r3, #0
   1a5b8:	f040 80b8 	bne.w	1a72c <ull_conn_rx+0x198>
	pdu_rx = (void *)(*rx)->pdu;
   1a5bc:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1a5be:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
	switch (pdu_rx->ll_id) {
   1a5c2:	7f29      	ldrb	r1, [r5, #28]
   1a5c4:	f001 0103 	and.w	r1, r1, #3
   1a5c8:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1a5ca:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   1a5ce:	d129      	bne.n	1a624 <ull_conn_rx+0x90>
	opcode = pdu_rx->llctrl.opcode;
   1a5d0:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   1a5d4:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1a5d8:	b3d0      	cbz	r0, 1a650 <ull_conn_rx+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1a5da:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a5de:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   1a5e0:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1a5e4:	f2c0 80ad 	blt.w	1a742 <ull_conn_rx+0x1ae>
	return (!conn->lll.role &&
   1a5e8:	2900      	cmp	r1, #0
   1a5ea:	f040 80be 	bne.w	1a76a <ull_conn_rx+0x1d6>
		((!conn->llcp_enc.refresh &&
   1a5ee:	f1b8 0f02 	cmp.w	r8, #2
   1a5f2:	f000 80af 	beq.w	1a754 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1a5f6:	f1b8 0f05 	cmp.w	r8, #5
   1a5fa:	f000 8462 	beq.w	1aec2 <ull_conn_rx+0x92e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1a5fe:	f1b8 0f06 	cmp.w	r8, #6
   1a602:	f000 83cd 	beq.w	1ada0 <ull_conn_rx+0x80c>
   1a606:	f1b8 0f0d 	cmp.w	r8, #13
   1a60a:	f000 8190 	beq.w	1a92e <ull_conn_rx+0x39a>
   1a60e:	f1b8 0f11 	cmp.w	r8, #17
   1a612:	f000 823b 	beq.w	1aa8c <ull_conn_rx+0x4f8>
		conn->llcp_terminate.reason_final =
   1a616:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a618:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   1a61a:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b

		return 0;
   1a61e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a620:	712b      	strb	r3, [r5, #4]
		return 0;
   1a622:	e007      	b.n	1a634 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   1a624:	b949      	cbnz	r1, 1a63a <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   1a626:	b110      	cbz	r0, 1a62e <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_final =
   1a628:	233d      	movs	r3, #61	; 0x3d
   1a62a:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a62e:	2301      	movs	r3, #1
   1a630:	712b      	strb	r3, [r5, #4]
	return 0;
   1a632:	2000      	movs	r0, #0
}
   1a634:	b003      	add	sp, #12
   1a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   1a63a:	2800      	cmp	r0, #0
   1a63c:	d0f9      	beq.n	1a632 <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
   1a63e:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a640:	2201      	movs	r2, #1
	return 0;
   1a642:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
   1a644:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a648:	712a      	strb	r2, [r5, #4]
}
   1a64a:	b003      	add	sp, #12
   1a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1a650:	f1a8 0302 	sub.w	r3, r8, #2
   1a654:	2b17      	cmp	r3, #23
   1a656:	d81d      	bhi.n	1a694 <ull_conn_rx+0x100>
   1a658:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a65c:	001c007c 	.word	0x001c007c
   1a660:	042e0427 	.word	0x042e0427
   1a664:	037203a2 	.word	0x037203a2
   1a668:	01db001c 	.word	0x01db001c
   1a66c:	044d001c 	.word	0x044d001c
   1a670:	016901ac 	.word	0x016901ac
   1a674:	02e002f5 	.word	0x02e002f5
   1a678:	0218024e 	.word	0x0218024e
   1a67c:	03cd0402 	.word	0x03cd0402
   1a680:	00b900b9 	.word	0x00b900b9
   1a684:	012c03d7 	.word	0x012c03d7
   1a688:	00f6001c 	.word	0x00f6001c
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1a68c:	7f6b      	ldrb	r3, [r5, #29]
   1a68e:	2b01      	cmp	r3, #1
   1a690:	f000 843a 	beq.w	1af08 <ull_conn_rx+0x974>
	if (conn->common.txn_lock) {
   1a694:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1a698:	0798      	lsls	r0, r3, #30
   1a69a:	d4c8      	bmi.n	1a62e <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a69c:	4869      	ldr	r0, [pc, #420]	; (1a844 <ull_conn_rx+0x2b0>)
   1a69e:	f7fa fb6f 	bl	14d80 <mem_acquire>
	if (!tx) {
   1a6a2:	2800      	cmp	r0, #0
   1a6a4:	f000 851b 	beq.w	1b0de <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   1a6a8:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1a6ac:	f043 0302 	orr.w	r3, r3, #2
   1a6b0:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1a6b4:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1a6b6:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1a6ba:	f043 0303 	orr.w	r3, r3, #3
   1a6be:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1a6c0:	2302      	movs	r3, #2
   1a6c2:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1a6c4:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1a6c8:	2307      	movs	r3, #7
   1a6ca:	71c3      	strb	r3, [r0, #7]
	if (
   1a6cc:	b1f2      	cbz	r2, 1a70c <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   1a6ce:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
   1a6d2:	0799      	lsls	r1, r3, #30
   1a6d4:	d41a      	bmi.n	1a70c <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   1a6d6:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   1a6da:	07db      	lsls	r3, r3, #31
   1a6dc:	d416      	bmi.n	1a70c <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   1a6de:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   1a6e2:	429a      	cmp	r2, r3
   1a6e4:	f000 84ff 	beq.w	1b0e6 <ull_conn_rx+0xb52>
		} else if (!conn->tx_ctrl) {
   1a6e8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   1a6ec:	2b00      	cmp	r3, #0
   1a6ee:	f000 8542 	beq.w	1b176 <ull_conn_rx+0xbe2>
	tx->next = conn->tx_ctrl_last->next;
   1a6f2:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
   1a6f6:	6813      	ldr	r3, [r2, #0]
   1a6f8:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1a6fa:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1a6fc:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1a6fe:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1a702:	2a00      	cmp	r2, #0
   1a704:	d193      	bne.n	1a62e <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   1a706:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a70a:	e790      	b.n	1a62e <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   1a70c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   1a710:	2b00      	cmp	r3, #0
   1a712:	f000 84da 	beq.w	1b0ca <ull_conn_rx+0xb36>
	tx->next = conn->tx_ctrl_last->next;
   1a716:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   1a71a:	681a      	ldr	r2, [r3, #0]
   1a71c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1a71e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1a720:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1a722:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1a726:	2a00      	cmp	r2, #0
   1a728:	d181      	bne.n	1a62e <ull_conn_rx+0x9a>
   1a72a:	e7ec      	b.n	1a706 <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a72c:	6833      	ldr	r3, [r6, #0]
   1a72e:	2201      	movs	r2, #1
		return 0;
   1a730:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a732:	711a      	strb	r2, [r3, #4]
}
   1a734:	b003      	add	sp, #12
   1a736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a73a:	2201      	movs	r2, #1
   1a73c:	711a      	strb	r2, [r3, #4]
		return 0;
   1a73e:	2000      	movs	r0, #0
}
   1a740:	4770      	bx	lr
	       (conn->lll.role &&
   1a742:	bbc1      	cbnz	r1, 1a7b6 <ull_conn_rx+0x222>
		((!conn->llcp_enc.refresh &&
   1a744:	f1b8 0f07 	cmp.w	r8, #7
   1a748:	f000 82fa 	beq.w	1ad40 <ull_conn_rx+0x7ac>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1a74c:	f1b8 0f02 	cmp.w	r8, #2
   1a750:	f47f af55 	bne.w	1a5fe <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   1a754:	7f6b      	ldrb	r3, [r5, #29]
   1a756:	2b02      	cmp	r3, #2
   1a758:	d19c      	bne.n	1a694 <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_final =
   1a75a:	f895 2020 	ldrb.w	r2, [r5, #32]
   1a75e:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a762:	2301      	movs	r3, #1
	int nack = 0;
   1a764:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a766:	712b      	strb	r3, [r5, #4]
}
   1a768:	e764      	b.n	1a634 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   1a76a:	f1b8 0f02 	cmp.w	r8, #2
   1a76e:	d0f1      	beq.n	1a754 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1a770:	f1b8 0f0b 	cmp.w	r8, #11
   1a774:	d08a      	beq.n	1a68c <ull_conn_rx+0xf8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1a776:	f1b8 0f04 	cmp.w	r8, #4
   1a77a:	f47f af3c 	bne.w	1a5f6 <ull_conn_rx+0x62>
		if (conn->lll.role ||
   1a77e:	7f6b      	ldrb	r3, [r5, #29]
   1a780:	2b0d      	cmp	r3, #13
   1a782:	d187      	bne.n	1a694 <ull_conn_rx+0x100>
		memcpy(&conn->llcp.encryption.skd[8],
   1a784:	2208      	movs	r2, #8
   1a786:	f105 0120 	add.w	r1, r5, #32
   1a78a:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
   1a78e:	f00f fde5 	bl	2a35c <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   1a792:	2204      	movs	r2, #4
   1a794:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a798:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1a79c:	f00f fdde 	bl	2a35c <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   1a7a0:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a7a4:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   1a7a6:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a7aa:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   1a7ac:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	int nack = 0;
   1a7b0:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a7b2:	7111      	strb	r1, [r2, #4]
		break;
   1a7b4:	e73e      	b.n	1a634 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   1a7b6:	f1b8 0f02 	cmp.w	r8, #2
   1a7ba:	d0cb      	beq.n	1a754 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1a7bc:	f1b8 0f0b 	cmp.w	r8, #11
   1a7c0:	f000 84a4 	beq.w	1b10c <ull_conn_rx+0xb78>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1a7c4:	f1b8 0f03 	cmp.w	r8, #3
   1a7c8:	f47f af19 	bne.w	1a5fe <ull_conn_rx+0x6a>
   1a7cc:	e762      	b.n	1a694 <ull_conn_rx+0x100>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   1a7ce:	7f6b      	ldrb	r3, [r5, #29]
   1a7d0:	2b09      	cmp	r3, #9
   1a7d2:	f47f af5f 	bne.w	1a694 <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1a7d6:	f1b8 0f14 	cmp.w	r8, #20
   1a7da:	f000 84db 	beq.w	1b194 <ull_conn_rx+0xc00>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1a7de:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   1a7e2:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1a7e6:	4293      	cmp	r3, r2
   1a7e8:	f000 87e2 	beq.w	1b7b0 <ull_conn_rx+0x121c>
	eff_rx_octets = conn->lll.max_rx_octets;
   1a7ec:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   1a7f0:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   1a7f4:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   1a7f8:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1a7fc:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	struct node_tx *tx = NULL;
   1a800:	2300      	movs	r3, #0
	       tx) ||
   1a802:	f001 0107 	and.w	r1, r1, #7
   1a806:	2902      	cmp	r1, #2
   1a808:	f000 84e4 	beq.w	1b1d4 <ull_conn_rx+0xc40>
   1a80c:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   1a810:	f1b8 0f15 	cmp.w	r8, #21
   1a814:	f43f af0d 	beq.w	1a632 <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1a818:	4618      	mov	r0, r3
   1a81a:	490a      	ldr	r1, [pc, #40]	; (1a844 <ull_conn_rx+0x2b0>)
   1a81c:	f7fa faca 	bl	14db4 <mem_release>
			if (conn->llcp_length.state ==
   1a820:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->common.txn_lock = 0U;
   1a824:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   1a828:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   1a82c:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   1a830:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   1a832:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   1a836:	f47f aefc 	bne.w	1a632 <ull_conn_rx+0x9e>
				return -EBUSY;
   1a83a:	f06f 000f 	mvn.w	r0, #15
   1a83e:	e6f9      	b.n	1a634 <ull_conn_rx+0xa0>
   1a840:	200020d0 	.word	0x200020d0
   1a844:	200037e0 	.word	0x200037e0
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   1a848:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a84c:	2b00      	cmp	r3, #0
   1a84e:	f6ff af21 	blt.w	1a694 <ull_conn_rx+0x100>
   1a852:	7f6b      	ldrb	r3, [r5, #29]
   1a854:	2b03      	cmp	r3, #3
   1a856:	f47f af1d 	bne.w	1a694 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   1a85a:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
					 conn->lll.phy_rx))) {
   1a85e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
			if (!(p->phys & (conn->lll.phy_tx |
   1a862:	f895 2020 	ldrb.w	r2, [r5, #32]
   1a866:	430b      	orrs	r3, r1
   1a868:	f003 0307 	and.w	r3, r3, #7
   1a86c:	4213      	tst	r3, r2
   1a86e:	f43f aee0 	beq.w	1a632 <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   1a872:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   1a876:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   1a87a:	1a9b      	subs	r3, r3, r2
   1a87c:	f003 0303 	and.w	r3, r3, #3
   1a880:	2b02      	cmp	r3, #2
   1a882:	f43f aed6 	beq.w	1a632 <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   1a886:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   1a88a:	f002 fa51 	bl	1cd30 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   1a88e:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.chan_map.initiate = 1U;
   1a892:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			conn->llcp_type = LLCP_CHAN_MAP;
   1a896:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   1a898:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   1a89a:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   1a89e:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a8a2:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   1a8a4:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a8a8:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   1a8aa:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	int nack = 0;
   1a8ae:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a8b0:	7111      	strb	r1, [r2, #4]

		break;
   1a8b2:	e6bf      	b.n	1a634 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   1a8b4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a8b8:	2b00      	cmp	r3, #0
   1a8ba:	f6ff aeeb 	blt.w	1a694 <ull_conn_rx+0x100>
   1a8be:	7f6b      	ldrb	r3, [r5, #29]
   1a8c0:	2b03      	cmp	r3, #3
   1a8c2:	f47f aee7 	bne.w	1a694 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   1a8c6:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   1a8ca:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   1a8ce:	429a      	cmp	r2, r3
   1a8d0:	f43f aead 	beq.w	1a62e <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1a8d4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1a8d8:	f002 0303 	and.w	r3, r2, #3
   1a8dc:	2b02      	cmp	r3, #2
   1a8de:	f47f aea6 	bne.w	1a62e <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   1a8e2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1a8e6:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1a8ea:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   1a8ec:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1a8f0:	009b      	lsls	r3, r3, #2
   1a8f2:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   1a8f6:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1a8fa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1a8fe:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1a902:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1a906:	d002      	beq.n	1a90e <ull_conn_rx+0x37a>
   1a908:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1a90c:	d105      	bne.n	1a91a <ull_conn_rx+0x386>
				conn->llcp_phy.tx = 0;
   1a90e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   1a912:	f003 0303 	and.w	r3, r3, #3
   1a916:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
   1a91a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   1a91e:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   1a920:	f043 0301 	orr.w	r3, r3, #1
   1a924:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   1a928:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a92c:	e67f      	b.n	1a62e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   1a92e:	7f6b      	ldrb	r3, [r5, #29]
   1a930:	2b02      	cmp	r3, #2
   1a932:	f47f aeaf 	bne.w	1a694 <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   1a936:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   1a93a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   1a93e:	4293      	cmp	r3, r2
   1a940:	d004      	beq.n	1a94c <ull_conn_rx+0x3b8>
   1a942:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   1a946:	2b03      	cmp	r3, #3
   1a948:	f000 86de 	beq.w	1b708 <ull_conn_rx+0x1174>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1a94c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   1a950:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   1a954:	4293      	cmp	r3, r2
   1a956:	f000 852f 	beq.w	1b3b8 <ull_conn_rx+0xe24>
		rej_ext_ind->error_code = rej_ind->error_code;
   1a95a:	f895 1020 	ldrb.w	r1, [r5, #32]
   1a95e:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1a962:	2923      	cmp	r1, #35	; 0x23
   1a964:	d012      	beq.n	1a98c <ull_conn_rx+0x3f8>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1a966:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   1a96a:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1a96e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   1a972:	f36f 0200 	bfc	r2, #0, #1
   1a976:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   1a97a:	2200      	movs	r2, #0
   1a97c:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1a980:	f3c3 0202 	ubfx	r2, r3, #0, #3
   1a984:	f362 1306 	bfi	r3, r2, #4, #3
   1a988:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   1a98c:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   1a990:	0758      	lsls	r0, r3, #29
   1a992:	f57f ae4c 	bpl.w	1a62e <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1a996:	231c      	movs	r3, #28
   1a998:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1a99a:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   1a99c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1a9a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1a9a4:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   1a9a6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   1a9aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   1a9ae:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   1a9b0:	77ab      	strb	r3, [r5, #30]
	if (err) {
   1a9b2:	e63f      	b.n	1a634 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   1a9b4:	7f6e      	ldrb	r6, [r5, #29]
   1a9b6:	2e06      	cmp	r6, #6
   1a9b8:	f47f ae6c 	bne.w	1a694 <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
   1a9bc:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   1a9c0:	07df      	lsls	r7, r3, #31
   1a9c2:	f140 85dc 	bpl.w	1b57e <ull_conn_rx+0xfea>
	} else if (!conn->llcp_version.rx) {
   1a9c6:	f013 0302 	ands.w	r3, r3, #2
   1a9ca:	f47f ae30 	bne.w	1a62e <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   1a9ce:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1a9d2:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
		conn->procedure_expire = 0U;
   1a9d6:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_version.version_number = v->version_number;
   1a9da:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a9de:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1a9e2:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   1a9e6:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   1a9ea:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1a9ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a9f2:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		sys_le16_to_cpu(v->sub_version_number);
   1a9f6:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   1a9fa:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1a9fe:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1aa02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   1aa06:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
	conn->llcp_version.rx = 1U;
   1aa0a:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	return 0;
   1aa0e:	2000      	movs	r0, #0
   1aa10:	e610      	b.n	1a634 <ull_conn_rx+0xa0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   1aa12:	7f6b      	ldrb	r3, [r5, #29]
   1aa14:	2b09      	cmp	r3, #9
   1aa16:	f47f ae3d 	bne.w	1a694 <ull_conn_rx+0x100>
   1aa1a:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   1aa1c:	49dd      	ldr	r1, [pc, #884]	; (1ad94 <ull_conn_rx+0x800>)
   1aa1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1aa20:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1aa22:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1aa26:	400a      	ands	r2, r1
   1aa28:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   1aa2c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1aa30:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   1aa34:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1aa38:	4013      	ands	r3, r2
   1aa3a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1aa3e:	6a2e      	ldr	r6, [r5, #32]
   1aa40:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   1aa42:	f7fd fbbd 	bl	181c0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1aa46:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1aa4a:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   1aa4e:	4ad1      	ldr	r2, [pc, #836]	; (1ad94 <ull_conn_rx+0x800>)
	conn->llcp_feature.features_peer =
   1aa50:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->common.fex_valid = 1U;
   1aa54:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   1aa58:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   1aa5a:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   1aa5e:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   1aa60:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1aa64:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1aa68:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	feat_result &= 0xFF;
   1aa6c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   1aa70:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   1aa74:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1aa76:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   1aa7a:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1aa7c:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1aa80:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	conn->procedure_expire = 0U;
   1aa84:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   1aa88:	4618      	mov	r0, r3
}
   1aa8a:	e5d3      	b.n	1a634 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   1aa8c:	7f6b      	ldrb	r3, [r5, #29]
   1aa8e:	2b03      	cmp	r3, #3
   1aa90:	f47f ae00 	bne.w	1a694 <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
   1aa94:	f895 3020 	ldrb.w	r3, [r5, #32]
   1aa98:	3b03      	subs	r3, #3
   1aa9a:	2b13      	cmp	r3, #19
   1aa9c:	f63f adc7 	bhi.w	1a62e <ull_conn_rx+0x9a>
   1aaa0:	a201      	add	r2, pc, #4	; (adr r2, 1aaa8 <ull_conn_rx+0x514>)
   1aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1aaa6:	bf00      	nop
   1aaa8:	0001b08b 	.word	0x0001b08b
   1aaac:	0001a62f 	.word	0x0001a62f
   1aab0:	0001a62f 	.word	0x0001a62f
   1aab4:	0001a62f 	.word	0x0001a62f
   1aab8:	0001a62f 	.word	0x0001a62f
   1aabc:	0001a62f 	.word	0x0001a62f
   1aac0:	0001a62f 	.word	0x0001a62f
   1aac4:	0001a62f 	.word	0x0001a62f
   1aac8:	0001a62f 	.word	0x0001a62f
   1aacc:	0001a62f 	.word	0x0001a62f
   1aad0:	0001a62f 	.word	0x0001a62f
   1aad4:	0001a62f 	.word	0x0001a62f
   1aad8:	0001b013 	.word	0x0001b013
   1aadc:	0001a62f 	.word	0x0001a62f
   1aae0:	0001a62f 	.word	0x0001a62f
   1aae4:	0001a62f 	.word	0x0001a62f
   1aae8:	0001a62f 	.word	0x0001a62f
   1aaec:	0001af89 	.word	0x0001af89
   1aaf0:	0001a62f 	.word	0x0001a62f
   1aaf4:	0001afc5 	.word	0x0001afc5
		if (conn->lll.role ||
   1aaf8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1aafc:	2b00      	cmp	r3, #0
   1aafe:	f6ff adc9 	blt.w	1a694 <ull_conn_rx+0x100>
   1ab02:	7f6b      	ldrb	r3, [r5, #29]
   1ab04:	2b18      	cmp	r3, #24
   1ab06:	f47f adc5 	bne.w	1a694 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   1ab0a:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1ab0e:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   1ab12:	429a      	cmp	r2, r3
   1ab14:	f43f ad8b 	beq.w	1a62e <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   1ab18:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		     conn->llcp_conn_param.ack) &&
   1ab1c:	f003 030f 	and.w	r3, r3, #15
   1ab20:	2b04      	cmp	r3, #4
   1ab22:	f47f ad84 	bne.w	1a62e <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1ab26:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   1ab2a:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1ab2e:	2b05      	cmp	r3, #5
   1ab30:	f240 85ad 	bls.w	1b68e <ull_conn_rx+0x10fa>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1ab34:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   1ab36:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1ab38:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1ab3c:	f200 85a7 	bhi.w	1b68e <ull_conn_rx+0x10fa>
			    (interval_max > 3200) ||
   1ab40:	428b      	cmp	r3, r1
   1ab42:	f200 85a4 	bhi.w	1b68e <ull_conn_rx+0x10fa>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1ab46:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   1ab48:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   1ab4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1ab4e:	f080 859e 	bcs.w	1b68e <ull_conn_rx+0x10fa>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1ab52:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   1ab54:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   1ab58:	f1ae 020a 	sub.w	r2, lr, #10
   1ab5c:	f640 4876 	movw	r8, #3190	; 0xc76
   1ab60:	b292      	uxth	r2, r2
   1ab62:	4542      	cmp	r2, r8
   1ab64:	f200 8593 	bhi.w	1b68e <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
   1ab68:	3301      	adds	r3, #1
   1ab6a:	b29b      	uxth	r3, r3
   1ab6c:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   1ab70:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   1ab74:	f080 858b 	bcs.w	1b68e <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
   1ab78:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1ab7c:	4291      	cmp	r1, r2
   1ab7e:	f0c0 8586 	bcc.w	1b68e <ull_conn_rx+0x10fa>
			conn->llcp_conn_param.preferred_periodicity =
   1ab82:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1ab86:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   1ab8a:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1ab8e:	2301      	movs	r3, #1
   1ab90:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   1ab94:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1ab96:	f8a4 7162 	strh.w	r7, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   1ab9a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   1ab9e:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   1aba2:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1aba6:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   1abaa:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1abae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1abb2:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   1abb6:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   1abba:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1abbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   1abc2:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   1abc6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   1abca:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1abce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   1abd2:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   1abd6:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   1abda:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1abde:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   1abe2:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   1abe6:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   1abea:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1abee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   1abf2:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   1abf6:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1abfa:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1abfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   1ac02:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   1ac06:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1ac0a:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1ac0e:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				sys_le16_to_cpu(cpr->offset5);
   1ac12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   1ac16:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1ac1a:	e508      	b.n	1a62e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1ac1c:	7f6b      	ldrb	r3, [r5, #29]
   1ac1e:	2b18      	cmp	r3, #24
   1ac20:	f47f ad38 	bne.w	1a694 <ull_conn_rx+0x100>
	return conn_upd_curr && (conn_upd_curr != conn);
   1ac24:	485c      	ldr	r0, [pc, #368]	; (1ad98 <ull_conn_rx+0x804>)
   1ac26:	6803      	ldr	r3, [r0, #0]
   1ac28:	2b00      	cmp	r3, #0
   1ac2a:	f000 827b 	beq.w	1b124 <ull_conn_rx+0xb90>
   1ac2e:	429c      	cmp	r4, r3
   1ac30:	f000 8278 	beq.w	1b124 <ull_conn_rx+0xb90>
			nack = reject_ext_ind_send(conn, *rx,
   1ac34:	2320      	movs	r3, #32
   1ac36:	220f      	movs	r2, #15
   1ac38:	4629      	mov	r1, r5
   1ac3a:	4620      	mov	r0, r4
}
   1ac3c:	b003      	add	sp, #12
   1ac3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   1ac42:	f7ff b807 	b.w	19c54 <reject_ext_ind_send>
		if (conn->lll.role ||
   1ac46:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1ac4a:	2b00      	cmp	r3, #0
   1ac4c:	f6ff ad22 	blt.w	1a694 <ull_conn_rx+0x100>
   1ac50:	f895 901d 	ldrb.w	r9, [r5, #29]
   1ac54:	f1b9 0f09 	cmp.w	r9, #9
   1ac58:	f47f ad1c 	bne.w	1a694 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   1ac5c:	f894 00ba 	ldrb.w	r0, [r4, #186]	; 0xba
   1ac60:	f010 0602 	ands.w	r6, r0, #2
   1ac64:	f47f ace3 	bne.w	1a62e <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1ac68:	484c      	ldr	r0, [pc, #304]	; (1ad9c <ull_conn_rx+0x808>)
   1ac6a:	f7fa f889 	bl	14d80 <mem_acquire>
	if (!tx) {
   1ac6e:	4607      	mov	r7, r0
   1ac70:	2800      	cmp	r0, #0
   1ac72:	f000 8234 	beq.w	1b0de <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   1ac76:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   1ac7a:	4946      	ldr	r1, [pc, #280]	; (1ad94 <ull_conn_rx+0x800>)
	conn->common.txn_lock = 1U;
   1ac7c:	f043 0302 	orr.w	r3, r3, #2
   1ac80:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
   1ac84:	6a2a      	ldr	r2, [r5, #32]
   1ac86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   1ac88:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1ac8a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1ac8e:	400a      	ands	r2, r1
   1ac90:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   1ac94:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1ac98:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   1ac9c:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1aca0:	4013      	ands	r3, r2
   1aca2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1aca6:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   1acaa:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   1acae:	f7fd fa87 	bl	181c0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1acb2:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1acb6:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   1acba:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	feat &= LL_FEAT_BIT_MASK;
   1acbe:	4b35      	ldr	r3, [pc, #212]	; (1ad94 <ull_conn_rx+0x800>)
   1acc0:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   1acc4:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   1acc6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1acca:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   1acce:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1acd2:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   1acd6:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1acda:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	conn->common.fex_valid = 1U;
   1acde:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1ace2:	f043 0301 	orr.w	r3, r3, #1
   1ace6:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1acea:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1acec:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1acf0:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1acf4:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1acf6:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1acf8:	18b8      	adds	r0, r7, r2
   1acfa:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1acfc:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1ad00:	f00f fb37 	bl	2a372 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   1ad04:	f7fd fa5c 	bl	181c0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1ad08:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	dst[0] = val;
   1ad0c:	7339      	strb	r1, [r7, #12]
   1ad0e:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   1ad10:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1ad14:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   1ad18:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   1ad1a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1ad1c:	723b      	strb	r3, [r7, #8]
   1ad1e:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   1ad20:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1ad24:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   1ad26:	4620      	mov	r0, r4
   1ad28:	727b      	strb	r3, [r7, #9]
   1ad2a:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   1ad2c:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   1ad2e:	73fe      	strb	r6, [r7, #15]
   1ad30:	72fa      	strb	r2, [r7, #11]
   1ad32:	4639      	mov	r1, r7
   1ad34:	f7fe fde6 	bl	19904 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1ad38:	2301      	movs	r3, #1
   1ad3a:	712b      	strb	r3, [r5, #4]
	return 0;
   1ad3c:	4630      	mov	r0, r6
   1ad3e:	e479      	b.n	1a634 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   1ad40:	7f6b      	ldrb	r3, [r5, #29]
   1ad42:	2b02      	cmp	r3, #2
   1ad44:	f47f aca6 	bne.w	1a694 <ull_conn_rx+0x100>
			    conn->llcp_conn_param.req) &&
   1ad48:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
		} else if ((conn->llcp_conn_param.ack !=
   1ad4c:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
	return ((uint16_t)src[1] << 8) | src[0];
   1ad50:	f895 3020 	ldrb.w	r3, [r5, #32]
   1ad54:	4291      	cmp	r1, r2
   1ad56:	d002      	beq.n	1ad5e <ull_conn_rx+0x7ca>
			    conn->llcp_conn_param.req) &&
   1ad58:	2b0f      	cmp	r3, #15
   1ad5a:	f000 83c5 	beq.w	1b4e8 <ull_conn_rx+0xf54>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1ad5e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1ad62:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   1ad66:	4291      	cmp	r1, r2
   1ad68:	d002      	beq.n	1ad70 <ull_conn_rx+0x7dc>
   1ad6a:	2b14      	cmp	r3, #20
   1ad6c:	f000 8439 	beq.w	1b5e2 <ull_conn_rx+0x104e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1ad70:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   1ad74:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
   1ad78:	4291      	cmp	r1, r2
   1ad7a:	d002      	beq.n	1ad82 <ull_conn_rx+0x7ee>
   1ad7c:	2b16      	cmp	r3, #22
   1ad7e:	f000 8498 	beq.w	1b6b2 <ull_conn_rx+0x111e>
			switch (llctrl->unknown_rsp.type) {
   1ad82:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1ad84:	bf04      	itt	eq
   1ad86:	2301      	moveq	r3, #1
   1ad88:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
   1ad8a:	2300      	movs	r3, #0
   1ad8c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   1ad90:	4618      	mov	r0, r3
		break;
   1ad92:	e44f      	b.n	1a634 <ull_conn_rx+0xa0>
   1ad94:	087830d0 	.word	0x087830d0
   1ad98:	2000374c 	.word	0x2000374c
   1ad9c:	200037e0 	.word	0x200037e0
		if ((conn->llcp_req == conn->llcp_ack) ||
   1ada0:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   1ada4:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   1ada8:	4299      	cmp	r1, r3
   1adaa:	f43f ac73 	beq.w	1a694 <ull_conn_rx+0x100>
   1adae:	f894 10bd 	ldrb.w	r1, [r4, #189]	; 0xbd
   1adb2:	2903      	cmp	r1, #3
   1adb4:	f47f ac6e 	bne.w	1a694 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   1adb8:	7f69      	ldrb	r1, [r5, #29]
   1adba:	2901      	cmp	r1, #1
   1adbc:	f47f ac6a 	bne.w	1a694 <ull_conn_rx+0x100>
		if (conn->lll.role) {
   1adc0:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1adc4:	2900      	cmp	r1, #0
   1adc6:	f2c0 846a 	blt.w	1b69e <ull_conn_rx+0x110a>
			conn->llcp_enc.pause_rx = 0U;
   1adca:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
			conn->llcp_ack = conn->llcp_req;
   1adce:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			conn->procedure_expire = 0U;
   1add2:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   1add4:	f022 0203 	bic.w	r2, r2, #3
   1add8:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			conn->procedure_expire = 0U;
   1addc:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		if (conn->llcp_enc.refresh) {
   1ade0:	0750      	lsls	r0, r2, #29
   1ade2:	f57f ac26 	bpl.w	1a632 <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   1ade6:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1adea:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   1adec:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	int nack = 0;
   1adf0:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1adf2:	712b      	strb	r3, [r5, #4]
   1adf4:	e41e      	b.n	1a634 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   1adf6:	7f6a      	ldrb	r2, [r5, #29]
   1adf8:	2a01      	cmp	r2, #1
   1adfa:	f47f ac4b 	bne.w	1a694 <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
   1adfe:	2300      	movs	r3, #0
   1ae00:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   1ae04:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1ae06:	712a      	strb	r2, [r5, #4]
		break;
   1ae08:	e414      	b.n	1a634 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   1ae0a:	7f6b      	ldrb	r3, [r5, #29]
   1ae0c:	2b03      	cmp	r3, #3
   1ae0e:	f47f ac41 	bne.w	1a694 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
   1ae12:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1ae16:	2b00      	cmp	r3, #0
   1ae18:	f2c0 82e1 	blt.w	1b3de <ull_conn_rx+0xe4a>
			if ((conn->llcp_phy.ack !=
   1ae1c:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
			     conn->llcp_phy.req) &&
   1ae20:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
   1ae24:	4281      	cmp	r1, r0
   1ae26:	d007      	beq.n	1ae38 <ull_conn_rx+0x8a4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1ae28:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   1ae2c:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   1ae30:	3a01      	subs	r2, #1
   1ae32:	2a02      	cmp	r2, #2
   1ae34:	f240 842f 	bls.w	1b696 <ull_conn_rx+0x1102>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1ae38:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   1ae3c:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   1ae40:	1a9b      	subs	r3, r3, r2
   1ae42:	f003 0303 	and.w	r3, r3, #3
   1ae46:	2b02      	cmp	r3, #2
   1ae48:	f000 83c2 	beq.w	1b5d0 <ull_conn_rx+0x103c>
				     LLCP_ENCRYPTION)) ||
   1ae4c:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1ae50:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   1ae54:	429a      	cmp	r2, r3
   1ae56:	f000 83d7 	beq.w	1b608 <ull_conn_rx+0x1074>
				nack = reject_ext_ind_send(conn, *rx,
   1ae5a:	232a      	movs	r3, #42	; 0x2a
   1ae5c:	2216      	movs	r2, #22
   1ae5e:	e6eb      	b.n	1ac38 <ull_conn_rx+0x6a4>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   1ae60:	7f6f      	ldrb	r7, [r5, #29]
   1ae62:	2f01      	cmp	r7, #1
   1ae64:	f47f ac16 	bne.w	1a694 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   1ae68:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1ae6c:	f013 0602 	ands.w	r6, r3, #2
   1ae70:	f040 83aa 	bne.w	1b5c8 <ull_conn_rx+0x1034>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1ae74:	48c5      	ldr	r0, [pc, #788]	; (1b18c <ull_conn_rx+0xbf8>)
   1ae76:	f7f9 ff83 	bl	14d80 <mem_acquire>
	if (!tx) {
   1ae7a:	4601      	mov	r1, r0
   1ae7c:	2800      	cmp	r0, #0
   1ae7e:	f000 812e 	beq.w	1b0de <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   1ae82:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1ae86:	f043 0302 	orr.w	r3, r3, #2
   1ae8a:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ae8e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   1ae90:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ae92:	f043 0303 	orr.w	r3, r3, #3
   1ae96:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1ae98:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1ae9a:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1ae9c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1ae9e:	f7fe fd31 	bl	19904 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1aea2:	712f      	strb	r7, [r5, #4]
	return 0;
   1aea4:	4630      	mov	r0, r6
   1aea6:	f7ff bbc5 	b.w	1a634 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   1aeaa:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1aeae:	2b00      	cmp	r3, #0
   1aeb0:	f6bf ac65 	bge.w	1a77e <ull_conn_rx+0x1ea>
   1aeb4:	f7ff bbee 	b.w	1a694 <ull_conn_rx+0x100>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   1aeb8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1aebc:	2b00      	cmp	r3, #0
   1aebe:	f6ff abe9 	blt.w	1a694 <ull_conn_rx+0x100>
   1aec2:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   1aec6:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   1aeca:	429a      	cmp	r2, r3
   1aecc:	f43f abe2 	beq.w	1a694 <ull_conn_rx+0x100>
   1aed0:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   1aed4:	2b03      	cmp	r3, #3
   1aed6:	f47f abdd 	bne.w	1a694 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   1aeda:	7f6b      	ldrb	r3, [r5, #29]
   1aedc:	2b01      	cmp	r3, #1
   1aede:	f47f abd9 	bne.w	1a694 <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1aee2:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   1aee6:	f36f 0201 	bfc	r2, #0, #2
   1aeea:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
	int nack = 0;
   1aeee:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1aef0:	712b      	strb	r3, [r5, #4]
		break;
   1aef2:	f7ff bb9f 	b.w	1a634 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1aef6:	7f6b      	ldrb	r3, [r5, #29]
   1aef8:	2b01      	cmp	r3, #1
   1aefa:	f47f abcb 	bne.w	1a694 <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
   1aefe:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1af02:	2b00      	cmp	r3, #0
   1af04:	f2c0 8106 	blt.w	1b114 <ull_conn_rx+0xb80>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1af08:	48a0      	ldr	r0, [pc, #640]	; (1b18c <ull_conn_rx+0xbf8>)
   1af0a:	f7f9 ff39 	bl	14d80 <mem_acquire>
		if (!tx) {
   1af0e:	2800      	cmp	r0, #0
   1af10:	f000 80e5 	beq.w	1b0de <ull_conn_rx+0xb4a>
	conn->lll.enc_rx = 0;
   1af14:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   1af18:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->lll.enc_rx = 0;
   1af1c:	f023 0318 	bic.w	r3, r3, #24
   1af20:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   1af24:	f042 0201 	orr.w	r2, r2, #1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1af28:	7903      	ldrb	r3, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   1af2a:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1af2e:	2201      	movs	r2, #1
   1af30:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1af32:	f043 0303 	orr.w	r3, r3, #3
   1af36:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   1af38:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1af3c:	220b      	movs	r2, #11
   1af3e:	71c2      	strb	r2, [r0, #7]
	if (
   1af40:	2b00      	cmp	r3, #0
   1af42:	f000 819f 	beq.w	1b284 <ull_conn_rx+0xcf0>
	    !conn->llcp_enc.pause_tx &&
   1af46:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   1af4a:	0791      	lsls	r1, r2, #30
   1af4c:	f100 819a 	bmi.w	1b284 <ull_conn_rx+0xcf0>
	    !conn->llcp_phy.pause_tx &&
   1af50:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   1af54:	07d2      	lsls	r2, r2, #31
   1af56:	f100 8195 	bmi.w	1b284 <ull_conn_rx+0xcf0>
		if (conn->tx_head == conn->tx_data) {
   1af5a:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   1af5e:	4293      	cmp	r3, r2
   1af60:	f000 8506 	beq.w	1b970 <ull_conn_rx+0x13dc>
		} else if (!conn->tx_ctrl) {
   1af64:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   1af68:	2a00      	cmp	r2, #0
   1af6a:	f000 8545 	beq.w	1b9f8 <ull_conn_rx+0x1464>
	tx->next = conn->tx_ctrl_last->next;
   1af6e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   1af72:	681a      	ldr	r2, [r3, #0]
   1af74:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1af76:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1af78:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1af7c:	6803      	ldr	r3, [r0, #0]
   1af7e:	2b00      	cmp	r3, #0
   1af80:	f47f ab55 	bne.w	1a62e <ull_conn_rx+0x9a>
   1af84:	f7ff bbbf 	b.w	1a706 <ull_conn_rx+0x172>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1af88:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1af8c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1af90:	4293      	cmp	r3, r2
   1af92:	f43f ab4c 	beq.w	1a62e <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   1af96:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1af98:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   1af9a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn->procedure_expire = 0U;
   1af9e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1afa2:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1afa4:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1afa8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1afaa:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1afac:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1afae:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1afb2:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1afb4:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   1afb8:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1afba:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1afbc:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   1afbe:	4618      	mov	r0, r3
   1afc0:	f7ff bb38 	b.w	1a634 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1afc4:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   1afc8:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   1afcc:	428b      	cmp	r3, r1
   1afce:	f43f ab2e 	beq.w	1a62e <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1afd2:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1afd6:	2a23      	cmp	r2, #35	; 0x23
   1afd8:	d012      	beq.n	1b000 <ull_conn_rx+0xa6c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1afda:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   1afde:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1afe2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   1afe6:	f36f 0100 	bfc	r1, #0, #1
   1afea:	f884 1197 	strb.w	r1, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   1afee:	2100      	movs	r1, #0
   1aff0:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1aff4:	f3c3 0102 	ubfx	r1, r3, #0, #3
   1aff8:	f361 1306 	bfi	r3, r1, #4, #3
   1affc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   1b000:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   1b004:	0759      	lsls	r1, r3, #29
   1b006:	f57f ab12 	bpl.w	1a62e <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1b00a:	231c      	movs	r3, #28
   1b00c:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1b00e:	772a      	strb	r2, [r5, #28]
   1b010:	e4c4      	b.n	1a99c <ull_conn_rx+0x408>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1b012:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1b016:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   1b01a:	4293      	cmp	r3, r2
   1b01c:	f43f ab07 	beq.w	1a62e <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   1b020:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b024:	2b00      	cmp	r3, #0
   1b026:	db04      	blt.n	1b032 <ull_conn_rx+0xa9e>
   1b028:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1b02c:	2b1a      	cmp	r3, #26
   1b02e:	f000 8510 	beq.w	1ba52 <ull_conn_rx+0x14be>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1b032:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1b036:	f003 010f 	and.w	r1, r3, #15
   1b03a:	2904      	cmp	r1, #4
   1b03c:	d106      	bne.n	1b04c <ull_conn_rx+0xab8>
	conn_upd_curr = NULL;
   1b03e:	4954      	ldr	r1, [pc, #336]	; (1b190 <ull_conn_rx+0xbfc>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1b040:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   1b044:	2200      	movs	r2, #0
   1b046:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   1b048:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	if (!conn->llcp_conn_param.cmd) {
   1b04c:	06da      	lsls	r2, r3, #27
   1b04e:	f57f aaee 	bpl.w	1a62e <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1b052:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1b054:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1b058:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1b05a:	f040 83ac 	bne.w	1b7b6 <ull_conn_rx+0x1222>
	cu->status = rej_ext_ind->error_code;
   1b05e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1b062:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   1b064:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   1b066:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	cu->latency = lll->latency;
   1b06a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1b06c:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   1b06e:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   1b070:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   1b074:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   1b078:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   1b07a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b07e:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   1b082:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   1b084:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1b086:	f7ff bad5 	b.w	1a634 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   1b08a:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
   1b08e:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   1b092:	428b      	cmp	r3, r1
   1b094:	f43f aacb 	beq.w	1a62e <ull_conn_rx+0x9a>
   1b098:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   1b09c:	2b03      	cmp	r3, #3
   1b09e:	f47f aac6 	bne.w	1a62e <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   1b0a2:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   1b0a6:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   1b0aa:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1b0ac:	f022 0203 	bic.w	r2, r2, #3
   1b0b0:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   1b0b4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   1b0b8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1b0bc:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1b0c0:	210d      	movs	r1, #13
   1b0c2:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   1b0c4:	4618      	mov	r0, r3
   1b0c6:	f7ff bab5 	b.w	1a634 <ull_conn_rx+0xa0>
			tx->next = conn->tx_head;
   1b0ca:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1b0cc:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1b0d0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1b0d4:	2a00      	cmp	r2, #0
   1b0d6:	f47f aaaa 	bne.w	1a62e <ull_conn_rx+0x9a>
   1b0da:	f7ff bb14 	b.w	1a706 <ull_conn_rx+0x172>
		*err = -ENOBUFS;
   1b0de:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b0e2:	f7ff baa7 	b.w	1a634 <ull_conn_rx+0xa0>
			conn->tx_data = conn->tx_data->next;
   1b0e6:	6813      	ldr	r3, [r2, #0]
   1b0e8:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1b0ec:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   1b0f0:	2b00      	cmp	r3, #0
   1b0f2:	f47f aafe 	bne.w	1a6f2 <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
   1b0f6:	6813      	ldr	r3, [r2, #0]
   1b0f8:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1b0fa:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1b0fc:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   1b0fe:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
   1b102:	2a00      	cmp	r2, #0
   1b104:	f47f aa93 	bne.w	1a62e <ull_conn_rx+0x9a>
   1b108:	f7ff bafd 	b.w	1a706 <ull_conn_rx+0x172>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1b10c:	7f6b      	ldrb	r3, [r5, #29]
   1b10e:	2b01      	cmp	r3, #1
   1b110:	f47f aac0 	bne.w	1a694 <ull_conn_rx+0x100>
		conn->lll.enc_tx = 0;
   1b114:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b118:	f36f 1304 	bfc	r3, #4, #1
   1b11c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		goto pause_enc_rsp_send_exit;
   1b120:	f7ff ba85 	b.w	1a62e <ull_conn_rx+0x9a>
		if (!conn->lll.role) {
   1b124:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   1b128:	f894 615c 	ldrb.w	r6, [r4, #348]	; 0x15c
					conn->llcp_conn_param.ack) &&
   1b12c:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
		if (!conn->lll.role) {
   1b130:	2f00      	cmp	r7, #0
   1b132:	f2c0 80b2 	blt.w	1b29a <ull_conn_rx+0xd06>
			if ((conn->llcp_conn_param.req !=
   1b136:	42b1      	cmp	r1, r6
   1b138:	d00a      	beq.n	1b150 <ull_conn_rx+0xbbc>
			    ((conn->llcp_conn_param.state ==
   1b13a:	f894 615e 	ldrb.w	r6, [r4, #350]	; 0x15e
					conn->llcp_conn_param.ack) &&
   1b13e:	f016 0f0b 	tst.w	r6, #11
   1b142:	f000 824b 	beq.w	1b5dc <ull_conn_rx+0x1048>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   1b146:	f006 060f 	and.w	r6, r6, #15
   1b14a:	2e06      	cmp	r6, #6
   1b14c:	f000 8246 	beq.w	1b5dc <ull_conn_rx+0x1048>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1b150:	f894 60bb 	ldrb.w	r6, [r4, #187]	; 0xbb
   1b154:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
   1b158:	1bf6      	subs	r6, r6, r7
   1b15a:	f006 0603 	and.w	r6, r6, #3
   1b15e:	2e02      	cmp	r6, #2
   1b160:	f000 8320 	beq.w	1b7a4 <ull_conn_rx+0x1210>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1b164:	f894 7194 	ldrb.w	r7, [r4, #404]	; 0x194
   1b168:	f894 6195 	ldrb.w	r6, [r4, #405]	; 0x195
   1b16c:	42b7      	cmp	r7, r6
   1b16e:	f000 835b 	beq.w	1b828 <ull_conn_rx+0x1294>
				nack = reject_ext_ind_send(conn, *rx,
   1b172:	232a      	movs	r3, #42	; 0x2a
   1b174:	e55f      	b.n	1ac36 <ull_conn_rx+0x6a2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1b176:	7913      	ldrb	r3, [r2, #4]
   1b178:	f003 0303 	and.w	r3, r3, #3
   1b17c:	2b03      	cmp	r3, #3
   1b17e:	f000 82bb 	beq.w	1b6f8 <ull_conn_rx+0x1164>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1b182:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
   1b186:	f7ff bab6 	b.w	1a6f6 <ull_conn_rx+0x162>
   1b18a:	bf00      	nop
   1b18c:	200037e0 	.word	0x200037e0
   1b190:	2000374c 	.word	0x2000374c
	if (conn->common.txn_lock) {
   1b194:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1b198:	079b      	lsls	r3, r3, #30
   1b19a:	f53f aa48 	bmi.w	1a62e <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b19e:	48d1      	ldr	r0, [pc, #836]	; (1b4e4 <ull_conn_rx+0xf50>)
   1b1a0:	f7f9 fdee 	bl	14d80 <mem_acquire>
	if (!tx) {
   1b1a4:	4603      	mov	r3, r0
   1b1a6:	2800      	cmp	r0, #0
   1b1a8:	d099      	beq.n	1b0de <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
   1b1aa:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1b1ae:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	eff_rx_octets = conn->lll.max_rx_octets;
   1b1b2:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   1b1b6:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   1b1ba:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   1b1be:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	conn->common.txn_lock = 1U;
   1b1c2:	f042 0202 	orr.w	r2, r2, #2
   1b1c6:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1b1ca:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   1b1ce:	428a      	cmp	r2, r1
   1b1d0:	f040 8431 	bne.w	1ba36 <ull_conn_rx+0x14a2>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   1b1d4:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1b1d6:	291a      	cmp	r1, #26
   1b1d8:	f240 8269 	bls.w	1b6ae <ull_conn_rx+0x111a>
			eff_tx_octets = MIN(max_rx_octets,
   1b1dc:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   1b1e0:	4281      	cmp	r1, r0
   1b1e2:	bf28      	it	cs
   1b1e4:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1b1e6:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   1b1e8:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   1b1ec:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   1b1ee:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   1b1f0:	bf34      	ite	cc
   1b1f2:	46c6      	movcc	lr, r8
   1b1f4:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1b1f8:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   1b1fc:	bf34      	ite	cc
   1b1fe:	4658      	movcc	r0, fp
   1b200:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1b204:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   1b208:	bf34      	ite	cc
   1b20a:	46d4      	movcc	ip, sl
   1b20c:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   1b210:	45c6      	cmp	lr, r8
   1b212:	f000 8287 	beq.w	1b724 <ull_conn_rx+0x1190>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1b216:	3a01      	subs	r2, #1
   1b218:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.rx_octets = eff_rx_octets;
   1b21c:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
			conn->llcp_length.tx_octets = eff_tx_octets;
   1b220:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
			conn->llcp_length.rx_time = eff_rx_time;
   1b224:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_length.tx_time = eff_tx_time;
   1b228:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			if (tx) {
   1b22c:	2b00      	cmp	r3, #0
   1b22e:	f000 82ae 	beq.w	1b78e <ull_conn_rx+0x11fa>
				conn->llcp_length.state =
   1b232:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1b236:	2505      	movs	r5, #5
   1b238:	f365 0202 	bfi	r2, r5, #0, #3
   1b23c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			link->mem = conn->llcp_rx;
   1b240:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   1b244:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   1b246:	6832      	ldr	r2, [r6, #0]
   1b248:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   1b24a:	6832      	ldr	r2, [r6, #0]
   1b24c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
			*rx = NULL;
   1b250:	2200      	movs	r2, #0
   1b252:	6032      	str	r2, [r6, #0]
	if (tx) {
   1b254:	2b00      	cmp	r3, #0
   1b256:	f43f a9ec 	beq.w	1a632 <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b25a:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1b25c:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b25e:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   1b262:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b264:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1b266:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1b268:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   1b26a:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   1b26c:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1b270:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   1b274:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1b276:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1b278:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1b27a:	f7fe fb43 	bl	19904 <ctrl_tx_sec_enqueue>
	return 0;
   1b27e:	2000      	movs	r0, #0
}
   1b280:	f7ff b9d8 	b.w	1a634 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   1b284:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   1b288:	2a00      	cmp	r2, #0
   1b28a:	f47f ae70 	bne.w	1af6e <ull_conn_rx+0x9da>
			tx->next = conn->tx_head;
   1b28e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1b290:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1b294:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   1b298:	e670      	b.n	1af7c <ull_conn_rx+0x9e8>
		} else if ((conn->llcp_conn_param.req ==
   1b29a:	42b1      	cmp	r1, r6
   1b29c:	d005      	beq.n	1b2aa <ull_conn_rx+0xd16>
			    conn->llcp_conn_param.ack) ||
   1b29e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1b2a2:	f012 0f0b 	tst.w	r2, #11
   1b2a6:	f47f a9c2 	bne.w	1a62e <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1b2aa:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1b2ae:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1b2b2:	2a05      	cmp	r2, #5
   1b2b4:	f240 8091 	bls.w	1b3da <ull_conn_rx+0xe46>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1b2b8:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1b2bc:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1b2c0:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   1b2c4:	f200 8089 	bhi.w	1b3da <ull_conn_rx+0xe46>
			    (interval_max > 3200) ||
   1b2c8:	42b2      	cmp	r2, r6
   1b2ca:	f200 8086 	bhi.w	1b3da <ull_conn_rx+0xe46>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1b2ce:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1b2d2:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   1b2d6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1b2da:	d27e      	bcs.n	1b3da <ull_conn_rx+0xe46>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1b2dc:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1b2e0:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   1b2e4:	f1a2 070a 	sub.w	r7, r2, #10
   1b2e8:	f640 4b76 	movw	fp, #3190	; 0xc76
   1b2ec:	b2bf      	uxth	r7, r7
   1b2ee:	455f      	cmp	r7, fp
   1b2f0:	d873      	bhi.n	1b3da <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
   1b2f2:	f10c 0701 	add.w	r7, ip, #1
   1b2f6:	b2bf      	uxth	r7, r7
   1b2f8:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   1b2fc:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   1b300:	d26b      	bcs.n	1b3da <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
   1b302:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1b306:	455e      	cmp	r6, fp
   1b308:	d367      	bcc.n	1b3da <ull_conn_rx+0xe46>
			conn->llcp_conn_param.interval_min = interval_min;
   1b30a:	f8a4 a160 	strh.w	sl, [r4, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
   1b30e:	f8a4 9162 	strh.w	r9, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   1b312:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   1b316:	f8a4 e166 	strh.w	lr, [r4, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
   1b31a:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1b31e:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1b322:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1b326:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1b32a:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   1b32e:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1b332:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1b336:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1b33a:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   1b33e:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1b342:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1b346:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1b34a:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   1b34e:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1b352:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1b356:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1b35a:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   1b35e:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1b362:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1b366:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1b36a:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   1b36e:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1b372:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1b376:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1b37a:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   1b37e:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1b382:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   1b386:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   1b38a:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
			     lll->interval) ||
   1b38e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   1b390:	42be      	cmp	r6, r7
   1b392:	f000 833a 	beq.w	1ba0a <ull_conn_rx+0x1476>
				conn->llcp_conn_param.state =
   1b396:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1b39a:	2503      	movs	r5, #3
   1b39c:	f365 0203 	bfi	r2, r5, #0, #4
   1b3a0:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.ack--;
   1b3a4:	3901      	subs	r1, #1
   1b3a6:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	if (!conn_upd_curr) {
   1b3aa:	2b00      	cmp	r3, #0
   1b3ac:	f47f a941 	bne.w	1a632 <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
   1b3b0:	6004      	str	r4, [r0, #0]
	int nack = 0;
   1b3b2:	4618      	mov	r0, r3
   1b3b4:	f7ff b93e 	b.w	1a634 <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1b3b8:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1b3bc:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   1b3c0:	4293      	cmp	r3, r2
   1b3c2:	f43f ade1 	beq.w	1af88 <ull_conn_rx+0x9f4>
		rej_ext_ind->error_code = rej_ind->error_code;
   1b3c6:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b3ca:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   1b3ce:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1b3d2:	2900      	cmp	r1, #0
   1b3d4:	f6bf ae2a 	bge.w	1b02c <ull_conn_rx+0xa98>
   1b3d8:	e62b      	b.n	1b032 <ull_conn_rx+0xa9e>
				nack = reject_ext_ind_send(conn, *rx,
   1b3da:	231e      	movs	r3, #30
   1b3dc:	e42b      	b.n	1ac36 <ull_conn_rx+0x6a2>
	if (conn->common.txn_lock) {
   1b3de:	f894 70ba 	ldrb.w	r7, [r4, #186]	; 0xba
   1b3e2:	f017 0702 	ands.w	r7, r7, #2
   1b3e6:	f47f a922 	bne.w	1a62e <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b3ea:	483e      	ldr	r0, [pc, #248]	; (1b4e4 <ull_conn_rx+0xf50>)
   1b3ec:	f7f9 fcc8 	bl	14d80 <mem_acquire>
	if (!tx) {
   1b3f0:	4602      	mov	r2, r0
   1b3f2:	2800      	cmp	r0, #0
   1b3f4:	f43f ae73 	beq.w	1b0de <ull_conn_rx+0xb4a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1b3f8:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->common.txn_lock = 1U;
   1b3fc:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	if (conn->llcp_phy.ack ==
   1b400:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1b404:	2002      	movs	r0, #2
   1b406:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   1b40a:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1b40e:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   1b412:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
	conn->common.txn_lock = 1U;
   1b416:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
			conn->phy_pref_tx;
   1b41a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	if (conn->llcp_phy.ack ==
   1b41e:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   1b420:	f3c3 0602 	ubfx	r6, r3, #0, #3
   1b424:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   1b428:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   1b42c:	d114      	bne.n	1b458 <ull_conn_rx+0xec4>
		conn->llcp_phy.ack--;
   1b42e:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   1b430:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		conn->llcp_phy.ack--;
   1b434:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.tx =
   1b438:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
		conn->llcp_phy.cmd = 0U;
   1b43c:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   1b440:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   1b444:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   1b448:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		conn->procedure_expire =
   1b44c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
		conn->llcp_phy.rx =
   1b450:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
		conn->procedure_expire =
   1b454:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_phy.rx &= p->tx_phys;
   1b458:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->llcp_phy.tx &= p->rx_phys;
   1b45c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   1b460:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   1b464:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   1b468:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   1b46c:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   1b470:	009b      	lsls	r3, r3, #2
   1b472:	f001 0103 	and.w	r1, r1, #3
   1b476:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1b47a:	430b      	orrs	r3, r1
   1b47c:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1b480:	2303      	movs	r3, #3
   1b482:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   1b484:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b486:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   1b488:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1b48c:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1b48e:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b490:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1b494:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   1b496:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b49a:	7110      	strb	r0, [r2, #4]
	if (
   1b49c:	2b00      	cmp	r3, #0
   1b49e:	f000 80aa 	beq.w	1b5f6 <ull_conn_rx+0x1062>
	    !conn->llcp_enc.pause_tx &&
   1b4a2:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
   1b4a6:	0787      	lsls	r7, r0, #30
   1b4a8:	f100 80a5 	bmi.w	1b5f6 <ull_conn_rx+0x1062>
	    !conn->llcp_phy.pause_tx &&
   1b4ac:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
   1b4b0:	07c6      	lsls	r6, r0, #31
   1b4b2:	f100 80a0 	bmi.w	1b5f6 <ull_conn_rx+0x1062>
		if (conn->tx_head == conn->tx_data) {
   1b4b6:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   1b4ba:	4283      	cmp	r3, r0
   1b4bc:	f000 824c 	beq.w	1b958 <ull_conn_rx+0x13c4>
		} else if (!conn->tx_ctrl) {
   1b4c0:	2900      	cmp	r1, #0
   1b4c2:	f000 8291 	beq.w	1b9e8 <ull_conn_rx+0x1454>
	tx->next = conn->tx_ctrl_last->next;
   1b4c6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   1b4ca:	6819      	ldr	r1, [r3, #0]
   1b4cc:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   1b4ce:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   1b4d0:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1b4d4:	6813      	ldr	r3, [r2, #0]
   1b4d6:	2b00      	cmp	r3, #0
   1b4d8:	f47f a8a9 	bne.w	1a62e <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   1b4dc:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b4e0:	f7ff b8a5 	b.w	1a62e <ull_conn_rx+0x9a>
   1b4e4:	200037e0 	.word	0x200037e0
			conn->llcp_conn_param.disabled = 1U;
   1b4e8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1b4ec:	f043 0320 	orr.w	r3, r3, #32
   1b4f0:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
			if (!conn->lll.role) {
   1b4f4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b4f8:	2b00      	cmp	r3, #0
   1b4fa:	f2c0 8139 	blt.w	1b770 <ull_conn_rx+0x11dc>
				LL_ASSERT(conn->llcp_cu.req ==
   1b4fe:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1b502:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1b506:	429a      	cmp	r2, r3
   1b508:	d00e      	beq.n	1b528 <ull_conn_rx+0xf94>
   1b50a:	4ac1      	ldr	r2, [pc, #772]	; (1b810 <ull_conn_rx+0x127c>)
   1b50c:	49c1      	ldr	r1, [pc, #772]	; (1b814 <ull_conn_rx+0x1280>)
   1b50e:	48c2      	ldr	r0, [pc, #776]	; (1b818 <ull_conn_rx+0x1284>)
   1b510:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   1b514:	f00b fa22 	bl	2695c <printk>
   1b518:	4040      	eors	r0, r0
   1b51a:	f380 8811 	msr	BASEPRI, r0
   1b51e:	f04f 0003 	mov.w	r0, #3
   1b522:	df02      	svc	2
   1b524:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_conn_param.state =
   1b528:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1b52c:	2106      	movs	r1, #6
   1b52e:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   1b532:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   1b534:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   1b536:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_cu.win_size = 1U;
   1b53a:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b53e:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   1b540:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1b544:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1b548:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   1b54c:	00db      	lsls	r3, r3, #3
   1b54e:	f022 020f 	bic.w	r2, r2, #15
   1b552:	430b      	orrs	r3, r1
   1b554:	4313      	orrs	r3, r2
   1b556:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_cu.latency =
   1b55a:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
				conn->llcp_cu.interval =
   1b55e:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
				conn->llcp_cu.latency =
   1b562:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
				conn->llcp_cu.win_offset_us = 0U;
   1b566:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   1b568:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
				conn->llcp_cu.interval =
   1b56c:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
				conn->llcp_cu.timeout =
   1b570:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				conn->llcp_cu.win_offset_us = 0U;
   1b574:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b578:	7129      	strb	r1, [r5, #4]
				break;
   1b57a:	f7ff b85b 	b.w	1a634 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b57e:	48a7      	ldr	r0, [pc, #668]	; (1b81c <ull_conn_rx+0x1288>)
   1b580:	f7f9 fbfe 	bl	14d80 <mem_acquire>
		if (!tx) {
   1b584:	4601      	mov	r1, r0
   1b586:	2800      	cmp	r0, #0
   1b588:	f43f ada9 	beq.w	1b0de <ull_conn_rx+0xb4a>
		conn->llcp_version.tx = 1U;
   1b58c:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   1b590:	f043 0301 	orr.w	r3, r3, #1
   1b594:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b598:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   1b59a:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1b59c:	220c      	movs	r2, #12
   1b59e:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1b5a0:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b5a2:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1b5a6:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b5aa:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1b5ac:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   1b5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1b5b2:	2205      	movs	r2, #5
		v->sub_version_number =
   1b5b4:	72c3      	strb	r3, [r0, #11]
   1b5b6:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1b5b8:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   1b5ba:	4620      	mov	r0, r4
   1b5bc:	f7fe f9a2 	bl	19904 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b5c0:	2301      	movs	r3, #1
   1b5c2:	712b      	strb	r3, [r5, #4]
   1b5c4:	f7ff ba09 	b.w	1a9da <ull_conn_rx+0x446>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b5c8:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   1b5ca:	2000      	movs	r0, #0
   1b5cc:	f7ff b832 	b.w	1a634 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   1b5d0:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   1b5d4:	2b03      	cmp	r3, #3
   1b5d6:	f47f ac40 	bne.w	1ae5a <ull_conn_rx+0x8c6>
   1b5da:	e437      	b.n	1ae4c <ull_conn_rx+0x8b8>
				nack = reject_ext_ind_send(conn, *rx,
   1b5dc:	2323      	movs	r3, #35	; 0x23
   1b5de:	f7ff bb2a 	b.w	1ac36 <ull_conn_rx+0x6a2>
			conn->llcp_length.disabled = 1U;
   1b5e2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   1b5e6:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.disabled = 1U;
   1b5ea:	f043 0308 	orr.w	r3, r3, #8
   1b5ee:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   1b5f2:	f7ff bbca 	b.w	1ad8a <ull_conn_rx+0x7f6>
		if (!conn->tx_ctrl) {
   1b5f6:	2900      	cmp	r1, #0
   1b5f8:	f47f af65 	bne.w	1b4c6 <ull_conn_rx+0xf32>
			tx->next = conn->tx_head;
   1b5fc:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1b5fe:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1b602:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
   1b606:	e765      	b.n	1b4d4 <ull_conn_rx+0xf40>
				conn->llcp_phy.state =
   1b608:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   1b60c:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   1b60e:	f043 0303 	orr.w	r3, r3, #3
   1b612:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   1b616:	d111      	bne.n	1b63c <ull_conn_rx+0x10a8>
					conn->llcp_phy.tx =
   1b618:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
						conn->phy_pref_rx;
   1b61c:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
					conn->llcp_phy.ack--;
   1b620:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   1b622:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   1b626:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
					conn->llcp_phy.tx =
   1b62a:	f240 43fc 	movw	r3, #1276	; 0x4fc
   1b62e:	f022 0204 	bic.w	r2, r2, #4
   1b632:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   1b636:	4313      	orrs	r3, r2
   1b638:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.rx &= p->tx_phys;
   1b63c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   1b640:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   1b644:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   1b648:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   1b64c:	f003 0203 	and.w	r2, r3, #3
   1b650:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1b654:	4003      	ands	r3, r0
   1b656:	009b      	lsls	r3, r3, #2
   1b658:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1b65c:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1b65e:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   1b662:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1b666:	d002      	beq.n	1b66e <ull_conn_rx+0x10da>
   1b668:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1b66c:	d105      	bne.n	1b67a <ull_conn_rx+0x10e6>
					conn->llcp_phy.tx = 0;
   1b66e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   1b672:	f003 0303 	and.w	r3, r3, #3
   1b676:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.pause_tx = 1U;
   1b67a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b67e:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   1b680:	4313      	orrs	r3, r2
   1b682:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
	int nack = 0;
   1b686:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b688:	712a      	strb	r2, [r5, #4]
   1b68a:	f7fe bfd3 	b.w	1a634 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   1b68e:	231e      	movs	r3, #30
   1b690:	2210      	movs	r2, #16
   1b692:	f7ff bad1 	b.w	1ac38 <ull_conn_rx+0x6a4>
				nack = reject_ext_ind_send(conn, *rx,
   1b696:	2323      	movs	r3, #35	; 0x23
   1b698:	2216      	movs	r2, #22
   1b69a:	f7ff bacd 	b.w	1ac38 <ull_conn_rx+0x6a4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b69e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   1b6a2:	f36f 0301 	bfc	r3, #0, #2
   1b6a6:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   1b6aa:	f7ff bb99 	b.w	1ade0 <ull_conn_rx+0x84c>
   1b6ae:	4649      	mov	r1, r9
   1b6b0:	e599      	b.n	1b1e6 <ull_conn_rx+0xc52>
			lll->phy_tx_time = lll->phy_tx;
   1b6b2:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
			conn->llcp_phy.pause_tx = 0U;
   1b6b6:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1b6ba:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
   1b6be:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   1b6c2:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   1b6c4:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1b6c8:	f361 1206 	bfi	r2, r1, #4, #3
   1b6cc:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			if (conn->llcp_phy.cmd) {
   1b6d0:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   1b6d4:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
   1b6d8:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1b6dc:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   1b6de:	d078      	beq.n	1b7d2 <ull_conn_rx+0x123e>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1b6e0:	221c      	movs	r2, #28
   1b6e2:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   1b6e4:	2300      	movs	r3, #0
   1b6e6:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   1b6e8:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   1b6ea:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   1b6ee:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1b6f2:	77ab      	strb	r3, [r5, #30]
   1b6f4:	f7ff bb49 	b.w	1ad8a <ull_conn_rx+0x7f6>
	    ((pdu_data_tx->llctrl.opcode !=
   1b6f8:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1b6fa:	2b03      	cmp	r3, #3
   1b6fc:	f43f acfb 	beq.w	1b0f6 <ull_conn_rx+0xb62>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1b700:	2b0a      	cmp	r3, #10
   1b702:	f47f ad3e 	bne.w	1b182 <ull_conn_rx+0xbee>
   1b706:	e4f6      	b.n	1b0f6 <ull_conn_rx+0xb62>
	conn->llcp_enc.pause_rx = 0U;
   1b708:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   1b70c:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   1b710:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1b712:	f021 0103 	bic.w	r1, r1, #3
   1b716:	f884 113e 	strb.w	r1, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   1b71a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   1b71e:	4618      	mov	r0, r3
   1b720:	f7fe bf88 	b.w	1a634 <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   1b724:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1b726:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   1b728:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   1b72c:	f8a4 70ac 	strh.w	r7, [r4, #172]	; 0xac
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1b730:	f000 8108 	beq.w	1b944 <ull_conn_rx+0x13b0>
			conn->lll.max_rx_time = eff_rx_time;
   1b734:	f8a4 c044 	strh.w	ip, [r4, #68]	; 0x44
			if (tx) {
   1b738:	2b00      	cmp	r3, #0
   1b73a:	f000 80ff 	beq.w	1b93c <ull_conn_rx+0x13a8>
					(conn->llcp_length.req - 1);
   1b73e:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   1b740:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
				conn->llcp_length.state =
   1b744:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->llcp_length.rx_octets = eff_rx_octets;
   1b748:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
				conn->llcp_length.state =
   1b74c:	2603      	movs	r6, #3
   1b74e:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   1b752:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
				conn->llcp_length.rx_time = eff_rx_time;
   1b756:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_length.tx_time = eff_tx_time;
   1b75a:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_length.state =
   1b75e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1b762:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1b766:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1b768:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1b76c:	84e8      	strh	r0, [r5, #38]	; 0x26
   1b76e:	e571      	b.n	1b254 <ull_conn_rx+0xcc0>
	conn_upd_curr = NULL;
   1b770:	4b2b      	ldr	r3, [pc, #172]	; (1b820 <ull_conn_rx+0x128c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1b772:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   1b776:	2200      	movs	r2, #0
   1b778:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   1b77a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1b77e:	f013 0310 	ands.w	r3, r3, #16
   1b782:	d12a      	bne.n	1b7da <ull_conn_rx+0x1246>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b784:	2201      	movs	r2, #1
   1b786:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   1b788:	4618      	mov	r0, r3
				break;
   1b78a:	f7fe bf53 	b.w	1a634 <ull_conn_rx+0xa0>
				conn->llcp_length.state =
   1b78e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->lll.max_tx_octets = eff_tx_octets;
   1b792:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->llcp_length.state =
   1b794:	2504      	movs	r5, #4
   1b796:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   1b79a:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
				conn->llcp_length.state =
   1b79e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   1b7a2:	e54d      	b.n	1b240 <ull_conn_rx+0xcac>
				      0x03) == 0x02) &&
   1b7a4:	f894 60bd 	ldrb.w	r6, [r4, #189]	; 0xbd
   1b7a8:	2e03      	cmp	r6, #3
   1b7aa:	f47f ace2 	bne.w	1b172 <ull_conn_rx+0xbde>
   1b7ae:	e4d9      	b.n	1b164 <ull_conn_rx+0xbd0>
	struct node_tx *tx = NULL;
   1b7b0:	2300      	movs	r3, #0
   1b7b2:	f7ff b82d 	b.w	1a810 <ull_conn_rx+0x27c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1b7b6:	4a16      	ldr	r2, [pc, #88]	; (1b810 <ull_conn_rx+0x127c>)
   1b7b8:	491a      	ldr	r1, [pc, #104]	; (1b824 <ull_conn_rx+0x1290>)
   1b7ba:	4817      	ldr	r0, [pc, #92]	; (1b818 <ull_conn_rx+0x1284>)
   1b7bc:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   1b7c0:	f00b f8cc 	bl	2695c <printk>
   1b7c4:	4040      	eors	r0, r0
   1b7c6:	f380 8811 	msr	BASEPRI, r0
   1b7ca:	f04f 0003 	mov.w	r0, #3
   1b7ce:	df02      	svc	2
   1b7d0:	e445      	b.n	1b05e <ull_conn_rx+0xaca>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b7d2:	2201      	movs	r2, #1
   1b7d4:	711a      	strb	r2, [r3, #4]
   1b7d6:	f7ff bad8 	b.w	1ad8a <ull_conn_rx+0x7f6>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1b7da:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1b7dc:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1b7e0:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1b7e2:	f040 80d4 	bne.w	1b98e <ull_conn_rx+0x13fa>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1b7e6:	231a      	movs	r3, #26
   1b7e8:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   1b7ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   1b7ec:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			cu->latency = lll->latency;
   1b7f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   1b7f2:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1b7f4:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   1b7f8:	227d      	movs	r2, #125	; 0x7d
   1b7fa:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1b7fe:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   1b800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b804:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1b808:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1b80a:	f7ff babe 	b.w	1ad8a <ull_conn_rx+0x7f6>
   1b80e:	bf00      	nop
   1b810:	0002fc68 	.word	0x0002fc68
   1b814:	0002fd5c 	.word	0x0002fd5c
   1b818:	0002f6fc 	.word	0x0002f6fc
   1b81c:	200037e0 	.word	0x200037e0
   1b820:	2000374c 	.word	0x2000374c
   1b824:	0002f964 	.word	0x0002f964
				uint16_t interval_min =
   1b828:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   1b82c:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1b830:	2e05      	cmp	r6, #5
   1b832:	f67f add2 	bls.w	1b3da <ull_conn_rx+0xe46>
				uint16_t interval_max =
   1b836:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   1b83a:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1b83e:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   1b842:	f63f adca 	bhi.w	1b3da <ull_conn_rx+0xe46>
				    (interval_max > 3200) ||
   1b846:	4576      	cmp	r6, lr
   1b848:	f63f adc7 	bhi.w	1b3da <ull_conn_rx+0xe46>
				uint16_t latency =
   1b84c:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   1b84e:	f8ad 6006 	strh.w	r6, [sp, #6]
   1b852:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   1b854:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1b858:	f4bf adbf 	bcs.w	1b3da <ull_conn_rx+0xe46>
				uint16_t timeout =
   1b85c:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   1b85e:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   1b862:	f1ac 0a0a 	sub.w	sl, ip, #10
   1b866:	f640 4b76 	movw	fp, #3190	; 0xc76
   1b86a:	fa1f fa8a 	uxth.w	sl, sl
   1b86e:	45da      	cmp	sl, fp
   1b870:	f63f adb3 	bhi.w	1b3da <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
   1b874:	f106 0a01 	add.w	sl, r6, #1
   1b878:	fa1f fa8a 	uxth.w	sl, sl
   1b87c:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   1b880:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   1b884:	f4bf ada9 	bcs.w	1b3da <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
   1b888:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1b88c:	45de      	cmp	lr, fp
   1b88e:	f4ff ada4 	bcc.w	1b3da <ull_conn_rx+0xe46>
				conn->llcp_conn_param.interval_max =
   1b892:	f8a4 8162 	strh.w	r8, [r4, #354]	; 0x162
				conn->llcp_conn_param.latency =	latency;
   1b896:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   1b89a:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
				conn->llcp_conn_param.latency =	latency;
   1b89e:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
				conn->llcp_conn_param.timeout =	timeout;
   1b8a2:	f8a4 7166 	strh.w	r7, [r4, #358]	; 0x166
				conn->llcp_conn_param.preferred_periodicity =
   1b8a6:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1b8aa:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   1b8ae:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1b8b2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1b8b6:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
					sys_le16_to_cpu(cpr->offset0);
   1b8ba:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   1b8be:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1b8c2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   1b8c6:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
					sys_le16_to_cpu(cpr->offset1);
   1b8ca:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   1b8ce:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1b8d2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   1b8d6:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset2);
   1b8da:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   1b8de:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1b8e2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   1b8e6:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset3);
   1b8ea:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   1b8ee:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1b8f2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   1b8f6:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset4);
   1b8fa:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   1b8fe:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1b902:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   1b906:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset5);
   1b90a:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1b90e:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   1b912:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   1b916:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
				     lll->interval) ||
   1b91a:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1b91c:	45be      	cmp	lr, r7
   1b91e:	d044      	beq.n	1b9aa <ull_conn_rx+0x1416>
					if (conn->llcp_enc.pause_tx) {
   1b920:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   1b924:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
					if (conn->llcp_enc.pause_tx) {
   1b928:	f43f ad37 	beq.w	1b39a <ull_conn_rx+0xe06>
						conn->llcp_conn_param.state =
   1b92c:	2602      	movs	r6, #2
   1b92e:	f366 0203 	bfi	r2, r6, #0, #4
   1b932:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
						(*rx)->hdr.type =
   1b936:	2201      	movs	r2, #1
   1b938:	712a      	strb	r2, [r5, #4]
   1b93a:	e533      	b.n	1b3a4 <ull_conn_rx+0xe10>
				conn->lll.max_tx_octets = eff_tx_octets;
   1b93c:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
   1b93e:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
   1b942:	e70e      	b.n	1b762 <ull_conn_rx+0x11ce>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1b944:	4558      	cmp	r0, fp
   1b946:	f47f aef5 	bne.w	1b734 <ull_conn_rx+0x11a0>
			    eff_rx_time == conn->lll.max_rx_time &&
   1b94a:	45d4      	cmp	ip, sl
   1b94c:	f47f aef2 	bne.w	1b734 <ull_conn_rx+0x11a0>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b950:	6832      	ldr	r2, [r6, #0]
   1b952:	2501      	movs	r5, #1
   1b954:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   1b956:	e47d      	b.n	1b254 <ull_conn_rx+0xcc0>
			conn->tx_data = conn->tx_data->next;
   1b958:	6818      	ldr	r0, [r3, #0]
   1b95a:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1b95e:	2900      	cmp	r1, #0
   1b960:	f47f adb1 	bne.w	1b4c6 <ull_conn_rx+0xf32>
			tx->next = conn->tx_head->next;
   1b964:	6819      	ldr	r1, [r3, #0]
   1b966:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1b968:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1b96a:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
   1b96e:	e5b1      	b.n	1b4d4 <ull_conn_rx+0xf40>
			conn->tx_data = conn->tx_data->next;
   1b970:	681a      	ldr	r2, [r3, #0]
   1b972:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1b976:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   1b97a:	2a00      	cmp	r2, #0
   1b97c:	f47f aaf7 	bne.w	1af6e <ull_conn_rx+0x9da>
			tx->next = conn->tx_head->next;
   1b980:	681a      	ldr	r2, [r3, #0]
   1b982:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1b984:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   1b986:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   1b98a:	f7ff baf7 	b.w	1af7c <ull_conn_rx+0x9e8>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1b98e:	4a53      	ldr	r2, [pc, #332]	; (1badc <ull_conn_rx+0x1548>)
   1b990:	4953      	ldr	r1, [pc, #332]	; (1bae0 <ull_conn_rx+0x154c>)
   1b992:	4854      	ldr	r0, [pc, #336]	; (1bae4 <ull_conn_rx+0x1550>)
   1b994:	f641 4322 	movw	r3, #7202	; 0x1c22
   1b998:	f00a ffe0 	bl	2695c <printk>
   1b99c:	4040      	eors	r0, r0
   1b99e:	f380 8811 	msr	BASEPRI, r0
   1b9a2:	f04f 0003 	mov.w	r0, #3
   1b9a6:	df02      	svc	2
   1b9a8:	e71d      	b.n	1b7e6 <ull_conn_rx+0x1252>
				     lll->interval) ||
   1b9aa:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   1b9ae:	45b6      	cmp	lr, r6
   1b9b0:	d1b6      	bne.n	1b920 <ull_conn_rx+0x138c>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1b9b2:	f240 46e2 	movw	r6, #1250	; 0x4e2
   1b9b6:	fb06 f707 	mul.w	r7, r6, r7
   1b9ba:	f242 7610 	movw	r6, #10000	; 0x2710
   1b9be:	fb06 760c 	mla	r6, r6, ip, r7
   1b9c2:	3e01      	subs	r6, #1
   1b9c4:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   1b9c8:	f8b4 70a6 	ldrh.w	r7, [r4, #166]	; 0xa6
   1b9cc:	b2b6      	uxth	r6, r6
   1b9ce:	42b7      	cmp	r7, r6
   1b9d0:	d1a6      	bne.n	1b920 <ull_conn_rx+0x138c>
				conn->llcp_conn_param.state =
   1b9d2:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
   1b9d6:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1b9da:	f042 0201 	orr.w	r2, r2, #1
   1b9de:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b9e2:	2201      	movs	r2, #1
   1b9e4:	712a      	strb	r2, [r5, #4]
   1b9e6:	e4dd      	b.n	1b3a4 <ull_conn_rx+0xe10>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1b9e8:	7919      	ldrb	r1, [r3, #4]
   1b9ea:	f001 0103 	and.w	r1, r1, #3
   1b9ee:	2903      	cmp	r1, #3
   1b9f0:	d029      	beq.n	1ba46 <ull_conn_rx+0x14b2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1b9f2:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   1b9f6:	e566      	b.n	1b4c6 <ull_conn_rx+0xf32>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1b9f8:	791a      	ldrb	r2, [r3, #4]
   1b9fa:	f002 0203 	and.w	r2, r2, #3
   1b9fe:	2a03      	cmp	r2, #3
   1ba00:	d065      	beq.n	1bace <ull_conn_rx+0x153a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1ba02:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   1ba06:	f7ff bab2 	b.w	1af6e <ull_conn_rx+0x9da>
			     lll->interval) ||
   1ba0a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   1ba0c:	4567      	cmp	r7, ip
   1ba0e:	f47f acc2 	bne.w	1b396 <ull_conn_rx+0xe02>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1ba12:	f240 47e2 	movw	r7, #1250	; 0x4e2
   1ba16:	fb07 f606 	mul.w	r6, r7, r6
   1ba1a:	f242 7710 	movw	r7, #10000	; 0x2710
   1ba1e:	fb07 6202 	mla	r2, r7, r2, r6
   1ba22:	3a01      	subs	r2, #1
   1ba24:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1ba28:	f8b4 60a6 	ldrh.w	r6, [r4, #166]	; 0xa6
   1ba2c:	b292      	uxth	r2, r2
   1ba2e:	4296      	cmp	r6, r2
   1ba30:	f47f acb1 	bne.w	1b396 <ull_conn_rx+0xe02>
   1ba34:	e7cd      	b.n	1b9d2 <ull_conn_rx+0x143e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1ba36:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1ba3a:	f011 0f06 	tst.w	r1, #6
   1ba3e:	f43f abc9 	beq.w	1b1d4 <ull_conn_rx+0xc40>
   1ba42:	f7fe bede 	b.w	1a802 <ull_conn_rx+0x26e>
	    ((pdu_data_tx->llctrl.opcode !=
   1ba46:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1ba48:	2903      	cmp	r1, #3
   1ba4a:	d08b      	beq.n	1b964 <ull_conn_rx+0x13d0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1ba4c:	290a      	cmp	r1, #10
   1ba4e:	d1d0      	bne.n	1b9f2 <ull_conn_rx+0x145e>
   1ba50:	e788      	b.n	1b964 <ull_conn_rx+0x13d0>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1ba52:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1ba56:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1ba5a:	429a      	cmp	r2, r3
   1ba5c:	d00e      	beq.n	1ba7c <ull_conn_rx+0x14e8>
   1ba5e:	4a1f      	ldr	r2, [pc, #124]	; (1badc <ull_conn_rx+0x1548>)
   1ba60:	4921      	ldr	r1, [pc, #132]	; (1bae8 <ull_conn_rx+0x1554>)
   1ba62:	4820      	ldr	r0, [pc, #128]	; (1bae4 <ull_conn_rx+0x1550>)
   1ba64:	f241 43af 	movw	r3, #5295	; 0x14af
   1ba68:	f00a ff78 	bl	2695c <printk>
   1ba6c:	4040      	eors	r0, r0
   1ba6e:	f380 8811 	msr	BASEPRI, r0
   1ba72:	f04f 0003 	mov.w	r0, #3
   1ba76:	df02      	svc	2
   1ba78:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1ba7c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1ba80:	2106      	movs	r1, #6
   1ba82:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   1ba86:	3b01      	subs	r3, #1
   1ba88:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1ba8c:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1ba90:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1ba94:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.win_size = 1U;
   1ba98:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1ba9a:	00db      	lsls	r3, r3, #3
   1ba9c:	430b      	orrs	r3, r1
   1ba9e:	f022 020f 	bic.w	r2, r2, #15
   1baa2:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   1baa4:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1baa8:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1baac:	f8b4 1162 	ldrh.w	r1, [r4, #354]	; 0x162
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1bab0:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   1bab4:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1bab6:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
		conn->llcp_cu.win_offset_us = 0U;
   1baba:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1babe:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1bac2:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1bac6:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
	if (err) {
   1baca:	f7fe bdb0 	b.w	1a62e <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   1bace:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1bad0:	2a03      	cmp	r2, #3
   1bad2:	f43f af55 	beq.w	1b980 <ull_conn_rx+0x13ec>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1bad6:	2a0a      	cmp	r2, #10
   1bad8:	d193      	bne.n	1ba02 <ull_conn_rx+0x146e>
   1bada:	e751      	b.n	1b980 <ull_conn_rx+0x13ec>
   1badc:	0002fc68 	.word	0x0002fc68
   1bae0:	0002f964 	.word	0x0002f964
   1bae4:	0002f6fc 	.word	0x0002f6fc
   1bae8:	0002fd5c 	.word	0x0002fd5c

0001baec <ull_conn_tx_demux>:
{
   1baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1baf0:	4c24      	ldr	r4, [pc, #144]	; (1bb84 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1baf2:	4f25      	ldr	r7, [pc, #148]	; (1bb88 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1baf4:	78e2      	ldrb	r2, [r4, #3]
{
   1baf6:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   1baf8:	1d26      	adds	r6, r4, #4
   1bafa:	e021      	b.n	1bb40 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1bafc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1bb00:	4638      	mov	r0, r7
   1bb02:	f7f9 f96f 	bl	14de4 <mem_get>
	if (conn->lll.handle != handle) {
   1bb06:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   1bb08:	bb2a      	cbnz	r2, 1bb56 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   1bb0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1bb0e:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
			tx->next = NULL;
   1bb12:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   1bb14:	b351      	cbz	r1, 1bb6c <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   1bb16:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
   1bb1a:	b102      	cbz	r2, 1bb1e <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   1bb1c:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1bb1e:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		MFIFO_DEQUEUE(conn_tx);
   1bb22:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   1bb24:	78a3      	ldrb	r3, [r4, #2]
   1bb26:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   1bb28:	429a      	cmp	r2, r3
   1bb2a:	d005      	beq.n	1bb38 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   1bb2c:	3301      	adds	r3, #1
   1bb2e:	b2db      	uxtb	r3, r3
		_first = 0U;
   1bb30:	4299      	cmp	r1, r3
   1bb32:	bf08      	it	eq
   1bb34:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1bb36:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   1bb38:	3d01      	subs	r5, #1
   1bb3a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1bb3e:	d01e      	beq.n	1bb7e <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1bb40:	78a3      	ldrb	r3, [r4, #2]
   1bb42:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   1bb44:	4293      	cmp	r3, r2
   1bb46:	d01a      	beq.n	1bb7e <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   1bb48:	fb13 f301 	smulbb	r3, r3, r1
   1bb4c:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   1bb50:	5af2      	ldrh	r2, [r6, r3]
   1bb52:	2a00      	cmp	r2, #0
   1bb54:	d0d2      	beq.n	1bafc <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   1bb56:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   1bb5a:	790b      	ldrb	r3, [r1, #4]
   1bb5c:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1bb60:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1bb64:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1bb66:	f7fd f839 	bl	18bdc <ll_tx_ack_put>
   1bb6a:	e7da      	b.n	1bb22 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   1bb6c:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
				conn->tx_data = tx;
   1bb70:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
   1bb74:	2a00      	cmp	r2, #0
   1bb76:	d1ce      	bne.n	1bb16 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   1bb78:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			if (conn->tx_data_last) {
   1bb7c:	e7cf      	b.n	1bb1e <ull_conn_tx_demux+0x32>
}
   1bb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb82:	bf00      	nop
   1bb84:	200006b8 	.word	0x200006b8
   1bb88:	200020d0 	.word	0x200020d0

0001bb8c <conn_cleanup_finalize>:
{
   1bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   1bb90:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
{
   1bb94:	b082      	sub	sp, #8
   1bb96:	4606      	mov	r6, r0
	while (rx) {
   1bb98:	b144      	cbz	r4, 1bbac <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   1bb9a:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   1bb9c:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1bb9e:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1bba0:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1bba2:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1bba4:	f7fc ffd6 	bl	18b54 <ll_rx_put>
	while (rx) {
   1bba8:	2c00      	cmp	r4, #0
   1bbaa:	d1f7      	bne.n	1bb9c <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   1bbac:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1bbb0:	b381      	cbz	r1, 1bc14 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   1bbb2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1bc58 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   1bbb6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1bc5c <conn_cleanup_finalize+0xd0>
   1bbba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1bc60 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1bbbe:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   1bbc2:	e007      	b.n	1bbd4 <conn_cleanup_finalize+0x48>
   1bbc4:	4629      	mov	r1, r5
   1bbc6:	463a      	mov	r2, r7
   1bbc8:	4620      	mov	r0, r4
   1bbca:	f7f9 f93d 	bl	14e48 <memq_enqueue>
	while (conn->tx_head) {
   1bbce:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1bbd2:	b1f9      	cbz	r1, 1bc14 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1bbd4:	4630      	mov	r0, r6
   1bbd6:	f7fe f801 	bl	19bdc <tx_ull_dequeue>
   1bbda:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   1bbdc:	4640      	mov	r0, r8
   1bbde:	f7f9 f8cf 	bl	14d80 <mem_acquire>
		LL_ASSERT(link);
   1bbe2:	4604      	mov	r4, r0
   1bbe4:	2800      	cmp	r0, #0
   1bbe6:	d1ed      	bne.n	1bbc4 <conn_cleanup_finalize+0x38>
   1bbe8:	481e      	ldr	r0, [pc, #120]	; (1bc64 <conn_cleanup_finalize+0xd8>)
   1bbea:	f640 135e 	movw	r3, #2398	; 0x95e
   1bbee:	4652      	mov	r2, sl
   1bbf0:	4649      	mov	r1, r9
   1bbf2:	f00a feb3 	bl	2695c <printk>
   1bbf6:	4040      	eors	r0, r0
   1bbf8:	f380 8811 	msr	BASEPRI, r0
   1bbfc:	f04f 0003 	mov.w	r0, #3
   1bc00:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1bc02:	4629      	mov	r1, r5
   1bc04:	463a      	mov	r2, r7
   1bc06:	4620      	mov	r0, r4
   1bc08:	f7f9 f91e 	bl	14e48 <memq_enqueue>
	while (conn->tx_head) {
   1bc0c:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   1bc10:	2900      	cmp	r1, #0
   1bc12:	d1df      	bne.n	1bbd4 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1bc14:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   1bc16:	4b14      	ldr	r3, [pc, #80]	; (1bc68 <conn_cleanup_finalize+0xdc>)
   1bc18:	9600      	str	r6, [sp, #0]
   1bc1a:	3203      	adds	r2, #3
   1bc1c:	b2d2      	uxtb	r2, r2
   1bc1e:	2101      	movs	r1, #1
   1bc20:	2000      	movs	r0, #0
   1bc22:	f7fa fbdb 	bl	163dc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bc26:	f030 0302 	bics.w	r3, r0, #2
   1bc2a:	d00c      	beq.n	1bc46 <conn_cleanup_finalize+0xba>
   1bc2c:	4a0b      	ldr	r2, [pc, #44]	; (1bc5c <conn_cleanup_finalize+0xd0>)
   1bc2e:	490f      	ldr	r1, [pc, #60]	; (1bc6c <conn_cleanup_finalize+0xe0>)
   1bc30:	480c      	ldr	r0, [pc, #48]	; (1bc64 <conn_cleanup_finalize+0xd8>)
   1bc32:	f640 1323 	movw	r3, #2339	; 0x923
   1bc36:	f00a fe91 	bl	2695c <printk>
   1bc3a:	4040      	eors	r0, r0
   1bc3c:	f380 8811 	msr	BASEPRI, r0
   1bc40:	f04f 0003 	mov.w	r0, #3
   1bc44:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   1bc46:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1bc4a:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   1bc4c:	8533      	strh	r3, [r6, #40]	; 0x28
}
   1bc4e:	b002      	add	sp, #8
   1bc50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1bc54:	f7ff bf4a 	b.w	1baec <ull_conn_tx_demux>
   1bc58:	20003894 	.word	0x20003894
   1bc5c:	0002fc68 	.word	0x0002fc68
   1bc60:	0002fcc0 	.word	0x0002fcc0
   1bc64:	0002f6fc 	.word	0x0002f6fc
   1bc68:	00019989 	.word	0x00019989
   1bc6c:	0002fd84 	.word	0x0002fd84

0001bc70 <ull_conn_done>:
{
   1bc70:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   1bc72:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1bc74:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   1bc76:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bc7a:	4299      	cmp	r1, r3
{
   1bc7c:	b089      	sub	sp, #36	; 0x24
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1bc7e:	d054      	beq.n	1bd2a <ull_conn_done+0xba>
	switch (done->extra.mic_state) {
   1bc80:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   1bc84:	2b01      	cmp	r3, #1
   1bc86:	f000 80e0 	beq.w	1be4a <ull_conn_done+0x1da>
   1bc8a:	2b02      	cmp	r3, #2
   1bc8c:	d04f      	beq.n	1bd2e <ull_conn_done+0xbe>
   1bc8e:	2b00      	cmp	r3, #0
   1bc90:	f000 80c1 	beq.w	1be16 <ull_conn_done+0x1a6>
	reason_final = conn->llcp_terminate.reason_final;
   1bc94:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
	if (reason_final && (
   1bc98:	2b00      	cmp	r3, #0
   1bc9a:	d14b      	bne.n	1bd34 <ull_conn_done+0xc4>
	latency_event = lll->latency_event;
   1bc9c:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1bc9e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   1bca0:	1c77      	adds	r7, r6, #1
   1bca2:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d15d      	bne.n	1bd64 <ull_conn_done+0xf4>
	if (done->extra.crc_valid) {
   1bca8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1bcac:	f013 0301 	ands.w	r3, r3, #1
   1bcb0:	f000 80d1 	beq.w	1be56 <ull_conn_done+0x1e6>
		conn->supervision_expire = 0U;
   1bcb4:	2500      	movs	r5, #0
   1bcb6:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->procedure_expire != 0U) {
   1bcba:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   1bcbe:	b12b      	cbz	r3, 1bccc <ull_conn_done+0x5c>
		if (conn->procedure_expire > elapsed_event) {
   1bcc0:	429f      	cmp	r7, r3
   1bcc2:	f080 810f 	bcs.w	1bee4 <ull_conn_done+0x274>
			conn->procedure_expire -= elapsed_event;
   1bcc6:	1bdb      	subs	r3, r3, r7
   1bcc8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	if (conn->apto_expire != 0U) {
   1bccc:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
   1bcd0:	b12b      	cbz	r3, 1bcde <ull_conn_done+0x6e>
		if (conn->apto_expire > elapsed_event) {
   1bcd2:	429f      	cmp	r7, r3
   1bcd4:	f080 80e1 	bcs.w	1be9a <ull_conn_done+0x22a>
			conn->apto_expire -= elapsed_event;
   1bcd8:	1bdb      	subs	r3, r3, r7
   1bcda:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	if (conn->appto_expire != 0U) {
   1bcde:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
			    (conn->llcp_req == conn->llcp_ack)) {
   1bce2:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   1bce6:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
	if (conn->appto_expire != 0U) {
   1bcea:	b15a      	cbz	r2, 1bd04 <ull_conn_done+0x94>
		if (conn->appto_expire > elapsed_event) {
   1bcec:	4297      	cmp	r7, r2
   1bcee:	f0c0 80be 	bcc.w	1be6e <ull_conn_done+0x1fe>
			if ((conn->procedure_expire == 0U) &&
   1bcf2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
			conn->appto_expire = 0U;
   1bcf6:	2000      	movs	r0, #0
   1bcf8:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
			if ((conn->procedure_expire == 0U) &&
   1bcfc:	b912      	cbnz	r2, 1bd04 <ull_conn_done+0x94>
   1bcfe:	428b      	cmp	r3, r1
   1bd00:	f000 80fd 	beq.w	1befe <ull_conn_done+0x28e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1bd04:	1a5b      	subs	r3, r3, r1
   1bd06:	f003 0303 	and.w	r3, r3, #3
   1bd0a:	2b02      	cmp	r3, #2
   1bd0c:	f000 80b8 	beq.w	1be80 <ull_conn_done+0x210>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1bd10:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1bd14:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1bd18:	429a      	cmp	r2, r3
   1bd1a:	f000 80cf 	beq.w	1bebc <ull_conn_done+0x24c>
		lll->latency_event = 0U;
   1bd1e:	2300      	movs	r3, #0
   1bd20:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   1bd22:	2d00      	cmp	r5, #0
   1bd24:	d13d      	bne.n	1bda2 <ull_conn_done+0x132>
   1bd26:	2e00      	cmp	r6, #0
   1bd28:	d13b      	bne.n	1bda2 <ull_conn_done+0x132>
}
   1bd2a:	b009      	add	sp, #36	; 0x24
   1bd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   1bd2e:	233d      	movs	r3, #61	; 0x3d
   1bd30:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
			       conn->llcp_terminate.ack) & 0xFF) ==
   1bd34:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1bd38:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
   1bd3c:	1b52      	subs	r2, r2, r5
	if (reason_final && (
   1bd3e:	b2d2      	uxtb	r2, r2
   1bd40:	2a03      	cmp	r2, #3
   1bd42:	d055      	beq.n	1bdf0 <ull_conn_done+0x180>
			     TERM_ACKED) ||
   1bd44:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
   1bd48:	0755      	lsls	r5, r2, #29
   1bd4a:	d451      	bmi.n	1bdf0 <ull_conn_done+0x180>
			    conn->central.terminate_ack ||
   1bd4c:	2b3d      	cmp	r3, #61	; 0x3d
   1bd4e:	d04f      	beq.n	1bdf0 <ull_conn_done+0x180>
	latency_event = lll->latency_event;
   1bd50:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1bd52:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   1bd54:	1c77      	adds	r7, r6, #1
   1bd56:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1bd58:	2b00      	cmp	r3, #0
   1bd5a:	d0a5      	beq.n	1bca8 <ull_conn_done+0x38>
			conn->central.terminate_ack = 1;
   1bd5c:	f042 0204 	orr.w	r2, r2, #4
   1bd60:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	if (done->extra.crc_valid) {
   1bd64:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
		conn->connect_expire = 0U;
   1bd68:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   1bd6a:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   1bd6c:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	if (done->extra.crc_valid) {
   1bd70:	d4a0      	bmi.n	1bcb4 <ull_conn_done+0x44>
		if (!conn->supervision_expire) {
   1bd72:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
   1bd76:	b92d      	cbnz	r5, 1bd84 <ull_conn_done+0x114>
			conn->supervision_expire = conn->supervision_reload;
   1bd78:	f8b4 50a6 	ldrh.w	r5, [r4, #166]	; 0xa6
   1bd7c:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->supervision_expire) {
   1bd80:	2d00      	cmp	r5, #0
   1bd82:	d09a      	beq.n	1bcba <ull_conn_done+0x4a>
		if (conn->supervision_expire > elapsed_event) {
   1bd84:	42bd      	cmp	r5, r7
   1bd86:	f240 80a4 	bls.w	1bed2 <ull_conn_done+0x262>
			conn->supervision_expire -= elapsed_event;
   1bd8a:	1bed      	subs	r5, r5, r7
   1bd8c:	b2ad      	uxth	r5, r5
	force = 0U;
   1bd8e:	2d06      	cmp	r5, #6
			lll->latency_event = 0U;
   1bd90:	f04f 0300 	mov.w	r3, #0
			conn->supervision_expire -= elapsed_event;
   1bd94:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
			lll->latency_event = 0U;
   1bd98:	8623      	strh	r3, [r4, #48]	; 0x30
	force = 0U;
   1bd9a:	bf8c      	ite	hi
   1bd9c:	2500      	movhi	r5, #0
   1bd9e:	2501      	movls	r5, #1
   1bda0:	e78b      	b.n	1bcba <ull_conn_done+0x4a>
		lazy = lll->latency_event + 1U;
   1bda2:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1bda4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1bda6:	4b62      	ldr	r3, [pc, #392]	; (1bf30 <ull_conn_done+0x2c0>)
		struct ll_conn *conn = lll->hdr.parent;
   1bda8:	69e4      	ldr	r4, [r4, #28]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1bdaa:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1bdac:	e9cd 3405 	strd	r3, r4, [sp, #20]
   1bdb0:	2300      	movs	r3, #0
   1bdb2:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1bdb6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1bdba:	9300      	str	r3, [sp, #0]
   1bdbc:	4618      	mov	r0, r3
   1bdbe:	b2d2      	uxtb	r2, r2
   1bdc0:	2101      	movs	r1, #1
   1bdc2:	f7fa faf3 	bl	163ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bdc6:	f030 0302 	bics.w	r3, r0, #2
   1bdca:	d0ae      	beq.n	1bd2a <ull_conn_done+0xba>
   1bdcc:	f7fc ff62 	bl	18c94 <ull_disable_mark_get>
   1bdd0:	4284      	cmp	r4, r0
   1bdd2:	d0aa      	beq.n	1bd2a <ull_conn_done+0xba>
   1bdd4:	4a57      	ldr	r2, [pc, #348]	; (1bf34 <ull_conn_done+0x2c4>)
   1bdd6:	4958      	ldr	r1, [pc, #352]	; (1bf38 <ull_conn_done+0x2c8>)
   1bdd8:	4858      	ldr	r0, [pc, #352]	; (1bf3c <ull_conn_done+0x2cc>)
   1bdda:	f240 63cd 	movw	r3, #1741	; 0x6cd
   1bdde:	f00a fdbd 	bl	2695c <printk>
   1bde2:	4040      	eors	r0, r0
   1bde4:	f380 8811 	msr	BASEPRI, r0
   1bde8:	f04f 0003 	mov.w	r0, #3
   1bdec:	df02      	svc	2
   1bdee:	e79c      	b.n	1bd2a <ull_conn_done+0xba>
	if (conn == conn_upd_curr) {
   1bdf0:	4a53      	ldr	r2, [pc, #332]	; (1bf40 <ull_conn_done+0x2d0>)
   1bdf2:	6810      	ldr	r0, [r2, #0]
   1bdf4:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1bdf6:	bf04      	itt	eq
   1bdf8:	2000      	moveq	r0, #0
   1bdfa:	6010      	streq	r0, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1bdfc:	2217      	movs	r2, #23
	conn_cleanup_finalize(conn);
   1bdfe:	4620      	mov	r0, r4
	rx->hdr.handle = conn->lll.handle;
   1be00:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1be04:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
	*((uint8_t *)rx->pdu) = reason;
   1be08:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
}
   1be0c:	b009      	add	sp, #36	; 0x24
   1be0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   1be12:	f7ff bebb 	b.w	1bb8c <conn_cleanup_finalize>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1be16:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1be1a:	071f      	lsls	r7, r3, #28
   1be1c:	d537      	bpl.n	1be8e <ull_conn_done+0x21e>
					    (lll->latency + 6)) ?
   1be1e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   1be20:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
					    (lll->latency + 6)) ?
   1be24:	1dab      	adds	r3, r5, #6
			appto_reload_new = (conn->apto_reload >
   1be26:	429a      	cmp	r2, r3
   1be28:	bfc4      	itt	gt
   1be2a:	1f93      	subgt	r3, r2, #6
   1be2c:	1b5b      	subgt	r3, r3, r5
			if (conn->appto_reload != appto_reload_new) {
   1be2e:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
			appto_reload_new = (conn->apto_reload >
   1be32:	bfcc      	ite	gt
   1be34:	b29b      	uxthgt	r3, r3
   1be36:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1be38:	429d      	cmp	r5, r3
   1be3a:	d044      	beq.n	1bec6 <ull_conn_done+0x256>
				conn->appto_reload = appto_reload_new;
   1be3c:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
				conn->appto_expire = conn->appto_reload;
   1be40:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				conn->apto_expire = conn->apto_reload;
   1be44:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
   1be48:	e724      	b.n	1bc94 <ull_conn_done+0x24>
		conn->appto_expire = conn->apto_expire = 0U;
   1be4a:	2300      	movs	r3, #0
   1be4c:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   1be50:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
		break;
   1be54:	e71e      	b.n	1bc94 <ull_conn_done+0x24>
	else if (conn->connect_expire) {
   1be56:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1be5a:	2a00      	cmp	r2, #0
   1be5c:	d089      	beq.n	1bd72 <ull_conn_done+0x102>
		if (conn->connect_expire > elapsed_event) {
   1be5e:	42ba      	cmp	r2, r7
   1be60:	d954      	bls.n	1bf0c <ull_conn_done+0x29c>
			conn->connect_expire -= elapsed_event;
   1be62:	1bd2      	subs	r2, r2, r7
	if (conn->supervision_expire) {
   1be64:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
			conn->connect_expire -= elapsed_event;
   1be68:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
   1be6c:	e788      	b.n	1bd80 <ull_conn_done+0x110>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1be6e:	1a5b      	subs	r3, r3, r1
   1be70:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   1be74:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1be76:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   1be78:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1be7c:	f47f af48 	bne.w	1bd10 <ull_conn_done+0xa0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1be80:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1be84:	3b01      	subs	r3, #1
   1be86:	2b01      	cmp	r3, #1
   1be88:	f63f af42 	bhi.w	1bd10 <ull_conn_done+0xa0>
   1be8c:	e747      	b.n	1bd1e <ull_conn_done+0xae>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1be8e:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   1be92:	07de      	lsls	r6, r3, #31
   1be94:	f57f aefe 	bpl.w	1bc94 <ull_conn_done+0x24>
   1be98:	e7c1      	b.n	1be1e <ull_conn_done+0x1ae>
			rx = ll_pdu_rx_alloc();
   1be9a:	f7fc fe89 	bl	18bb0 <ll_pdu_rx_alloc>
			if (rx) {
   1be9e:	4601      	mov	r1, r0
   1bea0:	b348      	cbz	r0, 1bef6 <ull_conn_done+0x286>
				rx->handle = lll->handle;
   1bea2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   1bea4:	2200      	movs	r2, #0
   1bea6:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
				rx->handle = lll->handle;
   1beaa:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1beac:	231a      	movs	r3, #26
   1beae:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1beb0:	6800      	ldr	r0, [r0, #0]
   1beb2:	f7fc fe4f 	bl	18b54 <ll_rx_put>
				ll_rx_sched();
   1beb6:	f7fc fe57 	bl	18b68 <ll_rx_sched>
   1beba:	e710      	b.n	1bcde <ull_conn_done+0x6e>
	if ((force) || (latency_event != lll->latency_event)) {
   1bebc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1bebe:	b36d      	cbz	r5, 1bf1c <ull_conn_done+0x2ac>
		lazy = lll->latency_event + 1U;
   1bec0:	3101      	adds	r1, #1
   1bec2:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1bec4:	e76e      	b.n	1bda4 <ull_conn_done+0x134>
			if (conn->apto_expire == 0U) {
   1bec6:	f8b4 50b4 	ldrh.w	r5, [r4, #180]	; 0xb4
   1beca:	2d00      	cmp	r5, #0
   1becc:	f47f aee2 	bne.w	1bc94 <ull_conn_done+0x24>
   1bed0:	e7b6      	b.n	1be40 <ull_conn_done+0x1d0>
	if (conn == conn_upd_curr) {
   1bed2:	4b1b      	ldr	r3, [pc, #108]	; (1bf40 <ull_conn_done+0x2d0>)
   1bed4:	681a      	ldr	r2, [r3, #0]
   1bed6:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1bed8:	bf04      	itt	eq
   1beda:	2200      	moveq	r2, #0
   1bedc:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1bede:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1bee0:	2308      	movs	r3, #8
   1bee2:	e78c      	b.n	1bdfe <ull_conn_done+0x18e>
	if (conn == conn_upd_curr) {
   1bee4:	4b16      	ldr	r3, [pc, #88]	; (1bf40 <ull_conn_done+0x2d0>)
   1bee6:	681a      	ldr	r2, [r3, #0]
   1bee8:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1beea:	bf04      	itt	eq
   1beec:	2200      	moveq	r2, #0
   1beee:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1bef0:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1bef2:	2322      	movs	r3, #34	; 0x22
   1bef4:	e783      	b.n	1bdfe <ull_conn_done+0x18e>
				conn->apto_expire = 1U;
   1bef6:	2301      	movs	r3, #1
   1bef8:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   1befc:	e6ef      	b.n	1bcde <ull_conn_done+0x6e>
				conn->llcp_type = LLCP_PING;
   1befe:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1bf00:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   1bf02:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
				conn->llcp_ack -= 2U;
   1bf06:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1bf0a:	e701      	b.n	1bd10 <ull_conn_done+0xa0>
	if (conn == conn_upd_curr) {
   1bf0c:	4a0c      	ldr	r2, [pc, #48]	; (1bf40 <ull_conn_done+0x2d0>)
   1bf0e:	6810      	ldr	r0, [r2, #0]
   1bf10:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1bf12:	bf08      	it	eq
   1bf14:	6013      	streq	r3, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1bf16:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1bf18:	233e      	movs	r3, #62	; 0x3e
   1bf1a:	e770      	b.n	1bdfe <ull_conn_done+0x18e>
	if ((force) || (latency_event != lll->latency_event)) {
   1bf1c:	42b1      	cmp	r1, r6
   1bf1e:	f43f af04 	beq.w	1bd2a <ull_conn_done+0xba>
		lazy = lll->latency_event + 1U;
   1bf22:	3101      	adds	r1, #1
   1bf24:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1bf26:	2900      	cmp	r1, #0
   1bf28:	f43f aeff 	beq.w	1bd2a <ull_conn_done+0xba>
   1bf2c:	e73a      	b.n	1bda4 <ull_conn_done+0x134>
   1bf2e:	bf00      	nop
   1bf30:	00019b9d 	.word	0x00019b9d
   1bf34:	0002fc68 	.word	0x0002fc68
   1bf38:	0002fdb4 	.word	0x0002fdb4
   1bf3c:	0002f6fc 	.word	0x0002f6fc
   1bf40:	2000374c 	.word	0x2000374c

0001bf44 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1bf44:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   1bf48:	2b00      	cmp	r3, #0
   1bf4a:	f000 80e5 	beq.w	1c118 <ull_conn_tx_lll_enqueue+0x1d4>
   1bf4e:	3901      	subs	r1, #1
{
   1bf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1bf54:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 1c11c <ull_conn_tx_lll_enqueue+0x1d8>
		LL_ASSERT(link);
   1bf58:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 1c120 <ull_conn_tx_lll_enqueue+0x1dc>
   1bf5c:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 1c124 <ull_conn_tx_lll_enqueue+0x1e0>
   1bf60:	4604      	mov	r4, r0
   1bf62:	b2cd      	uxtb	r5, r1
   1bf64:	e012      	b.n	1bf8c <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1bf66:	4640      	mov	r0, r8
   1bf68:	f7f8 ff0a 	bl	14d80 <mem_acquire>
		LL_ASSERT(link);
   1bf6c:	4607      	mov	r7, r0
   1bf6e:	2800      	cmp	r0, #0
   1bf70:	d064      	beq.n	1c03c <ull_conn_tx_lll_enqueue+0xf8>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1bf72:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   1bf76:	4631      	mov	r1, r6
   1bf78:	4638      	mov	r0, r7
   1bf7a:	f7f8 ff65 	bl	14e48 <memq_enqueue>
	while (conn->tx_head &&
   1bf7e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   1bf82:	3d01      	subs	r5, #1
   1bf84:	b2ed      	uxtb	r5, r5
   1bf86:	2b00      	cmp	r3, #0
   1bf88:	f000 8080 	beq.w	1c08c <ull_conn_tx_lll_enqueue+0x148>
		 !conn->llcp_phy.pause_tx &&
   1bf8c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
	while (conn->tx_head &&
   1bf90:	07d1      	lsls	r1, r2, #31
   1bf92:	d403      	bmi.n	1bf9c <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   1bf94:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
		 !conn->llcp_phy.pause_tx &&
   1bf98:	0792      	lsls	r2, r2, #30
   1bf9a:	d55d      	bpl.n	1c058 <ull_conn_tx_lll_enqueue+0x114>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1bf9c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   1bfa0:	4293      	cmp	r3, r2
   1bfa2:	d173      	bne.n	1c08c <ull_conn_tx_lll_enqueue+0x148>
   1bfa4:	2dff      	cmp	r5, #255	; 0xff
   1bfa6:	d071      	beq.n	1c08c <ull_conn_tx_lll_enqueue+0x148>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1bfa8:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   1bfac:	4620      	mov	r0, r4
   1bfae:	f7fd fe15 	bl	19bdc <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1bfb2:	7903      	ldrb	r3, [r0, #4]
   1bfb4:	f003 0303 	and.w	r3, r3, #3
   1bfb8:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1bfba:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1bfbc:	d1d3      	bne.n	1bf66 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   1bfbe:	79c3      	ldrb	r3, [r0, #7]
   1bfc0:	3b03      	subs	r3, #3
   1bfc2:	2b13      	cmp	r3, #19
   1bfc4:	d8cf      	bhi.n	1bf66 <ull_conn_tx_lll_enqueue+0x22>
   1bfc6:	a201      	add	r2, pc, #4	; (adr r2, 1bfcc <ull_conn_tx_lll_enqueue+0x88>)
   1bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bfcc:	0001c025 	.word	0x0001c025
   1bfd0:	0001bf67 	.word	0x0001bf67
   1bfd4:	0001bf67 	.word	0x0001bf67
   1bfd8:	0001bf67 	.word	0x0001bf67
   1bfdc:	0001bf67 	.word	0x0001bf67
   1bfe0:	0001bf67 	.word	0x0001bf67
   1bfe4:	0001bf67 	.word	0x0001bf67
   1bfe8:	0001c025 	.word	0x0001c025
   1bfec:	0001c01d 	.word	0x0001c01d
   1bff0:	0001bf67 	.word	0x0001bf67
   1bff4:	0001bf67 	.word	0x0001bf67
   1bff8:	0001bf67 	.word	0x0001bf67
   1bffc:	0001bf67 	.word	0x0001bf67
   1c000:	0001bf67 	.word	0x0001bf67
   1c004:	0001bf67 	.word	0x0001bf67
   1c008:	0001bf67 	.word	0x0001bf67
   1c00c:	0001bf67 	.word	0x0001bf67
   1c010:	0001bf67 	.word	0x0001bf67
   1c014:	0001bf67 	.word	0x0001bf67
   1c018:	0001c091 	.word	0x0001c091
		if (!conn->lll.role) {
   1c01c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1c020:	2b00      	cmp	r3, #0
   1c022:	daa0      	bge.n	1bf66 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1c024:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   1c028:	f043 0302 	orr.w	r3, r3, #2
   1c02c:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
		link = mem_acquire(&mem_link_tx.free);
   1c030:	4640      	mov	r0, r8
   1c032:	f7f8 fea5 	bl	14d80 <mem_acquire>
		LL_ASSERT(link);
   1c036:	4607      	mov	r7, r0
   1c038:	2800      	cmp	r0, #0
   1c03a:	d19a      	bne.n	1bf72 <ull_conn_tx_lll_enqueue+0x2e>
   1c03c:	483a      	ldr	r0, [pc, #232]	; (1c128 <ull_conn_tx_lll_enqueue+0x1e4>)
   1c03e:	f240 7326 	movw	r3, #1830	; 0x726
   1c042:	4652      	mov	r2, sl
   1c044:	4649      	mov	r1, r9
   1c046:	f00a fc89 	bl	2695c <printk>
   1c04a:	4040      	eors	r0, r0
   1c04c:	f380 8811 	msr	BASEPRI, r0
   1c050:	f04f 0003 	mov.w	r0, #3
   1c054:	df02      	svc	2
   1c056:	e78c      	b.n	1bf72 <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1c058:	791a      	ldrb	r2, [r3, #4]
   1c05a:	f002 0203 	and.w	r2, r2, #3
   1c05e:	2a03      	cmp	r2, #3
   1c060:	d1a0      	bne.n	1bfa4 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   1c062:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1c064:	2a03      	cmp	r2, #3
   1c066:	d001      	beq.n	1c06c <ull_conn_tx_lll_enqueue+0x128>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1c068:	2a0a      	cmp	r2, #10
   1c06a:	d19b      	bne.n	1bfa4 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1c06c:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   1c070:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   1c074:	428a      	cmp	r2, r1
   1c076:	d012      	beq.n	1c09e <ull_conn_tx_lll_enqueue+0x15a>
   1c078:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
   1c07c:	2a03      	cmp	r2, #3
   1c07e:	d091      	beq.n	1bfa4 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1c080:	681a      	ldr	r2, [r3, #0]
   1c082:	b11a      	cbz	r2, 1c08c <ull_conn_tx_lll_enqueue+0x148>
   1c084:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   1c088:	428a      	cmp	r2, r1
   1c08a:	d034      	beq.n	1c0f6 <ull_conn_tx_lll_enqueue+0x1b2>
}
   1c08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   1c090:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   1c094:	f043 0301 	orr.w	r3, r3, #1
   1c098:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
   1c09c:	e763      	b.n	1bf66 <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   1c09e:	f894 00f9 	ldrb.w	r0, [r4, #249]	; 0xf9
   1c0a2:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   1c0a6:	4288      	cmp	r0, r1
   1c0a8:	d1ea      	bne.n	1c080 <ull_conn_tx_lll_enqueue+0x13c>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1c0aa:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
   1c0ae:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
   1c0b2:	4288      	cmp	r0, r1
   1c0b4:	d1e4      	bne.n	1c080 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   1c0b6:	f894 015d 	ldrb.w	r0, [r4, #349]	; 0x15d
   1c0ba:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
   1c0be:	4288      	cmp	r0, r1
   1c0c0:	d1de      	bne.n	1c080 <ull_conn_tx_lll_enqueue+0x13c>
		       conn->llcp_conn_param.req) ||
   1c0c2:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   1c0c6:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1c0ca:	4288      	cmp	r0, r1
   1c0cc:	d1d8      	bne.n	1c080 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1c0ce:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   1c0d2:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   1c0d6:	4288      	cmp	r0, r1
   1c0d8:	d1d2      	bne.n	1c080 <ull_conn_tx_lll_enqueue+0x13c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1c0da:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_ack -= 2U;
   1c0de:	3a02      	subs	r2, #2
   1c0e0:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1c0e4:	2201      	movs	r2, #1
   1c0e6:	f362 0301 	bfi	r3, r2, #0, #2
   1c0ea:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_type = LLCP_ENCRYPTION;
   1c0ee:	2303      	movs	r3, #3
   1c0f0:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   1c0f4:	e756      	b.n	1bfa4 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   1c0f6:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
   1c0fa:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
				if (!conn->tx_data_last) {
   1c0fe:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
				tx->next = conn->tx_ctrl_last->next;
   1c102:	6810      	ldr	r0, [r2, #0]
   1c104:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1c106:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   1c108:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
   1c10c:	2900      	cmp	r1, #0
   1c10e:	f47f af49 	bne.w	1bfa4 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   1c112:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   1c116:	e745      	b.n	1bfa4 <ull_conn_tx_lll_enqueue+0x60>
   1c118:	4770      	bx	lr
   1c11a:	bf00      	nop
   1c11c:	20003894 	.word	0x20003894
   1c120:	0002fc68 	.word	0x0002fc68
   1c124:	0002fcc0 	.word	0x0002fcc0
   1c128:	0002f6fc 	.word	0x0002f6fc

0001c12c <tx_demux>:
{
   1c12c:	b510      	push	{r4, lr}
   1c12e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1c130:	2001      	movs	r0, #1
   1c132:	f7ff fcdb 	bl	1baec <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1c136:	4620      	mov	r0, r4
   1c138:	2101      	movs	r1, #1
}
   1c13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1c13e:	f7ff bf01 	b.w	1bf44 <ull_conn_tx_lll_enqueue>
   1c142:	bf00      	nop

0001c144 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1c144:	4901      	ldr	r1, [pc, #4]	; (1c14c <ull_conn_link_tx_release+0x8>)
   1c146:	f7f8 be35 	b.w	14db4 <mem_release>
   1c14a:	bf00      	nop
   1c14c:	20003894 	.word	0x20003894

0001c150 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   1c150:	4b01      	ldr	r3, [pc, #4]	; (1c158 <ull_conn_ack_last_idx_get+0x8>)
}
   1c152:	78d8      	ldrb	r0, [r3, #3]
   1c154:	4770      	bx	lr
   1c156:	bf00      	nop
   1c158:	20000674 	.word	0x20000674

0001c15c <ull_conn_ack_peek>:
{
   1c15c:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1c15e:	4b0c      	ldr	r3, [pc, #48]	; (1c190 <ull_conn_ack_peek+0x34>)
   1c160:	f893 c002 	ldrb.w	ip, [r3, #2]
   1c164:	f893 e003 	ldrb.w	lr, [r3, #3]
   1c168:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   1c16a:	45f4      	cmp	ip, lr
   1c16c:	d00d      	beq.n	1c18a <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   1c16e:	fb1c fc04 	smulbb	ip, ip, r4
   1c172:	3304      	adds	r3, #4
   1c174:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   1c178:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   1c17c:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1c180:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   1c182:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1c184:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1c186:	6818      	ldr	r0, [r3, #0]
}
   1c188:	bd10      	pop	{r4, pc}
		return NULL;
   1c18a:	2000      	movs	r0, #0
}
   1c18c:	bd10      	pop	{r4, pc}
   1c18e:	bf00      	nop
   1c190:	20000674 	.word	0x20000674

0001c194 <ull_conn_ack_by_last_peek>:
{
   1c194:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1c196:	4b0b      	ldr	r3, [pc, #44]	; (1c1c4 <ull_conn_ack_by_last_peek+0x30>)
   1c198:	f893 c002 	ldrb.w	ip, [r3, #2]
   1c19c:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   1c1a0:	4584      	cmp	ip, r0
   1c1a2:	d00d      	beq.n	1c1c0 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   1c1a4:	3304      	adds	r3, #4
   1c1a6:	fb1c fc0e 	smulbb	ip, ip, lr
   1c1aa:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   1c1ae:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1c1b2:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   1c1b6:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1c1b8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1c1ba:	6818      	ldr	r0, [r3, #0]
}
   1c1bc:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1c1c0:	2000      	movs	r0, #0
   1c1c2:	e7fb      	b.n	1c1bc <ull_conn_ack_by_last_peek+0x28>
   1c1c4:	20000674 	.word	0x20000674

0001c1c8 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   1c1c8:	4b09      	ldr	r3, [pc, #36]	; (1c1f0 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1c1ca:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1c1cc:	78da      	ldrb	r2, [r3, #3]
   1c1ce:	7818      	ldrb	r0, [r3, #0]
   1c1d0:	f893 c001 	ldrb.w	ip, [r3, #1]
   1c1d4:	428a      	cmp	r2, r1
   1c1d6:	d009      	beq.n	1c1ec <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   1c1d8:	1c4a      	adds	r2, r1, #1
   1c1da:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1c1dc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1c1e0:	4594      	cmp	ip, r2
   1c1e2:	bf08      	it	eq
   1c1e4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1c1e6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1c1e8:	709a      	strb	r2, [r3, #2]
	return mem;
   1c1ea:	4770      	bx	lr
		return NULL;
   1c1ec:	2000      	movs	r0, #0
}
   1c1ee:	4770      	bx	lr
   1c1f0:	20000674 	.word	0x20000674

0001c1f4 <ull_conn_lll_ack_enqueue>:
{
   1c1f4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1c1f6:	4a15      	ldr	r2, [pc, #84]	; (1c24c <ull_conn_lll_ack_enqueue+0x58>)
   1c1f8:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   1c1fc:	7854      	ldrb	r4, [r2, #1]
   1c1fe:	f892 e002 	ldrb.w	lr, [r2, #2]
   1c202:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1c204:	f10c 0301 	add.w	r3, ip, #1
   1c208:	b2db      	uxtb	r3, r3
		last = 0U;
   1c20a:	429c      	cmp	r4, r3
   1c20c:	bf08      	it	eq
   1c20e:	2300      	moveq	r3, #0
	if (last == first) {
   1c210:	459e      	cmp	lr, r3
   1c212:	d00a      	beq.n	1c22a <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1c214:	fb1c fc05 	smulbb	ip, ip, r5
   1c218:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   1c21c:	f82e 000c 	strh.w	r0, [lr, ip]
   1c220:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1c222:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1c226:	70d3      	strb	r3, [r2, #3]
}
   1c228:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   1c22a:	4a09      	ldr	r2, [pc, #36]	; (1c250 <ull_conn_lll_ack_enqueue+0x5c>)
   1c22c:	4909      	ldr	r1, [pc, #36]	; (1c254 <ull_conn_lll_ack_enqueue+0x60>)
   1c22e:	480a      	ldr	r0, [pc, #40]	; (1c258 <ull_conn_lll_ack_enqueue+0x64>)
   1c230:	f240 7376 	movw	r3, #1910	; 0x776
   1c234:	f00a fb92 	bl	2695c <printk>
   1c238:	4040      	eors	r0, r0
   1c23a:	f380 8811 	msr	BASEPRI, r0
   1c23e:	f04f 0003 	mov.w	r0, #3
   1c242:	df02      	svc	2
	lll_tx->handle = handle;
   1c244:	2300      	movs	r3, #0
   1c246:	801b      	strh	r3, [r3, #0]
   1c248:	deff      	udf	#255	; 0xff
   1c24a:	bf00      	nop
   1c24c:	20000674 	.word	0x20000674
   1c250:	0002fc68 	.word	0x0002fc68
   1c254:	0002fcb0 	.word	0x0002fcb0
   1c258:	0002f6fc 	.word	0x0002f6fc

0001c25c <ull_conn_tx_ack>:
{
   1c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   1c25e:	7953      	ldrb	r3, [r2, #5]
{
   1c260:	4614      	mov	r4, r2
   1c262:	4605      	mov	r5, r0
   1c264:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1c266:	b36b      	cbz	r3, 1c2c4 <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1c268:	7923      	ldrb	r3, [r4, #4]
   1c26a:	f003 0203 	and.w	r2, r3, #3
   1c26e:	2a03      	cmp	r2, #3
   1c270:	d00c      	beq.n	1c28c <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
   1c272:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c276:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1c278:	bf04      	itt	eq
   1c27a:	f36f 0301 	bfceq	r3, #0, #2
   1c27e:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1c280:	4621      	mov	r1, r4
   1c282:	4628      	mov	r0, r5
}
   1c284:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1c288:	f7fc bca8 	b.w	18bdc <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   1c28c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c290:	429d      	cmp	r5, r3
   1c292:	d125      	bne.n	1c2e0 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
   1c294:	6830      	ldr	r0, [r6, #0]
   1c296:	4284      	cmp	r4, r0
   1c298:	d049      	beq.n	1c32e <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   1c29a:	2800      	cmp	r0, #0
   1c29c:	d0f0      	beq.n	1c280 <ull_conn_tx_ack+0x24>
   1c29e:	4ab3      	ldr	r2, [pc, #716]	; (1c56c <ull_conn_tx_ack+0x310>)
   1c2a0:	49b3      	ldr	r1, [pc, #716]	; (1c570 <ull_conn_tx_ack+0x314>)
   1c2a2:	48b4      	ldr	r0, [pc, #720]	; (1c574 <ull_conn_tx_ack+0x318>)
   1c2a4:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   1c2a8:	f00a fb58 	bl	2695c <printk>
   1c2ac:	4040      	eors	r0, r0
   1c2ae:	f380 8811 	msr	BASEPRI, r0
   1c2b2:	f04f 0003 	mov.w	r0, #3
   1c2b6:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1c2b8:	4621      	mov	r1, r4
   1c2ba:	4628      	mov	r0, r5
}
   1c2bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1c2c0:	f7fc bc8c 	b.w	18bdc <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1c2c4:	4aa9      	ldr	r2, [pc, #676]	; (1c56c <ull_conn_tx_ack+0x310>)
   1c2c6:	49ac      	ldr	r1, [pc, #688]	; (1c578 <ull_conn_tx_ack+0x31c>)
   1c2c8:	48aa      	ldr	r0, [pc, #680]	; (1c574 <ull_conn_tx_ack+0x318>)
   1c2ca:	f240 7383 	movw	r3, #1923	; 0x783
   1c2ce:	f00a fb45 	bl	2695c <printk>
   1c2d2:	4040      	eors	r0, r0
   1c2d4:	f380 8811 	msr	BASEPRI, r0
   1c2d8:	f04f 0003 	mov.w	r0, #3
   1c2dc:	df02      	svc	2
   1c2de:	e7c3      	b.n	1c268 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1c2e0:	48a6      	ldr	r0, [pc, #664]	; (1c57c <ull_conn_tx_ack+0x320>)
   1c2e2:	462a      	mov	r2, r5
   1c2e4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1c2e8:	f7f8 fd7c 	bl	14de4 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   1c2ec:	79e3      	ldrb	r3, [r4, #7]
   1c2ee:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1c2f0:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   1c2f2:	2b16      	cmp	r3, #22
   1c2f4:	d820      	bhi.n	1c338 <ull_conn_tx_ack+0xdc>
   1c2f6:	e8df f003 	tbb	[pc, r3]
   1c2fa:	516d      	.short	0x516d
   1c2fc:	288b1f1f 	.word	0x288b1f1f
   1c300:	7984281f 	.word	0x7984281f
   1c304:	1f1f471f 	.word	0x1f1f471f
   1c308:	281f251f 	.word	0x281f251f
   1c30c:	1f2f96c3 	.word	0x1f2f96c3
   1c310:	36          	.byte	0x36
   1c311:	00          	.byte	0x00
			LL_ASSERT(link->next);
   1c312:	4a96      	ldr	r2, [pc, #600]	; (1c56c <ull_conn_tx_ack+0x310>)
   1c314:	499a      	ldr	r1, [pc, #616]	; (1c580 <ull_conn_tx_ack+0x324>)
   1c316:	4897      	ldr	r0, [pc, #604]	; (1c574 <ull_conn_tx_ack+0x318>)
   1c318:	f240 7392 	movw	r3, #1938	; 0x792
   1c31c:	f00a fb1e 	bl	2695c <printk>
   1c320:	4040      	eors	r0, r0
   1c322:	f380 8811 	msr	BASEPRI, r0
   1c326:	f04f 0003 	mov.w	r0, #3
   1c32a:	df02      	svc	2
   1c32c:	2000      	movs	r0, #0
}
   1c32e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1c332:	4994      	ldr	r1, [pc, #592]	; (1c584 <ull_conn_tx_ack+0x328>)
   1c334:	f7f8 bd3e 	b.w	14db4 <mem_release>
		if (link->next == (void *)tx) {
   1c338:	6830      	ldr	r0, [r6, #0]
   1c33a:	42a0      	cmp	r0, r4
   1c33c:	d0f7      	beq.n	1c32e <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   1c33e:	2800      	cmp	r0, #0
   1c340:	d1ad      	bne.n	1c29e <ull_conn_tx_ack+0x42>
   1c342:	e79d      	b.n	1c280 <ull_conn_tx_ack+0x24>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1c344:	7a23      	ldrb	r3, [r4, #8]
   1c346:	2b03      	cmp	r3, #3
   1c348:	d01e      	beq.n	1c388 <ull_conn_tx_ack+0x12c>
			conn->common.txn_lock = 0U;
   1c34a:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
   1c34e:	f36f 0341 	bfc	r3, #1, #1
   1c352:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			break;
   1c356:	e79d      	b.n	1c294 <ull_conn_tx_ack+0x38>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1c358:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   1c35c:	2202      	movs	r2, #2
   1c35e:	f362 0301 	bfi	r3, r2, #0, #2
   1c362:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1c366:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
   1c36a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   1c36e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1c372:	f363 1206 	bfi	r2, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1c376:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1c37a:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   1c37e:	f36f 0300 	bfc	r3, #0, #1
   1c382:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		break;
   1c386:	e785      	b.n	1c294 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_rx = 0U;
   1c388:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1c38c:	f023 0303 	bic.w	r3, r3, #3
   1c390:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
   1c394:	2300      	movs	r3, #0
   1c396:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		break;
   1c39a:	e77b      	b.n	1c294 <ull_conn_tx_ack+0x38>
		memcpy(&conn->llcp.encryption.skd[0],
   1c39c:	2208      	movs	r2, #8
   1c39e:	f104 0112 	add.w	r1, r4, #18
   1c3a2:	30ce      	adds	r0, #206	; 0xce
   1c3a4:	f00d ffda 	bl	2a35c <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1c3a8:	2204      	movs	r2, #4
   1c3aa:	f104 011a 	add.w	r1, r4, #26
   1c3ae:	f107 0078 	add.w	r0, r7, #120	; 0x78
   1c3b2:	f00d ffd3 	bl	2a35c <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   1c3b6:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1c3ba:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   1c3be:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
   1c3c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
   1c3c6:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1c3ca:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
   1c3ce:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		break;
   1c3d2:	e75f      	b.n	1c294 <ull_conn_tx_ack+0x38>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   1c3d4:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   1c3d6:	2b13      	cmp	r3, #19
   1c3d8:	bf08      	it	eq
   1c3da:	2316      	moveq	r3, #22
   1c3dc:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
		conn->llcp_terminate.ack--;
   1c3e0:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   1c3e4:	3b01      	subs	r3, #1
   1c3e6:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	break;
   1c3ea:	e753      	b.n	1c294 <ull_conn_tx_ack+0x38>
		if (!conn->lll.role) {
   1c3ec:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1c3f0:	2b00      	cmp	r3, #0
   1c3f2:	da52      	bge.n	1c49a <ull_conn_tx_ack+0x23e>
			conn->llcp_enc.pause_tx = 1U;
   1c3f4:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1c3f8:	f043 0302 	orr.w	r3, r3, #2
   1c3fc:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
   1c400:	e748      	b.n	1c294 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_tx = 1U;
   1c402:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1c406:	f023 0306 	bic.w	r3, r3, #6
   1c40a:	f043 0306 	orr.w	r3, r3, #6
   1c40e:	e7d6      	b.n	1c3be <ull_conn_tx_ack+0x162>
		if (conn->lll.role) {
   1c410:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1c414:	2b00      	cmp	r3, #0
   1c416:	db7d      	blt.n	1c514 <ull_conn_tx_ack+0x2b8>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1c418:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
   1c41c:	f043 0303 	orr.w	r3, r3, #3
   1c420:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
   1c424:	e736      	b.n	1c294 <ull_conn_tx_ack+0x38>
		conn->common.txn_lock = 0U;
   1c426:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1c42a:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
		conn->common.txn_lock = 0U;
   1c42e:	f36f 0341 	bfc	r3, #1, #1
   1c432:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1c436:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
   1c43a:	428b      	cmp	r3, r1
   1c43c:	f43f af2a 	beq.w	1c294 <ull_conn_tx_ack+0x38>
			switch (conn->llcp_length.state) {
   1c440:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
   1c444:	f002 0307 	and.w	r3, r2, #7
   1c448:	2b03      	cmp	r3, #3
   1c44a:	d005      	beq.n	1c458 <ull_conn_tx_ack+0x1fc>
   1c44c:	3303      	adds	r3, #3
   1c44e:	f003 0307 	and.w	r3, r3, #7
   1c452:	2b01      	cmp	r3, #1
   1c454:	f63f af70 	bhi.w	1c338 <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
   1c458:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
   1c45c:	87fb      	strh	r3, [r7, #62]	; 0x3e
				conn->lll.max_tx_time =
   1c45e:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
   1c462:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				if (conn->llcp_length.state ==
   1c466:	f002 0307 	and.w	r3, r2, #7
   1c46a:	2b05      	cmp	r3, #5
   1c46c:	d078      	beq.n	1c560 <ull_conn_tx_ack+0x304>
				if (!conn->llcp_length.cache.tx_octets) {
   1c46e:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
   1c472:	2b00      	cmp	r3, #0
   1c474:	d166      	bne.n	1c544 <ull_conn_tx_ack+0x2e8>
					conn->llcp_length.ack =
   1c476:	f887 1185 	strb.w	r1, [r7, #389]	; 0x185
					conn->procedure_expire = 0U;
   1c47a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
   1c47e:	e709      	b.n	1c294 <ull_conn_tx_ack+0x38>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   1c480:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   1c484:	f003 0207 	and.w	r2, r3, #7
   1c488:	2a01      	cmp	r2, #1
   1c48a:	f47f af03 	bne.w	1c294 <ull_conn_tx_ack+0x38>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1c48e:	2202      	movs	r2, #2
   1c490:	f362 0302 	bfi	r3, r2, #0, #3
   1c494:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
   1c498:	e6fc      	b.n	1c294 <ull_conn_tx_ack+0x38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c49a:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1c49c:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c49e:	f043 0303 	orr.w	r3, r3, #3
   1c4a2:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1c4a4:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1c4a6:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1c4a8:	2208      	movs	r2, #8
   1c4aa:	f200 1141 	addw	r1, r0, #321	; 0x141
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1c4ae:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1c4b0:	18a0      	adds	r0, r4, r2
   1c4b2:	f00d ff53 	bl	2a35c <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1c4b6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
   1c4ba:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1c4bc:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
   1c4c0:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1c4c2:	210c      	movs	r1, #12
   1c4c4:	f104 0012 	add.w	r0, r4, #18
   1c4c8:	f001 ffb2 	bl	1e430 <lll_csrand_isr_get>
	    conn->tx_head &&
   1c4cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
	if (
   1c4d0:	b373      	cbz	r3, 1c530 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_enc.pause_tx &&
   1c4d2:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
	    conn->tx_head &&
   1c4d6:	0791      	lsls	r1, r2, #30
   1c4d8:	d42a      	bmi.n	1c530 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_phy.pause_tx &&
   1c4da:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
   1c4de:	07d2      	lsls	r2, r2, #31
   1c4e0:	d426      	bmi.n	1c530 <ull_conn_tx_ack+0x2d4>
		if (conn->tx_head == conn->tx_data) {
   1c4e2:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1c4e6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
   1c4ea:	428b      	cmp	r3, r1
   1c4ec:	d04c      	beq.n	1c588 <ull_conn_tx_ack+0x32c>
		} else if (!conn->tx_ctrl) {
   1c4ee:	2a00      	cmp	r2, #0
   1c4f0:	d056      	beq.n	1c5a0 <ull_conn_tx_ack+0x344>
	tx->next = conn->tx_ctrl_last->next;
   1c4f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
   1c4f6:	681a      	ldr	r2, [r3, #0]
   1c4f8:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1c4fa:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1c4fc:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   1c4fe:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
		if (link->next == (void *)tx) {
   1c502:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   1c504:	b11b      	cbz	r3, 1c50e <ull_conn_tx_ack+0x2b2>
		if (link->next == (void *)tx) {
   1c506:	2a00      	cmp	r2, #0
   1c508:	f43f af03 	beq.w	1c312 <ull_conn_tx_ack+0xb6>
}
   1c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		conn->tx_data_last = tx;
   1c50e:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
   1c512:	e7f8      	b.n	1c506 <ull_conn_tx_ack+0x2aa>
			conn->llcp_enc.pause_rx = 0U;
   1c514:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1c518:	f023 0303 	bic.w	r3, r3, #3
   1c51c:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
			conn->procedure_expire = 0U;
   1c520:	2300      	movs	r3, #0
   1c522:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
			conn->llcp_ack = conn->llcp_req;
   1c526:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   1c52a:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
   1c52e:	e6b1      	b.n	1c294 <ull_conn_tx_ack+0x38>
		if (!conn->tx_ctrl) {
   1c530:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
   1c534:	2a00      	cmp	r2, #0
   1c536:	d1dc      	bne.n	1c4f2 <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head;
   1c538:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1c53a:	e9c7 4467 	strd	r4, r4, [r7, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1c53e:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
   1c542:	e7de      	b.n	1c502 <ull_conn_tx_ack+0x2a6>
				conn->llcp_length.tx_octets =
   1c544:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   1c548:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1c54a:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1c54e:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
				conn->llcp_length.tx_time =
   1c552:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1c556:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
				conn->llcp_length.tx_time =
   1c55a:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
				break;
   1c55e:	e699      	b.n	1c294 <ull_conn_tx_ack+0x38>
					conn->llcp_length.state =
   1c560:	2304      	movs	r3, #4
   1c562:	f363 0202 	bfi	r2, r3, #0, #3
   1c566:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
					break;
   1c56a:	e693      	b.n	1c294 <ull_conn_tx_ack+0x38>
   1c56c:	0002fc68 	.word	0x0002fc68
   1c570:	0002fe1c 	.word	0x0002fe1c
   1c574:	0002f6fc 	.word	0x0002f6fc
   1c578:	0002fe10 	.word	0x0002fe10
   1c57c:	200020d0 	.word	0x200020d0
   1c580:	0002fe28 	.word	0x0002fe28
   1c584:	200037e0 	.word	0x200037e0
			conn->tx_data = conn->tx_data->next;
   1c588:	6819      	ldr	r1, [r3, #0]
   1c58a:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1c58e:	2a00      	cmp	r2, #0
   1c590:	d1af      	bne.n	1c4f2 <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head->next;
   1c592:	681a      	ldr	r2, [r3, #0]
   1c594:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   1c596:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1c598:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1c59a:	e9c7 4468 	strd	r4, r4, [r7, #416]	; 0x1a0
   1c59e:	e7b0      	b.n	1c502 <ull_conn_tx_ack+0x2a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c5a0:	791a      	ldrb	r2, [r3, #4]
   1c5a2:	f002 0203 	and.w	r2, r2, #3
   1c5a6:	2a03      	cmp	r2, #3
   1c5a8:	d002      	beq.n	1c5b0 <ull_conn_tx_ack+0x354>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1c5aa:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
   1c5ae:	e7a0      	b.n	1c4f2 <ull_conn_tx_ack+0x296>
	    ((pdu_data_tx->llctrl.opcode !=
   1c5b0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c5b2:	2a03      	cmp	r2, #3
   1c5b4:	d0ed      	beq.n	1c592 <ull_conn_tx_ack+0x336>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1c5b6:	2a0a      	cmp	r2, #10
   1c5b8:	d1f7      	bne.n	1c5aa <ull_conn_tx_ack+0x34e>
   1c5ba:	e7ea      	b.n	1c592 <ull_conn_tx_ack+0x336>

0001c5bc <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   1c5bc:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   1c5c0:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   1c5c4:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   1c5c6:	bf03      	ittte	eq
   1c5c8:	3301      	addeq	r3, #1
   1c5ca:	f880 30bb 	strbeq.w	r3, [r0, #187]	; 0xbb
	return 0;
   1c5ce:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c5d0:	200c      	movne	r0, #12
}
   1c5d2:	4770      	bx	lr

0001c5d4 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1c5d4:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1c5d8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
	switch (lll->phy_tx_time) {
   1c5da:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1c5de:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1c5e0:	bf14      	ite	ne
   1c5e2:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1c5e4:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1c5e6:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
	return max_tx_octets;
   1c5ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1c5ec:	bf14      	ite	ne
   1c5ee:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1c5f0:	3b0b      	subeq	r3, #11
   1c5f2:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1c5f4:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1c5f6:	bf44      	itt	mi
   1c5f8:	3b04      	submi	r3, #4
   1c5fa:	b29b      	uxthmi	r3, r3
}
   1c5fc:	4298      	cmp	r0, r3
   1c5fe:	bf28      	it	cs
   1c600:	4618      	movcs	r0, r3
   1c602:	4770      	bx	lr

0001c604 <ull_pdu_data_init>:
}
   1c604:	4770      	bx	lr
   1c606:	bf00      	nop

0001c608 <ticker_op_stop_scan_cb>:
}
   1c608:	4770      	bx	lr
   1c60a:	bf00      	nop

0001c60c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c60c:	b900      	cbnz	r0, 1c610 <ticker_op_cb+0x4>
   1c60e:	4770      	bx	lr
{
   1c610:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c612:	4a07      	ldr	r2, [pc, #28]	; (1c630 <ticker_op_cb+0x24>)
   1c614:	4907      	ldr	r1, [pc, #28]	; (1c634 <ticker_op_cb+0x28>)
   1c616:	4808      	ldr	r0, [pc, #32]	; (1c638 <ticker_op_cb+0x2c>)
   1c618:	f240 43ad 	movw	r3, #1197	; 0x4ad
   1c61c:	f00a f99e 	bl	2695c <printk>
   1c620:	4040      	eors	r0, r0
   1c622:	f380 8811 	msr	BASEPRI, r0
   1c626:	f04f 0003 	mov.w	r0, #3
   1c62a:	df02      	svc	2
}
   1c62c:	bd08      	pop	{r3, pc}
   1c62e:	bf00      	nop
   1c630:	0002fe48 	.word	0x0002fe48
   1c634:	0002fcc8 	.word	0x0002fcc8
   1c638:	0002f6fc 	.word	0x0002f6fc

0001c63c <ull_central_ticker_cb>:
{
   1c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c640:	9c07      	ldr	r4, [sp, #28]
   1c642:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1c646:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1c648:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1c64a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c64e:	4299      	cmp	r1, r3
   1c650:	d02d      	beq.n	1c6ae <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1c652:	4606      	mov	r6, r0
   1c654:	4617      	mov	r7, r2
   1c656:	4601      	mov	r1, r0
   1c658:	462a      	mov	r2, r5
   1c65a:	4620      	mov	r0, r4
   1c65c:	f7e5 fb04 	bl	1c68 <ull_conn_llcp>
		if (ret) {
   1c660:	bb28      	cbnz	r0, 1c6ae <ull_central_ticker_cb+0x72>
	return ++hdr->ref;
   1c662:	7823      	ldrb	r3, [r4, #0]
   1c664:	3301      	adds	r3, #1
   1c666:	b2db      	uxtb	r3, r3
   1c668:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1c66a:	b383      	cbz	r3, 1c6ce <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   1c66c:	2002      	movs	r0, #2
   1c66e:	f7ff fa3d 	bl	1baec <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   1c672:	2102      	movs	r1, #2
   1c674:	4620      	mov	r0, r4
   1c676:	f7ff fc65 	bl	1bf44 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   1c67a:	491c      	ldr	r1, [pc, #112]	; (1c6ec <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   1c67c:	4b1c      	ldr	r3, [pc, #112]	; (1c6f0 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   1c67e:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1c680:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1c684:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1c686:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1c688:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1c68c:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1c690:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1c692:	2001      	movs	r0, #1
   1c694:	4611      	mov	r1, r2
   1c696:	f7f8 fc4b 	bl	14f30 <mayfly_enqueue>
	LL_ASSERT(!err);
   1c69a:	b950      	cbnz	r0, 1c6b2 <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   1c69c:	20ff      	movs	r0, #255	; 0xff
   1c69e:	f7ff fa25 	bl	1baec <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1c6a2:	4620      	mov	r0, r4
   1c6a4:	21ff      	movs	r1, #255	; 0xff
}
   1c6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1c6aa:	f7ff bc4b 	b.w	1bf44 <ull_conn_tx_lll_enqueue>
}
   1c6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1c6b2:	4a10      	ldr	r2, [pc, #64]	; (1c6f4 <ull_central_ticker_cb+0xb8>)
   1c6b4:	4910      	ldr	r1, [pc, #64]	; (1c6f8 <ull_central_ticker_cb+0xbc>)
   1c6b6:	4811      	ldr	r0, [pc, #68]	; (1c6fc <ull_central_ticker_cb+0xc0>)
   1c6b8:	f240 434d 	movw	r3, #1101	; 0x44d
   1c6bc:	f00a f94e 	bl	2695c <printk>
   1c6c0:	4040      	eors	r0, r0
   1c6c2:	f380 8811 	msr	BASEPRI, r0
   1c6c6:	f04f 0003 	mov.w	r0, #3
   1c6ca:	df02      	svc	2
   1c6cc:	e7e6      	b.n	1c69c <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   1c6ce:	4a09      	ldr	r2, [pc, #36]	; (1c6f4 <ull_central_ticker_cb+0xb8>)
   1c6d0:	490b      	ldr	r1, [pc, #44]	; (1c700 <ull_central_ticker_cb+0xc4>)
   1c6d2:	480a      	ldr	r0, [pc, #40]	; (1c6fc <ull_central_ticker_cb+0xc0>)
   1c6d4:	f240 433a 	movw	r3, #1082	; 0x43a
   1c6d8:	f00a f940 	bl	2695c <printk>
   1c6dc:	4040      	eors	r0, r0
   1c6de:	f380 8811 	msr	BASEPRI, r0
   1c6e2:	f04f 0003 	mov.w	r0, #3
   1c6e6:	df02      	svc	2
   1c6e8:	e7c0      	b.n	1c66c <ull_central_ticker_cb+0x30>
   1c6ea:	bf00      	nop
   1c6ec:	200038e8 	.word	0x200038e8
   1c6f0:	2000073c 	.word	0x2000073c
   1c6f4:	0002fe48 	.word	0x0002fe48
   1c6f8:	0002fa74 	.word	0x0002fa74
   1c6fc:	0002f6fc 	.word	0x0002f6fc
   1c700:	0002fc38 	.word	0x0002fc38

0001c704 <ll_connect_disable>:
{
   1c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c708:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1c70a:	2000      	movs	r0, #0
   1c70c:	f7fc ff92 	bl	19634 <ull_scan_is_enabled_get>
	if (!scan) {
   1c710:	b368      	cbz	r0, 1c76e <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   1c712:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   1c714:	4604      	mov	r4, r0
   1c716:	b353      	cbz	r3, 1c76e <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   1c718:	f893 2020 	ldrb.w	r2, [r3, #32]
   1c71c:	f042 0202 	orr.w	r2, r2, #2
   1c720:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   1c724:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   1c726:	b317      	cbz	r7, 1c76e <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   1c728:	4601      	mov	r1, r0
   1c72a:	2000      	movs	r0, #0
   1c72c:	f7fc fed2 	bl	194d4 <ull_scan_disable>
	if (!err) {
   1c730:	4605      	mov	r5, r0
   1c732:	b9c8      	cbnz	r0, 1c768 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   1c734:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   1c736:	f8d7 811c 	ldr.w	r8, [r7, #284]	; 0x11c
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   1c73a:	f507 798e 	add.w	r9, r7, #284	; 0x11c
		LL_ASSERT(link);
   1c73e:	f1b8 0f00 	cmp.w	r8, #0
   1c742:	d018      	beq.n	1c776 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   1c744:	4640      	mov	r0, r8
   1c746:	f7fc f9ff 	bl	18b48 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1c74a:	2316      	movs	r3, #22
   1c74c:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		node_rx->hdr.handle = 0xffff;
   1c750:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c754:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		scan_lll = &scan->lll;
   1c758:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c75a:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   1c75c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c760:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		*rx = node_rx;
   1c764:	f8c6 9000 	str.w	r9, [r6]
}
   1c768:	4628      	mov	r0, r5
   1c76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1c76e:	250c      	movs	r5, #12
}
   1c770:	4628      	mov	r0, r5
   1c772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1c776:	4a07      	ldr	r2, [pc, #28]	; (1c794 <ll_connect_disable+0x90>)
   1c778:	4907      	ldr	r1, [pc, #28]	; (1c798 <ll_connect_disable+0x94>)
   1c77a:	4808      	ldr	r0, [pc, #32]	; (1c79c <ll_connect_disable+0x98>)
   1c77c:	f240 235b 	movw	r3, #603	; 0x25b
   1c780:	f00a f8ec 	bl	2695c <printk>
   1c784:	4040      	eors	r0, r0
   1c786:	f380 8811 	msr	BASEPRI, r0
   1c78a:	f04f 0003 	mov.w	r0, #3
   1c78e:	df02      	svc	2
   1c790:	e7d8      	b.n	1c744 <ll_connect_disable+0x40>
   1c792:	bf00      	nop
   1c794:	0002fe48 	.word	0x0002fe48
   1c798:	0002fcc0 	.word	0x0002fcc0
   1c79c:	0002f6fc 	.word	0x0002f6fc

0001c7a0 <ll_enc_req_send>:
{
   1c7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c7a4:	4607      	mov	r7, r0
   1c7a6:	4688      	mov	r8, r1
   1c7a8:	4691      	mov	r9, r2
   1c7aa:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1c7ac:	f7fd fbca 	bl	19f44 <ll_connected_get>
	if (!conn) {
   1c7b0:	2800      	cmp	r0, #0
   1c7b2:	d06a      	beq.n	1c88a <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   1c7b4:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
   1c7b8:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
   1c7bc:	429a      	cmp	r2, r3
   1c7be:	4604      	mov	r4, r0
   1c7c0:	d142      	bne.n	1c848 <ll_enc_req_send+0xa8>
   1c7c2:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   1c7c6:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   1c7ca:	429a      	cmp	r2, r3
   1c7cc:	d003      	beq.n	1c7d6 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   1c7ce:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
   1c7d2:	2b03      	cmp	r3, #3
   1c7d4:	d038      	beq.n	1c848 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   1c7d6:	f7fd fbc7 	bl	19f68 <ll_tx_mem_acquire>
	if (tx) {
   1c7da:	4605      	mov	r5, r0
   1c7dc:	b3a0      	cbz	r0, 1c848 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   1c7de:	3004      	adds	r0, #4
   1c7e0:	f7ff ff10 	bl	1c604 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   1c7e4:	4631      	mov	r1, r6
   1c7e6:	2210      	movs	r2, #16
   1c7e8:	f204 1049 	addw	r0, r4, #329	; 0x149
   1c7ec:	f00d fdb6 	bl	2a35c <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   1c7f0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1c7f4:	f013 0318 	ands.w	r3, r3, #24
   1c7f8:	d029      	beq.n	1c84e <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1c7fa:	2b18      	cmp	r3, #24
   1c7fc:	d121      	bne.n	1c842 <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   1c7fe:	2208      	movs	r2, #8
   1c800:	4641      	mov	r1, r8
   1c802:	f204 1041 	addw	r0, r4, #321	; 0x141
   1c806:	f00d fda9 	bl	2a35c <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   1c80a:	f899 3000 	ldrb.w	r3, [r9]
   1c80e:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
			conn->llcp_enc.ediv[1] = ediv[1];
   1c812:	f899 3001 	ldrb.w	r3, [r9, #1]
   1c816:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c81a:	792b      	ldrb	r3, [r5, #4]
   1c81c:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1c820:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c822:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   1c824:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1c826:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1c828:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   1c82a:	4629      	mov	r1, r5
   1c82c:	4638      	mov	r0, r7
   1c82e:	f7fd fba7 	bl	19f80 <ll_tx_mem_enqueue>
   1c832:	b930      	cbnz	r0, 1c842 <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   1c834:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
   1c838:	3301      	adds	r3, #1
   1c83a:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
}
   1c83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   1c842:	4628      	mov	r0, r5
   1c844:	f7fd fb96 	bl	19f74 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1c848:	200c      	movs	r0, #12
}
   1c84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c84e:	792b      	ldrb	r3, [r5, #4]
   1c850:	f043 0303 	orr.w	r3, r3, #3
   1c854:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   1c856:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1c858:	2208      	movs	r2, #8
			pdu_data_tx->len =
   1c85a:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1c85c:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1c85e:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   1c860:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   1c862:	18a8      	adds	r0, r5, r2
   1c864:	f00d fd7a 	bl	2a35c <memcpy>
			enc_req->ediv[0] = ediv[0];
   1c868:	f899 3000 	ldrb.w	r3, [r9]
   1c86c:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   1c86e:	f899 3001 	ldrb.w	r3, [r9, #1]
   1c872:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   1c874:	2108      	movs	r1, #8
   1c876:	f105 0012 	add.w	r0, r5, #18
   1c87a:	f001 fdcb 	bl	1e414 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   1c87e:	2104      	movs	r1, #4
   1c880:	f105 001a 	add.w	r0, r5, #26
   1c884:	f001 fdc6 	bl	1e414 <lll_csrand_get>
   1c888:	e7cf      	b.n	1c82a <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c88a:	2002      	movs	r0, #2
}
   1c88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c890 <ull_central_reset>:
{
   1c890:	b530      	push	{r4, r5, lr}
   1c892:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   1c894:	a801      	add	r0, sp, #4
   1c896:	f7ff ff35 	bl	1c704 <ll_connect_disable>
	if (!err) {
   1c89a:	4604      	mov	r4, r0
   1c89c:	b110      	cbz	r0, 1c8a4 <ull_central_reset+0x14>
}
   1c89e:	4620      	mov	r0, r4
   1c8a0:	b003      	add	sp, #12
   1c8a2:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1c8a4:	f7fc fec6 	bl	19634 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   1c8a8:	4605      	mov	r5, r0
   1c8aa:	b150      	cbz	r0, 1c8c2 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   1c8ac:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1c8b0:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   1c8b2:	f36f 0300 	bfc	r3, #0, #1
}
   1c8b6:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   1c8b8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1c8bc:	622a      	str	r2, [r5, #32]
}
   1c8be:	b003      	add	sp, #12
   1c8c0:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   1c8c2:	4a07      	ldr	r2, [pc, #28]	; (1c8e0 <ull_central_reset+0x50>)
   1c8c4:	4907      	ldr	r1, [pc, #28]	; (1c8e4 <ull_central_reset+0x54>)
   1c8c6:	4808      	ldr	r0, [pc, #32]	; (1c8e8 <ull_central_reset+0x58>)
   1c8c8:	f240 23e9 	movw	r3, #745	; 0x2e9
   1c8cc:	f00a f846 	bl	2695c <printk>
   1c8d0:	4040      	eors	r0, r0
   1c8d2:	f380 8811 	msr	BASEPRI, r0
   1c8d6:	f04f 0003 	mov.w	r0, #3
   1c8da:	df02      	svc	2
   1c8dc:	e7e6      	b.n	1c8ac <ull_central_reset+0x1c>
   1c8de:	bf00      	nop
   1c8e0:	0002fe48 	.word	0x0002fe48
   1c8e4:	0003037c 	.word	0x0003037c
   1c8e8:	0002f6fc 	.word	0x0002f6fc

0001c8ec <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1c8ec:	6883      	ldr	r3, [r0, #8]
{
   1c8ee:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1c8f0:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   1c8f2:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   1c8f4:	b31c      	cbz	r4, 1c93e <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   1c8f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->lll.conn = NULL;
   1c8f8:	2200      	movs	r2, #0
   1c8fa:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   1c8fc:	b163      	cbz	r3, 1c918 <ull_central_cleanup+0x2c>
   1c8fe:	4a1e      	ldr	r2, [pc, #120]	; (1c978 <ull_central_cleanup+0x8c>)
   1c900:	491e      	ldr	r1, [pc, #120]	; (1c97c <ull_central_cleanup+0x90>)
   1c902:	481f      	ldr	r0, [pc, #124]	; (1c980 <ull_central_cleanup+0x94>)
   1c904:	f240 3305 	movw	r3, #773	; 0x305
   1c908:	f00a f828 	bl	2695c <printk>
   1c90c:	4040      	eors	r0, r0
   1c90e:	f380 8811 	msr	BASEPRI, r0
   1c912:	f04f 0003 	mov.w	r0, #3
   1c916:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   1c918:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1c91c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1c920:	f7f8 fa88 	bl	14e34 <memq_deinit>
	LL_ASSERT(link);
   1c924:	4606      	mov	r6, r0
   1c926:	b1c0      	cbz	r0, 1c95a <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   1c928:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   1c92a:	63e6      	str	r6, [r4, #60]	; 0x3c
	ll_conn_release(conn);
   1c92c:	f7fd faf4 	bl	19f18 <ll_conn_release>
	scan->is_enabled = 0U;
   1c930:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1c934:	f36f 0300 	bfc	r3, #0, #1
   1c938:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   1c93c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   1c93e:	4a0e      	ldr	r2, [pc, #56]	; (1c978 <ull_central_cleanup+0x8c>)
   1c940:	4910      	ldr	r1, [pc, #64]	; (1c984 <ull_central_cleanup+0x98>)
   1c942:	480f      	ldr	r0, [pc, #60]	; (1c980 <ull_central_cleanup+0x94>)
   1c944:	f240 3302 	movw	r3, #770	; 0x302
   1c948:	f00a f808 	bl	2695c <printk>
   1c94c:	4040      	eors	r0, r0
   1c94e:	f380 8811 	msr	BASEPRI, r0
   1c952:	f04f 0003 	mov.w	r0, #3
   1c956:	df02      	svc	2
   1c958:	e7cd      	b.n	1c8f6 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   1c95a:	4a07      	ldr	r2, [pc, #28]	; (1c978 <ull_central_cleanup+0x8c>)
   1c95c:	490a      	ldr	r1, [pc, #40]	; (1c988 <ull_central_cleanup+0x9c>)
   1c95e:	4808      	ldr	r0, [pc, #32]	; (1c980 <ull_central_cleanup+0x94>)
   1c960:	f44f 7342 	mov.w	r3, #776	; 0x308
   1c964:	f009 fffa 	bl	2695c <printk>
   1c968:	4040      	eors	r0, r0
   1c96a:	f380 8811 	msr	BASEPRI, r0
   1c96e:	f04f 0003 	mov.w	r0, #3
   1c972:	df02      	svc	2
   1c974:	e7d8      	b.n	1c928 <ull_central_cleanup+0x3c>
   1c976:	bf00      	nop
   1c978:	0002fe48 	.word	0x0002fe48
   1c97c:	0002feac 	.word	0x0002feac
   1c980:	0002f6fc 	.word	0x0002f6fc
   1c984:	0002fea0 	.word	0x0002fea0
   1c988:	0002fcc0 	.word	0x0002fcc0

0001c98c <ull_central_chm_update>:
{
   1c98c:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   1c98e:	2000      	movs	r0, #0
   1c990:	f7fd fad8 	bl	19f44 <ll_connected_get>
		if (!conn || conn->lll.role) {
   1c994:	4604      	mov	r4, r0
   1c996:	b1d8      	cbz	r0, 1c9d0 <ull_central_chm_update+0x44>
   1c998:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1c99c:	2b00      	cmp	r3, #0
   1c99e:	db17      	blt.n	1c9d0 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   1c9a0:	f7ff fe0c 	bl	1c5bc <ull_conn_llcp_req>
		if (ret) {
   1c9a4:	4605      	mov	r5, r0
   1c9a6:	b988      	cbnz	r0, 1c9cc <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   1c9a8:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   1c9ac:	f000 f9c0 	bl	1cd30 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   1c9b0:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
   1c9b4:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
		conn->llcp.chan_map.initiate = 1U;
   1c9b8:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1c9bc:	2102      	movs	r1, #2
		conn->llcp_req++;
   1c9be:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   1c9c0:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_CHAN_MAP;
   1c9c4:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		conn->llcp_req++;
   1c9c8:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
}
   1c9cc:	4628      	mov	r0, r5
   1c9ce:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1c9d0:	2500      	movs	r5, #0
}
   1c9d2:	4628      	mov	r0, r5
   1c9d4:	bd38      	pop	{r3, r4, r5, pc}
   1c9d6:	bf00      	nop

0001c9d8 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   1c9d8:	6008      	str	r0, [r1, #0]
}
   1c9da:	4770      	bx	lr

0001c9dc <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9e0:	b091      	sub	sp, #68	; 0x44
   1c9e2:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   1c9e6:	9305      	str	r3, [sp, #20]
	if (conn_curr->lll.role) {
   1c9e8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1c9ec:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1c9ee:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1c9f0:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   1c9f4:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   1c9f6:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1c9f8:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   1c9fa:	da02      	bge.n	1ca02 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   1c9fc:	4613      	mov	r3, r2
   1c9fe:	3314      	adds	r3, #20
   1ca00:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1ca02:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1ca04:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1ca08:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   1ca0c:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1cc5c <win_offset_calc.constprop.0+0x280>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1ca10:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   1ca14:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1ca16:	f8cd 9018 	str.w	r9, [sp, #24]
		ticks_anchor_prev = offset_index = offset = 0U;
   1ca1a:	46b3      	mov	fp, r6
	ticks_slot_abs_prev = 0U;
   1ca1c:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1ca1e:	4635      	mov	r5, r6
   1ca20:	e044      	b.n	1caac <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   1ca22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1ca26:	2bff      	cmp	r3, #255	; 0xff
   1ca28:	d064      	beq.n	1caf4 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   1ca2a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1ca2e:	d011      	beq.n	1ca54 <win_offset_calc.constprop.0+0x78>
   1ca30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ca32:	455a      	cmp	r2, fp
   1ca34:	d00e      	beq.n	1ca54 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   1ca36:	498a      	ldr	r1, [pc, #552]	; (1cc60 <win_offset_calc.constprop.0+0x284>)
   1ca38:	488a      	ldr	r0, [pc, #552]	; (1cc64 <win_offset_calc.constprop.0+0x288>)
   1ca3a:	f240 13c3 	movw	r3, #451	; 0x1c3
   1ca3e:	4652      	mov	r2, sl
   1ca40:	f009 ff8c 	bl	2695c <printk>
   1ca44:	4040      	eors	r0, r0
   1ca46:	f380 8811 	msr	BASEPRI, r0
   1ca4a:	f04f 0003 	mov.w	r0, #3
   1ca4e:	df02      	svc	2
		if ((ticker_id < TICKER_ID_SCAN_BASE) ||
   1ca50:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1ca54:	1e9a      	subs	r2, r3, #2
   1ca56:	2a01      	cmp	r2, #1
   1ca58:	d824      	bhi.n	1caa4 <win_offset_calc.constprop.0+0xc8>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   1ca5a:	2b02      	cmp	r3, #2
   1ca5c:	f000 80da 	beq.w	1cc14 <win_offset_calc.constprop.0+0x238>
		if (ticker_id_other != 0xff) {
   1ca60:	9b06      	ldr	r3, [sp, #24]
   1ca62:	2bff      	cmp	r3, #255	; 0xff
   1ca64:	d176      	bne.n	1cb54 <win_offset_calc.constprop.0+0x178>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   1ca66:	2000      	movs	r0, #0
   1ca68:	f7fd fa64 	bl	19f34 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   1ca6c:	9b07      	ldr	r3, [sp, #28]
   1ca6e:	4283      	cmp	r3, r0
   1ca70:	d018      	beq.n	1caa4 <win_offset_calc.constprop.0+0xc8>
   1ca72:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ca74:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1ca78:	2a00      	cmp	r2, #0
   1ca7a:	d17a      	bne.n	1cb72 <win_offset_calc.constprop.0+0x196>
   1ca7c:	2b00      	cmp	r3, #0
   1ca7e:	db11      	blt.n	1caa4 <win_offset_calc.constprop.0+0xc8>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1ca80:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1ca82:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   1ca86:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1ca8a:	3328      	adds	r3, #40	; 0x28
   1ca8c:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1ca8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ca90:	681b      	ldr	r3, [r3, #0]
   1ca92:	454b      	cmp	r3, r9
   1ca94:	d37b      	bcc.n	1cb8e <win_offset_calc.constprop.0+0x1b2>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1ca96:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   1ca98:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1ca9c:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   1ca9e:	464d      	mov	r5, r9
   1caa0:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   1caa4:	783b      	ldrb	r3, [r7, #0]
   1caa6:	42a3      	cmp	r3, r4
   1caa8:	f240 80b9 	bls.w	1cc1e <win_offset_calc.constprop.0+0x242>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1caac:	ab0f      	add	r3, sp, #60	; 0x3c
   1caae:	9302      	str	r3, [sp, #8]
   1cab0:	4b6d      	ldr	r3, [pc, #436]	; (1cc68 <win_offset_calc.constprop.0+0x28c>)
   1cab2:	9301      	str	r3, [sp, #4]
   1cab4:	ab0d      	add	r3, sp, #52	; 0x34
   1cab6:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   1cab8:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1caba:	ab0e      	add	r3, sp, #56	; 0x38
   1cabc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1cac0:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   1cac2:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1cac4:	f7f9 fccc 	bl	16460 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1cac8:	2802      	cmp	r0, #2
   1caca:	d047      	beq.n	1cb5c <win_offset_calc.constprop.0+0x180>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   1cacc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   1cace:	2b00      	cmp	r3, #0
   1cad0:	d0a7      	beq.n	1ca22 <win_offset_calc.constprop.0+0x46>
   1cad2:	4966      	ldr	r1, [pc, #408]	; (1cc6c <win_offset_calc.constprop.0+0x290>)
   1cad4:	4863      	ldr	r0, [pc, #396]	; (1cc64 <win_offset_calc.constprop.0+0x288>)
   1cad6:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   1cada:	4652      	mov	r2, sl
   1cadc:	f009 ff3e 	bl	2695c <printk>
   1cae0:	4040      	eors	r0, r0
   1cae2:	f380 8811 	msr	BASEPRI, r0
   1cae6:	f04f 0003 	mov.w	r0, #3
   1caea:	df02      	svc	2
		if (ticker_id == 0xff) {
   1caec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1caf0:	2bff      	cmp	r3, #255	; 0xff
   1caf2:	d19a      	bne.n	1ca2a <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1caf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1caf6:	681b      	ldr	r3, [r3, #0]
   1caf8:	429d      	cmp	r5, r3
   1cafa:	bf38      	it	cc
   1cafc:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1cafe:	783b      	ldrb	r3, [r7, #0]
   1cb00:	42a3      	cmp	r3, r4
   1cb02:	d925      	bls.n	1cb50 <win_offset_calc.constprop.0+0x174>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1cb04:	9b04      	ldr	r3, [sp, #16]
   1cb06:	495a      	ldr	r1, [pc, #360]	; (1cc70 <win_offset_calc.constprop.0+0x294>)
			if (offset >= conn_interval) {
   1cb08:	9805      	ldr	r0, [sp, #20]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1cb0a:	442b      	add	r3, r5
   1cb0c:	fba1 2303 	umull	r2, r3, r1, r3
   1cb10:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   1cb14:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1cb16:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   1cb1a:	f240 8096 	bls.w	1cc4a <win_offset_calc.constprop.0+0x26e>
   1cb1e:	e9dd 6c04 	ldrd	r6, ip, [sp, #16]
   1cb22:	e002      	b.n	1cb2a <win_offset_calc.constprop.0+0x14e>
   1cb24:	4594      	cmp	ip, r2
   1cb26:	f240 8090 	bls.w	1cc4a <win_offset_calc.constprop.0+0x26e>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   1cb2a:	eb08 0044 	add.w	r0, r8, r4, lsl #1
	dst[0] = val;
   1cb2e:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   1cb32:	0a12      	lsrs	r2, r2, #8
   1cb34:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   1cb36:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   1cb38:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   1cb3a:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   1cb3c:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1cb3e:	1973      	adds	r3, r6, r5
   1cb40:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   1cb44:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1cb46:	f3c3 124f 	ubfx	r2, r3, #5, #16
   1cb4a:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   1cb4e:	d8e9      	bhi.n	1cb24 <win_offset_calc.constprop.0+0x148>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1cb50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cb52:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   1cb54:	703c      	strb	r4, [r7, #0]
}
   1cb56:	b011      	add	sp, #68	; 0x44
   1cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (ret_cb == TICKER_STATUS_BUSY) {
   1cb5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cb5e:	2b02      	cmp	r3, #2
   1cb60:	d1b4      	bne.n	1cacc <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   1cb62:	2102      	movs	r1, #2
   1cb64:	2000      	movs	r0, #0
   1cb66:	f7f9 fcc1 	bl	164ec <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1cb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cb6c:	2b02      	cmp	r3, #2
   1cb6e:	d0f8      	beq.n	1cb62 <win_offset_calc.constprop.0+0x186>
   1cb70:	e7ac      	b.n	1cacc <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   1cb72:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1cb74:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1cb76:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			if (conn->lll.role) {
   1cb7a:	da5a      	bge.n	1cc32 <win_offset_calc.constprop.0+0x256>
				ticks_slot_abs_curr += ticks_slot_margin;
   1cb7c:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   1cb80:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1cb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cb84:	681b      	ldr	r3, [r3, #0]
   1cb86:	454b      	cmp	r3, r9
				ticks_slot_margin =
   1cb88:	f04f 0b14 	mov.w	fp, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1cb8c:	d283      	bcs.n	1ca96 <win_offset_calc.constprop.0+0xba>
				if (ticks_to_expire_prev <
   1cb8e:	429d      	cmp	r5, r3
   1cb90:	bf38      	it	cc
   1cb92:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   1cb94:	783b      	ldrb	r3, [r7, #0]
   1cb96:	42a3      	cmp	r3, r4
   1cb98:	d931      	bls.n	1cbfe <win_offset_calc.constprop.0+0x222>
					(ticks_slot_abs_prev + ticks_slot_abs +
   1cb9a:	9b04      	ldr	r3, [sp, #16]
   1cb9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1cb9e:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
   1cba2:	4413      	add	r3, r2
   1cba4:	449b      	add	fp, r3
   1cba6:	46b0      	mov	r8, r6
   1cba8:	462e      	mov	r6, r5
   1cbaa:	465d      	mov	r5, fp
   1cbac:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   1cbb0:	e013      	b.n	1cbda <win_offset_calc.constprop.0+0x1fe>
					if (offset >= conn_interval) {
   1cbb2:	9a05      	ldr	r2, [sp, #20]
					offset = (ticks_to_expire_prev +
   1cbb4:	f3c3 184f 	ubfx	r8, r3, #5, #16
					if (offset >= conn_interval) {
   1cbb8:	4590      	cmp	r8, r2
					ticks_to_expire_prev +=
   1cbba:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1cbbe:	ea4f 2018 	mov.w	r0, r8, lsr #8
						  ticks_slot_abs_prev) /
   1cbc2:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   1cbc6:	d244      	bcs.n	1cc52 <win_offset_calc.constprop.0+0x276>
	dst[0] = val;
   1cbc8:	f80b 3014 	strb.w	r3, [fp, r4, lsl #1]
	dst[1] = val >> 8;
   1cbcc:	f88c 0001 	strb.w	r0, [ip, #1]
				while ((offset_index < *offset_max) &&
   1cbd0:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   1cbd2:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
   1cbd6:	42a3      	cmp	r3, r4
   1cbd8:	d931      	bls.n	1cc3e <win_offset_calc.constprop.0+0x262>
				       (ticker_ticks_diff_get(
   1cbda:	4631      	mov	r1, r6
   1cbdc:	4648      	mov	r0, r9
   1cbde:	f7f9 fc9f 	bl	16520 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   1cbe2:	9b04      	ldr	r3, [sp, #16]
   1cbe4:	4a22      	ldr	r2, [pc, #136]	; (1cc70 <win_offset_calc.constprop.0+0x294>)
   1cbe6:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   1cbe8:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   1cbea:	eb0b 0c44 	add.w	ip, fp, r4, lsl #1
						  ticks_slot_abs_prev) /
   1cbee:	fba2 2303 	umull	r2, r3, r2, r3
					offset_index++;
   1cbf2:	f104 0e01 	add.w	lr, r4, #1
				while ((offset_index < *offset_max) &&
   1cbf6:	d2dc      	bcs.n	1cbb2 <win_offset_calc.constprop.0+0x1d6>
   1cbf8:	4635      	mov	r5, r6
   1cbfa:	4646      	mov	r6, r8
   1cbfc:	46d8      	mov	r8, fp
				*ticks_to_offset_next = ticks_to_expire_prev;
   1cbfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cc00:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1cc02:	9b05      	ldr	r3, [sp, #20]
   1cc04:	42b3      	cmp	r3, r6
   1cc06:	f63f af46 	bhi.w	1ca96 <win_offset_calc.constprop.0+0xba>
	if (ticker_id == 0xff) {
   1cc0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1cc0e:	2bff      	cmp	r3, #255	; 0xff
   1cc10:	d1a0      	bne.n	1cb54 <win_offset_calc.constprop.0+0x178>
   1cc12:	e76f      	b.n	1caf4 <win_offset_calc.constprop.0+0x118>
			ticker_id_other = ticker_id;
   1cc14:	9306      	str	r3, [sp, #24]
	} while (offset_index < *offset_max);
   1cc16:	783b      	ldrb	r3, [r7, #0]
   1cc18:	42a3      	cmp	r3, r4
   1cc1a:	f63f af47 	bhi.w	1caac <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   1cc1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1cc22:	2bff      	cmp	r3, #255	; 0xff
   1cc24:	d196      	bne.n	1cb54 <win_offset_calc.constprop.0+0x178>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1cc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cc28:	681b      	ldr	r3, [r3, #0]
   1cc2a:	429d      	cmp	r5, r3
   1cc2c:	bf38      	it	cc
   1cc2e:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1cc30:	e78e      	b.n	1cb50 <win_offset_calc.constprop.0+0x174>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1cc32:	f101 0328 	add.w	r3, r1, #40	; 0x28
   1cc36:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   1cc38:	f04f 0b00 	mov.w	fp, #0
   1cc3c:	e727      	b.n	1ca8e <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cc40:	4635      	mov	r5, r6
   1cc42:	601d      	str	r5, [r3, #0]
   1cc44:	4646      	mov	r6, r8
   1cc46:	46d8      	mov	r8, fp
				if (offset >= conn_interval) {
   1cc48:	e725      	b.n	1ca96 <win_offset_calc.constprop.0+0xba>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1cc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   1cc4c:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1cc4e:	601d      	str	r5, [r3, #0]
   1cc50:	e780      	b.n	1cb54 <win_offset_calc.constprop.0+0x178>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1cc52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cc54:	2500      	movs	r5, #0
   1cc56:	46d8      	mov	r8, fp
   1cc58:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1cc5a:	e7d6      	b.n	1cc0a <win_offset_calc.constprop.0+0x22e>
   1cc5c:	0002fed8 	.word	0x0002fed8
   1cc60:	0002f794 	.word	0x0002f794
   1cc64:	0002f6fc 	.word	0x0002f6fc
   1cc68:	0001c9d9 	.word	0x0001c9d9
   1cc6c:	0002ff1c 	.word	0x0002ff1c
   1cc70:	cccccccd 	.word	0xcccccccd

0001cc74 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1cc74:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1cc76:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   1cc78:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   1cc7a:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   1cc7c:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   1cc7e:	89c0      	ldrh	r0, [r0, #14]
   1cc80:	6909      	ldr	r1, [r1, #16]
   1cc82:	3310      	adds	r3, #16
   1cc84:	f7e7 b974 	b.w	3f70 <after_mstr_offset_get>

0001cc88 <ull_sched_mfy_win_offset_use>:
{
   1cc88:	b510      	push	{r4, lr}
   1cc8a:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   1cc8c:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
   1cc90:	6901      	ldr	r1, [r0, #16]
   1cc92:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1cc96:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   1cc98:	f7e7 f96a 	bl	3f70 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1cc9c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1cca0:	4908      	ldr	r1, [pc, #32]	; (1ccc4 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   1cca2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1cca6:	fba1 1303 	umull	r1, r3, r1, r3
   1ccaa:	0a9b      	lsrs	r3, r3, #10
   1ccac:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   1ccb0:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   1ccb2:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   1ccb4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1ccb8:	2204      	movs	r2, #4
   1ccba:	f362 0302 	bfi	r3, r2, #0, #3
   1ccbe:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
   1ccc2:	bd10      	pop	{r4, pc}
   1ccc4:	d1b71759 	.word	0xd1b71759

0001ccc8 <ull_sched_mfy_free_win_offset_calc>:
{
   1ccc8:	b510      	push	{r4, lr}
   1ccca:	b084      	sub	sp, #16
   1cccc:	4604      	mov	r4, r0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1ccce:	f8d0 c178 	ldr.w	ip, [r0, #376]	; 0x178
   1ccd2:	f8cd c004 	str.w	ip, [sp, #4]
   1ccd6:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   1ccda:	2206      	movs	r2, #6
	uint32_t ticks_to_offset_default = 0U;
   1ccdc:	2100      	movs	r1, #0
	uint8_t offset_max = 6U;
   1ccde:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1cce2:	9300      	str	r3, [sp, #0]
   1cce4:	aa03      	add	r2, sp, #12
   1cce6:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
	uint32_t ticks_to_offset_default = 0U;
   1ccea:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1ccec:	f7ff fe76 	bl	1c9dc <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   1ccf0:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1ccf4:	2208      	movs	r2, #8
   1ccf6:	f362 0303 	bfi	r3, r2, #0, #4
   1ccfa:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
}
   1ccfe:	b004      	add	sp, #16
   1cd00:	bd10      	pop	{r4, pc}
   1cd02:	bf00      	nop

0001cd04 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   1cd04:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   1cd06:	4c08      	ldr	r4, [pc, #32]	; (1cd28 <ll_chm_update+0x24>)
   1cd08:	2205      	movs	r2, #5
{
   1cd0a:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   1cd0c:	4620      	mov	r0, r4
   1cd0e:	f00d fb25 	bl	2a35c <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   1cd12:	2105      	movs	r1, #5
   1cd14:	4620      	mov	r0, r4
   1cd16:	f7f8 fa09 	bl	1512c <util_ones_count_get>
   1cd1a:	4b04      	ldr	r3, [pc, #16]	; (1cd2c <ll_chm_update+0x28>)
   1cd1c:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   1cd1e:	f7ff fe35 	bl	1c98c <ull_central_chm_update>
}
   1cd22:	2000      	movs	r0, #0
   1cd24:	bd10      	pop	{r4, pc}
   1cd26:	bf00      	nop
   1cd28:	2000074c 	.word	0x2000074c
   1cd2c:	200009a1 	.word	0x200009a1

0001cd30 <ull_chan_map_get>:
{
   1cd30:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   1cd32:	4903      	ldr	r1, [pc, #12]	; (1cd40 <ull_chan_map_get+0x10>)
   1cd34:	2205      	movs	r2, #5
   1cd36:	f00d fb11 	bl	2a35c <memcpy>
	return count;
   1cd3a:	4b02      	ldr	r3, [pc, #8]	; (1cd44 <ull_chan_map_get+0x14>)
}
   1cd3c:	7818      	ldrb	r0, [r3, #0]
   1cd3e:	bd08      	pop	{r3, pc}
   1cd40:	2000074c 	.word	0x2000074c
   1cd44:	200009a1 	.word	0x200009a1

0001cd48 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1cd48:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1cd4a:	fb02 1c01 	mla	ip, r2, r1, r1
   1cd4e:	7802      	ldrb	r2, [r0, #0]
   1cd50:	491c      	ldr	r1, [pc, #112]	; (1cdc4 <lll_chan_sel_1+0x7c>)
{
   1cd52:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1cd56:	4494      	add	ip, r2
   1cd58:	fb81 210c 	smull	r2, r1, r1, ip
   1cd5c:	4461      	add	r1, ip
   1cd5e:	1149      	asrs	r1, r1, #5
   1cd60:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1cd64:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   1cd68:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1cd6a:	ebac 0101 	sub.w	r1, ip, r1
   1cd6e:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   1cd70:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1cd72:	08c4      	lsrs	r4, r0, #3
   1cd74:	f001 0107 	and.w	r1, r1, #7
   1cd78:	f813 c004 	ldrb.w	ip, [r3, r4]
   1cd7c:	fa4c f101 	asr.w	r1, ip, r1
   1cd80:	f011 0101 	ands.w	r1, r1, #1
   1cd84:	d11d      	bne.n	1cdc2 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1cd86:	fbb0 f2f5 	udiv	r2, r0, r5
   1cd8a:	fb05 0212 	mls	r2, r5, r2, r0
   1cd8e:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1cd90:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1cd94:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1cd96:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1cd98:	f100 0c08 	add.w	ip, r0, #8
   1cd9c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1cda0:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1cda4:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1cda8:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1cdac:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1cdb0:	d002      	beq.n	1cdb8 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1cdb2:	b132      	cbz	r2, 1cdc2 <lll_chan_sel_1+0x7a>
				chan_index--;
   1cdb4:	3a01      	subs	r2, #1
   1cdb6:	b2d2      	uxtb	r2, r2
			chan_next++;
   1cdb8:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1cdba:	4584      	cmp	ip, r0
   1cdbc:	d1f2      	bne.n	1cda4 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1cdbe:	45a6      	cmp	lr, r4
   1cdc0:	d1ea      	bne.n	1cd98 <lll_chan_sel_1+0x50>
}
   1cdc2:	bd30      	pop	{r4, r5, pc}
   1cdc4:	dd67c8a7 	.word	0xdd67c8a7

0001cdc8 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   1cdc8:	8842      	ldrh	r2, [r0, #2]
   1cdca:	8800      	ldrh	r0, [r0, #0]
}
   1cdcc:	4050      	eors	r0, r2
   1cdce:	4770      	bx	lr

0001cdd0 <lll_chan_sel_2>:
{
   1cdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1cdd2:	4d2f      	ldr	r5, [pc, #188]	; (1ce90 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1cdd4:	4c2f      	ldr	r4, [pc, #188]	; (1ce94 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1cdd6:	4048      	eors	r0, r1
   1cdd8:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1cddc:	0a07      	lsrs	r7, r0, #8
   1cdde:	b2c0      	uxtb	r0, r0
   1cde0:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   1cde4:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1cde8:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1cdec:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1cdf0:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   1cdf4:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1cdf8:	433e      	orrs	r6, r7
   1cdfa:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1cdfe:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1ce02:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1ce06:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1ce0a:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1ce0e:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1ce10:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1ce14:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1ce18:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1ce1c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1ce20:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1ce22:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1ce26:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1ce28:	d1d8      	bne.n	1cddc <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1ce2a:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1ce2c:	481a      	ldr	r0, [pc, #104]	; (1ce98 <lll_chan_sel_2+0xc8>)
   1ce2e:	fba0 4001 	umull	r4, r0, r0, r1
   1ce32:	1a0c      	subs	r4, r1, r0
   1ce34:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1ce38:	0940      	lsrs	r0, r0, #5
   1ce3a:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1ce3e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1ce42:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1ce44:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1ce48:	f000 0507 	and.w	r5, r0, #7
   1ce4c:	5d14      	ldrb	r4, [r2, r4]
   1ce4e:	412c      	asrs	r4, r5
   1ce50:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   1ce52:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1ce54:	d41a      	bmi.n	1ce8c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1ce56:	fb01 f303 	mul.w	r3, r1, r3
   1ce5a:	1e56      	subs	r6, r2, #1
   1ce5c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1ce60:	3204      	adds	r2, #4
	chan_next = 0U;
   1ce62:	4660      	mov	r0, ip
		bite = *chan_map;
   1ce64:	f100 0508 	add.w	r5, r0, #8
   1ce68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1ce6c:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1ce6e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1ce72:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1ce76:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1ce7a:	d002      	beq.n	1ce82 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1ce7c:	b133      	cbz	r3, 1ce8c <lll_chan_sel_2+0xbc>
				chan_index--;
   1ce7e:	3b01      	subs	r3, #1
   1ce80:	b2db      	uxtb	r3, r3
			chan_next++;
   1ce82:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   1ce84:	42a8      	cmp	r0, r5
   1ce86:	d1f2      	bne.n	1ce6e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1ce88:	42b2      	cmp	r2, r6
   1ce8a:	d1eb      	bne.n	1ce64 <lll_chan_sel_2+0x94>
}
   1ce8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce8e:	bf00      	nop
   1ce90:	00022110 	.word	0x00022110
   1ce94:	00088440 	.word	0x00088440
   1ce98:	bacf914d 	.word	0xbacf914d

0001ce9c <rl_update>:
		}
	}
}

static void rl_update(void)
{
   1ce9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cea0:	4d18      	ldr	r5, [pc, #96]	; (1cf04 <rl_update+0x68>)
   1cea2:	4e19      	ldr	r6, [pc, #100]	; (1cf08 <rl_update+0x6c>)
   1cea4:	2400      	movs	r4, #0
   1cea6:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1ceaa:	1eaf      	subs	r7, r5, #2
   1ceac:	f04f 0801 	mov.w	r8, #1
   1ceb0:	e006      	b.n	1cec0 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ceb2:	3401      	adds	r4, #1
   1ceb4:	2c08      	cmp	r4, #8
   1ceb6:	f105 0506 	add.w	r5, r5, #6
   1ceba:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1cebe:	d01e      	beq.n	1cefe <rl_update+0x62>
		if (rl[i].taken) {
   1cec0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1cec4:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   1cec8:	07da      	lsls	r2, r3, #31
   1ceca:	d5f2      	bpl.n	1ceb2 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1cecc:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1cece:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1ced0:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1ced4:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ced8:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1ceda:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1cede:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1cee0:	4631      	mov	r1, r6
   1cee2:	4628      	mov	r0, r5
   1cee4:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1cee6:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   1cee8:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ceec:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1ceee:	f00d fa35 	bl	2a35c <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1cef2:	2c08      	cmp	r4, #8
   1cef4:	f105 0506 	add.w	r5, r5, #6
   1cef8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1cefc:	d1e0      	bne.n	1cec0 <rl_update+0x24>
}
   1cefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cf02:	bf00      	nop
   1cf04:	20003b66 	.word	0x20003b66
   1cf08:	20003a25 	.word	0x20003a25

0001cf0c <fal_update>:
{
   1cf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf10:	4e20      	ldr	r6, [pc, #128]	; (1cf94 <fal_update+0x88>)
   1cf12:	4d21      	ldr	r5, [pc, #132]	; (1cf98 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1cf14:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1cf9c <fal_update+0x90>
   1cf18:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1cfa0 <fal_update+0x94>
{
   1cf1c:	2400      	movs	r4, #0
   1cf1e:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   1cf22:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   1cf24:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1cf28:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   1cf2c:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1cf30:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   1cf32:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1cf36:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   1cf38:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1cf3c:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   1cf40:	d021      	beq.n	1cf86 <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1cf42:	f898 3000 	ldrb.w	r3, [r8]
   1cf46:	b163      	cbz	r3, 1cf62 <fal_update+0x56>
		j = fal[i].rl_idx;
   1cf48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1cf4c:	2b07      	cmp	r3, #7
   1cf4e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   1cf52:	d806      	bhi.n	1cf62 <fal_update+0x56>
   1cf54:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   1cf58:	f013 0f04 	tst.w	r3, #4
   1cf5c:	d001      	beq.n	1cf62 <fal_update+0x56>
   1cf5e:	06db      	lsls	r3, r3, #27
   1cf60:	d511      	bpl.n	1cf86 <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1cf62:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1cf66:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1cf6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   1cf6e:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1cf72:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   1cf76:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1cf7a:	40a3      	lsls	r3, r4
   1cf7c:	ea4e 0303 	orr.w	r3, lr, r3
   1cf80:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1cf82:	f00d f9eb 	bl	2a35c <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   1cf86:	3401      	adds	r4, #1
   1cf88:	2c08      	cmp	r4, #8
   1cf8a:	f105 0508 	add.w	r5, r5, #8
   1cf8e:	d1c9      	bne.n	1cf24 <fal_update+0x18>
}
   1cf90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf94:	2000393a 	.word	0x2000393a
   1cf98:	200038fa 	.word	0x200038fa
   1cf9c:	20004c05 	.word	0x20004c05
   1cfa0:	20003a24 	.word	0x20003a24

0001cfa4 <ll_fal_size_get>:
}
   1cfa4:	2008      	movs	r0, #8
   1cfa6:	4770      	bx	lr

0001cfa8 <ll_fal_clear>:
{
   1cfa8:	b510      	push	{r4, lr}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1cfaa:	2000      	movs	r0, #0
   1cfac:	f7fc fb74 	bl	19698 <ull_scan_filter_pol_get>
   1cfb0:	f010 0001 	ands.w	r0, r0, #1
   1cfb4:	d119      	bne.n	1cfea <ll_fal_clear+0x42>
   1cfb6:	4a0e      	ldr	r2, [pc, #56]	; (1cff0 <ll_fal_clear+0x48>)
			rl[j].fal = 0U;
   1cfb8:	4c0e      	ldr	r4, [pc, #56]	; (1cff4 <ll_fal_clear+0x4c>)
		uint8_t j = fal[i].rl_idx;
   1cfba:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1cfbe:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1cfc0:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   1cfc2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1cfc6:	d805      	bhi.n	1cfd4 <ll_fal_clear+0x2c>
			rl[j].fal = 0U;
   1cfc8:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1cfcc:	f36f 1345 	bfc	r3, #5, #1
   1cfd0:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   1cfd4:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1cfd8:	f36f 0300 	bfc	r3, #0, #1
   1cfdc:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1cfe0:	3001      	adds	r0, #1
   1cfe2:	2808      	cmp	r0, #8
   1cfe4:	d1e9      	bne.n	1cfba <ll_fal_clear+0x12>
	return 0;
   1cfe6:	2000      	movs	r0, #0
}
   1cfe8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1cfea:	200c      	movs	r0, #12
}
   1cfec:	bd10      	pop	{r4, pc}
   1cfee:	bf00      	nop
   1cff0:	200038f8 	.word	0x200038f8
   1cff4:	20003a24 	.word	0x20003a24

0001cff8 <ll_fal_add>:
{
   1cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cffc:	4681      	mov	r9, r0
   1cffe:	b083      	sub	sp, #12
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1d000:	2000      	movs	r0, #0
   1d002:	f7fc fb49 	bl	19698 <ull_scan_filter_pol_get>
   1d006:	f010 0501 	ands.w	r5, r0, #1
   1d00a:	d170      	bne.n	1d0ee <ll_fal_add+0xf6>
	if (addr->type == ADDR_TYPE_ANON) {
   1d00c:	f899 a000 	ldrb.w	sl, [r9]
   1d010:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1d014:	d067      	beq.n	1d0e6 <ll_fal_add+0xee>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1d016:	4e44      	ldr	r6, [pc, #272]	; (1d128 <ll_fal_add+0x130>)
   1d018:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1d01c:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1d020:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1d024:	462c      	mov	r4, r5
   1d026:	1eb7      	subs	r7, r6, #2
   1d028:	e009      	b.n	1d03e <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   1d02a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1d02e:	d101      	bne.n	1d034 <ll_fal_add+0x3c>
			*free_idx = i;
   1d030:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < FAL_SIZE; i++) {
   1d034:	3401      	adds	r4, #1
   1d036:	2c08      	cmp	r4, #8
   1d038:	f106 0608 	add.w	r6, r6, #8
   1d03c:	d017      	beq.n	1d06e <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1d03e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1d042:	07d8      	lsls	r0, r3, #31
   1d044:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1d048:	d5ef      	bpl.n	1d02a <ll_fal_add+0x32>
   1d04a:	4552      	cmp	r2, sl
   1d04c:	d1f2      	bne.n	1d034 <ll_fal_add+0x3c>
   1d04e:	2206      	movs	r2, #6
   1d050:	4630      	mov	r0, r6
   1d052:	4659      	mov	r1, fp
   1d054:	f00d f959 	bl	2a30a <memcmp>
   1d058:	2800      	cmp	r0, #0
   1d05a:	d041      	beq.n	1d0e0 <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   1d05c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1d060:	07d9      	lsls	r1, r3, #31
   1d062:	d5e2      	bpl.n	1d02a <ll_fal_add+0x32>
	for (i = 0; i < FAL_SIZE; i++) {
   1d064:	3401      	adds	r4, #1
   1d066:	2c08      	cmp	r4, #8
   1d068:	f106 0608 	add.w	r6, r6, #8
   1d06c:	d1e7      	bne.n	1d03e <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   1d06e:	f1b8 0f07 	cmp.w	r8, #7
   1d072:	d854      	bhi.n	1d11e <ll_fal_add+0x126>
	fal[i].id_addr_type = id_addr->type & 0x1;
   1d074:	f899 2000 	ldrb.w	r2, [r9]
   1d078:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1d07c:	4e2b      	ldr	r6, [pc, #172]	; (1d12c <ll_fal_add+0x134>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1d07e:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   1d080:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1d084:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   1d088:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   1d08c:	4438      	add	r0, r7
   1d08e:	2206      	movs	r2, #6
   1d090:	4659      	mov	r1, fp
   1d092:	f00d f963 	bl	2a35c <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d096:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d09a:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d09e:	f003 0301 	and.w	r3, r3, #1
   1d0a2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1d0a6:	fa5f fa85 	uxtb.w	sl, r5
   1d0aa:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   1d0ae:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1d0b2:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d0b4:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d0b8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1d0bc:	d501      	bpl.n	1d0c2 <ll_fal_add+0xca>
   1d0be:	4299      	cmp	r1, r3
   1d0c0:	d019      	beq.n	1d0f6 <ll_fal_add+0xfe>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d0c2:	2d08      	cmp	r5, #8
   1d0c4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1d0c8:	d1eb      	bne.n	1d0a2 <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1d0ca:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1d0ce:	22ff      	movs	r2, #255	; 0xff
   1d0d0:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1d0d2:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1d0d6:	f043 0301 	orr.w	r3, r3, #1
   1d0da:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   1d0de:	2000      	movs	r0, #0
}
   1d0e0:	b003      	add	sp, #12
   1d0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   1d0e6:	4628      	mov	r0, r5
}
   1d0e8:	b003      	add	sp, #12
   1d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d0ee:	200c      	movs	r0, #12
}
   1d0f0:	b003      	add	sp, #12
   1d0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d0f6:	4630      	mov	r0, r6
   1d0f8:	2206      	movs	r2, #6
   1d0fa:	4659      	mov	r1, fp
   1d0fc:	9301      	str	r3, [sp, #4]
   1d0fe:	f00d f904 	bl	2a30a <memcmp>
   1d102:	9b01      	ldr	r3, [sp, #4]
   1d104:	2800      	cmp	r0, #0
   1d106:	d1dc      	bne.n	1d0c2 <ll_fal_add+0xca>
		rl[j].fal = 1U;
   1d108:	f819 3004 	ldrb.w	r3, [r9, r4]
   1d10c:	f043 0320 	orr.w	r3, r3, #32
   1d110:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   1d114:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1d118:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   1d11c:	e7d9      	b.n	1d0d2 <ll_fal_add+0xda>
   1d11e:	2007      	movs	r0, #7
}
   1d120:	b003      	add	sp, #12
   1d122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d126:	bf00      	nop
   1d128:	200038fa 	.word	0x200038fa
   1d12c:	20003a25 	.word	0x20003a25

0001d130 <ll_fal_remove>:
{
   1d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d134:	4607      	mov	r7, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1d136:	2000      	movs	r0, #0
   1d138:	f7fc faae 	bl	19698 <ull_scan_filter_pol_get>
   1d13c:	f010 0401 	ands.w	r4, r0, #1
   1d140:	d139      	bne.n	1d1b6 <ll_fal_remove+0x86>
	if (addr->type == ADDR_TYPE_ANON) {
   1d142:	783e      	ldrb	r6, [r7, #0]
   1d144:	2eff      	cmp	r6, #255	; 0xff
   1d146:	d033      	beq.n	1d1b0 <ll_fal_remove+0x80>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   1d148:	4d1c      	ldr	r5, [pc, #112]	; (1d1bc <ll_fal_remove+0x8c>)
   1d14a:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
   1d14c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1d150:	f006 0601 	and.w	r6, r6, #1
   1d154:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1d158:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1d15c:	07db      	lsls	r3, r3, #31
   1d15e:	d501      	bpl.n	1d164 <ll_fal_remove+0x34>
   1d160:	42b2      	cmp	r2, r6
   1d162:	d007      	beq.n	1d174 <ll_fal_remove+0x44>
	for (i = 0; i < FAL_SIZE; i++) {
   1d164:	3401      	adds	r4, #1
   1d166:	2c08      	cmp	r4, #8
   1d168:	f105 0508 	add.w	r5, r5, #8
   1d16c:	d1f2      	bne.n	1d154 <ll_fal_remove+0x24>
   1d16e:	2002      	movs	r0, #2
}
   1d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1d174:	2206      	movs	r2, #6
   1d176:	4628      	mov	r0, r5
   1d178:	4639      	mov	r1, r7
   1d17a:	f00d f8c6 	bl	2a30a <memcmp>
   1d17e:	2800      	cmp	r0, #0
   1d180:	d1f0      	bne.n	1d164 <ll_fal_remove+0x34>
		uint8_t j = fal[i].rl_idx;
   1d182:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1d186:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1d188:	2b07      	cmp	r3, #7
   1d18a:	d808      	bhi.n	1d19e <ll_fal_remove+0x6e>
			rl[j].fal = 0U;
   1d18c:	4a0c      	ldr	r2, [pc, #48]	; (1d1c0 <ll_fal_remove+0x90>)
   1d18e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1d192:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1d196:	f360 1145 	bfi	r1, r0, #5, #1
   1d19a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   1d19e:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1d1a2:	f36f 0300 	bfc	r3, #0, #1
   1d1a6:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   1d1aa:	2000      	movs	r0, #0
}
   1d1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1d1b0:	4620      	mov	r0, r4
}
   1d1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d1b6:	200c      	movs	r0, #12
}
   1d1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d1bc:	200038fa 	.word	0x200038fa
   1d1c0:	20003a24 	.word	0x20003a24

0001d1c4 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1d1c4:	2807      	cmp	r0, #7
{
   1d1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1ca:	4604      	mov	r4, r0
   1d1cc:	460e      	mov	r6, r1
   1d1ce:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1d1d0:	d817      	bhi.n	1d202 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1d1d2:	4d1a      	ldr	r5, [pc, #104]	; (1d23c <ll_rl_id_addr_get+0x78>)
   1d1d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d1d8:	00a7      	lsls	r7, r4, #2
   1d1da:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1d1de:	07db      	lsls	r3, r3, #31
   1d1e0:	d51d      	bpl.n	1d21e <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1d1e2:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1d1e4:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1d1e6:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   1d1ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1d1ee:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   1d1f2:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1d1f4:	4640      	mov	r0, r8
   1d1f6:	2206      	movs	r2, #6
}
   1d1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1d1fc:	3101      	adds	r1, #1
   1d1fe:	f00d b8ad 	b.w	2a35c <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1d202:	4a0f      	ldr	r2, [pc, #60]	; (1d240 <ll_rl_id_addr_get+0x7c>)
   1d204:	490f      	ldr	r1, [pc, #60]	; (1d244 <ll_rl_id_addr_get+0x80>)
   1d206:	4810      	ldr	r0, [pc, #64]	; (1d248 <ll_rl_id_addr_get+0x84>)
   1d208:	f44f 7389 	mov.w	r3, #274	; 0x112
   1d20c:	f009 fba6 	bl	2695c <printk>
   1d210:	4040      	eors	r0, r0
   1d212:	f380 8811 	msr	BASEPRI, r0
   1d216:	f04f 0003 	mov.w	r0, #3
   1d21a:	df02      	svc	2
   1d21c:	e7d9      	b.n	1d1d2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1d21e:	4a08      	ldr	r2, [pc, #32]	; (1d240 <ll_rl_id_addr_get+0x7c>)
   1d220:	490a      	ldr	r1, [pc, #40]	; (1d24c <ll_rl_id_addr_get+0x88>)
   1d222:	4809      	ldr	r0, [pc, #36]	; (1d248 <ll_rl_id_addr_get+0x84>)
   1d224:	f240 1313 	movw	r3, #275	; 0x113
   1d228:	f009 fb98 	bl	2695c <printk>
   1d22c:	4040      	eors	r0, r0
   1d22e:	f380 8811 	msr	BASEPRI, r0
   1d232:	f04f 0003 	mov.w	r0, #3
   1d236:	df02      	svc	2
   1d238:	e7d3      	b.n	1d1e2 <ll_rl_id_addr_get+0x1e>
   1d23a:	bf00      	nop
   1d23c:	20003a24 	.word	0x20003a24
   1d240:	0002ff4c 	.word	0x0002ff4c
   1d244:	0002ff90 	.word	0x0002ff90
   1d248:	0002f6fc 	.word	0x0002f6fc
   1d24c:	0002ff9c 	.word	0x0002ff9c

0001d250 <ll_rl_size_get>:
   1d250:	2008      	movs	r0, #8
   1d252:	4770      	bx	lr

0001d254 <ll_rl_clear>:
{
   1d254:	b510      	push	{r4, lr}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1d256:	2000      	movs	r0, #0
   1d258:	f7fc fa06 	bl	19668 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1d25c:	f030 0001 	bics.w	r0, r0, #1
   1d260:	d131      	bne.n	1d2c6 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   1d262:	4b1a      	ldr	r3, [pc, #104]	; (1d2cc <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   1d264:	4c1a      	ldr	r4, [pc, #104]	; (1d2d0 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   1d266:	7819      	ldrb	r1, [r3, #0]
   1d268:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1d26c:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1d26e:	f360 0100 	bfi	r1, r0, #0, #1
   1d272:	f360 0200 	bfi	r2, r0, #0, #1
   1d276:	7019      	strb	r1, [r3, #0]
   1d278:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1d27c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   1d280:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1d284:	f360 0100 	bfi	r1, r0, #0, #1
   1d288:	f360 0200 	bfi	r2, r0, #0, #1
   1d28c:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   1d290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1d294:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1d298:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1d29c:	f360 0100 	bfi	r1, r0, #0, #1
   1d2a0:	f360 0200 	bfi	r2, r0, #0, #1
   1d2a4:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1d2a8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1d2ac:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1d2b0:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1d2b4:	f360 0100 	bfi	r1, r0, #0, #1
   1d2b8:	f360 0200 	bfi	r2, r0, #0, #1
   1d2bc:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1d2c0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1d2c4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d2c6:	200c      	movs	r0, #12
}
   1d2c8:	bd10      	pop	{r4, pc}
   1d2ca:	bf00      	nop
   1d2cc:	20003a24 	.word	0x20003a24
   1d2d0:	20004c04 	.word	0x20004c04

0001d2d4 <ll_rl_remove>:
{
   1d2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2d8:	b083      	sub	sp, #12
   1d2da:	4603      	mov	r3, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1d2dc:	2000      	movs	r0, #0
{
   1d2de:	461c      	mov	r4, r3
   1d2e0:	9300      	str	r3, [sp, #0]
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1d2e2:	f7fc f9c1 	bl	19668 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1d2e6:	f030 0901 	bics.w	r9, r0, #1
   1d2ea:	f040 8085 	bne.w	1d3f8 <ll_rl_remove+0x124>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d2ee:	4623      	mov	r3, r4
   1d2f0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1d430 <ll_rl_remove+0x15c>
   1d2f4:	f813 bb01 	ldrb.w	fp, [r3], #1
   1d2f8:	464c      	mov	r4, r9
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d2fa:	f00b 0b01 	and.w	fp, fp, #1
   1d2fe:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1d302:	461e      	mov	r6, r3
   1d304:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d308:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1d30c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1d310:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d314:	07db      	lsls	r3, r3, #31
   1d316:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1d31a:	d501      	bpl.n	1d320 <ll_rl_remove+0x4c>
   1d31c:	455a      	cmp	r2, fp
   1d31e:	d008      	beq.n	1d332 <ll_rl_remove+0x5e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d320:	3401      	adds	r4, #1
   1d322:	2c08      	cmp	r4, #8
   1d324:	f108 0828 	add.w	r8, r8, #40	; 0x28
   1d328:	d1ec      	bne.n	1d304 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d32a:	2002      	movs	r0, #2
}
   1d32c:	b003      	add	sp, #12
   1d32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d332:	4640      	mov	r0, r8
   1d334:	2206      	movs	r2, #6
   1d336:	4631      	mov	r1, r6
   1d338:	f00c ffe7 	bl	2a30a <memcmp>
   1d33c:	2800      	cmp	r0, #0
   1d33e:	d1ef      	bne.n	1d320 <ll_rl_remove+0x4c>
		if (rl[i].pirk) {
   1d340:	782a      	ldrb	r2, [r5, #0]
   1d342:	0752      	lsls	r2, r2, #29
   1d344:	4633      	mov	r3, r6
   1d346:	4606      	mov	r6, r0
   1d348:	d535      	bpl.n	1d3b6 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1d34a:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 1d434 <ll_rl_remove+0x160>
   1d34e:	f89b 8000 	ldrb.w	r8, [fp]
   1d352:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   1d356:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   1d35a:	d02a      	beq.n	1d3b2 <ll_rl_remove+0xde>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1d35c:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   1d35e:	4545      	cmp	r5, r8
   1d360:	d027      	beq.n	1d3b2 <ll_rl_remove+0xde>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   1d362:	4835      	ldr	r0, [pc, #212]	; (1d438 <ll_rl_remove+0x164>)
   1d364:	9301      	str	r3, [sp, #4]
   1d366:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1d36a:	2210      	movs	r2, #16
   1d36c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   1d370:	f00c fff4 	bl	2a35c <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   1d374:	4831      	ldr	r0, [pc, #196]	; (1d43c <ll_rl_remove+0x168>)
   1d376:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   1d378:	eb09 0289 	add.w	r2, r9, r9, lsl #2
   1d37c:	fa5f fc89 	uxtb.w	ip, r9
   1d380:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   1d384:	f011 0f01 	tst.w	r1, #1
   1d388:	f109 0901 	add.w	r9, r9, #1
   1d38c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   1d390:	d004      	beq.n	1d39c <ll_rl_remove+0xc8>
   1d392:	0749      	lsls	r1, r1, #29
   1d394:	d502      	bpl.n	1d39c <ll_rl_remove+0xc8>
   1d396:	7dc1      	ldrb	r1, [r0, #23]
   1d398:	4541      	cmp	r1, r8
   1d39a:	d03d      	beq.n	1d418 <ll_rl_remove+0x144>
				for (k = 0U;
   1d39c:	f1b9 0f08 	cmp.w	r9, #8
   1d3a0:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1d3a4:	d1e8      	bne.n	1d378 <ll_rl_remove+0xa4>
			peer_irk_count--;
   1d3a6:	f89b 8000 	ldrb.w	r8, [fp]
   1d3aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1d3ae:	fa5f f888 	uxtb.w	r8, r8
   1d3b2:	f88b 8000 	strb.w	r8, [fp]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1d3b6:	9a00      	ldr	r2, [sp, #0]
   1d3b8:	4d21      	ldr	r5, [pc, #132]	; (1d440 <ll_rl_remove+0x16c>)
   1d3ba:	f892 9000 	ldrb.w	r9, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   1d3be:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1d3c2:	f009 0901 	and.w	r9, r9, #1
   1d3c6:	469b      	mov	fp, r3
   1d3c8:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   1d3cc:	07d1      	lsls	r1, r2, #31
   1d3ce:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1d3d2:	d501      	bpl.n	1d3d8 <ll_rl_remove+0x104>
   1d3d4:	4548      	cmp	r0, r9
   1d3d6:	d013      	beq.n	1d400 <ll_rl_remove+0x12c>
	for (i = 0; i < FAL_SIZE; i++) {
   1d3d8:	3601      	adds	r6, #1
   1d3da:	2e08      	cmp	r6, #8
   1d3dc:	f105 0508 	add.w	r5, r5, #8
   1d3e0:	d1f2      	bne.n	1d3c8 <ll_rl_remove+0xf4>
		rl[i].taken = 0U;
   1d3e2:	4454      	add	r4, sl
		return 0;
   1d3e4:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1d3e6:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1d3ea:	f36f 0300 	bfc	r3, #0, #1
   1d3ee:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   1d3f2:	b003      	add	sp, #12
   1d3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d3f8:	200c      	movs	r0, #12
}
   1d3fa:	b003      	add	sp, #12
   1d3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1d400:	2206      	movs	r2, #6
   1d402:	4628      	mov	r0, r5
   1d404:	4659      	mov	r1, fp
   1d406:	f00c ff80 	bl	2a30a <memcmp>
   1d40a:	2800      	cmp	r0, #0
   1d40c:	d1e4      	bne.n	1d3d8 <ll_rl_remove+0x104>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1d40e:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   1d412:	23ff      	movs	r3, #255	; 0xff
   1d414:	7073      	strb	r3, [r6, #1]
   1d416:	e7e4      	b.n	1d3e2 <ll_rl_remove+0x10e>
			peer_irk_count--;
   1d418:	f89b 8000 	ldrb.w	r8, [fp]
						rl[k].pirk_idx = pi;
   1d41c:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1d41e:	4a09      	ldr	r2, [pc, #36]	; (1d444 <ll_rl_remove+0x170>)
			peer_irk_count--;
   1d420:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   1d424:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   1d428:	fa5f f888 	uxtb.w	r8, r8
						break;
   1d42c:	e7c1      	b.n	1d3b2 <ll_rl_remove+0xde>
   1d42e:	bf00      	nop
   1d430:	20003a25 	.word	0x20003a25
   1d434:	20004c04 	.word	0x20004c04
   1d438:	200039a4 	.word	0x200039a4
   1d43c:	20003a24 	.word	0x20003a24
   1d440:	200038fa 	.word	0x200038fa
   1d444:	2000399c 	.word	0x2000399c

0001d448 <ll_rl_crpa_set>:
{
   1d448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1d44c:	795c      	ldrb	r4, [r3, #5]
   1d44e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1d452:	2c40      	cmp	r4, #64	; 0x40
   1d454:	d001      	beq.n	1d45a <ll_rl_crpa_set+0x12>
}
   1d456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1d45a:	461e      	mov	r6, r3
   1d45c:	460f      	mov	r7, r1
   1d45e:	b301      	cbz	r1, 1d4a2 <ll_rl_crpa_set+0x5a>
   1d460:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1d4cc <ll_rl_crpa_set+0x84>
   1d464:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d466:	f000 0a01 	and.w	sl, r0, #1
   1d46a:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   1d46e:	e003      	b.n	1d478 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d470:	2c08      	cmp	r4, #8
   1d472:	f109 0928 	add.w	r9, r9, #40	; 0x28
   1d476:	d0ee      	beq.n	1d456 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d478:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d47c:	4625      	mov	r5, r4
   1d47e:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1d482:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1d486:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d488:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d48c:	d5f0      	bpl.n	1d470 <ll_rl_crpa_set+0x28>
   1d48e:	4553      	cmp	r3, sl
   1d490:	d1ee      	bne.n	1d470 <ll_rl_crpa_set+0x28>
   1d492:	4648      	mov	r0, r9
   1d494:	2206      	movs	r2, #6
   1d496:	4639      	mov	r1, r7
   1d498:	f00c ff37 	bl	2a30a <memcmp>
   1d49c:	2800      	cmp	r0, #0
   1d49e:	d1e7      	bne.n	1d470 <ll_rl_crpa_set+0x28>
   1d4a0:	e004      	b.n	1d4ac <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1d4a2:	2a07      	cmp	r2, #7
   1d4a4:	d8d7      	bhi.n	1d456 <ll_rl_crpa_set+0xe>
   1d4a6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1d4d0 <ll_rl_crpa_set+0x88>
   1d4aa:	4615      	mov	r5, r2
   1d4ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1d4b0:	00e8      	lsls	r0, r5, #3
   1d4b2:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1d4b6:	07db      	lsls	r3, r3, #31
   1d4b8:	d5cd      	bpl.n	1d456 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1d4ba:	3018      	adds	r0, #24
   1d4bc:	4631      	mov	r1, r6
   1d4be:	4440      	add	r0, r8
   1d4c0:	2206      	movs	r2, #6
}
   1d4c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1d4c6:	f00c bf49 	b.w	2a35c <memcpy>
   1d4ca:	bf00      	nop
   1d4cc:	20003a25 	.word	0x20003a25
   1d4d0:	20003a24 	.word	0x20003a24

0001d4d4 <ll_rl_crpa_get>:
{
   1d4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d4d8:	4682      	mov	sl, r0
   1d4da:	4e1a      	ldr	r6, [pc, #104]	; (1d544 <ll_rl_crpa_get+0x70>)
   1d4dc:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1d4e0:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d4e2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d4e4:	f008 0801 	and.w	r8, r8, #1
   1d4e8:	1e77      	subs	r7, r6, #1
   1d4ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d4ee:	00d5      	lsls	r5, r2, #3
   1d4f0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1d4f4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d4f8:	07db      	lsls	r3, r3, #31
   1d4fa:	f104 0401 	add.w	r4, r4, #1
   1d4fe:	d501      	bpl.n	1d504 <ll_rl_crpa_get+0x30>
   1d500:	4542      	cmp	r2, r8
   1d502:	d006      	beq.n	1d512 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d504:	2c08      	cmp	r4, #8
   1d506:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1d50a:	d1ee      	bne.n	1d4ea <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d50c:	2002      	movs	r0, #2
}
   1d50e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d512:	4630      	mov	r0, r6
   1d514:	2206      	movs	r2, #6
   1d516:	4651      	mov	r1, sl
   1d518:	f00c fef7 	bl	2a30a <memcmp>
   1d51c:	4683      	mov	fp, r0
   1d51e:	2800      	cmp	r0, #0
   1d520:	d1f0      	bne.n	1d504 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1d522:	f105 0218 	add.w	r2, r5, #24
   1d526:	4417      	add	r7, r2
   1d528:	2106      	movs	r1, #6
   1d52a:	4638      	mov	r0, r7
   1d52c:	f7f7 fc72 	bl	14e14 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1d530:	2800      	cmp	r0, #0
   1d532:	d0eb      	beq.n	1d50c <ll_rl_crpa_get+0x38>
   1d534:	2206      	movs	r2, #6
   1d536:	4639      	mov	r1, r7
   1d538:	4648      	mov	r0, r9
   1d53a:	f00c ff0f 	bl	2a35c <memcpy>
		return 0;
   1d53e:	4658      	mov	r0, fp
}
   1d540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d544:	20003a25 	.word	0x20003a25

0001d548 <ll_rl_lrpa_get>:
{
   1d548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d54c:	4681      	mov	r9, r0
   1d54e:	4e16      	ldr	r6, [pc, #88]	; (1d5a8 <ll_rl_lrpa_get+0x60>)
   1d550:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1d554:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d556:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d558:	f008 0801 	and.w	r8, r8, #1
   1d55c:	1e77      	subs	r7, r6, #1
   1d55e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d562:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1d566:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1d56a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d56e:	07db      	lsls	r3, r3, #31
   1d570:	f104 0401 	add.w	r4, r4, #1
   1d574:	d501      	bpl.n	1d57a <ll_rl_lrpa_get+0x32>
   1d576:	4542      	cmp	r2, r8
   1d578:	d006      	beq.n	1d588 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d57a:	2c08      	cmp	r4, #8
   1d57c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1d580:	d1ed      	bne.n	1d55e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d582:	2002      	movs	r0, #2
}
   1d584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d588:	4630      	mov	r0, r6
   1d58a:	2206      	movs	r2, #6
   1d58c:	4649      	mov	r1, r9
   1d58e:	f00c febc 	bl	2a30a <memcmp>
   1d592:	4683      	mov	fp, r0
   1d594:	2800      	cmp	r0, #0
   1d596:	d1f0      	bne.n	1d57a <ll_rl_lrpa_get+0x32>
   1d598:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d59a:	2206      	movs	r2, #6
   1d59c:	4650      	mov	r0, sl
   1d59e:	f00c fedd 	bl	2a35c <memcpy>
		return 0;
   1d5a2:	4658      	mov	r0, fp
}
   1d5a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5a8:	20003a25 	.word	0x20003a25

0001d5ac <ll_rl_enable>:
{
   1d5ac:	b510      	push	{r4, lr}
   1d5ae:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1d5b0:	2000      	movs	r0, #0
   1d5b2:	f7fc f859 	bl	19668 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1d5b6:	f030 0001 	bics.w	r0, r0, #1
   1d5ba:	d10b      	bne.n	1d5d4 <ll_rl_enable+0x28>
	switch (enable) {
   1d5bc:	b134      	cbz	r4, 1d5cc <ll_rl_enable+0x20>
   1d5be:	2c01      	cmp	r4, #1
   1d5c0:	d001      	beq.n	1d5c6 <ll_rl_enable+0x1a>
   1d5c2:	2012      	movs	r0, #18
}
   1d5c4:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   1d5c6:	4b04      	ldr	r3, [pc, #16]	; (1d5d8 <ll_rl_enable+0x2c>)
   1d5c8:	701c      	strb	r4, [r3, #0]
}
   1d5ca:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1d5cc:	4b02      	ldr	r3, [pc, #8]	; (1d5d8 <ll_rl_enable+0x2c>)
   1d5ce:	701c      	strb	r4, [r3, #0]
	return 0;
   1d5d0:	4620      	mov	r0, r4
}
   1d5d2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d5d4:	200c      	movs	r0, #12
}
   1d5d6:	bd10      	pop	{r4, pc}
   1d5d8:	20004c05 	.word	0x20004c05

0001d5dc <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1d5dc:	4b03      	ldr	r3, [pc, #12]	; (1d5ec <ll_rl_timeout_set+0x10>)
   1d5de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d5e2:	fb02 f000 	mul.w	r0, r2, r0
   1d5e6:	6018      	str	r0, [r3, #0]
}
   1d5e8:	4770      	bx	lr
   1d5ea:	bf00      	nop
   1d5ec:	20003b98 	.word	0x20003b98

0001d5f0 <ll_priv_mode_set>:
{
   1d5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d5f4:	4682      	mov	sl, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1d5f6:	2000      	movs	r0, #0
{
   1d5f8:	4688      	mov	r8, r1
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1d5fa:	f7fc f835 	bl	19668 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1d5fe:	f030 0401 	bics.w	r4, r0, #1
   1d602:	d12c      	bne.n	1d65e <ll_priv_mode_set+0x6e>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d604:	4e1c      	ldr	r6, [pc, #112]	; (1d678 <ll_priv_mode_set+0x88>)
   1d606:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d60a:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d60c:	f009 0901 	and.w	r9, r9, #1
   1d610:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d614:	00d5      	lsls	r5, r2, #3
   1d616:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1d61a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d61e:	07db      	lsls	r3, r3, #31
   1d620:	f104 0401 	add.w	r4, r4, #1
   1d624:	d501      	bpl.n	1d62a <ll_priv_mode_set+0x3a>
   1d626:	454a      	cmp	r2, r9
   1d628:	d006      	beq.n	1d638 <ll_priv_mode_set+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d62a:	2c08      	cmp	r4, #8
   1d62c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1d630:	d1ee      	bne.n	1d610 <ll_priv_mode_set+0x20>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d632:	2002      	movs	r0, #2
}
   1d634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d638:	4630      	mov	r0, r6
   1d63a:	2206      	movs	r2, #6
   1d63c:	4651      	mov	r1, sl
   1d63e:	f00c fe64 	bl	2a30a <memcmp>
   1d642:	2800      	cmp	r0, #0
   1d644:	d1f1      	bne.n	1d62a <ll_priv_mode_set+0x3a>
		switch (mode) {
   1d646:	f1b8 0f00 	cmp.w	r8, #0
   1d64a:	d00e      	beq.n	1d66a <ll_priv_mode_set+0x7a>
   1d64c:	f1b8 0f01 	cmp.w	r8, #1
   1d650:	d108      	bne.n	1d664 <ll_priv_mode_set+0x74>
			rl[i].dev = 1U;
   1d652:	5d7b      	ldrb	r3, [r7, r5]
   1d654:	f043 0310 	orr.w	r3, r3, #16
   1d658:	557b      	strb	r3, [r7, r5]
}
   1d65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d65e:	200c      	movs	r0, #12
}
   1d660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1d664:	2012      	movs	r0, #18
}
   1d666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1d66a:	5d7b      	ldrb	r3, [r7, r5]
   1d66c:	f368 1304 	bfi	r3, r8, #4, #1
   1d670:	557b      	strb	r3, [r7, r5]
	return 0;
   1d672:	4640      	mov	r0, r8
}
   1d674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d678:	20003a25 	.word	0x20003a25

0001d67c <ull_filter_reset>:
{
   1d67c:	b4d0      	push	{r4, r6, r7}
   1d67e:	4930      	ldr	r1, [pc, #192]	; (1d740 <ull_filter_reset+0xc4>)
   1d680:	4c30      	ldr	r4, [pc, #192]	; (1d744 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   1d682:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   1d684:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1d688:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1d68a:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   1d68c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1d690:	d805      	bhi.n	1d69e <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   1d692:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   1d696:	f36f 1245 	bfc	r2, #5, #1
   1d69a:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   1d69e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1d6a2:	f36f 0200 	bfc	r2, #0, #1
   1d6a6:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1d6aa:	3301      	adds	r3, #1
   1d6ac:	2b08      	cmp	r3, #8
   1d6ae:	d1e9      	bne.n	1d684 <ull_filter_reset+0x8>
	rl_enable = 0U;
   1d6b0:	4a25      	ldr	r2, [pc, #148]	; (1d748 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1d6b2:	4c26      	ldr	r4, [pc, #152]	; (1d74c <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   1d6b4:	2300      	movs	r3, #0
   1d6b6:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   1d6b8:	780a      	ldrb	r2, [r1, #0]
   1d6ba:	f363 0200 	bfi	r2, r3, #0, #1
   1d6be:	700a      	strb	r2, [r1, #0]
   1d6c0:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   1d6c4:	f363 0200 	bfi	r2, r3, #0, #1
   1d6c8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   1d6cc:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   1d6d0:	f363 0200 	bfi	r2, r3, #0, #1
   1d6d4:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   1d6d8:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1d6dc:	f363 0200 	bfi	r2, r3, #0, #1
   1d6e0:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1d6e4:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   1d6e8:	f363 0200 	bfi	r2, r3, #0, #1
   1d6ec:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   1d6f0:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   1d6f4:	f363 0200 	bfi	r2, r3, #0, #1
   1d6f8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   1d6fc:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   1d700:	f363 0200 	bfi	r2, r3, #0, #1
   1d704:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   1d708:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   1d70c:	f363 0200 	bfi	r2, r3, #0, #1
   1d710:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1d714:	4a0e      	ldr	r2, [pc, #56]	; (1d750 <ull_filter_reset+0xd4>)
   1d716:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   1d718:	4b0e      	ldr	r3, [pc, #56]	; (1d754 <ull_filter_reset+0xd8>)
   1d71a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d71e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1d722:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1d726:	4b0c      	ldr	r3, [pc, #48]	; (1d758 <ull_filter_reset+0xdc>)
   1d728:	6023      	str	r3, [r4, #0]
	if (init) {
   1d72a:	b120      	cbz	r0, 1d736 <ull_filter_reset+0xba>
}
   1d72c:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   1d72e:	490b      	ldr	r1, [pc, #44]	; (1d75c <ull_filter_reset+0xe0>)
   1d730:	480b      	ldr	r0, [pc, #44]	; (1d760 <ull_filter_reset+0xe4>)
   1d732:	f010 b898 	b.w	2d866 <k_work_init_delayable>
}
   1d736:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   1d738:	4809      	ldr	r0, [pc, #36]	; (1d760 <ull_filter_reset+0xe4>)
   1d73a:	f010 b8a0 	b.w	2d87e <k_work_cancel_delayable>
   1d73e:	bf00      	nop
   1d740:	20003a24 	.word	0x20003a24
   1d744:	200038f8 	.word	0x200038f8
   1d748:	20004c05 	.word	0x20004c05
   1d74c:	20003b98 	.word	0x20003b98
   1d750:	20004c04 	.word	0x20004c04
   1d754:	20002288 	.word	0x20002288
   1d758:	000dbba0 	.word	0x000dbba0
   1d75c:	0001d975 	.word	0x0001d975
   1d760:	20002290 	.word	0x20002290

0001d764 <ull_filter_lll_get>:
		return &fal_filter;
   1d764:	4a03      	ldr	r2, [pc, #12]	; (1d774 <ull_filter_lll_get+0x10>)
   1d766:	4b04      	ldr	r3, [pc, #16]	; (1d778 <ull_filter_lll_get+0x14>)
}
   1d768:	2800      	cmp	r0, #0
   1d76a:	bf0c      	ite	eq
   1d76c:	4610      	moveq	r0, r2
   1d76e:	4618      	movne	r0, r3
   1d770:	4770      	bx	lr
   1d772:	bf00      	nop
   1d774:	20003b64 	.word	0x20003b64
   1d778:	20003938 	.word	0x20003938

0001d77c <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1d77c:	b1a8      	cbz	r0, 1d7aa <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1d77e:	4a0c      	ldr	r2, [pc, #48]	; (1d7b0 <ull_filter_adv_scan_state_cb+0x34>)
   1d780:	6812      	ldr	r2, [r2, #0]
{
   1d782:	b510      	push	{r4, lr}
   1d784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d788:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d78c:	2100      	movs	r1, #0
   1d78e:	fbe2 0103 	umlal	r0, r1, r2, r3
   1d792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d796:	2300      	movs	r3, #0
   1d798:	f7e3 fd02 	bl	11a0 <__aeabi_uldivmod>
}
   1d79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d7a0:	4602      	mov	r2, r0
   1d7a2:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1d7a4:	4803      	ldr	r0, [pc, #12]	; (1d7b4 <ull_filter_adv_scan_state_cb+0x38>)
   1d7a6:	f008 b879 	b.w	2589c <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   1d7aa:	4802      	ldr	r0, [pc, #8]	; (1d7b4 <ull_filter_adv_scan_state_cb+0x38>)
   1d7ac:	f010 b867 	b.w	2d87e <k_work_cancel_delayable>
   1d7b0:	20003b98 	.word	0x20003b98
   1d7b4:	20002290 	.word	0x20002290

0001d7b8 <ull_filter_scan_update>:
{
   1d7b8:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1d7ba:	4b09      	ldr	r3, [pc, #36]	; (1d7e0 <ull_filter_scan_update+0x28>)
   1d7bc:	2200      	movs	r2, #0
   1d7be:	801a      	strh	r2, [r3, #0]
	if ((scan_fp & 0x1) &&
   1d7c0:	07c3      	lsls	r3, r0, #31
   1d7c2:	d406      	bmi.n	1d7d2 <ull_filter_scan_update+0x1a>
	if (rl_enable &&
   1d7c4:	4b07      	ldr	r3, [pc, #28]	; (1d7e4 <ull_filter_scan_update+0x2c>)
	filter->enable_bitmask = 0;
   1d7c6:	4a08      	ldr	r2, [pc, #32]	; (1d7e8 <ull_filter_scan_update+0x30>)
	if (rl_enable &&
   1d7c8:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1d7ca:	2100      	movs	r1, #0
   1d7cc:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1d7ce:	b91b      	cbnz	r3, 1d7d8 <ull_filter_scan_update+0x20>
}
   1d7d0:	bd08      	pop	{r3, pc}
		fal_update();
   1d7d2:	f7ff fb9b 	bl	1cf0c <fal_update>
   1d7d6:	e7f5      	b.n	1d7c4 <ull_filter_scan_update+0xc>
}
   1d7d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1d7dc:	f7ff bb5e 	b.w	1ce9c <rl_update>
   1d7e0:	20003938 	.word	0x20003938
   1d7e4:	20004c05 	.word	0x20004c05
   1d7e8:	20003b64 	.word	0x20003b64

0001d7ec <ull_filter_rpa_update>:
{
   1d7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7f0:	4604      	mov	r4, r0
   1d7f2:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1d7f4:	f010 f9e9 	bl	2dbca <z_impl_k_uptime_ticks>
   1d7f8:	014b      	lsls	r3, r1, #5
   1d7fa:	0142      	lsls	r2, r0, #5
   1d7fc:	1a12      	subs	r2, r2, r0
   1d7fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1d802:	eb63 0301 	sbc.w	r3, r3, r1
   1d806:	009b      	lsls	r3, r3, #2
   1d808:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1d80c:	eb19 0900 	adds.w	r9, r9, r0
   1d810:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1d814:	eb41 0103 	adc.w	r1, r1, r3
   1d818:	00cb      	lsls	r3, r1, #3
   1d81a:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1d81e:	0bd8      	lsrs	r0, r3, #15
   1d820:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1d824:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1d828:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1d82a:	b9bc      	cbnz	r4, 1d85c <ull_filter_rpa_update+0x70>
   1d82c:	4a49      	ldr	r2, [pc, #292]	; (1d954 <ull_filter_rpa_update+0x168>)
   1d82e:	e9d2 3200 	ldrd	r3, r2, [r2]
   1d832:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1d836:	bf08      	it	eq
   1d838:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1d83c:	d00e      	beq.n	1d85c <ull_filter_rpa_update+0x70>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1d83e:	4946      	ldr	r1, [pc, #280]	; (1d958 <ull_filter_rpa_update+0x16c>)
   1d840:	6809      	ldr	r1, [r1, #0]
   1d842:	ebb9 0303 	subs.w	r3, r9, r3
   1d846:	eb60 0202 	sbc.w	r2, r0, r2
	bool all = timeout || (rpa_last_ms == -1) ||
   1d84a:	428b      	cmp	r3, r1
   1d84c:	f172 0300 	sbcs.w	r3, r2, #0
   1d850:	bfac      	ite	ge
   1d852:	f04f 0a01 	movge.w	sl, #1
   1d856:	f04f 0a00 	movlt.w	sl, #0
   1d85a:	e001      	b.n	1d860 <ull_filter_rpa_update+0x74>
   1d85c:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d860:	4e3e      	ldr	r6, [pc, #248]	; (1d95c <ull_filter_rpa_update+0x170>)
   1d862:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1d960 <ull_filter_rpa_update+0x174>
				LL_ASSERT(!err);
   1d866:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1d964 <ull_filter_rpa_update+0x178>
	bool all = timeout || (rpa_last_ms == -1) ||
   1d86a:	2400      	movs	r4, #0
   1d86c:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1d870:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d874:	00a5      	lsls	r5, r4, #2
   1d876:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1d87a:	07d8      	lsls	r0, r3, #31
   1d87c:	d515      	bpl.n	1d8aa <ull_filter_rpa_update+0xbe>
   1d87e:	f1ba 0f00 	cmp.w	sl, #0
   1d882:	d101      	bne.n	1d888 <ull_filter_rpa_update+0x9c>
   1d884:	0799      	lsls	r1, r3, #30
   1d886:	d410      	bmi.n	1d8aa <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1d888:	192b      	adds	r3, r5, r4
   1d88a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1d88e:	075a      	lsls	r2, r3, #29
   1d890:	d42e      	bmi.n	1d8f0 <ull_filter_rpa_update+0x104>
			if (rl[i].lirk) {
   1d892:	192b      	adds	r3, r5, r4
   1d894:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1d898:	071b      	lsls	r3, r3, #28
   1d89a:	d418      	bmi.n	1d8ce <ull_filter_rpa_update+0xe2>
			rl[i].rpas_ready = 1U;
   1d89c:	4425      	add	r5, r4
   1d89e:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1d8a2:	f043 0302 	orr.w	r3, r3, #2
   1d8a6:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d8aa:	3401      	adds	r4, #1
   1d8ac:	2c08      	cmp	r4, #8
   1d8ae:	f108 0806 	add.w	r8, r8, #6
   1d8b2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1d8b6:	d1db      	bne.n	1d870 <ull_filter_rpa_update+0x84>
	if (all) {
   1d8b8:	f1ba 0f00 	cmp.w	sl, #0
   1d8bc:	d004      	beq.n	1d8c8 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1d8be:	4b25      	ldr	r3, [pc, #148]	; (1d954 <ull_filter_rpa_update+0x168>)
   1d8c0:	9a01      	ldr	r2, [sp, #4]
   1d8c2:	f8c3 9000 	str.w	r9, [r3]
   1d8c6:	605a      	str	r2, [r3, #4]
}
   1d8c8:	b007      	add	sp, #28
   1d8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1d8ce:	a902      	add	r1, sp, #8
   1d8d0:	f1a6 0017 	sub.w	r0, r6, #23
   1d8d4:	f00c fdb1 	bl	2a43a <bt_rpa_create>
				LL_ASSERT(!err);
   1d8d8:	bb70      	cbnz	r0, 1d938 <ull_filter_rpa_update+0x14c>
				rl[i].local_rpa = &rpa;
   1d8da:	ab02      	add	r3, sp, #8
   1d8dc:	4619      	mov	r1, r3
   1d8de:	2206      	movs	r2, #6
   1d8e0:	4640      	mov	r0, r8
   1d8e2:	f8c6 3006 	str.w	r3, [r6, #6]
   1d8e6:	f00c fd39 	bl	2a35c <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1d8ea:	f8c6 8006 	str.w	r8, [r6, #6]
   1d8ee:	e7d5      	b.n	1d89c <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1d8f0:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1d8f4:	4a1c      	ldr	r2, [pc, #112]	; (1d968 <ull_filter_rpa_update+0x17c>)
   1d8f6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1d8fa:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1d8fc:	f10d 0307 	add.w	r3, sp, #7
   1d900:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1d904:	f812 1901 	ldrb.w	r1, [r2], #-1
   1d908:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1d90c:	4283      	cmp	r3, r0
   1d90e:	d1f9      	bne.n	1d904 <ull_filter_rpa_update+0x118>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1d910:	4631      	mov	r1, r6
   1d912:	a802      	add	r0, sp, #8
   1d914:	f00c fd91 	bl	2a43a <bt_rpa_create>
				LL_ASSERT(!err);
   1d918:	2800      	cmp	r0, #0
   1d91a:	d0ba      	beq.n	1d892 <ull_filter_rpa_update+0xa6>
   1d91c:	4913      	ldr	r1, [pc, #76]	; (1d96c <ull_filter_rpa_update+0x180>)
   1d91e:	4814      	ldr	r0, [pc, #80]	; (1d970 <ull_filter_rpa_update+0x184>)
   1d920:	f240 23eb 	movw	r3, #747	; 0x2eb
   1d924:	465a      	mov	r2, fp
   1d926:	f009 f819 	bl	2695c <printk>
   1d92a:	4040      	eors	r0, r0
   1d92c:	f380 8811 	msr	BASEPRI, r0
   1d930:	f04f 0003 	mov.w	r0, #3
   1d934:	df02      	svc	2
   1d936:	e7ac      	b.n	1d892 <ull_filter_rpa_update+0xa6>
				LL_ASSERT(!err);
   1d938:	490c      	ldr	r1, [pc, #48]	; (1d96c <ull_filter_rpa_update+0x180>)
   1d93a:	480d      	ldr	r0, [pc, #52]	; (1d970 <ull_filter_rpa_update+0x184>)
   1d93c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1d940:	465a      	mov	r2, fp
   1d942:	f009 f80b 	bl	2695c <printk>
   1d946:	4040      	eors	r0, r0
   1d948:	f380 8811 	msr	BASEPRI, r0
   1d94c:	f04f 0003 	mov.w	r0, #3
   1d950:	df02      	svc	2
   1d952:	e7c2      	b.n	1d8da <ull_filter_rpa_update+0xee>
   1d954:	20002288 	.word	0x20002288
   1d958:	20003b98 	.word	0x20003b98
   1d95c:	20003a42 	.word	0x20003a42
   1d960:	2000396c 	.word	0x2000396c
   1d964:	0002ff4c 	.word	0x0002ff4c
   1d968:	200039a4 	.word	0x200039a4
   1d96c:	0002fa74 	.word	0x0002fa74
   1d970:	0002f6fc 	.word	0x0002f6fc

0001d974 <rpa_timeout>:
{
   1d974:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1d976:	2001      	movs	r0, #1
   1d978:	f7ff ff38 	bl	1d7ec <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1d97c:	4a0a      	ldr	r2, [pc, #40]	; (1d9a8 <rpa_timeout+0x34>)
   1d97e:	6812      	ldr	r2, [r2, #0]
   1d980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d984:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d988:	2100      	movs	r1, #0
   1d98a:	fbe2 0103 	umlal	r0, r1, r2, r3
   1d98e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d992:	2300      	movs	r3, #0
   1d994:	f7e3 fc04 	bl	11a0 <__aeabi_uldivmod>
}
   1d998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d99c:	4602      	mov	r2, r0
   1d99e:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1d9a0:	4802      	ldr	r0, [pc, #8]	; (1d9ac <rpa_timeout+0x38>)
   1d9a2:	f007 bf7b 	b.w	2589c <k_work_schedule>
   1d9a6:	bf00      	nop
   1d9a8:	20003b98 	.word	0x20003b98
   1d9ac:	20002290 	.word	0x20002290

0001d9b0 <ull_filter_rl_find>:
{
   1d9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9b4:	468b      	mov	fp, r1
	if (free_idx) {
   1d9b6:	4617      	mov	r7, r2
   1d9b8:	b10a      	cbz	r2, 1d9be <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   1d9ba:	23ff      	movs	r3, #255	; 0xff
   1d9bc:	7013      	strb	r3, [r2, #0]
   1d9be:	4d1b      	ldr	r5, [pc, #108]	; (1da2c <ull_filter_rl_find+0x7c>)
{
   1d9c0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d9c2:	f000 0a01 	and.w	sl, r0, #1
   1d9c6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1d9ca:	e006      	b.n	1d9da <ull_filter_rl_find+0x2a>
   1d9cc:	4552      	cmp	r2, sl
   1d9ce:	d01f      	beq.n	1da10 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d9d0:	3401      	adds	r4, #1
   1d9d2:	2c08      	cmp	r4, #8
   1d9d4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1d9d8:	d015      	beq.n	1da06 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1d9da:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1d9de:	fa5f f884 	uxtb.w	r8, r4
   1d9e2:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1d9e6:	07d9      	lsls	r1, r3, #31
   1d9e8:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d9ec:	d4ee      	bmi.n	1d9cc <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   1d9ee:	2f00      	cmp	r7, #0
   1d9f0:	d0ee      	beq.n	1d9d0 <ull_filter_rl_find+0x20>
   1d9f2:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d9f4:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1d9f6:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   1d9f8:	bf08      	it	eq
   1d9fa:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d9fe:	2c08      	cmp	r4, #8
   1da00:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1da04:	d1e9      	bne.n	1d9da <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1da06:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1da0a:	4640      	mov	r0, r8
   1da0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1da10:	4628      	mov	r0, r5
   1da12:	2206      	movs	r2, #6
   1da14:	4659      	mov	r1, fp
   1da16:	f00c fc78 	bl	2a30a <memcmp>
   1da1a:	2800      	cmp	r0, #0
   1da1c:	d0f5      	beq.n	1da0a <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1da1e:	2f00      	cmp	r7, #0
   1da20:	d0d6      	beq.n	1d9d0 <ull_filter_rl_find+0x20>
   1da22:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1da26:	07db      	lsls	r3, r3, #31
   1da28:	d4d2      	bmi.n	1d9d0 <ull_filter_rl_find+0x20>
   1da2a:	e7e2      	b.n	1d9f2 <ull_filter_rl_find+0x42>
   1da2c:	20003a25 	.word	0x20003a25

0001da30 <ll_rl_add>:
{
   1da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da34:	4680      	mov	r8, r0
   1da36:	b085      	sub	sp, #20
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1da38:	2000      	movs	r0, #0
{
   1da3a:	460c      	mov	r4, r1
   1da3c:	4615      	mov	r5, r2
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1da3e:	f7fb fe13 	bl	19668 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1da42:	f030 0301 	bics.w	r3, r0, #1
   1da46:	d17d      	bne.n	1db44 <ll_rl_add+0x114>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1da48:	46c1      	mov	r9, r8
   1da4a:	f10d 020f 	add.w	r2, sp, #15
   1da4e:	f819 0b01 	ldrb.w	r0, [r9], #1
   1da52:	4649      	mov	r1, r9
   1da54:	f7ff ffac 	bl	1d9b0 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1da58:	2807      	cmp	r0, #7
   1da5a:	f240 80b8 	bls.w	1dbce <ll_rl_add+0x19e>
	} else if (j >= ARRAY_SIZE(rl)) {
   1da5e:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1da62:	2f07      	cmp	r7, #7
   1da64:	f200 8085 	bhi.w	1db72 <ll_rl_add+0x142>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1da68:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1da6c:	4e5a      	ldr	r6, [pc, #360]	; (1dbd8 <ll_rl_add+0x1a8>)
   1da6e:	00db      	lsls	r3, r3, #3
   1da70:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   1da72:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1da76:	2206      	movs	r2, #6
   1da78:	4649      	mov	r1, r9
   1da7a:	4430      	add	r0, r6
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1da7c:	9301      	str	r3, [sp, #4]
   1da7e:	f00c fc6d 	bl	2a35c <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1da82:	f898 1000 	ldrb.w	r1, [r8]
   1da86:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   1da8a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
   1da8e:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1da92:	4620      	mov	r0, r4
   1da94:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1da96:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1da9a:	f7f7 f9bb 	bl	14e14 <mem_nz>
   1da9e:	f816 200a 	ldrb.w	r2, [r6, sl]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1daa2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1daa4:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1daa8:	4628      	mov	r0, r5
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1daaa:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1daae:	f7f7 f9b1 	bl	14e14 <mem_nz>
   1dab2:	f816 200a 	ldrb.w	r2, [r6, sl]
	if (rl[i].pirk) {
   1dab6:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1dab8:	f000 0001 	and.w	r0, r0, #1
   1dabc:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   1dac0:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1dac4:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1dac8:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   1dacc:	ea4f 0a87 	mov.w	sl, r7, lsl #2
	if (rl[i].pirk) {
   1dad0:	d153      	bne.n	1db7a <ll_rl_add+0x14a>
	if (rl[i].lirk) {
   1dad2:	2800      	cmp	r0, #0
   1dad4:	d16c      	bne.n	1dbb0 <ll_rl_add+0x180>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1dad6:	f103 0018 	add.w	r0, r3, #24
   1dada:	2206      	movs	r2, #6
   1dadc:	4430      	add	r0, r6
   1dade:	2100      	movs	r1, #0
   1dae0:	f00c fc47 	bl	2a372 <memset>
	rl[i].dev = 0U;
   1dae4:	eb0a 0307 	add.w	r3, sl, r7
   1dae8:	4d3c      	ldr	r5, [pc, #240]	; (1dbdc <ll_rl_add+0x1ac>)
	rl[i].rpas_ready = 0U;
   1daea:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1daee:	f022 0212 	bic.w	r2, r2, #18
   1daf2:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1daf6:	f898 b000 	ldrb.w	fp, [r8]
   1dafa:	2400      	movs	r4, #0
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1dafc:	f00b 0b01 	and.w	fp, fp, #1
   1db00:	f1a5 0802 	sub.w	r8, r5, #2
   1db04:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1db08:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1db0c:	07db      	lsls	r3, r3, #31
   1db0e:	d501      	bpl.n	1db14 <ll_rl_add+0xe4>
   1db10:	455a      	cmp	r2, fp
   1db12:	d01b      	beq.n	1db4c <ll_rl_add+0x11c>
	for (i = 0; i < FAL_SIZE; i++) {
   1db14:	3401      	adds	r4, #1
   1db16:	2c08      	cmp	r4, #8
   1db18:	f105 0508 	add.w	r5, r5, #8
   1db1c:	d1f2      	bne.n	1db04 <ll_rl_add+0xd4>
		rl[i].fal = 0U;
   1db1e:	eb0a 0307 	add.w	r3, sl, r7
   1db22:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1db26:	f36f 1245 	bfc	r2, #5, #1
   1db2a:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	rl[i].taken = 1U;
   1db2e:	4457      	add	r7, sl
	return 0;
   1db30:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1db32:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   1db36:	f043 0301 	orr.w	r3, r3, #1
   1db3a:	f806 3037 	strb.w	r3, [r6, r7, lsl #3]
}
   1db3e:	b005      	add	sp, #20
   1db40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1db44:	200c      	movs	r0, #12
}
   1db46:	b005      	add	sp, #20
   1db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1db4c:	2206      	movs	r2, #6
   1db4e:	4628      	mov	r0, r5
   1db50:	4649      	mov	r1, r9
   1db52:	f00c fbda 	bl	2a30a <memcmp>
   1db56:	2800      	cmp	r0, #0
   1db58:	d1dc      	bne.n	1db14 <ll_rl_add+0xe4>
		rl[i].fal = 1U;
   1db5a:	eb0a 0307 	add.w	r3, sl, r7
		fal[j].rl_idx = i;
   1db5e:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1db62:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
		fal[j].rl_idx = i;
   1db66:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   1db68:	f042 0220 	orr.w	r2, r2, #32
   1db6c:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
   1db70:	e7dd      	b.n	1db2e <ll_rl_add+0xfe>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1db72:	2007      	movs	r0, #7
}
   1db74:	b005      	add	sp, #20
   1db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1db7a:	f8df e064 	ldr.w	lr, [pc, #100]	; 1dbe0 <ll_rl_add+0x1b0>
		peer_irk_rl_ids[peer_irk_count] = i;
   1db7e:	4a19      	ldr	r2, [pc, #100]	; (1dbe4 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   1db80:	f89e 1000 	ldrb.w	r1, [lr]
   1db84:	f88b 1017 	strb.w	r1, [fp, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1db88:	5457      	strb	r7, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1db8a:	4a17      	ldr	r2, [pc, #92]	; (1dbe8 <ll_rl_add+0x1b8>)
   1db8c:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1db90:	3101      	adds	r1, #1
	psrc += length - 1;
   1db92:	f104 020f 	add.w	r2, r4, #15
   1db96:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   1db9a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1db9e:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1dba0:	f812 1901 	ldrb.w	r1, [r2], #-1
   1dba4:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1dba8:	42a2      	cmp	r2, r4
   1dbaa:	d1f9      	bne.n	1dba0 <ll_rl_add+0x170>
	if (rl[i].lirk) {
   1dbac:	2800      	cmp	r0, #0
   1dbae:	d092      	beq.n	1dad6 <ll_rl_add+0xa6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1dbb0:	1dd8      	adds	r0, r3, #7
   1dbb2:	4629      	mov	r1, r5
   1dbb4:	2210      	movs	r2, #16
   1dbb6:	4430      	add	r0, r6
   1dbb8:	9301      	str	r3, [sp, #4]
   1dbba:	f00c fbcf 	bl	2a35c <memcpy>
		rl[i].local_rpa = NULL;
   1dbbe:	eb0a 0207 	add.w	r2, sl, r7
   1dbc2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   1dbc6:	2100      	movs	r1, #0
   1dbc8:	9b01      	ldr	r3, [sp, #4]
   1dbca:	6251      	str	r1, [r2, #36]	; 0x24
   1dbcc:	e783      	b.n	1dad6 <ll_rl_add+0xa6>
		return BT_HCI_ERR_INVALID_PARAM;
   1dbce:	2012      	movs	r0, #18
}
   1dbd0:	b005      	add	sp, #20
   1dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbd6:	bf00      	nop
   1dbd8:	20003a24 	.word	0x20003a24
   1dbdc:	200038fa 	.word	0x200038fa
   1dbe0:	20004c04 	.word	0x20004c04
   1dbe4:	2000399c 	.word	0x2000399c
   1dbe8:	200039a4 	.word	0x200039a4

0001dbec <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1dbec:	2807      	cmp	r0, #7
   1dbee:	d812      	bhi.n	1dc16 <ull_filter_lll_lrpa_get+0x2a>
   1dbf0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1dbf4:	4a09      	ldr	r2, [pc, #36]	; (1dc1c <ull_filter_lll_lrpa_get+0x30>)
   1dbf6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1dbfa:	f013 0f08 	tst.w	r3, #8
   1dbfe:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   1dc02:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1dc06:	d007      	beq.n	1dc18 <ull_filter_lll_lrpa_get+0x2c>
   1dc08:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1dc0c:	079b      	lsls	r3, r3, #30
   1dc0e:	d503      	bpl.n	1dc18 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   1dc10:	440a      	add	r2, r1
   1dc12:	6a50      	ldr	r0, [r2, #36]	; 0x24
   1dc14:	4770      	bx	lr
		return NULL;
   1dc16:	2000      	movs	r0, #0
}
   1dc18:	4770      	bx	lr
   1dc1a:	bf00      	nop
   1dc1c:	20003a24 	.word	0x20003a24

0001dc20 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1dc20:	4b02      	ldr	r3, [pc, #8]	; (1dc2c <ull_filter_lll_irks_get+0xc>)
   1dc22:	781b      	ldrb	r3, [r3, #0]
   1dc24:	7003      	strb	r3, [r0, #0]
}
   1dc26:	4802      	ldr	r0, [pc, #8]	; (1dc30 <ull_filter_lll_irks_get+0x10>)
   1dc28:	4770      	bx	lr
   1dc2a:	bf00      	nop
   1dc2c:	20004c04 	.word	0x20004c04
   1dc30:	200039a4 	.word	0x200039a4

0001dc34 <ull_filter_lll_rl_idx>:
{
   1dc34:	b538      	push	{r3, r4, r5, lr}
   1dc36:	460c      	mov	r4, r1
	if (filter) {
   1dc38:	b150      	cbz	r0, 1dc50 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1dc3a:	2907      	cmp	r1, #7
   1dc3c:	d822      	bhi.n	1dc84 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   1dc3e:	4d2a      	ldr	r5, [pc, #168]	; (1dce8 <ull_filter_lll_rl_idx+0xb4>)
   1dc40:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1dc44:	07da      	lsls	r2, r3, #31
   1dc46:	d52f      	bpl.n	1dca8 <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   1dc48:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1dc4c:	7860      	ldrb	r0, [r4, #1]
}
   1dc4e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1dc50:	2907      	cmp	r1, #7
   1dc52:	d83a      	bhi.n	1dcca <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1dc54:	4b25      	ldr	r3, [pc, #148]	; (1dcec <ull_filter_lll_rl_idx+0xb8>)
   1dc56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1dc5a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1dc5e:	07db      	lsls	r3, r3, #31
   1dc60:	d501      	bpl.n	1dc66 <ull_filter_lll_rl_idx+0x32>
   1dc62:	4620      	mov	r0, r4
}
   1dc64:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1dc66:	4a22      	ldr	r2, [pc, #136]	; (1dcf0 <ull_filter_lll_rl_idx+0xbc>)
   1dc68:	4922      	ldr	r1, [pc, #136]	; (1dcf4 <ull_filter_lll_rl_idx+0xc0>)
   1dc6a:	4823      	ldr	r0, [pc, #140]	; (1dcf8 <ull_filter_lll_rl_idx+0xc4>)
   1dc6c:	f240 3363 	movw	r3, #867	; 0x363
   1dc70:	f008 fe74 	bl	2695c <printk>
   1dc74:	4040      	eors	r0, r0
   1dc76:	f380 8811 	msr	BASEPRI, r0
   1dc7a:	f04f 0003 	mov.w	r0, #3
   1dc7e:	df02      	svc	2
   1dc80:	4620      	mov	r0, r4
}
   1dc82:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1dc84:	4a1a      	ldr	r2, [pc, #104]	; (1dcf0 <ull_filter_lll_rl_idx+0xbc>)
   1dc86:	491d      	ldr	r1, [pc, #116]	; (1dcfc <ull_filter_lll_rl_idx+0xc8>)
   1dc88:	481b      	ldr	r0, [pc, #108]	; (1dcf8 <ull_filter_lll_rl_idx+0xc4>)
   1dc8a:	f240 335d 	movw	r3, #861	; 0x35d
   1dc8e:	f008 fe65 	bl	2695c <printk>
   1dc92:	4040      	eors	r0, r0
   1dc94:	f380 8811 	msr	BASEPRI, r0
   1dc98:	f04f 0003 	mov.w	r0, #3
   1dc9c:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   1dc9e:	4d12      	ldr	r5, [pc, #72]	; (1dce8 <ull_filter_lll_rl_idx+0xb4>)
   1dca0:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1dca4:	07da      	lsls	r2, r3, #31
   1dca6:	d4cf      	bmi.n	1dc48 <ull_filter_lll_rl_idx+0x14>
   1dca8:	4a11      	ldr	r2, [pc, #68]	; (1dcf0 <ull_filter_lll_rl_idx+0xbc>)
   1dcaa:	4915      	ldr	r1, [pc, #84]	; (1dd00 <ull_filter_lll_rl_idx+0xcc>)
   1dcac:	4812      	ldr	r0, [pc, #72]	; (1dcf8 <ull_filter_lll_rl_idx+0xc4>)
   1dcae:	f240 335e 	movw	r3, #862	; 0x35e
   1dcb2:	f008 fe53 	bl	2695c <printk>
   1dcb6:	4040      	eors	r0, r0
   1dcb8:	f380 8811 	msr	BASEPRI, r0
   1dcbc:	f04f 0003 	mov.w	r0, #3
   1dcc0:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   1dcc2:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1dcc6:	7860      	ldrb	r0, [r4, #1]
   1dcc8:	e7c1      	b.n	1dc4e <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1dcca:	4a09      	ldr	r2, [pc, #36]	; (1dcf0 <ull_filter_lll_rl_idx+0xbc>)
   1dccc:	490d      	ldr	r1, [pc, #52]	; (1dd04 <ull_filter_lll_rl_idx+0xd0>)
   1dcce:	480a      	ldr	r0, [pc, #40]	; (1dcf8 <ull_filter_lll_rl_idx+0xc4>)
   1dcd0:	f240 3361 	movw	r3, #865	; 0x361
   1dcd4:	f008 fe42 	bl	2695c <printk>
   1dcd8:	4040      	eors	r0, r0
   1dcda:	f380 8811 	msr	BASEPRI, r0
   1dcde:	f04f 0003 	mov.w	r0, #3
   1dce2:	df02      	svc	2
   1dce4:	e7b6      	b.n	1dc54 <ull_filter_lll_rl_idx+0x20>
   1dce6:	bf00      	nop
   1dce8:	200038f8 	.word	0x200038f8
   1dcec:	20003a24 	.word	0x20003a24
   1dcf0:	0002ff4c 	.word	0x0002ff4c
   1dcf4:	00030114 	.word	0x00030114
   1dcf8:	0002f6fc 	.word	0x0002f6fc
   1dcfc:	0002ffb0 	.word	0x0002ffb0
   1dd00:	00030058 	.word	0x00030058
   1dd04:	00030070 	.word	0x00030070

0001dd08 <ull_filter_lll_rl_irk_idx>:
{
   1dd08:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1dd0a:	4b20      	ldr	r3, [pc, #128]	; (1dd8c <ull_filter_lll_rl_irk_idx+0x84>)
   1dd0c:	781b      	ldrb	r3, [r3, #0]
   1dd0e:	4283      	cmp	r3, r0
{
   1dd10:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1dd12:	d90c      	bls.n	1dd2e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1dd14:	4b1e      	ldr	r3, [pc, #120]	; (1dd90 <ull_filter_lll_rl_irk_idx+0x88>)
   1dd16:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1dd18:	2c07      	cmp	r4, #7
   1dd1a:	d819      	bhi.n	1dd50 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1dd1c:	4b1d      	ldr	r3, [pc, #116]	; (1dd94 <ull_filter_lll_rl_irk_idx+0x8c>)
   1dd1e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1dd22:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1dd26:	07db      	lsls	r3, r3, #31
   1dd28:	d520      	bpl.n	1dd6c <ull_filter_lll_rl_irk_idx+0x64>
}
   1dd2a:	4620      	mov	r0, r4
   1dd2c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1dd2e:	4a1a      	ldr	r2, [pc, #104]	; (1dd98 <ull_filter_lll_rl_irk_idx+0x90>)
   1dd30:	491a      	ldr	r1, [pc, #104]	; (1dd9c <ull_filter_lll_rl_irk_idx+0x94>)
   1dd32:	481b      	ldr	r0, [pc, #108]	; (1dda0 <ull_filter_lll_rl_irk_idx+0x98>)
   1dd34:	f240 336d 	movw	r3, #877	; 0x36d
   1dd38:	f008 fe10 	bl	2695c <printk>
   1dd3c:	4040      	eors	r0, r0
   1dd3e:	f380 8811 	msr	BASEPRI, r0
   1dd42:	f04f 0003 	mov.w	r0, #3
   1dd46:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1dd48:	4b11      	ldr	r3, [pc, #68]	; (1dd90 <ull_filter_lll_rl_irk_idx+0x88>)
   1dd4a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1dd4c:	2c07      	cmp	r4, #7
   1dd4e:	d9e5      	bls.n	1dd1c <ull_filter_lll_rl_irk_idx+0x14>
   1dd50:	4a11      	ldr	r2, [pc, #68]	; (1dd98 <ull_filter_lll_rl_irk_idx+0x90>)
   1dd52:	4914      	ldr	r1, [pc, #80]	; (1dda4 <ull_filter_lll_rl_irk_idx+0x9c>)
   1dd54:	4812      	ldr	r0, [pc, #72]	; (1dda0 <ull_filter_lll_rl_irk_idx+0x98>)
   1dd56:	f240 336f 	movw	r3, #879	; 0x36f
   1dd5a:	f008 fdff 	bl	2695c <printk>
   1dd5e:	4040      	eors	r0, r0
   1dd60:	f380 8811 	msr	BASEPRI, r0
   1dd64:	f04f 0003 	mov.w	r0, #3
   1dd68:	df02      	svc	2
   1dd6a:	e7d7      	b.n	1dd1c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1dd6c:	4a0a      	ldr	r2, [pc, #40]	; (1dd98 <ull_filter_lll_rl_irk_idx+0x90>)
   1dd6e:	490e      	ldr	r1, [pc, #56]	; (1dda8 <ull_filter_lll_rl_irk_idx+0xa0>)
   1dd70:	480b      	ldr	r0, [pc, #44]	; (1dda0 <ull_filter_lll_rl_irk_idx+0x98>)
   1dd72:	f44f 735c 	mov.w	r3, #880	; 0x370
   1dd76:	f008 fdf1 	bl	2695c <printk>
   1dd7a:	4040      	eors	r0, r0
   1dd7c:	f380 8811 	msr	BASEPRI, r0
   1dd80:	f04f 0003 	mov.w	r0, #3
   1dd84:	df02      	svc	2
}
   1dd86:	4620      	mov	r0, r4
   1dd88:	bd10      	pop	{r4, pc}
   1dd8a:	bf00      	nop
   1dd8c:	20004c04 	.word	0x20004c04
   1dd90:	2000399c 	.word	0x2000399c
   1dd94:	20003a24 	.word	0x20003a24
   1dd98:	0002ff4c 	.word	0x0002ff4c
   1dd9c:	00030120 	.word	0x00030120
   1dda0:	0002f6fc 	.word	0x0002f6fc
   1dda4:	00030140 	.word	0x00030140
   1dda8:	00030114 	.word	0x00030114

0001ddac <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1ddac:	2807      	cmp	r0, #7
   1ddae:	d823      	bhi.n	1ddf8 <ull_filter_lll_irk_in_fal+0x4c>
{
   1ddb0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1ddb2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1ddb6:	4e11      	ldr	r6, [pc, #68]	; (1ddfc <ull_filter_lll_irk_in_fal+0x50>)
   1ddb8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1ddbc:	07db      	lsls	r3, r3, #31
   1ddbe:	4604      	mov	r4, r0
   1ddc0:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1ddc4:	d505      	bpl.n	1ddd2 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1ddc6:	442c      	add	r4, r5
   1ddc8:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1ddcc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1ddd0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1ddd2:	4a0b      	ldr	r2, [pc, #44]	; (1de00 <ull_filter_lll_irk_in_fal+0x54>)
   1ddd4:	490b      	ldr	r1, [pc, #44]	; (1de04 <ull_filter_lll_irk_in_fal+0x58>)
   1ddd6:	480c      	ldr	r0, [pc, #48]	; (1de08 <ull_filter_lll_irk_in_fal+0x5c>)
   1ddd8:	f240 337b 	movw	r3, #891	; 0x37b
   1dddc:	f008 fdbe 	bl	2695c <printk>
   1dde0:	4040      	eors	r0, r0
   1dde2:	f380 8811 	msr	BASEPRI, r0
   1dde6:	f04f 0003 	mov.w	r0, #3
   1ddea:	df02      	svc	2
	return rl[rl_idx].fal;
   1ddec:	442c      	add	r4, r5
   1ddee:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1ddf2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1ddf6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1ddf8:	2000      	movs	r0, #0
}
   1ddfa:	4770      	bx	lr
   1ddfc:	20003a24 	.word	0x20003a24
   1de00:	0002ff4c 	.word	0x0002ff4c
   1de04:	0002ff9c 	.word	0x0002ff9c
   1de08:	0002f6fc 	.word	0x0002f6fc

0001de0c <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1de0c:	4b14      	ldr	r3, [pc, #80]	; (1de60 <ull_filter_lll_rl_idx_allowed+0x54>)
   1de0e:	781b      	ldrb	r3, [r3, #0]
   1de10:	b19b      	cbz	r3, 1de3a <ull_filter_lll_rl_idx_allowed+0x2e>
   1de12:	2907      	cmp	r1, #7
{
   1de14:	b570      	push	{r4, r5, r6, lr}
   1de16:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1de18:	d80d      	bhi.n	1de36 <ull_filter_lll_rl_idx_allowed+0x2a>
   1de1a:	b960      	cbnz	r0, 1de36 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1de1c:	4e11      	ldr	r6, [pc, #68]	; (1de64 <ull_filter_lll_rl_idx_allowed+0x58>)
   1de1e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1de22:	008d      	lsls	r5, r1, #2
   1de24:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1de28:	07da      	lsls	r2, r3, #31
   1de2a:	d50b      	bpl.n	1de44 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1de2c:	442c      	add	r4, r5
   1de2e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1de32:	0743      	lsls	r3, r0, #29
   1de34:	d403      	bmi.n	1de3e <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1de36:	2001      	movs	r0, #1
}
   1de38:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1de3a:	2001      	movs	r0, #1
}
   1de3c:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1de3e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1de42:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1de44:	4a08      	ldr	r2, [pc, #32]	; (1de68 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1de46:	4909      	ldr	r1, [pc, #36]	; (1de6c <ull_filter_lll_rl_idx_allowed+0x60>)
   1de48:	4809      	ldr	r0, [pc, #36]	; (1de70 <ull_filter_lll_rl_idx_allowed+0x64>)
   1de4a:	f44f 7365 	mov.w	r3, #916	; 0x394
   1de4e:	f008 fd85 	bl	2695c <printk>
   1de52:	4040      	eors	r0, r0
   1de54:	f380 8811 	msr	BASEPRI, r0
   1de58:	f04f 0003 	mov.w	r0, #3
   1de5c:	df02      	svc	2
   1de5e:	e7e5      	b.n	1de2c <ull_filter_lll_rl_idx_allowed+0x20>
   1de60:	20004c05 	.word	0x20004c05
   1de64:	20003a24 	.word	0x20003a24
   1de68:	0002ff4c 	.word	0x0002ff4c
   1de6c:	0002ff9c 	.word	0x0002ff9c
   1de70:	0002f6fc 	.word	0x0002f6fc

0001de74 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1de74:	7813      	ldrb	r3, [r2, #0]
   1de76:	2bff      	cmp	r3, #255	; 0xff
   1de78:	d11b      	bne.n	1deb2 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1de7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de7e:	4d19      	ldr	r5, [pc, #100]	; (1dee4 <ull_filter_lll_rl_addr_allowed+0x70>)
   1de80:	4604      	mov	r4, r0
   1de82:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1de84:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1de86:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1de8a:	b2df      	uxtb	r7, r3
   1de8c:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1de90:	f01c 0001 	ands.w	r0, ip, #1
   1de94:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1de98:	d003      	beq.n	1dea2 <ull_filter_lll_rl_addr_allowed+0x2e>
   1de9a:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1de9e:	45a4      	cmp	ip, r4
   1dea0:	d009      	beq.n	1deb6 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1dea2:	3301      	adds	r3, #1
   1dea4:	2b08      	cmp	r3, #8
   1dea6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1deaa:	d1ec      	bne.n	1de86 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1deac:	2001      	movs	r0, #1
}
   1deae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1deb2:	2001      	movs	r0, #1
}
   1deb4:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1deb6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1deba:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1debc:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1dec0:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1dec4:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1dec8:	45ca      	cmp	sl, r9
   1deca:	d1ea      	bne.n	1dea2 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1decc:	45dc      	cmp	ip, fp
   1dece:	d1f7      	bne.n	1dec0 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   1ded0:	4433      	add	r3, r6
				*rl_idx = i;
   1ded2:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1ded4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1ded8:	075a      	lsls	r2, r3, #29
   1deda:	d5e8      	bpl.n	1deae <ull_filter_lll_rl_addr_allowed+0x3a>
   1dedc:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1dee0:	e7e5      	b.n	1deae <ull_filter_lll_rl_addr_allowed+0x3a>
   1dee2:	bf00      	nop
   1dee4:	20003a24 	.word	0x20003a24

0001dee8 <ull_filter_lll_rl_addr_resolve>:
{
   1dee8:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1deea:	4b0e      	ldr	r3, [pc, #56]	; (1df24 <ull_filter_lll_rl_addr_resolve+0x3c>)
   1deec:	781c      	ldrb	r4, [r3, #0]
   1deee:	b17c      	cbz	r4, 1df10 <ull_filter_lll_rl_addr_resolve+0x28>
   1def0:	2a07      	cmp	r2, #7
   1def2:	d80d      	bhi.n	1df10 <ull_filter_lll_rl_addr_resolve+0x28>
   1def4:	4c0c      	ldr	r4, [pc, #48]	; (1df28 <ull_filter_lll_rl_addr_resolve+0x40>)
   1def6:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1defa:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   1defe:	f01c 0f08 	tst.w	ip, #8
   1df02:	d005      	beq.n	1df10 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1df04:	b120      	cbz	r0, 1df10 <ull_filter_lll_rl_addr_resolve+0x28>
   1df06:	794b      	ldrb	r3, [r1, #5]
   1df08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1df0c:	2b40      	cmp	r3, #64	; 0x40
   1df0e:	d002      	beq.n	1df16 <ull_filter_lll_rl_addr_resolve+0x2e>
}
   1df10:	2000      	movs	r0, #0
   1df12:	bc10      	pop	{r4}
   1df14:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1df16:	2028      	movs	r0, #40	; 0x28
   1df18:	fb00 4002 	mla	r0, r0, r2, r4
   1df1c:	3007      	adds	r0, #7
}
   1df1e:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1df20:	f00c ba78 	b.w	2a414 <bt_rpa_irk_matches>
   1df24:	20004c05 	.word	0x20004c05
   1df28:	20003a24 	.word	0x20003a24

0001df2c <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1df2c:	4b02      	ldr	r3, [pc, #8]	; (1df38 <ull_filter_lll_rl_enabled+0xc>)
   1df2e:	7818      	ldrb	r0, [r3, #0]
}
   1df30:	3800      	subs	r0, #0
   1df32:	bf18      	it	ne
   1df34:	2001      	movne	r0, #1
   1df36:	4770      	bx	lr
   1df38:	20004c05 	.word	0x20004c05

0001df3c <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1df3c:	4668      	mov	r0, sp
   1df3e:	f020 0107 	bic.w	r1, r0, #7
   1df42:	468d      	mov	sp, r1
   1df44:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1df46:	f001 ff0b 	bl	1fd60 <isr_radio>

	ISR_DIRECT_PM();
   1df4a:	f7ed faa1 	bl	b490 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1df4e:	f7ed fb97 	bl	b680 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1df52:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1df56:	4685      	mov	sp, r0
   1df58:	4770      	bx	lr
   1df5a:	bf00      	nop

0001df5c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1df5c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1df5e:	4b09      	ldr	r3, [pc, #36]	; (1df84 <rtc0_nrf5_isr+0x28>)
   1df60:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1df64:	b93a      	cbnz	r2, 1df76 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1df66:	2001      	movs	r0, #1
   1df68:	f7f7 f83a 	bl	14fe0 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1df6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1df70:	2002      	movs	r0, #2
   1df72:	f7f7 b835 	b.w	14fe0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1df76:	2000      	movs	r0, #0
   1df78:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1df7c:	f7f8 f936 	bl	161ec <ticker_trigger>
   1df80:	e7f1      	b.n	1df66 <rtc0_nrf5_isr+0xa>
   1df82:	bf00      	nop
   1df84:	4000b000 	.word	0x4000b000

0001df88 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1df88:	2000      	movs	r0, #0
   1df8a:	f7f7 b829 	b.w	14fe0 <mayfly_run>
   1df8e:	bf00      	nop

0001df90 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1df90:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1df92:	4b0e      	ldr	r3, [pc, #56]	; (1dfcc <ticker_stop_op_cb+0x3c>)
   1df94:	4c0e      	ldr	r4, [pc, #56]	; (1dfd0 <ticker_stop_op_cb+0x40>)
   1df96:	781a      	ldrb	r2, [r3, #0]
   1df98:	7823      	ldrb	r3, [r4, #0]
   1df9a:	429a      	cmp	r2, r3
   1df9c:	d006      	beq.n	1dfac <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1df9e:	490d      	ldr	r1, [pc, #52]	; (1dfd4 <ticker_stop_op_cb+0x44>)
   1dfa0:	4a0d      	ldr	r2, [pc, #52]	; (1dfd8 <ticker_stop_op_cb+0x48>)
   1dfa2:	7809      	ldrb	r1, [r1, #0]
   1dfa4:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1dfa6:	3301      	adds	r3, #1
   1dfa8:	7023      	strb	r3, [r4, #0]
}
   1dfaa:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1dfac:	4a0b      	ldr	r2, [pc, #44]	; (1dfdc <ticker_stop_op_cb+0x4c>)
   1dfae:	490c      	ldr	r1, [pc, #48]	; (1dfe0 <ticker_stop_op_cb+0x50>)
   1dfb0:	480c      	ldr	r0, [pc, #48]	; (1dfe4 <ticker_stop_op_cb+0x54>)
   1dfb2:	f240 3301 	movw	r3, #769	; 0x301
   1dfb6:	f008 fcd1 	bl	2695c <printk>
   1dfba:	4040      	eors	r0, r0
   1dfbc:	f380 8811 	msr	BASEPRI, r0
   1dfc0:	f04f 0003 	mov.w	r0, #3
   1dfc4:	df02      	svc	2
	preempt_stop_ack++;
   1dfc6:	7823      	ldrb	r3, [r4, #0]
   1dfc8:	e7e9      	b.n	1df9e <ticker_stop_op_cb+0xe>
   1dfca:	bf00      	nop
   1dfcc:	20004c0b 	.word	0x20004c0b
   1dfd0:	20004c0a 	.word	0x20004c0a
   1dfd4:	20004c06 	.word	0x20004c06
   1dfd8:	20004c07 	.word	0x20004c07
   1dfdc:	0003015c 	.word	0x0003015c
   1dfe0:	000301a4 	.word	0x000301a4
   1dfe4:	0002f6fc 	.word	0x0002f6fc

0001dfe8 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1dfe8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1dfea:	b9f8      	cbnz	r0, 1e02c <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1dfec:	4b1e      	ldr	r3, [pc, #120]	; (1e068 <ticker_start_op_cb+0x80>)
   1dfee:	4d1f      	ldr	r5, [pc, #124]	; (1e06c <ticker_start_op_cb+0x84>)
   1dff0:	781a      	ldrb	r2, [r3, #0]
   1dff2:	782b      	ldrb	r3, [r5, #0]
   1dff4:	429a      	cmp	r2, r3
   1dff6:	d027      	beq.n	1e048 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   1dff8:	4a1d      	ldr	r2, [pc, #116]	; (1e070 <ticker_start_op_cb+0x88>)
   1dffa:	4c1e      	ldr	r4, [pc, #120]	; (1e074 <ticker_start_op_cb+0x8c>)
   1dffc:	7812      	ldrb	r2, [r2, #0]
   1dffe:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1e000:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1e002:	4291      	cmp	r1, r2
	preempt_start_ack++;
   1e004:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   1e006:	b2d3      	uxtb	r3, r2
   1e008:	d00d      	beq.n	1e026 <ticker_start_op_cb+0x3e>
   1e00a:	4a1b      	ldr	r2, [pc, #108]	; (1e078 <ticker_start_op_cb+0x90>)
   1e00c:	491b      	ldr	r1, [pc, #108]	; (1e07c <ticker_start_op_cb+0x94>)
   1e00e:	481c      	ldr	r0, [pc, #112]	; (1e080 <ticker_start_op_cb+0x98>)
   1e010:	f240 330f 	movw	r3, #783	; 0x30f
   1e014:	f008 fca2 	bl	2695c <printk>
   1e018:	4040      	eors	r0, r0
   1e01a:	f380 8811 	msr	BASEPRI, r0
   1e01e:	f04f 0003 	mov.w	r0, #3
   1e022:	df02      	svc	2
	preempt_req++;
   1e024:	7823      	ldrb	r3, [r4, #0]
   1e026:	3301      	adds	r3, #1
   1e028:	7023      	strb	r3, [r4, #0]
}
   1e02a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1e02c:	4a12      	ldr	r2, [pc, #72]	; (1e078 <ticker_start_op_cb+0x90>)
   1e02e:	4915      	ldr	r1, [pc, #84]	; (1e084 <ticker_start_op_cb+0x9c>)
   1e030:	4813      	ldr	r0, [pc, #76]	; (1e080 <ticker_start_op_cb+0x98>)
   1e032:	f240 330a 	movw	r3, #778	; 0x30a
   1e036:	f008 fc91 	bl	2695c <printk>
   1e03a:	4040      	eors	r0, r0
   1e03c:	f380 8811 	msr	BASEPRI, r0
   1e040:	f04f 0003 	mov.w	r0, #3
   1e044:	df02      	svc	2
   1e046:	e7d1      	b.n	1dfec <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1e048:	4a0b      	ldr	r2, [pc, #44]	; (1e078 <ticker_start_op_cb+0x90>)
   1e04a:	490f      	ldr	r1, [pc, #60]	; (1e088 <ticker_start_op_cb+0xa0>)
   1e04c:	480c      	ldr	r0, [pc, #48]	; (1e080 <ticker_start_op_cb+0x98>)
   1e04e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1e052:	f008 fc83 	bl	2695c <printk>
   1e056:	4040      	eors	r0, r0
   1e058:	f380 8811 	msr	BASEPRI, r0
   1e05c:	f04f 0003 	mov.w	r0, #3
   1e060:	df02      	svc	2
	preempt_start_ack++;
   1e062:	782b      	ldrb	r3, [r5, #0]
   1e064:	e7c8      	b.n	1dff8 <ticker_start_op_cb+0x10>
   1e066:	bf00      	nop
   1e068:	20004c09 	.word	0x20004c09
   1e06c:	20004c08 	.word	0x20004c08
   1e070:	20004c06 	.word	0x20004c06
   1e074:	20004c07 	.word	0x20004c07
   1e078:	0003015c 	.word	0x0003015c
   1e07c:	000301f4 	.word	0x000301f4
   1e080:	0002f6fc 	.word	0x0002f6fc
   1e084:	0002fcc8 	.word	0x0002fcc8
   1e088:	000301cc 	.word	0x000301cc

0001e08c <isr_race>:
	radio_status_reset();
   1e08c:	f001 bf80 	b.w	1ff90 <radio_status_reset>

0001e090 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1e090:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1e092:	4a18      	ldr	r2, [pc, #96]	; (1e0f4 <preempt_ticker_cb+0x64>)
   1e094:	4c18      	ldr	r4, [pc, #96]	; (1e0f8 <preempt_ticker_cb+0x68>)
   1e096:	7812      	ldrb	r2, [r2, #0]
   1e098:	7823      	ldrb	r3, [r4, #0]
   1e09a:	429a      	cmp	r2, r3
   1e09c:	d01b      	beq.n	1e0d6 <preempt_ticker_cb+0x46>
	preempt_ack++;
   1e09e:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1e0a0:	4b16      	ldr	r3, [pc, #88]	; (1e0fc <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1e0a2:	3101      	adds	r1, #1
   1e0a4:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1e0a6:	2200      	movs	r2, #0
	preempt_ack++;
   1e0a8:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1e0aa:	9903      	ldr	r1, [sp, #12]
   1e0ac:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1e0ae:	2001      	movs	r0, #1
   1e0b0:	4611      	mov	r1, r2
   1e0b2:	f7f6 ff3d 	bl	14f30 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1e0b6:	b900      	cbnz	r0, 1e0ba <preempt_ticker_cb+0x2a>
}
   1e0b8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1e0ba:	4a11      	ldr	r2, [pc, #68]	; (1e100 <preempt_ticker_cb+0x70>)
   1e0bc:	4911      	ldr	r1, [pc, #68]	; (1e104 <preempt_ticker_cb+0x74>)
   1e0be:	4812      	ldr	r0, [pc, #72]	; (1e108 <preempt_ticker_cb+0x78>)
   1e0c0:	f240 3376 	movw	r3, #886	; 0x376
   1e0c4:	f008 fc4a 	bl	2695c <printk>
   1e0c8:	4040      	eors	r0, r0
   1e0ca:	f380 8811 	msr	BASEPRI, r0
   1e0ce:	f04f 0003 	mov.w	r0, #3
   1e0d2:	df02      	svc	2
}
   1e0d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1e0d6:	4a0a      	ldr	r2, [pc, #40]	; (1e100 <preempt_ticker_cb+0x70>)
   1e0d8:	490c      	ldr	r1, [pc, #48]	; (1e10c <preempt_ticker_cb+0x7c>)
   1e0da:	480b      	ldr	r0, [pc, #44]	; (1e108 <preempt_ticker_cb+0x78>)
   1e0dc:	f44f 735c 	mov.w	r3, #880	; 0x370
   1e0e0:	f008 fc3c 	bl	2695c <printk>
   1e0e4:	4040      	eors	r0, r0
   1e0e6:	f380 8811 	msr	BASEPRI, r0
   1e0ea:	f04f 0003 	mov.w	r0, #3
   1e0ee:	df02      	svc	2
   1e0f0:	e7d5      	b.n	1e09e <preempt_ticker_cb+0xe>
   1e0f2:	bf00      	nop
   1e0f4:	20004c07 	.word	0x20004c07
   1e0f8:	20004c06 	.word	0x20004c06
   1e0fc:	20000754 	.word	0x20000754
   1e100:	0003015c 	.word	0x0003015c
   1e104:	0002fb50 	.word	0x0002fb50
   1e108:	0002f6fc 	.word	0x0002f6fc
   1e10c:	00030210 	.word	0x00030210

0001e110 <preempt_ticker_stop>:
{
   1e110:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1e112:	4917      	ldr	r1, [pc, #92]	; (1e170 <preempt_ticker_stop+0x60>)
   1e114:	4a17      	ldr	r2, [pc, #92]	; (1e174 <preempt_ticker_stop+0x64>)
   1e116:	780b      	ldrb	r3, [r1, #0]
   1e118:	7812      	ldrb	r2, [r2, #0]
   1e11a:	429a      	cmp	r2, r3
{
   1e11c:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   1e11e:	d122      	bne.n	1e166 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   1e120:	4b15      	ldr	r3, [pc, #84]	; (1e178 <preempt_ticker_stop+0x68>)
   1e122:	4a16      	ldr	r2, [pc, #88]	; (1e17c <preempt_ticker_stop+0x6c>)
   1e124:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1e126:	7812      	ldrb	r2, [r2, #0]
   1e128:	429a      	cmp	r2, r3
   1e12a:	d01c      	beq.n	1e166 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   1e12c:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1e12e:	4b14      	ldr	r3, [pc, #80]	; (1e180 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   1e130:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1e132:	2200      	movs	r2, #0
	preempt_stop_req++;
   1e134:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1e136:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1e138:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1e13a:	4611      	mov	r1, r2
   1e13c:	4610      	mov	r0, r2
   1e13e:	f7f8 f94d 	bl	163dc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e142:	4604      	mov	r4, r0
   1e144:	b178      	cbz	r0, 1e166 <preempt_ticker_stop+0x56>
   1e146:	2802      	cmp	r0, #2
   1e148:	d00e      	beq.n	1e168 <preempt_ticker_stop+0x58>
   1e14a:	4a0e      	ldr	r2, [pc, #56]	; (1e184 <preempt_ticker_stop+0x74>)
   1e14c:	490e      	ldr	r1, [pc, #56]	; (1e188 <preempt_ticker_stop+0x78>)
   1e14e:	480f      	ldr	r0, [pc, #60]	; (1e18c <preempt_ticker_stop+0x7c>)
   1e150:	f240 3362 	movw	r3, #866	; 0x362
   1e154:	f008 fc02 	bl	2695c <printk>
   1e158:	4040      	eors	r0, r0
   1e15a:	f380 8811 	msr	BASEPRI, r0
   1e15e:	f04f 0003 	mov.w	r0, #3
   1e162:	df02      	svc	2
   1e164:	e000      	b.n	1e168 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1e166:	2400      	movs	r4, #0
}
   1e168:	4620      	mov	r0, r4
   1e16a:	b002      	add	sp, #8
   1e16c:	bd10      	pop	{r4, pc}
   1e16e:	bf00      	nop
   1e170:	20004c0b 	.word	0x20004c0b
   1e174:	20004c0a 	.word	0x20004c0a
   1e178:	20004c06 	.word	0x20004c06
   1e17c:	20004c07 	.word	0x20004c07
   1e180:	0001df91 	.word	0x0001df91
   1e184:	0003015c 	.word	0x0003015c
   1e188:	0003022c 	.word	0x0003022c
   1e18c:	0002f6fc 	.word	0x0002f6fc

0001e190 <preempt_ticker_start>:
{
   1e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1e194:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1e196:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1e19a:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1e19c:	4b2a      	ldr	r3, [pc, #168]	; (1e248 <preempt_ticker_start+0xb8>)
   1e19e:	4f2b      	ldr	r7, [pc, #172]	; (1e24c <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1e1a0:	68d6      	ldr	r6, [r2, #12]
{
   1e1a2:	460d      	mov	r5, r1
   1e1a4:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1e1a6:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   1e1a8:	6890      	ldr	r0, [r2, #8]
   1e1aa:	6853      	ldr	r3, [r2, #4]
   1e1ac:	4298      	cmp	r0, r3
   1e1ae:	bf2c      	ite	cs
   1e1b0:	ebc6 0600 	rsbcs	r6, r6, r0
   1e1b4:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   1e1b8:	783b      	ldrb	r3, [r7, #0]
   1e1ba:	4299      	cmp	r1, r3
{
   1e1bc:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1e1be:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1e1c2:	d033      	beq.n	1e22c <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   1e1c4:	2c00      	cmp	r4, #0
   1e1c6:	d03a      	beq.n	1e23e <preempt_ticker_start+0xae>
   1e1c8:	7f23      	ldrb	r3, [r4, #28]
   1e1ca:	079b      	lsls	r3, r3, #30
   1e1cc:	d437      	bmi.n	1e23e <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1e1ce:	f8df a080 	ldr.w	sl, [pc, #128]	; 1e250 <preempt_ticker_start+0xc0>
   1e1d2:	f8da 0000 	ldr.w	r0, [sl]
   1e1d6:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1e1da:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1e1de:	d022      	beq.n	1e226 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1e1e0:	f7ff ff96 	bl	1e110 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1e1e4:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1e1e6:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1e1e8:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   1e1ec:	f043 0302 	orr.w	r3, r3, #2
   1e1f0:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1e1f2:	4620      	mov	r0, r4
   1e1f4:	69a3      	ldr	r3, [r4, #24]
   1e1f6:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e1f8:	4b16      	ldr	r3, [pc, #88]	; (1e254 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1e1fa:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e1fc:	9600      	str	r6, [sp, #0]
   1e1fe:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1e202:	4b15      	ldr	r3, [pc, #84]	; (1e258 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   1e204:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e208:	2200      	movs	r2, #0
	preempt_start_req++;
   1e20a:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e20c:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1e210:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e212:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1e216:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1e21a:	4643      	mov	r3, r8
   1e21c:	4611      	mov	r1, r2
   1e21e:	4610      	mov	r0, r2
	preempt_start_req++;
   1e220:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e222:	f7f8 f851 	bl	162c8 <ticker_start>
}
   1e226:	b00a      	add	sp, #40	; 0x28
   1e228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1e22c:	4b0b      	ldr	r3, [pc, #44]	; (1e25c <preempt_ticker_start+0xcc>)
   1e22e:	4a0c      	ldr	r2, [pc, #48]	; (1e260 <preempt_ticker_start+0xd0>)
   1e230:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1e232:	7812      	ldrb	r2, [r2, #0]
   1e234:	429a      	cmp	r2, r3
   1e236:	d1c5      	bne.n	1e1c4 <preempt_ticker_start+0x34>
   1e238:	f8df a014 	ldr.w	sl, [pc, #20]	; 1e250 <preempt_ticker_start+0xc0>
   1e23c:	e7dc      	b.n	1e1f8 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   1e23e:	2000      	movs	r0, #0
}
   1e240:	b00a      	add	sp, #40	; 0x28
   1e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e246:	bf00      	nop
   1e248:	20004c08 	.word	0x20004c08
   1e24c:	20004c09 	.word	0x20004c09
   1e250:	20003bb4 	.word	0x20003bb4
   1e254:	0001dfe9 	.word	0x0001dfe9
   1e258:	0001e091 	.word	0x0001e091
   1e25c:	20004c06 	.word	0x20004c06
   1e260:	20004c07 	.word	0x20004c07

0001e264 <preempt>:

static void preempt(void *param)
{
   1e264:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1e266:	4e4b      	ldr	r6, [pc, #300]	; (1e394 <preempt+0x130>)
   1e268:	68b3      	ldr	r3, [r6, #8]
{
   1e26a:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1e26c:	b1b3      	cbz	r3, 1e29c <preempt+0x38>
   1e26e:	6833      	ldr	r3, [r6, #0]
   1e270:	b1a3      	cbz	r3, 1e29c <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1e272:	23ff      	movs	r3, #255	; 0xff
   1e274:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1e276:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1e27a:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1e27e:	f7fa fe39 	bl	18ef4 <ull_prepare_dequeue_iter>
	if (!next) {
   1e282:	4601      	mov	r1, r0
   1e284:	b150      	cbz	r0, 1e29c <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1e286:	7f0b      	ldrb	r3, [r1, #28]
   1e288:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1e28c:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1e290:	d006      	beq.n	1e2a0 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1e292:	f7fa fe2f 	bl	18ef4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1e296:	4601      	mov	r1, r0
   1e298:	2800      	cmp	r0, #0
   1e29a:	d1f4      	bne.n	1e286 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1e29c:	b009      	add	sp, #36	; 0x24
   1e29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1e2a0:	428d      	cmp	r5, r1
   1e2a2:	d126      	bne.n	1e2f2 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1e2a4:	6873      	ldr	r3, [r6, #4]
   1e2a6:	6831      	ldr	r1, [r6, #0]
   1e2a8:	68e8      	ldr	r0, [r5, #12]
   1e2aa:	aa03      	add	r2, sp, #12
   1e2ac:	4798      	blx	r3
	if (!err) {
   1e2ae:	4607      	mov	r7, r0
   1e2b0:	b1b0      	cbz	r0, 1e2e0 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1e2b2:	68b3      	ldr	r3, [r6, #8]
   1e2b4:	6831      	ldr	r1, [r6, #0]
   1e2b6:	4620      	mov	r0, r4
   1e2b8:	4798      	blx	r3
	if (err == -EAGAIN) {
   1e2ba:	f117 0f0b 	cmn.w	r7, #11
   1e2be:	d02c      	beq.n	1e31a <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1e2c0:	378c      	adds	r7, #140	; 0x8c
   1e2c2:	d0eb      	beq.n	1e29c <preempt+0x38>
   1e2c4:	4a34      	ldr	r2, [pc, #208]	; (1e398 <preempt+0x134>)
   1e2c6:	4935      	ldr	r1, [pc, #212]	; (1e39c <preempt+0x138>)
   1e2c8:	4835      	ldr	r0, [pc, #212]	; (1e3a0 <preempt+0x13c>)
   1e2ca:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1e2ce:	f008 fb45 	bl	2695c <printk>
   1e2d2:	4040      	eors	r0, r0
   1e2d4:	f380 8811 	msr	BASEPRI, r0
   1e2d8:	f04f 0003 	mov.w	r0, #3
   1e2dc:	df02      	svc	2
   1e2de:	e7dd      	b.n	1e29c <preempt+0x38>
		next->is_aborted = 1;
   1e2e0:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1e2e2:	69aa      	ldr	r2, [r5, #24]
   1e2e4:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1e2e6:	f043 0302 	orr.w	r3, r3, #2
   1e2ea:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1e2ec:	4628      	mov	r0, r5
   1e2ee:	4790      	blx	r2
		return;
   1e2f0:	e7d4      	b.n	1e29c <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1e2f2:	4620      	mov	r0, r4
   1e2f4:	f7ff ff4c 	bl	1e190 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e2f8:	f030 0302 	bics.w	r3, r0, #2
   1e2fc:	d0ce      	beq.n	1e29c <preempt+0x38>
   1e2fe:	4a26      	ldr	r2, [pc, #152]	; (1e398 <preempt+0x134>)
   1e300:	4928      	ldr	r1, [pc, #160]	; (1e3a4 <preempt+0x140>)
   1e302:	4827      	ldr	r0, [pc, #156]	; (1e3a0 <preempt+0x13c>)
   1e304:	f44f 7367 	mov.w	r3, #924	; 0x39c
   1e308:	f008 fb28 	bl	2695c <printk>
   1e30c:	4040      	eors	r0, r0
   1e30e:	f380 8811 	msr	BASEPRI, r0
   1e312:	f04f 0003 	mov.w	r0, #3
   1e316:	df02      	svc	2
   1e318:	e7c0      	b.n	1e29c <preempt+0x38>
		iter_idx = UINT8_MAX;
   1e31a:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1e31c:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1e320:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1e324:	f7fa fde6 	bl	18ef4 <ull_prepare_dequeue_iter>
		while (iter) {
   1e328:	b928      	cbnz	r0, 1e336 <preempt+0xd2>
   1e32a:	e013      	b.n	1e354 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1e32c:	f10d 000b 	add.w	r0, sp, #11
   1e330:	f7fa fde0 	bl	18ef4 <ull_prepare_dequeue_iter>
		while (iter) {
   1e334:	b170      	cbz	r0, 1e354 <preempt+0xf0>
			if (!iter->is_aborted &&
   1e336:	7f03      	ldrb	r3, [r0, #28]
   1e338:	079a      	lsls	r2, r3, #30
   1e33a:	d4f7      	bmi.n	1e32c <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   1e33c:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1e33e:	6831      	ldr	r1, [r6, #0]
   1e340:	4291      	cmp	r1, r2
   1e342:	d1f3      	bne.n	1e32c <preempt+0xc8>
				iter->is_aborted = 1;
   1e344:	f043 0302 	orr.w	r3, r3, #2
   1e348:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1e34a:	6983      	ldr	r3, [r0, #24]
   1e34c:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   1e34e:	f88d 400b 	strb.w	r4, [sp, #11]
   1e352:	e7eb      	b.n	1e32c <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1e354:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1e356:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1e358:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1e35a:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1e35c:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1e360:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1e362:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1e364:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1e366:	9b03      	ldr	r3, [sp, #12]
   1e368:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1e36c:	aa04      	add	r2, sp, #16
   1e36e:	f7fa fd83 	bl	18e78 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1e372:	2800      	cmp	r0, #0
   1e374:	d192      	bne.n	1e29c <preempt+0x38>
   1e376:	4a08      	ldr	r2, [pc, #32]	; (1e398 <preempt+0x134>)
   1e378:	490b      	ldr	r1, [pc, #44]	; (1e3a8 <preempt+0x144>)
   1e37a:	4809      	ldr	r0, [pc, #36]	; (1e3a0 <preempt+0x13c>)
   1e37c:	f240 33ce 	movw	r3, #974	; 0x3ce
   1e380:	f008 faec 	bl	2695c <printk>
   1e384:	4040      	eors	r0, r0
   1e386:	f380 8811 	msr	BASEPRI, r0
   1e38a:	f04f 0003 	mov.w	r0, #3
   1e38e:	df02      	svc	2
   1e390:	e784      	b.n	1e29c <preempt+0x38>
   1e392:	bf00      	nop
   1e394:	20003ba0 	.word	0x20003ba0
   1e398:	0003015c 	.word	0x0003015c
   1e39c:	00030250 	.word	0x00030250
   1e3a0:	0002f6fc 	.word	0x0002f6fc
   1e3a4:	0003022c 	.word	0x0003022c
   1e3a8:	00030248 	.word	0x00030248

0001e3ac <lll_init>:
{
   1e3ac:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1e3ae:	4816      	ldr	r0, [pc, #88]	; (1e408 <lll_init+0x5c>)
   1e3b0:	f006 fc32 	bl	24c18 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1e3b4:	4b15      	ldr	r3, [pc, #84]	; (1e40c <lll_init+0x60>)
   1e3b6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1e3b8:	b310      	cbz	r0, 1e400 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1e3ba:	4b15      	ldr	r3, [pc, #84]	; (1e410 <lll_init+0x64>)
   1e3bc:	2400      	movs	r4, #0
   1e3be:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1e3c0:	f000 faf4 	bl	1e9ac <lll_clock_init>
	if (err < 0) {
   1e3c4:	2800      	cmp	r0, #0
   1e3c6:	db1a      	blt.n	1e3fe <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1e3c8:	4621      	mov	r1, r4
   1e3ca:	2001      	movs	r0, #1
   1e3cc:	4622      	mov	r2, r4
   1e3ce:	f7ed f847 	bl	b460 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1e3d2:	4622      	mov	r2, r4
   1e3d4:	200b      	movs	r0, #11
   1e3d6:	2101      	movs	r1, #1
   1e3d8:	f7ed f842 	bl	b460 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1e3dc:	4622      	mov	r2, r4
   1e3de:	4621      	mov	r1, r4
   1e3e0:	2018      	movs	r0, #24
   1e3e2:	f7ed f83d 	bl	b460 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1e3e6:	2001      	movs	r0, #1
   1e3e8:	f7ed f808 	bl	b3fc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1e3ec:	200b      	movs	r0, #11
   1e3ee:	f7ed f805 	bl	b3fc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1e3f2:	2018      	movs	r0, #24
   1e3f4:	f7ed f802 	bl	b3fc <arch_irq_enable>
	radio_setup();
   1e3f8:	f001 fce2 	bl	1fdc0 <radio_setup>
	return 0;
   1e3fc:	4620      	mov	r0, r4
}
   1e3fe:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1e400:	f06f 0012 	mvn.w	r0, #18
}
   1e404:	bd10      	pop	{r4, pc}
   1e406:	bf00      	nop
   1e408:	0003025c 	.word	0x0003025c
   1e40c:	20003b9c 	.word	0x20003b9c
   1e410:	20003ba0 	.word	0x20003ba0

0001e414 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1e414:	4a05      	ldr	r2, [pc, #20]	; (1e42c <lll_csrand_get+0x18>)
{
   1e416:	b410      	push	{r4}
   1e418:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1e41a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1e41c:	6884      	ldr	r4, [r0, #8]
   1e41e:	6824      	ldr	r4, [r4, #0]
   1e420:	b28a      	uxth	r2, r1
   1e422:	4619      	mov	r1, r3
   1e424:	4623      	mov	r3, r4
}
   1e426:	bc10      	pop	{r4}
   1e428:	4718      	bx	r3
   1e42a:	bf00      	nop
   1e42c:	20003b9c 	.word	0x20003b9c

0001e430 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1e430:	4b08      	ldr	r3, [pc, #32]	; (1e454 <lll_csrand_isr_get+0x24>)
{
   1e432:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1e434:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1e436:	68ab      	ldr	r3, [r5, #8]
   1e438:	685c      	ldr	r4, [r3, #4]
   1e43a:	b13c      	cbz	r4, 1e44c <lll_csrand_isr_get+0x1c>
   1e43c:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1e43e:	46a4      	mov	ip, r4
   1e440:	4601      	mov	r1, r0
   1e442:	b292      	uxth	r2, r2
   1e444:	4628      	mov	r0, r5
   1e446:	2300      	movs	r3, #0
}
   1e448:	bc30      	pop	{r4, r5}
   1e44a:	4760      	bx	ip
   1e44c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e450:	bc30      	pop	{r4, r5}
   1e452:	4770      	bx	lr
   1e454:	20003b9c 	.word	0x20003b9c

0001e458 <lll_reset>:
}
   1e458:	2000      	movs	r0, #0
   1e45a:	4770      	bx	lr

0001e45c <lll_disable>:
{
   1e45c:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1e45e:	4604      	mov	r4, r0
{
   1e460:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1e462:	b378      	cbz	r0, 1e4c4 <lll_disable+0x68>
   1e464:	4b23      	ldr	r3, [pc, #140]	; (1e4f4 <lll_disable+0x98>)
   1e466:	681a      	ldr	r2, [r3, #0]
   1e468:	4282      	cmp	r2, r0
   1e46a:	d025      	beq.n	1e4b8 <lll_disable+0x5c>
		idx = UINT8_MAX;
   1e46c:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1e46e:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1e472:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1e476:	f7fa fd3d 	bl	18ef4 <ull_prepare_dequeue_iter>
		while (next) {
   1e47a:	b938      	cbnz	r0, 1e48c <lll_disable+0x30>
   1e47c:	e01a      	b.n	1e4b4 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1e47e:	428c      	cmp	r4, r1
   1e480:	d00a      	beq.n	1e498 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1e482:	f10d 0007 	add.w	r0, sp, #7
   1e486:	f7fa fd35 	bl	18ef4 <ull_prepare_dequeue_iter>
		while (next) {
   1e48a:	b198      	cbz	r0, 1e4b4 <lll_disable+0x58>
			if (!next->is_aborted &&
   1e48c:	7f03      	ldrb	r3, [r0, #28]
   1e48e:	079b      	lsls	r3, r3, #30
   1e490:	d4f7      	bmi.n	1e482 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   1e492:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   1e494:	2c00      	cmp	r4, #0
   1e496:	d1f2      	bne.n	1e47e <lll_disable+0x22>
				next->is_aborted = 1;
   1e498:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1e49a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1e49c:	f043 0302 	orr.w	r3, r3, #2
   1e4a0:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1e4a2:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1e4a4:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1e4a8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1e4ac:	f7fa fd22 	bl	18ef4 <ull_prepare_dequeue_iter>
		while (next) {
   1e4b0:	2800      	cmp	r0, #0
   1e4b2:	d1eb      	bne.n	1e48c <lll_disable+0x30>
}
   1e4b4:	b003      	add	sp, #12
   1e4b6:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1e4b8:	689b      	ldr	r3, [r3, #8]
   1e4ba:	b16b      	cbz	r3, 1e4d8 <lll_disable+0x7c>
   1e4bc:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1e4be:	2000      	movs	r0, #0
   1e4c0:	4798      	blx	r3
   1e4c2:	e7d3      	b.n	1e46c <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   1e4c4:	4a0b      	ldr	r2, [pc, #44]	; (1e4f4 <lll_disable+0x98>)
   1e4c6:	6893      	ldr	r3, [r2, #8]
   1e4c8:	2b00      	cmp	r3, #0
   1e4ca:	d0cf      	beq.n	1e46c <lll_disable+0x10>
   1e4cc:	6811      	ldr	r1, [r2, #0]
   1e4ce:	2900      	cmp	r1, #0
   1e4d0:	d0cc      	beq.n	1e46c <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1e4d2:	2000      	movs	r0, #0
   1e4d4:	4798      	blx	r3
   1e4d6:	e7c9      	b.n	1e46c <lll_disable+0x10>
			LL_ASSERT(!param);
   1e4d8:	4a07      	ldr	r2, [pc, #28]	; (1e4f8 <lll_disable+0x9c>)
   1e4da:	4908      	ldr	r1, [pc, #32]	; (1e4fc <lll_disable+0xa0>)
   1e4dc:	4808      	ldr	r0, [pc, #32]	; (1e500 <lll_disable+0xa4>)
   1e4de:	23fd      	movs	r3, #253	; 0xfd
   1e4e0:	f008 fa3c 	bl	2695c <printk>
   1e4e4:	4040      	eors	r0, r0
   1e4e6:	f380 8811 	msr	BASEPRI, r0
   1e4ea:	f04f 0003 	mov.w	r0, #3
   1e4ee:	df02      	svc	2
   1e4f0:	e7bc      	b.n	1e46c <lll_disable+0x10>
   1e4f2:	bf00      	nop
   1e4f4:	20003ba0 	.word	0x20003ba0
   1e4f8:	0003015c 	.word	0x0003015c
   1e4fc:	00030260 	.word	0x00030260
   1e500:	0002f6fc 	.word	0x0002f6fc

0001e504 <lll_prepare_done>:
}
   1e504:	2000      	movs	r0, #0
   1e506:	4770      	bx	lr

0001e508 <lll_done>:
{
   1e508:	b538      	push	{r3, r4, r5, lr}
   1e50a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1e50c:	f7fa fce4 	bl	18ed8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1e510:	b154      	cbz	r4, 1e528 <lll_done+0x20>
   1e512:	b310      	cbz	r0, 1e55a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   1e514:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1e516:	2000      	movs	r0, #0
   1e518:	f7fa fd0c 	bl	18f34 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1e51c:	4620      	mov	r0, r4
   1e51e:	f7fa fd6d 	bl	18ffc <ull_event_done>
	LL_ASSERT(evdone);
   1e522:	b158      	cbz	r0, 1e53c <lll_done+0x34>
}
   1e524:	2000      	movs	r0, #0
   1e526:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1e528:	4d1a      	ldr	r5, [pc, #104]	; (1e594 <lll_done+0x8c>)
   1e52a:	68ab      	ldr	r3, [r5, #8]
   1e52c:	b31b      	cbz	r3, 1e576 <lll_done+0x6e>
		param = event.curr.param;
   1e52e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1e530:	2300      	movs	r3, #0
   1e532:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1e534:	602b      	str	r3, [r5, #0]
		if (param) {
   1e536:	2c00      	cmp	r4, #0
   1e538:	d1ec      	bne.n	1e514 <lll_done+0xc>
   1e53a:	e7ec      	b.n	1e516 <lll_done+0xe>
	LL_ASSERT(evdone);
   1e53c:	4a16      	ldr	r2, [pc, #88]	; (1e598 <lll_done+0x90>)
   1e53e:	4917      	ldr	r1, [pc, #92]	; (1e59c <lll_done+0x94>)
   1e540:	4817      	ldr	r0, [pc, #92]	; (1e5a0 <lll_done+0x98>)
   1e542:	f240 136d 	movw	r3, #365	; 0x16d
   1e546:	f008 fa09 	bl	2695c <printk>
   1e54a:	4040      	eors	r0, r0
   1e54c:	f380 8811 	msr	BASEPRI, r0
   1e550:	f04f 0003 	mov.w	r0, #3
   1e554:	df02      	svc	2
}
   1e556:	2000      	movs	r0, #0
   1e558:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1e55a:	4a0f      	ldr	r2, [pc, #60]	; (1e598 <lll_done+0x90>)
   1e55c:	4911      	ldr	r1, [pc, #68]	; (1e5a4 <lll_done+0x9c>)
   1e55e:	4810      	ldr	r0, [pc, #64]	; (1e5a0 <lll_done+0x98>)
   1e560:	f240 1337 	movw	r3, #311	; 0x137
   1e564:	f008 f9fa 	bl	2695c <printk>
   1e568:	4040      	eors	r0, r0
   1e56a:	f380 8811 	msr	BASEPRI, r0
   1e56e:	f04f 0003 	mov.w	r0, #3
   1e572:	df02      	svc	2
   1e574:	e7ce      	b.n	1e514 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1e576:	4a08      	ldr	r2, [pc, #32]	; (1e598 <lll_done+0x90>)
   1e578:	490b      	ldr	r1, [pc, #44]	; (1e5a8 <lll_done+0xa0>)
   1e57a:	4809      	ldr	r0, [pc, #36]	; (1e5a0 <lll_done+0x98>)
   1e57c:	f240 133d 	movw	r3, #317	; 0x13d
   1e580:	f008 f9ec 	bl	2695c <printk>
   1e584:	4040      	eors	r0, r0
   1e586:	f380 8811 	msr	BASEPRI, r0
   1e58a:	f04f 0003 	mov.w	r0, #3
   1e58e:	df02      	svc	2
   1e590:	e7cd      	b.n	1e52e <lll_done+0x26>
   1e592:	bf00      	nop
   1e594:	20003ba0 	.word	0x20003ba0
   1e598:	0003015c 	.word	0x0003015c
   1e59c:	0003028c 	.word	0x0003028c
   1e5a0:	0002f6fc 	.word	0x0002f6fc
   1e5a4:	00030268 	.word	0x00030268
   1e5a8:	00030278 	.word	0x00030278

0001e5ac <lll_is_done>:
	*is_resume = (param != event.curr.param);
   1e5ac:	4a05      	ldr	r2, [pc, #20]	; (1e5c4 <lll_is_done+0x18>)
   1e5ae:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   1e5b0:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   1e5b2:	1a1b      	subs	r3, r3, r0
   1e5b4:	bf18      	it	ne
   1e5b6:	2301      	movne	r3, #1
}
   1e5b8:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   1e5bc:	700b      	strb	r3, [r1, #0]
}
   1e5be:	0940      	lsrs	r0, r0, #5
   1e5c0:	4770      	bx	lr
   1e5c2:	bf00      	nop
   1e5c4:	20003ba0 	.word	0x20003ba0

0001e5c8 <lll_is_abort_cb>:
}
   1e5c8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e5cc:	4770      	bx	lr
   1e5ce:	bf00      	nop

0001e5d0 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   1e5d0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1e5d4:	2a00      	cmp	r2, #0
   1e5d6:	db04      	blt.n	1e5e2 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   1e5d8:	429a      	cmp	r2, r3
   1e5da:	bf38      	it	cc
   1e5dc:	461a      	movcc	r2, r3
   1e5de:	4610      	mov	r0, r2
}
   1e5e0:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1e5e2:	68c0      	ldr	r0, [r0, #12]
   1e5e4:	4298      	cmp	r0, r3
   1e5e6:	bf38      	it	cc
   1e5e8:	4618      	movcc	r0, r3
   1e5ea:	4770      	bx	lr

0001e5ec <lll_preempt_calc>:
{
   1e5ec:	b510      	push	{r4, lr}
   1e5ee:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1e5f0:	f7f7 ff94 	bl	1651c <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1e5f4:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1e5f6:	0203      	lsls	r3, r0, #8
   1e5f8:	d405      	bmi.n	1e606 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1e5fa:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1e5fc:	2809      	cmp	r0, #9
   1e5fe:	bf94      	ite	ls
   1e600:	2000      	movls	r0, #0
   1e602:	2001      	movhi	r0, #1
}
   1e604:	bd10      	pop	{r4, pc}
		return 0;
   1e606:	2000      	movs	r0, #0
}
   1e608:	bd10      	pop	{r4, pc}
   1e60a:	bf00      	nop

0001e60c <lll_chan_set>:
	switch (chan) {
   1e60c:	2826      	cmp	r0, #38	; 0x26
{
   1e60e:	b510      	push	{r4, lr}
   1e610:	4604      	mov	r4, r0
	switch (chan) {
   1e612:	d01c      	beq.n	1e64e <lll_chan_set+0x42>
   1e614:	2827      	cmp	r0, #39	; 0x27
   1e616:	d012      	beq.n	1e63e <lll_chan_set+0x32>
   1e618:	2825      	cmp	r0, #37	; 0x25
   1e61a:	d008      	beq.n	1e62e <lll_chan_set+0x22>
		if (chan < 11) {
   1e61c:	280a      	cmp	r0, #10
   1e61e:	d91e      	bls.n	1e65e <lll_chan_set+0x52>
		} else if (chan < 40) {
   1e620:	2827      	cmp	r0, #39	; 0x27
   1e622:	d821      	bhi.n	1e668 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1e624:	3003      	adds	r0, #3
   1e626:	0040      	lsls	r0, r0, #1
   1e628:	f001 fc26 	bl	1fe78 <radio_freq_chan_set>
   1e62c:	e002      	b.n	1e634 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1e62e:	2002      	movs	r0, #2
   1e630:	f001 fc22 	bl	1fe78 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1e634:	4620      	mov	r0, r4
}
   1e636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1e63a:	f001 bc23 	b.w	1fe84 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1e63e:	2050      	movs	r0, #80	; 0x50
   1e640:	f001 fc1a 	bl	1fe78 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1e644:	4620      	mov	r0, r4
}
   1e646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1e64a:	f001 bc1b 	b.w	1fe84 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1e64e:	201a      	movs	r0, #26
   1e650:	f001 fc12 	bl	1fe78 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1e654:	4620      	mov	r0, r4
}
   1e656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1e65a:	f001 bc13 	b.w	1fe84 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1e65e:	3002      	adds	r0, #2
   1e660:	0040      	lsls	r0, r0, #1
   1e662:	f001 fc09 	bl	1fe78 <radio_freq_chan_set>
   1e666:	e7e5      	b.n	1e634 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1e668:	4a06      	ldr	r2, [pc, #24]	; (1e684 <lll_chan_set+0x78>)
   1e66a:	4907      	ldr	r1, [pc, #28]	; (1e688 <lll_chan_set+0x7c>)
   1e66c:	4807      	ldr	r0, [pc, #28]	; (1e68c <lll_chan_set+0x80>)
   1e66e:	f240 13df 	movw	r3, #479	; 0x1df
   1e672:	f008 f973 	bl	2695c <printk>
   1e676:	4040      	eors	r0, r0
   1e678:	f380 8811 	msr	BASEPRI, r0
   1e67c:	f04f 0003 	mov.w	r0, #3
   1e680:	df02      	svc	2
   1e682:	e7d7      	b.n	1e634 <lll_chan_set+0x28>
   1e684:	0003015c 	.word	0x0003015c
   1e688:	0002f794 	.word	0x0002f794
   1e68c:	0002f6fc 	.word	0x0002f6fc

0001e690 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1e690:	f001 bc56 	b.w	1ff40 <radio_tx_ready_delay_get>

0001e694 <lll_isr_tx_status_reset>:
{
   1e694:	b508      	push	{r3, lr}
	radio_status_reset();
   1e696:	f001 fc7b 	bl	1ff90 <radio_status_reset>
}
   1e69a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1e69e:	f001 bddb 	b.w	20258 <radio_tmr_status_reset>
   1e6a2:	bf00      	nop

0001e6a4 <lll_isr_rx_status_reset>:
{
   1e6a4:	b508      	push	{r3, lr}
	radio_status_reset();
   1e6a6:	f001 fc73 	bl	1ff90 <radio_status_reset>
	radio_tmr_status_reset();
   1e6aa:	f001 fdd5 	bl	20258 <radio_tmr_status_reset>
}
   1e6ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1e6b2:	f001 bd7d 	b.w	201b0 <radio_rssi_status_reset>
   1e6b6:	bf00      	nop

0001e6b8 <lll_isr_status_reset>:
{
   1e6b8:	b508      	push	{r3, lr}
	radio_status_reset();
   1e6ba:	f001 fc69 	bl	1ff90 <radio_status_reset>
	radio_tmr_status_reset();
   1e6be:	f001 fdcb 	bl	20258 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1e6c2:	f001 fdb1 	bl	20228 <radio_filter_status_reset>
	radio_ar_status_reset();
   1e6c6:	f001 ffa9 	bl	2061c <radio_ar_status_reset>
}
   1e6ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1e6ce:	f001 bd6f 	b.w	201b0 <radio_rssi_status_reset>
   1e6d2:	bf00      	nop

0001e6d4 <lll_isr_cleanup>:
{
   1e6d4:	b508      	push	{r3, lr}
   1e6d6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1e6d8:	4815      	ldr	r0, [pc, #84]	; (1e730 <lll_isr_cleanup+0x5c>)
   1e6da:	f001 fb51 	bl	1fd80 <radio_isr_set>
	if (!radio_is_idle()) {
   1e6de:	f001 fc77 	bl	1ffd0 <radio_is_idle>
   1e6e2:	b150      	cbz	r0, 1e6fa <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1e6e4:	f001 fe8e 	bl	20404 <radio_tmr_stop>
	err = lll_hfclock_off();
   1e6e8:	f000 f9a4 	bl	1ea34 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e6ec:	2800      	cmp	r0, #0
   1e6ee:	db0c      	blt.n	1e70a <lll_isr_cleanup+0x36>
}
   1e6f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1e6f4:	2000      	movs	r0, #0
   1e6f6:	f7ff bf07 	b.w	1e508 <lll_done>
		radio_disable();
   1e6fa:	f001 fc35 	bl	1ff68 <radio_disable>
	radio_tmr_stop();
   1e6fe:	f001 fe81 	bl	20404 <radio_tmr_stop>
	err = lll_hfclock_off();
   1e702:	f000 f997 	bl	1ea34 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e706:	2800      	cmp	r0, #0
   1e708:	daf2      	bge.n	1e6f0 <lll_isr_cleanup+0x1c>
   1e70a:	4a0a      	ldr	r2, [pc, #40]	; (1e734 <lll_isr_cleanup+0x60>)
   1e70c:	490a      	ldr	r1, [pc, #40]	; (1e738 <lll_isr_cleanup+0x64>)
   1e70e:	480b      	ldr	r0, [pc, #44]	; (1e73c <lll_isr_cleanup+0x68>)
   1e710:	f240 2342 	movw	r3, #578	; 0x242
   1e714:	f008 f922 	bl	2695c <printk>
   1e718:	4040      	eors	r0, r0
   1e71a:	f380 8811 	msr	BASEPRI, r0
   1e71e:	f04f 0003 	mov.w	r0, #3
   1e722:	df02      	svc	2
	lll_done(NULL);
   1e724:	2000      	movs	r0, #0
}
   1e726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1e72a:	f7ff beed 	b.w	1e508 <lll_done>
   1e72e:	bf00      	nop
   1e730:	0001e08d 	.word	0x0001e08d
   1e734:	0003015c 	.word	0x0003015c
   1e738:	00030294 	.word	0x00030294
   1e73c:	0002f6fc 	.word	0x0002f6fc

0001e740 <lll_isr_abort>:
{
   1e740:	b510      	push	{r4, lr}
   1e742:	4604      	mov	r4, r0
	radio_status_reset();
   1e744:	f001 fc24 	bl	1ff90 <radio_status_reset>
	radio_tmr_status_reset();
   1e748:	f001 fd86 	bl	20258 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1e74c:	f001 fd6c 	bl	20228 <radio_filter_status_reset>
	radio_ar_status_reset();
   1e750:	f001 ff64 	bl	2061c <radio_ar_status_reset>
	radio_rssi_status_reset();
   1e754:	f001 fd2c 	bl	201b0 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1e758:	4620      	mov	r0, r4
}
   1e75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1e75e:	f7ff bfb9 	b.w	1e6d4 <lll_isr_cleanup>
   1e762:	bf00      	nop

0001e764 <lll_isr_early_abort>:
{
   1e764:	b508      	push	{r3, lr}
   1e766:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1e768:	4813      	ldr	r0, [pc, #76]	; (1e7b8 <lll_isr_early_abort+0x54>)
   1e76a:	f001 fb09 	bl	1fd80 <radio_isr_set>
	if (!radio_is_idle()) {
   1e76e:	f001 fc2f 	bl	1ffd0 <radio_is_idle>
   1e772:	b140      	cbz	r0, 1e786 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1e774:	f000 f95e 	bl	1ea34 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e778:	2800      	cmp	r0, #0
   1e77a:	db0a      	blt.n	1e792 <lll_isr_early_abort+0x2e>
}
   1e77c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1e780:	2000      	movs	r0, #0
   1e782:	f7ff bec1 	b.w	1e508 <lll_done>
		radio_disable();
   1e786:	f001 fbef 	bl	1ff68 <radio_disable>
	err = lll_hfclock_off();
   1e78a:	f000 f953 	bl	1ea34 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e78e:	2800      	cmp	r0, #0
   1e790:	daf4      	bge.n	1e77c <lll_isr_early_abort+0x18>
   1e792:	4a0a      	ldr	r2, [pc, #40]	; (1e7bc <lll_isr_early_abort+0x58>)
   1e794:	490a      	ldr	r1, [pc, #40]	; (1e7c0 <lll_isr_early_abort+0x5c>)
   1e796:	480b      	ldr	r0, [pc, #44]	; (1e7c4 <lll_isr_early_abort+0x60>)
   1e798:	f240 2351 	movw	r3, #593	; 0x251
   1e79c:	f008 f8de 	bl	2695c <printk>
   1e7a0:	4040      	eors	r0, r0
   1e7a2:	f380 8811 	msr	BASEPRI, r0
   1e7a6:	f04f 0003 	mov.w	r0, #3
   1e7aa:	df02      	svc	2
	lll_done(NULL);
   1e7ac:	2000      	movs	r0, #0
}
   1e7ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1e7b2:	f7ff bea9 	b.w	1e508 <lll_done>
   1e7b6:	bf00      	nop
   1e7b8:	0001e08d 	.word	0x0001e08d
   1e7bc:	0003015c 	.word	0x0003015c
   1e7c0:	00030294 	.word	0x00030294
   1e7c4:	0002f6fc 	.word	0x0002f6fc

0001e7c8 <lll_prepare_resolve>:
{
   1e7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e7cc:	b084      	sub	sp, #16
   1e7ce:	4606      	mov	r6, r0
   1e7d0:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   1e7d2:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1e7d6:	23ff      	movs	r3, #255	; 0xff
{
   1e7d8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1e7dc:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1e7e0:	460f      	mov	r7, r1
   1e7e2:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   1e7e4:	f7fa fb86 	bl	18ef4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1e7e8:	4604      	mov	r4, r0
   1e7ea:	b920      	cbnz	r0, 1e7f6 <lll_prepare_resolve+0x2e>
   1e7ec:	e032      	b.n	1e854 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   1e7ee:	f7fa fb81 	bl	18ef4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1e7f2:	4604      	mov	r4, r0
   1e7f4:	b370      	cbz	r0, 1e854 <lll_prepare_resolve+0x8c>
   1e7f6:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1e7fa:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   1e7fe:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1e802:	d1f4      	bne.n	1e7ee <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1e804:	f8df a130 	ldr.w	sl, [pc, #304]	; 1e938 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1e808:	f8da 3008 	ldr.w	r3, [sl, #8]
   1e80c:	bb4b      	cbnz	r3, 1e862 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   1e80e:	f1b9 0f00 	cmp.w	r9, #0
   1e812:	d048      	beq.n	1e8a6 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1e814:	f8cd 9000 	str.w	r9, [sp]
   1e818:	4643      	mov	r3, r8
   1e81a:	462a      	mov	r2, r5
   1e81c:	4639      	mov	r1, r7
   1e81e:	4630      	mov	r0, r6
   1e820:	f7fa fb2a 	bl	18e78 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1e824:	b980      	cbnz	r0, 1e848 <lll_prepare_resolve+0x80>
   1e826:	4a45      	ldr	r2, [pc, #276]	; (1e93c <lll_prepare_resolve+0x174>)
   1e828:	4945      	ldr	r1, [pc, #276]	; (1e940 <lll_prepare_resolve+0x178>)
   1e82a:	4846      	ldr	r0, [pc, #280]	; (1e944 <lll_prepare_resolve+0x17c>)
   1e82c:	f240 238d 	movw	r3, #653	; 0x28d
   1e830:	f008 f894 	bl	2695c <printk>
   1e834:	4040      	eors	r0, r0
   1e836:	f380 8811 	msr	BASEPRI, r0
   1e83a:	f04f 0003 	mov.w	r0, #3
   1e83e:	df02      	svc	2
   1e840:	2000      	movs	r0, #0
		if (is_resume) {
   1e842:	f1b9 0f00 	cmp.w	r9, #0
   1e846:	d019      	beq.n	1e87c <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   1e848:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1e84c:	4620      	mov	r0, r4
   1e84e:	b004      	add	sp, #16
   1e850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   1e854:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1e938 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1e858:	f8da 3008 	ldr.w	r3, [sl, #8]
   1e85c:	2b00      	cmp	r3, #0
   1e85e:	d031      	beq.n	1e8c4 <lll_prepare_resolve+0xfc>
   1e860:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1e862:	f8cd 9000 	str.w	r9, [sp]
   1e866:	4643      	mov	r3, r8
   1e868:	462a      	mov	r2, r5
   1e86a:	4639      	mov	r1, r7
   1e86c:	4630      	mov	r0, r6
   1e86e:	f7fa fb03 	bl	18e78 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1e872:	2800      	cmp	r0, #0
   1e874:	d0d7      	beq.n	1e826 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   1e876:	f1b9 0f00 	cmp.w	r9, #0
   1e87a:	d1e5      	bne.n	1e848 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   1e87c:	4601      	mov	r1, r0
   1e87e:	4620      	mov	r0, r4
   1e880:	f7ff fc86 	bl	1e190 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e884:	f030 0302 	bics.w	r3, r0, #2
   1e888:	d0de      	beq.n	1e848 <lll_prepare_resolve+0x80>
   1e88a:	4a2c      	ldr	r2, [pc, #176]	; (1e93c <lll_prepare_resolve+0x174>)
   1e88c:	492e      	ldr	r1, [pc, #184]	; (1e948 <lll_prepare_resolve+0x180>)
   1e88e:	482d      	ldr	r0, [pc, #180]	; (1e944 <lll_prepare_resolve+0x17c>)
   1e890:	f44f 7326 	mov.w	r3, #664	; 0x298
   1e894:	f008 f862 	bl	2695c <printk>
   1e898:	4040      	eors	r0, r0
   1e89a:	f380 8811 	msr	BASEPRI, r0
   1e89e:	f04f 0003 	mov.w	r0, #3
   1e8a2:	df02      	svc	2
   1e8a4:	e7d0      	b.n	1e848 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1e8a6:	42ac      	cmp	r4, r5
   1e8a8:	d00c      	beq.n	1e8c4 <lll_prepare_resolve+0xfc>
   1e8aa:	4a24      	ldr	r2, [pc, #144]	; (1e93c <lll_prepare_resolve+0x174>)
   1e8ac:	4927      	ldr	r1, [pc, #156]	; (1e94c <lll_prepare_resolve+0x184>)
   1e8ae:	4825      	ldr	r0, [pc, #148]	; (1e944 <lll_prepare_resolve+0x17c>)
   1e8b0:	f240 23be 	movw	r3, #702	; 0x2be
   1e8b4:	f008 f852 	bl	2695c <printk>
   1e8b8:	4040      	eors	r0, r0
   1e8ba:	f380 8811 	msr	BASEPRI, r0
   1e8be:	f04f 0003 	mov.w	r0, #3
   1e8c2:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1e8c4:	68eb      	ldr	r3, [r5, #12]
   1e8c6:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   1e8ca:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   1e8ce:	4628      	mov	r0, r5
   1e8d0:	47c0      	blx	r8
   1e8d2:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   1e8d4:	f7ff fc1c 	bl	1e110 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e8d8:	f030 0302 	bics.w	r3, r0, #2
   1e8dc:	d11e      	bne.n	1e91c <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   1e8de:	f10d 000f 	add.w	r0, sp, #15
   1e8e2:	f7fa fb07 	bl	18ef4 <ull_prepare_dequeue_iter>
		if (!p) {
   1e8e6:	2800      	cmp	r0, #0
   1e8e8:	d0b0      	beq.n	1e84c <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   1e8ea:	7f03      	ldrb	r3, [r0, #28]
   1e8ec:	f013 0303 	ands.w	r3, r3, #3
   1e8f0:	d1f5      	bne.n	1e8de <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   1e8f2:	4601      	mov	r1, r0
   1e8f4:	4618      	mov	r0, r3
   1e8f6:	f7ff fc4b 	bl	1e190 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e8fa:	f030 0302 	bics.w	r3, r0, #2
   1e8fe:	d0a5      	beq.n	1e84c <lll_prepare_resolve+0x84>
   1e900:	4a0e      	ldr	r2, [pc, #56]	; (1e93c <lll_prepare_resolve+0x174>)
   1e902:	4911      	ldr	r1, [pc, #68]	; (1e948 <lll_prepare_resolve+0x180>)
   1e904:	480f      	ldr	r0, [pc, #60]	; (1e944 <lll_prepare_resolve+0x17c>)
   1e906:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   1e90a:	f008 f827 	bl	2695c <printk>
   1e90e:	4040      	eors	r0, r0
   1e910:	f380 8811 	msr	BASEPRI, r0
   1e914:	f04f 0003 	mov.w	r0, #3
   1e918:	df02      	svc	2
   1e91a:	e797      	b.n	1e84c <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e91c:	4a07      	ldr	r2, [pc, #28]	; (1e93c <lll_prepare_resolve+0x174>)
   1e91e:	490a      	ldr	r1, [pc, #40]	; (1e948 <lll_prepare_resolve+0x180>)
   1e920:	4808      	ldr	r0, [pc, #32]	; (1e944 <lll_prepare_resolve+0x17c>)
   1e922:	f240 23cb 	movw	r3, #715	; 0x2cb
   1e926:	f008 f819 	bl	2695c <printk>
   1e92a:	4040      	eors	r0, r0
   1e92c:	f380 8811 	msr	BASEPRI, r0
   1e930:	f04f 0003 	mov.w	r0, #3
   1e934:	df02      	svc	2
   1e936:	e7d2      	b.n	1e8de <lll_prepare_resolve+0x116>
   1e938:	20003ba0 	.word	0x20003ba0
   1e93c:	0003015c 	.word	0x0003015c
   1e940:	000302a0 	.word	0x000302a0
   1e944:	0002f6fc 	.word	0x0002f6fc
   1e948:	0003022c 	.word	0x0003022c
   1e94c:	000302a8 	.word	0x000302a8

0001e950 <clock_ready>:
	z_impl_k_sem_give(sem);
   1e950:	f101 0010 	add.w	r0, r1, #16
   1e954:	f006 bdce 	b.w	254f4 <z_impl_k_sem_give>

0001e958 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1e958:	b570      	push	{r4, r5, r6, lr}
   1e95a:	4605      	mov	r5, r0
   1e95c:	b08a      	sub	sp, #40	; 0x28
   1e95e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e960:	2201      	movs	r2, #1
   1e962:	2100      	movs	r1, #0
   1e964:	a804      	add	r0, sp, #16
   1e966:	f00e fed8 	bl	2d71a <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1e96a:	4b0f      	ldr	r3, [pc, #60]	; (1e9a8 <blocking_on+0x50>)
   1e96c:	9301      	str	r3, [sp, #4]
   1e96e:	2600      	movs	r6, #0
   1e970:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1e972:	4669      	mov	r1, sp
   1e974:	4628      	mov	r0, r5
   1e976:	9603      	str	r6, [sp, #12]
   1e978:	9302      	str	r3, [sp, #8]
   1e97a:	f008 f885 	bl	26a88 <onoff_request>
	if (err < 0) {
   1e97e:	2800      	cmp	r0, #0
   1e980:	db10      	blt.n	1e9a4 <blocking_on+0x4c>
   1e982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1e986:	4631      	mov	r1, r6
   1e988:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e98c:	fbe4 0103 	umlal	r0, r1, r4, r3
   1e990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e994:	2300      	movs	r3, #0
   1e996:	f7e2 fc03 	bl	11a0 <__aeabi_uldivmod>
   1e99a:	4602      	mov	r2, r0
   1e99c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e99e:	a804      	add	r0, sp, #16
   1e9a0:	f006 fdce 	bl	25540 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1e9a4:	b00a      	add	sp, #40	; 0x28
   1e9a6:	bd70      	pop	{r4, r5, r6, pc}
   1e9a8:	0001e951 	.word	0x0001e951

0001e9ac <lll_clock_init>:

int lll_clock_init(void)
{
   1e9ac:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1e9ae:	2001      	movs	r0, #1
   1e9b0:	f003 fa9e 	bl	21ef0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1e9b4:	4904      	ldr	r1, [pc, #16]	; (1e9c8 <lll_clock_init+0x1c>)
   1e9b6:	2300      	movs	r3, #0
   1e9b8:	2401      	movs	r4, #1
   1e9ba:	608c      	str	r4, [r1, #8]
   1e9bc:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1e9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e9c2:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1e9c4:	f008 b860 	b.w	26a88 <onoff_request>
   1e9c8:	20003bbc 	.word	0x20003bbc

0001e9cc <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1e9cc:	4b0c      	ldr	r3, [pc, #48]	; (1ea00 <lll_clock_wait+0x34>)
   1e9ce:	781a      	ldrb	r2, [r3, #0]
   1e9d0:	b10a      	cbz	r2, 1e9d6 <lll_clock_wait+0xa>
		return 0;
   1e9d2:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1e9d4:	4770      	bx	lr
{
   1e9d6:	b510      	push	{r4, lr}
	done = true;
   1e9d8:	2001      	movs	r0, #1
   1e9da:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1e9dc:	f003 fa88 	bl	21ef0 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1e9e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1e9e4:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1e9e6:	f7ff ffb7 	bl	1e958 <blocking_on>
	if (err) {
   1e9ea:	b938      	cbnz	r0, 1e9fc <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1e9ec:	4620      	mov	r0, r4
   1e9ee:	f008 f894 	bl	26b1a <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1e9f2:	2802      	cmp	r0, #2
		return 0;
   1e9f4:	bf0c      	ite	eq
   1e9f6:	2000      	moveq	r0, #0
		return -EIO;
   1e9f8:	f06f 0004 	mvnne.w	r0, #4
}
   1e9fc:	bd10      	pop	{r4, pc}
   1e9fe:	bf00      	nop
   1ea00:	20004c0c 	.word	0x20004c0c

0001ea04 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1ea04:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ea06:	4b0a      	ldr	r3, [pc, #40]	; (1ea30 <lll_hfclock_on+0x2c>)
   1ea08:	f3bf 8f5b 	dmb	ish
   1ea0c:	e853 2f00 	ldrex	r2, [r3]
   1ea10:	1c51      	adds	r1, r2, #1
   1ea12:	e843 1000 	strex	r0, r1, [r3]
   1ea16:	2800      	cmp	r0, #0
   1ea18:	d1f8      	bne.n	1ea0c <lll_hfclock_on+0x8>
   1ea1a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1ea1e:	2a00      	cmp	r2, #0
   1ea20:	dd01      	ble.n	1ea26 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1ea22:	2000      	movs	r0, #0
   1ea24:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1ea26:	f003 fa6b 	bl	21f00 <z_nrf_clock_bt_ctlr_hf_request>
}
   1ea2a:	2000      	movs	r0, #0
   1ea2c:	bd08      	pop	{r3, pc}
   1ea2e:	bf00      	nop
   1ea30:	20003bb8 	.word	0x20003bb8

0001ea34 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1ea34:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1ea36:	4b0d      	ldr	r3, [pc, #52]	; (1ea6c <lll_hfclock_off+0x38>)
   1ea38:	681a      	ldr	r2, [r3, #0]
   1ea3a:	2a00      	cmp	r2, #0
   1ea3c:	dd12      	ble.n	1ea64 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ea3e:	f3bf 8f5b 	dmb	ish
   1ea42:	e853 2f00 	ldrex	r2, [r3]
   1ea46:	1e51      	subs	r1, r2, #1
   1ea48:	e843 1000 	strex	r0, r1, [r3]
   1ea4c:	2800      	cmp	r0, #0
   1ea4e:	d1f8      	bne.n	1ea42 <lll_hfclock_off+0xe>
   1ea50:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1ea54:	2a01      	cmp	r2, #1
   1ea56:	dd01      	ble.n	1ea5c <lll_hfclock_off+0x28>
		return 0;
   1ea58:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1ea5a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1ea5c:	f003 fa64 	bl	21f28 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1ea60:	2000      	movs	r0, #0
}
   1ea62:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1ea64:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1ea68:	bd08      	pop	{r3, pc}
   1ea6a:	bf00      	nop
   1ea6c:	20003bb8 	.word	0x20003bb8

0001ea70 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1ea70:	2005      	movs	r0, #5
   1ea72:	4770      	bx	lr

0001ea74 <common_prepare_cb>:
{
   1ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   1ea78:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   1ea7a:	f994 3016 	ldrsb.w	r3, [r4, #22]
   1ea7e:	2b00      	cmp	r3, #0
{
   1ea80:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   1ea82:	f2c0 810e 	blt.w	1eca2 <common_prepare_cb+0x22e>
   1ea86:	6863      	ldr	r3, [r4, #4]
   1ea88:	4605      	mov	r5, r0
   1ea8a:	460f      	mov	r7, r1
   1ea8c:	2b00      	cmp	r3, #0
   1ea8e:	f040 80fd 	bne.w	1ec8c <common_prepare_cb+0x218>
	lll->state = 0U;
   1ea92:	7da3      	ldrb	r3, [r4, #22]
   1ea94:	f36f 0300 	bfc	r3, #0, #1
   1ea98:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1ea9a:	f001 f9b3 	bl	1fe04 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1ea9e:	2008      	movs	r0, #8
   1eaa0:	f001 f9e4 	bl	1fe6c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1eaa4:	2100      	movs	r1, #0
   1eaa6:	4608      	mov	r0, r1
   1eaa8:	f001 f9d0 	bl	1fe4c <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1eaac:	2200      	movs	r2, #0
   1eaae:	2125      	movs	r1, #37	; 0x25
   1eab0:	2008      	movs	r0, #8
   1eab2:	f001 fa11 	bl	1fed8 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1eab6:	2001      	movs	r0, #1
   1eab8:	f7fa f992 	bl	18de0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1eabc:	4606      	mov	r6, r0
   1eabe:	2800      	cmp	r0, #0
   1eac0:	f000 80d6 	beq.w	1ec70 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   1eac4:	f106 001c 	add.w	r0, r6, #28
   1eac8:	f001 fa2e 	bl	1ff28 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1eacc:	4b7a      	ldr	r3, [pc, #488]	; (1ecb8 <common_prepare_cb+0x244>)
   1eace:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1ead0:	a80b      	add	r0, sp, #44	; 0x2c
   1ead2:	f001 f9e9 	bl	1fea8 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1ead6:	4979      	ldr	r1, [pc, #484]	; (1ecbc <common_prepare_cb+0x248>)
   1ead8:	f240 605b 	movw	r0, #1627	; 0x65b
   1eadc:	f001 fa82 	bl	1ffe4 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1eae0:	7da0      	ldrb	r0, [r4, #22]
   1eae2:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1eae6:	3025      	adds	r0, #37	; 0x25
   1eae8:	f7ff fd90 	bl	1e60c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1eaec:	4874      	ldr	r0, [pc, #464]	; (1ecc0 <common_prepare_cb+0x24c>)
   1eaee:	4621      	mov	r1, r4
   1eaf0:	f001 f946 	bl	1fd80 <radio_isr_set>
	} else if (lll->type ||
   1eaf4:	7da3      	ldrb	r3, [r4, #22]
   1eaf6:	069b      	lsls	r3, r3, #26
   1eaf8:	d403      	bmi.n	1eb02 <common_prepare_cb+0x8e>
		   lll->conn) {
   1eafa:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1eafc:	2b00      	cmp	r3, #0
   1eafe:	f000 8091 	beq.w	1ec24 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1eb02:	2096      	movs	r0, #150	; 0x96
   1eb04:	f001 fbb8 	bl	20278 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1eb08:	2300      	movs	r3, #0
   1eb0a:	461a      	mov	r2, r3
   1eb0c:	4619      	mov	r1, r3
   1eb0e:	4618      	mov	r0, r3
   1eb10:	f001 face 	bl	200b0 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1eb14:	f7ff fa0a 	bl	1df2c <ull_filter_lll_rl_enabled>
   1eb18:	2800      	cmp	r0, #0
   1eb1a:	d135      	bne.n	1eb88 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1eb1c:	7da3      	ldrb	r3, [r4, #22]
   1eb1e:	f013 0f18 	tst.w	r3, #24
   1eb22:	d152      	bne.n	1ebca <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   1eb24:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1eb28:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1eb2a:	4640      	mov	r0, r8
   1eb2c:	f7ff fd50 	bl	1e5d0 <lll_event_offset_get>
   1eb30:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1eb32:	686a      	ldr	r2, [r5, #4]
   1eb34:	f106 0109 	add.w	r1, r6, #9
   1eb38:	2000      	movs	r0, #0
   1eb3a:	f001 fba9 	bl	20290 <radio_tmr_start>
	radio_tmr_end_capture();
   1eb3e:	f001 fc8d 	bl	2045c <radio_tmr_end_capture>
	radio_rssi_measure();
   1eb42:	f001 fb25 	bl	20190 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1eb46:	4620      	mov	r0, r4
   1eb48:	f7fa fd66 	bl	19618 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1eb4c:	1c81      	adds	r1, r0, #2
   1eb4e:	b2c9      	uxtb	r1, r1
   1eb50:	4640      	mov	r0, r8
   1eb52:	4632      	mov	r2, r6
   1eb54:	f7ff fd4a 	bl	1e5ec <lll_preempt_calc>
   1eb58:	bb68      	cbnz	r0, 1ebb6 <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   1eb5a:	b917      	cbnz	r7, 1eb62 <common_prepare_cb+0xee>
   1eb5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1eb5e:	2b00      	cmp	r3, #0
   1eb60:	d163      	bne.n	1ec2a <common_prepare_cb+0x1b6>
		if (lll->conn) {
   1eb62:	6863      	ldr	r3, [r4, #4]
   1eb64:	b143      	cbz	r3, 1eb78 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   1eb66:	4b57      	ldr	r3, [pc, #348]	; (1ecc4 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1eb68:	2201      	movs	r2, #1
   1eb6a:	2102      	movs	r1, #2
   1eb6c:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1eb6e:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1eb70:	f7f6 f9de 	bl	14f30 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1eb74:	2800      	cmp	r0, #0
   1eb76:	d142      	bne.n	1ebfe <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   1eb78:	4620      	mov	r0, r4
   1eb7a:	f7ff fcc3 	bl	1e504 <lll_prepare_done>
		LL_ASSERT(!ret);
   1eb7e:	bb68      	cbnz	r0, 1ebdc <common_prepare_cb+0x168>
}
   1eb80:	2000      	movs	r0, #0
   1eb82:	b00c      	add	sp, #48	; 0x30
   1eb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   1eb88:	7da0      	ldrb	r0, [r4, #22]
   1eb8a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1eb8e:	f7fe fde9 	bl	1d764 <ull_filter_lll_get>
   1eb92:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1eb94:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1eb98:	f7ff f842 	bl	1dc20 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1eb9c:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1eb9e:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   1eba0:	1cb2      	adds	r2, r6, #2
   1eba2:	7830      	ldrb	r0, [r6, #0]
   1eba4:	f001 fb16 	bl	201d4 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   1eba8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1ebac:	2200      	movs	r2, #0
   1ebae:	4641      	mov	r1, r8
   1ebb0:	f001 fcfa 	bl	205a8 <radio_ar_configure>
   1ebb4:	e7b6      	b.n	1eb24 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   1ebb6:	4844      	ldr	r0, [pc, #272]	; (1ecc8 <common_prepare_cb+0x254>)
   1ebb8:	4621      	mov	r1, r4
   1ebba:	f001 f8e1 	bl	1fd80 <radio_isr_set>
		radio_disable();
   1ebbe:	f001 f9d3 	bl	1ff68 <radio_disable>
}
   1ebc2:	2000      	movs	r0, #0
   1ebc4:	b00c      	add	sp, #48	; 0x30
   1ebc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1ebca:	2001      	movs	r0, #1
   1ebcc:	f7fe fdca 	bl	1d764 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1ebd0:	7841      	ldrb	r1, [r0, #1]
   1ebd2:	1c82      	adds	r2, r0, #2
   1ebd4:	7800      	ldrb	r0, [r0, #0]
   1ebd6:	f001 fafd 	bl	201d4 <radio_filter_configure>
   1ebda:	e7a3      	b.n	1eb24 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   1ebdc:	4a3b      	ldr	r2, [pc, #236]	; (1eccc <common_prepare_cb+0x258>)
   1ebde:	493c      	ldr	r1, [pc, #240]	; (1ecd0 <common_prepare_cb+0x25c>)
   1ebe0:	483c      	ldr	r0, [pc, #240]	; (1ecd4 <common_prepare_cb+0x260>)
   1ebe2:	f44f 7305 	mov.w	r3, #532	; 0x214
   1ebe6:	f007 feb9 	bl	2695c <printk>
   1ebea:	4040      	eors	r0, r0
   1ebec:	f380 8811 	msr	BASEPRI, r0
   1ebf0:	f04f 0003 	mov.w	r0, #3
   1ebf4:	df02      	svc	2
}
   1ebf6:	2000      	movs	r0, #0
   1ebf8:	b00c      	add	sp, #48	; 0x30
   1ebfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   1ebfe:	4a33      	ldr	r2, [pc, #204]	; (1eccc <common_prepare_cb+0x258>)
   1ec00:	4935      	ldr	r1, [pc, #212]	; (1ecd8 <common_prepare_cb+0x264>)
   1ec02:	4834      	ldr	r0, [pc, #208]	; (1ecd4 <common_prepare_cb+0x260>)
   1ec04:	f240 230f 	movw	r3, #527	; 0x20f
   1ec08:	f007 fea8 	bl	2695c <printk>
   1ec0c:	4040      	eors	r0, r0
   1ec0e:	f380 8811 	msr	BASEPRI, r0
   1ec12:	f04f 0003 	mov.w	r0, #3
   1ec16:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1ec18:	4620      	mov	r0, r4
   1ec1a:	f7ff fc73 	bl	1e504 <lll_prepare_done>
		LL_ASSERT(!ret);
   1ec1e:	2800      	cmp	r0, #0
   1ec20:	d0ae      	beq.n	1eb80 <common_prepare_cb+0x10c>
   1ec22:	e7db      	b.n	1ebdc <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   1ec24:	f001 faa4 	bl	20170 <radio_switch_complete_and_disable>
   1ec28:	e774      	b.n	1eb14 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ec2a:	4a2c      	ldr	r2, [pc, #176]	; (1ecdc <common_prepare_cb+0x268>)
   1ec2c:	9207      	str	r2, [sp, #28]
   1ec2e:	4a2c      	ldr	r2, [pc, #176]	; (1ece0 <common_prepare_cb+0x26c>)
   1ec30:	9205      	str	r2, [sp, #20]
   1ec32:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   1ec36:	9300      	str	r3, [sp, #0]
   1ec38:	9208      	str	r2, [sp, #32]
   1ec3a:	4633      	mov	r3, r6
   1ec3c:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1ec40:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1ec44:	9406      	str	r4, [sp, #24]
   1ec46:	4639      	mov	r1, r7
   1ec48:	2201      	movs	r2, #1
   1ec4a:	f7f7 fb3d 	bl	162c8 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ec4e:	f030 0302 	bics.w	r3, r0, #2
   1ec52:	d086      	beq.n	1eb62 <common_prepare_cb+0xee>
   1ec54:	4a1d      	ldr	r2, [pc, #116]	; (1eccc <common_prepare_cb+0x258>)
   1ec56:	4923      	ldr	r1, [pc, #140]	; (1ece4 <common_prepare_cb+0x270>)
   1ec58:	481e      	ldr	r0, [pc, #120]	; (1ecd4 <common_prepare_cb+0x260>)
   1ec5a:	f240 13fb 	movw	r3, #507	; 0x1fb
   1ec5e:	f007 fe7d 	bl	2695c <printk>
   1ec62:	4040      	eors	r0, r0
   1ec64:	f380 8811 	msr	BASEPRI, r0
   1ec68:	f04f 0003 	mov.w	r0, #3
   1ec6c:	df02      	svc	2
   1ec6e:	e778      	b.n	1eb62 <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   1ec70:	4a16      	ldr	r2, [pc, #88]	; (1eccc <common_prepare_cb+0x258>)
   1ec72:	491d      	ldr	r1, [pc, #116]	; (1ece8 <common_prepare_cb+0x274>)
   1ec74:	4817      	ldr	r0, [pc, #92]	; (1ecd4 <common_prepare_cb+0x260>)
   1ec76:	f240 138d 	movw	r3, #397	; 0x18d
   1ec7a:	f007 fe6f 	bl	2695c <printk>
   1ec7e:	4040      	eors	r0, r0
   1ec80:	f380 8811 	msr	BASEPRI, r0
   1ec84:	f04f 0003 	mov.w	r0, #3
   1ec88:	df02      	svc	2
   1ec8a:	e71b      	b.n	1eac4 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   1ec8c:	6863      	ldr	r3, [r4, #4]
   1ec8e:	f893 3020 	ldrb.w	r3, [r3, #32]
   1ec92:	07d9      	lsls	r1, r3, #31
   1ec94:	d405      	bmi.n	1eca2 <common_prepare_cb+0x22e>
   1ec96:	6863      	ldr	r3, [r4, #4]
   1ec98:	f893 3020 	ldrb.w	r3, [r3, #32]
   1ec9c:	079a      	lsls	r2, r3, #30
   1ec9e:	f57f aef8 	bpl.w	1ea92 <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   1eca2:	4812      	ldr	r0, [pc, #72]	; (1ecec <common_prepare_cb+0x278>)
   1eca4:	4621      	mov	r1, r4
   1eca6:	f001 f86b 	bl	1fd80 <radio_isr_set>
		radio_disable();
   1ecaa:	f001 f95d 	bl	1ff68 <radio_disable>
}
   1ecae:	2000      	movs	r0, #0
   1ecb0:	b00c      	add	sp, #48	; 0x30
   1ecb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ecb6:	bf00      	nop
   1ecb8:	8e89bed6 	.word	0x8e89bed6
   1ecbc:	00555555 	.word	0x00555555
   1ecc0:	000041e1 	.word	0x000041e1
   1ecc4:	20000774 	.word	0x20000774
   1ecc8:	0001ed99 	.word	0x0001ed99
   1eccc:	000302f4 	.word	0x000302f4
   1ecd0:	0002fb50 	.word	0x0002fb50
   1ecd4:	0002f6fc 	.word	0x0002f6fc
   1ecd8:	0002fb78 	.word	0x0002fb78
   1ecdc:	0001eebd 	.word	0x0001eebd
   1ece0:	0001ef65 	.word	0x0001ef65
   1ece4:	0003022c 	.word	0x0003022c
   1ece8:	00030340 	.word	0x00030340
   1ecec:	0001e765 	.word	0x0001e765

0001ecf0 <prepare_cb>:
	return common_prepare_cb(p, false);
   1ecf0:	2100      	movs	r1, #0
   1ecf2:	f7ff bebf 	b.w	1ea74 <common_prepare_cb>
   1ecf6:	bf00      	nop

0001ecf8 <isr_common_done>:
{
   1ecf8:	b530      	push	{r4, r5, lr}
   1ecfa:	4604      	mov	r4, r0
   1ecfc:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1ecfe:	f7ff fcdb 	bl	1e6b8 <lll_isr_status_reset>
	lll->state = 0U;
   1ed02:	7da3      	ldrb	r3, [r4, #22]
   1ed04:	f36f 0300 	bfc	r3, #0, #1
   1ed08:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   1ed0a:	069b      	lsls	r3, r3, #26
   1ed0c:	d401      	bmi.n	1ed12 <isr_common_done+0x1a>
		   lll->conn) {
   1ed0e:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1ed10:	b3b3      	cbz	r3, 1ed80 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1ed12:	2096      	movs	r0, #150	; 0x96
   1ed14:	f001 fab0 	bl	20278 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1ed18:	2300      	movs	r3, #0
   1ed1a:	461a      	mov	r2, r3
   1ed1c:	4619      	mov	r1, r3
   1ed1e:	4618      	mov	r0, r3
   1ed20:	f001 f9c6 	bl	200b0 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1ed24:	2001      	movs	r0, #1
   1ed26:	f7fa f85b 	bl	18de0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1ed2a:	4605      	mov	r5, r0
   1ed2c:	b1d0      	cbz	r0, 1ed64 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   1ed2e:	f105 001c 	add.w	r0, r5, #28
   1ed32:	f001 f8f9 	bl	1ff28 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1ed36:	f7ff f8f9 	bl	1df2c <ull_filter_lll_rl_enabled>
   1ed3a:	b940      	cbnz	r0, 1ed4e <isr_common_done+0x56>
	radio_rssi_measure();
   1ed3c:	f001 fa28 	bl	20190 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1ed40:	4811      	ldr	r0, [pc, #68]	; (1ed88 <isr_common_done+0x90>)
   1ed42:	4621      	mov	r1, r4
}
   1ed44:	b003      	add	sp, #12
   1ed46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1ed4a:	f001 b819 	b.w	1fd80 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ed4e:	f10d 0007 	add.w	r0, sp, #7
   1ed52:	f7fe ff65 	bl	1dc20 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1ed56:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ed58:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1ed5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed5e:	f001 fc23 	bl	205a8 <radio_ar_configure>
   1ed62:	e7eb      	b.n	1ed3c <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   1ed64:	4a09      	ldr	r2, [pc, #36]	; (1ed8c <isr_common_done+0x94>)
   1ed66:	490a      	ldr	r1, [pc, #40]	; (1ed90 <isr_common_done+0x98>)
   1ed68:	480a      	ldr	r0, [pc, #40]	; (1ed94 <isr_common_done+0x9c>)
   1ed6a:	f44f 7352 	mov.w	r3, #840	; 0x348
   1ed6e:	f007 fdf5 	bl	2695c <printk>
   1ed72:	4040      	eors	r0, r0
   1ed74:	f380 8811 	msr	BASEPRI, r0
   1ed78:	f04f 0003 	mov.w	r0, #3
   1ed7c:	df02      	svc	2
   1ed7e:	e7d6      	b.n	1ed2e <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   1ed80:	f001 f9f6 	bl	20170 <radio_switch_complete_and_disable>
   1ed84:	e7ce      	b.n	1ed24 <isr_common_done+0x2c>
   1ed86:	bf00      	nop
   1ed88:	000041e1 	.word	0x000041e1
   1ed8c:	000302f4 	.word	0x000302f4
   1ed90:	00030340 	.word	0x00030340
   1ed94:	0002f6fc 	.word	0x0002f6fc

0001ed98 <isr_abort>:
{
   1ed98:	b510      	push	{r4, lr}
   1ed9a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1ed9c:	f7ff fc8c 	bl	1e6b8 <lll_isr_status_reset>
	radio_filter_disable();
   1eda0:	f001 fa38 	bl	20214 <radio_filter_disable>
	lll_isr_cleanup(param);
   1eda4:	4620      	mov	r0, r4
}
   1eda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1edaa:	f7ff bc93 	b.w	1e6d4 <lll_isr_cleanup>
   1edae:	bf00      	nop

0001edb0 <isr_done>:
{
   1edb0:	b508      	push	{r3, lr}
	isr_common_done(param);
   1edb2:	f7ff ffa1 	bl	1ecf8 <isr_common_done>
	radio_rx_enable();
   1edb6:	f001 f8d1 	bl	1ff5c <radio_rx_enable>
}
   1edba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1edbe:	f001 bb4d 	b.w	2045c <radio_tmr_end_capture>
   1edc2:	bf00      	nop

0001edc4 <isr_tx>:
{
   1edc4:	b570      	push	{r4, r5, r6, lr}
   1edc6:	b082      	sub	sp, #8
   1edc8:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1edca:	f7ff fc63 	bl	1e694 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   1edce:	f001 f9cf 	bl	20170 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1edd2:	2001      	movs	r0, #1
   1edd4:	f7fa f804 	bl	18de0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1edd8:	4604      	mov	r4, r0
   1edda:	2800      	cmp	r0, #0
   1eddc:	d03f      	beq.n	1ee5e <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   1edde:	f104 001c 	add.w	r0, r4, #28
   1ede2:	f001 f8a1 	bl	1ff28 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1ede6:	f001 f8df 	bl	1ffa8 <radio_is_ready>
   1edea:	b9e0      	cbnz	r0, 1ee26 <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   1edec:	f7ff f89e 	bl	1df2c <ull_filter_lll_rl_enabled>
   1edf0:	bb50      	cbnz	r0, 1ee48 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1edf2:	f001 fb41 	bl	20478 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1edf6:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1edf8:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1edfa:	4608      	mov	r0, r1
   1edfc:	f001 f8a8 	bl	1ff50 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1ee00:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1ee02:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1ee04:	4608      	mov	r0, r1
   1ee06:	f001 f8a1 	bl	1ff4c <radio_tx_chain_delay_get>
   1ee0a:	4434      	add	r4, r6
   1ee0c:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1ee0e:	1a20      	subs	r0, r4, r0
   1ee10:	f001 fb04 	bl	2041c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1ee14:	f001 f9bc 	bl	20190 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1ee18:	4818      	ldr	r0, [pc, #96]	; (1ee7c <isr_tx+0xb8>)
   1ee1a:	4629      	mov	r1, r5
}
   1ee1c:	b002      	add	sp, #8
   1ee1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1ee22:	f000 bfad 	b.w	1fd80 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   1ee26:	4a16      	ldr	r2, [pc, #88]	; (1ee80 <isr_tx+0xbc>)
   1ee28:	4916      	ldr	r1, [pc, #88]	; (1ee84 <isr_tx+0xc0>)
   1ee2a:	4817      	ldr	r0, [pc, #92]	; (1ee88 <isr_tx+0xc4>)
   1ee2c:	f240 3306 	movw	r3, #774	; 0x306
   1ee30:	f007 fd94 	bl	2695c <printk>
   1ee34:	4040      	eors	r0, r0
   1ee36:	f380 8811 	msr	BASEPRI, r0
   1ee3a:	f04f 0003 	mov.w	r0, #3
   1ee3e:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1ee40:	f7ff f874 	bl	1df2c <ull_filter_lll_rl_enabled>
   1ee44:	2800      	cmp	r0, #0
   1ee46:	d0d4      	beq.n	1edf2 <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ee48:	f10d 0007 	add.w	r0, sp, #7
   1ee4c:	f7fe fee8 	bl	1dc20 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1ee50:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ee52:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1ee54:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ee58:	f001 fba6 	bl	205a8 <radio_ar_configure>
   1ee5c:	e7c9      	b.n	1edf2 <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   1ee5e:	4a08      	ldr	r2, [pc, #32]	; (1ee80 <isr_tx+0xbc>)
   1ee60:	490a      	ldr	r1, [pc, #40]	; (1ee8c <isr_tx+0xc8>)
   1ee62:	4809      	ldr	r0, [pc, #36]	; (1ee88 <isr_tx+0xc4>)
   1ee64:	f240 3302 	movw	r3, #770	; 0x302
   1ee68:	f007 fd78 	bl	2695c <printk>
   1ee6c:	4040      	eors	r0, r0
   1ee6e:	f380 8811 	msr	BASEPRI, r0
   1ee72:	f04f 0003 	mov.w	r0, #3
   1ee76:	df02      	svc	2
   1ee78:	e7b1      	b.n	1edde <isr_tx+0x1a>
   1ee7a:	bf00      	nop
   1ee7c:	000041e1 	.word	0x000041e1
   1ee80:	000302f4 	.word	0x000302f4
   1ee84:	00030348 	.word	0x00030348
   1ee88:	0002f6fc 	.word	0x0002f6fc
   1ee8c:	00030340 	.word	0x00030340

0001ee90 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1ee90:	68c3      	ldr	r3, [r0, #12]
{
   1ee92:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1ee94:	681e      	ldr	r6, [r3, #0]
{
   1ee96:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1ee98:	f7f7 fb40 	bl	1651c <ticker_ticks_now_get>
   1ee9c:	4605      	mov	r5, r0
   1ee9e:	4630      	mov	r0, r6
   1eea0:	f7ff fb96 	bl	1e5d0 <lll_event_offset_get>
	p->remainder = 0;
   1eea4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1eea6:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1eea8:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1eeac:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1eeae:	4620      	mov	r0, r4
   1eeb0:	2101      	movs	r1, #1
}
   1eeb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1eeb6:	f7ff bddd 	b.w	1ea74 <common_prepare_cb>
   1eeba:	bf00      	nop

0001eebc <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1eebc:	b900      	cbnz	r0, 1eec0 <ticker_op_start_cb+0x4>
   1eebe:	4770      	bx	lr
{
   1eec0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1eec2:	4a07      	ldr	r2, [pc, #28]	; (1eee0 <ticker_op_start_cb+0x24>)
   1eec4:	4907      	ldr	r1, [pc, #28]	; (1eee4 <ticker_op_start_cb+0x28>)
   1eec6:	4808      	ldr	r0, [pc, #32]	; (1eee8 <ticker_op_start_cb+0x2c>)
   1eec8:	f44f 7324 	mov.w	r3, #656	; 0x290
   1eecc:	f007 fd46 	bl	2695c <printk>
   1eed0:	4040      	eors	r0, r0
   1eed2:	f380 8811 	msr	BASEPRI, r0
   1eed6:	f04f 0003 	mov.w	r0, #3
   1eeda:	df02      	svc	2
}
   1eedc:	bd08      	pop	{r3, pc}
   1eede:	bf00      	nop
   1eee0:	000302f4 	.word	0x000302f4
   1eee4:	0002fcc8 	.word	0x0002fcc8
   1eee8:	0002f6fc 	.word	0x0002f6fc

0001eeec <is_abort_cb>:
	if (next != curr) {
   1eeec:	4281      	cmp	r1, r0
{
   1eeee:	b508      	push	{r3, lr}
	if (next != curr) {
   1eef0:	d00d      	beq.n	1ef0e <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   1eef2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1eef4:	b113      	cbz	r3, 1eefc <is_abort_cb+0x10>
			return -ECANCELED;
   1eef6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1eefa:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   1eefc:	4b14      	ldr	r3, [pc, #80]	; (1ef50 <is_abort_cb+0x64>)
   1eefe:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   1ef00:	f7ff fd80 	bl	1ea04 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   1ef04:	2800      	cmp	r0, #0
   1ef06:	db12      	blt.n	1ef2e <is_abort_cb+0x42>
   1ef08:	f06f 000a 	mvn.w	r0, #10
}
   1ef0c:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   1ef0e:	684b      	ldr	r3, [r1, #4]
   1ef10:	b123      	cbz	r3, 1ef1c <is_abort_cb+0x30>
   1ef12:	684b      	ldr	r3, [r1, #4]
   1ef14:	f893 3020 	ldrb.w	r3, [r3, #32]
   1ef18:	07db      	lsls	r3, r3, #31
   1ef1a:	d406      	bmi.n	1ef2a <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   1ef1c:	480d      	ldr	r0, [pc, #52]	; (1ef54 <is_abort_cb+0x68>)
   1ef1e:	f000 ff2f 	bl	1fd80 <radio_isr_set>
	radio_disable();
   1ef22:	f001 f821 	bl	1ff68 <radio_disable>
	return 0;
   1ef26:	2000      	movs	r0, #0
}
   1ef28:	bd08      	pop	{r3, pc}
		return 0;
   1ef2a:	2000      	movs	r0, #0
}
   1ef2c:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   1ef2e:	4a0a      	ldr	r2, [pc, #40]	; (1ef58 <is_abort_cb+0x6c>)
   1ef30:	490a      	ldr	r1, [pc, #40]	; (1ef5c <is_abort_cb+0x70>)
   1ef32:	480b      	ldr	r0, [pc, #44]	; (1ef60 <is_abort_cb+0x74>)
   1ef34:	f240 2332 	movw	r3, #562	; 0x232
   1ef38:	f007 fd10 	bl	2695c <printk>
   1ef3c:	4040      	eors	r0, r0
   1ef3e:	f380 8811 	msr	BASEPRI, r0
   1ef42:	f04f 0003 	mov.w	r0, #3
   1ef46:	df02      	svc	2
   1ef48:	f06f 000a 	mvn.w	r0, #10
}
   1ef4c:	bd08      	pop	{r3, pc}
   1ef4e:	bf00      	nop
   1ef50:	0001ee91 	.word	0x0001ee91
   1ef54:	00004141 	.word	0x00004141
   1ef58:	000302f4 	.word	0x000302f4
   1ef5c:	00030294 	.word	0x00030294
   1ef60:	0002f6fc 	.word	0x0002f6fc

0001ef64 <ticker_stop_cb>:
{
   1ef64:	b508      	push	{r3, lr}
	mfy.param = param;
   1ef66:	4b0c      	ldr	r3, [pc, #48]	; (1ef98 <ticker_stop_cb+0x34>)
{
   1ef68:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   1ef6a:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1ef6c:	2200      	movs	r2, #0
   1ef6e:	4611      	mov	r1, r2
   1ef70:	2001      	movs	r0, #1
   1ef72:	f7f5 ffdd 	bl	14f30 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1ef76:	b900      	cbnz	r0, 1ef7a <ticker_stop_cb+0x16>
}
   1ef78:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1ef7a:	4a08      	ldr	r2, [pc, #32]	; (1ef9c <ticker_stop_cb+0x38>)
   1ef7c:	4908      	ldr	r1, [pc, #32]	; (1efa0 <ticker_stop_cb+0x3c>)
   1ef7e:	4809      	ldr	r0, [pc, #36]	; (1efa4 <ticker_stop_cb+0x40>)
   1ef80:	f240 2389 	movw	r3, #649	; 0x289
   1ef84:	f007 fcea 	bl	2695c <printk>
   1ef88:	4040      	eors	r0, r0
   1ef8a:	f380 8811 	msr	BASEPRI, r0
   1ef8e:	f04f 0003 	mov.w	r0, #3
   1ef92:	df02      	svc	2
}
   1ef94:	bd08      	pop	{r3, pc}
   1ef96:	bf00      	nop
   1ef98:	20000764 	.word	0x20000764
   1ef9c:	000302f4 	.word	0x000302f4
   1efa0:	0002fb50 	.word	0x0002fb50
   1efa4:	0002f6fc 	.word	0x0002f6fc

0001efa8 <isr_done_cleanup>:
{
   1efa8:	b530      	push	{r4, r5, lr}
   1efaa:	4604      	mov	r4, r0
   1efac:	b085      	sub	sp, #20
	lll_isr_status_reset();
   1efae:	f7ff fb83 	bl	1e6b8 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   1efb2:	f10d 010f 	add.w	r1, sp, #15
   1efb6:	4620      	mov	r0, r4
   1efb8:	f7ff faf8 	bl	1e5ac <lll_is_done>
   1efbc:	b9c8      	cbnz	r0, 1eff2 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   1efbe:	4605      	mov	r5, r0
   1efc0:	f001 f928 	bl	20214 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   1efc4:	7da2      	ldrb	r2, [r4, #22]
   1efc6:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1efca:	3301      	adds	r3, #1
   1efcc:	f003 0303 	and.w	r3, r3, #3
   1efd0:	2b03      	cmp	r3, #3
   1efd2:	bf14      	ite	ne
   1efd4:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1efd8:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1efdc:	2300      	movs	r3, #0
		lll->chan = 0U;
   1efde:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1efe0:	4619      	mov	r1, r3
   1efe2:	9300      	str	r3, [sp, #0]
   1efe4:	2201      	movs	r2, #1
   1efe6:	4618      	mov	r0, r3
   1efe8:	f7f7 f9f8 	bl	163dc <ticker_stop>
	lll_isr_cleanup(param);
   1efec:	4620      	mov	r0, r4
   1efee:	f7ff fb71 	bl	1e6d4 <lll_isr_cleanup>
}
   1eff2:	b005      	add	sp, #20
   1eff4:	bd30      	pop	{r4, r5, pc}
   1eff6:	bf00      	nop

0001eff8 <isr_scan_tgta_check>:
{
   1eff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1effc:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1f000:	4616      	mov	r6, r2
   1f002:	4680      	mov	r8, r0
   1f004:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1f006:	464a      	mov	r2, r9
   1f008:	4619      	mov	r1, r3
   1f00a:	4630      	mov	r0, r6
{
   1f00c:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1f00e:	f7fe ff6b 	bl	1dee8 <ull_filter_lll_rl_addr_resolve>
   1f012:	4604      	mov	r4, r0
   1f014:	b9a0      	cbnz	r0, 1f040 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1f016:	b11d      	cbz	r5, 1f020 <isr_scan_tgta_check+0x28>
   1f018:	f898 3017 	ldrb.w	r3, [r8, #23]
   1f01c:	079a      	lsls	r2, r3, #30
   1f01e:	d41c      	bmi.n	1f05a <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   1f020:	f898 5016 	ldrb.w	r5, [r8, #22]
   1f024:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1f028:	42b3      	cmp	r3, r6
   1f02a:	d00c      	beq.n	1f046 <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1f02c:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   1f030:	07ab      	lsls	r3, r5, #30
   1f032:	d505      	bpl.n	1f040 <isr_scan_tgta_check+0x48>
   1f034:	b126      	cbz	r6, 1f040 <isr_scan_tgta_check+0x48>
   1f036:	797b      	ldrb	r3, [r7, #5]
   1f038:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f03c:	2b40      	cmp	r3, #64	; 0x40
   1f03e:	d014      	beq.n	1f06a <isr_scan_tgta_check+0x72>
}
   1f040:	4620      	mov	r0, r4
   1f042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1f046:	2206      	movs	r2, #6
   1f048:	4639      	mov	r1, r7
   1f04a:	f108 0019 	add.w	r0, r8, #25
   1f04e:	f00b f95c 	bl	2a30a <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1f052:	b140      	cbz	r0, 1f066 <isr_scan_tgta_check+0x6e>
   1f054:	f898 5016 	ldrb.w	r5, [r8, #22]
   1f058:	e7e8      	b.n	1f02c <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1f05a:	4648      	mov	r0, r9
   1f05c:	f7fe fdc6 	bl	1dbec <ull_filter_lll_lrpa_get>
   1f060:	2800      	cmp	r0, #0
   1f062:	d1ed      	bne.n	1f040 <isr_scan_tgta_check+0x48>
   1f064:	e7dc      	b.n	1f020 <isr_scan_tgta_check+0x28>
			*dir_report = true;
   1f066:	2401      	movs	r4, #1
   1f068:	e7ea      	b.n	1f040 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   1f06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f06c:	2b00      	cmp	r3, #0
   1f06e:	d0fa      	beq.n	1f066 <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   1f070:	2401      	movs	r4, #1
   1f072:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1f074:	e7e4      	b.n	1f040 <isr_scan_tgta_check+0x48>
   1f076:	bf00      	nop

0001f078 <abort_cb>:
{
   1f078:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1f07a:	b1d8      	cbz	r0, 1f0b4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1f07c:	460c      	mov	r4, r1
   1f07e:	f7ff fcd9 	bl	1ea34 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1f082:	2800      	cmp	r0, #0
   1f084:	db04      	blt.n	1f090 <abort_cb+0x18>
	lll_done(param);
   1f086:	4620      	mov	r0, r4
}
   1f088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1f08c:	f7ff ba3c 	b.w	1e508 <lll_done>
	LL_ASSERT(err >= 0);
   1f090:	4a0c      	ldr	r2, [pc, #48]	; (1f0c4 <abort_cb+0x4c>)
   1f092:	490d      	ldr	r1, [pc, #52]	; (1f0c8 <abort_cb+0x50>)
   1f094:	480d      	ldr	r0, [pc, #52]	; (1f0cc <abort_cb+0x54>)
   1f096:	f240 2379 	movw	r3, #633	; 0x279
   1f09a:	f007 fc5f 	bl	2695c <printk>
   1f09e:	4040      	eors	r0, r0
   1f0a0:	f380 8811 	msr	BASEPRI, r0
   1f0a4:	f04f 0003 	mov.w	r0, #3
   1f0a8:	df02      	svc	2
	lll_done(param);
   1f0aa:	4620      	mov	r0, r4
}
   1f0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1f0b0:	f7ff ba2a 	b.w	1e508 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   1f0b4:	4806      	ldr	r0, [pc, #24]	; (1f0d0 <abort_cb+0x58>)
   1f0b6:	f000 fe63 	bl	1fd80 <radio_isr_set>
}
   1f0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1f0be:	f000 bf53 	b.w	1ff68 <radio_disable>
   1f0c2:	bf00      	nop
   1f0c4:	000302f4 	.word	0x000302f4
   1f0c8:	00030294 	.word	0x00030294
   1f0cc:	0002f6fc 	.word	0x0002f6fc
   1f0d0:	0001efa9 	.word	0x0001efa9

0001f0d4 <lll_scan_init>:
}
   1f0d4:	2000      	movs	r0, #0
   1f0d6:	4770      	bx	lr

0001f0d8 <lll_scan_reset>:
   1f0d8:	2000      	movs	r0, #0
   1f0da:	4770      	bx	lr

0001f0dc <lll_scan_prepare>:
{
   1f0dc:	b510      	push	{r4, lr}
   1f0de:	b082      	sub	sp, #8
   1f0e0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1f0e2:	f7ff fc8f 	bl	1ea04 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1f0e6:	2800      	cmp	r0, #0
   1f0e8:	db19      	blt.n	1f11e <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1f0ea:	4a13      	ldr	r2, [pc, #76]	; (1f138 <lll_scan_prepare+0x5c>)
   1f0ec:	4913      	ldr	r1, [pc, #76]	; (1f13c <lll_scan_prepare+0x60>)
   1f0ee:	4814      	ldr	r0, [pc, #80]	; (1f140 <lll_scan_prepare+0x64>)
   1f0f0:	9400      	str	r4, [sp, #0]
   1f0f2:	2300      	movs	r3, #0
   1f0f4:	f7fa f972 	bl	193dc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1f0f8:	b108      	cbz	r0, 1f0fe <lll_scan_prepare+0x22>
   1f0fa:	3077      	adds	r0, #119	; 0x77
   1f0fc:	d101      	bne.n	1f102 <lll_scan_prepare+0x26>
}
   1f0fe:	b002      	add	sp, #8
   1f100:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1f102:	4a10      	ldr	r2, [pc, #64]	; (1f144 <lll_scan_prepare+0x68>)
   1f104:	4910      	ldr	r1, [pc, #64]	; (1f148 <lll_scan_prepare+0x6c>)
   1f106:	4811      	ldr	r0, [pc, #68]	; (1f14c <lll_scan_prepare+0x70>)
   1f108:	238b      	movs	r3, #139	; 0x8b
   1f10a:	f007 fc27 	bl	2695c <printk>
   1f10e:	4040      	eors	r0, r0
   1f110:	f380 8811 	msr	BASEPRI, r0
   1f114:	f04f 0003 	mov.w	r0, #3
   1f118:	df02      	svc	2
}
   1f11a:	b002      	add	sp, #8
   1f11c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1f11e:	4a09      	ldr	r2, [pc, #36]	; (1f144 <lll_scan_prepare+0x68>)
   1f120:	490b      	ldr	r1, [pc, #44]	; (1f150 <lll_scan_prepare+0x74>)
   1f122:	480a      	ldr	r0, [pc, #40]	; (1f14c <lll_scan_prepare+0x70>)
   1f124:	2388      	movs	r3, #136	; 0x88
   1f126:	f007 fc19 	bl	2695c <printk>
   1f12a:	4040      	eors	r0, r0
   1f12c:	f380 8811 	msr	BASEPRI, r0
   1f130:	f04f 0003 	mov.w	r0, #3
   1f134:	df02      	svc	2
   1f136:	e7d8      	b.n	1f0ea <lll_scan_prepare+0xe>
   1f138:	0001ecf1 	.word	0x0001ecf1
   1f13c:	0001f079 	.word	0x0001f079
   1f140:	0001eeed 	.word	0x0001eeed
   1f144:	000302f4 	.word	0x000302f4
   1f148:	0003035c 	.word	0x0003035c
   1f14c:	0002f6fc 	.word	0x0002f6fc
   1f150:	00030294 	.word	0x00030294

0001f154 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1f154:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   1f158:	f01c 0f08 	tst.w	ip, #8
   1f15c:	d002      	beq.n	1f164 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1f15e:	b162      	cbz	r2, 1f17a <lll_scan_isr_rx_check+0x26>
{
   1f160:	2001      	movs	r0, #1
}
   1f162:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1f164:	2a00      	cmp	r2, #0
   1f166:	d0fb      	beq.n	1f160 <lll_scan_isr_rx_check+0xc>
{
   1f168:	b510      	push	{r4, lr}
   1f16a:	4604      	mov	r4, r0
   1f16c:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1f16e:	4619      	mov	r1, r3
   1f170:	f7fe fe4c 	bl	1de0c <ull_filter_lll_rl_idx_allowed>
   1f174:	b120      	cbz	r0, 1f180 <lll_scan_isr_rx_check+0x2c>
{
   1f176:	2001      	movs	r0, #1
}
   1f178:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1f17a:	4618      	mov	r0, r3
   1f17c:	f7fe be16 	b.w	1ddac <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1f180:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   1f182:	071b      	lsls	r3, r3, #28
   1f184:	d4f7      	bmi.n	1f176 <lll_scan_isr_rx_check+0x22>
}
   1f186:	bd10      	pop	{r4, pc}

0001f188 <lll_scan_prepare_connect_req>:
{
   1f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f18c:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   1f190:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1f192:	01ad      	lsls	r5, r5, #6
   1f194:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1f198:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   1f19c:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   1f1a0:	780b      	ldrb	r3, [r1, #0]
   1f1a2:	f003 0310 	and.w	r3, r3, #16
{
   1f1a6:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1f1a8:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1f1aa:	2322      	movs	r3, #34	; 0x22
   1f1ac:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1f1ae:	700d      	strb	r5, [r1, #0]
{
   1f1b0:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1f1b2:	9908      	ldr	r1, [sp, #32]
   1f1b4:	2206      	movs	r2, #6
{
   1f1b6:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1f1b8:	1ca0      	adds	r0, r4, #2
   1f1ba:	f00b f8cf 	bl	2a35c <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   1f1be:	9906      	ldr	r1, [sp, #24]
   1f1c0:	2206      	movs	r2, #6
   1f1c2:	f104 0008 	add.w	r0, r4, #8
   1f1c6:	f00b f8c9 	bl	2a35c <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   1f1ca:	2204      	movs	r2, #4
   1f1cc:	18b1      	adds	r1, r6, r2
   1f1ce:	f104 000e 	add.w	r0, r4, #14
   1f1d2:	f00b f8c3 	bl	2a35c <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   1f1d6:	2203      	movs	r2, #3
   1f1d8:	f106 0108 	add.w	r1, r6, #8
   1f1dc:	f104 0012 	add.w	r0, r4, #18
   1f1e0:	f00b f8bc 	bl	2a35c <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   1f1e4:	2301      	movs	r3, #1
   1f1e6:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1f1e8:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   1f1ea:	f001 f93f 	bl	2046c <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   1f1ee:	f1b8 0f00 	cmp.w	r8, #0
   1f1f2:	d044      	beq.n	1f27e <lll_scan_prepare_connect_req+0xf6>
   1f1f4:	f008 0203 	and.w	r2, r8, #3
   1f1f8:	322b      	adds	r2, #43	; 0x2b
   1f1fa:	00d2      	lsls	r2, r2, #3
   1f1fc:	f3c8 0840 	ubfx	r8, r8, #1, #1
   1f200:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   1f204:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   1f206:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1f20a:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   1f20c:	b393      	cbz	r3, 1f274 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1f20e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1f212:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   1f216:	2b00      	cmp	r3, #0
   1f218:	db01      	blt.n	1f21e <lll_scan_prepare_connect_req+0x96>
   1f21a:	4293      	cmp	r3, r2
   1f21c:	d201      	bcs.n	1f222 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   1f21e:	442b      	add	r3, r5
   1f220:	e7f9      	b.n	1f216 <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   1f222:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1f224:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   1f226:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1f228:	4b16      	ldr	r3, [pc, #88]	; (1f284 <lll_scan_prepare_connect_req+0xfc>)
   1f22a:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   1f22e:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1f230:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   1f232:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   1f234:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   1f236:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1f238:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1f23a:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1f23c:	8abb      	ldrh	r3, [r7, #20]
   1f23e:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1f240:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1f242:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   1f244:	f106 0118 	add.w	r1, r6, #24
   1f248:	2205      	movs	r2, #5
   1f24a:	f104 001e 	add.w	r0, r4, #30
   1f24e:	f00b f885 	bl	2a35c <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   1f252:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f256:	7fb2      	ldrb	r2, [r6, #30]
   1f258:	f362 0304 	bfi	r3, r2, #0, #5
   1f25c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   1f260:	f7ff fc06 	bl	1ea70 <lll_clock_sca_local_get>
   1f264:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f268:	f360 1347 	bfi	r3, r0, #5, #3
   1f26c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   1f270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   1f274:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f276:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   1f278:	75a3      	strb	r3, [r4, #22]
   1f27a:	75e3      	strb	r3, [r4, #23]
   1f27c:	e7dc      	b.n	1f238 <lll_scan_prepare_connect_req+0xb0>
   1f27e:	f44f 78b0 	mov.w	r8, #352	; 0x160
   1f282:	e7bf      	b.n	1f204 <lll_scan_prepare_connect_req+0x7c>
   1f284:	d1b71759 	.word	0xd1b71759

0001f288 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1f288:	b538      	push	{r3, r4, r5, lr}
   1f28a:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1f28c:	f7ff fa14 	bl	1e6b8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1f290:	f7f9 fea4 	bl	18fdc <ull_event_done_extra_get>
	LL_ASSERT(e);
   1f294:	4604      	mov	r4, r0
   1f296:	b190      	cbz	r0, 1f2be <isr_done+0x36>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1f298:	4910      	ldr	r1, [pc, #64]	; (1f2dc <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   1f29a:	4a11      	ldr	r2, [pc, #68]	; (1f2e0 <isr_done+0x58>)
	e->crc_valid = crc_valid;
   1f29c:	7923      	ldrb	r3, [r4, #4]
   1f29e:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   1f2a0:	8812      	ldrh	r2, [r2, #0]
   1f2a2:	8062      	strh	r2, [r4, #2]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1f2a4:	4a0f      	ldr	r2, [pc, #60]	; (1f2e4 <isr_done+0x5c>)
	e->crc_valid = crc_valid;
   1f2a6:	f360 0300 	bfi	r3, r0, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1f2aa:	2101      	movs	r1, #1
	e->crc_valid = crc_valid;
   1f2ac:	7123      	strb	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1f2ae:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   1f2b0:	7813      	ldrb	r3, [r2, #0]
   1f2b2:	7163      	strb	r3, [r4, #5]
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1f2b4:	4628      	mov	r0, r5
}
   1f2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1f2ba:	f7ff ba0b 	b.w	1e6d4 <lll_isr_cleanup>
	LL_ASSERT(e);
   1f2be:	4a0a      	ldr	r2, [pc, #40]	; (1f2e8 <isr_done+0x60>)
   1f2c0:	490a      	ldr	r1, [pc, #40]	; (1f2ec <isr_done+0x64>)
   1f2c2:	480b      	ldr	r0, [pc, #44]	; (1f2f0 <isr_done+0x68>)
   1f2c4:	f240 3317 	movw	r3, #791	; 0x317
   1f2c8:	f007 fb48 	bl	2695c <printk>
   1f2cc:	4040      	eors	r0, r0
   1f2ce:	f380 8811 	msr	BASEPRI, r0
   1f2d2:	f04f 0003 	mov.w	r0, #3
   1f2d6:	df02      	svc	2
   1f2d8:	e7de      	b.n	1f298 <isr_done+0x10>
   1f2da:	bf00      	nop
   1f2dc:	20004c0e 	.word	0x20004c0e
   1f2e0:	20004a78 	.word	0x20004a78
   1f2e4:	20004c0f 	.word	0x20004c0f
   1f2e8:	00030384 	.word	0x00030384
   1f2ec:	000303d0 	.word	0x000303d0
   1f2f0:	0002f6fc 	.word	0x0002f6fc

0001f2f4 <lll_conn_init>:
{
   1f2f4:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1f2f6:	f000 fe8b 	bl	20010 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1f2fa:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1f2fc:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1f2fe:	2101      	movs	r1, #1
   1f300:	f361 0201 	bfi	r2, r1, #0, #2
}
   1f304:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1f306:	701a      	strb	r2, [r3, #0]
}
   1f308:	bd08      	pop	{r3, pc}
   1f30a:	bf00      	nop

0001f30c <lll_conn_reset>:
}
   1f30c:	2000      	movs	r0, #0
   1f30e:	4770      	bx	lr

0001f310 <lll_conn_flush>:
}
   1f310:	4770      	bx	lr
   1f312:	bf00      	nop

0001f314 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1f314:	4805      	ldr	r0, [pc, #20]	; (1f32c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1f316:	4906      	ldr	r1, [pc, #24]	; (1f330 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1f318:	4a06      	ldr	r2, [pc, #24]	; (1f334 <lll_conn_prepare_reset+0x20>)
{
   1f31a:	b410      	push	{r4}
	trx_cnt = 0U;
   1f31c:	2300      	movs	r3, #0
   1f31e:	4c06      	ldr	r4, [pc, #24]	; (1f338 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1f320:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1f322:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1f324:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1f326:	8023      	strh	r3, [r4, #0]
}
   1f328:	bc10      	pop	{r4}
   1f32a:	4770      	bx	lr
   1f32c:	20004c0e 	.word	0x20004c0e
   1f330:	20004c0d 	.word	0x20004c0d
   1f334:	20004c0f 	.word	0x20004c0f
   1f338:	20004a78 	.word	0x20004a78

0001f33c <lll_conn_abort_cb>:
{
   1f33c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1f33e:	b1e8      	cbz	r0, 1f37c <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   1f340:	460d      	mov	r5, r1
   1f342:	4604      	mov	r4, r0
   1f344:	f7ff fb76 	bl	1ea34 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1f348:	2800      	cmp	r0, #0
   1f34a:	db0a      	blt.n	1f362 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1f34c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1f34e:	8923      	ldrh	r3, [r4, #8]
   1f350:	8a51      	ldrh	r1, [r2, #18]
   1f352:	3301      	adds	r3, #1
   1f354:	440b      	add	r3, r1
   1f356:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1f358:	4628      	mov	r0, r5
}
   1f35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1f35e:	f7ff b8d3 	b.w	1e508 <lll_done>
	LL_ASSERT(err >= 0);
   1f362:	4a0a      	ldr	r2, [pc, #40]	; (1f38c <lll_conn_abort_cb+0x50>)
   1f364:	490a      	ldr	r1, [pc, #40]	; (1f390 <lll_conn_abort_cb+0x54>)
   1f366:	480b      	ldr	r0, [pc, #44]	; (1f394 <lll_conn_abort_cb+0x58>)
   1f368:	23aa      	movs	r3, #170	; 0xaa
   1f36a:	f007 faf7 	bl	2695c <printk>
   1f36e:	4040      	eors	r0, r0
   1f370:	f380 8811 	msr	BASEPRI, r0
   1f374:	f04f 0003 	mov.w	r0, #3
   1f378:	df02      	svc	2
   1f37a:	e7e7      	b.n	1f34c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1f37c:	4806      	ldr	r0, [pc, #24]	; (1f398 <lll_conn_abort_cb+0x5c>)
   1f37e:	f000 fcff 	bl	1fd80 <radio_isr_set>
}
   1f382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1f386:	f000 bdef 	b.w	1ff68 <radio_disable>
   1f38a:	bf00      	nop
   1f38c:	00030384 	.word	0x00030384
   1f390:	00030294 	.word	0x00030294
   1f394:	0002f6fc 	.word	0x0002f6fc
   1f398:	0001f289 	.word	0x0001f289

0001f39c <lll_conn_rx_pkt_set>:
{
   1f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f39e:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1f3a0:	2001      	movs	r0, #1
   1f3a2:	f7f9 fd1d 	bl	18de0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1f3a6:	4604      	mov	r4, r0
   1f3a8:	b348      	cbz	r0, 1f3fe <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1f3aa:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
	max_rx_octets = lll->max_rx_octets;
   1f3ae:	8caf      	ldrh	r7, [r5, #36]	; 0x24
	phy = lll->phy_rx;
   1f3b0:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1f3b4:	2100      	movs	r1, #0
   1f3b6:	4630      	mov	r0, r6
   1f3b8:	f000 fd48 	bl	1fe4c <radio_phy_set>
	} else if (lll->enc_rx) {
   1f3bc:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1f3c0:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   1f3c2:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1f3c4:	b2f9      	uxtb	r1, r7
   1f3c6:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   1f3ca:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   1f3ce:	d50e      	bpl.n	1f3ee <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1f3d0:	3104      	adds	r1, #4
   1f3d2:	b2c9      	uxtb	r1, r1
   1f3d4:	2008      	movs	r0, #8
   1f3d6:	f000 fd7f 	bl	1fed8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1f3da:	4622      	mov	r2, r4
   1f3dc:	4631      	mov	r1, r6
   1f3de:	f105 0043 	add.w	r0, r5, #67	; 0x43
   1f3e2:	f001 f84f 	bl	20484 <radio_ccm_rx_pkt_set>
}
   1f3e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1f3ea:	f000 bd9d 	b.w	1ff28 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   1f3ee:	2008      	movs	r0, #8
   1f3f0:	f000 fd72 	bl	1fed8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1f3f4:	4620      	mov	r0, r4
}
   1f3f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1f3fa:	f000 bd95 	b.w	1ff28 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1f3fe:	4a07      	ldr	r2, [pc, #28]	; (1f41c <lll_conn_rx_pkt_set+0x80>)
   1f400:	4907      	ldr	r1, [pc, #28]	; (1f420 <lll_conn_rx_pkt_set+0x84>)
   1f402:	4808      	ldr	r0, [pc, #32]	; (1f424 <lll_conn_rx_pkt_set+0x88>)
   1f404:	f240 235a 	movw	r3, #602	; 0x25a
   1f408:	f007 faa8 	bl	2695c <printk>
   1f40c:	4040      	eors	r0, r0
   1f40e:	f380 8811 	msr	BASEPRI, r0
   1f412:	f04f 0003 	mov.w	r0, #3
   1f416:	df02      	svc	2
   1f418:	e7c7      	b.n	1f3aa <lll_conn_rx_pkt_set+0xe>
   1f41a:	bf00      	nop
   1f41c:	00030384 	.word	0x00030384
   1f420:	00030340 	.word	0x00030340
   1f424:	0002f6fc 	.word	0x0002f6fc

0001f428 <lll_conn_isr_tx>:
{
   1f428:	b538      	push	{r3, r4, r5, lr}
   1f42a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1f42c:	f7ff f932 	bl	1e694 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1f430:	2096      	movs	r0, #150	; 0x96
   1f432:	f000 ff21 	bl	20278 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1f436:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   1f43a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1f43e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1f442:	f000 0007 	and.w	r0, r0, #7
   1f446:	f002 0207 	and.w	r2, r2, #7
   1f44a:	2100      	movs	r1, #0
   1f44c:	f000 fe30 	bl	200b0 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1f450:	4620      	mov	r0, r4
   1f452:	f7ff ffa3 	bl	1f39c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1f456:	f000 fda7 	bl	1ffa8 <radio_is_ready>
   1f45a:	bb58      	cbnz	r0, 1f4b4 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1f45c:	f001 f80c 	bl	20478 <radio_tmr_tifs_base_get>
   1f460:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1f462:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1f466:	2101      	movs	r1, #1
   1f468:	f000 0007 	and.w	r0, r0, #7
   1f46c:	f000 fd70 	bl	1ff50 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1f470:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1f474:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1f478:	4405      	add	r5, r0
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1f47a:	2b02      	cmp	r3, #2
   1f47c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1f480:	d016      	beq.n	1f4b0 <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1f482:	2b04      	cmp	r3, #4
   1f484:	bf14      	ite	ne
   1f486:	2328      	movne	r3, #40	; 0x28
   1f488:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1f48c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   1f490:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1f494:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1f498:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1f49a:	f000 fd57 	bl	1ff4c <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1f49e:	1a28      	subs	r0, r5, r0
   1f4a0:	f000 ffbc 	bl	2041c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1f4a4:	4621      	mov	r1, r4
   1f4a6:	480a      	ldr	r0, [pc, #40]	; (1f4d0 <lll_conn_isr_tx+0xa8>)
}
   1f4a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1f4ac:	f000 bc68 	b.w	1fd80 <radio_isr_set>
	switch (phy) {
   1f4b0:	2318      	movs	r3, #24
   1f4b2:	e7eb      	b.n	1f48c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1f4b4:	4a07      	ldr	r2, [pc, #28]	; (1f4d4 <lll_conn_isr_tx+0xac>)
   1f4b6:	4908      	ldr	r1, [pc, #32]	; (1f4d8 <lll_conn_isr_tx+0xb0>)
   1f4b8:	4808      	ldr	r0, [pc, #32]	; (1f4dc <lll_conn_isr_tx+0xb4>)
   1f4ba:	f240 2313 	movw	r3, #531	; 0x213
   1f4be:	f007 fa4d 	bl	2695c <printk>
   1f4c2:	4040      	eors	r0, r0
   1f4c4:	f380 8811 	msr	BASEPRI, r0
   1f4c8:	f04f 0003 	mov.w	r0, #3
   1f4cc:	df02      	svc	2
   1f4ce:	e7c5      	b.n	1f45c <lll_conn_isr_tx+0x34>
   1f4d0:	0001f619 	.word	0x0001f619
   1f4d4:	00030384 	.word	0x00030384
   1f4d8:	00030348 	.word	0x00030348
   1f4dc:	0002f6fc 	.word	0x0002f6fc

0001f4e0 <lll_conn_tx_pkt_set>:
{
   1f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4e2:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1f4e4:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
	max_tx_octets = lll->max_tx_octets;
   1f4e8:	8c46      	ldrh	r6, [r0, #34]	; 0x22
	phy = lll->phy_tx;
   1f4ea:	f001 0407 	and.w	r4, r1, #7
{
   1f4ee:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1f4f0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1f4f4:	4620      	mov	r0, r4
   1f4f6:	f000 fca9 	bl	1fe4c <radio_phy_set>
	} else if (lll->enc_tx) {
   1f4fa:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1f4fe:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1f500:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1f502:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1f506:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   1f508:	d50d      	bpl.n	1f526 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1f50a:	3104      	adds	r1, #4
   1f50c:	b2c9      	uxtb	r1, r1
   1f50e:	2008      	movs	r0, #8
   1f510:	f000 fce2 	bl	1fed8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1f514:	4639      	mov	r1, r7
   1f516:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1f51a:	f000 fff1 	bl	20500 <radio_ccm_tx_pkt_set>
}
   1f51e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1f522:	f000 bd07 	b.w	1ff34 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1f526:	2008      	movs	r0, #8
   1f528:	f000 fcd6 	bl	1fed8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1f52c:	4638      	mov	r0, r7
}
   1f52e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1f532:	f000 bcff 	b.w	1ff34 <radio_pkt_tx_set>
   1f536:	bf00      	nop

0001f538 <lll_conn_pdu_tx_prep>:
{
   1f538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f53c:	4604      	mov	r4, r0
   1f53e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1f540:	aa01      	add	r2, sp, #4
   1f542:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1f544:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1f546:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1f548:	f7f5 fc88 	bl	14e5c <memq_peek>
	if (lll->empty || !link) {
   1f54c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f550:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1f552:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1f554:	d432      	bmi.n	1f5bc <lll_conn_pdu_tx_prep+0x84>
   1f556:	2800      	cmp	r0, #0
   1f558:	d04e      	beq.n	1f5f8 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1f55a:	9b01      	ldr	r3, [sp, #4]
   1f55c:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
   1f560:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1f564:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1f568:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1f56c:	b913      	cbnz	r3, 1f574 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1f56e:	786b      	ldrb	r3, [r5, #1]
   1f570:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if (lll->packet_tx_head_offset) {
   1f574:	b137      	cbz	r7, 1f584 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1f576:	f818 2007 	ldrb.w	r2, [r8, r7]
   1f57a:	2101      	movs	r1, #1
   1f57c:	f361 0201 	bfi	r2, r1, #0, #2
   1f580:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1f584:	1bdb      	subs	r3, r3, r7
   1f586:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1f588:	4620      	mov	r0, r4
   1f58a:	f7fd f823 	bl	1c5d4 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1f58e:	786b      	ldrb	r3, [r5, #1]
   1f590:	4283      	cmp	r3, r0
   1f592:	d924      	bls.n	1f5de <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1f594:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1f596:	f818 3007 	ldrb.w	r3, [r8, r7]
   1f59a:	f043 0310 	orr.w	r3, r3, #16
   1f59e:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1f5a2:	f818 3007 	ldrb.w	r3, [r8, r7]
   1f5a6:	f36f 1347 	bfc	r3, #5, #3
   1f5aa:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1f5ae:	2300      	movs	r3, #0
   1f5b0:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1f5b2:	f8c9 5000 	str.w	r5, [r9]
}
   1f5b6:	b003      	add	sp, #12
   1f5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1f5bc:	f043 0304 	orr.w	r3, r3, #4
   1f5c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1f5c4:	f000 fd24 	bl	20010 <radio_pkt_empty_get>
   1f5c8:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1f5ca:	b1e6      	cbz	r6, 1f606 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1f5cc:	7803      	ldrb	r3, [r0, #0]
   1f5ce:	f043 0310 	orr.w	r3, r3, #16
   1f5d2:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1f5d4:	f8c9 5000 	str.w	r5, [r9]
}
   1f5d8:	b003      	add	sp, #12
   1f5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1f5de:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f5e0:	6832      	ldr	r2, [r6, #0]
   1f5e2:	429a      	cmp	r2, r3
			p->md = 1U;
   1f5e4:	f818 3007 	ldrb.w	r3, [r8, r7]
   1f5e8:	bf14      	ite	ne
   1f5ea:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1f5ee:	f36f 1304 	bfceq	r3, #4, #1
   1f5f2:	f808 3007 	strb.w	r3, [r8, r7]
   1f5f6:	e7d4      	b.n	1f5a2 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1f5f8:	f043 0304 	orr.w	r3, r3, #4
   1f5fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1f600:	f000 fd06 	bl	20010 <radio_pkt_empty_get>
   1f604:	4605      	mov	r5, r0
			p->md = 0U;
   1f606:	782b      	ldrb	r3, [r5, #0]
   1f608:	f36f 1304 	bfc	r3, #4, #1
   1f60c:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1f60e:	f8c9 5000 	str.w	r5, [r9]
}
   1f612:	b003      	add	sp, #12
   1f614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f618 <lll_conn_isr_rx>:
{
   1f618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f61c:	b083      	sub	sp, #12
   1f61e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1f620:	f000 fccc 	bl	1ffbc <radio_is_done>
	if (trx_done) {
   1f624:	b2c0      	uxtb	r0, r0
   1f626:	b950      	cbnz	r0, 1f63e <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   1f628:	f7ff f83c 	bl	1e6a4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1f62c:	48b6      	ldr	r0, [pc, #728]	; (1f908 <lll_conn_isr_rx+0x2f0>)
   1f62e:	4621      	mov	r1, r4
   1f630:	f000 fba6 	bl	1fd80 <radio_isr_set>
}
   1f634:	b003      	add	sp, #12
   1f636:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   1f63a:	f000 bc95 	b.w	1ff68 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1f63e:	f000 fcdd 	bl	1fffc <radio_crc_is_valid>
   1f642:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1f644:	f000 fdbc 	bl	201c0 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1f648:	f7ff f82c 	bl	1e6a4 <lll_isr_rx_status_reset>
	trx_cnt++;
   1f64c:	4aaf      	ldr	r2, [pc, #700]	; (1f90c <lll_conn_isr_rx+0x2f4>)
   1f64e:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1f650:	2001      	movs	r0, #1
	trx_cnt++;
   1f652:	4403      	add	r3, r0
   1f654:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1f656:	f7f9 fbc3 	bl	18de0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1f65a:	4606      	mov	r6, r0
   1f65c:	2800      	cmp	r0, #0
   1f65e:	f000 80ce 	beq.w	1f7fe <lll_conn_isr_rx+0x1e6>
	if (crc_ok) {
   1f662:	2d00      	cmp	r5, #0
   1f664:	d148      	bne.n	1f6f8 <lll_conn_isr_rx+0xe0>
		if (crc_expire == 0U) {
   1f666:	4baa      	ldr	r3, [pc, #680]	; (1f910 <lll_conn_isr_rx+0x2f8>)
   1f668:	781f      	ldrb	r7, [r3, #0]
   1f66a:	2f00      	cmp	r7, #0
   1f66c:	f000 80b1 	beq.w	1f7d2 <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   1f670:	3f01      	subs	r7, #1
   1f672:	b2ff      	uxtb	r7, r7
   1f674:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1f676:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f67a:	a901      	add	r1, sp, #4
   1f67c:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1f67e:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f682:	f7ff ff59 	bl	1f538 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1f686:	2f00      	cmp	r7, #0
   1f688:	f040 813c 	bne.w	1f904 <lll_conn_isr_rx+0x2ec>
		radio_isr_set(isr_done, param);
   1f68c:	489e      	ldr	r0, [pc, #632]	; (1f908 <lll_conn_isr_rx+0x2f0>)
   1f68e:	4621      	mov	r1, r4
   1f690:	f000 fb76 	bl	1fd80 <radio_isr_set>
		} else if (!lll->role) {
   1f694:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1f698:	2b00      	cmp	r3, #0
   1f69a:	f280 8104 	bge.w	1f8a6 <lll_conn_isr_rx+0x28e>
	pdu_data_tx->sn = lll->sn;
   1f69e:	9901      	ldr	r1, [sp, #4]
   1f6a0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
	pdu_data_tx->nesn = lll->nesn;
   1f6a4:	780b      	ldrb	r3, [r1, #0]
   1f6a6:	f023 000c 	bic.w	r0, r3, #12
   1f6aa:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1f6ae:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1f6b0:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1f6b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1f6b8:	4303      	orrs	r3, r0
   1f6ba:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1f6bc:	4620      	mov	r0, r4
   1f6be:	f7ff ff0f 	bl	1f4e0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1f6c2:	f000 fc71 	bl	1ffa8 <radio_is_ready>
   1f6c6:	2800      	cmp	r0, #0
   1f6c8:	f040 80d0 	bne.w	1f86c <lll_conn_isr_rx+0x254>
	if (!radio_tmr_aa_restore()) {
   1f6cc:	f000 fec0 	bl	20450 <radio_tmr_aa_restore>
   1f6d0:	2800      	cmp	r0, #0
   1f6d2:	d06b      	beq.n	1f7ac <lll_conn_isr_rx+0x194>
	if (tx_release) {
   1f6d4:	2d00      	cmp	r5, #0
   1f6d6:	d06f      	beq.n	1f7b8 <lll_conn_isr_rx+0x1a0>
		LL_ASSERT(lll->handle != 0xFFFF);
   1f6d8:	89a0      	ldrh	r0, [r4, #12]
   1f6da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f6de:	4298      	cmp	r0, r3
   1f6e0:	f000 80d2 	beq.w	1f888 <lll_conn_isr_rx+0x270>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1f6e4:	4629      	mov	r1, r5
   1f6e6:	f7fc fd85 	bl	1c1f4 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1f6ea:	2f00      	cmp	r7, #0
   1f6ec:	d166      	bne.n	1f7bc <lll_conn_isr_rx+0x1a4>
		ull_rx_sched();
   1f6ee:	f7f9 fbbb 	bl	18e68 <ull_rx_sched>
}
   1f6f2:	b003      	add	sp, #12
   1f6f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (pdu_data_rx->nesn != lll->sn) {
   1f6f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f6fc:	7f32      	ldrb	r2, [r6, #28]
   1f6fe:	f003 0101 	and.w	r1, r3, #1
   1f702:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1f706:	4288      	cmp	r0, r1
   1f708:	f000 8089 	beq.w	1f81e <lll_conn_isr_rx+0x206>
		lll->sn++;
   1f70c:	f081 0101 	eor.w	r1, r1, #1
   1f710:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1f714:	f013 0804 	ands.w	r8, r3, #4
		lll->sn++;
   1f718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (!lll->empty) {
   1f71c:	b2da      	uxtb	r2, r3
   1f71e:	f040 80cf 	bne.w	1f8c0 <lll_conn_isr_rx+0x2a8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1f722:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
   1f726:	aa01      	add	r2, sp, #4
   1f728:	f7f5 fb98 	bl	14e5c <memq_peek>
		if (link) {
   1f72c:	4605      	mov	r5, r0
   1f72e:	2800      	cmp	r0, #0
   1f730:	f000 80dd 	beq.w	1f8ee <lll_conn_isr_rx+0x2d6>
			pdu_data_tx = (void *)(tx->pdu +
   1f734:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   1f736:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
			pdu_data_tx = (void *)(tx->pdu +
   1f73a:	3704      	adds	r7, #4
   1f73c:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   1f740:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1f742:	b152      	cbz	r2, 1f75a <lll_conn_isr_rx+0x142>
				if (lll->enc_tx) {
   1f744:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f748:	06d9      	lsls	r1, r3, #27
   1f74a:	d506      	bpl.n	1f75a <lll_conn_isr_rx+0x142>
					lll->ccm_tx.counter++;
   1f74c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f74e:	3301      	adds	r3, #1
   1f750:	6763      	str	r3, [r4, #116]	; 0x74
   1f752:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   1f754:	f143 0300 	adc.w	r3, r3, #0
   1f758:	67a3      	str	r3, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   1f75a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1f75e:	444a      	add	r2, r9
   1f760:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1f762:	429a      	cmp	r2, r3
   1f764:	f0c0 80ca 	bcc.w	1f8fc <lll_conn_isr_rx+0x2e4>
			} else if (offset == lll->packet_tx_head_len) {
   1f768:	f000 810b 	beq.w	1f982 <lll_conn_isr_rx+0x36a>
				LL_ASSERT(0);
   1f76c:	4a69      	ldr	r2, [pc, #420]	; (1f914 <lll_conn_isr_rx+0x2fc>)
   1f76e:	496a      	ldr	r1, [pc, #424]	; (1f918 <lll_conn_isr_rx+0x300>)
   1f770:	486a      	ldr	r0, [pc, #424]	; (1f91c <lll_conn_isr_rx+0x304>)
   1f772:	f240 33a3 	movw	r3, #931	; 0x3a3
   1f776:	f007 f8f1 	bl	2695c <printk>
   1f77a:	4040      	eors	r0, r0
   1f77c:	f380 8811 	msr	BASEPRI, r0
   1f780:	f04f 0003 	mov.w	r0, #3
   1f784:	df02      	svc	2
	tx_release = NULL;
   1f786:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f788:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1f78c:	2b00      	cmp	r3, #0
   1f78e:	f2c0 80f4 	blt.w	1f97a <lll_conn_isr_rx+0x362>
			    !pdu_data_rx->md) {
   1f792:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f794:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1f796:	bf58      	it	pl
   1f798:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   1f79c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f7a0:	bf5c      	itt	pl
   1f7a2:	f088 0810 	eorpl.w	r8, r8, #16
   1f7a6:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   1f7aa:	e03b      	b.n	1f824 <lll_conn_isr_rx+0x20c>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1f7ac:	f000 fe44 	bl	20438 <radio_tmr_aa_get>
   1f7b0:	f000 fe48 	bl	20444 <radio_tmr_aa_save>
	if (tx_release) {
   1f7b4:	2d00      	cmp	r5, #0
   1f7b6:	d18f      	bne.n	1f6d8 <lll_conn_isr_rx+0xc0>
	if (is_rx_enqueue) {
   1f7b8:	2f00      	cmp	r7, #0
   1f7ba:	d09a      	beq.n	1f6f2 <lll_conn_isr_rx+0xda>
		ull_pdu_rx_alloc();
   1f7bc:	f7f9 fb2e 	bl	18e1c <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1f7c0:	2303      	movs	r3, #3
   1f7c2:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1f7c4:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1f7c6:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1f7c8:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1f7ca:	4631      	mov	r1, r6
   1f7cc:	f7f9 fb3c 	bl	18e48 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   1f7d0:	e78d      	b.n	1f6ee <lll_conn_isr_rx+0xd6>
		crc_expire--;
   1f7d2:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f7d4:	a901      	add	r1, sp, #4
   1f7d6:	4620      	mov	r0, r4
		crc_expire--;
   1f7d8:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f7da:	f7ff fead 	bl	1f538 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1f7de:	2096      	movs	r0, #150	; 0x96
   1f7e0:	f000 fd4a 	bl	20278 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1f7e4:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1f7e8:	f000 0007 	and.w	r0, r0, #7
   1f7ec:	f000 fc18 	bl	20020 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1f7f0:	484b      	ldr	r0, [pc, #300]	; (1f920 <lll_conn_isr_rx+0x308>)
   1f7f2:	4621      	mov	r1, r4
   1f7f4:	f000 fac4 	bl	1fd80 <radio_isr_set>
		radio_tmr_end_capture();
   1f7f8:	f000 fe30 	bl	2045c <radio_tmr_end_capture>
   1f7fc:	e74f      	b.n	1f69e <lll_conn_isr_rx+0x86>
	LL_ASSERT(node_rx);
   1f7fe:	4a45      	ldr	r2, [pc, #276]	; (1f914 <lll_conn_isr_rx+0x2fc>)
   1f800:	4948      	ldr	r1, [pc, #288]	; (1f924 <lll_conn_isr_rx+0x30c>)
   1f802:	4846      	ldr	r0, [pc, #280]	; (1f91c <lll_conn_isr_rx+0x304>)
   1f804:	23f2      	movs	r3, #242	; 0xf2
   1f806:	f007 f8a9 	bl	2695c <printk>
   1f80a:	4040      	eors	r0, r0
   1f80c:	f380 8811 	msr	BASEPRI, r0
   1f810:	f04f 0003 	mov.w	r0, #3
   1f814:	df02      	svc	2
	if (crc_ok) {
   1f816:	2d00      	cmp	r5, #0
   1f818:	f43f af25 	beq.w	1f666 <lll_conn_isr_rx+0x4e>
   1f81c:	e76c      	b.n	1f6f8 <lll_conn_isr_rx+0xe0>
	is_done = 0U;
   1f81e:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1f822:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1f824:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1f828:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1f82c:	428a      	cmp	r2, r1
   1f82e:	f000 8081 	beq.w	1f934 <lll_conn_isr_rx+0x31c>
	is_rx_enqueue = 0U;
   1f832:	2700      	movs	r7, #0
		crc_expire = 0U;
   1f834:	4a36      	ldr	r2, [pc, #216]	; (1f910 <lll_conn_isr_rx+0x2f8>)
   1f836:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   1f838:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   1f83c:	4b3a      	ldr	r3, [pc, #232]	; (1f928 <lll_conn_isr_rx+0x310>)
		crc_expire = 0U;
   1f83e:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f840:	4620      	mov	r0, r4
		crc_valid = 1U;
   1f842:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f844:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1f846:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f848:	f7ff fe76 	bl	1f538 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1f84c:	f1b8 0f00 	cmp.w	r8, #0
   1f850:	f47f af1c 	bne.w	1f68c <lll_conn_isr_rx+0x74>
   1f854:	7f33      	ldrb	r3, [r6, #28]
   1f856:	06d9      	lsls	r1, r3, #27
   1f858:	d4c1      	bmi.n	1f7de <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1f85a:	9b01      	ldr	r3, [sp, #4]
   1f85c:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1f85e:	06d2      	lsls	r2, r2, #27
   1f860:	d4bd      	bmi.n	1f7de <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1f862:	785b      	ldrb	r3, [r3, #1]
   1f864:	2b00      	cmp	r3, #0
   1f866:	f43f af11 	beq.w	1f68c <lll_conn_isr_rx+0x74>
   1f86a:	e7b8      	b.n	1f7de <lll_conn_isr_rx+0x1c6>
	LL_ASSERT(!radio_is_ready());
   1f86c:	4a29      	ldr	r2, [pc, #164]	; (1f914 <lll_conn_isr_rx+0x2fc>)
   1f86e:	492f      	ldr	r1, [pc, #188]	; (1f92c <lll_conn_isr_rx+0x314>)
   1f870:	482a      	ldr	r0, [pc, #168]	; (1f91c <lll_conn_isr_rx+0x304>)
   1f872:	f240 1369 	movw	r3, #361	; 0x169
   1f876:	f007 f871 	bl	2695c <printk>
   1f87a:	4040      	eors	r0, r0
   1f87c:	f380 8811 	msr	BASEPRI, r0
   1f880:	f04f 0003 	mov.w	r0, #3
   1f884:	df02      	svc	2
   1f886:	e721      	b.n	1f6cc <lll_conn_isr_rx+0xb4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1f888:	4a22      	ldr	r2, [pc, #136]	; (1f914 <lll_conn_isr_rx+0x2fc>)
   1f88a:	4929      	ldr	r1, [pc, #164]	; (1f930 <lll_conn_isr_rx+0x318>)
   1f88c:	4823      	ldr	r0, [pc, #140]	; (1f91c <lll_conn_isr_rx+0x304>)
   1f88e:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1f892:	f007 f863 	bl	2695c <printk>
   1f896:	4040      	eors	r0, r0
   1f898:	f380 8811 	msr	BASEPRI, r0
   1f89c:	f04f 0003 	mov.w	r0, #3
   1f8a0:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1f8a2:	89a0      	ldrh	r0, [r4, #12]
   1f8a4:	e71e      	b.n	1f6e4 <lll_conn_isr_rx+0xcc>
			radio_disable();
   1f8a6:	f000 fb5f 	bl	1ff68 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1f8aa:	f000 fb7d 	bl	1ffa8 <radio_is_ready>
   1f8ae:	2800      	cmp	r0, #0
   1f8b0:	d155      	bne.n	1f95e <lll_conn_isr_rx+0x346>
			lll->empty = is_empty_pdu_tx_retry;
   1f8b2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f8b6:	f369 0382 	bfi	r3, r9, #2, #1
   1f8ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			goto lll_conn_isr_rx_exit;
   1f8be:	e705      	b.n	1f6cc <lll_conn_isr_rx+0xb4>
			lll->empty = 0;
   1f8c0:	f36f 0282 	bfc	r2, #2, #1
   1f8c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1f8c8:	f000 fba2 	bl	20010 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f8cc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1f8d0:	2b00      	cmp	r3, #0
   1f8d2:	db0c      	blt.n	1f8ee <lll_conn_isr_rx+0x2d6>
			    !pdu_data_rx->md) {
   1f8d4:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f8d6:	f012 0510 	ands.w	r5, r2, #16
   1f8da:	d109      	bne.n	1f8f0 <lll_conn_isr_rx+0x2d8>
				*is_done = !pdu_data_tx->md;
   1f8dc:	f890 8000 	ldrb.w	r8, [r0]
   1f8e0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f8e4:	f088 0810 	eor.w	r8, r8, #16
   1f8e8:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1f8ec:	e79a      	b.n	1f824 <lll_conn_isr_rx+0x20c>
   1f8ee:	7f32      	ldrb	r2, [r6, #28]
   1f8f0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	is_done = 0U;
   1f8f4:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1f8f8:	4645      	mov	r5, r8
   1f8fa:	e793      	b.n	1f824 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_offset = offset;
   1f8fc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	tx_release = NULL;
   1f900:	2500      	movs	r5, #0
   1f902:	e741      	b.n	1f788 <lll_conn_isr_rx+0x170>
	is_rx_enqueue = 0U;
   1f904:	462f      	mov	r7, r5
   1f906:	e76a      	b.n	1f7de <lll_conn_isr_rx+0x1c6>
   1f908:	0001f289 	.word	0x0001f289
   1f90c:	20004a78 	.word	0x20004a78
   1f910:	20004c0d 	.word	0x20004c0d
   1f914:	00030384 	.word	0x00030384
   1f918:	0002f794 	.word	0x0002f794
   1f91c:	0002f6fc 	.word	0x0002f6fc
   1f920:	0001f429 	.word	0x0001f429
   1f924:	00030340 	.word	0x00030340
   1f928:	20004c0e 	.word	0x20004c0e
   1f92c:	00030348 	.word	0x00030348
   1f930:	000303dc 	.word	0x000303dc
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1f934:	2003      	movs	r0, #3
   1f936:	f7f9 fa53 	bl	18de0 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1f93a:	b168      	cbz	r0, 1f958 <lll_conn_isr_rx+0x340>
		lll->nesn++;
   1f93c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f940:	f083 0302 	eor.w	r3, r3, #2
   1f944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (pdu_data_rx->len != 0) {
   1f948:	7f73      	ldrb	r3, [r6, #29]
   1f94a:	b12b      	cbz	r3, 1f958 <lll_conn_isr_rx+0x340>
			if (lll->enc_rx) {
   1f94c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f950:	0718      	lsls	r0, r3, #28
   1f952:	d424      	bmi.n	1f99e <lll_conn_isr_rx+0x386>
			*is_rx_enqueue = 1U;
   1f954:	2701      	movs	r7, #1
   1f956:	e76d      	b.n	1f834 <lll_conn_isr_rx+0x21c>
   1f958:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f95c:	e769      	b.n	1f832 <lll_conn_isr_rx+0x21a>
			LL_ASSERT(!radio_is_ready());
   1f95e:	4a37      	ldr	r2, [pc, #220]	; (1fa3c <lll_conn_isr_rx+0x424>)
   1f960:	4937      	ldr	r1, [pc, #220]	; (1fa40 <lll_conn_isr_rx+0x428>)
   1f962:	4838      	ldr	r0, [pc, #224]	; (1fa44 <lll_conn_isr_rx+0x42c>)
   1f964:	f44f 7398 	mov.w	r3, #304	; 0x130
   1f968:	f006 fff8 	bl	2695c <printk>
   1f96c:	4040      	eors	r0, r0
   1f96e:	f380 8811 	msr	BASEPRI, r0
   1f972:	f04f 0003 	mov.w	r0, #3
   1f976:	df02      	svc	2
   1f978:	e79b      	b.n	1f8b2 <lll_conn_isr_rx+0x29a>
   1f97a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f97e:	7f32      	ldrb	r2, [r6, #28]
   1f980:	e750      	b.n	1f824 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_len = 0;
   1f982:	2200      	movs	r2, #0
   1f984:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
				memq_dequeue(lll->memq_tx.tail,
   1f988:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1f98a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1f98e:	f7f5 fa6d 	bl	14e6c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1f992:	9b01      	ldr	r3, [sp, #4]
   1f994:	681a      	ldr	r2, [r3, #0]
   1f996:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1f998:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1f99a:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   1f99c:	e6f4      	b.n	1f788 <lll_conn_isr_rx+0x170>
				done = radio_ccm_is_done();
   1f99e:	f000 fdd7 	bl	20550 <radio_ccm_is_done>
				LL_ASSERT(done);
   1f9a2:	2800      	cmp	r0, #0
   1f9a4:	d03b      	beq.n	1fa1e <lll_conn_isr_rx+0x406>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1f9a6:	f000 fdf5 	bl	20594 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1f9aa:	bb30      	cbnz	r0, 1f9fa <lll_conn_isr_rx+0x3e2>
				    lll->ccm_rx.counter == 0 &&
   1f9ac:	f8d4 2053 	ldr.w	r2, [r4, #83]	; 0x53
   1f9b0:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
				if (mic_failure &&
   1f9b4:	4313      	orrs	r3, r2
   1f9b6:	d104      	bne.n	1f9c2 <lll_conn_isr_rx+0x3aa>
				    (pdu_data_rx->ll_id ==
   1f9b8:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1f9ba:	f003 0303 	and.w	r3, r3, #3
   1f9be:	2b03      	cmp	r3, #3
   1f9c0:	d004      	beq.n	1f9cc <lll_conn_isr_rx+0x3b4>
					mic_state = LLL_CONN_MIC_FAIL;
   1f9c2:	4b21      	ldr	r3, [pc, #132]	; (1fa48 <lll_conn_isr_rx+0x430>)
   1f9c4:	2202      	movs	r2, #2
   1f9c6:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1f9c8:	2700      	movs	r7, #0
   1f9ca:	e67f      	b.n	1f6cc <lll_conn_isr_rx+0xb4>
						radio_pkt_scratch_get();
   1f9cc:	f000 fb24 	bl	20018 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1f9d0:	7843      	ldrb	r3, [r0, #1]
   1f9d2:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   1f9d4:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1f9d6:	d8f4      	bhi.n	1f9c2 <lll_conn_isr_rx+0x3aa>
						memcpy(pdu_data_rx,
   1f9d8:	3303      	adds	r3, #3
   1f9da:	b2da      	uxtb	r2, r3
   1f9dc:	f106 001c 	add.w	r0, r6, #28
   1f9e0:	f00a fcbc 	bl	2a35c <memcpy>
						lll->ccm_rx.counter--;
   1f9e4:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1f9e8:	3b01      	subs	r3, #1
   1f9ea:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1f9ee:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1f9f2:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1f9f6:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				lll->ccm_rx.counter++;
   1f9fa:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1f9fe:	3301      	adds	r3, #1
   1fa00:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1fa04:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
						lll->ccm_rx.counter--;
   1fa08:	f104 0253 	add.w	r2, r4, #83	; 0x53
				lll->ccm_rx.counter++;
   1fa0c:	f143 0300 	adc.w	r3, r3, #0
   1fa10:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1fa12:	4b0d      	ldr	r3, [pc, #52]	; (1fa48 <lll_conn_isr_rx+0x430>)
   1fa14:	2701      	movs	r7, #1
   1fa16:	701f      	strb	r7, [r3, #0]
		if (err) {
   1fa18:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1fa1c:	e70a      	b.n	1f834 <lll_conn_isr_rx+0x21c>
				LL_ASSERT(done);
   1fa1e:	4a07      	ldr	r2, [pc, #28]	; (1fa3c <lll_conn_isr_rx+0x424>)
   1fa20:	490a      	ldr	r1, [pc, #40]	; (1fa4c <lll_conn_isr_rx+0x434>)
   1fa22:	4808      	ldr	r0, [pc, #32]	; (1fa44 <lll_conn_isr_rx+0x42c>)
   1fa24:	f240 33be 	movw	r3, #958	; 0x3be
   1fa28:	f006 ff98 	bl	2695c <printk>
   1fa2c:	4040      	eors	r0, r0
   1fa2e:	f380 8811 	msr	BASEPRI, r0
   1fa32:	f04f 0003 	mov.w	r0, #3
   1fa36:	df02      	svc	2
   1fa38:	e7b5      	b.n	1f9a6 <lll_conn_isr_rx+0x38e>
   1fa3a:	bf00      	nop
   1fa3c:	00030384 	.word	0x00030384
   1fa40:	00030348 	.word	0x00030348
   1fa44:	0002f6fc 	.word	0x0002f6fc
   1fa48:	20004c0f 	.word	0x20004c0f
   1fa4c:	000303d4 	.word	0x000303d4

0001fa50 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1fa50:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   1fa52:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1fa54:	89a2      	ldrh	r2, [r4, #12]
   1fa56:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fa5a:	429a      	cmp	r2, r3
{
   1fa5c:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   1fa5e:	f000 8091 	beq.w	1fb84 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1fa62:	4605      	mov	r5, r0
   1fa64:	f7ff fc56 	bl	1f314 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1fa68:	892b      	ldrh	r3, [r5, #8]
   1fa6a:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1fa6c:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1fa6e:	441a      	add	r2, r3
   1fa70:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1fa72:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1fa74:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1fa76:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   1fa78:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   1fa7a:	1c41      	adds	r1, r0, #1
   1fa7c:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1fa7e:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1fa80:	f04f 0100 	mov.w	r1, #0
   1fa84:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1fa86:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   1fa8a:	d45f      	bmi.n	1fb4c <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1fa8c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1fa90:	460b      	mov	r3, r1
   1fa92:	7fa1      	ldrb	r1, [r4, #30]
   1fa94:	9000      	str	r0, [sp, #0]
   1fa96:	f104 001f 	add.w	r0, r4, #31
   1fa9a:	f7fd f955 	bl	1cd48 <lll_chan_sel_1>
   1fa9e:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1faa0:	4620      	mov	r0, r4
   1faa2:	a903      	add	r1, sp, #12
   1faa4:	f7ff fd48 	bl	1f538 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1faa8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   1faac:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1faae:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1fab2:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1fab4:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1fab8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1fabc:	780a      	ldrb	r2, [r1, #0]
   1fabe:	f022 020c 	bic.w	r2, r2, #12
   1fac2:	4313      	orrs	r3, r2
   1fac4:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1fac6:	f000 f99d 	bl	1fe04 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1faca:	2008      	movs	r0, #8
   1facc:	f000 f9ce 	bl	1fe6c <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1fad0:	1d20      	adds	r0, r4, #4
   1fad2:	f000 f9e9 	bl	1fea8 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1fad6:	8923      	ldrh	r3, [r4, #8]
   1fad8:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1fada:	f240 605b 	movw	r0, #1627	; 0x65b
   1fade:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1fae2:	f000 fa7f 	bl	1ffe4 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   1fae6:	4630      	mov	r0, r6
   1fae8:	f7fe fd90 	bl	1e60c <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1faec:	9903      	ldr	r1, [sp, #12]
   1faee:	4620      	mov	r0, r4
   1faf0:	f7ff fcf6 	bl	1f4e0 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1faf4:	4621      	mov	r1, r4
   1faf6:	4828      	ldr	r0, [pc, #160]	; (1fb98 <prepare_cb+0x148>)
   1faf8:	f000 f942 	bl	1fd80 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1fafc:	2096      	movs	r0, #150	; 0x96
   1fafe:	f000 fbbb 	bl	20278 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1fb02:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1fb06:	f000 0007 	and.w	r0, r0, #7
   1fb0a:	f000 fa89 	bl	20020 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1fb0e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1fb10:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1fb12:	4638      	mov	r0, r7
   1fb14:	f7fe fd5c 	bl	1e5d0 <lll_event_offset_get>
   1fb18:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1fb1a:	686a      	ldr	r2, [r5, #4]
   1fb1c:	f106 0109 	add.w	r1, r6, #9
   1fb20:	2001      	movs	r0, #1
   1fb22:	f000 fbb5 	bl	20290 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1fb26:	f000 fc99 	bl	2045c <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1fb2a:	89a1      	ldrh	r1, [r4, #12]
   1fb2c:	3103      	adds	r1, #3
   1fb2e:	4632      	mov	r2, r6
   1fb30:	b2c9      	uxtb	r1, r1
   1fb32:	4638      	mov	r0, r7
   1fb34:	f7fe fd5a 	bl	1e5ec <lll_preempt_calc>
   1fb38:	b180      	cbz	r0, 1fb5c <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1fb3a:	4818      	ldr	r0, [pc, #96]	; (1fb9c <prepare_cb+0x14c>)
   1fb3c:	4621      	mov	r1, r4
   1fb3e:	f000 f91f 	bl	1fd80 <radio_isr_set>
		radio_disable();
   1fb42:	f000 fa11 	bl	1ff68 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1fb46:	2000      	movs	r0, #0
   1fb48:	b005      	add	sp, #20
   1fb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1fb4c:	460a      	mov	r2, r1
   1fb4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fb52:	8be1      	ldrh	r1, [r4, #30]
   1fb54:	f7fd f93c 	bl	1cdd0 <lll_chan_sel_2>
   1fb58:	4606      	mov	r6, r0
   1fb5a:	e7a1      	b.n	1faa0 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   1fb5c:	4620      	mov	r0, r4
   1fb5e:	f7fe fcd1 	bl	1e504 <lll_prepare_done>
		LL_ASSERT(!ret);
   1fb62:	2800      	cmp	r0, #0
   1fb64:	d0ef      	beq.n	1fb46 <prepare_cb+0xf6>
   1fb66:	4a0e      	ldr	r2, [pc, #56]	; (1fba0 <prepare_cb+0x150>)
   1fb68:	490e      	ldr	r1, [pc, #56]	; (1fba4 <prepare_cb+0x154>)
   1fb6a:	480f      	ldr	r0, [pc, #60]	; (1fba8 <prepare_cb+0x158>)
   1fb6c:	23fd      	movs	r3, #253	; 0xfd
   1fb6e:	f006 fef5 	bl	2695c <printk>
   1fb72:	4040      	eors	r0, r0
   1fb74:	f380 8811 	msr	BASEPRI, r0
   1fb78:	f04f 0003 	mov.w	r0, #3
   1fb7c:	df02      	svc	2
}
   1fb7e:	2000      	movs	r0, #0
   1fb80:	b005      	add	sp, #20
   1fb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   1fb84:	4809      	ldr	r0, [pc, #36]	; (1fbac <prepare_cb+0x15c>)
   1fb86:	4621      	mov	r1, r4
   1fb88:	f000 f8fa 	bl	1fd80 <radio_isr_set>
		radio_disable();
   1fb8c:	f000 f9ec 	bl	1ff68 <radio_disable>
}
   1fb90:	2000      	movs	r0, #0
   1fb92:	b005      	add	sp, #20
   1fb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb96:	bf00      	nop
   1fb98:	0001f429 	.word	0x0001f429
   1fb9c:	0001e741 	.word	0x0001e741
   1fba0:	00030408 	.word	0x00030408
   1fba4:	0002fb50 	.word	0x0002fb50
   1fba8:	0002f6fc 	.word	0x0002f6fc
   1fbac:	0001e765 	.word	0x0001e765

0001fbb0 <lll_central_prepare>:
{
   1fbb0:	b510      	push	{r4, lr}
   1fbb2:	b082      	sub	sp, #8
   1fbb4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1fbb6:	f7fe ff25 	bl	1ea04 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1fbba:	2800      	cmp	r0, #0
   1fbbc:	db19      	blt.n	1fbf2 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   1fbbe:	4a13      	ldr	r2, [pc, #76]	; (1fc0c <lll_central_prepare+0x5c>)
   1fbc0:	4913      	ldr	r1, [pc, #76]	; (1fc10 <lll_central_prepare+0x60>)
   1fbc2:	4814      	ldr	r0, [pc, #80]	; (1fc14 <lll_central_prepare+0x64>)
   1fbc4:	9400      	str	r4, [sp, #0]
   1fbc6:	2300      	movs	r3, #0
   1fbc8:	f7f9 fc08 	bl	193dc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1fbcc:	b108      	cbz	r0, 1fbd2 <lll_central_prepare+0x22>
   1fbce:	3077      	adds	r0, #119	; 0x77
   1fbd0:	d101      	bne.n	1fbd6 <lll_central_prepare+0x26>
}
   1fbd2:	b002      	add	sp, #8
   1fbd4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1fbd6:	4a10      	ldr	r2, [pc, #64]	; (1fc18 <lll_central_prepare+0x68>)
   1fbd8:	4910      	ldr	r1, [pc, #64]	; (1fc1c <lll_central_prepare+0x6c>)
   1fbda:	4811      	ldr	r0, [pc, #68]	; (1fc20 <lll_central_prepare+0x70>)
   1fbdc:	2351      	movs	r3, #81	; 0x51
   1fbde:	f006 febd 	bl	2695c <printk>
   1fbe2:	4040      	eors	r0, r0
   1fbe4:	f380 8811 	msr	BASEPRI, r0
   1fbe8:	f04f 0003 	mov.w	r0, #3
   1fbec:	df02      	svc	2
}
   1fbee:	b002      	add	sp, #8
   1fbf0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1fbf2:	4a09      	ldr	r2, [pc, #36]	; (1fc18 <lll_central_prepare+0x68>)
   1fbf4:	490b      	ldr	r1, [pc, #44]	; (1fc24 <lll_central_prepare+0x74>)
   1fbf6:	480a      	ldr	r0, [pc, #40]	; (1fc20 <lll_central_prepare+0x70>)
   1fbf8:	234c      	movs	r3, #76	; 0x4c
   1fbfa:	f006 feaf 	bl	2695c <printk>
   1fbfe:	4040      	eors	r0, r0
   1fc00:	f380 8811 	msr	BASEPRI, r0
   1fc04:	f04f 0003 	mov.w	r0, #3
   1fc08:	df02      	svc	2
   1fc0a:	e7d8      	b.n	1fbbe <lll_central_prepare+0xe>
   1fc0c:	0001fa51 	.word	0x0001fa51
   1fc10:	0001f33d 	.word	0x0001f33d
   1fc14:	0001e5c9 	.word	0x0001e5c9
   1fc18:	00030408 	.word	0x00030408
   1fc1c:	0003035c 	.word	0x0003035c
   1fc20:	0002f6fc 	.word	0x0002f6fc
   1fc24:	00030294 	.word	0x00030294

0001fc28 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1fc28:	4b05      	ldr	r3, [pc, #20]	; (1fc40 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1fc2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1fc2e:	2100      	movs	r1, #0
   1fc30:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1fc34:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1fc38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1fc3c:	4770      	bx	lr
   1fc3e:	bf00      	nop
   1fc40:	4000b000 	.word	0x4000b000

0001fc44 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1fc44:	4b05      	ldr	r3, [pc, #20]	; (1fc5c <cntr_start+0x18>)
   1fc46:	7818      	ldrb	r0, [r3, #0]
   1fc48:	1c42      	adds	r2, r0, #1
   1fc4a:	701a      	strb	r2, [r3, #0]
   1fc4c:	b918      	cbnz	r0, 1fc56 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1fc4e:	4b04      	ldr	r3, [pc, #16]	; (1fc60 <cntr_start+0x1c>)
   1fc50:	2201      	movs	r2, #1
   1fc52:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1fc54:	4770      	bx	lr
		return 1;
   1fc56:	2001      	movs	r0, #1
}
   1fc58:	4770      	bx	lr
   1fc5a:	bf00      	nop
   1fc5c:	20004c10 	.word	0x20004c10
   1fc60:	4000b000 	.word	0x4000b000

0001fc64 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1fc64:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1fc66:	4c0d      	ldr	r4, [pc, #52]	; (1fc9c <cntr_stop+0x38>)
   1fc68:	7820      	ldrb	r0, [r4, #0]
   1fc6a:	b148      	cbz	r0, 1fc80 <cntr_stop+0x1c>

	if (--_refcount) {
   1fc6c:	3801      	subs	r0, #1
   1fc6e:	b2c0      	uxtb	r0, r0
   1fc70:	7020      	strb	r0, [r4, #0]
   1fc72:	b918      	cbnz	r0, 1fc7c <cntr_stop+0x18>
   1fc74:	4b0a      	ldr	r3, [pc, #40]	; (1fca0 <cntr_stop+0x3c>)
   1fc76:	2201      	movs	r2, #1
   1fc78:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1fc7a:	bd10      	pop	{r4, pc}
		return 1;
   1fc7c:	2001      	movs	r0, #1
}
   1fc7e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1fc80:	4a08      	ldr	r2, [pc, #32]	; (1fca4 <cntr_stop+0x40>)
   1fc82:	4909      	ldr	r1, [pc, #36]	; (1fca8 <cntr_stop+0x44>)
   1fc84:	4809      	ldr	r0, [pc, #36]	; (1fcac <cntr_stop+0x48>)
   1fc86:	232d      	movs	r3, #45	; 0x2d
   1fc88:	f006 fe68 	bl	2695c <printk>
   1fc8c:	4040      	eors	r0, r0
   1fc8e:	f380 8811 	msr	BASEPRI, r0
   1fc92:	f04f 0003 	mov.w	r0, #3
   1fc96:	df02      	svc	2
	if (--_refcount) {
   1fc98:	7820      	ldrb	r0, [r4, #0]
   1fc9a:	e7e7      	b.n	1fc6c <cntr_stop+0x8>
   1fc9c:	20004c10 	.word	0x20004c10
   1fca0:	4000b000 	.word	0x4000b000
   1fca4:	0003046c 	.word	0x0003046c
   1fca8:	000304b8 	.word	0x000304b8
   1fcac:	0002f6fc 	.word	0x0002f6fc

0001fcb0 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1fcb0:	4b01      	ldr	r3, [pc, #4]	; (1fcb8 <cntr_cnt_get+0x8>)
   1fcb2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1fcb6:	4770      	bx	lr
   1fcb8:	4000b000 	.word	0x4000b000

0001fcbc <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1fcbc:	4b02      	ldr	r3, [pc, #8]	; (1fcc8 <cntr_cmp_set+0xc>)
   1fcbe:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1fcc2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1fcc6:	4770      	bx	lr
   1fcc8:	4000b000 	.word	0x4000b000

0001fccc <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fccc:	4b12      	ldr	r3, [pc, #72]	; (1fd18 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1fcce:	b430      	push	{r4, r5}
   1fcd0:	2101      	movs	r1, #1
   1fcd2:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1fcd4:	2000      	movs	r0, #0
   1fcd6:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1fcd8:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1fcdc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1fce0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1fce4:	6019      	str	r1, [r3, #0]
}
   1fce6:	e005      	b.n	1fcf4 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1fce8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1fcec:	b932      	cbnz	r2, 1fcfc <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1fcee:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1fcf2:	b11a      	cbz	r2, 1fcfc <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1fcf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1fcf8:	2a00      	cmp	r2, #0
   1fcfa:	d0f5      	beq.n	1fce8 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fcfc:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1fcfe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1fd02:	2a00      	cmp	r2, #0
   1fd04:	d1e7      	bne.n	1fcd6 <do_ecb+0xa>
   1fd06:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1fd0a:	2d00      	cmp	r5, #0
   1fd0c:	d0e3      	beq.n	1fcd6 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1fd0e:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1fd10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fd14:	4770      	bx	lr
   1fd16:	bf00      	nop
   1fd18:	4000e000 	.word	0x4000e000

0001fd1c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1fd1c:	b570      	push	{r4, r5, r6, lr}
   1fd1e:	b08c      	sub	sp, #48	; 0x30
   1fd20:	460e      	mov	r6, r1
   1fd22:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1fd24:	4601      	mov	r1, r0
   1fd26:	2210      	movs	r2, #16
   1fd28:	4668      	mov	r0, sp
{
   1fd2a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1fd2c:	f7f5 f864 	bl	14df8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1fd30:	2210      	movs	r2, #16
   1fd32:	eb0d 0002 	add.w	r0, sp, r2
   1fd36:	4631      	mov	r1, r6
   1fd38:	f7f5 f85e 	bl	14df8 <mem_rcopy>

	do_ecb(&ecb);
   1fd3c:	4668      	mov	r0, sp
   1fd3e:	f7ff ffc5 	bl	1fccc <do_ecb>

	if (cipher_text_le) {
   1fd42:	b125      	cbz	r5, 1fd4e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1fd44:	2210      	movs	r2, #16
   1fd46:	a908      	add	r1, sp, #32
   1fd48:	4628      	mov	r0, r5
   1fd4a:	f7f5 f855 	bl	14df8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1fd4e:	b124      	cbz	r4, 1fd5a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1fd50:	2210      	movs	r2, #16
   1fd52:	a908      	add	r1, sp, #32
   1fd54:	4620      	mov	r0, r4
   1fd56:	f00a fb01 	bl	2a35c <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1fd5a:	b00c      	add	sp, #48	; 0x30
   1fd5c:	bd70      	pop	{r4, r5, r6, pc}
   1fd5e:	bf00      	nop

0001fd60 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1fd60:	4b04      	ldr	r3, [pc, #16]	; (1fd74 <isr_radio+0x14>)
   1fd62:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1fd66:	b123      	cbz	r3, 1fd72 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1fd68:	4a03      	ldr	r2, [pc, #12]	; (1fd78 <isr_radio+0x18>)
   1fd6a:	4b04      	ldr	r3, [pc, #16]	; (1fd7c <isr_radio+0x1c>)
   1fd6c:	6810      	ldr	r0, [r2, #0]
   1fd6e:	681b      	ldr	r3, [r3, #0]
   1fd70:	4718      	bx	r3
}
   1fd72:	4770      	bx	lr
   1fd74:	40001000 	.word	0x40001000
   1fd78:	20003df8 	.word	0x20003df8
   1fd7c:	20003df4 	.word	0x20003df4

0001fd80 <radio_isr_set>:
{
   1fd80:	b538      	push	{r3, r4, r5, lr}
   1fd82:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1fd84:	2001      	movs	r0, #1
{
   1fd86:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1fd88:	f7eb fb48 	bl	b41c <arch_irq_disable>
	isr_cb = cb;
   1fd8c:	4b08      	ldr	r3, [pc, #32]	; (1fdb0 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1fd8e:	4a09      	ldr	r2, [pc, #36]	; (1fdb4 <radio_isr_set+0x34>)
	isr_cb = cb;
   1fd90:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1fd92:	4909      	ldr	r1, [pc, #36]	; (1fdb8 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fd94:	4b09      	ldr	r3, [pc, #36]	; (1fdbc <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1fd96:	6015      	str	r5, [r2, #0]
   1fd98:	2010      	movs	r0, #16
   1fd9a:	2202      	movs	r2, #2
   1fd9c:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1fda0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1fda4:	2001      	movs	r0, #1
}
   1fda6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1fdaa:	f7eb bb27 	b.w	b3fc <arch_irq_enable>
   1fdae:	bf00      	nop
   1fdb0:	20003df4 	.word	0x20003df4
   1fdb4:	20003df8 	.word	0x20003df8
   1fdb8:	40001000 	.word	0x40001000
   1fdbc:	e000e100 	.word	0xe000e100

0001fdc0 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1fdc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fdc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1fdc8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1fdca:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1fdce:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1fdd2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1fdd6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1fdda:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1fdde:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1fde2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1fde6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1fdea:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1fdee:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1fdf2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1fdf6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1fdfa:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1fdfe:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1fe02:	4770      	bx	lr

0001fe04 <radio_reset>:
{
   1fe04:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1fe06:	2001      	movs	r0, #1
   1fe08:	f7eb fb08 	bl	b41c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   1fe0c:	4a0d      	ldr	r2, [pc, #52]	; (1fe44 <radio_reset+0x40>)
   1fe0e:	2100      	movs	r1, #0
   1fe10:	2301      	movs	r3, #1
   1fe12:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1fe16:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1fe1a:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1fe1e:	490a      	ldr	r1, [pc, #40]	; (1fe48 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1fe20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1fe24:	f023 0301 	bic.w	r3, r3, #1
   1fe28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1fe2c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1fe30:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1fe34:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1fe38:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1fe3c:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1fe40:	bd10      	pop	{r4, pc}
   1fe42:	bf00      	nop
   1fe44:	40001000 	.word	0x40001000
   1fe48:	4001f000 	.word	0x4001f000

0001fe4c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1fe4c:	4b06      	ldr	r3, [pc, #24]	; (1fe68 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1fe4e:	2802      	cmp	r0, #2
   1fe50:	bf14      	ite	ne
   1fe52:	2203      	movne	r2, #3
   1fe54:	2204      	moveq	r2, #4
   1fe56:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1fe5a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1fe5e:	f042 0201 	orr.w	r2, r2, #1
   1fe62:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1fe66:	4770      	bx	lr
   1fe68:	40001000 	.word	0x40001000

0001fe6c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1fe6c:	4b01      	ldr	r3, [pc, #4]	; (1fe74 <radio_tx_power_set+0x8>)
   1fe6e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1fe72:	4770      	bx	lr
   1fe74:	40001000 	.word	0x40001000

0001fe78 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1fe78:	4b01      	ldr	r3, [pc, #4]	; (1fe80 <radio_freq_chan_set+0x8>)
   1fe7a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1fe7e:	4770      	bx	lr
   1fe80:	40001000 	.word	0x40001000

0001fe84 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1fe84:	4b07      	ldr	r3, [pc, #28]	; (1fea4 <radio_whiten_iv_set+0x20>)
   1fe86:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1fe8a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1fe8e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1fe92:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1fe96:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1fe9a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1fe9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1fea2:	4770      	bx	lr
   1fea4:	40001000 	.word	0x40001000

0001fea8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1fea8:	4a0a      	ldr	r2, [pc, #40]	; (1fed4 <radio_aa_set+0x2c>)
   1feaa:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1feac:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1feae:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1feb2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1feb6:	78c3      	ldrb	r3, [r0, #3]
   1feb8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1febc:	7843      	ldrb	r3, [r0, #1]
   1febe:	f890 c002 	ldrb.w	ip, [r0, #2]
   1fec2:	7801      	ldrb	r1, [r0, #0]
   1fec4:	041b      	lsls	r3, r3, #16
   1fec6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1feca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1fece:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1fed2:	4770      	bx	lr
   1fed4:	40001000 	.word	0x40001000

0001fed8 <radio_pkt_configure>:
	switch (phy) {
   1fed8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1fedc:	2b02      	cmp	r3, #2
   1fede:	bf14      	ite	ne
   1fee0:	f04f 0c00 	movne.w	ip, #0
   1fee4:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1fee8:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1feea:	bf48      	it	mi
   1feec:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1fef0:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   1fef4:	4b0a      	ldr	r3, [pc, #40]	; (1ff20 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1fef6:	4a0b      	ldr	r2, [pc, #44]	; (1ff24 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1fef8:	ea40 000c 	orr.w	r0, r0, ip
   1fefc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1ff00:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1ff04:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   1ff08:	4002      	ands	r2, r0
   1ff0a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1ff0e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ff12:	4311      	orrs	r1, r2
   1ff14:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1ff18:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   1ff1c:	4770      	bx	lr
   1ff1e:	bf00      	nop
   1ff20:	40001000 	.word	0x40001000
   1ff24:	fef80000 	.word	0xfef80000

0001ff28 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1ff28:	4b01      	ldr	r3, [pc, #4]	; (1ff30 <radio_pkt_rx_set+0x8>)
   1ff2a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1ff2e:	4770      	bx	lr
   1ff30:	40001000 	.word	0x40001000

0001ff34 <radio_pkt_tx_set>:
   1ff34:	4b01      	ldr	r3, [pc, #4]	; (1ff3c <radio_pkt_tx_set+0x8>)
   1ff36:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1ff3a:	4770      	bx	lr
   1ff3c:	40001000 	.word	0x40001000

0001ff40 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   1ff40:	2802      	cmp	r0, #2
}
   1ff42:	bf14      	ite	ne
   1ff44:	2029      	movne	r0, #41	; 0x29
   1ff46:	2028      	moveq	r0, #40	; 0x28
   1ff48:	4770      	bx	lr
   1ff4a:	bf00      	nop

0001ff4c <radio_tx_chain_delay_get>:
}
   1ff4c:	2001      	movs	r0, #1
   1ff4e:	4770      	bx	lr

0001ff50 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1ff50:	2802      	cmp	r0, #2
}
   1ff52:	bf14      	ite	ne
   1ff54:	200a      	movne	r0, #10
   1ff56:	2005      	moveq	r0, #5
   1ff58:	4770      	bx	lr
   1ff5a:	bf00      	nop

0001ff5c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff5c:	4b01      	ldr	r3, [pc, #4]	; (1ff64 <radio_rx_enable+0x8>)
   1ff5e:	2201      	movs	r2, #1
   1ff60:	605a      	str	r2, [r3, #4]
}
   1ff62:	4770      	bx	lr
   1ff64:	40001000 	.word	0x40001000

0001ff68 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1ff68:	4a07      	ldr	r2, [pc, #28]	; (1ff88 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1ff6a:	4908      	ldr	r1, [pc, #32]	; (1ff8c <radio_disable+0x24>)
{
   1ff6c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1ff6e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1ff70:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1ff74:	2000      	movs	r0, #0
   1ff76:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1ff7a:	6053      	str	r3, [r2, #4]
}
   1ff7c:	bc10      	pop	{r4}
   1ff7e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1ff80:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1ff84:	610b      	str	r3, [r1, #16]
}
   1ff86:	4770      	bx	lr
   1ff88:	4001f000 	.word	0x4001f000
   1ff8c:	40001000 	.word	0x40001000

0001ff90 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1ff90:	4b04      	ldr	r3, [pc, #16]	; (1ffa4 <radio_status_reset+0x14>)
   1ff92:	2200      	movs	r2, #0
   1ff94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1ff98:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1ff9c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1ffa0:	4770      	bx	lr
   1ffa2:	bf00      	nop
   1ffa4:	40001000 	.word	0x40001000

0001ffa8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1ffa8:	4b03      	ldr	r3, [pc, #12]	; (1ffb8 <radio_is_ready+0x10>)
   1ffaa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1ffae:	3800      	subs	r0, #0
   1ffb0:	bf18      	it	ne
   1ffb2:	2001      	movne	r0, #1
   1ffb4:	4770      	bx	lr
   1ffb6:	bf00      	nop
   1ffb8:	40001000 	.word	0x40001000

0001ffbc <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   1ffbc:	4b03      	ldr	r3, [pc, #12]	; (1ffcc <radio_is_done+0x10>)
   1ffbe:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1ffc2:	3800      	subs	r0, #0
   1ffc4:	bf18      	it	ne
   1ffc6:	2001      	movne	r0, #1
   1ffc8:	4770      	bx	lr
   1ffca:	bf00      	nop
   1ffcc:	40001000 	.word	0x40001000

0001ffd0 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1ffd0:	4b03      	ldr	r3, [pc, #12]	; (1ffe0 <radio_is_idle+0x10>)
   1ffd2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1ffd6:	fab0 f080 	clz	r0, r0
   1ffda:	0940      	lsrs	r0, r0, #5
   1ffdc:	4770      	bx	lr
   1ffde:	bf00      	nop
   1ffe0:	40001000 	.word	0x40001000

0001ffe4 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1ffe4:	4b04      	ldr	r3, [pc, #16]	; (1fff8 <radio_crc_configure+0x14>)
   1ffe6:	f240 1203 	movw	r2, #259	; 0x103
   1ffea:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1ffee:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1fff2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1fff6:	4770      	bx	lr
   1fff8:	40001000 	.word	0x40001000

0001fffc <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1fffc:	4b03      	ldr	r3, [pc, #12]	; (2000c <radio_crc_is_valid+0x10>)
   1fffe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   20002:	3800      	subs	r0, #0
   20004:	bf18      	it	ne
   20006:	2001      	movne	r0, #1
   20008:	4770      	bx	lr
   2000a:	bf00      	nop
   2000c:	40001000 	.word	0x40001000

00020010 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   20010:	4800      	ldr	r0, [pc, #0]	; (20014 <radio_pkt_empty_get+0x4>)
   20012:	4770      	bx	lr
   20014:	20003cec 	.word	0x20003cec

00020018 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   20018:	4800      	ldr	r0, [pc, #0]	; (2001c <radio_pkt_scratch_get+0x4>)
   2001a:	4770      	bx	lr
   2001c:	20003cf0 	.word	0x20003cf0

00020020 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   20020:	4b1d      	ldr	r3, [pc, #116]	; (20098 <radio_switch_complete_and_rx+0x78>)
{
   20022:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   20024:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   20026:	4d1d      	ldr	r5, [pc, #116]	; (2009c <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   20028:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   2002c:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2002e:	4e1c      	ldr	r6, [pc, #112]	; (200a0 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   20030:	4c1c      	ldr	r4, [pc, #112]	; (200a4 <radio_switch_complete_and_rx+0x84>)
   20032:	4f1d      	ldr	r7, [pc, #116]	; (200a8 <radio_switch_complete_and_rx+0x88>)
   20034:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   20038:	f102 030c 	add.w	r3, r2, #12
   2003c:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   2003e:	00d0      	lsls	r0, r2, #3
   20040:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   20042:	0091      	lsls	r1, r2, #2
   20044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   20048:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2004c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   20050:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20054:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20058:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   2005c:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   20060:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20064:	4811      	ldr	r0, [pc, #68]	; (200ac <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20066:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2006a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   2006e:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   20072:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   20074:	bf8a      	itet	hi
   20076:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   2007a:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   2007c:	3b2d      	subhi	r3, #45	; 0x2d
   2007e:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   20082:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   20084:	4b06      	ldr	r3, [pc, #24]	; (200a0 <radio_switch_complete_and_rx+0x80>)
   20086:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   2008a:	f002 0201 	and.w	r2, r2, #1
   2008e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   20092:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   20094:	bcf0      	pop	{r4, r5, r6, r7}
   20096:	4770      	bx	lr
   20098:	40001000 	.word	0x40001000
   2009c:	20004c11 	.word	0x20004c11
   200a0:	4001f000 	.word	0x4001f000
   200a4:	40009140 	.word	0x40009140
   200a8:	4000110c 	.word	0x4000110c
   200ac:	40001004 	.word	0x40001004

000200b0 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   200b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   200b4:	4e28      	ldr	r6, [pc, #160]	; (20158 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   200b6:	4c29      	ldr	r4, [pc, #164]	; (2015c <radio_switch_complete_and_tx+0xac>)
   200b8:	4f29      	ldr	r7, [pc, #164]	; (20160 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   200ba:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 20164 <radio_switch_complete_and_tx+0xb4>
   200be:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 20168 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   200c2:	2303      	movs	r3, #3
   200c4:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   200c8:	7821      	ldrb	r1, [r4, #0]
   200ca:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   200ce:	f101 030c 	add.w	r3, r1, #12
   200d2:	b2db      	uxtb	r3, r3
   200d4:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   200d6:	00cd      	lsls	r5, r1, #3
   200d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   200dc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   200e0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   200e4:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   200e8:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   200ec:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   200f0:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   200f4:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   200f8:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   200fc:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   20100:	2a02      	cmp	r2, #2
   20102:	bf08      	it	eq
   20104:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   20106:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   2010a:	f242 42b8 	movw	r2, #9400	; 0x24b8
   2010e:	f241 3588 	movw	r5, #5000	; 0x1388
   20112:	2802      	cmp	r0, #2
   20114:	bf08      	it	eq
   20116:	462a      	moveq	r2, r5
   20118:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   2011c:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   20120:	4413      	add	r3, r2
   20122:	4a12      	ldr	r2, [pc, #72]	; (2016c <radio_switch_complete_and_tx+0xbc>)
   20124:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   20128:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   2012c:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   20130:	bf85      	ittet	hi
   20132:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   20134:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   20138:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   2013a:	1a1b      	subhi	r3, r3, r0
   2013c:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   20140:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   20142:	4b08      	ldr	r3, [pc, #32]	; (20164 <radio_switch_complete_and_tx+0xb4>)
   20144:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   20148:	f001 0101 	and.w	r1, r1, #1
   2014c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   20150:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   20152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20156:	bf00      	nop
   20158:	40001000 	.word	0x40001000
   2015c:	20004c11 	.word	0x20004c11
   20160:	40009140 	.word	0x40009140
   20164:	4001f000 	.word	0x4001f000
   20168:	4000110c 	.word	0x4000110c
   2016c:	10624dd3 	.word	0x10624dd3

00020170 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   20170:	4904      	ldr	r1, [pc, #16]	; (20184 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   20172:	4b05      	ldr	r3, [pc, #20]	; (20188 <radio_switch_complete_and_disable+0x18>)
   20174:	2003      	movs	r0, #3
   20176:	f44f 6210 	mov.w	r2, #2304	; 0x900
   2017a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   2017e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   20182:	4770      	bx	lr
   20184:	40001000 	.word	0x40001000
   20188:	4001f000 	.word	0x4001f000

0002018c <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   2018c:	2000      	movs	r0, #0
   2018e:	4770      	bx	lr

00020190 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   20190:	4a03      	ldr	r2, [pc, #12]	; (201a0 <radio_rssi_measure+0x10>)
   20192:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   20196:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   2019a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   2019e:	4770      	bx	lr
   201a0:	40001000 	.word	0x40001000

000201a4 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   201a4:	4b01      	ldr	r3, [pc, #4]	; (201ac <radio_rssi_get+0x8>)
   201a6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   201aa:	4770      	bx	lr
   201ac:	40001000 	.word	0x40001000

000201b0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   201b0:	4b02      	ldr	r3, [pc, #8]	; (201bc <radio_rssi_status_reset+0xc>)
   201b2:	2200      	movs	r2, #0
   201b4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   201b8:	4770      	bx	lr
   201ba:	bf00      	nop
   201bc:	40001000 	.word	0x40001000

000201c0 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   201c0:	4b03      	ldr	r3, [pc, #12]	; (201d0 <radio_rssi_is_ready+0x10>)
   201c2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   201c6:	3800      	subs	r0, #0
   201c8:	bf18      	it	ne
   201ca:	2001      	movne	r0, #1
   201cc:	4770      	bx	lr
   201ce:	bf00      	nop
   201d0:	40001000 	.word	0x40001000

000201d4 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   201d4:	b410      	push	{r4}
   201d6:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   201da:	ea4f 038c 	mov.w	r3, ip, lsl #2
   201de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   201e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   201e6:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   201e8:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   201ec:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   201f0:	8894      	ldrh	r4, [r2, #4]
   201f2:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   201f6:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   201fa:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   201fe:	d1ec      	bne.n	201da <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   20200:	4b03      	ldr	r3, [pc, #12]	; (20210 <radio_filter_configure+0x3c>)
}
   20202:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   20204:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   20208:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   2020c:	4770      	bx	lr
   2020e:	bf00      	nop
   20210:	40001000 	.word	0x40001000

00020214 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   20214:	4a03      	ldr	r2, [pc, #12]	; (20224 <radio_filter_disable+0x10>)
   20216:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   2021a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2021e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   20222:	4770      	bx	lr
   20224:	40001000 	.word	0x40001000

00020228 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   20228:	4b02      	ldr	r3, [pc, #8]	; (20234 <radio_filter_status_reset+0xc>)
   2022a:	2200      	movs	r2, #0
   2022c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   20230:	4770      	bx	lr
   20232:	bf00      	nop
   20234:	40001000 	.word	0x40001000

00020238 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   20238:	4b03      	ldr	r3, [pc, #12]	; (20248 <radio_filter_has_match+0x10>)
   2023a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   2023e:	3800      	subs	r0, #0
   20240:	bf18      	it	ne
   20242:	2001      	movne	r0, #1
   20244:	4770      	bx	lr
   20246:	bf00      	nop
   20248:	40001000 	.word	0x40001000

0002024c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   2024c:	4b01      	ldr	r3, [pc, #4]	; (20254 <radio_filter_match_get+0x8>)
   2024e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   20252:	4770      	bx	lr
   20254:	40001000 	.word	0x40001000

00020258 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   20258:	4904      	ldr	r1, [pc, #16]	; (2026c <radio_tmr_status_reset+0x14>)
   2025a:	4b05      	ldr	r3, [pc, #20]	; (20270 <radio_tmr_status_reset+0x18>)
   2025c:	4a05      	ldr	r2, [pc, #20]	; (20274 <radio_tmr_status_reset+0x1c>)
   2025e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   20262:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   20266:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   2026a:	4770      	bx	lr
   2026c:	4000b000 	.word	0x4000b000
   20270:	4001f000 	.word	0x4001f000
   20274:	0e7000c0 	.word	0x0e7000c0

00020278 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   20278:	4b03      	ldr	r3, [pc, #12]	; (20288 <radio_tmr_tifs_set+0x10>)
   2027a:	4a04      	ldr	r2, [pc, #16]	; (2028c <radio_tmr_tifs_set+0x14>)
   2027c:	781b      	ldrb	r3, [r3, #0]
   2027e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   20282:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   20286:	4770      	bx	lr
   20288:	20004c11 	.word	0x20004c11
   2028c:	40009000 	.word	0x40009000

00020290 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   20290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   20294:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   20298:	4d31      	ldr	r5, [pc, #196]	; (20360 <radio_tmr_start+0xd0>)
   2029a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   2029e:	42ab      	cmp	r3, r5
{
   202a0:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   202a2:	d906      	bls.n	202b2 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   202a4:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   202a8:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   202ac:	3901      	subs	r1, #1
		remainder += 30517578UL;
   202ae:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   202b2:	4b2c      	ldr	r3, [pc, #176]	; (20364 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   202b4:	482c      	ldr	r0, [pc, #176]	; (20368 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   202b6:	4d2d      	ldr	r5, [pc, #180]	; (2036c <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   202b8:	4e2d      	ldr	r6, [pc, #180]	; (20370 <radio_tmr_start+0xe0>)
   202ba:	2701      	movs	r7, #1
   202bc:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   202be:	2700      	movs	r7, #0
   202c0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   202c4:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   202c8:	2704      	movs	r7, #4
   202ca:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   202ce:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   202d0:	2702      	movs	r7, #2
   202d2:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   202d6:	4a27      	ldr	r2, [pc, #156]	; (20374 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   202d8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   202dc:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   202e0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   202e4:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   202e8:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   202ea:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   202ee:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   202f2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   202f6:	bb64      	cbnz	r4, 20352 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   202f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   202fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   20300:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   20304:	4b1b      	ldr	r3, [pc, #108]	; (20374 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20306:	4a1c      	ldr	r2, [pc, #112]	; (20378 <radio_tmr_start+0xe8>)
   20308:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   2030c:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   2030e:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20310:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2037c <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20314:	f8df e068 	ldr.w	lr, [pc, #104]	; 20380 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20318:	f8df c068 	ldr.w	ip, [pc, #104]	; 20384 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2031c:	4f1a      	ldr	r7, [pc, #104]	; (20388 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2031e:	4e1b      	ldr	r6, [pc, #108]	; (2038c <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20320:	4d1b      	ldr	r5, [pc, #108]	; (20390 <radio_tmr_start+0x100>)
   20322:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   20324:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   20328:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   2032c:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   20330:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   20334:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20336:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2033a:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2033e:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20342:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20346:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2034a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   2034e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   20352:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   20356:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   2035a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   2035e:	e7d1      	b.n	20304 <radio_tmr_start+0x74>
   20360:	7ff0bdbf 	.word	0x7ff0bdbf
   20364:	40008000 	.word	0x40008000
   20368:	431bde83 	.word	0x431bde83
   2036c:	4000b000 	.word	0x4000b000
   20370:	4000b148 	.word	0x4000b148
   20374:	4001f000 	.word	0x4001f000
   20378:	40009000 	.word	0x40009000
   2037c:	4000110c 	.word	0x4000110c
   20380:	4000900c 	.word	0x4000900c
   20384:	40009140 	.word	0x40009140
   20388:	4001f004 	.word	0x4001f004
   2038c:	40009144 	.word	0x40009144
   20390:	4001f00c 	.word	0x4001f00c

00020394 <radio_tmr_start_tick>:
   20394:	4a15      	ldr	r2, [pc, #84]	; (203ec <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   20396:	b430      	push	{r4, r5}
   20398:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   2039a:	4c15      	ldr	r4, [pc, #84]	; (203f0 <radio_tmr_start_tick+0x5c>)
   2039c:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   2039e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   203a2:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   203a4:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   203a8:	4b12      	ldr	r3, [pc, #72]	; (203f4 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   203aa:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   203ae:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   203b2:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   203b4:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   203b8:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   203bc:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   203c0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   203c4:	b158      	cbz	r0, 203de <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   203c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   203ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   203ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   203d2:	4a08      	ldr	r2, [pc, #32]	; (203f4 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   203d4:	2001      	movs	r0, #1
   203d6:	bc30      	pop	{r4, r5}
   203d8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   203dc:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   203de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   203e2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   203e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   203ea:	e7f2      	b.n	203d2 <radio_tmr_start_tick+0x3e>
   203ec:	40008000 	.word	0x40008000
   203f0:	4000b000 	.word	0x4000b000
   203f4:	4001f000 	.word	0x4001f000

000203f8 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   203f8:	4b01      	ldr	r3, [pc, #4]	; (20400 <radio_tmr_start_get+0x8>)
   203fa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   203fe:	4770      	bx	lr
   20400:	4000b000 	.word	0x4000b000

00020404 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20404:	4903      	ldr	r1, [pc, #12]	; (20414 <radio_tmr_stop+0x10>)
   20406:	4a04      	ldr	r2, [pc, #16]	; (20418 <radio_tmr_stop+0x14>)
   20408:	2301      	movs	r3, #1
   2040a:	604b      	str	r3, [r1, #4]
   2040c:	610b      	str	r3, [r1, #16]
   2040e:	6053      	str	r3, [r2, #4]
   20410:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   20412:	4770      	bx	lr
   20414:	40008000 	.word	0x40008000
   20418:	40009000 	.word	0x40009000

0002041c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   2041c:	4904      	ldr	r1, [pc, #16]	; (20430 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   2041e:	4b05      	ldr	r3, [pc, #20]	; (20434 <radio_tmr_hcto_configure+0x18>)
   20420:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   20424:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   20428:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   2042c:	4770      	bx	lr
   2042e:	bf00      	nop
   20430:	40008000 	.word	0x40008000
   20434:	4001f000 	.word	0x4001f000

00020438 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   20438:	4b01      	ldr	r3, [pc, #4]	; (20440 <radio_tmr_aa_get+0x8>)
   2043a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   2043e:	4770      	bx	lr
   20440:	40008000 	.word	0x40008000

00020444 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   20444:	4b01      	ldr	r3, [pc, #4]	; (2044c <radio_tmr_aa_save+0x8>)
   20446:	6018      	str	r0, [r3, #0]
}
   20448:	4770      	bx	lr
   2044a:	bf00      	nop
   2044c:	20003dfc 	.word	0x20003dfc

00020450 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   20450:	4b01      	ldr	r3, [pc, #4]	; (20458 <radio_tmr_aa_restore+0x8>)
}
   20452:	6818      	ldr	r0, [r3, #0]
   20454:	4770      	bx	lr
   20456:	bf00      	nop
   20458:	20003dfc 	.word	0x20003dfc

0002045c <radio_tmr_end_capture>:
   2045c:	4b02      	ldr	r3, [pc, #8]	; (20468 <radio_tmr_end_capture+0xc>)
   2045e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   20462:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   20466:	4770      	bx	lr
   20468:	4001f000 	.word	0x4001f000

0002046c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   2046c:	4b01      	ldr	r3, [pc, #4]	; (20474 <radio_tmr_end_get+0x8>)
   2046e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   20472:	4770      	bx	lr
   20474:	40008000 	.word	0x40008000

00020478 <radio_tmr_tifs_base_get>:
   20478:	4b01      	ldr	r3, [pc, #4]	; (20480 <radio_tmr_tifs_base_get+0x8>)
   2047a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   2047e:	4770      	bx	lr
   20480:	40008000 	.word	0x40008000

00020484 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   20484:	4b17      	ldr	r3, [pc, #92]	; (204e4 <radio_ccm_rx_pkt_set+0x60>)
{
   20486:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   20488:	2400      	movs	r4, #0
{
   2048a:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2048c:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   2048e:	4816      	ldr	r0, [pc, #88]	; (204e8 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   20490:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   20494:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   20498:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   2049c:	4e13      	ldr	r6, [pc, #76]	; (204ec <radio_ccm_rx_pkt_set+0x68>)
   2049e:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   204a0:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   204a4:	4812      	ldr	r0, [pc, #72]	; (204f0 <radio_ccm_rx_pkt_set+0x6c>)
   204a6:	2902      	cmp	r1, #2
   204a8:	bf08      	it	eq
   204aa:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   204ac:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   204b0:	4810      	ldr	r0, [pc, #64]	; (204f4 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   204b2:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   204b6:	4910      	ldr	r1, [pc, #64]	; (204f8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   204b8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   204bc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   204c0:	4a0e      	ldr	r2, [pc, #56]	; (204fc <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   204c2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   204c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   204ca:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   204ce:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   204d2:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   204d6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   204da:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   204dc:	bc70      	pop	{r4, r5, r6}
   204de:	601a      	str	r2, [r3, #0]
   204e0:	4770      	bx	lr
   204e2:	bf00      	nop
   204e4:	4000f000 	.word	0x4000f000
   204e8:	40001000 	.word	0x40001000
   204ec:	01010001 	.word	0x01010001
   204f0:	01000001 	.word	0x01000001
   204f4:	20003cf0 	.word	0x20003cf0
   204f8:	20003be0 	.word	0x20003be0
   204fc:	4001f000 	.word	0x4001f000

00020500 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   20500:	4b0f      	ldr	r3, [pc, #60]	; (20540 <radio_ccm_tx_pkt_set+0x40>)
{
   20502:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   20504:	2200      	movs	r2, #0
{
   20506:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   20508:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2050a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2050e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   20512:	480c      	ldr	r0, [pc, #48]	; (20544 <radio_ccm_tx_pkt_set+0x44>)
   20514:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   20518:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   2051c:	480a      	ldr	r0, [pc, #40]	; (20548 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   2051e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   20522:	4c0a      	ldr	r4, [pc, #40]	; (2054c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   20524:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   20528:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2052a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   2052e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   20532:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   20534:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   20538:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2053c:	6019      	str	r1, [r3, #0]
}
   2053e:	4770      	bx	lr
   20540:	4000f000 	.word	0x4000f000
   20544:	01010000 	.word	0x01010000
   20548:	20003cf0 	.word	0x20003cf0
   2054c:	20003be0 	.word	0x20003be0

00020550 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   20550:	4a0e      	ldr	r2, [pc, #56]	; (2058c <radio_ccm_is_done+0x3c>)
   20552:	2302      	movs	r3, #2
   20554:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   20558:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   2055c:	b933      	cbnz	r3, 2056c <radio_ccm_is_done+0x1c>
		__WFE();
   2055e:	bf20      	wfe
		__SEV();
   20560:	bf40      	sev
		__WFE();
   20562:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   20564:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   20568:	2b00      	cmp	r3, #0
   2056a:	d0f8      	beq.n	2055e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2056c:	4b07      	ldr	r3, [pc, #28]	; (2058c <radio_ccm_is_done+0x3c>)
   2056e:	4a08      	ldr	r2, [pc, #32]	; (20590 <radio_ccm_is_done+0x40>)
   20570:	2002      	movs	r0, #2
   20572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20576:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2057a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   2057e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   20582:	fab0 f080 	clz	r0, r0
   20586:	0940      	lsrs	r0, r0, #5
   20588:	4770      	bx	lr
   2058a:	bf00      	nop
   2058c:	4000f000 	.word	0x4000f000
   20590:	e000e100 	.word	0xe000e100

00020594 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   20594:	4b03      	ldr	r3, [pc, #12]	; (205a4 <radio_ccm_mic_is_valid+0x10>)
   20596:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   2059a:	3800      	subs	r0, #0
   2059c:	bf18      	it	ne
   2059e:	2001      	movne	r0, #1
   205a0:	4770      	bx	lr
   205a2:	bf00      	nop
   205a4:	4000f000 	.word	0x4000f000

000205a8 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   205a8:	4a15      	ldr	r2, [pc, #84]	; (20600 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   205aa:	4b16      	ldr	r3, [pc, #88]	; (20604 <radio_ar_configure+0x5c>)
{
   205ac:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   205ae:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   205b2:	4e15      	ldr	r6, [pc, #84]	; (20608 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   205b4:	2703      	movs	r7, #3
   205b6:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   205ba:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   205bc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   205c0:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   205c2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   205c6:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   205c8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   205cc:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   205d0:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   205d4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   205d8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   205dc:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   205e0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   205e4:	4909      	ldr	r1, [pc, #36]	; (2060c <radio_ar_configure+0x64>)
   205e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   205ea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   205ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   205f2:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   205f6:	bcf0      	pop	{r4, r5, r6, r7}
   205f8:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   205fc:	4770      	bx	lr
   205fe:	bf00      	nop
   20600:	40001000 	.word	0x40001000
   20604:	4000f000 	.word	0x4000f000
   20608:	20003bdc 	.word	0x20003bdc
   2060c:	4001f000 	.word	0x4001f000

00020610 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   20610:	4b01      	ldr	r3, [pc, #4]	; (20618 <radio_ar_match_get+0x8>)
   20612:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   20616:	4770      	bx	lr
   20618:	4000f000 	.word	0x4000f000

0002061c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   2061c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2061e:	4807      	ldr	r0, [pc, #28]	; (2063c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   20620:	4c07      	ldr	r4, [pc, #28]	; (20640 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   20622:	4a08      	ldr	r2, [pc, #32]	; (20644 <radio_ar_status_reset+0x28>)
   20624:	2300      	movs	r3, #0
   20626:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2062a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2062e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   20632:	bc10      	pop	{r4}
   20634:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   20638:	4770      	bx	lr
   2063a:	bf00      	nop
   2063c:	4000f000 	.word	0x4000f000
   20640:	40001000 	.word	0x40001000
   20644:	4001f000 	.word	0x4001f000

00020648 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   20648:	4b08      	ldr	r3, [pc, #32]	; (2066c <radio_ar_has_match+0x24>)
   2064a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   2064e:	b160      	cbz	r0, 2066a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   20650:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   20654:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   20658:	b138      	cbz	r0, 2066a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   2065a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   2065e:	b120      	cbz	r0, 2066a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   20660:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   20664:	fab0 f080 	clz	r0, r0
   20668:	0940      	lsrs	r0, r0, #5
}
   2066a:	4770      	bx	lr
   2066c:	40001000 	.word	0x40001000

00020670 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   20670:	2902      	cmp	r1, #2
{
   20672:	b510      	push	{r4, lr}
   20674:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   20676:	d00b      	beq.n	20690 <mayfly_enable_cb+0x20>
   20678:	4a0a      	ldr	r2, [pc, #40]	; (206a4 <mayfly_enable_cb+0x34>)
   2067a:	490b      	ldr	r1, [pc, #44]	; (206a8 <mayfly_enable_cb+0x38>)
   2067c:	480b      	ldr	r0, [pc, #44]	; (206ac <mayfly_enable_cb+0x3c>)
   2067e:	231e      	movs	r3, #30
   20680:	f006 f96c 	bl	2695c <printk>
   20684:	4040      	eors	r0, r0
   20686:	f380 8811 	msr	BASEPRI, r0
   2068a:	f04f 0003 	mov.w	r0, #3
   2068e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   20690:	200b      	movs	r0, #11
	if (enable) {
   20692:	b11c      	cbz	r4, 2069c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   20694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   20698:	f7ea beb0 	b.w	b3fc <arch_irq_enable>
}
   2069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   206a0:	f7ea bebc 	b.w	b41c <arch_irq_disable>
   206a4:	000304e8 	.word	0x000304e8
   206a8:	00030538 	.word	0x00030538
   206ac:	0002f6fc 	.word	0x0002f6fc

000206b0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   206b0:	b129      	cbz	r1, 206be <mayfly_is_enabled+0xe>
   206b2:	3901      	subs	r1, #1
   206b4:	2901      	cmp	r1, #1
   206b6:	d805      	bhi.n	206c4 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   206b8:	200b      	movs	r0, #11
   206ba:	f7ea bec3 	b.w	b444 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   206be:	2018      	movs	r0, #24
   206c0:	f7ea bec0 	b.w	b444 <arch_irq_is_enabled>
{
   206c4:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   206c6:	4a07      	ldr	r2, [pc, #28]	; (206e4 <mayfly_is_enabled+0x34>)
   206c8:	4907      	ldr	r1, [pc, #28]	; (206e8 <mayfly_is_enabled+0x38>)
   206ca:	4808      	ldr	r0, [pc, #32]	; (206ec <mayfly_is_enabled+0x3c>)
   206cc:	2336      	movs	r3, #54	; 0x36
   206ce:	f006 f945 	bl	2695c <printk>
   206d2:	4040      	eors	r0, r0
   206d4:	f380 8811 	msr	BASEPRI, r0
   206d8:	f04f 0003 	mov.w	r0, #3
   206dc:	df02      	svc	2
		break;
	}

	return 0;
}
   206de:	2000      	movs	r0, #0
   206e0:	bd08      	pop	{r3, pc}
   206e2:	bf00      	nop
   206e4:	000304e8 	.word	0x000304e8
   206e8:	0002f794 	.word	0x0002f794
   206ec:	0002f6fc 	.word	0x0002f6fc

000206f0 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   206f0:	4288      	cmp	r0, r1
   206f2:	d00b      	beq.n	2070c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   206f4:	2801      	cmp	r0, #1
   206f6:	d003      	beq.n	20700 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   206f8:	2802      	cmp	r0, #2
   206fa:	d009      	beq.n	20710 <mayfly_prio_is_equal+0x20>
   206fc:	2000      	movs	r0, #0
#endif
	       0;
}
   206fe:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   20700:	f1a1 0002 	sub.w	r0, r1, #2
   20704:	fab0 f080 	clz	r0, r0
   20708:	0940      	lsrs	r0, r0, #5
   2070a:	4770      	bx	lr
   2070c:	2001      	movs	r0, #1
   2070e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   20710:	f1a1 0001 	sub.w	r0, r1, #1
   20714:	fab0 f080 	clz	r0, r0
   20718:	0940      	lsrs	r0, r0, #5
   2071a:	4770      	bx	lr

0002071c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   2071c:	2901      	cmp	r1, #1
{
   2071e:	b508      	push	{r3, lr}
	switch (callee_id) {
   20720:	d00f      	beq.n	20742 <mayfly_pend+0x26>
   20722:	2902      	cmp	r1, #2
   20724:	d00d      	beq.n	20742 <mayfly_pend+0x26>
   20726:	b191      	cbz	r1, 2074e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   20728:	4a0c      	ldr	r2, [pc, #48]	; (2075c <mayfly_pend+0x40>)
   2072a:	490d      	ldr	r1, [pc, #52]	; (20760 <mayfly_pend+0x44>)
   2072c:	480d      	ldr	r0, [pc, #52]	; (20764 <mayfly_pend+0x48>)
   2072e:	2367      	movs	r3, #103	; 0x67
   20730:	f006 f914 	bl	2695c <printk>
   20734:	4040      	eors	r0, r0
   20736:	f380 8811 	msr	BASEPRI, r0
   2073a:	f04f 0003 	mov.w	r0, #3
   2073e:	df02      	svc	2
		break;
	}
}
   20740:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20742:	4b09      	ldr	r3, [pc, #36]	; (20768 <mayfly_pend+0x4c>)
   20744:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20748:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2074c:	bd08      	pop	{r3, pc}
   2074e:	4b06      	ldr	r3, [pc, #24]	; (20768 <mayfly_pend+0x4c>)
   20750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   20754:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20758:	bd08      	pop	{r3, pc}
   2075a:	bf00      	nop
   2075c:	000304e8 	.word	0x000304e8
   20760:	0002f794 	.word	0x0002f794
   20764:	0002f6fc 	.word	0x0002f6fc
   20768:	e000e100 	.word	0xe000e100

0002076c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2076c:	2803      	cmp	r0, #3
{
   2076e:	b510      	push	{r4, lr}
   20770:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   20772:	d804      	bhi.n	2077e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   20774:	4b11      	ldr	r3, [pc, #68]	; (207bc <hal_ticker_instance0_caller_id_get+0x50>)
   20776:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   20778:	b18c      	cbz	r4, 2079e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   2077a:	4620      	mov	r0, r4
   2077c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2077e:	4a10      	ldr	r2, [pc, #64]	; (207c0 <hal_ticker_instance0_caller_id_get+0x54>)
   20780:	4910      	ldr	r1, [pc, #64]	; (207c4 <hal_ticker_instance0_caller_id_get+0x58>)
   20782:	4811      	ldr	r0, [pc, #68]	; (207c8 <hal_ticker_instance0_caller_id_get+0x5c>)
   20784:	232b      	movs	r3, #43	; 0x2b
   20786:	f006 f8e9 	bl	2695c <printk>
   2078a:	4040      	eors	r0, r0
   2078c:	f380 8811 	msr	BASEPRI, r0
   20790:	f04f 0003 	mov.w	r0, #3
   20794:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   20796:	4b09      	ldr	r3, [pc, #36]	; (207bc <hal_ticker_instance0_caller_id_get+0x50>)
   20798:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   2079a:	2c00      	cmp	r4, #0
   2079c:	d1ed      	bne.n	2077a <hal_ticker_instance0_caller_id_get+0xe>
   2079e:	4a08      	ldr	r2, [pc, #32]	; (207c0 <hal_ticker_instance0_caller_id_get+0x54>)
   207a0:	490a      	ldr	r1, [pc, #40]	; (207cc <hal_ticker_instance0_caller_id_get+0x60>)
   207a2:	4809      	ldr	r0, [pc, #36]	; (207c8 <hal_ticker_instance0_caller_id_get+0x5c>)
   207a4:	232e      	movs	r3, #46	; 0x2e
   207a6:	f006 f8d9 	bl	2695c <printk>
   207aa:	4040      	eors	r0, r0
   207ac:	f380 8811 	msr	BASEPRI, r0
   207b0:	f04f 0003 	mov.w	r0, #3
   207b4:	df02      	svc	2
}
   207b6:	4620      	mov	r0, r4
   207b8:	bd10      	pop	{r4, pc}
   207ba:	bf00      	nop
   207bc:	000305f0 	.word	0x000305f0
   207c0:	0003055c 	.word	0x0003055c
   207c4:	000305ac 	.word	0x000305ac
   207c8:	0002f6fc 	.word	0x0002f6fc
   207cc:	000305cc 	.word	0x000305cc

000207d0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   207d0:	3801      	subs	r0, #1
{
   207d2:	b510      	push	{r4, lr}
   207d4:	461c      	mov	r4, r3
	switch (caller_id) {
   207d6:	2804      	cmp	r0, #4
   207d8:	f200 8082 	bhi.w	208e0 <hal_ticker_instance0_sched+0x110>
   207dc:	e8df f000 	tbb	[pc, r0]
   207e0:	3f302112 	.word	0x3f302112
   207e4:	03          	.byte	0x03
   207e5:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   207e6:	2904      	cmp	r1, #4
   207e8:	d04a      	beq.n	20880 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   207ea:	4a44      	ldr	r2, [pc, #272]	; (208fc <hal_ticker_instance0_sched+0x12c>)
   207ec:	4944      	ldr	r1, [pc, #272]	; (20900 <hal_ticker_instance0_sched+0x130>)
   207ee:	4845      	ldr	r0, [pc, #276]	; (20904 <hal_ticker_instance0_sched+0x134>)
   207f0:	23ba      	movs	r3, #186	; 0xba
   207f2:	f006 f8b3 	bl	2695c <printk>
   207f6:	4040      	eors	r0, r0
   207f8:	f380 8811 	msr	BASEPRI, r0
   207fc:	f04f 0003 	mov.w	r0, #3
   20800:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   20802:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   20804:	2904      	cmp	r1, #4
   20806:	d043      	beq.n	20890 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   20808:	4a3c      	ldr	r2, [pc, #240]	; (208fc <hal_ticker_instance0_sched+0x12c>)
   2080a:	493d      	ldr	r1, [pc, #244]	; (20900 <hal_ticker_instance0_sched+0x130>)
   2080c:	483d      	ldr	r0, [pc, #244]	; (20904 <hal_ticker_instance0_sched+0x134>)
   2080e:	234e      	movs	r3, #78	; 0x4e
   20810:	f006 f8a4 	bl	2695c <printk>
   20814:	4040      	eors	r0, r0
   20816:	f380 8811 	msr	BASEPRI, r0
   2081a:	f04f 0003 	mov.w	r0, #3
   2081e:	df02      	svc	2
}
   20820:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   20822:	2903      	cmp	r1, #3
   20824:	d03c      	beq.n	208a0 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   20826:	4a35      	ldr	r2, [pc, #212]	; (208fc <hal_ticker_instance0_sched+0x12c>)
   20828:	4935      	ldr	r1, [pc, #212]	; (20900 <hal_ticker_instance0_sched+0x130>)
   2082a:	4836      	ldr	r0, [pc, #216]	; (20904 <hal_ticker_instance0_sched+0x134>)
   2082c:	2365      	movs	r3, #101	; 0x65
   2082e:	f006 f895 	bl	2695c <printk>
   20832:	4040      	eors	r0, r0
   20834:	f380 8811 	msr	BASEPRI, r0
   20838:	f04f 0003 	mov.w	r0, #3
   2083c:	df02      	svc	2
}
   2083e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   20840:	2904      	cmp	r1, #4
   20842:	d035      	beq.n	208b0 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   20844:	4a2d      	ldr	r2, [pc, #180]	; (208fc <hal_ticker_instance0_sched+0x12c>)
   20846:	492e      	ldr	r1, [pc, #184]	; (20900 <hal_ticker_instance0_sched+0x130>)
   20848:	482e      	ldr	r0, [pc, #184]	; (20904 <hal_ticker_instance0_sched+0x134>)
   2084a:	237c      	movs	r3, #124	; 0x7c
   2084c:	f006 f886 	bl	2695c <printk>
   20850:	4040      	eors	r0, r0
   20852:	f380 8811 	msr	BASEPRI, r0
   20856:	f04f 0003 	mov.w	r0, #3
   2085a:	df02      	svc	2
}
   2085c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2085e:	2903      	cmp	r1, #3
   20860:	d036      	beq.n	208d0 <hal_ticker_instance0_sched+0x100>
   20862:	2904      	cmp	r1, #4
   20864:	d02c      	beq.n	208c0 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   20866:	4a25      	ldr	r2, [pc, #148]	; (208fc <hal_ticker_instance0_sched+0x12c>)
   20868:	4925      	ldr	r1, [pc, #148]	; (20900 <hal_ticker_instance0_sched+0x130>)
   2086a:	4826      	ldr	r0, [pc, #152]	; (20904 <hal_ticker_instance0_sched+0x134>)
   2086c:	23a2      	movs	r3, #162	; 0xa2
   2086e:	f006 f875 	bl	2695c <printk>
   20872:	4040      	eors	r0, r0
   20874:	f380 8811 	msr	BASEPRI, r0
   20878:	f04f 0003 	mov.w	r0, #3
   2087c:	df02      	svc	2
}
   2087e:	bd10      	pop	{r4, pc}
			m.param = instance;
   20880:	4b21      	ldr	r3, [pc, #132]	; (20908 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   20882:	2102      	movs	r1, #2
			m.param = instance;
   20884:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   20886:	2003      	movs	r0, #3
}
   20888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   2088c:	f7f4 bb50 	b.w	14f30 <mayfly_enqueue>
			m.param = instance;
   20890:	4b1e      	ldr	r3, [pc, #120]	; (2090c <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   20892:	2102      	movs	r1, #2
			m.param = instance;
   20894:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   20896:	2000      	movs	r0, #0
}
   20898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   2089c:	f7f4 bb48 	b.w	14f30 <mayfly_enqueue>
			m.param = instance;
   208a0:	4b1b      	ldr	r3, [pc, #108]	; (20910 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   208a2:	2101      	movs	r1, #1
			m.param = instance;
   208a4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   208a6:	4608      	mov	r0, r1
}
   208a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   208ac:	f7f4 bb40 	b.w	14f30 <mayfly_enqueue>
			m.param = instance;
   208b0:	4b18      	ldr	r3, [pc, #96]	; (20914 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   208b2:	2102      	movs	r1, #2
			m.param = instance;
   208b4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   208b6:	2001      	movs	r0, #1
}
   208b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   208bc:	f7f4 bb38 	b.w	14f30 <mayfly_enqueue>
			m.param = instance;
   208c0:	4b15      	ldr	r3, [pc, #84]	; (20918 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   208c2:	2102      	movs	r1, #2
			m.param = instance;
   208c4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   208c6:	4608      	mov	r0, r1
}
   208c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   208cc:	f7f4 bb30 	b.w	14f30 <mayfly_enqueue>
			m.param = instance;
   208d0:	4b12      	ldr	r3, [pc, #72]	; (2091c <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   208d2:	2101      	movs	r1, #1
			m.param = instance;
   208d4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   208d6:	2002      	movs	r0, #2
}
   208d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   208dc:	f7f4 bb28 	b.w	14f30 <mayfly_enqueue>
		LL_ASSERT(0);
   208e0:	4a06      	ldr	r2, [pc, #24]	; (208fc <hal_ticker_instance0_sched+0x12c>)
   208e2:	4907      	ldr	r1, [pc, #28]	; (20900 <hal_ticker_instance0_sched+0x130>)
   208e4:	4807      	ldr	r0, [pc, #28]	; (20904 <hal_ticker_instance0_sched+0x134>)
   208e6:	23c0      	movs	r3, #192	; 0xc0
   208e8:	f006 f838 	bl	2695c <printk>
   208ec:	4040      	eors	r0, r0
   208ee:	f380 8811 	msr	BASEPRI, r0
   208f2:	f04f 0003 	mov.w	r0, #3
   208f6:	df02      	svc	2
}
   208f8:	bd10      	pop	{r4, pc}
   208fa:	bf00      	nop
   208fc:	0003055c 	.word	0x0003055c
   20900:	0002f794 	.word	0x0002f794
   20904:	0002f6fc 	.word	0x0002f6fc
   20908:	200007a4 	.word	0x200007a4
   2090c:	20000794 	.word	0x20000794
   20910:	20000784 	.word	0x20000784
   20914:	200007d4 	.word	0x200007d4
   20918:	200007b4 	.word	0x200007b4
   2091c:	200007c4 	.word	0x200007c4

00020920 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   20920:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   20922:	2000      	movs	r0, #0
   20924:	f7ff b9ca 	b.w	1fcbc <cntr_cmp_set>

00020928 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   20928:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2092a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2092e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   20932:	3201      	adds	r2, #1
   20934:	d008      	beq.n	20948 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   20936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2093a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2093e:	f013 0301 	ands.w	r3, r3, #1
   20942:	d10a      	bne.n	2095a <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   20944:	4618      	mov	r0, r3
}
   20946:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   20948:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   2094c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20950:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   20952:	4293      	cmp	r3, r2
   20954:	d1ef      	bne.n	20936 <hci_vendor_read_static_addr+0xe>
	return 0;
   20956:	2000      	movs	r0, #0
}
   20958:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   2095a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   2095e:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   20960:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   20962:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   20966:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2096a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   2096c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   2096e:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   20972:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   20976:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   20978:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   2097c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20980:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   20982:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20986:	3301      	adds	r3, #1
   20988:	d03b      	beq.n	20a02 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2098a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2098e:	3301      	adds	r3, #1
   20990:	d037      	beq.n	20a02 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   20992:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   20996:	3301      	adds	r3, #1
   20998:	d033      	beq.n	20a02 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   2099a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2099e:	3301      	adds	r3, #1
   209a0:	d02f      	beq.n	20a02 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   209a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   209a6:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   209a8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   209aa:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   209ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   209b2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   209b4:	f880 c009 	strb.w	ip, [r0, #9]
   209b8:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   209ba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   209be:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   209c0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   209c2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   209c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   209ca:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   209cc:	f880 c00d 	strb.w	ip, [r0, #13]
   209d0:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   209d2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   209d6:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   209d8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   209da:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   209de:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   209e2:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   209e4:	73c3      	strb	r3, [r0, #15]
   209e6:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   209ea:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   209ee:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   209f0:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   209f2:	0a11      	lsrs	r1, r2, #8
   209f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   209f8:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   209fa:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   209fc:	7541      	strb	r1, [r0, #21]
		return 1;
   209fe:	2001      	movs	r0, #1
}
   20a00:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   20a02:	2210      	movs	r2, #16
   20a04:	2100      	movs	r1, #0
   20a06:	3006      	adds	r0, #6
   20a08:	f009 fcb3 	bl	2a372 <memset>
		return 1;
   20a0c:	2001      	movs	r0, #1
}
   20a0e:	bd08      	pop	{r3, pc}

00020a10 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   20a10:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   20a12:	2210      	movs	r2, #16
{
   20a14:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   20a16:	2100      	movs	r1, #0
   20a18:	f009 fcab 	bl	2a372 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   20a1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20a20:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   20a24:	3201      	adds	r2, #1
   20a26:	d034      	beq.n	20a92 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   20a28:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   20a2c:	3201      	adds	r2, #1
   20a2e:	d030      	beq.n	20a92 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   20a30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   20a34:	3201      	adds	r2, #1
   20a36:	d02c      	beq.n	20a92 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   20a38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   20a3c:	3201      	adds	r2, #1
   20a3e:	d028      	beq.n	20a92 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   20a40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   20a44:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   20a46:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   20a48:	0a08      	lsrs	r0, r1, #8
   20a4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   20a4e:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   20a50:	70e0      	strb	r0, [r4, #3]
   20a52:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   20a54:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   20a58:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   20a5a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   20a5c:	0a08      	lsrs	r0, r1, #8
   20a5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   20a62:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   20a64:	71e0      	strb	r0, [r4, #7]
   20a66:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   20a68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   20a6c:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   20a6e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   20a70:	0a08      	lsrs	r0, r1, #8
   20a72:	f3c2 2207 	ubfx	r2, r2, #8, #8
   20a76:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   20a78:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   20a7a:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   20a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   20a80:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   20a82:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   20a84:	0a11      	lsrs	r1, r2, #8
   20a86:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20a8a:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   20a8c:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   20a8e:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   20a90:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   20a92:	4620      	mov	r0, r4
   20a94:	2210      	movs	r2, #16
}
   20a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   20a9a:	2100      	movs	r1, #0
   20a9c:	f009 bc69 	b.w	2a372 <memset>

00020aa0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   20aa0:	4b02      	ldr	r3, [pc, #8]	; (20aac <net_buf_pool_get+0xc>)
   20aa2:	222c      	movs	r2, #44	; 0x2c
   20aa4:	fb02 3000 	mla	r0, r2, r0, r3
   20aa8:	4770      	bx	lr
   20aaa:	bf00      	nop
   20aac:	20000cb0 	.word	0x20000cb0

00020ab0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20ab0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20ab2:	4b06      	ldr	r3, [pc, #24]	; (20acc <net_buf_id+0x1c>)
   20ab4:	212c      	movs	r1, #44	; 0x2c
   20ab6:	fb01 3302 	mla	r3, r1, r2, r3
   20aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20abc:	7f1b      	ldrb	r3, [r3, #28]
   20abe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20ac0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20ac2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   20ac6:	fbb0 f0f3 	udiv	r0, r0, r3
   20aca:	4770      	bx	lr
   20acc:	20000cb0 	.word	0x20000cb0

00020ad0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   20ad0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20ad2:	4b0a      	ldr	r3, [pc, #40]	; (20afc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20ad4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20ad6:	242c      	movs	r4, #44	; 0x2c
   20ad8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   20adc:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20ae0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   20ae2:	6823      	ldr	r3, [r4, #0]
   20ae4:	429a      	cmp	r2, r3
   20ae6:	bf94      	ite	ls
   20ae8:	600a      	strls	r2, [r1, #0]
   20aea:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   20aec:	f7ff ffe0 	bl	20ab0 <net_buf_id>
   20af0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   20af4:	fb02 3000 	mla	r0, r2, r0, r3
   20af8:	bd10      	pop	{r4, pc}
   20afa:	bf00      	nop
   20afc:	20000cb0 	.word	0x20000cb0

00020b00 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   20b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b04:	4605      	mov	r5, r0
   20b06:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20b08:	4610      	mov	r0, r2
   20b0a:	4619      	mov	r1, r3
{
   20b0c:	4691      	mov	r9, r2
   20b0e:	4698      	mov	r8, r3
   20b10:	4617      	mov	r7, r2
   20b12:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20b14:	f00d f85f 	bl	2dbd6 <sys_clock_timeout_end_calc>
   20b18:	4682      	mov	sl, r0
   20b1a:	468b      	mov	fp, r1
	__asm__ volatile(
   20b1c:	f04f 0320 	mov.w	r3, #32
   20b20:	f3ef 8111 	mrs	r1, BASEPRI
   20b24:	f383 8812 	msr	BASEPRI_MAX, r3
   20b28:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   20b2c:	8b6b      	ldrh	r3, [r5, #26]
   20b2e:	2b00      	cmp	r3, #0
   20b30:	d05a      	beq.n	20be8 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   20b32:	8b2a      	ldrh	r2, [r5, #24]
   20b34:	429a      	cmp	r2, r3
   20b36:	d93e      	bls.n	20bb6 <net_buf_alloc_len+0xb6>
   20b38:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   20b3a:	2200      	movs	r2, #0
   20b3c:	2300      	movs	r3, #0
   20b3e:	4628      	mov	r0, r5
   20b40:	f004 fca4 	bl	2548c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   20b44:	9900      	ldr	r1, [sp, #0]
   20b46:	4604      	mov	r4, r0
   20b48:	2800      	cmp	r0, #0
   20b4a:	d034      	beq.n	20bb6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   20b4c:	f381 8811 	msr	BASEPRI, r1
   20b50:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   20b54:	9b01      	ldr	r3, [sp, #4]
   20b56:	2b00      	cmp	r3, #0
   20b58:	d056      	beq.n	20c08 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   20b5a:	ea58 0309 	orrs.w	r3, r8, r9
   20b5e:	d00f      	beq.n	20b80 <net_buf_alloc_len+0x80>
   20b60:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20b64:	bf08      	it	eq
   20b66:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   20b6a:	d009      	beq.n	20b80 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   20b6c:	f005 fb9e 	bl	262ac <sys_clock_tick_get>
   20b70:	ebba 0700 	subs.w	r7, sl, r0
   20b74:	eb6b 0601 	sbc.w	r6, fp, r1
   20b78:	2e00      	cmp	r6, #0
   20b7a:	bfbc      	itt	lt
   20b7c:	2700      	movlt	r7, #0
   20b7e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20b80:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   20b82:	f8df 809c 	ldr.w	r8, [pc, #156]	; 20c20 <net_buf_alloc_len+0x120>
   20b86:	f04f 092c 	mov.w	r9, #44	; 0x2c
   20b8a:	fb09 8303 	mla	r3, r9, r3, r8
   20b8e:	463a      	mov	r2, r7
   20b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20b92:	681b      	ldr	r3, [r3, #0]
   20b94:	a901      	add	r1, sp, #4
   20b96:	681d      	ldr	r5, [r3, #0]
   20b98:	4620      	mov	r0, r4
   20b9a:	4633      	mov	r3, r6
   20b9c:	47a8      	blx	r5
   20b9e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   20ba0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   20ba2:	2800      	cmp	r0, #0
   20ba4:	d131      	bne.n	20c0a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   20ba6:	79a0      	ldrb	r0, [r4, #6]
   20ba8:	4621      	mov	r1, r4
   20baa:	fb00 8009 	mla	r0, r0, r9, r8
   20bae:	f00c fd6e 	bl	2d68e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   20bb2:	462c      	mov	r4, r5
}
   20bb4:	e024      	b.n	20c00 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   20bb6:	8b68      	ldrh	r0, [r5, #26]
   20bb8:	1e43      	subs	r3, r0, #1
   20bba:	836b      	strh	r3, [r5, #26]
   20bbc:	f381 8811 	msr	BASEPRI, r1
   20bc0:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20bc4:	7f2a      	ldrb	r2, [r5, #28]
   20bc6:	f102 0417 	add.w	r4, r2, #23
   20bca:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20bce:	8b2c      	ldrh	r4, [r5, #24]
   20bd0:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20bd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   20bd4:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   20bd8:	4811      	ldr	r0, [pc, #68]	; (20c20 <net_buf_alloc_len+0x120>)
   20bda:	4b12      	ldr	r3, [pc, #72]	; (20c24 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   20bdc:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   20bde:	1a2d      	subs	r5, r5, r0
   20be0:	10ad      	asrs	r5, r5, #2
   20be2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   20be4:	71a5      	strb	r5, [r4, #6]
		goto success;
   20be6:	e7b5      	b.n	20b54 <net_buf_alloc_len+0x54>
   20be8:	f381 8811 	msr	BASEPRI, r1
   20bec:	f3bf 8f6f 	isb	sy
   20bf0:	464a      	mov	r2, r9
   20bf2:	4643      	mov	r3, r8
   20bf4:	4628      	mov	r0, r5
   20bf6:	f004 fc49 	bl	2548c <z_impl_k_queue_get>
	if (!buf) {
   20bfa:	4604      	mov	r4, r0
   20bfc:	2800      	cmp	r0, #0
   20bfe:	d1a9      	bne.n	20b54 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   20c00:	4620      	mov	r0, r4
   20c02:	b003      	add	sp, #12
   20c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   20c08:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   20c0a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   20c0c:	2201      	movs	r2, #1
	buf->frags = NULL;
   20c0e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   20c10:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   20c12:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   20c14:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   20c16:	6923      	ldr	r3, [r4, #16]
   20c18:	81e2      	strh	r2, [r4, #14]
   20c1a:	60a3      	str	r3, [r4, #8]
	return buf;
   20c1c:	e7f0      	b.n	20c00 <net_buf_alloc_len+0x100>
   20c1e:	bf00      	nop
   20c20:	20000cb0 	.word	0x20000cb0
   20c24:	ba2e8ba3 	.word	0xba2e8ba3

00020c28 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   20c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c2c:	4d16      	ldr	r5, [pc, #88]	; (20c88 <net_buf_unref+0x60>)
   20c2e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   20c30:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   20c32:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   20c34:	b90c      	cbnz	r4, 20c3a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   20c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   20c3a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   20c3c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   20c40:	3b01      	subs	r3, #1
   20c42:	b2db      	uxtb	r3, r3
   20c44:	7123      	strb	r3, [r4, #4]
   20c46:	2b00      	cmp	r3, #0
   20c48:	d1f5      	bne.n	20c36 <net_buf_unref+0xe>
		if (buf->__buf) {
   20c4a:	6921      	ldr	r1, [r4, #16]
   20c4c:	b159      	cbz	r1, 20c66 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   20c4e:	7963      	ldrb	r3, [r4, #5]
   20c50:	079b      	lsls	r3, r3, #30
   20c52:	d407      	bmi.n	20c64 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20c54:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   20c56:	fb07 5303 	mla	r3, r7, r3, r5
   20c5a:	4620      	mov	r0, r4
   20c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20c5e:	681b      	ldr	r3, [r3, #0]
   20c60:	689b      	ldr	r3, [r3, #8]
   20c62:	4798      	blx	r3
			buf->__buf = NULL;
   20c64:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   20c66:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   20c68:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   20c6a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   20c6e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   20c70:	6a1b      	ldr	r3, [r3, #32]
   20c72:	b11b      	cbz	r3, 20c7c <net_buf_unref+0x54>
			pool->destroy(buf);
   20c74:	4620      	mov	r0, r4
   20c76:	4798      	blx	r3
{
   20c78:	4644      	mov	r4, r8
   20c7a:	e7db      	b.n	20c34 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   20c7c:	4621      	mov	r1, r4
   20c7e:	fb00 5007 	mla	r0, r0, r7, r5
   20c82:	f00c fd04 	bl	2d68e <k_queue_prepend>
}
   20c86:	e7f7      	b.n	20c78 <net_buf_unref+0x50>
   20c88:	20000cb0 	.word	0x20000cb0

00020c8c <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   20c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c90:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   20c94:	4606      	mov	r6, r0
   20c96:	460d      	mov	r5, r1
   20c98:	4617      	mov	r7, r2
	while (buf->frags) {
   20c9a:	4604      	mov	r4, r0
   20c9c:	4621      	mov	r1, r4
   20c9e:	6824      	ldr	r4, [r4, #0]
   20ca0:	2c00      	cmp	r4, #0
   20ca2:	d1fb      	bne.n	20c9c <net_buf_append_bytes+0x10>
	return &_net_buf_pool_list[id];
   20ca4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   20ca8:	f101 0b08 	add.w	fp, r1, #8
   20cac:	4658      	mov	r0, fp
   20cae:	f00b ff0b 	bl	2cac8 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   20cb2:	4285      	cmp	r5, r0
   20cb4:	bf2c      	ite	cs
   20cb6:	b282      	uxthcs	r2, r0
   20cb8:	b2aa      	uxthcc	r2, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20cba:	4639      	mov	r1, r7
   20cbc:	4658      	mov	r0, fp
   20cbe:	9201      	str	r2, [sp, #4]
   20cc0:	f00b febb 	bl	2ca3a <net_buf_simple_add_mem>

		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
   20cc4:	9a01      	ldr	r2, [sp, #4]
		value8 += count;

		if (len == 0) {
   20cc6:	1aad      	subs	r5, r5, r2
		added_len += count;
   20cc8:	4414      	add	r4, r2
		value8 += count;
   20cca:	4417      	add	r7, r2
		if (len == 0) {
   20ccc:	d016      	beq.n	20cfc <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   20cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20cd0:	b14b      	cbz	r3, 20ce6 <net_buf_append_bytes+0x5a>
			frag = allocate_cb(timeout, user_data);
   20cd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20cd4:	4640      	mov	r0, r8
   20cd6:	4649      	mov	r1, r9
   20cd8:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   20cda:	4601      	mov	r1, r0
		}

		if (!frag) {
   20cdc:	b170      	cbz	r0, 20cfc <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   20cde:	4630      	mov	r0, r6
   20ce0:	f00b fe88 	bl	2c9f4 <net_buf_frag_add>
	do {
   20ce4:	e7e0      	b.n	20ca8 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   20ce6:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   20ce8:	f8df c018 	ldr.w	ip, [pc, #24]	; 20d04 <net_buf_append_bytes+0x78>
   20cec:	4642      	mov	r2, r8
   20cee:	464b      	mov	r3, r9
   20cf0:	4629      	mov	r1, r5
   20cf2:	fb00 c00a 	mla	r0, r0, sl, ip
   20cf6:	f7ff ff03 	bl	20b00 <net_buf_alloc_len>
   20cfa:	e7ee      	b.n	20cda <net_buf_append_bytes+0x4e>
	} while (1);

	/* Unreachable */
	return 0;
}
   20cfc:	4620      	mov	r0, r4
   20cfe:	b003      	add	sp, #12
   20d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d04:	20000cb0 	.word	0x20000cb0

00020d08 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   20d08:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   20d0c:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   20d0e:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   20d10:	d004      	beq.n	20d1c <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   20d12:	f010 0f78 	tst.w	r0, #120	; 0x78
   20d16:	d001      	beq.n	20d1c <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   20d18:	2000      	movs	r0, #0
   20d1a:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   20d1c:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   20d1e:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   20d22:	f000 0008 	and.w	r0, r0, #8
   20d26:	da05      	bge.n	20d34 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20d28:	b958      	cbnz	r0, 20d42 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   20d2a:	4808      	ldr	r0, [pc, #32]	; (20d4c <endpoint_ctx+0x44>)
   20d2c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   20d30:	304c      	adds	r0, #76	; 0x4c
   20d32:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20d34:	b938      	cbnz	r0, 20d46 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   20d36:	4805      	ldr	r0, [pc, #20]	; (20d4c <endpoint_ctx+0x44>)
   20d38:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   20d3c:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   20d40:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   20d42:	4803      	ldr	r0, [pc, #12]	; (20d50 <endpoint_ctx+0x48>)
   20d44:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   20d46:	4803      	ldr	r0, [pc, #12]	; (20d54 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   20d48:	4770      	bx	lr
   20d4a:	bf00      	nop
   20d4c:	20004430 	.word	0x20004430
   20d50:	2000457c 	.word	0x2000457c
   20d54:	2000469c 	.word	0x2000469c

00020d58 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   20d58:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   20d5a:	4801      	ldr	r0, [pc, #4]	; (20d60 <usbd_evt_put+0x8>)
   20d5c:	f00c bc8c 	b.w	2d678 <k_queue_append>
   20d60:	20000c98 	.word	0x20000c98

00020d64 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   20d64:	4901      	ldr	r1, [pc, #4]	; (20d6c <usbd_work_schedule+0x8>)
   20d66:	4802      	ldr	r0, [pc, #8]	; (20d70 <usbd_work_schedule+0xc>)
   20d68:	f00c bd60 	b.w	2d82c <k_work_submit_to_queue>
   20d6c:	20004458 	.word	0x20004458
   20d70:	200022c0 	.word	0x200022c0

00020d74 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   20d74:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   20d76:	480b      	ldr	r0, [pc, #44]	; (20da4 <usb_init+0x30>)
   20d78:	f002 fece 	bl	23b18 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   20d7c:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   20d7e:	480a      	ldr	r0, [pc, #40]	; (20da8 <usb_init+0x34>)
   20d80:	f002 ff10 	bl	23ba4 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   20d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20d8c:	4907      	ldr	r1, [pc, #28]	; (20dac <usb_init+0x38>)
   20d8e:	4808      	ldr	r0, [pc, #32]	; (20db0 <usb_init+0x3c>)
   20d90:	9400      	str	r4, [sp, #0]
   20d92:	f004 fd21 	bl	257d8 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   20d96:	4907      	ldr	r1, [pc, #28]	; (20db4 <usb_init+0x40>)
   20d98:	4807      	ldr	r0, [pc, #28]	; (20db8 <usb_init+0x44>)
   20d9a:	f00c fd3e 	bl	2d81a <k_work_init>

	return 0;
}
   20d9e:	4620      	mov	r0, r4
   20da0:	b002      	add	sp, #8
   20da2:	bd10      	pop	{r4, pc}
   20da4:	00034604 	.word	0x00034604
   20da8:	00030600 	.word	0x00030600
   20dac:	20009ac0 	.word	0x20009ac0
   20db0:	200022c0 	.word	0x200022c0
   20db4:	000211dd 	.word	0x000211dd
   20db8:	20004458 	.word	0x20004458

00020dbc <usbd_evt_get>:
   20dbc:	4802      	ldr	r0, [pc, #8]	; (20dc8 <usbd_evt_get+0xc>)
   20dbe:	2200      	movs	r2, #0
   20dc0:	2300      	movs	r3, #0
   20dc2:	f004 bb63 	b.w	2548c <z_impl_k_queue_get>
   20dc6:	bf00      	nop
   20dc8:	20000c98 	.word	0x20000c98

00020dcc <usbd_evt_flush>:
{
   20dcc:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   20dce:	4c05      	ldr	r4, [pc, #20]	; (20de4 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   20dd0:	f7ff fff4 	bl	20dbc <usbd_evt_get>
		if (ev) {
   20dd4:	b120      	cbz	r0, 20de0 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   20dd6:	1d01      	adds	r1, r0, #4
   20dd8:	4620      	mov	r0, r4
   20dda:	f00c fb75 	bl	2d4c8 <k_mem_slab_free>
	} while (ev != NULL);
   20dde:	e7f7      	b.n	20dd0 <usbd_evt_flush+0x4>
}
   20de0:	bd10      	pop	{r4, pc}
   20de2:	bf00      	nop
   20de4:	20000b74 	.word	0x20000b74

00020de8 <usbd_evt_alloc>:
{
   20de8:	b510      	push	{r4, lr}
   20dea:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
   20dec:	481e      	ldr	r0, [pc, #120]	; (20e68 <usbd_evt_alloc+0x80>)
   20dee:	2200      	movs	r2, #0
   20df0:	2300      	movs	r3, #0
   20df2:	4669      	mov	r1, sp
   20df4:	f004 f8d2 	bl	24f9c <k_mem_slab_alloc>
   20df8:	2800      	cmp	r0, #0
   20dfa:	d030      	beq.n	20e5e <usbd_evt_alloc+0x76>
		LOG_ERR("USBD event allocation failed!");
   20dfc:	4c1b      	ldr	r4, [pc, #108]	; (20e6c <usbd_evt_alloc+0x84>)
   20dfe:	6823      	ldr	r3, [r4, #0]
   20e00:	075a      	lsls	r2, r3, #29
   20e02:	d00a      	beq.n	20e1a <usbd_evt_alloc+0x32>
   20e04:	4b1a      	ldr	r3, [pc, #104]	; (20e70 <usbd_evt_alloc+0x88>)
   20e06:	9306      	str	r3, [sp, #24]
   20e08:	aa05      	add	r2, sp, #20
   20e0a:	2302      	movs	r3, #2
   20e0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20e10:	4620      	mov	r0, r4
   20e12:	9301      	str	r3, [sp, #4]
   20e14:	9305      	str	r3, [sp, #20]
   20e16:	f00b fe72 	bl	2cafe <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
   20e1a:	f7ff ffd7 	bl	20dcc <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   20e1e:	4812      	ldr	r0, [pc, #72]	; (20e68 <usbd_evt_alloc+0x80>)
   20e20:	2200      	movs	r2, #0
   20e22:	2300      	movs	r3, #0
   20e24:	4669      	mov	r1, sp
   20e26:	f004 f8b9 	bl	24f9c <k_mem_slab_alloc>
   20e2a:	b178      	cbz	r0, 20e4c <usbd_evt_alloc+0x64>
			LOG_ERR("USBD event memory corrupted");
   20e2c:	6823      	ldr	r3, [r4, #0]
   20e2e:	075b      	lsls	r3, r3, #29
   20e30:	d00a      	beq.n	20e48 <usbd_evt_alloc+0x60>
   20e32:	4b10      	ldr	r3, [pc, #64]	; (20e74 <usbd_evt_alloc+0x8c>)
   20e34:	9306      	str	r3, [sp, #24]
   20e36:	480d      	ldr	r0, [pc, #52]	; (20e6c <usbd_evt_alloc+0x84>)
   20e38:	2302      	movs	r3, #2
   20e3a:	aa05      	add	r2, sp, #20
   20e3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20e40:	9301      	str	r3, [sp, #4]
   20e42:	9305      	str	r3, [sp, #20]
   20e44:	f00b fe5b 	bl	2cafe <z_log_msg2_static_create.constprop.0>
			return NULL;
   20e48:	2000      	movs	r0, #0
   20e4a:	e00a      	b.n	20e62 <usbd_evt_alloc+0x7a>
		ev = (struct usbd_event *)block.data;
   20e4c:	9800      	ldr	r0, [sp, #0]
		ev->evt_type = USBD_EVT_REINIT;
   20e4e:	2304      	movs	r3, #4
		ev->block = block;
   20e50:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   20e52:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   20e54:	f7ff ff80 	bl	20d58 <usbd_evt_put>
		usbd_work_schedule();
   20e58:	f7ff ff84 	bl	20d64 <usbd_work_schedule>
		return NULL;
   20e5c:	e7f4      	b.n	20e48 <usbd_evt_alloc+0x60>
	ev = (struct usbd_event *)block.data;
   20e5e:	9800      	ldr	r0, [sp, #0]
	ev->block = block;
   20e60:	6040      	str	r0, [r0, #4]
}
   20e62:	b008      	add	sp, #32
   20e64:	bd10      	pop	{r4, pc}
   20e66:	bf00      	nop
   20e68:	20000b74 	.word	0x20000b74
   20e6c:	20000aa4 	.word	0x20000aa4
   20e70:	000343f3 	.word	0x000343f3
   20e74:	00034411 	.word	0x00034411

00020e78 <usbd_event_transfer_data>:
{
   20e78:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e7a:	b083      	sub	sp, #12
		endpoint_ctx(p_event->data.eptransfer.ep);
   20e7c:	7881      	ldrb	r1, [r0, #2]
{
   20e7e:	4606      	mov	r6, r0
   20e80:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
   20e82:	4608      	mov	r0, r1
   20e84:	f7ff ff40 	bl	20d08 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20e88:	060a      	lsls	r2, r1, #24
		switch (p_event->data.eptransfer.status) {
   20e8a:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   20e8c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   20e8e:	d528      	bpl.n	20ee2 <usbd_event_transfer_data+0x6a>
		switch (p_event->data.eptransfer.status) {
   20e90:	b1b4      	cbz	r4, 20ec0 <usbd_event_transfer_data+0x48>
   20e92:	2c03      	cmp	r4, #3
   20e94:	d022      	beq.n	20edc <usbd_event_transfer_data+0x64>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   20e96:	482d      	ldr	r0, [pc, #180]	; (20f4c <usbd_event_transfer_data+0xd4>)
   20e98:	6803      	ldr	r3, [r0, #0]
   20e9a:	075b      	lsls	r3, r3, #29
   20e9c:	d01e      	beq.n	20edc <usbd_event_transfer_data+0x64>
   20e9e:	4b2c      	ldr	r3, [pc, #176]	; (20f50 <usbd_event_transfer_data+0xd8>)
   20ea0:	466d      	mov	r5, sp
   20ea2:	b088      	sub	sp, #32
   20ea4:	466a      	mov	r2, sp
   20ea6:	e9c2 3404 	strd	r3, r4, [r2, #16]
   20eaa:	2304      	movs	r3, #4
   20eac:	6191      	str	r1, [r2, #24]
   20eae:	607b      	str	r3, [r7, #4]
   20eb0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20eb4:	f842 3f0c 	str.w	r3, [r2, #12]!
   20eb8:	f00b fe21 	bl	2cafe <z_log_msg2_static_create.constprop.0>
   20ebc:	46ad      	mov	sp, r5
   20ebe:	e00d      	b.n	20edc <usbd_event_transfer_data+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   20ec0:	f7ff ff92 	bl	20de8 <usbd_evt_alloc>
			if (!ev) {
   20ec4:	4603      	mov	r3, r0
   20ec6:	b148      	cbz	r0, 20edc <usbd_event_transfer_data+0x64>
			ev->evt_type = USBD_EVT_EP;
   20ec8:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   20eca:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   20ecc:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   20ece:	2203      	movs	r2, #3
   20ed0:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   20ed2:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
   20ed4:	f7ff ff40 	bl	20d58 <usbd_evt_put>
			usbd_work_schedule();
   20ed8:	f7ff ff44 	bl	20d64 <usbd_work_schedule>
}
   20edc:	370c      	adds	r7, #12
   20ede:	46bd      	mov	sp, r7
   20ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
   20ee2:	b154      	cbz	r4, 20efa <usbd_event_transfer_data+0x82>
   20ee4:	2c01      	cmp	r4, #1
   20ee6:	d1d6      	bne.n	20e96 <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
   20ee8:	f7ff ff7e 	bl	20de8 <usbd_evt_alloc>
			if (!ev) {
   20eec:	4603      	mov	r3, r0
   20eee:	2800      	cmp	r0, #0
   20ef0:	d0f4      	beq.n	20edc <usbd_event_transfer_data+0x64>
			ep_ctx->read_pending = true;
   20ef2:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   20ef4:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   20ef6:	7304      	strb	r4, [r0, #12]
   20ef8:	e7eb      	b.n	20ed2 <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
   20efa:	f7ff ff75 	bl	20de8 <usbd_evt_alloc>
			if (!ev) {
   20efe:	2800      	cmp	r0, #0
   20f00:	d0ec      	beq.n	20edc <usbd_event_transfer_data+0x64>
				p_event->data.eptransfer.ep);
   20f02:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   20f04:	4b13      	ldr	r3, [pc, #76]	; (20f54 <usbd_event_transfer_data+0xdc>)
   20f06:	f012 0f80 	tst.w	r2, #128	; 0x80
   20f0a:	f002 0108 	and.w	r1, r2, #8
   20f0e:	d011      	beq.n	20f34 <usbd_event_transfer_data+0xbc>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   20f10:	b141      	cbz	r1, 20f24 <usbd_event_transfer_data+0xac>
        {
            ret = p_reg->ISOIN.AMOUNT;
   20f12:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   20f16:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   20f18:	2301      	movs	r3, #1
   20f1a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   20f1c:	2302      	movs	r3, #2
   20f1e:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   20f20:	6085      	str	r5, [r0, #8]
			usbd_evt_put(ev);
   20f22:	e7d7      	b.n	20ed4 <usbd_event_transfer_data+0x5c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   20f24:	f002 020f 	and.w	r2, r2, #15
   20f28:	2114      	movs	r1, #20
   20f2a:	fb01 3302 	mla	r3, r1, r2, r3
   20f2e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   20f32:	e7f0      	b.n	20f16 <usbd_event_transfer_data+0x9e>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   20f34:	b111      	cbz	r1, 20f3c <usbd_event_transfer_data+0xc4>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   20f36:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   20f3a:	e7ec      	b.n	20f16 <usbd_event_transfer_data+0x9e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   20f3c:	f002 020f 	and.w	r2, r2, #15
   20f40:	2114      	movs	r1, #20
   20f42:	fb01 3302 	mla	r3, r1, r2, r3
   20f46:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   20f4a:	e7e4      	b.n	20f16 <usbd_event_transfer_data+0x9e>
   20f4c:	20000aa4 	.word	0x20000aa4
   20f50:	0003442d 	.word	0x0003442d
   20f54:	40027000 	.word	0x40027000

00020f58 <usb_dc_power_event_handler>:
{
   20f58:	b510      	push	{r4, lr}
   20f5a:	2802      	cmp	r0, #2
   20f5c:	b088      	sub	sp, #32
   20f5e:	4603      	mov	r3, r0
   20f60:	d812      	bhi.n	20f88 <usb_dc_power_event_handler+0x30>
   20f62:	4a12      	ldr	r2, [pc, #72]	; (20fac <usb_dc_power_event_handler+0x54>)
   20f64:	5c14      	ldrb	r4, [r2, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   20f66:	f7ff ff3f 	bl	20de8 <usbd_evt_alloc>
	if (!ev) {
   20f6a:	b1e0      	cbz	r0, 20fa6 <usb_dc_power_event_handler+0x4e>
	ev->evt_type = USBD_EVT_POWER;
   20f6c:	2200      	movs	r2, #0
   20f6e:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   20f70:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   20f72:	f7ff fef1 	bl	20d58 <usbd_evt_put>
	if (usbd_ctx.attached) {
   20f76:	4b0e      	ldr	r3, [pc, #56]	; (20fb0 <usb_dc_power_event_handler+0x58>)
   20f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   20f7c:	b19b      	cbz	r3, 20fa6 <usb_dc_power_event_handler+0x4e>
}
   20f7e:	b008      	add	sp, #32
   20f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   20f84:	f7ff beee 	b.w	20d64 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
   20f88:	480a      	ldr	r0, [pc, #40]	; (20fb4 <usb_dc_power_event_handler+0x5c>)
   20f8a:	6802      	ldr	r2, [r0, #0]
   20f8c:	0752      	lsls	r2, r2, #29
   20f8e:	d00a      	beq.n	20fa6 <usb_dc_power_event_handler+0x4e>
   20f90:	4a09      	ldr	r2, [pc, #36]	; (20fb8 <usb_dc_power_event_handler+0x60>)
   20f92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (event) {
   20f96:	e9cd 2306 	strd	r2, r3, [sp, #24]
		LOG_ERR("Unknown USB power event %d", event);
   20f9a:	2303      	movs	r3, #3
   20f9c:	aa05      	add	r2, sp, #20
   20f9e:	9301      	str	r3, [sp, #4]
   20fa0:	9305      	str	r3, [sp, #20]
   20fa2:	f00b fdac 	bl	2cafe <z_log_msg2_static_create.constprop.0>
}
   20fa6:	b008      	add	sp, #32
   20fa8:	bd10      	pop	{r4, pc}
   20faa:	bf00      	nop
   20fac:	00034601 	.word	0x00034601
   20fb0:	20004430 	.word	0x20004430
   20fb4:	20000aa4 	.word	0x20000aa4
   20fb8:	00034459 	.word	0x00034459

00020fbc <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   20fbc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20fbe:	490f      	ldr	r1, [pc, #60]	; (20ffc <hfxo_stop.constprop.0.isra.0+0x40>)
   20fc0:	f3bf 8f5b 	dmb	ish
   20fc4:	f101 0320 	add.w	r3, r1, #32
   20fc8:	2200      	movs	r2, #0
   20fca:	e853 0f00 	ldrex	r0, [r3]
   20fce:	2801      	cmp	r0, #1
   20fd0:	d103      	bne.n	20fda <hfxo_stop.constprop.0.isra.0+0x1e>
   20fd2:	e843 2400 	strex	r4, r2, [r3]
   20fd6:	2c00      	cmp	r4, #0
   20fd8:	d1f7      	bne.n	20fca <hfxo_stop.constprop.0.isra.0+0xe>
   20fda:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   20fde:	d10b      	bne.n	20ff8 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   20fe0:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   20fe2:	310c      	adds	r1, #12
   20fe4:	4620      	mov	r0, r4
   20fe6:	f005 fdbd 	bl	26b64 <onoff_cancel>

	if (rv == -EALREADY) {
   20fea:	3078      	adds	r0, #120	; 0x78
   20fec:	d104      	bne.n	20ff8 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   20fee:	4620      	mov	r0, r4
}
   20ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20ff4:	f005 bd91 	b.w	26b1a <onoff_release>
   20ff8:	bd10      	pop	{r4, pc}
   20ffa:	bf00      	nop
   20ffc:	20004430 	.word	0x20004430

00021000 <usbd_event_handler>:
{
   21000:	b5f0      	push	{r4, r5, r6, r7, lr}
   21002:	b08d      	sub	sp, #52	; 0x34
   21004:	4606      	mov	r6, r0
   21006:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
   21008:	2214      	movs	r2, #20
   2100a:	2100      	movs	r1, #0
   2100c:	1d38      	adds	r0, r7, #4
   2100e:	f009 f9b0 	bl	2a372 <memset>
	switch (p_event->type) {
   21012:	7833      	ldrb	r3, [r6, #0]
   21014:	3b01      	subs	r3, #1
   21016:	2b05      	cmp	r3, #5
   21018:	d820      	bhi.n	2105c <usbd_event_handler+0x5c>
   2101a:	e8df f003 	tbb	[pc, r3]
   2101e:	039e      	.short	0x039e
   21020:	158f1313 	.word	0x158f1313
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   21024:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   21026:	733b      	strb	r3, [r7, #12]
		evt.evt_type = USBD_EVT_POWER;
   21028:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   2102a:	f7ff fedd 	bl	20de8 <usbd_evt_alloc>
		if (!ev) {
   2102e:	4603      	mov	r3, r0
   21030:	b1a0      	cbz	r0, 2105c <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   21032:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   21034:	f100 0208 	add.w	r2, r0, #8
   21038:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
   2103c:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   21040:	4618      	mov	r0, r3
   21042:	e034      	b.n	210ae <usbd_event_handler+0xae>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   21044:	2304      	movs	r3, #4
   21046:	e7ee      	b.n	21026 <usbd_event_handler+0x26>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   21048:	78b1      	ldrb	r1, [r6, #2]
   2104a:	4608      	mov	r0, r1
   2104c:	f7ff fe5c 	bl	20d08 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   21050:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   21052:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
   21054:	b12b      	cbz	r3, 21062 <usbd_event_handler+0x62>
   21056:	3b01      	subs	r3, #1
   21058:	2b02      	cmp	r3, #2
   2105a:	d96b      	bls.n	21134 <usbd_event_handler+0x134>
}
   2105c:	3734      	adds	r7, #52	; 0x34
   2105e:	46bd      	mov	sp, r7
   21060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   21062:	0608      	lsls	r0, r1, #24
		switch (p_event->data.eptransfer.status) {
   21064:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   21066:	d527      	bpl.n	210b8 <usbd_event_handler+0xb8>
		switch (p_event->data.eptransfer.status) {
   21068:	b1b4      	cbz	r4, 21098 <usbd_event_handler+0x98>
   2106a:	2c03      	cmp	r4, #3
   2106c:	d0f6      	beq.n	2105c <usbd_event_handler+0x5c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   2106e:	483c      	ldr	r0, [pc, #240]	; (21160 <usbd_event_handler+0x160>)
   21070:	6803      	ldr	r3, [r0, #0]
   21072:	075b      	lsls	r3, r3, #29
   21074:	d0f2      	beq.n	2105c <usbd_event_handler+0x5c>
   21076:	4b3b      	ldr	r3, [pc, #236]	; (21164 <usbd_event_handler+0x164>)
   21078:	466d      	mov	r5, sp
   2107a:	b088      	sub	sp, #32
   2107c:	466a      	mov	r2, sp
   2107e:	e9c2 3404 	strd	r3, r4, [r2, #16]
   21082:	2304      	movs	r3, #4
   21084:	6191      	str	r1, [r2, #24]
   21086:	61bb      	str	r3, [r7, #24]
   21088:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2108c:	f842 3f0c 	str.w	r3, [r2, #12]!
   21090:	f00b fd35 	bl	2cafe <z_log_msg2_static_create.constprop.0>
   21094:	46ad      	mov	sp, r5
   21096:	e7e1      	b.n	2105c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   21098:	f7ff fea6 	bl	20de8 <usbd_evt_alloc>
			if (!ev) {
   2109c:	4603      	mov	r3, r0
   2109e:	2800      	cmp	r0, #0
   210a0:	d0dc      	beq.n	2105c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   210a2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   210a4:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   210a6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   210a8:	2203      	movs	r2, #3
   210aa:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   210ac:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
   210ae:	f7ff fe53 	bl	20d58 <usbd_evt_put>
		usbd_work_schedule();
   210b2:	f7ff fe57 	bl	20d64 <usbd_work_schedule>
   210b6:	e7d1      	b.n	2105c <usbd_event_handler+0x5c>
		switch (p_event->data.eptransfer.status) {
   210b8:	b154      	cbz	r4, 210d0 <usbd_event_handler+0xd0>
   210ba:	2c01      	cmp	r4, #1
   210bc:	d1d7      	bne.n	2106e <usbd_event_handler+0x6e>
			struct usbd_event *ev = usbd_evt_alloc();
   210be:	f7ff fe93 	bl	20de8 <usbd_evt_alloc>
			if (!ev) {
   210c2:	4603      	mov	r3, r0
   210c4:	2800      	cmp	r0, #0
   210c6:	d0c9      	beq.n	2105c <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   210c8:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   210ca:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   210cc:	7304      	strb	r4, [r0, #12]
   210ce:	e7ed      	b.n	210ac <usbd_event_handler+0xac>
			struct usbd_event *ev = usbd_evt_alloc();
   210d0:	f7ff fe8a 	bl	20de8 <usbd_evt_alloc>
			if (!ev) {
   210d4:	4604      	mov	r4, r0
   210d6:	2800      	cmp	r0, #0
   210d8:	d0c0      	beq.n	2105c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   210da:	2301      	movs	r3, #1
   210dc:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   210de:	2302      	movs	r3, #2
   210e0:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   210e2:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   210e4:	f105 010c 	add.w	r1, r5, #12
   210e8:	78b0      	ldrb	r0, [r6, #2]
   210ea:	f00c f91e 	bl	2d32a <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   210ee:	4603      	mov	r3, r0
   210f0:	b178      	cbz	r0, 21112 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
   210f2:	481b      	ldr	r0, [pc, #108]	; (21160 <usbd_event_handler+0x160>)
   210f4:	6802      	ldr	r2, [r0, #0]
   210f6:	0752      	lsls	r2, r2, #29
   210f8:	d00b      	beq.n	21112 <usbd_event_handler+0x112>
   210fa:	4a1b      	ldr	r2, [pc, #108]	; (21168 <usbd_event_handler+0x168>)
   210fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21100:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   21104:	2303      	movs	r3, #3
   21106:	f107 0224 	add.w	r2, r7, #36	; 0x24
   2110a:	603b      	str	r3, [r7, #0]
   2110c:	627b      	str	r3, [r7, #36]	; 0x24
   2110e:	f00b fcf6 	bl	2cafe <z_log_msg2_static_create.constprop.0>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   21112:	4a16      	ldr	r2, [pc, #88]	; (2116c <usbd_event_handler+0x16c>)
   21114:	68e9      	ldr	r1, [r5, #12]
   21116:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   2111a:	428b      	cmp	r3, r1
   2111c:	d906      	bls.n	2112c <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   2111e:	1a5b      	subs	r3, r3, r1
   21120:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   21124:	f003 fa9e 	bl	24664 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   21128:	4620      	mov	r0, r4
   2112a:	e7c0      	b.n	210ae <usbd_event_handler+0xae>
				ctx->ctrl_read_len = 0U;
   2112c:	2300      	movs	r3, #0
   2112e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
   21132:	e7f9      	b.n	21128 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
   21134:	4630      	mov	r0, r6
   21136:	f7ff fe9f 	bl	20e78 <usbd_event_transfer_data>
	if (put_evt) {
   2113a:	e78f      	b.n	2105c <usbd_event_handler+0x5c>
		nrfx_usbd_setup_get(&drv_setup);
   2113c:	f107 0018 	add.w	r0, r7, #24
   21140:	f003 fa6a 	bl	24618 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   21144:	7e7b      	ldrb	r3, [r7, #25]
   21146:	2b05      	cmp	r3, #5
   21148:	d103      	bne.n	21152 <usbd_event_handler+0x152>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   2114a:	7e3b      	ldrb	r3, [r7, #24]
   2114c:	f013 0f60 	tst.w	r3, #96	; 0x60
   21150:	d084      	beq.n	2105c <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   21152:	4b07      	ldr	r3, [pc, #28]	; (21170 <usbd_event_handler+0x170>)
   21154:	60fb      	str	r3, [r7, #12]
			evt.evt_type = USBD_EVT_EP;
   21156:	2401      	movs	r4, #1
   21158:	e767      	b.n	2102a <usbd_event_handler+0x2a>
	switch (p_event->type) {
   2115a:	2402      	movs	r4, #2
   2115c:	e765      	b.n	2102a <usbd_event_handler+0x2a>
   2115e:	bf00      	nop
   21160:	20000aa4 	.word	0x20000aa4
   21164:	0003442d 	.word	0x0003442d
   21168:	00034474 	.word	0x00034474
   2116c:	20004430 	.word	0x20004430
   21170:	2000459c 	.word	0x2000459c

00021174 <eps_ctx_init>:
{
   21174:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   21176:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   21178:	f064 007f 	orn	r0, r4, #127	; 0x7f
   2117c:	b2c0      	uxtb	r0, r0
   2117e:	f7ff fdc3 	bl	20d08 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   21182:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   21184:	f00b fca8 	bl	2cad8 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   21188:	2c08      	cmp	r4, #8
   2118a:	d1f5      	bne.n	21178 <eps_ctx_init+0x4>
   2118c:	4d0f      	ldr	r5, [pc, #60]	; (211cc <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2118e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   21190:	b2e0      	uxtb	r0, r4
   21192:	f7ff fdb9 	bl	20d08 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   21196:	6903      	ldr	r3, [r0, #16]
   21198:	b903      	cbnz	r3, 2119c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   2119a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2119c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   2119e:	f00b fc9b 	bl	2cad8 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   211a2:	2c08      	cmp	r4, #8
   211a4:	f105 0540 	add.w	r5, r5, #64	; 0x40
   211a8:	d1f2      	bne.n	21190 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   211aa:	4c09      	ldr	r4, [pc, #36]	; (211d0 <eps_ctx_init+0x5c>)
   211ac:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   211b0:	f00b fc92 	bl	2cad8 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   211b4:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   211b8:	b913      	cbnz	r3, 211c0 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   211ba:	4b06      	ldr	r3, [pc, #24]	; (211d4 <eps_ctx_init+0x60>)
   211bc:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   211c0:	4805      	ldr	r0, [pc, #20]	; (211d8 <eps_ctx_init+0x64>)
   211c2:	f00b fc89 	bl	2cad8 <ep_ctx_reset>
}
   211c6:	2000      	movs	r0, #0
   211c8:	bd38      	pop	{r3, r4, r5, pc}
   211ca:	bf00      	nop
   211cc:	20004230 	.word	0x20004230
   211d0:	20004430 	.word	0x20004430
   211d4:	20003e30 	.word	0x20003e30
   211d8:	2000469c 	.word	0x2000469c

000211dc <usbd_work_handler>:
{
   211dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   211e0:	4ca3      	ldr	r4, [pc, #652]	; (21470 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   211e2:	f8df 8290 	ldr.w	r8, [pc, #656]	; 21474 <usbd_work_handler+0x298>
{
   211e6:	b08b      	sub	sp, #44	; 0x2c
   211e8:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   211ea:	f7ff fde7 	bl	20dbc <usbd_evt_get>
   211ee:	4606      	mov	r6, r0
   211f0:	b910      	cbnz	r0, 211f8 <usbd_work_handler+0x1c>
}
   211f2:	b00b      	add	sp, #44	; 0x2c
   211f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   211f8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   211fc:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   211fe:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   21202:	b93a      	cbnz	r2, 21214 <usbd_work_handler+0x38>
   21204:	2b00      	cmp	r3, #0
   21206:	f000 80ae 	beq.w	21366 <usbd_work_handler+0x18a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2120a:	4649      	mov	r1, r9
   2120c:	4640      	mov	r0, r8
   2120e:	f00c f95b 	bl	2d4c8 <k_mem_slab_free>
}
   21212:	e7ea      	b.n	211ea <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   21214:	2b04      	cmp	r3, #4
   21216:	f200 819d 	bhi.w	21554 <usbd_work_handler+0x378>
   2121a:	e8df f013 	tbh	[pc, r3, lsl #1]
   2121e:	00a4      	.short	0x00a4
   21220:	013d0005 	.word	0x013d0005
   21224:	017d0153 	.word	0x017d0153
			if (!ctx->attached) {
   21228:	f817 3c04 	ldrb.w	r3, [r7, #-4]
   2122c:	b983      	cbnz	r3, 21250 <usbd_work_handler+0x74>
				LOG_ERR("not attached, EP 0x%02x event dropped",
   2122e:	4892      	ldr	r0, [pc, #584]	; (21478 <usbd_work_handler+0x29c>)
   21230:	6803      	ldr	r3, [r0, #0]
   21232:	075b      	lsls	r3, r3, #29
   21234:	d00c      	beq.n	21250 <usbd_work_handler+0x74>
   21236:	4b91      	ldr	r3, [pc, #580]	; (2147c <usbd_work_handler+0x2a0>)
   21238:	9308      	str	r3, [sp, #32]
   2123a:	68b3      	ldr	r3, [r6, #8]
   2123c:	7a5b      	ldrb	r3, [r3, #9]
   2123e:	9309      	str	r3, [sp, #36]	; 0x24
   21240:	aa07      	add	r2, sp, #28
   21242:	2303      	movs	r3, #3
   21244:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21248:	9301      	str	r3, [sp, #4]
   2124a:	9307      	str	r3, [sp, #28]
   2124c:	f00b fc57 	bl	2cafe <z_log_msg2_static_create.constprop.0>
	switch (ep_evt->evt_type) {
   21250:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   21252:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
   21254:	2b03      	cmp	r3, #3
   21256:	d8d8      	bhi.n	2120a <usbd_work_handler+0x2e>
   21258:	e8df f003 	tbb	[pc, r3]
   2125c:	726d3d02 	.word	0x726d3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   21260:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   21262:	2208      	movs	r2, #8
   21264:	2100      	movs	r1, #0
   21266:	4630      	mov	r0, r6
   21268:	f009 f883 	bl	2a372 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2126c:	4b84      	ldr	r3, [pc, #528]	; (21480 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2126e:	4885      	ldr	r0, [pc, #532]	; (21484 <usbd_work_handler+0x2a8>)
   21270:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   21274:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   21276:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   2127a:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   2127c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   21280:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   21284:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   21288:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   2128a:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   2128e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   21292:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   21296:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   21298:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   2129c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   212a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   212a4:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   212a6:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   212a8:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   212aa:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   212ac:	f009 f856 	bl	2a35c <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   212b0:	682b      	ldr	r3, [r5, #0]
   212b2:	7a68      	ldrb	r0, [r5, #9]
   212b4:	2100      	movs	r1, #0
   212b6:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   212b8:	f996 3000 	ldrsb.w	r3, [r6]
   212bc:	2b00      	cmp	r3, #0
   212be:	db06      	blt.n	212ce <usbd_work_handler+0xf2>
   212c0:	88f3      	ldrh	r3, [r6, #6]
   212c2:	b123      	cbz	r3, 212ce <usbd_work_handler+0xf2>
		ctx->ctrl_read_len = usbd_setup->wLength;
   212c4:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   212c8:	f003 f9cc 	bl	24664 <nrfx_usbd_setup_data_clear>
   212cc:	e79d      	b.n	2120a <usbd_work_handler+0x2e>
		ctx->ctrl_read_len = 0U;
   212ce:	2300      	movs	r3, #0
   212d0:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   212d4:	e799      	b.n	2120a <usbd_work_handler+0x2e>
	if (!ep_ctx->read_pending) {
   212d6:	7f6b      	ldrb	r3, [r5, #29]
   212d8:	2b00      	cmp	r3, #0
   212da:	d096      	beq.n	2120a <usbd_work_handler+0x2e>
	if (!ep_ctx->read_complete) {
   212dc:	7f2b      	ldrb	r3, [r5, #28]
   212de:	2b00      	cmp	r3, #0
   212e0:	d093      	beq.n	2120a <usbd_work_handler+0x2e>
	ep_ctx->read_pending = false;
   212e2:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   212e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   212e8:	4867      	ldr	r0, [pc, #412]	; (21488 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
   212ea:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   212ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
   212f0:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   212f2:	f00b fc07 	bl	2cb04 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   212f6:	696b      	ldr	r3, [r5, #20]
   212f8:	9301      	str	r3, [sp, #4]
   212fa:	686b      	ldr	r3, [r5, #4]
   212fc:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   21300:	a901      	add	r1, sp, #4
   21302:	7a68      	ldrb	r0, [r5, #9]
   21304:	f002 ffb8 	bl	24278 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   21308:	4a60      	ldr	r2, [pc, #384]	; (2148c <usbd_work_handler+0x2b0>)
   2130a:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   2130c:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
   2130e:	d00e      	beq.n	2132e <usbd_work_handler+0x152>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   21310:	4859      	ldr	r0, [pc, #356]	; (21478 <usbd_work_handler+0x29c>)
   21312:	6802      	ldr	r2, [r0, #0]
   21314:	0756      	lsls	r6, r2, #29
   21316:	d00a      	beq.n	2132e <usbd_work_handler+0x152>
   21318:	4a5d      	ldr	r2, [pc, #372]	; (21490 <usbd_work_handler+0x2b4>)
   2131a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2131e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   21322:	2303      	movs	r3, #3
   21324:	aa07      	add	r2, sp, #28
   21326:	9300      	str	r3, [sp, #0]
   21328:	9307      	str	r3, [sp, #28]
   2132a:	f00b fbe8 	bl	2cafe <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&ctx->drv_lock);
   2132e:	4856      	ldr	r0, [pc, #344]	; (21488 <usbd_work_handler+0x2ac>)
   21330:	f00b fbea 	bl	2cb08 <k_mutex_unlock.isra.0>
   21334:	e769      	b.n	2120a <usbd_work_handler+0x2e>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   21336:	682b      	ldr	r3, [r5, #0]
   21338:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2133a:	7a68      	ldrb	r0, [r5, #9]
   2133c:	4798      	blx	r3
		break;
   2133e:	e764      	b.n	2120a <usbd_work_handler+0x2e>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   21340:	7aab      	ldrb	r3, [r5, #10]
   21342:	b96b      	cbnz	r3, 21360 <usbd_work_handler+0x184>
   21344:	7feb      	ldrb	r3, [r5, #31]
   21346:	b95b      	cbnz	r3, 21360 <usbd_work_handler+0x184>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21348:	484f      	ldr	r0, [pc, #316]	; (21488 <usbd_work_handler+0x2ac>)
   2134a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2134e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21352:	f00b fbd7 	bl	2cb04 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   21356:	f003 f9b5 	bl	246c4 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   2135a:	484b      	ldr	r0, [pc, #300]	; (21488 <usbd_work_handler+0x2ac>)
   2135c:	f00b fbd4 	bl	2cb08 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   21360:	682b      	ldr	r3, [r5, #0]
   21362:	2102      	movs	r1, #2
   21364:	e7e9      	b.n	2133a <usbd_work_handler+0x15e>
	switch (pwr_evt->state) {
   21366:	7a33      	ldrb	r3, [r6, #8]
   21368:	2b04      	cmp	r3, #4
   2136a:	f63f af4e 	bhi.w	2120a <usbd_work_handler+0x2e>
   2136e:	e8df f003 	tbb	[pc, r3]
   21372:	035b      	.short	0x035b
   21374:	6925      	.short	0x6925
   21376:	75          	.byte	0x75
   21377:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   21378:	f002 ff2e 	bl	241d8 <nrfx_usbd_is_enabled>
   2137c:	4605      	mov	r5, r0
   2137e:	2800      	cmp	r0, #0
   21380:	f47f af43 	bne.w	2120a <usbd_work_handler+0x2e>
			nrfx_usbd_enable();
   21384:	f002 fe6c 	bl	24060 <nrfx_usbd_enable>
   21388:	f3bf 8f5b 	dmb	ish
   2138c:	4941      	ldr	r1, [pc, #260]	; (21494 <usbd_work_handler+0x2b8>)
   2138e:	2301      	movs	r3, #1
   21390:	e851 2f00 	ldrex	r2, [r1]
   21394:	2a00      	cmp	r2, #0
   21396:	d103      	bne.n	213a0 <usbd_work_handler+0x1c4>
   21398:	e841 3000 	strex	r0, r3, [r1]
   2139c:	2800      	cmp	r0, #0
   2139e:	d1f7      	bne.n	21390 <usbd_work_handler+0x1b4>
   213a0:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   213a4:	f47f af31 	bne.w	2120a <usbd_work_handler+0x2e>
   213a8:	f841 5c10 	str.w	r5, [r1, #-16]
   213ac:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   213b0:	69e0      	ldr	r0, [r4, #28]
   213b2:	6163      	str	r3, [r4, #20]
   213b4:	3914      	subs	r1, #20
   213b6:	f005 fb67 	bl	26a88 <onoff_request>
   213ba:	e726      	b.n	2120a <usbd_work_handler+0x2e>
	switch (pwr_evt->state) {
   213bc:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   213be:	f065 007f 	orn	r0, r5, #127	; 0x7f
   213c2:	b2c0      	uxtb	r0, r0
   213c4:	f7ff fca0 	bl	20d08 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   213c8:	7a03      	ldrb	r3, [r0, #8]
   213ca:	b113      	cbz	r3, 213d2 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   213cc:	7a40      	ldrb	r0, [r0, #9]
   213ce:	f003 fb65 	bl	24a9c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   213d2:	3501      	adds	r5, #1
   213d4:	2d08      	cmp	r5, #8
   213d6:	d1f2      	bne.n	213be <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
   213d8:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   213dc:	b11b      	cbz	r3, 213e6 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   213de:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   213e2:	f003 fb5b 	bl	24a9c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   213e6:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   213e8:	b2e8      	uxtb	r0, r5
   213ea:	f7ff fc8d 	bl	20d08 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   213ee:	7a03      	ldrb	r3, [r0, #8]
   213f0:	b113      	cbz	r3, 213f8 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   213f2:	7a40      	ldrb	r0, [r0, #9]
   213f4:	f003 fb52 	bl	24a9c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   213f8:	3501      	adds	r5, #1
   213fa:	2d08      	cmp	r5, #8
   213fc:	d1f4      	bne.n	213e8 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
   213fe:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   21402:	b11b      	cbz	r3, 2140c <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   21404:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   21408:	f003 fb48 	bl	24a9c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   2140c:	2001      	movs	r0, #1
   2140e:	f002 fec5 	bl	2419c <nrfx_usbd_start>
		ctx->ready = true;
   21412:	2301      	movs	r3, #1
   21414:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   21418:	6823      	ldr	r3, [r4, #0]
   2141a:	2b00      	cmp	r3, #0
   2141c:	f43f aef5 	beq.w	2120a <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   21420:	2100      	movs	r1, #0
   21422:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
   21424:	4798      	blx	r3
   21426:	e6f0      	b.n	2120a <usbd_work_handler+0x2e>
		ctx->ready = false;
   21428:	2500      	movs	r5, #0
   2142a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   2142e:	f003 fac1 	bl	249b4 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   21432:	f7ff fdc3 	bl	20fbc <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   21436:	6823      	ldr	r3, [r4, #0]
   21438:	2b00      	cmp	r3, #0
   2143a:	f43f aee6 	beq.w	2120a <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   2143e:	4629      	mov	r1, r5
   21440:	2004      	movs	r0, #4
   21442:	e7ef      	b.n	21424 <usbd_work_handler+0x248>
		if (dev_ready()) {
   21444:	2a00      	cmp	r2, #0
   21446:	f43f aee0 	beq.w	2120a <usbd_work_handler+0x2e>
			nrfx_usbd_suspend();
   2144a:	f003 facb 	bl	249e4 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   2144e:	6823      	ldr	r3, [r4, #0]
   21450:	2b00      	cmp	r3, #0
   21452:	f43f aeda 	beq.w	2120a <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   21456:	2100      	movs	r1, #0
   21458:	2005      	movs	r0, #5
   2145a:	e7e3      	b.n	21424 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
   2145c:	6823      	ldr	r3, [r4, #0]
   2145e:	2b00      	cmp	r3, #0
   21460:	f43f aed3 	beq.w	2120a <usbd_work_handler+0x2e>
   21464:	2a00      	cmp	r2, #0
   21466:	f43f aed0 	beq.w	2120a <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_RESUME, NULL);
   2146a:	2100      	movs	r1, #0
   2146c:	2006      	movs	r0, #6
   2146e:	e7d9      	b.n	21424 <usbd_work_handler+0x248>
   21470:	20004430 	.word	0x20004430
   21474:	20000b74 	.word	0x20000b74
   21478:	20000aa4 	.word	0x20000aa4
   2147c:	00034494 	.word	0x00034494
   21480:	40027000 	.word	0x40027000
   21484:	20004434 	.word	0x20004434
   21488:	20004468 	.word	0x20004468
   2148c:	0bad0000 	.word	0x0bad0000
   21490:	000344ba 	.word	0x000344ba
   21494:	20004450 	.word	0x20004450
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21498:	f107 0510 	add.w	r5, r7, #16
   2149c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   214a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   214a4:	4628      	mov	r0, r5
   214a6:	f00b fb2d 	bl	2cb04 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   214aa:	f7ff fe63 	bl	21174 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   214ae:	4628      	mov	r0, r5
   214b0:	f00b fb2a 	bl	2cb08 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   214b4:	f857 3c28 	ldr.w	r3, [r7, #-40]
   214b8:	2b00      	cmp	r3, #0
   214ba:	f43f aea6 	beq.w	2120a <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_RESET, NULL);
   214be:	2100      	movs	r1, #0
   214c0:	2001      	movs	r0, #1
   214c2:	e7af      	b.n	21424 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
   214c4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   214c8:	b1ab      	cbz	r3, 214f6 <usbd_work_handler+0x31a>
		ep_ctx->read_pending = true;
   214ca:	2501      	movs	r5, #1
   214cc:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   214d0:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   214d4:	f7ff fc88 	bl	20de8 <usbd_evt_alloc>
		if (!ev) {
   214d8:	b9a8      	cbnz	r0, 21506 <usbd_work_handler+0x32a>
			LOG_ERR("Failed to alloc evt");
   214da:	4827      	ldr	r0, [pc, #156]	; (21578 <usbd_work_handler+0x39c>)
   214dc:	6803      	ldr	r3, [r0, #0]
   214de:	075d      	lsls	r5, r3, #29
   214e0:	d009      	beq.n	214f6 <usbd_work_handler+0x31a>
   214e2:	4b26      	ldr	r3, [pc, #152]	; (2157c <usbd_work_handler+0x3a0>)
   214e4:	9308      	str	r3, [sp, #32]
   214e6:	aa07      	add	r2, sp, #28
   214e8:	2302      	movs	r3, #2
   214ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   214ee:	9301      	str	r3, [sp, #4]
   214f0:	9307      	str	r3, [sp, #28]
   214f2:	f00b fb04 	bl	2cafe <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
   214f6:	f857 3c28 	ldr.w	r3, [r7, #-40]
   214fa:	2b00      	cmp	r3, #0
   214fc:	f43f ae85 	beq.w	2120a <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SOF, NULL);
   21500:	2100      	movs	r1, #0
   21502:	200a      	movs	r0, #10
   21504:	e78e      	b.n	21424 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
   21506:	4a1e      	ldr	r2, [pc, #120]	; (21580 <usbd_work_handler+0x3a4>)
		ev->evt_type = USBD_EVT_EP;
   21508:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2150a:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   2150c:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   2150e:	f7ff fc23 	bl	20d58 <usbd_evt_put>
		usbd_work_schedule();
   21512:	f7ff fc27 	bl	20d64 <usbd_work_schedule>
   21516:	e7ee      	b.n	214f6 <usbd_work_handler+0x31a>
				LOG_ERR("USBD event queue full!");
   21518:	4817      	ldr	r0, [pc, #92]	; (21578 <usbd_work_handler+0x39c>)
   2151a:	6803      	ldr	r3, [r0, #0]
   2151c:	0759      	lsls	r1, r3, #29
   2151e:	d009      	beq.n	21534 <usbd_work_handler+0x358>
   21520:	4b18      	ldr	r3, [pc, #96]	; (21584 <usbd_work_handler+0x3a8>)
   21522:	9308      	str	r3, [sp, #32]
   21524:	aa07      	add	r2, sp, #28
   21526:	2302      	movs	r3, #2
   21528:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2152c:	9301      	str	r3, [sp, #4]
   2152e:	9307      	str	r3, [sp, #28]
   21530:	f00b fae5 	bl	2cafe <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
   21534:	f00b fe66 	bl	2d204 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   21538:	f003 fa3c 	bl	249b4 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   2153c:	f002 fd86 	bl	2404c <nrfx_usbd_uninit>
	usbd_evt_flush();
   21540:	f7ff fc44 	bl	20dcc <usbd_evt_flush>
	ret = eps_ctx_init();
   21544:	f7ff fe16 	bl	21174 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   21548:	f00b fe55 	bl	2d1f6 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   2154c:	480e      	ldr	r0, [pc, #56]	; (21588 <usbd_work_handler+0x3ac>)
   2154e:	f002 fe4d 	bl	241ec <nrfx_usbd_init>
}
   21552:	e65a      	b.n	2120a <usbd_work_handler+0x2e>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   21554:	4808      	ldr	r0, [pc, #32]	; (21578 <usbd_work_handler+0x39c>)
   21556:	6802      	ldr	r2, [r0, #0]
   21558:	0752      	lsls	r2, r2, #29
   2155a:	f43f ae56 	beq.w	2120a <usbd_work_handler+0x2e>
   2155e:	4a0b      	ldr	r2, [pc, #44]	; (2158c <usbd_work_handler+0x3b0>)
   21560:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		switch (ev->evt_type) {
   21564:	e9cd 2308 	strd	r2, r3, [sp, #32]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   21568:	2303      	movs	r3, #3
   2156a:	aa07      	add	r2, sp, #28
   2156c:	9301      	str	r3, [sp, #4]
   2156e:	9307      	str	r3, [sp, #28]
   21570:	f00b fac5 	bl	2cafe <z_log_msg2_static_create.constprop.0>
   21574:	e649      	b.n	2120a <usbd_work_handler+0x2e>
   21576:	bf00      	nop
   21578:	20000aa4 	.word	0x20000aa4
   2157c:	000344e0 	.word	0x000344e0
   21580:	2000469c 	.word	0x2000469c
   21584:	000344f4 	.word	0x000344f4
   21588:	00021001 	.word	0x00021001
   2158c:	0003450b 	.word	0x0003450b

00021590 <usb_dc_attach>:
{
   21590:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   21592:	4d1a      	ldr	r5, [pc, #104]	; (215fc <usb_dc_attach+0x6c>)
   21594:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   21598:	bb5c      	cbnz	r4, 215f2 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   2159a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2159e:	f00b ffe7 	bl	2d570 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   215a2:	4620      	mov	r0, r4
   215a4:	f000 fca4 	bl	21ef0 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   215a8:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   215aa:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   215ac:	2101      	movs	r1, #1
   215ae:	2027      	movs	r0, #39	; 0x27
   215b0:	f7e9 ff56 	bl	b460 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   215b4:	4812      	ldr	r0, [pc, #72]	; (21600 <usb_dc_attach+0x70>)
   215b6:	f002 fe19 	bl	241ec <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   215ba:	4b12      	ldr	r3, [pc, #72]	; (21604 <usb_dc_attach+0x74>)
   215bc:	4298      	cmp	r0, r3
   215be:	d11a      	bne.n	215f6 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   215c0:	f00b fe19 	bl	2d1f6 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   215c4:	f7ff fdd6 	bl	21174 <eps_ctx_init>
	if (ret == 0) {
   215c8:	4604      	mov	r4, r0
   215ca:	b910      	cbnz	r0, 215d2 <usb_dc_attach+0x42>
		ctx->attached = true;
   215cc:	2301      	movs	r3, #1
   215ce:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   215d2:	4b0d      	ldr	r3, [pc, #52]	; (21608 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   215d4:	681b      	ldr	r3, [r3, #0]
   215d6:	b10b      	cbz	r3, 215dc <usb_dc_attach+0x4c>
		usbd_work_schedule();
   215d8:	f7ff fbc4 	bl	20d64 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   215dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   215e0:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   215e4:	07db      	lsls	r3, r3, #31
   215e6:	d502      	bpl.n	215ee <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   215e8:	2000      	movs	r0, #0
   215ea:	f7ff fcb5 	bl	20f58 <usb_dc_power_event_handler>
}
   215ee:	4620      	mov	r0, r4
   215f0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   215f2:	2400      	movs	r4, #0
   215f4:	e7fb      	b.n	215ee <usb_dc_attach+0x5e>
		return -EIO;
   215f6:	f06f 0404 	mvn.w	r4, #4
   215fa:	e7f8      	b.n	215ee <usb_dc_attach+0x5e>
   215fc:	20004430 	.word	0x20004430
   21600:	00021001 	.word	0x00021001
   21604:	0bad0000 	.word	0x0bad0000
   21608:	20000c98 	.word	0x20000c98

0002160c <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   2160c:	4b07      	ldr	r3, [pc, #28]	; (2162c <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   2160e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   21612:	b13a      	cbz	r2, 21624 <usb_dc_set_address+0x18>
   21614:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   21618:	2b00      	cmp	r3, #0
   2161a:	bf0c      	ite	eq
   2161c:	f06f 0012 	mvneq.w	r0, #18
   21620:	2000      	movne	r0, #0
   21622:	4770      	bx	lr
		return -ENODEV;
   21624:	f06f 0012 	mvn.w	r0, #18
}
   21628:	4770      	bx	lr
   2162a:	bf00      	nop
   2162c:	20004430 	.word	0x20004430

00021630 <usb_dc_ep_check_cap>:
{
   21630:	b500      	push	{lr}
   21632:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   21634:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   21636:	791b      	ldrb	r3, [r3, #4]
{
   21638:	b089      	sub	sp, #36	; 0x24
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2163a:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2163e:	b98b      	cbnz	r3, 21664 <usb_dc_ep_check_cap+0x34>
   21640:	b358      	cbz	r0, 2169a <usb_dc_ep_check_cap+0x6a>
		LOG_ERR("invalid endpoint configuration");
   21642:	4817      	ldr	r0, [pc, #92]	; (216a0 <usb_dc_ep_check_cap+0x70>)
   21644:	6803      	ldr	r3, [r0, #0]
   21646:	0759      	lsls	r1, r3, #29
   21648:	d009      	beq.n	2165e <usb_dc_ep_check_cap+0x2e>
   2164a:	4b16      	ldr	r3, [pc, #88]	; (216a4 <usb_dc_ep_check_cap+0x74>)
		LOG_ERR("invalid endpoint index/address");
   2164c:	9306      	str	r3, [sp, #24]
   2164e:	2302      	movs	r3, #2
   21650:	9301      	str	r3, [sp, #4]
   21652:	9305      	str	r3, [sp, #20]
   21654:	aa05      	add	r2, sp, #20
   21656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2165a:	f00b fa50 	bl	2cafe <z_log_msg2_static_create.constprop.0>
		return -1;
   2165e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21662:	e01a      	b.n	2169a <usb_dc_ep_check_cap+0x6a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   21664:	2808      	cmp	r0, #8
   21666:	d905      	bls.n	21674 <usb_dc_ep_check_cap+0x44>
		LOG_ERR("invalid endpoint index/address");
   21668:	480d      	ldr	r0, [pc, #52]	; (216a0 <usb_dc_ep_check_cap+0x70>)
   2166a:	6803      	ldr	r3, [r0, #0]
   2166c:	075a      	lsls	r2, r3, #29
   2166e:	d0f6      	beq.n	2165e <usb_dc_ep_check_cap+0x2e>
   21670:	4b0d      	ldr	r3, [pc, #52]	; (216a8 <usb_dc_ep_check_cap+0x78>)
   21672:	e7eb      	b.n	2164c <usb_dc_ep_check_cap+0x1c>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   21674:	2b01      	cmp	r3, #1
   21676:	d10f      	bne.n	21698 <usb_dc_ep_check_cap+0x68>
   21678:	0713      	lsls	r3, r2, #28
   2167a:	d40d      	bmi.n	21698 <usb_dc_ep_check_cap+0x68>
		LOG_WRN("invalid endpoint type");
   2167c:	4808      	ldr	r0, [pc, #32]	; (216a0 <usb_dc_ep_check_cap+0x70>)
   2167e:	6803      	ldr	r3, [r0, #0]
   21680:	f013 0f06 	tst.w	r3, #6
   21684:	d0eb      	beq.n	2165e <usb_dc_ep_check_cap+0x2e>
   21686:	4b09      	ldr	r3, [pc, #36]	; (216ac <usb_dc_ep_check_cap+0x7c>)
   21688:	9306      	str	r3, [sp, #24]
   2168a:	2302      	movs	r3, #2
   2168c:	9301      	str	r3, [sp, #4]
   2168e:	9305      	str	r3, [sp, #20]
   21690:	aa05      	add	r2, sp, #20
   21692:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   21696:	e7e0      	b.n	2165a <usb_dc_ep_check_cap+0x2a>
	return 0;
   21698:	2000      	movs	r0, #0
}
   2169a:	b009      	add	sp, #36	; 0x24
   2169c:	f85d fb04 	ldr.w	pc, [sp], #4
   216a0:	20000aa4 	.word	0x20000aa4
   216a4:	00034522 	.word	0x00034522
   216a8:	00034541 	.word	0x00034541
   216ac:	00034560 	.word	0x00034560

000216b0 <usb_dc_ep_configure>:
{
   216b0:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   216b2:	4b18      	ldr	r3, [pc, #96]	; (21714 <usb_dc_ep_configure+0x64>)
	if (!dev_attached()) {
   216b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   216b8:	b088      	sub	sp, #32
   216ba:	4601      	mov	r1, r0
	if (!dev_attached()) {
   216bc:	b333      	cbz	r3, 2170c <usb_dc_ep_configure+0x5c>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   216be:	7804      	ldrb	r4, [r0, #0]
   216c0:	4620      	mov	r0, r4
   216c2:	f7ff fb21 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   216c6:	b918      	cbnz	r0, 216d0 <usb_dc_ep_configure+0x20>
			return -EINVAL;
   216c8:	f06f 0015 	mvn.w	r0, #21
}
   216cc:	b008      	add	sp, #32
   216ce:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   216d0:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   216d2:	790b      	ldrb	r3, [r1, #4]
   216d4:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   216d6:	8849      	ldrh	r1, [r1, #2]
   216d8:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   216da:	0722      	lsls	r2, r4, #28
   216dc:	d411      	bmi.n	21702 <usb_dc_ep_configure+0x52>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   216de:	1e4b      	subs	r3, r1, #1
   216e0:	420b      	tst	r3, r1
   216e2:	d00e      	beq.n	21702 <usb_dc_ep_configure+0x52>
			LOG_ERR("EP max packet size must be a power of 2");
   216e4:	480c      	ldr	r0, [pc, #48]	; (21718 <usb_dc_ep_configure+0x68>)
   216e6:	6803      	ldr	r3, [r0, #0]
   216e8:	075b      	lsls	r3, r3, #29
   216ea:	d0ed      	beq.n	216c8 <usb_dc_ep_configure+0x18>
   216ec:	4b0b      	ldr	r3, [pc, #44]	; (2171c <usb_dc_ep_configure+0x6c>)
   216ee:	9306      	str	r3, [sp, #24]
   216f0:	aa05      	add	r2, sp, #20
   216f2:	2302      	movs	r3, #2
   216f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   216f8:	9301      	str	r3, [sp, #4]
   216fa:	9305      	str	r3, [sp, #20]
   216fc:	f00b f9ff 	bl	2cafe <z_log_msg2_static_create.constprop.0>
   21700:	e7e2      	b.n	216c8 <usb_dc_ep_configure+0x18>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   21702:	4620      	mov	r0, r4
   21704:	f00b fe0c 	bl	2d320 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   21708:	2000      	movs	r0, #0
   2170a:	e7df      	b.n	216cc <usb_dc_ep_configure+0x1c>
		return -ENODEV;
   2170c:	f06f 0012 	mvn.w	r0, #18
   21710:	e7dc      	b.n	216cc <usb_dc_ep_configure+0x1c>
   21712:	bf00      	nop
   21714:	20004430 	.word	0x20004430
   21718:	20000aa4 	.word	0x20000aa4
   2171c:	00034576 	.word	0x00034576

00021720 <usb_dc_ep_set_stall>:
{
   21720:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   21722:	4b1a      	ldr	r3, [pc, #104]	; (2178c <usb_dc_ep_set_stall+0x6c>)
	if (!dev_attached() || !dev_ready()) {
   21724:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   21728:	b088      	sub	sp, #32
   2172a:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   2172c:	b35a      	cbz	r2, 21786 <usb_dc_ep_set_stall+0x66>
   2172e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   21732:	b343      	cbz	r3, 21786 <usb_dc_ep_set_stall+0x66>
	ep_ctx = endpoint_ctx(ep);
   21734:	f7ff fae8 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   21738:	4604      	mov	r4, r0
   2173a:	b308      	cbz	r0, 21780 <usb_dc_ep_set_stall+0x60>
	switch (ep_ctx->cfg.type) {
   2173c:	7a83      	ldrb	r3, [r0, #10]
   2173e:	2b01      	cmp	r3, #1
   21740:	d010      	beq.n	21764 <usb_dc_ep_set_stall+0x44>
   21742:	d908      	bls.n	21756 <usb_dc_ep_set_stall+0x36>
   21744:	3b02      	subs	r3, #2
   21746:	2b01      	cmp	r3, #1
   21748:	d908      	bls.n	2175c <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2174a:	6963      	ldr	r3, [r4, #20]
   2174c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   2174e:	2000      	movs	r0, #0
   21750:	60e0      	str	r0, [r4, #12]
}
   21752:	b008      	add	sp, #32
   21754:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   21756:	f002 ffbd 	bl	246d4 <nrfx_usbd_setup_stall>
		break;
   2175a:	e7f6      	b.n	2174a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   2175c:	4608      	mov	r0, r1
   2175e:	f002 ff2d 	bl	245bc <nrfx_usbd_ep_stall>
		break;
   21762:	e7f2      	b.n	2174a <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
   21764:	480a      	ldr	r0, [pc, #40]	; (21790 <usb_dc_ep_set_stall+0x70>)
   21766:	6803      	ldr	r3, [r0, #0]
   21768:	075b      	lsls	r3, r3, #29
   2176a:	d009      	beq.n	21780 <usb_dc_ep_set_stall+0x60>
   2176c:	4b09      	ldr	r3, [pc, #36]	; (21794 <usb_dc_ep_set_stall+0x74>)
   2176e:	9306      	str	r3, [sp, #24]
   21770:	aa05      	add	r2, sp, #20
   21772:	2302      	movs	r3, #2
   21774:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21778:	9301      	str	r3, [sp, #4]
   2177a:	9305      	str	r3, [sp, #20]
   2177c:	f00b f9bf 	bl	2cafe <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   21780:	f06f 0015 	mvn.w	r0, #21
   21784:	e7e5      	b.n	21752 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
   21786:	f06f 0012 	mvn.w	r0, #18
   2178a:	e7e2      	b.n	21752 <usb_dc_ep_set_stall+0x32>
   2178c:	20004430 	.word	0x20004430
   21790:	20000aa4 	.word	0x20000aa4
   21794:	0003459e 	.word	0x0003459e

00021798 <usb_dc_ep_clear_stall>:
{
   21798:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2179a:	4b0e      	ldr	r3, [pc, #56]	; (217d4 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   2179c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   217a0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   217a2:	b182      	cbz	r2, 217c6 <usb_dc_ep_clear_stall+0x2e>
   217a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   217a8:	b16b      	cbz	r3, 217c6 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   217aa:	f7ff faad 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   217ae:	b168      	cbz	r0, 217cc <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   217b0:	f015 0408 	ands.w	r4, r5, #8
   217b4:	d10a      	bne.n	217cc <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   217b6:	4628      	mov	r0, r5
   217b8:	f002 ff22 	bl	24600 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   217bc:	4628      	mov	r0, r5
   217be:	f003 f9bf 	bl	24b40 <nrfx_usbd_ep_stall_clear>
	return 0;
   217c2:	4620      	mov	r0, r4
}
   217c4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   217c6:	f06f 0012 	mvn.w	r0, #18
   217ca:	e7fb      	b.n	217c4 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   217cc:	f06f 0015 	mvn.w	r0, #21
   217d0:	e7f8      	b.n	217c4 <usb_dc_ep_clear_stall+0x2c>
   217d2:	bf00      	nop
   217d4:	20004430 	.word	0x20004430

000217d8 <usb_dc_ep_is_stalled>:
{
   217d8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   217da:	4b0c      	ldr	r3, [pc, #48]	; (2180c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   217dc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   217e0:	4605      	mov	r5, r0
   217e2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   217e4:	b162      	cbz	r2, 21800 <usb_dc_ep_is_stalled+0x28>
   217e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   217ea:	b14b      	cbz	r3, 21800 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   217ec:	f7ff fa8c 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   217f0:	b148      	cbz	r0, 21806 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   217f2:	b141      	cbz	r1, 21806 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   217f4:	4628      	mov	r0, r5
   217f6:	f002 fee9 	bl	245cc <nrfx_usbd_ep_stall_check>
   217fa:	7020      	strb	r0, [r4, #0]
	return 0;
   217fc:	2000      	movs	r0, #0
}
   217fe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   21800:	f06f 0012 	mvn.w	r0, #18
   21804:	e7fb      	b.n	217fe <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   21806:	f06f 0015 	mvn.w	r0, #21
   2180a:	e7f8      	b.n	217fe <usb_dc_ep_is_stalled+0x26>
   2180c:	20004430 	.word	0x20004430

00021810 <usb_dc_ep_enable>:
{
   21810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   21812:	4f13      	ldr	r7, [pc, #76]	; (21860 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   21814:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   21818:	4604      	mov	r4, r0
	if (!dev_attached()) {
   2181a:	b1bb      	cbz	r3, 2184c <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   2181c:	f7ff fa74 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   21820:	4605      	mov	r5, r0
   21822:	b1b0      	cbz	r0, 21852 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   21824:	0723      	lsls	r3, r4, #28
   21826:	d405      	bmi.n	21834 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   21828:	4620      	mov	r0, r4
   2182a:	f002 fee9 	bl	24600 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   2182e:	4620      	mov	r0, r4
   21830:	f003 f986 	bl	24b40 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   21834:	7a2e      	ldrb	r6, [r5, #8]
   21836:	b97e      	cbnz	r6, 21858 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   21838:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   2183c:	2301      	movs	r3, #1
   2183e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   21840:	b118      	cbz	r0, 2184a <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   21842:	4620      	mov	r0, r4
   21844:	f003 f92a 	bl	24a9c <nrfx_usbd_ep_enable>
	return 0;
   21848:	4630      	mov	r0, r6
}
   2184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   2184c:	f06f 0012 	mvn.w	r0, #18
   21850:	e7fb      	b.n	2184a <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   21852:	f06f 0015 	mvn.w	r0, #21
   21856:	e7f8      	b.n	2184a <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   21858:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2185c:	e7f5      	b.n	2184a <usb_dc_ep_enable+0x3a>
   2185e:	bf00      	nop
   21860:	20004430 	.word	0x20004430

00021864 <usb_dc_ep_disable>:
{
   21864:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   21866:	4b11      	ldr	r3, [pc, #68]	; (218ac <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   21868:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2186c:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   2186e:	b19a      	cbz	r2, 21898 <usb_dc_ep_disable+0x34>
   21870:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   21874:	b183      	cbz	r3, 21898 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   21876:	f7ff fa47 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   2187a:	4605      	mov	r5, r0
   2187c:	b178      	cbz	r0, 2189e <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   2187e:	7a03      	ldrb	r3, [r0, #8]
   21880:	b183      	cbz	r3, 218a4 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   21882:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   21884:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   21886:	f003 f8dd 	bl	24a44 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   2188a:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   2188c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   2188e:	f00b f923 	bl	2cad8 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   21892:	722c      	strb	r4, [r5, #8]
	return 0;
   21894:	4620      	mov	r0, r4
}
   21896:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   21898:	f06f 0012 	mvn.w	r0, #18
   2189c:	e7fb      	b.n	21896 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   2189e:	f06f 0015 	mvn.w	r0, #21
   218a2:	e7f8      	b.n	21896 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   218a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   218a8:	e7f5      	b.n	21896 <usb_dc_ep_disable+0x32>
   218aa:	bf00      	nop
   218ac:	20004430 	.word	0x20004430

000218b0 <usb_dc_ep_write>:
{
   218b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   218b4:	f8df 8114 	ldr.w	r8, [pc, #276]	; 219cc <usb_dc_ep_write+0x11c>
{
   218b8:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   218ba:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   218be:	b08b      	sub	sp, #44	; 0x2c
   218c0:	4607      	mov	r7, r0
   218c2:	4689      	mov	r9, r1
   218c4:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   218c6:	2b00      	cmp	r3, #0
   218c8:	d07d      	beq.n	219c6 <usb_dc_ep_write+0x116>
   218ca:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   218ce:	2b00      	cmp	r3, #0
   218d0:	d079      	beq.n	219c6 <usb_dc_ep_write+0x116>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   218d2:	0605      	lsls	r5, r0, #24
   218d4:	d514      	bpl.n	21900 <usb_dc_ep_write+0x50>
	ep_ctx = endpoint_ctx(ep);
   218d6:	f7ff fa17 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   218da:	4605      	mov	r5, r0
   218dc:	b180      	cbz	r0, 21900 <usb_dc_ep_write+0x50>
	if (!ep_ctx->cfg.en) {
   218de:	7a03      	ldrb	r3, [r0, #8]
   218e0:	b98b      	cbnz	r3, 21906 <usb_dc_ep_write+0x56>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   218e2:	483b      	ldr	r0, [pc, #236]	; (219d0 <usb_dc_ep_write+0x120>)
   218e4:	6803      	ldr	r3, [r0, #0]
   218e6:	0759      	lsls	r1, r3, #29
   218e8:	d00a      	beq.n	21900 <usb_dc_ep_write+0x50>
   218ea:	4b3a      	ldr	r3, [pc, #232]	; (219d4 <usb_dc_ep_write+0x124>)
   218ec:	aa07      	add	r2, sp, #28
   218ee:	e9cd 3708 	strd	r3, r7, [sp, #32]
   218f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   218f6:	2303      	movs	r3, #3
   218f8:	9301      	str	r3, [sp, #4]
   218fa:	9307      	str	r3, [sp, #28]
   218fc:	f00b f8ff 	bl	2cafe <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   21900:	f06f 0415 	mvn.w	r4, #21
   21904:	e00f      	b.n	21926 <usb_dc_ep_write+0x76>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2190a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2190e:	f108 0038 	add.w	r0, r8, #56	; 0x38
   21912:	f00b f8f7 	bl	2cb04 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   21916:	7fab      	ldrb	r3, [r5, #30]
   21918:	b14b      	cbz	r3, 2192e <usb_dc_ep_write+0x7e>
		k_mutex_unlock(&ctx->drv_lock);
   2191a:	f108 0038 	add.w	r0, r8, #56	; 0x38
   2191e:	f00b f8f3 	bl	2cb08 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   21922:	f06f 040a 	mvn.w	r4, #10
}
   21926:	4620      	mov	r0, r4
   21928:	b00b      	add	sp, #44	; 0x2c
   2192a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   2192e:	b916      	cbnz	r6, 21936 <usb_dc_ep_write+0x86>
   21930:	7feb      	ldrb	r3, [r5, #31]
   21932:	b103      	cbz	r3, 21936 <usb_dc_ep_write+0x86>
		ep_ctx->trans_zlp = false;
   21934:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   21936:	7aab      	ldrb	r3, [r5, #10]
   21938:	b9bb      	cbnz	r3, 2196a <usb_dc_ep_write+0xba>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   2193a:	b15e      	cbz	r6, 21954 <usb_dc_ep_write+0xa4>
   2193c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   21940:	429e      	cmp	r6, r3
   21942:	d207      	bcs.n	21954 <usb_dc_ep_write+0xa4>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   21944:	686a      	ldr	r2, [r5, #4]
   21946:	fbb6 f3f2 	udiv	r3, r6, r2
   2194a:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   2194e:	b90b      	cbnz	r3, 21954 <usb_dc_ep_write+0xa4>
			ep_ctx->trans_zlp = true;
   21950:	2301      	movs	r3, #1
   21952:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   21954:	f002 fec6 	bl	246e4 <nrfx_usbd_last_setup_dir_get>
   21958:	4287      	cmp	r7, r0
   2195a:	d006      	beq.n	2196a <usb_dc_ep_write+0xba>
		nrfx_usbd_setup_clear();
   2195c:	f002 feb2 	bl	246c4 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   21960:	481d      	ldr	r0, [pc, #116]	; (219d8 <usb_dc_ep_write+0x128>)
   21962:	f00b f8d1 	bl	2cb08 <k_mutex_unlock.isra.0>
		return 0;
   21966:	2400      	movs	r4, #0
   21968:	e7dd      	b.n	21926 <usb_dc_ep_write+0x76>
	ep_ctx->write_in_progress = true;
   2196a:	2301      	movs	r3, #1
   2196c:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   2196e:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   21972:	a901      	add	r1, sp, #4
   21974:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   21976:	e9cd 9601 	strd	r9, r6, [sp, #4]
   2197a:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   2197e:	f002 fc7b 	bl	24278 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   21982:	4a16      	ldr	r2, [pc, #88]	; (219dc <usb_dc_ep_write+0x12c>)
   21984:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   21986:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
   21988:	d016      	beq.n	219b8 <usb_dc_ep_write+0x108>
		ep_ctx->write_in_progress = false;
   2198a:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   2198e:	b10c      	cbz	r4, 21994 <usb_dc_ep_write+0xe4>
			*ret_bytes = 0;
   21990:	f8c4 8000 	str.w	r8, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   21994:	480e      	ldr	r0, [pc, #56]	; (219d0 <usb_dc_ep_write+0x120>)
   21996:	6802      	ldr	r2, [r0, #0]
   21998:	0752      	lsls	r2, r2, #29
   2199a:	d00a      	beq.n	219b2 <usb_dc_ep_write+0x102>
   2199c:	4a10      	ldr	r2, [pc, #64]	; (219e0 <usb_dc_ep_write+0x130>)
   2199e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   219a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   219a6:	2303      	movs	r3, #3
   219a8:	aa07      	add	r2, sp, #28
   219aa:	9300      	str	r3, [sp, #0]
   219ac:	9307      	str	r3, [sp, #28]
   219ae:	f00b f8a6 	bl	2cafe <z_log_msg2_static_create.constprop.0>
		result = -EIO;
   219b2:	f06f 0404 	mvn.w	r4, #4
   219b6:	e002      	b.n	219be <usb_dc_ep_write+0x10e>
		if (ret_bytes) {
   219b8:	b10c      	cbz	r4, 219be <usb_dc_ep_write+0x10e>
			*ret_bytes = data_len;
   219ba:	6026      	str	r6, [r4, #0]
	int result = 0;
   219bc:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   219be:	4806      	ldr	r0, [pc, #24]	; (219d8 <usb_dc_ep_write+0x128>)
   219c0:	f00b f8a2 	bl	2cb08 <k_mutex_unlock.isra.0>
	return result;
   219c4:	e7af      	b.n	21926 <usb_dc_ep_write+0x76>
		return -ENODEV;
   219c6:	f06f 0412 	mvn.w	r4, #18
   219ca:	e7ac      	b.n	21926 <usb_dc_ep_write+0x76>
   219cc:	20004430 	.word	0x20004430
   219d0:	20000aa4 	.word	0x20000aa4
   219d4:	000345c0 	.word	0x000345c0
   219d8:	20004468 	.word	0x20004468
   219dc:	0bad0000 	.word	0x0bad0000
   219e0:	000345df 	.word	0x000345df

000219e4 <usb_dc_ep_read_wait>:
{
   219e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   219e8:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   219ea:	4b2b      	ldr	r3, [pc, #172]	; (21a98 <usb_dc_ep_read_wait+0xb4>)
{
   219ec:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   219ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   219f2:	b088      	sub	sp, #32
   219f4:	4680      	mov	r8, r0
   219f6:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   219f8:	2a00      	cmp	r2, #0
   219fa:	d049      	beq.n	21a90 <usb_dc_ep_read_wait+0xac>
   219fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   21a00:	2b00      	cmp	r3, #0
   21a02:	d045      	beq.n	21a90 <usb_dc_ep_read_wait+0xac>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   21a04:	f010 0f80 	tst.w	r0, #128	; 0x80
   21a08:	d117      	bne.n	21a3a <usb_dc_ep_read_wait+0x56>
	if (!data && max_data_len) {
   21a0a:	b901      	cbnz	r1, 21a0e <usb_dc_ep_read_wait+0x2a>
   21a0c:	b9af      	cbnz	r7, 21a3a <usb_dc_ep_read_wait+0x56>
	ep_ctx = endpoint_ctx(ep);
   21a0e:	4640      	mov	r0, r8
   21a10:	f7ff f97a 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   21a14:	4604      	mov	r4, r0
   21a16:	b180      	cbz	r0, 21a3a <usb_dc_ep_read_wait+0x56>
	if (!ep_ctx->cfg.en) {
   21a18:	7a03      	ldrb	r3, [r0, #8]
   21a1a:	b98b      	cbnz	r3, 21a40 <usb_dc_ep_read_wait+0x5c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   21a1c:	481f      	ldr	r0, [pc, #124]	; (21a9c <usb_dc_ep_read_wait+0xb8>)
   21a1e:	6803      	ldr	r3, [r0, #0]
   21a20:	075b      	lsls	r3, r3, #29
   21a22:	d00a      	beq.n	21a3a <usb_dc_ep_read_wait+0x56>
   21a24:	4b1e      	ldr	r3, [pc, #120]	; (21aa0 <usb_dc_ep_read_wait+0xbc>)
   21a26:	aa05      	add	r2, sp, #20
   21a28:	e9cd 3806 	strd	r3, r8, [sp, #24]
   21a2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21a30:	2303      	movs	r3, #3
   21a32:	9301      	str	r3, [sp, #4]
   21a34:	9305      	str	r3, [sp, #20]
   21a36:	f00b f862 	bl	2cafe <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   21a3a:	f06f 0015 	mvn.w	r0, #21
   21a3e:	e013      	b.n	21a68 <usb_dc_ep_read_wait+0x84>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21a44:	4817      	ldr	r0, [pc, #92]	; (21aa4 <usb_dc_ep_read_wait+0xc0>)
   21a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21a4a:	f00b f85b 	bl	2cb04 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   21a4e:	68e3      	ldr	r3, [r4, #12]
   21a50:	42bb      	cmp	r3, r7
   21a52:	4698      	mov	r8, r3
   21a54:	bf28      	it	cs
   21a56:	46b8      	movcs	r8, r7
	if (!data && !max_data_len) {
   21a58:	b94e      	cbnz	r6, 21a6e <usb_dc_ep_read_wait+0x8a>
   21a5a:	b947      	cbnz	r7, 21a6e <usb_dc_ep_read_wait+0x8a>
		if (read_bytes) {
   21a5c:	b105      	cbz	r5, 21a60 <usb_dc_ep_read_wait+0x7c>
			*read_bytes = ep_ctx->buf.len;
   21a5e:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   21a60:	4810      	ldr	r0, [pc, #64]	; (21aa4 <usb_dc_ep_read_wait+0xc0>)
   21a62:	f00b f851 	bl	2cb08 <k_mutex_unlock.isra.0>
		return 0;
   21a66:	2000      	movs	r0, #0
}
   21a68:	b008      	add	sp, #32
   21a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   21a6e:	69a1      	ldr	r1, [r4, #24]
   21a70:	4642      	mov	r2, r8
   21a72:	4630      	mov	r0, r6
   21a74:	f008 fc72 	bl	2a35c <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   21a78:	69a3      	ldr	r3, [r4, #24]
   21a7a:	4443      	add	r3, r8
   21a7c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   21a7e:	68e3      	ldr	r3, [r4, #12]
   21a80:	eba3 0308 	sub.w	r3, r3, r8
   21a84:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   21a86:	2d00      	cmp	r5, #0
   21a88:	d0ea      	beq.n	21a60 <usb_dc_ep_read_wait+0x7c>
		*read_bytes = bytes_to_copy;
   21a8a:	f8c5 8000 	str.w	r8, [r5]
   21a8e:	e7e7      	b.n	21a60 <usb_dc_ep_read_wait+0x7c>
		return -ENODEV;
   21a90:	f06f 0012 	mvn.w	r0, #18
   21a94:	e7e8      	b.n	21a68 <usb_dc_ep_read_wait+0x84>
   21a96:	bf00      	nop
   21a98:	20004430 	.word	0x20004430
   21a9c:	20000aa4 	.word	0x20000aa4
   21aa0:	000345c0 	.word	0x000345c0
   21aa4:	20004468 	.word	0x20004468

00021aa8 <usb_dc_ep_read_continue>:
{
   21aa8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   21aaa:	4d27      	ldr	r5, [pc, #156]	; (21b48 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
   21aac:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
   21ab0:	b088      	sub	sp, #32
   21ab2:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   21ab4:	2b00      	cmp	r3, #0
   21ab6:	d044      	beq.n	21b42 <usb_dc_ep_read_continue+0x9a>
   21ab8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   21abc:	2b00      	cmp	r3, #0
   21abe:	d040      	beq.n	21b42 <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   21ac0:	0602      	lsls	r2, r0, #24
   21ac2:	d414      	bmi.n	21aee <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
   21ac4:	f7ff f920 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   21ac8:	4604      	mov	r4, r0
   21aca:	b180      	cbz	r0, 21aee <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
   21acc:	7a03      	ldrb	r3, [r0, #8]
   21ace:	b98b      	cbnz	r3, 21af4 <usb_dc_ep_read_continue+0x4c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   21ad0:	481e      	ldr	r0, [pc, #120]	; (21b4c <usb_dc_ep_read_continue+0xa4>)
   21ad2:	6803      	ldr	r3, [r0, #0]
   21ad4:	075b      	lsls	r3, r3, #29
   21ad6:	d00a      	beq.n	21aee <usb_dc_ep_read_continue+0x46>
   21ad8:	4b1d      	ldr	r3, [pc, #116]	; (21b50 <usb_dc_ep_read_continue+0xa8>)
   21ada:	aa05      	add	r2, sp, #20
   21adc:	e9cd 3106 	strd	r3, r1, [sp, #24]
   21ae0:	2303      	movs	r3, #3
   21ae2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21ae6:	9301      	str	r3, [sp, #4]
   21ae8:	9305      	str	r3, [sp, #20]
   21aea:	f00b f808 	bl	2cafe <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   21aee:	f06f 0015 	mvn.w	r0, #21
   21af2:	e018      	b.n	21b26 <usb_dc_ep_read_continue+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   21af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21afc:	f105 0038 	add.w	r0, r5, #56	; 0x38
   21b00:	f00b f800 	bl	2cb04 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   21b04:	68e3      	ldr	r3, [r4, #12]
   21b06:	b9bb      	cbnz	r3, 21b38 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
   21b08:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   21b0a:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   21b0c:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   21b0e:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   21b10:	7f63      	ldrb	r3, [r4, #29]
   21b12:	b18b      	cbz	r3, 21b38 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
   21b14:	f7ff f968 	bl	20de8 <usbd_evt_alloc>
			if (!ev) {
   21b18:	b938      	cbnz	r0, 21b2a <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
   21b1a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   21b1e:	f00a fff3 	bl	2cb08 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   21b22:	f06f 000b 	mvn.w	r0, #11
}
   21b26:	b008      	add	sp, #32
   21b28:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   21b2a:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   21b2c:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   21b2e:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   21b30:	f7ff f912 	bl	20d58 <usbd_evt_put>
			usbd_work_schedule();
   21b34:	f7ff f916 	bl	20d64 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   21b38:	4806      	ldr	r0, [pc, #24]	; (21b54 <usb_dc_ep_read_continue+0xac>)
   21b3a:	f00a ffe5 	bl	2cb08 <k_mutex_unlock.isra.0>
	return 0;
   21b3e:	2000      	movs	r0, #0
   21b40:	e7f1      	b.n	21b26 <usb_dc_ep_read_continue+0x7e>
		return -ENODEV;
   21b42:	f06f 0012 	mvn.w	r0, #18
   21b46:	e7ee      	b.n	21b26 <usb_dc_ep_read_continue+0x7e>
   21b48:	20004430 	.word	0x20004430
   21b4c:	20000aa4 	.word	0x20000aa4
   21b50:	000345c0 	.word	0x000345c0
   21b54:	20004468 	.word	0x20004468

00021b58 <usb_dc_ep_set_callback>:
{
   21b58:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   21b5a:	4b08      	ldr	r3, [pc, #32]	; (21b7c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   21b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   21b60:	b12b      	cbz	r3, 21b6e <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   21b62:	f7ff f8d1 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   21b66:	b128      	cbz	r0, 21b74 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   21b68:	6001      	str	r1, [r0, #0]
	return 0;
   21b6a:	2000      	movs	r0, #0
}
   21b6c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   21b6e:	f06f 0012 	mvn.w	r0, #18
   21b72:	e7fb      	b.n	21b6c <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   21b74:	f06f 0015 	mvn.w	r0, #21
   21b78:	e7f8      	b.n	21b6c <usb_dc_ep_set_callback+0x14>
   21b7a:	bf00      	nop
   21b7c:	20004430 	.word	0x20004430

00021b80 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   21b80:	4b01      	ldr	r3, [pc, #4]	; (21b88 <usb_dc_set_status_callback+0x8>)
   21b82:	6018      	str	r0, [r3, #0]
}
   21b84:	4770      	bx	lr
   21b86:	bf00      	nop
   21b88:	20004430 	.word	0x20004430

00021b8c <usb_dc_ep_mps>:
{
   21b8c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   21b8e:	4b07      	ldr	r3, [pc, #28]	; (21bac <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   21b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   21b94:	b123      	cbz	r3, 21ba0 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   21b96:	f7ff f8b7 	bl	20d08 <endpoint_ctx>
	if (!ep_ctx) {
   21b9a:	b120      	cbz	r0, 21ba6 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   21b9c:	6840      	ldr	r0, [r0, #4]
}
   21b9e:	bd08      	pop	{r3, pc}
		return -ENODEV;
   21ba0:	f06f 0012 	mvn.w	r0, #18
   21ba4:	e7fb      	b.n	21b9e <usb_dc_ep_mps+0x12>
		return -EINVAL;
   21ba6:	f06f 0015 	mvn.w	r0, #21
   21baa:	e7f8      	b.n	21b9e <usb_dc_ep_mps+0x12>
   21bac:	20004430 	.word	0x20004430

00021bb0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   21bb0:	4b08      	ldr	r3, [pc, #32]	; (21bd4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   21bb2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   21bb4:	1ac3      	subs	r3, r0, r3
{
   21bb6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   21bb8:	4907      	ldr	r1, [pc, #28]	; (21bd8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   21bba:	109b      	asrs	r3, r3, #2
{
   21bbc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   21bbe:	4359      	muls	r1, r3
   21bc0:	4806      	ldr	r0, [pc, #24]	; (21bdc <onoff_stop+0x2c>)
   21bc2:	2240      	movs	r2, #64	; 0x40
   21bc4:	f00a ffcd 	bl	2cb62 <stop>
	notify(mgr, res);
   21bc8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   21bca:	4601      	mov	r1, r0
	notify(mgr, res);
   21bcc:	4620      	mov	r0, r4
}
   21bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   21bd2:	4718      	bx	r3
   21bd4:	200046d0 	.word	0x200046d0
   21bd8:	b6db6db7 	.word	0xb6db6db7
   21bdc:	0002dfdc 	.word	0x0002dfdc

00021be0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   21be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   21be2:	4c0c      	ldr	r4, [pc, #48]	; (21c14 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21be4:	4a0c      	ldr	r2, [pc, #48]	; (21c18 <onoff_start+0x38>)
   21be6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   21be8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21bea:	9300      	str	r3, [sp, #0]
{
   21bec:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21bee:	460b      	mov	r3, r1
   21bf0:	490a      	ldr	r1, [pc, #40]	; (21c1c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   21bf2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21bf4:	4361      	muls	r1, r4
{
   21bf6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   21bf8:	4809      	ldr	r0, [pc, #36]	; (21c20 <onoff_start+0x40>)
   21bfa:	f00a ffdf 	bl	2cbbc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   21bfe:	1e01      	subs	r1, r0, #0
   21c00:	da05      	bge.n	21c0e <onoff_start+0x2e>
		notify(mgr, err);
   21c02:	4630      	mov	r0, r6
   21c04:	462b      	mov	r3, r5
	}
}
   21c06:	b002      	add	sp, #8
   21c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   21c0c:	4718      	bx	r3
}
   21c0e:	b002      	add	sp, #8
   21c10:	bd70      	pop	{r4, r5, r6, pc}
   21c12:	bf00      	nop
   21c14:	200046d0 	.word	0x200046d0
   21c18:	0002cc2b 	.word	0x0002cc2b
   21c1c:	b6db6db7 	.word	0xb6db6db7
   21c20:	0002dfdc 	.word	0x0002dfdc

00021c24 <hfclk_start>:
{
   21c24:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   21c26:	f00b ffd0 	bl	2dbca <z_impl_k_uptime_ticks>
   21c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21c2e:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
   21c32:	4c07      	ldr	r4, [pc, #28]	; (21c50 <hfclk_start+0x2c>)
   21c34:	fb02 3101 	mla	r1, r2, r1, r3
   21c38:	0bc0      	lsrs	r0, r0, #15
   21c3a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   21c3e:	0bc9      	lsrs	r1, r1, #15
   21c40:	e9c4 0100 	strd	r0, r1, [r4]
}
   21c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   21c48:	2001      	movs	r0, #1
   21c4a:	f00b ba46 	b.w	2d0da <nrfx_clock_start>
   21c4e:	bf00      	nop
   21c50:	20002398 	.word	0x20002398

00021c54 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21c54:	2200      	movs	r2, #0
{
   21c56:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21c58:	2101      	movs	r1, #1
{
   21c5a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21c5c:	4610      	mov	r0, r2
   21c5e:	f7e9 fbff 	bl	b460 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   21c62:	2000      	movs	r0, #0
   21c64:	f7e9 fbca 	bl	b3fc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   21c68:	480f      	ldr	r0, [pc, #60]	; (21ca8 <clk_init+0x54>)
   21c6a:	f001 fb67 	bl	2333c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   21c6e:	4b0f      	ldr	r3, [pc, #60]	; (21cac <clk_init+0x58>)
   21c70:	4298      	cmp	r0, r3
   21c72:	d115      	bne.n	21ca0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   21c74:	f001 fb72 	bl	2335c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   21c78:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   21c7a:	490d      	ldr	r1, [pc, #52]	; (21cb0 <clk_init+0x5c>)
   21c7c:	4630      	mov	r0, r6
   21c7e:	f004 fef0 	bl	26a62 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   21c82:	2800      	cmp	r0, #0
   21c84:	db0b      	blt.n	21c9e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   21c86:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   21c88:	4909      	ldr	r1, [pc, #36]	; (21cb0 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   21c8a:	2501      	movs	r5, #1
   21c8c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   21c8e:	f104 001c 	add.w	r0, r4, #28
   21c92:	f004 fee6 	bl	26a62 <onoff_manager_init>
		if (err < 0) {
   21c96:	2800      	cmp	r0, #0
   21c98:	db01      	blt.n	21c9e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   21c9a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   21c9c:	2000      	movs	r0, #0
}
   21c9e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   21ca0:	f06f 0004 	mvn.w	r0, #4
   21ca4:	e7fb      	b.n	21c9e <clk_init+0x4a>
   21ca6:	bf00      	nop
   21ca8:	00021ce9 	.word	0x00021ce9
   21cac:	0bad0000 	.word	0x0bad0000
   21cb0:	00030678 	.word	0x00030678

00021cb4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   21cb4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   21cb6:	230c      	movs	r3, #12
   21cb8:	4809      	ldr	r0, [pc, #36]	; (21ce0 <clkstarted_handle.constprop.0+0x2c>)
   21cba:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   21cbc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   21cbe:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   21cc0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   21cc4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   21cc6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   21cc8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   21cca:	4418      	add	r0, r3
   21ccc:	f00a ff36 	bl	2cb3c <set_on_state>
	if (callback) {
   21cd0:	b12d      	cbz	r5, 21cde <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   21cd2:	4632      	mov	r2, r6
   21cd4:	462b      	mov	r3, r5
   21cd6:	4803      	ldr	r0, [pc, #12]	; (21ce4 <clkstarted_handle.constprop.0+0x30>)
}
   21cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   21cdc:	4718      	bx	r3
}
   21cde:	bd70      	pop	{r4, r5, r6, pc}
   21ce0:	200046d0 	.word	0x200046d0
   21ce4:	0002dfdc 	.word	0x0002dfdc

00021ce8 <clock_event_handler>:
	switch (event) {
   21ce8:	b110      	cbz	r0, 21cf0 <clock_event_handler+0x8>
   21cea:	2801      	cmp	r0, #1
   21cec:	d004      	beq.n	21cf8 <clock_event_handler+0x10>
   21cee:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   21cf0:	4b03      	ldr	r3, [pc, #12]	; (21d00 <clock_event_handler+0x18>)
   21cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21cf4:	075b      	lsls	r3, r3, #29
   21cf6:	d101      	bne.n	21cfc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   21cf8:	f7ff bfdc 	b.w	21cb4 <clkstarted_handle.constprop.0>
}
   21cfc:	4770      	bx	lr
   21cfe:	bf00      	nop
   21d00:	200046d0 	.word	0x200046d0

00021d04 <generic_hfclk_start>:
{
   21d04:	b508      	push	{r3, lr}
	__asm__ volatile(
   21d06:	f04f 0320 	mov.w	r3, #32
   21d0a:	f3ef 8111 	mrs	r1, BASEPRI
   21d0e:	f383 8812 	msr	BASEPRI_MAX, r3
   21d12:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   21d16:	4a11      	ldr	r2, [pc, #68]	; (21d5c <generic_hfclk_start+0x58>)
   21d18:	6813      	ldr	r3, [r2, #0]
   21d1a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   21d1e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   21d22:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   21d24:	d00c      	beq.n	21d40 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   21d2a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21d2e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   21d32:	f013 0301 	ands.w	r3, r3, #1
   21d36:	d003      	beq.n	21d40 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   21d38:	4809      	ldr	r0, [pc, #36]	; (21d60 <generic_hfclk_start+0x5c>)
   21d3a:	f00a feff 	bl	2cb3c <set_on_state>
			already_started = true;
   21d3e:	2301      	movs	r3, #1
	__asm__ volatile(
   21d40:	f381 8811 	msr	BASEPRI, r1
   21d44:	f3bf 8f6f 	isb	sy
	if (already_started) {
   21d48:	b123      	cbz	r3, 21d54 <generic_hfclk_start+0x50>
}
   21d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   21d4e:	2000      	movs	r0, #0
   21d50:	f7ff bfb0 	b.w	21cb4 <clkstarted_handle.constprop.0>
}
   21d54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   21d58:	f7ff bf64 	b.w	21c24 <hfclk_start>
   21d5c:	20004720 	.word	0x20004720
   21d60:	20004710 	.word	0x20004710

00021d64 <api_blocking_start>:
{
   21d64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21d66:	2200      	movs	r2, #0
   21d68:	2301      	movs	r3, #1
   21d6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   21d6e:	ab04      	add	r3, sp, #16
   21d70:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21d74:	4a09      	ldr	r2, [pc, #36]	; (21d9c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21d76:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21d7a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21d7c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21d80:	f00a ff4c 	bl	2cc1c <api_start>
	if (err < 0) {
   21d84:	2800      	cmp	r0, #0
   21d86:	db05      	blt.n	21d94 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   21d88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   21d8c:	2300      	movs	r3, #0
   21d8e:	4668      	mov	r0, sp
   21d90:	f003 fbd6 	bl	25540 <z_impl_k_sem_take>
}
   21d94:	b007      	add	sp, #28
   21d96:	f85d fb04 	ldr.w	pc, [sp], #4
   21d9a:	bf00      	nop
   21d9c:	0002cc49 	.word	0x0002cc49

00021da0 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   21da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21da4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   21da8:	4605      	mov	r5, r0
   21daa:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
   21dae:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   21db2:	f04f 0320 	mov.w	r3, #32
   21db6:	f3ef 8711 	mrs	r7, BASEPRI
   21dba:	f383 8812 	msr	BASEPRI_MAX, r3
   21dbe:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   21dc2:	f00b ff02 	bl	2dbca <z_impl_k_uptime_ticks>
   21dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21dca:	fba0 4003 	umull	r4, r0, r0, r3
   21dce:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21dd2:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21dd6:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   21dda:	4b25      	ldr	r3, [pc, #148]	; (21e70 <cmd_status+0xd0>)
   21ddc:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   21de0:	4b24      	ldr	r3, [pc, #144]	; (21e74 <cmd_status+0xd4>)
   21de2:	0be4      	lsrs	r4, r4, #15
   21de4:	f8d3 a000 	ldr.w	sl, [r3]
   21de8:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
   21dec:	f387 8811 	msr	BASEPRI, r7
   21df0:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   21df4:	4a20      	ldr	r2, [pc, #128]	; (21e78 <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
   21df6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 21e7c <cmd_status+0xdc>
   21dfa:	4f21      	ldr	r7, [pc, #132]	; (21e80 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
   21dfc:	4628      	mov	r0, r5
   21dfe:	2108      	movs	r1, #8
   21e00:	f005 ff99 	bl	27d36 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   21e04:	f019 0f01 	tst.w	r9, #1
   21e08:	f8df 9078 	ldr.w	r9, [pc, #120]	; 21e84 <cmd_status+0xe4>
   21e0c:	4a1e      	ldr	r2, [pc, #120]	; (21e88 <cmd_status+0xe8>)
   21e0e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   21e12:	9300      	str	r3, [sp, #0]
   21e14:	4628      	mov	r0, r5
   21e16:	bf14      	ite	ne
   21e18:	4643      	movne	r3, r8
   21e1a:	463b      	moveq	r3, r7
   21e1c:	2108      	movs	r1, #8
   21e1e:	f005 ff8a 	bl	27d36 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   21e22:	eba4 030b 	sub.w	r3, r4, fp
   21e26:	9300      	str	r3, [sp, #0]
   21e28:	4628      	mov	r0, r5
   21e2a:	465b      	mov	r3, fp
   21e2c:	4a17      	ldr	r2, [pc, #92]	; (21e8c <cmd_status+0xec>)
   21e2e:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   21e30:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   21e34:	f005 ff7f 	bl	27d36 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   21e38:	4653      	mov	r3, sl
   21e3a:	4628      	mov	r0, r5
   21e3c:	4a14      	ldr	r2, [pc, #80]	; (21e90 <cmd_status+0xf0>)
   21e3e:	9400      	str	r4, [sp, #0]
   21e40:	2108      	movs	r1, #8
   21e42:	f005 ff78 	bl	27d36 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   21e46:	4628      	mov	r0, r5
   21e48:	4a12      	ldr	r2, [pc, #72]	; (21e94 <cmd_status+0xf4>)
   21e4a:	2108      	movs	r1, #8
   21e4c:	f005 ff73 	bl	27d36 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   21e50:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   21e54:	9300      	str	r3, [sp, #0]
   21e56:	4628      	mov	r0, r5
   21e58:	4a0b      	ldr	r2, [pc, #44]	; (21e88 <cmd_status+0xe8>)
   21e5a:	2e00      	cmp	r6, #0
   21e5c:	bf14      	ite	ne
   21e5e:	4643      	movne	r3, r8
   21e60:	463b      	moveq	r3, r7
   21e62:	2108      	movs	r1, #8
   21e64:	f005 ff67 	bl	27d36 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   21e68:	2000      	movs	r0, #0
   21e6a:	b003      	add	sp, #12
   21e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e70:	20002398 	.word	0x20002398
   21e74:	200023a0 	.word	0x200023a0
   21e78:	0003460a 	.word	0x0003460a
   21e7c:	000316c0 	.word	0x000316c0
   21e80:	00034605 	.word	0x00034605
   21e84:	200046d0 	.word	0x200046d0
   21e88:	00034615 	.word	0x00034615
   21e8c:	0003462f 	.word	0x0003462f
   21e90:	00034651 	.word	0x00034651
   21e94:	00034672 	.word	0x00034672

00021e98 <hfclk_stop>:
{
   21e98:	b510      	push	{r4, lr}
   21e9a:	f00b fe96 	bl	2dbca <z_impl_k_uptime_ticks>
   21e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21ea2:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
   21ea6:	4c07      	ldr	r4, [pc, #28]	; (21ec4 <hfclk_stop+0x2c>)
   21ea8:	fb02 3101 	mla	r1, r2, r1, r3
   21eac:	0bc0      	lsrs	r0, r0, #15
   21eae:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   21eb2:	0bc9      	lsrs	r1, r1, #15
   21eb4:	e9c4 0100 	strd	r0, r1, [r4]
}
   21eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   21ebc:	2001      	movs	r0, #1
   21ebe:	f001 ba5b 	b.w	23378 <nrfx_clock_stop>
   21ec2:	bf00      	nop
   21ec4:	200023a0 	.word	0x200023a0

00021ec8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21ec8:	4b08      	ldr	r3, [pc, #32]	; (21eec <generic_hfclk_stop+0x24>)
   21eca:	f3bf 8f5b 	dmb	ish
   21ece:	e853 2f00 	ldrex	r2, [r3]
   21ed2:	f022 0102 	bic.w	r1, r2, #2
   21ed6:	e843 1000 	strex	r0, r1, [r3]
   21eda:	2800      	cmp	r0, #0
   21edc:	d1f7      	bne.n	21ece <generic_hfclk_stop+0x6>
   21ede:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   21ee2:	07d3      	lsls	r3, r2, #31
   21ee4:	d401      	bmi.n	21eea <generic_hfclk_stop+0x22>
	hfclk_stop();
   21ee6:	f7ff bfd7 	b.w	21e98 <hfclk_stop>
}
   21eea:	4770      	bx	lr
   21eec:	20004720 	.word	0x20004720

00021ef0 <z_nrf_clock_control_get_onoff>:
}
   21ef0:	4a02      	ldr	r2, [pc, #8]	; (21efc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   21ef2:	b2c3      	uxtb	r3, r0
}
   21ef4:	201c      	movs	r0, #28
   21ef6:	fb03 2000 	mla	r0, r3, r0, r2
   21efa:	4770      	bx	lr
   21efc:	200046d0 	.word	0x200046d0

00021f00 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21f00:	4b08      	ldr	r3, [pc, #32]	; (21f24 <z_nrf_clock_bt_ctlr_hf_request+0x24>)
   21f02:	f3bf 8f5b 	dmb	ish
   21f06:	e853 2f00 	ldrex	r2, [r3]
   21f0a:	f042 0101 	orr.w	r1, r2, #1
   21f0e:	e843 1000 	strex	r0, r1, [r3]
   21f12:	2800      	cmp	r0, #0
   21f14:	d1f7      	bne.n	21f06 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   21f16:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   21f1a:	0793      	lsls	r3, r2, #30
   21f1c:	d401      	bmi.n	21f22 <z_nrf_clock_bt_ctlr_hf_request+0x22>
	hfclk_start();
   21f1e:	f7ff be81 	b.w	21c24 <hfclk_start>
}
   21f22:	4770      	bx	lr
   21f24:	20004720 	.word	0x20004720

00021f28 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f28:	4b08      	ldr	r3, [pc, #32]	; (21f4c <z_nrf_clock_bt_ctlr_hf_release+0x24>)
   21f2a:	f3bf 8f5b 	dmb	ish
   21f2e:	e853 2f00 	ldrex	r2, [r3]
   21f32:	f022 0101 	bic.w	r1, r2, #1
   21f36:	e843 1000 	strex	r0, r1, [r3]
   21f3a:	2800      	cmp	r0, #0
   21f3c:	d1f7      	bne.n	21f2e <z_nrf_clock_bt_ctlr_hf_release+0x6>
   21f3e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   21f42:	0793      	lsls	r3, r2, #30
   21f44:	d401      	bmi.n	21f4a <z_nrf_clock_bt_ctlr_hf_release+0x22>
	hfclk_stop();
   21f46:	f7ff bfa7 	b.w	21e98 <hfclk_stop>
}
   21f4a:	4770      	bx	lr
   21f4c:	20004720 	.word	0x20004720

00021f50 <z_nrf_clock_control_lf_on>:
{
   21f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21f54:	4939      	ldr	r1, [pc, #228]	; (2203c <z_nrf_clock_control_lf_on+0xec>)
   21f56:	f3bf 8f5b 	dmb	ish
   21f5a:	4607      	mov	r7, r0
   21f5c:	2201      	movs	r2, #1
   21f5e:	e851 3f00 	ldrex	r3, [r1]
   21f62:	e841 2000 	strex	r0, r2, [r1]
   21f66:	2800      	cmp	r0, #0
   21f68:	d1f9      	bne.n	21f5e <z_nrf_clock_control_lf_on+0xe>
   21f6a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   21f6e:	b933      	cbnz	r3, 21f7e <z_nrf_clock_control_lf_on+0x2e>
   21f70:	4933      	ldr	r1, [pc, #204]	; (22040 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   21f72:	4834      	ldr	r0, [pc, #208]	; (22044 <z_nrf_clock_control_lf_on+0xf4>)
   21f74:	604b      	str	r3, [r1, #4]
   21f76:	60cb      	str	r3, [r1, #12]
   21f78:	608a      	str	r2, [r1, #8]
   21f7a:	f004 fd85 	bl	26a88 <onoff_request>
	switch (start_mode) {
   21f7e:	1e7b      	subs	r3, r7, #1
   21f80:	2b01      	cmp	r3, #1
   21f82:	d82f      	bhi.n	21fe4 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   21f84:	2f01      	cmp	r7, #1
   21f86:	d107      	bne.n	21f98 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   21f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21f8c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   21f90:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   21f94:	2b01      	cmp	r3, #1
   21f96:	d025      	beq.n	21fe4 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21f98:	f00b fac0 	bl	2d51c <k_is_in_isr>
   21f9c:	4604      	mov	r4, r0
   21f9e:	b918      	cbnz	r0, 21fa8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   21fa0:	4b29      	ldr	r3, [pc, #164]	; (22048 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   21fa2:	781b      	ldrb	r3, [r3, #0]
   21fa4:	2b00      	cmp	r3, #0
   21fa6:	d141      	bne.n	2202c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   21fa8:	f04f 0320 	mov.w	r3, #32
   21fac:	f3ef 8611 	mrs	r6, BASEPRI
   21fb0:	f383 8812 	msr	BASEPRI_MAX, r3
   21fb4:	f3bf 8f6f 	isb	sy
   21fb8:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21fba:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2204c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21fbe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   21fc2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21fc6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   21fca:	03d2      	lsls	r2, r2, #15
   21fcc:	d50c      	bpl.n	21fe8 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   21fce:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   21fd2:	2b01      	cmp	r3, #1
   21fd4:	d001      	beq.n	21fda <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   21fd6:	2f01      	cmp	r7, #1
   21fd8:	d106      	bne.n	21fe8 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   21fda:	b30c      	cbz	r4, 22020 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   21fdc:	f386 8811 	msr	BASEPRI, r6
   21fe0:	f3bf 8f6f 	isb	sy
}
   21fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   21fe8:	b1ac      	cbz	r4, 22016 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   21fea:	4630      	mov	r0, r6
   21fec:	f7e9 f98e 	bl	b30c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   21ff0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   21ff4:	2b00      	cmp	r3, #0
   21ff6:	d1e4      	bne.n	21fc2 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21ff8:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   21ffc:	2a00      	cmp	r2, #0
   21ffe:	d0e0      	beq.n	21fc2 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22000:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   22004:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   22008:	2301      	movs	r3, #1
   2200a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   2200e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22012:	60ab      	str	r3, [r5, #8]
}
   22014:	e7d5      	b.n	21fc2 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   22016:	2100      	movs	r1, #0
   22018:	2021      	movs	r0, #33	; 0x21
   2201a:	f003 ff4f 	bl	25ebc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2201e:	e7e7      	b.n	21ff0 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   22020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22024:	2202      	movs	r2, #2
   22026:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2202a:	e7db      	b.n	21fe4 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   2202c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22030:	2202      	movs	r2, #2
   22032:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   22036:	4606      	mov	r6, r0
}
   22038:	e7bf      	b.n	21fba <z_nrf_clock_control_lf_on+0x6a>
   2203a:	bf00      	nop
   2203c:	20004724 	.word	0x20004724
   22040:	200046c0 	.word	0x200046c0
   22044:	200046ec 	.word	0x200046ec
   22048:	20004c38 	.word	0x20004c38
   2204c:	e000e100 	.word	0xe000e100

00022050 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   22050:	b530      	push	{r4, r5, lr}
	return port->config;
   22052:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   22054:	7b04      	ldrb	r4, [r0, #12]
   22056:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   2205a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2205e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   22062:	b085      	sub	sp, #20
   22064:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   22068:	d104      	bne.n	22074 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   2206a:	4628      	mov	r0, r5
   2206c:	f001 fc32 	bl	238d4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   22070:	2000      	movs	r0, #0
   22072:	e032      	b.n	220da <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   22074:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   22078:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2207c:	d12f      	bne.n	220de <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2207e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   22082:	bf0c      	ite	eq
   22084:	2304      	moveq	r3, #4
   22086:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   22088:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2208c:	6883      	ldr	r3, [r0, #8]
   2208e:	fa23 f101 	lsr.w	r1, r3, r1
   22092:	07c9      	lsls	r1, r1, #31
   22094:	d42f      	bmi.n	220f6 <gpio_nrfx_pin_interrupt_configure+0xa6>
   22096:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   2209a:	d12c      	bne.n	220f6 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   2209c:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   2209e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   220a0:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   220a4:	4a1c      	ldr	r2, [pc, #112]	; (22118 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   220a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   220aa:	bf18      	it	ne
   220ac:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   220b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   220b4:	07db      	lsls	r3, r3, #31
   220b6:	d41e      	bmi.n	220f6 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   220b8:	f10d 0407 	add.w	r4, sp, #7
   220bc:	4621      	mov	r1, r4
   220be:	4628      	mov	r0, r5
   220c0:	f001 fb6c 	bl	2379c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   220c4:	4b15      	ldr	r3, [pc, #84]	; (2211c <gpio_nrfx_pin_interrupt_configure+0xcc>)
   220c6:	4298      	cmp	r0, r3
   220c8:	d114      	bne.n	220f4 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   220ca:	4620      	mov	r0, r4
   220cc:	f001 fbb4 	bl	23838 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   220d0:	4b13      	ldr	r3, [pc, #76]	; (22120 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   220d2:	4298      	cmp	r0, r3
   220d4:	d00e      	beq.n	220f4 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   220d6:	f06f 000b 	mvn.w	r0, #11
}
   220da:	b005      	add	sp, #20
   220dc:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   220de:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   220e2:	d005      	beq.n	220f0 <gpio_nrfx_pin_interrupt_configure+0xa0>
   220e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   220e8:	bf0c      	ite	eq
   220ea:	2302      	moveq	r3, #2
   220ec:	2301      	movne	r3, #1
   220ee:	e7cb      	b.n	22088 <gpio_nrfx_pin_interrupt_configure+0x38>
   220f0:	2303      	movs	r3, #3
   220f2:	e7c9      	b.n	22088 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   220f4:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   220f6:	2300      	movs	r3, #0
   220f8:	4619      	mov	r1, r3
   220fa:	aa02      	add	r2, sp, #8
   220fc:	4628      	mov	r0, r5
   220fe:	f001 fa27 	bl	23550 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   22102:	4b07      	ldr	r3, [pc, #28]	; (22120 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   22104:	4298      	cmp	r0, r3
   22106:	d104      	bne.n	22112 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   22108:	2101      	movs	r1, #1
   2210a:	4628      	mov	r0, r5
   2210c:	f001 fb9a 	bl	23844 <nrfx_gpiote_trigger_enable>
   22110:	e7ae      	b.n	22070 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   22112:	f06f 0004 	mvn.w	r0, #4
   22116:	e7e0      	b.n	220da <gpio_nrfx_pin_interrupt_configure+0x8a>
   22118:	50000300 	.word	0x50000300
   2211c:	0bad0004 	.word	0x0bad0004
   22120:	0bad0000 	.word	0x0bad0000

00022124 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   22124:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   22126:	f001 fb77 	bl	23818 <nrfx_gpiote_is_init>
   2212a:	4604      	mov	r4, r0
   2212c:	b968      	cbnz	r0, 2214a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2212e:	f001 fb4b 	bl	237c8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   22132:	4b08      	ldr	r3, [pc, #32]	; (22154 <gpio_nrfx_init+0x30>)
   22134:	4298      	cmp	r0, r3
   22136:	d10a      	bne.n	2214e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   22138:	4807      	ldr	r0, [pc, #28]	; (22158 <gpio_nrfx_init+0x34>)
   2213a:	4621      	mov	r1, r4
   2213c:	f001 fb28 	bl	23790 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   22140:	4622      	mov	r2, r4
   22142:	2105      	movs	r1, #5
   22144:	2006      	movs	r0, #6
   22146:	f7e9 f98b 	bl	b460 <z_arm_irq_priority_set>
		return 0;
   2214a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2214c:	bd10      	pop	{r4, pc}
		return -EIO;
   2214e:	f06f 0004 	mvn.w	r0, #4
   22152:	e7fb      	b.n	2214c <gpio_nrfx_init+0x28>
   22154:	0bad0000 	.word	0x0bad0000
   22158:	0002215d 	.word	0x0002215d

0002215c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2215c:	0942      	lsrs	r2, r0, #5
{
   2215e:	b570      	push	{r4, r5, r6, lr}
   22160:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   22162:	d002      	beq.n	2216a <nrfx_gpio_handler+0xe>
   22164:	2a01      	cmp	r2, #1
   22166:	d015      	beq.n	22194 <nrfx_gpio_handler+0x38>
}
   22168:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2216a:	4e0b      	ldr	r6, [pc, #44]	; (22198 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   2216c:	6932      	ldr	r2, [r6, #16]
   2216e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22170:	2900      	cmp	r1, #0
   22172:	d0f9      	beq.n	22168 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   22174:	f003 031f 	and.w	r3, r3, #31
   22178:	2501      	movs	r5, #1
   2217a:	680c      	ldr	r4, [r1, #0]
   2217c:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   2217e:	688a      	ldr	r2, [r1, #8]
   22180:	402a      	ands	r2, r5
   22182:	d002      	beq.n	2218a <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   22184:	684b      	ldr	r3, [r1, #4]
   22186:	4630      	mov	r0, r6
   22188:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2218a:	2c00      	cmp	r4, #0
   2218c:	d0ec      	beq.n	22168 <nrfx_gpio_handler+0xc>
   2218e:	4621      	mov	r1, r4
   22190:	6824      	ldr	r4, [r4, #0]
   22192:	e7f4      	b.n	2217e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   22194:	4e01      	ldr	r6, [pc, #4]	; (2219c <nrfx_gpio_handler+0x40>)
   22196:	e7e9      	b.n	2216c <nrfx_gpio_handler+0x10>
   22198:	0002dff4 	.word	0x0002dff4
   2219c:	0002e00c 	.word	0x0002e00c

000221a0 <gpio_nrfx_pin_configure>:
{
   221a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   221a4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   221a6:	7b3b      	ldrb	r3, [r7, #12]
   221a8:	f001 051f 	and.w	r5, r1, #31
{
   221ac:	b085      	sub	sp, #20
   221ae:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   221b0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   221b4:	4614      	mov	r4, r2
   221b6:	b9ca      	cbnz	r2, 221ec <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   221b8:	a902      	add	r1, sp, #8
   221ba:	4628      	mov	r0, r5
   221bc:	f001 faee 	bl	2379c <nrfx_gpiote_channel_get>
   221c0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   221c2:	4628      	mov	r0, r5
   221c4:	f001 fbae 	bl	23924 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   221c8:	4b48      	ldr	r3, [pc, #288]	; (222ec <gpio_nrfx_pin_configure+0x14c>)
   221ca:	4298      	cmp	r0, r3
   221cc:	d004      	beq.n	221d8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   221ce:	f06f 0004 	mvn.w	r0, #4
}
   221d2:	b005      	add	sp, #20
   221d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   221d8:	4284      	cmp	r4, r0
   221da:	d105      	bne.n	221e8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   221dc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   221e0:	f001 fb24 	bl	2382c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   221e4:	42a0      	cmp	r0, r4
   221e6:	d1f2      	bne.n	221ce <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   221e8:	2000      	movs	r0, #0
   221ea:	e7f2      	b.n	221d2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   221ec:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   221f0:	f10d 0103 	add.w	r1, sp, #3
   221f4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   221f6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   221fa:	f001 facf 	bl	2379c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   221fe:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   22200:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   22202:	aa02      	add	r2, sp, #8
   22204:	4649      	mov	r1, r9
   22206:	4628      	mov	r0, r5
   22208:	f001 f9a2 	bl	23550 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2220c:	4b37      	ldr	r3, [pc, #220]	; (222ec <gpio_nrfx_pin_configure+0x14c>)
   2220e:	4298      	cmp	r0, r3
   22210:	d002      	beq.n	22218 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   22212:	f06f 0015 	mvn.w	r0, #21
   22216:	e7dc      	b.n	221d2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   22218:	4580      	cmp	r8, r0
   2221a:	d103      	bne.n	22224 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   2221c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   22220:	f001 fb04 	bl	2382c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   22224:	05a3      	lsls	r3, r4, #22
   22226:	d54e      	bpl.n	222c6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   22228:	4b31      	ldr	r3, [pc, #196]	; (222f0 <gpio_nrfx_pin_configure+0x150>)
   2222a:	4a32      	ldr	r2, [pc, #200]	; (222f4 <gpio_nrfx_pin_configure+0x154>)
   2222c:	4023      	ands	r3, r4
   2222e:	4293      	cmp	r3, r2
   22230:	d03a      	beq.n	222a8 <gpio_nrfx_pin_configure+0x108>
   22232:	d80c      	bhi.n	2224e <gpio_nrfx_pin_configure+0xae>
   22234:	2b06      	cmp	r3, #6
   22236:	d014      	beq.n	22262 <gpio_nrfx_pin_configure+0xc2>
   22238:	d804      	bhi.n	22244 <gpio_nrfx_pin_configure+0xa4>
   2223a:	b193      	cbz	r3, 22262 <gpio_nrfx_pin_configure+0xc2>
   2223c:	2b02      	cmp	r3, #2
   2223e:	d1e8      	bne.n	22212 <gpio_nrfx_pin_configure+0x72>
   22240:	2304      	movs	r3, #4
   22242:	e00e      	b.n	22262 <gpio_nrfx_pin_configure+0xc2>
   22244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22248:	d1e3      	bne.n	22212 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   2224a:	2301      	movs	r3, #1
   2224c:	e009      	b.n	22262 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2224e:	4a2a      	ldr	r2, [pc, #168]	; (222f8 <gpio_nrfx_pin_configure+0x158>)
   22250:	4293      	cmp	r3, r2
   22252:	d02b      	beq.n	222ac <gpio_nrfx_pin_configure+0x10c>
   22254:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   22258:	d02a      	beq.n	222b0 <gpio_nrfx_pin_configure+0x110>
   2225a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2225e:	d1d8      	bne.n	22212 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   22260:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   22262:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   22266:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   2226a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   2226e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   22270:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   22274:	bf54      	ite	pl
   22276:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2227a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2227c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   2227e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   22282:	d517      	bpl.n	222b4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   22284:	687b      	ldr	r3, [r7, #4]
   22286:	2101      	movs	r1, #1
   22288:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   2228c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   22290:	2200      	movs	r2, #0
   22292:	a901      	add	r1, sp, #4
   22294:	4628      	mov	r0, r5
   22296:	f001 fa09 	bl	236ac <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2229a:	4b14      	ldr	r3, [pc, #80]	; (222ec <gpio_nrfx_pin_configure+0x14c>)
   2229c:	4298      	cmp	r0, r3
   2229e:	bf14      	ite	ne
   222a0:	f06f 0015 	mvnne.w	r0, #21
   222a4:	2000      	moveq	r0, #0
   222a6:	e794      	b.n	221d2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   222a8:	2307      	movs	r3, #7
   222aa:	e7da      	b.n	22262 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   222ac:	2305      	movs	r3, #5
   222ae:	e7d8      	b.n	22262 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   222b0:	2303      	movs	r3, #3
   222b2:	e7d6      	b.n	22262 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   222b4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   222b6:	bf41      	itttt	mi
   222b8:	687b      	ldrmi	r3, [r7, #4]
   222ba:	2101      	movmi	r1, #1
   222bc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   222c0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   222c4:	e7e4      	b.n	22290 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   222c6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   222c8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   222cc:	bf54      	ite	pl
   222ce:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   222d2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   222d4:	461a      	mov	r2, r3
   222d6:	a901      	add	r1, sp, #4
   222d8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   222da:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   222de:	f001 f937 	bl	23550 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   222e2:	4b02      	ldr	r3, [pc, #8]	; (222ec <gpio_nrfx_pin_configure+0x14c>)
   222e4:	4298      	cmp	r0, r3
   222e6:	f43f af7f 	beq.w	221e8 <gpio_nrfx_pin_configure+0x48>
   222ea:	e792      	b.n	22212 <gpio_nrfx_pin_configure+0x72>
   222ec:	0bad0000 	.word	0x0bad0000
   222f0:	00f00006 	.word	0x00f00006
   222f4:	00100006 	.word	0x00100006
   222f8:	00400002 	.word	0x00400002

000222fc <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
   222fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
   22300:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 223b0 <print_all_reset_causes+0xb4>
		return "security";
   22304:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 223b4 <print_all_reset_causes+0xb8>
		return "parity error";
   22308:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 223b8 <print_all_reset_causes+0xbc>
{
   2230c:	4607      	mov	r7, r0
   2230e:	460d      	mov	r5, r1
   22310:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
   22312:	2401      	movs	r4, #1
		if (cause & cause_mask) {
   22314:	ea15 0204 	ands.w	r2, r5, r4
   22318:	d013      	beq.n	22342 <print_all_reset_causes+0x46>
	switch (cause) {
   2231a:	2a40      	cmp	r2, #64	; 0x40
   2231c:	d03c      	beq.n	22398 <print_all_reset_causes+0x9c>
   2231e:	d81e      	bhi.n	2235e <print_all_reset_causes+0x62>
   22320:	2a08      	cmp	r2, #8
   22322:	d814      	bhi.n	2234e <print_all_reset_causes+0x52>
   22324:	3a01      	subs	r2, #1
   22326:	2a07      	cmp	r2, #7
   22328:	d834      	bhi.n	22394 <print_all_reset_causes+0x98>
   2232a:	e8df f002 	tbb	[pc, r2]
   2232e:	0437      	.short	0x0437
   22330:	33332f33 	.word	0x33332f33
   22334:	3133      	.short	0x3133
   22336:	4b21      	ldr	r3, [pc, #132]	; (223bc <print_all_reset_causes+0xc0>)
			shell_print(sh, "- %s",
   22338:	4652      	mov	r2, sl
   2233a:	2108      	movs	r1, #8
   2233c:	4638      	mov	r0, r7
   2233e:	f005 fcfa 	bl	27d36 <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
   22342:	3e01      	subs	r6, #1
   22344:	ea4f 0444 	mov.w	r4, r4, lsl #1
   22348:	d1e4      	bne.n	22314 <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
   2234a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
   2234e:	2a10      	cmp	r2, #16
   22350:	d026      	beq.n	223a0 <print_all_reset_causes+0xa4>
		return "debug";
   22352:	4b1b      	ldr	r3, [pc, #108]	; (223c0 <print_all_reset_causes+0xc4>)
   22354:	491b      	ldr	r1, [pc, #108]	; (223c4 <print_all_reset_causes+0xc8>)
   22356:	2a20      	cmp	r2, #32
   22358:	bf08      	it	eq
   2235a:	460b      	moveq	r3, r1
   2235c:	e7ec      	b.n	22338 <print_all_reset_causes+0x3c>
	switch (cause) {
   2235e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   22362:	d01f      	beq.n	223a4 <print_all_reset_causes+0xa8>
   22364:	d808      	bhi.n	22378 <print_all_reset_causes+0x7c>
   22366:	2a80      	cmp	r2, #128	; 0x80
   22368:	d01e      	beq.n	223a8 <print_all_reset_causes+0xac>
		return "CPU lockup";
   2236a:	4b15      	ldr	r3, [pc, #84]	; (223c0 <print_all_reset_causes+0xc4>)
   2236c:	4916      	ldr	r1, [pc, #88]	; (223c8 <print_all_reset_causes+0xcc>)
   2236e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   22372:	bf08      	it	eq
   22374:	460b      	moveq	r3, r1
   22376:	e7df      	b.n	22338 <print_all_reset_causes+0x3c>
	switch (cause) {
   22378:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2237c:	d016      	beq.n	223ac <print_all_reset_causes+0xb0>
		return "clock";
   2237e:	4b10      	ldr	r3, [pc, #64]	; (223c0 <print_all_reset_causes+0xc4>)
   22380:	4912      	ldr	r1, [pc, #72]	; (223cc <print_all_reset_causes+0xd0>)
   22382:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   22386:	bf08      	it	eq
   22388:	460b      	moveq	r3, r1
   2238a:	e7d5      	b.n	22338 <print_all_reset_causes+0x3c>
		return "brownout";
   2238c:	4b10      	ldr	r3, [pc, #64]	; (223d0 <print_all_reset_causes+0xd4>)
   2238e:	e7d3      	b.n	22338 <print_all_reset_causes+0x3c>
		return "power-on reset";
   22390:	4b10      	ldr	r3, [pc, #64]	; (223d4 <print_all_reset_causes+0xd8>)
   22392:	e7d1      	b.n	22338 <print_all_reset_causes+0x3c>
		return "unknown";
   22394:	4b0a      	ldr	r3, [pc, #40]	; (223c0 <print_all_reset_causes+0xc4>)
   22396:	e7cf      	b.n	22338 <print_all_reset_causes+0x3c>
		return "security";
   22398:	4643      	mov	r3, r8
   2239a:	e7cd      	b.n	22338 <print_all_reset_causes+0x3c>
		return "pin";
   2239c:	4b0e      	ldr	r3, [pc, #56]	; (223d8 <print_all_reset_causes+0xdc>)
   2239e:	e7cb      	b.n	22338 <print_all_reset_causes+0x3c>
		return "watchdog";
   223a0:	4b0e      	ldr	r3, [pc, #56]	; (223dc <print_all_reset_causes+0xe0>)
   223a2:	e7c9      	b.n	22338 <print_all_reset_causes+0x3c>
		return "parity error";
   223a4:	464b      	mov	r3, r9
   223a6:	e7c7      	b.n	22338 <print_all_reset_causes+0x3c>
		return "low power wake-up";
   223a8:	4b0d      	ldr	r3, [pc, #52]	; (223e0 <print_all_reset_causes+0xe4>)
   223aa:	e7c5      	b.n	22338 <print_all_reset_causes+0x3c>
		return "PLL error";
   223ac:	4b0d      	ldr	r3, [pc, #52]	; (223e4 <print_all_reset_causes+0xe8>)
   223ae:	e7c3      	b.n	22338 <print_all_reset_causes+0x3c>
   223b0:	000317e8 	.word	0x000317e8
   223b4:	000346ee 	.word	0x000346ee
   223b8:	000346f7 	.word	0x000346f7
   223bc:	000346dc 	.word	0x000346dc
   223c0:	00032d85 	.word	0x00032d85
   223c4:	00034716 	.word	0x00034716
   223c8:	0003471c 	.word	0x0003471c
   223cc:	00034731 	.word	0x00034731
   223d0:	000346c4 	.word	0x000346c4
   223d4:	000346cd 	.word	0x000346cd
   223d8:	000346c0 	.word	0x000346c0
   223dc:	000346e5 	.word	0x000346e5
   223e0:	00034704 	.word	0x00034704
   223e4:	00034727 	.word	0x00034727

000223e8 <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
   223e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   223ea:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&supported, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
   223ec:	a801      	add	r0, sp, #4
   223ee:	f00a fcdb 	bl	2cda8 <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
   223f2:	f110 0f86 	cmn.w	r0, #134	; 0x86
   223f6:	4604      	mov	r4, r0
   223f8:	d111      	bne.n	2241e <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
   223fa:	4a11      	ldr	r2, [pc, #68]	; (22440 <cmd_supported_reset_cause+0x58>)
   223fc:	2101      	movs	r1, #1
   223fe:	4628      	mov	r0, r5
   22400:	f005 fc99 	bl	27d36 <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
   22404:	9c01      	ldr	r4, [sp, #4]
   22406:	b1ac      	cbz	r4, 22434 <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
   22408:	4a0e      	ldr	r2, [pc, #56]	; (22444 <cmd_supported_reset_cause+0x5c>)
   2240a:	2108      	movs	r1, #8
   2240c:	4628      	mov	r0, r5
   2240e:	f005 fc92 	bl	27d36 <shell_fprintf>
		print_all_reset_causes(sh, cause);
   22412:	9901      	ldr	r1, [sp, #4]
   22414:	4628      	mov	r0, r5
   22416:	f7ff ff71 	bl	222fc <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supporte");
	}

	return 0;
   2241a:	2400      	movs	r4, #0
   2241c:	e007      	b.n	2242e <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
   2241e:	2800      	cmp	r0, #0
   22420:	d0f0      	beq.n	22404 <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
   22422:	4603      	mov	r3, r0
   22424:	4a08      	ldr	r2, [pc, #32]	; (22448 <cmd_supported_reset_cause+0x60>)
   22426:	2101      	movs	r1, #1
   22428:	4628      	mov	r0, r5
   2242a:	f005 fc84 	bl	27d36 <shell_fprintf>
}
   2242e:	4620      	mov	r0, r4
   22430:	b003      	add	sp, #12
   22432:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supporte");
   22434:	4a05      	ldr	r2, [pc, #20]	; (2244c <cmd_supported_reset_cause+0x64>)
   22436:	2108      	movs	r1, #8
   22438:	4628      	mov	r0, r5
   2243a:	f005 fc7c 	bl	27d36 <shell_fprintf>
   2243e:	e7f6      	b.n	2242e <cmd_supported_reset_cause+0x46>
   22440:	00034737 	.word	0x00034737
   22444:	00034781 	.word	0x00034781
   22448:	00034752 	.word	0x00034752
   2244c:	0003479a 	.word	0x0003479a

00022450 <cmd_show_reset_cause>:
{
   22450:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22452:	4604      	mov	r4, r0
	return z_impl_hwinfo_get_reset_cause(cause);
   22454:	a801      	add	r0, sp, #4
   22456:	f00a fc82 	bl	2cd5e <z_impl_hwinfo_get_reset_cause>
	if (res == -ENOTSUP) {
   2245a:	f110 0f86 	cmn.w	r0, #134	; 0x86
   2245e:	4605      	mov	r5, r0
   22460:	d105      	bne.n	2246e <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
   22462:	4a0f      	ldr	r2, [pc, #60]	; (224a0 <cmd_show_reset_cause+0x50>)
   22464:	2101      	movs	r1, #1
		shell_print(sh, "No reset cause set");
   22466:	4620      	mov	r0, r4
   22468:	f005 fc65 	bl	27d36 <shell_fprintf>
   2246c:	e006      	b.n	2247c <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
   2246e:	b140      	cbz	r0, 22482 <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
   22470:	4603      	mov	r3, r0
   22472:	4a0c      	ldr	r2, [pc, #48]	; (224a4 <cmd_show_reset_cause+0x54>)
   22474:	2101      	movs	r1, #1
   22476:	4620      	mov	r0, r4
   22478:	f005 fc5d 	bl	27d36 <shell_fprintf>
}
   2247c:	4628      	mov	r0, r5
   2247e:	b003      	add	sp, #12
   22480:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
   22482:	9b01      	ldr	r3, [sp, #4]
   22484:	b14b      	cbz	r3, 2249a <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
   22486:	4620      	mov	r0, r4
   22488:	4a07      	ldr	r2, [pc, #28]	; (224a8 <cmd_show_reset_cause+0x58>)
   2248a:	2108      	movs	r1, #8
   2248c:	f005 fc53 	bl	27d36 <shell_fprintf>
		print_all_reset_causes(sh, cause);
   22490:	9901      	ldr	r1, [sp, #4]
   22492:	4620      	mov	r0, r4
   22494:	f7ff ff32 	bl	222fc <print_all_reset_causes>
   22498:	e7f0      	b.n	2247c <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
   2249a:	4a04      	ldr	r2, [pc, #16]	; (224ac <cmd_show_reset_cause+0x5c>)
   2249c:	2108      	movs	r1, #8
   2249e:	e7e2      	b.n	22466 <cmd_show_reset_cause+0x16>
   224a0:	00034737 	.word	0x00034737
   224a4:	000347ae 	.word	0x000347ae
   224a8:	000347cc 	.word	0x000347cc
   224ac:	000347de 	.word	0x000347de

000224b0 <cmd_clear_reset_cause>:
{
   224b0:	b538      	push	{r3, r4, r5, lr}
   224b2:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
   224b4:	f00a fc70 	bl	2cd98 <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
   224b8:	f110 0f86 	cmn.w	r0, #134	; 0x86
   224bc:	4604      	mov	r4, r0
   224be:	d107      	bne.n	224d0 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
   224c0:	4a08      	ldr	r2, [pc, #32]	; (224e4 <cmd_clear_reset_cause+0x34>)
   224c2:	2101      	movs	r1, #1
   224c4:	4628      	mov	r0, r5
   224c6:	f005 fc36 	bl	27d36 <shell_fprintf>
   224ca:	2400      	movs	r4, #0
}
   224cc:	4620      	mov	r0, r4
   224ce:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
   224d0:	2800      	cmp	r0, #0
   224d2:	d0fb      	beq.n	224cc <cmd_clear_reset_cause+0x1c>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
   224d4:	4603      	mov	r3, r0
   224d6:	4a04      	ldr	r2, [pc, #16]	; (224e8 <cmd_clear_reset_cause+0x38>)
   224d8:	2101      	movs	r1, #1
   224da:	4628      	mov	r0, r5
   224dc:	f005 fc2b 	bl	27d36 <shell_fprintf>
		return res;
   224e0:	e7f4      	b.n	224cc <cmd_clear_reset_cause+0x1c>
   224e2:	bf00      	nop
   224e4:	00034737 	.word	0x00034737
   224e8:	000347f2 	.word	0x000347f2

000224ec <cmd_get_device_id>:
{
   224ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   224f0:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
   224f2:	2110      	movs	r1, #16
   224f4:	4668      	mov	r0, sp
   224f6:	f00a fbfb 	bl	2ccf0 <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
   224fa:	f110 0f86 	cmn.w	r0, #134	; 0x86
   224fe:	4604      	mov	r4, r0
   22500:	d108      	bne.n	22514 <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
   22502:	4a19      	ldr	r2, [pc, #100]	; (22568 <cmd_get_device_id+0x7c>)
   22504:	2101      	movs	r1, #1
   22506:	4628      	mov	r0, r5
   22508:	f005 fc15 	bl	27d36 <shell_fprintf>
}
   2250c:	4620      	mov	r0, r4
   2250e:	b004      	add	sp, #16
   22510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
   22514:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
   22516:	4603      	mov	r3, r0
	} else if (length < 0) {
   22518:	da05      	bge.n	22526 <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
   2251a:	4a14      	ldr	r2, [pc, #80]	; (2256c <cmd_get_device_id+0x80>)
   2251c:	2101      	movs	r1, #1
   2251e:	4628      	mov	r0, r5
   22520:	f005 fc09 	bl	27d36 <shell_fprintf>
		return length;
   22524:	e7f2      	b.n	2250c <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
   22526:	4a12      	ldr	r2, [pc, #72]	; (22570 <cmd_get_device_id+0x84>)
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
   22528:	f8df 8048 	ldr.w	r8, [pc, #72]	; 22574 <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
   2252c:	2108      	movs	r1, #8
   2252e:	4628      	mov	r0, r5
   22530:	f005 fc01 	bl	27d36 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
   22534:	4a10      	ldr	r2, [pc, #64]	; (22578 <cmd_get_device_id+0x8c>)
   22536:	2108      	movs	r1, #8
   22538:	4628      	mov	r0, r5
   2253a:	f005 fbfc 	bl	27d36 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
   2253e:	466e      	mov	r6, sp
   22540:	2700      	movs	r7, #0
   22542:	42a7      	cmp	r7, r4
   22544:	d106      	bne.n	22554 <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
   22546:	4a0d      	ldr	r2, [pc, #52]	; (2257c <cmd_get_device_id+0x90>)
   22548:	2108      	movs	r1, #8
   2254a:	4628      	mov	r0, r5
   2254c:	f005 fbf3 	bl	27d36 <shell_fprintf>
	return 0;
   22550:	2400      	movs	r4, #0
   22552:	e7db      	b.n	2250c <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
   22554:	f816 3b01 	ldrb.w	r3, [r6], #1
   22558:	4642      	mov	r2, r8
   2255a:	2108      	movs	r1, #8
   2255c:	4628      	mov	r0, r5
   2255e:	f005 fbea 	bl	27d36 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
   22562:	3701      	adds	r7, #1
   22564:	e7ed      	b.n	22542 <cmd_get_device_id+0x56>
   22566:	bf00      	nop
   22568:	00034737 	.word	0x00034737
   2256c:	00034818 	.word	0x00034818
   22570:	00034824 	.word	0x00034824
   22574:	000344db 	.word	0x000344db
   22578:	00034831 	.word	0x00034831
   2257c:	000316bf 	.word	0x000316bf

00022580 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   22580:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   22582:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   22586:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   22588:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   2258a:	6002      	str	r2, [r0, #0]
}
   2258c:	4802      	ldr	r0, [pc, #8]	; (22598 <nrf_gpio_pin_port_decode+0x18>)
   2258e:	bf18      	it	ne
   22590:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   22594:	4770      	bx	lr
   22596:	bf00      	nop
   22598:	50000300 	.word	0x50000300

0002259c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2259c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2259e:	794b      	ldrb	r3, [r1, #5]
   225a0:	2b01      	cmp	r3, #1
   225a2:	d026      	beq.n	225f2 <uarte_nrfx_configure+0x56>
   225a4:	2b03      	cmp	r3, #3
   225a6:	d121      	bne.n	225ec <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   225a8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   225aa:	798b      	ldrb	r3, [r1, #6]
   225ac:	2b03      	cmp	r3, #3
   225ae:	d11d      	bne.n	225ec <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   225b0:	79cc      	ldrb	r4, [r1, #7]
   225b2:	b10c      	cbz	r4, 225b8 <uarte_nrfx_configure+0x1c>
   225b4:	2c01      	cmp	r4, #1
   225b6:	d119      	bne.n	225ec <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   225b8:	790a      	ldrb	r2, [r1, #4]
   225ba:	b112      	cbz	r2, 225c2 <uarte_nrfx_configure+0x26>
   225bc:	2a02      	cmp	r2, #2
   225be:	d115      	bne.n	225ec <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   225c0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   225c2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   225c4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   225c6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   225ca:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   225cc:	d065      	beq.n	2269a <uarte_nrfx_configure+0xfe>
   225ce:	d82d      	bhi.n	2262c <uarte_nrfx_configure+0x90>
   225d0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   225d4:	d064      	beq.n	226a0 <uarte_nrfx_configure+0x104>
   225d6:	d816      	bhi.n	22606 <uarte_nrfx_configure+0x6a>
   225d8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   225dc:	d062      	beq.n	226a4 <uarte_nrfx_configure+0x108>
   225de:	d80a      	bhi.n	225f6 <uarte_nrfx_configure+0x5a>
   225e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   225e4:	d061      	beq.n	226aa <uarte_nrfx_configure+0x10e>
   225e6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   225ea:	d061      	beq.n	226b0 <uarte_nrfx_configure+0x114>
   225ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   225f0:	e052      	b.n	22698 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   225f2:	2600      	movs	r6, #0
   225f4:	e7d9      	b.n	225aa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   225f6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   225fa:	d05c      	beq.n	226b6 <uarte_nrfx_configure+0x11a>
   225fc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   22600:	d1f4      	bne.n	225ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   22602:	4b37      	ldr	r3, [pc, #220]	; (226e0 <uarte_nrfx_configure+0x144>)
   22604:	e03c      	b.n	22680 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22606:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2260a:	d057      	beq.n	226bc <uarte_nrfx_configure+0x120>
   2260c:	d807      	bhi.n	2261e <uarte_nrfx_configure+0x82>
   2260e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   22612:	d055      	beq.n	226c0 <uarte_nrfx_configure+0x124>
   22614:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   22618:	d1e8      	bne.n	225ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2261a:	4b32      	ldr	r3, [pc, #200]	; (226e4 <uarte_nrfx_configure+0x148>)
   2261c:	e030      	b.n	22680 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2261e:	f647 2712 	movw	r7, #31250	; 0x7a12
   22622:	42bb      	cmp	r3, r7
   22624:	d1e2      	bne.n	225ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   22626:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2262a:	e029      	b.n	22680 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2262c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   22630:	d048      	beq.n	226c4 <uarte_nrfx_configure+0x128>
   22632:	d813      	bhi.n	2265c <uarte_nrfx_configure+0xc0>
   22634:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   22638:	d047      	beq.n	226ca <uarte_nrfx_configure+0x12e>
   2263a:	d809      	bhi.n	22650 <uarte_nrfx_configure+0xb4>
   2263c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   22640:	42bb      	cmp	r3, r7
   22642:	d044      	beq.n	226ce <uarte_nrfx_configure+0x132>
   22644:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   22648:	d1d0      	bne.n	225ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2264a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2264e:	e017      	b.n	22680 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22650:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   22654:	d1ca      	bne.n	225ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   22656:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2265a:	e011      	b.n	22680 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2265c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   22660:	d038      	beq.n	226d4 <uarte_nrfx_configure+0x138>
   22662:	d808      	bhi.n	22676 <uarte_nrfx_configure+0xda>
   22664:	4f20      	ldr	r7, [pc, #128]	; (226e8 <uarte_nrfx_configure+0x14c>)
   22666:	42bb      	cmp	r3, r7
   22668:	d037      	beq.n	226da <uarte_nrfx_configure+0x13e>
   2266a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2266e:	d1bd      	bne.n	225ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22670:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22674:	e004      	b.n	22680 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22676:	4f1d      	ldr	r7, [pc, #116]	; (226ec <uarte_nrfx_configure+0x150>)
   22678:	42bb      	cmp	r3, r7
   2267a:	d1b7      	bne.n	225ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2267c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   22680:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22682:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   22686:	1d03      	adds	r3, r0, #4
   22688:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   2268a:	4334      	orrs	r4, r6
   2268c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2268e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   22692:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   22696:	2000      	movs	r0, #0
}
   22698:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2269a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2269e:	e7ef      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   226a0:	4b13      	ldr	r3, [pc, #76]	; (226f0 <uarte_nrfx_configure+0x154>)
   226a2:	e7ed      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   226a4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   226a8:	e7ea      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   226aa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   226ae:	e7e7      	b.n	22680 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   226b0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   226b4:	e7e4      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   226b6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   226ba:	e7e1      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   226bc:	4b0d      	ldr	r3, [pc, #52]	; (226f4 <uarte_nrfx_configure+0x158>)
   226be:	e7df      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   226c0:	4b0d      	ldr	r3, [pc, #52]	; (226f8 <uarte_nrfx_configure+0x15c>)
   226c2:	e7dd      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   226c4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   226c8:	e7da      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   226ca:	4b0c      	ldr	r3, [pc, #48]	; (226fc <uarte_nrfx_configure+0x160>)
   226cc:	e7d8      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   226ce:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   226d2:	e7d5      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   226d4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   226d8:	e7d2      	b.n	22680 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   226da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   226de:	e7cf      	b.n	22680 <uarte_nrfx_configure+0xe4>
   226e0:	0013b000 	.word	0x0013b000
   226e4:	004ea000 	.word	0x004ea000
   226e8:	0003d090 	.word	0x0003d090
   226ec:	000f4240 	.word	0x000f4240
   226f0:	00275000 	.word	0x00275000
   226f4:	0075c000 	.word	0x0075c000
   226f8:	003af000 	.word	0x003af000
   226fc:	013a9000 	.word	0x013a9000

00022700 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   22700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   22702:	6906      	ldr	r6, [r0, #16]
{
   22704:	4605      	mov	r5, r0
   22706:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22708:	f00a ff08 	bl	2d51c <k_is_in_isr>
   2270c:	b910      	cbnz	r0, 22714 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2270e:	4b20      	ldr	r3, [pc, #128]	; (22790 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   22710:	781b      	ldrb	r3, [r3, #0]
   22712:	b983      	cbnz	r3, 22736 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   22714:	f04f 0320 	mov.w	r3, #32
   22718:	f3ef 8411 	mrs	r4, BASEPRI
   2271c:	f383 8812 	msr	BASEPRI_MAX, r3
   22720:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   22724:	6868      	ldr	r0, [r5, #4]
   22726:	f00a fc1a 	bl	2cf5e <is_tx_ready.isra.0>
   2272a:	bb28      	cbnz	r0, 22778 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   2272c:	f384 8811 	msr	BASEPRI, r4
   22730:	f3bf 8f6f 	isb	sy
}
   22734:	e7ee      	b.n	22714 <uarte_nrfx_poll_out+0x14>
{
   22736:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22738:	6868      	ldr	r0, [r5, #4]
   2273a:	f00a fc10 	bl	2cf5e <is_tx_ready.isra.0>
   2273e:	b970      	cbnz	r0, 2275e <uarte_nrfx_poll_out+0x5e>
   22740:	2001      	movs	r0, #1
   22742:	f00a fcc8 	bl	2d0d6 <nrfx_busy_wait>
   22746:	3c01      	subs	r4, #1
   22748:	d1f6      	bne.n	22738 <uarte_nrfx_poll_out+0x38>
   2274a:	2100      	movs	r1, #0
   2274c:	2021      	movs	r0, #33	; 0x21
   2274e:	f003 fbb5 	bl	25ebc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   22752:	e7f0      	b.n	22736 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   22754:	f384 8811 	msr	BASEPRI, r4
   22758:	f3bf 8f6f 	isb	sy
}
   2275c:	e7f5      	b.n	2274a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   2275e:	f04f 0320 	mov.w	r3, #32
   22762:	f3ef 8411 	mrs	r4, BASEPRI
   22766:	f383 8812 	msr	BASEPRI_MAX, r3
   2276a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2276e:	6868      	ldr	r0, [r5, #4]
   22770:	f00a fbf5 	bl	2cf5e <is_tx_ready.isra.0>
   22774:	2800      	cmp	r0, #0
   22776:	d0ed      	beq.n	22754 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   22778:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   2277a:	2201      	movs	r2, #1
	data->char_out = c;
   2277c:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   22780:	6868      	ldr	r0, [r5, #4]
   22782:	f00a fbd1 	bl	2cf28 <tx_start.isra.0>
	__asm__ volatile(
   22786:	f384 8811 	msr	BASEPRI, r4
   2278a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   2278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22790:	20004c38 	.word	0x20004c38

00022794 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   22794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22798:	2200      	movs	r2, #0
   2279a:	4607      	mov	r7, r0
   2279c:	b088      	sub	sp, #32
   2279e:	2101      	movs	r1, #1
   227a0:	2002      	movs	r0, #2
   227a2:	f7e8 fe5d 	bl	b460 <z_arm_irq_priority_set>
   227a6:	2002      	movs	r0, #2
   227a8:	f7e8 fe28 	bl	b3fc <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   227ac:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   227b0:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   227b2:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   227b6:	2300      	movs	r3, #0
   227b8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   227bc:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   227be:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   227c0:	68eb      	ldr	r3, [r5, #12]
   227c2:	1c5a      	adds	r2, r3, #1
   227c4:	d013      	beq.n	227ee <uarte_0_init+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227c6:	a802      	add	r0, sp, #8
   227c8:	9302      	str	r3, [sp, #8]
   227ca:	f7ff fed9 	bl	22580 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   227ce:	9a02      	ldr	r2, [sp, #8]
   227d0:	2301      	movs	r3, #1
   227d2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   227d4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   227d8:	68eb      	ldr	r3, [r5, #12]
   227da:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227dc:	a802      	add	r0, sp, #8
   227de:	f7ff fecf 	bl	22580 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   227e2:	9b02      	ldr	r3, [sp, #8]
   227e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   227e8:	2203      	movs	r2, #3
   227ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   227ee:	6928      	ldr	r0, [r5, #16]
   227f0:	1c43      	adds	r3, r0, #1
   227f2:	d006      	beq.n	22802 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   227f4:	7f2b      	ldrb	r3, [r5, #28]
   227f6:	2b00      	cmp	r3, #0
   227f8:	bf14      	ite	ne
   227fa:	2103      	movne	r1, #3
   227fc:	2100      	moveq	r1, #0
   227fe:	f00a fb85 	bl	2cf0c <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   22802:	696b      	ldr	r3, [r5, #20]
   22804:	1c5a      	adds	r2, r3, #1
   22806:	d013      	beq.n	22830 <uarte_0_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22808:	a802      	add	r0, sp, #8
   2280a:	9302      	str	r3, [sp, #8]
   2280c:	f7ff feb8 	bl	22580 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22810:	9a02      	ldr	r2, [sp, #8]
   22812:	2301      	movs	r3, #1
   22814:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   22816:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   2281a:	696b      	ldr	r3, [r5, #20]
   2281c:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2281e:	a802      	add	r0, sp, #8
   22820:	f7ff feae 	bl	22580 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22824:	9b02      	ldr	r3, [sp, #8]
   22826:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2282a:	2203      	movs	r2, #3
   2282c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   22830:	69a8      	ldr	r0, [r5, #24]
   22832:	1c43      	adds	r3, r0, #1
   22834:	d006      	beq.n	22844 <uarte_0_init+0xb0>
			nrf_gpio_cfg_input(cfg->cts_pin,
   22836:	7f6b      	ldrb	r3, [r5, #29]
   22838:	2b00      	cmp	r3, #0
   2283a:	bf14      	ite	ne
   2283c:	2103      	movne	r1, #3
   2283e:	2100      	moveq	r1, #0
   22840:	f00a fb64 	bl	2cf0c <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   22844:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   22848:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   2284a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2284e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   22852:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   22856:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   22858:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   2285c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   22860:	1d31      	adds	r1, r6, #4
   22862:	f7ff fe9b 	bl	2259c <uarte_nrfx_configure>
	if (err) {
   22866:	4605      	mov	r5, r0
   22868:	2800      	cmp	r0, #0
   2286a:	d158      	bne.n	2291e <uarte_0_init+0x18a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2286c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   22870:	0798      	lsls	r0, r3, #30
   22872:	d52b      	bpl.n	228cc <uarte_0_init+0x138>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   22874:	f106 0016 	add.w	r0, r6, #22
   22878:	f001 f9ee 	bl	23c58 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2287c:	4b2a      	ldr	r3, [pc, #168]	; (22928 <uarte_0_init+0x194>)
   2287e:	4298      	cmp	r0, r3
   22880:	d011      	beq.n	228a6 <uarte_0_init+0x112>
		LOG_ERR("Failed to allocate PPI Channel");
   22882:	482a      	ldr	r0, [pc, #168]	; (2292c <uarte_0_init+0x198>)
   22884:	6803      	ldr	r3, [r0, #0]
   22886:	0759      	lsls	r1, r3, #29
   22888:	d00a      	beq.n	228a0 <uarte_0_init+0x10c>
   2288a:	4b29      	ldr	r3, [pc, #164]	; (22930 <uarte_0_init+0x19c>)
   2288c:	9306      	str	r3, [sp, #24]
   2288e:	2302      	movs	r3, #2
   22890:	9301      	str	r3, [sp, #4]
   22892:	9305      	str	r3, [sp, #20]
   22894:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22898:	462b      	mov	r3, r5
   2289a:	aa05      	add	r2, sp, #20
   2289c:	f005 f850 	bl	27940 <z_impl_z_log_msg2_static_create>
		return -EIO;
   228a0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   228a4:	e03b      	b.n	2291e <uarte_0_init+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   228a6:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   228a8:	00c3      	lsls	r3, r0, #3
   228aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   228ae:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   228b2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   228b6:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   228ba:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   228be:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   228c2:	4a1c      	ldr	r2, [pc, #112]	; (22934 <uarte_0_init+0x1a0>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   228c4:	2301      	movs	r3, #1
   228c6:	4083      	lsls	r3, r0
   228c8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   228cc:	2308      	movs	r3, #8
   228ce:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   228d2:	f898 3008 	ldrb.w	r3, [r8, #8]
   228d6:	b95b      	cbnz	r3, 228f0 <uarte_0_init+0x15c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   228dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   228e0:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   228e4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   228e8:	2301      	movs	r3, #1
   228ea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228ee:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   228f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   228f4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   228f6:	bf5c      	itt	pl
   228f8:	f44f 7280 	movpl.w	r2, #256	; 0x100
   228fc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22900:	06db      	lsls	r3, r3, #27
   22902:	bf44      	itt	mi
   22904:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   22908:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2290c:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
   2290e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22910:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22914:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22918:	2301      	movs	r3, #1
   2291a:	60a3      	str	r3, [r4, #8]
   2291c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2291e:	4628      	mov	r0, r5
   22920:	b008      	add	sp, #32
   22922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22926:	bf00      	nop
   22928:	0bad0000 	.word	0x0bad0000
   2292c:	20000a94 	.word	0x20000a94
   22930:	000348ed 	.word	0x000348ed
   22934:	4001f000 	.word	0x4001f000

00022938 <random_byte_get>:
	__asm__ volatile(
   22938:	f04f 0320 	mov.w	r3, #32
   2293c:	f3ef 8211 	mrs	r2, BASEPRI
   22940:	f383 8812 	msr	BASEPRI_MAX, r3
   22944:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   22948:	4b09      	ldr	r3, [pc, #36]	; (22970 <random_byte_get+0x38>)
   2294a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2294e:	b161      	cbz	r1, 2296a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22950:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   22952:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22956:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   2295a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   2295e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   22960:	f382 8811 	msr	BASEPRI, r2
   22964:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   22968:	4770      	bx	lr
	int retval = -EAGAIN;
   2296a:	f06f 000a 	mvn.w	r0, #10
   2296e:	e7f7      	b.n	22960 <random_byte_get+0x28>
   22970:	4000d000 	.word	0x4000d000

00022974 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   22974:	b5f0      	push	{r4, r5, r6, r7, lr}
   22976:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   22978:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   2297a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   2297c:	f04f 0020 	mov.w	r0, #32
   22980:	f3ef 8e11 	mrs	lr, BASEPRI
   22984:	f380 8812 	msr	BASEPRI_MAX, r0
   22988:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2298c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2298e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   22992:	1ba4      	subs	r4, r4, r6
   22994:	403c      	ands	r4, r7
	if (available < len) {
   22996:	42a2      	cmp	r2, r4
		len = available;
   22998:	bf88      	it	hi
   2299a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2299c:	18b0      	adds	r0, r6, r2
   2299e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   229a0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   229a2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   229a4:	f38e 8811 	msr	BASEPRI, lr
   229a8:	f3bf 8f6f 	isb	sy
   229ac:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   229ae:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   229b0:	4290      	cmp	r0, r2
   229b2:	d119      	bne.n	229e8 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   229b4:	4566      	cmp	r6, ip
   229b6:	d10d      	bne.n	229d4 <rng_pool_get+0x60>
	__asm__ volatile(
   229b8:	f04f 0520 	mov.w	r5, #32
   229bc:	f3ef 8011 	mrs	r0, BASEPRI
   229c0:	f385 8812 	msr	BASEPRI_MAX, r5
   229c4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   229c8:	781d      	ldrb	r5, [r3, #0]
   229ca:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   229cc:	f380 8811 	msr	BASEPRI, r0
   229d0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   229d4:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   229d6:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   229d8:	b290      	uxth	r0, r2
	available = available - len;
   229da:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   229dc:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   229de:	bf22      	ittt	cs
   229e0:	4b06      	ldrcs	r3, [pc, #24]	; (229fc <rng_pool_get+0x88>)
   229e2:	2201      	movcs	r2, #1
   229e4:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   229e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   229e8:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   229ec:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   229ee:	f89e e005 	ldrb.w	lr, [lr, #5]
   229f2:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   229f6:	403d      	ands	r5, r7
   229f8:	e7da      	b.n	229b0 <rng_pool_get+0x3c>
   229fa:	bf00      	nop
   229fc:	4000d000 	.word	0x4000d000

00022a00 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   22a00:	43db      	mvns	r3, r3
{
   22a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   22a06:	f013 0501 	ands.w	r5, r3, #1
{
   22a0a:	460e      	mov	r6, r1
   22a0c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   22a0e:	d004      	beq.n	22a1a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   22a10:	4821      	ldr	r0, [pc, #132]	; (22a98 <entropy_nrf5_get_entropy_isr+0x98>)
   22a12:	f7ff ffaf 	bl	22974 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   22a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   22a1a:	b3a2      	cbz	r2, 22a86 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   22a1c:	f04f 0320 	mov.w	r3, #32
   22a20:	f3ef 8811 	mrs	r8, BASEPRI
   22a24:	f383 8812 	msr	BASEPRI_MAX, r3
   22a28:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   22a2c:	200d      	movs	r0, #13
   22a2e:	f7e8 fd09 	bl	b444 <arch_irq_is_enabled>
   22a32:	4607      	mov	r7, r0
		irq_disable(IRQN);
   22a34:	200d      	movs	r0, #13
   22a36:	f7e8 fcf1 	bl	b41c <arch_irq_disable>
	__asm__ volatile(
   22a3a:	f388 8811 	msr	BASEPRI, r8
   22a3e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22a42:	f8df 8058 	ldr.w	r8, [pc, #88]	; 22a9c <entropy_nrf5_get_entropy_isr+0x9c>
   22a46:	f8df 9058 	ldr.w	r9, [pc, #88]	; 22aa0 <entropy_nrf5_get_entropy_isr+0xa0>
   22a4a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   22a4e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   22a52:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22a56:	2301      	movs	r3, #1
   22a58:	f8c8 3000 	str.w	r3, [r8]
   22a5c:	4625      	mov	r5, r4
   22a5e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   22a62:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   22a66:	b183      	cbz	r3, 22a8a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   22a68:	f7ff ff66 	bl	22938 <random_byte_get>
			if (byte < 0) {
   22a6c:	1e03      	subs	r3, r0, #0
   22a6e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   22a72:	dbf6      	blt.n	22a62 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   22a74:	3d01      	subs	r5, #1
   22a76:	b2ad      	uxth	r5, r5
   22a78:	5573      	strb	r3, [r6, r5]
		} while (len);
   22a7a:	2d00      	cmp	r5, #0
   22a7c:	d1f1      	bne.n	22a62 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   22a7e:	b117      	cbz	r7, 22a86 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   22a80:	200d      	movs	r0, #13
   22a82:	f7e8 fcbb 	bl	b3fc <arch_irq_enable>
	return cnt;
   22a86:	4620      	mov	r0, r4
   22a88:	e7c5      	b.n	22a16 <entropy_nrf5_get_entropy_isr+0x16>
   22a8a:	f3bf 8f4f 	dsb	sy
				__WFE();
   22a8e:	bf20      	wfe
				__SEV();
   22a90:	bf40      	sev
				__WFE();
   22a92:	bf20      	wfe
   22a94:	e7e5      	b.n	22a62 <entropy_nrf5_get_entropy_isr+0x62>
   22a96:	bf00      	nop
   22a98:	20004770 	.word	0x20004770
   22a9c:	4000d000 	.word	0x4000d000
   22aa0:	e000e100 	.word	0xe000e100

00022aa4 <entropy_nrf5_get_entropy>:
{
   22aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   22aa8:	4f13      	ldr	r7, [pc, #76]	; (22af8 <entropy_nrf5_get_entropy+0x54>)
   22aaa:	460d      	mov	r5, r1
   22aac:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   22aae:	f107 0845 	add.w	r8, r7, #69	; 0x45
   22ab2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   22ab6:	b914      	cbnz	r4, 22abe <entropy_nrf5_get_entropy+0x1a>
}
   22ab8:	4620      	mov	r0, r4
   22aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22ac6:	4638      	mov	r0, r7
   22ac8:	f002 fd3a 	bl	25540 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   22acc:	4622      	mov	r2, r4
   22ace:	4629      	mov	r1, r5
   22ad0:	4640      	mov	r0, r8
   22ad2:	f7ff ff4f 	bl	22974 <rng_pool_get>
   22ad6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   22ad8:	4638      	mov	r0, r7
   22ada:	f002 fd0b 	bl	254f4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   22ade:	b93e      	cbnz	r6, 22af0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   22ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22ae8:	4648      	mov	r0, r9
   22aea:	f002 fd29 	bl	25540 <z_impl_k_sem_take>
			continue;
   22aee:	e7e2      	b.n	22ab6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   22af0:	1ba4      	subs	r4, r4, r6
   22af2:	b2a4      	uxth	r4, r4
		buf += bytes;
   22af4:	4435      	add	r5, r6
   22af6:	e7de      	b.n	22ab6 <entropy_nrf5_get_entropy+0x12>
   22af8:	20004740 	.word	0x20004740

00022afc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   22afc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   22afe:	4c19      	ldr	r4, [pc, #100]	; (22b64 <entropy_nrf5_init+0x68>)
   22b00:	2201      	movs	r2, #1
   22b02:	4611      	mov	r1, r2
   22b04:	4620      	mov	r0, r4
   22b06:	f00a fe08 	bl	2d71a <z_impl_k_sem_init>
   22b0a:	2201      	movs	r2, #1
   22b0c:	2100      	movs	r1, #0
   22b0e:	f104 0018 	add.w	r0, r4, #24
   22b12:	f00a fe02 	bl	2d71a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   22b16:	f240 4307 	movw	r3, #1031	; 0x407
   22b1a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   22b1e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22b22:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   22b24:	230c      	movs	r3, #12
   22b26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   22b2a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   22b2c:	4b0e      	ldr	r3, [pc, #56]	; (22b68 <entropy_nrf5_init+0x6c>)
   22b2e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   22b32:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   22b36:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   22b3a:	f042 0201 	orr.w	r2, r2, #1
   22b3e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   22b42:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22b44:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   22b48:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   22b4c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   22b50:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22b52:	6019      	str	r1, [r3, #0]
   22b54:	200d      	movs	r0, #13
   22b56:	f7e8 fc83 	bl	b460 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   22b5a:	200d      	movs	r0, #13
   22b5c:	f7e8 fc4e 	bl	b3fc <arch_irq_enable>

	return 0;
}
   22b60:	4628      	mov	r0, r5
   22b62:	bd38      	pop	{r3, r4, r5, pc}
   22b64:	20004740 	.word	0x20004740
   22b68:	4000d000 	.word	0x4000d000

00022b6c <isr>:
{
   22b6c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   22b6e:	f7ff fee3 	bl	22938 <random_byte_get>
	if (byte < 0) {
   22b72:	2800      	cmp	r0, #0
   22b74:	db20      	blt.n	22bb8 <isr+0x4c>
	uint8_t last  = rngp->last;
   22b76:	4b17      	ldr	r3, [pc, #92]	; (22bd4 <isr+0x68>)
   22b78:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   22b7c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   22b80:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   22b84:	1a51      	subs	r1, r2, r1
   22b86:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   22b8a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   22b8c:	d10d      	bne.n	22baa <isr+0x3e>
	uint8_t last  = rngp->last;
   22b8e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   22b92:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   22b96:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   22b9a:	1a51      	subs	r1, r2, r1
   22b9c:	ea34 0101 	bics.w	r1, r4, r1
   22ba0:	d10b      	bne.n	22bba <isr+0x4e>
   22ba2:	4b0d      	ldr	r3, [pc, #52]	; (22bd8 <isr+0x6c>)
   22ba4:	2201      	movs	r2, #1
   22ba6:	605a      	str	r2, [r3, #4]
}
   22ba8:	e00e      	b.n	22bc8 <isr+0x5c>
	rngp->buffer[last] = byte;
   22baa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   22bac:	3201      	adds	r2, #1
   22bae:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   22bb0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   22bb4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   22bb8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   22bba:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   22bbc:	3201      	adds	r2, #1
   22bbe:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   22bc0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   22bc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   22bc8:	4804      	ldr	r0, [pc, #16]	; (22bdc <isr+0x70>)
}
   22bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22bce:	f002 bc91 	b.w	254f4 <z_impl_k_sem_give>
   22bd2:	bf00      	nop
   22bd4:	20004740 	.word	0x20004740
   22bd8:	4000d000 	.word	0x4000d000
   22bdc:	20004758 	.word	0x20004758

00022be0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   22be0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22be2:	2301      	movs	r3, #1
   22be4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22be6:	4a11      	ldr	r2, [pc, #68]	; (22c2c <compare_int_lock+0x4c>)
   22be8:	f3bf 8f5b 	dmb	ish
   22bec:	43dc      	mvns	r4, r3
   22bee:	e852 1f00 	ldrex	r1, [r2]
   22bf2:	ea01 0c04 	and.w	ip, r1, r4
   22bf6:	e842 ce00 	strex	lr, ip, [r2]
   22bfa:	f1be 0f00 	cmp.w	lr, #0
   22bfe:	d1f6      	bne.n	22bee <compare_int_lock+0xe>
   22c00:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22c08:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   22c0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22c10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   22c14:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   22c18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22c1c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   22c20:	420b      	tst	r3, r1
}
   22c22:	bf14      	ite	ne
   22c24:	2001      	movne	r0, #1
   22c26:	2000      	moveq	r0, #0
   22c28:	bd10      	pop	{r4, pc}
   22c2a:	bf00      	nop
   22c2c:	20004798 	.word	0x20004798

00022c30 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22c30:	4919      	ldr	r1, [pc, #100]	; (22c98 <sys_clock_timeout_handler+0x68>)
{
   22c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c34:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   22c36:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22c3a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   22c3c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22c40:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22c44:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   22c46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22c4a:	d222      	bcs.n	22c92 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22c4c:	4b13      	ldr	r3, [pc, #76]	; (22c9c <sys_clock_timeout_handler+0x6c>)
   22c4e:	681b      	ldr	r3, [r3, #0]
   22c50:	0a1a      	lsrs	r2, r3, #8
   22c52:	061b      	lsls	r3, r3, #24
   22c54:	195e      	adds	r6, r3, r5
   22c56:	4b12      	ldr	r3, [pc, #72]	; (22ca0 <sys_clock_timeout_handler+0x70>)
   22c58:	f142 0700 	adc.w	r7, r2, #0
   22c5c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   22c60:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   22c62:	f003 fac7 	bl	261f4 <sys_clock_announce>
    return p_reg->CC[ch];
   22c66:	00a3      	lsls	r3, r4, #2
   22c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22c6c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   22c70:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   22c74:	42aa      	cmp	r2, r5
   22c76:	d10b      	bne.n	22c90 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   22c78:	b91e      	cbnz	r6, 22c82 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   22c7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22c7e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   22c82:	4b08      	ldr	r3, [pc, #32]	; (22ca4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   22c88:	fa00 f404 	lsl.w	r4, r0, r4
   22c8c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   22c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   22c92:	2600      	movs	r6, #0
   22c94:	e7e5      	b.n	22c62 <sys_clock_timeout_handler+0x32>
   22c96:	bf00      	nop
   22c98:	200023c0 	.word	0x200023c0
   22c9c:	2000479c 	.word	0x2000479c
   22ca0:	200023a8 	.word	0x200023a8
   22ca4:	40011000 	.word	0x40011000

00022ca8 <compare_int_unlock>:
	if (key) {
   22ca8:	b319      	cbz	r1, 22cf2 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22caa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   22cae:	2301      	movs	r3, #1
   22cb0:	4a10      	ldr	r2, [pc, #64]	; (22cf4 <compare_int_unlock+0x4c>)
   22cb2:	4083      	lsls	r3, r0
   22cb4:	e852 1f00 	ldrex	r1, [r2]
   22cb8:	4319      	orrs	r1, r3
   22cba:	e842 1c00 	strex	ip, r1, [r2]
   22cbe:	f1bc 0f00 	cmp.w	ip, #0
   22cc2:	d1f7      	bne.n	22cb4 <compare_int_unlock+0xc>
   22cc4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   22cc8:	4a0b      	ldr	r2, [pc, #44]	; (22cf8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22cce:	4083      	lsls	r3, r0
   22cd0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22cd4:	4b09      	ldr	r3, [pc, #36]	; (22cfc <compare_int_unlock+0x54>)
   22cd6:	f3bf 8f5b 	dmb	ish
   22cda:	681b      	ldr	r3, [r3, #0]
   22cdc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22ce0:	fa23 f000 	lsr.w	r0, r3, r0
   22ce4:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22ce6:	bf42      	ittt	mi
   22ce8:	4b05      	ldrmi	r3, [pc, #20]	; (22d00 <compare_int_unlock+0x58>)
   22cea:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   22cee:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   22cf2:	4770      	bx	lr
   22cf4:	20004798 	.word	0x20004798
   22cf8:	40011000 	.word	0x40011000
   22cfc:	20004794 	.word	0x20004794
   22d00:	e000e100 	.word	0xe000e100

00022d04 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22d04:	4b0d      	ldr	r3, [pc, #52]	; (22d3c <z_nrf_rtc_timer_read+0x38>)
   22d06:	6818      	ldr	r0, [r3, #0]
   22d08:	0a01      	lsrs	r1, r0, #8
   22d0a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22d0c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   22d10:	4b0b      	ldr	r3, [pc, #44]	; (22d40 <z_nrf_rtc_timer_read+0x3c>)
   22d12:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22d16:	1818      	adds	r0, r3, r0
   22d18:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22d20:	d20a      	bcs.n	22d38 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22d22:	4b08      	ldr	r3, [pc, #32]	; (22d44 <z_nrf_rtc_timer_read+0x40>)
   22d24:	e9d3 2300 	ldrd	r2, r3, [r3]
   22d28:	4290      	cmp	r0, r2
   22d2a:	eb71 0303 	sbcs.w	r3, r1, r3
   22d2e:	d203      	bcs.n	22d38 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22d30:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22d34:	f141 0100 	adc.w	r1, r1, #0
}
   22d38:	4770      	bx	lr
   22d3a:	bf00      	nop
   22d3c:	2000479c 	.word	0x2000479c
   22d40:	40011000 	.word	0x40011000
   22d44:	200023a8 	.word	0x200023a8

00022d48 <compare_set>:
{
   22d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d4c:	b085      	sub	sp, #20
   22d4e:	4616      	mov	r6, r2
   22d50:	4698      	mov	r8, r3
   22d52:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   22d54:	f7ff ff44 	bl	22be0 <compare_int_lock>
   22d58:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22d5a:	f7ff ffd3 	bl	22d04 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22d5e:	42b0      	cmp	r0, r6
   22d60:	eb71 0308 	sbcs.w	r3, r1, r8
   22d64:	d278      	bcs.n	22e58 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   22d66:	4b46      	ldr	r3, [pc, #280]	; (22e80 <compare_set+0x138>)
   22d68:	1a30      	subs	r0, r6, r0
   22d6a:	eb68 0101 	sbc.w	r1, r8, r1
   22d6e:	4298      	cmp	r0, r3
   22d70:	f171 0300 	sbcs.w	r3, r1, #0
   22d74:	f080 8081 	bcs.w	22e7a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   22d78:	4b42      	ldr	r3, [pc, #264]	; (22e84 <compare_set+0x13c>)
   22d7a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   22d7e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   22d82:	45d8      	cmp	r8, fp
   22d84:	bf08      	it	eq
   22d86:	4556      	cmpeq	r6, sl
   22d88:	d051      	beq.n	22e2e <compare_set+0xe6>
   22d8a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   22d8e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22d92:	f105 0750 	add.w	r7, r5, #80	; 0x50
   22d96:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   22d9a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22d9c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   22da0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22da4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   22da6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   22daa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22dae:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   22db0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   22db4:	4b34      	ldr	r3, [pc, #208]	; (22e88 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22db6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22dba:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   22dbc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22dc0:	1a40      	subs	r0, r0, r1
   22dc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22dc6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   22dca:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   22dcc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   22dd0:	d107      	bne.n	22de2 <compare_set+0x9a>
   22dd2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   22dd6:	2013      	movs	r0, #19
   22dd8:	f00a fef9 	bl	2dbce <z_impl_k_busy_wait>
   22ddc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   22de0:	4b29      	ldr	r3, [pc, #164]	; (22e88 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   22de2:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   22de6:	eba4 000c 	sub.w	r0, r4, ip
   22dea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   22dee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22df2:	bf88      	it	hi
   22df4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22df6:	2000      	movs	r0, #0
   22df8:	6038      	str	r0, [r7, #0]
   22dfa:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   22dfc:	9801      	ldr	r0, [sp, #4]
   22dfe:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22e02:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   22e06:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   22e0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   22e0e:	4281      	cmp	r1, r0
   22e10:	d006      	beq.n	22e20 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   22e12:	1a20      	subs	r0, r4, r0
   22e14:	3802      	subs	r0, #2
   22e16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   22e1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22e1e:	d819      	bhi.n	22e54 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   22e20:	1aa4      	subs	r4, r4, r2
   22e22:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   22e26:	eb14 0a06 	adds.w	sl, r4, r6
   22e2a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   22e2e:	4915      	ldr	r1, [pc, #84]	; (22e84 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   22e30:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   22e32:	012b      	lsls	r3, r5, #4
   22e34:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   22e38:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   22e3c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   22e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22e40:	6053      	str	r3, [r2, #4]
	return ret;
   22e42:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   22e44:	4628      	mov	r0, r5
   22e46:	9900      	ldr	r1, [sp, #0]
   22e48:	f7ff ff2e 	bl	22ca8 <compare_int_unlock>
}
   22e4c:	4620      	mov	r0, r4
   22e4e:	b005      	add	sp, #20
   22e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e54:	4620      	mov	r0, r4
   22e56:	e7b1      	b.n	22dbc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   22e58:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22e5a:	4a0c      	ldr	r2, [pc, #48]	; (22e8c <compare_set+0x144>)
   22e5c:	f3bf 8f5b 	dmb	ish
   22e60:	40ab      	lsls	r3, r5
   22e62:	e852 1f00 	ldrex	r1, [r2]
   22e66:	4319      	orrs	r1, r3
   22e68:	e842 1000 	strex	r0, r1, [r2]
   22e6c:	2800      	cmp	r0, #0
   22e6e:	d1f8      	bne.n	22e62 <compare_set+0x11a>
   22e70:	f3bf 8f5b 	dmb	ish
   22e74:	46b2      	mov	sl, r6
   22e76:	46c3      	mov	fp, r8
   22e78:	e7d9      	b.n	22e2e <compare_set+0xe6>
			return -EINVAL;
   22e7a:	f06f 0415 	mvn.w	r4, #21
   22e7e:	e7e1      	b.n	22e44 <compare_set+0xfc>
   22e80:	01000001 	.word	0x01000001
   22e84:	200023b0 	.word	0x200023b0
   22e88:	40011000 	.word	0x40011000
   22e8c:	20004794 	.word	0x20004794

00022e90 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22e90:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22e92:	4b19      	ldr	r3, [pc, #100]	; (22ef8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   22e94:	4d19      	ldr	r5, [pc, #100]	; (22efc <sys_clock_driver_init+0x6c>)
   22e96:	2400      	movs	r4, #0
   22e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ea0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   22ea4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22eac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22eb0:	4b13      	ldr	r3, [pc, #76]	; (22f00 <sys_clock_driver_init+0x70>)
   22eb2:	2602      	movs	r6, #2
   22eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22eb8:	2101      	movs	r1, #1
   22eba:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   22ebe:	2011      	movs	r0, #17
   22ec0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22ec4:	4622      	mov	r2, r4
   22ec6:	f7e8 facb 	bl	b460 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22eca:	2011      	movs	r0, #17
   22ecc:	f7e8 fa96 	bl	b3fc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22ed0:	4a0c      	ldr	r2, [pc, #48]	; (22f04 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22ed2:	2301      	movs	r3, #1
   22ed4:	60ab      	str	r3, [r5, #8]
   22ed6:	602b      	str	r3, [r5, #0]
   22ed8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22eda:	4b0b      	ldr	r3, [pc, #44]	; (22f08 <sys_clock_driver_init+0x78>)
   22edc:	4a0b      	ldr	r2, [pc, #44]	; (22f0c <sys_clock_driver_init+0x7c>)
   22ede:	9300      	str	r3, [sp, #0]
   22ee0:	9401      	str	r4, [sp, #4]
   22ee2:	2300      	movs	r3, #0
   22ee4:	4620      	mov	r0, r4
   22ee6:	f7ff ff2f 	bl	22d48 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22eea:	4630      	mov	r0, r6
   22eec:	f7ff f830 	bl	21f50 <z_nrf_clock_control_lf_on>

	return 0;
}
   22ef0:	4620      	mov	r0, r4
   22ef2:	b002      	add	sp, #8
   22ef4:	bd70      	pop	{r4, r5, r6, pc}
   22ef6:	bf00      	nop
   22ef8:	200023b0 	.word	0x200023b0
   22efc:	40011000 	.word	0x40011000
   22f00:	e000e100 	.word	0xe000e100
   22f04:	20004798 	.word	0x20004798
   22f08:	00022c31 	.word	0x00022c31
   22f0c:	007fffff 	.word	0x007fffff

00022f10 <rtc_nrf_isr>:
{
   22f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   22f14:	4c35      	ldr	r4, [pc, #212]	; (22fec <rtc_nrf_isr+0xdc>)
   22f16:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22f1a:	079a      	lsls	r2, r3, #30
   22f1c:	d50b      	bpl.n	22f36 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f1e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22f22:	b143      	cbz	r3, 22f36 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   22f24:	4a32      	ldr	r2, [pc, #200]	; (22ff0 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22f26:	2300      	movs	r3, #0
   22f28:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   22f2c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22f30:	6813      	ldr	r3, [r2, #0]
   22f32:	3301      	adds	r3, #1
   22f34:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   22f36:	f04f 0320 	mov.w	r3, #32
   22f3a:	f3ef 8211 	mrs	r2, BASEPRI
   22f3e:	f383 8812 	msr	BASEPRI_MAX, r3
   22f42:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   22f46:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22f4a:	03db      	lsls	r3, r3, #15
   22f4c:	d512      	bpl.n	22f74 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22f4e:	f3bf 8f5b 	dmb	ish
   22f52:	4b28      	ldr	r3, [pc, #160]	; (22ff4 <rtc_nrf_isr+0xe4>)
   22f54:	e853 1f00 	ldrex	r1, [r3]
   22f58:	f021 0001 	bic.w	r0, r1, #1
   22f5c:	e843 0600 	strex	r6, r0, [r3]
   22f60:	2e00      	cmp	r6, #0
   22f62:	d1f7      	bne.n	22f54 <rtc_nrf_isr+0x44>
   22f64:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22f68:	2900      	cmp	r1, #0
   22f6a:	d136      	bne.n	22fda <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f6c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   22f70:	2b00      	cmp	r3, #0
   22f72:	d132      	bne.n	22fda <rtc_nrf_isr+0xca>
{
   22f74:	2300      	movs	r3, #0
	__asm__ volatile(
   22f76:	f382 8811 	msr	BASEPRI, r2
   22f7a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   22f7e:	b34b      	cbz	r3, 22fd4 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   22f80:	f7ff fec0 	bl	22d04 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   22f84:	f04f 0320 	mov.w	r3, #32
   22f88:	f3ef 8c11 	mrs	ip, BASEPRI
   22f8c:	f383 8812 	msr	BASEPRI_MAX, r3
   22f90:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   22f94:	4b18      	ldr	r3, [pc, #96]	; (22ff8 <rtc_nrf_isr+0xe8>)
   22f96:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   22f9a:	42b0      	cmp	r0, r6
   22f9c:	eb71 0207 	sbcs.w	r2, r1, r7
   22fa0:	f04f 0200 	mov.w	r2, #0
   22fa4:	d320      	bcc.n	22fe8 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22fa6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   22faa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   22fae:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22fb2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   22fb6:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   22fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22fbc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   22fc0:	f38c 8811 	msr	BASEPRI, ip
   22fc4:	f3bf 8f6f 	isb	sy
		if (handler) {
   22fc8:	b121      	cbz	r1, 22fd4 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   22fca:	9500      	str	r5, [sp, #0]
   22fcc:	4632      	mov	r2, r6
   22fce:	463b      	mov	r3, r7
   22fd0:	2000      	movs	r0, #0
   22fd2:	4788      	blx	r1
}
   22fd4:	b003      	add	sp, #12
   22fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22fda:	2300      	movs	r3, #0
   22fdc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   22fe0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22fe4:	2301      	movs	r3, #1
}
   22fe6:	e7c6      	b.n	22f76 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   22fe8:	4611      	mov	r1, r2
   22fea:	e7e9      	b.n	22fc0 <rtc_nrf_isr+0xb0>
   22fec:	40011000 	.word	0x40011000
   22ff0:	2000479c 	.word	0x2000479c
   22ff4:	20004794 	.word	0x20004794
   22ff8:	200023b0 	.word	0x200023b0

00022ffc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22ffc:	1c43      	adds	r3, r0, #1
{
   22ffe:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   23000:	d021      	beq.n	23046 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   23002:	2801      	cmp	r0, #1
   23004:	dd21      	ble.n	2304a <sys_clock_set_timeout+0x4e>
   23006:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2300a:	da20      	bge.n	2304e <sys_clock_set_timeout+0x52>
   2300c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2300e:	f7ff fe79 	bl	22d04 <z_nrf_rtc_timer_read>
   23012:	4b10      	ldr	r3, [pc, #64]	; (23054 <sys_clock_set_timeout+0x58>)
   23014:	e9d3 1300 	ldrd	r1, r3, [r3]
   23018:	1a40      	subs	r0, r0, r1
		ticks = 0;
   2301a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2301e:	bf28      	it	cs
   23020:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   23022:	3001      	adds	r0, #1
   23024:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   23026:	480c      	ldr	r0, [pc, #48]	; (23058 <sys_clock_set_timeout+0x5c>)
   23028:	4282      	cmp	r2, r0
   2302a:	bf28      	it	cs
   2302c:	4602      	movcs	r2, r0
   2302e:	1852      	adds	r2, r2, r1
   23030:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   23034:	4909      	ldr	r1, [pc, #36]	; (2305c <sys_clock_set_timeout+0x60>)
   23036:	9001      	str	r0, [sp, #4]
   23038:	9100      	str	r1, [sp, #0]
   2303a:	f143 0300 	adc.w	r3, r3, #0
   2303e:	f7ff fe83 	bl	22d48 <compare_set>
}
   23042:	b002      	add	sp, #8
   23044:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   23046:	4804      	ldr	r0, [pc, #16]	; (23058 <sys_clock_set_timeout+0x5c>)
   23048:	e7e0      	b.n	2300c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2304a:	2400      	movs	r4, #0
   2304c:	e7df      	b.n	2300e <sys_clock_set_timeout+0x12>
   2304e:	4c02      	ldr	r4, [pc, #8]	; (23058 <sys_clock_set_timeout+0x5c>)
   23050:	e7dd      	b.n	2300e <sys_clock_set_timeout+0x12>
   23052:	bf00      	nop
   23054:	200023c0 	.word	0x200023c0
   23058:	007fffff 	.word	0x007fffff
   2305c:	00022c31 	.word	0x00022c31

00023060 <sys_clock_elapsed>:
{
   23060:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   23062:	f7ff fe4f 	bl	22d04 <z_nrf_rtc_timer_read>
   23066:	4b02      	ldr	r3, [pc, #8]	; (23070 <sys_clock_elapsed+0x10>)
   23068:	681b      	ldr	r3, [r3, #0]
}
   2306a:	1ac0      	subs	r0, r0, r3
   2306c:	bd08      	pop	{r3, pc}
   2306e:	bf00      	nop
   23070:	200023c0 	.word	0x200023c0

00023074 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   23074:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23078:	4905      	ldr	r1, [pc, #20]	; (23090 <__NVIC_SystemReset+0x1c>)
   2307a:	4b06      	ldr	r3, [pc, #24]	; (23094 <__NVIC_SystemReset+0x20>)
   2307c:	68ca      	ldr	r2, [r1, #12]
   2307e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23082:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23084:	60cb      	str	r3, [r1, #12]
   23086:	f3bf 8f4f 	dsb	sy
    __NOP();
   2308a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2308c:	e7fd      	b.n	2308a <__NVIC_SystemReset+0x16>
   2308e:	bf00      	nop
   23090:	e000ed00 	.word	0xe000ed00
   23094:	05fa0004 	.word	0x05fa0004

00023098 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2309c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   230a0:	2a08      	cmp	r2, #8
   230a2:	d106      	bne.n	230b2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   230a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   230a8:	2b05      	cmp	r3, #5
   230aa:	d802      	bhi.n	230b2 <nrf52_errata_103+0x1a>
   230ac:	4a02      	ldr	r2, [pc, #8]	; (230b8 <nrf52_errata_103+0x20>)
   230ae:	5cd0      	ldrb	r0, [r2, r3]
   230b0:	4770      	bx	lr
        return false;
   230b2:	2000      	movs	r0, #0
}
   230b4:	4770      	bx	lr
   230b6:	bf00      	nop
   230b8:	0003492d 	.word	0x0003492d

000230bc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   230bc:	4a02      	ldr	r2, [pc, #8]	; (230c8 <nvmc_wait+0xc>)
   230be:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   230c2:	2b00      	cmp	r3, #0
   230c4:	d0fb      	beq.n	230be <nvmc_wait+0x2>
}
   230c6:	4770      	bx	lr
   230c8:	4001e000 	.word	0x4001e000

000230cc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   230cc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   230ce:	f009 fff8 	bl	2d0c2 <nrf52_errata_136>
   230d2:	b140      	cbz	r0, 230e6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   230d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   230d8:	2200      	movs	r2, #0
   230da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   230de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   230e2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   230e6:	f009 ffec 	bl	2d0c2 <nrf52_errata_136>
   230ea:	2800      	cmp	r0, #0
   230ec:	d046      	beq.n	2317c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   230ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   230f2:	4b65      	ldr	r3, [pc, #404]	; (23288 <SystemInit+0x1bc>)
   230f4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   230f8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   230fc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   23100:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   23104:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   23108:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2310c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   23110:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   23114:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   23118:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2311c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   23120:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   23124:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   23128:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2312c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   23130:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   23134:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   23138:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2313c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   23140:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   23144:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   23148:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2314c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   23150:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   23154:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   23158:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2315c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   23160:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   23164:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   23168:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2316c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   23170:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   23174:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   23178:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2317c:	f7ff ff8c 	bl	23098 <nrf52_errata_103>
   23180:	b118      	cbz	r0, 2318a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   23182:	4b42      	ldr	r3, [pc, #264]	; (2328c <SystemInit+0x1c0>)
   23184:	4a42      	ldr	r2, [pc, #264]	; (23290 <SystemInit+0x1c4>)
   23186:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2318a:	f7ff ff85 	bl	23098 <nrf52_errata_103>
   2318e:	b118      	cbz	r0, 23198 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   23190:	4b40      	ldr	r3, [pc, #256]	; (23294 <SystemInit+0x1c8>)
   23192:	22fb      	movs	r2, #251	; 0xfb
   23194:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   23198:	f7ff ff7e 	bl	23098 <nrf52_errata_103>
   2319c:	b170      	cbz	r0, 231bc <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2319e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   231a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   231a6:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   231aa:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   231ae:	f022 020f 	bic.w	r2, r2, #15
   231b2:	f003 030f 	and.w	r3, r3, #15
   231b6:	4313      	orrs	r3, r2
   231b8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   231bc:	f7ff ff6c 	bl	23098 <nrf52_errata_103>
   231c0:	b120      	cbz	r0, 231cc <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   231c2:	4b35      	ldr	r3, [pc, #212]	; (23298 <SystemInit+0x1cc>)
   231c4:	f44f 7200 	mov.w	r2, #512	; 0x200
   231c8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   231cc:	f009 ff79 	bl	2d0c2 <nrf52_errata_136>
   231d0:	b148      	cbz	r0, 231e6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   231d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   231d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   231da:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   231dc:	bf44      	itt	mi
   231de:	f06f 0201 	mvnmi.w	r2, #1
   231e2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   231e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   231ea:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   231ee:	2a08      	cmp	r2, #8
   231f0:	d10e      	bne.n	23210 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   231f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   231f6:	2b05      	cmp	r3, #5
   231f8:	d802      	bhi.n	23200 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   231fa:	4a28      	ldr	r2, [pc, #160]	; (2329c <SystemInit+0x1d0>)
   231fc:	5cd3      	ldrb	r3, [r2, r3]
   231fe:	b13b      	cbz	r3, 23210 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   23200:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23204:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   23208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2320c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   23210:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   23214:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   23218:	07db      	lsls	r3, r3, #31
   2321a:	d514      	bpl.n	23246 <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2321c:	4820      	ldr	r0, [pc, #128]	; (232a0 <SystemInit+0x1d4>)
   2321e:	2301      	movs	r3, #1
   23220:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   23224:	f7ff ff4a 	bl	230bc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   23228:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   2322c:	f023 0301 	bic.w	r3, r3, #1
   23230:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   23234:	f7ff ff42 	bl	230bc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23238:	2300      	movs	r3, #0
   2323a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   2323e:	f7ff ff3d 	bl	230bc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   23242:	f7ff ff17 	bl	23074 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23246:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   2324a:	2b00      	cmp	r3, #0
   2324c:	db03      	blt.n	23256 <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2324e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23252:	2b00      	cmp	r3, #0
   23254:	da14      	bge.n	23280 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23256:	4912      	ldr	r1, [pc, #72]	; (232a0 <SystemInit+0x1d4>)
   23258:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2325a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2325e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23262:	2412      	movs	r4, #18
    nvmc_wait();
   23264:	f7ff ff2a 	bl	230bc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23268:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2326c:	f7ff ff26 	bl	230bc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   23270:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   23274:	f7ff ff22 	bl	230bc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23278:	2300      	movs	r3, #0
   2327a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   2327e:	e7de      	b.n	2323e <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   23280:	4b08      	ldr	r3, [pc, #32]	; (232a4 <SystemInit+0x1d8>)
   23282:	4a09      	ldr	r2, [pc, #36]	; (232a8 <SystemInit+0x1dc>)
   23284:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   23286:	bd10      	pop	{r4, pc}
   23288:	4000c000 	.word	0x4000c000
   2328c:	40005000 	.word	0x40005000
   23290:	00038148 	.word	0x00038148
   23294:	4000f000 	.word	0x4000f000
   23298:	40029000 	.word	0x40029000
   2329c:	00034927 	.word	0x00034927
   232a0:	4001e000 	.word	0x4001e000
   232a4:	20000810 	.word	0x20000810
   232a8:	03d09000 	.word	0x03d09000

000232ac <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   232ac:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   232ae:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   232b0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   232b2:	fab2 f382 	clz	r3, r2
   232b6:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   232ba:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   232bc:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   232be:	d014      	beq.n	232ea <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   232c0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   232c4:	fa05 f303 	lsl.w	r3, r5, r3
   232c8:	ea22 0303 	bic.w	r3, r2, r3
   232cc:	e850 6f00 	ldrex	r6, [r0]
   232d0:	4296      	cmp	r6, r2
   232d2:	d104      	bne.n	232de <nrfx_flag32_alloc+0x32>
   232d4:	e840 3c00 	strex	ip, r3, [r0]
   232d8:	f1bc 0f00 	cmp.w	ip, #0
   232dc:	d1f6      	bne.n	232cc <nrfx_flag32_alloc+0x20>
   232de:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   232e2:	d1e5      	bne.n	232b0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   232e4:	4802      	ldr	r0, [pc, #8]	; (232f0 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   232e6:	700c      	strb	r4, [r1, #0]
}
   232e8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   232ea:	4802      	ldr	r0, [pc, #8]	; (232f4 <nrfx_flag32_alloc+0x48>)
   232ec:	e7fc      	b.n	232e8 <nrfx_flag32_alloc+0x3c>
   232ee:	bf00      	nop
   232f0:	0bad0000 	.word	0x0bad0000
   232f4:	0bad0002 	.word	0x0bad0002

000232f8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   232f8:	6803      	ldr	r3, [r0, #0]
   232fa:	40cb      	lsrs	r3, r1
   232fc:	07db      	lsls	r3, r3, #31
{
   232fe:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   23300:	d415      	bmi.n	2332e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   23302:	2301      	movs	r3, #1
   23304:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   23308:	6803      	ldr	r3, [r0, #0]
   2330a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2330e:	ea41 0203 	orr.w	r2, r1, r3
   23312:	e850 4f00 	ldrex	r4, [r0]
   23316:	429c      	cmp	r4, r3
   23318:	d104      	bne.n	23324 <nrfx_flag32_free+0x2c>
   2331a:	e840 2c00 	strex	ip, r2, [r0]
   2331e:	f1bc 0f00 	cmp.w	ip, #0
   23322:	d1f6      	bne.n	23312 <nrfx_flag32_free+0x1a>
   23324:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23328:	d1ee      	bne.n	23308 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   2332a:	4802      	ldr	r0, [pc, #8]	; (23334 <nrfx_flag32_free+0x3c>)
}
   2332c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2332e:	4802      	ldr	r0, [pc, #8]	; (23338 <nrfx_flag32_free+0x40>)
   23330:	e7fc      	b.n	2332c <nrfx_flag32_free+0x34>
   23332:	bf00      	nop
   23334:	0bad0000 	.word	0x0bad0000
   23338:	0bad0004 	.word	0x0bad0004

0002333c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2333c:	4b04      	ldr	r3, [pc, #16]	; (23350 <nrfx_clock_init+0x14>)
   2333e:	791a      	ldrb	r2, [r3, #4]
   23340:	b922      	cbnz	r2, 2334c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   23342:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   23344:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   23346:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   23348:	4802      	ldr	r0, [pc, #8]	; (23354 <nrfx_clock_init+0x18>)
   2334a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2334c:	4802      	ldr	r0, [pc, #8]	; (23358 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2334e:	4770      	bx	lr
   23350:	200047a0 	.word	0x200047a0
   23354:	0bad0000 	.word	0x0bad0000
   23358:	0bad000c 	.word	0x0bad000c

0002335c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2335c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2335e:	2000      	movs	r0, #0
   23360:	f7e8 f870 	bl	b444 <arch_irq_is_enabled>
   23364:	b908      	cbnz	r0, 2336a <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23366:	f7e8 f849 	bl	b3fc <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   2336a:	4b02      	ldr	r3, [pc, #8]	; (23374 <nrfx_clock_enable+0x18>)
   2336c:	2201      	movs	r2, #1
   2336e:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   23370:	bd08      	pop	{r3, pc}
   23372:	bf00      	nop
   23374:	20004c32 	.word	0x20004c32

00023378 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   23378:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   2337a:	b110      	cbz	r0, 23382 <nrfx_clock_stop+0xa>
   2337c:	2801      	cmp	r0, #1
   2337e:	d017      	beq.n	233b0 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   23380:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   23382:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   23386:	2302      	movs	r3, #2
   23388:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2338c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   23390:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23394:	2301      	movs	r3, #1
   23396:	60e3      	str	r3, [r4, #12]
   23398:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2339c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   233a0:	03db      	lsls	r3, r3, #15
   233a2:	d5ed      	bpl.n	23380 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   233a4:	2001      	movs	r0, #1
   233a6:	f009 fe96 	bl	2d0d6 <nrfx_busy_wait>
   233aa:	3d01      	subs	r5, #1
   233ac:	d1f6      	bne.n	2339c <nrfx_clock_stop+0x24>
   233ae:	e7e7      	b.n	23380 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   233b0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233b4:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   233b6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233ba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   233be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233c2:	6060      	str	r0, [r4, #4]
   233c4:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   233c8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   233cc:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   233d0:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   233d2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   233d6:	d505      	bpl.n	233e4 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   233d8:	b123      	cbz	r3, 233e4 <nrfx_clock_stop+0x6c>
   233da:	2001      	movs	r0, #1
   233dc:	f009 fe7b 	bl	2d0d6 <nrfx_busy_wait>
   233e0:	3d01      	subs	r5, #1
   233e2:	d1f1      	bne.n	233c8 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   233e4:	4b01      	ldr	r3, [pc, #4]	; (233ec <nrfx_clock_stop+0x74>)
   233e6:	2200      	movs	r2, #0
   233e8:	715a      	strb	r2, [r3, #5]
   233ea:	e7c9      	b.n	23380 <nrfx_clock_stop+0x8>
   233ec:	200047a0 	.word	0x200047a0

000233f0 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   233f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   233f4:	b510      	push	{r4, lr}
   233f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   233fa:	b16a      	cbz	r2, 23418 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233fc:	2200      	movs	r2, #0
   233fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23402:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   23406:	2201      	movs	r2, #1
   23408:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   2340c:	4b11      	ldr	r3, [pc, #68]	; (23454 <nrfx_clock_irq_handler+0x64>)
   2340e:	7958      	ldrb	r0, [r3, #5]
   23410:	b910      	cbnz	r0, 23418 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   23412:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   23414:	681b      	ldr	r3, [r3, #0]
   23416:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2341c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   23420:	b172      	cbz	r2, 23440 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23422:	2200      	movs	r2, #0
   23424:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   23428:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2342c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23430:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   23434:	0792      	lsls	r2, r2, #30
   23436:	d104      	bne.n	23442 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   23438:	2201      	movs	r2, #1
   2343a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2343e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   23440:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   23442:	2202      	movs	r2, #2
   23444:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   23448:	4b02      	ldr	r3, [pc, #8]	; (23454 <nrfx_clock_irq_handler+0x64>)
}
   2344a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2344e:	681b      	ldr	r3, [r3, #0]
   23450:	2001      	movs	r0, #1
   23452:	4718      	bx	r3
   23454:	200047a0 	.word	0x200047a0

00023458 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   23458:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2345a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2345e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   23460:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   23462:	6002      	str	r2, [r0, #0]
}
   23464:	4802      	ldr	r0, [pc, #8]	; (23470 <nrf_gpio_pin_port_decode+0x18>)
   23466:	bf18      	it	ne
   23468:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   2346c:	4770      	bx	lr
   2346e:	bf00      	nop
   23470:	50000300 	.word	0x50000300

00023474 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23474:	4b03      	ldr	r3, [pc, #12]	; (23484 <pin_in_use_by_te+0x10>)
   23476:	3008      	adds	r0, #8
   23478:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2347c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23480:	4770      	bx	lr
   23482:	bf00      	nop
   23484:	20000814 	.word	0x20000814

00023488 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   23488:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2348a:	f100 0308 	add.w	r3, r0, #8
   2348e:	4c0c      	ldr	r4, [pc, #48]	; (234c0 <call_handler+0x38>)
   23490:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   23494:	05da      	lsls	r2, r3, #23
{
   23496:	4605      	mov	r5, r0
   23498:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2349a:	d507      	bpl.n	234ac <call_handler+0x24>
   2349c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   234a0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   234a4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   234a8:	6852      	ldr	r2, [r2, #4]
   234aa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   234ac:	68a3      	ldr	r3, [r4, #8]
   234ae:	b12b      	cbz	r3, 234bc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   234b0:	68e2      	ldr	r2, [r4, #12]
   234b2:	4631      	mov	r1, r6
   234b4:	4628      	mov	r0, r5
    }
}
   234b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   234ba:	4718      	bx	r3
}
   234bc:	bd70      	pop	{r4, r5, r6, pc}
   234be:	bf00      	nop
   234c0:	20000814 	.word	0x20000814

000234c4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   234c4:	4a12      	ldr	r2, [pc, #72]	; (23510 <release_handler+0x4c>)
   234c6:	3008      	adds	r0, #8
{
   234c8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   234ca:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   234ce:	05d9      	lsls	r1, r3, #23
   234d0:	d51b      	bpl.n	2350a <release_handler+0x46>
   234d2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   234d6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   234da:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   234de:	f102 0410 	add.w	r4, r2, #16
   234e2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   234e4:	f834 3b02 	ldrh.w	r3, [r4], #2
   234e8:	f413 7f80 	tst.w	r3, #256	; 0x100
   234ec:	d003      	beq.n	234f6 <release_handler+0x32>
   234ee:	f3c3 2343 	ubfx	r3, r3, #9, #4
   234f2:	4299      	cmp	r1, r3
   234f4:	d009      	beq.n	2350a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   234f6:	3001      	adds	r0, #1
   234f8:	2830      	cmp	r0, #48	; 0x30
   234fa:	d1f3      	bne.n	234e4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   234fc:	2300      	movs	r3, #0
   234fe:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23502:	4804      	ldr	r0, [pc, #16]	; (23514 <release_handler+0x50>)
}
   23504:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23506:	f7ff bef7 	b.w	232f8 <nrfx_flag32_free>
}
   2350a:	bc10      	pop	{r4}
   2350c:	4770      	bx	lr
   2350e:	bf00      	nop
   23510:	20000814 	.word	0x20000814
   23514:	20000888 	.word	0x20000888

00023518 <pin_handler_trigger_uninit>:
{
   23518:	b538      	push	{r3, r4, r5, lr}
   2351a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2351c:	f7ff ffaa 	bl	23474 <pin_in_use_by_te>
   23520:	4c09      	ldr	r4, [pc, #36]	; (23548 <pin_handler_trigger_uninit+0x30>)
   23522:	f102 0508 	add.w	r5, r2, #8
   23526:	b140      	cbz	r0, 2353a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23528:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2352c:	4907      	ldr	r1, [pc, #28]	; (2354c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2352e:	0b5b      	lsrs	r3, r3, #13
   23530:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   23534:	2000      	movs	r0, #0
   23536:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2353a:	4610      	mov	r0, r2
   2353c:	f7ff ffc2 	bl	234c4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   23540:	2300      	movs	r3, #0
   23542:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   23546:	bd38      	pop	{r3, r4, r5, pc}
   23548:	20000814 	.word	0x20000814
   2354c:	40006000 	.word	0x40006000

00023550 <nrfx_gpiote_input_configure>:
{
   23550:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23554:	4604      	mov	r4, r0
   23556:	4617      	mov	r7, r2
   23558:	461d      	mov	r5, r3
    if (p_input_config)
   2355a:	b321      	cbz	r1, 235a6 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2355c:	4e4e      	ldr	r6, [pc, #312]	; (23698 <nrfx_gpiote_input_configure+0x148>)
   2355e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23562:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   23566:	079b      	lsls	r3, r3, #30
   23568:	d506      	bpl.n	23578 <nrfx_gpiote_input_configure+0x28>
   2356a:	f7ff ff83 	bl	23474 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   2356e:	b118      	cbz	r0, 23578 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   23570:	484a      	ldr	r0, [pc, #296]	; (2369c <nrfx_gpiote_input_configure+0x14c>)
}
   23572:	b004      	add	sp, #16
   23574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23578:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2357a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2357e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23582:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23586:	f10d 020f 	add.w	r2, sp, #15
   2358a:	460b      	mov	r3, r1
   2358c:	4620      	mov	r0, r4
   2358e:	f10d 010e 	add.w	r1, sp, #14
   23592:	f009 fdce 	bl	2d132 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   23596:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   2359a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2359e:	f043 0301 	orr.w	r3, r3, #1
   235a2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   235a6:	b197      	cbz	r7, 235ce <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   235a8:	4b3b      	ldr	r3, [pc, #236]	; (23698 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   235aa:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   235ac:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   235ae:	f104 0008 	add.w	r0, r4, #8
   235b2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   235b6:	078f      	lsls	r7, r1, #30
   235b8:	d50c      	bpl.n	235d4 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   235ba:	2a00      	cmp	r2, #0
   235bc:	d1d8      	bne.n	23570 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   235be:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   235c2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   235c6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   235ca:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   235ce:	bbcd      	cbnz	r5, 23644 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   235d0:	4833      	ldr	r0, [pc, #204]	; (236a0 <nrfx_gpiote_input_configure+0x150>)
   235d2:	e7ce      	b.n	23572 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   235d4:	f021 0120 	bic.w	r1, r1, #32
   235d8:	04c9      	lsls	r1, r1, #19
   235da:	0cc9      	lsrs	r1, r1, #19
   235dc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   235e0:	2a00      	cmp	r2, #0
   235e2:	d0ec      	beq.n	235be <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   235e4:	2e03      	cmp	r6, #3
   235e6:	d8c3      	bhi.n	23570 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   235e8:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   235ea:	b92e      	cbnz	r6, 235f8 <nrfx_gpiote_input_configure+0xa8>
   235ec:	4a2d      	ldr	r2, [pc, #180]	; (236a4 <nrfx_gpiote_input_configure+0x154>)
   235ee:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   235f2:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   235f6:	e7e2      	b.n	235be <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   235f8:	00ba      	lsls	r2, r7, #2
   235fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   235fe:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23602:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   23606:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2360a:	f02c 0c03 	bic.w	ip, ip, #3
   2360e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23612:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   23616:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   2361a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   2361e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23622:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   23626:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   2362a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   2362e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   23632:	ea4c 0c0e 	orr.w	ip, ip, lr
   23636:	f041 0120 	orr.w	r1, r1, #32
   2363a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2363e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   23642:	e7bc      	b.n	235be <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   23644:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   23648:	4620      	mov	r0, r4
   2364a:	f7ff ff3b 	bl	234c4 <release_handler>
    if (!handler)
   2364e:	2e00      	cmp	r6, #0
   23650:	d0be      	beq.n	235d0 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23652:	4d11      	ldr	r5, [pc, #68]	; (23698 <nrfx_gpiote_input_configure+0x148>)
   23654:	682b      	ldr	r3, [r5, #0]
   23656:	429e      	cmp	r6, r3
   23658:	d104      	bne.n	23664 <nrfx_gpiote_input_configure+0x114>
   2365a:	686b      	ldr	r3, [r5, #4]
   2365c:	429f      	cmp	r7, r3
   2365e:	d101      	bne.n	23664 <nrfx_gpiote_input_configure+0x114>
   23660:	2200      	movs	r2, #0
   23662:	e00a      	b.n	2367a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23664:	4810      	ldr	r0, [pc, #64]	; (236a8 <nrfx_gpiote_input_configure+0x158>)
   23666:	f10d 010f 	add.w	r1, sp, #15
   2366a:	f7ff fe1f 	bl	232ac <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2366e:	4b0c      	ldr	r3, [pc, #48]	; (236a0 <nrfx_gpiote_input_configure+0x150>)
   23670:	4298      	cmp	r0, r3
   23672:	f47f af7e 	bne.w	23572 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   23676:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2367a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2367e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23682:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   23684:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23686:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2368a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23692:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   23696:	e79b      	b.n	235d0 <nrfx_gpiote_input_configure+0x80>
   23698:	20000814 	.word	0x20000814
   2369c:	0bad0004 	.word	0x0bad0004
   236a0:	0bad0000 	.word	0x0bad0000
   236a4:	40006000 	.word	0x40006000
   236a8:	20000888 	.word	0x20000888

000236ac <nrfx_gpiote_output_configure>:
{
   236ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   236ae:	4604      	mov	r4, r0
   236b0:	b085      	sub	sp, #20
   236b2:	4615      	mov	r5, r2
    if (p_config)
   236b4:	b319      	cbz	r1, 236fe <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   236b6:	4e33      	ldr	r6, [pc, #204]	; (23784 <nrfx_gpiote_output_configure+0xd8>)
   236b8:	f100 0708 	add.w	r7, r0, #8
   236bc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   236c0:	0793      	lsls	r3, r2, #30
   236c2:	d403      	bmi.n	236cc <nrfx_gpiote_output_configure+0x20>
   236c4:	f7ff fed6 	bl	23474 <pin_in_use_by_te>
   236c8:	2800      	cmp	r0, #0
   236ca:	d158      	bne.n	2377e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   236cc:	f012 0f1c 	tst.w	r2, #28
   236d0:	d002      	beq.n	236d8 <nrfx_gpiote_output_configure+0x2c>
   236d2:	784b      	ldrb	r3, [r1, #1]
   236d4:	2b01      	cmp	r3, #1
   236d6:	d052      	beq.n	2377e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   236d8:	2301      	movs	r3, #1
   236da:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   236de:	2300      	movs	r3, #0
   236e0:	e9cd 1300 	strd	r1, r3, [sp]
   236e4:	1c4a      	adds	r2, r1, #1
   236e6:	1c8b      	adds	r3, r1, #2
   236e8:	4620      	mov	r0, r4
   236ea:	f10d 010f 	add.w	r1, sp, #15
   236ee:	f009 fd20 	bl	2d132 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   236f2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   236f6:	f043 0303 	orr.w	r3, r3, #3
   236fa:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   236fe:	b915      	cbnz	r5, 23706 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   23700:	4821      	ldr	r0, [pc, #132]	; (23788 <nrfx_gpiote_output_configure+0xdc>)
}
   23702:	b005      	add	sp, #20
   23704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23706:	4e1f      	ldr	r6, [pc, #124]	; (23784 <nrfx_gpiote_output_configure+0xd8>)
   23708:	f104 0708 	add.w	r7, r4, #8
   2370c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   23710:	0783      	lsls	r3, r0, #30
   23712:	d534      	bpl.n	2377e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   23714:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   23718:	4661      	mov	r1, ip
   2371a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2371c:	f020 0020 	bic.w	r0, r0, #32
   23720:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   23724:	04c0      	lsls	r0, r0, #19
   23726:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2372a:	0cc0      	lsrs	r0, r0, #19
   2372c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   23730:	2300      	movs	r3, #0
   23732:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   23736:	786a      	ldrb	r2, [r5, #1]
   23738:	2a00      	cmp	r2, #0
   2373a:	d0e1      	beq.n	23700 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2373c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   23740:	78ad      	ldrb	r5, [r5, #2]
   23742:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   23746:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2374a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2374e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   23752:	0223      	lsls	r3, r4, #8
   23754:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   23758:	0412      	lsls	r2, r2, #16
   2375a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2375e:	ea43 030e 	orr.w	r3, r3, lr
   23762:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   23764:	052a      	lsls	r2, r5, #20
   23766:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2376a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2376e:	4313      	orrs	r3, r2
   23770:	f040 0020 	orr.w	r0, r0, #32
   23774:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   23778:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2377c:	e7c0      	b.n	23700 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   2377e:	4803      	ldr	r0, [pc, #12]	; (2378c <nrfx_gpiote_output_configure+0xe0>)
   23780:	e7bf      	b.n	23702 <nrfx_gpiote_output_configure+0x56>
   23782:	bf00      	nop
   23784:	20000814 	.word	0x20000814
   23788:	0bad0000 	.word	0x0bad0000
   2378c:	0bad0004 	.word	0x0bad0004

00023790 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   23790:	4b01      	ldr	r3, [pc, #4]	; (23798 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   23792:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   23796:	4770      	bx	lr
   23798:	20000814 	.word	0x20000814

0002379c <nrfx_gpiote_channel_get>:
{
   2379c:	b508      	push	{r3, lr}
   2379e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   237a0:	f7ff fe68 	bl	23474 <pin_in_use_by_te>
   237a4:	b138      	cbz	r0, 237b6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   237a6:	4b05      	ldr	r3, [pc, #20]	; (237bc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   237a8:	4805      	ldr	r0, [pc, #20]	; (237c0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   237aa:	3208      	adds	r2, #8
   237ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   237b0:	0b5b      	lsrs	r3, r3, #13
   237b2:	700b      	strb	r3, [r1, #0]
}
   237b4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   237b6:	4803      	ldr	r0, [pc, #12]	; (237c4 <nrfx_gpiote_channel_get+0x28>)
   237b8:	e7fc      	b.n	237b4 <nrfx_gpiote_channel_get+0x18>
   237ba:	bf00      	nop
   237bc:	20000814 	.word	0x20000814
   237c0:	0bad0000 	.word	0x0bad0000
   237c4:	0bad0004 	.word	0x0bad0004

000237c8 <nrfx_gpiote_init>:
{
   237c8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   237ca:	4c0f      	ldr	r4, [pc, #60]	; (23808 <nrfx_gpiote_init+0x40>)
   237cc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   237d0:	b9bd      	cbnz	r5, 23802 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   237d2:	2260      	movs	r2, #96	; 0x60
   237d4:	4629      	mov	r1, r5
   237d6:	f104 0010 	add.w	r0, r4, #16
   237da:	f006 fdca 	bl	2a372 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   237de:	2006      	movs	r0, #6
   237e0:	f7e7 fe0c 	bl	b3fc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   237e4:	4b09      	ldr	r3, [pc, #36]	; (2380c <nrfx_gpiote_init+0x44>)
    return err_code;
   237e6:	480a      	ldr	r0, [pc, #40]	; (23810 <nrfx_gpiote_init+0x48>)
   237e8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   237ec:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   237f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   237f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   237f8:	2301      	movs	r3, #1
   237fa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   237fe:	6763      	str	r3, [r4, #116]	; 0x74
}
   23800:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   23802:	4804      	ldr	r0, [pc, #16]	; (23814 <nrfx_gpiote_init+0x4c>)
   23804:	e7fc      	b.n	23800 <nrfx_gpiote_init+0x38>
   23806:	bf00      	nop
   23808:	20000814 	.word	0x20000814
   2380c:	40006000 	.word	0x40006000
   23810:	0bad0000 	.word	0x0bad0000
   23814:	0bad0005 	.word	0x0bad0005

00023818 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   23818:	4b03      	ldr	r3, [pc, #12]	; (23828 <nrfx_gpiote_is_init+0x10>)
   2381a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2381e:	3800      	subs	r0, #0
   23820:	bf18      	it	ne
   23822:	2001      	movne	r0, #1
   23824:	4770      	bx	lr
   23826:	bf00      	nop
   23828:	20000814 	.word	0x20000814

0002382c <nrfx_gpiote_channel_free>:
{
   2382c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2382e:	4801      	ldr	r0, [pc, #4]	; (23834 <nrfx_gpiote_channel_free+0x8>)
   23830:	f7ff bd62 	b.w	232f8 <nrfx_flag32_free>
   23834:	20000884 	.word	0x20000884

00023838 <nrfx_gpiote_channel_alloc>:
{
   23838:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2383a:	4801      	ldr	r0, [pc, #4]	; (23840 <nrfx_gpiote_channel_alloc+0x8>)
   2383c:	f7ff bd36 	b.w	232ac <nrfx_flag32_alloc>
   23840:	20000884 	.word	0x20000884

00023844 <nrfx_gpiote_trigger_enable>:
{
   23844:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23846:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23848:	f7ff fe14 	bl	23474 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2384c:	f104 0208 	add.w	r2, r4, #8
   23850:	4b1e      	ldr	r3, [pc, #120]	; (238cc <nrfx_gpiote_trigger_enable+0x88>)
   23852:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23856:	b1e8      	cbz	r0, 23894 <nrfx_gpiote_trigger_enable+0x50>
   23858:	f013 0502 	ands.w	r5, r3, #2
   2385c:	d11a      	bne.n	23894 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2385e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   23860:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   23862:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   23866:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2386a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2386e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23872:	6005      	str	r5, [r0, #0]
   23874:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   23876:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2387a:	f040 0001 	orr.w	r0, r0, #1
   2387e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   23882:	b129      	cbz	r1, 23890 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   23884:	2201      	movs	r2, #1
   23886:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   2388a:	4a11      	ldr	r2, [pc, #68]	; (238d0 <nrfx_gpiote_trigger_enable+0x8c>)
   2388c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23890:	b003      	add	sp, #12
   23892:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23894:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   23898:	2b04      	cmp	r3, #4
   2389a:	d012      	beq.n	238c2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2389c:	2b05      	cmp	r3, #5
   2389e:	d012      	beq.n	238c6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   238a0:	a801      	add	r0, sp, #4
   238a2:	9401      	str	r4, [sp, #4]
   238a4:	f7ff fdd8 	bl	23458 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   238a8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   238aa:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   238ae:	40d9      	lsrs	r1, r3
   238b0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   238b4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   238b6:	4620      	mov	r0, r4
}
   238b8:	b003      	add	sp, #12
   238ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   238be:	f009 bc7f 	b.w	2d1c0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   238c2:	2103      	movs	r1, #3
   238c4:	e7f7      	b.n	238b6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   238c6:	2102      	movs	r1, #2
   238c8:	e7f5      	b.n	238b6 <nrfx_gpiote_trigger_enable+0x72>
   238ca:	bf00      	nop
   238cc:	20000814 	.word	0x20000814
   238d0:	40006000 	.word	0x40006000

000238d4 <nrfx_gpiote_trigger_disable>:
{
   238d4:	b508      	push	{r3, lr}
   238d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   238d8:	f7ff fdcc 	bl	23474 <pin_in_use_by_te>
   238dc:	b1c0      	cbz	r0, 23910 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   238de:	f102 0108 	add.w	r1, r2, #8
   238e2:	4b0e      	ldr	r3, [pc, #56]	; (2391c <nrfx_gpiote_trigger_disable+0x48>)
   238e4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   238e8:	0799      	lsls	r1, r3, #30
   238ea:	d411      	bmi.n	23910 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   238ec:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   238ee:	2201      	movs	r2, #1
   238f0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   238f2:	009b      	lsls	r3, r3, #2
   238f4:	490a      	ldr	r1, [pc, #40]	; (23920 <nrfx_gpiote_trigger_disable+0x4c>)
   238f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   238fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   238fe:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23902:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   23906:	f022 0203 	bic.w	r2, r2, #3
   2390a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2390e:	bd08      	pop	{r3, pc}
   23910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23914:	2100      	movs	r1, #0
   23916:	4610      	mov	r0, r2
   23918:	f009 bc52 	b.w	2d1c0 <nrf_gpio_cfg_sense_set>
   2391c:	20000814 	.word	0x20000814
   23920:	40006000 	.word	0x40006000

00023924 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23924:	4b0e      	ldr	r3, [pc, #56]	; (23960 <nrfx_gpiote_pin_uninit+0x3c>)
   23926:	f100 0208 	add.w	r2, r0, #8
{
   2392a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2392c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   23930:	07db      	lsls	r3, r3, #31
{
   23932:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   23934:	d511      	bpl.n	2395a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   23936:	f7ff ffcd 	bl	238d4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2393a:	4620      	mov	r0, r4
   2393c:	f7ff fdec 	bl	23518 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23940:	a801      	add	r0, sp, #4
   23942:	9401      	str	r4, [sp, #4]
   23944:	f7ff fd88 	bl	23458 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23948:	9b01      	ldr	r3, [sp, #4]
   2394a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2394e:	2202      	movs	r2, #2
   23950:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   23954:	4803      	ldr	r0, [pc, #12]	; (23964 <nrfx_gpiote_pin_uninit+0x40>)
}
   23956:	b002      	add	sp, #8
   23958:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2395a:	4803      	ldr	r0, [pc, #12]	; (23968 <nrfx_gpiote_pin_uninit+0x44>)
   2395c:	e7fb      	b.n	23956 <nrfx_gpiote_pin_uninit+0x32>
   2395e:	bf00      	nop
   23960:	20000814 	.word	0x20000814
   23964:	0bad0000 	.word	0x0bad0000
   23968:	0bad0004 	.word	0x0bad0004

0002396c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2396c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23970:	4b64      	ldr	r3, [pc, #400]	; (23b04 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   23972:	4865      	ldr	r0, [pc, #404]	; (23b08 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23974:	4965      	ldr	r1, [pc, #404]	; (23b0c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   23976:	2600      	movs	r6, #0
{
   23978:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2397a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2397c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2397e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   23980:	b135      	cbz	r5, 23990 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   23982:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   23986:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23988:	bf1e      	ittt	ne
   2398a:	601c      	strne	r4, [r3, #0]
   2398c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2398e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23990:	3304      	adds	r3, #4
   23992:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   23994:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23998:	d1f1      	bne.n	2397e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2399a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 23b08 <nrfx_gpiote_irq_handler+0x19c>
   2399e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   239a2:	2b00      	cmp	r3, #0
   239a4:	f000 8091 	beq.w	23aca <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   239a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   239ac:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   239b0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   239b2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   239b6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   239ba:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   239bc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   239c0:	2700      	movs	r7, #0
            while (latch[i])
   239c2:	f10d 0910 	add.w	r9, sp, #16
   239c6:	017b      	lsls	r3, r7, #5
   239c8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   239ca:	f04f 0a01 	mov.w	sl, #1
   239ce:	e049      	b.n	23a64 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   239d0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   239d2:	4a4f      	ldr	r2, [pc, #316]	; (23b10 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   239d4:	fa94 f4a4 	rbit	r4, r4
   239d8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   239dc:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   239de:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   239e2:	08e0      	lsrs	r0, r4, #3
   239e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   239e8:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   239ea:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   239ee:	fa0a fc02 	lsl.w	ip, sl, r2
   239f2:	f819 2000 	ldrb.w	r2, [r9, r0]
   239f6:	ea22 020c 	bic.w	r2, r2, ip
   239fa:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   239fe:	a803      	add	r0, sp, #12
   23a00:	f3c3 0582 	ubfx	r5, r3, #2, #3
   23a04:	0899      	lsrs	r1, r3, #2
   23a06:	f7ff fd27 	bl	23458 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23a0a:	9a03      	ldr	r2, [sp, #12]
   23a0c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   23a10:	074b      	lsls	r3, r1, #29
   23a12:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23a16:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   23a18:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   23a1c:	d529      	bpl.n	23a72 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   23a1e:	4620      	mov	r0, r4
   23a20:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23a22:	b2d5      	uxtb	r5, r2
   23a24:	f7ff fd30 	bl	23488 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a28:	a803      	add	r0, sp, #12
   23a2a:	9403      	str	r4, [sp, #12]
   23a2c:	f7ff fd14 	bl	23458 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23a30:	9b03      	ldr	r3, [sp, #12]
   23a32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23a36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   23a3a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   23a3e:	429d      	cmp	r5, r3
   23a40:	d107      	bne.n	23a52 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23a42:	2100      	movs	r1, #0
   23a44:	4620      	mov	r0, r4
   23a46:	f009 fbbb 	bl	2d1c0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   23a4a:	4629      	mov	r1, r5
   23a4c:	4620      	mov	r0, r4
   23a4e:	f009 fbb7 	bl	2d1c0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a52:	a803      	add	r0, sp, #12
   23a54:	9403      	str	r4, [sp, #12]
   23a56:	f7ff fcff 	bl	23458 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   23a5a:	9b03      	ldr	r3, [sp, #12]
   23a5c:	fa0a f303 	lsl.w	r3, sl, r3
   23a60:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   23a64:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   23a68:	2c00      	cmp	r4, #0
   23a6a:	d1b1      	bne.n	239d0 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23a6c:	b9cf      	cbnz	r7, 23aa2 <nrfx_gpiote_irq_handler+0x136>
   23a6e:	2701      	movs	r7, #1
   23a70:	e7a9      	b.n	239c6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23a72:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23a74:	bf0c      	ite	eq
   23a76:	2103      	moveq	r1, #3
   23a78:	2102      	movne	r1, #2
   23a7a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23a7c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23a7e:	f009 fb9f 	bl	2d1c0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23a82:	2d03      	cmp	r5, #3
   23a84:	d004      	beq.n	23a90 <nrfx_gpiote_irq_handler+0x124>
   23a86:	9a01      	ldr	r2, [sp, #4]
   23a88:	2a02      	cmp	r2, #2
   23a8a:	d106      	bne.n	23a9a <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23a8c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   23a8e:	d1e0      	bne.n	23a52 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   23a90:	4659      	mov	r1, fp
   23a92:	4620      	mov	r0, r4
   23a94:	f7ff fcf8 	bl	23488 <call_handler>
   23a98:	e7db      	b.n	23a52 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23a9a:	2a03      	cmp	r2, #3
   23a9c:	d1d9      	bne.n	23a52 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   23a9e:	2d02      	cmp	r5, #2
   23aa0:	e7f5      	b.n	23a8e <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23aa2:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   23aa6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   23aaa:	491a      	ldr	r1, [pc, #104]	; (23b14 <nrfx_gpiote_irq_handler+0x1a8>)
   23aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   23ab0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   23ab4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23ab6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   23aba:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   23abe:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23ac0:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   23ac4:	4313      	orrs	r3, r2
   23ac6:	f47f af7b 	bne.w	239c0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   23aca:	2401      	movs	r4, #1
    while (mask)
   23acc:	b916      	cbnz	r6, 23ad4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   23ace:	b007      	add	sp, #28
   23ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   23ad4:	fa96 f3a6 	rbit	r3, r6
   23ad8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   23adc:	fa04 f203 	lsl.w	r2, r4, r3
   23ae0:	009b      	lsls	r3, r3, #2
   23ae2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23ae6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   23aea:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23aee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   23af2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23af6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   23afa:	f3c1 4101 	ubfx	r1, r1, #16, #2
   23afe:	f7ff fcc3 	bl	23488 <call_handler>
   23b02:	e7e3      	b.n	23acc <nrfx_gpiote_irq_handler+0x160>
   23b04:	40006100 	.word	0x40006100
   23b08:	40006000 	.word	0x40006000
   23b0c:	40006120 	.word	0x40006120
   23b10:	20000814 	.word	0x20000814
   23b14:	50000300 	.word	0x50000300

00023b18 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   23b18:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   23b1a:	4c18      	ldr	r4, [pc, #96]	; (23b7c <nrfx_power_init+0x64>)
   23b1c:	7823      	ldrb	r3, [r4, #0]
   23b1e:	bb53      	cbnz	r3, 23b76 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   23b20:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   23b22:	0791      	lsls	r1, r2, #30
   23b24:	f3c2 0340 	ubfx	r3, r2, #1, #1
   23b28:	d511      	bpl.n	23b4e <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   23b2e:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   23b32:	2908      	cmp	r1, #8
   23b34:	d11d      	bne.n	23b72 <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23b36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   23b3a:	2b05      	cmp	r3, #5
   23b3c:	d819      	bhi.n	23b72 <nrfx_power_init+0x5a>
   23b3e:	4910      	ldr	r1, [pc, #64]	; (23b80 <nrfx_power_init+0x68>)
   23b40:	5cc9      	ldrb	r1, [r1, r3]
   23b42:	2301      	movs	r3, #1
   23b44:	b119      	cbz	r1, 23b4e <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   23b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   23b4a:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   23b4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   23b52:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   23b56:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   23b5a:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   23b5c:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   23b60:	f7e7 fc70 	bl	b444 <arch_irq_is_enabled>
   23b64:	b908      	cbnz	r0, 23b6a <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23b66:	f7e7 fc49 	bl	b3fc <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   23b6a:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   23b6c:	4805      	ldr	r0, [pc, #20]	; (23b84 <nrfx_power_init+0x6c>)
    m_initialized = true;
   23b6e:	7023      	strb	r3, [r4, #0]
}
   23b70:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   23b72:	2301      	movs	r3, #1
   23b74:	e7eb      	b.n	23b4e <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   23b76:	4804      	ldr	r0, [pc, #16]	; (23b88 <nrfx_power_init+0x70>)
   23b78:	e7fa      	b.n	23b70 <nrfx_power_init+0x58>
   23b7a:	bf00      	nop
   23b7c:	20004c33 	.word	0x20004c33
   23b80:	00034933 	.word	0x00034933
   23b84:	0bad0000 	.word	0x0bad0000
   23b88:	0bad000c 	.word	0x0bad000c

00023b8c <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   23b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23b90:	f44f 7260 	mov.w	r2, #896	; 0x380
   23b94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   23b98:	4b01      	ldr	r3, [pc, #4]	; (23ba0 <nrfx_power_usbevt_uninit+0x14>)
   23b9a:	2200      	movs	r2, #0
   23b9c:	601a      	str	r2, [r3, #0]
}
   23b9e:	4770      	bx	lr
   23ba0:	200047b0 	.word	0x200047b0

00023ba4 <nrfx_power_usbevt_init>:
{
   23ba4:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   23ba6:	f7ff fff1 	bl	23b8c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   23baa:	6803      	ldr	r3, [r0, #0]
   23bac:	b10b      	cbz	r3, 23bb2 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   23bae:	4a01      	ldr	r2, [pc, #4]	; (23bb4 <nrfx_power_usbevt_init+0x10>)
   23bb0:	6013      	str	r3, [r2, #0]
}
   23bb2:	bd08      	pop	{r3, pc}
   23bb4:	200047b0 	.word	0x200047b0

00023bb8 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   23bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   23bbc:	b510      	push	{r4, lr}
   23bbe:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   23bc2:	0762      	lsls	r2, r4, #29
   23bc4:	d507      	bpl.n	23bd6 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   23bc6:	f44f 7084 	mov.w	r0, #264	; 0x108
   23bca:	f009 fb08 	bl	2d1de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   23bce:	b110      	cbz	r0, 23bd6 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   23bd0:	4b1e      	ldr	r3, [pc, #120]	; (23c4c <nrfx_power_irq_handler+0x94>)
   23bd2:	681b      	ldr	r3, [r3, #0]
   23bd4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   23bd6:	06a3      	lsls	r3, r4, #26
   23bd8:	d508      	bpl.n	23bec <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   23bda:	f44f 708a 	mov.w	r0, #276	; 0x114
   23bde:	f009 fafe 	bl	2d1de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   23be2:	b118      	cbz	r0, 23bec <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   23be4:	4b1a      	ldr	r3, [pc, #104]	; (23c50 <nrfx_power_irq_handler+0x98>)
   23be6:	2000      	movs	r0, #0
   23be8:	681b      	ldr	r3, [r3, #0]
   23bea:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   23bec:	0660      	lsls	r0, r4, #25
   23bee:	d508      	bpl.n	23c02 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   23bf0:	f44f 708c 	mov.w	r0, #280	; 0x118
   23bf4:	f009 faf3 	bl	2d1de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   23bf8:	b118      	cbz	r0, 23c02 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   23bfa:	4b15      	ldr	r3, [pc, #84]	; (23c50 <nrfx_power_irq_handler+0x98>)
   23bfc:	2001      	movs	r0, #1
   23bfe:	681b      	ldr	r3, [r3, #0]
   23c00:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   23c02:	0621      	lsls	r1, r4, #24
   23c04:	d508      	bpl.n	23c18 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   23c06:	f44f 708e 	mov.w	r0, #284	; 0x11c
   23c0a:	f009 fae8 	bl	2d1de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   23c0e:	b118      	cbz	r0, 23c18 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   23c10:	4b10      	ldr	r3, [pc, #64]	; (23c54 <nrfx_power_irq_handler+0x9c>)
   23c12:	2000      	movs	r0, #0
   23c14:	681b      	ldr	r3, [r3, #0]
   23c16:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   23c18:	05e2      	lsls	r2, r4, #23
   23c1a:	d508      	bpl.n	23c2e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   23c1c:	f44f 7090 	mov.w	r0, #288	; 0x120
   23c20:	f009 fadd 	bl	2d1de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   23c24:	b118      	cbz	r0, 23c2e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   23c26:	4b0b      	ldr	r3, [pc, #44]	; (23c54 <nrfx_power_irq_handler+0x9c>)
   23c28:	2001      	movs	r0, #1
   23c2a:	681b      	ldr	r3, [r3, #0]
   23c2c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   23c2e:	05a3      	lsls	r3, r4, #22
   23c30:	d50a      	bpl.n	23c48 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   23c32:	f44f 7092 	mov.w	r0, #292	; 0x124
   23c36:	f009 fad2 	bl	2d1de <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   23c3a:	b128      	cbz	r0, 23c48 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   23c3c:	4b05      	ldr	r3, [pc, #20]	; (23c54 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   23c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   23c42:	681b      	ldr	r3, [r3, #0]
   23c44:	2002      	movs	r0, #2
   23c46:	4718      	bx	r3
}
   23c48:	bd10      	pop	{r4, pc}
   23c4a:	bf00      	nop
   23c4c:	200047a8 	.word	0x200047a8
   23c50:	200047ac 	.word	0x200047ac
   23c54:	200047b0 	.word	0x200047b0

00023c58 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   23c58:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   23c5a:	4801      	ldr	r0, [pc, #4]	; (23c60 <nrfx_ppi_channel_alloc+0x8>)
   23c5c:	f7ff bb26 	b.w	232ac <nrfx_flag32_alloc>
   23c60:	20000890 	.word	0x20000890

00023c64 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23c64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   23c68:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   23c6c:	2a08      	cmp	r2, #8
   23c6e:	d106      	bne.n	23c7e <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23c70:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   23c74:	2b05      	cmp	r3, #5
   23c76:	d804      	bhi.n	23c82 <nrf52_errata_187+0x1e>
   23c78:	4a03      	ldr	r2, [pc, #12]	; (23c88 <nrf52_errata_187+0x24>)
   23c7a:	5cd0      	ldrb	r0, [r2, r3]
   23c7c:	4770      	bx	lr
        return false;
   23c7e:	2000      	movs	r0, #0
   23c80:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23c82:	2001      	movs	r0, #1
}
   23c84:	4770      	bx	lr
   23c86:	bf00      	nop
   23c88:	00034939 	.word	0x00034939

00023c8c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   23c8c:	4b05      	ldr	r3, [pc, #20]	; (23ca4 <ep_state_access+0x18>)
   23c8e:	f010 0f80 	tst.w	r0, #128	; 0x80
   23c92:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   23c96:	bf08      	it	eq
   23c98:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   23c9a:	f000 000f 	and.w	r0, r0, #15
}
   23c9e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   23ca2:	4770      	bx	lr
   23ca4:	20004924 	.word	0x20004924

00023ca8 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   23ca8:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   23caa:	f009 fab9 	bl	2d220 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   23cae:	b118      	cbz	r0, 23cb8 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   23cb0:	4b03      	ldr	r3, [pc, #12]	; (23cc0 <usbd_dma_pending_clear+0x18>)
   23cb2:	2200      	movs	r2, #0
   23cb4:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   23cb8:	4b02      	ldr	r3, [pc, #8]	; (23cc4 <usbd_dma_pending_clear+0x1c>)
   23cba:	2200      	movs	r2, #0
   23cbc:	701a      	strb	r2, [r3, #0]
}
   23cbe:	bd08      	pop	{r3, pc}
   23cc0:	40027000 	.word	0x40027000
   23cc4:	20004c35 	.word	0x20004c35

00023cc8 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   23cc8:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   23cca:	4a09      	ldr	r2, [pc, #36]	; (23cf0 <ev_usbreset_handler+0x28>)
   23ccc:	2300      	movs	r3, #0
   23cce:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   23cd0:	4a08      	ldr	r2, [pc, #32]	; (23cf4 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   23cd2:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   23cd6:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   23cd8:	f88d 3007 	strb.w	r3, [sp, #7]
   23cdc:	2301      	movs	r3, #1
   23cde:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   23ce2:	4b05      	ldr	r3, [pc, #20]	; (23cf8 <ev_usbreset_handler+0x30>)
   23ce4:	a801      	add	r0, sp, #4
   23ce6:	681b      	ldr	r3, [r3, #0]
   23ce8:	4798      	blx	r3
}
   23cea:	b003      	add	sp, #12
   23cec:	f85d fb04 	ldr.w	pc, [sp], #4
   23cf0:	20004c34 	.word	0x20004c34
   23cf4:	20004c37 	.word	0x20004c37
   23cf8:	200049b4 	.word	0x200049b4

00023cfc <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   23cfc:	4b21      	ldr	r3, [pc, #132]	; (23d84 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   23cfe:	b513      	push	{r0, r1, r4, lr}
   23d00:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   23d04:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   23d08:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   23d0a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   23d0e:	d50e      	bpl.n	23d2e <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   23d10:	4b1d      	ldr	r3, [pc, #116]	; (23d88 <ev_usbevent_handler+0x8c>)
   23d12:	2201      	movs	r2, #1
   23d14:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   23d16:	2300      	movs	r3, #0
   23d18:	f8ad 3005 	strh.w	r3, [sp, #5]
   23d1c:	f88d 3007 	strb.w	r3, [sp, #7]
   23d20:	2302      	movs	r3, #2
   23d22:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   23d26:	4b19      	ldr	r3, [pc, #100]	; (23d8c <ev_usbevent_handler+0x90>)
   23d28:	a801      	add	r0, sp, #4
   23d2a:	681b      	ldr	r3, [r3, #0]
   23d2c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   23d2e:	05a2      	lsls	r2, r4, #22
   23d30:	d50d      	bpl.n	23d4e <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   23d32:	4a15      	ldr	r2, [pc, #84]	; (23d88 <ev_usbevent_handler+0x8c>)
   23d34:	2300      	movs	r3, #0
   23d36:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   23d38:	f8ad 3005 	strh.w	r3, [sp, #5]
   23d3c:	f88d 3007 	strb.w	r3, [sp, #7]
   23d40:	2303      	movs	r3, #3
   23d42:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   23d46:	4b11      	ldr	r3, [pc, #68]	; (23d8c <ev_usbevent_handler+0x90>)
   23d48:	a801      	add	r0, sp, #4
   23d4a:	681b      	ldr	r3, [r3, #0]
   23d4c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   23d4e:	0563      	lsls	r3, r4, #21
   23d50:	d515      	bpl.n	23d7e <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   23d52:	4a0d      	ldr	r2, [pc, #52]	; (23d88 <ev_usbevent_handler+0x8c>)
   23d54:	7813      	ldrb	r3, [r2, #0]
   23d56:	b193      	cbz	r3, 23d7e <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   23d58:	2300      	movs	r3, #0
   23d5a:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   23d5c:	4a09      	ldr	r2, [pc, #36]	; (23d84 <ev_usbevent_handler+0x88>)
   23d5e:	2101      	movs	r1, #1
   23d60:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   23d64:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   23d66:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   23d68:	f8ad 3005 	strh.w	r3, [sp, #5]
   23d6c:	f88d 3007 	strb.w	r3, [sp, #7]
   23d70:	2304      	movs	r3, #4
   23d72:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   23d76:	4b05      	ldr	r3, [pc, #20]	; (23d8c <ev_usbevent_handler+0x90>)
   23d78:	a801      	add	r0, sp, #4
   23d7a:	681b      	ldr	r3, [r3, #0]
   23d7c:	4798      	blx	r3
        }
    }
}
   23d7e:	b002      	add	sp, #8
   23d80:	bd10      	pop	{r4, pc}
   23d82:	bf00      	nop
   23d84:	40027000 	.word	0x40027000
   23d88:	20004c34 	.word	0x20004c34
   23d8c:	200049b4 	.word	0x200049b4

00023d90 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   23d90:	f04f 0320 	mov.w	r3, #32
   23d94:	f3ef 8011 	mrs	r0, BASEPRI
   23d98:	f383 8812 	msr	BASEPRI_MAX, r3
   23d9c:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   23da0:	4b0a      	ldr	r3, [pc, #40]	; (23dcc <usbd_errata_187_211_begin+0x3c>)
   23da2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   23da6:	2203      	movs	r2, #3
   23da8:	b961      	cbnz	r1, 23dc4 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23daa:	f249 3175 	movw	r1, #37749	; 0x9375
   23dae:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   23db2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23db6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   23dba:	f380 8811 	msr	BASEPRI, r0
   23dbe:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   23dc2:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   23dc4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   23dc8:	e7f7      	b.n	23dba <usbd_errata_187_211_begin+0x2a>
   23dca:	bf00      	nop
   23dcc:	4006e000 	.word	0x4006e000

00023dd0 <usbd_errata_187_211_end>:
	__asm__ volatile(
   23dd0:	f04f 0320 	mov.w	r3, #32
   23dd4:	f3ef 8011 	mrs	r0, BASEPRI
   23dd8:	f383 8812 	msr	BASEPRI_MAX, r3
   23ddc:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   23de0:	4b0a      	ldr	r3, [pc, #40]	; (23e0c <usbd_errata_187_211_end+0x3c>)
   23de2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   23de6:	b961      	cbnz	r1, 23e02 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23de8:	f249 3275 	movw	r2, #37749	; 0x9375
   23dec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   23df0:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   23df4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   23df8:	f380 8811 	msr	BASEPRI, r0
   23dfc:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   23e00:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   23e02:	2200      	movs	r2, #0
   23e04:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   23e08:	e7f6      	b.n	23df8 <usbd_errata_187_211_end+0x28>
   23e0a:	bf00      	nop
   23e0c:	4006e000 	.word	0x4006e000

00023e10 <nrfx_usbd_feeder_flash>:
{
   23e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   23e12:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   23e14:	4f0b      	ldr	r7, [pc, #44]	; (23e44 <nrfx_usbd_feeder_flash+0x34>)
   23e16:	4295      	cmp	r5, r2
   23e18:	bf28      	it	cs
   23e1a:	4615      	movcs	r5, r2
{
   23e1c:	460c      	mov	r4, r1
   23e1e:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   23e20:	462a      	mov	r2, r5
   23e22:	6809      	ldr	r1, [r1, #0]
   23e24:	4638      	mov	r0, r7
   23e26:	f006 fa99 	bl	2a35c <memcpy>
    p_transfer->size -= tx_size;
   23e2a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   23e2c:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   23e2e:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   23e30:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   23e34:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   23e36:	6060      	str	r0, [r4, #4]
}
   23e38:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   23e3a:	6022      	str	r2, [r4, #0]
}
   23e3c:	bf18      	it	ne
   23e3e:	2001      	movne	r0, #1
   23e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23e42:	bf00      	nop
   23e44:	200049b8 	.word	0x200049b8

00023e48 <nrfx_usbd_feeder_flash_zlp>:
{
   23e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   23e4a:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   23e4c:	4294      	cmp	r4, r2
   23e4e:	bf28      	it	cs
   23e50:	4614      	movcs	r4, r2
{
   23e52:	4606      	mov	r6, r0
   23e54:	460d      	mov	r5, r1
    if (tx_size != 0)
   23e56:	b18c      	cbz	r4, 23e7c <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   23e58:	4f09      	ldr	r7, [pc, #36]	; (23e80 <nrfx_usbd_feeder_flash_zlp+0x38>)
   23e5a:	6809      	ldr	r1, [r1, #0]
   23e5c:	4622      	mov	r2, r4
   23e5e:	4638      	mov	r0, r7
   23e60:	f006 fa7c 	bl	2a35c <memcpy>
        p_next->p_data.tx = p_buffer;
   23e64:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   23e66:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   23e68:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   23e6a:	1b1b      	subs	r3, r3, r4
   23e6c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   23e6e:	682b      	ldr	r3, [r5, #0]
}
   23e70:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   23e72:	4423      	add	r3, r4
   23e74:	602b      	str	r3, [r5, #0]
}
   23e76:	bf18      	it	ne
   23e78:	2001      	movne	r0, #1
   23e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   23e7c:	6004      	str	r4, [r0, #0]
   23e7e:	e7f2      	b.n	23e66 <nrfx_usbd_feeder_flash_zlp+0x1e>
   23e80:	200049b8 	.word	0x200049b8

00023e84 <ev_sof_handler>:
{
   23e84:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   23e86:	2300      	movs	r3, #0
   23e88:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   23e8c:	4b0b      	ldr	r3, [pc, #44]	; (23ebc <ev_sof_handler+0x38>)
   23e8e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   23e92:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   23e96:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   23e9a:	4a09      	ldr	r2, [pc, #36]	; (23ec0 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   23e9c:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   23e9e:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   23ea0:	bf0c      	ite	eq
   23ea2:	f44f 7180 	moveq.w	r1, #256	; 0x100
   23ea6:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   23eaa:	430b      	orrs	r3, r1
   23eac:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   23eae:	4b05      	ldr	r3, [pc, #20]	; (23ec4 <ev_sof_handler+0x40>)
   23eb0:	a801      	add	r0, sp, #4
   23eb2:	681b      	ldr	r3, [r3, #0]
   23eb4:	4798      	blx	r3
}
   23eb6:	b003      	add	sp, #12
   23eb8:	f85d fb04 	ldr.w	pc, [sp], #4
   23ebc:	40027000 	.word	0x40027000
   23ec0:	20004890 	.word	0x20004890
   23ec4:	200049b4 	.word	0x200049b4

00023ec8 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23ec8:	4b06      	ldr	r3, [pc, #24]	; (23ee4 <atomic_and.constprop.0.isra.0+0x1c>)
   23eca:	f3bf 8f5b 	dmb	ish
   23ece:	e853 2f00 	ldrex	r2, [r3]
   23ed2:	4002      	ands	r2, r0
   23ed4:	e843 2100 	strex	r1, r2, [r3]
   23ed8:	2900      	cmp	r1, #0
   23eda:	d1f8      	bne.n	23ece <atomic_and.constprop.0.isra.0+0x6>
   23edc:	f3bf 8f5b 	dmb	ish
}
   23ee0:	4770      	bx	lr
   23ee2:	bf00      	nop
   23ee4:	20004820 	.word	0x20004820

00023ee8 <nrf_usbd_ep0in_dma_handler>:
{
   23ee8:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   23eea:	f7ff fedd 	bl	23ca8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   23eee:	4b08      	ldr	r3, [pc, #32]	; (23f10 <nrf_usbd_ep0in_dma_handler+0x28>)
   23ef0:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   23ef4:	2a03      	cmp	r2, #3
   23ef6:	d105      	bne.n	23f04 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   23ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23efc:	f06f 0001 	mvn.w	r0, #1
   23f00:	f7ff bfe2 	b.w	23ec8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   23f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   23f08:	2b00      	cmp	r3, #0
   23f0a:	d0f5      	beq.n	23ef8 <nrf_usbd_ep0in_dma_handler+0x10>
}
   23f0c:	bd08      	pop	{r3, pc}
   23f0e:	bf00      	nop
   23f10:	20004894 	.word	0x20004894

00023f14 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   23f14:	2201      	movs	r2, #1
{
   23f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   23f18:	fa02 f501 	lsl.w	r5, r2, r1
   23f1c:	491c      	ldr	r1, [pc, #112]	; (23f90 <usbd_ep_data_handler+0x7c>)
   23f1e:	4e1d      	ldr	r6, [pc, #116]	; (23f94 <usbd_ep_data_handler+0x80>)
   23f20:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   23f22:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   23f26:	ea43 0305 	orr.w	r3, r3, r5
{
   23f2a:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   23f2c:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   23f2e:	d024      	beq.n	23f7a <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   23f30:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   23f34:	4b18      	ldr	r3, [pc, #96]	; (23f98 <usbd_ep_data_handler+0x84>)
   23f36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   23f3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23f3e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   23f42:	681a      	ldr	r2, [r3, #0]
    if (ret)
   23f44:	b132      	cbz	r2, 23f54 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   23f46:	2200      	movs	r2, #0
   23f48:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   23f4a:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   23f4c:	681b      	ldr	r3, [r3, #0]
   23f4e:	d011      	beq.n	23f74 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   23f50:	f009 f9b6 	bl	2d2c0 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   23f54:	6831      	ldr	r1, [r6, #0]
   23f56:	4029      	ands	r1, r5
   23f58:	d10a      	bne.n	23f70 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   23f5a:	2306      	movs	r3, #6
   23f5c:	f88d 3004 	strb.w	r3, [sp, #4]
   23f60:	f88d 4006 	strb.w	r4, [sp, #6]
   23f64:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   23f68:	4b0c      	ldr	r3, [pc, #48]	; (23f9c <usbd_ep_data_handler+0x88>)
   23f6a:	a801      	add	r0, sp, #4
   23f6c:	681b      	ldr	r3, [r3, #0]
   23f6e:	4798      	blx	r3
}
   23f70:	b002      	add	sp, #8
   23f72:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   23f74:	f7ff ffb8 	bl	23ee8 <nrf_usbd_ep0in_dma_handler>
   23f78:	e7ec      	b.n	23f54 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   23f7a:	6833      	ldr	r3, [r6, #0]
   23f7c:	421d      	tst	r5, r3
   23f7e:	d1f7      	bne.n	23f70 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   23f80:	2306      	movs	r3, #6
   23f82:	f88d 3004 	strb.w	r3, [sp, #4]
   23f86:	f88d 0006 	strb.w	r0, [sp, #6]
   23f8a:	f88d 2007 	strb.w	r2, [sp, #7]
   23f8e:	e7eb      	b.n	23f68 <usbd_ep_data_handler+0x54>
   23f90:	20004890 	.word	0x20004890
   23f94:	20004820 	.word	0x20004820
   23f98:	00030884 	.word	0x00030884
   23f9c:	200049b4 	.word	0x200049b4

00023fa0 <ev_setup_data_handler>:
{
   23fa0:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   23fa2:	4b05      	ldr	r3, [pc, #20]	; (23fb8 <ev_setup_data_handler+0x18>)
   23fa4:	781a      	ldrb	r2, [r3, #0]
   23fa6:	4610      	mov	r0, r2
   23fa8:	f009 f980 	bl	2d2ac <ep2bit>
}
   23fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   23fb0:	4601      	mov	r1, r0
   23fb2:	4610      	mov	r0, r2
   23fb4:	f7ff bfae 	b.w	23f14 <usbd_ep_data_handler>
   23fb8:	20004c37 	.word	0x20004c37

00023fbc <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   23fbc:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   23fbe:	f7ff fe73 	bl	23ca8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   23fc2:	4b0c      	ldr	r3, [pc, #48]	; (23ff4 <ev_dma_epout8_handler+0x38>)
   23fc4:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   23fc8:	2a03      	cmp	r2, #3
   23fca:	d010      	beq.n	23fee <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   23fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   23fd0:	b96b      	cbnz	r3, 23fee <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23fd2:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   23fd6:	f7ff ff77 	bl	23ec8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   23fda:	2306      	movs	r3, #6
   23fdc:	f88d 3004 	strb.w	r3, [sp, #4]
   23fe0:	2308      	movs	r3, #8
   23fe2:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   23fe6:	4b04      	ldr	r3, [pc, #16]	; (23ff8 <ev_dma_epout8_handler+0x3c>)
   23fe8:	a801      	add	r0, sp, #4
   23fea:	681b      	ldr	r3, [r3, #0]
   23fec:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   23fee:	b003      	add	sp, #12
   23ff0:	f85d fb04 	ldr.w	pc, [sp], #4
   23ff4:	20004894 	.word	0x20004894
   23ff8:	200049b4 	.word	0x200049b4

00023ffc <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   23ffc:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   23ffe:	f7ff fe53 	bl	23ca8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   24002:	4b10      	ldr	r3, [pc, #64]	; (24044 <ev_dma_epin8_handler+0x48>)
   24004:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   24008:	2a03      	cmp	r2, #3
   2400a:	d106      	bne.n	2401a <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2400c:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   24010:	b003      	add	sp, #12
   24012:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24016:	f7ff bf57 	b.w	23ec8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2401a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   2401e:	b96b      	cbnz	r3, 2403c <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24020:	f46f 7080 	mvn.w	r0, #256	; 0x100
   24024:	f7ff ff50 	bl	23ec8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   24028:	2306      	movs	r3, #6
   2402a:	f88d 3004 	strb.w	r3, [sp, #4]
   2402e:	2388      	movs	r3, #136	; 0x88
   24030:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   24034:	4b04      	ldr	r3, [pc, #16]	; (24048 <ev_dma_epin8_handler+0x4c>)
   24036:	a801      	add	r0, sp, #4
   24038:	681b      	ldr	r3, [r3, #0]
   2403a:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2403c:	b003      	add	sp, #12
   2403e:	f85d fb04 	ldr.w	pc, [sp], #4
   24042:	bf00      	nop
   24044:	20004894 	.word	0x20004894
   24048:	200049b4 	.word	0x200049b4

0002404c <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   2404c:	4a02      	ldr	r2, [pc, #8]	; (24058 <nrfx_usbd_uninit+0xc>)
   2404e:	2300      	movs	r3, #0
   24050:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   24052:	4a02      	ldr	r2, [pc, #8]	; (2405c <nrfx_usbd_uninit+0x10>)
   24054:	7013      	strb	r3, [r2, #0]
    return;
}
   24056:	4770      	bx	lr
   24058:	200049b4 	.word	0x200049b4
   2405c:	20004c36 	.word	0x20004c36

00024060 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   24060:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   24062:	4b48      	ldr	r3, [pc, #288]	; (24184 <nrfx_usbd_enable+0x124>)
   24064:	f44f 6200 	mov.w	r2, #2048	; 0x800
   24068:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2406c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   24070:	f7ff fdf8 	bl	23c64 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   24074:	b108      	cbz	r0, 2407a <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   24076:	f7ff fe8b 	bl	23d90 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   2407a:	f009 f8d1 	bl	2d220 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   2407e:	b1c8      	cbz	r0, 240b4 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   24080:	f04f 0320 	mov.w	r3, #32
   24084:	f3ef 8011 	mrs	r0, BASEPRI
   24088:	f383 8812 	msr	BASEPRI_MAX, r3
   2408c:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   24090:	4b3d      	ldr	r3, [pc, #244]	; (24188 <nrfx_usbd_enable+0x128>)
   24092:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   24096:	22c0      	movs	r2, #192	; 0xc0
   24098:	2900      	cmp	r1, #0
   2409a:	d16a      	bne.n	24172 <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2409c:	f249 3175 	movw	r1, #37749	; 0x9375
   240a0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   240a4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   240a8:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   240ac:	f380 8811 	msr	BASEPRI, r0
   240b0:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   240b4:	4b33      	ldr	r3, [pc, #204]	; (24184 <nrfx_usbd_enable+0x124>)
   240b6:	2201      	movs	r2, #1
   240b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   240bc:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   240c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   240c4:	0512      	lsls	r2, r2, #20
   240c6:	d5fb      	bpl.n	240c0 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   240c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   240cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   240d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   240d4:	f009 f8a4 	bl	2d220 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   240d8:	b1c0      	cbz	r0, 2410c <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   240da:	f04f 0320 	mov.w	r3, #32
   240de:	f3ef 8011 	mrs	r0, BASEPRI
   240e2:	f383 8812 	msr	BASEPRI_MAX, r3
   240e6:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   240ea:	4b27      	ldr	r3, [pc, #156]	; (24188 <nrfx_usbd_enable+0x128>)
   240ec:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   240f0:	2900      	cmp	r1, #0
   240f2:	d141      	bne.n	24178 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   240f4:	f249 3275 	movw	r2, #37749	; 0x9375
   240f8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   240fc:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24100:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   24104:	f380 8811 	msr	BASEPRI, r0
   24108:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   2410c:	f7ff fdaa 	bl	23c64 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   24110:	b130      	cbz	r0, 24120 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   24112:	f7ff fe5d 	bl	23dd0 <usbd_errata_187_211_end>
   24116:	f7ff fda5 	bl	23c64 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2411a:	b108      	cbz	r0, 24120 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   2411c:	f7ff fe38 	bl	23d90 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   24120:	f009 f87e 	bl	2d220 <nrf52_errata_166>
   24124:	4b17      	ldr	r3, [pc, #92]	; (24184 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   24126:	b150      	cbz	r0, 2413e <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   24128:	f240 72e3 	movw	r2, #2019	; 0x7e3
   2412c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   24130:	2240      	movs	r2, #64	; 0x40
   24132:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   24136:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   2413a:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2413e:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   24140:	2280      	movs	r2, #128	; 0x80
   24142:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   24146:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2414a:	4b10      	ldr	r3, [pc, #64]	; (2418c <nrfx_usbd_enable+0x12c>)
   2414c:	f240 12ff 	movw	r2, #511	; 0x1ff
   24150:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   24152:	4b0f      	ldr	r3, [pc, #60]	; (24190 <nrfx_usbd_enable+0x130>)
   24154:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   24156:	f7ff fda7 	bl	23ca8 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2415a:	4b0e      	ldr	r3, [pc, #56]	; (24194 <nrfx_usbd_enable+0x134>)
   2415c:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   2415e:	4b0e      	ldr	r3, [pc, #56]	; (24198 <nrfx_usbd_enable+0x138>)
   24160:	2202      	movs	r2, #2
   24162:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   24164:	f7ff fd7e 	bl	23c64 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   24168:	b150      	cbz	r0, 24180 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   2416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   2416e:	f7ff be2f 	b.w	23dd0 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   24172:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   24176:	e799      	b.n	240ac <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   24178:	2200      	movs	r2, #0
   2417a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2417e:	e7c1      	b.n	24104 <nrfx_usbd_enable+0xa4>
}
   24180:	bd08      	pop	{r3, pc}
   24182:	bf00      	nop
   24184:	40027000 	.word	0x40027000
   24188:	4006e000 	.word	0x4006e000
   2418c:	20004890 	.word	0x20004890
   24190:	20004820 	.word	0x20004820
   24194:	20004c37 	.word	0x20004c37
   24198:	20004c36 	.word	0x20004c36

0002419c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   2419c:	4b0a      	ldr	r3, [pc, #40]	; (241c8 <nrfx_usbd_start+0x2c>)
   2419e:	2200      	movs	r2, #0
{
   241a0:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   241a2:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   241a4:	4a09      	ldr	r2, [pc, #36]	; (241cc <nrfx_usbd_start+0x30>)
   241a6:	4b0a      	ldr	r3, [pc, #40]	; (241d0 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   241a8:	4c0a      	ldr	r4, [pc, #40]	; (241d4 <nrfx_usbd_start+0x38>)
   241aa:	2800      	cmp	r0, #0
   241ac:	bf18      	it	ne
   241ae:	4613      	movne	r3, r2
   241b0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   241b4:	2027      	movs	r0, #39	; 0x27
   241b6:	f7e7 f921 	bl	b3fc <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   241ba:	2301      	movs	r3, #1
   241bc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   241c0:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   241c4:	bd10      	pop	{r4, pc}
   241c6:	bf00      	nop
   241c8:	20004c34 	.word	0x20004c34
   241cc:	01e01407 	.word	0x01e01407
   241d0:	01c01407 	.word	0x01c01407
   241d4:	40027000 	.word	0x40027000

000241d8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   241d8:	4b03      	ldr	r3, [pc, #12]	; (241e8 <nrfx_usbd_is_enabled+0x10>)
   241da:	7818      	ldrb	r0, [r3, #0]
}
   241dc:	2801      	cmp	r0, #1
   241de:	bf94      	ite	ls
   241e0:	2000      	movls	r0, #0
   241e2:	2001      	movhi	r0, #1
   241e4:	4770      	bx	lr
   241e6:	bf00      	nop
   241e8:	20004c36 	.word	0x20004c36

000241ec <nrfx_usbd_init>:
{
   241ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   241f0:	4b1d      	ldr	r3, [pc, #116]	; (24268 <nrfx_usbd_init+0x7c>)
   241f2:	781c      	ldrb	r4, [r3, #0]
   241f4:	2c00      	cmp	r4, #0
   241f6:	d135      	bne.n	24264 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   241f8:	4a1c      	ldr	r2, [pc, #112]	; (2426c <nrfx_usbd_init+0x80>)
   241fa:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   241fc:	2201      	movs	r2, #1
   241fe:	701a      	strb	r2, [r3, #0]
   24200:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24202:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   24206:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   24208:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2420c:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   24210:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24212:	bf14      	ite	ne
   24214:	4641      	movne	r1, r8
   24216:	2140      	moveq	r1, #64	; 0x40
   24218:	4630      	mov	r0, r6
   2421a:	f009 f881 	bl	2d320 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2421e:	4630      	mov	r0, r6
   24220:	f7ff fd34 	bl	23c8c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   24224:	3501      	adds	r5, #1
   24226:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   24228:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   2422a:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   2422c:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2422e:	d1eb      	bne.n	24208 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24230:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   24232:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24234:	f240 16ff 	movw	r6, #511	; 0x1ff
   24238:	4620      	mov	r0, r4
   2423a:	f009 f871 	bl	2d320 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2423e:	4620      	mov	r0, r4
   24240:	f7ff fd24 	bl	23c8c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   24244:	3401      	adds	r4, #1
   24246:	b2e4      	uxtb	r4, r4
   24248:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2424a:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   2424c:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   2424e:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   24250:	d102      	bne.n	24258 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   24252:	4807      	ldr	r0, [pc, #28]	; (24270 <nrfx_usbd_init+0x84>)
}
   24254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24258:	f014 0f08 	tst.w	r4, #8
   2425c:	bf14      	ite	ne
   2425e:	4631      	movne	r1, r6
   24260:	2140      	moveq	r1, #64	; 0x40
   24262:	e7e9      	b.n	24238 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   24264:	4803      	ldr	r0, [pc, #12]	; (24274 <nrfx_usbd_init+0x88>)
   24266:	e7f5      	b.n	24254 <nrfx_usbd_init+0x68>
   24268:	20004c36 	.word	0x20004c36
   2426c:	200049b4 	.word	0x200049b4
   24270:	0bad0000 	.word	0x0bad0000
   24274:	0bad0005 	.word	0x0bad0005

00024278 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   24278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2427c:	4605      	mov	r5, r0
	__asm__ volatile(
   2427e:	f04f 0320 	mov.w	r3, #32
   24282:	f3ef 8811 	mrs	r8, BASEPRI
   24286:	f383 8812 	msr	BASEPRI_MAX, r3
   2428a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   2428e:	f010 040f 	ands.w	r4, r0, #15
   24292:	d103      	bne.n	2429c <nrfx_usbd_ep_transfer+0x24>
   24294:	4b27      	ldr	r3, [pc, #156]	; (24334 <nrfx_usbd_ep_transfer+0xbc>)
   24296:	781b      	ldrb	r3, [r3, #0]
   24298:	4283      	cmp	r3, r0
   2429a:	d146      	bne.n	2432a <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2429c:	4b26      	ldr	r3, [pc, #152]	; (24338 <nrfx_usbd_ep_transfer+0xc0>)
   2429e:	4f27      	ldr	r7, [pc, #156]	; (2433c <nrfx_usbd_ep_transfer+0xc4>)
   242a0:	681a      	ldr	r2, [r3, #0]
   242a2:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   242a4:	4628      	mov	r0, r5
   242a6:	f009 f801 	bl	2d2ac <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   242aa:	43d2      	mvns	r2, r2
   242ac:	b292      	uxth	r2, r2
   242ae:	f04f 0901 	mov.w	r9, #1
   242b2:	4332      	orrs	r2, r6
   242b4:	fa09 f900 	lsl.w	r9, r9, r0
   242b8:	ea12 0f09 	tst.w	r2, r9
   242bc:	d137      	bne.n	2432e <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   242be:	4628      	mov	r0, r5
   242c0:	f7ff fce4 	bl	23c8c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   242c4:	220c      	movs	r2, #12
   242c6:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   242c8:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   242ca:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   242cc:	d529      	bpl.n	24322 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   242ce:	4a1c      	ldr	r2, [pc, #112]	; (24340 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   242d0:	6808      	ldr	r0, [r1, #0]
   242d2:	4414      	add	r4, r2
   242d4:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   242d8:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   242da:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   242de:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   242e2:	d119      	bne.n	24318 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   242e4:	b9b2      	cbnz	r2, 24314 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   242e6:	4a17      	ldr	r2, [pc, #92]	; (24344 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   242e8:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   242ea:	c907      	ldmia	r1, {r0, r1, r2}
   242ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   242f0:	2200      	movs	r2, #0
   242f2:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   242f4:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   242f6:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   242f8:	4b13      	ldr	r3, [pc, #76]	; (24348 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   242fa:	4814      	ldr	r0, [pc, #80]	; (2434c <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   242fc:	ea46 0609 	orr.w	r6, r6, r9
   24300:	2280      	movs	r2, #128	; 0x80
   24302:	603e      	str	r6, [r7, #0]
   24304:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   24308:	f388 8811 	msr	BASEPRI, r8
   2430c:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   24310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   24314:	4a0e      	ldr	r2, [pc, #56]	; (24350 <nrfx_usbd_ep_transfer+0xd8>)
   24316:	e7e7      	b.n	242e8 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   24318:	b90a      	cbnz	r2, 2431e <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   2431a:	4a0e      	ldr	r2, [pc, #56]	; (24354 <nrfx_usbd_ep_transfer+0xdc>)
   2431c:	e7e4      	b.n	242e8 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   2431e:	4a0e      	ldr	r2, [pc, #56]	; (24358 <nrfx_usbd_ep_transfer+0xe0>)
   24320:	e7e2      	b.n	242e8 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   24322:	4a0e      	ldr	r2, [pc, #56]	; (2435c <nrfx_usbd_ep_transfer+0xe4>)
   24324:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   24326:	4a0e      	ldr	r2, [pc, #56]	; (24360 <nrfx_usbd_ep_transfer+0xe8>)
   24328:	e7de      	b.n	242e8 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   2432a:	480e      	ldr	r0, [pc, #56]	; (24364 <nrfx_usbd_ep_transfer+0xec>)
   2432c:	e7ec      	b.n	24308 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   2432e:	480e      	ldr	r0, [pc, #56]	; (24368 <nrfx_usbd_ep_transfer+0xf0>)
   24330:	e7ea      	b.n	24308 <nrfx_usbd_ep_transfer+0x90>
   24332:	bf00      	nop
   24334:	20004c37 	.word	0x20004c37
   24338:	20004890 	.word	0x20004890
   2433c:	20004820 	.word	0x20004820
   24340:	20004824 	.word	0x20004824
   24344:	0002d261 	.word	0x0002d261
   24348:	e000e100 	.word	0xe000e100
   2434c:	0bad0000 	.word	0x0bad0000
   24350:	0002d283 	.word	0x0002d283
   24354:	00023e11 	.word	0x00023e11
   24358:	00023e49 	.word	0x00023e49
   2435c:	200047b4 	.word	0x200047b4
   24360:	0002d233 	.word	0x0002d233
   24364:	0bad000a 	.word	0x0bad000a
   24368:	0bad000b 	.word	0x0bad000b

0002436c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2436c:	f010 0f08 	tst.w	r0, #8
   24370:	4b07      	ldr	r3, [pc, #28]	; (24390 <nrfx_usbd_epout_size_get+0x24>)
   24372:	d006      	beq.n	24382 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   24374:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   24378:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   2437c:	bf18      	it	ne
   2437e:	2000      	movne	r0, #0
   24380:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   24382:	f000 000f 	and.w	r0, r0, #15
   24386:	f500 7094 	add.w	r0, r0, #296	; 0x128
   2438a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   2438e:	4770      	bx	lr
   24390:	40027000 	.word	0x40027000

00024394 <usbd_dmareq_process>:
{
   24394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   24398:	f8df 815c 	ldr.w	r8, [pc, #348]	; 244f8 <usbd_dmareq_process+0x164>
   2439c:	f898 3000 	ldrb.w	r3, [r8]
{
   243a0:	b085      	sub	sp, #20
    if (!m_dma_pending)
   243a2:	2b00      	cmp	r3, #0
   243a4:	d16b      	bne.n	2447e <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   243a6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 244fc <usbd_dmareq_process+0x168>
   243aa:	4e55      	ldr	r6, [pc, #340]	; (24500 <usbd_dmareq_process+0x16c>)
   243ac:	f8d9 1000 	ldr.w	r1, [r9]
   243b0:	6833      	ldr	r3, [r6, #0]
   243b2:	4019      	ands	r1, r3
   243b4:	d063      	beq.n	2447e <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   243b6:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   243ba:	bf14      	ite	ne
   243bc:	fa93 f1a3 	rbitne	r1, r3
   243c0:	fa91 f1a1 	rbiteq	r1, r1
   243c4:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   243c8:	290f      	cmp	r1, #15
   243ca:	bf8a      	itet	hi
   243cc:	f1a1 0410 	subhi.w	r4, r1, #16
   243d0:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   243d4:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   243d6:	4620      	mov	r0, r4
   243d8:	f7ff fc58 	bl	23c8c <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   243dc:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   243e0:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   243e4:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   243e8:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   243ec:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   243ee:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   243f2:	da47      	bge.n	24484 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   243f4:	6803      	ldr	r3, [r0, #0]
   243f6:	8982      	ldrh	r2, [r0, #12]
   243f8:	6841      	ldr	r1, [r0, #4]
   243fa:	a802      	add	r0, sp, #8
   243fc:	4798      	blx	r3
                if (!continue_transfer)
   243fe:	b900      	cbnz	r0, 24402 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   24400:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   24402:	f008 ff0d 	bl	2d220 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   24406:	b118      	cbz	r0, 24410 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   24408:	4b3e      	ldr	r3, [pc, #248]	; (24504 <usbd_dmareq_process+0x170>)
   2440a:	2282      	movs	r2, #130	; 0x82
   2440c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   24410:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   24412:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   24414:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   24416:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   2441a:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   2441c:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   24420:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   24422:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   24426:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   24428:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   2442a:	f004 0008 	and.w	r0, r4, #8
   2442e:	9902      	ldr	r1, [sp, #8]
   24430:	4b34      	ldr	r3, [pc, #208]	; (24504 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   24432:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   24436:	da4f      	bge.n	244d8 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   24438:	2800      	cmp	r0, #0
   2443a:	d045      	beq.n	244c8 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   2443c:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   24440:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   24444:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   24446:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2444a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2444e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   24452:	2201      	movs	r2, #1
   24454:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   24456:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   24458:	4a2b      	ldr	r2, [pc, #172]	; (24508 <usbd_dmareq_process+0x174>)
   2445a:	4b2c      	ldr	r3, [pc, #176]	; (2450c <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2445c:	4929      	ldr	r1, [pc, #164]	; (24504 <usbd_dmareq_process+0x170>)
   2445e:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   24462:	bf38      	it	cc
   24464:	4613      	movcc	r3, r2
   24466:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2446a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2446e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   24472:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   24474:	b91a      	cbnz	r2, 2447e <usbd_dmareq_process+0xea>
   24476:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   2447a:	2a00      	cmp	r2, #0
   2447c:	d0f9      	beq.n	24472 <usbd_dmareq_process+0xde>
}
   2447e:	b005      	add	sp, #20
   24480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   24484:	4620      	mov	r0, r4
   24486:	f7ff ff71 	bl	2436c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   2448a:	89aa      	ldrh	r2, [r5, #12]
   2448c:	6869      	ldr	r1, [r5, #4]
   2448e:	f8d5 c000 	ldr.w	ip, [r5]
   24492:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   24494:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   24496:	a802      	add	r0, sp, #8
   24498:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   2449a:	9a02      	ldr	r2, [sp, #8]
   2449c:	2a00      	cmp	r2, #0
   2449e:	d0ae      	beq.n	243fe <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   244a0:	9a03      	ldr	r2, [sp, #12]
   244a2:	4297      	cmp	r7, r2
   244a4:	d9ab      	bls.n	243fe <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   244a6:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   244a8:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   244aa:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   244ac:	f7ff fd0c 	bl	23ec8 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   244b0:	2306      	movs	r3, #6
   244b2:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   244b6:	4b16      	ldr	r3, [pc, #88]	; (24510 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   244b8:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   244bc:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   244be:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   244c2:	a801      	add	r0, sp, #4
   244c4:	4798      	blx	r3
                    continue;
   244c6:	e771      	b.n	243ac <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   244c8:	2014      	movs	r0, #20
   244ca:	fb00 3304 	mla	r3, r0, r4, r3
   244ce:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   244d2:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   244d6:	e7b5      	b.n	24444 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   244d8:	b128      	cbz	r0, 244e6 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   244da:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   244de:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   244e2:	2328      	movs	r3, #40	; 0x28
   244e4:	e7af      	b.n	24446 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   244e6:	2014      	movs	r0, #20
   244e8:	fb00 3304 	mla	r3, r0, r4, r3
   244ec:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   244f0:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   244f4:	e7f5      	b.n	244e2 <usbd_dmareq_process+0x14e>
   244f6:	bf00      	nop
   244f8:	20004c35 	.word	0x20004c35
   244fc:	20004820 	.word	0x20004820
   24500:	20004890 	.word	0x20004890
   24504:	40027000 	.word	0x40027000
   24508:	00030896 	.word	0x00030896
   2450c:	00030884 	.word	0x00030884
   24510:	200049b4 	.word	0x200049b4

00024514 <ev_epdata_handler>:
{
   24514:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   24516:	4b0f      	ldr	r3, [pc, #60]	; (24554 <ev_epdata_handler+0x40>)
   24518:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   2451c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   24520:	2501      	movs	r5, #1
    while (dataepstatus)
   24522:	b91c      	cbnz	r4, 2452c <ev_epdata_handler+0x18>
}
   24524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   24528:	f7ff bf34 	b.w	24394 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2452c:	fa94 f3a4 	rbit	r3, r4
   24530:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   24534:	2b0f      	cmp	r3, #15
   24536:	bfc8      	it	gt
   24538:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2453c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2453e:	bfd4      	ite	le
   24540:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   24544:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   24546:	fa05 f303 	lsl.w	r3, r5, r3
   2454a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   2454e:	f7ff fce1 	bl	23f14 <usbd_ep_data_handler>
   24552:	e7e6      	b.n	24522 <ev_epdata_handler+0xe>
   24554:	40027000 	.word	0x40027000

00024558 <nrf_usbd_epout_dma_handler>:
{
   24558:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2455a:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   2455c:	f7ff fba4 	bl	23ca8 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   24560:	4620      	mov	r0, r4
   24562:	f7ff fb93 	bl	23c8c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   24566:	7b83      	ldrb	r3, [r0, #14]
   24568:	2b03      	cmp	r3, #3
   2456a:	d10d      	bne.n	24588 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2456c:	4620      	mov	r0, r4
   2456e:	f008 fe9d 	bl	2d2ac <ep2bit>
   24572:	2301      	movs	r3, #1
   24574:	fa03 f000 	lsl.w	r0, r3, r0
   24578:	43c0      	mvns	r0, r0
   2457a:	f7ff fca5 	bl	23ec8 <atomic_and.constprop.0.isra.0>
}
   2457e:	b003      	add	sp, #12
   24580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   24584:	f7ff bf06 	b.w	24394 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   24588:	6805      	ldr	r5, [r0, #0]
   2458a:	2d00      	cmp	r5, #0
   2458c:	d1f7      	bne.n	2457e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2458e:	4620      	mov	r0, r4
   24590:	f008 fe8c 	bl	2d2ac <ep2bit>
   24594:	2301      	movs	r3, #1
   24596:	fa03 f000 	lsl.w	r0, r3, r0
   2459a:	43c0      	mvns	r0, r0
   2459c:	f7ff fc94 	bl	23ec8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   245a0:	2306      	movs	r3, #6
   245a2:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   245a6:	4b04      	ldr	r3, [pc, #16]	; (245b8 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   245a8:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   245ac:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   245ae:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   245b2:	a801      	add	r0, sp, #4
   245b4:	4798      	blx	r3
   245b6:	e7e2      	b.n	2457e <nrf_usbd_epout_dma_handler+0x26>
   245b8:	200049b4 	.word	0x200049b4

000245bc <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   245bc:	4b02      	ldr	r3, [pc, #8]	; (245c8 <nrfx_usbd_ep_stall+0xc>)
   245be:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   245c2:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   245c6:	4770      	bx	lr
   245c8:	40027000 	.word	0x40027000

000245cc <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   245cc:	0702      	lsls	r2, r0, #28
   245ce:	d413      	bmi.n	245f8 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   245d0:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   245d4:	f010 0f80 	tst.w	r0, #128	; 0x80
   245d8:	4a08      	ldr	r2, [pc, #32]	; (245fc <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   245da:	bf0b      	itete	eq
   245dc:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   245e0:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   245e4:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   245e8:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   245ec:	bf08      	it	eq
   245ee:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   245f0:	1e43      	subs	r3, r0, #1
   245f2:	4258      	negs	r0, r3
   245f4:	4158      	adcs	r0, r3
   245f6:	4770      	bx	lr
        return false;
   245f8:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   245fa:	4770      	bx	lr
   245fc:	40027000 	.word	0x40027000

00024600 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   24600:	4b04      	ldr	r3, [pc, #16]	; (24614 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   24602:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   24606:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2460a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   2460e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   24612:	4770      	bx	lr
   24614:	40027000 	.word	0x40027000

00024618 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   24618:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2461a:	2208      	movs	r2, #8
   2461c:	2100      	movs	r1, #0
{
   2461e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   24620:	f005 fea7 	bl	2a372 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   24624:	4b0e      	ldr	r3, [pc, #56]	; (24660 <nrfx_usbd_setup_get+0x48>)
   24626:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   2462a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   2462c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   24630:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   24632:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   24636:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   2463a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2463e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   24640:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   24644:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   24648:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   2464c:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2464e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   24652:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   24656:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   2465a:	80e3      	strh	r3, [r4, #6]
}
   2465c:	bd10      	pop	{r4, pc}
   2465e:	bf00      	nop
   24660:	40027000 	.word	0x40027000

00024664 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   24664:	4b02      	ldr	r3, [pc, #8]	; (24670 <nrfx_usbd_setup_data_clear+0xc>)
   24666:	2201      	movs	r2, #1
   24668:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2466a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   2466c:	4770      	bx	lr
   2466e:	bf00      	nop
   24670:	40027000 	.word	0x40027000

00024674 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   24674:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   24676:	f7ff fb17 	bl	23ca8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2467a:	4b10      	ldr	r3, [pc, #64]	; (246bc <ev_dma_epout0_handler+0x48>)
   2467c:	7b9a      	ldrb	r2, [r3, #14]
   2467e:	2a03      	cmp	r2, #3
   24680:	d106      	bne.n	24690 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24682:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   24686:	b002      	add	sp, #8
   24688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2468c:	f7ff bc1c 	b.w	23ec8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   24690:	681c      	ldr	r4, [r3, #0]
   24692:	b974      	cbnz	r4, 246b2 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24694:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   24698:	f7ff fc16 	bl	23ec8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2469c:	2306      	movs	r3, #6
   2469e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   246a2:	4b07      	ldr	r3, [pc, #28]	; (246c0 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   246a4:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   246a8:	681b      	ldr	r3, [r3, #0]
   246aa:	a801      	add	r0, sp, #4
   246ac:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   246ae:	b002      	add	sp, #8
   246b0:	bd10      	pop	{r4, pc}
   246b2:	b002      	add	sp, #8
   246b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   246b8:	f7ff bfd4 	b.w	24664 <nrfx_usbd_setup_data_clear>
   246bc:	20004894 	.word	0x20004894
   246c0:	200049b4 	.word	0x200049b4

000246c4 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   246c4:	4b02      	ldr	r3, [pc, #8]	; (246d0 <nrfx_usbd_setup_clear+0xc>)
   246c6:	2201      	movs	r2, #1
   246c8:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   246ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   246cc:	4770      	bx	lr
   246ce:	bf00      	nop
   246d0:	40027000 	.word	0x40027000

000246d4 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   246d4:	4b02      	ldr	r3, [pc, #8]	; (246e0 <nrfx_usbd_setup_stall+0xc>)
   246d6:	2201      	movs	r2, #1
   246d8:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   246da:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   246dc:	4770      	bx	lr
   246de:	bf00      	nop
   246e0:	40027000 	.word	0x40027000

000246e4 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   246e4:	4b01      	ldr	r3, [pc, #4]	; (246ec <nrfx_usbd_last_setup_dir_get+0x8>)
   246e6:	7818      	ldrb	r0, [r3, #0]
   246e8:	4770      	bx	lr
   246ea:	bf00      	nop
   246ec:	20004c37 	.word	0x20004c37

000246f0 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   246f0:	b510      	push	{r4, lr}
   246f2:	4602      	mov	r2, r0
	__asm__ volatile(
   246f4:	f04f 0320 	mov.w	r3, #32
   246f8:	f3ef 8411 	mrs	r4, BASEPRI
   246fc:	f383 8812 	msr	BASEPRI_MAX, r3
   24700:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   24704:	f008 fdd2 	bl	2d2ac <ep2bit>
   24708:	490d      	ldr	r1, [pc, #52]	; (24740 <nrfx_usbd_transfer_out_drop+0x50>)
   2470a:	2301      	movs	r3, #1
   2470c:	fa03 f000 	lsl.w	r0, r3, r0
   24710:	680b      	ldr	r3, [r1, #0]
   24712:	ea23 0300 	bic.w	r3, r3, r0
   24716:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   24718:	f012 0108 	ands.w	r1, r2, #8
   2471c:	d10a      	bne.n	24734 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   2471e:	f002 030f 	and.w	r3, r2, #15
   24722:	009b      	lsls	r3, r3, #2
   24724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24728:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   2472c:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   24730:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   24734:	f384 8811 	msr	BASEPRI, r4
   24738:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2473c:	bd10      	pop	{r4, pc}
   2473e:	bf00      	nop
   24740:	20004890 	.word	0x20004890

00024744 <usbd_ep_abort>:
{
   24744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24746:	4601      	mov	r1, r0
	__asm__ volatile(
   24748:	f04f 0320 	mov.w	r3, #32
   2474c:	f3ef 8511 	mrs	r5, BASEPRI
   24750:	f383 8812 	msr	BASEPRI_MAX, r3
   24754:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   24758:	f7ff fa98 	bl	23c8c <ep_state_access>
   2475c:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2475e:	4608      	mov	r0, r1
   24760:	f008 fda4 	bl	2d2ac <ep2bit>
   24764:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   24766:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2476a:	fa02 f200 	lsl.w	r2, r2, r0
   2476e:	482e      	ldr	r0, [pc, #184]	; (24828 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   24770:	d118      	bne.n	247a4 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   24772:	6803      	ldr	r3, [r0, #0]
   24774:	ea32 0403 	bics.w	r4, r2, r3
   24778:	d00a      	beq.n	24790 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   2477a:	4608      	mov	r0, r1
   2477c:	f7ff ffb8 	bl	246f0 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   24780:	2303      	movs	r3, #3
   24782:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   24784:	f385 8811 	msr	BASEPRI, r5
   24788:	f3bf 8f6f 	isb	sy
}
   2478c:	b003      	add	sp, #12
   2478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   24790:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   24794:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   24796:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   24798:	4b24      	ldr	r3, [pc, #144]	; (2482c <usbd_ep_abort+0xe8>)
   2479a:	6818      	ldr	r0, [r3, #0]
   2479c:	ea20 0002 	bic.w	r0, r0, r2
   247a0:	6018      	str	r0, [r3, #0]
   247a2:	e7ed      	b.n	24780 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   247a4:	070b      	lsls	r3, r1, #28
   247a6:	d415      	bmi.n	247d4 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   247a8:	2980      	cmp	r1, #128	; 0x80
   247aa:	4b21      	ldr	r3, [pc, #132]	; (24830 <usbd_ep_abort+0xec>)
   247ac:	d02f      	beq.n	2480e <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   247ae:	f001 040f 	and.w	r4, r1, #15
   247b2:	f204 34da 	addw	r4, r4, #986	; 0x3da
   247b6:	0064      	lsls	r4, r4, #1
   247b8:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   247bc:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   247c0:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   247c4:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   247c6:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   247ca:	433c      	orrs	r4, r7
   247cc:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   247d0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   247d4:	4f15      	ldr	r7, [pc, #84]	; (2482c <usbd_ep_abort+0xe8>)
   247d6:	6804      	ldr	r4, [r0, #0]
   247d8:	683b      	ldr	r3, [r7, #0]
   247da:	ea64 0c03 	orn	ip, r4, r3
   247de:	ea1c 0f02 	tst.w	ip, r2
   247e2:	d0cf      	beq.n	24784 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   247e4:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   247e6:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   247ea:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   247ec:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   247ee:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   247f0:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   247f2:	2303      	movs	r3, #3
   247f4:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   247f6:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   247fa:	4b0e      	ldr	r3, [pc, #56]	; (24834 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   247fc:	f88d 1006 	strb.w	r1, [sp, #6]
   24800:	2206      	movs	r2, #6
            m_event_handler(&evt);
   24802:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   24804:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   24808:	a801      	add	r0, sp, #4
   2480a:	4798      	blx	r3
   2480c:	e7ba      	b.n	24784 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   2480e:	f240 74b4 	movw	r4, #1972	; 0x7b4
   24812:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   24816:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2481a:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2481e:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   24820:	f044 0404 	orr.w	r4, r4, #4
   24824:	e7d1      	b.n	247ca <usbd_ep_abort+0x86>
   24826:	bf00      	nop
   24828:	20004820 	.word	0x20004820
   2482c:	20004890 	.word	0x20004890
   24830:	40027000 	.word	0x40027000
   24834:	200049b4 	.word	0x200049b4

00024838 <ev_setup_handler>:
{
   24838:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2483a:	4b17      	ldr	r3, [pc, #92]	; (24898 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2483c:	4c17      	ldr	r4, [pc, #92]	; (2489c <ev_setup_handler+0x64>)
   2483e:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   24842:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   24844:	4e16      	ldr	r6, [pc, #88]	; (248a0 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   24846:	43da      	mvns	r2, r3
   24848:	4b16      	ldr	r3, [pc, #88]	; (248a4 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   2484a:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2484c:	681b      	ldr	r3, [r3, #0]
   2484e:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   24850:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   24852:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   24854:	f008 fd2a 	bl	2d2ac <ep2bit>
   24858:	2301      	movs	r3, #1
   2485a:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2485c:	4213      	tst	r3, r2
   2485e:	d002      	beq.n	24866 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   24860:	4608      	mov	r0, r1
   24862:	f7ff ff6f 	bl	24744 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   24866:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   2486a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   2486e:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   24870:	f7ff fb2a 	bl	23ec8 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   24874:	6823      	ldr	r3, [r4, #0]
   24876:	f043 0301 	orr.w	r3, r3, #1
   2487a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   2487c:	2300      	movs	r3, #0
   2487e:	f8ad 3005 	strh.w	r3, [sp, #5]
   24882:	f88d 3007 	strb.w	r3, [sp, #7]
   24886:	2305      	movs	r3, #5
   24888:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   2488c:	4b06      	ldr	r3, [pc, #24]	; (248a8 <ev_setup_handler+0x70>)
   2488e:	a801      	add	r0, sp, #4
   24890:	681b      	ldr	r3, [r3, #0]
   24892:	4798      	blx	r3
}
   24894:	b002      	add	sp, #8
   24896:	bd70      	pop	{r4, r5, r6, pc}
   24898:	40027000 	.word	0x40027000
   2489c:	20004890 	.word	0x20004890
   248a0:	20004c37 	.word	0x20004c37
   248a4:	20004820 	.word	0x20004820
   248a8:	200049b4 	.word	0x200049b4

000248ac <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   248ac:	4b1b      	ldr	r3, [pc, #108]	; (2491c <nrfx_usbd_irq_handler+0x70>)
   248ae:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   248b2:	2300      	movs	r3, #0
{
   248b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   248b8:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   248ba:	461d      	mov	r5, r3
    while (to_process)
   248bc:	b970      	cbnz	r0, 248dc <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   248be:	4f18      	ldr	r7, [pc, #96]	; (24920 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   248c0:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   248c4:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   248c8:	f04f 0801 	mov.w	r8, #1
    while (active)
   248cc:	b9bc      	cbnz	r4, 248fe <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   248ce:	f7ff fd61 	bl	24394 <usbd_dmareq_process>
    if (setup_active)
   248d2:	b306      	cbz	r6, 24916 <nrfx_usbd_irq_handler+0x6a>
}
   248d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   248d8:	f7ff bfae 	b.w	24838 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   248dc:	fa90 f2a0 	rbit	r2, r0
   248e0:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   248e4:	490f      	ldr	r1, [pc, #60]	; (24924 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   248e6:	0096      	lsls	r6, r2, #2
   248e8:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   248ea:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   248ee:	680e      	ldr	r6, [r1, #0]
    if (ret)
   248f0:	b116      	cbz	r6, 248f8 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   248f2:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   248f4:	6809      	ldr	r1, [r1, #0]
   248f6:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   248f8:	ea20 0002 	bic.w	r0, r0, r2
   248fc:	e7de      	b.n	248bc <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   248fe:	fa94 f5a4 	rbit	r5, r4
   24902:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   24906:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   2490a:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   2490e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   24910:	ea24 0405 	bic.w	r4, r4, r5
   24914:	e7da      	b.n	248cc <nrfx_usbd_irq_handler+0x20>
}
   24916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2491a:	bf00      	nop
   2491c:	40027000 	.word	0x40027000
   24920:	000307f4 	.word	0x000307f4
   24924:	40027100 	.word	0x40027100

00024928 <usbd_ep_abort_all>:
{
   24928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   2492a:	4e11      	ldr	r6, [pc, #68]	; (24970 <usbd_ep_abort_all+0x48>)
   2492c:	4b11      	ldr	r3, [pc, #68]	; (24974 <usbd_ep_abort_all+0x4c>)
   2492e:	6834      	ldr	r4, [r6, #0]
   24930:	681b      	ldr	r3, [r3, #0]
   24932:	0c24      	lsrs	r4, r4, #16
   24934:	0424      	lsls	r4, r4, #16
   24936:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   24938:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   2493a:	b91c      	cbnz	r4, 24944 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2493c:	f240 13ff 	movw	r3, #511	; 0x1ff
   24940:	6033      	str	r3, [r6, #0]
}
   24942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   24944:	fa94 f5a4 	rbit	r5, r4
   24948:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2494c:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2494e:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   24950:	bfc6      	itte	gt
   24952:	f1a5 0010 	subgt.w	r0, r5, #16
   24956:	b2c0      	uxtbgt	r0, r0
   24958:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   2495c:	0703      	lsls	r3, r0, #28
   2495e:	d401      	bmi.n	24964 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   24960:	f7ff fef0 	bl	24744 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   24964:	fa07 f505 	lsl.w	r5, r7, r5
   24968:	ea24 0405 	bic.w	r4, r4, r5
   2496c:	e7e5      	b.n	2493a <usbd_ep_abort_all+0x12>
   2496e:	bf00      	nop
   24970:	20004890 	.word	0x20004890
   24974:	20004820 	.word	0x20004820

00024978 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24978:	4b0c      	ldr	r3, [pc, #48]	; (249ac <nrfx_usbd_stop+0x34>)
   2497a:	2280      	movs	r2, #128	; 0x80
{
   2497c:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   2497e:	2027      	movs	r0, #39	; 0x27
   24980:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   24984:	f7e6 fd5e 	bl	b444 <arch_irq_is_enabled>
   24988:	b170      	cbz	r0, 249a8 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   2498a:	4c09      	ldr	r4, [pc, #36]	; (249b0 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   2498c:	f7ff ffcc 	bl	24928 <usbd_ep_abort_all>
   24990:	2300      	movs	r3, #0
   24992:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   24996:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   24998:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   2499c:	f7e6 fd3e 	bl	b41c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   249a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   249a4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   249a8:	bd10      	pop	{r4, pc}
   249aa:	bf00      	nop
   249ac:	e000e100 	.word	0xe000e100
   249b0:	40027000 	.word	0x40027000

000249b4 <nrfx_usbd_disable>:
{
   249b4:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   249b6:	f7ff ffdf 	bl	24978 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   249ba:	4b08      	ldr	r3, [pc, #32]	; (249dc <nrfx_usbd_disable+0x28>)
   249bc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   249c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   249c4:	2200      	movs	r2, #0
   249c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   249ca:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   249ce:	f7ff f96b 	bl	23ca8 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   249d2:	4b03      	ldr	r3, [pc, #12]	; (249e0 <nrfx_usbd_disable+0x2c>)
   249d4:	2201      	movs	r2, #1
   249d6:	701a      	strb	r2, [r3, #0]
}
   249d8:	bd08      	pop	{r3, pc}
   249da:	bf00      	nop
   249dc:	40027000 	.word	0x40027000
   249e0:	20004c36 	.word	0x20004c36

000249e4 <nrfx_usbd_suspend>:
{
   249e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   249e6:	f04f 0320 	mov.w	r3, #32
   249ea:	f3ef 8511 	mrs	r5, BASEPRI
   249ee:	f383 8812 	msr	BASEPRI_MAX, r3
   249f2:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   249f6:	4b11      	ldr	r3, [pc, #68]	; (24a3c <nrfx_usbd_suspend+0x58>)
   249f8:	781b      	ldrb	r3, [r3, #0]
   249fa:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   249fe:	b933      	cbnz	r3, 24a0e <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   24a00:	2400      	movs	r4, #0
	__asm__ volatile(
   24a02:	f385 8811 	msr	BASEPRI, r5
   24a06:	f3bf 8f6f 	isb	sy
}
   24a0a:	4620      	mov	r0, r4
   24a0c:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   24a0e:	f7ff ff8b 	bl	24928 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   24a12:	4b0b      	ldr	r3, [pc, #44]	; (24a40 <nrfx_usbd_suspend+0x5c>)
   24a14:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   24a18:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   24a1c:	d1f0      	bne.n	24a00 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   24a1e:	2101      	movs	r1, #1
   24a20:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   24a24:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   24a28:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   24a2c:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   24a2e:	bf42      	ittt	mi
   24a30:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   24a34:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   24a38:	4614      	movmi	r4, r2
}
   24a3a:	e7e2      	b.n	24a02 <nrfx_usbd_suspend+0x1e>
   24a3c:	20004c34 	.word	0x20004c34
   24a40:	40027000 	.word	0x40027000

00024a44 <nrfx_usbd_ep_disable>:
{
   24a44:	b510      	push	{r4, lr}
   24a46:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   24a48:	f7ff fe7c 	bl	24744 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   24a4c:	4a10      	ldr	r2, [pc, #64]	; (24a90 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   24a4e:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   24a52:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   24a56:	f04f 0301 	mov.w	r3, #1
   24a5a:	bf14      	ite	ne
   24a5c:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   24a60:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   24a64:	fa03 f300 	lsl.w	r3, r3, r0
   24a68:	ea6f 0303 	mvn.w	r3, r3
   24a6c:	bf15      	itete	ne
   24a6e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   24a70:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   24a72:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   24a76:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   24a7a:	bf14      	ite	ne
   24a7c:	4b05      	ldrne	r3, [pc, #20]	; (24a94 <nrfx_usbd_ep_disable+0x50>)
   24a7e:	4b06      	ldreq	r3, [pc, #24]	; (24a98 <nrfx_usbd_ep_disable+0x54>)
   24a80:	5c1a      	ldrb	r2, [r3, r0]
   24a82:	2301      	movs	r3, #1
   24a84:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   24a86:	4a02      	ldr	r2, [pc, #8]	; (24a90 <nrfx_usbd_ep_disable+0x4c>)
   24a88:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   24a8c:	bd10      	pop	{r4, pc}
   24a8e:	bf00      	nop
   24a90:	40027000 	.word	0x40027000
   24a94:	0003493f 	.word	0x0003493f
   24a98:	00034948 	.word	0x00034948

00024a9c <nrfx_usbd_ep_enable>:
{
   24a9c:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   24a9e:	b243      	sxtb	r3, r0
   24aa0:	2b00      	cmp	r3, #0
   24aa2:	4b23      	ldr	r3, [pc, #140]	; (24b30 <nrfx_usbd_ep_enable+0x94>)
   24aa4:	4a23      	ldr	r2, [pc, #140]	; (24b34 <nrfx_usbd_ep_enable+0x98>)
   24aa6:	bfa8      	it	ge
   24aa8:	461a      	movge	r2, r3
   24aaa:	f000 030f 	and.w	r3, r0, #15
   24aae:	f04f 0401 	mov.w	r4, #1
   24ab2:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   24ab4:	4a20      	ldr	r2, [pc, #128]	; (24b38 <nrfx_usbd_ep_enable+0x9c>)
   24ab6:	fa04 f101 	lsl.w	r1, r4, r1
{
   24aba:	4605      	mov	r5, r0
   24abc:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   24ac0:	da0c      	bge.n	24adc <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   24ac2:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   24ac6:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   24ac8:	07c8      	lsls	r0, r1, #31
   24aca:	d406      	bmi.n	24ada <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   24acc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   24ad0:	fa04 f303 	lsl.w	r3, r4, r3
   24ad4:	4303      	orrs	r3, r0
   24ad6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   24ada:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   24adc:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   24ae0:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   24ae2:	07c9      	lsls	r1, r1, #31
   24ae4:	d4f9      	bmi.n	24ada <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   24ae6:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   24aea:	fa04 f103 	lsl.w	r1, r4, r3
   24aee:	4331      	orrs	r1, r6
   24af0:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   24af4:	2b00      	cmp	r3, #0
   24af6:	d0f0      	beq.n	24ada <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   24af8:	0703      	lsls	r3, r0, #28
   24afa:	d4ee      	bmi.n	24ada <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   24afc:	f04f 0320 	mov.w	r3, #32
   24b00:	f3ef 8611 	mrs	r6, BASEPRI
   24b04:	f383 8812 	msr	BASEPRI_MAX, r3
   24b08:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   24b0c:	f7ff fdf0 	bl	246f0 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   24b10:	4628      	mov	r0, r5
   24b12:	f008 fbcb 	bl	2d2ac <ep2bit>
   24b16:	4a09      	ldr	r2, [pc, #36]	; (24b3c <nrfx_usbd_ep_enable+0xa0>)
   24b18:	6813      	ldr	r3, [r2, #0]
   24b1a:	fa04 f000 	lsl.w	r0, r4, r0
   24b1e:	ea23 0000 	bic.w	r0, r3, r0
   24b22:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   24b24:	f386 8811 	msr	BASEPRI, r6
   24b28:	f3bf 8f6f 	isb	sy
}
   24b2c:	e7d5      	b.n	24ada <nrfx_usbd_ep_enable+0x3e>
   24b2e:	bf00      	nop
   24b30:	00034948 	.word	0x00034948
   24b34:	0003493f 	.word	0x0003493f
   24b38:	40027000 	.word	0x40027000
   24b3c:	20004820 	.word	0x20004820

00024b40 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   24b40:	0603      	lsls	r3, r0, #24
{
   24b42:	b510      	push	{r4, lr}
   24b44:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   24b46:	d405      	bmi.n	24b54 <nrfx_usbd_ep_stall_clear+0x14>
   24b48:	f7ff fd40 	bl	245cc <nrfx_usbd_ep_stall_check>
   24b4c:	b110      	cbz	r0, 24b54 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   24b4e:	4620      	mov	r0, r4
   24b50:	f7ff fdce 	bl	246f0 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   24b54:	4b01      	ldr	r3, [pc, #4]	; (24b5c <nrfx_usbd_ep_stall_clear+0x1c>)
   24b56:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   24b5a:	bd10      	pop	{r4, pc}
   24b5c:	40027000 	.word	0x40027000

00024b60 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
   24b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
   24b64:	f8df a048 	ldr.w	sl, [pc, #72]	; 24bb0 <device_visitor+0x50>
   24b68:	4d12      	ldr	r5, [pc, #72]	; (24bb4 <device_visitor+0x54>)
   24b6a:	469b      	mov	fp, r3
   24b6c:	eba5 050a 	sub.w	r5, r5, sl
   24b70:	4b11      	ldr	r3, [pc, #68]	; (24bb8 <device_visitor+0x58>)
   24b72:	10ed      	asrs	r5, r5, #3
   24b74:	4680      	mov	r8, r0
   24b76:	460f      	mov	r7, r1
   24b78:	4691      	mov	r9, r2
   24b7a:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
   24b7c:	2600      	movs	r6, #0
   24b7e:	42be      	cmp	r6, r7
   24b80:	d102      	bne.n	24b88 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   24b82:	4630      	mov	r0, r6
}
   24b84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
   24b88:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
   24b8c:	2c00      	cmp	r4, #0
   24b8e:	dd0d      	ble.n	24bac <device_visitor+0x4c>
   24b90:	42a5      	cmp	r5, r4
   24b92:	d30b      	bcc.n	24bac <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
   24b94:	3c01      	subs	r4, #1
   24b96:	b224      	sxth	r4, r4
   24b98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   24b9c:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
   24ba0:	4659      	mov	r1, fp
   24ba2:	47c8      	blx	r9
		if (rc < 0) {
   24ba4:	2800      	cmp	r0, #0
   24ba6:	dbed      	blt.n	24b84 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
   24ba8:	3601      	adds	r6, #1
   24baa:	e7e8      	b.n	24b7e <device_visitor+0x1e>
	const struct device *dev = NULL;
   24bac:	2000      	movs	r0, #0
   24bae:	e7f7      	b.n	24ba0 <device_visitor+0x40>
   24bb0:	0002dfdc 	.word	0x0002dfdc
   24bb4:	0002e06c 	.word	0x0002e06c
   24bb8:	aaaaaaab 	.word	0xaaaaaaab

00024bbc <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24bbc:	4b0e      	ldr	r3, [pc, #56]	; (24bf8 <z_sys_init_run_level+0x3c>)
{
   24bbe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24bc0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24bc4:	3001      	adds	r0, #1
   24bc6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   24bca:	42a6      	cmp	r6, r4
   24bcc:	d800      	bhi.n	24bd0 <z_sys_init_run_level+0x14>
}
   24bce:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24bd0:	e9d4 3500 	ldrd	r3, r5, [r4]
   24bd4:	4628      	mov	r0, r5
   24bd6:	4798      	blx	r3
		if (dev != NULL) {
   24bd8:	b165      	cbz	r5, 24bf4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   24bda:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   24bdc:	b130      	cbz	r0, 24bec <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24bde:	2800      	cmp	r0, #0
   24be0:	bfb8      	it	lt
   24be2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   24be4:	28ff      	cmp	r0, #255	; 0xff
   24be6:	bfa8      	it	ge
   24be8:	20ff      	movge	r0, #255	; 0xff
   24bea:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24bec:	785a      	ldrb	r2, [r3, #1]
   24bee:	f042 0201 	orr.w	r2, r2, #1
   24bf2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24bf4:	3408      	adds	r4, #8
   24bf6:	e7e8      	b.n	24bca <z_sys_init_run_level+0xe>
   24bf8:	00030858 	.word	0x00030858

00024bfc <z_device_get_all_static>:
	*devices = __device_start;
   24bfc:	4a03      	ldr	r2, [pc, #12]	; (24c0c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   24bfe:	4b04      	ldr	r3, [pc, #16]	; (24c10 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   24c00:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   24c02:	1a9b      	subs	r3, r3, r2
}
   24c04:	4803      	ldr	r0, [pc, #12]	; (24c14 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   24c06:	10db      	asrs	r3, r3, #3
}
   24c08:	4358      	muls	r0, r3
   24c0a:	4770      	bx	lr
   24c0c:	0002dfdc 	.word	0x0002dfdc
   24c10:	0002e06c 	.word	0x0002e06c
   24c14:	aaaaaaab 	.word	0xaaaaaaab

00024c18 <z_impl_device_get_binding>:
{
   24c18:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   24c1a:	4605      	mov	r5, r0
   24c1c:	b910      	cbnz	r0, 24c24 <z_impl_device_get_binding+0xc>
		return NULL;
   24c1e:	2400      	movs	r4, #0
}
   24c20:	4620      	mov	r0, r4
   24c22:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   24c24:	7803      	ldrb	r3, [r0, #0]
   24c26:	2b00      	cmp	r3, #0
   24c28:	d0f9      	beq.n	24c1e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   24c2a:	4c0e      	ldr	r4, [pc, #56]	; (24c64 <z_impl_device_get_binding+0x4c>)
   24c2c:	4e0e      	ldr	r6, [pc, #56]	; (24c68 <z_impl_device_get_binding+0x50>)
   24c2e:	42b4      	cmp	r4, r6
   24c30:	d108      	bne.n	24c44 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   24c32:	4c0c      	ldr	r4, [pc, #48]	; (24c64 <z_impl_device_get_binding+0x4c>)
   24c34:	42b4      	cmp	r4, r6
   24c36:	d0f2      	beq.n	24c1e <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   24c38:	4620      	mov	r0, r4
   24c3a:	f008 fba5 	bl	2d388 <z_device_is_ready>
   24c3e:	b950      	cbnz	r0, 24c56 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   24c40:	3418      	adds	r4, #24
   24c42:	e7f7      	b.n	24c34 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   24c44:	4620      	mov	r0, r4
   24c46:	f008 fb9f 	bl	2d388 <z_device_is_ready>
   24c4a:	b110      	cbz	r0, 24c52 <z_impl_device_get_binding+0x3a>
   24c4c:	6823      	ldr	r3, [r4, #0]
   24c4e:	42ab      	cmp	r3, r5
   24c50:	d0e6      	beq.n	24c20 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   24c52:	3418      	adds	r4, #24
   24c54:	e7eb      	b.n	24c2e <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   24c56:	6821      	ldr	r1, [r4, #0]
   24c58:	4628      	mov	r0, r5
   24c5a:	f005 fb39 	bl	2a2d0 <strcmp>
   24c5e:	2800      	cmp	r0, #0
   24c60:	d1ee      	bne.n	24c40 <z_impl_device_get_binding+0x28>
   24c62:	e7dd      	b.n	24c20 <z_impl_device_get_binding+0x8>
   24c64:	0002dfdc 	.word	0x0002dfdc
   24c68:	0002e06c 	.word	0x0002e06c

00024c6c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   24c6c:	4b01      	ldr	r3, [pc, #4]	; (24c74 <z_impl_z_errno+0x8>)
   24c6e:	6898      	ldr	r0, [r3, #8]
}
   24c70:	3098      	adds	r0, #152	; 0x98
   24c72:	4770      	bx	lr
   24c74:	200049f8 	.word	0x200049f8

00024c78 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   24c78:	b510      	push	{r4, lr}
   24c7a:	4604      	mov	r4, r0
   24c7c:	b088      	sub	sp, #32
	z_impl_log_panic();
   24c7e:	f7e2 f8ff 	bl	6e80 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   24c82:	4809      	ldr	r0, [pc, #36]	; (24ca8 <k_sys_fatal_error_handler+0x30>)
   24c84:	6803      	ldr	r3, [r0, #0]
   24c86:	075b      	lsls	r3, r3, #29
   24c88:	d00a      	beq.n	24ca0 <k_sys_fatal_error_handler+0x28>
   24c8a:	4b08      	ldr	r3, [pc, #32]	; (24cac <k_sys_fatal_error_handler+0x34>)
   24c8c:	9306      	str	r3, [sp, #24]
   24c8e:	2302      	movs	r3, #2
   24c90:	9301      	str	r3, [sp, #4]
   24c92:	9305      	str	r3, [sp, #20]
   24c94:	2300      	movs	r3, #0
   24c96:	aa05      	add	r2, sp, #20
   24c98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24c9c:	f002 fe50 	bl	27940 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
   24ca0:	4620      	mov	r0, r4
   24ca2:	f008 fba2 	bl	2d3ea <arch_system_halt>
   24ca6:	bf00      	nop
   24ca8:	20000a80 	.word	0x20000a80
   24cac:	00034951 	.word	0x00034951

00024cb0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24cb4:	4605      	mov	r5, r0
   24cb6:	b08e      	sub	sp, #56	; 0x38
   24cb8:	460e      	mov	r6, r1
	__asm__ volatile(
   24cba:	f04f 0320 	mov.w	r3, #32
   24cbe:	f3ef 8811 	mrs	r8, BASEPRI
   24cc2:	f383 8812 	msr	BASEPRI_MAX, r3
   24cc6:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24cca:	4f2b      	ldr	r7, [pc, #172]	; (24d78 <z_fatal_error+0xc8>)
	return z_impl_z_current_get();
   24ccc:	f001 f910 	bl	25ef0 <z_impl_z_current_get>
   24cd0:	683b      	ldr	r3, [r7, #0]
   24cd2:	0759      	lsls	r1, r3, #29
   24cd4:	4604      	mov	r4, r0
   24cd6:	d04c      	beq.n	24d72 <z_fatal_error+0xc2>
	switch (reason) {
   24cd8:	2d04      	cmp	r5, #4
   24cda:	bf96      	itet	ls
   24cdc:	4b27      	ldrls	r3, [pc, #156]	; (24d7c <z_fatal_error+0xcc>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24cde:	4a28      	ldrhi	r2, [pc, #160]	; (24d80 <z_fatal_error+0xd0>)
	return 0;
   24ce0:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24ce4:	4924      	ldr	r1, [pc, #144]	; (24d78 <z_fatal_error+0xc8>)
   24ce6:	9502      	str	r5, [sp, #8]
   24ce8:	2300      	movs	r3, #0
   24cea:	e9cd 2303 	strd	r2, r3, [sp, #12]
   24cee:	4a25      	ldr	r2, [pc, #148]	; (24d84 <z_fatal_error+0xd4>)
   24cf0:	4618      	mov	r0, r3
   24cf2:	e9cd 3200 	strd	r3, r2, [sp]
   24cf6:	2201      	movs	r2, #1
   24cf8:	f008 fb68 	bl	2d3cc <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24cfc:	b196      	cbz	r6, 24d24 <z_fatal_error+0x74>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24cfe:	69f3      	ldr	r3, [r6, #28]
   24d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
   24d04:	b173      	cbz	r3, 24d24 <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
   24d06:	683b      	ldr	r3, [r7, #0]
   24d08:	075a      	lsls	r2, r3, #29
   24d0a:	d01b      	beq.n	24d44 <z_fatal_error+0x94>
   24d0c:	4b1e      	ldr	r3, [pc, #120]	; (24d88 <z_fatal_error+0xd8>)
   24d0e:	930c      	str	r3, [sp, #48]	; 0x30
   24d10:	2302      	movs	r3, #2
   24d12:	9307      	str	r3, [sp, #28]
   24d14:	930b      	str	r3, [sp, #44]	; 0x2c
   24d16:	4818      	ldr	r0, [pc, #96]	; (24d78 <z_fatal_error+0xc8>)
   24d18:	2300      	movs	r3, #0
   24d1a:	aa0b      	add	r2, sp, #44	; 0x2c
   24d1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24d20:	f002 fe0e 	bl	27940 <z_impl_z_log_msg2_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   24d24:	683b      	ldr	r3, [r7, #0]
   24d26:	075b      	lsls	r3, r3, #29
   24d28:	d00c      	beq.n	24d44 <z_fatal_error+0x94>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24d2a:	b9cc      	cbnz	r4, 24d60 <z_fatal_error+0xb0>
		thread_name = "unknown";
   24d2c:	4817      	ldr	r0, [pc, #92]	; (24d8c <z_fatal_error+0xdc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   24d2e:	4b18      	ldr	r3, [pc, #96]	; (24d90 <z_fatal_error+0xe0>)
   24d30:	9301      	str	r3, [sp, #4]
   24d32:	2300      	movs	r3, #0
   24d34:	e9cd 4002 	strd	r4, r0, [sp, #8]
   24d38:	490f      	ldr	r1, [pc, #60]	; (24d78 <z_fatal_error+0xc8>)
   24d3a:	9300      	str	r3, [sp, #0]
   24d3c:	2201      	movs	r2, #1
   24d3e:	4618      	mov	r0, r3
   24d40:	f008 fb44 	bl	2d3cc <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   24d44:	4631      	mov	r1, r6
   24d46:	4628      	mov	r0, r5
   24d48:	f7ff ff96 	bl	24c78 <k_sys_fatal_error_handler>
	__asm__ volatile(
   24d4c:	f388 8811 	msr	BASEPRI, r8
   24d50:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   24d54:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   24d56:	b00e      	add	sp, #56	; 0x38
   24d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24d5c:	f7e7 b814 	b.w	bd88 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24d60:	4620      	mov	r0, r4
   24d62:	f008 fbe1 	bl	2d528 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   24d66:	2800      	cmp	r0, #0
   24d68:	d0e0      	beq.n	24d2c <z_fatal_error+0x7c>
   24d6a:	7803      	ldrb	r3, [r0, #0]
   24d6c:	2b00      	cmp	r3, #0
   24d6e:	d0dd      	beq.n	24d2c <z_fatal_error+0x7c>
   24d70:	e7dd      	b.n	24d2e <z_fatal_error+0x7e>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24d72:	2e00      	cmp	r6, #0
   24d74:	d1c3      	bne.n	24cfe <z_fatal_error+0x4e>
   24d76:	e7e5      	b.n	24d44 <z_fatal_error+0x94>
   24d78:	20000a80 	.word	0x20000a80
   24d7c:	00030870 	.word	0x00030870
   24d80:	00034960 	.word	0x00034960
   24d84:	0003496e 	.word	0x0003496e
   24d88:	00034996 	.word	0x00034996
   24d8c:	00032d85 	.word	0x00032d85
   24d90:	000349b7 	.word	0x000349b7

00024d94 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   24d94:	b570      	push	{r4, r5, r6, lr}
   24d96:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   24d98:	ae06      	add	r6, sp, #24
{
   24d9a:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
   24d9c:	4603      	mov	r3, r0
   24d9e:	4a13      	ldr	r2, [pc, #76]	; (24dec <init_idle_thread+0x58>)
	struct k_thread *thread = &z_idle_threads[i];
   24da0:	4d13      	ldr	r5, [pc, #76]	; (24df0 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
   24da2:	2108      	movs	r1, #8
   24da4:	4630      	mov	r0, r6
   24da6:	f001 fde6 	bl	26976 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
   24daa:	23b8      	movs	r3, #184	; 0xb8
   24dac:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   24db0:	2201      	movs	r2, #1
   24db2:	230f      	movs	r3, #15
   24db4:	e9cd 3203 	strd	r3, r2, [sp, #12]
   24db8:	2300      	movs	r3, #0
   24dba:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24dbe:	4b0d      	ldr	r3, [pc, #52]	; (24df4 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
   24dc0:	490d      	ldr	r1, [pc, #52]	; (24df8 <init_idle_thread+0x64>)
   24dc2:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24dc4:	2218      	movs	r2, #24
   24dc6:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
   24dca:	f44f 70b0 	mov.w	r0, #352	; 0x160
   24dce:	9300      	str	r3, [sp, #0]
   24dd0:	fb00 1104 	mla	r1, r0, r4, r1
   24dd4:	4b09      	ldr	r3, [pc, #36]	; (24dfc <init_idle_thread+0x68>)
   24dd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   24dda:	4628      	mov	r0, r5
   24ddc:	f000 f98e 	bl	250fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24de0:	7b6b      	ldrb	r3, [r5, #13]
   24de2:	f023 0304 	bic.w	r3, r3, #4
   24de6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   24de8:	b008      	add	sp, #32
   24dea:	bd70      	pop	{r4, r5, r6, pc}
   24dec:	00034a19 	.word	0x00034a19
   24df0:	200023c8 	.word	0x200023c8
   24df4:	200049f8 	.word	0x200049f8
   24df8:	2000a300 	.word	0x2000a300
   24dfc:	000252dd 	.word	0x000252dd

00024e00 <bg_thread_main>:
{
   24e00:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   24e02:	4b0a      	ldr	r3, [pc, #40]	; (24e2c <bg_thread_main+0x2c>)
   24e04:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   24e06:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   24e08:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   24e0a:	f7ff fed7 	bl	24bbc <z_sys_init_run_level>
	boot_banner();
   24e0e:	f009 f896 	bl	2df3e <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   24e12:	2003      	movs	r0, #3
   24e14:	f7ff fed2 	bl	24bbc <z_sys_init_run_level>
	z_init_static_threads();
   24e18:	f000 fa04 	bl	25224 <z_init_static_threads>
	main();
   24e1c:	f001 fd31 	bl	26882 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24e20:	4a03      	ldr	r2, [pc, #12]	; (24e30 <bg_thread_main+0x30>)
   24e22:	7b13      	ldrb	r3, [r2, #12]
   24e24:	f023 0301 	bic.w	r3, r3, #1
   24e28:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   24e2a:	bd08      	pop	{r3, pc}
   24e2c:	20004c38 	.word	0x20004c38
   24e30:	20002480 	.word	0x20002480

00024e34 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   24e34:	4802      	ldr	r0, [pc, #8]	; (24e40 <z_bss_zero+0xc>)
   24e36:	4a03      	ldr	r2, [pc, #12]	; (24e44 <z_bss_zero+0x10>)
   24e38:	2100      	movs	r1, #0
   24e3a:	1a12      	subs	r2, r2, r0
   24e3c:	f005 ba99 	b.w	2a372 <memset>
   24e40:	20000ed0 	.word	0x20000ed0
   24e44:	20004c3c 	.word	0x20004c3c

00024e48 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   24e48:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   24e4a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 24f14 <z_cstart+0xcc>
   24e4e:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   24e50:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   24e54:	4d30      	ldr	r5, [pc, #192]	; (24f18 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   24e56:	4e31      	ldr	r6, [pc, #196]	; (24f1c <z_cstart+0xd4>)
   24e58:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24e5a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 24f20 <z_cstart+0xd8>
   24e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24e62:	2400      	movs	r4, #0
   24e64:	616b      	str	r3, [r5, #20]
   24e66:	23e0      	movs	r3, #224	; 0xe0
   24e68:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   24e6c:	77ec      	strb	r4, [r5, #31]
   24e6e:	762c      	strb	r4, [r5, #24]
   24e70:	766c      	strb	r4, [r5, #25]
   24e72:	76ac      	strb	r4, [r5, #26]
   24e74:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24e78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   24e7a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   24e7e:	626b      	str	r3, [r5, #36]	; 0x24
   24e80:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24e84:	f7e6 ff44 	bl	bd10 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24e88:	f7e6 fa2c 	bl	b2e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   24e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24e90:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24e92:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24e94:	f7e7 f844 	bl	bf20 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24e98:	f7e6 ff88 	bl	bdac <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   24e9c:	f7e1 fedc 	bl	6c58 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   24ea0:	f240 1301 	movw	r3, #257	; 0x101
   24ea4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   24ea8:	ab06      	add	r3, sp, #24
   24eaa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   24eac:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
   24eb0:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24eb2:	f008 fa68 	bl	2d386 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   24eb6:	4620      	mov	r0, r4
   24eb8:	f7ff fe80 	bl	24bbc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   24ebc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   24ebe:	4d19      	ldr	r5, [pc, #100]	; (24f24 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   24ec0:	f7ff fe7c 	bl	24bbc <z_sys_init_run_level>
	z_sched_init();
   24ec4:	f000 ff66 	bl	25d94 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24ec8:	4b17      	ldr	r3, [pc, #92]	; (24f28 <z_cstart+0xe0>)
   24eca:	9305      	str	r3, [sp, #20]
   24ecc:	2301      	movs	r3, #1
   24ece:	4917      	ldr	r1, [pc, #92]	; (24f2c <z_cstart+0xe4>)
   24ed0:	9400      	str	r4, [sp, #0]
   24ed2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   24ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24eda:	464b      	mov	r3, r9
   24edc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   24ee0:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   24ee2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24ee4:	f000 f90a 	bl	250fc <z_setup_new_thread>
   24ee8:	7b6a      	ldrb	r2, [r5, #13]
   24eea:	4607      	mov	r7, r0
   24eec:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   24ef0:	4628      	mov	r0, r5
   24ef2:	736a      	strb	r2, [r5, #13]
   24ef4:	f008 fd5e 	bl	2d9b4 <z_ready_thread>
		init_idle_thread(i);
   24ef8:	4620      	mov	r0, r4
   24efa:	f7ff ff4b 	bl	24d94 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   24efe:	4b0c      	ldr	r3, [pc, #48]	; (24f30 <z_cstart+0xe8>)
   24f00:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   24f02:	464a      	mov	r2, r9
   24f04:	4639      	mov	r1, r7
   24f06:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   24f08:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   24f0a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   24f0e:	f7e6 fb81 	bl	b614 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   24f12:	bf00      	nop
   24f14:	2000ac80 	.word	0x2000ac80
   24f18:	e000ed00 	.word	0xe000ed00
   24f1c:	200049f8 	.word	0x200049f8
   24f20:	00024e01 	.word	0x00024e01
   24f24:	20002480 	.word	0x20002480
   24f28:	00031168 	.word	0x00031168
   24f2c:	20009ee0 	.word	0x20009ee0
   24f30:	200023c8 	.word	0x200023c8

00024f34 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   24f34:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24f36:	4c06      	ldr	r4, [pc, #24]	; (24f50 <statics_init+0x1c>)
   24f38:	4d06      	ldr	r5, [pc, #24]	; (24f54 <statics_init+0x20>)
   24f3a:	42ac      	cmp	r4, r5
   24f3c:	d301      	bcc.n	24f42 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   24f3e:	2000      	movs	r0, #0
   24f40:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24f42:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   24f46:	4620      	mov	r0, r4
   24f48:	f008 fa58 	bl	2d3fc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24f4c:	3414      	adds	r4, #20
   24f4e:	e7f4      	b.n	24f3a <statics_init+0x6>
   24f50:	20000bac 	.word	0x20000bac
   24f54:	20000bac 	.word	0x20000bac

00024f58 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   24f58:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24f5a:	4b0e      	ldr	r3, [pc, #56]	; (24f94 <init_mem_slab_module+0x3c>)
   24f5c:	4c0e      	ldr	r4, [pc, #56]	; (24f98 <init_mem_slab_module+0x40>)
   24f5e:	42a3      	cmp	r3, r4
   24f60:	d301      	bcc.n	24f66 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   24f62:	2000      	movs	r0, #0
	return rc;
}
   24f64:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24f66:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   24f6a:	ea41 0200 	orr.w	r2, r1, r0
   24f6e:	f012 0203 	ands.w	r2, r2, #3
   24f72:	d10b      	bne.n	24f8c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   24f74:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   24f76:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   24f78:	42aa      	cmp	r2, r5
   24f7a:	d101      	bne.n	24f80 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24f7c:	331c      	adds	r3, #28
   24f7e:	e7ee      	b.n	24f5e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   24f80:	695e      	ldr	r6, [r3, #20]
   24f82:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   24f84:	3201      	adds	r2, #1
		slab->free_list = p;
   24f86:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   24f88:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   24f8a:	e7f5      	b.n	24f78 <init_mem_slab_module+0x20>
	return rc;
   24f8c:	f06f 0015 	mvn.w	r0, #21
   24f90:	e7e8      	b.n	24f64 <init_mem_slab_module+0xc>
   24f92:	bf00      	nop
   24f94:	20000b3c 	.word	0x20000b3c
   24f98:	20000bac 	.word	0x20000bac

00024f9c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24f9e:	460c      	mov	r4, r1
	__asm__ volatile(
   24fa0:	f04f 0520 	mov.w	r5, #32
   24fa4:	f3ef 8111 	mrs	r1, BASEPRI
   24fa8:	f385 8812 	msr	BASEPRI_MAX, r5
   24fac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24fb0:	6945      	ldr	r5, [r0, #20]
   24fb2:	b15d      	cbz	r5, 24fcc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   24fb4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   24fb6:	682b      	ldr	r3, [r5, #0]
   24fb8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   24fba:	6983      	ldr	r3, [r0, #24]
   24fbc:	3301      	adds	r3, #1
   24fbe:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24fc0:	2000      	movs	r0, #0
	__asm__ volatile(
   24fc2:	f381 8811 	msr	BASEPRI, r1
   24fc6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   24fca:	e011      	b.n	24ff0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24fcc:	ea52 0c03 	orrs.w	ip, r2, r3
   24fd0:	d103      	bne.n	24fda <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   24fd2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   24fd4:	f06f 000b 	mvn.w	r0, #11
   24fd8:	e7f3      	b.n	24fc2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24fda:	e9cd 2300 	strd	r2, r3, [sp]
   24fde:	4602      	mov	r2, r0
   24fe0:	3008      	adds	r0, #8
   24fe2:	f000 fe2d 	bl	25c40 <z_pend_curr>
		if (result == 0) {
   24fe6:	b918      	cbnz	r0, 24ff0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   24fe8:	4b02      	ldr	r3, [pc, #8]	; (24ff4 <k_mem_slab_alloc+0x58>)
   24fea:	689b      	ldr	r3, [r3, #8]
   24fec:	695b      	ldr	r3, [r3, #20]
   24fee:	6023      	str	r3, [r4, #0]
}
   24ff0:	b003      	add	sp, #12
   24ff2:	bd30      	pop	{r4, r5, pc}
   24ff4:	200049f8 	.word	0x200049f8

00024ff8 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   24ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ffa:	4605      	mov	r5, r0
   24ffc:	460e      	mov	r6, r1
	__asm__ volatile(
   24ffe:	f04f 0320 	mov.w	r3, #32
   25002:	f3ef 8711 	mrs	r7, BASEPRI
   25006:	f383 8812 	msr	BASEPRI_MAX, r3
   2500a:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   2500e:	4b06      	ldr	r3, [pc, #24]	; (25028 <k_thread_foreach+0x30>)
   25010:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   25012:	b924      	cbnz	r4, 2501e <k_thread_foreach+0x26>
	__asm__ volatile(
   25014:	f387 8811 	msr	BASEPRI, r7
   25018:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   2501c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   2501e:	4620      	mov	r0, r4
   25020:	4631      	mov	r1, r6
   25022:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   25024:	6f64      	ldr	r4, [r4, #116]	; 0x74
   25026:	e7f4      	b.n	25012 <k_thread_foreach+0x1a>
   25028:	200049f8 	.word	0x200049f8

0002502c <z_thread_monitor_exit>:
	__asm__ volatile(
   2502c:	f04f 0320 	mov.w	r3, #32
   25030:	f3ef 8111 	mrs	r1, BASEPRI
   25034:	f383 8812 	msr	BASEPRI_MAX, r3
   25038:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   2503c:	4a09      	ldr	r2, [pc, #36]	; (25064 <z_thread_monitor_exit+0x38>)
   2503e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   25040:	4283      	cmp	r3, r0
   25042:	d107      	bne.n	25054 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   25044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   25046:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
   25048:	f381 8811 	msr	BASEPRI, r1
   2504c:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   25050:	4770      	bx	lr
   25052:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   25054:	2b00      	cmp	r3, #0
   25056:	d0f7      	beq.n	25048 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   25058:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   2505a:	4282      	cmp	r2, r0
   2505c:	d1f9      	bne.n	25052 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   2505e:	6f42      	ldr	r2, [r0, #116]	; 0x74
   25060:	675a      	str	r2, [r3, #116]	; 0x74
   25062:	e7f1      	b.n	25048 <z_thread_monitor_exit+0x1c>
   25064:	200049f8 	.word	0x200049f8

00025068 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   25068:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   2506a:	4604      	mov	r4, r0
   2506c:	b908      	cbnz	r0, 25072 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   2506e:	4b05      	ldr	r3, [pc, #20]	; (25084 <z_impl_k_thread_name_set+0x1c>)
   25070:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   25072:	2220      	movs	r2, #32
   25074:	f104 0078 	add.w	r0, r4, #120	; 0x78
   25078:	f005 f8fa 	bl	2a270 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2507c:	2000      	movs	r0, #0
   2507e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   25082:	bd10      	pop	{r4, pc}
   25084:	200049f8 	.word	0x200049f8

00025088 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   25088:	7b43      	ldrb	r3, [r0, #13]
   2508a:	2b10      	cmp	r3, #16
   2508c:	d80e      	bhi.n	250ac <k_thread_state_str+0x24>
   2508e:	2b10      	cmp	r3, #16
   25090:	d81c      	bhi.n	250cc <k_thread_state_str+0x44>
   25092:	e8df f003 	tbb	[pc, r3]
   25096:	091d      	.short	0x091d
   25098:	1b151b13 	.word	0x1b151b13
   2509c:	1b171b1b 	.word	0x1b171b1b
   250a0:	1b1b1b1b 	.word	0x1b1b1b1b
   250a4:	1b1b      	.short	0x1b1b
   250a6:	19          	.byte	0x19
   250a7:	00          	.byte	0x00
   250a8:	480b      	ldr	r0, [pc, #44]	; (250d8 <k_thread_state_str+0x50>)
   250aa:	4770      	bx	lr
   250ac:	2b20      	cmp	r3, #32
   250ae:	d011      	beq.n	250d4 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
   250b0:	4a0a      	ldr	r2, [pc, #40]	; (250dc <k_thread_state_str+0x54>)
   250b2:	480b      	ldr	r0, [pc, #44]	; (250e0 <k_thread_state_str+0x58>)
   250b4:	2b80      	cmp	r3, #128	; 0x80
   250b6:	bf08      	it	eq
   250b8:	4610      	moveq	r0, r2
   250ba:	4770      	bx	lr
		return "pending";
   250bc:	4809      	ldr	r0, [pc, #36]	; (250e4 <k_thread_state_str+0x5c>)
   250be:	4770      	bx	lr
		return "prestart";
   250c0:	4809      	ldr	r0, [pc, #36]	; (250e8 <k_thread_state_str+0x60>)
   250c2:	4770      	bx	lr
		return "dead";
   250c4:	4809      	ldr	r0, [pc, #36]	; (250ec <k_thread_state_str+0x64>)
   250c6:	4770      	bx	lr
		return "suspended";
   250c8:	4809      	ldr	r0, [pc, #36]	; (250f0 <k_thread_state_str+0x68>)
   250ca:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
   250cc:	4804      	ldr	r0, [pc, #16]	; (250e0 <k_thread_state_str+0x58>)
   250ce:	4770      	bx	lr
		return "";
   250d0:	4808      	ldr	r0, [pc, #32]	; (250f4 <k_thread_state_str+0x6c>)
   250d2:	4770      	bx	lr
		return "aborting";
   250d4:	4808      	ldr	r0, [pc, #32]	; (250f8 <k_thread_state_str+0x70>)
}
   250d6:	4770      	bx	lr
   250d8:	00034a3c 	.word	0x00034a3c
   250dc:	00034a4b 	.word	0x00034a4b
   250e0:	00032d85 	.word	0x00032d85
   250e4:	00034a26 	.word	0x00034a26
   250e8:	00034a2e 	.word	0x00034a2e
   250ec:	00034a37 	.word	0x00034a37
   250f0:	000325e4 	.word	0x000325e4
   250f4:	000316c0 	.word	0x000316c0
   250f8:	00034a42 	.word	0x00034a42

000250fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   250fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25100:	b085      	sub	sp, #20
   25102:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25104:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   25108:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2510c:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2510e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25110:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25112:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   25116:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   25118:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2511a:	f101 0b20 	add.w	fp, r1, #32
	thread_base->thread_state = (uint8_t)initial_state;
   2511e:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25120:	f10a 0720 	add.w	r7, sl, #32

	thread_base->prio = priority;
   25124:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
   25126:	6085      	str	r5, [r0, #8]
{
   25128:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2512a:	e9c0 5506 	strd	r5, r5, [r0, #24]
   2512e:	460e      	mov	r6, r1
	thread_base->prio = priority;
   25130:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
   25132:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
   25134:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
   25136:	4652      	mov	r2, sl
   25138:	21aa      	movs	r1, #170	; 0xaa
   2513a:	4658      	mov	r0, fp
{
   2513c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   25140:	f005 f917 	bl	2a372 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25144:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25146:	9302      	str	r3, [sp, #8]
   25148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2514a:	9301      	str	r3, [sp, #4]
   2514c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2514e:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
   25150:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25154:	4643      	mov	r3, r8
	new_thread->stack_info.delta = delta;
   25156:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2515a:	463a      	mov	r2, r7
   2515c:	4631      	mov	r1, r6
   2515e:	4620      	mov	r0, r4
   25160:	f7e6 fa24 	bl	b5ac <arch_new_thread>
	new_thread->entry.parameter1 = p1;
   25164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25166:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   25168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2516a:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   2516c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   2516e:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   25170:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
   25174:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   25176:	f04f 0220 	mov.w	r2, #32
   2517a:	f3ef 8311 	mrs	r3, BASEPRI
   2517e:	f382 8812 	msr	BASEPRI_MAX, r2
   25182:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   25186:	4e10      	ldr	r6, [pc, #64]	; (251c8 <z_setup_new_thread+0xcc>)
   25188:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   2518a:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   2518c:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
   2518e:	f383 8811 	msr	BASEPRI, r3
   25192:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   25196:	f1b9 0f00 	cmp.w	r9, #0
   2519a:	d011      	beq.n	251c0 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
   2519c:	221f      	movs	r2, #31
   2519e:	4649      	mov	r1, r9
   251a0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   251a4:	f005 f864 	bl	2a270 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   251a8:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
   251ac:	68b3      	ldr	r3, [r6, #8]
   251ae:	b10b      	cbz	r3, 251b4 <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
   251b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
   251b4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   251b8:	4638      	mov	r0, r7
   251ba:	b005      	add	sp, #20
   251bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   251c0:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
   251c4:	e7f2      	b.n	251ac <z_setup_new_thread+0xb0>
   251c6:	bf00      	nop
   251c8:	200049f8 	.word	0x200049f8

000251cc <z_impl_k_thread_create>:
{
   251cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   251ce:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   251d0:	2700      	movs	r7, #0
   251d2:	9705      	str	r7, [sp, #20]
   251d4:	9f10      	ldr	r7, [sp, #64]	; 0x40
   251d6:	9704      	str	r7, [sp, #16]
   251d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   251da:	9703      	str	r7, [sp, #12]
   251dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   251de:	9702      	str	r7, [sp, #8]
{
   251e0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   251e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   251e6:	9701      	str	r7, [sp, #4]
   251e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   251ea:	9700      	str	r7, [sp, #0]
{
   251ec:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   251ee:	f7ff ff85 	bl	250fc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   251f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   251f6:	bf08      	it	eq
   251f8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   251fc:	d005      	beq.n	2520a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   251fe:	ea55 0306 	orrs.w	r3, r5, r6
   25202:	d105      	bne.n	25210 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   25204:	4620      	mov	r0, r4
   25206:	f000 fcbf 	bl	25b88 <z_sched_start>
}
   2520a:	4620      	mov	r0, r4
   2520c:	b007      	add	sp, #28
   2520e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25210:	4903      	ldr	r1, [pc, #12]	; (25220 <z_impl_k_thread_create+0x54>)
   25212:	4632      	mov	r2, r6
   25214:	462b      	mov	r3, r5
   25216:	f104 0018 	add.w	r0, r4, #24
   2521a:	f000 ff71 	bl	26100 <z_add_timeout>
   2521e:	e7f4      	b.n	2520a <z_impl_k_thread_create+0x3e>
   25220:	0002d9d5 	.word	0x0002d9d5

00025224 <z_init_static_threads>:
{
   25224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25228:	4c29      	ldr	r4, [pc, #164]	; (252d0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2522a:	4d2a      	ldr	r5, [pc, #168]	; (252d4 <z_init_static_threads+0xb0>)
{
   2522c:	b087      	sub	sp, #28
   2522e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   25230:	42ae      	cmp	r6, r5
   25232:	f104 0430 	add.w	r4, r4, #48	; 0x30
   25236:	d30f      	bcc.n	25258 <z_init_static_threads+0x34>
	k_sched_lock();
   25238:	f000 fbc2 	bl	259c0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2523c:	4c24      	ldr	r4, [pc, #144]	; (252d0 <z_init_static_threads+0xac>)
   2523e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 252d8 <z_init_static_threads+0xb4>
   25242:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25246:	f240 37e7 	movw	r7, #999	; 0x3e7
   2524a:	42ac      	cmp	r4, r5
   2524c:	d320      	bcc.n	25290 <z_init_static_threads+0x6c>
}
   2524e:	b007      	add	sp, #28
   25250:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   25254:	f000 bd82 	b.w	25d5c <k_sched_unlock>
		z_setup_new_thread(
   25258:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2525c:	9305      	str	r3, [sp, #20]
   2525e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   25262:	9304      	str	r3, [sp, #16]
   25264:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25268:	9303      	str	r3, [sp, #12]
   2526a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2526e:	9302      	str	r3, [sp, #8]
   25270:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   25274:	9301      	str	r3, [sp, #4]
   25276:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2527a:	9300      	str	r3, [sp, #0]
   2527c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   25280:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   25284:	f7ff ff3a 	bl	250fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25288:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2528c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2528e:	e7ce      	b.n	2522e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25290:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25292:	1c5a      	adds	r2, r3, #1
   25294:	d00d      	beq.n	252b2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   25296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2529a:	2100      	movs	r1, #0
   2529c:	4638      	mov	r0, r7
   2529e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   252a2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   252a6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   252aa:	d104      	bne.n	252b6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   252ac:	4640      	mov	r0, r8
   252ae:	f000 fc6b 	bl	25b88 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   252b2:	3430      	adds	r4, #48	; 0x30
   252b4:	e7c9      	b.n	2524a <z_init_static_threads+0x26>
   252b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   252ba:	2300      	movs	r3, #0
   252bc:	f7db ff70 	bl	11a0 <__aeabi_uldivmod>
   252c0:	4602      	mov	r2, r0
   252c2:	460b      	mov	r3, r1
   252c4:	f108 0018 	add.w	r0, r8, #24
   252c8:	4649      	mov	r1, r9
   252ca:	f000 ff19 	bl	26100 <z_add_timeout>
   252ce:	e7f0      	b.n	252b2 <z_init_static_threads+0x8e>
   252d0:	20000aac 	.word	0x20000aac
   252d4:	20000b3c 	.word	0x20000b3c
   252d8:	0002d9d5 	.word	0x0002d9d5

000252dc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   252dc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   252de:	4c0b      	ldr	r4, [pc, #44]	; (2530c <idle+0x30>)
	return !z_sys_post_kernel;
   252e0:	4d0b      	ldr	r5, [pc, #44]	; (25310 <idle+0x34>)
	__asm__ volatile(
   252e2:	f04f 0220 	mov.w	r2, #32
   252e6:	f3ef 8311 	mrs	r3, BASEPRI
   252ea:	f382 8812 	msr	BASEPRI_MAX, r2
   252ee:	f3bf 8f6f 	isb	sy
   252f2:	f008 fc3c 	bl	2db6e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   252f6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   252f8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   252fa:	b913      	cbnz	r3, 25302 <idle+0x26>
	arch_cpu_idle();
   252fc:	f7e5 fff8 	bl	b2f0 <arch_cpu_idle>
}
   25300:	e7ef      	b.n	252e2 <idle+0x6>
   25302:	f7e5 fdef 	bl	aee4 <pm_system_suspend>
   25306:	2800      	cmp	r0, #0
   25308:	d1eb      	bne.n	252e2 <idle+0x6>
   2530a:	e7f7      	b.n	252fc <idle+0x20>
   2530c:	200049f8 	.word	0x200049f8
   25310:	20004c38 	.word	0x20004c38

00025314 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25318:	4604      	mov	r4, r0
   2531a:	4617      	mov	r7, r2
   2531c:	461e      	mov	r6, r3
   2531e:	f04f 0320 	mov.w	r3, #32
   25322:	f3ef 8811 	mrs	r8, BASEPRI
   25326:	f383 8812 	msr	BASEPRI_MAX, r3
   2532a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2532e:	68c3      	ldr	r3, [r0, #12]
   25330:	4a32      	ldr	r2, [pc, #200]	; (253fc <z_impl_k_mutex_lock+0xe8>)
   25332:	b16b      	cbz	r3, 25350 <z_impl_k_mutex_lock+0x3c>
   25334:	6880      	ldr	r0, [r0, #8]
   25336:	6891      	ldr	r1, [r2, #8]
   25338:	4288      	cmp	r0, r1
   2533a:	d019      	beq.n	25370 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2533c:	ea57 0306 	orrs.w	r3, r7, r6
   25340:	d118      	bne.n	25374 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   25342:	f388 8811 	msr	BASEPRI, r8
   25346:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2534a:	f06f 000f 	mvn.w	r0, #15
   2534e:	e00c      	b.n	2536a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   25350:	6891      	ldr	r1, [r2, #8]
   25352:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   25356:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   25358:	3301      	adds	r3, #1
   2535a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2535c:	6893      	ldr	r3, [r2, #8]
   2535e:	60a3      	str	r3, [r4, #8]
   25360:	f388 8811 	msr	BASEPRI, r8
   25364:	f3bf 8f6f 	isb	sy
		return 0;
   25368:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2536a:	b002      	add	sp, #8
   2536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   25370:	6921      	ldr	r1, [r4, #16]
   25372:	e7f0      	b.n	25356 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   25374:	f991 100e 	ldrsb.w	r1, [r1, #14]
   25378:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   2537c:	4299      	cmp	r1, r3
   2537e:	bfa8      	it	ge
   25380:	4619      	movge	r1, r3
   25382:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   25386:	4291      	cmp	r1, r2
   25388:	bfb8      	it	lt
   2538a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2538c:	428b      	cmp	r3, r1
   2538e:	dd2e      	ble.n	253ee <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   25390:	f008 f8e6 	bl	2d560 <adjust_owner_prio.isra.0>
   25394:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25396:	e9cd 7600 	strd	r7, r6, [sp]
   2539a:	4819      	ldr	r0, [pc, #100]	; (25400 <z_impl_k_mutex_lock+0xec>)
   2539c:	4622      	mov	r2, r4
   2539e:	4641      	mov	r1, r8
   253a0:	f000 fc4e 	bl	25c40 <z_pend_curr>
	if (got_mutex == 0) {
   253a4:	2800      	cmp	r0, #0
   253a6:	d0e0      	beq.n	2536a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   253a8:	f04f 0320 	mov.w	r3, #32
   253ac:	f3ef 8611 	mrs	r6, BASEPRI
   253b0:	f383 8812 	msr	BASEPRI_MAX, r3
   253b4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   253b8:	6823      	ldr	r3, [r4, #0]
   253ba:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   253bc:	429c      	cmp	r4, r3
   253be:	d00a      	beq.n	253d6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   253c0:	b14b      	cbz	r3, 253d6 <z_impl_k_mutex_lock+0xc2>
   253c2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   253c6:	4299      	cmp	r1, r3
   253c8:	bfa8      	it	ge
   253ca:	4619      	movge	r1, r3
   253cc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   253d0:	4299      	cmp	r1, r3
   253d2:	bfb8      	it	lt
   253d4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   253d6:	68a0      	ldr	r0, [r4, #8]
   253d8:	f008 f8c2 	bl	2d560 <adjust_owner_prio.isra.0>
   253dc:	b900      	cbnz	r0, 253e0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   253de:	b145      	cbz	r5, 253f2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   253e0:	4807      	ldr	r0, [pc, #28]	; (25400 <z_impl_k_mutex_lock+0xec>)
   253e2:	4631      	mov	r1, r6
   253e4:	f000 fada 	bl	2599c <z_reschedule>
	return -EAGAIN;
   253e8:	f06f 000a 	mvn.w	r0, #10
   253ec:	e7bd      	b.n	2536a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   253ee:	2500      	movs	r5, #0
   253f0:	e7d1      	b.n	25396 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   253f2:	f386 8811 	msr	BASEPRI, r6
   253f6:	f3bf 8f6f 	isb	sy
   253fa:	e7f5      	b.n	253e8 <z_impl_k_mutex_lock+0xd4>
   253fc:	200049f8 	.word	0x200049f8
   25400:	20004c39 	.word	0x20004c39

00025404 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   25404:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   25406:	6883      	ldr	r3, [r0, #8]
{
   25408:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2540a:	2b00      	cmp	r3, #0
   2540c:	d033      	beq.n	25476 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2540e:	4a1d      	ldr	r2, [pc, #116]	; (25484 <z_impl_k_mutex_unlock+0x80>)
   25410:	6892      	ldr	r2, [r2, #8]
   25412:	4293      	cmp	r3, r2
   25414:	d132      	bne.n	2547c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   25416:	7bda      	ldrb	r2, [r3, #15]
   25418:	3a01      	subs	r2, #1
   2541a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2541c:	68c3      	ldr	r3, [r0, #12]
   2541e:	2b01      	cmp	r3, #1
   25420:	d905      	bls.n	2542e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   25422:	3b01      	subs	r3, #1
   25424:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   25426:	f000 fc99 	bl	25d5c <k_sched_unlock>

	return 0;
   2542a:	2000      	movs	r0, #0
}
   2542c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2542e:	f04f 0320 	mov.w	r3, #32
   25432:	f3ef 8511 	mrs	r5, BASEPRI
   25436:	f383 8812 	msr	BASEPRI_MAX, r3
   2543a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2543e:	6901      	ldr	r1, [r0, #16]
   25440:	6880      	ldr	r0, [r0, #8]
   25442:	f008 f88d 	bl	2d560 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25446:	4620      	mov	r0, r4
   25448:	f008 fb25 	bl	2da96 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2544c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2544e:	b160      	cbz	r0, 2546a <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
   25450:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25454:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   25456:	2200      	movs	r2, #0
   25458:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   2545c:	f008 faaa 	bl	2d9b4 <z_ready_thread>
		z_reschedule(&lock, key);
   25460:	4809      	ldr	r0, [pc, #36]	; (25488 <z_impl_k_mutex_unlock+0x84>)
   25462:	4629      	mov	r1, r5
   25464:	f000 fa9a 	bl	2599c <z_reschedule>
   25468:	e7dd      	b.n	25426 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   2546a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2546c:	f385 8811 	msr	BASEPRI, r5
   25470:	f3bf 8f6f 	isb	sy
   25474:	e7d7      	b.n	25426 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   25476:	f06f 0015 	mvn.w	r0, #21
   2547a:	e7d7      	b.n	2542c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   2547c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25480:	e7d4      	b.n	2542c <z_impl_k_mutex_unlock+0x28>
   25482:	bf00      	nop
   25484:	200049f8 	.word	0x200049f8
   25488:	20004c39 	.word	0x20004c39

0002548c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2548c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2548e:	4611      	mov	r1, r2
	__asm__ volatile(
   25490:	f04f 0220 	mov.w	r2, #32
   25494:	f3ef 8511 	mrs	r5, BASEPRI
   25498:	f382 8812 	msr	BASEPRI_MAX, r2
   2549c:	f3bf 8f6f 	isb	sy
   254a0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   254a2:	b19c      	cbz	r4, 254cc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   254a4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   254a6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   254a8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   254ac:	4294      	cmp	r4, r2
	list->head = node;
   254ae:	6003      	str	r3, [r0, #0]
	list->tail = node;
   254b0:	bf08      	it	eq
   254b2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   254b4:	2101      	movs	r1, #1
   254b6:	4620      	mov	r0, r4
   254b8:	f008 f8c6 	bl	2d648 <z_queue_node_peek>
   254bc:	4604      	mov	r4, r0
	__asm__ volatile(
   254be:	f385 8811 	msr	BASEPRI, r5
   254c2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   254c6:	4620      	mov	r0, r4
   254c8:	b003      	add	sp, #12
   254ca:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   254cc:	ea51 0203 	orrs.w	r2, r1, r3
   254d0:	d0f5      	beq.n	254be <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   254d2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   254d6:	e9cd 1300 	strd	r1, r3, [sp]
   254da:	4610      	mov	r0, r2
   254dc:	4629      	mov	r1, r5
   254de:	f000 fbaf 	bl	25c40 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   254e2:	2800      	cmp	r0, #0
   254e4:	d1ef      	bne.n	254c6 <z_impl_k_queue_get+0x3a>
   254e6:	4b02      	ldr	r3, [pc, #8]	; (254f0 <z_impl_k_queue_get+0x64>)
   254e8:	689b      	ldr	r3, [r3, #8]
   254ea:	695c      	ldr	r4, [r3, #20]
   254ec:	e7eb      	b.n	254c6 <z_impl_k_queue_get+0x3a>
   254ee:	bf00      	nop
   254f0:	200049f8 	.word	0x200049f8

000254f4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   254f4:	b538      	push	{r3, r4, r5, lr}
   254f6:	4604      	mov	r4, r0
	__asm__ volatile(
   254f8:	f04f 0320 	mov.w	r3, #32
   254fc:	f3ef 8511 	mrs	r5, BASEPRI
   25500:	f383 8812 	msr	BASEPRI_MAX, r3
   25504:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25508:	f008 fac5 	bl	2da96 <z_unpend_first_thread>

	if (thread != NULL) {
   2550c:	b150      	cbz	r0, 25524 <z_impl_k_sem_give+0x30>
   2550e:	2200      	movs	r2, #0
   25510:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25514:	f008 fa4e 	bl	2d9b4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25518:	4629      	mov	r1, r5
   2551a:	4808      	ldr	r0, [pc, #32]	; (2553c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2551c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25520:	f000 ba3c 	b.w	2599c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25524:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25528:	429a      	cmp	r2, r3
   2552a:	bf18      	it	ne
   2552c:	3301      	addne	r3, #1
   2552e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25530:	2102      	movs	r1, #2
   25532:	f104 0010 	add.w	r0, r4, #16
   25536:	f008 fce0 	bl	2defa <z_handle_obj_poll_events>
}
   2553a:	e7ed      	b.n	25518 <z_impl_k_sem_give+0x24>
   2553c:	20004c39 	.word	0x20004c39

00025540 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25540:	b513      	push	{r0, r1, r4, lr}
   25542:	f04f 0420 	mov.w	r4, #32
   25546:	f3ef 8111 	mrs	r1, BASEPRI
   2554a:	f384 8812 	msr	BASEPRI_MAX, r4
   2554e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25552:	6884      	ldr	r4, [r0, #8]
   25554:	b144      	cbz	r4, 25568 <z_impl_k_sem_take+0x28>
		sem->count--;
   25556:	3c01      	subs	r4, #1
   25558:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2555a:	f381 8811 	msr	BASEPRI, r1
   2555e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25562:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25564:	b002      	add	sp, #8
   25566:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25568:	ea52 0403 	orrs.w	r4, r2, r3
   2556c:	d106      	bne.n	2557c <z_impl_k_sem_take+0x3c>
   2556e:	f381 8811 	msr	BASEPRI, r1
   25572:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25576:	f06f 000f 	mvn.w	r0, #15
   2557a:	e7f3      	b.n	25564 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2557c:	e9cd 2300 	strd	r2, r3, [sp]
   25580:	4602      	mov	r2, r0
   25582:	4802      	ldr	r0, [pc, #8]	; (2558c <z_impl_k_sem_take+0x4c>)
   25584:	f000 fb5c 	bl	25c40 <z_pend_curr>
	return ret;
   25588:	e7ec      	b.n	25564 <z_impl_k_sem_take+0x24>
   2558a:	bf00      	nop
   2558c:	20004c39 	.word	0x20004c39

00025590 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25592:	4b09      	ldr	r3, [pc, #36]	; (255b8 <k_sys_work_q_init+0x28>)
   25594:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25596:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   25598:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2559a:	9300      	str	r3, [sp, #0]
   2559c:	4907      	ldr	r1, [pc, #28]	; (255bc <k_sys_work_q_init+0x2c>)
   2559e:	4808      	ldr	r0, [pc, #32]	; (255c0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   255a0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   255a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   255a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   255ac:	f000 f914 	bl	257d8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   255b0:	4620      	mov	r0, r4
   255b2:	b004      	add	sp, #16
   255b4:	bd10      	pop	{r4, pc}
   255b6:	bf00      	nop
   255b8:	00034a52 	.word	0x00034a52
   255bc:	2000ac80 	.word	0x2000ac80
   255c0:	20002538 	.word	0x20002538

000255c4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   255c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   255c8:	4e47      	ldr	r6, [pc, #284]	; (256e8 <work_queue_main+0x124>)
   255ca:	b085      	sub	sp, #20
   255cc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   255ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   255d2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   255d6:	f04f 0320 	mov.w	r3, #32
   255da:	f3ef 8711 	mrs	r7, BASEPRI
   255de:	f383 8812 	msr	BASEPRI_MAX, r3
   255e2:	f3bf 8f6f 	isb	sy
   255e6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   255ea:	b98d      	cbnz	r5, 25610 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   255ec:	2102      	movs	r1, #2
   255ee:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   255f2:	f008 f8a2 	bl	2d73a <flag_test_and_clear>
   255f6:	2800      	cmp	r0, #0
   255f8:	d135      	bne.n	25666 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   255fa:	2300      	movs	r3, #0
   255fc:	e9cd 8900 	strd	r8, r9, [sp]
   25600:	9302      	str	r3, [sp, #8]
   25602:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   25606:	4639      	mov	r1, r7
   25608:	4838      	ldr	r0, [pc, #224]	; (256ec <work_queue_main+0x128>)
   2560a:	f000 fcdd 	bl	25fc8 <z_sched_wait>
			continue;
   2560e:	e7e2      	b.n	255d6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25610:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
   25614:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   25616:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2561a:	4295      	cmp	r5, r2
   2561c:	d101      	bne.n	25622 <work_queue_main+0x5e>
	list->tail = node;
   2561e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
   25622:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   25626:	f043 0302 	orr.w	r3, r3, #2
   2562a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   2562e:	68eb      	ldr	r3, [r5, #12]
   25630:	f023 0304 	bic.w	r3, r3, #4
   25634:	f043 0301 	orr.w	r3, r3, #1
   25638:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2563a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2563c:	f387 8811 	msr	BASEPRI, r7
   25640:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   25644:	4628      	mov	r0, r5
   25646:	4798      	blx	r3
	__asm__ volatile(
   25648:	f04f 0320 	mov.w	r3, #32
   2564c:	f3ef 8b11 	mrs	fp, BASEPRI
   25650:	f383 8812 	msr	BASEPRI_MAX, r3
   25654:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   25658:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2565a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2565c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25660:	d40b      	bmi.n	2567a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   25662:	60ea      	str	r2, [r5, #12]
   25664:	e00e      	b.n	25684 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25666:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2566a:	2200      	movs	r2, #0
   2566c:	2101      	movs	r1, #1
   2566e:	4628      	mov	r0, r5
   25670:	f008 fa39 	bl	2dae6 <z_sched_wake>
   25674:	2800      	cmp	r0, #0
   25676:	d1f8      	bne.n	2566a <work_queue_main+0xa6>
   25678:	e7bf      	b.n	255fa <work_queue_main+0x36>
	return list->head;
   2567a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2567c:	f023 0303 	bic.w	r3, r3, #3
   25680:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25682:	b970      	cbnz	r0, 256a2 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   25684:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   25688:	f023 0302 	bic.w	r3, r3, #2
   2568c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
   25690:	f38b 8811 	msr	BASEPRI, fp
   25694:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25698:	05d8      	lsls	r0, r3, #23
   2569a:	d49c      	bmi.n	255d6 <work_queue_main+0x12>
	z_impl_k_yield();
   2569c:	f000 fb86 	bl	25dac <z_impl_k_yield>
}
   256a0:	e799      	b.n	255d6 <work_queue_main+0x12>
	return node->next;
   256a2:	2700      	movs	r7, #0
   256a4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   256a8:	463b      	mov	r3, r7
		if (wc->work == work) {
   256aa:	6842      	ldr	r2, [r0, #4]
   256ac:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   256ae:	4601      	mov	r1, r0
		if (wc->work == work) {
   256b0:	d10c      	bne.n	256cc <work_queue_main+0x108>
	return node->next;
   256b2:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   256b4:	b997      	cbnz	r7, 256dc <work_queue_main+0x118>
   256b6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   256b8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   256ba:	4282      	cmp	r2, r0
   256bc:	d100      	bne.n	256c0 <work_queue_main+0xfc>
	list->tail = node;
   256be:	6071      	str	r1, [r6, #4]
	parent->next = child;
   256c0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   256c4:	f7ff ff16 	bl	254f4 <z_impl_k_sem_give>
}
   256c8:	4639      	mov	r1, r7
   256ca:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   256cc:	f1ba 0f00 	cmp.w	sl, #0
   256d0:	d0d8      	beq.n	25684 <work_queue_main+0xc0>
	return node->next;
   256d2:	4650      	mov	r0, sl
   256d4:	460f      	mov	r7, r1
   256d6:	f8da a000 	ldr.w	sl, [sl]
   256da:	e7e6      	b.n	256aa <work_queue_main+0xe6>
	return list->tail;
   256dc:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   256de:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   256e0:	4290      	cmp	r0, r2
	list->tail = node;
   256e2:	bf08      	it	eq
   256e4:	6077      	streq	r7, [r6, #4]
}
   256e6:	e7eb      	b.n	256c0 <work_queue_main+0xfc>
   256e8:	20004a24 	.word	0x20004a24
   256ec:	20004c39 	.word	0x20004c39

000256f0 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   256f0:	68c3      	ldr	r3, [r0, #12]
{
   256f2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   256f4:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   256f8:	079b      	lsls	r3, r3, #30
{
   256fa:	4605      	mov	r5, r0
   256fc:	460c      	mov	r4, r1
	if (ret) {
   256fe:	d50d      	bpl.n	2571c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25700:	2201      	movs	r2, #1
   25702:	2100      	movs	r1, #0
   25704:	f104 0008 	add.w	r0, r4, #8
   25708:	f008 f807 	bl	2d71a <z_impl_k_sem_init>
	parent->next = child;
   2570c:	2300      	movs	r3, #0
   2570e:	6023      	str	r3, [r4, #0]
	return list->tail;
   25710:	4b05      	ldr	r3, [pc, #20]	; (25728 <cancel_sync_locked+0x38>)
	canceler->work = work;
   25712:	6065      	str	r5, [r4, #4]
   25714:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25716:	b91a      	cbnz	r2, 25720 <cancel_sync_locked+0x30>
	list->head = node;
   25718:	e9c3 4400 	strd	r4, r4, [r3]
}
   2571c:	4630      	mov	r0, r6
   2571e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25720:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25722:	605c      	str	r4, [r3, #4]
}
   25724:	e7fa      	b.n	2571c <cancel_sync_locked+0x2c>
   25726:	bf00      	nop
   25728:	20004a24 	.word	0x20004a24

0002572c <submit_to_queue_locked>:
{
   2572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2572e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25730:	079a      	lsls	r2, r3, #30
{
   25732:	4604      	mov	r4, r0
   25734:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25736:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2573a:	d41f      	bmi.n	2577c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2573c:	075f      	lsls	r7, r3, #29
   2573e:	d41f      	bmi.n	25780 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   25740:	680a      	ldr	r2, [r1, #0]
   25742:	b90a      	cbnz	r2, 25748 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25744:	6882      	ldr	r2, [r0, #8]
   25746:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25748:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2574a:	bf44      	itt	mi
   2574c:	68a3      	ldrmi	r3, [r4, #8]
   2574e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   25750:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   25752:	bf4c      	ite	mi
   25754:	2502      	movmi	r5, #2
		ret = 1;
   25756:	2501      	movpl	r5, #1
	if (queue == NULL) {
   25758:	b37f      	cbz	r7, 257ba <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2575a:	4b1b      	ldr	r3, [pc, #108]	; (257c8 <submit_to_queue_locked+0x9c>)
   2575c:	689b      	ldr	r3, [r3, #8]
   2575e:	42bb      	cmp	r3, r7
   25760:	d111      	bne.n	25786 <submit_to_queue_locked+0x5a>
   25762:	f007 fedb 	bl	2d51c <k_is_in_isr>
   25766:	f080 0001 	eor.w	r0, r0, #1
   2576a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   2576c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25770:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25772:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25776:	d523      	bpl.n	257c0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   25778:	b13a      	cbz	r2, 2578a <submit_to_queue_locked+0x5e>
   2577a:	b940      	cbnz	r0, 2578e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   2577c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   25780:	2300      	movs	r3, #0
   25782:	6033      	str	r3, [r6, #0]
	return ret;
   25784:	e013      	b.n	257ae <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25786:	2000      	movs	r0, #0
   25788:	e7f0      	b.n	2576c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2578a:	071b      	lsls	r3, r3, #28
   2578c:	d4f6      	bmi.n	2577c <submit_to_queue_locked+0x50>
	parent->next = child;
   2578e:	2300      	movs	r3, #0
   25790:	6023      	str	r3, [r4, #0]
	return list->tail;
   25792:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   25796:	b963      	cbnz	r3, 257b2 <submit_to_queue_locked+0x86>
	list->head = node;
   25798:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
   2579c:	4638      	mov	r0, r7
   2579e:	f007 ffe5 	bl	2d76c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   257a2:	68e3      	ldr	r3, [r4, #12]
   257a4:	f043 0304 	orr.w	r3, r3, #4
   257a8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   257aa:	6833      	ldr	r3, [r6, #0]
   257ac:	60a3      	str	r3, [r4, #8]
}
   257ae:	4628      	mov	r0, r5
   257b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   257b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   257b4:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
   257b8:	e7f0      	b.n	2579c <submit_to_queue_locked+0x70>
		return -EINVAL;
   257ba:	f06f 0515 	mvn.w	r5, #21
   257be:	e7df      	b.n	25780 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   257c0:	f06f 0512 	mvn.w	r5, #18
   257c4:	e7dc      	b.n	25780 <submit_to_queue_locked+0x54>
   257c6:	bf00      	nop
   257c8:	200049f8 	.word	0x200049f8

000257cc <k_work_submit>:
{
   257cc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   257ce:	4801      	ldr	r0, [pc, #4]	; (257d4 <k_work_submit+0x8>)
   257d0:	f008 b82c 	b.w	2d82c <k_work_submit_to_queue>
   257d4:	20002538 	.word	0x20002538

000257d8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   257d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   257da:	b089      	sub	sp, #36	; 0x24
   257dc:	4604      	mov	r4, r0
	list->head = NULL;
   257de:	2000      	movs	r0, #0
	list->tail = NULL;
   257e0:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
   257e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   257e6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
   257ea:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
   257ee:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   257f2:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   257f6:	b31d      	cbz	r5, 25840 <k_work_queue_start+0x68>
   257f8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   257fa:	2800      	cmp	r0, #0
   257fc:	f240 1001 	movw	r0, #257	; 0x101
   25800:	bf08      	it	eq
   25802:	2001      	moveq	r0, #1
	*flagp = flags;
   25804:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25808:	2000      	movs	r0, #0
   2580a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2580e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   25812:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25816:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2581a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2581e:	4b09      	ldr	r3, [pc, #36]	; (25844 <k_work_queue_start+0x6c>)
   25820:	9400      	str	r4, [sp, #0]
   25822:	4620      	mov	r0, r4
   25824:	f7ff fcd2 	bl	251cc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   25828:	b125      	cbz	r5, 25834 <k_work_queue_start+0x5c>
   2582a:	6829      	ldr	r1, [r5, #0]
   2582c:	b111      	cbz	r1, 25834 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2582e:	4620      	mov	r0, r4
   25830:	f7ff fc1a 	bl	25068 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25834:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   25836:	b009      	add	sp, #36	; 0x24
   25838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2583c:	f007 be76 	b.w	2d52c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25840:	2001      	movs	r0, #1
   25842:	e7df      	b.n	25804 <k_work_queue_start+0x2c>
   25844:	000255c5 	.word	0x000255c5

00025848 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25848:	b513      	push	{r0, r1, r4, lr}
   2584a:	9001      	str	r0, [sp, #4]
   2584c:	4608      	mov	r0, r1
	__asm__ volatile(
   2584e:	f04f 0120 	mov.w	r1, #32
   25852:	f3ef 8411 	mrs	r4, BASEPRI
   25856:	f381 8812 	msr	BASEPRI_MAX, r1
   2585a:	f3bf 8f6f 	isb	sy
	return *flagp;
   2585e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25860:	f011 0f0e 	tst.w	r1, #14
   25864:	d116      	bne.n	25894 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25866:	ea53 0c02 	orrs.w	ip, r3, r2
   2586a:	d108      	bne.n	2587e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   2586c:	a901      	add	r1, sp, #4
   2586e:	f7ff ff5d 	bl	2572c <submit_to_queue_locked>
	__asm__ volatile(
   25872:	f384 8811 	msr	BASEPRI, r4
   25876:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2587a:	b002      	add	sp, #8
   2587c:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   2587e:	f041 0108 	orr.w	r1, r1, #8
   25882:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   25884:	9901      	ldr	r1, [sp, #4]
   25886:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25888:	3010      	adds	r0, #16
   2588a:	4903      	ldr	r1, [pc, #12]	; (25898 <k_work_schedule_for_queue+0x50>)
   2588c:	f000 fc38 	bl	26100 <z_add_timeout>
	return ret;
   25890:	2001      	movs	r0, #1
   25892:	e7ee      	b.n	25872 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   25894:	2000      	movs	r0, #0
   25896:	e7ec      	b.n	25872 <k_work_schedule_for_queue+0x2a>
   25898:	0002d7dd 	.word	0x0002d7dd

0002589c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2589c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2589e:	4801      	ldr	r0, [pc, #4]	; (258a4 <k_work_schedule+0x8>)
   258a0:	f7ff bfd2 	b.w	25848 <k_work_schedule_for_queue>
   258a4:	20002538 	.word	0x20002538

000258a8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   258a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   258aa:	460c      	mov	r4, r1
   258ac:	9001      	str	r0, [sp, #4]
   258ae:	4616      	mov	r6, r2
   258b0:	461d      	mov	r5, r3
	__asm__ volatile(
   258b2:	f04f 0320 	mov.w	r3, #32
   258b6:	f3ef 8711 	mrs	r7, BASEPRI
   258ba:	f383 8812 	msr	BASEPRI_MAX, r3
   258be:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   258c2:	4608      	mov	r0, r1
   258c4:	f007 ff44 	bl	2d750 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   258c8:	ea55 0306 	orrs.w	r3, r5, r6
   258cc:	d109      	bne.n	258e2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   258ce:	a901      	add	r1, sp, #4
   258d0:	4620      	mov	r0, r4
   258d2:	f7ff ff2b 	bl	2572c <submit_to_queue_locked>
	__asm__ volatile(
   258d6:	f387 8811 	msr	BASEPRI, r7
   258da:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   258de:	b003      	add	sp, #12
   258e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   258e2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   258e4:	4906      	ldr	r1, [pc, #24]	; (25900 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   258e6:	f043 0308 	orr.w	r3, r3, #8
   258ea:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   258ec:	9b01      	ldr	r3, [sp, #4]
   258ee:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   258f0:	f104 0010 	add.w	r0, r4, #16
   258f4:	4632      	mov	r2, r6
   258f6:	462b      	mov	r3, r5
   258f8:	f000 fc02 	bl	26100 <z_add_timeout>
	return ret;
   258fc:	2001      	movs	r0, #1
   258fe:	e7ea      	b.n	258d6 <k_work_reschedule_for_queue+0x2e>
   25900:	0002d7dd 	.word	0x0002d7dd

00025904 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25904:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25906:	4801      	ldr	r0, [pc, #4]	; (2590c <k_work_reschedule+0x8>)
   25908:	f7ff bfce 	b.w	258a8 <k_work_reschedule_for_queue>
   2590c:	20002538 	.word	0x20002538

00025910 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   25910:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   25912:	4c08      	ldr	r4, [pc, #32]	; (25934 <z_reset_time_slice+0x24>)
   25914:	6823      	ldr	r3, [r4, #0]
   25916:	b15b      	cbz	r3, 25930 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   25918:	f7fd fba2 	bl	23060 <sys_clock_elapsed>
   2591c:	4603      	mov	r3, r0
   2591e:	6820      	ldr	r0, [r4, #0]
   25920:	4a05      	ldr	r2, [pc, #20]	; (25938 <z_reset_time_slice+0x28>)
   25922:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   25924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   25928:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2592a:	2100      	movs	r1, #0
   2592c:	f008 b92f 	b.w	2db8e <z_set_timeout_expiry>
}
   25930:	bd10      	pop	{r4, pc}
   25932:	bf00      	nop
   25934:	20004a34 	.word	0x20004a34
   25938:	200049f8 	.word	0x200049f8

0002593c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2593e:	4604      	mov	r4, r0
   25940:	460d      	mov	r5, r1
	__asm__ volatile(
   25942:	f04f 0320 	mov.w	r3, #32
   25946:	f3ef 8611 	mrs	r6, BASEPRI
   2594a:	f383 8812 	msr	BASEPRI_MAX, r3
   2594e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   25952:	4b0f      	ldr	r3, [pc, #60]	; (25990 <k_sched_time_slice_set+0x54>)
   25954:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   25956:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2595a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2595e:	6119      	str	r1, [r3, #16]
   25960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25964:	2300      	movs	r3, #0
   25966:	fbe4 0107 	umlal	r0, r1, r4, r7
   2596a:	f7db fc19 	bl	11a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2596e:	2c00      	cmp	r4, #0
   25970:	4b08      	ldr	r3, [pc, #32]	; (25994 <k_sched_time_slice_set+0x58>)
   25972:	dc09      	bgt.n	25988 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   25974:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   25976:	4b08      	ldr	r3, [pc, #32]	; (25998 <k_sched_time_slice_set+0x5c>)
   25978:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2597a:	f7ff ffc9 	bl	25910 <z_reset_time_slice>
	__asm__ volatile(
   2597e:	f386 8811 	msr	BASEPRI, r6
   25982:	f3bf 8f6f 	isb	sy
	}
}
   25986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   25988:	2802      	cmp	r0, #2
   2598a:	bfb8      	it	lt
   2598c:	2002      	movlt	r0, #2
   2598e:	e7f1      	b.n	25974 <k_sched_time_slice_set+0x38>
   25990:	200049f8 	.word	0x200049f8
   25994:	20004a34 	.word	0x20004a34
   25998:	20004a30 	.word	0x20004a30

0002599c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2599c:	b949      	cbnz	r1, 259b2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2599e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   259a2:	b930      	cbnz	r0, 259b2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   259a4:	4b05      	ldr	r3, [pc, #20]	; (259bc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   259a6:	69da      	ldr	r2, [r3, #28]
   259a8:	689b      	ldr	r3, [r3, #8]
   259aa:	429a      	cmp	r2, r3
   259ac:	d001      	beq.n	259b2 <z_reschedule+0x16>
	ret = arch_swap(key);
   259ae:	f7e5 bda5 	b.w	b4fc <arch_swap>
   259b2:	f381 8811 	msr	BASEPRI, r1
   259b6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   259ba:	4770      	bx	lr
   259bc:	200049f8 	.word	0x200049f8

000259c0 <k_sched_lock>:
	__asm__ volatile(
   259c0:	f04f 0320 	mov.w	r3, #32
   259c4:	f3ef 8111 	mrs	r1, BASEPRI
   259c8:	f383 8812 	msr	BASEPRI_MAX, r3
   259cc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   259d0:	4b04      	ldr	r3, [pc, #16]	; (259e4 <k_sched_lock+0x24>)
   259d2:	689a      	ldr	r2, [r3, #8]
   259d4:	7bd3      	ldrb	r3, [r2, #15]
   259d6:	3b01      	subs	r3, #1
   259d8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   259da:	f381 8811 	msr	BASEPRI, r1
   259de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   259e2:	4770      	bx	lr
   259e4:	200049f8 	.word	0x200049f8

000259e8 <update_cache>:
{
   259e8:	b538      	push	{r3, r4, r5, lr}
   259ea:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   259ec:	480c      	ldr	r0, [pc, #48]	; (25a20 <update_cache+0x38>)
   259ee:	4d0d      	ldr	r5, [pc, #52]	; (25a24 <update_cache+0x3c>)
   259f0:	f007 ffda 	bl	2d9a8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   259f4:	4604      	mov	r4, r0
   259f6:	b900      	cbnz	r0, 259fa <update_cache+0x12>
   259f8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   259fa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   259fc:	b94a      	cbnz	r2, 25a12 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   259fe:	7b5a      	ldrb	r2, [r3, #13]
   25a00:	06d2      	lsls	r2, r2, #27
   25a02:	d106      	bne.n	25a12 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   25a04:	69a2      	ldr	r2, [r4, #24]
   25a06:	b922      	cbnz	r2, 25a12 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   25a08:	89da      	ldrh	r2, [r3, #14]
   25a0a:	2a7f      	cmp	r2, #127	; 0x7f
   25a0c:	d901      	bls.n	25a12 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   25a0e:	61eb      	str	r3, [r5, #28]
}
   25a10:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   25a12:	429c      	cmp	r4, r3
   25a14:	d001      	beq.n	25a1a <update_cache+0x32>
			z_reset_time_slice();
   25a16:	f7ff ff7b 	bl	25910 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   25a1a:	61ec      	str	r4, [r5, #28]
}
   25a1c:	e7f8      	b.n	25a10 <update_cache+0x28>
   25a1e:	bf00      	nop
   25a20:	20004a18 	.word	0x20004a18
   25a24:	200049f8 	.word	0x200049f8

00025a28 <move_thread_to_end_of_prio_q>:
{
   25a28:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   25a2a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   25a2e:	7b43      	ldrb	r3, [r0, #13]
   25a30:	2a00      	cmp	r2, #0
{
   25a32:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   25a34:	da04      	bge.n	25a40 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25a3a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   25a3c:	f007 ff5f 	bl	2d8fe <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   25a40:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   25a42:	4a15      	ldr	r2, [pc, #84]	; (25a98 <move_thread_to_end_of_prio_q+0x70>)
   25a44:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25a48:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   25a4a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25a4e:	f102 0520 	add.w	r5, r2, #32
   25a52:	42ab      	cmp	r3, r5
   25a54:	d01b      	beq.n	25a8e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25a56:	b1d3      	cbz	r3, 25a8e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   25a58:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   25a5c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   25a60:	4286      	cmp	r6, r0
   25a62:	d00f      	beq.n	25a84 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   25a64:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   25a66:	2800      	cmp	r0, #0
   25a68:	dd0c      	ble.n	25a84 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   25a6a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   25a6c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   25a70:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   25a72:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   25a74:	6890      	ldr	r0, [r2, #8]
   25a76:	1a43      	subs	r3, r0, r1
   25a78:	4258      	negs	r0, r3
}
   25a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   25a7e:	4158      	adcs	r0, r3
   25a80:	f7ff bfb2 	b.w	259e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25a84:	42a3      	cmp	r3, r4
   25a86:	d002      	beq.n	25a8e <move_thread_to_end_of_prio_q+0x66>
   25a88:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25a8a:	2b00      	cmp	r3, #0
   25a8c:	d1e6      	bne.n	25a5c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   25a8e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   25a92:	6021      	str	r1, [r4, #0]
	list->tail = node;
   25a94:	6251      	str	r1, [r2, #36]	; 0x24
}
   25a96:	e7ed      	b.n	25a74 <move_thread_to_end_of_prio_q+0x4c>
   25a98:	200049f8 	.word	0x200049f8

00025a9c <z_time_slice>:
{
   25a9c:	b538      	push	{r3, r4, r5, lr}
   25a9e:	4601      	mov	r1, r0
	__asm__ volatile(
   25aa0:	f04f 0320 	mov.w	r3, #32
   25aa4:	f3ef 8411 	mrs	r4, BASEPRI
   25aa8:	f383 8812 	msr	BASEPRI_MAX, r3
   25aac:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   25ab0:	4b15      	ldr	r3, [pc, #84]	; (25b08 <z_time_slice+0x6c>)
   25ab2:	4a16      	ldr	r2, [pc, #88]	; (25b0c <z_time_slice+0x70>)
   25ab4:	6898      	ldr	r0, [r3, #8]
   25ab6:	6815      	ldr	r5, [r2, #0]
   25ab8:	42a8      	cmp	r0, r5
   25aba:	d106      	bne.n	25aca <z_time_slice+0x2e>
			z_reset_time_slice();
   25abc:	f7ff ff28 	bl	25910 <z_reset_time_slice>
	__asm__ volatile(
   25ac0:	f384 8811 	msr	BASEPRI, r4
   25ac4:	f3bf 8f6f 	isb	sy
}
   25ac8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   25aca:	2500      	movs	r5, #0
   25acc:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   25ace:	4a10      	ldr	r2, [pc, #64]	; (25b10 <z_time_slice+0x74>)
   25ad0:	6812      	ldr	r2, [r2, #0]
   25ad2:	b1ba      	cbz	r2, 25b04 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   25ad4:	89c2      	ldrh	r2, [r0, #14]
   25ad6:	2a7f      	cmp	r2, #127	; 0x7f
   25ad8:	d814      	bhi.n	25b04 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   25ada:	7b42      	ldrb	r2, [r0, #13]
   25adc:	06d2      	lsls	r2, r2, #27
   25ade:	d111      	bne.n	25b04 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   25ae0:	4a0c      	ldr	r2, [pc, #48]	; (25b14 <z_time_slice+0x78>)
   25ae2:	f990 500e 	ldrsb.w	r5, [r0, #14]
   25ae6:	6812      	ldr	r2, [r2, #0]
   25ae8:	4295      	cmp	r5, r2
   25aea:	db0b      	blt.n	25b04 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   25aec:	4a0a      	ldr	r2, [pc, #40]	; (25b18 <z_time_slice+0x7c>)
   25aee:	4290      	cmp	r0, r2
   25af0:	d008      	beq.n	25b04 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   25af2:	691a      	ldr	r2, [r3, #16]
   25af4:	428a      	cmp	r2, r1
   25af6:	dc02      	bgt.n	25afe <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   25af8:	f7ff ff96 	bl	25a28 <move_thread_to_end_of_prio_q>
   25afc:	e7de      	b.n	25abc <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   25afe:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   25b00:	611a      	str	r2, [r3, #16]
   25b02:	e7dd      	b.n	25ac0 <z_time_slice+0x24>
   25b04:	2200      	movs	r2, #0
   25b06:	e7fb      	b.n	25b00 <z_time_slice+0x64>
   25b08:	200049f8 	.word	0x200049f8
   25b0c:	20004a2c 	.word	0x20004a2c
   25b10:	20004a34 	.word	0x20004a34
   25b14:	20004a30 	.word	0x20004a30
   25b18:	200023c8 	.word	0x200023c8

00025b1c <ready_thread>:
{
   25b1c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25b1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   25b22:	7b43      	ldrb	r3, [r0, #13]
   25b24:	2a00      	cmp	r2, #0
   25b26:	db2a      	blt.n	25b7e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25b28:	06da      	lsls	r2, r3, #27
   25b2a:	d128      	bne.n	25b7e <ready_thread+0x62>
   25b2c:	6982      	ldr	r2, [r0, #24]
   25b2e:	bb32      	cbnz	r2, 25b7e <ready_thread+0x62>
	return list->head == list;
   25b30:	4a14      	ldr	r2, [pc, #80]	; (25b84 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   25b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25b36:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   25b38:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25b3c:	f102 0520 	add.w	r5, r2, #32
   25b40:	42ab      	cmp	r3, r5
   25b42:	d017      	beq.n	25b74 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25b44:	b1b3      	cbz	r3, 25b74 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   25b46:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25b4a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   25b4e:	428e      	cmp	r6, r1
   25b50:	d00b      	beq.n	25b6a <ready_thread+0x4e>
		return b2 - b1;
   25b52:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   25b54:	2900      	cmp	r1, #0
   25b56:	dd08      	ble.n	25b6a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   25b58:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25b5a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   25b5e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   25b60:	6058      	str	r0, [r3, #4]
}
   25b62:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   25b64:	2000      	movs	r0, #0
   25b66:	f7ff bf3f 	b.w	259e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25b6a:	42a3      	cmp	r3, r4
   25b6c:	d002      	beq.n	25b74 <ready_thread+0x58>
   25b6e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25b70:	2b00      	cmp	r3, #0
   25b72:	d1ea      	bne.n	25b4a <ready_thread+0x2e>
	node->prev = tail;
   25b74:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   25b78:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25b7a:	6250      	str	r0, [r2, #36]	; 0x24
}
   25b7c:	e7f1      	b.n	25b62 <ready_thread+0x46>
}
   25b7e:	bc70      	pop	{r4, r5, r6}
   25b80:	4770      	bx	lr
   25b82:	bf00      	nop
   25b84:	200049f8 	.word	0x200049f8

00025b88 <z_sched_start>:
{
   25b88:	b510      	push	{r4, lr}
	__asm__ volatile(
   25b8a:	f04f 0220 	mov.w	r2, #32
   25b8e:	f3ef 8411 	mrs	r4, BASEPRI
   25b92:	f382 8812 	msr	BASEPRI_MAX, r2
   25b96:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25b9a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   25b9c:	0751      	lsls	r1, r2, #29
   25b9e:	d404      	bmi.n	25baa <z_sched_start+0x22>
	__asm__ volatile(
   25ba0:	f384 8811 	msr	BASEPRI, r4
   25ba4:	f3bf 8f6f 	isb	sy
}
   25ba8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25baa:	f022 0204 	bic.w	r2, r2, #4
   25bae:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   25bb0:	f7ff ffb4 	bl	25b1c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25bb4:	4621      	mov	r1, r4
   25bb6:	4802      	ldr	r0, [pc, #8]	; (25bc0 <z_sched_start+0x38>)
}
   25bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   25bbc:	f7ff beee 	b.w	2599c <z_reschedule>
   25bc0:	20004c39 	.word	0x20004c39

00025bc4 <unready_thread>:
{
   25bc4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   25bc6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   25bca:	7b43      	ldrb	r3, [r0, #13]
   25bcc:	2a00      	cmp	r2, #0
{
   25bce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   25bd0:	da04      	bge.n	25bdc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25bd6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25bd8:	f007 fe91 	bl	2d8fe <sys_dlist_remove>
	update_cache(thread == _current);
   25bdc:	4b04      	ldr	r3, [pc, #16]	; (25bf0 <unready_thread+0x2c>)
   25bde:	6898      	ldr	r0, [r3, #8]
   25be0:	1a43      	subs	r3, r0, r1
   25be2:	4258      	negs	r0, r3
   25be4:	4158      	adcs	r0, r3
}
   25be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   25bea:	f7ff befd 	b.w	259e8 <update_cache>
   25bee:	bf00      	nop
   25bf0:	200049f8 	.word	0x200049f8

00025bf4 <pend>:
{
   25bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25bf8:	4606      	mov	r6, r0
   25bfa:	4615      	mov	r5, r2
   25bfc:	461c      	mov	r4, r3
	__asm__ volatile(
   25bfe:	f04f 0320 	mov.w	r3, #32
   25c02:	f3ef 8711 	mrs	r7, BASEPRI
   25c06:	f383 8812 	msr	BASEPRI_MAX, r3
   25c0a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   25c0e:	f007 ff03 	bl	2da18 <add_to_waitq_locked>
	__asm__ volatile(
   25c12:	f387 8811 	msr	BASEPRI, r7
   25c16:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25c1a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   25c1e:	bf08      	it	eq
   25c20:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   25c24:	d008      	beq.n	25c38 <pend+0x44>
   25c26:	462a      	mov	r2, r5
   25c28:	4623      	mov	r3, r4
   25c2a:	f106 0018 	add.w	r0, r6, #24
   25c2e:	4903      	ldr	r1, [pc, #12]	; (25c3c <pend+0x48>)
}
   25c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25c34:	f000 ba64 	b.w	26100 <z_add_timeout>
   25c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25c3c:	0002d9d5 	.word	0x0002d9d5

00025c40 <z_pend_curr>:
{
   25c40:	b510      	push	{r4, lr}
	pending_current = _current;
   25c42:	4b07      	ldr	r3, [pc, #28]	; (25c60 <z_pend_curr+0x20>)
   25c44:	6898      	ldr	r0, [r3, #8]
   25c46:	4b07      	ldr	r3, [pc, #28]	; (25c64 <z_pend_curr+0x24>)
{
   25c48:	460c      	mov	r4, r1
	pending_current = _current;
   25c4a:	6018      	str	r0, [r3, #0]
{
   25c4c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   25c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25c52:	f7ff ffcf 	bl	25bf4 <pend>
   25c56:	4620      	mov	r0, r4
}
   25c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25c5c:	f7e5 bc4e 	b.w	b4fc <arch_swap>
   25c60:	200049f8 	.word	0x200049f8
   25c64:	20004a2c 	.word	0x20004a2c

00025c68 <z_set_prio>:
{
   25c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c6a:	4604      	mov	r4, r0
	__asm__ volatile(
   25c6c:	f04f 0320 	mov.w	r3, #32
   25c70:	f3ef 8611 	mrs	r6, BASEPRI
   25c74:	f383 8812 	msr	BASEPRI_MAX, r3
   25c78:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   25c7c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25c7e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   25c80:	b249      	sxtb	r1, r1
   25c82:	d133      	bne.n	25cec <z_set_prio+0x84>
		if (need_sched) {
   25c84:	6982      	ldr	r2, [r0, #24]
   25c86:	bb8a      	cbnz	r2, 25cec <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25c8c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25c8e:	f007 fe36 	bl	2d8fe <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   25c92:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   25c94:	4a17      	ldr	r2, [pc, #92]	; (25cf4 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   25c96:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   25c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25c9c:	7343      	strb	r3, [r0, #13]
   25c9e:	4610      	mov	r0, r2
   25ca0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ca4:	4283      	cmp	r3, r0
   25ca6:	d01b      	beq.n	25ce0 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25ca8:	b1d3      	cbz	r3, 25ce0 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   25caa:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   25cac:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   25cb0:	42a9      	cmp	r1, r5
   25cb2:	d010      	beq.n	25cd6 <z_set_prio+0x6e>
		return b2 - b1;
   25cb4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   25cb6:	2d00      	cmp	r5, #0
   25cb8:	dd0d      	ble.n	25cd6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   25cba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25cbc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25cc0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25cc2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   25cc4:	2001      	movs	r0, #1
   25cc6:	f7ff fe8f 	bl	259e8 <update_cache>
   25cca:	2001      	movs	r0, #1
	__asm__ volatile(
   25ccc:	f386 8811 	msr	BASEPRI, r6
   25cd0:	f3bf 8f6f 	isb	sy
}
   25cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   25cd6:	42bb      	cmp	r3, r7
   25cd8:	d002      	beq.n	25ce0 <z_set_prio+0x78>
   25cda:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25cdc:	2b00      	cmp	r3, #0
   25cde:	d1e5      	bne.n	25cac <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   25ce0:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   25ce2:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   25ce6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25ce8:	6254      	str	r4, [r2, #36]	; 0x24
}
   25cea:	e7eb      	b.n	25cc4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   25cec:	73a1      	strb	r1, [r4, #14]
   25cee:	2000      	movs	r0, #0
   25cf0:	e7ec      	b.n	25ccc <z_set_prio+0x64>
   25cf2:	bf00      	nop
   25cf4:	200049f8 	.word	0x200049f8

00025cf8 <z_impl_k_thread_suspend>:
{
   25cf8:	b570      	push	{r4, r5, r6, lr}
   25cfa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25cfc:	3018      	adds	r0, #24
   25cfe:	f007 ff10 	bl	2db22 <z_abort_timeout>
	__asm__ volatile(
   25d02:	f04f 0320 	mov.w	r3, #32
   25d06:	f3ef 8611 	mrs	r6, BASEPRI
   25d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   25d0e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   25d12:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   25d16:	7b63      	ldrb	r3, [r4, #13]
   25d18:	2a00      	cmp	r2, #0
   25d1a:	da05      	bge.n	25d28 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25d20:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25d22:	4620      	mov	r0, r4
   25d24:	f007 fdeb 	bl	2d8fe <sys_dlist_remove>
		update_cache(thread == _current);
   25d28:	4d0b      	ldr	r5, [pc, #44]	; (25d58 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25d2a:	7b63      	ldrb	r3, [r4, #13]
   25d2c:	68a8      	ldr	r0, [r5, #8]
   25d2e:	f043 0310 	orr.w	r3, r3, #16
   25d32:	7363      	strb	r3, [r4, #13]
   25d34:	1b03      	subs	r3, r0, r4
   25d36:	4258      	negs	r0, r3
   25d38:	4158      	adcs	r0, r3
   25d3a:	f7ff fe55 	bl	259e8 <update_cache>
	__asm__ volatile(
   25d3e:	f386 8811 	msr	BASEPRI, r6
   25d42:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   25d46:	68ab      	ldr	r3, [r5, #8]
   25d48:	42a3      	cmp	r3, r4
   25d4a:	d103      	bne.n	25d54 <z_impl_k_thread_suspend+0x5c>
}
   25d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   25d50:	f007 be20 	b.w	2d994 <z_reschedule_unlocked>
}
   25d54:	bd70      	pop	{r4, r5, r6, pc}
   25d56:	bf00      	nop
   25d58:	200049f8 	.word	0x200049f8

00025d5c <k_sched_unlock>:
{
   25d5c:	b510      	push	{r4, lr}
	__asm__ volatile(
   25d5e:	f04f 0320 	mov.w	r3, #32
   25d62:	f3ef 8411 	mrs	r4, BASEPRI
   25d66:	f383 8812 	msr	BASEPRI_MAX, r3
   25d6a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   25d6e:	4b08      	ldr	r3, [pc, #32]	; (25d90 <k_sched_unlock+0x34>)
   25d70:	689a      	ldr	r2, [r3, #8]
   25d72:	7bd3      	ldrb	r3, [r2, #15]
   25d74:	3301      	adds	r3, #1
   25d76:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25d78:	2000      	movs	r0, #0
   25d7a:	f7ff fe35 	bl	259e8 <update_cache>
	__asm__ volatile(
   25d7e:	f384 8811 	msr	BASEPRI, r4
   25d82:	f3bf 8f6f 	isb	sy
}
   25d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25d8a:	f007 be03 	b.w	2d994 <z_reschedule_unlocked>
   25d8e:	bf00      	nop
   25d90:	200049f8 	.word	0x200049f8

00025d94 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   25d94:	4b04      	ldr	r3, [pc, #16]	; (25da8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   25d96:	2100      	movs	r1, #0
   25d98:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   25d9c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   25da0:	4608      	mov	r0, r1
   25da2:	f7ff bdcb 	b.w	2593c <k_sched_time_slice_set>
   25da6:	bf00      	nop
   25da8:	200049f8 	.word	0x200049f8

00025dac <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   25dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   25dae:	f04f 0320 	mov.w	r3, #32
   25db2:	f3ef 8511 	mrs	r5, BASEPRI
   25db6:	f383 8812 	msr	BASEPRI_MAX, r3
   25dba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   25dbe:	491a      	ldr	r1, [pc, #104]	; (25e28 <z_impl_k_yield+0x7c>)
   25dc0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25dc2:	7b43      	ldrb	r3, [r0, #13]
   25dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25dc8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25dca:	f007 fd98 	bl	2d8fe <sys_dlist_remove>
	}
	queue_thread(_current);
   25dce:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   25dd0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   25dd2:	4608      	mov	r0, r1
   25dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25dd8:	735a      	strb	r2, [r3, #13]
   25dda:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25dde:	4282      	cmp	r2, r0
   25de0:	d01c      	beq.n	25e1c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25de2:	b1da      	cbz	r2, 25e1c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   25de4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   25de6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   25dea:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   25dee:	42a6      	cmp	r6, r4
   25df0:	d00f      	beq.n	25e12 <z_impl_k_yield+0x66>
		return b2 - b1;
   25df2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   25df4:	2c00      	cmp	r4, #0
   25df6:	dd0c      	ble.n	25e12 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   25df8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   25dfa:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   25dfe:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   25e00:	6053      	str	r3, [r2, #4]
	update_cache(1);
   25e02:	2001      	movs	r0, #1
   25e04:	f7ff fdf0 	bl	259e8 <update_cache>
   25e08:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   25e0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25e0e:	f7e5 bb75 	b.w	b4fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   25e12:	42ba      	cmp	r2, r7
   25e14:	d002      	beq.n	25e1c <z_impl_k_yield+0x70>
   25e16:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25e18:	2a00      	cmp	r2, #0
   25e1a:	d1e6      	bne.n	25dea <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   25e1c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   25e1e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   25e22:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25e24:	624b      	str	r3, [r1, #36]	; 0x24
}
   25e26:	e7ec      	b.n	25e02 <z_impl_k_yield+0x56>
   25e28:	200049f8 	.word	0x200049f8

00025e2c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   25e2c:	ea50 0301 	orrs.w	r3, r0, r1
{
   25e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e34:	4605      	mov	r5, r0
   25e36:	460e      	mov	r6, r1
	if (ticks == 0) {
   25e38:	d103      	bne.n	25e42 <z_tick_sleep+0x16>
	z_impl_k_yield();
   25e3a:	f7ff ffb7 	bl	25dac <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   25e3e:	2000      	movs	r0, #0
   25e40:	e033      	b.n	25eaa <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   25e42:	f06f 0401 	mvn.w	r4, #1
   25e46:	1a24      	subs	r4, r4, r0
   25e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25e4c:	eb63 0301 	sbc.w	r3, r3, r1
   25e50:	2c01      	cmp	r4, #1
   25e52:	f173 0300 	sbcs.w	r3, r3, #0
   25e56:	da02      	bge.n	25e5e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   25e58:	f007 feb3 	bl	2dbc2 <sys_clock_tick_get_32>
   25e5c:	1944      	adds	r4, r0, r5
   25e5e:	f04f 0320 	mov.w	r3, #32
   25e62:	f3ef 8811 	mrs	r8, BASEPRI
   25e66:	f383 8812 	msr	BASEPRI_MAX, r3
   25e6a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   25e6e:	4f10      	ldr	r7, [pc, #64]	; (25eb0 <z_tick_sleep+0x84>)
   25e70:	4b10      	ldr	r3, [pc, #64]	; (25eb4 <z_tick_sleep+0x88>)
   25e72:	68b8      	ldr	r0, [r7, #8]
   25e74:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   25e76:	f7ff fea5 	bl	25bc4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25e7a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25e7c:	490e      	ldr	r1, [pc, #56]	; (25eb8 <z_tick_sleep+0x8c>)
   25e7e:	462a      	mov	r2, r5
   25e80:	4633      	mov	r3, r6
   25e82:	3018      	adds	r0, #24
   25e84:	f000 f93c 	bl	26100 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25e88:	68ba      	ldr	r2, [r7, #8]
   25e8a:	7b53      	ldrb	r3, [r2, #13]
   25e8c:	f043 0310 	orr.w	r3, r3, #16
   25e90:	7353      	strb	r3, [r2, #13]
   25e92:	4640      	mov	r0, r8
   25e94:	f7e5 fb32 	bl	b4fc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25e98:	f007 fe93 	bl	2dbc2 <sys_clock_tick_get_32>
   25e9c:	1a20      	subs	r0, r4, r0
   25e9e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   25ea2:	2801      	cmp	r0, #1
   25ea4:	f173 0300 	sbcs.w	r3, r3, #0
   25ea8:	dbc9      	blt.n	25e3e <z_tick_sleep+0x12>
}
   25eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25eae:	bf00      	nop
   25eb0:	200049f8 	.word	0x200049f8
   25eb4:	20004a2c 	.word	0x20004a2c
   25eb8:	0002d9d5 	.word	0x0002d9d5

00025ebc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25ebc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   25ec0:	bf08      	it	eq
   25ec2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   25ec6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25ec8:	d106      	bne.n	25ed8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   25eca:	4b08      	ldr	r3, [pc, #32]	; (25eec <z_impl_k_sleep+0x30>)
   25ecc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25ece:	f7ff ff13 	bl	25cf8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   25ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   25ed6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   25ed8:	f7ff ffa8 	bl	25e2c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   25edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25ee0:	fb80 0303 	smull	r0, r3, r0, r3
   25ee4:	0bc0      	lsrs	r0, r0, #15
   25ee6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   25eea:	e7f4      	b.n	25ed6 <z_impl_k_sleep+0x1a>
   25eec:	200049f8 	.word	0x200049f8

00025ef0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   25ef0:	4b01      	ldr	r3, [pc, #4]	; (25ef8 <z_impl_z_current_get+0x8>)
   25ef2:	6898      	ldr	r0, [r3, #8]
   25ef4:	4770      	bx	lr
   25ef6:	bf00      	nop
   25ef8:	200049f8 	.word	0x200049f8

00025efc <z_impl_k_is_preempt_thread>:
   25efc:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   25f00:	b93b      	cbnz	r3, 25f12 <z_impl_k_is_preempt_thread+0x16>
   25f02:	4b05      	ldr	r3, [pc, #20]	; (25f18 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   25f04:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   25f06:	89d8      	ldrh	r0, [r3, #14]
   25f08:	287f      	cmp	r0, #127	; 0x7f
   25f0a:	bf8c      	ite	hi
   25f0c:	2000      	movhi	r0, #0
   25f0e:	2001      	movls	r0, #1
   25f10:	4770      	bx	lr
   25f12:	2000      	movs	r0, #0
}
   25f14:	4770      	bx	lr
   25f16:	bf00      	nop
   25f18:	200049f8 	.word	0x200049f8

00025f1c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   25f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f20:	4604      	mov	r4, r0
   25f22:	f04f 0320 	mov.w	r3, #32
   25f26:	f3ef 8611 	mrs	r6, BASEPRI
   25f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   25f2e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   25f32:	7b43      	ldrb	r3, [r0, #13]
   25f34:	071a      	lsls	r2, r3, #28
   25f36:	d505      	bpl.n	25f44 <z_thread_abort+0x28>
	__asm__ volatile(
   25f38:	f386 8811 	msr	BASEPRI, r6
   25f3c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   25f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25f44:	f023 0220 	bic.w	r2, r3, #32
   25f48:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   25f4c:	09d2      	lsrs	r2, r2, #7
   25f4e:	d123      	bne.n	25f98 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25f50:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   25f52:	68a3      	ldr	r3, [r4, #8]
   25f54:	b113      	cbz	r3, 25f5c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   25f56:	4620      	mov	r0, r4
   25f58:	f007 fcd9 	bl	2d90e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   25f5c:	f104 0018 	add.w	r0, r4, #24
   25f60:	f007 fddf 	bl	2db22 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   25f64:	f104 0758 	add.w	r7, r4, #88	; 0x58
   25f68:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   25f6c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f6e:	42bd      	cmp	r5, r7
   25f70:	d000      	beq.n	25f74 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25f72:	b9cd      	cbnz	r5, 25fa8 <z_thread_abort+0x8c>
		update_cache(1);
   25f74:	2001      	movs	r0, #1
   25f76:	f7ff fd37 	bl	259e8 <update_cache>
		z_thread_monitor_exit(thread);
   25f7a:	4620      	mov	r0, r4
   25f7c:	f7ff f856 	bl	2502c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   25f80:	4b10      	ldr	r3, [pc, #64]	; (25fc4 <z_thread_abort+0xa8>)
   25f82:	689b      	ldr	r3, [r3, #8]
   25f84:	42a3      	cmp	r3, r4
   25f86:	d1d7      	bne.n	25f38 <z_thread_abort+0x1c>
   25f88:	f3ef 8305 	mrs	r3, IPSR
   25f8c:	2b00      	cmp	r3, #0
   25f8e:	d1d3      	bne.n	25f38 <z_thread_abort+0x1c>
   25f90:	4630      	mov	r0, r6
   25f92:	f7e5 fab3 	bl	b4fc <arch_swap>
	return ret;
   25f96:	e7cf      	b.n	25f38 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25f98:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25f9c:	f043 0308 	orr.w	r3, r3, #8
   25fa0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25fa2:	f007 fcac 	bl	2d8fe <sys_dlist_remove>
}
   25fa6:	e7d4      	b.n	25f52 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   25fa8:	4628      	mov	r0, r5
   25faa:	f007 fcb0 	bl	2d90e <unpend_thread_no_timeout>
   25fae:	f105 0018 	add.w	r0, r5, #24
   25fb2:	f007 fdb6 	bl	2db22 <z_abort_timeout>
   25fb6:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
   25fba:	4628      	mov	r0, r5
   25fbc:	f7ff fdae 	bl	25b1c <ready_thread>
   25fc0:	e7d4      	b.n	25f6c <z_thread_abort+0x50>
   25fc2:	bf00      	nop
   25fc4:	200049f8 	.word	0x200049f8

00025fc8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   25fc8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25fca:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   25fce:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25fd0:	e9cd 6700 	strd	r6, r7, [sp]
   25fd4:	f7ff fe34 	bl	25c40 <z_pend_curr>

	if (data != NULL) {
   25fd8:	b11c      	cbz	r4, 25fe2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   25fda:	4b03      	ldr	r3, [pc, #12]	; (25fe8 <z_sched_wait+0x20>)
   25fdc:	689b      	ldr	r3, [r3, #8]
   25fde:	695b      	ldr	r3, [r3, #20]
   25fe0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   25fe2:	b002      	add	sp, #8
   25fe4:	bdd0      	pop	{r4, r6, r7, pc}
   25fe6:	bf00      	nop
   25fe8:	200049f8 	.word	0x200049f8

00025fec <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   25fec:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   25fee:	4806      	ldr	r0, [pc, #24]	; (26008 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   25ff0:	4a06      	ldr	r2, [pc, #24]	; (2600c <z_data_copy+0x20>)
   25ff2:	4907      	ldr	r1, [pc, #28]	; (26010 <z_data_copy+0x24>)
   25ff4:	1a12      	subs	r2, r2, r0
   25ff6:	f004 f9b1 	bl	2a35c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   25ffe:	4a05      	ldr	r2, [pc, #20]	; (26014 <z_data_copy+0x28>)
   26000:	4905      	ldr	r1, [pc, #20]	; (26018 <z_data_copy+0x2c>)
   26002:	4806      	ldr	r0, [pc, #24]	; (2601c <z_data_copy+0x30>)
   26004:	f004 b9aa 	b.w	2a35c <memcpy>
   26008:	20000000 	.word	0x20000000
   2600c:	20000ecc 	.word	0x20000ecc
   26010:	00034a5c 	.word	0x00034a5c
   26014:	00000000 	.word	0x00000000
   26018:	00034a5c 	.word	0x00034a5c
   2601c:	20000000 	.word	0x20000000

00026020 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26020:	4b03      	ldr	r3, [pc, #12]	; (26030 <elapsed+0x10>)
   26022:	681b      	ldr	r3, [r3, #0]
   26024:	b90b      	cbnz	r3, 2602a <elapsed+0xa>
   26026:	f7fd b81b 	b.w	23060 <sys_clock_elapsed>
}
   2602a:	2000      	movs	r0, #0
   2602c:	4770      	bx	lr
   2602e:	bf00      	nop
   26030:	20004a38 	.word	0x20004a38

00026034 <next_timeout>:
	return list->head == list;
   26034:	4b10      	ldr	r3, [pc, #64]	; (26078 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   26036:	b510      	push	{r4, lr}
   26038:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2603a:	429c      	cmp	r4, r3
   2603c:	bf08      	it	eq
   2603e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   26040:	f7ff ffee 	bl	26020 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   26044:	b1a4      	cbz	r4, 26070 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   26046:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2604a:	1a1b      	subs	r3, r3, r0
   2604c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   26050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   26054:	f170 0200 	sbcs.w	r2, r0, #0
   26058:	da0a      	bge.n	26070 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   2605a:	2800      	cmp	r0, #0
   2605c:	bfac      	ite	ge
   2605e:	4618      	movge	r0, r3
   26060:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   26062:	4b06      	ldr	r3, [pc, #24]	; (2607c <next_timeout+0x48>)
   26064:	691b      	ldr	r3, [r3, #16]
   26066:	b113      	cbz	r3, 2606e <next_timeout+0x3a>
   26068:	4298      	cmp	r0, r3
   2606a:	bfa8      	it	ge
   2606c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2606e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   26070:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   26074:	e7f5      	b.n	26062 <next_timeout+0x2e>
   26076:	bf00      	nop
   26078:	20000894 	.word	0x20000894
   2607c:	200049f8 	.word	0x200049f8

00026080 <remove_timeout>:
{
   26080:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   26082:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26084:	b168      	cbz	r0, 260a2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   26086:	4a0a      	ldr	r2, [pc, #40]	; (260b0 <remove_timeout+0x30>)
   26088:	6852      	ldr	r2, [r2, #4]
   2608a:	4290      	cmp	r0, r2
   2608c:	d009      	beq.n	260a2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   2608e:	b143      	cbz	r3, 260a2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   26090:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   26094:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   26098:	1912      	adds	r2, r2, r4
   2609a:	eb41 0105 	adc.w	r1, r1, r5
   2609e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   260a2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   260a4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   260a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   260a8:	2300      	movs	r3, #0
	node->prev = NULL;
   260aa:	e9c0 3300 	strd	r3, r3, [r0]
}
   260ae:	bd30      	pop	{r4, r5, pc}
   260b0:	20000894 	.word	0x20000894

000260b4 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   260b4:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   260b6:	6804      	ldr	r4, [r0, #0]
   260b8:	b1e4      	cbz	r4, 260f4 <timeout_rem+0x40>
	return list->head == list;
   260ba:	4a10      	ldr	r2, [pc, #64]	; (260fc <timeout_rem+0x48>)
   260bc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   260be:	4293      	cmp	r3, r2
   260c0:	d015      	beq.n	260ee <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   260c2:	2400      	movs	r4, #0
   260c4:	6851      	ldr	r1, [r2, #4]
   260c6:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   260c8:	b933      	cbnz	r3, 260d8 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   260ca:	f7ff ffa9 	bl	26020 <elapsed>
   260ce:	4601      	mov	r1, r0
   260d0:	1a20      	subs	r0, r4, r0
   260d2:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   260d6:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   260d8:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   260dc:	18a4      	adds	r4, r4, r2
   260de:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   260e2:	4283      	cmp	r3, r0
   260e4:	d0f1      	beq.n	260ca <timeout_rem+0x16>
   260e6:	428b      	cmp	r3, r1
   260e8:	d0ef      	beq.n	260ca <timeout_rem+0x16>
   260ea:	681b      	ldr	r3, [r3, #0]
   260ec:	e7ec      	b.n	260c8 <timeout_rem+0x14>
   260ee:	2400      	movs	r4, #0
   260f0:	4625      	mov	r5, r4
   260f2:	e7ea      	b.n	260ca <timeout_rem+0x16>
		return 0;
   260f4:	4620      	mov	r0, r4
   260f6:	4621      	mov	r1, r4
   260f8:	e7ed      	b.n	260d6 <timeout_rem+0x22>
   260fa:	bf00      	nop
   260fc:	20000894 	.word	0x20000894

00026100 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26104:	bf08      	it	eq
   26106:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2610a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2610c:	4604      	mov	r4, r0
   2610e:	461f      	mov	r7, r3
   26110:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26112:	d067      	beq.n	261e4 <z_add_timeout+0xe4>
	to->fn = fn;
   26114:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   26116:	f04f 0320 	mov.w	r3, #32
   2611a:	f3ef 8611 	mrs	r6, BASEPRI
   2611e:	f383 8812 	msr	BASEPRI_MAX, r3
   26122:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   26126:	f06f 0201 	mvn.w	r2, #1
   2612a:	1b53      	subs	r3, r2, r5
   2612c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   26130:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26134:	2b00      	cmp	r3, #0
   26136:	db1b      	blt.n	26170 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   26138:	4b2b      	ldr	r3, [pc, #172]	; (261e8 <z_add_timeout+0xe8>)
   2613a:	e9d3 1300 	ldrd	r1, r3, [r3]
   2613e:	1a52      	subs	r2, r2, r1
   26140:	eb6c 0303 	sbc.w	r3, ip, r3
   26144:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   26146:	eb63 0307 	sbc.w	r3, r3, r7
   2614a:	2d01      	cmp	r5, #1
   2614c:	f173 0200 	sbcs.w	r2, r3, #0
   26150:	bfbc      	itt	lt
   26152:	2501      	movlt	r5, #1
   26154:	2300      	movlt	r3, #0
   26156:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   2615a:	4824      	ldr	r0, [pc, #144]	; (261ec <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   2615c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26160:	4283      	cmp	r3, r0
   26162:	d118      	bne.n	26196 <z_add_timeout+0x96>
	node->prev = tail;
   26164:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   26168:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2616c:	6044      	str	r4, [r0, #4]
}
   2616e:	e026      	b.n	261be <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
   26170:	f7ff ff56 	bl	26020 <elapsed>
   26174:	3501      	adds	r5, #1
   26176:	f147 0700 	adc.w	r7, r7, #0
   2617a:	182d      	adds	r5, r5, r0
   2617c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   26180:	e9c4 5704 	strd	r5, r7, [r4, #16]
   26184:	e7e9      	b.n	2615a <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
   26186:	1a52      	subs	r2, r2, r1
   26188:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   2618c:	459c      	cmp	ip, r3
   2618e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   26192:	d0e7      	beq.n	26164 <z_add_timeout+0x64>
   26194:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   26196:	2b00      	cmp	r3, #0
   26198:	d0e4      	beq.n	26164 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   2619a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   2619e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   261a2:	428a      	cmp	r2, r1
   261a4:	eb75 0e07 	sbcs.w	lr, r5, r7
   261a8:	daed      	bge.n	26186 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   261aa:	1a8a      	subs	r2, r1, r2
   261ac:	eb67 0505 	sbc.w	r5, r7, r5
   261b0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   261b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   261b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   261ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   261bc:	605c      	str	r4, [r3, #4]
	return list->head == list;
   261be:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   261c0:	4283      	cmp	r3, r0
   261c2:	d00b      	beq.n	261dc <z_add_timeout+0xdc>
		if (to == first()) {
   261c4:	429c      	cmp	r4, r3
   261c6:	d109      	bne.n	261dc <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
   261c8:	f7ff ff34 	bl	26034 <next_timeout>
			if (next_time == 0 ||
   261cc:	b118      	cbz	r0, 261d6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   261ce:	4b08      	ldr	r3, [pc, #32]	; (261f0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   261d0:	691b      	ldr	r3, [r3, #16]
   261d2:	4283      	cmp	r3, r0
   261d4:	d002      	beq.n	261dc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   261d6:	2100      	movs	r1, #0
   261d8:	f7fc ff10 	bl	22ffc <sys_clock_set_timeout>
	__asm__ volatile(
   261dc:	f386 8811 	msr	BASEPRI, r6
   261e0:	f3bf 8f6f 	isb	sy
}
   261e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   261e6:	bf00      	nop
   261e8:	20002610 	.word	0x20002610
   261ec:	20000894 	.word	0x20000894
   261f0:	200049f8 	.word	0x200049f8

000261f4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   261f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   261f8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   261fa:	f7ff fc4f 	bl	25a9c <z_time_slice>
	__asm__ volatile(
   261fe:	f04f 0320 	mov.w	r3, #32
   26202:	f3ef 8411 	mrs	r4, BASEPRI
   26206:	f383 8812 	msr	BASEPRI_MAX, r3
   2620a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2620e:	4e24      	ldr	r6, [pc, #144]	; (262a0 <sys_clock_announce+0xac>)
	return list->head == list;
   26210:	f8df 8090 	ldr.w	r8, [pc, #144]	; 262a4 <sys_clock_announce+0xb0>
   26214:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   26216:	4d24      	ldr	r5, [pc, #144]	; (262a8 <sys_clock_announce+0xb4>)
   26218:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2621c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2621e:	4540      	cmp	r0, r8
		curr_tick += dt;
   26220:	e9d5 1e00 	ldrd	r1, lr, [r5]
   26224:	ea4f 77e2 	mov.w	r7, r2, asr #31
   26228:	d00b      	beq.n	26242 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2622a:	b150      	cbz	r0, 26242 <sys_clock_announce+0x4e>
   2622c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   26230:	429a      	cmp	r2, r3
   26232:	eb77 090c 	sbcs.w	r9, r7, ip
   26236:	da16      	bge.n	26266 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   26238:	1a9b      	subs	r3, r3, r2
   2623a:	eb6c 0c07 	sbc.w	ip, ip, r7
   2623e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   26242:	1852      	adds	r2, r2, r1
   26244:	eb4e 0707 	adc.w	r7, lr, r7
   26248:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   2624c:	2500      	movs	r5, #0
   2624e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   26250:	f7ff fef0 	bl	26034 <next_timeout>
   26254:	4629      	mov	r1, r5
   26256:	f7fc fed1 	bl	22ffc <sys_clock_set_timeout>
	__asm__ volatile(
   2625a:	f384 8811 	msr	BASEPRI, r4
   2625e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   26262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   26266:	1859      	adds	r1, r3, r1
   26268:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   2626c:	1ad3      	subs	r3, r2, r3
   2626e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   26270:	2200      	movs	r2, #0
   26272:	2300      	movs	r3, #0
   26274:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   26278:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   2627c:	f7ff ff00 	bl	26080 <remove_timeout>
   26280:	f384 8811 	msr	BASEPRI, r4
   26284:	f3bf 8f6f 	isb	sy
		t->fn(t);
   26288:	6883      	ldr	r3, [r0, #8]
   2628a:	4798      	blx	r3
	__asm__ volatile(
   2628c:	f04f 0320 	mov.w	r3, #32
   26290:	f3ef 8411 	mrs	r4, BASEPRI
   26294:	f383 8812 	msr	BASEPRI_MAX, r3
   26298:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2629c:	e7bc      	b.n	26218 <sys_clock_announce+0x24>
   2629e:	bf00      	nop
   262a0:	20004a38 	.word	0x20004a38
   262a4:	20000894 	.word	0x20000894
   262a8:	20002610 	.word	0x20002610

000262ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   262ac:	b510      	push	{r4, lr}
   262ae:	f04f 0320 	mov.w	r3, #32
   262b2:	f3ef 8411 	mrs	r4, BASEPRI
   262b6:	f383 8812 	msr	BASEPRI_MAX, r3
   262ba:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   262be:	f7fc fecf 	bl	23060 <sys_clock_elapsed>
   262c2:	4a05      	ldr	r2, [pc, #20]	; (262d8 <sys_clock_tick_get+0x2c>)
   262c4:	e9d2 3100 	ldrd	r3, r1, [r2]
   262c8:	18c0      	adds	r0, r0, r3
   262ca:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   262ce:	f384 8811 	msr	BASEPRI, r4
   262d2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   262d6:	bd10      	pop	{r4, pc}
   262d8:	20002610 	.word	0x20002610

000262dc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   262dc:	b570      	push	{r4, r5, r6, lr}
   262de:	4604      	mov	r4, r0
	__asm__ volatile(
   262e0:	f04f 0320 	mov.w	r3, #32
   262e4:	f3ef 8511 	mrs	r5, BASEPRI
   262e8:	f383 8812 	msr	BASEPRI_MAX, r3
   262ec:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   262f0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   262f4:	3301      	adds	r3, #1
   262f6:	f142 0200 	adc.w	r2, r2, #0
   262fa:	2b02      	cmp	r3, #2
   262fc:	f172 0300 	sbcs.w	r3, r2, #0
   26300:	d304      	bcc.n	2630c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26302:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   26306:	4918      	ldr	r1, [pc, #96]	; (26368 <z_timer_expiration_handler+0x8c>)
   26308:	f7ff fefa 	bl	26100 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2630c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2630e:	3301      	adds	r3, #1
   26310:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   26312:	6a23      	ldr	r3, [r4, #32]
   26314:	b173      	cbz	r3, 26334 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   26316:	f385 8811 	msr	BASEPRI, r5
   2631a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2631e:	6a23      	ldr	r3, [r4, #32]
   26320:	4620      	mov	r0, r4
   26322:	4798      	blx	r3
	__asm__ volatile(
   26324:	f04f 0320 	mov.w	r3, #32
   26328:	f3ef 8511 	mrs	r5, BASEPRI
   2632c:	f383 8812 	msr	BASEPRI_MAX, r3
   26330:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26334:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26338:	42a6      	cmp	r6, r4
   2633a:	d000      	beq.n	2633e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2633c:	b926      	cbnz	r6, 26348 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   2633e:	f385 8811 	msr	BASEPRI, r5
   26342:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   26346:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   26348:	4630      	mov	r0, r6
   2634a:	f007 faf3 	bl	2d934 <z_unpend_thread_no_timeout>
   2634e:	2300      	movs	r3, #0
   26350:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
   26354:	f385 8811 	msr	BASEPRI, r5
   26358:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2635c:	4630      	mov	r0, r6
}
   2635e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   26362:	f007 bb27 	b.w	2d9b4 <z_ready_thread>
   26366:	bf00      	nop
   26368:	000262dd 	.word	0x000262dd

0002636c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2636c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26370:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26376:	bf08      	it	eq
   26378:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   2637c:	4606      	mov	r6, r0
   2637e:	461c      	mov	r4, r3
   26380:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   26384:	4689      	mov	r9, r1
   26386:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26388:	d03e      	beq.n	26408 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2638a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2638e:	bf08      	it	eq
   26390:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   26394:	4615      	mov	r5, r2
   26396:	4607      	mov	r7, r0
   26398:	d014      	beq.n	263c4 <z_impl_k_timer_start+0x58>
   2639a:	ea50 0302 	orrs.w	r3, r0, r2
   2639e:	d011      	beq.n	263c4 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   263a0:	f06f 0301 	mvn.w	r3, #1
   263a4:	1a9b      	subs	r3, r3, r2
   263a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   263aa:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   263ae:	2b00      	cmp	r3, #0
   263b0:	da08      	bge.n	263c4 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   263b2:	2a02      	cmp	r2, #2
   263b4:	f170 0300 	sbcs.w	r3, r0, #0
   263b8:	bfbc      	itt	lt
   263ba:	2502      	movlt	r5, #2
   263bc:	2700      	movlt	r7, #0
   263be:	3d01      	subs	r5, #1
   263c0:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   263c4:	f06f 0301 	mvn.w	r3, #1
   263c8:	1a5b      	subs	r3, r3, r1
   263ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   263ce:	eb63 0304 	sbc.w	r3, r3, r4
   263d2:	2b00      	cmp	r3, #0
   263d4:	da09      	bge.n	263ea <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   263d6:	2901      	cmp	r1, #1
   263d8:	f174 0300 	sbcs.w	r3, r4, #0
   263dc:	bfbc      	itt	lt
   263de:	2101      	movlt	r1, #1
   263e0:	2400      	movlt	r4, #0
   263e2:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   263e6:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   263ea:	4630      	mov	r0, r6
   263ec:	f007 fb99 	bl	2db22 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   263f0:	2300      	movs	r3, #0
   263f2:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   263f4:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   263f8:	464a      	mov	r2, r9
   263fa:	4643      	mov	r3, r8
   263fc:	4630      	mov	r0, r6
   263fe:	4903      	ldr	r1, [pc, #12]	; (2640c <z_impl_k_timer_start+0xa0>)
		     duration);
}
   26400:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26404:	f7ff be7c 	b.w	26100 <z_add_timeout>
}
   26408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2640c:	000262dd 	.word	0x000262dd

00026410 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26410:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   26414:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   26416:	4b29      	ldr	r3, [pc, #164]	; (264bc <z_impl_k_poll+0xac>)
   26418:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   2641a:	2301      	movs	r3, #1
   2641c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   26420:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   26424:	ea52 0305 	orrs.w	r3, r2, r5
{
   26428:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   2642a:	bf0c      	ite	eq
   2642c:	2301      	moveq	r3, #1
   2642e:	2300      	movne	r3, #0
   26430:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   26434:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   26436:	f007 fc51 	bl	2dcdc <register_events>
   2643a:	4681      	mov	r9, r0
	__asm__ volatile(
   2643c:	f04f 0320 	mov.w	r3, #32
   26440:	f3ef 8a11 	mrs	sl, BASEPRI
   26444:	f383 8812 	msr	BASEPRI_MAX, r3
   26448:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2644c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   26450:	b964      	cbnz	r4, 2646c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   26452:	4601      	mov	r1, r0
   26454:	4652      	mov	r2, sl
   26456:	4640      	mov	r0, r8
   26458:	f007 fd11 	bl	2de7e <clear_event_registrations>
	__asm__ volatile(
   2645c:	f38a 8811 	msr	BASEPRI, sl
   26460:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   26464:	4620      	mov	r0, r4
   26466:	b002      	add	sp, #8
   26468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   2646c:	2300      	movs	r3, #0
   2646e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26472:	ea56 0305 	orrs.w	r3, r6, r5
   26476:	d106      	bne.n	26486 <z_impl_k_poll+0x76>
   26478:	f38a 8811 	msr	BASEPRI, sl
   2647c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   26480:	f06f 040a 	mvn.w	r4, #10
   26484:	e7ee      	b.n	26464 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   26486:	e9cd 6500 	strd	r6, r5, [sp]
   2648a:	4a0d      	ldr	r2, [pc, #52]	; (264c0 <z_impl_k_poll+0xb0>)
   2648c:	480d      	ldr	r0, [pc, #52]	; (264c4 <z_impl_k_poll+0xb4>)
   2648e:	4651      	mov	r1, sl
   26490:	f7ff fbd6 	bl	25c40 <z_pend_curr>
   26494:	4604      	mov	r4, r0
	__asm__ volatile(
   26496:	f04f 0320 	mov.w	r3, #32
   2649a:	f3ef 8511 	mrs	r5, BASEPRI
   2649e:	f383 8812 	msr	BASEPRI_MAX, r3
   264a2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   264a6:	462a      	mov	r2, r5
   264a8:	4649      	mov	r1, r9
   264aa:	4640      	mov	r0, r8
   264ac:	f007 fce7 	bl	2de7e <clear_event_registrations>
	__asm__ volatile(
   264b0:	f385 8811 	msr	BASEPRI, r5
   264b4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   264b8:	e7d4      	b.n	26464 <z_impl_k_poll+0x54>
   264ba:	bf00      	nop
   264bc:	200049f8 	.word	0x200049f8
   264c0:	2000089c 	.word	0x2000089c
   264c4:	20004c39 	.word	0x20004c39

000264c8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   264c8:	b538      	push	{r3, r4, r5, lr}
   264ca:	4603      	mov	r3, r0
	__asm__ volatile(
   264cc:	f04f 0220 	mov.w	r2, #32
   264d0:	f3ef 8511 	mrs	r5, BASEPRI
   264d4:	f382 8812 	msr	BASEPRI_MAX, r2
   264d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   264dc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   264de:	2101      	movs	r1, #1
   264e0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   264e2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   264e4:	4283      	cmp	r3, r0
   264e6:	d106      	bne.n	264f6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   264e8:	f385 8811 	msr	BASEPRI, r5
   264ec:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   264f0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   264f2:	4620      	mov	r0, r4
   264f4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   264f6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   264fa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   264fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   264fe:	2300      	movs	r3, #0
	node->prev = NULL;
   26500:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26504:	f007 fc61 	bl	2ddca <signal_poll_event>
	z_reschedule(&lock, key);
   26508:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2650a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2650c:	4801      	ldr	r0, [pc, #4]	; (26514 <z_impl_k_poll_signal_raise+0x4c>)
   2650e:	f7ff fa45 	bl	2599c <z_reschedule>
	return rc;
   26512:	e7ee      	b.n	264f2 <z_impl_k_poll_signal_raise+0x2a>
   26514:	20004c39 	.word	0x20004c39

00026518 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   26518:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2651a:	4606      	mov	r6, r0
   2651c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2651e:	f006 fffd 	bl	2d51c <k_is_in_isr>
   26522:	b980      	cbnz	r0, 26546 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26524:	4b0b      	ldr	r3, [pc, #44]	; (26554 <z_thread_aligned_alloc+0x3c>)
   26526:	689b      	ldr	r3, [r3, #8]
   26528:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   2652c:	b17c      	cbz	r4, 2654e <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2652e:	1d2a      	adds	r2, r5, #4
   26530:	d209      	bcs.n	26546 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   26532:	2000      	movs	r0, #0
   26534:	2100      	movs	r1, #0
   26536:	e9cd 0100 	strd	r0, r1, [sp]
   2653a:	f046 0104 	orr.w	r1, r6, #4
   2653e:	4620      	mov	r0, r4
   26540:	f006 ff64 	bl	2d40c <k_heap_aligned_alloc>
	if (mem == NULL) {
   26544:	b908      	cbnz	r0, 2654a <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   26546:	2400      	movs	r4, #0
	}

	return ret;
   26548:	e001      	b.n	2654e <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   2654a:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2654c:	1d04      	adds	r4, r0, #4
}
   2654e:	4620      	mov	r0, r4
   26550:	b002      	add	sp, #8
   26552:	bd70      	pop	{r4, r5, r6, pc}
   26554:	200049f8 	.word	0x200049f8

00026558 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   26558:	4770      	bx	lr

0002655a <z_log_msg2_static_create.constprop.0>:
   2655a:	2300      	movs	r3, #0
   2655c:	f001 b9f0 	b.w	27940 <z_impl_z_log_msg2_static_create>

00026560 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   26560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26562:	ab0a      	add	r3, sp, #40	; 0x28
   26564:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   26566:	9302      	str	r3, [sp, #8]
   26568:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2656a:	9301      	str	r3, [sp, #4]
   2656c:	2300      	movs	r3, #0
   2656e:	9300      	str	r3, [sp, #0]
   26570:	4618      	mov	r0, r3
   26572:	f7e0 ff67 	bl	7444 <z_impl_z_log_msg2_runtime_vcreate>
}
   26576:	b007      	add	sp, #28
   26578:	f85d fb04 	ldr.w	pc, [sp], #4

0002657c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   2657c:	4601      	mov	r1, r0
   2657e:	f240 30e7 	movw	r0, #999	; 0x3e7
   26582:	b508      	push	{r3, lr}
   26584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26588:	2300      	movs	r3, #0
   2658a:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2658e:	1449      	asrs	r1, r1, #17
   26590:	f7da fe06 	bl	11a0 <__aeabi_uldivmod>
}
   26594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   26598:	f7ff bc90 	b.w	25ebc <z_impl_k_sleep>

0002659c <cmd_led_control>:
// Logging Module
LOG_MODULE_REGISTER(SHELL_LED, INITIAL_SHELL_LED_LOG_LEVEL);

int cmd_led_control(const struct shell *shell, size_t argc,
                    char **argv)
{
   2659c:	b508      	push	{r3, lr}

    switch (argv[1][0])
   2659e:	6853      	ldr	r3, [r2, #4]
   265a0:	781b      	ldrb	r3, [r3, #0]
   265a2:	2b6f      	cmp	r3, #111	; 0x6f
   265a4:	d00e      	beq.n	265c4 <cmd_led_control+0x28>
   265a6:	2b74      	cmp	r3, #116	; 0x74
   265a8:	d027      	beq.n	265fa <cmd_led_control+0x5e>
   265aa:	2b66      	cmp	r3, #102	; 0x66
   265ac:	d11c      	bne.n	265e8 <cmd_led_control+0x4c>
        default:
            no_command();
            return OK;
        }
    case 'f':
        switch (argv[2][0])
   265ae:	6893      	ldr	r3, [r2, #8]
   265b0:	781b      	ldrb	r3, [r3, #0]
   265b2:	2b67      	cmp	r3, #103	; 0x67
   265b4:	d01e      	beq.n	265f4 <cmd_led_control+0x58>
   265b6:	2b72      	cmp	r3, #114	; 0x72
   265b8:	d019      	beq.n	265ee <cmd_led_control+0x52>
   265ba:	2b62      	cmp	r3, #98	; 0x62
   265bc:	d114      	bne.n	265e8 <cmd_led_control+0x4c>
            return OK;
        case 'g':
            led2_off();
            return OK;
        case 'b':
            led3_off();
   265be:	f7de ffdd 	bl	557c <led3_off>
            return OK;
   265c2:	e00c      	b.n	265de <cmd_led_control+0x42>
        switch (argv[2][0])
   265c4:	6893      	ldr	r3, [r2, #8]
   265c6:	781b      	ldrb	r3, [r3, #0]
   265c8:	2b67      	cmp	r3, #103	; 0x67
   265ca:	d00a      	beq.n	265e2 <cmd_led_control+0x46>
   265cc:	2b72      	cmp	r3, #114	; 0x72
   265ce:	d004      	beq.n	265da <cmd_led_control+0x3e>
   265d0:	2b62      	cmp	r3, #98	; 0x62
   265d2:	d109      	bne.n	265e8 <cmd_led_control+0x4c>
            led3_on();
   265d4:	f7de ff94 	bl	5500 <led3_on>
            return OK;
   265d8:	e001      	b.n	265de <cmd_led_control+0x42>
            led1_on();
   265da:	f7de fe29 	bl	5230 <led1_on>
        no_command();
        return OK;
    }

    return OK;
   265de:	2000      	movs	r0, #0
   265e0:	bd08      	pop	{r3, pc}
            led2_on();
   265e2:	f7de fed9 	bl	5398 <led2_on>
            return OK;
   265e6:	e7fa      	b.n	265de <cmd_led_control+0x42>
            no_command();
   265e8:	f7df f83e 	bl	5668 <no_command>
            return OK;
   265ec:	e7f7      	b.n	265de <cmd_led_control+0x42>
            led1_off();
   265ee:	f7de fe5d 	bl	52ac <led1_off>
            return OK;
   265f2:	e7f4      	b.n	265de <cmd_led_control+0x42>
            led2_off();
   265f4:	f7de ff0e 	bl	5414 <led2_off>
            return OK;
   265f8:	e7f1      	b.n	265de <cmd_led_control+0x42>
        switch (argv[2][0])
   265fa:	6893      	ldr	r3, [r2, #8]
   265fc:	781b      	ldrb	r3, [r3, #0]
   265fe:	2b67      	cmp	r3, #103	; 0x67
   26600:	d009      	beq.n	26616 <cmd_led_control+0x7a>
   26602:	2b72      	cmp	r3, #114	; 0x72
   26604:	d004      	beq.n	26610 <cmd_led_control+0x74>
   26606:	2b62      	cmp	r3, #98	; 0x62
   26608:	d1ee      	bne.n	265e8 <cmd_led_control+0x4c>
            led3_toggle();
   2660a:	f7de fff5 	bl	55f8 <led3_toggle>
            return OK;
   2660e:	e7e6      	b.n	265de <cmd_led_control+0x42>
            led1_toggle();
   26610:	f7de fe8a 	bl	5328 <led1_toggle>
            return OK;
   26614:	e7e3      	b.n	265de <cmd_led_control+0x42>
            led2_toggle();
   26616:	f7de ff3b 	bl	5490 <led2_toggle>
            return OK;
   2661a:	e7e0      	b.n	265de <cmd_led_control+0x42>

0002661c <cmd_hts221_read_temp>:
{
   2661c:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, HTS221_T, 0, 0, 0, 0);
   2661e:	2400      	movs	r4, #0
   26620:	2101      	movs	r1, #1
   26622:	4623      	mov	r3, r4
   26624:	4622      	mov	r2, r4
   26626:	4608      	mov	r0, r1
   26628:	e9cd 4400 	strd	r4, r4, [sp]
   2662c:	f7df f834 	bl	5698 <package_hci_message>
    scu_write();
   26630:	f7de faec 	bl	4c0c <scu_write>
    clear_tx();
   26634:	f7df f860 	bl	56f8 <clear_tx>
}
   26638:	4620      	mov	r0, r4
   2663a:	b002      	add	sp, #8
   2663c:	bd10      	pop	{r4, pc}

0002663e <cmd_hts221_read_hum>:
{
   2663e:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, HTS221_H, 0, 0, 0, 0);
   26640:	2400      	movs	r4, #0
   26642:	4623      	mov	r3, r4
   26644:	4622      	mov	r2, r4
   26646:	2102      	movs	r1, #2
   26648:	e9cd 4400 	strd	r4, r4, [sp]
   2664c:	2001      	movs	r0, #1
   2664e:	f7df f823 	bl	5698 <package_hci_message>
    scu_write();
   26652:	f7de fadb 	bl	4c0c <scu_write>
    clear_tx();
   26656:	f7df f84f 	bl	56f8 <clear_tx>
}
   2665a:	4620      	mov	r0, r4
   2665c:	b002      	add	sp, #8
   2665e:	bd10      	pop	{r4, pc}

00026660 <cmd_lis2dh_read_x>:
{
   26660:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, LIS2DH_X_ACC, 0, 0, 0, 0);
   26662:	2400      	movs	r4, #0
   26664:	4623      	mov	r3, r4
   26666:	4622      	mov	r2, r4
   26668:	2105      	movs	r1, #5
   2666a:	e9cd 4400 	strd	r4, r4, [sp]
   2666e:	2001      	movs	r0, #1
   26670:	f7df f812 	bl	5698 <package_hci_message>
    scu_write();
   26674:	f7de faca 	bl	4c0c <scu_write>
    clear_tx();
   26678:	f7df f83e 	bl	56f8 <clear_tx>
}
   2667c:	4620      	mov	r0, r4
   2667e:	b002      	add	sp, #8
   26680:	bd10      	pop	{r4, pc}

00026682 <cmd_lis2dh_read_y>:
{
   26682:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, LIS2DH_Y_ACC, 0, 0, 0, 0);
   26684:	2400      	movs	r4, #0
   26686:	4623      	mov	r3, r4
   26688:	4622      	mov	r2, r4
   2668a:	2106      	movs	r1, #6
   2668c:	e9cd 4400 	strd	r4, r4, [sp]
   26690:	2001      	movs	r0, #1
   26692:	f7df f801 	bl	5698 <package_hci_message>
    scu_write();
   26696:	f7de fab9 	bl	4c0c <scu_write>
    clear_tx();
   2669a:	f7df f82d 	bl	56f8 <clear_tx>
}
   2669e:	4620      	mov	r0, r4
   266a0:	b002      	add	sp, #8
   266a2:	bd10      	pop	{r4, pc}

000266a4 <cmd_lis2dh_read_z>:
{
   266a4:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, LIS2DH_Z_ACC, 0, 0, 0, 0);
   266a6:	2400      	movs	r4, #0
   266a8:	4623      	mov	r3, r4
   266aa:	4622      	mov	r2, r4
   266ac:	2107      	movs	r1, #7
   266ae:	e9cd 4400 	strd	r4, r4, [sp]
   266b2:	2001      	movs	r0, #1
   266b4:	f7de fff0 	bl	5698 <package_hci_message>
    scu_write();
   266b8:	f7de faa8 	bl	4c0c <scu_write>
    clear_tx();
   266bc:	f7df f81c 	bl	56f8 <clear_tx>
}
   266c0:	4620      	mov	r0, r4
   266c2:	b002      	add	sp, #8
   266c4:	bd10      	pop	{r4, pc}

000266c6 <cmd_lps22_read_pres>:
{
   266c6:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, LPS22_AP, 0, 0, 0, 0);
   266c8:	2400      	movs	r4, #0
   266ca:	4623      	mov	r3, r4
   266cc:	4622      	mov	r2, r4
   266ce:	2103      	movs	r1, #3
   266d0:	e9cd 4400 	strd	r4, r4, [sp]
   266d4:	2001      	movs	r0, #1
   266d6:	f7de ffdf 	bl	5698 <package_hci_message>
    scu_write();
   266da:	f7de fa97 	bl	4c0c <scu_write>
    clear_tx();
   266de:	f7df f80b 	bl	56f8 <clear_tx>
}
   266e2:	4620      	mov	r0, r4
   266e4:	b002      	add	sp, #8
   266e6:	bd10      	pop	{r4, pc}

000266e8 <cmd_ccs811_read_voc>:
{
   266e8:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, CCS811_VOC, 0, 0, 0, 0);
   266ea:	2400      	movs	r4, #0
   266ec:	4623      	mov	r3, r4
   266ee:	4622      	mov	r2, r4
   266f0:	2104      	movs	r1, #4
   266f2:	e9cd 4400 	strd	r4, r4, [sp]
   266f6:	2001      	movs	r0, #1
   266f8:	f7de ffce 	bl	5698 <package_hci_message>
    scu_write();
   266fc:	f7de fa86 	bl	4c0c <scu_write>
    clear_tx();
   26700:	f7de fffa 	bl	56f8 <clear_tx>
}
   26704:	4620      	mov	r0, r4
   26706:	b002      	add	sp, #8
   26708:	bd10      	pop	{r4, pc}

0002670a <cmd_buzzer_write_freq>:
{
   2670a:	b513      	push	{r0, r1, r4, lr}
    uint16_t freq = atoi(argv[1]);
   2670c:	6850      	ldr	r0, [r2, #4]
   2670e:	f003 fc75 	bl	29ffc <atoi>
    package_hci_message(REQUEST, BUZ, freq, 0, 0, 0);
   26712:	2400      	movs	r4, #0
   26714:	b282      	uxth	r2, r0
   26716:	4623      	mov	r3, r4
   26718:	2109      	movs	r1, #9
   2671a:	e9cd 4400 	strd	r4, r4, [sp]
   2671e:	2001      	movs	r0, #1
   26720:	f7de ffba 	bl	5698 <package_hci_message>
    scu_write();
   26724:	f7de fa72 	bl	4c0c <scu_write>
    clear_tx();
   26728:	f7de ffe6 	bl	56f8 <clear_tx>
}
   2672c:	4620      	mov	r0, r4
   2672e:	b002      	add	sp, #8
   26730:	bd10      	pop	{r4, pc}

00026732 <cmd_rgb_write_rgb>:
{
   26732:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t red = atoi(argv[1]);
   26734:	6850      	ldr	r0, [r2, #4]
{
   26736:	4614      	mov	r4, r2
    uint16_t red = atoi(argv[1]);
   26738:	f003 fc60 	bl	29ffc <atoi>
   2673c:	4605      	mov	r5, r0
    uint16_t green = atoi(argv[2]);
   2673e:	68a0      	ldr	r0, [r4, #8]
   26740:	f003 fc5c 	bl	29ffc <atoi>
   26744:	4606      	mov	r6, r0
    uint16_t blue = atoi(argv[3]);
   26746:	68e0      	ldr	r0, [r4, #12]
   26748:	f003 fc58 	bl	29ffc <atoi>
    package_hci_message(REQUEST, RGB_LED, red, green, blue, 0);
   2674c:	2400      	movs	r4, #0
   2674e:	b280      	uxth	r0, r0
   26750:	b2b3      	uxth	r3, r6
   26752:	b2aa      	uxth	r2, r5
   26754:	2108      	movs	r1, #8
   26756:	9000      	str	r0, [sp, #0]
   26758:	9401      	str	r4, [sp, #4]
   2675a:	2001      	movs	r0, #1
   2675c:	f7de ff9c 	bl	5698 <package_hci_message>
    scu_write();
   26760:	f7de fa54 	bl	4c0c <scu_write>
    clear_tx();
   26764:	f7de ffc8 	bl	56f8 <clear_tx>
}
   26768:	4620      	mov	r0, r4
   2676a:	b002      	add	sp, #8
   2676c:	bd70      	pop	{r4, r5, r6, pc}

0002676e <cmd_pb_read_state>:
{
   2676e:	b513      	push	{r0, r1, r4, lr}
    package_hci_message(REQUEST, PB, 0, 0, 0, 0);
   26770:	2400      	movs	r4, #0
   26772:	4623      	mov	r3, r4
   26774:	4622      	mov	r2, r4
   26776:	210a      	movs	r1, #10
   26778:	e9cd 4400 	strd	r4, r4, [sp]
   2677c:	2001      	movs	r0, #1
   2677e:	f7de ff8b 	bl	5698 <package_hci_message>
    scu_write();
   26782:	f7de fa43 	bl	4c0c <scu_write>
    clear_tx();
   26786:	f7de ffb7 	bl	56f8 <clear_tx>
}
   2678a:	4620      	mov	r0, r4
   2678c:	b002      	add	sp, #8
   2678e:	bd10      	pop	{r4, pc}

00026790 <cmd_dc_write_percentage>:
{
   26790:	b513      	push	{r0, r1, r4, lr}
    uint16_t percentage = atoi(argv[1]);
   26792:	6850      	ldr	r0, [r2, #4]
   26794:	f003 fc32 	bl	29ffc <atoi>
    package_hci_message(REQUEST, DC, percentage, 0, 0, 0);
   26798:	2400      	movs	r4, #0
   2679a:	b282      	uxth	r2, r0
   2679c:	4623      	mov	r3, r4
   2679e:	210b      	movs	r1, #11
   267a0:	e9cd 4400 	strd	r4, r4, [sp]
   267a4:	2001      	movs	r0, #1
   267a6:	f7de ff77 	bl	5698 <package_hci_message>
    scu_write();
   267aa:	f7de fa2f 	bl	4c0c <scu_write>
    clear_tx();
   267ae:	f7de ffa3 	bl	56f8 <clear_tx>
}
   267b2:	4620      	mov	r0, r4
   267b4:	b002      	add	sp, #8
   267b6:	bd10      	pop	{r4, pc}

000267b8 <gpio_pin_configure>:

extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
   267b8:	b470      	push	{r4, r5, r6}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   267ba:	04d3      	lsls	r3, r2, #19
	const struct gpio_driver_api *api =
   267bc:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
   267be:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   267c0:	d504      	bpl.n	267cc <gpio_pin_configure+0x14>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   267c2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   267c6:	bf18      	it	ne
   267c8:	f482 6240 	eorne.w	r2, r2, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   267cc:	2301      	movs	r3, #1
   267ce:	fa03 f401 	lsl.w	r4, r3, r1
   267d2:	682b      	ldr	r3, [r5, #0]
   267d4:	4323      	orrs	r3, r4
   267d6:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   267d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   267dc:	6833      	ldr	r3, [r6, #0]
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   267de:	bc70      	pop	{r4, r5, r6}
   267e0:	4718      	bx	r3

000267e2 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   267e2:	2301      	movs	r3, #1
   267e4:	fa03 f101 	lsl.w	r1, r3, r1
   267e8:	6903      	ldr	r3, [r0, #16]
   267ea:	681b      	ldr	r3, [r3, #0]
   267ec:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   267ee:	bf18      	it	ne
   267f0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   267f4:	b112      	cbz	r2, 267fc <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   267f6:	6883      	ldr	r3, [r0, #8]
   267f8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   267fa:	4718      	bx	r3
   267fc:	6883      	ldr	r3, [r0, #8]
   267fe:	691b      	ldr	r3, [r3, #16]
   26800:	e7fb      	b.n	267fa <gpio_pin_set+0x18>

00026802 <gpio_port_toggle_bits>:
	return api->port_toggle_bits(port, pins);
   26802:	6883      	ldr	r3, [r0, #8]
   26804:	695b      	ldr	r3, [r3, #20]
   26806:	4718      	bx	r3

00026808 <device_get_binding>:
   26808:	f7fe ba06 	b.w	24c18 <z_impl_device_get_binding>

0002680c <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2680c:	2300      	movs	r3, #0
   2680e:	f001 b897 	b.w	27940 <z_impl_z_log_msg2_static_create>

00026812 <gpio_port_get_raw.isra.0>:
	return api->port_get_raw(port, value);
   26812:	6883      	ldr	r3, [r0, #8]
   26814:	685b      	ldr	r3, [r3, #4]
   26816:	4718      	bx	r3

00026818 <init_leds>:

void init_leds(void)
{
   26818:	b508      	push	{r3, lr}

    led0_init();
   2681a:	f7de fc4b 	bl	50b4 <led0_init>
    led1_init();
   2681e:	f7de fc5b 	bl	50d8 <led1_init>
    led2_init();
   26822:	f7de fc6b 	bl	50fc <led2_init>
    led3_init();
   26826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    led3_init();
   2682a:	f7de bc79 	b.w	5120 <led3_init>

0002682e <get_data_length>:
    if (data4 & 0xFF00)
   2682e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   26832:	d10f      	bne.n	26854 <get_data_length+0x26>
    else if (data4)
   26834:	b983      	cbnz	r3, 26858 <get_data_length+0x2a>
    else if (data3 & 0xFF00)
   26836:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   2683a:	d10f      	bne.n	2685c <get_data_length+0x2e>
    else if (data3)
   2683c:	b982      	cbnz	r2, 26860 <get_data_length+0x32>
    else if (data2 & 0xFF00)
   2683e:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
   26842:	d10f      	bne.n	26864 <get_data_length+0x36>
    else if (data2)
   26844:	b981      	cbnz	r1, 26868 <get_data_length+0x3a>
    else if (data1 & 0xFF00)
   26846:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
   2684a:	d10f      	bne.n	2686c <get_data_length+0x3e>
        return 8;
   2684c:	3800      	subs	r0, #0
   2684e:	bf18      	it	ne
   26850:	2001      	movne	r0, #1
   26852:	4770      	bx	lr
   26854:	2008      	movs	r0, #8
   26856:	4770      	bx	lr
        return 7;
   26858:	2007      	movs	r0, #7
   2685a:	4770      	bx	lr
        return 6;
   2685c:	2006      	movs	r0, #6
   2685e:	4770      	bx	lr
        return 5;
   26860:	2005      	movs	r0, #5
   26862:	4770      	bx	lr
        return 4;
   26864:	2004      	movs	r0, #4
   26866:	4770      	bx	lr
        return 3;
   26868:	2003      	movs	r0, #3
   2686a:	4770      	bx	lr
        return 2;
   2686c:	2002      	movs	r0, #2
}
   2686e:	4770      	bx	lr

00026870 <initialise>:
/**
 * @brief Initialises the hardware and shell
 *
 */
void initialise(void)
{
   26870:	b508      	push	{r3, lr}

        init_leds();
   26872:	f7ff ffd1 	bl	26818 <init_leds>
        setup_pb();
   26876:	f7de ff57 	bl	5728 <setup_pb>
        begin_shell();
}
   2687a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        begin_shell();
   2687e:	f7de bb5b 	b.w	4f38 <begin_shell>

00026882 <main>:

void main(void)
{

        initialise();
   26882:	f7ff bff5 	b.w	26870 <initialise>

00026886 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
   26886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2688a:	4607      	mov	r7, r0
   2688c:	460e      	mov	r6, r1
   2688e:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
   26890:	461d      	mov	r5, r3
   26892:	b1fb      	cbz	r3, 268d4 <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
   26894:	7818      	ldrb	r0, [r3, #0]
   26896:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   26898:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
   2689c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   268a0:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   268a2:	f04f 0900 	mov.w	r9, #0
   268a6:	45d1      	cmp	r9, sl
   268a8:	d308      	bcc.n	268bc <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
   268aa:	686a      	ldr	r2, [r5, #4]
   268ac:	f105 0308 	add.w	r3, r5, #8
   268b0:	4641      	mov	r1, r8
   268b2:	4638      	mov	r0, r7
   268b4:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
   268b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   268ba:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   268bc:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   268c0:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   268c4:	4620      	mov	r0, r4
   268c6:	f003 fcf3 	bl	2a2b0 <strlen>
   268ca:	3001      	adds	r0, #1
   268cc:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   268ce:	f109 0901 	add.w	r9, r9, #1
   268d2:	e7e8      	b.n	268a6 <cbpprintf_external+0x20>
}
   268d4:	f06f 0015 	mvn.w	r0, #21
   268d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000268dc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   268dc:	4603      	mov	r3, r0
   268de:	b140      	cbz	r0, 268f2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   268e0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   268e2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   268e6:	2a02      	cmp	r2, #2
   268e8:	d006      	beq.n	268f8 <sys_notify_validate+0x1c>
   268ea:	2a03      	cmp	r2, #3
   268ec:	d004      	beq.n	268f8 <sys_notify_validate+0x1c>
   268ee:	2a01      	cmp	r2, #1
   268f0:	d005      	beq.n	268fe <sys_notify_validate+0x22>
		return -EINVAL;
   268f2:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   268f6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   268f8:	681a      	ldr	r2, [r3, #0]
   268fa:	2a00      	cmp	r2, #0
   268fc:	d0f9      	beq.n	268f2 <sys_notify_validate+0x16>
		notify->result = 0;
   268fe:	2000      	movs	r0, #0
   26900:	6098      	str	r0, [r3, #8]
   26902:	4770      	bx	lr

00026904 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   26904:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26906:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2690a:	2a02      	cmp	r2, #2
{
   2690c:	b510      	push	{r4, lr}
   2690e:	4603      	mov	r3, r0
	notify->result = res;
   26910:	6081      	str	r1, [r0, #8]
	switch (method) {
   26912:	d00a      	beq.n	2692a <sys_notify_finalize+0x26>
   26914:	2a03      	cmp	r2, #3
   26916:	d10b      	bne.n	26930 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   26918:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2691a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2691c:	2200      	movs	r2, #0
   2691e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   26920:	b108      	cbz	r0, 26926 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   26922:	f7ff fdd1 	bl	264c8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   26926:	4620      	mov	r0, r4
   26928:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2692a:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2692c:	2400      	movs	r4, #0
		break;
   2692e:	e7f5      	b.n	2691c <sys_notify_finalize+0x18>
	switch (method) {
   26930:	2400      	movs	r4, #0
   26932:	4620      	mov	r0, r4
   26934:	e7f2      	b.n	2691c <sys_notify_finalize+0x18>

00026936 <str_out>:
{
   26936:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26938:	688a      	ldr	r2, [r1, #8]
   2693a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2693c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2693e:	b114      	cbz	r4, 26946 <str_out+0x10>
   26940:	684b      	ldr	r3, [r1, #4]
   26942:	4293      	cmp	r3, r2
   26944:	dc01      	bgt.n	2694a <str_out+0x14>
		ctx->count++;
   26946:	608d      	str	r5, [r1, #8]
}
   26948:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2694a:	3b01      	subs	r3, #1
   2694c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2694e:	bf08      	it	eq
   26950:	2200      	moveq	r2, #0
   26952:	608d      	str	r5, [r1, #8]
   26954:	bf0c      	ite	eq
   26956:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   26958:	54a0      	strbne	r0, [r4, r2]
   2695a:	e7f5      	b.n	26948 <str_out+0x12>

0002695c <printk>:
{
   2695c:	b40f      	push	{r0, r1, r2, r3}
   2695e:	b507      	push	{r0, r1, r2, lr}
   26960:	a904      	add	r1, sp, #16
   26962:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26966:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   26968:	f000 ff72 	bl	27850 <z_log_vprintk>
}
   2696c:	b003      	add	sp, #12
   2696e:	f85d eb04 	ldr.w	lr, [sp], #4
   26972:	b004      	add	sp, #16
   26974:	4770      	bx	lr

00026976 <snprintk>:
{
   26976:	b40c      	push	{r2, r3}
   26978:	b507      	push	{r0, r1, r2, lr}
   2697a:	ab04      	add	r3, sp, #16
   2697c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26980:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26982:	f7df f931 	bl	5be8 <vsnprintk>
}
   26986:	b003      	add	sp, #12
   26988:	f85d eb04 	ldr.w	lr, [sp], #4
   2698c:	b002      	add	sp, #8
   2698e:	4770      	bx	lr

00026990 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26990:	b510      	push	{r4, lr}
   26992:	4603      	mov	r3, r0
	return list->head;
   26994:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26996:	2200      	movs	r2, #0
   26998:	b158      	cbz	r0, 269b2 <sys_slist_find_and_remove+0x22>
   2699a:	4288      	cmp	r0, r1
   2699c:	d10f      	bne.n	269be <sys_slist_find_and_remove+0x2e>
	return node->next;
   2699e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   269a0:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   269a2:	b93a      	cbnz	r2, 269b4 <sys_slist_find_and_remove+0x24>
   269a4:	42a1      	cmp	r1, r4
	list->head = node;
   269a6:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   269a8:	d100      	bne.n	269ac <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   269aa:	6058      	str	r0, [r3, #4]
	parent->next = child;
   269ac:	2300      	movs	r3, #0
   269ae:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   269b0:	2001      	movs	r0, #1
   269b2:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   269b4:	42a1      	cmp	r1, r4
	parent->next = child;
   269b6:	6010      	str	r0, [r2, #0]
	list->tail = node;
   269b8:	bf08      	it	eq
   269ba:	605a      	streq	r2, [r3, #4]
}
   269bc:	e7f6      	b.n	269ac <sys_slist_find_and_remove+0x1c>
	return node->next;
   269be:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   269c0:	6800      	ldr	r0, [r0, #0]
   269c2:	e7e9      	b.n	26998 <sys_slist_find_and_remove+0x8>

000269c4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   269c4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   269c6:	f013 0307 	ands.w	r3, r3, #7
   269ca:	d105      	bne.n	269d8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   269cc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   269ce:	2b00      	cmp	r3, #0
   269d0:	bf0c      	ite	eq
   269d2:	2000      	moveq	r0, #0
   269d4:	2003      	movne	r0, #3
   269d6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   269d8:	2b02      	cmp	r3, #2
   269da:	d105      	bne.n	269e8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   269dc:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   269de:	2b00      	cmp	r3, #0
   269e0:	bf14      	ite	ne
   269e2:	2000      	movne	r0, #0
   269e4:	2004      	moveq	r0, #4
   269e6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   269e8:	2b01      	cmp	r3, #1
   269ea:	d105      	bne.n	269f8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   269ec:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   269ee:	2b00      	cmp	r3, #0
   269f0:	bf0c      	ite	eq
   269f2:	2000      	moveq	r0, #0
   269f4:	2005      	movne	r0, #5
   269f6:	4770      	bx	lr
	int evt = EVT_NOP;
   269f8:	2000      	movs	r0, #0
}
   269fa:	4770      	bx	lr

000269fc <notify_one>:
{
   269fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a00:	460d      	mov	r5, r1
   26a02:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26a04:	4619      	mov	r1, r3
   26a06:	1d28      	adds	r0, r5, #4
{
   26a08:	4690      	mov	r8, r2
   26a0a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26a0c:	f7ff ff7a 	bl	26904 <sys_notify_finalize>
	if (cb) {
   26a10:	4604      	mov	r4, r0
   26a12:	b138      	cbz	r0, 26a24 <notify_one+0x28>
		cb(mgr, cli, state, res);
   26a14:	4633      	mov	r3, r6
   26a16:	4642      	mov	r2, r8
   26a18:	4629      	mov	r1, r5
   26a1a:	4638      	mov	r0, r7
   26a1c:	46a4      	mov	ip, r4
}
   26a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   26a22:	4760      	bx	ip
}
   26a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026a28 <transition_complete>:
{
   26a28:	b410      	push	{r4}
	__asm__ volatile(
   26a2a:	f04f 0420 	mov.w	r4, #32
   26a2e:	f3ef 8211 	mrs	r2, BASEPRI
   26a32:	f384 8812 	msr	BASEPRI_MAX, r4
   26a36:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   26a3a:	6141      	str	r1, [r0, #20]
}
   26a3c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   26a3e:	2101      	movs	r1, #1
   26a40:	f7df b8e6 	b.w	5c10 <process_event>

00026a44 <validate_args>:
{
   26a44:	b510      	push	{r4, lr}
   26a46:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   26a48:	b140      	cbz	r0, 26a5c <validate_args+0x18>
   26a4a:	b139      	cbz	r1, 26a5c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   26a4c:	1d08      	adds	r0, r1, #4
   26a4e:	f7ff ff45 	bl	268dc <sys_notify_validate>
	if ((rv == 0)
   26a52:	b928      	cbnz	r0, 26a60 <validate_args+0x1c>
	    && ((cli->notify.flags
   26a54:	68a3      	ldr	r3, [r4, #8]
   26a56:	f033 0303 	bics.w	r3, r3, #3
   26a5a:	d001      	beq.n	26a60 <validate_args+0x1c>
		rv = -EINVAL;
   26a5c:	f06f 0015 	mvn.w	r0, #21
}
   26a60:	bd10      	pop	{r4, pc}

00026a62 <onoff_manager_init>:
{
   26a62:	b538      	push	{r3, r4, r5, lr}
   26a64:	460c      	mov	r4, r1
	if ((mgr == NULL)
   26a66:	4605      	mov	r5, r0
   26a68:	b158      	cbz	r0, 26a82 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   26a6a:	b151      	cbz	r1, 26a82 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   26a6c:	680b      	ldr	r3, [r1, #0]
   26a6e:	b143      	cbz	r3, 26a82 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   26a70:	684b      	ldr	r3, [r1, #4]
   26a72:	b133      	cbz	r3, 26a82 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   26a74:	221c      	movs	r2, #28
   26a76:	2100      	movs	r1, #0
   26a78:	f003 fc7b 	bl	2a372 <memset>
   26a7c:	612c      	str	r4, [r5, #16]
	return 0;
   26a7e:	2000      	movs	r0, #0
}
   26a80:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26a82:	f06f 0015 	mvn.w	r0, #21
   26a86:	e7fb      	b.n	26a80 <onoff_manager_init+0x1e>

00026a88 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   26a88:	b570      	push	{r4, r5, r6, lr}
   26a8a:	4604      	mov	r4, r0
   26a8c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   26a8e:	f7ff ffd9 	bl	26a44 <validate_args>

	if (rv < 0) {
   26a92:	1e05      	subs	r5, r0, #0
   26a94:	db31      	blt.n	26afa <onoff_request+0x72>
   26a96:	f04f 0320 	mov.w	r3, #32
   26a9a:	f3ef 8111 	mrs	r1, BASEPRI
   26a9e:	f383 8812 	msr	BASEPRI_MAX, r3
   26aa2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   26aa6:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26aa8:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   26aaa:	f64f 75ff 	movw	r5, #65535	; 0xffff
   26aae:	42ab      	cmp	r3, r5
   26ab0:	f000 0207 	and.w	r2, r0, #7
   26ab4:	d02e      	beq.n	26b14 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   26ab6:	2a02      	cmp	r2, #2
   26ab8:	d10e      	bne.n	26ad8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   26aba:	3301      	adds	r3, #1
   26abc:	8363      	strh	r3, [r4, #26]
	rv = state;
   26abe:	4615      	mov	r5, r2
		notify = true;
   26ac0:	2301      	movs	r3, #1
	__asm__ volatile(
   26ac2:	f381 8811 	msr	BASEPRI, r1
   26ac6:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   26aca:	b1b3      	cbz	r3, 26afa <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   26acc:	2300      	movs	r3, #0
   26ace:	4631      	mov	r1, r6
   26ad0:	4620      	mov	r0, r4
   26ad2:	f7ff ff93 	bl	269fc <notify_one>
   26ad6:	e010      	b.n	26afa <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   26ad8:	0783      	lsls	r3, r0, #30
   26ada:	d001      	beq.n	26ae0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   26adc:	2a06      	cmp	r2, #6
   26ade:	d10e      	bne.n	26afe <onoff_request+0x76>
	parent->next = child;
   26ae0:	2300      	movs	r3, #0
   26ae2:	6033      	str	r3, [r6, #0]
	return list->tail;
   26ae4:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   26ae6:	b993      	cbnz	r3, 26b0e <onoff_request+0x86>
	list->head = node;
   26ae8:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   26aec:	4615      	mov	r5, r2
   26aee:	b962      	cbnz	r2, 26b0a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   26af0:	460a      	mov	r2, r1
   26af2:	4620      	mov	r0, r4
   26af4:	2102      	movs	r1, #2
   26af6:	f7df f88b 	bl	5c10 <process_event>
		}
	}

	return rv;
}
   26afa:	4628      	mov	r0, r5
   26afc:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   26afe:	2a05      	cmp	r2, #5
   26b00:	bf0c      	ite	eq
   26b02:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   26b06:	f06f 0504 	mvnne.w	r5, #4
   26b0a:	2300      	movs	r3, #0
   26b0c:	e7d9      	b.n	26ac2 <onoff_request+0x3a>
	parent->next = child;
   26b0e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   26b10:	6066      	str	r6, [r4, #4]
}
   26b12:	e7eb      	b.n	26aec <onoff_request+0x64>
		rv = -EAGAIN;
   26b14:	f06f 050a 	mvn.w	r5, #10
   26b18:	e7f7      	b.n	26b0a <onoff_request+0x82>

00026b1a <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   26b1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   26b1c:	f04f 0320 	mov.w	r3, #32
   26b20:	f3ef 8211 	mrs	r2, BASEPRI
   26b24:	f383 8812 	msr	BASEPRI_MAX, r3
   26b28:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26b2c:	8b04      	ldrh	r4, [r0, #24]
   26b2e:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   26b32:	2c02      	cmp	r4, #2
   26b34:	d00a      	beq.n	26b4c <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   26b36:	2c01      	cmp	r4, #1
   26b38:	bf0c      	ite	eq
   26b3a:	f06f 0004 	mvneq.w	r0, #4
   26b3e:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   26b42:	f382 8811 	msr	BASEPRI, r2
   26b46:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   26b4a:	e008      	b.n	26b5e <onoff_release+0x44>
	mgr->refs -= 1U;
   26b4c:	8b43      	ldrh	r3, [r0, #26]
   26b4e:	3b01      	subs	r3, #1
   26b50:	b29b      	uxth	r3, r3
   26b52:	8343      	strh	r3, [r0, #26]
	if (stop) {
   26b54:	b923      	cbnz	r3, 26b60 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   26b56:	4621      	mov	r1, r4
   26b58:	f7df f85a 	bl	5c10 <process_event>
	int rv = state;
   26b5c:	4620      	mov	r0, r4
}
   26b5e:	bd10      	pop	{r4, pc}
	int rv = state;
   26b60:	4620      	mov	r0, r4
   26b62:	e7ee      	b.n	26b42 <onoff_release+0x28>

00026b64 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   26b64:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   26b66:	b1b0      	cbz	r0, 26b96 <onoff_cancel+0x32>
   26b68:	b1a9      	cbz	r1, 26b96 <onoff_cancel+0x32>
	__asm__ volatile(
   26b6a:	f04f 0220 	mov.w	r2, #32
   26b6e:	f3ef 8511 	mrs	r5, BASEPRI
   26b72:	f382 8812 	msr	BASEPRI_MAX, r2
   26b76:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26b7a:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   26b7c:	f7ff ff08 	bl	26990 <sys_slist_find_and_remove>
   26b80:	b130      	cbz	r0, 26b90 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   26b82:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   26b86:	f385 8811 	msr	BASEPRI, r5
   26b8a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   26b8e:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   26b90:	f06f 0077 	mvn.w	r0, #119	; 0x77
   26b94:	e7f7      	b.n	26b86 <onoff_cancel+0x22>
		return -EINVAL;
   26b96:	f06f 0015 	mvn.w	r0, #21
   26b9a:	e7f8      	b.n	26b8e <onoff_cancel+0x2a>

00026b9c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26b9c:	4604      	mov	r4, r0
   26b9e:	b508      	push	{r3, lr}
   26ba0:	4608      	mov	r0, r1
   26ba2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26ba4:	461a      	mov	r2, r3
   26ba6:	47a0      	blx	r4
	return z_impl_z_current_get();
   26ba8:	f7ff f9a2 	bl	25ef0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26bac:	f7e5 f8ec 	bl	bd88 <z_impl_k_thread_abort>

00026bb0 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   26bb0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   26bb4:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   26bb6:	0840      	lsrs	r0, r0, #1
   26bb8:	4770      	bx	lr

00026bba <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   26bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26bbc:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   26bbe:	f7ff fff7 	bl	26bb0 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   26bc2:	fab0 f080 	clz	r0, r0
   26bc6:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   26bca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   26bce:	00ca      	lsls	r2, r1, #3
   26bd0:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   26bd4:	1d17      	adds	r7, r2, #4
{
   26bd6:	460c      	mov	r4, r1
   26bd8:	3206      	adds	r2, #6
   26bda:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   26bdc:	b956      	cbnz	r6, 26bf4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   26bde:	2101      	movs	r1, #1
   26be0:	fa01 f000 	lsl.w	r0, r1, r0
   26be4:	68d9      	ldr	r1, [r3, #12]
   26be6:	4301      	orrs	r1, r0
   26be8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   26bea:	f8cc 4010 	str.w	r4, [ip, #16]
   26bee:	53dd      	strh	r5, [r3, r7]
   26bf0:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   26bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   26bf4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   26bf6:	3104      	adds	r1, #4
   26bf8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   26bfa:	53d8      	strh	r0, [r3, r7]
   26bfc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26c00:	529e      	strh	r6, [r3, r2]
   26c02:	80c5      	strh	r5, [r0, #6]
   26c04:	525d      	strh	r5, [r3, r1]
   26c06:	e7f4      	b.n	26bf2 <free_list_add+0x38>

00026c08 <free_list_remove_bidx>:
{
   26c08:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   26c0a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   26c0e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   26c10:	4299      	cmp	r1, r3
   26c12:	f102 0104 	add.w	r1, r2, #4
   26c16:	d10a      	bne.n	26c2e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   26c18:	2301      	movs	r3, #1
   26c1a:	fa03 f202 	lsl.w	r2, r3, r2
   26c1e:	68c3      	ldr	r3, [r0, #12]
   26c20:	ea23 0302 	bic.w	r3, r3, r2
   26c24:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   26c26:	2300      	movs	r3, #0
   26c28:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26c2c:	bd10      	pop	{r4, pc}
   26c2e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   26c30:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   26c34:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   26c38:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26c3c:	80cb      	strh	r3, [r1, #6]
   26c3e:	8082      	strh	r2, [r0, #4]
}
   26c40:	e7f4      	b.n	26c2c <free_list_remove_bidx+0x24>

00026c42 <free_list_remove>:
{
   26c42:	b508      	push	{r3, lr}
   26c44:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26c46:	f7ff ffb3 	bl	26bb0 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26c4a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   26c4e:	f1c2 021f 	rsb	r2, r2, #31
   26c52:	4618      	mov	r0, r3
}
   26c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   26c58:	f7ff bfd6 	b.w	26c08 <free_list_remove_bidx>

00026c5c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   26c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26c60:	fab1 f581 	clz	r5, r1
   26c64:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   26c68:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   26c6c:	4603      	mov	r3, r0
	if (b->next) {
   26c6e:	693a      	ldr	r2, [r7, #16]
{
   26c70:	460e      	mov	r6, r1
	if (b->next) {
   26c72:	b1c2      	cbz	r2, 26ca6 <alloc_chunk+0x4a>
   26c74:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   26c78:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   26c7a:	4618      	mov	r0, r3
   26c7c:	4621      	mov	r1, r4
   26c7e:	f7ff ff97 	bl	26bb0 <chunk_size>
   26c82:	42b0      	cmp	r0, r6
   26c84:	d306      	bcc.n	26c94 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   26c86:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   26c88:	4618      	mov	r0, r3
   26c8a:	f7ff ffbd 	bl	26c08 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   26c8e:	4620      	mov	r0, r4
   26c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   26c94:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   26c98:	f1b8 0801 	subs.w	r8, r8, #1
   26c9c:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   26c9e:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   26ca0:	d001      	beq.n	26ca6 <alloc_chunk+0x4a>
   26ca2:	4282      	cmp	r2, r0
   26ca4:	d1e8      	bne.n	26c78 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   26ca6:	f1c5 0220 	rsb	r2, r5, #32
   26caa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26cae:	4094      	lsls	r4, r2
   26cb0:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   26cb2:	4014      	ands	r4, r2
   26cb4:	d0eb      	beq.n	26c8e <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   26cb6:	fa94 f2a4 	rbit	r2, r4
   26cba:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   26cbe:	1d11      	adds	r1, r2, #4
   26cc0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   26cc4:	4621      	mov	r1, r4
   26cc6:	e7df      	b.n	26c88 <alloc_chunk+0x2c>

00026cc8 <merge_chunks>:
{
   26cc8:	b538      	push	{r3, r4, r5, lr}
   26cca:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26ccc:	f7ff ff70 	bl	26bb0 <chunk_size>
{
   26cd0:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26cd2:	4604      	mov	r4, r0
   26cd4:	4611      	mov	r1, r2
   26cd6:	4618      	mov	r0, r3
   26cd8:	f7ff ff6a 	bl	26bb0 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   26cdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   26ce0:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26ce2:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   26ce4:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   26ce6:	4618      	mov	r0, r3
   26ce8:	f7ff ff62 	bl	26bb0 <chunk_size>
	void *cmem = &buf[c];
   26cec:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26cee:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   26cf2:	bd38      	pop	{r3, r4, r5, pc}

00026cf4 <split_chunks>:
{
   26cf4:	b538      	push	{r3, r4, r5, lr}
   26cf6:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   26cf8:	f7ff ff5a 	bl	26bb0 <chunk_size>
{
   26cfc:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   26cfe:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   26d00:	1a51      	subs	r1, r2, r1
   26d02:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   26d06:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26d08:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   26d0a:	8060      	strh	r0, [r4, #2]
   26d0c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26d10:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   26d12:	8044      	strh	r4, [r0, #2]
   26d14:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   26d18:	4618      	mov	r0, r3
   26d1a:	4611      	mov	r1, r2
   26d1c:	f7ff ff48 	bl	26bb0 <chunk_size>
	void *cmem = &buf[c];
   26d20:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26d22:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   26d26:	bd38      	pop	{r3, r4, r5, pc}

00026d28 <free_chunk>:
{
   26d28:	b538      	push	{r3, r4, r5, lr}
   26d2a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26d2c:	f7ff ff40 	bl	26bb0 <chunk_size>
   26d30:	460c      	mov	r4, r1
   26d32:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   26d34:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26d38:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26d3a:	07da      	lsls	r2, r3, #31
   26d3c:	d40a      	bmi.n	26d54 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   26d3e:	4628      	mov	r0, r5
   26d40:	f7ff ff7f 	bl	26c42 <free_list_remove>
	return c + chunk_size(h, c);
   26d44:	4621      	mov	r1, r4
   26d46:	4628      	mov	r0, r5
   26d48:	f7ff ff32 	bl	26bb0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26d4c:	1822      	adds	r2, r4, r0
   26d4e:	4628      	mov	r0, r5
   26d50:	f7ff ffba 	bl	26cc8 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   26d54:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26d58:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   26d5a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26d5e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   26d60:	07db      	lsls	r3, r3, #31
   26d62:	d40c      	bmi.n	26d7e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   26d64:	4628      	mov	r0, r5
   26d66:	f7ff ff6c 	bl	26c42 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   26d6a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   26d6e:	4622      	mov	r2, r4
   26d70:	1a61      	subs	r1, r4, r1
   26d72:	4628      	mov	r0, r5
   26d74:	f7ff ffa8 	bl	26cc8 <merge_chunks>
   26d78:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26d7c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   26d7e:	4621      	mov	r1, r4
   26d80:	4628      	mov	r0, r5
}
   26d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   26d86:	f7ff bf18 	b.w	26bba <free_list_add>

00026d8a <sys_heap_free>:
	if (mem == NULL) {
   26d8a:	b161      	cbz	r1, 26da6 <sys_heap_free+0x1c>
   26d8c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26d8e:	3904      	subs	r1, #4
   26d90:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   26d92:	f021 0307 	bic.w	r3, r1, #7
   26d96:	4403      	add	r3, r0
	free_chunk(h, c);
   26d98:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   26d9a:	885a      	ldrh	r2, [r3, #2]
   26d9c:	f022 0201 	bic.w	r2, r2, #1
   26da0:	805a      	strh	r2, [r3, #2]
   26da2:	f7ff bfc1 	b.w	26d28 <free_chunk>
}
   26da6:	4770      	bx	lr

00026da8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   26da8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   26daa:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   26dac:	b909      	cbnz	r1, 26db2 <sys_heap_alloc+0xa>
		return NULL;
   26dae:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   26db0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   26db2:	68ab      	ldr	r3, [r5, #8]
   26db4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   26db8:	d9f9      	bls.n	26dae <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26dba:	310b      	adds	r1, #11
   26dbc:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26dbe:	4621      	mov	r1, r4
   26dc0:	4628      	mov	r0, r5
   26dc2:	f7ff ff4b 	bl	26c5c <alloc_chunk>
	if (c == 0U) {
   26dc6:	4606      	mov	r6, r0
   26dc8:	2800      	cmp	r0, #0
   26dca:	d0f0      	beq.n	26dae <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   26dcc:	4601      	mov	r1, r0
   26dce:	4628      	mov	r0, r5
   26dd0:	f7ff feee 	bl	26bb0 <chunk_size>
   26dd4:	42a0      	cmp	r0, r4
   26dd6:	d907      	bls.n	26de8 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   26dd8:	1932      	adds	r2, r6, r4
   26dda:	4628      	mov	r0, r5
   26ddc:	f7ff ff8a 	bl	26cf4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   26de0:	4611      	mov	r1, r2
   26de2:	4628      	mov	r0, r5
   26de4:	f7ff fee9 	bl	26bba <free_list_add>
	void *cmem = &buf[c];
   26de8:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26dec:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26dee:	8853      	ldrh	r3, [r2, #2]
   26df0:	f043 0301 	orr.w	r3, r3, #1
   26df4:	8053      	strh	r3, [r2, #2]
   26df6:	3004      	adds	r0, #4
	return mem;
   26df8:	e7da      	b.n	26db0 <sys_heap_alloc+0x8>

00026dfa <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   26dfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26dfe:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   26e00:	424a      	negs	r2, r1
   26e02:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   26e06:	ea31 0202 	bics.w	r2, r1, r2
{
   26e0a:	4603      	mov	r3, r0
	if (align != rew) {
   26e0c:	d00a      	beq.n	26e24 <sys_heap_aligned_alloc+0x2a>
		return false;
   26e0e:	2f04      	cmp	r7, #4
   26e10:	463a      	mov	r2, r7
   26e12:	46b9      	mov	r9, r7
   26e14:	bf28      	it	cs
   26e16:	2204      	movcs	r2, #4
		align -= rew;
   26e18:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   26e1a:	b974      	cbnz	r4, 26e3a <sys_heap_aligned_alloc+0x40>
		return NULL;
   26e1c:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   26e1e:	4628      	mov	r0, r5
   26e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   26e24:	2904      	cmp	r1, #4
   26e26:	d804      	bhi.n	26e32 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   26e28:	4621      	mov	r1, r4
}
   26e2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   26e2e:	f7ff bfbb 	b.w	26da8 <sys_heap_alloc>
		rew = 0;
   26e32:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   26e36:	2204      	movs	r2, #4
   26e38:	e7ef      	b.n	26e1a <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   26e3a:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   26e3c:	68b3      	ldr	r3, [r6, #8]
   26e3e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   26e42:	d9eb      	bls.n	26e1c <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26e44:	f104 010b 	add.w	r1, r4, #11
   26e48:	4439      	add	r1, r7
   26e4a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   26e4c:	08c9      	lsrs	r1, r1, #3
   26e4e:	4630      	mov	r0, r6
   26e50:	f7ff ff04 	bl	26c5c <alloc_chunk>
	if (c0 == 0) {
   26e54:	4680      	mov	r8, r0
   26e56:	2800      	cmp	r0, #0
   26e58:	d0e0      	beq.n	26e1c <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   26e5a:	f109 0504 	add.w	r5, r9, #4
   26e5e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   26e62:	1e7b      	subs	r3, r7, #1
   26e64:	4435      	add	r5, r6
   26e66:	441d      	add	r5, r3
   26e68:	427f      	negs	r7, r7
   26e6a:	403d      	ands	r5, r7
   26e6c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26e70:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26e72:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26e74:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26e76:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26e78:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   26e7c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   26e7e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26e82:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   26e86:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   26e8a:	d208      	bcs.n	26e9e <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   26e8c:	4601      	mov	r1, r0
   26e8e:	463a      	mov	r2, r7
   26e90:	4630      	mov	r0, r6
   26e92:	f7ff ff2f 	bl	26cf4 <split_chunks>
		free_list_add(h, c0);
   26e96:	4641      	mov	r1, r8
   26e98:	4630      	mov	r0, r6
   26e9a:	f7ff fe8e 	bl	26bba <free_list_add>
	return c + chunk_size(h, c);
   26e9e:	4639      	mov	r1, r7
   26ea0:	4630      	mov	r0, r6
   26ea2:	f7ff fe85 	bl	26bb0 <chunk_size>
   26ea6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   26ea8:	4284      	cmp	r4, r0
   26eaa:	d207      	bcs.n	26ebc <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   26eac:	4630      	mov	r0, r6
   26eae:	4622      	mov	r2, r4
   26eb0:	f7ff ff20 	bl	26cf4 <split_chunks>
		free_list_add(h, c_end);
   26eb4:	4621      	mov	r1, r4
   26eb6:	4630      	mov	r0, r6
   26eb8:	f7ff fe7f 	bl	26bba <free_list_add>
	void *cmem = &buf[c];
   26ebc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26ec0:	8873      	ldrh	r3, [r6, #2]
   26ec2:	f043 0301 	orr.w	r3, r3, #1
   26ec6:	8073      	strh	r3, [r6, #2]
   26ec8:	e7a9      	b.n	26e1e <sys_heap_aligned_alloc+0x24>

00026eca <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   26eca:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   26ecc:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   26ece:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   26ed0:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   26ed4:	f021 0107 	bic.w	r1, r1, #7
{
   26ed8:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   26eda:	1acd      	subs	r5, r1, r3
   26edc:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   26ede:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   26ee0:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   26ee4:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   26ee8:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26eea:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   26eec:	2600      	movs	r6, #0
   26eee:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   26ef0:	f1c0 0020 	rsb	r0, r0, #32
   26ef4:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   26ef8:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   26efa:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   26efc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   26f00:	4284      	cmp	r4, r0
   26f02:	d118      	bne.n	26f36 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26f04:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26f06:	f040 0001 	orr.w	r0, r0, #1
   26f0a:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   26f0c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   26f10:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26f12:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   26f14:	801e      	strh	r6, [r3, #0]
   26f16:	8067      	strh	r7, [r4, #2]
   26f18:	195c      	adds	r4, r3, r5
   26f1a:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   26f1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   26f22:	8066      	strh	r6, [r4, #2]
   26f24:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26f26:	8850      	ldrh	r0, [r2, #2]
   26f28:	f040 0001 	orr.w	r0, r0, #1
   26f2c:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   26f2e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   26f30:	4618      	mov	r0, r3
   26f32:	f7ff be42 	b.w	26bba <free_list_add>
		h->buckets[i].next = 0;
   26f36:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   26f3a:	e7e1      	b.n	26f00 <sys_heap_init+0x36>

00026f3c <_ldiv5>:
	uint32_t v_lo = *v;
   26f3c:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   26f40:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   26f42:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   26f46:	fba2 2403 	umull	r2, r4, r2, r3
   26f4a:	18d5      	adds	r5, r2, r3
   26f4c:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   26f50:	fba1 1303 	umull	r1, r3, r1, r3
   26f54:	1852      	adds	r2, r2, r1
   26f56:	eb44 0403 	adc.w	r4, r4, r3
   26f5a:	1952      	adds	r2, r2, r5
   26f5c:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   26f60:	1889      	adds	r1, r1, r2
   26f62:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   26f66:	e9c0 1300 	strd	r1, r3, [r0]
}
   26f6a:	bd30      	pop	{r4, r5, pc}

00026f6c <_get_digit>:
	if (*digit_count > 0) {
   26f6c:	680a      	ldr	r2, [r1, #0]
   26f6e:	2a00      	cmp	r2, #0
{
   26f70:	b510      	push	{r4, lr}
   26f72:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   26f74:	dd0f      	ble.n	26f96 <_get_digit+0x2a>
		--*digit_count;
   26f76:	3a01      	subs	r2, #1
   26f78:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   26f7a:	681a      	ldr	r2, [r3, #0]
   26f7c:	6844      	ldr	r4, [r0, #4]
   26f7e:	200a      	movs	r0, #10
   26f80:	fba2 1200 	umull	r1, r2, r2, r0
   26f84:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   26f88:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   26f8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   26f8e:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   26f92:	3030      	adds	r0, #48	; 0x30
}
   26f94:	bd10      	pop	{r4, pc}
		rval = '0';
   26f96:	2030      	movs	r0, #48	; 0x30
   26f98:	e7fc      	b.n	26f94 <_get_digit+0x28>

00026f9a <encode_uint>:
{
   26f9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f9e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   26fa0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   26fa2:	2b6f      	cmp	r3, #111	; 0x6f
{
   26fa4:	4680      	mov	r8, r0
   26fa6:	460f      	mov	r7, r1
   26fa8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26faa:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   26fae:	d029      	beq.n	27004 <encode_uint+0x6a>
   26fb0:	d824      	bhi.n	26ffc <encode_uint+0x62>
		return 16;
   26fb2:	2b58      	cmp	r3, #88	; 0x58
   26fb4:	bf14      	ite	ne
   26fb6:	260a      	movne	r6, #10
   26fb8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   26fba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   26fbe:	4632      	mov	r2, r6
   26fc0:	2300      	movs	r3, #0
   26fc2:	4640      	mov	r0, r8
   26fc4:	4639      	mov	r1, r7
   26fc6:	f7da f8eb 	bl	11a0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26fca:	2a09      	cmp	r2, #9
   26fcc:	b2d4      	uxtb	r4, r2
   26fce:	d81e      	bhi.n	2700e <encode_uint+0x74>
   26fd0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   26fd2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26fd4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   26fd6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26fda:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   26fde:	d301      	bcc.n	26fe4 <encode_uint+0x4a>
   26fe0:	45d1      	cmp	r9, sl
   26fe2:	d811      	bhi.n	27008 <encode_uint+0x6e>
	if (conv->flag_hash) {
   26fe4:	782b      	ldrb	r3, [r5, #0]
   26fe6:	069b      	lsls	r3, r3, #26
   26fe8:	d505      	bpl.n	26ff6 <encode_uint+0x5c>
		if (radix == 8) {
   26fea:	2e08      	cmp	r6, #8
   26fec:	d115      	bne.n	2701a <encode_uint+0x80>
			conv->altform_0 = true;
   26fee:	78ab      	ldrb	r3, [r5, #2]
   26ff0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   26ff4:	70ab      	strb	r3, [r5, #2]
}
   26ff6:	4648      	mov	r0, r9
   26ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   26ffc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   27000:	2b70      	cmp	r3, #112	; 0x70
   27002:	e7d7      	b.n	26fb4 <encode_uint+0x1a>
	switch (specifier) {
   27004:	2608      	movs	r6, #8
   27006:	e7d8      	b.n	26fba <encode_uint+0x20>
		value /= radix;
   27008:	4680      	mov	r8, r0
   2700a:	460f      	mov	r7, r1
   2700c:	e7d7      	b.n	26fbe <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2700e:	f1bb 0f19 	cmp.w	fp, #25
   27012:	bf94      	ite	ls
   27014:	3437      	addls	r4, #55	; 0x37
   27016:	3457      	addhi	r4, #87	; 0x57
   27018:	e7db      	b.n	26fd2 <encode_uint+0x38>
		} else if (radix == 16) {
   2701a:	2e10      	cmp	r6, #16
   2701c:	d1eb      	bne.n	26ff6 <encode_uint+0x5c>
			conv->altform_0c = true;
   2701e:	78ab      	ldrb	r3, [r5, #2]
   27020:	f043 0310 	orr.w	r3, r3, #16
   27024:	e7e6      	b.n	26ff4 <encode_uint+0x5a>

00027026 <outs>:
{
   27026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2702a:	4607      	mov	r7, r0
   2702c:	4688      	mov	r8, r1
   2702e:	4615      	mov	r5, r2
   27030:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27032:	4614      	mov	r4, r2
   27034:	42b4      	cmp	r4, r6
   27036:	eba4 0005 	sub.w	r0, r4, r5
   2703a:	d302      	bcc.n	27042 <outs+0x1c>
   2703c:	b93e      	cbnz	r6, 2704e <outs+0x28>
   2703e:	7823      	ldrb	r3, [r4, #0]
   27040:	b12b      	cbz	r3, 2704e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   27042:	f814 0b01 	ldrb.w	r0, [r4], #1
   27046:	4641      	mov	r1, r8
   27048:	47b8      	blx	r7
		if (rc < 0) {
   2704a:	2800      	cmp	r0, #0
   2704c:	daf2      	bge.n	27034 <outs+0xe>
}
   2704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027052 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   27052:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   27056:	4770      	bx	lr

00027058 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
   27058:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
   2705a:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
   2705e:	42ac      	cmp	r4, r5
   27060:	d207      	bcs.n	27072 <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
   27062:	6906      	ldr	r6, [r0, #16]
   27064:	f7ff fff5 	bl	27052 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   27068:	fbb0 f0f6 	udiv	r0, r0, r6
   2706c:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
   2706e:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   27072:	1b63      	subs	r3, r4, r5
   27074:	4258      	negs	r0, r3
   27076:	4158      	adcs	r0, r3
   27078:	bd70      	pop	{r4, r5, r6, pc}

0002707a <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2707a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
   2707e:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
   27080:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
   27084:	454c      	cmp	r4, r9
{
   27086:	4605      	mov	r5, r0
   27088:	460e      	mov	r6, r1
   2708a:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
   2708c:	d907      	bls.n	2709e <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   2708e:	6907      	ldr	r7, [r0, #16]
   27090:	f7ff ffdf 	bl	27052 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   27094:	fbb0 f0f7 	udiv	r0, r0, r7
   27098:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   2709a:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2709e:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   270a0:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   270a2:	692f      	ldr	r7, [r5, #16]
   270a4:	b18b      	cbz	r3, 270ca <ring_buf_put_claim+0x50>
   270a6:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
   270a8:	443c      	add	r4, r7
   270aa:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   270ae:	4540      	cmp	r0, r8
   270b0:	bf28      	it	cs
   270b2:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
   270b4:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   270b6:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
   270b8:	42b8      	cmp	r0, r7
   270ba:	bf28      	it	cs
   270bc:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   270be:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   270c0:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   270c2:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
   270c4:	60a9      	str	r1, [r5, #8]

	return allocated;
}
   270c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   270ca:	fbb1 f3f7 	udiv	r3, r1, r7
   270ce:	fb07 1313 	mls	r3, r7, r3, r1
   270d2:	e7e9      	b.n	270a8 <ring_buf_put_claim+0x2e>

000270d4 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   270d4:	b570      	push	{r4, r5, r6, lr}
   270d6:	4605      	mov	r5, r0
   270d8:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   270da:	f7ff ffba 	bl	27052 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
   270de:	686e      	ldr	r6, [r5, #4]
   270e0:	692a      	ldr	r2, [r5, #16]
   270e2:	682b      	ldr	r3, [r5, #0]
   270e4:	1931      	adds	r1, r6, r4
   270e6:	4413      	add	r3, r2
   270e8:	4299      	cmp	r1, r3
   270ea:	d80c      	bhi.n	27106 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   270ec:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
   270ee:	bf83      	ittte	hi
   270f0:	fbb0 f3f2 	udivhi	r3, r0, r2
   270f4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   270f8:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
   270fa:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
   270fc:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   270fe:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
   27102:	2000      	movs	r0, #0
}
   27104:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   27106:	f06f 0015 	mvn.w	r0, #21
   2710a:	e7fb      	b.n	27104 <ring_buf_put_finish+0x30>

0002710c <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   2710c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27110:	4680      	mov	r8, r0
   27112:	460e      	mov	r6, r1
   27114:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   27116:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   27118:	462a      	mov	r2, r5
   2711a:	a901      	add	r1, sp, #4
   2711c:	4640      	mov	r0, r8
   2711e:	f7ff ffac 	bl	2707a <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   27122:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   27124:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   27126:	4602      	mov	r2, r0
   27128:	9801      	ldr	r0, [sp, #4]
   2712a:	f003 f917 	bl	2a35c <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   2712e:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   27130:	4427      	add	r7, r4
		data += partial_size;
   27132:	4426      	add	r6, r4
	} while (size && partial_size);
   27134:	d001      	beq.n	2713a <ring_buf_put+0x2e>
   27136:	2c00      	cmp	r4, #0
   27138:	d1ee      	bne.n	27118 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   2713a:	4639      	mov	r1, r7
   2713c:	4640      	mov	r0, r8
   2713e:	f7ff ffc9 	bl	270d4 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   27142:	4638      	mov	r0, r7
   27144:	b002      	add	sp, #8
   27146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002714a <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   2714e:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   27150:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   27152:	42b3      	cmp	r3, r6
{
   27154:	4604      	mov	r4, r0
   27156:	460f      	mov	r7, r1
   27158:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   2715a:	d907      	bls.n	2716c <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
   2715c:	6905      	ldr	r5, [r0, #16]
   2715e:	f7ff ff78 	bl	27052 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   27162:	fbb0 f1f5 	udiv	r1, r0, r5
   27166:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
   27168:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2716c:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   2716e:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   27170:	6923      	ldr	r3, [r4, #16]
   27172:	b185      	cbz	r5, 27196 <ring_buf_get_claim+0x4c>
   27174:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   27176:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   27178:	4540      	cmp	r0, r8
   2717a:	bf28      	it	cs
   2717c:	4640      	movcs	r0, r8
   2717e:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   27180:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   27182:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
   27184:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   27186:	bf28      	it	cs
   27188:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   2718a:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
   2718c:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   2718e:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   27190:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
   27192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   27196:	fbb1 f5f3 	udiv	r5, r1, r3
   2719a:	fb03 1515 	mls	r5, r3, r5, r1
   2719e:	e7ea      	b.n	27176 <ring_buf_get_claim+0x2c>

000271a0 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   271a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   271a2:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   271a4:	68c3      	ldr	r3, [r0, #12]
   271a6:	42b3      	cmp	r3, r6
{
   271a8:	4605      	mov	r5, r0
   271aa:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   271ac:	d914      	bls.n	271d8 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
   271ae:	6907      	ldr	r7, [r0, #16]
   271b0:	f7ff ff4f 	bl	27052 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   271b4:	fbb0 f1f7 	udiv	r1, r0, r7
   271b8:	3901      	subs	r1, #1
   271ba:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
   271be:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
   271c0:	6829      	ldr	r1, [r5, #0]
   271c2:	4421      	add	r1, r4
   271c4:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   271c6:	bf9f      	itttt	ls
   271c8:	1ac9      	subls	r1, r1, r3
   271ca:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   271cc:	60e9      	strls	r1, [r5, #12]

	return 0;
   271ce:	2000      	movls	r0, #0
		return -EINVAL;
   271d0:	bf88      	it	hi
   271d2:	f06f 0015 	mvnhi.w	r0, #21
}
   271d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   271d8:	2300      	movs	r3, #0
   271da:	e7f1      	b.n	271c0 <ring_buf_get_finish+0x20>

000271dc <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   271dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   271e0:	4680      	mov	r8, r0
   271e2:	460d      	mov	r5, r1
   271e4:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   271e6:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   271e8:	4632      	mov	r2, r6
   271ea:	a901      	add	r1, sp, #4
   271ec:	4640      	mov	r0, r8
   271ee:	f7ff ffac 	bl	2714a <ring_buf_get_claim>
   271f2:	4604      	mov	r4, r0
		if (data) {
   271f4:	b12d      	cbz	r5, 27202 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   271f6:	4602      	mov	r2, r0
   271f8:	9901      	ldr	r1, [sp, #4]
   271fa:	4628      	mov	r0, r5
   271fc:	f003 f8ae 	bl	2a35c <memcpy>
			data += partial_size;
   27200:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   27202:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   27204:	4427      	add	r7, r4
	} while (size && partial_size);
   27206:	d001      	beq.n	2720c <ring_buf_get+0x30>
   27208:	2c00      	cmp	r4, #0
   2720a:	d1ed      	bne.n	271e8 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   2720c:	4639      	mov	r1, r7
   2720e:	4640      	mov	r0, r8
   27210:	f7ff ffc6 	bl	271a0 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   27214:	4638      	mov	r0, r7
   27216:	b002      	add	sp, #8
   27218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002721c <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   2721c:	4602      	mov	r2, r0
   2721e:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   27220:	68c0      	ldr	r0, [r0, #12]
   27222:	6814      	ldr	r4, [r2, #0]
   27224:	42a0      	cmp	r0, r4
   27226:	d904      	bls.n	27232 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   27228:	3801      	subs	r0, #1
   2722a:	1b00      	subs	r0, r0, r4
   2722c:	6008      	str	r0, [r1, #0]

		return false;
   2722e:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   27230:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27232:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   27234:	b918      	cbnz	r0, 2723e <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27236:	3b01      	subs	r3, #1
   27238:	1b1b      	subs	r3, r3, r4
   2723a:	600b      	str	r3, [r1, #0]
		return false;
   2723c:	e7f8      	b.n	27230 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   2723e:	1b1b      	subs	r3, r3, r4
   27240:	600b      	str	r3, [r1, #0]
	return true;
   27242:	2001      	movs	r0, #1
   27244:	e7f4      	b.n	27230 <free_space+0x14>

00027246 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   27246:	b510      	push	{r4, lr}
   27248:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2724a:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2724c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2724e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27250:	07d2      	lsls	r2, r2, #31
   27252:	d502      	bpl.n	2725a <idx_inc+0x14>
		return i & (buffer->size - 1);
   27254:	3b01      	subs	r3, #1
   27256:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   27258:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2725a:	4298      	cmp	r0, r3
   2725c:	bf28      	it	cs
   2725e:	1ac0      	subcs	r0, r0, r3
   27260:	e7fa      	b.n	27258 <idx_inc+0x12>

00027262 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   27262:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27264:	69c2      	ldr	r2, [r0, #28]
{
   27266:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   27268:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2726a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2726c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27270:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27274:	462a      	mov	r2, r5
   27276:	6801      	ldr	r1, [r0, #0]
{
   27278:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2727a:	f7ff ffe4 	bl	27246 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2727e:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27280:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27282:	462a      	mov	r2, r5
   27284:	4620      	mov	r0, r4
   27286:	f7ff ffde 	bl	27246 <idx_inc>
   2728a:	6060      	str	r0, [r4, #4]
}
   2728c:	bd38      	pop	{r3, r4, r5, pc}

0002728e <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   2728e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   27292:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   27296:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   2729a:	461f      	mov	r7, r3
	*user_packet = false;
   2729c:	2300      	movs	r3, #0
   2729e:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   272a0:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   272a4:	f003 0303 	and.w	r3, r3, #3
   272a8:	2b02      	cmp	r3, #2
{
   272aa:	4604      	mov	r4, r0
   272ac:	468b      	mov	fp, r1
   272ae:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   272b0:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   272b4:	d103      	bne.n	272be <drop_item_locked+0x30>
		return item->skip.len;
   272b6:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   272ba:	08ad      	lsrs	r5, r5, #2
   272bc:	d12e      	bne.n	2731c <drop_item_locked+0x8e>
   272be:	69a3      	ldr	r3, [r4, #24]
   272c0:	4630      	mov	r0, r6
   272c2:	4798      	blx	r3
   272c4:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   272c6:	f1b8 0f00 	cmp.w	r8, #0
   272ca:	d036      	beq.n	2733a <drop_item_locked+0xac>
		if (item->hdr.busy) {
   272cc:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   272d0:	079b      	lsls	r3, r3, #30
   272d2:	d52f      	bpl.n	27334 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   272d4:	f10b 0101 	add.w	r1, fp, #1
   272d8:	4620      	mov	r0, r4
   272da:	f7ff ffc2 	bl	27262 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   272de:	6861      	ldr	r1, [r4, #4]
   272e0:	462a      	mov	r2, r5
   272e2:	4620      	mov	r0, r4
   272e4:	f7ff ffaf 	bl	27246 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   272e8:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   272ea:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   272ec:	462a      	mov	r2, r5
   272ee:	4620      	mov	r0, r4
   272f0:	f7ff ffa9 	bl	27246 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   272f4:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   272f6:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   272f8:	68e1      	ldr	r1, [r4, #12]
   272fa:	4620      	mov	r0, r4
   272fc:	f7ff ffa3 	bl	27246 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   27300:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   27302:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   27306:	f002 0203 	and.w	r2, r2, #3
   2730a:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2730c:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   27310:	d10c      	bne.n	2732c <drop_item_locked+0x9e>
		return item->skip.len;
   27312:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   27316:	089b      	lsrs	r3, r3, #2
   27318:	d008      	beq.n	2732c <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   2731a:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2731c:	68e1      	ldr	r1, [r4, #12]
   2731e:	462a      	mov	r2, r5
   27320:	4620      	mov	r0, r4
   27322:	f7ff ff90 	bl	27246 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   27326:	e9c4 0002 	strd	r0, r0, [r4, #8]
   2732a:	e007      	b.n	2733c <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   2732c:	69a3      	ldr	r3, [r4, #24]
   2732e:	4630      	mov	r0, r6
   27330:	4798      	blx	r3
   27332:	4405      	add	r5, r0
			*user_packet = true;
   27334:	2301      	movs	r3, #1
   27336:	703b      	strb	r3, [r7, #0]
   27338:	e7f0      	b.n	2731c <drop_item_locked+0x8e>
		item = NULL;
   2733a:	4646      	mov	r6, r8
	}

	return item;
}
   2733c:	4630      	mov	r0, r6
   2733e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027342 <mpsc_pbuf_init>:
{
   27342:	b538      	push	{r3, r4, r5, lr}
   27344:	460d      	mov	r5, r1
   27346:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   27348:	221c      	movs	r2, #28
   2734a:	2100      	movs	r1, #0
   2734c:	f003 f811 	bl	2a372 <memset>
	buffer->get_wlen = cfg->get_wlen;
   27350:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
   27352:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
   27354:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   27356:	68ab      	ldr	r3, [r5, #8]
   27358:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2735a:	682b      	ldr	r3, [r5, #0]
   2735c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   2735e:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   27360:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   27362:	b122      	cbz	r2, 2736e <mpsc_pbuf_init+0x2c>
   27364:	1e51      	subs	r1, r2, #1
   27366:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   27368:	bf08      	it	eq
   2736a:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   2736e:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   27370:	2201      	movs	r2, #1
   27372:	f104 0024 	add.w	r0, r4, #36	; 0x24
   27376:	2100      	movs	r1, #0
}
   27378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2737c:	f006 b9cd 	b.w	2d71a <z_impl_k_sem_init>

00027380 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   27380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27384:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   27386:	6a03      	ldr	r3, [r0, #32]
   27388:	3b01      	subs	r3, #1
   2738a:	428b      	cmp	r3, r1
{
   2738c:	b085      	sub	sp, #20
   2738e:	4604      	mov	r4, r0
   27390:	460f      	mov	r7, r1
   27392:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   27394:	d364      	bcc.n	27460 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
   27396:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   27398:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   2739a:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
   2739e:	f04f 0320 	mov.w	r3, #32
   273a2:	f3ef 8611 	mrs	r6, BASEPRI
   273a6:	f383 8812 	msr	BASEPRI_MAX, r3
   273aa:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   273ae:	a903      	add	r1, sp, #12
   273b0:	4620      	mov	r0, r4
   273b2:	f7ff ff33 	bl	2721c <free_space>
		if (free_wlen >= wlen) {
   273b6:	9903      	ldr	r1, [sp, #12]
   273b8:	42b9      	cmp	r1, r7
   273ba:	d321      	bcc.n	27400 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   273bc:	6821      	ldr	r1, [r4, #0]
			item =
   273be:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   273c0:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   273c4:	f022 0203 	bic.w	r2, r2, #3
   273c8:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   273cc:	4620      	mov	r0, r4
   273ce:	463a      	mov	r2, r7
			item =
   273d0:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   273d4:	f7ff ff37 	bl	27246 <idx_inc>
		cont = false;
   273d8:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   273da:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   273dc:	f386 8811 	msr	BASEPRI, r6
   273e0:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   273e4:	2b00      	cmp	r3, #0
   273e6:	d03d      	beq.n	27464 <mpsc_pbuf_alloc+0xe4>
   273e8:	2d00      	cmp	r5, #0
   273ea:	d0d8      	beq.n	2739e <mpsc_pbuf_alloc+0x1e>
   273ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
   273f0:	2b00      	cmp	r3, #0
   273f2:	d0d4      	beq.n	2739e <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
   273f4:	4629      	mov	r1, r5
   273f6:	6963      	ldr	r3, [r4, #20]
   273f8:	4620      	mov	r0, r4
   273fa:	4798      	blx	r3
			dropped_item = NULL;
   273fc:	2500      	movs	r5, #0
   273fe:	e7ce      	b.n	2739e <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   27400:	b128      	cbz	r0, 2740e <mpsc_pbuf_alloc+0x8e>
   27402:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   27404:	4620      	mov	r0, r4
   27406:	f7ff ff2c 	bl	27262 <add_skip_item>
			cont = true;
   2740a:	9b01      	ldr	r3, [sp, #4]
   2740c:	e7e6      	b.n	273dc <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2740e:	ea58 0309 	orrs.w	r3, r8, r9
   27412:	d017      	beq.n	27444 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
   27414:	f006 f882 	bl	2d51c <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27418:	b9a0      	cbnz	r0, 27444 <mpsc_pbuf_alloc+0xc4>
   2741a:	f386 8811 	msr	BASEPRI, r6
   2741e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   27422:	4642      	mov	r2, r8
   27424:	464b      	mov	r3, r9
   27426:	4658      	mov	r0, fp
   27428:	f7fe f88a 	bl	25540 <z_impl_k_sem_take>
	__asm__ volatile(
   2742c:	f04f 0320 	mov.w	r3, #32
   27430:	f3ef 8611 	mrs	r6, BASEPRI
   27434:	f383 8812 	msr	BASEPRI_MAX, r3
   27438:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   2743c:	fab0 f380 	clz	r3, r0
   27440:	095b      	lsrs	r3, r3, #5
   27442:	e7cb      	b.n	273dc <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   27444:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   27446:	9903      	ldr	r1, [sp, #12]
   27448:	f10d 030b 	add.w	r3, sp, #11
   2744c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   27450:	4620      	mov	r0, r4
   27452:	f7ff ff1c 	bl	2728e <drop_item_locked>
			cont = dropped_item != NULL;
   27456:	1e03      	subs	r3, r0, #0
   27458:	4605      	mov	r5, r0
   2745a:	bf18      	it	ne
   2745c:	2301      	movne	r3, #1
   2745e:	e7bd      	b.n	273dc <mpsc_pbuf_alloc+0x5c>
		return NULL;
   27460:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   27464:	4650      	mov	r0, sl
   27466:	b005      	add	sp, #20
   27468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002746c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2746c:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   2746e:	6983      	ldr	r3, [r0, #24]
{
   27470:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   27472:	4608      	mov	r0, r1
{
   27474:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27476:	4798      	blx	r3
   27478:	4602      	mov	r2, r0
   2747a:	f04f 0320 	mov.w	r3, #32
   2747e:	f3ef 8611 	mrs	r6, BASEPRI
   27482:	f383 8812 	msr	BASEPRI_MAX, r3
   27486:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2748a:	782b      	ldrb	r3, [r5, #0]
   2748c:	f043 0301 	orr.w	r3, r3, #1
   27490:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27492:	6861      	ldr	r1, [r4, #4]
   27494:	4620      	mov	r0, r4
   27496:	f7ff fed6 	bl	27246 <idx_inc>
   2749a:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
   2749c:	f386 8811 	msr	BASEPRI, r6
   274a0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   274a4:	bd70      	pop	{r4, r5, r6, pc}

000274a6 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   274a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274aa:	4604      	mov	r4, r0
	__asm__ volatile(
   274ac:	f04f 0320 	mov.w	r3, #32
   274b0:	f3ef 8611 	mrs	r6, BASEPRI
   274b4:	f383 8812 	msr	BASEPRI_MAX, r3
   274b8:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   274bc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   274c0:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   274c2:	bf88      	it	hi
   274c4:	6a23      	ldrhi	r3, [r4, #32]
   274c6:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   274c8:	b1f3      	cbz	r3, 27508 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   274ca:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   274cc:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   274d0:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   274d4:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   274d8:	d016      	beq.n	27508 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   274da:	2b02      	cmp	r3, #2
   274dc:	d103      	bne.n	274e6 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   274de:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   274e2:	08ad      	lsrs	r5, r5, #2
   274e4:	d115      	bne.n	27512 <mpsc_pbuf_claim+0x6c>
   274e6:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   274e8:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   274ea:	d50f      	bpl.n	2750c <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   274ec:	f042 0202 	orr.w	r2, r2, #2
   274f0:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   274f4:	4640      	mov	r0, r8
   274f6:	4798      	blx	r3
   274f8:	4639      	mov	r1, r7
   274fa:	4602      	mov	r2, r0
   274fc:	4620      	mov	r0, r4
   274fe:	f7ff fea2 	bl	27246 <idx_inc>
		cont = false;
   27502:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   27504:	60a0      	str	r0, [r4, #8]
   27506:	e011      	b.n	2752c <mpsc_pbuf_claim+0x86>
			item = NULL;
   27508:	4698      	mov	r8, r3
   2750a:	e00f      	b.n	2752c <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   2750c:	4640      	mov	r0, r8
   2750e:	4798      	blx	r3
   27510:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   27512:	68a1      	ldr	r1, [r4, #8]
   27514:	462a      	mov	r2, r5
   27516:	4620      	mov	r0, r4
   27518:	f7ff fe95 	bl	27246 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   2751c:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   2751e:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   27520:	462a      	mov	r2, r5
   27522:	4620      	mov	r0, r4
   27524:	f7ff fe8f 	bl	27246 <idx_inc>
				cont = true;
   27528:	2301      	movs	r3, #1
				buffer->rd_idx =
   2752a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2752c:	f386 8811 	msr	BASEPRI, r6
   27530:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   27534:	2b00      	cmp	r3, #0
   27536:	d1b9      	bne.n	274ac <mpsc_pbuf_claim+0x6>

	return item;
}
   27538:	4640      	mov	r0, r8
   2753a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002753e <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2753e:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   27540:	6983      	ldr	r3, [r0, #24]
{
   27542:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   27544:	4608      	mov	r0, r1
{
   27546:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27548:	4798      	blx	r3
   2754a:	4602      	mov	r2, r0
	__asm__ volatile(
   2754c:	f04f 0320 	mov.w	r3, #32
   27550:	f3ef 8611 	mrs	r6, BASEPRI
   27554:	f383 8812 	msr	BASEPRI_MAX, r3
   27558:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2755c:	782b      	ldrb	r3, [r5, #0]
   2755e:	f36f 0300 	bfc	r3, #0, #1
   27562:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   27564:	6923      	ldr	r3, [r4, #16]
   27566:	079b      	lsls	r3, r3, #30
   27568:	d505      	bpl.n	27576 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2756a:	68e1      	ldr	r1, [r4, #12]
   2756c:	69e3      	ldr	r3, [r4, #28]
   2756e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   27572:	429d      	cmp	r5, r3
   27574:	d112      	bne.n	2759c <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   27576:	782b      	ldrb	r3, [r5, #0]
   27578:	f36f 0341 	bfc	r3, #1, #1
   2757c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2757e:	68e1      	ldr	r1, [r4, #12]
   27580:	4620      	mov	r0, r4
   27582:	f7ff fe60 	bl	27246 <idx_inc>
   27586:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   27588:	f386 8811 	msr	BASEPRI, r6
   2758c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   27590:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   27594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27598:	f7fd bfac 	b.w	254f4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2759c:	682b      	ldr	r3, [r5, #0]
   2759e:	f360 039f 	bfi	r3, r0, #2, #30
   275a2:	602b      	str	r3, [r5, #0]
   275a4:	e7f0      	b.n	27588 <mpsc_pbuf_free+0x4a>

000275a6 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   275a6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   275aa:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   275ac:	bf8a      	itet	hi
   275ae:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   275b0:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   275b2:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   275b4:	1e18      	subs	r0, r3, #0
   275b6:	bf18      	it	ne
   275b8:	2001      	movne	r0, #1
   275ba:	4770      	bx	lr

000275bc <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   275bc:	070b      	lsls	r3, r1, #28
   275be:	d504      	bpl.n	275ca <foldcase+0xe>
   275c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   275c4:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   275c6:	bf98      	it	ls
   275c8:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   275ca:	4770      	bx	lr

000275cc <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   275cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275d0:	b087      	sub	sp, #28
   275d2:	468a      	mov	sl, r1
   275d4:	4614      	mov	r4, r2
   275d6:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   275d8:	4605      	mov	r5, r0
   275da:	b918      	cbnz	r0, 275e4 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   275dc:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   275de:	b007      	add	sp, #28
   275e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   275e4:	2900      	cmp	r1, #0
   275e6:	d0f9      	beq.n	275dc <fnmatchx+0x10>
    if (recursion-- == 0)
   275e8:	9b02      	ldr	r3, [sp, #8]
   275ea:	2b00      	cmp	r3, #0
   275ec:	f000 8113 	beq.w	27816 <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   275f0:	f004 0304 	and.w	r3, r4, #4
   275f4:	460a      	mov	r2, r1
   275f6:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   275f8:	46a9      	mov	r9, r5
   275fa:	4621      	mov	r1, r4
   275fc:	f819 0b01 	ldrb.w	r0, [r9], #1
   27600:	f7ff ffdc 	bl	275bc <foldcase>
   27604:	4603      	mov	r3, r0
   27606:	b2c0      	uxtb	r0, r0
   27608:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   2760a:	7817      	ldrb	r7, [r2, #0]
   2760c:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
   2760e:	d025      	beq.n	2765c <fnmatchx+0x90>
   27610:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   27614:	d10b      	bne.n	2762e <fnmatchx+0x62>
   27616:	b1c8      	cbz	r0, 2764c <fnmatchx+0x80>
   27618:	282a      	cmp	r0, #42	; 0x2a
   2761a:	d036      	beq.n	2768a <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
   2761c:	4621      	mov	r1, r4
   2761e:	4638      	mov	r0, r7
   27620:	f7ff ffcc 	bl	275bc <foldcase>
   27624:	4286      	cmp	r6, r0
   27626:	f102 0201 	add.w	r2, r2, #1
   2762a:	d01e      	beq.n	2766a <fnmatchx+0x9e>
   2762c:	e7d6      	b.n	275dc <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   2762e:	285b      	cmp	r0, #91	; 0x5b
   27630:	d07b      	beq.n	2772a <fnmatchx+0x15e>
   27632:	285c      	cmp	r0, #92	; 0x5c
   27634:	d1f2      	bne.n	2761c <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   27636:	07e0      	lsls	r0, r4, #31
   27638:	d4f0      	bmi.n	2761c <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   2763a:	7868      	ldrb	r0, [r5, #1]
   2763c:	f7ff ffbe 	bl	275bc <foldcase>
   27640:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   27644:	bf18      	it	ne
   27646:	f105 0902 	addne.w	r9, r5, #2
   2764a:	e7e7      	b.n	2761c <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   2764c:	06e3      	lsls	r3, r4, #27
   2764e:	d501      	bpl.n	27654 <fnmatchx+0x88>
   27650:	2f2f      	cmp	r7, #47	; 0x2f
   27652:	d0c4      	beq.n	275de <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   27654:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   27656:	bf18      	it	ne
   27658:	2001      	movne	r0, #1
   2765a:	e7c0      	b.n	275de <fnmatchx+0x12>
            if (*string == EOS)
   2765c:	2f00      	cmp	r7, #0
   2765e:	d0bd      	beq.n	275dc <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   27660:	2f2f      	cmp	r7, #47	; 0x2f
   27662:	d104      	bne.n	2766e <fnmatchx+0xa2>
   27664:	07a6      	lsls	r6, r4, #30
   27666:	d4b9      	bmi.n	275dc <fnmatchx+0x10>
            ++string;
   27668:	3201      	adds	r2, #1
            break;
   2766a:	464d      	mov	r5, r9
   2766c:	e7c4      	b.n	275f8 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   2766e:	2f2e      	cmp	r7, #46	; 0x2e
   27670:	d1fa      	bne.n	27668 <fnmatchx+0x9c>
   27672:	9b04      	ldr	r3, [sp, #16]
   27674:	2b00      	cmp	r3, #0
   27676:	d0f7      	beq.n	27668 <fnmatchx+0x9c>
   27678:	4552      	cmp	r2, sl
   2767a:	d0af      	beq.n	275dc <fnmatchx+0x10>
                (string == stringstart ||
   2767c:	07a5      	lsls	r5, r4, #30
   2767e:	d5f3      	bpl.n	27668 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   27680:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   27684:	2b2f      	cmp	r3, #47	; 0x2f
   27686:	d1ef      	bne.n	27668 <fnmatchx+0x9c>
   27688:	e7a8      	b.n	275dc <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   2768a:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   2768c:	f7ff ff96 	bl	275bc <foldcase>
   27690:	b2c1      	uxtb	r1, r0
            while (c == '*')
   27692:	292a      	cmp	r1, #42	; 0x2a
   27694:	d018      	beq.n	276c8 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   27696:	2f2e      	cmp	r7, #46	; 0x2e
   27698:	d109      	bne.n	276ae <fnmatchx+0xe2>
   2769a:	9b04      	ldr	r3, [sp, #16]
   2769c:	b13b      	cbz	r3, 276ae <fnmatchx+0xe2>
   2769e:	4552      	cmp	r2, sl
   276a0:	d09c      	beq.n	275dc <fnmatchx+0x10>
                (string == stringstart ||
   276a2:	07a0      	lsls	r0, r4, #30
   276a4:	d503      	bpl.n	276ae <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   276a6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   276aa:	2b2f      	cmp	r3, #47	; 0x2f
   276ac:	d096      	beq.n	275dc <fnmatchx+0x10>
            if (c == EOS) {
   276ae:	b979      	cbnz	r1, 276d0 <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
   276b0:	f014 0002 	ands.w	r0, r4, #2
   276b4:	d093      	beq.n	275de <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   276b6:	06e3      	lsls	r3, r4, #27
   276b8:	f100 80af 	bmi.w	2781a <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
   276bc:	212f      	movs	r1, #47	; 0x2f
   276be:	4610      	mov	r0, r2
   276c0:	f002 fde8 	bl	2a294 <strchr>
                        0 : FNM_NOMATCH;
   276c4:	3800      	subs	r0, #0
   276c6:	e7c6      	b.n	27656 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
   276c8:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   276cc:	4621      	mov	r1, r4
   276ce:	e7dd      	b.n	2768c <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   276d0:	292f      	cmp	r1, #47	; 0x2f
   276d2:	d021      	beq.n	27718 <fnmatchx+0x14c>
    if (recursion-- == 0)
   276d4:	9b02      	ldr	r3, [sp, #8]
   276d6:	4616      	mov	r6, r2
   276d8:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   276da:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   276de:	f004 0a02 	and.w	sl, r4, #2
   276e2:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   276e4:	4621      	mov	r1, r4
   276e6:	f89b 0000 	ldrb.w	r0, [fp]
   276ea:	f7ff ff67 	bl	275bc <foldcase>
   276ee:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   276f2:	f106 0601 	add.w	r6, r6, #1
   276f6:	f43f af71 	beq.w	275dc <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   276fa:	463b      	mov	r3, r7
   276fc:	4642      	mov	r2, r8
   276fe:	4659      	mov	r1, fp
   27700:	4648      	mov	r0, r9
   27702:	f7ff ff63 	bl	275cc <fnmatchx>
   27706:	2801      	cmp	r0, #1
   27708:	f47f af69 	bne.w	275de <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   2770c:	2d2f      	cmp	r5, #47	; 0x2f
   2770e:	d1e8      	bne.n	276e2 <fnmatchx+0x116>
   27710:	f1ba 0f00 	cmp.w	sl, #0
   27714:	d0e5      	beq.n	276e2 <fnmatchx+0x116>
   27716:	e761      	b.n	275dc <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   27718:	07a7      	lsls	r7, r4, #30
   2771a:	d5db      	bpl.n	276d4 <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
   2771c:	4610      	mov	r0, r2
   2771e:	f002 fdb9 	bl	2a294 <strchr>
   27722:	4602      	mov	r2, r0
   27724:	2800      	cmp	r0, #0
   27726:	d1a0      	bne.n	2766a <fnmatchx+0x9e>
   27728:	e758      	b.n	275dc <fnmatchx+0x10>
            if (*string == EOS)
   2772a:	2f00      	cmp	r7, #0
   2772c:	f43f af56 	beq.w	275dc <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   27730:	2f2f      	cmp	r7, #47	; 0x2f
   27732:	d102      	bne.n	2773a <fnmatchx+0x16e>
   27734:	07a6      	lsls	r6, r4, #30
   27736:	f53f af51 	bmi.w	275dc <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   2773a:	4621      	mov	r1, r4
   2773c:	4638      	mov	r0, r7
   2773e:	f7ff ff3d 	bl	275bc <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   27742:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
   27744:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   27746:	2b21      	cmp	r3, #33	; 0x21
   27748:	d001      	beq.n	2774e <fnmatchx+0x182>
   2774a:	2b5e      	cmp	r3, #94	; 0x5e
   2774c:	d123      	bne.n	27796 <fnmatchx+0x1ca>
        ++pattern;
   2774e:	3502      	adds	r5, #2
   27750:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   27752:	9301      	str	r3, [sp, #4]
    need = 1;
   27754:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   27756:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   2775a:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   2775e:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   27760:	462e      	mov	r6, r5
   27762:	4621      	mov	r1, r4
   27764:	f816 0b01 	ldrb.w	r0, [r6], #1
   27768:	9305      	str	r3, [sp, #20]
   2776a:	f7ff ff27 	bl	275bc <foldcase>
   2776e:	fa5f f880 	uxtb.w	r8, r0
   27772:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   27776:	9b05      	ldr	r3, [sp, #20]
   27778:	d110      	bne.n	2779c <fnmatchx+0x1d0>
   2777a:	bb0b      	cbnz	r3, 277c0 <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
   2777c:	9b01      	ldr	r3, [sp, #4]
   2777e:	455b      	cmp	r3, fp
   27780:	f43f af2c 	beq.w	275dc <fnmatchx+0x10>
            if (r == (void *)-1) {
   27784:	1c73      	adds	r3, r6, #1
   27786:	d103      	bne.n	27790 <fnmatchx+0x1c4>
                if (*string != '[')
   27788:	2f5b      	cmp	r7, #91	; 0x5b
   2778a:	f47f af27 	bne.w	275dc <fnmatchx+0x10>
   2778e:	464e      	mov	r6, r9
            ++string;
   27790:	3201      	adds	r2, #1
            break;
   27792:	46b1      	mov	r9, r6
   27794:	e769      	b.n	2766a <fnmatchx+0x9e>
   27796:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   27798:	2300      	movs	r3, #0
   2779a:	e7da      	b.n	27752 <fnmatchx+0x186>
        if (c == '/')
   2779c:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
   277a0:	d0f2      	beq.n	27788 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   277a2:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
   277a6:	d107      	bne.n	277b8 <fnmatchx+0x1ec>
   277a8:	9b03      	ldr	r3, [sp, #12]
   277aa:	b94b      	cbnz	r3, 277c0 <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
   277ac:	7868      	ldrb	r0, [r5, #1]
   277ae:	f7ff ff05 	bl	275bc <foldcase>
   277b2:	1cae      	adds	r6, r5, #2
   277b4:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
   277b8:	f1b8 0f00 	cmp.w	r8, #0
   277bc:	f43f af0e 	beq.w	275dc <fnmatchx+0x10>
        if (*pattern == '-' 
   277c0:	7833      	ldrb	r3, [r6, #0]
   277c2:	2b2d      	cmp	r3, #45	; 0x2d
   277c4:	d120      	bne.n	27808 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   277c6:	7870      	ldrb	r0, [r6, #1]
   277c8:	4621      	mov	r1, r4
   277ca:	f7ff fef7 	bl	275bc <foldcase>
   277ce:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   277d2:	d019      	beq.n	27808 <fnmatchx+0x23c>
   277d4:	285d      	cmp	r0, #93	; 0x5d
   277d6:	d017      	beq.n	27808 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   277d8:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   277da:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   277de:	d10a      	bne.n	277f6 <fnmatchx+0x22a>
   277e0:	9b03      	ldr	r3, [sp, #12]
   277e2:	b943      	cbnz	r3, 277f6 <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
   277e4:	78b0      	ldrb	r0, [r6, #2]
   277e6:	f7ff fee9 	bl	275bc <foldcase>
            if (c2 == EOS)
   277ea:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   277ee:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   277f2:	f43f aef3 	beq.w	275dc <fnmatchx+0x10>
            if (c <= test && test <= c2)
   277f6:	9b00      	ldr	r3, [sp, #0]
   277f8:	4543      	cmp	r3, r8
   277fa:	db03      	blt.n	27804 <fnmatchx+0x238>
                ok = 1;
   277fc:	4283      	cmp	r3, r0
   277fe:	bfd8      	it	le
   27800:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   27804:	2300      	movs	r3, #0
   27806:	e7ab      	b.n	27760 <fnmatchx+0x194>
        } else if (c == test)
   27808:	9b00      	ldr	r3, [sp, #0]
   2780a:	4635      	mov	r5, r6
   2780c:	4543      	cmp	r3, r8
   2780e:	bf08      	it	eq
   27810:	f04f 0b01 	moveq.w	fp, #1
   27814:	e7f6      	b.n	27804 <fnmatchx+0x238>
        return FNM_NORES;
   27816:	2003      	movs	r0, #3
   27818:	e6e1      	b.n	275de <fnmatchx+0x12>
                return 0;
   2781a:	4608      	mov	r0, r1
   2781c:	e6df      	b.n	275de <fnmatchx+0x12>

0002781e <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   2781e:	2340      	movs	r3, #64	; 0x40
   27820:	f7ff bed4 	b.w	275cc <fnmatchx>

00027824 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   27824:	4770      	bx	lr

00027826 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   27826:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   27828:	075b      	lsls	r3, r3, #29
   2782a:	d40b      	bmi.n	27844 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2782c:	6803      	ldr	r3, [r0, #0]
   2782e:	8840      	ldrh	r0, [r0, #2]
   27830:	f3c3 2349 	ubfx	r3, r3, #9, #10
   27834:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   27838:	4418      	add	r0, r3
   2783a:	3013      	adds	r0, #19
   2783c:	f020 0007 	bic.w	r0, r0, #7
   27840:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   27842:	4770      	bx	lr
	return 0;
   27844:	2000      	movs	r0, #0
}
   27846:	4770      	bx	lr

00027848 <default_get_timestamp>:
   27848:	f005 bc37 	b.w	2d0ba <sys_clock_cycle_get_32>

0002784c <dummy_timestamp>:
   2784c:	2000      	movs	r0, #0
   2784e:	4770      	bx	lr

00027850 <z_log_vprintk>:
{
   27850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   27852:	2300      	movs	r3, #0
   27854:	e9cd 0101 	strd	r0, r1, [sp, #4]
   27858:	9300      	str	r3, [sp, #0]
   2785a:	461a      	mov	r2, r3
   2785c:	4619      	mov	r1, r3
   2785e:	4618      	mov	r0, r3
   27860:	f7df fdf0 	bl	7444 <z_impl_z_log_msg2_runtime_vcreate>
}
   27864:	b005      	add	sp, #20
   27866:	f85d fb04 	ldr.w	pc, [sp], #4

0002786a <notify_drop>:
	z_log_dropped(true);
   2786a:	2001      	movs	r0, #1
   2786c:	f7df b9a2 	b.w	6bb4 <z_log_dropped>

00027870 <get_msg>:
{
   27870:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   27872:	f7df fa15 	bl	6ca0 <z_log_msg2_claim>
}
   27876:	bd08      	pop	{r3, pc}

00027878 <z_log_get_tag>:
}
   27878:	2000      	movs	r0, #0
   2787a:	4770      	bx	lr

0002787c <log_backend_disable>:
	backend->cb->active = false;
   2787c:	6843      	ldr	r3, [r0, #4]
   2787e:	2100      	movs	r1, #0
   27880:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   27882:	f7df bb9f 	b.w	6fc4 <backend_filter_set>

00027886 <buffer_write>:
{
   27886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27888:	4606      	mov	r6, r0
   2788a:	460d      	mov	r5, r1
   2788c:	4614      	mov	r4, r2
   2788e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   27890:	4621      	mov	r1, r4
   27892:	4628      	mov	r0, r5
   27894:	463a      	mov	r2, r7
   27896:	47b0      	blx	r6
	} while (len != 0);
   27898:	1a24      	subs	r4, r4, r0
		buf += processed;
   2789a:	4405      	add	r5, r0
	} while (len != 0);
   2789c:	d1f8      	bne.n	27890 <buffer_write+0xa>
}
   2789e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000278a0 <log_output_flush>:
		     output->control_block->offset,
   278a0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   278a2:	6881      	ldr	r1, [r0, #8]
{
   278a4:	b510      	push	{r4, lr}
   278a6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   278a8:	e9d2 2300 	ldrd	r2, r3, [r2]
   278ac:	6800      	ldr	r0, [r0, #0]
   278ae:	f7ff ffea 	bl	27886 <buffer_write>
	output->control_block->offset = 0;
   278b2:	6863      	ldr	r3, [r4, #4]
   278b4:	2200      	movs	r2, #0
   278b6:	601a      	str	r2, [r3, #0]
}
   278b8:	bd10      	pop	{r4, pc}

000278ba <out_func>:
{
   278ba:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   278bc:	684b      	ldr	r3, [r1, #4]
   278be:	681a      	ldr	r2, [r3, #0]
   278c0:	68cb      	ldr	r3, [r1, #12]
   278c2:	429a      	cmp	r2, r3
{
   278c4:	4605      	mov	r5, r0
   278c6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   278c8:	d102      	bne.n	278d0 <out_func+0x16>
		log_output_flush(out_ctx);
   278ca:	4608      	mov	r0, r1
   278cc:	f7ff ffe8 	bl	278a0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   278d0:	6863      	ldr	r3, [r4, #4]
   278d2:	f3bf 8f5b 	dmb	ish
   278d6:	e853 2f00 	ldrex	r2, [r3]
   278da:	1c51      	adds	r1, r2, #1
   278dc:	e843 1000 	strex	r0, r1, [r3]
   278e0:	2800      	cmp	r0, #0
   278e2:	d1f8      	bne.n	278d6 <out_func+0x1c>
   278e4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   278e8:	68a3      	ldr	r3, [r4, #8]
   278ea:	549d      	strb	r5, [r3, r2]
}
   278ec:	2000      	movs	r0, #0
   278ee:	bd38      	pop	{r3, r4, r5, pc}

000278f0 <cr_out_func>:
{
   278f0:	b538      	push	{r3, r4, r5, lr}
   278f2:	4605      	mov	r5, r0
   278f4:	460c      	mov	r4, r1
	out_func(c, ctx);
   278f6:	f7ff ffe0 	bl	278ba <out_func>
	if (c == '\n') {
   278fa:	2d0a      	cmp	r5, #10
   278fc:	d103      	bne.n	27906 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   278fe:	4621      	mov	r1, r4
   27900:	200d      	movs	r0, #13
   27902:	f7ff ffda 	bl	278ba <out_func>
}
   27906:	2000      	movs	r0, #0
   27908:	bd38      	pop	{r3, r4, r5, pc}

0002790a <z_log_msg2_finalize>:
{
   2790a:	b570      	push	{r4, r5, r6, lr}
   2790c:	460e      	mov	r6, r1
   2790e:	4615      	mov	r5, r2
   27910:	4619      	mov	r1, r3
	if (!msg) {
   27912:	4604      	mov	r4, r0
   27914:	b918      	cbnz	r0, 2791e <z_log_msg2_finalize+0x14>
}
   27916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2791a:	f7df b94b 	b.w	6bb4 <z_log_dropped>
	if (data) {
   2791e:	b143      	cbz	r3, 27932 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   27920:	f100 030c 	add.w	r3, r0, #12
   27924:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   27928:	4418      	add	r0, r3
   2792a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2792e:	f002 fd15 	bl	2a35c <memcpy>
	msg->hdr.source = source;
   27932:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   27936:	4620      	mov	r0, r4
}
   27938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
   2793c:	f7df ba8e 	b.w	6e5c <z_log_msg2_commit>

00027940 <z_impl_z_log_msg2_static_create>:
{
   27940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   27944:	f3c1 2949 	ubfx	r9, r1, #9, #10
   27948:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   2794c:	444c      	add	r4, r9
   2794e:	3413      	adds	r4, #19
   27950:	f024 0407 	bic.w	r4, r4, #7
   27954:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   27956:	08a0      	lsrs	r0, r4, #2
{
   27958:	460d      	mov	r5, r1
   2795a:	4690      	mov	r8, r2
   2795c:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   2795e:	f7df f997 	bl	6c90 <z_log_msg2_alloc>
	if (msg) {
   27962:	4604      	mov	r4, r0
   27964:	b120      	cbz	r0, 27970 <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
   27966:	464a      	mov	r2, r9
   27968:	4641      	mov	r1, r8
   2796a:	300c      	adds	r0, #12
   2796c:	f002 fcf6 	bl	2a35c <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
   27970:	463b      	mov	r3, r7
   27972:	462a      	mov	r2, r5
   27974:	4631      	mov	r1, r6
   27976:	4620      	mov	r0, r4
}
   27978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
   2797c:	f7ff bfc5 	b.w	2790a <z_log_msg2_finalize>

00027980 <log_halt>:
   27980:	684b      	ldr	r3, [r1, #4]
   27982:	2000      	movs	r0, #0
   27984:	7158      	strb	r0, [r3, #5]
}
   27986:	4770      	bx	lr

00027988 <log_go>:
	backend->cb->active = true;
   27988:	684b      	ldr	r3, [r1, #4]
   2798a:	2201      	movs	r2, #1
   2798c:	715a      	strb	r2, [r3, #5]
}
   2798e:	2000      	movs	r0, #0
   27990:	4770      	bx	lr

00027992 <cmd_log_self_status>:
{
   27992:	b570      	push	{r4, r5, r6, lr}
   27994:	4604      	mov	r4, r0
   27996:	460d      	mov	r5, r1
   27998:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   2799a:	f7df fee1 	bl	7760 <shell_state_precheck>
   2799e:	b130      	cbz	r0, 279ae <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   279a0:	69e1      	ldr	r1, [r4, #28]
   279a2:	4633      	mov	r3, r6
   279a4:	6809      	ldr	r1, [r1, #0]
   279a6:	462a      	mov	r2, r5
   279a8:	4620      	mov	r0, r4
   279aa:	f7df fe11 	bl	75d0 <log_status>
}
   279ae:	2000      	movs	r0, #0
   279b0:	bd70      	pop	{r4, r5, r6, pc}

000279b2 <cmd_log_self_enable>:
{
   279b2:	b570      	push	{r4, r5, r6, lr}
   279b4:	4604      	mov	r4, r0
   279b6:	460d      	mov	r5, r1
   279b8:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   279ba:	f7df fed1 	bl	7760 <shell_state_precheck>
   279be:	b140      	cbz	r0, 279d2 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   279c0:	69e1      	ldr	r1, [r4, #28]
   279c2:	4633      	mov	r3, r6
   279c4:	462a      	mov	r2, r5
   279c6:	4620      	mov	r0, r4
   279c8:	6809      	ldr	r1, [r1, #0]
}
   279ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   279ce:	f7df bf3f 	b.w	7850 <log_enable>
}
   279d2:	bd70      	pop	{r4, r5, r6, pc}

000279d4 <log_disable>:
{
   279d4:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   279d6:	2400      	movs	r4, #0
   279d8:	9400      	str	r4, [sp, #0]
   279da:	3304      	adds	r3, #4
   279dc:	3a01      	subs	r2, #1
   279de:	f7df fecf 	bl	7780 <filters_set>
}
   279e2:	4620      	mov	r0, r4
   279e4:	b002      	add	sp, #8
   279e6:	bd10      	pop	{r4, pc}

000279e8 <cmd_log_self_disable>:
{
   279e8:	b570      	push	{r4, r5, r6, lr}
   279ea:	4604      	mov	r4, r0
   279ec:	460d      	mov	r5, r1
   279ee:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   279f0:	f7df feb6 	bl	7760 <shell_state_precheck>
   279f4:	b140      	cbz	r0, 27a08 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   279f6:	69e1      	ldr	r1, [r4, #28]
   279f8:	4633      	mov	r3, r6
   279fa:	462a      	mov	r2, r5
   279fc:	4620      	mov	r0, r4
   279fe:	6809      	ldr	r1, [r1, #0]
}
   27a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   27a04:	f7ff bfe6 	b.w	279d4 <log_disable>
}
   27a08:	bd70      	pop	{r4, r5, r6, pc}

00027a0a <cmd_log_self_go>:
{
   27a0a:	b510      	push	{r4, lr}
   27a0c:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   27a0e:	f7df fea7 	bl	7760 <shell_state_precheck>
   27a12:	b120      	cbz	r0, 27a1e <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   27a14:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   27a16:	681b      	ldr	r3, [r3, #0]
   27a18:	685b      	ldr	r3, [r3, #4]
   27a1a:	2201      	movs	r2, #1
   27a1c:	715a      	strb	r2, [r3, #5]
}
   27a1e:	2000      	movs	r0, #0
   27a20:	bd10      	pop	{r4, pc}

00027a22 <cmd_log_self_halt>:
{
   27a22:	b510      	push	{r4, lr}
   27a24:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   27a26:	f7df fe9b 	bl	7760 <shell_state_precheck>
   27a2a:	b120      	cbz	r0, 27a36 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   27a2c:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
   27a2e:	681b      	ldr	r3, [r3, #0]
   27a30:	685b      	ldr	r3, [r3, #4]
   27a32:	2200      	movs	r2, #0
   27a34:	715a      	strb	r2, [r3, #5]
}
   27a36:	2000      	movs	r0, #0
   27a38:	bd10      	pop	{r4, pc}

00027a3a <read_str>:
{
   27a3a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   27a3e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   27a42:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   27a44:	4640      	mov	r0, r8
{
   27a46:	461f      	mov	r7, r3
   27a48:	460c      	mov	r4, r1
   27a4a:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   27a4c:	f002 fc30 	bl	2a2b0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   27a50:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   27a54:	9300      	str	r3, [sp, #0]
   27a56:	b280      	uxth	r0, r0
   27a58:	e9cd 8001 	strd	r8, r0, [sp, #4]
   27a5c:	463b      	mov	r3, r7
   27a5e:	4632      	mov	r2, r6
   27a60:	4621      	mov	r1, r4
   27a62:	4628      	mov	r0, r5
   27a64:	f004 f93c 	bl	2bce0 <bt_gatt_attr_read>
}
   27a68:	b004      	add	sp, #16
   27a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027a6e <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   27a6e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   27a70:	075b      	lsls	r3, r3, #29
   27a72:	d40b      	bmi.n	27a8c <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   27a74:	6803      	ldr	r3, [r0, #0]
   27a76:	8840      	ldrh	r0, [r0, #2]
   27a78:	f3c3 2349 	ubfx	r3, r3, #9, #10
   27a7c:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   27a80:	4418      	add	r0, r3
   27a82:	3013      	adds	r0, #19
   27a84:	f020 0007 	bic.w	r0, r0, #7
   27a88:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   27a8a:	4770      	bx	lr
	return 0;
   27a8c:	2000      	movs	r0, #0
}
   27a8e:	4770      	bx	lr

00027a90 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   27a90:	6883      	ldr	r3, [r0, #8]
   27a92:	6a1b      	ldr	r3, [r3, #32]
   27a94:	b103      	cbz	r3, 27a98 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   27a96:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   27a98:	4770      	bx	lr

00027a9a <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   27a9a:	6843      	ldr	r3, [r0, #4]
   27a9c:	681b      	ldr	r3, [r3, #0]
{
   27a9e:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   27aa0:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
   27aa2:	4620      	mov	r0, r4
   27aa4:	f7ff fff4 	bl	27a90 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   27aa8:	68a3      	ldr	r3, [r4, #8]
   27aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27aac:	b10b      	cbz	r3, 27ab2 <uninit+0x18>
		api->irq_rx_disable(dev);
   27aae:	4620      	mov	r0, r4
   27ab0:	4798      	blx	r3
}
   27ab2:	2000      	movs	r0, #0
   27ab4:	bd10      	pop	{r4, pc}

00027ab6 <enable>:
{
   27ab6:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   27ab8:	6843      	ldr	r3, [r0, #4]
   27aba:	681b      	ldr	r3, [r3, #0]
   27abc:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   27abe:	b111      	cbz	r1, 27ac6 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   27ac0:	6818      	ldr	r0, [r3, #0]
   27ac2:	f7ff ffe5 	bl	27a90 <uart_irq_tx_disable>
}
   27ac6:	2000      	movs	r0, #0
   27ac8:	bd08      	pop	{r3, pc}

00027aca <read>:
{
   27aca:	b510      	push	{r4, lr}
   27acc:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   27ace:	6843      	ldr	r3, [r0, #4]
   27ad0:	68d8      	ldr	r0, [r3, #12]
   27ad2:	f7ff fb83 	bl	271dc <ring_buf_get>
   27ad6:	6020      	str	r0, [r4, #0]
}
   27ad8:	2000      	movs	r0, #0
   27ada:	bd10      	pop	{r4, pc}

00027adc <write>:
{
   27adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   27ae0:	6845      	ldr	r5, [r0, #4]
{
   27ae2:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   27ae4:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   27ae6:	7c1b      	ldrb	r3, [r3, #16]
{
   27ae8:	460c      	mov	r4, r1
   27aea:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   27aec:	b153      	cbz	r3, 27b04 <write+0x28>
   27aee:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   27af2:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   27af4:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
   27af6:	d120      	bne.n	27b3a <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   27af8:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
   27afc:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   27afe:	2001      	movs	r0, #1
   27b00:	4790      	blx	r2
   27b02:	e017      	b.n	27b34 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   27b04:	68a8      	ldr	r0, [r5, #8]
   27b06:	f7ff fb01 	bl	2710c <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27b0a:	682b      	ldr	r3, [r5, #0]
   27b0c:	6030      	str	r0, [r6, #0]
   27b0e:	330c      	adds	r3, #12
   27b10:	2101      	movs	r1, #1
   27b12:	f3bf 8f5b 	dmb	ish
   27b16:	e853 2f00 	ldrex	r2, [r3]
   27b1a:	e843 1000 	strex	r0, r1, [r3]
   27b1e:	2800      	cmp	r0, #0
   27b20:	d1f9      	bne.n	27b16 <write+0x3a>
   27b22:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   27b26:	b92a      	cbnz	r2, 27b34 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   27b28:	682b      	ldr	r3, [r5, #0]
   27b2a:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   27b2c:	6883      	ldr	r3, [r0, #8]
   27b2e:	69db      	ldr	r3, [r3, #28]
   27b30:	b103      	cbz	r3, 27b34 <write+0x58>
		api->irq_tx_enable(dev);
   27b32:	4798      	blx	r3
}
   27b34:	2000      	movs	r0, #0
   27b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   27b3a:	6818      	ldr	r0, [r3, #0]
   27b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   27b40:	6883      	ldr	r3, [r0, #8]
   27b42:	685b      	ldr	r3, [r3, #4]
   27b44:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   27b46:	e7d4      	b.n	27af2 <write+0x16>

00027b48 <atomic_or>:
{
   27b48:	4603      	mov	r3, r0
}
   27b4a:	f3bf 8f5b 	dmb	ish
   27b4e:	e853 0f00 	ldrex	r0, [r3]
   27b52:	ea40 0201 	orr.w	r2, r0, r1
   27b56:	e843 2c00 	strex	ip, r2, [r3]
   27b5a:	f1bc 0f00 	cmp.w	ip, #0
   27b5e:	d1f6      	bne.n	27b4e <atomic_or+0x6>
   27b60:	f3bf 8f5b 	dmb	ish
   27b64:	4770      	bx	lr

00027b66 <atomic_and>:
{
   27b66:	4603      	mov	r3, r0
}
   27b68:	f3bf 8f5b 	dmb	ish
   27b6c:	e853 0f00 	ldrex	r0, [r3]
   27b70:	ea00 0201 	and.w	r2, r0, r1
   27b74:	e843 2c00 	strex	ip, r2, [r3]
   27b78:	f1bc 0f00 	cmp.w	ip, #0
   27b7c:	d1f6      	bne.n	27b6c <atomic_and+0x6>
   27b7e:	f3bf 8f5b 	dmb	ish
   27b82:	4770      	bx	lr

00027b84 <shell_signal_handle>:
{
   27b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   27b86:	6885      	ldr	r5, [r0, #8]
   27b88:	0109      	lsls	r1, r1, #4
   27b8a:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
   27b8e:	4604      	mov	r4, r0
   27b90:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   27b92:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   27b94:	aa01      	add	r2, sp, #4
   27b96:	4669      	mov	r1, sp
   27b98:	4628      	mov	r0, r5
   27b9a:	f006 f9c4 	bl	2df26 <z_impl_k_poll_signal_check>
	if (set) {
   27b9e:	9b00      	ldr	r3, [sp, #0]
   27ba0:	b123      	cbz	r3, 27bac <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
   27ba2:	4628      	mov	r0, r5
   27ba4:	f006 f9bc 	bl	2df20 <z_impl_k_poll_signal_reset>
		handler(shell);
   27ba8:	4620      	mov	r0, r4
   27baa:	47b0      	blx	r6
}
   27bac:	b002      	add	sp, #8
   27bae:	bd70      	pop	{r4, r5, r6, pc}

00027bb0 <z_shell_strlen>:
{
   27bb0:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   27bb2:	b110      	cbz	r0, 27bba <z_shell_strlen+0xa>
   27bb4:	f002 fb7c 	bl	2a2b0 <strlen>
   27bb8:	b280      	uxth	r0, r0
}
   27bba:	bd08      	pop	{r3, pc}

00027bbc <z_shell_raw_fprintf>:
{
   27bbc:	b40e      	push	{r1, r2, r3}
   27bbe:	b503      	push	{r0, r1, lr}
   27bc0:	aa03      	add	r2, sp, #12
   27bc2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   27bc6:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   27bc8:	f7e1 f93c 	bl	8e44 <z_shell_fprintf_fmt>
}
   27bcc:	b002      	add	sp, #8
   27bce:	f85d eb04 	ldr.w	lr, [sp], #4
   27bd2:	b003      	add	sp, #12
   27bd4:	4770      	bx	lr

00027bd6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   27bd6:	f7fd bb9d 	b.w	25314 <z_impl_k_mutex_lock>

00027bda <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   27bda:	688b      	ldr	r3, [r1, #8]
   27bdc:	b920      	cbnz	r0, 27be8 <transport_evt_handler+0xe>
   27bde:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   27be2:	2100      	movs	r1, #0
   27be4:	f7fe bc70 	b.w	264c8 <z_impl_k_poll_signal_raise>
   27be8:	f503 7026 	add.w	r0, r3, #664	; 0x298
   27bec:	e7f9      	b.n	27be2 <transport_evt_handler+0x8>

00027bee <kill_handler>:
{
   27bee:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
   27bf0:	6883      	ldr	r3, [r0, #8]
   27bf2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
   27bf6:	07db      	lsls	r3, r3, #31
{
   27bf8:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
   27bfa:	d41d      	bmi.n	27c38 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
   27bfc:	69c0      	ldr	r0, [r0, #28]
   27bfe:	f000 fd6f 	bl	286e0 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   27c02:	6860      	ldr	r0, [r4, #4]
   27c04:	6803      	ldr	r3, [r0, #0]
   27c06:	685b      	ldr	r3, [r3, #4]
   27c08:	4798      	blx	r3
	if (err != 0) {
   27c0a:	4605      	mov	r5, r0
   27c0c:	b920      	cbnz	r0, 27c18 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
   27c0e:	68e0      	ldr	r0, [r4, #12]
   27c10:	f000 ff0f 	bl	28a32 <z_shell_history_purge>
	shell->ctx->state = state;
   27c14:	68a3      	ldr	r3, [r4, #8]
   27c16:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
   27c18:	68a3      	ldr	r3, [r4, #8]
   27c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   27c1c:	b113      	cbz	r3, 27c24 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
   27c1e:	4629      	mov	r1, r5
   27c20:	4620      	mov	r0, r4
   27c22:	4798      	blx	r3
	shell->ctx->tid = NULL;
   27c24:	68a3      	ldr	r3, [r4, #8]
   27c26:	2200      	movs	r2, #0
   27c28:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   27c2c:	f7fe f960 	bl	25ef0 <z_impl_z_current_get>
}
   27c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   27c34:	f7e4 b8a8 	b.w	bd88 <z_impl_k_thread_abort>
		return -EBUSY;
   27c38:	f06f 050f 	mvn.w	r5, #15
   27c3c:	e7ec      	b.n	27c18 <kill_handler+0x2a>

00027c3e <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   27c3e:	f500 7019 	add.w	r0, r0, #612	; 0x264
   27c42:	b111      	cbz	r1, 27c4a <z_flag_history_exit_set.isra.0+0xc>
   27c44:	2104      	movs	r1, #4
   27c46:	f7ff bf7f 	b.w	27b48 <atomic_or>
   27c4a:	f06f 0104 	mvn.w	r1, #4
   27c4e:	f7ff bf8a 	b.w	27b66 <atomic_and>

00027c52 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
   27c52:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   27c54:	f500 7018 	add.w	r0, r0, #608	; 0x260
   27c58:	b129      	cbz	r1, 27c66 <z_flag_insert_mode_set.isra.0+0x14>
   27c5a:	2101      	movs	r1, #1
   27c5c:	f7ff ff74 	bl	27b48 <atomic_or>
}
   27c60:	f000 0001 	and.w	r0, r0, #1
   27c64:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   27c66:	f06f 0101 	mvn.w	r1, #1
   27c6a:	f7ff ff7c 	bl	27b66 <atomic_and>
   27c6e:	e7f7      	b.n	27c60 <z_flag_insert_mode_set.isra.0+0xe>

00027c70 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27c70:	f7fd bbc8 	b.w	25404 <z_impl_k_mutex_unlock>

00027c74 <shell_log_process>:
{
   27c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   27c76:	2300      	movs	r3, #0
{
   27c78:	4604      	mov	r4, r0
	int signaled = 0;
   27c7a:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   27c7c:	4620      	mov	r0, r4
   27c7e:	f000 fb5f 	bl	28340 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   27c82:	69e0      	ldr	r0, [r4, #28]
   27c84:	f000 fd6d 	bl	28762 <z_shell_log_backend_process>
   27c88:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   27c8a:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   27c8c:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   27c8e:	f7e1 fa63 	bl	9158 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   27c92:	68a3      	ldr	r3, [r4, #8]
   27c94:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
   27c96:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
   27c9a:	b123      	cbz	r3, 27ca6 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   27c9c:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   27ca0:	2100      	movs	r1, #0
   27ca2:	f7fe f90b 	bl	25ebc <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   27ca6:	aa01      	add	r2, sp, #4
   27ca8:	4669      	mov	r1, sp
   27caa:	4630      	mov	r0, r6
   27cac:	f006 f93b 	bl	2df26 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   27cb0:	b115      	cbz	r5, 27cb8 <shell_log_process+0x44>
   27cb2:	9b00      	ldr	r3, [sp, #0]
   27cb4:	2b00      	cmp	r3, #0
   27cb6:	d0e1      	beq.n	27c7c <shell_log_process+0x8>
}
   27cb8:	b002      	add	sp, #8
   27cba:	bd70      	pop	{r4, r5, r6, pc}

00027cbc <shell_vfprintf>:
{
   27cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27cbe:	4604      	mov	r4, r0
	return shell->ctx->state;
   27cc0:	6880      	ldr	r0, [r0, #8]
{
   27cc2:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   27cc4:	7903      	ldrb	r3, [r0, #4]
   27cc6:	2b02      	cmp	r3, #2
{
   27cc8:	460d      	mov	r5, r1
   27cca:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   27ccc:	d007      	beq.n	27cde <shell_vfprintf+0x22>
}
   27cce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   27cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   27cd6:	f500 7019 	add.w	r0, r0, #612	; 0x264
   27cda:	f7ff bf35 	b.w	27b48 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   27cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27ce6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   27cea:	f7ff ff74 	bl	27bd6 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   27cee:	68a3      	ldr	r3, [r4, #8]
   27cf0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   27cf4:	0511      	lsls	r1, r2, #20
   27cf6:	d404      	bmi.n	27d02 <shell_vfprintf+0x46>
   27cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   27cfa:	b913      	cbnz	r3, 27d02 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
   27cfc:	4620      	mov	r0, r4
   27cfe:	f000 fb1f 	bl	28340 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
   27d02:	463b      	mov	r3, r7
   27d04:	4632      	mov	r2, r6
   27d06:	4629      	mov	r1, r5
   27d08:	4620      	mov	r0, r4
   27d0a:	f000 fb7a 	bl	28402 <z_shell_vfprintf>
   27d0e:	68a3      	ldr	r3, [r4, #8]
   27d10:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   27d14:	0512      	lsls	r2, r2, #20
   27d16:	d404      	bmi.n	27d22 <shell_vfprintf+0x66>
   27d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   27d1a:	b913      	cbnz	r3, 27d22 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
   27d1c:	4620      	mov	r0, r4
   27d1e:	f7e1 fa1b 	bl	9158 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   27d22:	6960      	ldr	r0, [r4, #20]
   27d24:	f000 f817 	bl	27d56 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   27d28:	68a0      	ldr	r0, [r4, #8]
}
   27d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
   27d2e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   27d32:	f7ff bf9d 	b.w	27c70 <k_mutex_unlock.isra.0>

00027d36 <shell_fprintf>:
{
   27d36:	b40c      	push	{r2, r3}
   27d38:	b507      	push	{r0, r1, r2, lr}
   27d3a:	ab04      	add	r3, sp, #16
   27d3c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   27d40:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   27d42:	f7ff ffbb 	bl	27cbc <shell_vfprintf>
}
   27d46:	b003      	add	sp, #12
   27d48:	f85d eb04 	ldr.w	lr, [sp], #4
   27d4c:	b002      	add	sp, #8
   27d4e:	4770      	bx	lr

00027d50 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
   27d50:	6883      	ldr	r3, [r0, #8]
   27d52:	6399      	str	r1, [r3, #56]	; 0x38
}
   27d54:	4770      	bx	lr

00027d56 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   27d56:	6902      	ldr	r2, [r0, #16]
   27d58:	6883      	ldr	r3, [r0, #8]
   27d5a:	6812      	ldr	r2, [r2, #0]
   27d5c:	6801      	ldr	r1, [r0, #0]
{
   27d5e:	b510      	push	{r4, lr}
   27d60:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   27d62:	68c0      	ldr	r0, [r0, #12]
   27d64:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   27d66:	6923      	ldr	r3, [r4, #16]
   27d68:	2200      	movs	r2, #0
   27d6a:	601a      	str	r2, [r3, #0]
}
   27d6c:	bd10      	pop	{r4, pc}

00027d6e <out_func>:
{
   27d6e:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   27d70:	68cb      	ldr	r3, [r1, #12]
   27d72:	7c1b      	ldrb	r3, [r3, #16]
   27d74:	2b02      	cmp	r3, #2
{
   27d76:	4605      	mov	r5, r0
   27d78:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   27d7a:	d104      	bne.n	27d86 <out_func+0x18>
   27d7c:	280a      	cmp	r0, #10
   27d7e:	d102      	bne.n	27d86 <out_func+0x18>
		(void)out_func('\r', ctx);
   27d80:	200d      	movs	r0, #13
   27d82:	f7ff fff4 	bl	27d6e <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   27d86:	6923      	ldr	r3, [r4, #16]
   27d88:	6822      	ldr	r2, [r4, #0]
   27d8a:	681b      	ldr	r3, [r3, #0]
   27d8c:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   27d8e:	6922      	ldr	r2, [r4, #16]
   27d90:	6813      	ldr	r3, [r2, #0]
   27d92:	3301      	adds	r3, #1
   27d94:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   27d96:	6862      	ldr	r2, [r4, #4]
   27d98:	4293      	cmp	r3, r2
   27d9a:	d102      	bne.n	27da2 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   27d9c:	4620      	mov	r0, r4
   27d9e:	f7ff ffda 	bl	27d56 <z_shell_fprintf_buffer_flush>
}
   27da2:	2000      	movs	r0, #0
   27da4:	bd38      	pop	{r3, r4, r5, pc}

00027da6 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   27da6:	2820      	cmp	r0, #32
   27da8:	d005      	beq.n	27db6 <isspace+0x10>
   27daa:	3809      	subs	r0, #9
   27dac:	2804      	cmp	r0, #4
   27dae:	bf8c      	ite	hi
   27db0:	2000      	movhi	r0, #0
   27db2:	2001      	movls	r0, #1
   27db4:	4770      	bx	lr
   27db6:	2001      	movs	r0, #1
}
   27db8:	4770      	bx	lr

00027dba <z_shell_strlen>:
{
   27dba:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   27dbc:	b110      	cbz	r0, 27dc4 <z_shell_strlen+0xa>
   27dbe:	f002 fa77 	bl	2a2b0 <strlen>
   27dc2:	b280      	uxth	r0, r0
}
   27dc4:	bd08      	pop	{r3, pc}

00027dc6 <z_column_span_with_buffer_offsets_get>:
{
   27dc6:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   27dc8:	7b03      	ldrb	r3, [r0, #12]
   27dca:	8940      	ldrh	r0, [r0, #10]
   27dcc:	441a      	add	r2, r3
   27dce:	4419      	add	r1, r3
   27dd0:	fbb2 f4f0 	udiv	r4, r2, r0
   27dd4:	fbb1 f3f0 	udiv	r3, r1, r0
   27dd8:	fb00 2214 	mls	r2, r0, r4, r2
   27ddc:	fb00 1013 	mls	r0, r0, r3, r1
}
   27de0:	1a10      	subs	r0, r2, r0
   27de2:	bd10      	pop	{r4, pc}

00027de4 <z_row_span_with_buffer_offsets_get>:
{
   27de4:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   27de6:	7b04      	ldrb	r4, [r0, #12]
   27de8:	8943      	ldrh	r3, [r0, #10]
   27dea:	4421      	add	r1, r4
   27dec:	1910      	adds	r0, r2, r4
   27dee:	fbb1 f1f3 	udiv	r1, r1, r3
   27df2:	fbb0 f0f3 	udiv	r0, r0, r3
}
   27df6:	1a40      	subs	r0, r0, r1
   27df8:	bd10      	pop	{r4, pc}

00027dfa <z_shell_multiline_data_calc>:
{
   27dfa:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   27dfc:	7b05      	ldrb	r5, [r0, #12]
   27dfe:	8943      	ldrh	r3, [r0, #10]
   27e00:	4429      	add	r1, r5
   27e02:	fbb1 f4f3 	udiv	r4, r1, r3
   27e06:	fb03 1114 	mls	r1, r3, r4, r1
   27e0a:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   27e0c:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   27e0e:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   27e10:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   27e12:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   27e16:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   27e1a:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   27e1c:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   27e1e:	1c4c      	adds	r4, r1, #1
   27e20:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   27e22:	8042      	strh	r2, [r0, #2]
}
   27e24:	bd30      	pop	{r4, r5, pc}

00027e26 <z_shell_make_argv>:
{
   27e26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   27e2a:	2500      	movs	r5, #0
{
   27e2c:	4606      	mov	r6, r0
   27e2e:	460f      	mov	r7, r1
   27e30:	4614      	mov	r4, r2
   27e32:	4698      	mov	r8, r3
	*argc = 0;
   27e34:	6005      	str	r5, [r0, #0]
		c = *cmd;
   27e36:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   27e38:	2800      	cmp	r0, #0
   27e3a:	f000 80b5 	beq.w	27fa8 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   27e3e:	f7ff ffb2 	bl	27da6 <isspace>
   27e42:	b118      	cbz	r0, 27e4c <z_shell_make_argv+0x26>
			*cmd++ = '\0';
   27e44:	2300      	movs	r3, #0
   27e46:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   27e4a:	e7f4      	b.n	27e36 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   27e4c:	6832      	ldr	r2, [r6, #0]
   27e4e:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   27e50:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   27e52:	6033      	str	r3, [r6, #0]
   27e54:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   27e58:	f000 80a6 	beq.w	27fa8 <z_shell_make_argv+0x182>
	char quote = 0;
   27e5c:	4605      	mov	r5, r0
		c = *cmd;
   27e5e:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   27e62:	f1b9 0f00 	cmp.w	r9, #0
   27e66:	d0e6      	beq.n	27e36 <z_shell_make_argv+0x10>
		if (!quote) {
   27e68:	2d00      	cmp	r5, #0
   27e6a:	f040 8089 	bne.w	27f80 <z_shell_make_argv+0x15a>
			switch (c) {
   27e6e:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   27e72:	d006      	beq.n	27e82 <z_shell_make_argv+0x5c>
   27e74:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   27e78:	f000 808a 	beq.w	27f90 <z_shell_make_argv+0x16a>
   27e7c:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   27e80:	d176      	bne.n	27f70 <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
   27e82:	4620      	mov	r0, r4
   27e84:	f7ff ff99 	bl	27dba <z_shell_strlen>
				memmove(cmd, cmd + 1,
   27e88:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
   27e8a:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   27e8c:	4620      	mov	r0, r4
   27e8e:	f002 fa4d 	bl	2a32c <memmove>
				continue;
   27e92:	464d      	mov	r5, r9
   27e94:	e7e3      	b.n	27e5e <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   27e96:	4620      	mov	r0, r4
   27e98:	f7ff ff8f 	bl	27dba <z_shell_strlen>
   27e9c:	1c61      	adds	r1, r4, #1
   27e9e:	4602      	mov	r2, r0
   27ea0:	4620      	mov	r0, r4
   27ea2:	f002 fa43 	bl	2a32c <memmove>
			quote = 0;
   27ea6:	2500      	movs	r5, #0
			continue;
   27ea8:	e7d9      	b.n	27e5e <z_shell_make_argv+0x38>
			if (t == '0') {
   27eaa:	2930      	cmp	r1, #48	; 0x30
   27eac:	d126      	bne.n	27efc <z_shell_make_argv+0xd6>
   27eae:	2302      	movs	r3, #2
				uint8_t v = 0U;
   27eb0:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   27eb4:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
   27eb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   27eba:	b2d2      	uxtb	r2, r2
   27ebc:	2a07      	cmp	r2, #7
   27ebe:	fa5f f983 	uxtb.w	r9, r3
   27ec2:	d818      	bhi.n	27ef6 <z_shell_make_argv+0xd0>
				for (i = 2U; i < (2 + 3); i++) {
   27ec4:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
   27ec6:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   27eca:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   27ecc:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   27ed0:	d1f0      	bne.n	27eb4 <z_shell_make_argv+0x8e>
   27ed2:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
   27ed4:	4620      	mov	r0, r4
   27ed6:	f7ff ff70 	bl	27dba <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   27eda:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   27ede:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   27ee0:	f1a9 0902 	sub.w	r9, r9, #2
					memmove(cmd, cmd + (i - 1),
   27ee4:	eba0 0209 	sub.w	r2, r0, r9
   27ee8:	4659      	mov	r1, fp
   27eea:	4620      	mov	r0, r4
   27eec:	f002 fa1e 	bl	2a32c <memmove>
					*cmd++ = v;
   27ef0:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   27ef4:	e7b3      	b.n	27e5e <z_shell_make_argv+0x38>
				if (i > 2) {
   27ef6:	f1b9 0f02 	cmp.w	r9, #2
   27efa:	d1eb      	bne.n	27ed4 <z_shell_make_argv+0xae>
			if (t == 'x') {
   27efc:	2978      	cmp	r1, #120	; 0x78
   27efe:	d13d      	bne.n	27f7c <z_shell_make_argv+0x156>
   27f00:	2102      	movs	r1, #2
				uint8_t v = 0U;
   27f02:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   27f06:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
   27f08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   27f0c:	b2db      	uxtb	r3, r3
   27f0e:	2b09      	cmp	r3, #9
   27f10:	b2c8      	uxtb	r0, r1
   27f12:	d81a      	bhi.n	27f4a <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   27f14:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   27f18:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
   27f1a:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   27f1e:	d112      	bne.n	27f46 <z_shell_make_argv+0x120>
   27f20:	f04f 0a04 	mov.w	sl, #4
						z_shell_strlen(cmd) - (i - 2));
   27f24:	4620      	mov	r0, r4
   27f26:	f7ff ff48 	bl	27dba <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   27f2a:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
   27f2e:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   27f30:	f1aa 0a02 	sub.w	sl, sl, #2
					memmove(cmd, cmd + (i - 1),
   27f34:	eba0 020a 	sub.w	r2, r0, sl
   27f38:	4659      	mov	r1, fp
   27f3a:	4620      	mov	r0, r4
   27f3c:	f002 f9f6 	bl	2a32c <memmove>
					*cmd++ = v;
   27f40:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   27f44:	e78b      	b.n	27e5e <z_shell_make_argv+0x38>
   27f46:	2103      	movs	r1, #3
   27f48:	e7dd      	b.n	27f06 <z_shell_make_argv+0xe0>
					} else if ((t >= 'a') &&
   27f4a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   27f4e:	2b05      	cmp	r3, #5
   27f50:	d803      	bhi.n	27f5a <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   27f52:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   27f54:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   27f58:	e7de      	b.n	27f18 <z_shell_make_argv+0xf2>
					} else if ((t >= 'A') && (t <= 'F')) {
   27f5a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   27f5e:	2b05      	cmp	r3, #5
   27f60:	d801      	bhi.n	27f66 <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   27f62:	3a37      	subs	r2, #55	; 0x37
   27f64:	e7f6      	b.n	27f54 <z_shell_make_argv+0x12e>
				if (i > 2) {
   27f66:	2802      	cmp	r0, #2
   27f68:	d008      	beq.n	27f7c <z_shell_make_argv+0x156>
   27f6a:	f04f 0a03 	mov.w	sl, #3
   27f6e:	e7d9      	b.n	27f24 <z_shell_make_argv+0xfe>
		if (!quote && isspace((int) c)) {
   27f70:	4648      	mov	r0, r9
   27f72:	f7ff ff18 	bl	27da6 <isspace>
   27f76:	2800      	cmp	r0, #0
   27f78:	f47f af5d 	bne.w	27e36 <z_shell_make_argv+0x10>
		cmd += 1;
   27f7c:	3401      	adds	r4, #1
   27f7e:	e76e      	b.n	27e5e <z_shell_make_argv+0x38>
		if (quote == c) {
   27f80:	45a9      	cmp	r9, r5
   27f82:	d088      	beq.n	27e96 <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
   27f84:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   27f88:	d1f8      	bne.n	27f7c <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
   27f8a:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   27f8c:	428d      	cmp	r5, r1
   27f8e:	d18c      	bne.n	27eaa <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
   27f90:	4620      	mov	r0, r4
   27f92:	f7ff ff12 	bl	27dba <z_shell_strlen>
				memmove(cmd, cmd + 1,
   27f96:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
   27f9a:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   27f9c:	4649      	mov	r1, r9
   27f9e:	4620      	mov	r0, r4
   27fa0:	f002 f9c4 	bl	2a32c <memmove>
				cmd += 1;
   27fa4:	464c      	mov	r4, r9
				continue;
   27fa6:	e75a      	b.n	27e5e <z_shell_make_argv+0x38>
}
   27fa8:	4628      	mov	r0, r5
   27faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027fae <z_shell_pattern_remove>:
{
   27fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fb0:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   27fb2:	4611      	mov	r1, r2
{
   27fb4:	4615      	mov	r5, r2
   27fb6:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   27fb8:	f002 f930 	bl	2a21c <strstr>
   27fbc:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   27fbe:	4628      	mov	r0, r5
   27fc0:	f7ff fefb 	bl	27dba <z_shell_strlen>
   27fc4:	4605      	mov	r5, r0
	if (!pattern_addr) {
   27fc6:	b1c4      	cbz	r4, 27ffa <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   27fc8:	42a7      	cmp	r7, r4
   27fca:	d207      	bcs.n	27fdc <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   27fcc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   27fd0:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   27fd2:	bf02      	ittt	eq
   27fd4:	3501      	addeq	r5, #1
   27fd6:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   27fd8:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   27fdc:	4620      	mov	r0, r4
   27fde:	f7ff feec 	bl	27dba <z_shell_strlen>
	*buff_len -= pattern_len;
   27fe2:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   27fe4:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
   27fe6:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   27fe8:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
   27fea:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   27fec:	1961      	adds	r1, r4, r5
   27fee:	4620      	mov	r0, r4
   27ff0:	b292      	uxth	r2, r2
}
   27ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   27ff6:	f002 b999 	b.w	2a32c <memmove>
}
   27ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027ffc <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   27ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28000:	4688      	mov	r8, r1
   28002:	b086      	sub	sp, #24
   28004:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
   28006:	4604      	mov	r4, r0
   28008:	b128      	cbz	r0, 28016 <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   2800a:	4601      	mov	r1, r0
   2800c:	2214      	movs	r2, #20
   2800e:	a801      	add	r0, sp, #4
   28010:	f002 f9a4 	bl	2a35c <memcpy>
		parent = &parent_cpy;
   28014:	ac01      	add	r4, sp, #4
   28016:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   28018:	4631      	mov	r1, r6
   2801a:	463a      	mov	r2, r7
   2801c:	4620      	mov	r0, r4
   2801e:	f7e0 ff25 	bl	8e6c <z_shell_cmd_get>
   28022:	3601      	adds	r6, #1
   28024:	4605      	mov	r5, r0
   28026:	b128      	cbz	r0, 28034 <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   28028:	6829      	ldr	r1, [r5, #0]
   2802a:	4640      	mov	r0, r8
   2802c:	f002 f950 	bl	2a2d0 <strcmp>
   28030:	2800      	cmp	r0, #0
   28032:	d1f1      	bne.n	28018 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
   28034:	4628      	mov	r0, r5
   28036:	b006      	add	sp, #24
   28038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002803c <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   2803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28040:	461c      	mov	r4, r3
   28042:	f8dd 8020 	ldr.w	r8, [sp, #32]
   28046:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   2804a:	2300      	movs	r3, #0
{
   2804c:	460f      	mov	r7, r1
   2804e:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   28050:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   28052:	6823      	ldr	r3, [r4, #0]
   28054:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   28056:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   28058:	d21b      	bcs.n	28092 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   2805a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   2805e:	f000 fd66 	bl	28b2e <z_shell_has_wildcard>
   28062:	6823      	ldr	r3, [r4, #0]
   28064:	4682      	mov	sl, r0
   28066:	b118      	cbz	r0, 28070 <z_shell_get_last_command+0x34>
				(*match_arg)++;
   28068:	3301      	adds	r3, #1
   2806a:	6023      	str	r3, [r4, #0]
				continue;
   2806c:	4628      	mov	r0, r5
   2806e:	e7f0      	b.n	28052 <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   28070:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   28074:	4642      	mov	r2, r8
   28076:	4628      	mov	r0, r5
   28078:	f7ff ffc0 	bl	27ffc <z_shell_find_cmd>
		if (entry) {
   2807c:	b148      	cbz	r0, 28092 <z_shell_get_last_command+0x56>
			(*match_arg)++;
   2807e:	6823      	ldr	r3, [r4, #0]
   28080:	1c5a      	adds	r2, r3, #1
   28082:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   28084:	f1b9 0f00 	cmp.w	r9, #0
   28088:	d0e3      	beq.n	28052 <z_shell_get_last_command+0x16>
   2808a:	4580      	cmp	r8, r0
   2808c:	d1e1      	bne.n	28052 <z_shell_get_last_command+0x16>
			(*match_arg)--;
   2808e:	6023      	str	r3, [r4, #0]
			return NULL;
   28090:	4655      	mov	r5, sl
		}
	}

	return entry;
}
   28092:	4628      	mov	r0, r5
   28094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028098 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   28098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2809c:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
   2809e:	f7ff fe8c 	bl	27dba <z_shell_strlen>
   280a2:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
   280a4:	bb47      	cbnz	r7, 280f8 <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
   280a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
   280aa:	b14c      	cbz	r4, 280c0 <z_shell_spaces_trim+0x28>
						len - j + 1);
   280ac:	b292      	uxth	r2, r2
   280ae:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
   280b0:	1c58      	adds	r0, r3, #1
   280b2:	3201      	adds	r2, #1
   280b4:	4438      	add	r0, r7
   280b6:	f002 f939 	bl	2a32c <memmove>
					len -= shift;
   280ba:	1b36      	subs	r6, r6, r4
   280bc:	b2b6      	uxth	r6, r6
					shift = 0U;
   280be:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
   280c0:	1e73      	subs	r3, r6, #1
   280c2:	429d      	cmp	r5, r3
   280c4:	daef      	bge.n	280a6 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   280c6:	5d78      	ldrb	r0, [r7, r5]
   280c8:	f7ff fe6d 	bl	27da6 <isspace>
   280cc:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
   280ce:	3501      	adds	r5, #1
   280d0:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
   280d2:	2800      	cmp	r0, #0
   280d4:	d0f4      	beq.n	280c0 <z_shell_spaces_trim+0x28>
   280d6:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
   280d8:	b291      	uxth	r1, r2
   280da:	428e      	cmp	r6, r1
   280dc:	d9f0      	bls.n	280c0 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   280de:	5cb8      	ldrb	r0, [r7, r2]
   280e0:	f7ff fe61 	bl	27da6 <isspace>
   280e4:	18b9      	adds	r1, r7, r2
   280e6:	f102 0c01 	add.w	ip, r2, #1
   280ea:	4680      	mov	r8, r0
   280ec:	2800      	cmp	r0, #0
   280ee:	d0dc      	beq.n	280aa <z_shell_spaces_trim+0x12>
					shift++;
   280f0:	3401      	adds	r4, #1
   280f2:	b2a4      	uxth	r4, r4
   280f4:	4662      	mov	r2, ip
   280f6:	e7ef      	b.n	280d8 <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
   280f8:	2500      	movs	r5, #0
	uint16_t shift = 0U;
   280fa:	462c      	mov	r4, r5
   280fc:	e7e0      	b.n	280c0 <z_shell_spaces_trim+0x28>

000280fe <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   280fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   28100:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   28102:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
   28106:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   28108:	b953      	cbnz	r3, 28120 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   2810a:	68ab      	ldr	r3, [r5, #8]
   2810c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   2810e:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   28110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   28112:	3a01      	subs	r2, #1
   28114:	b292      	uxth	r2, r2
   28116:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
   28118:	b922      	cbnz	r2, 28124 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
   2811a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
   2811e:	e7f4      	b.n	2810a <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   28120:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
   28124:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   28126:	18b3      	adds	r3, r6, r2
   28128:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   2812c:	f7ff fe3b 	bl	27da6 <isspace>
   28130:	4603      	mov	r3, r0
   28132:	2800      	cmp	r0, #0
   28134:	d1ed      	bne.n	28112 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   28136:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   28138:	b29f      	uxth	r7, r3
   2813a:	fa16 f183 	uxtah	r1, r6, r3
   2813e:	5df0      	ldrb	r0, [r6, r7]
   28140:	f7ff fe31 	bl	27da6 <isspace>
   28144:	3301      	adds	r3, #1
   28146:	2800      	cmp	r0, #0
   28148:	d1f6      	bne.n	28138 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
   2814a:	2f00      	cmp	r7, #0
   2814c:	d0dd      	beq.n	2810a <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   2814e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   28150:	3301      	adds	r3, #1
   28152:	1bda      	subs	r2, r3, r7
   28154:	4630      	mov	r0, r6
   28156:	f002 f8e9 	bl	2a32c <memmove>
		*buff_len = *buff_len - i;
   2815a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   2815c:	1bdb      	subs	r3, r3, r7
   2815e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   28160:	e7d3      	b.n	2810a <z_shell_cmd_trim+0xc>

00028162 <z_shell_raw_fprintf>:
{
   28162:	b40e      	push	{r1, r2, r3}
   28164:	b503      	push	{r0, r1, lr}
   28166:	aa03      	add	r2, sp, #12
   28168:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2816c:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2816e:	f7e0 fe69 	bl	8e44 <z_shell_fprintf_fmt>
}
   28172:	b002      	add	sp, #8
   28174:	f85d eb04 	ldr.w	lr, [sp], #4
   28178:	b003      	add	sp, #12
   2817a:	4770      	bx	lr

0002817c <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2817c:	6882      	ldr	r2, [r0, #8]
{
   2817e:	b538      	push	{r3, r4, r5, lr}
   28180:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   28182:	6810      	ldr	r0, [r2, #0]
   28184:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
   28186:	b110      	cbz	r0, 2818e <full_line_cmd+0x12>
   28188:	f002 f892 	bl	2a2b0 <strlen>
   2818c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2818e:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   28190:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   28192:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
   28194:	fbb3 f2f0 	udiv	r2, r3, r0
   28198:	fb00 3012 	mls	r0, r0, r2, r3
}
   2819c:	fab0 f080 	clz	r0, r0
   281a0:	0940      	lsrs	r0, r0, #5
   281a2:	bd38      	pop	{r3, r4, r5, pc}

000281a4 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   281a4:	6882      	ldr	r2, [r0, #8]
{
   281a6:	b538      	push	{r3, r4, r5, lr}
   281a8:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   281aa:	6810      	ldr	r0, [r2, #0]
   281ac:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
   281ae:	b110      	cbz	r0, 281b6 <z_shell_cursor_in_empty_line+0x12>
   281b0:	f002 f87e 	bl	2a2b0 <strlen>
   281b4:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   281b6:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   281b8:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   281ba:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
   281bc:	fbb3 f2f0 	udiv	r2, r3, r0
   281c0:	fb00 3012 	mls	r0, r0, r2, r3
}
   281c4:	fab0 f080 	clz	r0, r0
   281c8:	0940      	lsrs	r0, r0, #5
   281ca:	bd38      	pop	{r3, r4, r5, pc}

000281cc <z_shell_op_cond_next_line>:
{
   281cc:	b510      	push	{r4, lr}
   281ce:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   281d0:	f7ff ffe8 	bl	281a4 <z_shell_cursor_in_empty_line>
   281d4:	b120      	cbz	r0, 281e0 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
   281d6:	6960      	ldr	r0, [r4, #20]
}
   281d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
   281dc:	f7e0 be78 	b.w	8ed0 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   281e0:	4620      	mov	r0, r4
   281e2:	f7ff ffcb 	bl	2817c <full_line_cmd>
   281e6:	2800      	cmp	r0, #0
   281e8:	d1f5      	bne.n	281d6 <z_shell_op_cond_next_line+0xa>
}
   281ea:	bd10      	pop	{r4, pc}

000281ec <z_shell_op_cursor_position_synchronize>:
{
   281ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   281ee:	6884      	ldr	r4, [r0, #8]
{
   281f0:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   281f2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   281f4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   281f6:	f104 0020 	add.w	r0, r4, #32
   281fa:	f7ff fdfe 	bl	27dfa <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
   281fe:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
   28200:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
   28202:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   28204:	f7ff ffba 	bl	2817c <full_line_cmd>
   28208:	b110      	cbz	r0, 28210 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
   2820a:	6968      	ldr	r0, [r5, #20]
   2820c:	f7e0 fe60 	bl	8ed0 <z_cursor_next_line_move.isra.0>
	if (last_line) {
   28210:	42b7      	cmp	r7, r6
   28212:	d107      	bne.n	28224 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   28214:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   28216:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   28218:	4628      	mov	r0, r5
   2821a:	1ac9      	subs	r1, r1, r3
}
   2821c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   28220:	f7e0 be72 	b.w	8f08 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   28224:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   28226:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   28228:	4628      	mov	r0, r5
   2822a:	1ac9      	subs	r1, r1, r3
   2822c:	f7e0 fe56 	bl	8edc <z_shell_op_cursor_vert_move>
   28230:	e7f0      	b.n	28214 <z_shell_op_cursor_position_synchronize+0x28>

00028232 <z_shell_op_cursor_move>:
{
   28232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28234:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   28236:	6880      	ldr	r0, [r0, #8]
{
   28238:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   2823a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   2823c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2823e:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   28240:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   28242:	f7ff fdda 	bl	27dfa <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   28246:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   28248:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   2824a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2824c:	462a      	mov	r2, r5
   2824e:	3020      	adds	r0, #32
   28250:	f7ff fdc8 	bl	27de4 <z_row_span_with_buffer_offsets_get>
   28254:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   28256:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   28258:	462a      	mov	r2, r5
   2825a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2825c:	3020      	adds	r0, #32
   2825e:	f7ff fdb2 	bl	27dc6 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
   28262:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
   28264:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   28266:	4620      	mov	r0, r4
   28268:	f7e0 fe38 	bl	8edc <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   2826c:	4631      	mov	r1, r6
   2826e:	4620      	mov	r0, r4
   28270:	f7e0 fe4a 	bl	8f08 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   28274:	68a3      	ldr	r3, [r4, #8]
   28276:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   28278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002827a <z_shell_op_cursor_word_move>:
{
   2827a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   2827e:	1e0c      	subs	r4, r1, #0
{
   28280:	4606      	mov	r6, r0
	if (val < 0) {
   28282:	da34      	bge.n	282ee <z_shell_op_cursor_word_move+0x74>
		val = -val;
   28284:	4264      	negs	r4, r4
   28286:	b224      	sxth	r4, r4
		sign = -1;
   28288:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2828c:	b2a4      	uxth	r4, r4
   2828e:	b2af      	uxth	r7, r5
   28290:	e025      	b.n	282de <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(shell->ctx->cmd_buff,
   28292:	68b3      	ldr	r3, [r6, #8]
   28294:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
   28298:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
   2829c:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
   282a0:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   282a2:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   282a4:	eba3 010e 	sub.w	r1, r3, lr
   282a8:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   282aa:	b90b      	cbnz	r3, 282b0 <z_shell_op_cursor_word_move+0x36>
   282ac:	1c6a      	adds	r2, r5, #1
   282ae:	d010      	beq.n	282d2 <z_shell_op_cursor_word_move+0x58>
   282b0:	4599      	cmp	r9, r3
   282b2:	d101      	bne.n	282b8 <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
   282b4:	2d01      	cmp	r5, #1
   282b6:	d00c      	beq.n	282d2 <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
   282b8:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   282bc:	f042 0c20 	orr.w	ip, r2, #32
   282c0:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   282c4:	f1bc 0f19 	cmp.w	ip, #25
   282c8:	d90d      	bls.n	282e6 <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   282ca:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   282cc:	2a09      	cmp	r2, #9
   282ce:	d90a      	bls.n	282e6 <z_shell_op_cursor_word_move+0x6c>
			if (found) {
   282d0:	b150      	cbz	r0, 282e8 <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(shell, sign * shift);
   282d2:	b209      	sxth	r1, r1
   282d4:	4630      	mov	r0, r6
   282d6:	f7ff ffac 	bl	28232 <z_shell_op_cursor_move>
   282da:	3c01      	subs	r4, #1
   282dc:	b2a4      	uxth	r4, r4
	while (val--) {
   282de:	2c00      	cmp	r4, #0
   282e0:	d1d7      	bne.n	28292 <z_shell_op_cursor_word_move+0x18>
}
   282e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   282e6:	2001      	movs	r0, #1
	while (1) {
   282e8:	443b      	add	r3, r7
   282ea:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   282ec:	e7da      	b.n	282a4 <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
   282ee:	2501      	movs	r5, #1
   282f0:	e7cc      	b.n	2828c <z_shell_op_cursor_word_move+0x12>

000282f2 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   282f2:	6883      	ldr	r3, [r0, #8]
   282f4:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   282f6:	4249      	negs	r1, r1
   282f8:	b209      	sxth	r1, r1
   282fa:	f7ff bf9a 	b.w	28232 <z_shell_op_cursor_move>

000282fe <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   282fe:	6883      	ldr	r3, [r0, #8]
   28300:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   28302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   28304:	1ac9      	subs	r1, r1, r3
   28306:	b209      	sxth	r1, r1
   28308:	f7ff bf93 	b.w	28232 <z_shell_op_cursor_move>

0002830c <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   2830c:	6883      	ldr	r3, [r0, #8]
   2830e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   28310:	b11b      	cbz	r3, 2831a <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   28312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28316:	f7ff bf8c 	b.w	28232 <z_shell_op_cursor_move>
}
   2831a:	4770      	bx	lr

0002831c <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   2831c:	6883      	ldr	r3, [r0, #8]
   2831e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   28320:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   28322:	429a      	cmp	r2, r3
   28324:	d202      	bcs.n	2832c <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   28326:	2101      	movs	r1, #1
   28328:	f7ff bf83 	b.w	28232 <z_shell_op_cursor_move>
}
   2832c:	4770      	bx	lr

0002832e <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   2832e:	6883      	ldr	r3, [r0, #8]
   28330:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   28332:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   28334:	4413      	add	r3, r2
   28336:	2200      	movs	r2, #0
   28338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
   2833c:	f7e0 bdbc 	b.w	8eb8 <z_clear_eos>

00028340 <z_shell_cmd_line_erase>:
{
   28340:	b510      	push	{r4, lr}
   28342:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   28344:	6880      	ldr	r0, [r0, #8]
   28346:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   28348:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2834a:	3020      	adds	r0, #32
   2834c:	f7ff fd55 	bl	27dfa <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   28350:	68a3      	ldr	r3, [r4, #8]
   28352:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   28354:	4620      	mov	r0, r4
   28356:	f1c1 0101 	rsb	r1, r1, #1
   2835a:	f7e0 fdd5 	bl	8f08 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   2835e:	68a3      	ldr	r3, [r4, #8]
   28360:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   28362:	4620      	mov	r0, r4
   28364:	3901      	subs	r1, #1
   28366:	f7e0 fdb9 	bl	8edc <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   2836a:	4620      	mov	r0, r4
}
   2836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   28370:	f7e0 bda2 	b.w	8eb8 <z_clear_eos>

00028374 <z_shell_write>:
{
   28374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28378:	4605      	mov	r5, r0
   2837a:	b086      	sub	sp, #24
   2837c:	460f      	mov	r7, r1
   2837e:	4614      	mov	r4, r2
	size_t offset = 0;
   28380:	2600      	movs	r6, #0
	while (length) {
   28382:	b914      	cbnz	r4, 2838a <z_shell_write+0x16>
}
   28384:	b006      	add	sp, #24
   28386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   2838a:	6868      	ldr	r0, [r5, #4]
   2838c:	6803      	ldr	r3, [r0, #0]
   2838e:	4622      	mov	r2, r4
   28390:	f8d3 800c 	ldr.w	r8, [r3, #12]
   28394:	19b9      	adds	r1, r7, r6
   28396:	466b      	mov	r3, sp
   28398:	47c0      	blx	r8
		offset += tmp_cnt;
   2839a:	9a00      	ldr	r2, [sp, #0]
   2839c:	4416      	add	r6, r2
		length -= tmp_cnt;
   2839e:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
   283a0:	2a00      	cmp	r2, #0
   283a2:	d1ee      	bne.n	28382 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   283a4:	68ab      	ldr	r3, [r5, #8]
   283a6:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
   283a8:	2903      	cmp	r1, #3
   283aa:	d0ea      	beq.n	28382 <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   283ac:	2902      	cmp	r1, #2
   283ae:	d813      	bhi.n	283d8 <z_shell_write+0x64>
		k_poll_event_init(&event,
   283b0:	f503 7326 	add.w	r3, r3, #664	; 0x298
   283b4:	2101      	movs	r1, #1
   283b6:	a801      	add	r0, sp, #4
   283b8:	f005 fd90 	bl	2dedc <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   283bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   283c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   283c4:	2101      	movs	r1, #1
   283c6:	a801      	add	r0, sp, #4
   283c8:	f7fe f822 	bl	26410 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   283cc:	68a8      	ldr	r0, [r5, #8]
   283ce:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   283d2:	f005 fda5 	bl	2df20 <z_impl_k_poll_signal_reset>
   283d6:	e7d4      	b.n	28382 <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
   283d8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
   283dc:	0792      	lsls	r2, r2, #30
   283de:	d5fb      	bpl.n	283d8 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   283e0:	f3bf 8f5b 	dmb	ish
   283e4:	f503 7319 	add.w	r3, r3, #612	; 0x264
   283e8:	e853 2f00 	ldrex	r2, [r3]
   283ec:	f022 0202 	bic.w	r2, r2, #2
   283f0:	e843 2100 	strex	r1, r2, [r3]
   283f4:	2900      	cmp	r1, #0
   283f6:	d1f7      	bne.n	283e8 <z_shell_write+0x74>
   283f8:	f3bf 8f5b 	dmb	ish
	return ret;
   283fc:	e7c1      	b.n	28382 <z_shell_write+0xe>

000283fe <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   283fe:	f7ff bfb9 	b.w	28374 <z_shell_write>

00028402 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   28402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28404:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
   28406:	6881      	ldr	r1, [r0, #8]
   28408:	461e      	mov	r6, r3
   2840a:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   2840e:	06db      	lsls	r3, r3, #27
{
   28410:	4604      	mov	r4, r0
   28412:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   28414:	d517      	bpl.n	28446 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
   28416:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   2841a:	42bb      	cmp	r3, r7
   2841c:	d013      	beq.n	28446 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   2841e:	2202      	movs	r2, #2
   28420:	312e      	adds	r1, #46	; 0x2e
   28422:	a801      	add	r0, sp, #4
   28424:	f001 ff9a 	bl	2a35c <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
   28428:	4639      	mov	r1, r7
   2842a:	4620      	mov	r0, r4
   2842c:	f7e0 fd8a 	bl	8f44 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   28430:	6960      	ldr	r0, [r4, #20]
   28432:	4632      	mov	r2, r6
   28434:	4629      	mov	r1, r5
   28436:	f7e0 fd05 	bl	8e44 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
   2843a:	a901      	add	r1, sp, #4
   2843c:	4620      	mov	r0, r4
   2843e:	f7e0 fda1 	bl	8f84 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   28442:	b003      	add	sp, #12
   28444:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   28446:	6960      	ldr	r0, [r4, #20]
   28448:	4632      	mov	r2, r6
   2844a:	4629      	mov	r1, r5
}
   2844c:	b003      	add	sp, #12
   2844e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   28452:	f7e0 bcf7 	b.w	8e44 <z_shell_fprintf_fmt>

00028456 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   28456:	b40c      	push	{r2, r3}
   28458:	b507      	push	{r0, r1, r2, lr}
   2845a:	ab04      	add	r3, sp, #16
   2845c:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   28460:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   28462:	f7ff ffce 	bl	28402 <z_shell_vfprintf>
	va_end(args);
}
   28466:	b003      	add	sp, #12
   28468:	f85d eb04 	ldr.w	lr, [sp], #4
   2846c:	b002      	add	sp, #8
   2846e:	4770      	bx	lr

00028470 <data_insert>:
{
   28470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   28474:	6886      	ldr	r6, [r0, #8]
   28476:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   28478:	18ab      	adds	r3, r5, r2
   2847a:	2bff      	cmp	r3, #255	; 0xff
{
   2847c:	4607      	mov	r7, r0
   2847e:	4688      	mov	r8, r1
   28480:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   28482:	dc1e      	bgt.n	284c2 <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   28484:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
   28486:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   28488:	3342      	adds	r3, #66	; 0x42
   2848a:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2848c:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   2848e:	462a      	mov	r2, r5
   28490:	4631      	mov	r1, r6
   28492:	1930      	adds	r0, r6, r4
   28494:	f001 ff4a 	bl	2a32c <memmove>
	memcpy(curr_pos, data, len);
   28498:	4622      	mov	r2, r4
   2849a:	4641      	mov	r1, r8
   2849c:	4630      	mov	r0, r6
   2849e:	f001 ff5d 	bl	2a35c <memcpy>
	shell->ctx->cmd_buff_len += len;
   284a2:	68b9      	ldr	r1, [r7, #8]
   284a4:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
   284a6:	4423      	add	r3, r4
   284a8:	b29b      	uxth	r3, r3
   284aa:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   284ac:	440b      	add	r3, r1
   284ae:	2200      	movs	r2, #0
   284b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
   284b4:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
   284b8:	079b      	lsls	r3, r3, #30
   284ba:	d404      	bmi.n	284c6 <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
   284bc:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
   284be:	4414      	add	r4, r2
   284c0:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
   284c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   284c6:	4629      	mov	r1, r5
   284c8:	4638      	mov	r0, r7
}
   284ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   284ce:	f7e0 bdd3 	b.w	9078 <reprint_from_cursor>

000284d2 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   284d2:	f7ff bfcd 	b.w	28470 <data_insert>

000284d6 <z_shell_op_char_delete>:
{
   284d6:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   284d8:	6883      	ldr	r3, [r0, #8]
{
   284da:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   284dc:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   284de:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   284e0:	1a24      	subs	r4, r4, r0
   284e2:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   284e4:	b18c      	cbz	r4, 2850a <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   284e6:	3042      	adds	r0, #66	; 0x42
   284e8:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   284ea:	4622      	mov	r2, r4
   284ec:	1c41      	adds	r1, r0, #1
   284ee:	f001 ff1d 	bl	2a32c <memmove>
	--shell->ctx->cmd_buff_len;
   284f2:	68aa      	ldr	r2, [r5, #8]
   284f4:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   284f6:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   284f8:	3b01      	subs	r3, #1
   284fa:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   284fc:	4628      	mov	r0, r5
   284fe:	2201      	movs	r2, #1
}
   28500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   28504:	b289      	uxth	r1, r1
   28506:	f7e0 bdb7 	b.w	9078 <reprint_from_cursor>
}
   2850a:	bd38      	pop	{r3, r4, r5, pc}

0002850c <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   2850c:	6883      	ldr	r3, [r0, #8]
   2850e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   28510:	b510      	push	{r4, lr}
   28512:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   28514:	b152      	cbz	r2, 2852c <z_shell_op_char_backspace+0x20>
   28516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   28518:	b143      	cbz	r3, 2852c <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   2851a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2851e:	f7ff fe88 	bl	28232 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   28522:	4620      	mov	r0, r4
}
   28524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   28528:	f7ff bfd5 	b.w	284d6 <z_shell_op_char_delete>
}
   2852c:	bd10      	pop	{r4, pc}

0002852e <process_msg2_from_buffer>:
		irq_unlock(key);
	}
}

static bool process_msg2_from_buffer(const struct shell *shell)
{
   2852e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = shell->log_backend;
   28530:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   28532:	699e      	ldr	r6, [r3, #24]
	const struct log_output *log_output = log_backend->log_output;
   28534:	689f      	ldr	r7, [r3, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
   28536:	6883      	ldr	r3, [r0, #8]
	union log_msg2_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);

	msg = (union log_msg2_generic *)mpsc_pbuf_claim(mpsc_buffer);
   28538:	4630      	mov	r0, r6
   2853a:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
   2853e:	f7fe ffb2 	bl	274a6 <mpsc_pbuf_claim>
   28542:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
   28546:	4604      	mov	r4, r0
   28548:	b160      	cbz	r0, 28564 <process_msg2_from_buffer+0x36>
		flags |= LOG_OUTPUT_FLAG_COLORS;
   2854a:	2d00      	cmp	r5, #0
	log_output_msg2_process(log_output, &msg->log, flags);
   2854c:	4601      	mov	r1, r0
   2854e:	bf0c      	ite	eq
   28550:	220e      	moveq	r2, #14
   28552:	220f      	movne	r2, #15
   28554:	4638      	mov	r0, r7
   28556:	f7de fecd 	bl	72f4 <log_output_msg2_process>
		return false;
	}

	process_log_msg2(shell, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
   2855a:	4630      	mov	r0, r6
   2855c:	4621      	mov	r1, r4
   2855e:	f7fe ffee 	bl	2753e <mpsc_pbuf_free>

	return true;
   28562:	2001      	movs	r0, #1
}
   28564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028566 <log2_process>:

static void log2_process(const struct log_backend *const backend,
		    union log_msg2_generic *msg)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   28566:	6843      	ldr	r3, [r0, #4]
{
   28568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2856c:	681e      	ldr	r6, [r3, #0]
   2856e:	68b2      	ldr	r2, [r6, #8]
	const struct shell_log_backend *log_backend = shell->log_backend;
   28570:	69f3      	ldr	r3, [r6, #28]
   28572:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
	struct k_poll_signal *signal;

	switch (shell->log_backend->control_block->state) {
   28576:	68da      	ldr	r2, [r3, #12]
   28578:	7912      	ldrb	r2, [r2, #4]
   2857a:	2a01      	cmp	r2, #1
{
   2857c:	460d      	mov	r5, r1
   2857e:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (shell->log_backend->control_block->state) {
   28582:	d003      	beq.n	2858c <log2_process+0x26>
   28584:	2a03      	cmp	r2, #3
   28586:	d042      	beq.n	2860e <log2_process+0xa8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
   28588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   2858c:	699f      	ldr	r7, [r3, #24]
			copy_to_pbuffer(mpsc_buffer, msg,
   2858e:	6918      	ldr	r0, [r3, #16]
	return msg->generic.type == Z_LOG_MSG2_LOG;
   28590:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
   28592:	0759      	lsls	r1, r3, #29
   28594:	d439      	bmi.n	2860a <log2_process+0xa4>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   28596:	682b      	ldr	r3, [r5, #0]
   28598:	f3c3 2449 	ubfx	r4, r3, #9, #10
   2859c:	886b      	ldrh	r3, [r5, #2]
   2859e:	f3c3 03cb 	ubfx	r3, r3, #3, #12
   285a2:	441c      	add	r4, r3
   285a4:	3413      	adds	r4, #19
   285a6:	f024 0407 	bic.w	r4, r4, #7
   285aa:	08a4      	lsrs	r4, r4, #2
   285ac:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   285b0:	f240 3ce7 	movw	ip, #999	; 0x3e7
   285b4:	2100      	movs	r1, #0
   285b6:	fbe0 c10e 	umlal	ip, r1, r0, lr
   285ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   285be:	2300      	movs	r3, #0
   285c0:	4660      	mov	r0, ip
   285c2:	f7d8 fded 	bl	11a0 <__aeabi_uldivmod>
   285c6:	4602      	mov	r2, r0
   285c8:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
   285ca:	4638      	mov	r0, r7
   285cc:	4621      	mov	r1, r4
   285ce:	f7fe fed7 	bl	27380 <mpsc_pbuf_alloc>
	if (!dst) {
   285d2:	4680      	mov	r8, r0
   285d4:	b188      	cbz	r0, 285fa <log2_process+0x94>
	dst->hdr.data = msg->buf.hdr.data;
   285d6:	4629      	mov	r1, r5
   285d8:	6802      	ldr	r2, [r0, #0]
   285da:	f851 3b04 	ldr.w	r3, [r1], #4
   285de:	f3c3 039d 	ubfx	r3, r3, #2, #30
   285e2:	f363 029f 	bfi	r2, r3, #2, #30
   285e6:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
   285ea:	1e62      	subs	r2, r4, #1
   285ec:	0092      	lsls	r2, r2, #2
   285ee:	f001 feb5 	bl	2a35c <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
   285f2:	4641      	mov	r1, r8
   285f4:	4638      	mov	r0, r7
   285f6:	f7fe ff39 	bl	2746c <mpsc_pbuf_commit>
				signal =
   285fa:	68b0      	ldr	r0, [r6, #8]
   285fc:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   28600:	2100      	movs	r1, #0
}
   28602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   28606:	f7fd bf5f 	b.w	264c8 <z_impl_k_poll_signal_raise>
	return 0;
   2860a:	2400      	movs	r4, #0
   2860c:	e7ce      	b.n	285ac <log2_process+0x46>
		z_shell_cmd_line_erase(shell);
   2860e:	4630      	mov	r0, r6
	const struct log_output *log_output = log_backend->log_output;
   28610:	689f      	ldr	r7, [r3, #8]
		z_shell_cmd_line_erase(shell);
   28612:	f7ff fe95 	bl	28340 <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
   28616:	2c00      	cmp	r4, #0
   28618:	bf0c      	ite	eq
   2861a:	f04f 080e 	moveq.w	r8, #14
   2861e:	f04f 080f 	movne.w	r8, #15
	__asm__ volatile(
   28622:	f04f 0320 	mov.w	r3, #32
   28626:	f3ef 8411 	mrs	r4, BASEPRI
   2862a:	f383 8812 	msr	BASEPRI_MAX, r3
   2862e:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   28632:	68b3      	ldr	r3, [r6, #8]
   28634:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
   28638:	051a      	lsls	r2, r3, #20
   2863a:	d402      	bmi.n	28642 <log2_process+0xdc>
			z_shell_cmd_line_erase(shell);
   2863c:	4630      	mov	r0, r6
   2863e:	f7ff fe7f 	bl	28340 <z_shell_cmd_line_erase>
	log_output_msg2_process(log_output, &msg->log, flags);
   28642:	4642      	mov	r2, r8
   28644:	4629      	mov	r1, r5
   28646:	4638      	mov	r0, r7
   28648:	f7de fe54 	bl	72f4 <log_output_msg2_process>
   2864c:	68b3      	ldr	r3, [r6, #8]
   2864e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
   28652:	051b      	lsls	r3, r3, #20
   28654:	d402      	bmi.n	2865c <log2_process+0xf6>
			z_shell_print_prompt_and_cmd(shell);
   28656:	4630      	mov	r0, r6
   28658:	f7e0 fd7e 	bl	9158 <z_shell_print_prompt_and_cmd>
	__asm__ volatile(
   2865c:	f384 8811 	msr	BASEPRI, r4
   28660:	f3bf 8f6f 	isb	sy
}
   28664:	e790      	b.n	28588 <log2_process+0x22>

00028666 <dropped>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   28666:	6843      	ldr	r3, [r0, #4]
   28668:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2866a:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   2866e:	f3bf 8f5b 	dmb	ish
   28672:	e853 0f00 	ldrex	r0, [r3]
   28676:	4408      	add	r0, r1
   28678:	e843 0c00 	strex	ip, r0, [r3]
   2867c:	f1bc 0f00 	cmp.w	ip, #0
   28680:	d1f7      	bne.n	28672 <dropped+0xc>
   28682:	f3bf 8f5b 	dmb	ish
   28686:	68d3      	ldr	r3, [r2, #12]
   28688:	f3bf 8f5b 	dmb	ish
   2868c:	e853 2f00 	ldrex	r2, [r3]
   28690:	440a      	add	r2, r1
   28692:	e843 2000 	strex	r0, r2, [r3]
   28696:	2800      	cmp	r0, #0
   28698:	d1f8      	bne.n	2868c <dropped+0x26>
   2869a:	f3bf 8f5b 	dmb	ish
}
   2869e:	4770      	bx	lr

000286a0 <z_shell_log_backend_output_func>:
{
   286a0:	b510      	push	{r4, lr}
   286a2:	4613      	mov	r3, r2
   286a4:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   286a6:	460a      	mov	r2, r1
   286a8:	4601      	mov	r1, r0
   286aa:	4618      	mov	r0, r3
   286ac:	f7ff fea7 	bl	283fe <z_shell_print_stream>
}
   286b0:	4620      	mov	r0, r4
   286b2:	bd10      	pop	{r4, pc}

000286b4 <z_shell_log_backend_enable>:
{
   286b4:	b570      	push	{r4, r5, r6, lr}
   286b6:	4604      	mov	r4, r0
   286b8:	460d      	mov	r5, r1
   286ba:	4616      	mov	r6, r2
		mpsc_pbuf_init(backend->mpsc_buffer,
   286bc:	e9d0 1005 	ldrd	r1, r0, [r0, #20]
   286c0:	f7fe fe3f 	bl	27342 <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
   286c4:	4632      	mov	r2, r6
   286c6:	6820      	ldr	r0, [r4, #0]
   286c8:	4629      	mov	r1, r5
   286ca:	f7de fc93 	bl	6ff4 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   286ce:	68a3      	ldr	r3, [r4, #8]
   286d0:	685b      	ldr	r3, [r3, #4]
   286d2:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   286d4:	68e3      	ldr	r3, [r4, #12]
   286d6:	2200      	movs	r2, #0
   286d8:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   286da:	2201      	movs	r2, #1
   286dc:	711a      	strb	r2, [r3, #4]
}
   286de:	bd70      	pop	{r4, r5, r6, pc}

000286e0 <z_shell_log_backend_disable>:
{
   286e0:	b510      	push	{r4, lr}
   286e2:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   286e4:	6800      	ldr	r0, [r0, #0]
   286e6:	f7ff f8c9 	bl	2787c <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   286ea:	68e3      	ldr	r3, [r4, #12]
   286ec:	2202      	movs	r2, #2
   286ee:	711a      	strb	r2, [r3, #4]
}
   286f0:	bd10      	pop	{r4, pc}

000286f2 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   286f2:	6843      	ldr	r3, [r0, #4]
{
   286f4:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   286f6:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   286f8:	6860      	ldr	r0, [r4, #4]
   286fa:	6803      	ldr	r3, [r0, #0]
   286fc:	2101      	movs	r1, #1
   286fe:	689b      	ldr	r3, [r3, #8]
   28700:	4798      	blx	r3
	if (err == 0) {
   28702:	bb48      	cbnz	r0, 28758 <panic+0x66>
		shell->log_backend->control_block->state =
   28704:	69e3      	ldr	r3, [r4, #28]
   28706:	68db      	ldr	r3, [r3, #12]
   28708:	2203      	movs	r2, #3
   2870a:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2870c:	68a3      	ldr	r3, [r4, #8]
   2870e:	f3bf 8f5b 	dmb	ish
   28712:	f503 7319 	add.w	r3, r3, #612	; 0x264
   28716:	e853 2f00 	ldrex	r2, [r3]
   2871a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2871e:	e843 2100 	strex	r1, r2, [r3]
   28722:	2900      	cmp	r1, #0
   28724:	d1f7      	bne.n	28716 <panic+0x24>
   28726:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   2872a:	68a0      	ldr	r0, [r4, #8]
   2872c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2872e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   28730:	3020      	adds	r0, #32
   28732:	f7ff fb62 	bl	27dfa <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   28736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2873a:	4620      	mov	r0, r4
   2873c:	f7e0 fbce 	bl	8edc <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   28740:	68a3      	ldr	r3, [r4, #8]
   28742:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   28744:	4620      	mov	r0, r4
   28746:	4249      	negs	r1, r1
   28748:	f7e0 fbde 	bl	8f08 <z_shell_op_cursor_horiz_move>
			while (process_msg2_from_buffer(shell)) {
   2874c:	4620      	mov	r0, r4
   2874e:	f7ff feee 	bl	2852e <process_msg2_from_buffer>
   28752:	2800      	cmp	r0, #0
   28754:	d1fa      	bne.n	2874c <panic+0x5a>
}
   28756:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   28758:	69e0      	ldr	r0, [r4, #28]
}
   2875a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   2875e:	f7ff bfbf 	b.w	286e0 <z_shell_log_backend_disable>

00028762 <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   28762:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   28764:	685b      	ldr	r3, [r3, #4]
{
   28766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
   28768:	681c      	ldr	r4, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
   2876a:	68a3      	ldr	r3, [r4, #8]
   2876c:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28770:	68c3      	ldr	r3, [r0, #12]
   28772:	f3bf 8f5b 	dmb	ish
{
   28776:	4605      	mov	r5, r0
   28778:	f3c6 1600 	ubfx	r6, r6, #4, #1
   2877c:	2200      	movs	r2, #0
   2877e:	e853 7f00 	ldrex	r7, [r3]
   28782:	e843 2100 	strex	r1, r2, [r3]
   28786:	2900      	cmp	r1, #0
   28788:	d1f9      	bne.n	2877e <z_shell_log_backend_process+0x1c>
   2878a:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   2878e:	b19f      	cbz	r7, 287b8 <z_shell_log_backend_process+0x56>
		if (colors) {
   28790:	b14e      	cbz	r6, 287a6 <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   28792:	68a1      	ldr	r1, [r4, #8]
   28794:	2202      	movs	r2, #2
   28796:	312e      	adds	r1, #46	; 0x2e
   28798:	a801      	add	r0, sp, #4
   2879a:	f001 fddf 	bl	2a35c <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   2879e:	2101      	movs	r1, #1
   287a0:	4620      	mov	r0, r4
   287a2:	f7e0 fbcf 	bl	8f44 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   287a6:	68a8      	ldr	r0, [r5, #8]
   287a8:	4639      	mov	r1, r7
   287aa:	f7de fe07 	bl	73bc <log_output_dropped_process>
		if (colors) {
   287ae:	b11e      	cbz	r6, 287b8 <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
   287b0:	a901      	add	r1, sp, #4
   287b2:	4620      	mov	r0, r4
   287b4:	f7e0 fbe6 	bl	8f84 <z_shell_vt100_colors_restore>
		return process_msg2_from_buffer(shell);
   287b8:	4620      	mov	r0, r4
}
   287ba:	b003      	add	sp, #12
   287bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return process_msg2_from_buffer(shell);
   287c0:	f7ff beb5 	b.w	2852e <process_msg2_from_buffer>

000287c4 <z_shell_raw_fprintf>:
{
   287c4:	b40e      	push	{r1, r2, r3}
   287c6:	b503      	push	{r0, r1, lr}
   287c8:	aa03      	add	r2, sp, #12
   287ca:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   287ce:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   287d0:	f7e0 fb38 	bl	8e44 <z_shell_fprintf_fmt>
}
   287d4:	b002      	add	sp, #8
   287d6:	f85d eb04 	ldr.w	lr, [sp], #4
   287da:	b003      	add	sp, #12
   287dc:	4770      	bx	lr

000287de <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
   287de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   287e2:	4604      	mov	r4, r0
   287e4:	4690      	mov	r8, r2
	if (str == NULL) {
   287e6:	460e      	mov	r6, r1
   287e8:	2900      	cmp	r1, #0
   287ea:	d069      	beq.n	288c0 <formatted_text_print.constprop.0+0xe2>
   287ec:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset))) {
   287ee:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   287f0:	2b20      	cmp	r3, #32
   287f2:	d023      	beq.n	2883c <formatted_text_print.constprop.0+0x5e>
   287f4:	3b09      	subs	r3, #9
   287f6:	2b04      	cmp	r3, #4
   287f8:	d920      	bls.n	2883c <formatted_text_print.constprop.0+0x5e>
   287fa:	4630      	mov	r0, r6
   287fc:	f001 fd58 	bl	2a2b0 <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   28800:	68a3      	ldr	r3, [r4, #8]
   28802:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   28804:	b280      	uxth	r0, r0
   28806:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   28808:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   2880c:	4298      	cmp	r0, r3
   2880e:	eb06 0905 	add.w	r9, r6, r5
   28812:	d915      	bls.n	28840 <formatted_text_print.constprop.0+0x62>
   28814:	4648      	mov	r0, r9
		size_t idx = 0;
   28816:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
   28818:	f810 2b01 	ldrb.w	r2, [r0], #1
   2881c:	2a20      	cmp	r2, #32
   2881e:	d006      	beq.n	2882e <formatted_text_print.constprop.0+0x50>
   28820:	f1a2 0c09 	sub.w	ip, r2, #9
   28824:	f1bc 0f04 	cmp.w	ip, #4
   28828:	d802      	bhi.n	28830 <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
   2882a:	2a0a      	cmp	r2, #10
   2882c:	d02f      	beq.n	2888e <formatted_text_print.constprop.0+0xb0>
   2882e:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
   28830:	eb08 0207 	add.w	r2, r8, r7
   28834:	4291      	cmp	r1, r2
   28836:	d929      	bls.n	2888c <formatted_text_print.constprop.0+0xae>
			++idx;
   28838:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   2883a:	e7ed      	b.n	28818 <formatted_text_print.constprop.0+0x3a>
		++offset;
   2883c:	3501      	adds	r5, #1
   2883e:	e7d6      	b.n	287ee <formatted_text_print.constprop.0+0x10>
   28840:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
   28842:	2700      	movs	r7, #0
   28844:	42b8      	cmp	r0, r7
   28846:	d016      	beq.n	28876 <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
   28848:	f813 2b01 	ldrb.w	r2, [r3], #1
   2884c:	2a0a      	cmp	r2, #10
   2884e:	eb05 0a07 	add.w	sl, r5, r7
   28852:	d119      	bne.n	28888 <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   28854:	6960      	ldr	r0, [r4, #20]
   28856:	f7ff fa7e 	bl	27d56 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   2885a:	4649      	mov	r1, r9
   2885c:	463a      	mov	r2, r7
   2885e:	4620      	mov	r0, r4
   28860:	f7ff fd88 	bl	28374 <z_shell_write>
					z_cursor_next_line_move(shell);
   28864:	6960      	ldr	r0, [r4, #20]
   28866:	f7e0 fc8f 	bl	9188 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
   2886a:	4641      	mov	r1, r8
   2886c:	4620      	mov	r0, r4
					offset += idx + 1;
   2886e:	f10a 0501 	add.w	r5, sl, #1
					z_shell_op_cursor_horiz_move(shell,
   28872:	f7e0 fb49 	bl	8f08 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   28876:	6960      	ldr	r0, [r4, #20]
   28878:	1971      	adds	r1, r6, r5
   2887a:	f7ff ffa3 	bl	287c4 <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
   2887e:	6960      	ldr	r0, [r4, #20]
}
   28880:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
   28884:	f7e0 bc80 	b.w	9188 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
   28888:	3701      	adds	r7, #1
   2888a:	e7db      	b.n	28844 <formatted_text_print.constprop.0+0x66>
   2888c:	461f      	mov	r7, r3
   2888e:	6960      	ldr	r0, [r4, #20]
   28890:	f7ff fa61 	bl	27d56 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   28894:	463a      	mov	r2, r7
   28896:	4649      	mov	r1, r9
   28898:	4620      	mov	r0, r4
   2889a:	f7ff fd6b 	bl	28374 <z_shell_write>
		offset += length;
   2889e:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   288a0:	5d73      	ldrb	r3, [r6, r5]
   288a2:	2b20      	cmp	r3, #32
   288a4:	d00a      	beq.n	288bc <formatted_text_print.constprop.0+0xde>
   288a6:	3b09      	subs	r3, #9
   288a8:	2b04      	cmp	r3, #4
   288aa:	d907      	bls.n	288bc <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(shell);
   288ac:	6960      	ldr	r0, [r4, #20]
   288ae:	f7e0 fc6b 	bl	9188 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   288b2:	4641      	mov	r1, r8
   288b4:	4620      	mov	r0, r4
   288b6:	f7e0 fb27 	bl	8f08 <z_shell_op_cursor_horiz_move>
	while (true) {
   288ba:	e79e      	b.n	287fa <formatted_text_print.constprop.0+0x1c>
			++offset;
   288bc:	3501      	adds	r5, #1
   288be:	e7ef      	b.n	288a0 <formatted_text_print.constprop.0+0xc2>
}
   288c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000288c4 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   288c4:	6983      	ldr	r3, [r0, #24]
   288c6:	2000      	movs	r0, #0
   288c8:	6018      	str	r0, [r3, #0]
}
   288ca:	4770      	bx	lr

000288cc <z_shell_raw_fprintf>:
{
   288cc:	b40e      	push	{r1, r2, r3}
   288ce:	b503      	push	{r0, r1, lr}
   288d0:	aa03      	add	r2, sp, #12
   288d2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   288d6:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   288d8:	f7e0 fab4 	bl	8e44 <z_shell_fprintf_fmt>
}
   288dc:	b002      	add	sp, #8
   288de:	f85d eb04 	ldr.w	lr, [sp], #4
   288e2:	b003      	add	sp, #12
   288e4:	4770      	bx	lr

000288e6 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   288e6:	6883      	ldr	r3, [r0, #8]
   288e8:	f3bf 8f5b 	dmb	ish
   288ec:	f503 7318 	add.w	r3, r3, #608	; 0x260
   288f0:	e853 2f00 	ldrex	r2, [r3]
   288f4:	f022 0208 	bic.w	r2, r2, #8
   288f8:	e843 2100 	strex	r1, r2, [r3]
   288fc:	2900      	cmp	r1, #0
   288fe:	d1f7      	bne.n	288f0 <cmd_bacskpace_mode_backspace+0xa>
   28900:	f3bf 8f5b 	dmb	ish
}
   28904:	2000      	movs	r0, #0
   28906:	4770      	bx	lr

00028908 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28908:	6883      	ldr	r3, [r0, #8]
   2890a:	f3bf 8f5b 	dmb	ish
   2890e:	f503 7318 	add.w	r3, r3, #608	; 0x260
   28912:	e853 2f00 	ldrex	r2, [r3]
   28916:	f042 0208 	orr.w	r2, r2, #8
   2891a:	e843 2100 	strex	r1, r2, [r3]
   2891e:	2900      	cmp	r1, #0
   28920:	d1f7      	bne.n	28912 <cmd_bacskpace_mode_delete+0xa>
   28922:	f3bf 8f5b 	dmb	ish
}
   28926:	2000      	movs	r0, #0
   28928:	4770      	bx	lr

0002892a <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2892a:	6883      	ldr	r3, [r0, #8]
   2892c:	f3bf 8f5b 	dmb	ish
   28930:	f503 7318 	add.w	r3, r3, #608	; 0x260
   28934:	e853 2f00 	ldrex	r2, [r3]
   28938:	f022 0202 	bic.w	r2, r2, #2
   2893c:	e843 2100 	strex	r1, r2, [r3]
   28940:	2900      	cmp	r1, #0
   28942:	d1f7      	bne.n	28934 <cmd_echo_off+0xa>
   28944:	f3bf 8f5b 	dmb	ish
}
   28948:	2000      	movs	r0, #0
   2894a:	4770      	bx	lr

0002894c <cmd_colors_off>:
   2894c:	6883      	ldr	r3, [r0, #8]
   2894e:	f3bf 8f5b 	dmb	ish
   28952:	f503 7318 	add.w	r3, r3, #608	; 0x260
   28956:	e853 2f00 	ldrex	r2, [r3]
   2895a:	f022 0210 	bic.w	r2, r2, #16
   2895e:	e843 2100 	strex	r1, r2, [r3]
   28962:	2900      	cmp	r1, #0
   28964:	d1f7      	bne.n	28956 <cmd_colors_off+0xa>
   28966:	f3bf 8f5b 	dmb	ish
}
   2896a:	2000      	movs	r0, #0
   2896c:	4770      	bx	lr

0002896e <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2896e:	6883      	ldr	r3, [r0, #8]
   28970:	f3bf 8f5b 	dmb	ish
   28974:	f503 7318 	add.w	r3, r3, #608	; 0x260
   28978:	e853 2f00 	ldrex	r2, [r3]
   2897c:	f042 0210 	orr.w	r2, r2, #16
   28980:	e843 2100 	strex	r1, r2, [r3]
   28984:	2900      	cmp	r1, #0
   28986:	d1f7      	bne.n	28978 <cmd_colors_on+0xa>
   28988:	f3bf 8f5b 	dmb	ish
}
   2898c:	2000      	movs	r0, #0
   2898e:	4770      	bx	lr

00028990 <cmd_echo_on>:
   28990:	6883      	ldr	r3, [r0, #8]
   28992:	f3bf 8f5b 	dmb	ish
   28996:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2899a:	e853 2f00 	ldrex	r2, [r3]
   2899e:	f042 0202 	orr.w	r2, r2, #2
   289a2:	e843 2100 	strex	r1, r2, [r3]
   289a6:	2900      	cmp	r1, #0
   289a8:	d1f7      	bne.n	2899a <cmd_echo_on+0xa>
   289aa:	f3bf 8f5b 	dmb	ish
}
   289ae:	2000      	movs	r0, #0
   289b0:	4770      	bx	lr

000289b2 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   289b2:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   289b4:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   289b6:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   289b8:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   289bc:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   289be:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   289c0:	2200      	movs	r2, #0
	node->prev = NULL;
   289c2:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
   289c6:	8919      	ldrh	r1, [r3, #8]
   289c8:	895b      	ldrh	r3, [r3, #10]
   289ca:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   289cc:	310c      	adds	r1, #12
   289ce:	f7fe fbe7 	bl	271a0 <ring_buf_get_finish>

	return true;
}
   289d2:	2001      	movs	r0, #1
   289d4:	bd08      	pop	{r3, pc}

000289d6 <z_shell_history_mode_exit>:
	history->current = NULL;
   289d6:	2300      	movs	r3, #0
   289d8:	60c3      	str	r3, [r0, #12]
}
   289da:	4770      	bx	lr

000289dc <z_shell_history_get>:
{
   289dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   289de:	461f      	mov	r7, r3
	return list->head == list;
   289e0:	4603      	mov	r3, r0
   289e2:	4616      	mov	r6, r2
   289e4:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   289e8:	429c      	cmp	r4, r3
   289ea:	d102      	bne.n	289f2 <z_shell_history_get+0x16>
		*len = 0U;
   289ec:	2000      	movs	r0, #0
   289ee:	8038      	strh	r0, [r7, #0]
}
   289f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
   289f2:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
   289f4:	b9b1      	cbnz	r1, 28a24 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   289f6:	2d00      	cmp	r5, #0
   289f8:	d0f8      	beq.n	289ec <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   289fa:	42ac      	cmp	r4, r5
   289fc:	d102      	bne.n	28a04 <z_shell_history_get+0x28>
	history->current = l_item;
   289fe:	2300      	movs	r3, #0
   28a00:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   28a02:	e7f3      	b.n	289ec <z_shell_history_get+0x10>
   28a04:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   28a06:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   28a08:	2c00      	cmp	r4, #0
   28a0a:	d0ef      	beq.n	289ec <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   28a0c:	8922      	ldrh	r2, [r4, #8]
   28a0e:	f104 010c 	add.w	r1, r4, #12
   28a12:	4630      	mov	r0, r6
   28a14:	f001 fca2 	bl	2a35c <memcpy>
		*len = h_item->len;
   28a18:	8923      	ldrh	r3, [r4, #8]
   28a1a:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   28a1c:	2200      	movs	r2, #0
   28a1e:	54f2      	strb	r2, [r6, r3]
		return true;
   28a20:	2001      	movs	r0, #1
   28a22:	e7e5      	b.n	289f0 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   28a24:	2d00      	cmp	r5, #0
   28a26:	d0ee      	beq.n	28a06 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28a28:	6883      	ldr	r3, [r0, #8]
   28a2a:	42ab      	cmp	r3, r5
   28a2c:	d0e7      	beq.n	289fe <z_shell_history_get+0x22>
   28a2e:	682c      	ldr	r4, [r5, #0]
   28a30:	e7e9      	b.n	28a06 <z_shell_history_get+0x2a>

00028a32 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   28a32:	b538      	push	{r3, r4, r5, lr}
   28a34:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   28a36:	1d05      	adds	r5, r0, #4
   28a38:	6863      	ldr	r3, [r4, #4]
   28a3a:	42ab      	cmp	r3, r5
   28a3c:	d004      	beq.n	28a48 <z_shell_history_purge+0x16>
   28a3e:	4620      	mov	r0, r4
   28a40:	f7ff ffb7 	bl	289b2 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   28a44:	2800      	cmp	r0, #0
   28a46:	d1f7      	bne.n	28a38 <z_shell_history_purge+0x6>
	}
}
   28a48:	bd38      	pop	{r3, r4, r5, pc}

00028a4a <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   28a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
   28a4e:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   28a50:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   28a54:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   28a58:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   28a5a:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   28a5e:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   28a60:	429d      	cmp	r5, r3
{
   28a62:	4604      	mov	r4, r0
   28a64:	468a      	mov	sl, r1
   28a66:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   28a68:	d841      	bhi.n	28aee <z_shell_history_put+0xa4>
	history->current = NULL;
   28a6a:	2300      	movs	r3, #0
   28a6c:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   28a6e:	2a00      	cmp	r2, #0
   28a70:	d03d      	beq.n	28aee <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   28a72:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   28a76:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28a78:	4581      	cmp	r9, r0
   28a7a:	d12d      	bne.n	28ad8 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   28a7c:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   28a7e:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   28a82:	6820      	ldr	r0, [r4, #0]
   28a84:	462a      	mov	r2, r5
   28a86:	a901      	add	r1, sp, #4
   28a88:	f7fe faf7 	bl	2707a <ring_buf_put_claim>
		if (claim_len < total_len) {
   28a8c:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   28a8e:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   28a90:	d930      	bls.n	28af4 <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   28a92:	6820      	ldr	r0, [r4, #0]
   28a94:	462a      	mov	r2, r5
   28a96:	a901      	add	r1, sp, #4
   28a98:	f7fe faef 	bl	2707a <ring_buf_put_claim>
			if (claim2_len == total_len) {
   28a9c:	4285      	cmp	r5, r0
   28a9e:	d12a      	bne.n	28af6 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   28aa0:	4631      	mov	r1, r6
   28aa2:	6820      	ldr	r0, [r4, #0]
   28aa4:	f7fe fb16 	bl	270d4 <ring_buf_put_finish>
				padding += claim_len;
   28aa8:	44b0      	add	r8, r6
   28aaa:	fa1f f888 	uxth.w	r8, r8
   28aae:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
   28ab0:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   28ab2:	4651      	mov	r1, sl
	item->len = len;
   28ab4:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   28ab6:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   28aba:	463a      	mov	r2, r7
   28abc:	f105 000c 	add.w	r0, r5, #12
   28ac0:	f001 fc4c 	bl	2a35c <memcpy>
	sys_dnode_t *const head = list->head;
   28ac4:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   28ac6:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
   28ac8:	e9c5 3900 	strd	r3, r9, [r5]
   28acc:	4631      	mov	r1, r6
	head->prev = node;
   28ace:	605d      	str	r5, [r3, #4]
	list->head = node;
   28ad0:	6065      	str	r5, [r4, #4]
   28ad2:	f7fe faff 	bl	270d4 <ring_buf_put_finish>
			break;
   28ad6:	e00a      	b.n	28aee <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   28ad8:	9001      	str	r0, [sp, #4]
	if (l_item &&
   28ada:	2800      	cmp	r0, #0
   28adc:	d0cf      	beq.n	28a7e <z_shell_history_put+0x34>
	   (h_item->len == len) &&
   28ade:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   28ae0:	4293      	cmp	r3, r2
   28ae2:	d1cc      	bne.n	28a7e <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   28ae4:	300c      	adds	r0, #12
   28ae6:	f001 fc10 	bl	2a30a <memcmp>
	   (h_item->len == len) &&
   28aea:	2800      	cmp	r0, #0
   28aec:	d1c7      	bne.n	28a7e <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   28aee:	b003      	add	sp, #12
   28af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   28af4:	d0dc      	beq.n	28ab0 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   28af6:	6820      	ldr	r0, [r4, #0]
   28af8:	2100      	movs	r1, #0
   28afa:	f7fe faeb 	bl	270d4 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   28afe:	6863      	ldr	r3, [r4, #4]
   28b00:	4599      	cmp	r9, r3
   28b02:	d108      	bne.n	28b16 <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
   28b04:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   28b06:	2208      	movs	r2, #8
	buf->tail = 0;
   28b08:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   28b0c:	2100      	movs	r1, #0
   28b0e:	4410      	add	r0, r2
   28b10:	f001 fc2f 	bl	2a372 <memset>
}
   28b14:	e7b5      	b.n	28a82 <z_shell_history_put+0x38>
   28b16:	4620      	mov	r0, r4
   28b18:	f7ff ff4b 	bl	289b2 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   28b1c:	2800      	cmp	r0, #0
   28b1e:	d1b0      	bne.n	28a82 <z_shell_history_put+0x38>
   28b20:	e7f0      	b.n	28b04 <z_shell_history_put+0xba>

00028b22 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   28b22:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   28b24:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   28b28:	2300      	movs	r3, #0
   28b2a:	60c3      	str	r3, [r0, #12]
}
   28b2c:	4770      	bx	lr

00028b2e <z_shell_has_wildcard>:
{
   28b2e:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   28b30:	4604      	mov	r4, r0
   28b32:	b908      	cbnz	r0, 28b38 <z_shell_has_wildcard+0xa>
	return false;
   28b34:	2000      	movs	r0, #0
}
   28b36:	bd10      	pop	{r4, pc}
   28b38:	f001 fbba 	bl	2a2b0 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   28b3c:	2300      	movs	r3, #0
   28b3e:	b280      	uxth	r0, r0
   28b40:	4283      	cmp	r3, r0
   28b42:	d2f7      	bcs.n	28b34 <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   28b44:	5ce2      	ldrb	r2, [r4, r3]
   28b46:	2a3f      	cmp	r2, #63	; 0x3f
   28b48:	d003      	beq.n	28b52 <z_shell_has_wildcard+0x24>
   28b4a:	2a2a      	cmp	r2, #42	; 0x2a
   28b4c:	d001      	beq.n	28b52 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   28b4e:	3301      	adds	r3, #1
   28b50:	e7f6      	b.n	28b40 <z_shell_has_wildcard+0x12>
			return true;
   28b52:	2001      	movs	r0, #1
   28b54:	e7ef      	b.n	28b36 <z_shell_has_wildcard+0x8>

00028b56 <z_shell_wildcard_prepare>:
{
   28b56:	b510      	push	{r4, lr}
   28b58:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   28b5a:	6880      	ldr	r0, [r0, #8]
   28b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
   28b60:	2100      	movs	r1, #0
   28b62:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   28b66:	f001 fc04 	bl	2a372 <memset>
	memcpy(shell->ctx->temp_buff,
   28b6a:	68a0      	ldr	r0, [r4, #8]
   28b6c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   28b6e:	f100 0142 	add.w	r1, r0, #66	; 0x42
   28b72:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   28b76:	f001 fbf1 	bl	2a35c <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   28b7a:	68a0      	ldr	r0, [r4, #8]
   28b7c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   28b80:	f7ff fa8a 	bl	28098 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   28b84:	68a0      	ldr	r0, [r4, #8]
   28b86:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   28b8a:	f001 fb91 	bl	2a2b0 <strlen>
   28b8e:	68a3      	ldr	r3, [r4, #8]
   28b90:	3001      	adds	r0, #1
   28b92:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
   28b96:	bd10      	pop	{r4, pc}

00028b98 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   28b98:	b510      	push	{r4, lr}
   28b9a:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   28b9c:	6880      	ldr	r0, [r0, #8]
   28b9e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   28ba2:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   28ba6:	3042      	adds	r0, #66	; 0x42
   28ba8:	f001 fbd8 	bl	2a35c <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   28bac:	68a3      	ldr	r3, [r4, #8]
   28bae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   28bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   28bb4:	bd10      	pop	{r4, pc}

00028bb6 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   28bb6:	2300      	movs	r3, #0
   28bb8:	f7fe bec2 	b.w	27940 <z_impl_z_log_msg2_static_create>

00028bbc <usb_get_dev_data_by_cfg>:
	return list->head;
   28bbc:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   28bbe:	b140      	cbz	r0, 28bd2 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   28bc0:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   28bc4:	685b      	ldr	r3, [r3, #4]
   28bc6:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   28bc8:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   28bcc:	d001      	beq.n	28bd2 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   28bce:	6840      	ldr	r0, [r0, #4]
   28bd0:	e7f5      	b.n	28bbe <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   28bd2:	4770      	bx	lr

00028bd4 <usb_get_dev_data_by_iface>:
	return list->head;
   28bd4:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   28bd6:	b150      	cbz	r0, 28bee <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   28bd8:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   28bdc:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   28bde:	685b      	ldr	r3, [r3, #4]
   28be0:	789b      	ldrb	r3, [r3, #2]
   28be2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   28be4:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   28be8:	d001      	beq.n	28bee <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   28bea:	6840      	ldr	r0, [r0, #4]
   28bec:	e7f3      	b.n	28bd6 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   28bee:	4770      	bx	lr

00028bf0 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   28bf0:	b530      	push	{r4, r5, lr}
	return list->head;
   28bf2:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   28bf4:	b188      	cbz	r0, 28c1a <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   28bf6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   28bfa:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   28bfc:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   28bfe:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   28c00:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   28c02:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   28c04:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   28c06:	b2dc      	uxtb	r4, r3
   28c08:	42a5      	cmp	r5, r4
   28c0a:	d801      	bhi.n	28c10 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   28c0c:	6840      	ldr	r0, [r0, #4]
   28c0e:	e7f1      	b.n	28bf4 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   28c10:	3301      	adds	r3, #1
   28c12:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   28c16:	428c      	cmp	r4, r1
   28c18:	d1f5      	bne.n	28c06 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   28c1a:	bd30      	pop	{r4, r5, pc}

00028c1c <usb_transfer_is_busy>:
{
   28c1c:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   28c1e:	f7e1 fbb1 	bl	a384 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   28c22:	b128      	cbz	r0, 28c30 <usb_transfer_is_busy+0x14>
   28c24:	6840      	ldr	r0, [r0, #4]
   28c26:	f110 0f10 	cmn.w	r0, #16
   28c2a:	bf14      	ite	ne
   28c2c:	2000      	movne	r0, #0
   28c2e:	2001      	moveq	r0, #1
}
   28c30:	bd08      	pop	{r3, pc}

00028c32 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   28c32:	1c4b      	adds	r3, r1, #1
   28c34:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   28c36:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   28c38:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   28c3a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   28c3e:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   28c40:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   28c44:	4770      	bx	lr

00028c46 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   28c46:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   28c4a:	6f80      	ldr	r0, [r0, #120]	; 0x78
   28c4c:	4718      	bx	r3

00028c4e <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   28c4e:	6903      	ldr	r3, [r0, #16]
   28c50:	2200      	movs	r2, #0
   28c52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   28c56:	4770      	bx	lr

00028c58 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28c58:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   28c5a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   28c5e:	b108      	cbz	r0, 28c64 <cdc_acm_irq_tx_ready+0xc>
		return 1;
   28c60:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   28c64:	4770      	bx	lr

00028c66 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   28c66:	6903      	ldr	r3, [r0, #16]
   28c68:	2200      	movs	r2, #0
   28c6a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   28c6e:	4770      	bx	lr

00028c70 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   28c70:	6903      	ldr	r3, [r0, #16]
}
   28c72:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   28c76:	4770      	bx	lr

00028c78 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28c78:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   28c7a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   28c7e:	b112      	cbz	r2, 28c86 <cdc_acm_irq_is_pending+0xe>
   28c80:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   28c84:	b92a      	cbnz	r2, 28c92 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   28c86:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   28c8a:	b118      	cbz	r0, 28c94 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   28c8c:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
   28c90:	4770      	bx	lr
		return 1;
   28c92:	2001      	movs	r0, #1
}
   28c94:	4770      	bx	lr

00028c96 <cdc_acm_irq_update>:
}
   28c96:	2001      	movs	r0, #1
   28c98:	4770      	bx	lr

00028c9a <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28c9a:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   28c9c:	e9c3 1200 	strd	r1, r2, [r3]
}
   28ca0:	4770      	bx	lr

00028ca2 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
   28ca2:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28ca4:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   28ca6:	d007      	beq.n	28cb8 <cdc_acm_line_ctrl_get+0x16>
   28ca8:	2904      	cmp	r1, #4
   28caa:	d00a      	beq.n	28cc2 <cdc_acm_line_ctrl_get+0x20>
   28cac:	2901      	cmp	r1, #1
   28cae:	d10d      	bne.n	28ccc <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   28cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
   28cb2:	6013      	str	r3, [r2, #0]
		return 0;
   28cb4:	2000      	movs	r0, #0
   28cb6:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   28cb8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   28cbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
   28cc0:	e7f7      	b.n	28cb2 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   28cc2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   28cc6:	f003 0301 	and.w	r3, r3, #1
   28cca:	e7f2      	b.n	28cb2 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
   28ccc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   28cd0:	4770      	bx	lr

00028cd2 <cdc_acm_fifo_read>:
{
   28cd2:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28cd4:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   28cd6:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   28cd8:	f7fe fa80 	bl	271dc <ring_buf_get>
   28cdc:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   28cde:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   28ce0:	f7fe f9ba 	bl	27058 <ring_buf_is_empty>
   28ce4:	b110      	cbz	r0, 28cec <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   28ce6:	2300      	movs	r3, #0
   28ce8:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   28cec:	4620      	mov	r0, r4
   28cee:	bd38      	pop	{r3, r4, r5, pc}

00028cf0 <cdc_acm_poll_in>:
{
   28cf0:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   28cf2:	2201      	movs	r2, #1
   28cf4:	f7ff ffed 	bl	28cd2 <cdc_acm_fifo_read>
}
   28cf8:	3801      	subs	r0, #1
   28cfa:	bf18      	it	ne
   28cfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   28d00:	bd08      	pop	{r3, pc}

00028d02 <z_log_msg2_static_create.constprop.0>:
   28d02:	2300      	movs	r3, #0
   28d04:	f7fe be1c 	b.w	27940 <z_impl_z_log_msg2_static_create>

00028d08 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   28d08:	2940      	cmp	r1, #64	; 0x40
{
   28d0a:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28d0c:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   28d0e:	d042      	beq.n	28d96 <cdc_acm_line_ctrl_set+0x8e>
   28d10:	d813      	bhi.n	28d3a <cdc_acm_line_ctrl_set+0x32>
   28d12:	2910      	cmp	r1, #16
   28d14:	d032      	beq.n	28d7c <cdc_acm_line_ctrl_set+0x74>
   28d16:	d806      	bhi.n	28d26 <cdc_acm_line_ctrl_set+0x1e>
   28d18:	2901      	cmp	r1, #1
   28d1a:	d01e      	beq.n	28d5a <cdc_acm_line_ctrl_set+0x52>
   28d1c:	2908      	cmp	r1, #8
   28d1e:	d01f      	beq.n	28d60 <cdc_acm_line_ctrl_set+0x58>
   28d20:	f06f 0012 	mvn.w	r0, #18
}
   28d24:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   28d26:	2920      	cmp	r1, #32
   28d28:	d1fa      	bne.n	28d20 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   28d2a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28d2e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   28d32:	b342      	cbz	r2, 28d86 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   28d34:	f041 0104 	orr.w	r1, r1, #4
   28d38:	e025      	b.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
   28d3a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   28d3e:	d033      	beq.n	28da8 <cdc_acm_line_ctrl_set+0xa0>
   28d40:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   28d44:	d039      	beq.n	28dba <cdc_acm_line_ctrl_set+0xb2>
   28d46:	2980      	cmp	r1, #128	; 0x80
   28d48:	d1ea      	bne.n	28d20 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   28d4a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28d4e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   28d52:	b1c2      	cbz	r2, 28d86 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   28d54:	f041 0110 	orr.w	r1, r1, #16
   28d58:	e015      	b.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   28d5a:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
   28d5c:	2000      	movs	r0, #0
   28d5e:	e7e1      	b.n	28d24 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   28d60:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28d64:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   28d68:	b92a      	cbnz	r2, 28d76 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   28d6a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   28d6e:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   28d70:	f7e1 ffea 	bl	ad48 <cdc_acm_send_notification.isra.0>
   28d74:	e7f2      	b.n	28d5c <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   28d76:	f041 0101 	orr.w	r1, r1, #1
   28d7a:	e7f6      	b.n	28d6a <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   28d7c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28d80:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   28d84:	b922      	cbnz	r2, 28d90 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   28d86:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   28d8a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28d8e:	e7ef      	b.n	28d70 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   28d90:	f041 0102 	orr.w	r1, r1, #2
   28d94:	e7f7      	b.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   28d96:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28d9a:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   28d9e:	2a00      	cmp	r2, #0
   28da0:	d0f1      	beq.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   28da2:	f041 0108 	orr.w	r1, r1, #8
   28da6:	e7ee      	b.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   28da8:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28dac:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   28db0:	2a00      	cmp	r2, #0
   28db2:	d0e8      	beq.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   28db4:	f041 0120 	orr.w	r1, r1, #32
   28db8:	e7e5      	b.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   28dba:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   28dbe:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   28dc2:	2a00      	cmp	r2, #0
   28dc4:	d0df      	beq.n	28d86 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   28dc6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   28dca:	e7dc      	b.n	28d86 <cdc_acm_line_ctrl_set+0x7e>

00028dcc <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   28dcc:	b538      	push	{r3, r4, r5, lr}
   28dce:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   28dd0:	42ab      	cmp	r3, r5
{
   28dd2:	4611      	mov	r1, r2
   28dd4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   28dd6:	d804      	bhi.n	28de2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   28dd8:	461a      	mov	r2, r3
   28dda:	f001 fabf 	bl	2a35c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   28dde:	4620      	mov	r0, r4
   28de0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   28de2:	2400      	movs	r4, #0
   28de4:	e7fb      	b.n	28dde <_copy+0x12>

00028de6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   28de6:	f001 bac4 	b.w	2a372 <memset>

00028dea <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   28dea:	09c3      	lsrs	r3, r0, #7
   28dec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28df0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28df4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28df8:	b2c0      	uxtb	r0, r0
   28dfa:	4770      	bx	lr

00028dfc <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   28dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28e00:	4606      	mov	r6, r0
   28e02:	b0a9      	sub	sp, #164	; 0xa4
   28e04:	4688      	mov	r8, r1
   28e06:	4614      	mov	r4, r2
   28e08:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   28e0a:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   28e0e:	f7e2 f941 	bl	b094 <uECC_get_rng>
		if (!rng_function ||
   28e12:	4603      	mov	r3, r0
   28e14:	2800      	cmp	r0, #0
   28e16:	d03e      	beq.n	28e96 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   28e18:	2140      	movs	r1, #64	; 0x40
   28e1a:	a808      	add	r0, sp, #32
   28e1c:	4798      	blx	r3
		if (!rng_function ||
   28e1e:	b3d0      	cbz	r0, 28e96 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   28e20:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   28e24:	f112 031f 	adds.w	r3, r2, #31
   28e28:	bf48      	it	mi
   28e2a:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   28e2e:	466d      	mov	r5, sp
   28e30:	464a      	mov	r2, r9
   28e32:	a908      	add	r1, sp, #32
   28e34:	4628      	mov	r0, r5
   28e36:	f343 1347 	sbfx	r3, r3, #5, #8
   28e3a:	f000 f9ee 	bl	2921a <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   28e3e:	4622      	mov	r2, r4
   28e40:	4629      	mov	r1, r5
   28e42:	a818      	add	r0, sp, #96	; 0x60
   28e44:	f000 fe03 	bl	29a4e <EccPoint_compute_public_key>
   28e48:	b318      	cbz	r0, 28e92 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   28e4a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   28e4e:	1dd9      	adds	r1, r3, #7
   28e50:	bf48      	it	mi
   28e52:	f103 010e 	addmi.w	r1, r3, #14
   28e56:	462a      	mov	r2, r5
   28e58:	4640      	mov	r0, r8
   28e5a:	10c9      	asrs	r1, r1, #3
   28e5c:	f000 fe1f 	bl	29a9e <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   28e60:	f994 1001 	ldrsb.w	r1, [r4, #1]
   28e64:	aa18      	add	r2, sp, #96	; 0x60
   28e66:	4630      	mov	r0, r6
   28e68:	f000 fe19 	bl	29a9e <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   28e6c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   28e70:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   28e74:	ab18      	add	r3, sp, #96	; 0x60
   28e76:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   28e7a:	1870      	adds	r0, r6, r1
   28e7c:	f000 fe0f 	bl	29a9e <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   28e80:	2220      	movs	r2, #32
   28e82:	2100      	movs	r1, #0
   28e84:	4628      	mov	r0, r5
   28e86:	f001 fa74 	bl	2a372 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   28e8a:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   28e8c:	b029      	add	sp, #164	; 0xa4
   28e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   28e92:	3f01      	subs	r7, #1
   28e94:	d1bb      	bne.n	28e0e <uECC_make_key+0x12>
        		return 0;
   28e96:	2000      	movs	r0, #0
   28e98:	e7f8      	b.n	28e8c <uECC_make_key+0x90>

00028e9a <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   28e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28e9e:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   28ea0:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   28ea4:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   28ea8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   28eac:	b0a4      	sub	sp, #144	; 0x90
   28eae:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   28eb0:	1dda      	adds	r2, r3, #7
   28eb2:	bf48      	it	mi
   28eb4:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   28eb8:	ad04      	add	r5, sp, #16
{
   28eba:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   28ebc:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   28ebe:	4628      	mov	r0, r5
   28ec0:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   28ec2:	9502      	str	r5, [sp, #8]
   28ec4:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   28ec6:	f000 fdfe 	bl	29ac6 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   28eca:	463a      	mov	r2, r7
   28ecc:	4649      	mov	r1, r9
   28ece:	a814      	add	r0, sp, #80	; 0x50
   28ed0:	f000 fdf9 	bl	29ac6 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   28ed4:	ab14      	add	r3, sp, #80	; 0x50
   28ed6:	eb09 0107 	add.w	r1, r9, r7
   28eda:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   28ede:	463a      	mov	r2, r7
   28ee0:	f000 fdf1 	bl	29ac6 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   28ee4:	4623      	mov	r3, r4
   28ee6:	4632      	mov	r2, r6
   28ee8:	4629      	mov	r1, r5
   28eea:	4628      	mov	r0, r5
   28eec:	f000 fd83 	bl	299f6 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   28ef0:	fab0 f380 	clz	r3, r0
   28ef4:	9401      	str	r4, [sp, #4]
   28ef6:	aa24      	add	r2, sp, #144	; 0x90
   28ef8:	095b      	lsrs	r3, r3, #5
   28efa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   28efe:	8863      	ldrh	r3, [r4, #2]
   28f00:	3301      	adds	r3, #1
   28f02:	b21b      	sxth	r3, r3
   28f04:	9300      	str	r3, [sp, #0]
   28f06:	f851 2c88 	ldr.w	r2, [r1, #-136]
   28f0a:	a914      	add	r1, sp, #80	; 0x50
   28f0c:	2300      	movs	r3, #0
   28f0e:	4608      	mov	r0, r1
   28f10:	f000 fca4 	bl	2985c <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   28f14:	aa14      	add	r2, sp, #80	; 0x50
   28f16:	4639      	mov	r1, r7
   28f18:	4640      	mov	r0, r8
   28f1a:	f000 fdc0 	bl	29a9e <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   28f1e:	4621      	mov	r1, r4
   28f20:	a814      	add	r0, sp, #80	; 0x50
   28f22:	f000 fc10 	bl	29746 <EccPoint_isZero>
   28f26:	af02      	add	r7, sp, #8
   28f28:	4604      	mov	r4, r0
   28f2a:	2208      	movs	r2, #8
   28f2c:	2100      	movs	r1, #0
   28f2e:	4638      	mov	r0, r7
   28f30:	f001 fa1f 	bl	2a372 <memset>
   28f34:	2220      	movs	r2, #32
   28f36:	2100      	movs	r1, #0
   28f38:	4630      	mov	r0, r6
   28f3a:	f001 fa1a 	bl	2a372 <memset>
   28f3e:	2220      	movs	r2, #32
   28f40:	2100      	movs	r1, #0
   28f42:	4628      	mov	r0, r5
   28f44:	f001 fa15 	bl	2a372 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   28f48:	fab4 f084 	clz	r0, r4
   28f4c:	0940      	lsrs	r0, r0, #5
   28f4e:	b024      	add	sp, #144	; 0x90
   28f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028f54 <uECC_vli_add>:
{
   28f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28f56:	2400      	movs	r4, #0
{
   28f58:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   28f5a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   28f5c:	b265      	sxtb	r5, r4
   28f5e:	42ab      	cmp	r3, r5
   28f60:	dc00      	bgt.n	28f64 <uECC_vli_add+0x10>
}
   28f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   28f64:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   28f68:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   28f6c:	443d      	add	r5, r7
   28f6e:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   28f70:	42af      	cmp	r7, r5
   28f72:	f000 0001 	and.w	r0, r0, #1
   28f76:	bf18      	it	ne
   28f78:	2000      	movne	r0, #0
		result[i] = sum;
   28f7a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   28f7e:	bf88      	it	hi
   28f80:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   28f84:	3401      	adds	r4, #1
   28f86:	e7e9      	b.n	28f5c <uECC_vli_add+0x8>

00028f88 <uECC_vli_rshift1>:
	vli += num_words;
   28f88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   28f8c:	2300      	movs	r3, #0
	while (vli-- > end) {
   28f8e:	4288      	cmp	r0, r1
   28f90:	d300      	bcc.n	28f94 <uECC_vli_rshift1+0xc>
}
   28f92:	4770      	bx	lr
		uECC_word_t temp = *vli;
   28f94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   28f98:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   28f9c:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   28f9e:	07d3      	lsls	r3, r2, #31
   28fa0:	e7f5      	b.n	28f8e <uECC_vli_rshift1+0x6>

00028fa2 <vli_modInv_update>:
	if (!EVEN(uv)) {
   28fa2:	6803      	ldr	r3, [r0, #0]
{
   28fa4:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   28fa6:	f013 0601 	ands.w	r6, r3, #1
{
   28faa:	4605      	mov	r5, r0
   28fac:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   28fae:	d005      	beq.n	28fbc <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   28fb0:	4613      	mov	r3, r2
   28fb2:	460a      	mov	r2, r1
   28fb4:	4601      	mov	r1, r0
   28fb6:	f7ff ffcd 	bl	28f54 <uECC_vli_add>
   28fba:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   28fbc:	4621      	mov	r1, r4
   28fbe:	4628      	mov	r0, r5
   28fc0:	f7ff ffe2 	bl	28f88 <uECC_vli_rshift1>
	if (carry) {
   28fc4:	b146      	cbz	r6, 28fd8 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   28fc6:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   28fca:	3a01      	subs	r2, #1
   28fcc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   28fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   28fd4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   28fd8:	bd70      	pop	{r4, r5, r6, pc}

00028fda <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   28fda:	f04f 0c00 	mov.w	ip, #0
{
   28fde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   28fe2:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   28fe4:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   28fe6:	fa4f f98c 	sxtb.w	r9, ip
   28fea:	454b      	cmp	r3, r9
   28fec:	dc16      	bgt.n	2901c <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   28fee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28ff2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   28ff6:	9601      	str	r6, [sp, #4]
   28ff8:	f04f 0800 	mov.w	r8, #0
   28ffc:	9f01      	ldr	r7, [sp, #4]
   28ffe:	fa53 fe88 	uxtab	lr, r3, r8
   29002:	fa4f fe8e 	sxtb.w	lr, lr
   29006:	45be      	cmp	lr, r7
   29008:	fa5f f688 	uxtb.w	r6, r8
   2900c:	db26      	blt.n	2905c <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   2900e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   29012:	f840 4c04 	str.w	r4, [r0, #-4]
}
   29016:	b003      	add	sp, #12
   29018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   2901c:	f04f 0e00 	mov.w	lr, #0
   29020:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   29024:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   29026:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2902a:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2902e:	fba6 6707 	umull	r6, r7, r6, r7
   29032:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   29034:	f10e 0e01 	add.w	lr, lr, #1
   29038:	417d      	adcs	r5, r7
   2903a:	fa4f f68e 	sxtb.w	r6, lr
   2903e:	f04f 0b00 	mov.w	fp, #0
   29042:	bf28      	it	cs
   29044:	f04f 0b01 	movcs.w	fp, #1
   29048:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   2904a:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   2904c:	ddeb      	ble.n	29026 <uECC_vli_mult+0x4c>
		result[k] = r0;
   2904e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   29052:	462c      	mov	r4, r5
   29054:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   29058:	4645      	mov	r5, r8
   2905a:	e7c4      	b.n	28fe6 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2905c:	3601      	adds	r6, #1
   2905e:	46a9      	mov	r9, r5
   29060:	b276      	sxtb	r6, r6
   29062:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   29066:	2500      	movs	r5, #0
   29068:	b277      	sxtb	r7, r6
   2906a:	42bb      	cmp	r3, r7
   2906c:	dc05      	bgt.n	2907a <uECC_vli_mult+0xa0>
		result[k] = r0;
   2906e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   29072:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   29076:	464c      	mov	r4, r9
   29078:	e7c0      	b.n	28ffc <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2907a:	f06f 0703 	mvn.w	r7, #3
   2907e:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   29080:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   29084:	f85a 7007 	ldr.w	r7, [sl, r7]
   29088:	fba7 7c0c 	umull	r7, ip, r7, ip
   2908c:	193c      	adds	r4, r7, r4
   2908e:	eb5c 0909 	adcs.w	r9, ip, r9
   29092:	f04f 0b00 	mov.w	fp, #0
   29096:	bf28      	it	cs
   29098:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   2909c:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2909e:	3601      	adds	r6, #1
   290a0:	e7e2      	b.n	29068 <uECC_vli_mult+0x8e>

000290a2 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   290a2:	2300      	movs	r3, #0
{
   290a4:	b510      	push	{r4, lr}
		 vli[i] = 0;
   290a6:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   290a8:	b25a      	sxtb	r2, r3
   290aa:	4291      	cmp	r1, r2
   290ac:	dc00      	bgt.n	290b0 <uECC_vli_clear+0xe>
}
   290ae:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   290b0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   290b4:	3301      	adds	r3, #1
   290b6:	e7f7      	b.n	290a8 <uECC_vli_clear+0x6>

000290b8 <uECC_vli_isZero>:
{
   290b8:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   290ba:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   290bc:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   290be:	b25c      	sxtb	r4, r3
   290c0:	42a1      	cmp	r1, r4
   290c2:	dc03      	bgt.n	290cc <uECC_vli_isZero+0x14>
}
   290c4:	fab2 f082 	clz	r0, r2
   290c8:	0940      	lsrs	r0, r0, #5
   290ca:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   290cc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   290d0:	3301      	adds	r3, #1
   290d2:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   290d4:	e7f3      	b.n	290be <uECC_vli_isZero+0x6>

000290d6 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   290d6:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   290d8:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   290da:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   290de:	f001 011f 	and.w	r1, r1, #31
   290e2:	fa03 f101 	lsl.w	r1, r3, r1
}
   290e6:	4008      	ands	r0, r1
   290e8:	4770      	bx	lr

000290ea <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   290ea:	3901      	subs	r1, #1
{
   290ec:	b510      	push	{r4, lr}
   290ee:	4602      	mov	r2, r0
   290f0:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   290f2:	1d04      	adds	r4, r0, #4
   290f4:	0608      	lsls	r0, r1, #24
   290f6:	b2cb      	uxtb	r3, r1
   290f8:	d404      	bmi.n	29104 <uECC_vli_numBits+0x1a>
   290fa:	3901      	subs	r1, #1
   290fc:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   29100:	2800      	cmp	r0, #0
   29102:	d0f7      	beq.n	290f4 <uECC_vli_numBits+0xa>
	return (i + 1);
   29104:	3301      	adds	r3, #1
   29106:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   29108:	b150      	cbz	r0, 29120 <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   2910a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2910e:	3b01      	subs	r3, #1
   29110:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   29114:	2300      	movs	r3, #0
   29116:	b922      	cbnz	r2, 29122 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   29118:	3801      	subs	r0, #1
   2911a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2911e:	b200      	sxth	r0, r0
}
   29120:	bd10      	pop	{r4, pc}
		digit >>= 1;
   29122:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   29124:	3301      	adds	r3, #1
   29126:	e7f6      	b.n	29116 <uECC_vli_numBits+0x2c>

00029128 <uECC_vli_set>:
{
   29128:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2912a:	2300      	movs	r3, #0
   2912c:	b25c      	sxtb	r4, r3
   2912e:	42a2      	cmp	r2, r4
   29130:	dc00      	bgt.n	29134 <uECC_vli_set+0xc>
}
   29132:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   29134:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   29138:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2913c:	3301      	adds	r3, #1
   2913e:	e7f5      	b.n	2912c <uECC_vli_set+0x4>

00029140 <uECC_vli_cmp_unsafe>:
{
   29140:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   29142:	3a01      	subs	r2, #1
   29144:	b252      	sxtb	r2, r2
   29146:	0613      	lsls	r3, r2, #24
   29148:	d501      	bpl.n	2914e <uECC_vli_cmp_unsafe+0xe>
	return 0;
   2914a:	2000      	movs	r0, #0
}
   2914c:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   2914e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   29152:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   29156:	429c      	cmp	r4, r3
   29158:	d805      	bhi.n	29166 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   2915a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   2915e:	d2f2      	bcs.n	29146 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   29160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29164:	e7f2      	b.n	2914c <uECC_vli_cmp_unsafe+0xc>
			return 1;
   29166:	2001      	movs	r0, #1
   29168:	e7f0      	b.n	2914c <uECC_vli_cmp_unsafe+0xc>

0002916a <uECC_vli_equal>:
{
   2916a:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2916c:	3a01      	subs	r2, #1
   2916e:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   29170:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   29172:	0614      	lsls	r4, r2, #24
   29174:	d503      	bpl.n	2917e <uECC_vli_equal+0x14>
}
   29176:	1e18      	subs	r0, r3, #0
   29178:	bf18      	it	ne
   2917a:	2001      	movne	r0, #1
   2917c:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   2917e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   29182:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   29186:	406c      	eors	r4, r5
   29188:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   2918a:	3a01      	subs	r2, #1
   2918c:	e7f1      	b.n	29172 <uECC_vli_equal+0x8>

0002918e <uECC_vli_sub>:
{
   2918e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   29190:	2400      	movs	r4, #0
{
   29192:	4606      	mov	r6, r0
   29194:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   29196:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   29198:	b265      	sxtb	r5, r4
   2919a:	4565      	cmp	r5, ip
   2919c:	db00      	blt.n	291a0 <uECC_vli_sub+0x12>
}
   2919e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   291a0:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   291a4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   291a8:	1a3d      	subs	r5, r7, r0
   291aa:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   291ac:	42af      	cmp	r7, r5
   291ae:	f000 0001 	and.w	r0, r0, #1
   291b2:	bf18      	it	ne
   291b4:	2000      	movne	r0, #0
		result[i] = diff;
   291b6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   291ba:	bf38      	it	cc
   291bc:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   291c0:	3401      	adds	r4, #1
   291c2:	e7e9      	b.n	29198 <uECC_vli_sub+0xa>

000291c4 <uECC_vli_modAdd>:
{
   291c4:	b570      	push	{r4, r5, r6, lr}
   291c6:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   291ca:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   291cc:	4633      	mov	r3, r6
{
   291ce:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   291d0:	f7ff fec0 	bl	28f54 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   291d4:	b930      	cbnz	r0, 291e4 <uECC_vli_modAdd+0x20>
   291d6:	4632      	mov	r2, r6
   291d8:	4621      	mov	r1, r4
   291da:	4628      	mov	r0, r5
   291dc:	f7ff ffb0 	bl	29140 <uECC_vli_cmp_unsafe>
   291e0:	2801      	cmp	r0, #1
   291e2:	d007      	beq.n	291f4 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   291e4:	4633      	mov	r3, r6
   291e6:	462a      	mov	r2, r5
   291e8:	4621      	mov	r1, r4
   291ea:	4620      	mov	r0, r4
}
   291ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   291f0:	f7ff bfcd 	b.w	2918e <uECC_vli_sub>
}
   291f4:	bd70      	pop	{r4, r5, r6, pc}

000291f6 <uECC_vli_modSub>:
{
   291f6:	b570      	push	{r4, r5, r6, lr}
   291f8:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   291fc:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   291fe:	4633      	mov	r3, r6
{
   29200:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   29202:	f7ff ffc4 	bl	2918e <uECC_vli_sub>
	if (l_borrow) {
   29206:	b138      	cbz	r0, 29218 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   29208:	4633      	mov	r3, r6
   2920a:	462a      	mov	r2, r5
   2920c:	4621      	mov	r1, r4
   2920e:	4620      	mov	r0, r4
}
   29210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   29214:	f7ff be9e 	b.w	28f54 <uECC_vli_add>
}
   29218:	bd70      	pop	{r4, r5, r6, pc}

0002921a <uECC_vli_mmod>:
{
   2921a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2921e:	b0a5      	sub	sp, #148	; 0x94
   29220:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   29222:	ab14      	add	r3, sp, #80	; 0x50
   29224:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   29228:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   2922a:	4629      	mov	r1, r5
   2922c:	4610      	mov	r0, r2
{
   2922e:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   29230:	f7ff ff5b 	bl	290ea <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   29234:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   29238:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2923a:	2c00      	cmp	r4, #0
   2923c:	4621      	mov	r1, r4
   2923e:	bfb8      	it	lt
   29240:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29244:	4263      	negs	r3, r4
   29246:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2924a:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2924e:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   29252:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29254:	bf58      	it	pl
   29256:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   29258:	f7ff ff23 	bl	290a2 <uECC_vli_clear>
	if (bit_shift > 0) {
   2925c:	2e00      	cmp	r6, #0
   2925e:	b208      	sxth	r0, r1
   29260:	dd2b      	ble.n	292ba <uECC_vli_mmod+0xa0>
   29262:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   29264:	2200      	movs	r2, #0
   29266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2926a:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2926e:	4613      	mov	r3, r2
   29270:	429d      	cmp	r5, r3
   29272:	d817      	bhi.n	292a4 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   29274:	006b      	lsls	r3, r5, #1
   29276:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29278:	ab04      	add	r3, sp, #16
   2927a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2927e:	1e6f      	subs	r7, r5, #1
   29280:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29282:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29284:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   29288:	2c00      	cmp	r4, #0
   2928a:	da54      	bge.n	29336 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   2928c:	ab24      	add	r3, sp, #144	; 0x90
   2928e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   29292:	462a      	mov	r2, r5
   29294:	f856 1c88 	ldr.w	r1, [r6, #-136]
   29298:	4640      	mov	r0, r8
   2929a:	f7ff ff45 	bl	29128 <uECC_vli_set>
}
   2929e:	b025      	add	sp, #148	; 0x94
   292a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   292a4:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   292a8:	fa0c f106 	lsl.w	r1, ip, r6
   292ac:	430a      	orrs	r2, r1
   292ae:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   292b2:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   292b4:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   292b8:	e7da      	b.n	29270 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   292ba:	ab04      	add	r3, sp, #16
   292bc:	462a      	mov	r2, r5
   292be:	4639      	mov	r1, r7
   292c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   292c4:	f7ff ff30 	bl	29128 <uECC_vli_set>
   292c8:	e7d4      	b.n	29274 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   292ca:	fa0f fe82 	sxth.w	lr, r2
   292ce:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   292d2:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   292d6:	ab24      	add	r3, sp, #144	; 0x90
   292d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   292dc:	3001      	adds	r0, #1
   292de:	f852 3c80 	ldr.w	r3, [r2, #-128]
   292e2:	440b      	add	r3, r1
   292e4:	ebbb 0303 	subs.w	r3, fp, r3
   292e8:	bf34      	ite	cc
   292ea:	2201      	movcc	r2, #1
   292ec:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   292ee:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   292f0:	bf18      	it	ne
   292f2:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   292f4:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   292f8:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   292fc:	9b01      	ldr	r3, [sp, #4]
   292fe:	b242      	sxtb	r2, r0
   29300:	429a      	cmp	r2, r3
   29302:	dbe2      	blt.n	292ca <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   29304:	1a73      	subs	r3, r6, r1
   29306:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   29308:	4629      	mov	r1, r5
   2930a:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2930c:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2930e:	f7ff fe3b 	bl	28f88 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29312:	ab24      	add	r3, sp, #144	; 0x90
   29314:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29318:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2931a:	f853 2c80 	ldr.w	r2, [r3, #-128]
   2931e:	f857 3c80 	ldr.w	r3, [r7, #-128]
   29322:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   29326:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2932a:	4648      	mov	r0, r9
   2932c:	3c01      	subs	r4, #1
   2932e:	f7ff fe2b 	bl	28f88 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   29332:	b224      	sxth	r4, r4
   29334:	e7a8      	b.n	29288 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   29336:	ab24      	add	r3, sp, #144	; 0x90
   29338:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   2933a:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   2933e:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   29340:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   29344:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   29348:	e7d8      	b.n	292fc <uECC_vli_mmod+0xe2>

0002934a <uECC_vli_modMult_fast>:
{
   2934a:	b530      	push	{r4, r5, lr}
   2934c:	461c      	mov	r4, r3
   2934e:	b091      	sub	sp, #68	; 0x44
   29350:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   29352:	f993 3000 	ldrsb.w	r3, [r3]
   29356:	4668      	mov	r0, sp
   29358:	f7ff fe3f 	bl	28fda <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2935c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   29360:	4669      	mov	r1, sp
   29362:	4628      	mov	r0, r5
   29364:	4798      	blx	r3
}
   29366:	b011      	add	sp, #68	; 0x44
   29368:	bd30      	pop	{r4, r5, pc}

0002936a <uECC_vli_modSquare_fast>:
{
   2936a:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   2936c:	460a      	mov	r2, r1
   2936e:	f7ff bfec 	b.w	2934a <uECC_vli_modMult_fast>

00029372 <double_jacobian_default>:
{
   29372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   29376:	f993 6000 	ldrsb.w	r6, [r3]
{
   2937a:	b092      	sub	sp, #72	; 0x48
   2937c:	4604      	mov	r4, r0
   2937e:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   29380:	4610      	mov	r0, r2
   29382:	4631      	mov	r1, r6
{
   29384:	4615      	mov	r5, r2
   29386:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   29388:	f7ff fe96 	bl	290b8 <uECC_vli_isZero>
   2938c:	2800      	cmp	r0, #0
   2938e:	f040 8091 	bne.w	294b4 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   29392:	463a      	mov	r2, r7
   29394:	4649      	mov	r1, r9
   29396:	a802      	add	r0, sp, #8
   29398:	f7ff ffe7 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2939c:	463b      	mov	r3, r7
   2939e:	aa02      	add	r2, sp, #8
   293a0:	4621      	mov	r1, r4
   293a2:	a80a      	add	r0, sp, #40	; 0x28
   293a4:	f7ff ffd1 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   293a8:	a902      	add	r1, sp, #8
   293aa:	4608      	mov	r0, r1
   293ac:	463a      	mov	r2, r7
   293ae:	f7ff ffdc 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   293b2:	463b      	mov	r3, r7
   293b4:	462a      	mov	r2, r5
   293b6:	4649      	mov	r1, r9
   293b8:	4648      	mov	r0, r9
   293ba:	f7ff ffc6 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   293be:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   293c2:	463a      	mov	r2, r7
   293c4:	4629      	mov	r1, r5
   293c6:	4628      	mov	r0, r5
   293c8:	f7ff ffcf 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   293cc:	4643      	mov	r3, r8
   293ce:	462a      	mov	r2, r5
   293d0:	4621      	mov	r1, r4
   293d2:	4620      	mov	r0, r4
   293d4:	9600      	str	r6, [sp, #0]
   293d6:	f7ff fef5 	bl	291c4 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   293da:	4643      	mov	r3, r8
   293dc:	462a      	mov	r2, r5
   293de:	4629      	mov	r1, r5
   293e0:	4628      	mov	r0, r5
   293e2:	9600      	str	r6, [sp, #0]
   293e4:	f7ff feee 	bl	291c4 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   293e8:	4643      	mov	r3, r8
   293ea:	462a      	mov	r2, r5
   293ec:	4621      	mov	r1, r4
   293ee:	4628      	mov	r0, r5
   293f0:	9600      	str	r6, [sp, #0]
   293f2:	f7ff ff00 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   293f6:	463b      	mov	r3, r7
   293f8:	462a      	mov	r2, r5
   293fa:	4621      	mov	r1, r4
   293fc:	4620      	mov	r0, r4
   293fe:	f7ff ffa4 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   29402:	4643      	mov	r3, r8
   29404:	4622      	mov	r2, r4
   29406:	4621      	mov	r1, r4
   29408:	4628      	mov	r0, r5
   2940a:	9600      	str	r6, [sp, #0]
   2940c:	f7ff feda 	bl	291c4 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   29410:	4643      	mov	r3, r8
   29412:	9600      	str	r6, [sp, #0]
   29414:	462a      	mov	r2, r5
   29416:	4621      	mov	r1, r4
   29418:	4620      	mov	r0, r4
   2941a:	f7ff fed3 	bl	291c4 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2941e:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   29420:	07db      	lsls	r3, r3, #31
   29422:	d54a      	bpl.n	294ba <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   29424:	4633      	mov	r3, r6
   29426:	4642      	mov	r2, r8
   29428:	4621      	mov	r1, r4
   2942a:	4620      	mov	r0, r4
   2942c:	f7ff fd92 	bl	28f54 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   29430:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   29432:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   29434:	4620      	mov	r0, r4
   29436:	f7ff fda7 	bl	28f88 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2943a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2943e:	3b01      	subs	r3, #1
   29440:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   29444:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   29448:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2944c:	463a      	mov	r2, r7
   2944e:	4621      	mov	r1, r4
   29450:	4628      	mov	r0, r5
   29452:	f7ff ff8a 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   29456:	4643      	mov	r3, r8
   29458:	aa0a      	add	r2, sp, #40	; 0x28
   2945a:	4629      	mov	r1, r5
   2945c:	4628      	mov	r0, r5
   2945e:	9600      	str	r6, [sp, #0]
   29460:	f7ff fec9 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   29464:	4643      	mov	r3, r8
   29466:	aa0a      	add	r2, sp, #40	; 0x28
   29468:	4629      	mov	r1, r5
   2946a:	4628      	mov	r0, r5
   2946c:	9600      	str	r6, [sp, #0]
   2946e:	f7ff fec2 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   29472:	a90a      	add	r1, sp, #40	; 0x28
   29474:	4608      	mov	r0, r1
   29476:	4643      	mov	r3, r8
   29478:	462a      	mov	r2, r5
   2947a:	9600      	str	r6, [sp, #0]
   2947c:	f7ff febb 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   29480:	463b      	mov	r3, r7
   29482:	aa0a      	add	r2, sp, #40	; 0x28
   29484:	4621      	mov	r1, r4
   29486:	4620      	mov	r0, r4
   29488:	f7ff ff5f 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2948c:	aa02      	add	r2, sp, #8
   2948e:	4643      	mov	r3, r8
   29490:	4610      	mov	r0, r2
   29492:	4621      	mov	r1, r4
   29494:	9600      	str	r6, [sp, #0]
   29496:	f7ff feae 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2949a:	4632      	mov	r2, r6
   2949c:	4629      	mov	r1, r5
   2949e:	4620      	mov	r0, r4
   294a0:	f7ff fe42 	bl	29128 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   294a4:	4649      	mov	r1, r9
   294a6:	4628      	mov	r0, r5
   294a8:	f7ff fe3e 	bl	29128 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   294ac:	a902      	add	r1, sp, #8
   294ae:	4648      	mov	r0, r9
   294b0:	f7ff fe3a 	bl	29128 <uECC_vli_set>
}
   294b4:	b012      	add	sp, #72	; 0x48
   294b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   294ba:	4631      	mov	r1, r6
   294bc:	4620      	mov	r0, r4
   294be:	f7ff fd63 	bl	28f88 <uECC_vli_rshift1>
   294c2:	e7c3      	b.n	2944c <double_jacobian_default+0xda>

000294c4 <x_side_default>:
{
   294c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   294c8:	4615      	mov	r5, r2
   294ca:	b08a      	sub	sp, #40	; 0x28
   294cc:	4604      	mov	r4, r0
   294ce:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   294d0:	221c      	movs	r2, #28
   294d2:	2100      	movs	r1, #0
   294d4:	a803      	add	r0, sp, #12
   294d6:	f000 ff4c 	bl	2a372 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   294da:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   294dc:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   294e0:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   294e2:	462a      	mov	r2, r5
   294e4:	4631      	mov	r1, r6
   294e6:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   294e8:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   294ea:	f7ff ff3e 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   294ee:	463b      	mov	r3, r7
   294f0:	aa02      	add	r2, sp, #8
   294f2:	4621      	mov	r1, r4
   294f4:	4620      	mov	r0, r4
   294f6:	f8cd 8000 	str.w	r8, [sp]
   294fa:	f7ff fe7c 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   294fe:	462b      	mov	r3, r5
   29500:	4632      	mov	r2, r6
   29502:	4621      	mov	r1, r4
   29504:	4620      	mov	r0, r4
   29506:	f7ff ff20 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2950a:	f8cd 8000 	str.w	r8, [sp]
   2950e:	463b      	mov	r3, r7
   29510:	f105 0284 	add.w	r2, r5, #132	; 0x84
   29514:	4621      	mov	r1, r4
   29516:	4620      	mov	r0, r4
   29518:	f7ff fe54 	bl	291c4 <uECC_vli_modAdd>
}
   2951c:	b00a      	add	sp, #40	; 0x28
   2951e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029522 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   29522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29526:	b09a      	sub	sp, #104	; 0x68
   29528:	4616      	mov	r6, r2
   2952a:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2952e:	4644      	mov	r4, r8
{
   29530:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   29532:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29536:	9500      	str	r5, [sp, #0]
{
   29538:	4607      	mov	r7, r0
   2953a:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2953c:	4623      	mov	r3, r4
   2953e:	4602      	mov	r2, r0
   29540:	4631      	mov	r1, r6
   29542:	a802      	add	r0, sp, #8
   29544:	f7ff fe57 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   29548:	a902      	add	r1, sp, #8
   2954a:	4642      	mov	r2, r8
   2954c:	4608      	mov	r0, r1
   2954e:	f7ff ff0c 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   29552:	4643      	mov	r3, r8
   29554:	aa02      	add	r2, sp, #8
   29556:	4639      	mov	r1, r7
   29558:	4638      	mov	r0, r7
   2955a:	f7ff fef6 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2955e:	4643      	mov	r3, r8
   29560:	aa02      	add	r2, sp, #8
   29562:	4631      	mov	r1, r6
   29564:	4630      	mov	r0, r6
   29566:	f7ff fef0 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2956a:	4623      	mov	r3, r4
   2956c:	4652      	mov	r2, sl
   2956e:	4649      	mov	r1, r9
   29570:	a802      	add	r0, sp, #8
   29572:	9500      	str	r5, [sp, #0]
   29574:	f7ff fe26 	bl	291c4 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   29578:	4623      	mov	r3, r4
   2957a:	4652      	mov	r2, sl
   2957c:	4649      	mov	r1, r9
   2957e:	4648      	mov	r0, r9
   29580:	9500      	str	r5, [sp, #0]
   29582:	f7ff fe38 	bl	291f6 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   29586:	4623      	mov	r3, r4
   29588:	463a      	mov	r2, r7
   2958a:	4631      	mov	r1, r6
   2958c:	a80a      	add	r0, sp, #40	; 0x28
   2958e:	9500      	str	r5, [sp, #0]
   29590:	f7ff fe31 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   29594:	4643      	mov	r3, r8
   29596:	aa0a      	add	r2, sp, #40	; 0x28
   29598:	4651      	mov	r1, sl
   2959a:	4650      	mov	r0, sl
   2959c:	f7ff fed5 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   295a0:	4623      	mov	r3, r4
   295a2:	4632      	mov	r2, r6
   295a4:	4639      	mov	r1, r7
   295a6:	a80a      	add	r0, sp, #40	; 0x28
   295a8:	9500      	str	r5, [sp, #0]
   295aa:	f7ff fe0b 	bl	291c4 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   295ae:	4642      	mov	r2, r8
   295b0:	4649      	mov	r1, r9
   295b2:	4630      	mov	r0, r6
   295b4:	f7ff fed9 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   295b8:	4623      	mov	r3, r4
   295ba:	aa0a      	add	r2, sp, #40	; 0x28
   295bc:	4631      	mov	r1, r6
   295be:	4630      	mov	r0, r6
   295c0:	9500      	str	r5, [sp, #0]
   295c2:	f7ff fe18 	bl	291f6 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   295c6:	4623      	mov	r3, r4
   295c8:	4632      	mov	r2, r6
   295ca:	4639      	mov	r1, r7
   295cc:	a812      	add	r0, sp, #72	; 0x48
   295ce:	9500      	str	r5, [sp, #0]
   295d0:	f7ff fe11 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   295d4:	4643      	mov	r3, r8
   295d6:	aa12      	add	r2, sp, #72	; 0x48
   295d8:	4649      	mov	r1, r9
   295da:	4648      	mov	r0, r9
   295dc:	f7ff feb5 	bl	2934a <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   295e0:	4623      	mov	r3, r4
   295e2:	4652      	mov	r2, sl
   295e4:	4649      	mov	r1, r9
   295e6:	4648      	mov	r0, r9
   295e8:	9500      	str	r5, [sp, #0]
   295ea:	f7ff fe04 	bl	291f6 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   295ee:	4642      	mov	r2, r8
   295f0:	a902      	add	r1, sp, #8
   295f2:	a812      	add	r0, sp, #72	; 0x48
   295f4:	f7ff feb9 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   295f8:	a912      	add	r1, sp, #72	; 0x48
   295fa:	4623      	mov	r3, r4
   295fc:	aa0a      	add	r2, sp, #40	; 0x28
   295fe:	4608      	mov	r0, r1
   29600:	9500      	str	r5, [sp, #0]
   29602:	f7ff fdf8 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   29606:	4623      	mov	r3, r4
   29608:	463a      	mov	r2, r7
   2960a:	a912      	add	r1, sp, #72	; 0x48
   2960c:	a80a      	add	r0, sp, #40	; 0x28
   2960e:	9500      	str	r5, [sp, #0]
   29610:	f7ff fdf1 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   29614:	a90a      	add	r1, sp, #40	; 0x28
   29616:	4643      	mov	r3, r8
   29618:	aa02      	add	r2, sp, #8
   2961a:	4608      	mov	r0, r1
   2961c:	f7ff fe95 	bl	2934a <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   29620:	4623      	mov	r3, r4
   29622:	4652      	mov	r2, sl
   29624:	a90a      	add	r1, sp, #40	; 0x28
   29626:	4650      	mov	r0, sl
   29628:	9500      	str	r5, [sp, #0]
   2962a:	f7ff fde4 	bl	291f6 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2962e:	462a      	mov	r2, r5
   29630:	a912      	add	r1, sp, #72	; 0x48
   29632:	4638      	mov	r0, r7
   29634:	f7ff fd78 	bl	29128 <uECC_vli_set>
}
   29638:	b01a      	add	sp, #104	; 0x68
   2963a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002963e <uECC_vli_modInv>:
{
   2963e:	b5f0      	push	{r4, r5, r6, r7, lr}
   29640:	460f      	mov	r7, r1
   29642:	b0a1      	sub	sp, #132	; 0x84
   29644:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   29646:	4619      	mov	r1, r3
   29648:	4638      	mov	r0, r7
{
   2964a:	4615      	mov	r5, r2
   2964c:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2964e:	f7ff fd33 	bl	290b8 <uECC_vli_isZero>
   29652:	b128      	cbz	r0, 29660 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   29654:	4630      	mov	r0, r6
}
   29656:	b021      	add	sp, #132	; 0x84
   29658:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   2965c:	f7ff bd21 	b.w	290a2 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   29660:	4622      	mov	r2, r4
   29662:	4639      	mov	r1, r7
   29664:	4668      	mov	r0, sp
   29666:	f7ff fd5f 	bl	29128 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2966a:	4629      	mov	r1, r5
   2966c:	a808      	add	r0, sp, #32
   2966e:	f7ff fd5b 	bl	29128 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   29672:	a810      	add	r0, sp, #64	; 0x40
   29674:	4621      	mov	r1, r4
   29676:	f7ff fd14 	bl	290a2 <uECC_vli_clear>
	u[0] = 1;
   2967a:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2967c:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2967e:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   29680:	f7ff fd0f 	bl	290a2 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   29684:	4622      	mov	r2, r4
   29686:	a908      	add	r1, sp, #32
   29688:	4668      	mov	r0, sp
   2968a:	f7ff fd59 	bl	29140 <uECC_vli_cmp_unsafe>
   2968e:	b930      	cbnz	r0, 2969e <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   29690:	4622      	mov	r2, r4
   29692:	a910      	add	r1, sp, #64	; 0x40
   29694:	4630      	mov	r0, r6
   29696:	f7ff fd47 	bl	29128 <uECC_vli_set>
}
   2969a:	b021      	add	sp, #132	; 0x84
   2969c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   2969e:	9b00      	ldr	r3, [sp, #0]
   296a0:	07da      	lsls	r2, r3, #31
   296a2:	d409      	bmi.n	296b8 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   296a4:	4621      	mov	r1, r4
   296a6:	4668      	mov	r0, sp
   296a8:	f7ff fc6e 	bl	28f88 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   296ac:	4622      	mov	r2, r4
   296ae:	4629      	mov	r1, r5
   296b0:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   296b2:	f7ff fc76 	bl	28fa2 <vli_modInv_update>
   296b6:	e7e5      	b.n	29684 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   296b8:	9b08      	ldr	r3, [sp, #32]
   296ba:	07db      	lsls	r3, r3, #31
   296bc:	d407      	bmi.n	296ce <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   296be:	4621      	mov	r1, r4
   296c0:	a808      	add	r0, sp, #32
   296c2:	f7ff fc61 	bl	28f88 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   296c6:	4622      	mov	r2, r4
   296c8:	4629      	mov	r1, r5
   296ca:	a818      	add	r0, sp, #96	; 0x60
   296cc:	e7f1      	b.n	296b2 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   296ce:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   296d0:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   296d2:	dd1c      	ble.n	2970e <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   296d4:	aa08      	add	r2, sp, #32
   296d6:	4669      	mov	r1, sp
   296d8:	4668      	mov	r0, sp
   296da:	f7ff fd58 	bl	2918e <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   296de:	4621      	mov	r1, r4
   296e0:	4668      	mov	r0, sp
   296e2:	f7ff fc51 	bl	28f88 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   296e6:	4622      	mov	r2, r4
   296e8:	a918      	add	r1, sp, #96	; 0x60
   296ea:	a810      	add	r0, sp, #64	; 0x40
   296ec:	f7ff fd28 	bl	29140 <uECC_vli_cmp_unsafe>
   296f0:	2800      	cmp	r0, #0
   296f2:	da05      	bge.n	29700 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   296f4:	a910      	add	r1, sp, #64	; 0x40
   296f6:	4623      	mov	r3, r4
   296f8:	462a      	mov	r2, r5
   296fa:	4608      	mov	r0, r1
   296fc:	f7ff fc2a 	bl	28f54 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   29700:	a910      	add	r1, sp, #64	; 0x40
   29702:	4623      	mov	r3, r4
   29704:	aa18      	add	r2, sp, #96	; 0x60
   29706:	4608      	mov	r0, r1
   29708:	f7ff fd41 	bl	2918e <uECC_vli_sub>
   2970c:	e7ce      	b.n	296ac <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   2970e:	466a      	mov	r2, sp
   29710:	a808      	add	r0, sp, #32
   29712:	f7ff fd3c 	bl	2918e <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   29716:	4621      	mov	r1, r4
   29718:	a808      	add	r0, sp, #32
   2971a:	f7ff fc35 	bl	28f88 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2971e:	4622      	mov	r2, r4
   29720:	a910      	add	r1, sp, #64	; 0x40
   29722:	a818      	add	r0, sp, #96	; 0x60
   29724:	f7ff fd0c 	bl	29140 <uECC_vli_cmp_unsafe>
   29728:	2800      	cmp	r0, #0
   2972a:	da05      	bge.n	29738 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   2972c:	a918      	add	r1, sp, #96	; 0x60
   2972e:	4623      	mov	r3, r4
   29730:	462a      	mov	r2, r5
   29732:	4608      	mov	r0, r1
   29734:	f7ff fc0e 	bl	28f54 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   29738:	a918      	add	r1, sp, #96	; 0x60
   2973a:	4623      	mov	r3, r4
   2973c:	aa10      	add	r2, sp, #64	; 0x40
   2973e:	4608      	mov	r0, r1
   29740:	f7ff fd25 	bl	2918e <uECC_vli_sub>
   29744:	e7bf      	b.n	296c6 <uECC_vli_modInv+0x88>

00029746 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   29746:	7809      	ldrb	r1, [r1, #0]
   29748:	0049      	lsls	r1, r1, #1
   2974a:	b249      	sxtb	r1, r1
   2974c:	f7ff bcb4 	b.w	290b8 <uECC_vli_isZero>

00029750 <apply_z>:
{
   29750:	b5f0      	push	{r4, r5, r6, r7, lr}
   29752:	4615      	mov	r5, r2
   29754:	b089      	sub	sp, #36	; 0x24
   29756:	461c      	mov	r4, r3
   29758:	4607      	mov	r7, r0
   2975a:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2975c:	461a      	mov	r2, r3
   2975e:	4629      	mov	r1, r5
   29760:	4668      	mov	r0, sp
   29762:	f7ff fe02 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   29766:	4623      	mov	r3, r4
   29768:	466a      	mov	r2, sp
   2976a:	4639      	mov	r1, r7
   2976c:	4638      	mov	r0, r7
   2976e:	f7ff fdec 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   29772:	4623      	mov	r3, r4
   29774:	462a      	mov	r2, r5
   29776:	4669      	mov	r1, sp
   29778:	4668      	mov	r0, sp
   2977a:	f7ff fde6 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2977e:	4623      	mov	r3, r4
   29780:	466a      	mov	r2, sp
   29782:	4631      	mov	r1, r6
   29784:	4630      	mov	r0, r6
   29786:	f7ff fde0 	bl	2934a <uECC_vli_modMult_fast>
}
   2978a:	b009      	add	sp, #36	; 0x24
   2978c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002978e <XYcZ_add>:
{
   2978e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29792:	b08a      	sub	sp, #40	; 0x28
   29794:	4614      	mov	r4, r2
   29796:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2979a:	4655      	mov	r5, sl
{
   2979c:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2979e:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   297a2:	9600      	str	r6, [sp, #0]
{
   297a4:	4680      	mov	r8, r0
   297a6:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   297a8:	462b      	mov	r3, r5
   297aa:	4602      	mov	r2, r0
   297ac:	4621      	mov	r1, r4
   297ae:	a802      	add	r0, sp, #8
   297b0:	f7ff fd21 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   297b4:	a902      	add	r1, sp, #8
   297b6:	4652      	mov	r2, sl
   297b8:	4608      	mov	r0, r1
   297ba:	f7ff fdd6 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   297be:	4653      	mov	r3, sl
   297c0:	aa02      	add	r2, sp, #8
   297c2:	4641      	mov	r1, r8
   297c4:	4640      	mov	r0, r8
   297c6:	f7ff fdc0 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   297ca:	4653      	mov	r3, sl
   297cc:	aa02      	add	r2, sp, #8
   297ce:	4621      	mov	r1, r4
   297d0:	4620      	mov	r0, r4
   297d2:	f7ff fdba 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   297d6:	462b      	mov	r3, r5
   297d8:	464a      	mov	r2, r9
   297da:	4639      	mov	r1, r7
   297dc:	4638      	mov	r0, r7
   297de:	9600      	str	r6, [sp, #0]
   297e0:	f7ff fd09 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   297e4:	4652      	mov	r2, sl
   297e6:	4639      	mov	r1, r7
   297e8:	a802      	add	r0, sp, #8
   297ea:	f7ff fdbe 	bl	2936a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   297ee:	a902      	add	r1, sp, #8
   297f0:	462b      	mov	r3, r5
   297f2:	4642      	mov	r2, r8
   297f4:	4608      	mov	r0, r1
   297f6:	9600      	str	r6, [sp, #0]
   297f8:	f7ff fcfd 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   297fc:	a902      	add	r1, sp, #8
   297fe:	462b      	mov	r3, r5
   29800:	4622      	mov	r2, r4
   29802:	4608      	mov	r0, r1
   29804:	9600      	str	r6, [sp, #0]
   29806:	f7ff fcf6 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2980a:	462b      	mov	r3, r5
   2980c:	4642      	mov	r2, r8
   2980e:	4621      	mov	r1, r4
   29810:	4620      	mov	r0, r4
   29812:	9600      	str	r6, [sp, #0]
   29814:	f7ff fcef 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   29818:	4653      	mov	r3, sl
   2981a:	4622      	mov	r2, r4
   2981c:	4649      	mov	r1, r9
   2981e:	4648      	mov	r0, r9
   29820:	f7ff fd93 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   29824:	462b      	mov	r3, r5
   29826:	aa02      	add	r2, sp, #8
   29828:	4641      	mov	r1, r8
   2982a:	4620      	mov	r0, r4
   2982c:	9600      	str	r6, [sp, #0]
   2982e:	f7ff fce2 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   29832:	4653      	mov	r3, sl
   29834:	4622      	mov	r2, r4
   29836:	4639      	mov	r1, r7
   29838:	4638      	mov	r0, r7
   2983a:	f7ff fd86 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2983e:	462b      	mov	r3, r5
   29840:	464a      	mov	r2, r9
   29842:	4639      	mov	r1, r7
   29844:	4638      	mov	r0, r7
   29846:	9600      	str	r6, [sp, #0]
   29848:	f7ff fcd5 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2984c:	4632      	mov	r2, r6
   2984e:	a902      	add	r1, sp, #8
   29850:	4620      	mov	r0, r4
   29852:	f7ff fc69 	bl	29128 <uECC_vli_set>
}
   29856:	b00a      	add	sp, #40	; 0x28
   29858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002985c <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2985c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29860:	b0b1      	sub	sp, #196	; 0xc4
   29862:	e9cd 0103 	strd	r0, r1, [sp, #12]
   29866:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   29868:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2986c:	a818      	add	r0, sp, #96	; 0x60
{
   2986e:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   29870:	463a      	mov	r2, r7
{
   29872:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   29874:	f7ff fc58 	bl	29128 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   29878:	00bb      	lsls	r3, r7, #2
   2987a:	9305      	str	r3, [sp, #20]
   2987c:	9b04      	ldr	r3, [sp, #16]
   2987e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   29882:	4619      	mov	r1, r3
   29884:	a828      	add	r0, sp, #160	; 0xa0
   29886:	9302      	str	r3, [sp, #8]
   29888:	f7ff fc4e 	bl	29128 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2988c:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   29890:	2d00      	cmp	r5, #0
   29892:	f000 8086 	beq.w	299a2 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   29896:	4632      	mov	r2, r6
   29898:	4629      	mov	r1, r5
   2989a:	a808      	add	r0, sp, #32
   2989c:	f7ff fc44 	bl	29128 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   298a0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   298a4:	4632      	mov	r2, r6
   298a6:	a918      	add	r1, sp, #96	; 0x60
   298a8:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   298aa:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   298ae:	f7ff fc3b 	bl	29128 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   298b2:	a928      	add	r1, sp, #160	; 0xa0
   298b4:	4648      	mov	r0, r9
   298b6:	f7ff fc37 	bl	29128 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   298ba:	4623      	mov	r3, r4
   298bc:	aa08      	add	r2, sp, #32
   298be:	a818      	add	r0, sp, #96	; 0x60
   298c0:	f7ff ff46 	bl	29750 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   298c4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   298c8:	4623      	mov	r3, r4
   298ca:	aa08      	add	r2, sp, #32
   298cc:	a928      	add	r1, sp, #160	; 0xa0
   298ce:	a818      	add	r0, sp, #96	; 0x60
   298d0:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   298d2:	4623      	mov	r3, r4
   298d4:	aa08      	add	r2, sp, #32
   298d6:	4649      	mov	r1, r9
   298d8:	4640      	mov	r0, r8
   298da:	f7ff ff39 	bl	29750 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   298de:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   298e2:	3d02      	subs	r5, #2
   298e4:	b22d      	sxth	r5, r5
   298e6:	2d00      	cmp	r5, #0
   298e8:	dc62      	bgt.n	299b0 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   298ea:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   298ee:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   298f0:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   298f4:	ab10      	add	r3, sp, #64	; 0x40
   298f6:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   298fa:	43ed      	mvns	r5, r5
   298fc:	ab20      	add	r3, sp, #128	; 0x80
   298fe:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   29902:	f005 0501 	and.w	r5, r5, #1
   29906:	ab10      	add	r3, sp, #64	; 0x40
   29908:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2990c:	ab20      	add	r3, sp, #128	; 0x80
   2990e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   29912:	462b      	mov	r3, r5
   29914:	464a      	mov	r2, r9
   29916:	4631      	mov	r1, r6
   29918:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2991a:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2991e:	f7ff fe00 	bl	29522 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   29922:	4653      	mov	r3, sl
   29924:	aa10      	add	r2, sp, #64	; 0x40
   29926:	a918      	add	r1, sp, #96	; 0x60
   29928:	a808      	add	r0, sp, #32
   2992a:	9700      	str	r7, [sp, #0]
   2992c:	f7ff fc63 	bl	291f6 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   29930:	a908      	add	r1, sp, #32
   29932:	4623      	mov	r3, r4
   29934:	4632      	mov	r2, r6
   29936:	4608      	mov	r0, r1
   29938:	f7ff fd07 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2993c:	a908      	add	r1, sp, #32
   2993e:	9a04      	ldr	r2, [sp, #16]
   29940:	4623      	mov	r3, r4
   29942:	4608      	mov	r0, r1
   29944:	f7ff fd01 	bl	2934a <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   29948:	a908      	add	r1, sp, #32
   2994a:	463b      	mov	r3, r7
   2994c:	4652      	mov	r2, sl
   2994e:	4608      	mov	r0, r1
   29950:	f7ff fe75 	bl	2963e <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   29954:	a908      	add	r1, sp, #32
   29956:	9a02      	ldr	r2, [sp, #8]
   29958:	4623      	mov	r3, r4
   2995a:	4608      	mov	r0, r1
   2995c:	f7ff fcf5 	bl	2934a <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   29960:	a908      	add	r1, sp, #32
   29962:	4623      	mov	r3, r4
   29964:	4642      	mov	r2, r8
   29966:	4608      	mov	r0, r1
   29968:	f7ff fcef 	bl	2934a <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2996c:	4633      	mov	r3, r6
   2996e:	4642      	mov	r2, r8
   29970:	4629      	mov	r1, r5
   29972:	4648      	mov	r0, r9
   29974:	9400      	str	r4, [sp, #0]
   29976:	f7ff ff0a 	bl	2978e <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2997a:	4623      	mov	r3, r4
   2997c:	aa08      	add	r2, sp, #32
   2997e:	a920      	add	r1, sp, #128	; 0x80
   29980:	a810      	add	r0, sp, #64	; 0x40
   29982:	f7ff fee5 	bl	29750 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   29986:	9803      	ldr	r0, [sp, #12]
   29988:	463a      	mov	r2, r7
   2998a:	a910      	add	r1, sp, #64	; 0x40
   2998c:	f7ff fbcc 	bl	29128 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   29990:	9803      	ldr	r0, [sp, #12]
   29992:	9b05      	ldr	r3, [sp, #20]
   29994:	a920      	add	r1, sp, #128	; 0x80
   29996:	4418      	add	r0, r3
   29998:	f7ff fbc6 	bl	29128 <uECC_vli_set>
}
   2999c:	b031      	add	sp, #196	; 0xc4
   2999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   299a2:	4631      	mov	r1, r6
   299a4:	a808      	add	r0, sp, #32
   299a6:	f7ff fb7c 	bl	290a2 <uECC_vli_clear>
		z[0] = 1;
   299aa:	2301      	movs	r3, #1
   299ac:	9308      	str	r3, [sp, #32]
   299ae:	e777      	b.n	298a0 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   299b0:	4629      	mov	r1, r5
   299b2:	4650      	mov	r0, sl
   299b4:	f7ff fb8f 	bl	290d6 <uECC_vli_testBit>
   299b8:	fab0 f680 	clz	r6, r0
   299bc:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   299be:	f1c6 0101 	rsb	r1, r6, #1
   299c2:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   299c6:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   299ca:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   299ce:	4633      	mov	r3, r6
   299d0:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   299d4:	465a      	mov	r2, fp
   299d6:	9400      	str	r4, [sp, #0]
   299d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   299dc:	f7ff fda1 	bl	29522 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   299e0:	9907      	ldr	r1, [sp, #28]
   299e2:	9806      	ldr	r0, [sp, #24]
   299e4:	9400      	str	r4, [sp, #0]
   299e6:	460b      	mov	r3, r1
   299e8:	4602      	mov	r2, r0
   299ea:	4631      	mov	r1, r6
   299ec:	4658      	mov	r0, fp
   299ee:	f7ff fece 	bl	2978e <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   299f2:	3d01      	subs	r5, #1
   299f4:	e776      	b.n	298e4 <EccPoint_mult+0x88>

000299f6 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   299f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   299fa:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   299fe:	f119 081f 	adds.w	r8, r9, #31
{
   29a02:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   29a04:	bf48      	it	mi
   29a06:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   29a0a:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   29a0c:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   29a10:	3524      	adds	r5, #36	; 0x24
   29a12:	4601      	mov	r1, r0
{
   29a14:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   29a16:	4643      	mov	r3, r8
   29a18:	462a      	mov	r2, r5
   29a1a:	4630      	mov	r0, r6
   29a1c:	f7ff fa9a 	bl	28f54 <uECC_vli_add>
   29a20:	4604      	mov	r4, r0
   29a22:	b990      	cbnz	r0, 29a4a <regularize_k+0x54>
   29a24:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   29a28:	da06      	bge.n	29a38 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   29a2a:	4649      	mov	r1, r9
   29a2c:	4630      	mov	r0, r6
   29a2e:	f7ff fb52 	bl	290d6 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   29a32:	1e04      	subs	r4, r0, #0
   29a34:	bf18      	it	ne
   29a36:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   29a38:	4643      	mov	r3, r8
   29a3a:	462a      	mov	r2, r5
   29a3c:	4631      	mov	r1, r6
   29a3e:	4638      	mov	r0, r7
   29a40:	f7ff fa88 	bl	28f54 <uECC_vli_add>

	return carry;
}
   29a44:	4620      	mov	r0, r4
   29a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   29a4a:	2401      	movs	r4, #1
   29a4c:	e7f4      	b.n	29a38 <regularize_k+0x42>

00029a4e <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   29a4e:	b530      	push	{r4, r5, lr}
   29a50:	4614      	mov	r4, r2
   29a52:	b095      	sub	sp, #84	; 0x54
   29a54:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   29a56:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   29a58:	4623      	mov	r3, r4
{
   29a5a:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   29a5c:	a904      	add	r1, sp, #16
   29a5e:	9102      	str	r1, [sp, #8]
   29a60:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   29a62:	f7ff ffc8 	bl	299f6 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   29a66:	fab0 f380 	clz	r3, r0
   29a6a:	095b      	lsrs	r3, r3, #5
   29a6c:	aa14      	add	r2, sp, #80	; 0x50
   29a6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   29a72:	8863      	ldrh	r3, [r4, #2]
   29a74:	9401      	str	r4, [sp, #4]
   29a76:	3301      	adds	r3, #1
   29a78:	b21b      	sxth	r3, r3
   29a7a:	9300      	str	r3, [sp, #0]
   29a7c:	f852 2c48 	ldr.w	r2, [r2, #-72]
   29a80:	2300      	movs	r3, #0
   29a82:	f104 0144 	add.w	r1, r4, #68	; 0x44
   29a86:	4628      	mov	r0, r5
   29a88:	f7ff fee8 	bl	2985c <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   29a8c:	4621      	mov	r1, r4
   29a8e:	4628      	mov	r0, r5
   29a90:	f7ff fe59 	bl	29746 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   29a94:	fab0 f080 	clz	r0, r0
   29a98:	0940      	lsrs	r0, r0, #5
   29a9a:	b015      	add	sp, #84	; 0x54
   29a9c:	bd30      	pop	{r4, r5, pc}

00029a9e <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   29a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   29aa0:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   29aa2:	1e4f      	subs	r7, r1, #1
   29aa4:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   29aa6:	428c      	cmp	r4, r1
   29aa8:	f105 0501 	add.w	r5, r5, #1
   29aac:	db00      	blt.n	29ab0 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   29aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   29ab0:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   29ab2:	f023 0603 	bic.w	r6, r3, #3
   29ab6:	f003 0303 	and.w	r3, r3, #3
   29aba:	5996      	ldr	r6, [r2, r6]
   29abc:	00db      	lsls	r3, r3, #3
   29abe:	fa26 f303 	lsr.w	r3, r6, r3
   29ac2:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   29ac4:	e7ee      	b.n	29aa4 <uECC_vli_nativeToBytes+0x6>

00029ac6 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   29ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ac8:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   29aca:	1cd1      	adds	r1, r2, #3
   29acc:	bf48      	it	mi
   29ace:	1d91      	addmi	r1, r2, #6
   29ad0:	f341 0187 	sbfx	r1, r1, #2, #8
{
   29ad4:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   29ad6:	f7ff fae4 	bl	290a2 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   29ada:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   29adc:	1e67      	subs	r7, r4, #1
   29ade:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   29ae0:	42a2      	cmp	r2, r4
   29ae2:	f105 0501 	add.w	r5, r5, #1
   29ae6:	db00      	blt.n	29aea <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   29ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   29aea:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   29aec:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   29af0:	5cb2      	ldrb	r2, [r6, r2]
   29af2:	f003 0303 	and.w	r3, r3, #3
   29af6:	00db      	lsls	r3, r3, #3
   29af8:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   29afc:	5842      	ldr	r2, [r0, r1]
   29afe:	431a      	orrs	r2, r3
   29b00:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   29b02:	e7ec      	b.n	29ade <uECC_vli_bytesToNative+0x18>

00029b04 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   29b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b06:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   29b08:	f991 6000 	ldrsb.w	r6, [r1]
{
   29b0c:	4605      	mov	r5, r0
   29b0e:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   29b10:	f7ff fe19 	bl	29746 <EccPoint_isZero>
   29b14:	bb28      	cbnz	r0, 29b62 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   29b16:	1d27      	adds	r7, r4, #4
   29b18:	4632      	mov	r2, r6
   29b1a:	4629      	mov	r1, r5
   29b1c:	4638      	mov	r0, r7
   29b1e:	f7ff fb0f 	bl	29140 <uECC_vli_cmp_unsafe>
   29b22:	2801      	cmp	r0, #1
   29b24:	d120      	bne.n	29b68 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   29b26:	4632      	mov	r2, r6
   29b28:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   29b2c:	4638      	mov	r0, r7
   29b2e:	f7ff fb07 	bl	29140 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   29b32:	2801      	cmp	r0, #1
   29b34:	d118      	bne.n	29b68 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   29b36:	4622      	mov	r2, r4
   29b38:	4668      	mov	r0, sp
   29b3a:	f7ff fc16 	bl	2936a <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   29b3e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   29b42:	4622      	mov	r2, r4
   29b44:	4629      	mov	r1, r5
   29b46:	a808      	add	r0, sp, #32
   29b48:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   29b4a:	4632      	mov	r2, r6
   29b4c:	a908      	add	r1, sp, #32
   29b4e:	4668      	mov	r0, sp
   29b50:	f7ff fb0b 	bl	2916a <uECC_vli_equal>
		return -3;
   29b54:	2800      	cmp	r0, #0
   29b56:	bf0c      	ite	eq
   29b58:	2000      	moveq	r0, #0
   29b5a:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   29b5e:	b011      	add	sp, #68	; 0x44
   29b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   29b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29b66:	e7fa      	b.n	29b5e <uECC_valid_point+0x5a>
		return -2;
   29b68:	f06f 0001 	mvn.w	r0, #1
   29b6c:	e7f7      	b.n	29b5e <uECC_valid_point+0x5a>

00029b6e <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   29b6e:	b570      	push	{r4, r5, r6, lr}
   29b70:	460c      	mov	r4, r1
   29b72:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   29b74:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   29b76:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   29b7a:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   29b7c:	4601      	mov	r1, r0
   29b7e:	4668      	mov	r0, sp
   29b80:	f7ff ffa1 	bl	29ac6 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   29b84:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   29b88:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   29b8c:	18a9      	adds	r1, r5, r2
   29b8e:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   29b92:	f7ff ff98 	bl	29ac6 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   29b96:	2210      	movs	r2, #16
   29b98:	4631      	mov	r1, r6
   29b9a:	4668      	mov	r0, sp
   29b9c:	f7ff fad0 	bl	29140 <uECC_vli_cmp_unsafe>
   29ba0:	b128      	cbz	r0, 29bae <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   29ba2:	4621      	mov	r1, r4
   29ba4:	4668      	mov	r0, sp
   29ba6:	f7ff ffad 	bl	29b04 <uECC_valid_point>
}
   29baa:	b010      	add	sp, #64	; 0x40
   29bac:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   29bae:	f06f 0003 	mvn.w	r0, #3
   29bb2:	e7fa      	b.n	29baa <uECC_valid_public_key+0x3c>

00029bb4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   29bb4:	78cb      	ldrb	r3, [r1, #3]
   29bb6:	7802      	ldrb	r2, [r0, #0]
   29bb8:	4053      	eors	r3, r2
   29bba:	7003      	strb	r3, [r0, #0]
   29bbc:	884b      	ldrh	r3, [r1, #2]
   29bbe:	7842      	ldrb	r2, [r0, #1]
   29bc0:	4053      	eors	r3, r2
   29bc2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   29bc4:	680a      	ldr	r2, [r1, #0]
   29bc6:	7883      	ldrb	r3, [r0, #2]
   29bc8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   29bcc:	7083      	strb	r3, [r0, #2]
   29bce:	680a      	ldr	r2, [r1, #0]
   29bd0:	78c3      	ldrb	r3, [r0, #3]
   29bd2:	4053      	eors	r3, r2
   29bd4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   29bd6:	79cb      	ldrb	r3, [r1, #7]
   29bd8:	7902      	ldrb	r2, [r0, #4]
   29bda:	4053      	eors	r3, r2
   29bdc:	7103      	strb	r3, [r0, #4]
   29bde:	88cb      	ldrh	r3, [r1, #6]
   29be0:	7942      	ldrb	r2, [r0, #5]
   29be2:	4053      	eors	r3, r2
   29be4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   29be6:	684a      	ldr	r2, [r1, #4]
   29be8:	7983      	ldrb	r3, [r0, #6]
   29bea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   29bee:	7183      	strb	r3, [r0, #6]
   29bf0:	684a      	ldr	r2, [r1, #4]
   29bf2:	79c3      	ldrb	r3, [r0, #7]
   29bf4:	4053      	eors	r3, r2
   29bf6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   29bf8:	7acb      	ldrb	r3, [r1, #11]
   29bfa:	7a02      	ldrb	r2, [r0, #8]
   29bfc:	4053      	eors	r3, r2
   29bfe:	7203      	strb	r3, [r0, #8]
   29c00:	7a42      	ldrb	r2, [r0, #9]
   29c02:	894b      	ldrh	r3, [r1, #10]
   29c04:	4053      	eors	r3, r2
   29c06:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   29c08:	688a      	ldr	r2, [r1, #8]
   29c0a:	7a83      	ldrb	r3, [r0, #10]
   29c0c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   29c10:	7283      	strb	r3, [r0, #10]
   29c12:	688a      	ldr	r2, [r1, #8]
   29c14:	7ac3      	ldrb	r3, [r0, #11]
   29c16:	4053      	eors	r3, r2
   29c18:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   29c1a:	7bcb      	ldrb	r3, [r1, #15]
   29c1c:	7b02      	ldrb	r2, [r0, #12]
   29c1e:	4053      	eors	r3, r2
   29c20:	7303      	strb	r3, [r0, #12]
   29c22:	89cb      	ldrh	r3, [r1, #14]
   29c24:	7b42      	ldrb	r2, [r0, #13]
   29c26:	4053      	eors	r3, r2
   29c28:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   29c2a:	68ca      	ldr	r2, [r1, #12]
   29c2c:	7b83      	ldrb	r3, [r0, #14]
   29c2e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   29c32:	7383      	strb	r3, [r0, #14]
   29c34:	68ca      	ldr	r2, [r1, #12]
   29c36:	7bc3      	ldrb	r3, [r0, #15]
   29c38:	4053      	eors	r3, r2
   29c3a:	73c3      	strb	r3, [r0, #15]
}
   29c3c:	4770      	bx	lr

00029c3e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   29c3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   29c40:	7802      	ldrb	r2, [r0, #0]
   29c42:	f88d 2000 	strb.w	r2, [sp]
   29c46:	7942      	ldrb	r2, [r0, #5]
   29c48:	f88d 2001 	strb.w	r2, [sp, #1]
   29c4c:	7a82      	ldrb	r2, [r0, #10]
   29c4e:	f88d 2002 	strb.w	r2, [sp, #2]
   29c52:	7bc2      	ldrb	r2, [r0, #15]
   29c54:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   29c58:	7902      	ldrb	r2, [r0, #4]
   29c5a:	f88d 2004 	strb.w	r2, [sp, #4]
   29c5e:	7a42      	ldrb	r2, [r0, #9]
   29c60:	f88d 2005 	strb.w	r2, [sp, #5]
   29c64:	7b82      	ldrb	r2, [r0, #14]
   29c66:	f88d 2006 	strb.w	r2, [sp, #6]
   29c6a:	78c2      	ldrb	r2, [r0, #3]
   29c6c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   29c70:	7a02      	ldrb	r2, [r0, #8]
   29c72:	f88d 2008 	strb.w	r2, [sp, #8]
   29c76:	7b42      	ldrb	r2, [r0, #13]
   29c78:	f88d 2009 	strb.w	r2, [sp, #9]
   29c7c:	7882      	ldrb	r2, [r0, #2]
   29c7e:	f88d 200a 	strb.w	r2, [sp, #10]
   29c82:	79c2      	ldrb	r2, [r0, #7]
   29c84:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   29c88:	7b02      	ldrb	r2, [r0, #12]
   29c8a:	f88d 200c 	strb.w	r2, [sp, #12]
   29c8e:	7842      	ldrb	r2, [r0, #1]
   29c90:	7ac3      	ldrb	r3, [r0, #11]
   29c92:	f88d 200d 	strb.w	r2, [sp, #13]
   29c96:	7982      	ldrb	r2, [r0, #6]
   29c98:	f88d 200e 	strb.w	r2, [sp, #14]
   29c9c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29ca0:	2310      	movs	r3, #16
   29ca2:	466a      	mov	r2, sp
   29ca4:	4619      	mov	r1, r3
   29ca6:	f7ff f891 	bl	28dcc <_copy>
}
   29caa:	b005      	add	sp, #20
   29cac:	f85d fb04 	ldr.w	pc, [sp], #4

00029cb0 <mult_row_column>:
{
   29cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29cb2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   29cb4:	7808      	ldrb	r0, [r1, #0]
{
   29cb6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   29cb8:	f7ff f897 	bl	28dea <_double_byte>
   29cbc:	4605      	mov	r5, r0
   29cbe:	7860      	ldrb	r0, [r4, #1]
   29cc0:	f7ff f893 	bl	28dea <_double_byte>
   29cc4:	78a2      	ldrb	r2, [r4, #2]
   29cc6:	7863      	ldrb	r3, [r4, #1]
   29cc8:	4053      	eors	r3, r2
   29cca:	78e2      	ldrb	r2, [r4, #3]
   29ccc:	4053      	eors	r3, r2
   29cce:	405d      	eors	r5, r3
   29cd0:	4045      	eors	r5, r0
   29cd2:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   29cd4:	7860      	ldrb	r0, [r4, #1]
   29cd6:	7827      	ldrb	r7, [r4, #0]
   29cd8:	f7ff f887 	bl	28dea <_double_byte>
   29cdc:	4605      	mov	r5, r0
   29cde:	78a0      	ldrb	r0, [r4, #2]
   29ce0:	f7ff f883 	bl	28dea <_double_byte>
   29ce4:	78a3      	ldrb	r3, [r4, #2]
   29ce6:	405f      	eors	r7, r3
   29ce8:	78e3      	ldrb	r3, [r4, #3]
   29cea:	405f      	eors	r7, r3
   29cec:	407d      	eors	r5, r7
   29cee:	4045      	eors	r5, r0
   29cf0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   29cf2:	78a0      	ldrb	r0, [r4, #2]
   29cf4:	7865      	ldrb	r5, [r4, #1]
   29cf6:	7827      	ldrb	r7, [r4, #0]
   29cf8:	f7ff f877 	bl	28dea <_double_byte>
   29cfc:	406f      	eors	r7, r5
   29cfe:	4605      	mov	r5, r0
   29d00:	78e0      	ldrb	r0, [r4, #3]
   29d02:	f7ff f872 	bl	28dea <_double_byte>
   29d06:	78e3      	ldrb	r3, [r4, #3]
   29d08:	405f      	eors	r7, r3
   29d0a:	407d      	eors	r5, r7
   29d0c:	4045      	eors	r5, r0
   29d0e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   29d10:	7820      	ldrb	r0, [r4, #0]
   29d12:	f7ff f86a 	bl	28dea <_double_byte>
   29d16:	7863      	ldrb	r3, [r4, #1]
   29d18:	7825      	ldrb	r5, [r4, #0]
   29d1a:	405d      	eors	r5, r3
   29d1c:	78a3      	ldrb	r3, [r4, #2]
   29d1e:	405d      	eors	r5, r3
   29d20:	4045      	eors	r5, r0
   29d22:	78e0      	ldrb	r0, [r4, #3]
   29d24:	f7ff f861 	bl	28dea <_double_byte>
   29d28:	b2ed      	uxtb	r5, r5
   29d2a:	4045      	eors	r5, r0
   29d2c:	70f5      	strb	r5, [r6, #3]
}
   29d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029d30 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   29d30:	b570      	push	{r4, r5, r6, lr}
   29d32:	4614      	mov	r4, r2
   29d34:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   29d36:	4605      	mov	r5, r0
   29d38:	2800      	cmp	r0, #0
   29d3a:	d049      	beq.n	29dd0 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   29d3c:	2900      	cmp	r1, #0
   29d3e:	d049      	beq.n	29dd4 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   29d40:	2a00      	cmp	r2, #0
   29d42:	d049      	beq.n	29dd8 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   29d44:	2310      	movs	r3, #16
   29d46:	460a      	mov	r2, r1
   29d48:	4668      	mov	r0, sp
   29d4a:	4619      	mov	r1, r3
   29d4c:	f7ff f83e 	bl	28dcc <_copy>
	add_round_key(state, s->words);
   29d50:	4621      	mov	r1, r4
   29d52:	4668      	mov	r0, sp
   29d54:	f7ff ff2e 	bl	29bb4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   29d58:	3410      	adds	r4, #16
   29d5a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   29d5e:	4668      	mov	r0, sp
   29d60:	f7e1 fa62 	bl	b228 <sub_bytes>
		shift_rows(state);
   29d64:	4668      	mov	r0, sp
   29d66:	f7ff ff6a 	bl	29c3e <shift_rows>
	mult_row_column(t, s);
   29d6a:	4669      	mov	r1, sp
   29d6c:	a804      	add	r0, sp, #16
   29d6e:	f7ff ff9f 	bl	29cb0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   29d72:	a901      	add	r1, sp, #4
   29d74:	a805      	add	r0, sp, #20
   29d76:	f7ff ff9b 	bl	29cb0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   29d7a:	a902      	add	r1, sp, #8
   29d7c:	a806      	add	r0, sp, #24
   29d7e:	f7ff ff97 	bl	29cb0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   29d82:	a903      	add	r1, sp, #12
   29d84:	a807      	add	r0, sp, #28
   29d86:	f7ff ff93 	bl	29cb0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29d8a:	2310      	movs	r3, #16
   29d8c:	4619      	mov	r1, r3
   29d8e:	eb0d 0203 	add.w	r2, sp, r3
   29d92:	4668      	mov	r0, sp
   29d94:	f7ff f81a 	bl	28dcc <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   29d98:	4621      	mov	r1, r4
   29d9a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   29d9c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   29d9e:	f7ff ff09 	bl	29bb4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   29da2:	42a6      	cmp	r6, r4
   29da4:	d1db      	bne.n	29d5e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   29da6:	f7e1 fa3f 	bl	b228 <sub_bytes>
	shift_rows(state);
   29daa:	4668      	mov	r0, sp
   29dac:	f7ff ff47 	bl	29c3e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   29db0:	4631      	mov	r1, r6
   29db2:	4668      	mov	r0, sp
   29db4:	f7ff fefe 	bl	29bb4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   29db8:	2310      	movs	r3, #16
   29dba:	4619      	mov	r1, r3
   29dbc:	466a      	mov	r2, sp
   29dbe:	4628      	mov	r0, r5
   29dc0:	f7ff f804 	bl	28dcc <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   29dc4:	4668      	mov	r0, sp
   29dc6:	2210      	movs	r2, #16
   29dc8:	2100      	movs	r1, #0
   29dca:	f7ff f80c 	bl	28de6 <_set>

	return TC_CRYPTO_SUCCESS;
   29dce:	2001      	movs	r0, #1
}
   29dd0:	b008      	add	sp, #32
   29dd2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29dd4:	4608      	mov	r0, r1
   29dd6:	e7fb      	b.n	29dd0 <tc_aes_encrypt+0xa0>
   29dd8:	4610      	mov	r0, r2
   29dda:	e7f9      	b.n	29dd0 <tc_aes_encrypt+0xa0>

00029ddc <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   29ddc:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29dde:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   29de0:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29de2:	f912 3b10 	ldrsb.w	r3, [r2], #16
   29de6:	2b00      	cmp	r3, #0
   29de8:	bfb4      	ite	lt
   29dea:	2387      	movlt	r3, #135	; 0x87
   29dec:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   29dee:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   29df2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   29df6:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   29df8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   29dfc:	d002      	beq.n	29e04 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   29dfe:	7813      	ldrb	r3, [r2, #0]
   29e00:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   29e02:	e7f4      	b.n	29dee <gf_double+0x12>
	}
}
   29e04:	bd10      	pop	{r4, pc}

00029e06 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   29e06:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   29e08:	b120      	cbz	r0, 29e14 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   29e0a:	2258      	movs	r2, #88	; 0x58
   29e0c:	2100      	movs	r1, #0
   29e0e:	f7fe ffea 	bl	28de6 <_set>
   29e12:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29e14:	bd08      	pop	{r3, pc}

00029e16 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   29e16:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29e18:	4604      	mov	r4, r0
   29e1a:	b188      	cbz	r0, 29e40 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29e1c:	2210      	movs	r2, #16
   29e1e:	2100      	movs	r1, #0
   29e20:	f7fe ffe1 	bl	28de6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   29e24:	2210      	movs	r2, #16
   29e26:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29e2a:	2100      	movs	r1, #0
   29e2c:	f7fe ffdb 	bl	28de6 <_set>
	s->leftover_offset = 0;
   29e30:	2300      	movs	r3, #0
   29e32:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   29e34:	2200      	movs	r2, #0
   29e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   29e3a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   29e3e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29e40:	bd10      	pop	{r4, pc}

00029e42 <tc_cmac_setup>:
{
   29e42:	b570      	push	{r4, r5, r6, lr}
   29e44:	460d      	mov	r5, r1
   29e46:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   29e48:	4604      	mov	r4, r0
   29e4a:	b310      	cbz	r0, 29e92 <tc_cmac_setup+0x50>
   29e4c:	b311      	cbz	r1, 29e94 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   29e4e:	2258      	movs	r2, #88	; 0x58
   29e50:	2100      	movs	r1, #0
   29e52:	f7fe ffc8 	bl	28de6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   29e56:	4629      	mov	r1, r5
	s->sched = sched;
   29e58:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   29e5a:	4630      	mov	r0, r6
   29e5c:	f7e1 f9f0 	bl	b240 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29e60:	2210      	movs	r2, #16
   29e62:	2100      	movs	r1, #0
   29e64:	4620      	mov	r0, r4
   29e66:	f7fe ffbe 	bl	28de6 <_set>
	gf_double (s->K1, s->iv);
   29e6a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29e6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29e70:	4621      	mov	r1, r4
   29e72:	4620      	mov	r0, r4
   29e74:	f7ff ff5c 	bl	29d30 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   29e78:	4621      	mov	r1, r4
   29e7a:	4628      	mov	r0, r5
   29e7c:	f7ff ffae 	bl	29ddc <gf_double>
	gf_double (s->K2, s->K1);
   29e80:	4629      	mov	r1, r5
   29e82:	f104 0020 	add.w	r0, r4, #32
   29e86:	f7ff ffa9 	bl	29ddc <gf_double>
	tc_cmac_init(s);
   29e8a:	4620      	mov	r0, r4
   29e8c:	f7ff ffc3 	bl	29e16 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   29e90:	2001      	movs	r0, #1
}
   29e92:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29e94:	4608      	mov	r0, r1
   29e96:	e7fc      	b.n	29e92 <tc_cmac_setup+0x50>

00029e98 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   29e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e9c:	460d      	mov	r5, r1
   29e9e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29ea0:	4604      	mov	r4, r0
   29ea2:	2800      	cmp	r0, #0
   29ea4:	d061      	beq.n	29f6a <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   29ea6:	b912      	cbnz	r2, 29eae <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   29ea8:	2001      	movs	r0, #1
}
   29eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   29eae:	2900      	cmp	r1, #0
   29eb0:	d05b      	beq.n	29f6a <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   29eb2:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   29eb6:	ea53 0102 	orrs.w	r1, r3, r2
   29eba:	d056      	beq.n	29f6a <tc_cmac_update+0xd2>
	s->countdown--;
   29ebc:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   29ebe:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   29ec2:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   29ec6:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   29eca:	f1b8 0f00 	cmp.w	r8, #0
   29ece:	d02a      	beq.n	29f26 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   29ed0:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29ed4:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   29ed8:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29eda:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   29edc:	d208      	bcs.n	29ef0 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29ede:	462a      	mov	r2, r5
   29ee0:	4633      	mov	r3, r6
   29ee2:	4631      	mov	r1, r6
   29ee4:	f7fe ff72 	bl	28dcc <_copy>
			s->leftover_offset += data_length;
   29ee8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   29eea:	4432      	add	r2, r6
   29eec:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   29eee:	e7db      	b.n	29ea8 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   29ef0:	463b      	mov	r3, r7
   29ef2:	462a      	mov	r2, r5
   29ef4:	4639      	mov	r1, r7
   29ef6:	f7fe ff69 	bl	28dcc <_copy>
		data_length -= remaining_space;
   29efa:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   29efc:	2300      	movs	r3, #0
   29efe:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   29f00:	4446      	add	r6, r8
		data += remaining_space;
   29f02:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f04:	1e63      	subs	r3, r4, #1
   29f06:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   29f0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29f0e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f12:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   29f14:	ea82 0200 	eor.w	r2, r2, r0
   29f18:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f1a:	d1f6      	bne.n	29f0a <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29f1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29f1e:	4621      	mov	r1, r4
   29f20:	4620      	mov	r0, r4
   29f22:	f7ff ff05 	bl	29d30 <tc_aes_encrypt>
   29f26:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   29f2a:	2e10      	cmp	r6, #16
   29f2c:	d80a      	bhi.n	29f44 <tc_cmac_update+0xac>
	if (data_length > 0) {
   29f2e:	2e00      	cmp	r6, #0
   29f30:	d0ba      	beq.n	29ea8 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   29f32:	4633      	mov	r3, r6
   29f34:	462a      	mov	r2, r5
   29f36:	4631      	mov	r1, r6
   29f38:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29f3c:	f7fe ff46 	bl	28dcc <_copy>
		s->leftover_offset = data_length;
   29f40:	6466      	str	r6, [r4, #68]	; 0x44
   29f42:	e7b1      	b.n	29ea8 <tc_cmac_update+0x10>
   29f44:	1e63      	subs	r3, r4, #1
   29f46:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   29f48:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29f4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f50:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   29f52:	ea82 0200 	eor.w	r2, r2, r0
   29f56:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f58:	d1f6      	bne.n	29f48 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29f5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29f5c:	4621      	mov	r1, r4
   29f5e:	4620      	mov	r0, r4
   29f60:	f7ff fee6 	bl	29d30 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   29f64:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   29f66:	3e10      	subs	r6, #16
   29f68:	e7df      	b.n	29f2a <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   29f6a:	2000      	movs	r0, #0
   29f6c:	e79d      	b.n	29eaa <tc_cmac_update+0x12>

00029f6e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   29f6e:	b570      	push	{r4, r5, r6, lr}
   29f70:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29f72:	4605      	mov	r5, r0
   29f74:	b1e8      	cbz	r0, 29fb2 <tc_cmac_final+0x44>
   29f76:	b369      	cbz	r1, 29fd4 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   29f78:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   29f7a:	2a10      	cmp	r2, #16
   29f7c:	d11a      	bne.n	29fb4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29f7e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f80:	1e63      	subs	r3, r4, #1
   29f82:	3901      	subs	r1, #1
   29f84:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29f88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29f8c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   29f90:	4072      	eors	r2, r6
   29f92:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f96:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29f98:	ea82 0206 	eor.w	r2, r2, r6
   29f9c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29f9e:	d1f3      	bne.n	29f88 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   29fa0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29fa2:	4621      	mov	r1, r4
   29fa4:	4628      	mov	r0, r5
   29fa6:	f7ff fec3 	bl	29d30 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   29faa:	4620      	mov	r0, r4
   29fac:	f7ff ff2b 	bl	29e06 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   29fb0:	2001      	movs	r0, #1
}
   29fb2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   29fb4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   29fb8:	2100      	movs	r1, #0
   29fba:	f1c2 0210 	rsb	r2, r2, #16
   29fbe:	4420      	add	r0, r4
   29fc0:	f7fe ff11 	bl	28de6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   29fc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29fc6:	4423      	add	r3, r4
   29fc8:	2280      	movs	r2, #128	; 0x80
   29fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   29fce:	f104 0120 	add.w	r1, r4, #32
   29fd2:	e7d5      	b.n	29f80 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   29fd4:	4608      	mov	r0, r1
   29fd6:	e7ec      	b.n	29fb2 <tc_cmac_final+0x44>

00029fd8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   29fd8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   29fda:	6800      	ldr	r0, [r0, #0]
   29fdc:	f7e1 b9a0 	b.w	b320 <z_arm_fatal_error>

00029fe0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   29fe0:	2100      	movs	r1, #0
   29fe2:	2001      	movs	r0, #1
   29fe4:	f7e1 b99c 	b.w	b320 <z_arm_fatal_error>

00029fe8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   29fe8:	b508      	push	{r3, lr}
	handler();
   29fea:	f7e1 fa5f 	bl	b4ac <z_SysNmiOnReset>
	z_arm_int_exit();
}
   29fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   29ff2:	f7e1 bb45 	b.w	b680 <z_arm_exc_exit>

00029ff6 <z_log_msg2_static_create.constprop.0>:
   29ff6:	2300      	movs	r3, #0
   29ff8:	f7fd bca2 	b.w	27940 <z_impl_z_log_msg2_static_create>

00029ffc <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   29ffc:	b510      	push	{r4, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   29ffe:	7802      	ldrb	r2, [r0, #0]
   2a000:	2a20      	cmp	r2, #32
   2a002:	4603      	mov	r3, r0
   2a004:	f100 0001 	add.w	r0, r0, #1
   2a008:	d0f9      	beq.n	29ffe <atoi+0x2>
   2a00a:	f1a2 0109 	sub.w	r1, r2, #9
   2a00e:	2904      	cmp	r1, #4
   2a010:	d9f5      	bls.n	29ffe <atoi+0x2>
		s++;
	}
	switch (*s) {
   2a012:	2a2b      	cmp	r2, #43	; 0x2b
   2a014:	d008      	beq.n	2a028 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   2a016:	2a2d      	cmp	r2, #45	; 0x2d
   2a018:	bf0a      	itet	eq
   2a01a:	4603      	moveq	r3, r0
   2a01c:	2100      	movne	r1, #0
   2a01e:	2101      	moveq	r1, #1
   2a020:	3b01      	subs	r3, #1
	switch (*s) {
   2a022:	2000      	movs	r0, #0
		 */
		break;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   2a024:	240a      	movs	r4, #10
   2a026:	e004      	b.n	2a032 <atoi+0x36>
		s++;
   2a028:	4603      	mov	r3, r0
	int neg = 0;
   2a02a:	2100      	movs	r1, #0
   2a02c:	e7f8      	b.n	2a020 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   2a02e:	4360      	muls	r0, r4
   2a030:	1a80      	subs	r0, r0, r2
	while (isdigit(*s)) {
   2a032:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2a036:	3a30      	subs	r2, #48	; 0x30
   2a038:	2a09      	cmp	r2, #9
   2a03a:	d9f8      	bls.n	2a02e <atoi+0x32>
	}
	return neg ? n : -n;
   2a03c:	b901      	cbnz	r1, 2a040 <atoi+0x44>
   2a03e:	4240      	negs	r0, r0
}
   2a040:	bd10      	pop	{r4, pc}

0002a042 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   2a042:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a046:	4684      	mov	ip, r0
   2a048:	4688      	mov	r8, r1
	register const char *s = nptr;
   2a04a:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2a04c:	4621      	mov	r1, r4
   2a04e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2a052:	2b20      	cmp	r3, #32
   2a054:	d0fa      	beq.n	2a04c <strtol+0xa>
   2a056:	f1a3 0009 	sub.w	r0, r3, #9
   2a05a:	2804      	cmp	r0, #4
   2a05c:	d9f6      	bls.n	2a04c <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   2a05e:	2b2d      	cmp	r3, #45	; 0x2d
   2a060:	d12d      	bne.n	2a0be <strtol+0x7c>
		neg = 1;
		c = *s++;
   2a062:	784b      	ldrb	r3, [r1, #1]
   2a064:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2a066:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2a068:	2a00      	cmp	r2, #0
   2a06a:	d05a      	beq.n	2a122 <strtol+0xe0>
   2a06c:	2a10      	cmp	r2, #16
   2a06e:	d109      	bne.n	2a084 <strtol+0x42>
   2a070:	2b30      	cmp	r3, #48	; 0x30
   2a072:	d107      	bne.n	2a084 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a074:	7823      	ldrb	r3, [r4, #0]
   2a076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a07a:	2b58      	cmp	r3, #88	; 0x58
   2a07c:	d14c      	bne.n	2a118 <strtol+0xd6>
		c = s[1];
   2a07e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   2a080:	2210      	movs	r2, #16
		s += 2;
   2a082:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2a084:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   2a088:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2a08a:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   2a08c:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   2a090:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2a092:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2a096:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2a09a:	2d09      	cmp	r5, #9
   2a09c:	d815      	bhi.n	2a0ca <strtol+0x88>
			c -= '0';
   2a09e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2a0a0:	429a      	cmp	r2, r3
   2a0a2:	dd22      	ble.n	2a0ea <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2a0a4:	1c75      	adds	r5, r6, #1
   2a0a6:	d007      	beq.n	2a0b8 <strtol+0x76>
   2a0a8:	4570      	cmp	r0, lr
   2a0aa:	d81b      	bhi.n	2a0e4 <strtol+0xa2>
   2a0ac:	d101      	bne.n	2a0b2 <strtol+0x70>
   2a0ae:	454b      	cmp	r3, r9
   2a0b0:	dc18      	bgt.n	2a0e4 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2a0b2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2a0b6:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   2a0b8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2a0bc:	e7eb      	b.n	2a096 <strtol+0x54>
	} else if (c == '+') {
   2a0be:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2a0c0:	bf04      	itt	eq
   2a0c2:	784b      	ldrbeq	r3, [r1, #1]
   2a0c4:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2a0c6:	2100      	movs	r1, #0
   2a0c8:	e7ce      	b.n	2a068 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2a0ca:	f043 0520 	orr.w	r5, r3, #32
   2a0ce:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2a0d0:	2d19      	cmp	r5, #25
   2a0d2:	d80a      	bhi.n	2a0ea <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2a0d4:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2a0d8:	2d1a      	cmp	r5, #26
   2a0da:	bf34      	ite	cc
   2a0dc:	2537      	movcc	r5, #55	; 0x37
   2a0de:	2557      	movcs	r5, #87	; 0x57
   2a0e0:	1b5b      	subs	r3, r3, r5
   2a0e2:	e7dd      	b.n	2a0a0 <strtol+0x5e>
			any = -1;
   2a0e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a0e8:	e7e6      	b.n	2a0b8 <strtol+0x76>
		}
	}

	if (any < 0) {
   2a0ea:	1c73      	adds	r3, r6, #1
   2a0ec:	d109      	bne.n	2a102 <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2a0ee:	f7fa fdbd 	bl	24c6c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2a0f2:	2322      	movs	r3, #34	; 0x22
   2a0f4:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   2a0f6:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   2a0f8:	f1b8 0f00 	cmp.w	r8, #0
   2a0fc:	d107      	bne.n	2a10e <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2a0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   2a102:	b101      	cbz	r1, 2a106 <strtol+0xc4>
		acc = -acc;
   2a104:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2a106:	f1b8 0f00 	cmp.w	r8, #0
   2a10a:	d0f8      	beq.n	2a0fe <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   2a10c:	b10e      	cbz	r6, 2a112 <strtol+0xd0>
   2a10e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   2a112:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   2a116:	e7f2      	b.n	2a0fe <strtol+0xbc>
	if (base == 0) {
   2a118:	2330      	movs	r3, #48	; 0x30
   2a11a:	2a00      	cmp	r2, #0
   2a11c:	d1b2      	bne.n	2a084 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   2a11e:	2208      	movs	r2, #8
   2a120:	e7b0      	b.n	2a084 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   2a122:	2b30      	cmp	r3, #48	; 0x30
   2a124:	d0a6      	beq.n	2a074 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   2a126:	220a      	movs	r2, #10
   2a128:	e7ac      	b.n	2a084 <strtol+0x42>

0002a12a <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2a12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a12e:	4607      	mov	r7, r0
   2a130:	4688      	mov	r8, r1
	register const char *s = nptr;
   2a132:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2a134:	4621      	mov	r1, r4
   2a136:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2a13a:	2b20      	cmp	r3, #32
   2a13c:	d0fa      	beq.n	2a134 <strtoul+0xa>
   2a13e:	f1a3 0009 	sub.w	r0, r3, #9
   2a142:	2804      	cmp	r0, #4
   2a144:	d9f6      	bls.n	2a134 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   2a146:	2b2d      	cmp	r3, #45	; 0x2d
   2a148:	d12f      	bne.n	2a1aa <strtoul+0x80>
		neg = 1;
		c = *s++;
   2a14a:	784b      	ldrb	r3, [r1, #1]
   2a14c:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2a14e:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2a152:	2a00      	cmp	r2, #0
   2a154:	d05e      	beq.n	2a214 <strtoul+0xea>
   2a156:	2a10      	cmp	r2, #16
   2a158:	d109      	bne.n	2a16e <strtoul+0x44>
   2a15a:	2b30      	cmp	r3, #48	; 0x30
   2a15c:	d107      	bne.n	2a16e <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a15e:	7823      	ldrb	r3, [r4, #0]
   2a160:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a164:	2b58      	cmp	r3, #88	; 0x58
   2a166:	d150      	bne.n	2a20a <strtoul+0xe0>
		c = s[1];
   2a168:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   2a16a:	2210      	movs	r2, #16
		s += 2;
   2a16c:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2a16e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2a172:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2a174:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2a178:	fb02 fe01 	mul.w	lr, r2, r1
   2a17c:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   2a180:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2a182:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2a186:	2d09      	cmp	r5, #9
   2a188:	d816      	bhi.n	2a1b8 <strtoul+0x8e>
			c -= '0';
   2a18a:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2a18c:	429a      	cmp	r2, r3
   2a18e:	dd23      	ble.n	2a1d8 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2a190:	2e00      	cmp	r6, #0
   2a192:	db1e      	blt.n	2a1d2 <strtoul+0xa8>
   2a194:	4288      	cmp	r0, r1
   2a196:	d81c      	bhi.n	2a1d2 <strtoul+0xa8>
   2a198:	d101      	bne.n	2a19e <strtoul+0x74>
   2a19a:	4573      	cmp	r3, lr
   2a19c:	dc19      	bgt.n	2a1d2 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2a19e:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2a1a2:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   2a1a4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2a1a8:	e7eb      	b.n	2a182 <strtoul+0x58>
	} else if (c == '+') {
   2a1aa:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2a1ac:	bf04      	itt	eq
   2a1ae:	784b      	ldrbeq	r3, [r1, #1]
   2a1b0:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2a1b2:	f04f 0c00 	mov.w	ip, #0
   2a1b6:	e7cc      	b.n	2a152 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2a1b8:	f043 0520 	orr.w	r5, r3, #32
   2a1bc:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2a1be:	2d19      	cmp	r5, #25
   2a1c0:	d80a      	bhi.n	2a1d8 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2a1c2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2a1c6:	2d1a      	cmp	r5, #26
   2a1c8:	bf34      	ite	cc
   2a1ca:	2537      	movcc	r5, #55	; 0x37
   2a1cc:	2557      	movcs	r5, #87	; 0x57
   2a1ce:	1b5b      	subs	r3, r3, r5
   2a1d0:	e7dc      	b.n	2a18c <strtoul+0x62>
			any = -1;
   2a1d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a1d6:	e7e5      	b.n	2a1a4 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   2a1d8:	2e00      	cmp	r6, #0
   2a1da:	da0a      	bge.n	2a1f2 <strtoul+0xc8>
   2a1dc:	f7fa fd46 	bl	24c6c <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2a1e0:	2322      	movs	r3, #34	; 0x22
   2a1e2:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2a1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2a1e8:	f1b8 0f00 	cmp.w	r8, #0
   2a1ec:	d109      	bne.n	2a202 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2a1f2:	f1bc 0f00 	cmp.w	ip, #0
   2a1f6:	d000      	beq.n	2a1fa <strtoul+0xd0>
		acc = -acc;
   2a1f8:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2a1fa:	f1b8 0f00 	cmp.w	r8, #0
   2a1fe:	d0f6      	beq.n	2a1ee <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   2a200:	b106      	cbz	r6, 2a204 <strtoul+0xda>
   2a202:	1e67      	subs	r7, r4, #1
   2a204:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   2a208:	e7f1      	b.n	2a1ee <strtoul+0xc4>
	if (base == 0) {
   2a20a:	2330      	movs	r3, #48	; 0x30
   2a20c:	2a00      	cmp	r2, #0
   2a20e:	d1ae      	bne.n	2a16e <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   2a210:	2208      	movs	r2, #8
   2a212:	e7ac      	b.n	2a16e <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   2a214:	2b30      	cmp	r3, #48	; 0x30
   2a216:	d0a2      	beq.n	2a15e <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   2a218:	220a      	movs	r2, #10
   2a21a:	e7a8      	b.n	2a16e <strtoul+0x44>

0002a21c <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   2a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   2a220:	f891 8000 	ldrb.w	r8, [r1]
{
   2a224:	4605      	mov	r5, r0
	if (c != 0) {
   2a226:	f1b8 0f00 	cmp.w	r8, #0
   2a22a:	d010      	beq.n	2a24e <strstr+0x32>
	c = *find++;
   2a22c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   2a22e:	4620      	mov	r0, r4
   2a230:	f000 f83e 	bl	2a2b0 <strlen>
   2a234:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   2a236:	462e      	mov	r6, r5
   2a238:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   2a23c:	b163      	cbz	r3, 2a258 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   2a23e:	4598      	cmp	r8, r3
   2a240:	d108      	bne.n	2a254 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   2a242:	463a      	mov	r2, r7
   2a244:	4621      	mov	r1, r4
   2a246:	4630      	mov	r0, r6
   2a248:	f000 f84e 	bl	2a2e8 <strncmp>
   2a24c:	b910      	cbnz	r0, 2a254 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   2a24e:	4628      	mov	r0, r5
   2a250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   2a254:	4635      	mov	r5, r6
   2a256:	e7ee      	b.n	2a236 <strstr+0x1a>
					return NULL;
   2a258:	461d      	mov	r5, r3
   2a25a:	e7f8      	b.n	2a24e <strstr+0x32>

0002a25c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2a25c:	3901      	subs	r1, #1
   2a25e:	4603      	mov	r3, r0
   2a260:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2a264:	b90a      	cbnz	r2, 2a26a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2a266:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2a268:	4770      	bx	lr
		*d = *s;
   2a26a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2a26e:	e7f7      	b.n	2a260 <strcpy+0x4>

0002a270 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   2a270:	b570      	push	{r4, r5, r6, lr}
   2a272:	4605      	mov	r5, r0
   2a274:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2a276:	b142      	cbz	r2, 2a28a <strncpy+0x1a>
   2a278:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   2a27c:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   2a27e:	b92c      	cbnz	r4, 2a28c <strncpy+0x1c>
   2a280:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   2a282:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   2a286:	429a      	cmp	r2, r3
   2a288:	d1fb      	bne.n	2a282 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   2a28a:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   2a28c:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   2a290:	4632      	mov	r2, r6
   2a292:	e7ef      	b.n	2a274 <strncpy+0x4>

0002a294 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   2a294:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   2a296:	4603      	mov	r3, r0
   2a298:	781a      	ldrb	r2, [r3, #0]
   2a29a:	428a      	cmp	r2, r1
   2a29c:	4618      	mov	r0, r3
   2a29e:	f103 0301 	add.w	r3, r3, #1
   2a2a2:	d004      	beq.n	2a2ae <strchr+0x1a>
   2a2a4:	2a00      	cmp	r2, #0
   2a2a6:	d1f7      	bne.n	2a298 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   2a2a8:	2900      	cmp	r1, #0
   2a2aa:	bf18      	it	ne
   2a2ac:	2000      	movne	r0, #0
}
   2a2ae:	4770      	bx	lr

0002a2b0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2a2b0:	4603      	mov	r3, r0
	size_t n = 0;
   2a2b2:	2000      	movs	r0, #0

	while (*s != '\0') {
   2a2b4:	5c1a      	ldrb	r2, [r3, r0]
   2a2b6:	b902      	cbnz	r2, 2a2ba <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2a2b8:	4770      	bx	lr
		n++;
   2a2ba:	3001      	adds	r0, #1
   2a2bc:	e7fa      	b.n	2a2b4 <strlen+0x4>

0002a2be <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2a2be:	4603      	mov	r3, r0
	size_t n = 0;
   2a2c0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2a2c2:	5c1a      	ldrb	r2, [r3, r0]
   2a2c4:	b10a      	cbz	r2, 2a2ca <strnlen+0xc>
   2a2c6:	4288      	cmp	r0, r1
   2a2c8:	d100      	bne.n	2a2cc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2a2ca:	4770      	bx	lr
		n++;
   2a2cc:	3001      	adds	r0, #1
   2a2ce:	e7f8      	b.n	2a2c2 <strnlen+0x4>

0002a2d0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2a2d0:	1e43      	subs	r3, r0, #1
   2a2d2:	3901      	subs	r1, #1
   2a2d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a2d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2a2dc:	4282      	cmp	r2, r0
   2a2de:	d101      	bne.n	2a2e4 <strcmp+0x14>
   2a2e0:	2a00      	cmp	r2, #0
   2a2e2:	d1f7      	bne.n	2a2d4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2a2e4:	1a10      	subs	r0, r2, r0
   2a2e6:	4770      	bx	lr

0002a2e8 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2a2e8:	b510      	push	{r4, lr}
   2a2ea:	3901      	subs	r1, #1
   2a2ec:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2a2ee:	4282      	cmp	r2, r0
   2a2f0:	d009      	beq.n	2a306 <strncmp+0x1e>
   2a2f2:	7803      	ldrb	r3, [r0, #0]
   2a2f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2a2f8:	42a3      	cmp	r3, r4
   2a2fa:	d100      	bne.n	2a2fe <strncmp+0x16>
   2a2fc:	b90b      	cbnz	r3, 2a302 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2a2fe:	1b18      	subs	r0, r3, r4
   2a300:	e002      	b.n	2a308 <strncmp+0x20>
		s1++;
   2a302:	3001      	adds	r0, #1
		n--;
   2a304:	e7f3      	b.n	2a2ee <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   2a306:	2000      	movs	r0, #0
}
   2a308:	bd10      	pop	{r4, pc}

0002a30a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2a30a:	b510      	push	{r4, lr}
   2a30c:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2a30e:	b15a      	cbz	r2, 2a328 <memcmp+0x1e>
   2a310:	3901      	subs	r1, #1
   2a312:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2a314:	f813 0b01 	ldrb.w	r0, [r3], #1
   2a318:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2a31c:	42a3      	cmp	r3, r4
   2a31e:	d001      	beq.n	2a324 <memcmp+0x1a>
   2a320:	4290      	cmp	r0, r2
   2a322:	d0f7      	beq.n	2a314 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2a324:	1a80      	subs	r0, r0, r2
}
   2a326:	bd10      	pop	{r4, pc}
		return 0;
   2a328:	4610      	mov	r0, r2
   2a32a:	e7fc      	b.n	2a326 <memcmp+0x1c>

0002a32c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2a32c:	1a43      	subs	r3, r0, r1
   2a32e:	4293      	cmp	r3, r2
{
   2a330:	b510      	push	{r4, lr}
   2a332:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2a336:	d308      	bcc.n	2a34a <memmove+0x1e>
   2a338:	3901      	subs	r1, #1
	char *dest = d;
   2a33a:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2a33c:	429a      	cmp	r2, r3
   2a33e:	d007      	beq.n	2a350 <memmove+0x24>
			*dest = *src;
   2a340:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2a344:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2a348:	e7f8      	b.n	2a33c <memmove+0x10>
   2a34a:	440a      	add	r2, r1
		while (n > 0) {
   2a34c:	428a      	cmp	r2, r1
   2a34e:	d100      	bne.n	2a352 <memmove+0x26>
		}
	}

	return d;
}
   2a350:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   2a352:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2a356:	f803 4d01 	strb.w	r4, [r3, #-1]!
   2a35a:	e7f7      	b.n	2a34c <memmove+0x20>

0002a35c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2a35c:	b510      	push	{r4, lr}
   2a35e:	1e43      	subs	r3, r0, #1
   2a360:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2a362:	4291      	cmp	r1, r2
   2a364:	d100      	bne.n	2a368 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2a366:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2a368:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a36c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2a370:	e7f7      	b.n	2a362 <memcpy+0x6>

0002a372 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2a372:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2a374:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2a376:	4603      	mov	r3, r0
	while (n > 0) {
   2a378:	4293      	cmp	r3, r2
   2a37a:	d100      	bne.n	2a37e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2a37c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2a37e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2a382:	e7f9      	b.n	2a378 <memset+0x6>

0002a384 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2a384:	684b      	ldr	r3, [r1, #4]
   2a386:	2b01      	cmp	r3, #1
   2a388:	dd07      	ble.n	2a39a <sprintf_out+0x16>
		*(p->ptr) = c;
   2a38a:	680b      	ldr	r3, [r1, #0]
   2a38c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2a38e:	680b      	ldr	r3, [r1, #0]
   2a390:	3301      	adds	r3, #1
   2a392:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2a394:	684b      	ldr	r3, [r1, #4]
   2a396:	3b01      	subs	r3, #1
   2a398:	604b      	str	r3, [r1, #4]
}
   2a39a:	2000      	movs	r0, #0
   2a39c:	4770      	bx	lr

0002a39e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2a39e:	b084      	sub	sp, #16
   2a3a0:	ab04      	add	r3, sp, #16
   2a3a2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2a3a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2a3aa:	2b06      	cmp	r3, #6
   2a3ac:	d108      	bne.n	2a3c0 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2a3ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a3b2:	2201      	movs	r2, #1
   2a3b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a3b8:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a3bc:	bf20      	wfe
    while (true)
   2a3be:	e7fd      	b.n	2a3bc <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2a3c0:	b004      	add	sp, #16
   2a3c2:	4770      	bx	lr

0002a3c4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2a3c4:	b084      	sub	sp, #16
   2a3c6:	ab04      	add	r3, sp, #16
   2a3c8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2a3cc:	2300      	movs	r3, #0
   2a3ce:	f383 8811 	msr	BASEPRI, r3
   2a3d2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a3d6:	b004      	add	sp, #16
   2a3d8:	4770      	bx	lr

0002a3da <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2a3da:	b530      	push	{r4, r5, lr}
   2a3dc:	b085      	sub	sp, #20
   2a3de:	4604      	mov	r4, r0
   2a3e0:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2a3e2:	4668      	mov	r0, sp
   2a3e4:	2203      	movs	r2, #3
   2a3e6:	f7ff ffb9 	bl	2a35c <memcpy>
	(void)memset(res + 3, 0, 13);
   2a3ea:	220d      	movs	r2, #13
   2a3ec:	2100      	movs	r1, #0
   2a3ee:	f10d 0003 	add.w	r0, sp, #3
   2a3f2:	f7ff ffbe 	bl	2a372 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2a3f6:	4620      	mov	r0, r4
   2a3f8:	466a      	mov	r2, sp
   2a3fa:	4669      	mov	r1, sp
   2a3fc:	f7ed feda 	bl	181b4 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2a400:	4604      	mov	r4, r0
   2a402:	b920      	cbnz	r0, 2a40e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2a404:	2203      	movs	r2, #3
   2a406:	4669      	mov	r1, sp
   2a408:	4628      	mov	r0, r5
   2a40a:	f7ff ffa7 	bl	2a35c <memcpy>

	return 0;
}
   2a40e:	4620      	mov	r0, r4
   2a410:	b005      	add	sp, #20
   2a412:	bd30      	pop	{r4, r5, pc}

0002a414 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2a414:	b513      	push	{r0, r1, r4, lr}
   2a416:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2a418:	aa01      	add	r2, sp, #4
   2a41a:	3103      	adds	r1, #3
   2a41c:	f7ff ffdd 	bl	2a3da <ah>
	if (err) {
   2a420:	b948      	cbnz	r0, 2a436 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2a422:	2203      	movs	r2, #3
   2a424:	a901      	add	r1, sp, #4
   2a426:	4620      	mov	r0, r4
   2a428:	f7ff ff6f 	bl	2a30a <memcmp>
   2a42c:	fab0 f080 	clz	r0, r0
   2a430:	0940      	lsrs	r0, r0, #5
}
   2a432:	b002      	add	sp, #8
   2a434:	bd10      	pop	{r4, pc}
		return false;
   2a436:	2000      	movs	r0, #0
   2a438:	e7fb      	b.n	2a432 <bt_rpa_irk_matches+0x1e>

0002a43a <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2a43a:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2a43c:	1cce      	adds	r6, r1, #3
{
   2a43e:	4605      	mov	r5, r0
   2a440:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2a442:	4630      	mov	r0, r6
   2a444:	2103      	movs	r1, #3
   2a446:	f7ed feb3 	bl	181b0 <bt_rand>
	if (err) {
   2a44a:	b960      	cbnz	r0, 2a466 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2a44c:	7963      	ldrb	r3, [r4, #5]
   2a44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a456:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2a458:	4622      	mov	r2, r4
   2a45a:	4631      	mov	r1, r6
   2a45c:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2a45e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2a462:	f7ff bfba 	b.w	2a3da <ah>
}
   2a466:	bd70      	pop	{r4, r5, r6, pc}

0002a468 <send_cmd_status>:
{
   2a468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2a46c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2a470:	4606      	mov	r6, r0
   2a472:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2a474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a478:	2100      	movs	r1, #0
   2a47a:	200f      	movs	r0, #15
   2a47c:	f7e2 f8a6 	bl	c5cc <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2a480:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   2a482:	f100 0808 	add.w	r8, r0, #8
   2a486:	4604      	mov	r4, r0
   2a488:	7507      	strb	r7, [r0, #20]
   2a48a:	2102      	movs	r1, #2
   2a48c:	4640      	mov	r0, r8
   2a48e:	f002 face 	bl	2ca2e <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2a492:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   2a494:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2a496:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2a498:	7041      	strb	r1, [r0, #1]
   2a49a:	4640      	mov	r0, r8
   2a49c:	f002 fac7 	bl	2ca2e <net_buf_simple_add>
	evt->ncmd = 1U;
   2a4a0:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   2a4a2:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   2a4a4:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   2a4a6:	4620      	mov	r0, r4
}
   2a4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   2a4ac:	f7e3 bb76 	b.w	db9c <bt_recv_prio>

0002a4b0 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2a4b0:	f101 0320 	add.w	r3, r1, #32
   2a4b4:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2a4b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2a4ba:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2a4be:	428b      	cmp	r3, r1
   2a4c0:	d1f9      	bne.n	2a4b6 <sys_memcpy_swap.constprop.0+0x6>
}
   2a4c2:	4770      	bx	lr

0002a4c4 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   2a4c4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2a4c8:	f043 0306 	orr.w	r3, r3, #6
   2a4cc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   2a4d0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   2a4d4:	f043 0304 	orr.w	r3, r3, #4
   2a4d8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   2a4dc:	4770      	bx	lr

0002a4de <default_CSPRNG>:
{
   2a4de:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2a4e0:	f7ed fe66 	bl	181b0 <bt_rand>
}
   2a4e4:	fab0 f080 	clz	r0, r0
   2a4e8:	0940      	lsrs	r0, r0, #5
   2a4ea:	bd08      	pop	{r3, pc}

0002a4ec <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2a4ec:	b510      	push	{r4, lr}
   2a4ee:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2a4f0:	7801      	ldrb	r1, [r0, #0]
   2a4f2:	7822      	ldrb	r2, [r4, #0]
   2a4f4:	428a      	cmp	r2, r1
{
   2a4f6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2a4f8:	d00f      	beq.n	2a51a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2a4fa:	4669      	mov	r1, sp
   2a4fc:	f7e2 f806 	bl	c50c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2a500:	a905      	add	r1, sp, #20
   2a502:	4620      	mov	r0, r4
   2a504:	f7e2 f802 	bl	c50c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2a508:	2210      	movs	r2, #16
   2a50a:	f10d 0115 	add.w	r1, sp, #21
   2a50e:	f10d 0001 	add.w	r0, sp, #1
   2a512:	f7ff fefa 	bl	2a30a <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2a516:	b00a      	add	sp, #40	; 0x28
   2a518:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2a51a:	2a01      	cmp	r2, #1
   2a51c:	d006      	beq.n	2a52c <bt_uuid_cmp+0x40>
   2a51e:	2a02      	cmp	r2, #2
   2a520:	d007      	beq.n	2a532 <bt_uuid_cmp+0x46>
   2a522:	b972      	cbnz	r2, 2a542 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2a524:	8840      	ldrh	r0, [r0, #2]
   2a526:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2a528:	1ac0      	subs	r0, r0, r3
   2a52a:	e7f4      	b.n	2a516 <bt_uuid_cmp+0x2a>
   2a52c:	6840      	ldr	r0, [r0, #4]
   2a52e:	6863      	ldr	r3, [r4, #4]
   2a530:	e7fa      	b.n	2a528 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a532:	2210      	movs	r2, #16
   2a534:	1c61      	adds	r1, r4, #1
   2a536:	3001      	adds	r0, #1
}
   2a538:	b00a      	add	sp, #40	; 0x28
   2a53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a53e:	f7ff bee4 	b.w	2a30a <memcmp>
	switch (u1->type) {
   2a542:	f06f 0015 	mvn.w	r0, #21
   2a546:	e7e6      	b.n	2a516 <bt_uuid_cmp+0x2a>

0002a548 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2a548:	2a04      	cmp	r2, #4
{
   2a54a:	b510      	push	{r4, lr}
	switch (data_len) {
   2a54c:	d00a      	beq.n	2a564 <bt_uuid_create+0x1c>
   2a54e:	2a10      	cmp	r2, #16
   2a550:	d00d      	beq.n	2a56e <bt_uuid_create+0x26>
   2a552:	2a02      	cmp	r2, #2
   2a554:	f04f 0300 	mov.w	r3, #0
   2a558:	d10f      	bne.n	2a57a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2a55a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2a55c:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2a55e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2a560:	2001      	movs	r0, #1
}
   2a562:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2a564:	2301      	movs	r3, #1
   2a566:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2a568:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2a56a:	6042      	str	r2, [r0, #4]
		break;
   2a56c:	e7f8      	b.n	2a560 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2a56e:	2302      	movs	r3, #2
   2a570:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2a574:	f7ff fef2 	bl	2a35c <memcpy>
		break;
   2a578:	e7f2      	b.n	2a560 <bt_uuid_create+0x18>
	switch (data_len) {
   2a57a:	4618      	mov	r0, r3
   2a57c:	e7f1      	b.n	2a562 <bt_uuid_create+0x1a>

0002a57e <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2a57e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2a580:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2a582:	2106      	movs	r1, #6
{
   2a584:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2a586:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2a58a:	f7ed fe11 	bl	181b0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2a58e:	b918      	cbnz	r0, 2a598 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2a590:	79a3      	ldrb	r3, [r4, #6]
   2a592:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2a596:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2a598:	bd10      	pop	{r4, pc}

0002a59a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2a59a:	280f      	cmp	r0, #15
   2a59c:	d806      	bhi.n	2a5ac <bt_hci_evt_get_flags+0x12>
   2a59e:	280d      	cmp	r0, #13
   2a5a0:	d80b      	bhi.n	2a5ba <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2a5a2:	2805      	cmp	r0, #5
   2a5a4:	bf14      	ite	ne
   2a5a6:	2002      	movne	r0, #2
   2a5a8:	2003      	moveq	r0, #3
   2a5aa:	4770      	bx	lr
	switch (evt) {
   2a5ac:	2813      	cmp	r0, #19
   2a5ae:	d004      	beq.n	2a5ba <bt_hci_evt_get_flags+0x20>
   2a5b0:	281a      	cmp	r0, #26
   2a5b2:	bf14      	ite	ne
   2a5b4:	2002      	movne	r0, #2
   2a5b6:	2001      	moveq	r0, #1
   2a5b8:	4770      	bx	lr
   2a5ba:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2a5bc:	4770      	bx	lr

0002a5be <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2a5be:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2a5c2:	b193      	cbz	r3, 2a5ea <update_sec_level+0x2c>
   2a5c4:	7b5a      	ldrb	r2, [r3, #13]
   2a5c6:	07d1      	lsls	r1, r2, #31
   2a5c8:	d50f      	bpl.n	2a5ea <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2a5ca:	06d2      	lsls	r2, r2, #27
   2a5cc:	d50b      	bpl.n	2a5e6 <update_sec_level+0x28>
   2a5ce:	7b1b      	ldrb	r3, [r3, #12]
   2a5d0:	2b10      	cmp	r3, #16
   2a5d2:	d108      	bne.n	2a5e6 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2a5d4:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2a5d6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2a5d8:	7a82      	ldrb	r2, [r0, #10]
   2a5da:	7a40      	ldrb	r0, [r0, #9]
}
   2a5dc:	4282      	cmp	r2, r0
   2a5de:	bf8c      	ite	hi
   2a5e0:	2000      	movhi	r0, #0
   2a5e2:	2001      	movls	r0, #1
   2a5e4:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2a5e6:	2303      	movs	r3, #3
   2a5e8:	e7f5      	b.n	2a5d6 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2a5ea:	2302      	movs	r3, #2
   2a5ec:	e7f3      	b.n	2a5d6 <update_sec_level+0x18>

0002a5ee <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2a5ee:	2207      	movs	r2, #7
   2a5f0:	f7ff beb4 	b.w	2a35c <memcpy>

0002a5f4 <atomic_or>:
{
   2a5f4:	4603      	mov	r3, r0
}
   2a5f6:	f3bf 8f5b 	dmb	ish
   2a5fa:	e853 0f00 	ldrex	r0, [r3]
   2a5fe:	ea40 0201 	orr.w	r2, r0, r1
   2a602:	e843 2c00 	strex	ip, r2, [r3]
   2a606:	f1bc 0f00 	cmp.w	ip, #0
   2a60a:	d1f6      	bne.n	2a5fa <atomic_or+0x6>
   2a60c:	f3bf 8f5b 	dmb	ish
   2a610:	4770      	bx	lr

0002a612 <z_log_msg2_static_create.constprop.0>:
   2a612:	2300      	movs	r3, #0
   2a614:	f7fd b994 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002a618 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2a618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a61a:	ab0a      	add	r3, sp, #40	; 0x28
   2a61c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2a61e:	9302      	str	r3, [sp, #8]
   2a620:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a622:	9301      	str	r3, [sp, #4]
   2a624:	2300      	movs	r3, #0
   2a626:	9300      	str	r3, [sp, #0]
   2a628:	4618      	mov	r0, r3
   2a62a:	f7dc ff0b 	bl	7444 <z_impl_z_log_msg2_runtime_vcreate>
}
   2a62e:	b007      	add	sp, #28
   2a630:	f85d fb04 	ldr.w	pc, [sp], #4

0002a634 <sys_put_le64>:
	dst[1] = val >> 8;
   2a634:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2a638:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2a63a:	0e00      	lsrs	r0, r0, #24
   2a63c:	7053      	strb	r3, [r2, #1]
   2a63e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2a640:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2a642:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2a646:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2a648:	7093      	strb	r3, [r2, #2]
   2a64a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2a64c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2a64e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2a650:	71d1      	strb	r1, [r2, #7]
}
   2a652:	4770      	bx	lr

0002a654 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   2a654:	f7e2 be0a 	b.w	d26c <bt_le_create_conn_legacy>

0002a658 <bt_hci_disconnect>:
{
   2a658:	b570      	push	{r4, r5, r6, lr}
   2a65a:	4606      	mov	r6, r0
   2a65c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2a65e:	f240 4006 	movw	r0, #1030	; 0x406
   2a662:	2103      	movs	r1, #3
   2a664:	f7e2 fbe2 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
   2a668:	4604      	mov	r4, r0
   2a66a:	b168      	cbz	r0, 2a688 <bt_hci_disconnect+0x30>
   2a66c:	2103      	movs	r1, #3
   2a66e:	3008      	adds	r0, #8
   2a670:	f002 f9dd 	bl	2ca2e <net_buf_simple_add>
	disconn->reason = reason;
   2a674:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2a676:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a678:	4621      	mov	r1, r4
   2a67a:	2200      	movs	r2, #0
}
   2a67c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a680:	f240 4006 	movw	r0, #1030	; 0x406
   2a684:	f7e2 bd42 	b.w	d10c <bt_hci_cmd_send_sync>
}
   2a688:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a68c:	bd70      	pop	{r4, r5, r6, pc}

0002a68e <bt_le_set_data_len>:
{
   2a68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a690:	4607      	mov	r7, r0
   2a692:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2a694:	f242 0022 	movw	r0, #8226	; 0x2022
   2a698:	2106      	movs	r1, #6
{
   2a69a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2a69c:	f7e2 fbc6 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
   2a6a0:	4604      	mov	r4, r0
   2a6a2:	b170      	cbz	r0, 2a6c2 <bt_le_set_data_len+0x34>
   2a6a4:	2106      	movs	r1, #6
   2a6a6:	3008      	adds	r0, #8
   2a6a8:	f002 f9c1 	bl	2ca2e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a6ac:	883b      	ldrh	r3, [r7, #0]
   2a6ae:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2a6b0:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2a6b2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2a6b4:	4621      	mov	r1, r4
   2a6b6:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2a6ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2a6be:	f7e2 bbef 	b.w	cea0 <bt_hci_cmd_send>
}
   2a6c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a6c8 <bt_le_set_phy>:
{
   2a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a6cc:	4680      	mov	r8, r0
   2a6ce:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2a6d0:	f242 0032 	movw	r0, #8242	; 0x2032
   2a6d4:	2107      	movs	r1, #7
{
   2a6d6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2a6da:	4616      	mov	r6, r2
   2a6dc:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2a6de:	f7e2 fba5 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
   2a6e2:	4604      	mov	r4, r0
   2a6e4:	b190      	cbz	r0, 2a70c <bt_le_set_phy+0x44>
   2a6e6:	2107      	movs	r1, #7
   2a6e8:	3008      	adds	r0, #8
   2a6ea:	f002 f9a0 	bl	2ca2e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a6ee:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2a6f2:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2a6f4:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2a6f6:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a6f8:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2a6fa:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2a6fe:	4621      	mov	r1, r4
   2a700:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2a704:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2a708:	f7e2 bbca 	b.w	cea0 <bt_hci_cmd_send>
}
   2a70c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a714 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2a714:	6880      	ldr	r0, [r0, #8]
   2a716:	f7e2 bf1f 	b.w	d558 <bt_hci_le_enh_conn_complete>

0002a71a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2a71a:	8803      	ldrh	r3, [r0, #0]
   2a71c:	8842      	ldrh	r2, [r0, #2]
   2a71e:	4293      	cmp	r3, r2
{
   2a720:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2a722:	d819      	bhi.n	2a758 <bt_le_conn_params_valid+0x3e>
   2a724:	2b05      	cmp	r3, #5
   2a726:	d917      	bls.n	2a758 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2a728:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2a72c:	d814      	bhi.n	2a758 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2a72e:	8883      	ldrh	r3, [r0, #4]
   2a730:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2a734:	d210      	bcs.n	2a758 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a736:	88c0      	ldrh	r0, [r0, #6]
   2a738:	f1a0 010a 	sub.w	r1, r0, #10
   2a73c:	b289      	uxth	r1, r1
   2a73e:	f640 4476 	movw	r4, #3190	; 0xc76
   2a742:	42a1      	cmp	r1, r4
   2a744:	d808      	bhi.n	2a758 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2a746:	3301      	adds	r3, #1
   2a748:	b29b      	uxth	r3, r3
   2a74a:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a74c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2a750:	bf34      	ite	cc
   2a752:	2001      	movcc	r0, #1
   2a754:	2000      	movcs	r0, #0
}
   2a756:	bd10      	pop	{r4, pc}
		return false;
   2a758:	2000      	movs	r0, #0
   2a75a:	e7fc      	b.n	2a756 <bt_le_conn_params_valid+0x3c>

0002a75c <bt_send>:
		return bt_hci_ecc_send(buf);
   2a75c:	f7e1 be44 	b.w	c3e8 <bt_hci_ecc_send>

0002a760 <bt_addr_le_is_bonded>:
{
   2a760:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2a762:	f7ea facd 	bl	14d00 <bt_keys_find_addr>
		return keys && keys->keys;
   2a766:	b118      	cbz	r0, 2a770 <bt_addr_le_is_bonded+0x10>
   2a768:	89c0      	ldrh	r0, [r0, #14]
   2a76a:	3800      	subs	r0, #0
   2a76c:	bf18      	it	ne
   2a76e:	2001      	movne	r0, #1
}
   2a770:	bd08      	pop	{r3, pc}

0002a772 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   2a772:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2a774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2a778:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2a77a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a77e:	2100      	movs	r1, #0
{
   2a780:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2a782:	f7e1 ff23 	bl	c5cc <bt_buf_get_evt>
   2a786:	2102      	movs	r1, #2
   2a788:	4604      	mov	r4, r0
   2a78a:	3008      	adds	r0, #8
   2a78c:	f002 f94f 	bl	2ca2e <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   2a790:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   2a792:	7045      	strb	r5, [r0, #1]

	return buf;
}
   2a794:	4620      	mov	r0, r4
   2a796:	bd70      	pop	{r4, r5, r6, pc}

0002a798 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2a798:	3103      	adds	r1, #3
{
   2a79a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2a79c:	b2c9      	uxtb	r1, r1
{
   2a79e:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2a7a0:	200e      	movs	r0, #14
   2a7a2:	f7ff ffe6 	bl	2a772 <bt_hci_evt_create>
   2a7a6:	2103      	movs	r1, #3
   2a7a8:	4604      	mov	r4, r0
   2a7aa:	3008      	adds	r0, #8
   2a7ac:	f002 f93f 	bl	2ca2e <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   2a7b0:	2301      	movs	r3, #1
   2a7b2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   2a7b4:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   2a7b8:	4620      	mov	r0, r4
   2a7ba:	bd38      	pop	{r3, r4, r5, pc}

0002a7bc <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   2a7bc:	b570      	push	{r4, r5, r6, lr}
   2a7be:	4605      	mov	r5, r0
   2a7c0:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2a7c2:	200f      	movs	r0, #15
   2a7c4:	2104      	movs	r1, #4
   2a7c6:	f7ff ffd4 	bl	2a772 <bt_hci_evt_create>
   2a7ca:	2104      	movs	r1, #4
   2a7cc:	4604      	mov	r4, r0
   2a7ce:	3008      	adds	r0, #8
   2a7d0:	f002 f92d 	bl	2ca2e <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   2a7d4:	2201      	movs	r2, #1
	cs->status = status;
   2a7d6:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   2a7d8:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   2a7da:	8045      	strh	r5, [r0, #2]

	return buf;
}
   2a7dc:	4620      	mov	r0, r4
   2a7de:	bd70      	pop	{r4, r5, r6, pc}

0002a7e0 <bt_addr_le_copy>:
   2a7e0:	2207      	movs	r2, #7
   2a7e2:	f7ff bdbb 	b.w	2a35c <memcpy>

0002a7e6 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2a7e6:	7a03      	ldrb	r3, [r0, #8]
   2a7e8:	075b      	lsls	r3, r3, #29
{
   2a7ea:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2a7ec:	d505      	bpl.n	2a7fa <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2a7ee:	4601      	mov	r1, r0
   2a7f0:	322a      	adds	r2, #42	; 0x2a
   2a7f2:	f811 0b01 	ldrb.w	r0, [r1], #1
   2a7f6:	f7e3 bb73 	b.w	dee0 <hci_id_add>
}
   2a7fa:	4770      	bx	lr

0002a7fc <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2a7fc:	2300      	movs	r3, #0
   2a7fe:	f7fd b89f 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002a802 <addr_res_enable>:
{
   2a802:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2a804:	2101      	movs	r1, #1
{
   2a806:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2a808:	f242 002d 	movw	r0, #8237	; 0x202d
   2a80c:	f7e2 fb0e 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
   2a810:	4604      	mov	r4, r0
   2a812:	b158      	cbz	r0, 2a82c <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2a814:	4629      	mov	r1, r5
   2a816:	3008      	adds	r0, #8
   2a818:	f002 f918 	bl	2ca4c <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2a81c:	4621      	mov	r1, r4
   2a81e:	2200      	movs	r2, #0
}
   2a820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2a824:	f242 002d 	movw	r0, #8237	; 0x202d
   2a828:	f7e2 bc70 	b.w	d10c <bt_hci_cmd_send_sync>
}
   2a82c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a830:	bd38      	pop	{r3, r4, r5, pc}

0002a832 <bt_lookup_id_addr>:
{
   2a832:	b510      	push	{r4, lr}
   2a834:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2a836:	f7ea fa2b 	bl	14c90 <bt_keys_find_irk>
		if (keys) {
   2a83a:	b100      	cbz	r0, 2a83e <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2a83c:	1c44      	adds	r4, r0, #1
}
   2a83e:	4620      	mov	r0, r4
   2a840:	bd10      	pop	{r4, pc}

0002a842 <rpa_timeout>:
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2a842:	2100      	movs	r1, #0
{
   2a844:	b508      	push	{r3, lr}
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2a846:	2202      	movs	r2, #2
   2a848:	4608      	mov	r0, r1
   2a84a:	f7e5 f91b 	bl	fa84 <bt_conn_lookup_state_le>
		if (conn) {
   2a84e:	b118      	cbz	r0, 2a858 <rpa_timeout+0x16>
			bt_conn_unref(conn);
   2a850:	f000 f8f3 	bl	2aa3a <bt_conn_unref>
			bt_le_create_conn_cancel();
   2a854:	f7e2 fd6c 	bl	d330 <bt_le_create_conn_cancel>
	le_rpa_invalidate();
   2a858:	f7e3 fb32 	bl	dec0 <le_rpa_invalidate>
   2a85c:	f7e3 fb72 	bl	df44 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   2a860:	0501      	lsls	r1, r0, #20
   2a862:	d503      	bpl.n	2a86c <rpa_timeout+0x2a>
}
   2a864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
   2a868:	f7e3 bd12 	b.w	e290 <le_update_private_addr>
   2a86c:	f7e3 fb6a 	bl	df44 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   2a870:	0682      	lsls	r2, r0, #26
   2a872:	d503      	bpl.n	2a87c <rpa_timeout+0x3a>
   2a874:	f7e3 fb66 	bl	df44 <atomic_get.constprop.0>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2a878:	0603      	lsls	r3, r0, #24
   2a87a:	d4f3      	bmi.n	2a864 <rpa_timeout+0x22>
}
   2a87c:	bd08      	pop	{r3, pc}

0002a87e <bt_id_scan_random_addr_check>:
}
   2a87e:	2001      	movs	r0, #1
   2a880:	4770      	bx	lr

0002a882 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2a882:	7a03      	ldrb	r3, [r0, #8]
   2a884:	07d9      	lsls	r1, r3, #31
   2a886:	d504      	bpl.n	2a892 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2a888:	f023 0301 	bic.w	r3, r3, #1
   2a88c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2a88e:	f7e3 bd47 	b.w	e320 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2a892:	0799      	lsls	r1, r3, #30
   2a894:	d504      	bpl.n	2a8a0 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2a896:	f023 0302 	bic.w	r3, r3, #2
   2a89a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2a89c:	f7e3 bd58 	b.w	e350 <bt_id_del>
}
   2a8a0:	4770      	bx	lr

0002a8a2 <atomic_and>:
{
   2a8a2:	4603      	mov	r3, r0
}
   2a8a4:	f3bf 8f5b 	dmb	ish
   2a8a8:	e853 0f00 	ldrex	r0, [r3]
   2a8ac:	ea00 0201 	and.w	r2, r0, r1
   2a8b0:	e843 2c00 	strex	ip, r2, [r3]
   2a8b4:	f1bc 0f00 	cmp.w	ip, #0
   2a8b8:	d1f6      	bne.n	2a8a8 <atomic_and+0x6>
   2a8ba:	f3bf 8f5b 	dmb	ish
   2a8be:	4770      	bx	lr

0002a8c0 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   2a8c0:	f7e4 b81e 	b.w	e900 <bt_le_scan_set_enable_legacy>

0002a8c4 <atomic_and>:
{
   2a8c4:	4603      	mov	r3, r0
}
   2a8c6:	f3bf 8f5b 	dmb	ish
   2a8ca:	e853 0f00 	ldrex	r0, [r3]
   2a8ce:	ea00 0201 	and.w	r2, r0, r1
   2a8d2:	e843 2c00 	strex	ip, r2, [r3]
   2a8d6:	f1bc 0f00 	cmp.w	ip, #0
   2a8da:	d1f6      	bne.n	2a8ca <atomic_and+0x6>
   2a8dc:	f3bf 8f5b 	dmb	ish
   2a8e0:	4770      	bx	lr

0002a8e2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a8e2:	f3bf 8f5b 	dmb	ish
   2a8e6:	6800      	ldr	r0, [r0, #0]
   2a8e8:	f3bf 8f5b 	dmb	ish
}
   2a8ec:	4770      	bx	lr

0002a8ee <z_log_msg2_static_create.constprop.0>:
   2a8ee:	2300      	movs	r3, #0
   2a8f0:	f7fd b826 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002a8f4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2a8f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a8f6:	ab0a      	add	r3, sp, #40	; 0x28
   2a8f8:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2a8fa:	9302      	str	r3, [sp, #8]
   2a8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a8fe:	9301      	str	r3, [sp, #4]
   2a900:	2300      	movs	r3, #0
   2a902:	9300      	str	r3, [sp, #0]
   2a904:	2202      	movs	r2, #2
   2a906:	4618      	mov	r0, r3
   2a908:	f7dc fd9c 	bl	7444 <z_impl_z_log_msg2_runtime_vcreate>
}
   2a90c:	b007      	add	sp, #28
   2a90e:	f85d fb04 	ldr.w	pc, [sp], #4

0002a912 <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2a912:	f3bf 8f5b 	dmb	ish
   2a916:	e850 3f00 	ldrex	r3, [r0]
   2a91a:	3b01      	subs	r3, #1
   2a91c:	e840 3200 	strex	r2, r3, [r0]
   2a920:	2a00      	cmp	r2, #0
   2a922:	d1f8      	bne.n	2a916 <atomic_dec.isra.0+0x4>
   2a924:	f3bf 8f5b 	dmb	ish
}
   2a928:	4770      	bx	lr

0002a92a <tx_notify>:
{
   2a92a:	b570      	push	{r4, r5, r6, lr}
   2a92c:	4604      	mov	r4, r0
	__asm__ volatile(
   2a92e:	f04f 0220 	mov.w	r2, #32
   2a932:	f3ef 8311 	mrs	r3, BASEPRI
   2a936:	f382 8812 	msr	BASEPRI_MAX, r2
   2a93a:	f3bf 8f6f 	isb	sy
	return list->head;
   2a93e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2a940:	b920      	cbnz	r0, 2a94c <tx_notify+0x22>
	__asm__ volatile(
   2a942:	f383 8811 	msr	BASEPRI, r3
   2a946:	f3bf 8f6f 	isb	sy
}
   2a94a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a94c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   2a94e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a950:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a952:	4288      	cmp	r0, r1
	list->tail = node;
   2a954:	bf08      	it	eq
   2a956:	6262      	streq	r2, [r4, #36]	; 0x24
   2a958:	f383 8811 	msr	BASEPRI, r3
   2a95c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2a960:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2a964:	f7e4 fb9a 	bl	f09c <tx_free>
		cb(conn, user_data);
   2a968:	4631      	mov	r1, r6
   2a96a:	4620      	mov	r0, r4
   2a96c:	47a8      	blx	r5
	while (1) {
   2a96e:	e7de      	b.n	2a92e <tx_notify+0x4>

0002a970 <tx_complete_work>:
	tx_notify(conn);
   2a970:	3828      	subs	r0, #40	; 0x28
   2a972:	f7ff bfda 	b.w	2a92a <tx_notify>

0002a976 <bt_conn_reset_rx_state>:
{
   2a976:	b510      	push	{r4, lr}
   2a978:	4604      	mov	r4, r0
	if (!conn->rx) {
   2a97a:	6900      	ldr	r0, [r0, #16]
   2a97c:	b118      	cbz	r0, 2a986 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2a97e:	f7f6 f953 	bl	20c28 <net_buf_unref>
	conn->rx = NULL;
   2a982:	2300      	movs	r3, #0
   2a984:	6123      	str	r3, [r4, #16]
}
   2a986:	bd10      	pop	{r4, pc}

0002a988 <conn_cleanup>:
{
   2a988:	b570      	push	{r4, r5, r6, lr}
   2a98a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2a98c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   2a990:	2200      	movs	r2, #0
   2a992:	2300      	movs	r3, #0
   2a994:	4630      	mov	r0, r6
   2a996:	f001 ffe7 	bl	2c968 <net_buf_get>
   2a99a:	4605      	mov	r5, r0
   2a99c:	b950      	cbnz	r0, 2a9b4 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2a99e:	4620      	mov	r0, r4
   2a9a0:	f7ff ffe9 	bl	2a976 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a9a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2a9a8:	2200      	movs	r2, #0
}
   2a9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a9ae:	2300      	movs	r3, #0
   2a9b0:	f7fa bfa8 	b.w	25904 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2a9b4:	6968      	ldr	r0, [r5, #20]
   2a9b6:	b108      	cbz	r0, 2a9bc <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   2a9b8:	f7e4 fb70 	bl	f09c <tx_free>
		net_buf_unref(buf);
   2a9bc:	4628      	mov	r0, r5
   2a9be:	f7f6 f933 	bl	20c28 <net_buf_unref>
   2a9c2:	e7e5      	b.n	2a990 <conn_cleanup+0x8>

0002a9c4 <bt_conn_ref>:
{
   2a9c4:	b510      	push	{r4, lr}
   2a9c6:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2a9c8:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   2a9cc:	4610      	mov	r0, r2
   2a9ce:	f7ff ff88 	bl	2a8e2 <atomic_get>
		if (!old) {
   2a9d2:	b180      	cbz	r0, 2a9f6 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a9d4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2a9d8:	1c41      	adds	r1, r0, #1
   2a9da:	e852 4f00 	ldrex	r4, [r2]
   2a9de:	4284      	cmp	r4, r0
   2a9e0:	d104      	bne.n	2a9ec <bt_conn_ref+0x28>
   2a9e2:	e842 1c00 	strex	ip, r1, [r2]
   2a9e6:	f1bc 0f00 	cmp.w	ip, #0
   2a9ea:	d1f6      	bne.n	2a9da <bt_conn_ref+0x16>
   2a9ec:	f3bf 8f5b 	dmb	ish
   2a9f0:	d1ec      	bne.n	2a9cc <bt_conn_ref+0x8>
}
   2a9f2:	4618      	mov	r0, r3
   2a9f4:	bd10      	pop	{r4, pc}
			return NULL;
   2a9f6:	4603      	mov	r3, r0
   2a9f8:	e7fb      	b.n	2a9f2 <bt_conn_ref+0x2e>

0002a9fa <conn_lookup_handle>:
{
   2a9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a9fe:	4606      	mov	r6, r0
   2aa00:	460d      	mov	r5, r1
   2aa02:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2aa04:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2aa06:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2aa0a:	42ac      	cmp	r4, r5
   2aa0c:	d102      	bne.n	2aa14 <conn_lookup_handle+0x1a>
	return NULL;
   2aa0e:	2000      	movs	r0, #0
}
   2aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2aa14:	fb08 6004 	mla	r0, r8, r4, r6
   2aa18:	f7ff ffd4 	bl	2a9c4 <bt_conn_ref>
		if (!conn) {
   2aa1c:	b158      	cbz	r0, 2aa36 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   2aa1e:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2aa20:	2b01      	cmp	r3, #1
   2aa22:	d002      	beq.n	2aa2a <conn_lookup_handle+0x30>
   2aa24:	3b07      	subs	r3, #7
   2aa26:	2b01      	cmp	r3, #1
   2aa28:	d802      	bhi.n	2aa30 <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   2aa2a:	8803      	ldrh	r3, [r0, #0]
   2aa2c:	42bb      	cmp	r3, r7
   2aa2e:	d0ef      	beq.n	2aa10 <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   2aa30:	30b8      	adds	r0, #184	; 0xb8
   2aa32:	f7ff ff6e 	bl	2a912 <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   2aa36:	3401      	adds	r4, #1
   2aa38:	e7e7      	b.n	2aa0a <conn_lookup_handle+0x10>

0002aa3a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2aa3a:	30b8      	adds	r0, #184	; 0xb8
   2aa3c:	f7ff bf69 	b.w	2a912 <atomic_dec.isra.0>

0002aa40 <bt_conn_connected>:
{
   2aa40:	b510      	push	{r4, lr}
   2aa42:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2aa44:	f7e5 fb36 	bl	100b4 <bt_l2cap_connected>
	notify_connected(conn);
   2aa48:	4620      	mov	r0, r4
}
   2aa4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2aa4e:	f7e4 bb2f 	b.w	f0b0 <notify_connected>

0002aa52 <bt_conn_le_start_encryption>:
{
   2aa52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2aa56:	4682      	mov	sl, r0
   2aa58:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2aa5a:	f242 0019 	movw	r0, #8217	; 0x2019
   2aa5e:	211c      	movs	r1, #28
{
   2aa60:	9e08      	ldr	r6, [sp, #32]
   2aa62:	4690      	mov	r8, r2
   2aa64:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2aa66:	f7e2 f9e1 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
   2aa6a:	4605      	mov	r5, r0
   2aa6c:	b340      	cbz	r0, 2aac0 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   2aa6e:	211c      	movs	r1, #28
   2aa70:	3008      	adds	r0, #8
   2aa72:	f001 ffdc 	bl	2ca2e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2aa76:	f8ba 3000 	ldrh.w	r3, [sl]
   2aa7a:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2aa7c:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   2aa7e:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2aa82:	4649      	mov	r1, r9
   2aa84:	f7ff fc6a 	bl	2a35c <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2aa88:	2202      	movs	r2, #2
   2aa8a:	4641      	mov	r1, r8
   2aa8c:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   2aa90:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2aa92:	f7ff fc63 	bl	2a35c <memcpy>
	memcpy(cp->ltk, ltk, len);
   2aa96:	4632      	mov	r2, r6
   2aa98:	4639      	mov	r1, r7
   2aa9a:	4620      	mov	r0, r4
   2aa9c:	f7ff fc5e 	bl	2a35c <memcpy>
	if (len < sizeof(cp->ltk)) {
   2aaa0:	2e0f      	cmp	r6, #15
   2aaa2:	d805      	bhi.n	2aab0 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   2aaa4:	f1c6 0210 	rsb	r2, r6, #16
   2aaa8:	2100      	movs	r1, #0
   2aaaa:	19a0      	adds	r0, r4, r6
   2aaac:	f7ff fc61 	bl	2a372 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2aab0:	4629      	mov	r1, r5
   2aab2:	2200      	movs	r2, #0
}
   2aab4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2aab8:	f242 0019 	movw	r0, #8217	; 0x2019
   2aabc:	f7e2 bb26 	b.w	d10c <bt_hci_cmd_send_sync>
}
   2aac0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2aac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002aac8 <bt_conn_set_security>:
{
   2aac8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2aaca:	7b43      	ldrb	r3, [r0, #13]
   2aacc:	2b07      	cmp	r3, #7
{
   2aace:	4604      	mov	r4, r0
   2aad0:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2aad2:	d124      	bne.n	2ab1e <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2aad4:	7a43      	ldrb	r3, [r0, #9]
   2aad6:	428b      	cmp	r3, r1
   2aad8:	d224      	bcs.n	2ab24 <bt_conn_set_security+0x5c>
   2aada:	7a83      	ldrb	r3, [r0, #10]
   2aadc:	428b      	cmp	r3, r1
   2aade:	d221      	bcs.n	2ab24 <bt_conn_set_security+0x5c>
	if (val) {
   2aae0:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2aae2:	f100 0004 	add.w	r0, r0, #4
   2aae6:	d515      	bpl.n	2ab14 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aae8:	f3bf 8f5b 	dmb	ish
   2aaec:	e850 3f00 	ldrex	r3, [r0]
   2aaf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2aaf4:	e840 3200 	strex	r2, r3, [r0]
   2aaf8:	2a00      	cmp	r2, #0
   2aafa:	d1f7      	bne.n	2aaec <bt_conn_set_security+0x24>
   2aafc:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2ab00:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2ab04:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2ab06:	4620      	mov	r0, r4
   2ab08:	f001 fdd3 	bl	2c6b2 <bt_smp_start_security>
	if (err) {
   2ab0c:	b108      	cbz	r0, 2ab12 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   2ab0e:	7a63      	ldrb	r3, [r4, #9]
   2ab10:	72a3      	strb	r3, [r4, #10]
}
   2ab12:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ab14:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2ab18:	f7ff fed4 	bl	2a8c4 <atomic_and>
   2ab1c:	e7f0      	b.n	2ab00 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   2ab1e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ab22:	e7f6      	b.n	2ab12 <bt_conn_set_security+0x4a>
		return 0;
   2ab24:	2000      	movs	r0, #0
   2ab26:	e7f4      	b.n	2ab12 <bt_conn_set_security+0x4a>

0002ab28 <bt_conn_get_security>:
}
   2ab28:	7a40      	ldrb	r0, [r0, #9]
   2ab2a:	4770      	bx	lr

0002ab2c <bt_conn_is_peer_addr_le>:
{
   2ab2c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2ab2e:	7a03      	ldrb	r3, [r0, #8]
   2ab30:	428b      	cmp	r3, r1
{
   2ab32:	4604      	mov	r4, r0
   2ab34:	4615      	mov	r5, r2
	if (id != conn->id) {
   2ab36:	d115      	bne.n	2ab64 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2ab38:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2ab3c:	2207      	movs	r2, #7
   2ab3e:	4628      	mov	r0, r5
   2ab40:	f7ff fbe3 	bl	2a30a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2ab44:	b180      	cbz	r0, 2ab68 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ab46:	78e3      	ldrb	r3, [r4, #3]
   2ab48:	2207      	movs	r2, #7
   2ab4a:	b943      	cbnz	r3, 2ab5e <bt_conn_is_peer_addr_le+0x32>
   2ab4c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2ab50:	4628      	mov	r0, r5
   2ab52:	f7ff fbda 	bl	2a30a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2ab56:	fab0 f080 	clz	r0, r0
   2ab5a:	0940      	lsrs	r0, r0, #5
}
   2ab5c:	bd38      	pop	{r3, r4, r5, pc}
   2ab5e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2ab62:	e7f5      	b.n	2ab50 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2ab64:	2000      	movs	r0, #0
   2ab66:	e7f9      	b.n	2ab5c <bt_conn_is_peer_addr_le+0x30>
		return true;
   2ab68:	2001      	movs	r0, #1
   2ab6a:	e7f7      	b.n	2ab5c <bt_conn_is_peer_addr_le+0x30>

0002ab6c <bt_conn_get_dst>:
}
   2ab6c:	3088      	adds	r0, #136	; 0x88
   2ab6e:	4770      	bx	lr

0002ab70 <bt_conn_disconnect>:
{
   2ab70:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2ab72:	7883      	ldrb	r3, [r0, #2]
   2ab74:	2b01      	cmp	r3, #1
{
   2ab76:	4604      	mov	r4, r0
   2ab78:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2ab7a:	d103      	bne.n	2ab84 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2ab7c:	2100      	movs	r1, #0
   2ab7e:	3088      	adds	r0, #136	; 0x88
   2ab80:	f7e5 f84e 	bl	fc20 <bt_le_set_auto_conn>
	switch (conn->state) {
   2ab84:	7b63      	ldrb	r3, [r4, #13]
   2ab86:	3b02      	subs	r3, #2
   2ab88:	2b06      	cmp	r3, #6
   2ab8a:	d805      	bhi.n	2ab98 <bt_conn_disconnect+0x28>
   2ab8c:	e8df f003 	tbb	[pc, r3]
   2ab90:	04040408 	.word	0x04040408
   2ab94:	1a12      	.short	0x1a12
   2ab96:	10          	.byte	0x10
   2ab97:	00          	.byte	0x00
   2ab98:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2ab9c:	4628      	mov	r0, r5
   2ab9e:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2aba0:	4620      	mov	r0, r4
		conn->err = reason;
   2aba2:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2aba4:	2100      	movs	r1, #0
   2aba6:	f7e4 fcd3 	bl	f550 <bt_conn_set_state>
			bt_le_scan_update(false);
   2abaa:	2000      	movs	r0, #0
   2abac:	f7e3 ff34 	bl	ea18 <bt_le_scan_update>
		return 0;
   2abb0:	2500      	movs	r5, #0
   2abb2:	e7f3      	b.n	2ab9c <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   2abb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2abb8:	f002 fe61 	bl	2d87e <k_work_cancel_delayable>
}
   2abbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2abc0:	f7e2 bbb6 	b.w	d330 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2abc4:	4629      	mov	r1, r5
   2abc6:	8820      	ldrh	r0, [r4, #0]
   2abc8:	f7ff fd46 	bl	2a658 <bt_hci_disconnect>
	if (err) {
   2abcc:	4605      	mov	r5, r0
   2abce:	2800      	cmp	r0, #0
   2abd0:	d1e4      	bne.n	2ab9c <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   2abd2:	7b63      	ldrb	r3, [r4, #13]
   2abd4:	2b07      	cmp	r3, #7
   2abd6:	d1e1      	bne.n	2ab9c <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2abd8:	2108      	movs	r1, #8
   2abda:	4620      	mov	r0, r4
   2abdc:	f7e4 fcb8 	bl	f550 <bt_conn_set_state>
   2abe0:	e7dc      	b.n	2ab9c <bt_conn_disconnect+0x2c>

0002abe2 <bt_conn_le_conn_update>:
{
   2abe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abe4:	4607      	mov	r7, r0
   2abe6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2abe8:	f242 0013 	movw	r0, #8211	; 0x2013
   2abec:	210e      	movs	r1, #14
   2abee:	f7e2 f91d 	bl	ce2c <bt_hci_cmd_create>
	if (!buf) {
   2abf2:	4606      	mov	r6, r0
   2abf4:	b1d0      	cbz	r0, 2ac2c <bt_conn_le_conn_update+0x4a>
   2abf6:	210e      	movs	r1, #14
   2abf8:	3008      	adds	r0, #8
   2abfa:	f001 ff18 	bl	2ca2e <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2abfe:	220e      	movs	r2, #14
   2ac00:	4604      	mov	r4, r0
   2ac02:	2100      	movs	r1, #0
   2ac04:	f7ff fbb5 	bl	2a372 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2ac08:	883b      	ldrh	r3, [r7, #0]
   2ac0a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2ac0c:	882b      	ldrh	r3, [r5, #0]
   2ac0e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2ac10:	886b      	ldrh	r3, [r5, #2]
   2ac12:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2ac14:	88ab      	ldrh	r3, [r5, #4]
   2ac16:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2ac18:	88eb      	ldrh	r3, [r5, #6]
   2ac1a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ac1c:	4631      	mov	r1, r6
   2ac1e:	2200      	movs	r2, #0
}
   2ac20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ac24:	f242 0013 	movw	r0, #8211	; 0x2013
   2ac28:	f7e2 ba70 	b.w	d10c <bt_hci_cmd_send_sync>
}
   2ac2c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ac30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ac32 <l2cap_connected>:
}
   2ac32:	4770      	bx	lr

0002ac34 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2ac34:	3010      	adds	r0, #16
   2ac36:	f002 be22 	b.w	2d87e <k_work_cancel_delayable>

0002ac3a <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2ac3a:	2300      	movs	r3, #0
   2ac3c:	f7fc be80 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002ac40 <bt_l2cap_chan_remove>:
	return list->head;
   2ac40:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2ac42:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ac44:	b173      	cbz	r3, 2ac64 <bt_l2cap_chan_remove+0x24>
   2ac46:	3b08      	subs	r3, #8
   2ac48:	2500      	movs	r5, #0
	return node->next;
   2ac4a:	461a      	mov	r2, r3
		if (chan == ch) {
   2ac4c:	4299      	cmp	r1, r3
   2ac4e:	f852 4f08 	ldr.w	r4, [r2, #8]!
   2ac52:	d10d      	bne.n	2ac70 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   2ac54:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2ac56:	b935      	cbnz	r5, 2ac66 <bt_l2cap_chan_remove+0x26>
   2ac58:	4291      	cmp	r1, r2
	list->head = node;
   2ac5a:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2ac5c:	d100      	bne.n	2ac60 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   2ac5e:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   2ac60:	2200      	movs	r2, #0
   2ac62:	609a      	str	r2, [r3, #8]
}
   2ac64:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2ac66:	4291      	cmp	r1, r2
	parent->next = child;
   2ac68:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2ac6a:	bf08      	it	eq
   2ac6c:	6545      	streq	r5, [r0, #84]	; 0x54
}
   2ac6e:	e7f7      	b.n	2ac60 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ac70:	2c00      	cmp	r4, #0
   2ac72:	d0f7      	beq.n	2ac64 <bt_l2cap_chan_remove+0x24>
   2ac74:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2ac78:	4615      	mov	r5, r2
   2ac7a:	e7e6      	b.n	2ac4a <bt_l2cap_chan_remove+0xa>

0002ac7c <bt_l2cap_chan_del>:
{
   2ac7c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2ac7e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2ac82:	4604      	mov	r4, r0
	if (!chan->conn) {
   2ac84:	b123      	cbz	r3, 2ac90 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2ac86:	686b      	ldr	r3, [r5, #4]
   2ac88:	b103      	cbz	r3, 2ac8c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2ac8a:	4798      	blx	r3
	chan->conn = NULL;
   2ac8c:	2300      	movs	r3, #0
   2ac8e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2ac90:	68e3      	ldr	r3, [r4, #12]
   2ac92:	b10b      	cbz	r3, 2ac98 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2ac94:	4620      	mov	r0, r4
   2ac96:	4798      	blx	r3
	if (ops->released) {
   2ac98:	69eb      	ldr	r3, [r5, #28]
   2ac9a:	b11b      	cbz	r3, 2aca4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2ac9c:	4620      	mov	r0, r4
}
   2ac9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2aca2:	4718      	bx	r3
}
   2aca4:	bd70      	pop	{r4, r5, r6, pc}

0002aca6 <bt_l2cap_disconnected>:
	return list->head;
   2aca6:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2aca8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2acaa:	b160      	cbz	r0, 2acc6 <bt_l2cap_disconnected+0x20>
	return node->next;
   2acac:	f850 4908 	ldr.w	r4, [r0], #-8
   2acb0:	b104      	cbz	r4, 2acb4 <bt_l2cap_disconnected+0xe>
   2acb2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2acb4:	f7ff ffe2 	bl	2ac7c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2acb8:	b12c      	cbz	r4, 2acc6 <bt_l2cap_disconnected+0x20>
   2acba:	68a3      	ldr	r3, [r4, #8]
   2acbc:	b103      	cbz	r3, 2acc0 <bt_l2cap_disconnected+0x1a>
   2acbe:	3b08      	subs	r3, #8
{
   2acc0:	4620      	mov	r0, r4
   2acc2:	461c      	mov	r4, r3
   2acc4:	e7f6      	b.n	2acb4 <bt_l2cap_disconnected+0xe>
}
   2acc6:	bd10      	pop	{r4, pc}

0002acc8 <bt_l2cap_security_changed>:
	return list->head;
   2acc8:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2acca:	b538      	push	{r3, r4, r5, lr}
   2accc:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2acce:	b178      	cbz	r0, 2acf0 <bt_l2cap_security_changed+0x28>
	return node->next;
   2acd0:	f850 4908 	ldr.w	r4, [r0], #-8
   2acd4:	b104      	cbz	r4, 2acd8 <bt_l2cap_security_changed+0x10>
   2acd6:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2acd8:	6843      	ldr	r3, [r0, #4]
   2acda:	689b      	ldr	r3, [r3, #8]
   2acdc:	b10b      	cbz	r3, 2ace2 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   2acde:	4629      	mov	r1, r5
   2ace0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ace2:	b12c      	cbz	r4, 2acf0 <bt_l2cap_security_changed+0x28>
   2ace4:	68a3      	ldr	r3, [r4, #8]
   2ace6:	b103      	cbz	r3, 2acea <bt_l2cap_security_changed+0x22>
   2ace8:	3b08      	subs	r3, #8
{
   2acea:	4620      	mov	r0, r4
   2acec:	461c      	mov	r4, r3
   2acee:	e7f3      	b.n	2acd8 <bt_l2cap_security_changed+0x10>
}
   2acf0:	bd38      	pop	{r3, r4, r5, pc}

0002acf2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2acf2:	3104      	adds	r1, #4
   2acf4:	f7e4 bd60 	b.w	f7b8 <bt_conn_create_pdu_timeout>

0002acf8 <bt_l2cap_send_cb>:
{
   2acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2acfc:	4614      	mov	r4, r2
   2acfe:	4605      	mov	r5, r0
   2ad00:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2ad02:	f102 0008 	add.w	r0, r2, #8
   2ad06:	2104      	movs	r1, #4
   2ad08:	461e      	mov	r6, r3
   2ad0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2ad0e:	f001 feaf 	bl	2ca70 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ad12:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2ad14:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ad16:	3a04      	subs	r2, #4
   2ad18:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ad1a:	4643      	mov	r3, r8
   2ad1c:	4632      	mov	r2, r6
   2ad1e:	4621      	mov	r1, r4
   2ad20:	4628      	mov	r0, r5
}
   2ad22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ad26:	f7e4 bb67 	b.w	f3f8 <bt_conn_send_cb>

0002ad2a <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2ad2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ad2c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2ad2e:	2202      	movs	r2, #2
   2ad30:	2001      	movs	r0, #1
   2ad32:	f7e5 f94b 	bl	ffcc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2ad36:	4604      	mov	r4, r0
   2ad38:	b198      	cbz	r0, 2ad62 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2ad3a:	2102      	movs	r1, #2
   2ad3c:	3008      	adds	r0, #8
   2ad3e:	f001 fe76 	bl	2ca2e <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2ad42:	2300      	movs	r3, #0
   2ad44:	7003      	strb	r3, [r0, #0]
   2ad46:	7043      	strb	r3, [r0, #1]
   2ad48:	4622      	mov	r2, r4
   2ad4a:	9300      	str	r3, [sp, #0]
   2ad4c:	2105      	movs	r1, #5
   2ad4e:	4628      	mov	r0, r5
   2ad50:	f7ff ffd2 	bl	2acf8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2ad54:	b128      	cbz	r0, 2ad62 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2ad56:	4620      	mov	r0, r4
}
   2ad58:	b003      	add	sp, #12
   2ad5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2ad5e:	f7f5 bf63 	b.w	20c28 <net_buf_unref>
}
   2ad62:	b003      	add	sp, #12
   2ad64:	bd30      	pop	{r4, r5, pc}

0002ad66 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2ad66:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ad68:	b138      	cbz	r0, 2ad7a <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ad6a:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   2ad6e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ad70:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ad74:	d001      	beq.n	2ad7a <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   2ad76:	6880      	ldr	r0, [r0, #8]
   2ad78:	e7f6      	b.n	2ad68 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2ad7a:	4770      	bx	lr

0002ad7c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2ad7c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ad7e:	b138      	cbz	r0, 2ad90 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ad80:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   2ad84:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ad86:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ad8a:	d001      	beq.n	2ad90 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   2ad8c:	6880      	ldr	r0, [r0, #8]
   2ad8e:	e7f6      	b.n	2ad7e <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2ad90:	4770      	bx	lr

0002ad92 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2ad92:	4770      	bx	lr

0002ad94 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2ad94:	4603      	mov	r3, r0
	return list->head;
   2ad96:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2ad98:	b128      	cbz	r0, 2ada6 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ad9a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2ad9c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2ad9e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ada0:	4288      	cmp	r0, r1
	list->tail = node;
   2ada2:	bf08      	it	eq
   2ada4:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2ada6:	4770      	bx	lr

0002ada8 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2ada8:	4603      	mov	r3, r0
	size_t bytes = 0;
   2adaa:	2000      	movs	r0, #0

	while (buf) {
   2adac:	b903      	cbnz	r3, 2adb0 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2adae:	4770      	bx	lr
		bytes += buf->len;
   2adb0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2adb2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2adb4:	4410      	add	r0, r2
		buf = buf->frags;
   2adb6:	e7f9      	b.n	2adac <net_buf_frags_len+0x4>

0002adb8 <att_sent>:
	if (chan->ops->sent) {
   2adb8:	684b      	ldr	r3, [r1, #4]
   2adba:	695b      	ldr	r3, [r3, #20]
{
   2adbc:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2adbe:	b103      	cbz	r3, 2adc2 <att_sent+0xa>
		chan->ops->sent(chan);
   2adc0:	4718      	bx	r3
}
   2adc2:	4770      	bx	lr

0002adc4 <attr_read_type_cb>:
{
   2adc4:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2adc6:	68d4      	ldr	r4, [r2, #12]
   2adc8:	7823      	ldrb	r3, [r4, #0]
   2adca:	3102      	adds	r1, #2
   2adcc:	b913      	cbnz	r3, 2add4 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2adce:	7021      	strb	r1, [r4, #0]
	return true;
   2add0:	2001      	movs	r0, #1
   2add2:	e006      	b.n	2ade2 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2add4:	428b      	cmp	r3, r1
   2add6:	d0fb      	beq.n	2add0 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2add8:	8983      	ldrh	r3, [r0, #12]
   2adda:	3b02      	subs	r3, #2
   2addc:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2adde:	2000      	movs	r0, #0
   2ade0:	6110      	str	r0, [r2, #16]
}
   2ade2:	bd10      	pop	{r4, pc}

0002ade4 <att_prepare_write_req>:
}
   2ade4:	2006      	movs	r0, #6
   2ade6:	4770      	bx	lr

0002ade8 <att_op_get_type>:
	switch (op) {
   2ade8:	281e      	cmp	r0, #30
   2adea:	d816      	bhi.n	2ae1a <att_op_get_type+0x32>
   2adec:	b308      	cbz	r0, 2ae32 <att_op_get_type+0x4a>
   2adee:	1e43      	subs	r3, r0, #1
   2adf0:	2b1d      	cmp	r3, #29
   2adf2:	d81e      	bhi.n	2ae32 <att_op_get_type+0x4a>
   2adf4:	e8df f003 	tbb	[pc, r3]
   2adf8:	23172317 	.word	0x23172317
   2adfc:	23172317 	.word	0x23172317
   2ae00:	23172317 	.word	0x23172317
   2ae04:	23172317 	.word	0x23172317
   2ae08:	1d172317 	.word	0x1d172317
   2ae0c:	2317231d 	.word	0x2317231d
   2ae10:	1d191d17 	.word	0x1d191d17
   2ae14:	0f1b      	.short	0x0f1b
   2ae16:	2004      	movs	r0, #4
   2ae18:	4770      	bx	lr
   2ae1a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2ae1e:	2b52      	cmp	r3, #82	; 0x52
   2ae20:	d107      	bne.n	2ae32 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2ae22:	2000      	movs	r0, #0
}
   2ae24:	4770      	bx	lr
		return ATT_RESPONSE;
   2ae26:	2002      	movs	r0, #2
   2ae28:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2ae2a:	2003      	movs	r0, #3
   2ae2c:	4770      	bx	lr
		return ATT_INDICATION;
   2ae2e:	2005      	movs	r0, #5
   2ae30:	4770      	bx	lr
		return ATT_COMMAND;
   2ae32:	f010 0f40 	tst.w	r0, #64	; 0x40
   2ae36:	bf0c      	ite	eq
   2ae38:	2006      	moveq	r0, #6
   2ae3a:	2000      	movne	r0, #0
   2ae3c:	4770      	bx	lr
		return ATT_REQUEST;
   2ae3e:	2001      	movs	r0, #1
   2ae40:	4770      	bx	lr

0002ae42 <att_notify_mult>:
{
   2ae42:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2ae44:	6803      	ldr	r3, [r0, #0]
   2ae46:	898a      	ldrh	r2, [r1, #12]
   2ae48:	6818      	ldr	r0, [r3, #0]
   2ae4a:	6889      	ldr	r1, [r1, #8]
   2ae4c:	f7e7 fe34 	bl	12ab8 <bt_gatt_mult_notification>
}
   2ae50:	2000      	movs	r0, #0
   2ae52:	bd08      	pop	{r3, pc}

0002ae54 <att_notify>:
{
   2ae54:	b538      	push	{r3, r4, r5, lr}
   2ae56:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2ae58:	f101 0008 	add.w	r0, r1, #8
   2ae5c:	460c      	mov	r4, r1
   2ae5e:	f001 fe27 	bl	2cab0 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2ae62:	682d      	ldr	r5, [r5, #0]
   2ae64:	89a3      	ldrh	r3, [r4, #12]
   2ae66:	68a2      	ldr	r2, [r4, #8]
   2ae68:	4601      	mov	r1, r0
   2ae6a:	6828      	ldr	r0, [r5, #0]
   2ae6c:	f001 f8c5 	bl	2bffa <bt_gatt_notification>
}
   2ae70:	2000      	movs	r0, #0
   2ae72:	bd38      	pop	{r3, r4, r5, pc}

0002ae74 <att_chan_mtu_updated>:
{
   2ae74:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2ae76:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2ae78:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ae7a:	b1e3      	cbz	r3, 2aeb6 <att_chan_mtu_updated+0x42>
	return node->next;
   2ae7c:	681a      	ldr	r2, [r3, #0]
   2ae7e:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   2ae82:	b10a      	cbz	r2, 2ae88 <att_chan_mtu_updated+0x14>
   2ae84:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2ae88:	2300      	movs	r3, #0
   2ae8a:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   2ae8c:	42a8      	cmp	r0, r5
   2ae8e:	d009      	beq.n	2aea4 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2ae90:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   2ae94:	42a1      	cmp	r1, r4
   2ae96:	bf38      	it	cc
   2ae98:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2ae9a:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   2ae9e:	42a3      	cmp	r3, r4
   2aea0:	bf38      	it	cc
   2aea2:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2aea4:	b142      	cbz	r2, 2aeb8 <att_chan_mtu_updated+0x44>
   2aea6:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   2aeaa:	b10c      	cbz	r4, 2aeb0 <att_chan_mtu_updated+0x3c>
   2aeac:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   2aeb0:	4615      	mov	r5, r2
   2aeb2:	4622      	mov	r2, r4
   2aeb4:	e7ea      	b.n	2ae8c <att_chan_mtu_updated+0x18>
   2aeb6:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2aeb8:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2aebc:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2aec0:	428c      	cmp	r4, r1
   2aec2:	d801      	bhi.n	2aec8 <att_chan_mtu_updated+0x54>
   2aec4:	429a      	cmp	r2, r3
   2aec6:	d909      	bls.n	2aedc <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2aec8:	429a      	cmp	r2, r3
   2aeca:	bf38      	it	cc
   2aecc:	461a      	movcc	r2, r3
   2aece:	42a1      	cmp	r1, r4
   2aed0:	6830      	ldr	r0, [r6, #0]
   2aed2:	bf38      	it	cc
   2aed4:	4621      	movcc	r1, r4
}
   2aed6:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2aed8:	f7e7 bea0 	b.w	12c1c <bt_gatt_att_max_mtu_changed>
}
   2aedc:	bc70      	pop	{r4, r5, r6}
   2aede:	4770      	bx	lr

0002aee0 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2aee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2aee2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2aee6:	2300      	movs	r3, #0
   2aee8:	9300      	str	r3, [sp, #0]
   2aeea:	461a      	mov	r2, r3
   2aeec:	f7e6 fe00 	bl	11af0 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2aef0:	b005      	add	sp, #20
   2aef2:	f85d fb04 	ldr.w	pc, [sp], #4

0002aef6 <find_info_cb>:
{
   2aef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2aef8:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2aefa:	6817      	ldr	r7, [r2, #0]
{
   2aefc:	4605      	mov	r5, r0
   2aefe:	460e      	mov	r6, r1
   2af00:	4614      	mov	r4, r2
	if (!data->rsp) {
   2af02:	b963      	cbnz	r3, 2af1e <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2af04:	6850      	ldr	r0, [r2, #4]
   2af06:	2101      	movs	r1, #1
   2af08:	3008      	adds	r0, #8
   2af0a:	f001 fd90 	bl	2ca2e <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2af0e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2af10:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2af12:	781b      	ldrb	r3, [r3, #0]
   2af14:	2b00      	cmp	r3, #0
   2af16:	bf0c      	ite	eq
   2af18:	2301      	moveq	r3, #1
   2af1a:	2302      	movne	r3, #2
   2af1c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2af1e:	68a3      	ldr	r3, [r4, #8]
   2af20:	781b      	ldrb	r3, [r3, #0]
   2af22:	2b01      	cmp	r3, #1
   2af24:	d003      	beq.n	2af2e <find_info_cb+0x38>
   2af26:	2b02      	cmp	r3, #2
   2af28:	d019      	beq.n	2af5e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2af2a:	2000      	movs	r0, #0
   2af2c:	e016      	b.n	2af5c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2af2e:	682b      	ldr	r3, [r5, #0]
   2af30:	781b      	ldrb	r3, [r3, #0]
   2af32:	2b00      	cmp	r3, #0
   2af34:	d1f9      	bne.n	2af2a <find_info_cb+0x34>
   2af36:	6860      	ldr	r0, [r4, #4]
   2af38:	2104      	movs	r1, #4
   2af3a:	3008      	adds	r0, #8
   2af3c:	f001 fd77 	bl	2ca2e <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2af40:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2af42:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2af44:	885b      	ldrh	r3, [r3, #2]
   2af46:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2af48:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2af4a:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2af4c:	899b      	ldrh	r3, [r3, #12]
   2af4e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2af52:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2af54:	2804      	cmp	r0, #4
   2af56:	bf94      	ite	ls
   2af58:	2000      	movls	r0, #0
   2af5a:	2001      	movhi	r0, #1
}
   2af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2af5e:	682b      	ldr	r3, [r5, #0]
   2af60:	781b      	ldrb	r3, [r3, #0]
   2af62:	2b02      	cmp	r3, #2
   2af64:	d1e1      	bne.n	2af2a <find_info_cb+0x34>
   2af66:	6860      	ldr	r0, [r4, #4]
   2af68:	2112      	movs	r1, #18
   2af6a:	3008      	adds	r0, #8
   2af6c:	f001 fd5f 	bl	2ca2e <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2af70:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2af72:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2af74:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2af76:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2af7a:	3101      	adds	r1, #1
   2af7c:	f7ff f9ee 	bl	2a35c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2af80:	6863      	ldr	r3, [r4, #4]
   2af82:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2af86:	899b      	ldrh	r3, [r3, #12]
   2af88:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2af8a:	2812      	cmp	r0, #18
   2af8c:	e7e3      	b.n	2af56 <find_info_cb+0x60>

0002af8e <attr_read_group_cb>:
	if (!data->rsp->len) {
   2af8e:	68d0      	ldr	r0, [r2, #12]
   2af90:	7803      	ldrb	r3, [r0, #0]
   2af92:	3104      	adds	r1, #4
   2af94:	b913      	cbnz	r3, 2af9c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2af96:	7001      	strb	r1, [r0, #0]
	return true;
   2af98:	2001      	movs	r0, #1
}
   2af9a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2af9c:	428b      	cmp	r3, r1
   2af9e:	d0fb      	beq.n	2af98 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2afa0:	6891      	ldr	r1, [r2, #8]
   2afa2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2afa4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2afa6:	3b04      	subs	r3, #4
   2afa8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2afaa:	6110      	str	r0, [r2, #16]
		return false;
   2afac:	4770      	bx	lr

0002afae <chan_req_sent>:
	if (chan->req) {
   2afae:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2afb2:	b133      	cbz	r3, 2afc2 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2afb4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2afb8:	2300      	movs	r3, #0
   2afba:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2afbe:	f7fa bca1 	b.w	25904 <k_work_reschedule>
}
   2afc2:	4770      	bx	lr

0002afc4 <write_cb>:
{
   2afc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2afc6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2afc8:	4601      	mov	r1, r0
{
   2afca:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2afcc:	222a      	movs	r2, #42	; 0x2a
   2afce:	6820      	ldr	r0, [r4, #0]
   2afd0:	f000 fef8 	bl	2bdc4 <bt_gatt_check_perm>
   2afd4:	4605      	mov	r5, r0
   2afd6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2afd8:	bb20      	cbnz	r0, 2b024 <write_cb+0x60>
	if (!data->req) {
   2afda:	7a23      	ldrb	r3, [r4, #8]
   2afdc:	b1ab      	cbz	r3, 2b00a <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2afde:	2b18      	cmp	r3, #24
   2afe0:	bf14      	ite	ne
   2afe2:	2300      	movne	r3, #0
   2afe4:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2afe6:	9301      	str	r3, [sp, #4]
   2afe8:	8a63      	ldrh	r3, [r4, #18]
   2afea:	9300      	str	r3, [sp, #0]
   2afec:	68b7      	ldr	r7, [r6, #8]
   2afee:	8a23      	ldrh	r3, [r4, #16]
   2aff0:	68e2      	ldr	r2, [r4, #12]
   2aff2:	6820      	ldr	r0, [r4, #0]
   2aff4:	4631      	mov	r1, r6
   2aff6:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2aff8:	1e03      	subs	r3, r0, #0
   2affa:	db08      	blt.n	2b00e <write_cb+0x4a>
   2affc:	8a22      	ldrh	r2, [r4, #16]
   2affe:	4293      	cmp	r3, r2
   2b000:	d10e      	bne.n	2b020 <write_cb+0x5c>
	data->err = 0U;
   2b002:	2300      	movs	r3, #0
   2b004:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2b006:	2501      	movs	r5, #1
   2b008:	e007      	b.n	2b01a <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2b00a:	2302      	movs	r3, #2
   2b00c:	e7eb      	b.n	2afe6 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2b00e:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2b012:	d305      	bcc.n	2b020 <write_cb+0x5c>
		return -err;
   2b014:	425b      	negs	r3, r3
   2b016:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2b018:	7523      	strb	r3, [r4, #20]
}
   2b01a:	4628      	mov	r0, r5
   2b01c:	b003      	add	sp, #12
   2b01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2b020:	230e      	movs	r3, #14
   2b022:	e7f9      	b.n	2b018 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2b024:	2500      	movs	r5, #0
   2b026:	e7f8      	b.n	2b01a <write_cb+0x56>

0002b028 <z_log_msg2_static_create.constprop.0>:
   2b028:	2300      	movs	r3, #0
   2b02a:	f7fc bc89 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002b02e <att_chan_read>:
{
   2b02e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b032:	4680      	mov	r8, r0
   2b034:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b036:	4610      	mov	r0, r2
{
   2b038:	4699      	mov	r9, r3
   2b03a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b03c:	f7ff feb4 	bl	2ada8 <net_buf_frags_len>
   2b040:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2b044:	4283      	cmp	r3, r0
{
   2b046:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b048:	d97a      	bls.n	2b140 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2b04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2b04e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2b050:	4630      	mov	r0, r6
   2b052:	f001 fcbe 	bl	2c9d2 <net_buf_frag_last>
	size_t len, total = 0;
   2b056:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2b05a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b05c:	4630      	mov	r0, r6
   2b05e:	f7ff fea3 	bl	2ada8 <net_buf_frags_len>
   2b062:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2b066:	f105 0708 	add.w	r7, r5, #8
   2b06a:	1a24      	subs	r4, r4, r0
   2b06c:	4638      	mov	r0, r7
   2b06e:	f001 fd2b 	bl	2cac8 <net_buf_simple_tailroom>
   2b072:	4284      	cmp	r4, r0
   2b074:	d211      	bcs.n	2b09a <att_chan_read+0x6c>
   2b076:	4630      	mov	r0, r6
   2b078:	f7ff fe96 	bl	2ada8 <net_buf_frags_len>
   2b07c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b080:	1a24      	subs	r4, r4, r0
		if (!len) {
   2b082:	bb34      	cbnz	r4, 2b0d2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2b084:	79b0      	ldrb	r0, [r6, #6]
   2b086:	f7f5 fd0b 	bl	20aa0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2b08a:	2200      	movs	r2, #0
   2b08c:	2300      	movs	r3, #0
   2b08e:	f001 fc66 	bl	2c95e <net_buf_alloc_fixed>
			if (!frag) {
   2b092:	4605      	mov	r5, r0
   2b094:	b930      	cbnz	r0, 2b0a4 <att_chan_read+0x76>
	return total;
   2b096:	4657      	mov	r7, sl
   2b098:	e02c      	b.n	2b0f4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2b09a:	4638      	mov	r0, r7
   2b09c:	f001 fd14 	bl	2cac8 <net_buf_simple_tailroom>
   2b0a0:	4604      	mov	r4, r0
   2b0a2:	e7ee      	b.n	2b082 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2b0a4:	4601      	mov	r1, r0
   2b0a6:	4630      	mov	r0, r6
   2b0a8:	f001 fca4 	bl	2c9f4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b0ac:	4630      	mov	r0, r6
   2b0ae:	f7ff fe7b 	bl	2ada8 <net_buf_frags_len>
   2b0b2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b0b6:	f105 0708 	add.w	r7, r5, #8
   2b0ba:	1a24      	subs	r4, r4, r0
   2b0bc:	4638      	mov	r0, r7
   2b0be:	f001 fd03 	bl	2cac8 <net_buf_simple_tailroom>
   2b0c2:	4284      	cmp	r4, r0
   2b0c4:	d21a      	bcs.n	2b0fc <att_chan_read+0xce>
   2b0c6:	4630      	mov	r0, r6
   2b0c8:	f7ff fe6e 	bl	2ada8 <net_buf_frags_len>
   2b0cc:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b0d0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2b0d2:	68a9      	ldr	r1, [r5, #8]
   2b0d4:	89aa      	ldrh	r2, [r5, #12]
   2b0d6:	f8db 7004 	ldr.w	r7, [fp, #4]
   2b0da:	9803      	ldr	r0, [sp, #12]
   2b0dc:	f8cd 9000 	str.w	r9, [sp]
   2b0e0:	440a      	add	r2, r1
   2b0e2:	b2a3      	uxth	r3, r4
   2b0e4:	4659      	mov	r1, fp
   2b0e6:	47b8      	blx	r7
		if (read < 0) {
   2b0e8:	1e07      	subs	r7, r0, #0
   2b0ea:	da0c      	bge.n	2b106 <att_chan_read+0xd8>
				return total;
   2b0ec:	f1ba 0f00 	cmp.w	sl, #0
   2b0f0:	bf18      	it	ne
   2b0f2:	4657      	movne	r7, sl
}
   2b0f4:	4638      	mov	r0, r7
   2b0f6:	b005      	add	sp, #20
   2b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0fc:	4638      	mov	r0, r7
   2b0fe:	f001 fce3 	bl	2cac8 <net_buf_simple_tailroom>
   2b102:	4604      	mov	r4, r0
   2b104:	e7e5      	b.n	2b0d2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2b106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b108:	b993      	cbnz	r3, 2b130 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2b10a:	4639      	mov	r1, r7
   2b10c:	f105 0008 	add.w	r0, r5, #8
   2b110:	f001 fc8d 	bl	2ca2e <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b114:	4630      	mov	r0, r6
   2b116:	f7ff fe47 	bl	2ada8 <net_buf_frags_len>
   2b11a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2b11e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b120:	4283      	cmp	r3, r0
		total += read;
   2b122:	44ba      	add	sl, r7
		offset += read;
   2b124:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b128:	d9b5      	bls.n	2b096 <att_chan_read+0x68>
   2b12a:	42a7      	cmp	r7, r4
   2b12c:	d096      	beq.n	2b05c <att_chan_read+0x2e>
   2b12e:	e7b2      	b.n	2b096 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2b130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b134:	4639      	mov	r1, r7
   2b136:	4628      	mov	r0, r5
   2b138:	4798      	blx	r3
   2b13a:	2800      	cmp	r0, #0
   2b13c:	d1e5      	bne.n	2b10a <att_chan_read+0xdc>
   2b13e:	e7aa      	b.n	2b096 <att_chan_read+0x68>
		return 0;
   2b140:	2700      	movs	r7, #0
   2b142:	e7d7      	b.n	2b0f4 <att_chan_read+0xc6>

0002b144 <chan_req_send>:
{
   2b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b146:	688f      	ldr	r7, [r1, #8]
{
   2b148:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b14a:	4638      	mov	r0, r7
   2b14c:	f7ff fe2c 	bl	2ada8 <net_buf_frags_len>
   2b150:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2b154:	4283      	cmp	r3, r0
{
   2b156:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b158:	d30d      	bcc.n	2b176 <chan_req_send+0x32>
	req->buf = NULL;
   2b15a:	2600      	movs	r6, #0
	chan->req = req;
   2b15c:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   2b160:	4632      	mov	r2, r6
	req->buf = NULL;
   2b162:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2b164:	4620      	mov	r0, r4
   2b166:	4639      	mov	r1, r7
   2b168:	f7e5 fb1e 	bl	107a8 <chan_send>
	if (err) {
   2b16c:	b110      	cbz	r0, 2b174 <chan_req_send+0x30>
		req->buf = buf;
   2b16e:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2b170:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2b174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2b176:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b17a:	e7fb      	b.n	2b174 <chan_req_send+0x30>

0002b17c <process_queue>:
{
   2b17c:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2b17e:	2200      	movs	r2, #0
{
   2b180:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2b182:	2300      	movs	r3, #0
   2b184:	4608      	mov	r0, r1
{
   2b186:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2b188:	f001 fbee 	bl	2c968 <net_buf_get>
	if (buf) {
   2b18c:	4605      	mov	r5, r0
   2b18e:	b160      	cbz	r0, 2b1aa <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2b190:	4601      	mov	r1, r0
   2b192:	2200      	movs	r2, #0
   2b194:	4620      	mov	r0, r4
   2b196:	f7e5 fb07 	bl	107a8 <chan_send>
		if (err) {
   2b19a:	4604      	mov	r4, r0
   2b19c:	b118      	cbz	r0, 2b1a6 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2b19e:	4629      	mov	r1, r5
   2b1a0:	4630      	mov	r0, r6
   2b1a2:	f002 fa74 	bl	2d68e <k_queue_prepend>
}
   2b1a6:	4620      	mov	r0, r4
   2b1a8:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2b1aa:	f06f 0401 	mvn.w	r4, #1
   2b1ae:	e7fa      	b.n	2b1a6 <process_queue+0x2a>

0002b1b0 <bt_att_chan_send_rsp>:
{
   2b1b0:	b538      	push	{r3, r4, r5, lr}
   2b1b2:	4604      	mov	r4, r0
   2b1b4:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2b1b6:	f7e5 faf7 	bl	107a8 <chan_send>
	if (err) {
   2b1ba:	b130      	cbz	r0, 2b1ca <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2b1bc:	4629      	mov	r1, r5
   2b1be:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   2b1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2b1c6:	f001 bbf3 	b.w	2c9b0 <net_buf_put>
}
   2b1ca:	bd38      	pop	{r3, r4, r5, pc}

0002b1cc <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b1cc:	b510      	push	{r4, lr}
	return list->head;
   2b1ce:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b1d0:	2200      	movs	r2, #0
   2b1d2:	b153      	cbz	r3, 2b1ea <sys_slist_find_and_remove.isra.0+0x1e>
   2b1d4:	428b      	cmp	r3, r1
   2b1d6:	d10e      	bne.n	2b1f6 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2b1d8:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2b1da:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b1dc:	b932      	cbnz	r2, 2b1ec <sys_slist_find_and_remove.isra.0+0x20>
   2b1de:	42a1      	cmp	r1, r4
	list->head = node;
   2b1e0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b1e2:	d100      	bne.n	2b1e6 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2b1e4:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2b1e6:	2300      	movs	r3, #0
   2b1e8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b1ea:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2b1ec:	42a1      	cmp	r1, r4
	parent->next = child;
   2b1ee:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2b1f0:	bf08      	it	eq
   2b1f2:	6042      	streq	r2, [r0, #4]
}
   2b1f4:	e7f7      	b.n	2b1e6 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2b1f6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b1f8:	681b      	ldr	r3, [r3, #0]
   2b1fa:	e7ea      	b.n	2b1d2 <sys_slist_find_and_remove.isra.0+0x6>

0002b1fc <att_exec_write_req>:
   2b1fc:	2006      	movs	r0, #6
   2b1fe:	4770      	bx	lr

0002b200 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b200:	30f0      	adds	r0, #240	; 0xf0
   2b202:	f3bf 8f5b 	dmb	ish
   2b206:	e850 3f00 	ldrex	r3, [r0]
   2b20a:	f023 0301 	bic.w	r3, r3, #1
   2b20e:	e840 3200 	strex	r2, r3, [r0]
   2b212:	2a00      	cmp	r2, #0
   2b214:	d1f7      	bne.n	2b206 <chan_rsp_sent+0x6>
   2b216:	f3bf 8f5b 	dmb	ish
}
   2b21a:	4770      	bx	lr

0002b21c <chan_cfm_sent>:
   2b21c:	30f0      	adds	r0, #240	; 0xf0
   2b21e:	f3bf 8f5b 	dmb	ish
   2b222:	e850 3f00 	ldrex	r3, [r0]
   2b226:	f023 0302 	bic.w	r3, r3, #2
   2b22a:	e840 3200 	strex	r2, r3, [r0]
   2b22e:	2a00      	cmp	r2, #0
   2b230:	d1f7      	bne.n	2b222 <chan_cfm_sent+0x6>
   2b232:	f3bf 8f5b 	dmb	ish
}
   2b236:	4770      	bx	lr

0002b238 <read_cb>:
{
   2b238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2b23c:	f8d2 8000 	ldr.w	r8, [r2]
{
   2b240:	4606      	mov	r6, r0
	data->err = 0x00;
   2b242:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2b244:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2b248:	7317      	strb	r7, [r2, #12]
{
   2b24a:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b24c:	4631      	mov	r1, r6
   2b24e:	2215      	movs	r2, #21
   2b250:	f000 fdb8 	bl	2bdc4 <bt_gatt_check_perm>
   2b254:	4604      	mov	r4, r0
   2b256:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2b258:	b9a0      	cbnz	r0, 2b284 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b25a:	e9cd 0000 	strd	r0, r0, [sp]
   2b25e:	88ab      	ldrh	r3, [r5, #4]
   2b260:	68aa      	ldr	r2, [r5, #8]
   2b262:	4631      	mov	r1, r6
   2b264:	4640      	mov	r0, r8
   2b266:	f7ff fee2 	bl	2b02e <att_chan_read>
	if (ret < 0) {
   2b26a:	1e03      	subs	r3, r0, #0
   2b26c:	da0c      	bge.n	2b288 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2b26e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2b272:	bf26      	itte	cs
   2b274:	425b      	negcs	r3, r3
   2b276:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2b278:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2b27a:	732b      	strb	r3, [r5, #12]
}
   2b27c:	4620      	mov	r0, r4
   2b27e:	b002      	add	sp, #8
   2b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2b284:	463c      	mov	r4, r7
   2b286:	e7f9      	b.n	2b27c <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2b288:	2401      	movs	r4, #1
   2b28a:	e7f7      	b.n	2b27c <read_cb+0x44>

0002b28c <bt_att_sent>:
{
   2b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2b28e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2b292:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2b296:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2b298:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2b29c:	b10b      	cbz	r3, 2b2a2 <bt_att_sent+0x16>
		chan->sent(chan);
   2b29e:	4638      	mov	r0, r7
   2b2a0:	4798      	blx	r3
   2b2a2:	f3bf 8f5b 	dmb	ish
   2b2a6:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2b2aa:	e853 2f00 	ldrex	r2, [r3]
   2b2ae:	f022 0210 	bic.w	r2, r2, #16
   2b2b2:	e843 2100 	strex	r1, r2, [r3]
   2b2b6:	2900      	cmp	r1, #0
   2b2b8:	d1f7      	bne.n	2b2aa <bt_att_sent+0x1e>
   2b2ba:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2b2be:	b30c      	cbz	r4, 2b304 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2b2c0:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2b2c4:	b98b      	cbnz	r3, 2b2ea <bt_att_sent+0x5e>
   2b2c6:	6863      	ldr	r3, [r4, #4]
   2b2c8:	b17b      	cbz	r3, 2b2ea <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b2ca:	1d20      	adds	r0, r4, #4
   2b2cc:	f7ff fd62 	bl	2ad94 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b2d0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b2d2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b2d4:	4638      	mov	r0, r7
   2b2d6:	f7ff ff35 	bl	2b144 <chan_req_send>
   2b2da:	2800      	cmp	r0, #0
   2b2dc:	da12      	bge.n	2b304 <bt_att_sent+0x78>
	parent->next = child;
   2b2de:	6863      	ldr	r3, [r4, #4]
   2b2e0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b2e2:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2b2e4:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b2e6:	b903      	cbnz	r3, 2b2ea <bt_att_sent+0x5e>
	list->tail = node;
   2b2e8:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2b2ea:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2b2ee:	4638      	mov	r0, r7
   2b2f0:	f7ff ff44 	bl	2b17c <process_queue>
	if (!err) {
   2b2f4:	b130      	cbz	r0, 2b304 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2b2f6:	f104 010c 	add.w	r1, r4, #12
   2b2fa:	4638      	mov	r0, r7
}
   2b2fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2b300:	f7ff bf3c 	b.w	2b17c <process_queue>
}
   2b304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b306 <att_req_send_process>:
{
   2b306:	b570      	push	{r4, r5, r6, lr}
   2b308:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   2b30a:	3004      	adds	r0, #4
   2b30c:	f7ff fd42 	bl	2ad94 <sys_slist_get>
	if (!node) {
   2b310:	4605      	mov	r5, r0
   2b312:	b1b8      	cbz	r0, 2b344 <att_req_send_process+0x3e>
	return list->head;
   2b314:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b316:	b14b      	cbz	r3, 2b32c <att_req_send_process+0x26>
	return node->next;
   2b318:	681e      	ldr	r6, [r3, #0]
   2b31a:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2b31e:	b10e      	cbz	r6, 2b324 <att_req_send_process+0x1e>
   2b320:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   2b324:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2b328:	b13b      	cbz	r3, 2b33a <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b32a:	b966      	cbnz	r6, 2b346 <att_req_send_process+0x40>
	parent->next = child;
   2b32c:	6863      	ldr	r3, [r4, #4]
   2b32e:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b330:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2b332:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b334:	b933      	cbnz	r3, 2b344 <att_req_send_process+0x3e>
	list->tail = node;
   2b336:	60a5      	str	r5, [r4, #8]
}
   2b338:	e004      	b.n	2b344 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   2b33a:	4629      	mov	r1, r5
   2b33c:	f7ff ff02 	bl	2b144 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b340:	2800      	cmp	r0, #0
   2b342:	dbf2      	blt.n	2b32a <att_req_send_process+0x24>
}
   2b344:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   2b346:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b34a:	b10b      	cbz	r3, 2b350 <att_req_send_process+0x4a>
   2b34c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2b350:	4630      	mov	r0, r6
   2b352:	461e      	mov	r6, r3
   2b354:	e7e6      	b.n	2b324 <att_req_send_process+0x1e>

0002b356 <bt_att_status>:
{
   2b356:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b358:	f3bf 8f5b 	dmb	ish
   2b35c:	680b      	ldr	r3, [r1, #0]
   2b35e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b362:	07db      	lsls	r3, r3, #31
{
   2b364:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b366:	d519      	bpl.n	2b39c <bt_att_status+0x46>
	if (!chan->att) {
   2b368:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2b36c:	b1b0      	cbz	r0, 2b39c <bt_att_status+0x46>
	if (chan->req) {
   2b36e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2b372:	b99b      	cbnz	r3, 2b39c <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2b374:	3004      	adds	r0, #4
   2b376:	f7ff fd0d 	bl	2ad94 <sys_slist_get>
	if (!node) {
   2b37a:	4604      	mov	r4, r0
   2b37c:	b170      	cbz	r0, 2b39c <bt_att_status+0x46>
	return chan_req_send(chan, req);
   2b37e:	4601      	mov	r1, r0
   2b380:	f1a5 0008 	sub.w	r0, r5, #8
   2b384:	f7ff fede 	bl	2b144 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b388:	2800      	cmp	r0, #0
   2b38a:	da07      	bge.n	2b39c <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2b38c:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   2b390:	685a      	ldr	r2, [r3, #4]
   2b392:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b394:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2b396:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b398:	b902      	cbnz	r2, 2b39c <bt_att_status+0x46>
	list->tail = node;
   2b39a:	609c      	str	r4, [r3, #8]
}
   2b39c:	bd38      	pop	{r3, r4, r5, pc}

0002b39e <att_write_req>:
{
   2b39e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b3a0:	460c      	mov	r4, r1
   2b3a2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2b3a4:	f101 0008 	add.w	r0, r1, #8
   2b3a8:	f001 fb82 	bl	2cab0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2b3ac:	89a2      	ldrh	r2, [r4, #12]
   2b3ae:	9201      	str	r2, [sp, #4]
   2b3b0:	68a2      	ldr	r2, [r4, #8]
   2b3b2:	9200      	str	r2, [sp, #0]
   2b3b4:	4603      	mov	r3, r0
   2b3b6:	2213      	movs	r2, #19
   2b3b8:	2112      	movs	r1, #18
   2b3ba:	4628      	mov	r0, r5
   2b3bc:	f7e5 fc56 	bl	10c6c <att_write_rsp.constprop.0>
}
   2b3c0:	b003      	add	sp, #12
   2b3c2:	bd30      	pop	{r4, r5, pc}

0002b3c4 <att_write_cmd>:
{
   2b3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b3c6:	460c      	mov	r4, r1
   2b3c8:	4605      	mov	r5, r0
   2b3ca:	f101 0008 	add.w	r0, r1, #8
   2b3ce:	f001 fb6f 	bl	2cab0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2b3d2:	89a2      	ldrh	r2, [r4, #12]
   2b3d4:	9201      	str	r2, [sp, #4]
   2b3d6:	68a2      	ldr	r2, [r4, #8]
   2b3d8:	9200      	str	r2, [sp, #0]
   2b3da:	2200      	movs	r2, #0
   2b3dc:	4603      	mov	r3, r0
   2b3de:	4611      	mov	r1, r2
   2b3e0:	4628      	mov	r0, r5
   2b3e2:	f7e5 fc43 	bl	10c6c <att_write_rsp.constprop.0>
}
   2b3e6:	b003      	add	sp, #12
   2b3e8:	bd30      	pop	{r4, r5, pc}

0002b3ea <att_read_blob_req>:
{
   2b3ea:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2b3ec:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2b3ee:	8813      	ldrh	r3, [r2, #0]
   2b3f0:	8852      	ldrh	r2, [r2, #2]
   2b3f2:	9200      	str	r2, [sp, #0]
   2b3f4:	210c      	movs	r1, #12
   2b3f6:	220d      	movs	r2, #13
   2b3f8:	f7e5 fdf4 	bl	10fe4 <att_read_rsp>
}
   2b3fc:	b003      	add	sp, #12
   2b3fe:	f85d fb04 	ldr.w	pc, [sp], #4

0002b402 <att_read_req>:
{
   2b402:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2b404:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2b406:	2200      	movs	r2, #0
   2b408:	881b      	ldrh	r3, [r3, #0]
   2b40a:	9200      	str	r2, [sp, #0]
   2b40c:	210a      	movs	r1, #10
   2b40e:	220b      	movs	r2, #11
   2b410:	f7e5 fde8 	bl	10fe4 <att_read_rsp>
}
   2b414:	b003      	add	sp, #12
   2b416:	f85d fb04 	ldr.w	pc, [sp], #4

0002b41a <bt_att_init>:
	bt_gatt_init();
   2b41a:	f7e6 bae3 	b.w	119e4 <bt_gatt_init>

0002b41e <bt_att_get_mtu>:
{
   2b41e:	b508      	push	{r3, lr}
	att = att_get(conn);
   2b420:	f7e5 f8be 	bl	105a0 <att_get>
	if (!att) {
   2b424:	b1b0      	cbz	r0, 2b454 <bt_att_get_mtu+0x36>
	return list->head;
   2b426:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b428:	b1a0      	cbz	r0, 2b454 <bt_att_get_mtu+0x36>
	return node->next;
   2b42a:	6803      	ldr	r3, [r0, #0]
   2b42c:	f5a0 71a2 	sub.w	r1, r0, #324	; 0x144
   2b430:	b10b      	cbz	r3, 2b436 <bt_att_get_mtu+0x18>
   2b432:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2b436:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2b438:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   2b43c:	4290      	cmp	r0, r2
   2b43e:	bf38      	it	cc
   2b440:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b442:	b13b      	cbz	r3, 2b454 <bt_att_get_mtu+0x36>
   2b444:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   2b448:	b10a      	cbz	r2, 2b44e <bt_att_get_mtu+0x30>
   2b44a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2b44e:	4619      	mov	r1, r3
   2b450:	4613      	mov	r3, r2
   2b452:	e7f1      	b.n	2b438 <bt_att_get_mtu+0x1a>
}
   2b454:	bd08      	pop	{r3, pc}

0002b456 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b456:	898a      	ldrh	r2, [r1, #12]
   2b458:	6889      	ldr	r1, [r1, #8]
   2b45a:	2300      	movs	r3, #0
   2b45c:	f7e5 bf86 	b.w	1136c <att_handle_rsp>

0002b460 <att_handle_find_type_rsp>:
   2b460:	f7ff bff9 	b.w	2b456 <att_handle_find_info_rsp>

0002b464 <att_handle_read_type_rsp>:
   2b464:	f7ff bff7 	b.w	2b456 <att_handle_find_info_rsp>

0002b468 <att_handle_read_rsp>:
   2b468:	f7ff bff5 	b.w	2b456 <att_handle_find_info_rsp>

0002b46c <att_handle_read_blob_rsp>:
   2b46c:	f7ff bff3 	b.w	2b456 <att_handle_find_info_rsp>

0002b470 <att_handle_read_mult_rsp>:
   2b470:	f7ff bff1 	b.w	2b456 <att_handle_find_info_rsp>

0002b474 <att_handle_read_group_rsp>:
   2b474:	f7ff bfef 	b.w	2b456 <att_handle_find_info_rsp>

0002b478 <att_handle_write_rsp>:
   2b478:	f7ff bfed 	b.w	2b456 <att_handle_find_info_rsp>

0002b47c <att_handle_prepare_write_rsp>:
   2b47c:	f7ff bfeb 	b.w	2b456 <att_handle_find_info_rsp>

0002b480 <att_handle_exec_write_rsp>:
   2b480:	f7ff bfe9 	b.w	2b456 <att_handle_find_info_rsp>

0002b484 <att_confirm>:
   2b484:	f7ff bfe7 	b.w	2b456 <att_handle_find_info_rsp>

0002b488 <att_mtu_rsp>:
{
   2b488:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2b48a:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2b48c:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2b48e:	2b16      	cmp	r3, #22
{
   2b490:	4604      	mov	r4, r0
   2b492:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2b494:	d806      	bhi.n	2b4a4 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2b496:	2200      	movs	r2, #0
   2b498:	2304      	movs	r3, #4
   2b49a:	4611      	mov	r1, r2
}
   2b49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2b4a0:	f7e5 bf64 	b.w	1136c <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2b4a4:	2b41      	cmp	r3, #65	; 0x41
   2b4a6:	bf28      	it	cs
   2b4a8:	2341      	movcs	r3, #65	; 0x41
   2b4aa:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2b4ae:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2b4b2:	f7ff fcdf 	bl	2ae74 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2b4b6:	89aa      	ldrh	r2, [r5, #12]
   2b4b8:	2300      	movs	r3, #0
   2b4ba:	4631      	mov	r1, r6
   2b4bc:	4620      	mov	r0, r4
   2b4be:	e7ed      	b.n	2b49c <att_mtu_rsp+0x14>

0002b4c0 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2b4c0:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   2b4c4:	b570      	push	{r4, r5, r6, lr}
   2b4c6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2b4c8:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2b4cc:	2b00      	cmp	r3, #0
   2b4ce:	d037      	beq.n	2b540 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2b4d0:	b171      	cbz	r1, 2b4f0 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2b4d2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2b4d6:	2b00      	cmp	r3, #0
   2b4d8:	d032      	beq.n	2b540 <bt_att_encrypt_change+0x80>
   2b4da:	7c1b      	ldrb	r3, [r3, #16]
   2b4dc:	07da      	lsls	r2, r3, #31
   2b4de:	d52f      	bpl.n	2b540 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2b4e0:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2b4e2:	2200      	movs	r2, #0
   2b4e4:	4630      	mov	r0, r6
   2b4e6:	4611      	mov	r1, r2
}
   2b4e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2b4ec:	f7e5 bf3e 	b.w	1136c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2b4f0:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2b4f2:	4628      	mov	r0, r5
   2b4f4:	f7e7 fba6 	bl	12c44 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2b4f8:	7a6b      	ldrb	r3, [r5, #9]
   2b4fa:	2b01      	cmp	r3, #1
   2b4fc:	d020      	beq.n	2b540 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2b4fe:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   2b502:	b1ec      	cbz	r4, 2b540 <bt_att_encrypt_change+0x80>
   2b504:	7c23      	ldrb	r3, [r4, #16]
   2b506:	07db      	lsls	r3, r3, #31
   2b508:	d51a      	bpl.n	2b540 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2b50a:	68e3      	ldr	r3, [r4, #12]
   2b50c:	2b00      	cmp	r3, #0
   2b50e:	d0e7      	beq.n	2b4e0 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2b510:	6962      	ldr	r2, [r4, #20]
   2b512:	7c61      	ldrb	r1, [r4, #17]
   2b514:	4630      	mov	r0, r6
   2b516:	f7e5 fa3f 	bl	10998 <bt_att_chan_create_pdu>
	if (!buf) {
   2b51a:	4605      	mov	r5, r0
   2b51c:	b140      	cbz	r0, 2b530 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2b51e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2b522:	68e3      	ldr	r3, [r4, #12]
   2b524:	4798      	blx	r3
   2b526:	4602      	mov	r2, r0
   2b528:	b120      	cbz	r0, 2b534 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2b52a:	4628      	mov	r0, r5
   2b52c:	f7f5 fb7c 	bl	20c28 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2b530:	230e      	movs	r3, #14
   2b532:	e7d6      	b.n	2b4e2 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2b534:	4629      	mov	r1, r5
   2b536:	4630      	mov	r0, r6
   2b538:	f7e5 f936 	bl	107a8 <chan_send>
   2b53c:	2800      	cmp	r0, #0
   2b53e:	d1f4      	bne.n	2b52a <bt_att_encrypt_change+0x6a>
}
   2b540:	bd70      	pop	{r4, r5, r6, pc}

0002b542 <bt_att_send>:
{
   2b542:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b546:	4607      	mov	r7, r0
   2b548:	460d      	mov	r5, r1
   2b54a:	4616      	mov	r6, r2
   2b54c:	4698      	mov	r8, r3
	att = att_get(conn);
   2b54e:	f7e5 f827 	bl	105a0 <att_get>
	if (!att) {
   2b552:	4604      	mov	r4, r0
   2b554:	b938      	cbnz	r0, 2b566 <bt_att_send+0x24>
		net_buf_unref(buf);
   2b556:	4628      	mov	r0, r5
   2b558:	f7f5 fb66 	bl	20c28 <net_buf_unref>
		return -ENOTCONN;
   2b55c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2b560:	b002      	add	sp, #8
   2b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2b566:	b146      	cbz	r6, 2b57a <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2b568:	f8cd 8000 	str.w	r8, [sp]
   2b56c:	4633      	mov	r3, r6
   2b56e:	462a      	mov	r2, r5
   2b570:	2104      	movs	r1, #4
   2b572:	4638      	mov	r0, r7
   2b574:	f7ff fbc0 	bl	2acf8 <bt_l2cap_send_cb>
   2b578:	e7f2      	b.n	2b560 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   2b57a:	f100 060c 	add.w	r6, r0, #12
   2b57e:	4629      	mov	r1, r5
   2b580:	4630      	mov	r0, r6
   2b582:	f001 fa15 	bl	2c9b0 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2b586:	2200      	movs	r2, #0
   2b588:	2300      	movs	r3, #0
   2b58a:	4630      	mov	r0, r6
   2b58c:	f001 f9ec 	bl	2c968 <net_buf_get>
	if (!buf) {
   2b590:	4605      	mov	r5, r0
   2b592:	b908      	cbnz	r0, 2b598 <bt_att_send+0x56>
	return 0;
   2b594:	2000      	movs	r0, #0
   2b596:	e7e3      	b.n	2b560 <bt_att_send+0x1e>
	return list->head;
   2b598:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b59a:	b1a3      	cbz	r3, 2b5c6 <bt_att_send+0x84>
	return node->next;
   2b59c:	681c      	ldr	r4, [r3, #0]
   2b59e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2b5a2:	b10c      	cbz	r4, 2b5a8 <bt_att_send+0x66>
   2b5a4:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   2b5a8:	2200      	movs	r2, #0
   2b5aa:	4629      	mov	r1, r5
   2b5ac:	f7e5 f8fc 	bl	107a8 <chan_send>
		if (err >= 0) {
   2b5b0:	2800      	cmp	r0, #0
   2b5b2:	daef      	bge.n	2b594 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b5b4:	b13c      	cbz	r4, 2b5c6 <bt_att_send+0x84>
   2b5b6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2b5ba:	b10b      	cbz	r3, 2b5c0 <bt_att_send+0x7e>
   2b5bc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2b5c0:	4620      	mov	r0, r4
   2b5c2:	461c      	mov	r4, r3
   2b5c4:	e7f0      	b.n	2b5a8 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2b5c6:	4629      	mov	r1, r5
   2b5c8:	4630      	mov	r0, r6
   2b5ca:	f002 f860 	bl	2d68e <k_queue_prepend>
   2b5ce:	e7e1      	b.n	2b594 <bt_att_send+0x52>

0002b5d0 <bt_att_req_send>:
{
   2b5d0:	b510      	push	{r4, lr}
   2b5d2:	460c      	mov	r4, r1
	att = att_get(conn);
   2b5d4:	f7e4 ffe4 	bl	105a0 <att_get>
	if (!att) {
   2b5d8:	b160      	cbz	r0, 2b5f4 <bt_att_req_send+0x24>
	parent->next = child;
   2b5da:	2300      	movs	r3, #0
   2b5dc:	6023      	str	r3, [r4, #0]
	return list->tail;
   2b5de:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2b5e0:	b92b      	cbnz	r3, 2b5ee <bt_att_req_send+0x1e>
	list->head = node;
   2b5e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   2b5e6:	f7ff fe8e 	bl	2b306 <att_req_send_process>
	return 0;
   2b5ea:	2000      	movs	r0, #0
}
   2b5ec:	bd10      	pop	{r4, pc}
	parent->next = child;
   2b5ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b5f0:	6084      	str	r4, [r0, #8]
}
   2b5f2:	e7f8      	b.n	2b5e6 <bt_att_req_send+0x16>
		return -ENOTCONN;
   2b5f4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b5f8:	e7f8      	b.n	2b5ec <bt_att_req_send+0x1c>

0002b5fa <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2b5fa:	b510      	push	{r4, lr}
   2b5fc:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2b5fe:	f7e4 ffcf 	bl	105a0 <att_get>
	if (!att) {
   2b602:	b198      	cbz	r0, 2b62c <bt_att_find_req_by_user_data+0x32>
	return list->head;
   2b604:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b606:	b14b      	cbz	r3, 2b61c <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2b608:	f853 2c50 	ldr.w	r2, [r3, #-80]
   2b60c:	6991      	ldr	r1, [r2, #24]
   2b60e:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b610:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   2b614:	d009      	beq.n	2b62a <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2b616:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   2b61a:	e7f4      	b.n	2b606 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   2b61c:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2b61e:	b128      	cbz	r0, 2b62c <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   2b620:	6983      	ldr	r3, [r0, #24]
   2b622:	42a3      	cmp	r3, r4
   2b624:	d002      	beq.n	2b62c <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2b626:	6800      	ldr	r0, [r0, #0]
   2b628:	e7f9      	b.n	2b61e <bt_att_find_req_by_user_data+0x24>
   2b62a:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   2b62c:	bd10      	pop	{r4, pc}

0002b62e <gatt_ccc_changed>:
{
   2b62e:	460b      	mov	r3, r1
   2b630:	8909      	ldrh	r1, [r1, #8]
   2b632:	8a5a      	ldrh	r2, [r3, #18]
   2b634:	4291      	cmp	r1, r2
   2b636:	bf38      	it	cc
   2b638:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   2b63a:	8a9a      	ldrh	r2, [r3, #20]
   2b63c:	428a      	cmp	r2, r1
   2b63e:	d003      	beq.n	2b648 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2b640:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   2b642:	699b      	ldr	r3, [r3, #24]
   2b644:	b103      	cbz	r3, 2b648 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2b646:	4718      	bx	r3
}
   2b648:	4770      	bx	lr

0002b64a <gatt_indicate_rsp>:
{
   2b64a:	b510      	push	{r4, lr}
   2b64c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2b64e:	68a3      	ldr	r3, [r4, #8]
{
   2b650:	460a      	mov	r2, r1
	if (params->func) {
   2b652:	b10b      	cbz	r3, 2b658 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2b654:	4621      	mov	r1, r4
   2b656:	4798      	blx	r3
	params->_ref--;
   2b658:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b65a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2b65c:	3b01      	subs	r3, #1
   2b65e:	b2db      	uxtb	r3, r3
   2b660:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b662:	b122      	cbz	r2, 2b66e <gatt_indicate_rsp+0x24>
   2b664:	b91b      	cbnz	r3, 2b66e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2b666:	4620      	mov	r0, r4
}
   2b668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2b66c:	4710      	bx	r2
}
   2b66e:	bd10      	pop	{r4, pc}

0002b670 <match_uuid>:
	data->attr = attr;
   2b670:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2b672:	8091      	strh	r1, [r2, #4]
}
   2b674:	2000      	movs	r0, #0
   2b676:	4770      	bx	lr

0002b678 <gatt_write_rsp>:
{
   2b678:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2b67a:	6813      	ldr	r3, [r2, #0]
   2b67c:	4718      	bx	r3

0002b67e <atomic_get>:
   2b67e:	f3bf 8f5b 	dmb	ish
   2b682:	6800      	ldr	r0, [r0, #0]
   2b684:	f3bf 8f5b 	dmb	ish
}
   2b688:	4770      	bx	lr

0002b68a <gen_hash_m>:
{
   2b68a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b68c:	6807      	ldr	r7, [r0, #0]
   2b68e:	783d      	ldrb	r5, [r7, #0]
{
   2b690:	b089      	sub	sp, #36	; 0x24
   2b692:	4606      	mov	r6, r0
   2b694:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b696:	b10d      	cbz	r5, 2b69c <gen_hash_m+0x12>
	switch (u16->val) {
   2b698:	2501      	movs	r5, #1
   2b69a:	e014      	b.n	2b6c6 <gen_hash_m+0x3c>
   2b69c:	887b      	ldrh	r3, [r7, #2]
   2b69e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2b6a2:	d004      	beq.n	2b6ae <gen_hash_m+0x24>
   2b6a4:	d812      	bhi.n	2b6cc <gen_hash_m+0x42>
   2b6a6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2b6aa:	2b03      	cmp	r3, #3
   2b6ac:	d8f4      	bhi.n	2b698 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b6ae:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6b2:	2202      	movs	r2, #2
   2b6b4:	f10d 010a 	add.w	r1, sp, #10
   2b6b8:	4620      	mov	r0, r4
   2b6ba:	f7fe fbed 	bl	29e98 <tc_cmac_update>
   2b6be:	b9e0      	cbnz	r0, 2b6fa <gen_hash_m+0x70>
			state->err = -EINVAL;
   2b6c0:	f06f 0315 	mvn.w	r3, #21
   2b6c4:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2b6c6:	4628      	mov	r0, r5
   2b6c8:	b009      	add	sp, #36	; 0x24
   2b6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2b6cc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2b6d0:	33ff      	adds	r3, #255	; 0xff
   2b6d2:	b29b      	uxth	r3, r3
   2b6d4:	2b04      	cmp	r3, #4
   2b6d6:	d8df      	bhi.n	2b698 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b6d8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6dc:	2202      	movs	r2, #2
   2b6de:	f10d 010a 	add.w	r1, sp, #10
   2b6e2:	4620      	mov	r0, r4
   2b6e4:	f7fe fbd8 	bl	29e98 <tc_cmac_update>
   2b6e8:	2800      	cmp	r0, #0
   2b6ea:	d0e9      	beq.n	2b6c0 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2b6ec:	887b      	ldrh	r3, [r7, #2]
   2b6ee:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6f2:	2202      	movs	r2, #2
   2b6f4:	f10d 010a 	add.w	r1, sp, #10
   2b6f8:	e016      	b.n	2b728 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2b6fa:	887b      	ldrh	r3, [r7, #2]
   2b6fc:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b700:	2202      	movs	r2, #2
   2b702:	f10d 010a 	add.w	r1, sp, #10
   2b706:	4620      	mov	r0, r4
   2b708:	f7fe fbc6 	bl	29e98 <tc_cmac_update>
   2b70c:	2800      	cmp	r0, #0
   2b70e:	d0d7      	beq.n	2b6c0 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2b710:	2000      	movs	r0, #0
   2b712:	aa03      	add	r2, sp, #12
   2b714:	6877      	ldr	r7, [r6, #4]
   2b716:	9000      	str	r0, [sp, #0]
   2b718:	2313      	movs	r3, #19
   2b71a:	4631      	mov	r1, r6
   2b71c:	47b8      	blx	r7
		if (len < 0) {
   2b71e:	1e02      	subs	r2, r0, #0
   2b720:	da01      	bge.n	2b726 <gen_hash_m+0x9c>
			state->err = len;
   2b722:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b724:	e7cf      	b.n	2b6c6 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2b726:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b728:	4620      	mov	r0, r4
   2b72a:	f7fe fbb5 	bl	29e98 <tc_cmac_update>
   2b72e:	2800      	cmp	r0, #0
   2b730:	d1b2      	bne.n	2b698 <gen_hash_m+0xe>
   2b732:	e7c5      	b.n	2b6c0 <gen_hash_m+0x36>

0002b734 <bt_addr_le_cmp>:
   2b734:	2207      	movs	r2, #7
   2b736:	f7fe bde8 	b.w	2a30a <memcmp>

0002b73a <find_ccc_cfg>:
{
   2b73a:	b573      	push	{r0, r1, r4, r5, r6, lr}
						    &cfg->peer)) {
   2b73c:	1c4a      	adds	r2, r1, #1
{
   2b73e:	460c      	mov	r4, r1
		if (conn) {
   2b740:	4605      	mov	r5, r0
   2b742:	b948      	cbnz	r0, 2b758 <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2b744:	9000      	str	r0, [sp, #0]
   2b746:	4669      	mov	r1, sp
   2b748:	f8cd 0003 	str.w	r0, [sp, #3]
   2b74c:	4610      	mov	r0, r2
   2b74e:	f7ff fff1 	bl	2b734 <bt_addr_le_cmp>
   2b752:	b930      	cbnz	r0, 2b762 <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2b754:	4626      	mov	r6, r4
   2b756:	e00e      	b.n	2b776 <find_ccc_cfg+0x3c>
   2b758:	7809      	ldrb	r1, [r1, #0]
   2b75a:	f7ff f9e7 	bl	2ab2c <bt_conn_is_peer_addr_le>
   2b75e:	2800      	cmp	r0, #0
   2b760:	d1f8      	bne.n	2b754 <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2b762:	f104 060a 	add.w	r6, r4, #10
						    &cfg->peer)) {
   2b766:	f104 020b 	add.w	r2, r4, #11
		if (conn) {
   2b76a:	b13d      	cbz	r5, 2b77c <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2b76c:	7aa1      	ldrb	r1, [r4, #10]
   2b76e:	4628      	mov	r0, r5
   2b770:	f7ff f9dc 	bl	2ab2c <bt_conn_is_peer_addr_le>
   2b774:	b158      	cbz	r0, 2b78e <find_ccc_cfg+0x54>
}
   2b776:	4630      	mov	r0, r6
   2b778:	b002      	add	sp, #8
   2b77a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2b77c:	4669      	mov	r1, sp
   2b77e:	4610      	mov	r0, r2
   2b780:	9500      	str	r5, [sp, #0]
   2b782:	f8cd 5003 	str.w	r5, [sp, #3]
   2b786:	f7ff ffd5 	bl	2b734 <bt_addr_le_cmp>
   2b78a:	2800      	cmp	r0, #0
   2b78c:	d0f3      	beq.n	2b776 <find_ccc_cfg+0x3c>
	return NULL;
   2b78e:	2600      	movs	r6, #0
   2b790:	e7f1      	b.n	2b776 <find_ccc_cfg+0x3c>

0002b792 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2b792:	2207      	movs	r2, #7
   2b794:	f7fe bde2 	b.w	2a35c <memcpy>

0002b798 <gatt_sub_free>:
{
   2b798:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   2b79a:	2300      	movs	r3, #0
   2b79c:	4669      	mov	r1, sp
   2b79e:	3001      	adds	r0, #1
   2b7a0:	9300      	str	r3, [sp, #0]
   2b7a2:	f8cd 3003 	str.w	r3, [sp, #3]
   2b7a6:	f7ff fff4 	bl	2b792 <bt_addr_le_copy>
}
   2b7aa:	b003      	add	sp, #12
   2b7ac:	f85d fb04 	ldr.w	pc, [sp], #4

0002b7b0 <gatt_sub_remove>:
{
   2b7b0:	b570      	push	{r4, r5, r6, lr}
   2b7b2:	460c      	mov	r4, r1
	if (params) {
   2b7b4:	4619      	mov	r1, r3
   2b7b6:	b16b      	cbz	r3, 2b7d4 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2b7b8:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   2b7bc:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   2b7be:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   2b7c0:	b97a      	cbnz	r2, 2b7e2 <gatt_sub_remove+0x32>
   2b7c2:	42ae      	cmp	r6, r5
	list->head = node;
   2b7c4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2b7c6:	d100      	bne.n	2b7ca <gatt_sub_remove+0x1a>
	list->tail = node;
   2b7c8:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2b7ca:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2b7cc:	680d      	ldr	r5, [r1, #0]
   2b7ce:	614b      	str	r3, [r1, #20]
   2b7d0:	461a      	mov	r2, r3
   2b7d2:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   2b7d4:	68a3      	ldr	r3, [r4, #8]
   2b7d6:	b94b      	cbnz	r3, 2b7ec <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   2b7d8:	4620      	mov	r0, r4
}
   2b7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   2b7de:	f7ff bfdb 	b.w	2b798 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   2b7e2:	42ae      	cmp	r6, r5
	parent->next = child;
   2b7e4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2b7e6:	bf08      	it	eq
   2b7e8:	60e2      	streq	r2, [r4, #12]
}
   2b7ea:	e7ee      	b.n	2b7ca <gatt_sub_remove+0x1a>
}
   2b7ec:	bd70      	pop	{r4, r5, r6, pc}

0002b7ee <gatt_req_send>:
{
   2b7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b7f2:	4606      	mov	r6, r0
   2b7f4:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2b7f6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2b7fa:	2100      	movs	r1, #0
{
   2b7fc:	f89d a020 	ldrb.w	sl, [sp, #32]
   2b800:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   2b804:	4617      	mov	r7, r2
   2b806:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2b808:	f7e5 fd7c 	bl	11304 <bt_att_req_alloc>
	if (!req) {
   2b80c:	4604      	mov	r4, r0
   2b80e:	b920      	cbnz	r0, 2b81a <gatt_req_send+0x2c>
		return -ENOMEM;
   2b810:	f06f 050b 	mvn.w	r5, #11
}
   2b814:	4628      	mov	r0, r5
   2b816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   2b81a:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   2b81e:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   2b822:	60c5      	str	r5, [r0, #12]
	req->func = func;
   2b824:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   2b828:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   2b82a:	4642      	mov	r2, r8
   2b82c:	4651      	mov	r1, sl
   2b82e:	4630      	mov	r0, r6
   2b830:	f7e5 faca 	bl	10dc8 <bt_att_create_pdu>
	if (!buf) {
   2b834:	b918      	cbnz	r0, 2b83e <gatt_req_send+0x50>
		bt_att_req_free(req);
   2b836:	4620      	mov	r0, r4
   2b838:	f7e5 fd86 	bl	11348 <bt_att_req_free>
   2b83c:	e7e8      	b.n	2b810 <gatt_req_send+0x22>
	req->buf = buf;
   2b83e:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   2b840:	463a      	mov	r2, r7
   2b842:	4641      	mov	r1, r8
   2b844:	47a8      	blx	r5
	if (err) {
   2b846:	4605      	mov	r5, r0
   2b848:	b118      	cbz	r0, 2b852 <gatt_req_send+0x64>
		bt_att_req_free(req);
   2b84a:	4620      	mov	r0, r4
   2b84c:	f7e5 fd7c 	bl	11348 <bt_att_req_free>
   2b850:	e7e0      	b.n	2b814 <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   2b852:	4621      	mov	r1, r4
   2b854:	4630      	mov	r0, r6
   2b856:	f7ff febb 	bl	2b5d0 <bt_att_req_send>
	if (err) {
   2b85a:	4605      	mov	r5, r0
   2b85c:	2800      	cmp	r0, #0
   2b85e:	d0d9      	beq.n	2b814 <gatt_req_send+0x26>
   2b860:	e7f3      	b.n	2b84a <gatt_req_send+0x5c>

0002b862 <read_included_uuid_encode>:
{
   2b862:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   2b864:	2102      	movs	r1, #2
   2b866:	3008      	adds	r0, #8
   2b868:	4614      	mov	r4, r2
   2b86a:	f001 f8e0 	bl	2ca2e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2b86e:	8963      	ldrh	r3, [r4, #10]
   2b870:	8003      	strh	r3, [r0, #0]
}
   2b872:	2000      	movs	r0, #0
   2b874:	bd10      	pop	{r4, pc}

0002b876 <gatt_find_info_encode>:
{
   2b876:	b510      	push	{r4, lr}
   2b878:	2104      	movs	r1, #4
   2b87a:	3008      	adds	r0, #8
   2b87c:	4614      	mov	r4, r2
   2b87e:	f001 f8d6 	bl	2ca2e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b882:	8923      	ldrh	r3, [r4, #8]
   2b884:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b886:	89e3      	ldrh	r3, [r4, #14]
   2b888:	8043      	strh	r3, [r0, #2]
}
   2b88a:	2000      	movs	r0, #0
   2b88c:	bd10      	pop	{r4, pc}

0002b88e <gatt_cancel_encode>:
{
   2b88e:	b508      	push	{r3, lr}
   2b890:	2101      	movs	r1, #1
   2b892:	3008      	adds	r0, #8
   2b894:	f001 f8cb 	bl	2ca2e <net_buf_simple_add>
   2b898:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   2b89a:	2000      	movs	r0, #0
   2b89c:	7018      	strb	r0, [r3, #0]
}
   2b89e:	bd08      	pop	{r3, pc}

0002b8a0 <gatt_exec_encode>:
{
   2b8a0:	b508      	push	{r3, lr}
   2b8a2:	2101      	movs	r1, #1
   2b8a4:	3008      	adds	r0, #8
   2b8a6:	f001 f8c2 	bl	2ca2e <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   2b8aa:	2301      	movs	r3, #1
   2b8ac:	7003      	strb	r3, [r0, #0]
}
   2b8ae:	2000      	movs	r0, #0
   2b8b0:	bd08      	pop	{r3, pc}

0002b8b2 <gatt_read_group_encode>:
{
   2b8b2:	b538      	push	{r3, r4, r5, lr}
   2b8b4:	f100 0408 	add.w	r4, r0, #8
   2b8b8:	2104      	movs	r1, #4
   2b8ba:	4620      	mov	r0, r4
   2b8bc:	4615      	mov	r5, r2
   2b8be:	f001 f8b6 	bl	2ca2e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b8c2:	892b      	ldrh	r3, [r5, #8]
   2b8c4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b8c6:	89eb      	ldrh	r3, [r5, #14]
   2b8c8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2b8ca:	7c2b      	ldrb	r3, [r5, #16]
   2b8cc:	b933      	cbnz	r3, 2b8dc <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2b8ce:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2b8d2:	4620      	mov	r0, r4
   2b8d4:	f001 f8c2 	bl	2ca5c <net_buf_simple_add_le16>
}
   2b8d8:	2000      	movs	r0, #0
   2b8da:	bd38      	pop	{r3, r4, r5, pc}
   2b8dc:	f642 0101 	movw	r1, #10241	; 0x2801
   2b8e0:	e7f7      	b.n	2b8d2 <gatt_read_group_encode+0x20>

0002b8e2 <gatt_read_type_encode>:
{
   2b8e2:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2b8e4:	f100 0408 	add.w	r4, r0, #8
   2b8e8:	2104      	movs	r1, #4
   2b8ea:	4620      	mov	r0, r4
   2b8ec:	4615      	mov	r5, r2
   2b8ee:	f001 f89e 	bl	2ca2e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b8f2:	892b      	ldrh	r3, [r5, #8]
   2b8f4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b8f6:	89eb      	ldrh	r3, [r5, #14]
   2b8f8:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2b8fa:	7c2b      	ldrb	r3, [r5, #16]
   2b8fc:	2b02      	cmp	r3, #2
   2b8fe:	d004      	beq.n	2b90a <gatt_read_type_encode+0x28>
   2b900:	2b03      	cmp	r3, #3
   2b902:	d009      	beq.n	2b918 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2b904:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2b906:	8859      	ldrh	r1, [r3, #2]
   2b908:	e001      	b.n	2b90e <gatt_read_type_encode+0x2c>
   2b90a:	f642 0102 	movw	r1, #10242	; 0x2802
   2b90e:	4620      	mov	r0, r4
   2b910:	f001 f8a4 	bl	2ca5c <net_buf_simple_add_le16>
}
   2b914:	2000      	movs	r0, #0
   2b916:	bd38      	pop	{r3, r4, r5, pc}
   2b918:	f642 0103 	movw	r1, #10243	; 0x2803
   2b91c:	e7f7      	b.n	2b90e <gatt_read_type_encode+0x2c>

0002b91e <gatt_write_encode>:
{
   2b91e:	b530      	push	{r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2b920:	2102      	movs	r1, #2
   2b922:	b085      	sub	sp, #20
   2b924:	4605      	mov	r5, r0
   2b926:	3008      	adds	r0, #8
   2b928:	4614      	mov	r4, r2
   2b92a:	f001 f880 	bl	2ca2e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2b92e:	88a3      	ldrh	r3, [r4, #4]
   2b930:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   2b932:	2300      	movs	r3, #0
   2b934:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2b938:	2200      	movs	r2, #0
   2b93a:	2300      	movs	r3, #0
   2b93c:	e9cd 2300 	strd	r2, r3, [sp]
   2b940:	89a1      	ldrh	r1, [r4, #12]
   2b942:	68a2      	ldr	r2, [r4, #8]
   2b944:	4628      	mov	r0, r5
   2b946:	f7f5 f9a1 	bl	20c8c <net_buf_append_bytes>
	if (write != params->length) {
   2b94a:	89a3      	ldrh	r3, [r4, #12]
		return -ENOMEM;
   2b94c:	4283      	cmp	r3, r0
}
   2b94e:	bf14      	ite	ne
   2b950:	f06f 000b 	mvnne.w	r0, #11
   2b954:	2000      	moveq	r0, #0
   2b956:	b005      	add	sp, #20
   2b958:	bd30      	pop	{r4, r5, pc}

0002b95a <gatt_prepare_write_encode>:
{
   2b95a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b95c:	4606      	mov	r6, r0
   2b95e:	460c      	mov	r4, r1
   2b960:	3008      	adds	r0, #8
   2b962:	2104      	movs	r1, #4
   2b964:	4615      	mov	r5, r2
   2b966:	f001 f862 	bl	2ca2e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2b96a:	88ab      	ldrh	r3, [r5, #4]
   2b96c:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   2b96e:	88eb      	ldrh	r3, [r5, #6]
   2b970:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   2b972:	2300      	movs	r3, #0
   2b974:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2b978:	3c04      	subs	r4, #4
   2b97a:	2300      	movs	r3, #0
   2b97c:	2200      	movs	r2, #0
   2b97e:	e9cd 2300 	strd	r2, r3, [sp]
   2b982:	4621      	mov	r1, r4
   2b984:	68aa      	ldr	r2, [r5, #8]
   2b986:	4630      	mov	r0, r6
   2b988:	f7f5 f980 	bl	20c8c <net_buf_append_bytes>
		return -ENOMEM;
   2b98c:	4284      	cmp	r4, r0
}
   2b98e:	bf14      	ite	ne
   2b990:	f06f 000b 	mvnne.w	r0, #11
   2b994:	2000      	moveq	r0, #0
   2b996:	b004      	add	sp, #16
   2b998:	bd70      	pop	{r4, r5, r6, pc}

0002b99a <z_log_msg2_static_create.constprop.0>:
   2b99a:	2300      	movs	r3, #0
   2b99c:	f7fb bfd0 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002b9a0 <clear_cf_cfg>:
{
   2b9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b9a2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2b9a4:	2500      	movs	r5, #0
   2b9a6:	4669      	mov	r1, sp
   2b9a8:	3001      	adds	r0, #1
   2b9aa:	9500      	str	r5, [sp, #0]
   2b9ac:	f8cd 5003 	str.w	r5, [sp, #3]
   2b9b0:	f7ff feef 	bl	2b792 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2b9b4:	f104 0008 	add.w	r0, r4, #8
   2b9b8:	2201      	movs	r2, #1
   2b9ba:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b9bc:	340c      	adds	r4, #12
   2b9be:	f7fe fcd8 	bl	2a372 <memset>
   2b9c2:	f3bf 8f5b 	dmb	ish
   2b9c6:	e854 3f00 	ldrex	r3, [r4]
   2b9ca:	e844 5200 	strex	r2, r5, [r4]
   2b9ce:	2a00      	cmp	r2, #0
   2b9d0:	d1f9      	bne.n	2b9c6 <clear_cf_cfg+0x26>
   2b9d2:	f3bf 8f5b 	dmb	ish
}
   2b9d6:	b003      	add	sp, #12
   2b9d8:	bd30      	pop	{r4, r5, pc}

0002b9da <gatt_find_type_encode>:
{
   2b9da:	b538      	push	{r3, r4, r5, lr}
   2b9dc:	f100 0508 	add.w	r5, r0, #8
   2b9e0:	2106      	movs	r1, #6
   2b9e2:	4628      	mov	r0, r5
   2b9e4:	4614      	mov	r4, r2
   2b9e6:	f001 f822 	bl	2ca2e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b9ea:	8923      	ldrh	r3, [r4, #8]
   2b9ec:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b9ee:	89e3      	ldrh	r3, [r4, #14]
   2b9f0:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2b9f2:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   2b9f4:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   2b9f6:	2b00      	cmp	r3, #0
   2b9f8:	f642 0301 	movw	r3, #10241	; 0x2801
   2b9fc:	bf08      	it	eq
   2b9fe:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   2ba02:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2ba04:	780b      	ldrb	r3, [r1, #0]
   2ba06:	b11b      	cbz	r3, 2ba10 <gatt_find_type_encode+0x36>
   2ba08:	2b02      	cmp	r3, #2
   2ba0a:	d006      	beq.n	2ba1a <gatt_find_type_encode+0x40>
}
   2ba0c:	2000      	movs	r0, #0
   2ba0e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2ba10:	8849      	ldrh	r1, [r1, #2]
   2ba12:	4628      	mov	r0, r5
   2ba14:	f001 f822 	bl	2ca5c <net_buf_simple_add_le16>
}
   2ba18:	e7f8      	b.n	2ba0c <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ba1a:	2210      	movs	r2, #16
   2ba1c:	3101      	adds	r1, #1
   2ba1e:	4628      	mov	r0, r5
   2ba20:	f001 f80b 	bl	2ca3a <net_buf_simple_add_mem>
   2ba24:	e7f2      	b.n	2ba0c <gatt_find_type_encode+0x32>

0002ba26 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ba26:	2301      	movs	r3, #1
   2ba28:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ba2a:	f3bf 8f5b 	dmb	ish
   2ba2e:	e850 2f00 	ldrex	r2, [r0]
   2ba32:	431a      	orrs	r2, r3
   2ba34:	e840 2100 	strex	r1, r2, [r0]
   2ba38:	2900      	cmp	r1, #0
   2ba3a:	d1f8      	bne.n	2ba2e <atomic_set_bit+0x8>
   2ba3c:	f3bf 8f5b 	dmb	ish
}
   2ba40:	4770      	bx	lr

0002ba42 <sc_restore_rsp>:
{
   2ba42:	b538      	push	{r3, r4, r5, lr}
   2ba44:	4605      	mov	r5, r0
   2ba46:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   2ba48:	f7e5 fdb4 	bl	115b4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2ba4c:	b130      	cbz	r0, 2ba5c <sc_restore_rsp+0x1a>
   2ba4e:	7a03      	ldrb	r3, [r0, #8]
   2ba50:	07db      	lsls	r3, r3, #31
   2ba52:	d503      	bpl.n	2ba5c <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2ba54:	2100      	movs	r1, #0
   2ba56:	300c      	adds	r0, #12
   2ba58:	f7ff ffe5 	bl	2ba26 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2ba5c:	b964      	cbnz	r4, 2ba78 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2ba5e:	7a28      	ldrb	r0, [r5, #8]
   2ba60:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2ba64:	f7e5 fdd4 	bl	11610 <find_sc_cfg>
		if (sc_cfg) {
   2ba68:	b130      	cbz	r0, 2ba78 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2ba6a:	4621      	mov	r1, r4
   2ba6c:	2204      	movs	r2, #4
}
   2ba6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   2ba72:	3008      	adds	r0, #8
   2ba74:	f7fe bc7d 	b.w	2a372 <memset>
}
   2ba78:	bd38      	pop	{r3, r4, r5, pc}

0002ba7a <gatt_write_ccc_buf>:
{
   2ba7a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2ba7c:	f100 0508 	add.w	r5, r0, #8
   2ba80:	2102      	movs	r1, #2
   2ba82:	4628      	mov	r0, r5
   2ba84:	4614      	mov	r4, r2
   2ba86:	f000 ffd2 	bl	2ca2e <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2ba8a:	8963      	ldrh	r3, [r4, #10]
   2ba8c:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2ba8e:	89a1      	ldrh	r1, [r4, #12]
   2ba90:	4628      	mov	r0, r5
   2ba92:	f000 ffe3 	bl	2ca5c <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   2ba96:	f104 0010 	add.w	r0, r4, #16
   2ba9a:	2102      	movs	r1, #2
   2ba9c:	f7ff ffc3 	bl	2ba26 <atomic_set_bit>
}
   2baa0:	2000      	movs	r0, #0
   2baa2:	bd38      	pop	{r3, r4, r5, pc}

0002baa4 <gatt_write_ccc_rsp>:
{
   2baa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2baa8:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2baaa:	f3bf 8f5b 	dmb	ish
   2baae:	4606      	mov	r6, r0
   2bab0:	460d      	mov	r5, r1
   2bab2:	f104 0310 	add.w	r3, r4, #16
   2bab6:	e853 2f00 	ldrex	r2, [r3]
   2baba:	f022 0204 	bic.w	r2, r2, #4
   2babe:	e843 2100 	strex	r1, r2, [r3]
   2bac2:	2900      	cmp	r1, #0
   2bac4:	d1f7      	bne.n	2bab6 <gatt_write_ccc_rsp+0x12>
   2bac6:	f3bf 8f5b 	dmb	ish
	if (err) {
   2baca:	b1dd      	cbz	r5, 2bb04 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   2bacc:	f7e5 fdc0 	bl	11650 <gatt_sub_find>
		if (!sub) {
   2bad0:	4601      	mov	r1, r0
   2bad2:	b300      	cbz	r0, 2bb16 <gatt_write_ccc_rsp+0x72>
	return list->head;
   2bad4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bad6:	b143      	cbz	r3, 2baea <gatt_write_ccc_rsp+0x46>
	return node->next;
   2bad8:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2bada:	f104 0014 	add.w	r0, r4, #20
   2bade:	4283      	cmp	r3, r0
   2bae0:	d10b      	bne.n	2bafa <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   2bae2:	4623      	mov	r3, r4
   2bae4:	4630      	mov	r0, r6
   2bae6:	f7ff fe63 	bl	2b7b0 <gatt_sub_remove>
	if (params->write) {
   2baea:	6863      	ldr	r3, [r4, #4]
   2baec:	b19b      	cbz	r3, 2bb16 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   2baee:	4629      	mov	r1, r5
   2baf0:	4630      	mov	r0, r6
   2baf2:	2200      	movs	r2, #0
}
   2baf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   2baf8:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bafa:	2a00      	cmp	r2, #0
   2bafc:	d0f5      	beq.n	2baea <gatt_write_ccc_rsp+0x46>
	return node->next;
   2bafe:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bb00:	6812      	ldr	r2, [r2, #0]
   2bb02:	e7ec      	b.n	2bade <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   2bb04:	89a3      	ldrh	r3, [r4, #12]
   2bb06:	2b00      	cmp	r3, #0
   2bb08:	d1ef      	bne.n	2baea <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   2bb0a:	6827      	ldr	r7, [r4, #0]
   2bb0c:	462b      	mov	r3, r5
   2bb0e:	462a      	mov	r2, r5
   2bb10:	4621      	mov	r1, r4
   2bb12:	47b8      	blx	r7
   2bb14:	e7e9      	b.n	2baea <gatt_write_ccc_rsp+0x46>
}
   2bb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bb1a <sc_clear>:
{
   2bb1a:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2bb1c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2bb20:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2bb22:	4631      	mov	r1, r6
   2bb24:	7a00      	ldrb	r0, [r0, #8]
   2bb26:	f7fe fe1b 	bl	2a760 <bt_addr_le_is_bonded>
   2bb2a:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2bb2c:	4631      	mov	r1, r6
   2bb2e:	f7e5 fd6f 	bl	11610 <find_sc_cfg>
	if (!cfg) {
   2bb32:	b128      	cbz	r0, 2bb40 <sc_clear+0x26>
}
   2bb34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   2bb38:	220c      	movs	r2, #12
   2bb3a:	2100      	movs	r1, #0
   2bb3c:	f7fe bc19 	b.w	2a372 <memset>
}
   2bb40:	bd70      	pop	{r4, r5, r6, pc}

0002bb42 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2bb42:	2a02      	cmp	r2, #2
{
   2bb44:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2bb46:	d108      	bne.n	2bb5a <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2bb48:	2300      	movs	r3, #0
   2bb4a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2bb4e:	461a      	mov	r2, r3
   2bb50:	7a00      	ldrb	r0, [r0, #8]
   2bb52:	f7e5 fe27 	bl	117a4 <sc_save>
}
   2bb56:	2002      	movs	r0, #2
   2bb58:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2bb5a:	f7ff ffde 	bl	2bb1a <sc_clear>
   2bb5e:	e7fa      	b.n	2bb56 <sc_ccc_cfg_write+0x14>

0002bb60 <read_central_addr_res>:
{
   2bb60:	b513      	push	{r0, r1, r4, lr}
   2bb62:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bb66:	4610      	mov	r0, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   2bb68:	2201      	movs	r2, #1
	if (offset > value_len) {
   2bb6a:	4291      	cmp	r1, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   2bb6c:	f88d 2007 	strb.w	r2, [sp, #7]
	if (offset > value_len) {
   2bb70:	d80c      	bhi.n	2bb8c <read_central_addr_res+0x2c>
	len = MIN(buf_len, value_len - offset);
   2bb72:	1a54      	subs	r4, r2, r1
   2bb74:	429c      	cmp	r4, r3
   2bb76:	bfa8      	it	ge
   2bb78:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2bb7a:	f10d 0307 	add.w	r3, sp, #7
   2bb7e:	4622      	mov	r2, r4
   2bb80:	4419      	add	r1, r3
   2bb82:	f7fe fbeb 	bl	2a35c <memcpy>
}
   2bb86:	4620      	mov	r0, r4
   2bb88:	b002      	add	sp, #8
   2bb8a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bb8c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2bb90:	e7f9      	b.n	2bb86 <read_central_addr_res+0x26>

0002bb92 <read_appearance>:
{
   2bb92:	b513      	push	{r0, r1, r4, lr}
   2bb94:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bb98:	4610      	mov	r0, r2
	if (offset > value_len) {
   2bb9a:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2bb9c:	f240 3241 	movw	r2, #833	; 0x341
   2bba0:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2bba4:	d80d      	bhi.n	2bbc2 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2bba6:	f1c1 0402 	rsb	r4, r1, #2
   2bbaa:	429c      	cmp	r4, r3
   2bbac:	bfa8      	it	ge
   2bbae:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2bbb0:	f10d 0306 	add.w	r3, sp, #6
   2bbb4:	4622      	mov	r2, r4
   2bbb6:	4419      	add	r1, r3
   2bbb8:	f7fe fbd0 	bl	2a35c <memcpy>
}
   2bbbc:	4620      	mov	r0, r4
   2bbbe:	b002      	add	sp, #8
   2bbc0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bbc2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2bbc6:	e7f9      	b.n	2bbbc <read_appearance+0x2a>

0002bbc8 <read_name>:
{
   2bbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bbcc:	4698      	mov	r8, r3
   2bbce:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2bbd2:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2bbd4:	f7e2 f91c 	bl	de10 <bt_get_name>
   2bbd8:	4607      	mov	r7, r0
				 strlen(name));
   2bbda:	f7fe fb69 	bl	2a2b0 <strlen>
	if (offset > value_len) {
   2bbde:	b283      	uxth	r3, r0
   2bbe0:	42b3      	cmp	r3, r6
   2bbe2:	d30c      	bcc.n	2bbfe <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2bbe4:	1b9c      	subs	r4, r3, r6
   2bbe6:	4544      	cmp	r4, r8
   2bbe8:	bfa8      	it	ge
   2bbea:	4644      	movge	r4, r8
   2bbec:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2bbee:	4622      	mov	r2, r4
   2bbf0:	19b9      	adds	r1, r7, r6
   2bbf2:	4628      	mov	r0, r5
   2bbf4:	f7fe fbb2 	bl	2a35c <memcpy>
}
   2bbf8:	4620      	mov	r0, r4
   2bbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bbfe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2bc02:	e7f9      	b.n	2bbf8 <read_name+0x30>

0002bc04 <cf_read>:
{
   2bc04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bc06:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2bc08:	2300      	movs	r3, #0
{
   2bc0a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2bc0e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2bc12:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2bc14:	f7e5 fcce 	bl	115b4 <find_cf_cfg>
	if (cfg) {
   2bc18:	b128      	cbz	r0, 2bc26 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2bc1a:	f100 0108 	add.w	r1, r0, #8
   2bc1e:	2201      	movs	r2, #1
   2bc20:	a801      	add	r0, sp, #4
   2bc22:	f7fe fb9b 	bl	2a35c <memcpy>
	if (offset > value_len) {
   2bc26:	2e01      	cmp	r6, #1
   2bc28:	d80d      	bhi.n	2bc46 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2bc2a:	f1c6 0401 	rsb	r4, r6, #1
   2bc2e:	42bc      	cmp	r4, r7
   2bc30:	bfa8      	it	ge
   2bc32:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2bc34:	ab01      	add	r3, sp, #4
   2bc36:	4622      	mov	r2, r4
   2bc38:	1999      	adds	r1, r3, r6
   2bc3a:	4628      	mov	r0, r5
   2bc3c:	f7fe fb8e 	bl	2a35c <memcpy>
}
   2bc40:	4620      	mov	r0, r4
   2bc42:	b003      	add	sp, #12
   2bc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bc46:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2bc4a:	e7f9      	b.n	2bc40 <cf_read+0x3c>

0002bc4c <bt_gatt_attr_read_service>:
{
   2bc4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2bc4e:	68c9      	ldr	r1, [r1, #12]
{
   2bc50:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2bc54:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2bc56:	780b      	ldrb	r3, [r1, #0]
{
   2bc58:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2bc5a:	b993      	cbnz	r3, 2bc82 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2bc5c:	884b      	ldrh	r3, [r1, #2]
   2bc5e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2bc62:	2d02      	cmp	r5, #2
   2bc64:	d819      	bhi.n	2bc9a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2bc66:	f1c5 0202 	rsb	r2, r5, #2
   2bc6a:	4294      	cmp	r4, r2
   2bc6c:	bfa8      	it	ge
   2bc6e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2bc70:	f10d 0306 	add.w	r3, sp, #6
   2bc74:	4622      	mov	r2, r4
   2bc76:	1959      	adds	r1, r3, r5
   2bc78:	f7fe fb70 	bl	2a35c <memcpy>
}
   2bc7c:	4620      	mov	r0, r4
   2bc7e:	b003      	add	sp, #12
   2bc80:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2bc82:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2bc84:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2bc88:	d807      	bhi.n	2bc9a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2bc8a:	f1c5 0210 	rsb	r2, r5, #16
   2bc8e:	4294      	cmp	r4, r2
   2bc90:	bfa8      	it	ge
   2bc92:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2bc94:	4622      	mov	r2, r4
   2bc96:	4429      	add	r1, r5
   2bc98:	e7ee      	b.n	2bc78 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bc9a:	f06f 0406 	mvn.w	r4, #6
   2bc9e:	e7ed      	b.n	2bc7c <bt_gatt_attr_read_service+0x30>

0002bca0 <bt_gatt_attr_read_ccc>:
{
   2bca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2bca2:	68c9      	ldr	r1, [r1, #12]
{
   2bca4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2bca8:	4615      	mov	r5, r2
   2bcaa:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2bcac:	f7ff fd45 	bl	2b73a <find_ccc_cfg>
	if (cfg) {
   2bcb0:	b100      	cbz	r0, 2bcb4 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2bcb2:	8900      	ldrh	r0, [r0, #8]
   2bcb4:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2bcb8:	2e02      	cmp	r6, #2
   2bcba:	d80e      	bhi.n	2bcda <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2bcbc:	f1c6 0402 	rsb	r4, r6, #2
   2bcc0:	42bc      	cmp	r4, r7
   2bcc2:	bfa8      	it	ge
   2bcc4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2bcc6:	f10d 0306 	add.w	r3, sp, #6
   2bcca:	4622      	mov	r2, r4
   2bccc:	1999      	adds	r1, r3, r6
   2bcce:	4628      	mov	r0, r5
   2bcd0:	f7fe fb44 	bl	2a35c <memcpy>
}
   2bcd4:	4620      	mov	r0, r4
   2bcd6:	b003      	add	sp, #12
   2bcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bcda:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2bcde:	e7f9      	b.n	2bcd4 <bt_gatt_attr_read_ccc+0x34>

0002bce0 <bt_gatt_attr_read>:
{
   2bce0:	b538      	push	{r3, r4, r5, lr}
   2bce2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bce6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2bcea:	42a9      	cmp	r1, r5
{
   2bcec:	4610      	mov	r0, r2
	if (offset > value_len) {
   2bcee:	d80b      	bhi.n	2bd08 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2bcf0:	1a6d      	subs	r5, r5, r1
   2bcf2:	429d      	cmp	r5, r3
   2bcf4:	bfa8      	it	ge
   2bcf6:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2bcf8:	9b05      	ldr	r3, [sp, #20]
   2bcfa:	b2ad      	uxth	r5, r5
   2bcfc:	462a      	mov	r2, r5
   2bcfe:	4419      	add	r1, r3
   2bd00:	f7fe fb2c 	bl	2a35c <memcpy>
}
   2bd04:	4628      	mov	r0, r5
   2bd06:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bd08:	f06f 0506 	mvn.w	r5, #6
   2bd0c:	e7fa      	b.n	2bd04 <bt_gatt_attr_read+0x24>

0002bd0e <bt_gatt_attr_value_handle>:
{
   2bd0e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bd10:	4604      	mov	r4, r0
   2bd12:	b910      	cbnz	r0, 2bd1a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2bd14:	2000      	movs	r0, #0
}
   2bd16:	b002      	add	sp, #8
   2bd18:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bd1a:	2300      	movs	r3, #0
   2bd1c:	f88d 3004 	strb.w	r3, [sp, #4]
   2bd20:	6800      	ldr	r0, [r0, #0]
   2bd22:	f642 0303 	movw	r3, #10243	; 0x2803
   2bd26:	a901      	add	r1, sp, #4
   2bd28:	f8ad 3006 	strh.w	r3, [sp, #6]
   2bd2c:	f7fe fbde 	bl	2a4ec <bt_uuid_cmp>
   2bd30:	2800      	cmp	r0, #0
   2bd32:	d1ef      	bne.n	2bd14 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2bd34:	68e3      	ldr	r3, [r4, #12]
   2bd36:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2bd38:	2800      	cmp	r0, #0
   2bd3a:	d1ec      	bne.n	2bd16 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2bd3c:	4620      	mov	r0, r4
   2bd3e:	f7e5 fea7 	bl	11a90 <bt_gatt_attr_get_handle>
   2bd42:	3001      	adds	r0, #1
   2bd44:	b280      	uxth	r0, r0
	return handle;
   2bd46:	e7e6      	b.n	2bd16 <bt_gatt_attr_value_handle+0x8>

0002bd48 <bt_gatt_attr_read_chrc>:
{
   2bd48:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2bd4a:	68cf      	ldr	r7, [r1, #12]
{
   2bd4c:	b087      	sub	sp, #28
   2bd4e:	4608      	mov	r0, r1
   2bd50:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2bd52:	79bb      	ldrb	r3, [r7, #6]
   2bd54:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2bd58:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2bd5c:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bd5e:	f7ff ffd6 	bl	2bd0e <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bd62:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bd64:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bd68:	780b      	ldrb	r3, [r1, #0]
   2bd6a:	b99b      	cbnz	r3, 2bd94 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2bd6c:	884b      	ldrh	r3, [r1, #2]
   2bd6e:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2bd72:	2105      	movs	r1, #5
	if (offset > value_len) {
   2bd74:	42b1      	cmp	r1, r6
   2bd76:	d315      	bcc.n	2bda4 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2bd78:	1b89      	subs	r1, r1, r6
   2bd7a:	42a1      	cmp	r1, r4
   2bd7c:	bfa8      	it	ge
   2bd7e:	4621      	movge	r1, r4
   2bd80:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2bd82:	ab01      	add	r3, sp, #4
   2bd84:	4622      	mov	r2, r4
   2bd86:	1999      	adds	r1, r3, r6
   2bd88:	4628      	mov	r0, r5
   2bd8a:	f7fe fae7 	bl	2a35c <memcpy>
}
   2bd8e:	4620      	mov	r0, r4
   2bd90:	b007      	add	sp, #28
   2bd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2bd94:	3101      	adds	r1, #1
   2bd96:	2210      	movs	r2, #16
   2bd98:	f10d 0007 	add.w	r0, sp, #7
   2bd9c:	f7fe fade 	bl	2a35c <memcpy>
		value_len += 16U;
   2bda0:	2113      	movs	r1, #19
   2bda2:	e7e7      	b.n	2bd74 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bda4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2bda8:	e7f1      	b.n	2bd8e <bt_gatt_attr_read_chrc+0x46>

0002bdaa <bt_gatt_foreach_attr>:
{
   2bdaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2bdac:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2bdb0:	2300      	movs	r3, #0
   2bdb2:	9300      	str	r3, [sp, #0]
   2bdb4:	461a      	mov	r2, r3
   2bdb6:	f7e5 fe9b 	bl	11af0 <bt_gatt_foreach_attr_type>
}
   2bdba:	b005      	add	sp, #20
   2bdbc:	f85d fb04 	ldr.w	pc, [sp], #4

0002bdc0 <db_hash_process>:
	db_hash_gen(true);
   2bdc0:	f7e5 bef0 	b.w	11ba4 <db_hash_gen.constprop.0>

0002bdc4 <bt_gatt_check_perm>:
{
   2bdc4:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2bdc6:	07d4      	lsls	r4, r2, #31
{
   2bdc8:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bdca:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2bdcc:	d504      	bpl.n	2bdd8 <bt_gatt_check_perm+0x14>
   2bdce:	f010 0f15 	tst.w	r0, #21
   2bdd2:	d01e      	beq.n	2be12 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bdd4:	684b      	ldr	r3, [r1, #4]
   2bdd6:	b1e3      	cbz	r3, 2be12 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2bdd8:	0793      	lsls	r3, r2, #30
   2bdda:	d504      	bpl.n	2bde6 <bt_gatt_check_perm+0x22>
   2bddc:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2bde0:	d019      	beq.n	2be16 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2bde2:	688b      	ldr	r3, [r1, #8]
   2bde4:	b1bb      	cbz	r3, 2be16 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2bde6:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2bdea:	f014 0f30 	tst.w	r4, #48	; 0x30
   2bdee:	d103      	bne.n	2bdf8 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2bdf0:	f014 000c 	ands.w	r0, r4, #12
   2bdf4:	d107      	bne.n	2be06 <bt_gatt_check_perm+0x42>
}
   2bdf6:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2bdf8:	4628      	mov	r0, r5
   2bdfa:	f7fe fe95 	bl	2ab28 <bt_conn_get_security>
   2bdfe:	2802      	cmp	r0, #2
   2be00:	d8f6      	bhi.n	2bdf0 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   2be02:	2005      	movs	r0, #5
   2be04:	e7f7      	b.n	2bdf6 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2be06:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2be08:	2b00      	cmp	r3, #0
   2be0a:	bf14      	ite	ne
   2be0c:	2000      	movne	r0, #0
   2be0e:	200f      	moveq	r0, #15
   2be10:	e7f1      	b.n	2bdf6 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2be12:	2002      	movs	r0, #2
   2be14:	e7ef      	b.n	2bdf6 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2be16:	2003      	movs	r0, #3
   2be18:	e7ed      	b.n	2bdf6 <bt_gatt_check_perm+0x32>

0002be1a <gatt_discover_next>:
{
   2be1a:	b570      	push	{r4, r5, r6, lr}
   2be1c:	4605      	mov	r5, r0
   2be1e:	4614      	mov	r4, r2
	if (!last_handle)
   2be20:	b929      	cbnz	r1, 2be2e <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   2be22:	4621      	mov	r1, r4
   2be24:	4628      	mov	r0, r5
   2be26:	f7e6 f9c5 	bl	121b4 <bt_gatt_discover>
   2be2a:	b928      	cbnz	r0, 2be38 <gatt_discover_next+0x1e>
}
   2be2c:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2be2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2be32:	4291      	cmp	r1, r2
   2be34:	d107      	bne.n	2be46 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   2be36:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2be38:	6863      	ldr	r3, [r4, #4]
   2be3a:	4622      	mov	r2, r4
   2be3c:	4628      	mov	r0, r5
   2be3e:	2100      	movs	r1, #0
}
   2be40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2be44:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2be46:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2be48:	1c4b      	adds	r3, r1, #1
   2be4a:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2be4c:	429a      	cmp	r2, r3
		params->start_handle++;
   2be4e:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2be50:	d2e7      	bcs.n	2be22 <gatt_discover_next+0x8>
   2be52:	e7f1      	b.n	2be38 <gatt_discover_next+0x1e>

0002be54 <gatt_find_type_rsp>:
{
   2be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2be58:	b088      	sub	sp, #32
   2be5a:	4607      	mov	r7, r0
   2be5c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2be60:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2be62:	b911      	cbnz	r1, 2be6a <gatt_find_type_rsp+0x16>
   2be64:	f013 0803 	ands.w	r8, r3, #3
   2be68:	d008      	beq.n	2be7c <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   2be6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2be6e:	464a      	mov	r2, r9
   2be70:	2100      	movs	r1, #0
   2be72:	4638      	mov	r0, r7
}
   2be74:	b008      	add	sp, #32
   2be76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   2be7a:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   2be7c:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2be80:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2be84:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2be86:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   2be8a:	42ac      	cmp	r4, r5
   2be8c:	d107      	bne.n	2be9e <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   2be8e:	464a      	mov	r2, r9
   2be90:	4641      	mov	r1, r8
   2be92:	4638      	mov	r0, r7
}
   2be94:	b008      	add	sp, #32
   2be96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   2be9a:	f7ff bfbe 	b.w	2be1a <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2be9e:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2bea0:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   2bea4:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2bea8:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2beaa:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2beae:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2beb2:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   2beb4:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2beb6:	bf0c      	ite	eq
   2beb8:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   2bebc:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2bebe:	ab01      	add	r3, sp, #4
   2bec0:	f8ad 1002 	strh.w	r1, [sp, #2]
   2bec4:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   2bec6:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2beca:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2bece:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2bed2:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2bed6:	f8cd d00c 	str.w	sp, [sp, #12]
   2beda:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2bede:	464a      	mov	r2, r9
   2bee0:	a903      	add	r1, sp, #12
   2bee2:	4638      	mov	r0, r7
   2bee4:	4798      	blx	r3
   2bee6:	3404      	adds	r4, #4
   2bee8:	2800      	cmp	r0, #0
   2beea:	d1ce      	bne.n	2be8a <gatt_find_type_rsp+0x36>
}
   2beec:	b008      	add	sp, #32
   2beee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002bef2 <bt_gatt_cancel>:
{
   2bef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bef4:	4604      	mov	r4, r0
   2bef6:	460d      	mov	r5, r1
	k_sched_lock();
   2bef8:	f7f9 fd62 	bl	259c0 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2befc:	4629      	mov	r1, r5
   2befe:	4620      	mov	r0, r4
   2bf00:	f7ff fb7b 	bl	2b5fa <bt_att_find_req_by_user_data>
	if (req) {
   2bf04:	4601      	mov	r1, r0
   2bf06:	b920      	cbnz	r0, 2bf12 <bt_gatt_cancel+0x20>
}
   2bf08:	b002      	add	sp, #8
   2bf0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2bf0e:	f7f9 bf25 	b.w	25d5c <k_sched_unlock>
		func = req->func;
   2bf12:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2bf14:	4620      	mov	r0, r4
   2bf16:	f7e5 fb1f 	bl	11558 <bt_att_req_cancel>
	k_sched_unlock();
   2bf1a:	f7f9 ff1f 	bl	25d5c <k_sched_unlock>
	if (func) {
   2bf1e:	b12e      	cbz	r6, 2bf2c <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2bf20:	2300      	movs	r3, #0
   2bf22:	9500      	str	r5, [sp, #0]
   2bf24:	461a      	mov	r2, r3
   2bf26:	210e      	movs	r1, #14
   2bf28:	4620      	mov	r0, r4
   2bf2a:	47b0      	blx	r6
}
   2bf2c:	b002      	add	sp, #8
   2bf2e:	bd70      	pop	{r4, r5, r6, pc}

0002bf30 <bt_gatt_unsubscribe>:
{
   2bf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2bf34:	7b43      	ldrb	r3, [r0, #13]
   2bf36:	2b07      	cmp	r3, #7
{
   2bf38:	4680      	mov	r8, r0
   2bf3a:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2bf3c:	d155      	bne.n	2bfea <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   2bf3e:	f7e5 fb87 	bl	11650 <gatt_sub_find>
	if (!sub) {
   2bf42:	4606      	mov	r6, r0
   2bf44:	2800      	cmp	r0, #0
   2bf46:	d053      	beq.n	2bff0 <bt_gatt_unsubscribe+0xc0>
	return list->head;
   2bf48:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2bf4a:	b104      	cbz	r4, 2bf4e <bt_gatt_unsubscribe+0x1e>
   2bf4c:	3c14      	subs	r4, #20
			has_subscription = true;
   2bf4e:	2300      	movs	r3, #0
   2bf50:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2bf52:	bb5c      	cbnz	r4, 2bfac <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   2bf54:	2b00      	cmp	r3, #0
   2bf56:	d04b      	beq.n	2bff0 <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   2bf58:	2f00      	cmp	r7, #0
   2bf5a:	d035      	beq.n	2bfc8 <bt_gatt_unsubscribe+0x98>
   2bf5c:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   2bf5e:	f105 0214 	add.w	r2, r5, #20
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bf62:	b15b      	cbz	r3, 2bf7c <bt_gatt_unsubscribe+0x4c>
   2bf64:	429a      	cmp	r2, r3
   2bf66:	d13d      	bne.n	2bfe4 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   2bf68:	696b      	ldr	r3, [r5, #20]
	return list->tail;
   2bf6a:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   2bf6c:	2c00      	cmp	r4, #0
   2bf6e:	d134      	bne.n	2bfda <bt_gatt_unsubscribe+0xaa>
   2bf70:	428a      	cmp	r2, r1
	list->head = node;
   2bf72:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   2bf74:	d100      	bne.n	2bf78 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   2bf76:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   2bf78:	2300      	movs	r3, #0
   2bf7a:	616b      	str	r3, [r5, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2bf7c:	f105 0010 	add.w	r0, r5, #16
   2bf80:	f7ff fb7d 	bl	2b67e <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   2bf84:	0743      	lsls	r3, r0, #29
   2bf86:	d503      	bpl.n	2bf90 <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   2bf88:	4629      	mov	r1, r5
   2bf8a:	4640      	mov	r0, r8
   2bf8c:	f7ff ffb1 	bl	2bef2 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   2bf90:	68b3      	ldr	r3, [r6, #8]
   2bf92:	b913      	cbnz	r3, 2bf9a <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   2bf94:	4630      	mov	r0, r6
   2bf96:	f7ff fbff 	bl	2b798 <gatt_sub_free>
	if (has_subscription) {
   2bf9a:	b367      	cbz	r7, 2bff6 <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   2bf9c:	2300      	movs	r3, #0
   2bf9e:	682c      	ldr	r4, [r5, #0]
   2bfa0:	461a      	mov	r2, r3
   2bfa2:	4629      	mov	r1, r5
   2bfa4:	4640      	mov	r0, r8
   2bfa6:	47a0      	blx	r4
	return 0;
   2bfa8:	2000      	movs	r0, #0
   2bfaa:	e014      	b.n	2bfd6 <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   2bfac:	42ac      	cmp	r4, r5
   2bfae:	d009      	beq.n	2bfc4 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   2bfb0:	8921      	ldrh	r1, [r4, #8]
   2bfb2:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   2bfb4:	4291      	cmp	r1, r2
   2bfb6:	bf08      	it	eq
   2bfb8:	2701      	moveq	r7, #1
	return node->next;
   2bfba:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2bfbc:	2c00      	cmp	r4, #0
   2bfbe:	d0c9      	beq.n	2bf54 <bt_gatt_unsubscribe+0x24>
   2bfc0:	3c14      	subs	r4, #20
   2bfc2:	e7c6      	b.n	2bf52 <bt_gatt_unsubscribe+0x22>
			found = true;
   2bfc4:	2301      	movs	r3, #1
   2bfc6:	e7f8      	b.n	2bfba <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   2bfc8:	81af      	strh	r7, [r5, #12]
		err = gatt_write_ccc(conn, params);
   2bfca:	4629      	mov	r1, r5
   2bfcc:	4640      	mov	r0, r8
   2bfce:	f7e5 fb6d 	bl	116ac <gatt_write_ccc>
		if (err) {
   2bfd2:	2800      	cmp	r0, #0
   2bfd4:	d0c2      	beq.n	2bf5c <bt_gatt_unsubscribe+0x2c>
}
   2bfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   2bfda:	428a      	cmp	r2, r1
	parent->next = child;
   2bfdc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2bfde:	bf08      	it	eq
   2bfe0:	60f4      	streq	r4, [r6, #12]
}
   2bfe2:	e7c9      	b.n	2bf78 <bt_gatt_unsubscribe+0x48>
	return node->next;
   2bfe4:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bfe6:	681b      	ldr	r3, [r3, #0]
   2bfe8:	e7bb      	b.n	2bf62 <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   2bfea:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2bfee:	e7f2      	b.n	2bfd6 <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   2bff0:	f06f 0015 	mvn.w	r0, #21
   2bff4:	e7ef      	b.n	2bfd6 <bt_gatt_unsubscribe+0xa6>
	return 0;
   2bff6:	4638      	mov	r0, r7
   2bff8:	e7ed      	b.n	2bfd6 <bt_gatt_unsubscribe+0xa6>

0002bffa <bt_gatt_notification>:
{
   2bffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bffe:	4606      	mov	r6, r0
   2c000:	460f      	mov	r7, r1
   2c002:	4690      	mov	r8, r2
   2c004:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   2c006:	f7e5 fb23 	bl	11650 <gatt_sub_find>
	if (!sub) {
   2c00a:	b300      	cbz	r0, 2c04e <bt_gatt_notification+0x54>
	return list->head;
   2c00c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2c00e:	b1f4      	cbz	r4, 2c04e <bt_gatt_notification+0x54>
	return node->next;
   2c010:	f854 a914 	ldr.w	sl, [r4], #-20
   2c014:	f1ba 0f00 	cmp.w	sl, #0
   2c018:	d001      	beq.n	2c01e <bt_gatt_notification+0x24>
   2c01a:	f1aa 0a14 	sub.w	sl, sl, #20
		if (handle != params->value_handle) {
   2c01e:	8923      	ldrh	r3, [r4, #8]
   2c020:	42bb      	cmp	r3, r7
   2c022:	d10a      	bne.n	2c03a <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   2c024:	6825      	ldr	r5, [r4, #0]
   2c026:	464b      	mov	r3, r9
   2c028:	4642      	mov	r2, r8
   2c02a:	4621      	mov	r1, r4
   2c02c:	4630      	mov	r0, r6
   2c02e:	47a8      	blx	r5
   2c030:	b918      	cbnz	r0, 2c03a <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   2c032:	4621      	mov	r1, r4
   2c034:	4630      	mov	r0, r6
   2c036:	f7ff ff7b 	bl	2bf30 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2c03a:	f1ba 0f00 	cmp.w	sl, #0
   2c03e:	d006      	beq.n	2c04e <bt_gatt_notification+0x54>
   2c040:	f8da 5014 	ldr.w	r5, [sl, #20]
   2c044:	b105      	cbz	r5, 2c048 <bt_gatt_notification+0x4e>
   2c046:	3d14      	subs	r5, #20
{
   2c048:	4654      	mov	r4, sl
   2c04a:	46aa      	mov	sl, r5
   2c04c:	e7e7      	b.n	2c01e <bt_gatt_notification+0x24>
}
   2c04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c052 <bt_gatt_change_aware>:
{
   2c052:	b510      	push	{r4, lr}
   2c054:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2c056:	f7e5 faad 	bl	115b4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2c05a:	b910      	cbnz	r0, 2c062 <bt_gatt_change_aware+0x10>
		return true;
   2c05c:	2401      	movs	r4, #1
}
   2c05e:	4620      	mov	r0, r4
   2c060:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2c062:	7a03      	ldrb	r3, [r0, #8]
   2c064:	07d9      	lsls	r1, r3, #31
   2c066:	d5f9      	bpl.n	2c05c <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2c068:	f100 030c 	add.w	r3, r0, #12
   2c06c:	4618      	mov	r0, r3
   2c06e:	f7ff fb06 	bl	2b67e <atomic_get>
   2c072:	f010 0101 	ands.w	r1, r0, #1
   2c076:	d1f1      	bne.n	2c05c <bt_gatt_change_aware+0xa>
	if (!req) {
   2c078:	2c00      	cmp	r4, #0
   2c07a:	d0f0      	beq.n	2c05e <bt_gatt_change_aware+0xc>
   2c07c:	4618      	mov	r0, r3
   2c07e:	f7ff fafe 	bl	2b67e <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2c082:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c084:	f3c0 0440 	ubfx	r4, r0, #1, #1
   2c088:	d50f      	bpl.n	2c0aa <bt_gatt_change_aware+0x58>
   2c08a:	f3bf 8f5b 	dmb	ish
   2c08e:	e853 2f00 	ldrex	r2, [r3]
   2c092:	f022 0202 	bic.w	r2, r2, #2
   2c096:	e843 2000 	strex	r0, r2, [r3]
   2c09a:	2800      	cmp	r0, #0
   2c09c:	d1f7      	bne.n	2c08e <bt_gatt_change_aware+0x3c>
   2c09e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2c0a2:	4618      	mov	r0, r3
   2c0a4:	f7ff fcbf 	bl	2ba26 <atomic_set_bit>
	return false;
   2c0a8:	e7d9      	b.n	2c05e <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2c0aa:	2101      	movs	r1, #1
   2c0ac:	e7f9      	b.n	2c0a2 <bt_gatt_change_aware+0x50>

0002c0ae <sys_memcpy_swap>:
	psrc += length - 1;
   2c0ae:	1e53      	subs	r3, r2, #1
   2c0b0:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2c0b2:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2c0b4:	f811 3901 	ldrb.w	r3, [r1], #-1
   2c0b8:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2c0bc:	4290      	cmp	r0, r2
   2c0be:	d1f9      	bne.n	2c0b4 <sys_memcpy_swap+0x6>
}
   2c0c0:	4770      	bx	lr

0002c0c2 <sys_mem_swap>:
{
   2c0c2:	b510      	push	{r4, lr}
   2c0c4:	1843      	adds	r3, r0, r1
   2c0c6:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   2c0ce:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c0d0:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2c0d4:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2c0d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2c0d8:	d1f7      	bne.n	2c0ca <sys_mem_swap+0x8>
	}
}
   2c0da:	bd10      	pop	{r4, pc}

0002c0dc <smp_pairing_req>:
}
   2c0dc:	2007      	movs	r0, #7
   2c0de:	4770      	bx	lr

0002c0e0 <bt_smp_aes_cmac>:
{
   2c0e0:	b570      	push	{r4, r5, r6, lr}
   2c0e2:	b0c2      	sub	sp, #264	; 0x108
   2c0e4:	460d      	mov	r5, r1
   2c0e6:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2c0e8:	4601      	mov	r1, r0
   2c0ea:	aa16      	add	r2, sp, #88	; 0x58
   2c0ec:	4668      	mov	r0, sp
{
   2c0ee:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2c0f0:	f7fd fea7 	bl	29e42 <tc_cmac_setup>
   2c0f4:	b150      	cbz	r0, 2c10c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2c0f6:	4632      	mov	r2, r6
   2c0f8:	4629      	mov	r1, r5
   2c0fa:	4668      	mov	r0, sp
   2c0fc:	f7fd fecc 	bl	29e98 <tc_cmac_update>
   2c100:	b120      	cbz	r0, 2c10c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2c102:	4669      	mov	r1, sp
   2c104:	4620      	mov	r0, r4
   2c106:	f7fd ff32 	bl	29f6e <tc_cmac_final>
   2c10a:	b918      	cbnz	r0, 2c114 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2c10c:	f06f 0004 	mvn.w	r0, #4
}
   2c110:	b042      	add	sp, #264	; 0x108
   2c112:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2c114:	2000      	movs	r0, #0
   2c116:	e7fb      	b.n	2c110 <bt_smp_aes_cmac+0x30>

0002c118 <smp_f4>:
{
   2c118:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c11a:	b097      	sub	sp, #92	; 0x5c
   2c11c:	4614      	mov	r4, r2
   2c11e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2c120:	2220      	movs	r2, #32
   2c122:	4601      	mov	r1, r0
   2c124:	a805      	add	r0, sp, #20
{
   2c126:	461d      	mov	r5, r3
   2c128:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2c12a:	f7ff ffc0 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2c12e:	2220      	movs	r2, #32
   2c130:	4631      	mov	r1, r6
   2c132:	a80d      	add	r0, sp, #52	; 0x34
   2c134:	f7ff ffbb 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2c138:	4621      	mov	r1, r4
   2c13a:	2210      	movs	r2, #16
   2c13c:	a801      	add	r0, sp, #4
	m[64] = z;
   2c13e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2c142:	f7ff ffb4 	bl	2c0ae <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2c146:	463b      	mov	r3, r7
   2c148:	2241      	movs	r2, #65	; 0x41
   2c14a:	a905      	add	r1, sp, #20
   2c14c:	a801      	add	r0, sp, #4
   2c14e:	f7ff ffc7 	bl	2c0e0 <bt_smp_aes_cmac>
	if (err) {
   2c152:	4604      	mov	r4, r0
   2c154:	b918      	cbnz	r0, 2c15e <smp_f4+0x46>
	sys_mem_swap(res, 16);
   2c156:	2110      	movs	r1, #16
   2c158:	4638      	mov	r0, r7
   2c15a:	f7ff ffb2 	bl	2c0c2 <sys_mem_swap>
}
   2c15e:	4620      	mov	r0, r4
   2c160:	b017      	add	sp, #92	; 0x5c
   2c162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c164 <smp_f6>:
{
   2c164:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c166:	b097      	sub	sp, #92	; 0x5c
   2c168:	4605      	mov	r5, r0
   2c16a:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2c16c:	a805      	add	r0, sp, #20
   2c16e:	2210      	movs	r2, #16
{
   2c170:	461c      	mov	r4, r3
   2c172:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2c174:	f7ff ff9b 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2c178:	2210      	movs	r2, #16
   2c17a:	4631      	mov	r1, r6
   2c17c:	a809      	add	r0, sp, #36	; 0x24
   2c17e:	f7ff ff96 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2c182:	4621      	mov	r1, r4
   2c184:	2210      	movs	r2, #16
   2c186:	a80d      	add	r0, sp, #52	; 0x34
   2c188:	f7ff ff91 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2c18c:	991c      	ldr	r1, [sp, #112]	; 0x70
   2c18e:	2203      	movs	r2, #3
   2c190:	a811      	add	r0, sp, #68	; 0x44
   2c192:	f7ff ff8c 	bl	2c0ae <sys_memcpy_swap>
	m[51] = a1->type;
   2c196:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2c198:	f814 3b01 	ldrb.w	r3, [r4], #1
   2c19c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2c1a0:	4621      	mov	r1, r4
   2c1a2:	2206      	movs	r2, #6
   2c1a4:	a812      	add	r0, sp, #72	; 0x48
   2c1a6:	f7fe f8d9 	bl	2a35c <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2c1aa:	4621      	mov	r1, r4
   2c1ac:	2206      	movs	r2, #6
   2c1ae:	a812      	add	r0, sp, #72	; 0x48
   2c1b0:	f7ff ff7d 	bl	2c0ae <sys_memcpy_swap>
	m[58] = a2->type;
   2c1b4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2c1b6:	f814 3b01 	ldrb.w	r3, [r4], #1
   2c1ba:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2c1be:	4621      	mov	r1, r4
   2c1c0:	2206      	movs	r2, #6
   2c1c2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2c1c6:	f7fe f8c9 	bl	2a35c <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c1ca:	4621      	mov	r1, r4
   2c1cc:	2206      	movs	r2, #6
   2c1ce:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2c1d2:	f7ff ff6c 	bl	2c0ae <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2c1d6:	2210      	movs	r2, #16
   2c1d8:	4629      	mov	r1, r5
   2c1da:	a801      	add	r0, sp, #4
   2c1dc:	f7ff ff67 	bl	2c0ae <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2c1e0:	463b      	mov	r3, r7
   2c1e2:	2241      	movs	r2, #65	; 0x41
   2c1e4:	a905      	add	r1, sp, #20
   2c1e6:	a801      	add	r0, sp, #4
   2c1e8:	f7ff ff7a 	bl	2c0e0 <bt_smp_aes_cmac>
	if (err) {
   2c1ec:	4604      	mov	r4, r0
   2c1ee:	b918      	cbnz	r0, 2c1f8 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   2c1f0:	2110      	movs	r1, #16
   2c1f2:	4638      	mov	r0, r7
   2c1f4:	f7ff ff65 	bl	2c0c2 <sys_mem_swap>
}
   2c1f8:	4620      	mov	r0, r4
   2c1fa:	b017      	add	sp, #92	; 0x5c
   2c1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c1fe <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c1fe:	2301      	movs	r3, #1
   2c200:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c202:	43db      	mvns	r3, r3
   2c204:	f3bf 8f5b 	dmb	ish
   2c208:	e850 2f00 	ldrex	r2, [r0]
   2c20c:	401a      	ands	r2, r3
   2c20e:	e840 2100 	strex	r1, r2, [r0]
   2c212:	2900      	cmp	r1, #0
   2c214:	d1f8      	bne.n	2c208 <atomic_clear_bit+0xa>
   2c216:	f3bf 8f5b 	dmb	ish
}
   2c21a:	4770      	bx	lr

0002c21c <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c21e:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c220:	2200      	movs	r2, #0
   2c222:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c224:	4604      	mov	r4, r0
   2c226:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c228:	460a      	mov	r2, r1
   2c22a:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2c22e:	2106      	movs	r1, #6
   2c230:	f7fe fd62 	bl	2acf8 <bt_l2cap_send_cb>
   2c234:	b128      	cbz	r0, 2c242 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2c236:	4628      	mov	r0, r5
}
   2c238:	b003      	add	sp, #12
   2c23a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2c23e:	f7f4 bcf3 	b.w	20c28 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c242:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c246:	2300      	movs	r3, #0
   2c248:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   2c24c:	b003      	add	sp, #12
   2c24e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c252:	f7f9 bb57 	b.w	25904 <k_work_reschedule>

0002c256 <z_log_msg2_static_create.constprop.0>:
   2c256:	2300      	movs	r3, #0
   2c258:	f7fb bb72 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002c25c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2c25c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2c25e:	ab0a      	add	r3, sp, #40	; 0x28
   2c260:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2c262:	9302      	str	r3, [sp, #8]
   2c264:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c266:	9301      	str	r3, [sp, #4]
   2c268:	2300      	movs	r3, #0
   2c26a:	9300      	str	r3, [sp, #0]
   2c26c:	2201      	movs	r2, #1
   2c26e:	4618      	mov	r0, r3
   2c270:	f7db f8e8 	bl	7444 <z_impl_z_log_msg2_runtime_vcreate>
}
   2c274:	b007      	add	sp, #28
   2c276:	f85d fb04 	ldr.w	pc, [sp], #4

0002c27a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c27a:	f3bf 8f5b 	dmb	ish
   2c27e:	6800      	ldr	r0, [r0, #0]
   2c280:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c284:	4108      	asrs	r0, r1
}
   2c286:	f000 0001 	and.w	r0, r0, #1
   2c28a:	4770      	bx	lr

0002c28c <update_keys_check>:
{
   2c28c:	b510      	push	{r4, lr}
   2c28e:	4603      	mov	r3, r0
	if (!keys ||
   2c290:	b1d9      	cbz	r1, 2c2ca <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2c292:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2c294:	f010 0f24 	tst.w	r0, #36	; 0x24
   2c298:	d017      	beq.n	2c2ca <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c29a:	7d1a      	ldrb	r2, [r3, #20]
   2c29c:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2c29e:	7b09      	ldrb	r1, [r1, #12]
   2c2a0:	42a2      	cmp	r2, r4
   2c2a2:	bf28      	it	cs
   2c2a4:	4622      	movcs	r2, r4
   2c2a6:	4291      	cmp	r1, r2
   2c2a8:	d901      	bls.n	2c2ae <update_keys_check+0x22>
		return false;
   2c2aa:	2000      	movs	r0, #0
}
   2c2ac:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c2ae:	0682      	lsls	r2, r0, #26
   2c2b0:	d404      	bmi.n	2c2bc <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c2b2:	7a18      	ldrb	r0, [r3, #8]
   2c2b4:	3800      	subs	r0, #0
   2c2b6:	bf18      	it	ne
   2c2b8:	2001      	movne	r0, #1
   2c2ba:	e7f7      	b.n	2c2ac <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c2bc:	2105      	movs	r1, #5
   2c2be:	1d18      	adds	r0, r3, #4
   2c2c0:	f7ff ffdb 	bl	2c27a <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c2c4:	2800      	cmp	r0, #0
   2c2c6:	d1f4      	bne.n	2c2b2 <update_keys_check+0x26>
   2c2c8:	e7ef      	b.n	2c2aa <update_keys_check+0x1e>
		return true;
   2c2ca:	2001      	movs	r0, #1
   2c2cc:	e7ee      	b.n	2c2ac <update_keys_check+0x20>

0002c2ce <atomic_test_and_clear_bit>:
{
   2c2ce:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c2d0:	2301      	movs	r3, #1
   2c2d2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c2d6:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c2d8:	f3bf 8f5b 	dmb	ish
   2c2dc:	e850 3f00 	ldrex	r3, [r0]
   2c2e0:	ea03 0c02 	and.w	ip, r3, r2
   2c2e4:	e840 ce00 	strex	lr, ip, [r0]
   2c2e8:	f1be 0f00 	cmp.w	lr, #0
   2c2ec:	d1f6      	bne.n	2c2dc <atomic_test_and_clear_bit+0xe>
   2c2ee:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c2f2:	420b      	tst	r3, r1
}
   2c2f4:	bf14      	ite	ne
   2c2f6:	2001      	movne	r0, #1
   2c2f8:	2000      	moveq	r0, #0
   2c2fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002c2fe <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c2fe:	2301      	movs	r3, #1
   2c300:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c302:	f3bf 8f5b 	dmb	ish
   2c306:	e850 2f00 	ldrex	r2, [r0]
   2c30a:	431a      	orrs	r2, r3
   2c30c:	e840 2100 	strex	r1, r2, [r0]
   2c310:	2900      	cmp	r1, #0
   2c312:	d1f8      	bne.n	2c306 <atomic_set_bit+0x8>
   2c314:	f3bf 8f5b 	dmb	ish
}
   2c318:	4770      	bx	lr

0002c31a <smp_keypress_notif>:
{
   2c31a:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2c31c:	210e      	movs	r1, #14
   2c31e:	f7ff ffee 	bl	2c2fe <atomic_set_bit>
}
   2c322:	2000      	movs	r0, #0
   2c324:	bd08      	pop	{r3, pc}

0002c326 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c326:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c328:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c32a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c32c:	4628      	mov	r0, r5
   2c32e:	2104      	movs	r1, #4
   2c330:	f7ff ffa3 	bl	2c27a <atomic_test_bit>
   2c334:	b970      	cbnz	r0, 2c354 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2c336:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c33a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2c33c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c33e:	4608      	mov	r0, r1
   2c340:	f7fe fcd7 	bl	2acf2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2c344:	4604      	mov	r4, r0
   2c346:	b938      	cbnz	r0, 2c358 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2c348:	2104      	movs	r1, #4
   2c34a:	4628      	mov	r0, r5
   2c34c:	f7ff ffd7 	bl	2c2fe <atomic_set_bit>
}
   2c350:	4620      	mov	r0, r4
   2c352:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2c354:	2200      	movs	r2, #0
   2c356:	e7f0      	b.n	2c33a <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   2c358:	2101      	movs	r1, #1
   2c35a:	3008      	adds	r0, #8
   2c35c:	f000 fb67 	bl	2ca2e <net_buf_simple_add>
	hdr->code = op;
   2c360:	7006      	strb	r6, [r0, #0]
	return buf;
   2c362:	e7f5      	b.n	2c350 <smp_create_pdu.constprop.0+0x2a>

0002c364 <smp_send_pairing_random>:
{
   2c364:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c366:	2104      	movs	r1, #4
{
   2c368:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c36a:	f7ff ffdc 	bl	2c326 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2c36e:	4604      	mov	r4, r0
   2c370:	b178      	cbz	r0, 2c392 <smp_send_pairing_random+0x2e>
   2c372:	2110      	movs	r1, #16
   2c374:	3008      	adds	r0, #8
   2c376:	f000 fb5a 	bl	2ca2e <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2c37a:	2210      	movs	r2, #16
   2c37c:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2c380:	f7fd ffec 	bl	2a35c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2c384:	4628      	mov	r0, r5
   2c386:	2200      	movs	r2, #0
   2c388:	4621      	mov	r1, r4
   2c38a:	f7ff ff47 	bl	2c21c <smp_send.constprop.0>
	return 0;
   2c38e:	2000      	movs	r0, #0
}
   2c390:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c392:	2008      	movs	r0, #8
   2c394:	e7fc      	b.n	2c390 <smp_send_pairing_random+0x2c>

0002c396 <smp_pairing_confirm>:
{
   2c396:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2c398:	688d      	ldr	r5, [r1, #8]
{
   2c39a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2c39c:	210b      	movs	r1, #11
   2c39e:	3004      	adds	r0, #4
   2c3a0:	f7ff ff2d 	bl	2c1fe <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2c3a4:	2210      	movs	r2, #16
   2c3a6:	4629      	mov	r1, r5
   2c3a8:	f104 0017 	add.w	r0, r4, #23
   2c3ac:	f7fd ffd6 	bl	2a35c <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2c3b0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c3b4:	78db      	ldrb	r3, [r3, #3]
   2c3b6:	b93b      	cbnz	r3, 2c3c8 <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2c3b8:	4620      	mov	r0, r4
   2c3ba:	2104      	movs	r1, #4
   2c3bc:	f7ff ff9f 	bl	2c2fe <atomic_set_bit>
}
   2c3c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   2c3c4:	f7ff bfce 	b.w	2c364 <smp_send_pairing_random>
}
   2c3c8:	2000      	movs	r0, #0
   2c3ca:	bd38      	pop	{r3, r4, r5, pc}

0002c3cc <smp_reset>:
{
   2c3cc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c3ce:	1d03      	adds	r3, r0, #4
   2c3d0:	4604      	mov	r4, r0
   2c3d2:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2c3d4:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   2c3d8:	f3bf 8f5b 	dmb	ish
   2c3dc:	e853 2f00 	ldrex	r2, [r3]
   2c3e0:	e843 5100 	strex	r1, r5, [r3]
   2c3e4:	2900      	cmp	r1, #0
   2c3e6:	d1f9      	bne.n	2c3dc <smp_reset+0x10>
   2c3e8:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2c3ec:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   2c3f0:	f001 fa45 	bl	2d87e <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2c3f4:	7225      	strb	r5, [r4, #8]
   2c3f6:	f3bf 8f5b 	dmb	ish
   2c3fa:	e854 3f00 	ldrex	r3, [r4]
   2c3fe:	e844 5200 	strex	r2, r5, [r4]
   2c402:	2a00      	cmp	r2, #0
   2c404:	d1f9      	bne.n	2c3fa <smp_reset+0x2e>
   2c406:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c40a:	78f3      	ldrb	r3, [r6, #3]
   2c40c:	b92b      	cbnz	r3, 2c41a <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2c40e:	4620      	mov	r0, r4
   2c410:	210b      	movs	r1, #11
}
   2c412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2c416:	f7ff bf72 	b.w	2c2fe <atomic_set_bit>
}
   2c41a:	bd70      	pop	{r4, r5, r6, pc}

0002c41c <smp_c1>:
{
   2c41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c420:	b089      	sub	sp, #36	; 0x24
   2c422:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2c426:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2c428:	783b      	ldrb	r3, [r7, #0]
{
   2c42a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2c42c:	f88d 3000 	strb.w	r3, [sp]
{
   2c430:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2c432:	f898 3000 	ldrb.w	r3, [r8]
   2c436:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2c43a:	4611      	mov	r1, r2
   2c43c:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2c43e:	2207      	movs	r2, #7
   2c440:	f10d 0002 	add.w	r0, sp, #2
   2c444:	f7fd ff8a 	bl	2a35c <memcpy>
	memcpy(p1 + 9, pres, 7);
   2c448:	2207      	movs	r2, #7
   2c44a:	4649      	mov	r1, r9
   2c44c:	f10d 0009 	add.w	r0, sp, #9
   2c450:	f7fd ff84 	bl	2a35c <memcpy>
	while (len--) {
   2c454:	f104 0010 	add.w	r0, r4, #16
   2c458:	4629      	mov	r1, r5
   2c45a:	466a      	mov	r2, sp
   2c45c:	42a0      	cmp	r0, r4
   2c45e:	d127      	bne.n	2c4b0 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2c460:	462a      	mov	r2, r5
   2c462:	4629      	mov	r1, r5
   2c464:	4630      	mov	r0, r6
   2c466:	f7eb fea5 	bl	181b4 <bt_encrypt_le>
	if (err) {
   2c46a:	4604      	mov	r4, r0
   2c46c:	b9e0      	cbnz	r0, 2c4a8 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2c46e:	2206      	movs	r2, #6
   2c470:	f108 0101 	add.w	r1, r8, #1
   2c474:	a804      	add	r0, sp, #16
   2c476:	f7fd ff71 	bl	2a35c <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2c47a:	2206      	movs	r2, #6
   2c47c:	1c79      	adds	r1, r7, #1
   2c47e:	f10d 0016 	add.w	r0, sp, #22
   2c482:	f7fd ff6b 	bl	2a35c <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2c486:	2204      	movs	r2, #4
   2c488:	4621      	mov	r1, r4
   2c48a:	a807      	add	r0, sp, #28
   2c48c:	f7fd ff71 	bl	2a372 <memset>
	while (len--) {
   2c490:	f105 0010 	add.w	r0, r5, #16
   2c494:	462a      	mov	r2, r5
   2c496:	ab04      	add	r3, sp, #16
   2c498:	4282      	cmp	r2, r0
   2c49a:	d112      	bne.n	2c4c2 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2c49c:	462a      	mov	r2, r5
   2c49e:	4629      	mov	r1, r5
   2c4a0:	4630      	mov	r0, r6
   2c4a2:	f7eb fe87 	bl	181b4 <bt_encrypt_le>
   2c4a6:	4604      	mov	r4, r0
}
   2c4a8:	4620      	mov	r0, r4
   2c4aa:	b009      	add	sp, #36	; 0x24
   2c4ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2c4b0:	f814 3b01 	ldrb.w	r3, [r4], #1
   2c4b4:	f812 cb01 	ldrb.w	ip, [r2], #1
   2c4b8:	ea83 030c 	eor.w	r3, r3, ip
   2c4bc:	f801 3b01 	strb.w	r3, [r1], #1
   2c4c0:	e7cc      	b.n	2c45c <smp_c1+0x40>
   2c4c2:	f812 1b01 	ldrb.w	r1, [r2], #1
   2c4c6:	f813 4b01 	ldrb.w	r4, [r3], #1
   2c4ca:	4061      	eors	r1, r4
   2c4cc:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c4d0:	e7e2      	b.n	2c498 <smp_c1+0x7c>

0002c4d2 <legacy_send_pairing_confirm>:
{
   2c4d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c4d4:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2c4d6:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   2c4da:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c4dc:	f7ff ff23 	bl	2c326 <smp_create_pdu.constprop.0>
	if (!buf) {
   2c4e0:	4606      	mov	r6, r0
   2c4e2:	b1c0      	cbz	r0, 2c516 <legacy_send_pairing_confirm+0x44>
   2c4e4:	2110      	movs	r1, #16
   2c4e6:	3008      	adds	r0, #8
   2c4e8:	f000 faa1 	bl	2ca2e <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2c4ec:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2c4f0:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2c4f2:	9002      	str	r0, [sp, #8]
   2c4f4:	9301      	str	r3, [sp, #4]
   2c4f6:	9400      	str	r4, [sp, #0]
   2c4f8:	f105 0310 	add.w	r3, r5, #16
   2c4fc:	f105 0209 	add.w	r2, r5, #9
   2c500:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2c504:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2c508:	f7ff ff88 	bl	2c41c <smp_c1>
   2c50c:	4604      	mov	r4, r0
   2c50e:	b120      	cbz	r0, 2c51a <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   2c510:	4630      	mov	r0, r6
   2c512:	f7f4 fb89 	bl	20c28 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2c516:	2008      	movs	r0, #8
   2c518:	e009      	b.n	2c52e <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   2c51a:	4602      	mov	r2, r0
   2c51c:	4631      	mov	r1, r6
   2c51e:	4628      	mov	r0, r5
   2c520:	f7ff fe7c 	bl	2c21c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c524:	1d28      	adds	r0, r5, #4
   2c526:	4621      	mov	r1, r4
   2c528:	f7ff fe69 	bl	2c1fe <atomic_clear_bit>
	return 0;
   2c52c:	4620      	mov	r0, r4
}
   2c52e:	b004      	add	sp, #16
   2c530:	bd70      	pop	{r4, r5, r6, pc}

0002c532 <bt_smp_request_ltk>:
{
   2c532:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c536:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2c53a:	e9cd 2300 	strd	r2, r3, [sp]
   2c53e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2c540:	f7e6 fcb6 	bl	12eb0 <smp_chan_get>
	if (!smp) {
   2c544:	4605      	mov	r5, r0
   2c546:	2800      	cmp	r0, #0
   2c548:	f000 8090 	beq.w	2c66c <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2c54c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c550:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2c552:	f1b9 0f00 	cmp.w	r9, #0
   2c556:	d12a      	bne.n	2c5ae <bt_smp_request_ltk+0x7c>
   2c558:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c55c:	4313      	orrs	r3, r2
   2c55e:	d126      	bne.n	2c5ae <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c560:	2103      	movs	r1, #3
   2c562:	4638      	mov	r0, r7
   2c564:	f7ff fe89 	bl	2c27a <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2c568:	b308      	cbz	r0, 2c5ae <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2c56a:	2101      	movs	r1, #1
   2c56c:	4638      	mov	r0, r7
   2c56e:	f7ff fe84 	bl	2c27a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c572:	4606      	mov	r6, r0
   2c574:	b1d8      	cbz	r0, 2c5ae <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c576:	7d2c      	ldrb	r4, [r5, #20]
   2c578:	7b6b      	ldrb	r3, [r5, #13]
   2c57a:	429c      	cmp	r4, r3
   2c57c:	bf28      	it	cs
   2c57e:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2c580:	4622      	mov	r2, r4
   2c582:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2c586:	4640      	mov	r0, r8
   2c588:	f7fd fee8 	bl	2a35c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c58c:	2c0f      	cmp	r4, #15
   2c58e:	d806      	bhi.n	2c59e <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2c590:	f1c4 0210 	rsb	r2, r4, #16
   2c594:	4649      	mov	r1, r9
   2c596:	eb08 0004 	add.w	r0, r8, r4
   2c59a:	f7fd feea 	bl	2a372 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c59e:	2101      	movs	r1, #1
   2c5a0:	4638      	mov	r0, r7
   2c5a2:	f7ff feac 	bl	2c2fe <atomic_set_bit>
}
   2c5a6:	4630      	mov	r0, r6
   2c5a8:	b003      	add	sp, #12
   2c5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2c5ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2c5b2:	b983      	cbnz	r3, 2c5d6 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2c5b4:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2c5b8:	7a21      	ldrb	r1, [r4, #8]
   2c5ba:	4632      	mov	r2, r6
   2c5bc:	2020      	movs	r0, #32
   2c5be:	f7e8 fb51 	bl	14c64 <bt_keys_find>
   2c5c2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2c5c6:	b930      	cbnz	r0, 2c5d6 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2c5c8:	7a21      	ldrb	r1, [r4, #8]
   2c5ca:	4632      	mov	r2, r6
   2c5cc:	2001      	movs	r0, #1
   2c5ce:	f7e8 fb49 	bl	14c64 <bt_keys_find>
   2c5d2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c5d6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c5da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c5de:	b9ee      	cbnz	r6, 2c61c <bt_smp_request_ltk+0xea>
   2c5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c5e4:	4313      	orrs	r3, r2
   2c5e6:	d119      	bne.n	2c61c <bt_smp_request_ltk+0xea>
   2c5e8:	b388      	cbz	r0, 2c64e <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c5ea:	89c3      	ldrh	r3, [r0, #14]
   2c5ec:	069a      	lsls	r2, r3, #26
   2c5ee:	d516      	bpl.n	2c61e <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2c5f0:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2c5f2:	f100 011a 	add.w	r1, r0, #26
   2c5f6:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2c5f8:	4640      	mov	r0, r8
   2c5fa:	f7fd feaf 	bl	2a35c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c5fe:	2c0f      	cmp	r4, #15
   2c600:	d806      	bhi.n	2c610 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   2c602:	f1c4 0210 	rsb	r2, r4, #16
   2c606:	4631      	mov	r1, r6
   2c608:	eb08 0004 	add.w	r0, r8, r4
   2c60c:	f7fd feb1 	bl	2a372 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c610:	2101      	movs	r1, #1
   2c612:	4638      	mov	r0, r7
   2c614:	f7ff fe73 	bl	2c2fe <atomic_set_bit>
		return true;
   2c618:	2601      	movs	r6, #1
   2c61a:	e7c4      	b.n	2c5a6 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c61c:	b1b8      	cbz	r0, 2c64e <bt_smp_request_ltk+0x11c>
   2c61e:	89c3      	ldrh	r3, [r0, #14]
   2c620:	07db      	lsls	r3, r3, #31
   2c622:	d514      	bpl.n	2c64e <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c624:	2208      	movs	r2, #8
   2c626:	4669      	mov	r1, sp
   2c628:	3068      	adds	r0, #104	; 0x68
   2c62a:	f7fd fe6e 	bl	2a30a <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c62e:	b970      	cbnz	r0, 2c64e <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2c630:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c634:	2202      	movs	r2, #2
   2c636:	a90a      	add	r1, sp, #40	; 0x28
   2c638:	3070      	adds	r0, #112	; 0x70
   2c63a:	f7fd fe66 	bl	2a30a <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c63e:	4606      	mov	r6, r0
   2c640:	b928      	cbnz	r0, 2c64e <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2c642:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2c646:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2c648:	3172      	adds	r1, #114	; 0x72
   2c64a:	4622      	mov	r2, r4
   2c64c:	e7d4      	b.n	2c5f8 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c64e:	210f      	movs	r1, #15
   2c650:	4638      	mov	r0, r7
   2c652:	f7ff fe12 	bl	2c27a <atomic_test_bit>
   2c656:	b120      	cbz	r0, 2c662 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2c658:	2202      	movs	r2, #2
   2c65a:	2106      	movs	r1, #6
   2c65c:	4620      	mov	r0, r4
   2c65e:	f7e3 f97d 	bl	f95c <bt_conn_security_changed>
	smp_reset(smp);
   2c662:	4628      	mov	r0, r5
   2c664:	f7ff feb2 	bl	2c3cc <smp_reset>
	return false;
   2c668:	2600      	movs	r6, #0
   2c66a:	e79c      	b.n	2c5a6 <bt_smp_request_ltk+0x74>
		return false;
   2c66c:	4606      	mov	r6, r0
   2c66e:	e79a      	b.n	2c5a6 <bt_smp_request_ltk+0x74>

0002c670 <bt_smp_irk_get>:
{
   2c670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2c672:	2500      	movs	r5, #0
{
   2c674:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2c676:	2210      	movs	r2, #16
   2c678:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2c67a:	e9cd 5500 	strd	r5, r5, [sp]
   2c67e:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2c682:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2c684:	f7fd fe41 	bl	2a30a <memcmp>
   2c688:	b180      	cbz	r0, 2c6ac <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2c68a:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2c68c:	220c      	movs	r2, #12
   2c68e:	4629      	mov	r1, r5
   2c690:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2c692:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2c694:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2c696:	70e5      	strb	r5, [r4, #3]
   2c698:	1d20      	adds	r0, r4, #4
   2c69a:	f7fd fe6a 	bl	2a372 <memset>
	err = bt_encrypt_le(key, res, res);
   2c69e:	4622      	mov	r2, r4
   2c6a0:	4621      	mov	r1, r4
   2c6a2:	4630      	mov	r0, r6
   2c6a4:	f7eb fd86 	bl	181b4 <bt_encrypt_le>
}
   2c6a8:	b004      	add	sp, #16
   2c6aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c6ac:	f06f 0015 	mvn.w	r0, #21
   2c6b0:	e7fa      	b.n	2c6a8 <bt_smp_irk_get+0x38>

0002c6b2 <bt_smp_start_security>:
{
   2c6b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   2c6b4:	78c3      	ldrb	r3, [r0, #3]
{
   2c6b6:	4604      	mov	r4, r0
	switch (conn->role) {
   2c6b8:	2b00      	cmp	r3, #0
   2c6ba:	d157      	bne.n	2c76c <bt_smp_start_security+0xba>
		smp = smp_chan_get(conn);
   2c6bc:	f7e6 fbf8 	bl	12eb0 <smp_chan_get>
		if (!smp) {
   2c6c0:	4605      	mov	r5, r0
   2c6c2:	2800      	cmp	r0, #0
   2c6c4:	d055      	beq.n	2c772 <bt_smp_start_security+0xc0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2c6c6:	1d06      	adds	r6, r0, #4
   2c6c8:	2103      	movs	r1, #3
   2c6ca:	4630      	mov	r0, r6
   2c6cc:	f7ff fdd5 	bl	2c27a <atomic_test_bit>
   2c6d0:	b120      	cbz	r0, 2c6dc <bt_smp_start_security+0x2a>
			return -EBUSY;
   2c6d2:	f06f 040f 	mvn.w	r4, #15
}
   2c6d6:	4620      	mov	r0, r4
   2c6d8:	b003      	add	sp, #12
   2c6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2c6dc:	2101      	movs	r1, #1
   2c6de:	4630      	mov	r0, r6
   2c6e0:	f7ff fdcb 	bl	2c27a <atomic_test_bit>
   2c6e4:	2800      	cmp	r0, #0
   2c6e6:	d1f4      	bne.n	2c6d2 <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2c6e8:	210b      	movs	r1, #11
   2c6ea:	1d20      	adds	r0, r4, #4
   2c6ec:	f7ff fdc5 	bl	2c27a <atomic_test_bit>
   2c6f0:	bb00      	cbnz	r0, 2c734 <bt_smp_start_security+0x82>
	if (!conn->le.keys) {
   2c6f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2c6f6:	b983      	cbnz	r3, 2c71a <bt_smp_start_security+0x68>
						     conn->id, &conn->le.dst);
   2c6f8:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2c6fc:	7a21      	ldrb	r1, [r4, #8]
   2c6fe:	463a      	mov	r2, r7
   2c700:	2020      	movs	r0, #32
   2c702:	f7e8 faaf 	bl	14c64 <bt_keys_find>
   2c706:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2c70a:	b930      	cbnz	r0, 2c71a <bt_smp_start_security+0x68>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2c70c:	7a21      	ldrb	r1, [r4, #8]
   2c70e:	463a      	mov	r2, r7
   2c710:	2004      	movs	r0, #4
   2c712:	f7e8 faa7 	bl	14c64 <bt_keys_find>
   2c716:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   2c71a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2c71e:	b149      	cbz	r1, 2c734 <bt_smp_start_security+0x82>
   2c720:	89cb      	ldrh	r3, [r1, #14]
   2c722:	f003 0324 	and.w	r3, r3, #36	; 0x24
   2c726:	b12b      	cbz	r3, 2c734 <bt_smp_start_security+0x82>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2c728:	7aa3      	ldrb	r3, [r4, #10]
   2c72a:	2b02      	cmp	r3, #2
   2c72c:	d908      	bls.n	2c740 <bt_smp_start_security+0x8e>
   2c72e:	7b4b      	ldrb	r3, [r1, #13]
   2c730:	07db      	lsls	r3, r3, #31
   2c732:	d405      	bmi.n	2c740 <bt_smp_start_security+0x8e>
			return smp_send_pairing_req(conn);
   2c734:	4620      	mov	r0, r4
}
   2c736:	b003      	add	sp, #12
   2c738:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   2c73c:	f7e6 be4c 	b.w	133d8 <smp_send_pairing_req>
		err = bt_conn_le_start_encryption(conn,
   2c740:	7b0b      	ldrb	r3, [r1, #12]
   2c742:	9300      	str	r3, [sp, #0]
   2c744:	f101 0218 	add.w	r2, r1, #24
   2c748:	f101 031a 	add.w	r3, r1, #26
   2c74c:	4620      	mov	r0, r4
   2c74e:	3110      	adds	r1, #16
   2c750:	f7fe f97f 	bl	2aa52 <bt_conn_le_start_encryption>
		if (err) {
   2c754:	4604      	mov	r4, r0
   2c756:	2800      	cmp	r0, #0
   2c758:	d1bd      	bne.n	2c6d6 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2c75a:	4628      	mov	r0, r5
   2c75c:	210b      	movs	r1, #11
   2c75e:	f7ff fdce 	bl	2c2fe <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c762:	2101      	movs	r1, #1
   2c764:	4630      	mov	r0, r6
   2c766:	f7ff fdca 	bl	2c2fe <atomic_set_bit>
		return 0;
   2c76a:	e7b4      	b.n	2c6d6 <bt_smp_start_security+0x24>
		return -EINVAL;
   2c76c:	f06f 0415 	mvn.w	r4, #21
   2c770:	e7b1      	b.n	2c6d6 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   2c772:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2c776:	e7ae      	b.n	2c6d6 <bt_smp_start_security+0x24>

0002c778 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c778:	1d03      	adds	r3, r0, #4
{
   2c77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c77c:	4605      	mov	r5, r0
   2c77e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c780:	4618      	mov	r0, r3
   2c782:	2103      	movs	r1, #3
   2c784:	f7ff fd79 	bl	2c27a <atomic_test_bit>
   2c788:	b1f0      	cbz	r0, 2c7c8 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2c78a:	4631      	mov	r1, r6
   2c78c:	4628      	mov	r0, r5
   2c78e:	f7e7 fddd 	bl	1434c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2c792:	2105      	movs	r1, #5
   2c794:	4628      	mov	r0, r5
   2c796:	f7ff fdc6 	bl	2c326 <smp_create_pdu.constprop.0>
	if (!buf) {
   2c79a:	4604      	mov	r4, r0
   2c79c:	b308      	cbz	r0, 2c7e2 <smp_error+0x6a>
   2c79e:	2101      	movs	r1, #1
   2c7a0:	3008      	adds	r0, #8
   2c7a2:	f000 f944 	bl	2ca2e <net_buf_simple_add>
	rsp->reason = reason;
   2c7a6:	7006      	strb	r6, [r0, #0]
   2c7a8:	2600      	movs	r6, #0
   2c7aa:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2c7ae:	9600      	str	r6, [sp, #0]
   2c7b0:	4633      	mov	r3, r6
   2c7b2:	4622      	mov	r2, r4
   2c7b4:	2106      	movs	r1, #6
   2c7b6:	f7fe fa9f 	bl	2acf8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2c7ba:	b118      	cbz	r0, 2c7c4 <smp_error+0x4c>
		net_buf_unref(buf);
   2c7bc:	4620      	mov	r0, r4
   2c7be:	f7f4 fa33 	bl	20c28 <net_buf_unref>
	return 0;
   2c7c2:	4630      	mov	r0, r6
}
   2c7c4:	b002      	add	sp, #8
   2c7c6:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c7c8:	2101      	movs	r1, #1
   2c7ca:	4618      	mov	r0, r3
   2c7cc:	f7ff fd55 	bl	2c27a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c7d0:	2800      	cmp	r0, #0
   2c7d2:	d1da      	bne.n	2c78a <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c7d4:	210f      	movs	r1, #15
   2c7d6:	4618      	mov	r0, r3
   2c7d8:	f7ff fd4f 	bl	2c27a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c7dc:	2800      	cmp	r0, #0
   2c7de:	d1d4      	bne.n	2c78a <smp_error+0x12>
   2c7e0:	e7d7      	b.n	2c792 <smp_error+0x1a>
		return -ENOBUFS;
   2c7e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c7e6:	e7ed      	b.n	2c7c4 <smp_error+0x4c>

0002c7e8 <bt_smp_dhkey_ready>:
{
   2c7e8:	b570      	push	{r4, r5, r6, lr}
   2c7ea:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2c7ec:	2008      	movs	r0, #8
   2c7ee:	f7e6 fb7f 	bl	12ef0 <smp_find>
	if (smp) {
   2c7f2:	4604      	mov	r4, r0
   2c7f4:	b1b8      	cbz	r0, 2c826 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2c7f6:	1d05      	adds	r5, r0, #4
   2c7f8:	2108      	movs	r1, #8
   2c7fa:	4628      	mov	r0, r5
   2c7fc:	f7ff fcff 	bl	2c1fe <atomic_clear_bit>
	if (!dhkey) {
   2c800:	b3b6      	cbz	r6, 2c870 <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2c802:	2107      	movs	r1, #7
   2c804:	f7ff fcfb 	bl	2c1fe <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2c808:	4631      	mov	r1, r6
   2c80a:	2220      	movs	r2, #32
   2c80c:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2c810:	f7fd fda4 	bl	2a35c <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c814:	210a      	movs	r1, #10
   2c816:	4628      	mov	r0, r5
   2c818:	f7ff fd2f 	bl	2c27a <atomic_test_bit>
   2c81c:	b168      	cbz	r0, 2c83a <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c81e:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c820:	4628      	mov	r0, r5
   2c822:	f7ff fd6c 	bl	2c2fe <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2c826:	2007      	movs	r0, #7
   2c828:	f7e6 fb62 	bl	12ef0 <smp_find>
		if (smp) {
   2c82c:	4604      	mov	r4, r0
   2c82e:	b118      	cbz	r0, 2c838 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2c830:	f7e6 fbf8 	bl	13024 <smp_dhkey_generate>
			if (err) {
   2c834:	4601      	mov	r1, r0
   2c836:	b9b8      	cbnz	r0, 2c868 <bt_smp_dhkey_ready+0x80>
}
   2c838:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c83a:	2110      	movs	r1, #16
   2c83c:	4628      	mov	r0, r5
   2c83e:	f7ff fd1c 	bl	2c27a <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c842:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c844:	2800      	cmp	r0, #0
   2c846:	d1eb      	bne.n	2c820 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2c848:	4628      	mov	r0, r5
   2c84a:	f7ff fd16 	bl	2c27a <atomic_test_bit>
   2c84e:	2800      	cmp	r0, #0
   2c850:	d0e9      	beq.n	2c826 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2c852:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2c856:	78db      	ldrb	r3, [r3, #3]
   2c858:	2b00      	cmp	r3, #0
   2c85a:	d1e4      	bne.n	2c826 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   2c85c:	4620      	mov	r0, r4
   2c85e:	f7e6 ff5b 	bl	13718 <compute_and_send_central_dhcheck>
		if (err) {
   2c862:	4601      	mov	r1, r0
   2c864:	2800      	cmp	r0, #0
   2c866:	d0de      	beq.n	2c826 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2c868:	4620      	mov	r0, r4
   2c86a:	f7ff ff85 	bl	2c778 <smp_error>
   2c86e:	e7da      	b.n	2c826 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2c870:	210b      	movs	r1, #11
   2c872:	e7f9      	b.n	2c868 <bt_smp_dhkey_ready+0x80>

0002c874 <smp_check_complete>:
{
   2c874:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2c876:	7883      	ldrb	r3, [r0, #2]
   2c878:	2b01      	cmp	r3, #1
{
   2c87a:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   2c87c:	d110      	bne.n	2c8a0 <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2c87e:	2106      	movs	r1, #6
   2c880:	f7fe fa71 	bl	2ad66 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2c884:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   2c888:	ea23 0104 	bic.w	r1, r3, r4
   2c88c:	f800 1c08 	strb.w	r1, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   2c890:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   2c894:	b921      	cbnz	r1, 2c8a0 <smp_check_complete+0x2c>
}
   2c896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2c89a:	38f0      	subs	r0, #240	; 0xf0
   2c89c:	f7e7 bd56 	b.w	1434c <smp_pairing_complete>
}
   2c8a0:	bd10      	pop	{r4, pc}

0002c8a2 <smp_sign_info_sent>:
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
   2c8a2:	2104      	movs	r1, #4
   2c8a4:	f7ff bfe6 	b.w	2c874 <smp_check_complete>

0002c8a8 <smp_id_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   2c8a8:	2102      	movs	r1, #2
   2c8aa:	f7ff bfe3 	b.w	2c874 <smp_check_complete>

0002c8ae <smp_ident_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2c8ae:	2101      	movs	r1, #1
   2c8b0:	f7ff bfe0 	b.w	2c874 <smp_check_complete>

0002c8b4 <bt_smp_disconnected>:
{
   2c8b4:	b570      	push	{r4, r5, r6, lr}
   2c8b6:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2c8b8:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2c8bc:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c8c0:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2c8c2:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   2c8c6:	f000 ffda 	bl	2d87e <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c8ca:	2103      	movs	r1, #3
   2c8cc:	4620      	mov	r0, r4
   2c8ce:	f7ff fcd4 	bl	2c27a <atomic_test_bit>
   2c8d2:	b1a0      	cbz	r0, 2c8fe <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c8d4:	2108      	movs	r1, #8
   2c8d6:	4630      	mov	r0, r6
   2c8d8:	f7e7 fd38 	bl	1434c <smp_pairing_complete>
	if (keys) {
   2c8dc:	b13d      	cbz	r5, 2c8ee <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2c8de:	89eb      	ldrh	r3, [r5, #14]
   2c8e0:	b113      	cbz	r3, 2c8e8 <bt_smp_disconnected+0x34>
   2c8e2:	7b6b      	ldrb	r3, [r5, #13]
   2c8e4:	079b      	lsls	r3, r3, #30
   2c8e6:	d502      	bpl.n	2c8ee <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2c8e8:	4628      	mov	r0, r5
   2c8ea:	f000 f829 	bl	2c940 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2c8ee:	4630      	mov	r0, r6
   2c8f0:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   2c8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2c8f8:	2100      	movs	r1, #0
   2c8fa:	f7fd bd3a 	b.w	2a372 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c8fe:	2101      	movs	r1, #1
   2c900:	4620      	mov	r0, r4
   2c902:	f7ff fcba 	bl	2c27a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c906:	2800      	cmp	r0, #0
   2c908:	d1e4      	bne.n	2c8d4 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c90a:	210f      	movs	r1, #15
   2c90c:	4620      	mov	r0, r4
   2c90e:	f7ff fcb4 	bl	2c27a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c912:	2800      	cmp	r0, #0
   2c914:	d1de      	bne.n	2c8d4 <bt_smp_disconnected+0x20>
   2c916:	e7e1      	b.n	2c8dc <bt_smp_disconnected+0x28>

0002c918 <bt_keys_get_type>:
{
   2c918:	b570      	push	{r4, r5, r6, lr}
   2c91a:	4604      	mov	r4, r0
   2c91c:	460d      	mov	r5, r1
   2c91e:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2c920:	f7e8 f9a0 	bl	14c64 <bt_keys_find>
	if (keys) {
   2c924:	b938      	cbnz	r0, 2c936 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2c926:	4631      	mov	r1, r6
   2c928:	4628      	mov	r0, r5
   2c92a:	f7e8 f965 	bl	14bf8 <bt_keys_get_addr>
	if (!keys) {
   2c92e:	b110      	cbz	r0, 2c936 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   2c930:	89c3      	ldrh	r3, [r0, #14]
   2c932:	431c      	orrs	r4, r3
   2c934:	81c4      	strh	r4, [r0, #14]
}
   2c936:	bd70      	pop	{r4, r5, r6, pc}

0002c938 <bt_keys_add_type>:
	keys->keys |= type;
   2c938:	89c3      	ldrh	r3, [r0, #14]
   2c93a:	4319      	orrs	r1, r3
   2c93c:	81c1      	strh	r1, [r0, #14]
}
   2c93e:	4770      	bx	lr

0002c940 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2c940:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2c942:	7a03      	ldrb	r3, [r0, #8]
   2c944:	075b      	lsls	r3, r3, #29
{
   2c946:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c948:	d501      	bpl.n	2c94e <bt_keys_clear+0xe>
		bt_id_del(keys);
   2c94a:	f7e1 fd01 	bl	e350 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   2c94e:	4620      	mov	r0, r4
   2c950:	2284      	movs	r2, #132	; 0x84
}
   2c952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2c956:	2100      	movs	r1, #0
   2c958:	f7fd bd0b 	b.w	2a372 <memset>

0002c95c <fixed_data_unref>:
}
   2c95c:	4770      	bx	lr

0002c95e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c95e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2c960:	6849      	ldr	r1, [r1, #4]
   2c962:	6809      	ldr	r1, [r1, #0]
   2c964:	f7f4 b8cc 	b.w	20b00 <net_buf_alloc_len>

0002c968 <net_buf_get>:
{
   2c968:	b570      	push	{r4, r5, r6, lr}
   2c96a:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2c96c:	f7f8 fd8e 	bl	2548c <z_impl_k_queue_get>
	if (!buf) {
   2c970:	4605      	mov	r5, r0
   2c972:	b128      	cbz	r0, 2c980 <net_buf_get+0x18>
   2c974:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2c976:	7963      	ldrb	r3, [r4, #5]
   2c978:	f013 0301 	ands.w	r3, r3, #1
   2c97c:	d102      	bne.n	2c984 <net_buf_get+0x1c>
	frag->frags = NULL;
   2c97e:	6023      	str	r3, [r4, #0]
}
   2c980:	4628      	mov	r0, r5
   2c982:	bd70      	pop	{r4, r5, r6, pc}
   2c984:	2300      	movs	r3, #0
   2c986:	2200      	movs	r2, #0
   2c988:	4630      	mov	r0, r6
   2c98a:	f7f8 fd7f 	bl	2548c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2c98e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2c990:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2c992:	f023 0301 	bic.w	r3, r3, #1
   2c996:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2c998:	4604      	mov	r4, r0
   2c99a:	e7ec      	b.n	2c976 <net_buf_get+0xe>

0002c99c <net_buf_simple_init_with_data>:
	buf->size  = size;
   2c99c:	b292      	uxth	r2, r2
	buf->__buf = data;
   2c99e:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2c9a0:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2c9a2:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2c9a4:	8082      	strh	r2, [r0, #4]
}
   2c9a6:	4770      	bx	lr

0002c9a8 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2c9a8:	6883      	ldr	r3, [r0, #8]
   2c9aa:	440b      	add	r3, r1
   2c9ac:	6003      	str	r3, [r0, #0]
}
   2c9ae:	4770      	bx	lr

0002c9b0 <net_buf_put>:
{
   2c9b0:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2c9b2:	460a      	mov	r2, r1
   2c9b4:	6814      	ldr	r4, [r2, #0]
   2c9b6:	b914      	cbnz	r4, 2c9be <net_buf_put+0xe>
}
   2c9b8:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2c9ba:	f000 be72 	b.w	2d6a2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2c9be:	7953      	ldrb	r3, [r2, #5]
   2c9c0:	f043 0301 	orr.w	r3, r3, #1
   2c9c4:	7153      	strb	r3, [r2, #5]
   2c9c6:	4622      	mov	r2, r4
   2c9c8:	e7f4      	b.n	2c9b4 <net_buf_put+0x4>

0002c9ca <net_buf_ref>:
	buf->ref++;
   2c9ca:	7902      	ldrb	r2, [r0, #4]
   2c9cc:	3201      	adds	r2, #1
   2c9ce:	7102      	strb	r2, [r0, #4]
}
   2c9d0:	4770      	bx	lr

0002c9d2 <net_buf_frag_last>:
{
   2c9d2:	4603      	mov	r3, r0
	while (buf->frags) {
   2c9d4:	4618      	mov	r0, r3
   2c9d6:	681b      	ldr	r3, [r3, #0]
   2c9d8:	2b00      	cmp	r3, #0
   2c9da:	d1fb      	bne.n	2c9d4 <net_buf_frag_last+0x2>
}
   2c9dc:	4770      	bx	lr

0002c9de <net_buf_frag_insert>:
	if (parent->frags) {
   2c9de:	6802      	ldr	r2, [r0, #0]
{
   2c9e0:	b510      	push	{r4, lr}
	if (parent->frags) {
   2c9e2:	b12a      	cbz	r2, 2c9f0 <net_buf_frag_insert+0x12>
   2c9e4:	460b      	mov	r3, r1
	while (buf->frags) {
   2c9e6:	461c      	mov	r4, r3
   2c9e8:	681b      	ldr	r3, [r3, #0]
   2c9ea:	2b00      	cmp	r3, #0
   2c9ec:	d1fb      	bne.n	2c9e6 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2c9ee:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   2c9f0:	6001      	str	r1, [r0, #0]
}
   2c9f2:	bd10      	pop	{r4, pc}

0002c9f4 <net_buf_frag_add>:
{
   2c9f4:	b510      	push	{r4, lr}
	if (!head) {
   2c9f6:	4604      	mov	r4, r0
   2c9f8:	b920      	cbnz	r0, 2ca04 <net_buf_frag_add+0x10>
	buf->ref++;
   2c9fa:	790b      	ldrb	r3, [r1, #4]
   2c9fc:	3301      	adds	r3, #1
   2c9fe:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2ca00:	4608      	mov	r0, r1
}
   2ca02:	bd10      	pop	{r4, pc}
   2ca04:	4603      	mov	r3, r0
	while (buf->frags) {
   2ca06:	4618      	mov	r0, r3
   2ca08:	681b      	ldr	r3, [r3, #0]
   2ca0a:	2b00      	cmp	r3, #0
   2ca0c:	d1fb      	bne.n	2ca06 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2ca0e:	f7ff ffe6 	bl	2c9de <net_buf_frag_insert>
   2ca12:	4620      	mov	r0, r4
   2ca14:	e7f5      	b.n	2ca02 <net_buf_frag_add+0xe>

0002ca16 <net_buf_frag_del>:
{
   2ca16:	b510      	push	{r4, lr}
	if (parent) {
   2ca18:	b108      	cbz	r0, 2ca1e <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   2ca1a:	680b      	ldr	r3, [r1, #0]
   2ca1c:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   2ca1e:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   2ca20:	2300      	movs	r3, #0
	net_buf_unref(frag);
   2ca22:	4608      	mov	r0, r1
	frag->frags = NULL;
   2ca24:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   2ca26:	f7f4 f8ff 	bl	20c28 <net_buf_unref>
}
   2ca2a:	4620      	mov	r0, r4
   2ca2c:	bd10      	pop	{r4, pc}

0002ca2e <net_buf_simple_add>:
	return buf->data + buf->len;
   2ca2e:	8883      	ldrh	r3, [r0, #4]
   2ca30:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2ca32:	4419      	add	r1, r3
   2ca34:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2ca36:	18d0      	adds	r0, r2, r3
   2ca38:	4770      	bx	lr

0002ca3a <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2ca3a:	b430      	push	{r4, r5}
   2ca3c:	8884      	ldrh	r4, [r0, #4]
   2ca3e:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2ca40:	18a3      	adds	r3, r4, r2
   2ca42:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2ca44:	1928      	adds	r0, r5, r4
}
   2ca46:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2ca48:	f7fd bc88 	b.w	2a35c <memcpy>

0002ca4c <net_buf_simple_add_u8>:
   2ca4c:	8883      	ldrh	r3, [r0, #4]
   2ca4e:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2ca50:	b510      	push	{r4, lr}
	buf->len += len;
   2ca52:	1c5c      	adds	r4, r3, #1
   2ca54:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2ca56:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2ca58:	18d0      	adds	r0, r2, r3
   2ca5a:	bd10      	pop	{r4, pc}

0002ca5c <net_buf_simple_add_le16>:
   2ca5c:	8883      	ldrh	r3, [r0, #4]
   2ca5e:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2ca60:	b530      	push	{r4, r5, lr}
   2ca62:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2ca64:	1c9d      	adds	r5, r3, #2
   2ca66:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2ca68:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   2ca6a:	0a09      	lsrs	r1, r1, #8
   2ca6c:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2ca6e:	bd30      	pop	{r4, r5, pc}

0002ca70 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2ca70:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2ca72:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2ca74:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2ca76:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2ca78:	4411      	add	r1, r2
	buf->data -= len;
   2ca7a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2ca7c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2ca7e:	4770      	bx	lr

0002ca80 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2ca80:	8882      	ldrh	r2, [r0, #4]
   2ca82:	1a52      	subs	r2, r2, r1
{
   2ca84:	4603      	mov	r3, r0
	buf->len -= len;
   2ca86:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2ca88:	6800      	ldr	r0, [r0, #0]
   2ca8a:	4408      	add	r0, r1
   2ca8c:	6018      	str	r0, [r3, #0]
}
   2ca8e:	4770      	bx	lr

0002ca90 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2ca90:	4603      	mov	r3, r0
	void *data = buf->data;
   2ca92:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2ca94:	889a      	ldrh	r2, [r3, #4]
   2ca96:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2ca98:	4401      	add	r1, r0
	buf->len -= len;
   2ca9a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2ca9c:	6019      	str	r1, [r3, #0]

	return data;
}
   2ca9e:	4770      	bx	lr

0002caa0 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2caa0:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2caa2:	6803      	ldr	r3, [r0, #0]
   2caa4:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2caa6:	2101      	movs	r1, #1
   2caa8:	f7ff ffea 	bl	2ca80 <net_buf_simple_pull>

	return val;
}
   2caac:	4620      	mov	r0, r4
   2caae:	bd10      	pop	{r4, pc}

0002cab0 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2cab0:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2cab2:	6803      	ldr	r3, [r0, #0]
   2cab4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2cab6:	2102      	movs	r1, #2
   2cab8:	f7ff ffe2 	bl	2ca80 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2cabc:	4620      	mov	r0, r4
   2cabe:	bd10      	pop	{r4, pc}

0002cac0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2cac0:	6802      	ldr	r2, [r0, #0]
   2cac2:	6880      	ldr	r0, [r0, #8]
}
   2cac4:	1a10      	subs	r0, r2, r0
   2cac6:	4770      	bx	lr

0002cac8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2cac8:	8883      	ldrh	r3, [r0, #4]
   2caca:	88c2      	ldrh	r2, [r0, #6]
   2cacc:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2cace:	6803      	ldr	r3, [r0, #0]
   2cad0:	6880      	ldr	r0, [r0, #8]
   2cad2:	1a18      	subs	r0, r3, r0
}
   2cad4:	1a10      	subs	r0, r2, r0
   2cad6:	4770      	bx	lr

0002cad8 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2cad8:	6903      	ldr	r3, [r0, #16]
{
   2cada:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2cadc:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   2cae0:	2300      	movs	r3, #0
   2cae2:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2cae4:	7f83      	ldrb	r3, [r0, #30]
{
   2cae6:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   2cae8:	b113      	cbz	r3, 2caf0 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2caea:	7a40      	ldrb	r0, [r0, #9]
   2caec:	f000 fc49 	bl	2d382 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   2caf0:	2301      	movs	r3, #1
   2caf2:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2caf4:	2300      	movs	r3, #0
   2caf6:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   2caf8:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   2cafa:	77a3      	strb	r3, [r4, #30]
}
   2cafc:	bd10      	pop	{r4, pc}

0002cafe <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2cafe:	2300      	movs	r3, #0
   2cb00:	f7fa bf1e 	b.w	27940 <z_impl_z_log_msg2_static_create>

0002cb04 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2cb04:	f7f8 bc06 	b.w	25314 <z_impl_k_mutex_lock>

0002cb08 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2cb08:	f7f8 bc7c 	b.w	25404 <z_impl_k_mutex_unlock>

0002cb0c <usb_dc_ep_read>:
{
   2cb0c:	b570      	push	{r4, r5, r6, lr}
   2cb0e:	4604      	mov	r4, r0
   2cb10:	460e      	mov	r6, r1
   2cb12:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2cb14:	f7f4 ff66 	bl	219e4 <usb_dc_ep_read_wait>
	if (ret) {
   2cb18:	b930      	cbnz	r0, 2cb28 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   2cb1a:	b906      	cbnz	r6, 2cb1e <usb_dc_ep_read+0x12>
   2cb1c:	b125      	cbz	r5, 2cb28 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   2cb1e:	4620      	mov	r0, r4
}
   2cb20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   2cb24:	f7f4 bfc0 	b.w	21aa8 <usb_dc_ep_read_continue>
}
   2cb28:	bd70      	pop	{r4, r5, r6, pc}

0002cb2a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2cb2a:	6903      	ldr	r3, [r0, #16]
   2cb2c:	b2c9      	uxtb	r1, r1
   2cb2e:	220c      	movs	r2, #12
   2cb30:	fb01 3302 	mla	r3, r1, r2, r3
   2cb34:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2cb36:	f000 0007 	and.w	r0, r0, #7
   2cb3a:	4770      	bx	lr

0002cb3c <set_on_state>:
	__asm__ volatile(
   2cb3c:	f04f 0320 	mov.w	r3, #32
   2cb40:	f3ef 8211 	mrs	r2, BASEPRI
   2cb44:	f383 8812 	msr	BASEPRI_MAX, r3
   2cb48:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2cb4c:	6803      	ldr	r3, [r0, #0]
   2cb4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2cb52:	f043 0302 	orr.w	r3, r3, #2
   2cb56:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2cb58:	f382 8811 	msr	BASEPRI, r2
   2cb5c:	f3bf 8f6f 	isb	sy
}
   2cb60:	4770      	bx	lr

0002cb62 <stop>:
{
   2cb62:	4603      	mov	r3, r0
   2cb64:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   2cb66:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2cb68:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2cb6a:	f04f 0420 	mov.w	r4, #32
   2cb6e:	f3ef 8611 	mrs	r6, BASEPRI
   2cb72:	f384 8812 	msr	BASEPRI_MAX, r4
   2cb76:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cb7a:	250c      	movs	r5, #12
   2cb7c:	fb05 0401 	mla	r4, r5, r1, r0
   2cb80:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2cb82:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2cb86:	d001      	beq.n	2cb8c <stop+0x2a>
   2cb88:	42a2      	cmp	r2, r4
   2cb8a:	d111      	bne.n	2cbb0 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2cb8c:	fb05 0001 	mla	r0, r5, r1, r0
   2cb90:	2201      	movs	r2, #1
   2cb92:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2cb94:	2000      	movs	r0, #0
	__asm__ volatile(
   2cb96:	f386 8811 	msr	BASEPRI, r6
   2cb9a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2cb9e:	b930      	cbnz	r0, 2cbae <stop+0x4c>
	get_sub_config(dev, type)->stop();
   2cba0:	685b      	ldr	r3, [r3, #4]
   2cba2:	220c      	movs	r2, #12
   2cba4:	fb02 3101 	mla	r1, r2, r1, r3
   2cba8:	684b      	ldr	r3, [r1, #4]
   2cbaa:	4798      	blx	r3
	return 0;
   2cbac:	2000      	movs	r0, #0
}
   2cbae:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2cbb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cbb4:	e7ef      	b.n	2cb96 <stop+0x34>

0002cbb6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2cbb6:	2280      	movs	r2, #128	; 0x80
   2cbb8:	f7ff bfd3 	b.w	2cb62 <stop>

0002cbbc <async_start>:
{
   2cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cbbe:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2cbc0:	6904      	ldr	r4, [r0, #16]
{
   2cbc2:	4605      	mov	r5, r0
   2cbc4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2cbc6:	f04f 0020 	mov.w	r0, #32
   2cbca:	f3ef 8c11 	mrs	ip, BASEPRI
   2cbce:	f380 8812 	msr	BASEPRI_MAX, r0
   2cbd2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cbd6:	260c      	movs	r6, #12
   2cbd8:	fb06 4601 	mla	r6, r6, r1, r4
   2cbdc:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2cbde:	f000 0e07 	and.w	lr, r0, #7
   2cbe2:	f1be 0f01 	cmp.w	lr, #1
   2cbe6:	d110      	bne.n	2cc0a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2cbe8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2cbea:	2600      	movs	r6, #0
	__asm__ volatile(
   2cbec:	f38c 8811 	msr	BASEPRI, ip
   2cbf0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2cbf4:	b93e      	cbnz	r6, 2cc06 <async_start+0x4a>
	subdata->cb = cb;
   2cbf6:	200c      	movs	r0, #12
   2cbf8:	4341      	muls	r1, r0
   2cbfa:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2cbfc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2cc00:	686b      	ldr	r3, [r5, #4]
   2cc02:	585b      	ldr	r3, [r3, r1]
   2cc04:	4798      	blx	r3
}
   2cc06:	4630      	mov	r0, r6
   2cc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2cc0a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2cc0e:	4287      	cmp	r7, r0
   2cc10:	bf14      	ite	ne
   2cc12:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2cc16:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2cc1a:	e7e7      	b.n	2cbec <async_start+0x30>

0002cc1c <api_start>:
{
   2cc1c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2cc1e:	2480      	movs	r4, #128	; 0x80
   2cc20:	9400      	str	r4, [sp, #0]
   2cc22:	f7ff ffcb 	bl	2cbbc <async_start>
}
   2cc26:	b002      	add	sp, #8
   2cc28:	bd10      	pop	{r4, pc}

0002cc2a <onoff_started_callback>:
	return &data->mgr[type];
   2cc2a:	6900      	ldr	r0, [r0, #16]
{
   2cc2c:	b410      	push	{r4}
	return &data->mgr[type];
   2cc2e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2cc30:	241c      	movs	r4, #28
   2cc32:	fb03 0004 	mla	r0, r3, r4, r0
   2cc36:	2100      	movs	r1, #0
}
   2cc38:	bc10      	pop	{r4}
	notify(mgr, 0);
   2cc3a:	4710      	bx	r2

0002cc3c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2cc3c:	2000      	movs	r0, #0
   2cc3e:	f000 ba4c 	b.w	2d0da <nrfx_clock_start>

0002cc42 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2cc42:	2000      	movs	r0, #0
   2cc44:	f7f6 bb98 	b.w	23378 <nrfx_clock_stop>

0002cc48 <blocking_start_callback>:
{
   2cc48:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2cc4a:	f7f8 bc53 	b.w	254f4 <z_impl_k_sem_give>

0002cc4e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cc4e:	6843      	ldr	r3, [r0, #4]
   2cc50:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2cc52:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2cc56:	600b      	str	r3, [r1, #0]
}
   2cc58:	2000      	movs	r0, #0
   2cc5a:	4770      	bx	lr

0002cc5c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cc5c:	6843      	ldr	r3, [r0, #4]
   2cc5e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2cc60:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2cc64:	4042      	eors	r2, r0
   2cc66:	400a      	ands	r2, r1
   2cc68:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2cc6a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2cc6e:	2000      	movs	r0, #0
   2cc70:	4770      	bx	lr

0002cc72 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cc72:	6843      	ldr	r3, [r0, #4]
   2cc74:	685b      	ldr	r3, [r3, #4]
}
   2cc76:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2cc78:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2cc7c:	4770      	bx	lr

0002cc7e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cc7e:	6843      	ldr	r3, [r0, #4]
   2cc80:	685b      	ldr	r3, [r3, #4]
}
   2cc82:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2cc84:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2cc88:	4770      	bx	lr

0002cc8a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cc8a:	6843      	ldr	r3, [r0, #4]
   2cc8c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2cc8e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2cc92:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2cc94:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2cc98:	2000      	movs	r0, #0
   2cc9a:	4770      	bx	lr

0002cc9c <gpio_nrfx_manage_callback>:
	return port->data;
   2cc9c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2cc9e:	6858      	ldr	r0, [r3, #4]
{
   2cca0:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2cca2:	b158      	cbz	r0, 2ccbc <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cca4:	2400      	movs	r4, #0
   2cca6:	4281      	cmp	r1, r0
   2cca8:	d112      	bne.n	2ccd0 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2ccaa:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2ccac:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2ccae:	b954      	cbnz	r4, 2ccc6 <gpio_nrfx_manage_callback+0x2a>
   2ccb0:	428d      	cmp	r5, r1
	list->head = node;
   2ccb2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2ccb4:	d100      	bne.n	2ccb8 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2ccb6:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2ccb8:	2000      	movs	r0, #0
   2ccba:	6008      	str	r0, [r1, #0]
	if (set) {
   2ccbc:	b96a      	cbnz	r2, 2ccda <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2ccbe:	2000      	movs	r0, #0
}
   2ccc0:	bd30      	pop	{r4, r5, pc}
   2ccc2:	4628      	mov	r0, r5
   2ccc4:	e7ef      	b.n	2cca6 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2ccc6:	428d      	cmp	r5, r1
	parent->next = child;
   2ccc8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2ccca:	bf08      	it	eq
   2cccc:	609c      	streq	r4, [r3, #8]
}
   2ccce:	e7f3      	b.n	2ccb8 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2ccd0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ccd2:	4604      	mov	r4, r0
   2ccd4:	2d00      	cmp	r5, #0
   2ccd6:	d1f4      	bne.n	2ccc2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2ccd8:	b13a      	cbz	r2, 2ccea <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2ccda:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2ccdc:	685a      	ldr	r2, [r3, #4]
   2ccde:	600a      	str	r2, [r1, #0]
	list->head = node;
   2cce0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cce2:	2800      	cmp	r0, #0
   2cce4:	d1eb      	bne.n	2ccbe <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2cce6:	6099      	str	r1, [r3, #8]
}
   2cce8:	e7ea      	b.n	2ccc0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2ccea:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2ccee:	e7e7      	b.n	2ccc0 <gpio_nrfx_manage_callback+0x24>

0002ccf0 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2ccf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2ccf2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   2ccf6:	2908      	cmp	r1, #8
   2ccf8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2ccfa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   2ccfc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2ccfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   2cd00:	ea4f 2515 	mov.w	r5, r5, lsr #8
   2cd04:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2cd08:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2cd0c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   2cd10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   2cd14:	ea43 0305 	orr.w	r3, r3, r5
   2cd18:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   2cd1c:	ea43 0302 	orr.w	r3, r3, r2
   2cd20:	9300      	str	r3, [sp, #0]
   2cd22:	6e26      	ldr	r6, [r4, #96]	; 0x60
   2cd24:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2cd26:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2cd28:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2cd2a:	ea4f 2415 	mov.w	r4, r5, lsr #8
   2cd2e:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2cd32:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2cd36:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   2cd3a:	ea43 0304 	orr.w	r3, r3, r4
   2cd3e:	ea4f 2402 	mov.w	r4, r2, lsl #8
   2cd42:	bf28      	it	cs
   2cd44:	2108      	movcs	r1, #8
   2cd46:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   2cd4a:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   2cd4c:	460a      	mov	r2, r1
   2cd4e:	460c      	mov	r4, r1
   2cd50:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2cd52:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   2cd54:	f7fd fb02 	bl	2a35c <memcpy>

	return length;
}
   2cd58:	4620      	mov	r0, r4
   2cd5a:	b002      	add	sp, #8
   2cd5c:	bd70      	pop	{r4, r5, r6, pc}

0002cd5e <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
   2cd5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cd62:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
   2cd66:	f002 0301 	and.w	r3, r2, #1
		flags |= RESET_PIN;
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
   2cd6a:	0791      	lsls	r1, r2, #30
		flags |= RESET_WATCHDOG;
   2cd6c:	bf48      	it	mi
   2cd6e:	f043 0310 	orrmi.w	r3, r3, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
   2cd72:	0711      	lsls	r1, r2, #28
		flags |= RESET_CPU_LOCKUP;
   2cd74:	bf48      	it	mi
   2cd76:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
   2cd7a:	03d1      	lsls	r1, r2, #15
		flags |= RESET_LOW_POWER_WAKE;
   2cd7c:	bf48      	it	mi
   2cd7e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
   2cd82:	0351      	lsls	r1, r2, #13
		flags |= RESET_DEBUG;
   2cd84:	bf48      	it	mi
   2cd86:	f043 0320 	orrmi.w	r3, r3, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
   2cd8a:	0752      	lsls	r2, r2, #29
		flags |= RESET_SOFTWARE;
   2cd8c:	bf48      	it	mi
   2cd8e:	f043 0302 	orrmi.w	r3, r3, #2
	}
#endif

	*cause = flags;
   2cd92:	6003      	str	r3, [r0, #0]

	return 0;
}
   2cd94:	2000      	movs	r0, #0
   2cd96:	4770      	bx	lr

0002cd98 <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
   2cd98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cd9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cda0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
   2cda4:	2000      	movs	r0, #0
   2cda6:	4770      	bx	lr

0002cda8 <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
   2cda8:	f240 13b3 	movw	r3, #435	; 0x1b3
   2cdac:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
   2cdae:	2000      	movs	r0, #0
   2cdb0:	4770      	bx	lr

0002cdb2 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2cdb2:	6902      	ldr	r2, [r0, #16]
{
   2cdb4:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2cdb6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2cdba:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2cdbe:	2000      	movs	r0, #0
   2cdc0:	4770      	bx	lr

0002cdc2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2cdc2:	6843      	ldr	r3, [r0, #4]
   2cdc4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2cdc6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2cdca:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2cdce:	4770      	bx	lr

0002cdd0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2cdd0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2cdd2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2cdd4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2cdd6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2cdda:	b148      	cbz	r0, 2cdf0 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2cddc:	7d52      	ldrb	r2, [r2, #21]
   2cdde:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cde0:	2000      	movs	r0, #0
   2cde2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2cde6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cdea:	2201      	movs	r2, #1
   2cdec:	601a      	str	r2, [r3, #0]
	return 0;
   2cdee:	4770      	bx	lr
		return -1;
   2cdf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2cdf4:	4770      	bx	lr

0002cdf6 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2cdf6:	2a00      	cmp	r2, #0
{
   2cdf8:	b510      	push	{r4, lr}
   2cdfa:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2cdfc:	dd0f      	ble.n	2ce1e <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2cdfe:	6843      	ldr	r3, [r0, #4]
   2ce00:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ce02:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ce06:	b148      	cbz	r0, 2ce1c <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   2ce08:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ce0a:	2000      	movs	r0, #0
   2ce0c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2ce10:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2ce14:	7d52      	ldrb	r2, [r2, #21]
   2ce16:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ce18:	2001      	movs	r0, #1
   2ce1a:	6018      	str	r0, [r3, #0]
}
   2ce1c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2ce1e:	2000      	movs	r0, #0
   2ce20:	e7fc      	b.n	2ce1c <uarte_nrfx_fifo_read+0x26>

0002ce22 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2ce22:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2ce24:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2ce26:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2ce28:	f04f 0020 	mov.w	r0, #32
   2ce2c:	f3ef 8311 	mrs	r3, BASEPRI
   2ce30:	f380 8812 	msr	BASEPRI_MAX, r0
   2ce34:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2ce38:	68c9      	ldr	r1, [r1, #12]
   2ce3a:	2000      	movs	r0, #0
   2ce3c:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2ce3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2ce42:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2ce46:	f383 8811 	msr	BASEPRI, r3
   2ce4a:	f3bf 8f6f 	isb	sy
}
   2ce4e:	4770      	bx	lr

0002ce50 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2ce50:	6903      	ldr	r3, [r0, #16]
   2ce52:	68db      	ldr	r3, [r3, #12]
   2ce54:	2201      	movs	r2, #1
   2ce56:	739a      	strb	r2, [r3, #14]
}
   2ce58:	4770      	bx	lr

0002ce5a <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2ce5a:	6903      	ldr	r3, [r0, #16]
   2ce5c:	68db      	ldr	r3, [r3, #12]
   2ce5e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2ce60:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2ce64:	b962      	cbnz	r2, 2ce80 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2ce66:	6842      	ldr	r2, [r0, #4]
   2ce68:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ce6a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2ce6e:	b140      	cbz	r0, 2ce82 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2ce70:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   2ce74:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2ce78:	d003      	beq.n	2ce82 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2ce7a:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2ce7c:	2001      	movs	r0, #1
   2ce7e:	4770      	bx	lr
   2ce80:	2000      	movs	r0, #0
}
   2ce82:	4770      	bx	lr

0002ce84 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2ce84:	6843      	ldr	r3, [r0, #4]
   2ce86:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ce88:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2ce8c:	3800      	subs	r0, #0
   2ce8e:	bf18      	it	ne
   2ce90:	2001      	movne	r0, #1
   2ce92:	4770      	bx	lr

0002ce94 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2ce94:	6843      	ldr	r3, [r0, #4]
   2ce96:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2ce98:	2210      	movs	r2, #16
   2ce9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ce9e:	4770      	bx	lr

0002cea0 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2cea0:	6843      	ldr	r3, [r0, #4]
   2cea2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2cea4:	2210      	movs	r2, #16
   2cea6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2ceaa:	4770      	bx	lr

0002ceac <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2ceac:	6843      	ldr	r3, [r0, #4]
   2ceae:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2ceb0:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ceb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ceb8:	4770      	bx	lr

0002ceba <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2ceba:	6843      	ldr	r3, [r0, #4]
   2cebc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2cebe:	f44f 7200 	mov.w	r2, #512	; 0x200
   2cec2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2cec6:	4770      	bx	lr

0002cec8 <uarte_nrfx_irq_update>:
}
   2cec8:	2001      	movs	r0, #1
   2ceca:	4770      	bx	lr

0002cecc <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2cecc:	6903      	ldr	r3, [r0, #16]
   2cece:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2ced0:	e9c3 1200 	strd	r1, r2, [r3]
}
   2ced4:	4770      	bx	lr

0002ced6 <uarte_nrfx_irq_is_pending>:
{
   2ced6:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2ced8:	6843      	ldr	r3, [r0, #4]
   2ceda:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2cedc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2cee0:	025b      	lsls	r3, r3, #9
{
   2cee2:	4604      	mov	r4, r0
		||
   2cee4:	d405      	bmi.n	2cef2 <uarte_nrfx_irq_is_pending+0x1c>
   2cee6:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2ceea:	f010 0010 	ands.w	r0, r0, #16
   2ceee:	d106      	bne.n	2cefe <uarte_nrfx_irq_is_pending+0x28>
}
   2cef0:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2cef2:	f7ff ffb2 	bl	2ce5a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2cef6:	2800      	cmp	r0, #0
   2cef8:	d0f5      	beq.n	2cee6 <uarte_nrfx_irq_is_pending+0x10>
		||
   2cefa:	2001      	movs	r0, #1
   2cefc:	e7f8      	b.n	2cef0 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2cefe:	4620      	mov	r0, r4
   2cf00:	f7ff ffc0 	bl	2ce84 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2cf04:	3800      	subs	r0, #0
   2cf06:	bf18      	it	ne
   2cf08:	2001      	movne	r0, #1
   2cf0a:	e7f1      	b.n	2cef0 <uarte_nrfx_irq_is_pending+0x1a>

0002cf0c <nrf_gpio_cfg_input>:
{
   2cf0c:	b507      	push	{r0, r1, r2, lr}
   2cf0e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cf10:	a801      	add	r0, sp, #4
   2cf12:	f7f5 fb35 	bl	22580 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2cf16:	9b01      	ldr	r3, [sp, #4]
   2cf18:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2cf1c:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   2cf1e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   2cf22:	b003      	add	sp, #12
   2cf24:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf28 <tx_start.isra.0>:
	return config->uarte_regs;
   2cf28:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2cf2a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2cf2e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cf32:	2200      	movs	r2, #0
   2cf34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2cf38:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2cf3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2cf40:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2cf44:	6842      	ldr	r2, [r0, #4]
   2cf46:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2cf48:	bf41      	itttt	mi
   2cf4a:	2208      	movmi	r2, #8
   2cf4c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2cf50:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   2cf54:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cf58:	2201      	movs	r2, #1
   2cf5a:	609a      	str	r2, [r3, #8]
}
   2cf5c:	4770      	bx	lr

0002cf5e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2cf5e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2cf60:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2cf62:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2cf66:	b940      	cbnz	r0, 2cf7a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2cf68:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2cf6a:	079b      	lsls	r3, r3, #30
   2cf6c:	d406      	bmi.n	2cf7c <is_tx_ready.isra.0+0x1e>
   2cf6e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2cf72:	3800      	subs	r0, #0
   2cf74:	bf18      	it	ne
   2cf76:	2001      	movne	r0, #1
   2cf78:	4770      	bx	lr
   2cf7a:	2001      	movs	r0, #1
}
   2cf7c:	4770      	bx	lr

0002cf7e <uarte_nrfx_fifo_fill>:
{
   2cf7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2cf80:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2cf82:	68f3      	ldr	r3, [r6, #12]
   2cf84:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2cf86:	f3bf 8f5b 	dmb	ish
   2cf8a:	4294      	cmp	r4, r2
   2cf8c:	bfa8      	it	ge
   2cf8e:	4614      	movge	r4, r2
{
   2cf90:	4605      	mov	r5, r0
   2cf92:	3310      	adds	r3, #16
   2cf94:	2201      	movs	r2, #1
   2cf96:	e853 0f00 	ldrex	r0, [r3]
   2cf9a:	2800      	cmp	r0, #0
   2cf9c:	d103      	bne.n	2cfa6 <uarte_nrfx_fifo_fill+0x28>
   2cf9e:	e843 2700 	strex	r7, r2, [r3]
   2cfa2:	2f00      	cmp	r7, #0
   2cfa4:	d1f7      	bne.n	2cf96 <uarte_nrfx_fifo_fill+0x18>
   2cfa6:	f3bf 8f5b 	dmb	ish
   2cfaa:	bf0c      	ite	eq
   2cfac:	4613      	moveq	r3, r2
   2cfae:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2cfb0:	d01d      	beq.n	2cfee <uarte_nrfx_fifo_fill+0x70>
		return 0;
   2cfb2:	461c      	mov	r4, r3
}
   2cfb4:	4620      	mov	r0, r4
   2cfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2cfb8:	68f2      	ldr	r2, [r6, #12]
   2cfba:	5cc8      	ldrb	r0, [r1, r3]
   2cfbc:	6892      	ldr	r2, [r2, #8]
   2cfbe:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   2cfc0:	3301      	adds	r3, #1
   2cfc2:	42a3      	cmp	r3, r4
   2cfc4:	dbf8      	blt.n	2cfb8 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   2cfc6:	f04f 0320 	mov.w	r3, #32
   2cfca:	f3ef 8711 	mrs	r7, BASEPRI
   2cfce:	f383 8812 	msr	BASEPRI_MAX, r3
   2cfd2:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2cfd6:	6868      	ldr	r0, [r5, #4]
   2cfd8:	f7ff ffc1 	bl	2cf5e <is_tx_ready.isra.0>
   2cfdc:	68f3      	ldr	r3, [r6, #12]
   2cfde:	b940      	cbnz	r0, 2cff2 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   2cfe0:	6118      	str	r0, [r3, #16]
		len = 0;
   2cfe2:	4604      	mov	r4, r0
	__asm__ volatile(
   2cfe4:	f387 8811 	msr	BASEPRI, r7
   2cfe8:	f3bf 8f6f 	isb	sy
	return len;
   2cfec:	e7e2      	b.n	2cfb4 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   2cfee:	2300      	movs	r3, #0
   2cff0:	e7e7      	b.n	2cfc2 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   2cff2:	6899      	ldr	r1, [r3, #8]
   2cff4:	6868      	ldr	r0, [r5, #4]
   2cff6:	4622      	mov	r2, r4
   2cff8:	f7ff ff96 	bl	2cf28 <tx_start.isra.0>
   2cffc:	e7f2      	b.n	2cfe4 <uarte_nrfx_fifo_fill+0x66>

0002cffe <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2cffe:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2d000:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2d002:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2d006:	05c9      	lsls	r1, r1, #23
{
   2d008:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2d00a:	d518      	bpl.n	2d03e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d00c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2d010:	b1a9      	cbz	r1, 2d03e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2d012:	f04f 0420 	mov.w	r4, #32
   2d016:	f3ef 8111 	mrs	r1, BASEPRI
   2d01a:	f384 8812 	msr	BASEPRI_MAX, r4
   2d01e:	f3bf 8f6f 	isb	sy
   2d022:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d026:	b134      	cbz	r4, 2d036 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d028:	2400      	movs	r4, #0
   2d02a:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2d02e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d032:	2401      	movs	r4, #1
   2d034:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   2d036:	f381 8811 	msr	BASEPRI, r1
   2d03a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2d03e:	6852      	ldr	r2, [r2, #4]
   2d040:	06d2      	lsls	r2, r2, #27
   2d042:	d51a      	bpl.n	2d07a <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   2d044:	f04f 0220 	mov.w	r2, #32
   2d048:	f3ef 8111 	mrs	r1, BASEPRI
   2d04c:	f382 8812 	msr	BASEPRI_MAX, r2
   2d050:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d054:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2d058:	b112      	cbz	r2, 2d060 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d05a:	2200      	movs	r2, #0
   2d05c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2d060:	6902      	ldr	r2, [r0, #16]
   2d062:	68d2      	ldr	r2, [r2, #12]
   2d064:	b10a      	cbz	r2, 2d06a <uarte_nrfx_isr_int+0x6c>
   2d066:	6912      	ldr	r2, [r2, #16]
   2d068:	b91a      	cbnz	r2, 2d072 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   2d06a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2d06e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2d072:	f381 8811 	msr	BASEPRI, r1
   2d076:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   2d07a:	6902      	ldr	r2, [r0, #16]
   2d07c:	68d2      	ldr	r2, [r2, #12]
   2d07e:	b15a      	cbz	r2, 2d098 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d080:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2d084:	b151      	cbz	r1, 2d09c <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   2d086:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   2d088:	2100      	movs	r1, #0
   2d08a:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2d08c:	b134      	cbz	r4, 2d09c <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   2d08e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2d092:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2d096:	7391      	strb	r1, [r2, #14]
}
   2d098:	bc10      	pop	{r4}
   2d09a:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d09c:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2d0a0:	b121      	cbz	r1, 2d0ac <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d0a2:	2100      	movs	r1, #0
   2d0a4:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2d0a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2d0ac:	6813      	ldr	r3, [r2, #0]
   2d0ae:	2b00      	cmp	r3, #0
   2d0b0:	d0f2      	beq.n	2d098 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2d0b2:	6851      	ldr	r1, [r2, #4]
}
   2d0b4:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2d0b6:	4718      	bx	r3

0002d0b8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2d0b8:	4770      	bx	lr

0002d0ba <sys_clock_cycle_get_32>:
{
   2d0ba:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2d0bc:	f7f5 fe22 	bl	22d04 <z_nrf_rtc_timer_read>
}
   2d0c0:	bd08      	pop	{r3, pc}

0002d0c2 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d0c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2d0c6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2d0ca:	f1a0 0308 	sub.w	r3, r0, #8
   2d0ce:	4258      	negs	r0, r3
   2d0d0:	4158      	adcs	r0, r3
   2d0d2:	4770      	bx	lr

0002d0d4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2d0d4:	4700      	bx	r0

0002d0d6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2d0d6:	f000 bd7a 	b.w	2dbce <z_impl_k_busy_wait>

0002d0da <nrfx_clock_start>:
    switch (domain)
   2d0da:	b110      	cbz	r0, 2d0e2 <nrfx_clock_start+0x8>
   2d0dc:	2801      	cmp	r0, #1
   2d0de:	d01d      	beq.n	2d11c <nrfx_clock_start+0x42>
   2d0e0:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2d0e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d0e6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2d0ea:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2d0ee:	03c9      	lsls	r1, r1, #15
   2d0f0:	d512      	bpl.n	2d118 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2d0f2:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2d0f6:	2a01      	cmp	r2, #1
   2d0f8:	d10e      	bne.n	2d118 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2d0fa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d0fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d102:	2200      	movs	r2, #0
   2d104:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2d108:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2d10c:	2202      	movs	r2, #2
   2d10e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d112:	2201      	movs	r2, #1
   2d114:	609a      	str	r2, [r3, #8]
}
   2d116:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   2d118:	2200      	movs	r2, #0
   2d11a:	e7ee      	b.n	2d0fa <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d11c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d120:	2200      	movs	r2, #0
   2d122:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2d126:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2d12a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d12e:	6018      	str	r0, [r3, #0]
}
   2d130:	4770      	bx	lr

0002d132 <nrf_gpio_reconfigure>:
{
   2d132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d134:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d136:	a801      	add	r0, sp, #4
{
   2d138:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2d13c:	4617      	mov	r7, r2
   2d13e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d140:	f7f6 f98a 	bl	23458 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2d144:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2d146:	2f00      	cmp	r7, #0
   2d148:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2d14c:	bf14      	ite	ne
   2d14e:	2302      	movne	r3, #2
   2d150:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2d152:	2900      	cmp	r1, #0
   2d154:	bf18      	it	ne
   2d156:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2d15a:	2d00      	cmp	r5, #0
   2d15c:	bf14      	ite	ne
   2d15e:	f04f 0c0c 	movne.w	ip, #12
   2d162:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2d166:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2d168:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2d16c:	bf14      	ite	ne
   2d16e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2d172:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2d176:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2d178:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2d17c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2d180:	bf14      	ite	ne
   2d182:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2d186:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2d18a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2d18e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2d192:	b101      	cbz	r1, 2d196 <nrf_gpio_reconfigure+0x64>
   2d194:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2d196:	b10f      	cbz	r7, 2d19c <nrf_gpio_reconfigure+0x6a>
   2d198:	783f      	ldrb	r7, [r7, #0]
   2d19a:	007f      	lsls	r7, r7, #1
   2d19c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2d19e:	b10d      	cbz	r5, 2d1a4 <nrf_gpio_reconfigure+0x72>
   2d1a0:	782d      	ldrb	r5, [r5, #0]
   2d1a2:	00ad      	lsls	r5, r5, #2
   2d1a4:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2d1a6:	b10c      	cbz	r4, 2d1ac <nrf_gpio_reconfigure+0x7a>
   2d1a8:	7822      	ldrb	r2, [r4, #0]
   2d1aa:	0214      	lsls	r4, r2, #8
   2d1ac:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2d1ae:	b10e      	cbz	r6, 2d1b4 <nrf_gpio_reconfigure+0x82>
   2d1b0:	7836      	ldrb	r6, [r6, #0]
   2d1b2:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2d1b4:	432c      	orrs	r4, r5
   2d1b6:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2d1b8:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2d1bc:	b003      	add	sp, #12
   2d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d1c0 <nrf_gpio_cfg_sense_set>:
{
   2d1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2d1c2:	f10d 030f 	add.w	r3, sp, #15
   2d1c6:	9301      	str	r3, [sp, #4]
   2d1c8:	2300      	movs	r3, #0
{
   2d1ca:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2d1ce:	9300      	str	r3, [sp, #0]
   2d1d0:	461a      	mov	r2, r3
   2d1d2:	4619      	mov	r1, r3
   2d1d4:	f7ff ffad 	bl	2d132 <nrf_gpio_reconfigure>
}
   2d1d8:	b005      	add	sp, #20
   2d1da:	f85d fb04 	ldr.w	pc, [sp], #4

0002d1de <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d1de:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2d1e2:	681a      	ldr	r2, [r3, #0]
   2d1e4:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d1e6:	bf1f      	itttt	ne
   2d1e8:	2200      	movne	r2, #0
   2d1ea:	601a      	strne	r2, [r3, #0]
   2d1ec:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d1ee:	2001      	movne	r0, #1
   2d1f0:	bf08      	it	eq
   2d1f2:	2000      	moveq	r0, #0
}
   2d1f4:	4770      	bx	lr

0002d1f6 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2d1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d1fa:	f44f 7260 	mov.w	r2, #896	; 0x380
   2d1fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2d202:	4770      	bx	lr

0002d204 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2d204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d208:	f44f 7260 	mov.w	r2, #896	; 0x380
   2d20c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2d210:	4770      	bx	lr

0002d212 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2d212:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2d214:	f7f6 fcd0 	bl	23bb8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   2d218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2d21c:	f7f6 b8e8 	b.w	233f0 <nrfx_clock_irq_handler>

0002d220 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2d224:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2d228:	f1a0 0308 	sub.w	r3, r0, #8
   2d22c:	4258      	negs	r0, r3
   2d22e:	4158      	adcs	r0, r3
   2d230:	4770      	bx	lr

0002d232 <nrfx_usbd_consumer>:
{
   2d232:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   2d234:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   2d236:	680d      	ldr	r5, [r1, #0]
   2d238:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   2d23a:	bf97      	itett	ls
   2d23c:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   2d240:	2100      	movhi	r1, #0
        size -= data_size;
   2d242:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   2d244:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   2d246:	bf8e      	itee	hi
   2d248:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   2d24c:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2d24e:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   2d250:	429a      	cmp	r2, r3
   2d252:	d103      	bne.n	2d25c <nrfx_usbd_consumer+0x2a>
   2d254:	1e20      	subs	r0, r4, #0
   2d256:	bf18      	it	ne
   2d258:	2001      	movne	r0, #1
}
   2d25a:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   2d25c:	2000      	movs	r0, #0
   2d25e:	e7fc      	b.n	2d25a <nrfx_usbd_consumer+0x28>

0002d260 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   2d260:	684b      	ldr	r3, [r1, #4]
{
   2d262:	b510      	push	{r4, lr}
   2d264:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   2d266:	680c      	ldr	r4, [r1, #0]
   2d268:	bf28      	it	cs
   2d26a:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   2d26c:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   2d270:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   2d272:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   2d274:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2d276:	441a      	add	r2, r3
}
   2d278:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2d27a:	600a      	str	r2, [r1, #0]
}
   2d27c:	bf18      	it	ne
   2d27e:	2001      	movne	r0, #1
   2d280:	bd10      	pop	{r4, pc}

0002d282 <nrfx_usbd_feeder_ram_zlp>:
{
   2d282:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   2d284:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2d286:	680b      	ldr	r3, [r1, #0]
   2d288:	42a2      	cmp	r2, r4
   2d28a:	bf28      	it	cs
   2d28c:	4622      	movcs	r2, r4
   2d28e:	2a00      	cmp	r2, #0
   2d290:	bf14      	ite	ne
   2d292:	461d      	movne	r5, r3
   2d294:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   2d296:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   2d29a:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   2d29e:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   2d2a0:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2d2a2:	600a      	str	r2, [r1, #0]
}
   2d2a4:	bf14      	ite	ne
   2d2a6:	2001      	movne	r0, #1
   2d2a8:	2000      	moveq	r0, #0
   2d2aa:	bd30      	pop	{r4, r5, pc}

0002d2ac <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   2d2ac:	f010 0f80 	tst.w	r0, #128	; 0x80
   2d2b0:	bf14      	ite	ne
   2d2b2:	2300      	movne	r3, #0
   2d2b4:	2310      	moveq	r3, #16
   2d2b6:	f000 000f 	and.w	r0, r0, #15
}
   2d2ba:	4418      	add	r0, r3
   2d2bc:	4770      	bx	lr

0002d2be <ev_started_handler>:
}
   2d2be:	4770      	bx	lr

0002d2c0 <nrf_usbd_epin_dma_handler>:
{
   2d2c0:	b508      	push	{r3, lr}
   2d2c2:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   2d2c4:	f7f6 fcf0 	bl	23ca8 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2d2c8:	4608      	mov	r0, r1
   2d2ca:	f7f6 fcdf 	bl	23c8c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2d2ce:	7b83      	ldrb	r3, [r0, #14]
   2d2d0:	2b03      	cmp	r3, #3
   2d2d2:	d10a      	bne.n	2d2ea <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d2d4:	4608      	mov	r0, r1
   2d2d6:	f7ff ffe9 	bl	2d2ac <ep2bit>
   2d2da:	2301      	movs	r3, #1
   2d2dc:	fa03 f000 	lsl.w	r0, r3, r0
   2d2e0:	43c0      	mvns	r0, r0
}
   2d2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d2e6:	f7f6 bdef 	b.w	23ec8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2d2ea:	6803      	ldr	r3, [r0, #0]
   2d2ec:	2b00      	cmp	r3, #0
   2d2ee:	d0f1      	beq.n	2d2d4 <nrf_usbd_epin_dma_handler+0x14>
}
   2d2f0:	bd08      	pop	{r3, pc}

0002d2f2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   2d2f2:	2087      	movs	r0, #135	; 0x87
   2d2f4:	f7ff bfe4 	b.w	2d2c0 <nrf_usbd_epin_dma_handler>

0002d2f8 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   2d2f8:	2086      	movs	r0, #134	; 0x86
   2d2fa:	f7ff bfe1 	b.w	2d2c0 <nrf_usbd_epin_dma_handler>

0002d2fe <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   2d2fe:	2085      	movs	r0, #133	; 0x85
   2d300:	f7ff bfde 	b.w	2d2c0 <nrf_usbd_epin_dma_handler>

0002d304 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   2d304:	2084      	movs	r0, #132	; 0x84
   2d306:	f7ff bfdb 	b.w	2d2c0 <nrf_usbd_epin_dma_handler>

0002d30a <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   2d30a:	2083      	movs	r0, #131	; 0x83
   2d30c:	f7ff bfd8 	b.w	2d2c0 <nrf_usbd_epin_dma_handler>

0002d310 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   2d310:	2082      	movs	r0, #130	; 0x82
   2d312:	f7ff bfd5 	b.w	2d2c0 <nrf_usbd_epin_dma_handler>

0002d316 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   2d316:	2081      	movs	r0, #129	; 0x81
   2d318:	f7ff bfd2 	b.w	2d2c0 <nrf_usbd_epin_dma_handler>

0002d31c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   2d31c:	f7f6 bde4 	b.w	23ee8 <nrf_usbd_ep0in_dma_handler>

0002d320 <nrfx_usbd_ep_max_packet_size_set>:
{
   2d320:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2d322:	f7f6 fcb3 	bl	23c8c <ep_state_access>
    p_state->max_packet_size = size;
   2d326:	8181      	strh	r1, [r0, #12]
}
   2d328:	bd08      	pop	{r3, pc}

0002d32a <nrfx_usbd_ep_status_get>:
{
   2d32a:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   2d32c:	f7f6 fcae 	bl	23c8c <ep_state_access>
	__asm__ volatile(
   2d330:	f04f 0220 	mov.w	r2, #32
   2d334:	f3ef 8311 	mrs	r3, BASEPRI
   2d338:	f382 8812 	msr	BASEPRI_MAX, r2
   2d33c:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   2d340:	6882      	ldr	r2, [r0, #8]
   2d342:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2d344:	6802      	ldr	r2, [r0, #0]
   2d346:	b92a      	cbnz	r2, 2d354 <nrfx_usbd_ep_status_get+0x2a>
   2d348:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   2d34a:	f383 8811 	msr	BASEPRI, r3
   2d34e:	f3bf 8f6f 	isb	sy
}
   2d352:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2d354:	2004      	movs	r0, #4
   2d356:	e7f8      	b.n	2d34a <nrfx_usbd_ep_status_get+0x20>

0002d358 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   2d358:	2007      	movs	r0, #7
   2d35a:	f7f7 b8fd 	b.w	24558 <nrf_usbd_epout_dma_handler>

0002d35e <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2d35e:	2006      	movs	r0, #6
   2d360:	f7f7 b8fa 	b.w	24558 <nrf_usbd_epout_dma_handler>

0002d364 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   2d364:	2005      	movs	r0, #5
   2d366:	f7f7 b8f7 	b.w	24558 <nrf_usbd_epout_dma_handler>

0002d36a <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2d36a:	2004      	movs	r0, #4
   2d36c:	f7f7 b8f4 	b.w	24558 <nrf_usbd_epout_dma_handler>

0002d370 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   2d370:	2003      	movs	r0, #3
   2d372:	f7f7 b8f1 	b.w	24558 <nrf_usbd_epout_dma_handler>

0002d376 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   2d376:	2002      	movs	r0, #2
   2d378:	f7f7 b8ee 	b.w	24558 <nrf_usbd_epout_dma_handler>

0002d37c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   2d37c:	2001      	movs	r0, #1
   2d37e:	f7f7 b8eb 	b.w	24558 <nrf_usbd_epout_dma_handler>

0002d382 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   2d382:	f7f7 b9df 	b.w	24744 <usbd_ep_abort>

0002d386 <z_device_state_init>:
}
   2d386:	4770      	bx	lr

0002d388 <z_device_is_ready>:
	if (dev == NULL) {
   2d388:	b138      	cbz	r0, 2d39a <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
   2d38a:	68c3      	ldr	r3, [r0, #12]
   2d38c:	8818      	ldrh	r0, [r3, #0]
   2d38e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2d392:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2d396:	4258      	negs	r0, r3
   2d398:	4158      	adcs	r0, r3
}
   2d39a:	4770      	bx	lr

0002d39c <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
   2d39c:	6940      	ldr	r0, [r0, #20]
{
   2d39e:	b470      	push	{r4, r5, r6}
   2d3a0:	4613      	mov	r3, r2
   2d3a2:	460d      	mov	r5, r1
	if (rv != NULL) {
   2d3a4:	b960      	cbnz	r0, 2d3c0 <device_required_foreach+0x24>
	size_t handle_count = 0;
   2d3a6:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
   2d3a8:	462a      	mov	r2, r5
}
   2d3aa:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
   2d3ac:	f7f7 bbd8 	b.w	24b60 <device_visitor>
			++i;
   2d3b0:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2d3b2:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
   2d3b6:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2d3b8:	b2a4      	uxth	r4, r4
   2d3ba:	4294      	cmp	r4, r2
   2d3bc:	d9f8      	bls.n	2d3b0 <device_required_foreach+0x14>
   2d3be:	e7f3      	b.n	2d3a8 <device_required_foreach+0xc>
		size_t i = 0;
   2d3c0:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2d3c2:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2d3c6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2d3ca:	e7f2      	b.n	2d3b2 <device_required_foreach+0x16>

0002d3cc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2d3cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d3ce:	ab0a      	add	r3, sp, #40	; 0x28
   2d3d0:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2d3d2:	9302      	str	r3, [sp, #8]
   2d3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d3d6:	9301      	str	r3, [sp, #4]
   2d3d8:	2300      	movs	r3, #0
   2d3da:	9300      	str	r3, [sp, #0]
   2d3dc:	2201      	movs	r2, #1
   2d3de:	4618      	mov	r0, r3
   2d3e0:	f7da f830 	bl	7444 <z_impl_z_log_msg2_runtime_vcreate>
}
   2d3e4:	b007      	add	sp, #28
   2d3e6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d3ea <arch_system_halt>:
	__asm__ volatile(
   2d3ea:	f04f 0220 	mov.w	r2, #32
   2d3ee:	f3ef 8311 	mrs	r3, BASEPRI
   2d3f2:	f382 8812 	msr	BASEPRI_MAX, r2
   2d3f6:	f3bf 8f6f 	isb	sy
	for (;;) {
   2d3fa:	e7fe      	b.n	2d3fa <arch_system_halt+0x10>

0002d3fc <k_heap_init>:
{
   2d3fc:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2d3fe:	f100 040c 	add.w	r4, r0, #12
   2d402:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2d406:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2d408:	f7f9 bd5f 	b.w	26eca <sys_heap_init>

0002d40c <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d410:	b085      	sub	sp, #20
   2d412:	4606      	mov	r6, r0
   2d414:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2d416:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2d41a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2d41c:	f000 fbdb 	bl	2dbd6 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2d420:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2d424:	4605      	mov	r5, r0
   2d426:	460f      	mov	r7, r1
   2d428:	f04f 0320 	mov.w	r3, #32
   2d42c:	f3ef 8411 	mrs	r4, BASEPRI
   2d430:	f383 8812 	msr	BASEPRI_MAX, r3
   2d434:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2d438:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2d43c:	464a      	mov	r2, r9
   2d43e:	4641      	mov	r1, r8
   2d440:	4630      	mov	r0, r6
   2d442:	f7f9 fcda 	bl	26dfa <sys_heap_aligned_alloc>
   2d446:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2d448:	f7f8 ff30 	bl	262ac <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2d44c:	9b03      	ldr	r3, [sp, #12]
   2d44e:	b13b      	cbz	r3, 2d460 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2d450:	f384 8811 	msr	BASEPRI, r4
   2d454:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2d458:	4618      	mov	r0, r3
   2d45a:	b005      	add	sp, #20
   2d45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2d460:	1a28      	subs	r0, r5, r0
   2d462:	eb67 0101 	sbc.w	r1, r7, r1
   2d466:	2801      	cmp	r0, #1
   2d468:	f171 0200 	sbcs.w	r2, r1, #0
   2d46c:	dbf0      	blt.n	2d450 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2d46e:	e9cd 0100 	strd	r0, r1, [sp]
   2d472:	465a      	mov	r2, fp
   2d474:	4621      	mov	r1, r4
   2d476:	4650      	mov	r0, sl
   2d478:	f7f8 fbe2 	bl	25c40 <z_pend_curr>
	__asm__ volatile(
   2d47c:	f04f 0320 	mov.w	r3, #32
   2d480:	f3ef 8411 	mrs	r4, BASEPRI
   2d484:	f383 8812 	msr	BASEPRI_MAX, r3
   2d488:	f3bf 8f6f 	isb	sy
   2d48c:	e7d6      	b.n	2d43c <k_heap_aligned_alloc+0x30>

0002d48e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2d48e:	b538      	push	{r3, r4, r5, lr}
   2d490:	4604      	mov	r4, r0
   2d492:	f04f 0320 	mov.w	r3, #32
   2d496:	f3ef 8511 	mrs	r5, BASEPRI
   2d49a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d49e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2d4a2:	f7f9 fc72 	bl	26d8a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2d4a6:	f104 000c 	add.w	r0, r4, #12
   2d4aa:	f000 fb0c 	bl	2dac6 <z_unpend_all>
   2d4ae:	b130      	cbz	r0, 2d4be <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2d4b0:	4629      	mov	r1, r5
   2d4b2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2d4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2d4ba:	f7f8 ba6f 	b.w	2599c <z_reschedule>
	__asm__ volatile(
   2d4be:	f385 8811 	msr	BASEPRI, r5
   2d4c2:	f3bf 8f6f 	isb	sy
}
   2d4c6:	bd38      	pop	{r3, r4, r5, pc}

0002d4c8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4ca:	4604      	mov	r4, r0
   2d4cc:	460d      	mov	r5, r1
	__asm__ volatile(
   2d4ce:	f04f 0320 	mov.w	r3, #32
   2d4d2:	f3ef 8611 	mrs	r6, BASEPRI
   2d4d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2d4da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2d4de:	6947      	ldr	r7, [r0, #20]
   2d4e0:	b97f      	cbnz	r7, 2d502 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2d4e2:	f000 fad8 	bl	2da96 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2d4e6:	b160      	cbz	r0, 2d502 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2d4e8:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2d4ea:	6142      	str	r2, [r0, #20]
   2d4ec:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
   2d4f0:	f000 fa60 	bl	2d9b4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2d4f4:	4631      	mov	r1, r6
   2d4f6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2d4fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2d4fe:	f7f8 ba4d 	b.w	2599c <z_reschedule>
	**(char ***) mem = slab->free_list;
   2d502:	682b      	ldr	r3, [r5, #0]
   2d504:	6962      	ldr	r2, [r4, #20]
   2d506:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2d508:	682b      	ldr	r3, [r5, #0]
   2d50a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2d50c:	69a3      	ldr	r3, [r4, #24]
   2d50e:	3b01      	subs	r3, #1
   2d510:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2d512:	f386 8811 	msr	BASEPRI, r6
   2d516:	f3bf 8f6f 	isb	sy
}
   2d51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d51c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d51c:	f3ef 8005 	mrs	r0, IPSR
}
   2d520:	3800      	subs	r0, #0
   2d522:	bf18      	it	ne
   2d524:	2001      	movne	r0, #1
   2d526:	4770      	bx	lr

0002d528 <k_thread_name_get>:
}
   2d528:	3078      	adds	r0, #120	; 0x78
   2d52a:	4770      	bx	lr

0002d52c <z_impl_k_thread_start>:
	z_sched_start(thread);
   2d52c:	f7f8 bb2c 	b.w	25b88 <z_sched_start>

0002d530 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
   2d530:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
   2d532:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
   2d536:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   2d538:	4293      	cmp	r3, r2
   2d53a:	d102      	bne.n	2d542 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
   2d53c:	600b      	str	r3, [r1, #0]

	return 0;
}
   2d53e:	2000      	movs	r0, #0
   2d540:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   2d542:	5ce0      	ldrb	r0, [r4, r3]
   2d544:	28aa      	cmp	r0, #170	; 0xaa
   2d546:	d1f9      	bne.n	2d53c <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   2d548:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   2d54a:	e7f5      	b.n	2d538 <z_impl_k_thread_stack_space_get+0x8>

0002d54c <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   2d54c:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   2d550:	4770      	bx	lr

0002d552 <z_pm_save_idle_exit>:
{
   2d552:	b508      	push	{r3, lr}
	pm_system_resume();
   2d554:	f7dd fc82 	bl	ae5c <pm_system_resume>
}
   2d558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2d55c:	f7ff bdac 	b.w	2d0b8 <sys_clock_idle_exit>

0002d560 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2d560:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2d564:	428b      	cmp	r3, r1
   2d566:	d001      	beq.n	2d56c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2d568:	f7f8 bb7e 	b.w	25c68 <z_set_prio>
}
   2d56c:	2000      	movs	r0, #0
   2d56e:	4770      	bx	lr

0002d570 <z_impl_k_mutex_init>:
{
   2d570:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2d572:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2d574:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2d578:	e9c3 3300 	strd	r3, r3, [r3]
}
   2d57c:	4770      	bx	lr

0002d57e <queue_insert>:
{
   2d57e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d582:	4699      	mov	r9, r3
   2d584:	4604      	mov	r4, r0
   2d586:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2d58a:	460d      	mov	r5, r1
   2d58c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d58e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2d592:	f04f 0220 	mov.w	r2, #32
   2d596:	f3ef 8711 	mrs	r7, BASEPRI
   2d59a:	f382 8812 	msr	BASEPRI_MAX, r2
   2d59e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2d5a2:	b103      	cbz	r3, 2d5a6 <queue_insert+0x28>
	return list->tail;
   2d5a4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2d5a6:	4630      	mov	r0, r6
   2d5a8:	f000 fa75 	bl	2da96 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2d5ac:	b160      	cbz	r0, 2d5c8 <queue_insert+0x4a>
   2d5ae:	2400      	movs	r4, #0
   2d5b0:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
   2d5b4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2d5b8:	f000 f9fc 	bl	2d9b4 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2d5bc:	4630      	mov	r0, r6
   2d5be:	4639      	mov	r1, r7
   2d5c0:	f7f8 f9ec 	bl	2599c <z_reschedule>
	return 0;
   2d5c4:	2000      	movs	r0, #0
   2d5c6:	e00c      	b.n	2d5e2 <queue_insert+0x64>
	if (alloc) {
   2d5c8:	f1b9 0f00 	cmp.w	r9, #0
   2d5cc:	d01b      	beq.n	2d606 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2d5ce:	2108      	movs	r1, #8
   2d5d0:	f7f8 ffa2 	bl	26518 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2d5d4:	b938      	cbnz	r0, 2d5e6 <queue_insert+0x68>
	__asm__ volatile(
   2d5d6:	f387 8811 	msr	BASEPRI, r7
   2d5da:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2d5de:	f06f 000b 	mvn.w	r0, #11
}
   2d5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2d5e6:	2301      	movs	r3, #1
		anode->data = data;
   2d5e8:	f8c0 8004 	str.w	r8, [r0, #4]
   2d5ec:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d5ee:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d5f0:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2d5f4:	b95d      	cbnz	r5, 2d60e <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d5f6:	6823      	ldr	r3, [r4, #0]
   2d5f8:	4313      	orrs	r3, r2
   2d5fa:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d5fc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2d5fe:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d600:	b973      	cbnz	r3, 2d620 <queue_insert+0xa2>
	list->tail = node;
   2d602:	6060      	str	r0, [r4, #4]
}
   2d604:	e00c      	b.n	2d620 <queue_insert+0xa2>
	node->next_and_flags = flags;
   2d606:	f8c8 9000 	str.w	r9, [r8]
}
   2d60a:	4640      	mov	r0, r8
   2d60c:	e7ef      	b.n	2d5ee <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d60e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2d610:	f033 0303 	bics.w	r3, r3, #3
   2d614:	d110      	bne.n	2d638 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d616:	6002      	str	r2, [r0, #0]
	return list->tail;
   2d618:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2d61a:	b93a      	cbnz	r2, 2d62c <queue_insert+0xae>
	list->head = node;
   2d61c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d620:	2104      	movs	r1, #4
   2d622:	f104 0010 	add.w	r0, r4, #16
   2d626:	f000 fc68 	bl	2defa <z_handle_obj_poll_events>
   2d62a:	e7c7      	b.n	2d5bc <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d62c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d62e:	f003 0303 	and.w	r3, r3, #3
   2d632:	4303      	orrs	r3, r0
   2d634:	6013      	str	r3, [r2, #0]
   2d636:	e7e4      	b.n	2d602 <queue_insert+0x84>
   2d638:	4313      	orrs	r3, r2
   2d63a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d63c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d63e:	f003 0303 	and.w	r3, r3, #3
   2d642:	4303      	orrs	r3, r0
   2d644:	602b      	str	r3, [r5, #0]
}
   2d646:	e7eb      	b.n	2d620 <queue_insert+0xa2>

0002d648 <z_queue_node_peek>:
{
   2d648:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2d64a:	4604      	mov	r4, r0
   2d64c:	b130      	cbz	r0, 2d65c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d64e:	6802      	ldr	r2, [r0, #0]
   2d650:	0793      	lsls	r3, r2, #30
   2d652:	d003      	beq.n	2d65c <z_queue_node_peek+0x14>
		ret = anode->data;
   2d654:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2d656:	b109      	cbz	r1, 2d65c <z_queue_node_peek+0x14>
			k_free(anode);
   2d658:	f000 fc6a 	bl	2df30 <k_free>
}
   2d65c:	4620      	mov	r0, r4
   2d65e:	bd10      	pop	{r4, pc}

0002d660 <z_impl_k_queue_init>:
	list->head = NULL;
   2d660:	2300      	movs	r3, #0
	list->tail = NULL;
   2d662:	e9c0 3300 	strd	r3, r3, [r0]
   2d666:	f100 0308 	add.w	r3, r0, #8
   2d66a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2d66e:	f100 0310 	add.w	r3, r0, #16
   2d672:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2d676:	4770      	bx	lr

0002d678 <k_queue_append>:
{
   2d678:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2d67a:	2301      	movs	r3, #1
   2d67c:	9300      	str	r3, [sp, #0]
   2d67e:	2300      	movs	r3, #0
{
   2d680:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2d682:	4619      	mov	r1, r3
   2d684:	f7ff ff7b 	bl	2d57e <queue_insert>
}
   2d688:	b003      	add	sp, #12
   2d68a:	f85d fb04 	ldr.w	pc, [sp], #4

0002d68e <k_queue_prepend>:
{
   2d68e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2d690:	2300      	movs	r3, #0
{
   2d692:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2d694:	9300      	str	r3, [sp, #0]
   2d696:	4619      	mov	r1, r3
   2d698:	f7ff ff71 	bl	2d57e <queue_insert>
}
   2d69c:	b003      	add	sp, #12
   2d69e:	f85d fb04 	ldr.w	pc, [sp], #4

0002d6a2 <k_queue_append_list>:
{
   2d6a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d6a6:	4605      	mov	r5, r0
   2d6a8:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2d6aa:	460c      	mov	r4, r1
   2d6ac:	b391      	cbz	r1, 2d714 <k_queue_append_list+0x72>
   2d6ae:	b38a      	cbz	r2, 2d714 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d6b0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2d6b4:	f04f 0320 	mov.w	r3, #32
   2d6b8:	f3ef 8811 	mrs	r8, BASEPRI
   2d6bc:	f383 8812 	msr	BASEPRI_MAX, r3
   2d6c0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2d6c4:	4638      	mov	r0, r7
   2d6c6:	f000 f9e6 	bl	2da96 <z_unpend_first_thread>
   2d6ca:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2d6ce:	b920      	cbnz	r0, 2d6da <k_queue_append_list+0x38>
	return list->tail;
   2d6d0:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2d6d2:	b9ca      	cbnz	r2, 2d708 <k_queue_append_list+0x66>
	list->head = node;
   2d6d4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2d6d6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2d6d8:	e00a      	b.n	2d6f0 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2d6da:	6144      	str	r4, [r0, #20]
   2d6dc:	f8c0 90b0 	str.w	r9, [r0, #176]	; 0xb0
	z_ready_thread(thread);
   2d6e0:	f000 f968 	bl	2d9b4 <z_ready_thread>
		head = *(void **)head;
   2d6e4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2d6e6:	4638      	mov	r0, r7
   2d6e8:	f000 f9d5 	bl	2da96 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2d6ec:	2c00      	cmp	r4, #0
   2d6ee:	d1ee      	bne.n	2d6ce <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d6f0:	2104      	movs	r1, #4
   2d6f2:	f105 0010 	add.w	r0, r5, #16
   2d6f6:	f000 fc00 	bl	2defa <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2d6fa:	4638      	mov	r0, r7
   2d6fc:	4641      	mov	r1, r8
   2d6fe:	f7f8 f94d 	bl	2599c <z_reschedule>
	return 0;
   2d702:	2000      	movs	r0, #0
}
   2d704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d708:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d70a:	f003 0303 	and.w	r3, r3, #3
   2d70e:	431c      	orrs	r4, r3
   2d710:	6014      	str	r4, [r2, #0]
}
   2d712:	e7e0      	b.n	2d6d6 <k_queue_append_list+0x34>
		return -EINVAL;
   2d714:	f06f 0015 	mvn.w	r0, #21
   2d718:	e7f4      	b.n	2d704 <k_queue_append_list+0x62>

0002d71a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2d71a:	b15a      	cbz	r2, 2d734 <z_impl_k_sem_init+0x1a>
   2d71c:	428a      	cmp	r2, r1
   2d71e:	d309      	bcc.n	2d734 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2d720:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2d724:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2d728:	e9c0 0000 	strd	r0, r0, [r0]
   2d72c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2d730:	2000      	movs	r0, #0
   2d732:	4770      	bx	lr
		return -EINVAL;
   2d734:	f06f 0015 	mvn.w	r0, #21
}
   2d738:	4770      	bx	lr

0002d73a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2d73a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2d73c:	2301      	movs	r3, #1
   2d73e:	408b      	lsls	r3, r1
   2d740:	ea22 0303 	bic.w	r3, r2, r3
   2d744:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2d746:	fa22 f001 	lsr.w	r0, r2, r1
}
   2d74a:	f000 0001 	and.w	r0, r0, #1
   2d74e:	4770      	bx	lr

0002d750 <unschedule_locked>:
{
   2d750:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d752:	2103      	movs	r1, #3
{
   2d754:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d756:	300c      	adds	r0, #12
   2d758:	f7ff ffef 	bl	2d73a <flag_test_and_clear>
   2d75c:	4604      	mov	r4, r0
   2d75e:	b118      	cbz	r0, 2d768 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2d760:	f105 0010 	add.w	r0, r5, #16
   2d764:	f000 f9dd 	bl	2db22 <z_abort_timeout>
}
   2d768:	4620      	mov	r0, r4
   2d76a:	bd38      	pop	{r3, r4, r5, pc}

0002d76c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2d76c:	b120      	cbz	r0, 2d778 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2d76e:	2200      	movs	r2, #0
   2d770:	4611      	mov	r1, r2
   2d772:	30c0      	adds	r0, #192	; 0xc0
   2d774:	f000 b9b7 	b.w	2dae6 <z_sched_wake>
}
   2d778:	4770      	bx	lr

0002d77a <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2d77a:	68c3      	ldr	r3, [r0, #12]
{
   2d77c:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d77e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2d782:	079b      	lsls	r3, r3, #30
{
   2d784:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d786:	d416      	bmi.n	2d7b6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2d788:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2d78a:	2102      	movs	r1, #2
   2d78c:	300c      	adds	r0, #12
   2d78e:	f7ff ffd4 	bl	2d73a <flag_test_and_clear>
   2d792:	b180      	cbz	r0, 2d7b6 <cancel_async_locked+0x3c>
	return list->head;
   2d794:	f8d6 20b8 	ldr.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d798:	b16a      	cbz	r2, 2d7b6 <cancel_async_locked+0x3c>
   2d79a:	4294      	cmp	r4, r2
   2d79c:	d11b      	bne.n	2d7d6 <cancel_async_locked+0x5c>
	return node->next;
   2d79e:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2d7a0:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2d7a4:	b98d      	cbnz	r5, 2d7ca <cancel_async_locked+0x50>
   2d7a6:	428c      	cmp	r4, r1
	list->head = node;
   2d7a8:	f8c6 20b8 	str.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
   2d7ac:	d101      	bne.n	2d7b2 <cancel_async_locked+0x38>
	list->tail = node;
   2d7ae:	f8c6 20bc 	str.w	r2, [r6, #188]	; 0xbc
	parent->next = child;
   2d7b2:	2300      	movs	r3, #0
   2d7b4:	6023      	str	r3, [r4, #0]
	return *flagp;
   2d7b6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2d7b8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2d7bc:	bf1e      	ittt	ne
   2d7be:	f043 0302 	orrne.w	r3, r3, #2
   2d7c2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2d7c4:	f003 000f 	andne.w	r0, r3, #15
}
   2d7c8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2d7ca:	428c      	cmp	r4, r1
	parent->next = child;
   2d7cc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2d7ce:	bf08      	it	eq
   2d7d0:	f8c6 50bc 	streq.w	r5, [r6, #188]	; 0xbc
}
   2d7d4:	e7ed      	b.n	2d7b2 <cancel_async_locked+0x38>
	return node->next;
   2d7d6:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d7d8:	6812      	ldr	r2, [r2, #0]
   2d7da:	e7dd      	b.n	2d798 <cancel_async_locked+0x1e>

0002d7dc <work_timeout>:
{
   2d7dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d7de:	4604      	mov	r4, r0
   2d7e0:	f04f 0320 	mov.w	r3, #32
   2d7e4:	f3ef 8511 	mrs	r5, BASEPRI
   2d7e8:	f383 8812 	msr	BASEPRI_MAX, r3
   2d7ec:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2d7f0:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2d7f2:	f1a0 0610 	sub.w	r6, r0, #16
   2d7f6:	2103      	movs	r1, #3
   2d7f8:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2d7fa:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2d7fc:	f7ff ff9d 	bl	2d73a <flag_test_and_clear>
   2d800:	b128      	cbz	r0, 2d80e <work_timeout+0x32>
		queue = dw->queue;
   2d802:	69a3      	ldr	r3, [r4, #24]
   2d804:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2d806:	a901      	add	r1, sp, #4
   2d808:	4630      	mov	r0, r6
   2d80a:	f7f7 ff8f 	bl	2572c <submit_to_queue_locked>
	__asm__ volatile(
   2d80e:	f385 8811 	msr	BASEPRI, r5
   2d812:	f3bf 8f6f 	isb	sy
}
   2d816:	b002      	add	sp, #8
   2d818:	bd70      	pop	{r4, r5, r6, pc}

0002d81a <k_work_init>:
{
   2d81a:	b538      	push	{r3, r4, r5, lr}
   2d81c:	4604      	mov	r4, r0
   2d81e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2d820:	2210      	movs	r2, #16
   2d822:	2100      	movs	r1, #0
   2d824:	f7fc fda5 	bl	2a372 <memset>
   2d828:	6065      	str	r5, [r4, #4]
}
   2d82a:	bd38      	pop	{r3, r4, r5, pc}

0002d82c <k_work_submit_to_queue>:
{
   2d82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d82e:	9001      	str	r0, [sp, #4]
   2d830:	4608      	mov	r0, r1
	__asm__ volatile(
   2d832:	f04f 0320 	mov.w	r3, #32
   2d836:	f3ef 8511 	mrs	r5, BASEPRI
   2d83a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d83e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2d842:	a901      	add	r1, sp, #4
   2d844:	f7f7 ff72 	bl	2572c <submit_to_queue_locked>
   2d848:	4604      	mov	r4, r0
	__asm__ volatile(
   2d84a:	f385 8811 	msr	BASEPRI, r5
   2d84e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2d852:	2800      	cmp	r0, #0
   2d854:	dd04      	ble.n	2d860 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2d856:	f7f8 fb51 	bl	25efc <z_impl_k_is_preempt_thread>
   2d85a:	b108      	cbz	r0, 2d860 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2d85c:	f7f8 faa6 	bl	25dac <z_impl_k_yield>
}
   2d860:	4620      	mov	r0, r4
   2d862:	b003      	add	sp, #12
   2d864:	bd30      	pop	{r4, r5, pc}

0002d866 <k_work_init_delayable>:
{
   2d866:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2d868:	2230      	movs	r2, #48	; 0x30
{
   2d86a:	4604      	mov	r4, r0
   2d86c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2d86e:	2100      	movs	r1, #0
   2d870:	f7fc fd7f 	bl	2a372 <memset>
   2d874:	f44f 7380 	mov.w	r3, #256	; 0x100
   2d878:	6065      	str	r5, [r4, #4]
   2d87a:	60e3      	str	r3, [r4, #12]
}
   2d87c:	bd38      	pop	{r3, r4, r5, pc}

0002d87e <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2d87e:	b538      	push	{r3, r4, r5, lr}
   2d880:	4604      	mov	r4, r0
	__asm__ volatile(
   2d882:	f04f 0320 	mov.w	r3, #32
   2d886:	f3ef 8511 	mrs	r5, BASEPRI
   2d88a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d88e:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2d892:	f7ff ff5d 	bl	2d750 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2d896:	4620      	mov	r0, r4
   2d898:	f7ff ff6f 	bl	2d77a <cancel_async_locked>
	__asm__ volatile(
   2d89c:	f385 8811 	msr	BASEPRI, r5
   2d8a0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2d8a4:	bd38      	pop	{r3, r4, r5, pc}

0002d8a6 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2d8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d8a8:	4604      	mov	r4, r0
   2d8aa:	460d      	mov	r5, r1
	__asm__ volatile(
   2d8ac:	f04f 0320 	mov.w	r3, #32
   2d8b0:	f3ef 8711 	mrs	r7, BASEPRI
   2d8b4:	f383 8812 	msr	BASEPRI_MAX, r3
   2d8b8:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2d8bc:	68c3      	ldr	r3, [r0, #12]
   2d8be:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2d8c2:	2b00      	cmp	r3, #0
   2d8c4:	bf14      	ite	ne
   2d8c6:	2601      	movne	r6, #1
   2d8c8:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2d8ca:	d009      	beq.n	2d8e0 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2d8cc:	f7ff ff40 	bl	2d750 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2d8d0:	4620      	mov	r0, r4
   2d8d2:	f7ff ff52 	bl	2d77a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2d8d6:	4629      	mov	r1, r5
   2d8d8:	4620      	mov	r0, r4
   2d8da:	f7f7 ff09 	bl	256f0 <cancel_sync_locked>
   2d8de:	4603      	mov	r3, r0
	__asm__ volatile(
   2d8e0:	f387 8811 	msr	BASEPRI, r7
   2d8e4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2d8e8:	b13b      	cbz	r3, 2d8fa <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2d8ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d8ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d8f2:	f105 0008 	add.w	r0, r5, #8
   2d8f6:	f7f7 fe23 	bl	25540 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2d8fa:	4630      	mov	r0, r6
   2d8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d8fe <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2d8fe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2d902:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d904:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d906:	2300      	movs	r3, #0
	node->prev = NULL;
   2d908:	e9c0 3300 	strd	r3, r3, [r0]
}
   2d90c:	4770      	bx	lr

0002d90e <unpend_thread_no_timeout>:
{
   2d90e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2d910:	f7ff fff5 	bl	2d8fe <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d914:	7b43      	ldrb	r3, [r0, #13]
   2d916:	f023 0302 	bic.w	r3, r3, #2
   2d91a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2d91c:	2300      	movs	r3, #0
   2d91e:	6083      	str	r3, [r0, #8]
}
   2d920:	bd08      	pop	{r3, pc}

0002d922 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2d922:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2d926:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2d92a:	4283      	cmp	r3, r0
		return b2 - b1;
   2d92c:	bf14      	ite	ne
   2d92e:	1ac0      	subne	r0, r0, r3
	return 0;
   2d930:	2000      	moveq	r0, #0
}
   2d932:	4770      	bx	lr

0002d934 <z_unpend_thread_no_timeout>:
{
   2d934:	b508      	push	{r3, lr}
	__asm__ volatile(
   2d936:	f04f 0320 	mov.w	r3, #32
   2d93a:	f3ef 8111 	mrs	r1, BASEPRI
   2d93e:	f383 8812 	msr	BASEPRI_MAX, r3
   2d942:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2d946:	f7ff ffe2 	bl	2d90e <unpend_thread_no_timeout>
	__asm__ volatile(
   2d94a:	f381 8811 	msr	BASEPRI, r1
   2d94e:	f3bf 8f6f 	isb	sy
}
   2d952:	bd08      	pop	{r3, pc}

0002d954 <z_unpend_thread>:
{
   2d954:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d956:	f04f 0320 	mov.w	r3, #32
   2d95a:	f3ef 8411 	mrs	r4, BASEPRI
   2d95e:	f383 8812 	msr	BASEPRI_MAX, r3
   2d962:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2d966:	f7ff ffd2 	bl	2d90e <unpend_thread_no_timeout>
	__asm__ volatile(
   2d96a:	f384 8811 	msr	BASEPRI, r4
   2d96e:	f3bf 8f6f 	isb	sy
}
   2d972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d976:	3018      	adds	r0, #24
   2d978:	f000 b8d3 	b.w	2db22 <z_abort_timeout>

0002d97c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d97c:	4603      	mov	r3, r0
   2d97e:	b920      	cbnz	r0, 2d98a <z_reschedule_irqlock+0xe>
   2d980:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2d984:	b90a      	cbnz	r2, 2d98a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2d986:	f7dd bdb9 	b.w	b4fc <arch_swap>
   2d98a:	f383 8811 	msr	BASEPRI, r3
   2d98e:	f3bf 8f6f 	isb	sy
}
   2d992:	4770      	bx	lr

0002d994 <z_reschedule_unlocked>:
	__asm__ volatile(
   2d994:	f04f 0320 	mov.w	r3, #32
   2d998:	f3ef 8011 	mrs	r0, BASEPRI
   2d99c:	f383 8812 	msr	BASEPRI_MAX, r3
   2d9a0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d9a4:	f7ff bfea 	b.w	2d97c <z_reschedule_irqlock>

0002d9a8 <z_priq_dumb_best>:
{
   2d9a8:	4603      	mov	r3, r0
	return list->head == list;
   2d9aa:	6800      	ldr	r0, [r0, #0]
}
   2d9ac:	4283      	cmp	r3, r0
   2d9ae:	bf08      	it	eq
   2d9b0:	2000      	moveq	r0, #0
   2d9b2:	4770      	bx	lr

0002d9b4 <z_ready_thread>:
{
   2d9b4:	b510      	push	{r4, lr}
   2d9b6:	f04f 0320 	mov.w	r3, #32
   2d9ba:	f3ef 8411 	mrs	r4, BASEPRI
   2d9be:	f383 8812 	msr	BASEPRI_MAX, r3
   2d9c2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2d9c6:	f7f8 f8a9 	bl	25b1c <ready_thread>
	__asm__ volatile(
   2d9ca:	f384 8811 	msr	BASEPRI, r4
   2d9ce:	f3bf 8f6f 	isb	sy
}
   2d9d2:	bd10      	pop	{r4, pc}

0002d9d4 <z_thread_timeout>:
{
   2d9d4:	b510      	push	{r4, lr}
   2d9d6:	4601      	mov	r1, r0
	__asm__ volatile(
   2d9d8:	f04f 0320 	mov.w	r3, #32
   2d9dc:	f3ef 8411 	mrs	r4, BASEPRI
   2d9e0:	f383 8812 	msr	BASEPRI_MAX, r3
   2d9e4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2d9e8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2d9ec:	f013 0f28 	tst.w	r3, #40	; 0x28
   2d9f0:	d10d      	bne.n	2da0e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2d9f2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2d9f6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2d9f8:	b10b      	cbz	r3, 2d9fe <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2d9fa:	f7ff ff88 	bl	2d90e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2d9fe:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2da02:	f023 0314 	bic.w	r3, r3, #20
   2da06:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2da0a:	f7f8 f887 	bl	25b1c <ready_thread>
	__asm__ volatile(
   2da0e:	f384 8811 	msr	BASEPRI, r4
   2da12:	f3bf 8f6f 	isb	sy
}
   2da16:	bd10      	pop	{r4, pc}

0002da18 <add_to_waitq_locked>:
{
   2da18:	b538      	push	{r3, r4, r5, lr}
   2da1a:	4604      	mov	r4, r0
   2da1c:	460d      	mov	r5, r1
	unready_thread(thread);
   2da1e:	f7f8 f8d1 	bl	25bc4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2da22:	7b63      	ldrb	r3, [r4, #13]
   2da24:	f043 0302 	orr.w	r3, r3, #2
   2da28:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2da2a:	b195      	cbz	r5, 2da52 <add_to_waitq_locked+0x3a>
   2da2c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2da2e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2da30:	429d      	cmp	r5, r3
   2da32:	d015      	beq.n	2da60 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2da34:	b1a3      	cbz	r3, 2da60 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2da36:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2da3a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2da3e:	4291      	cmp	r1, r2
   2da40:	d008      	beq.n	2da54 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2da42:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2da44:	2a00      	cmp	r2, #0
   2da46:	dd05      	ble.n	2da54 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2da48:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2da4a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2da4e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2da50:	605c      	str	r4, [r3, #4]
}
   2da52:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2da54:	686a      	ldr	r2, [r5, #4]
   2da56:	4293      	cmp	r3, r2
   2da58:	d002      	beq.n	2da60 <add_to_waitq_locked+0x48>
   2da5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2da5c:	2b00      	cmp	r3, #0
   2da5e:	d1ec      	bne.n	2da3a <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2da60:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2da62:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2da66:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2da68:	606c      	str	r4, [r5, #4]
}
   2da6a:	e7f2      	b.n	2da52 <add_to_waitq_locked+0x3a>

0002da6c <z_unpend1_no_timeout>:
{
   2da6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2da6e:	f04f 0320 	mov.w	r3, #32
   2da72:	f3ef 8411 	mrs	r4, BASEPRI
   2da76:	f383 8812 	msr	BASEPRI_MAX, r3
   2da7a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2da7e:	f7ff ff93 	bl	2d9a8 <z_priq_dumb_best>
		if (thread != NULL) {
   2da82:	4601      	mov	r1, r0
   2da84:	b108      	cbz	r0, 2da8a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2da86:	f7ff ff42 	bl	2d90e <unpend_thread_no_timeout>
	__asm__ volatile(
   2da8a:	f384 8811 	msr	BASEPRI, r4
   2da8e:	f3bf 8f6f 	isb	sy
}
   2da92:	4608      	mov	r0, r1
   2da94:	bd10      	pop	{r4, pc}

0002da96 <z_unpend_first_thread>:
{
   2da96:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2da98:	f04f 0320 	mov.w	r3, #32
   2da9c:	f3ef 8511 	mrs	r5, BASEPRI
   2daa0:	f383 8812 	msr	BASEPRI_MAX, r3
   2daa4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2daa8:	f7ff ff7e 	bl	2d9a8 <z_priq_dumb_best>
		if (thread != NULL) {
   2daac:	4604      	mov	r4, r0
   2daae:	b120      	cbz	r0, 2daba <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2dab0:	f7ff ff2d 	bl	2d90e <unpend_thread_no_timeout>
   2dab4:	3018      	adds	r0, #24
   2dab6:	f000 f834 	bl	2db22 <z_abort_timeout>
	__asm__ volatile(
   2daba:	f385 8811 	msr	BASEPRI, r5
   2dabe:	f3bf 8f6f 	isb	sy
}
   2dac2:	4620      	mov	r0, r4
   2dac4:	bd38      	pop	{r3, r4, r5, pc}

0002dac6 <z_unpend_all>:
{
   2dac6:	b538      	push	{r3, r4, r5, lr}
   2dac8:	4605      	mov	r5, r0
	int need_sched = 0;
   2daca:	2000      	movs	r0, #0
	return list->head == list;
   2dacc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dace:	42a5      	cmp	r5, r4
   2dad0:	d000      	beq.n	2dad4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2dad2:	b904      	cbnz	r4, 2dad6 <z_unpend_all+0x10>
}
   2dad4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2dad6:	4620      	mov	r0, r4
   2dad8:	f7ff ff3c 	bl	2d954 <z_unpend_thread>
		z_ready_thread(thread);
   2dadc:	4620      	mov	r0, r4
   2dade:	f7ff ff69 	bl	2d9b4 <z_ready_thread>
		need_sched = 1;
   2dae2:	2001      	movs	r0, #1
   2dae4:	e7f2      	b.n	2dacc <z_unpend_all+0x6>

0002dae6 <z_sched_wake>:
{
   2dae6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2dae8:	f04f 0320 	mov.w	r3, #32
   2daec:	f3ef 8511 	mrs	r5, BASEPRI
   2daf0:	f383 8812 	msr	BASEPRI_MAX, r3
   2daf4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2daf8:	f7ff ff56 	bl	2d9a8 <z_priq_dumb_best>
		if (thread != NULL) {
   2dafc:	4604      	mov	r4, r0
   2dafe:	b158      	cbz	r0, 2db18 <z_sched_wake+0x32>
   2db00:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
   2db04:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2db06:	f7ff ff02 	bl	2d90e <unpend_thread_no_timeout>
   2db0a:	3018      	adds	r0, #24
   2db0c:	f000 f809 	bl	2db22 <z_abort_timeout>
			ready_thread(thread);
   2db10:	4620      	mov	r0, r4
   2db12:	f7f8 f803 	bl	25b1c <ready_thread>
			ret = true;
   2db16:	2001      	movs	r0, #1
	__asm__ volatile(
   2db18:	f385 8811 	msr	BASEPRI, r5
   2db1c:	f3bf 8f6f 	isb	sy
}
   2db20:	bd38      	pop	{r3, r4, r5, pc}

0002db22 <z_abort_timeout>:
{
   2db22:	b510      	push	{r4, lr}
	__asm__ volatile(
   2db24:	f04f 0220 	mov.w	r2, #32
   2db28:	f3ef 8411 	mrs	r4, BASEPRI
   2db2c:	f382 8812 	msr	BASEPRI_MAX, r2
   2db30:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2db34:	6803      	ldr	r3, [r0, #0]
   2db36:	b13b      	cbz	r3, 2db48 <z_abort_timeout+0x26>
			remove_timeout(to);
   2db38:	f7f8 faa2 	bl	26080 <remove_timeout>
			ret = 0;
   2db3c:	2000      	movs	r0, #0
	__asm__ volatile(
   2db3e:	f384 8811 	msr	BASEPRI, r4
   2db42:	f3bf 8f6f 	isb	sy
}
   2db46:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2db48:	f06f 0015 	mvn.w	r0, #21
   2db4c:	e7f7      	b.n	2db3e <z_abort_timeout+0x1c>

0002db4e <z_timeout_remaining>:
{
   2db4e:	b510      	push	{r4, lr}
	__asm__ volatile(
   2db50:	f04f 0320 	mov.w	r3, #32
   2db54:	f3ef 8411 	mrs	r4, BASEPRI
   2db58:	f383 8812 	msr	BASEPRI_MAX, r3
   2db5c:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   2db60:	f7f8 faa8 	bl	260b4 <timeout_rem>
	__asm__ volatile(
   2db64:	f384 8811 	msr	BASEPRI, r4
   2db68:	f3bf 8f6f 	isb	sy
}
   2db6c:	bd10      	pop	{r4, pc}

0002db6e <z_get_next_timeout_expiry>:
{
   2db6e:	b510      	push	{r4, lr}
	__asm__ volatile(
   2db70:	f04f 0320 	mov.w	r3, #32
   2db74:	f3ef 8411 	mrs	r4, BASEPRI
   2db78:	f383 8812 	msr	BASEPRI_MAX, r3
   2db7c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2db80:	f7f8 fa58 	bl	26034 <next_timeout>
	__asm__ volatile(
   2db84:	f384 8811 	msr	BASEPRI, r4
   2db88:	f3bf 8f6f 	isb	sy
}
   2db8c:	bd10      	pop	{r4, pc}

0002db8e <z_set_timeout_expiry>:
{
   2db8e:	b570      	push	{r4, r5, r6, lr}
   2db90:	4604      	mov	r4, r0
   2db92:	460d      	mov	r5, r1
	__asm__ volatile(
   2db94:	f04f 0320 	mov.w	r3, #32
   2db98:	f3ef 8611 	mrs	r6, BASEPRI
   2db9c:	f383 8812 	msr	BASEPRI_MAX, r3
   2dba0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2dba4:	f7f8 fa46 	bl	26034 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2dba8:	2801      	cmp	r0, #1
   2dbaa:	dd05      	ble.n	2dbb8 <z_set_timeout_expiry+0x2a>
   2dbac:	42a0      	cmp	r0, r4
   2dbae:	db03      	blt.n	2dbb8 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2dbb0:	4629      	mov	r1, r5
   2dbb2:	4620      	mov	r0, r4
   2dbb4:	f7f5 fa22 	bl	22ffc <sys_clock_set_timeout>
	__asm__ volatile(
   2dbb8:	f386 8811 	msr	BASEPRI, r6
   2dbbc:	f3bf 8f6f 	isb	sy
}
   2dbc0:	bd70      	pop	{r4, r5, r6, pc}

0002dbc2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2dbc2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2dbc4:	f7f8 fb72 	bl	262ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2dbc8:	bd08      	pop	{r3, pc}

0002dbca <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2dbca:	f7f8 bb6f 	b.w	262ac <sys_clock_tick_get>

0002dbce <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2dbce:	b108      	cbz	r0, 2dbd4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2dbd0:	f7de ba1e 	b.w	c010 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2dbd4:	4770      	bx	lr

0002dbd6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2dbd6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2dbda:	bf08      	it	eq
   2dbdc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2dbe0:	b538      	push	{r3, r4, r5, lr}
   2dbe2:	4605      	mov	r5, r0
   2dbe4:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2dbe6:	d01d      	beq.n	2dc24 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2dbe8:	ea51 0300 	orrs.w	r3, r1, r0
   2dbec:	d103      	bne.n	2dbf6 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2dbee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2dbf2:	f7f8 bb5b 	b.w	262ac <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2dbf6:	f06f 0301 	mvn.w	r3, #1
   2dbfa:	1a18      	subs	r0, r3, r0
   2dbfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dc00:	eb63 0101 	sbc.w	r1, r3, r1
   2dc04:	2900      	cmp	r1, #0
   2dc06:	da0c      	bge.n	2dc22 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2dc08:	f7f8 fb50 	bl	262ac <sys_clock_tick_get>
   2dc0c:	2d01      	cmp	r5, #1
   2dc0e:	4622      	mov	r2, r4
   2dc10:	f174 0400 	sbcs.w	r4, r4, #0
   2dc14:	462b      	mov	r3, r5
   2dc16:	bfbc      	itt	lt
   2dc18:	2301      	movlt	r3, #1
   2dc1a:	2200      	movlt	r2, #0
   2dc1c:	1818      	adds	r0, r3, r0
   2dc1e:	eb41 0102 	adc.w	r1, r1, r2
}
   2dc22:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2dc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dc28:	4601      	mov	r1, r0
   2dc2a:	e7fa      	b.n	2dc22 <sys_clock_timeout_end_calc+0x4c>

0002dc2c <k_timer_init>:
	timer->status = 0U;
   2dc2c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2dc2e:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2dc32:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2dc36:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2dc3a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2dc3e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2dc40:	6343      	str	r3, [r0, #52]	; 0x34
}
   2dc42:	4770      	bx	lr

0002dc44 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2dc44:	b510      	push	{r4, lr}
   2dc46:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2dc48:	f7ff ff6b 	bl	2db22 <z_abort_timeout>

	if (inactive) {
   2dc4c:	b9b0      	cbnz	r0, 2dc7c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2dc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2dc50:	b10b      	cbz	r3, 2dc56 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2dc52:	4620      	mov	r0, r4
   2dc54:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2dc56:	f104 0018 	add.w	r0, r4, #24
   2dc5a:	f7ff ff07 	bl	2da6c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2dc5e:	b168      	cbz	r0, 2dc7c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2dc60:	f7ff fea8 	bl	2d9b4 <z_ready_thread>
	__asm__ volatile(
   2dc64:	f04f 0320 	mov.w	r3, #32
   2dc68:	f3ef 8011 	mrs	r0, BASEPRI
   2dc6c:	f383 8812 	msr	BASEPRI_MAX, r3
   2dc70:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2dc78:	f7ff be80 	b.w	2d97c <z_reschedule_irqlock>
   2dc7c:	bd10      	pop	{r4, pc}

0002dc7e <add_event>:
{
   2dc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dc80:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2dc82:	e9d0 1300 	ldrd	r1, r3, [r0]
   2dc86:	4288      	cmp	r0, r1
   2dc88:	4604      	mov	r4, r0
   2dc8a:	d00d      	beq.n	2dca8 <add_event+0x2a>
	if ((pending == NULL) ||
   2dc8c:	b163      	cbz	r3, 2dca8 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2dc8e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2dc90:	b100      	cbz	r0, 2dc94 <add_event+0x16>
   2dc92:	3860      	subs	r0, #96	; 0x60
   2dc94:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2dc98:	4639      	mov	r1, r7
   2dc9a:	f7ff fe42 	bl	2d922 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2dc9e:	2800      	cmp	r0, #0
   2dca0:	dc02      	bgt.n	2dca8 <add_event+0x2a>
	return list->head == list;
   2dca2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dca4:	42b4      	cmp	r4, r6
   2dca6:	d109      	bne.n	2dcbc <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2dca8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2dcaa:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2dcae:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2dcb0:	6065      	str	r5, [r4, #4]
}
   2dcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2dcb4:	6863      	ldr	r3, [r4, #4]
   2dcb6:	42b3      	cmp	r3, r6
   2dcb8:	d0f6      	beq.n	2dca8 <add_event+0x2a>
   2dcba:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2dcbc:	2e00      	cmp	r6, #0
   2dcbe:	d0f3      	beq.n	2dca8 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2dcc0:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2dcc2:	b101      	cbz	r1, 2dcc6 <add_event+0x48>
   2dcc4:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2dcc6:	4638      	mov	r0, r7
   2dcc8:	f7ff fe2b 	bl	2d922 <z_sched_prio_cmp>
   2dccc:	2800      	cmp	r0, #0
   2dcce:	ddf1      	ble.n	2dcb4 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2dcd0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2dcd2:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2dcd6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2dcd8:	6075      	str	r5, [r6, #4]
			return;
   2dcda:	e7ea      	b.n	2dcb2 <add_event+0x34>

0002dcdc <register_events>:
{
   2dcdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2dce0:	2500      	movs	r5, #0
{
   2dce2:	468b      	mov	fp, r1
   2dce4:	4614      	mov	r4, r2
   2dce6:	461f      	mov	r7, r3
   2dce8:	4682      	mov	sl, r0
	int events_registered = 0;
   2dcea:	462e      	mov	r6, r5
	event->poller = NULL;
   2dcec:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2dcee:	455d      	cmp	r5, fp
   2dcf0:	db02      	blt.n	2dcf8 <register_events+0x1c>
}
   2dcf2:	4630      	mov	r0, r6
   2dcf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dcf8:	f04f 0320 	mov.w	r3, #32
   2dcfc:	f3ef 8911 	mrs	r9, BASEPRI
   2dd00:	f383 8812 	msr	BASEPRI_MAX, r3
   2dd04:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2dd08:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2dd0c:	f003 031f 	and.w	r3, r3, #31
   2dd10:	3b01      	subs	r3, #1
   2dd12:	2b07      	cmp	r3, #7
   2dd14:	d80f      	bhi.n	2dd36 <register_events+0x5a>
   2dd16:	e8df f003 	tbb	[pc, r3]
   2dd1a:	041e      	.short	0x041e
   2dd1c:	0e0e0a0e 	.word	0x0e0e0a0e
   2dd20:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2dd22:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dd26:	689b      	ldr	r3, [r3, #8]
   2dd28:	b12b      	cbz	r3, 2dd36 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2dd2a:	2302      	movs	r3, #2
   2dd2c:	e020      	b.n	2dd70 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2dd2e:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dd32:	681b      	ldr	r3, [r3, #0]
   2dd34:	bb8b      	cbnz	r3, 2dd9a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2dd36:	bb47      	cbnz	r7, 2dd8a <register_events+0xae>
   2dd38:	7823      	ldrb	r3, [r4, #0]
   2dd3a:	b333      	cbz	r3, 2dd8a <register_events+0xae>
	switch (event->type) {
   2dd3c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2dd40:	f003 031f 	and.w	r3, r3, #31
   2dd44:	3b01      	subs	r3, #1
   2dd46:	2b07      	cmp	r3, #7
   2dd48:	d830      	bhi.n	2ddac <register_events+0xd0>
   2dd4a:	e8df f003 	tbb	[pc, r3]
   2dd4e:	2833      	.short	0x2833
   2dd50:	2f2f282f 	.word	0x2f2f282f
   2dd54:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2dd56:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dd5a:	689b      	ldr	r3, [r3, #8]
   2dd5c:	2b00      	cmp	r3, #0
   2dd5e:	d0ea      	beq.n	2dd36 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2dd60:	2301      	movs	r3, #1
   2dd62:	e005      	b.n	2dd70 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2dd64:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dd68:	6a1b      	ldr	r3, [r3, #32]
   2dd6a:	2b00      	cmp	r3, #0
   2dd6c:	d0e3      	beq.n	2dd36 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2dd6e:	2310      	movs	r3, #16
	event->state |= state;
   2dd70:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2dd74:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2dd78:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2dd7c:	430b      	orrs	r3, r1
   2dd7e:	f363 3252 	bfi	r2, r3, #13, #6
   2dd82:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2dd86:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2dd8a:	f389 8811 	msr	BASEPRI, r9
   2dd8e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2dd92:	3501      	adds	r5, #1
   2dd94:	f10a 0a14 	add.w	sl, sl, #20
   2dd98:	e7a9      	b.n	2dcee <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2dd9a:	2304      	movs	r3, #4
   2dd9c:	e7e8      	b.n	2dd70 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2dd9e:	f8da 0010 	ldr.w	r0, [sl, #16]
   2dda2:	4622      	mov	r2, r4
   2dda4:	4651      	mov	r1, sl
   2dda6:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2dda8:	f7ff ff69 	bl	2dc7e <add_event>
	event->poller = poller;
   2ddac:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2ddb0:	3601      	adds	r6, #1
   2ddb2:	e7ea      	b.n	2dd8a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2ddb4:	f8da 0010 	ldr.w	r0, [sl, #16]
   2ddb8:	4622      	mov	r2, r4
   2ddba:	4651      	mov	r1, sl
   2ddbc:	e7f4      	b.n	2dda8 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2ddbe:	f8da 0010 	ldr.w	r0, [sl, #16]
   2ddc2:	4622      	mov	r2, r4
   2ddc4:	4651      	mov	r1, sl
   2ddc6:	3024      	adds	r0, #36	; 0x24
   2ddc8:	e7ee      	b.n	2dda8 <register_events+0xcc>

0002ddca <signal_poll_event>:
{
   2ddca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2ddce:	6884      	ldr	r4, [r0, #8]
{
   2ddd0:	4605      	mov	r5, r0
   2ddd2:	460e      	mov	r6, r1
	if (poller != NULL) {
   2ddd4:	b144      	cbz	r4, 2dde8 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2ddd6:	7863      	ldrb	r3, [r4, #1]
   2ddd8:	2b01      	cmp	r3, #1
   2ddda:	d136      	bne.n	2de4a <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2dddc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2dde0:	f013 0302 	ands.w	r3, r3, #2
   2dde4:	d10a      	bne.n	2ddfc <signal_poll_event+0x32>
		poller->is_polling = false;
   2dde6:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2dde8:	68eb      	ldr	r3, [r5, #12]
   2ddea:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2ddee:	430e      	orrs	r6, r1
	event->poller = NULL;
   2ddf0:	2000      	movs	r0, #0
	event->state |= state;
   2ddf2:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2ddf6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2ddf8:	60eb      	str	r3, [r5, #12]
	return retcode;
   2ddfa:	e00b      	b.n	2de14 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2ddfc:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2de00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2de04:	bf08      	it	eq
   2de06:	f112 0f02 	cmneq.w	r2, #2
   2de0a:	d105      	bne.n	2de18 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2de0c:	2300      	movs	r3, #0
   2de0e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2de10:	f06f 000a 	mvn.w	r0, #10
}
   2de14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2de18:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2de1c:	4640      	mov	r0, r8
   2de1e:	f7ff fd99 	bl	2d954 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2de22:	2e08      	cmp	r6, #8
   2de24:	bf0c      	ite	eq
   2de26:	f06f 0303 	mvneq.w	r3, #3
   2de2a:	2300      	movne	r3, #0
   2de2c:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2de2e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2de32:	06db      	lsls	r3, r3, #27
   2de34:	d102      	bne.n	2de3c <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2de36:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2de3a:	b10f      	cbz	r7, 2de40 <signal_poll_event+0x76>
		poller->is_polling = false;
   2de3c:	2300      	movs	r3, #0
   2de3e:	e7d2      	b.n	2dde6 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2de40:	4640      	mov	r0, r8
   2de42:	f7ff fdb7 	bl	2d9b4 <z_ready_thread>
		poller->is_polling = false;
   2de46:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2de48:	e7ce      	b.n	2dde8 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2de4a:	2b02      	cmp	r3, #2
   2de4c:	d1f6      	bne.n	2de3c <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2de4e:	7823      	ldrb	r3, [r4, #0]
   2de50:	2b00      	cmp	r3, #0
   2de52:	d0c9      	beq.n	2dde8 <signal_poll_event+0x1e>
   2de54:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2de58:	2f00      	cmp	r7, #0
   2de5a:	d0f4      	beq.n	2de46 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2de5c:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2de60:	f1a4 0914 	sub.w	r9, r4, #20
   2de64:	f104 0014 	add.w	r0, r4, #20
   2de68:	f7ff fe5b 	bl	2db22 <z_abort_timeout>
		twork->poll_result = 0;
   2de6c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2de70:	4649      	mov	r1, r9
   2de72:	4638      	mov	r0, r7
   2de74:	f7ff fcda 	bl	2d82c <k_work_submit_to_queue>
		poller->is_polling = false;
   2de78:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2de7c:	e7b4      	b.n	2dde8 <signal_poll_event+0x1e>

0002de7e <clear_event_registrations>:
	while (num_events--) {
   2de7e:	2314      	movs	r3, #20
{
   2de80:	b5f0      	push	{r4, r5, r6, r7, lr}
   2de82:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2de86:	2400      	movs	r4, #0
   2de88:	2601      	movs	r6, #1
	while (num_events--) {
   2de8a:	b901      	cbnz	r1, 2de8e <clear_event_registrations+0x10>
}
   2de8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2de8e:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2de92:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2de96:	f003 031f 	and.w	r3, r3, #31
   2de9a:	2b08      	cmp	r3, #8
   2de9c:	f1a0 0714 	sub.w	r7, r0, #20
   2dea0:	d80d      	bhi.n	2debe <clear_event_registrations+0x40>
   2dea2:	fa06 f303 	lsl.w	r3, r6, r3
   2dea6:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2deaa:	d008      	beq.n	2debe <clear_event_registrations+0x40>
	return node->next != NULL;
   2deac:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2deb0:	b12b      	cbz	r3, 2debe <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2deb2:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2deb6:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2deb8:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2deba:	e940 4405 	strd	r4, r4, [r0, #-20]
   2debe:	f382 8811 	msr	BASEPRI, r2
   2dec2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2dec6:	f04f 0320 	mov.w	r3, #32
   2deca:	f3ef 8211 	mrs	r2, BASEPRI
   2dece:	f383 8812 	msr	BASEPRI_MAX, r3
   2ded2:	f3bf 8f6f 	isb	sy
   2ded6:	3901      	subs	r1, #1
   2ded8:	4638      	mov	r0, r7
   2deda:	e7d6      	b.n	2de8a <clear_event_registrations+0xc>

0002dedc <k_poll_event_init>:
{
   2dedc:	b510      	push	{r4, lr}
	event->type = type;
   2dede:	04d2      	lsls	r2, r2, #19
   2dee0:	0209      	lsls	r1, r1, #8
   2dee2:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2dee6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2deea:	430a      	orrs	r2, r1
   2deec:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2deee:	2400      	movs	r4, #0
	event->type = type;
   2def0:	430a      	orrs	r2, r1
	event->obj = obj;
   2def2:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2def6:	6084      	str	r4, [r0, #8]
}
   2def8:	bd10      	pop	{r4, pc}

0002defa <z_handle_obj_poll_events>:
{
   2defa:	4603      	mov	r3, r0
	return list->head == list;
   2defc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2defe:	4283      	cmp	r3, r0
   2df00:	d008      	beq.n	2df14 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2df02:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2df06:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2df08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2df0a:	2300      	movs	r3, #0
	node->prev = NULL;
   2df0c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2df10:	f7ff bf5b 	b.w	2ddca <signal_poll_event>
}
   2df14:	4770      	bx	lr

0002df16 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2df16:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2df18:	e9c0 0000 	strd	r0, r0, [r0]
   2df1c:	6083      	str	r3, [r0, #8]
}
   2df1e:	4770      	bx	lr

0002df20 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2df20:	2300      	movs	r3, #0
   2df22:	6083      	str	r3, [r0, #8]
}
   2df24:	4770      	bx	lr

0002df26 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   2df26:	6883      	ldr	r3, [r0, #8]
   2df28:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   2df2a:	68c3      	ldr	r3, [r0, #12]
   2df2c:	6013      	str	r3, [r2, #0]
}
   2df2e:	4770      	bx	lr

0002df30 <k_free>:
	if (ptr != NULL) {
   2df30:	b120      	cbz	r0, 2df3c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2df32:	1f01      	subs	r1, r0, #4
   2df34:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2df38:	f7ff baa9 	b.w	2d48e <k_heap_free>
}
   2df3c:	4770      	bx	lr

0002df3e <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2df3e:	4770      	bx	lr

0002df40 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2df40:	f7f5 b8c4 	b.w	230cc <SystemInit>
